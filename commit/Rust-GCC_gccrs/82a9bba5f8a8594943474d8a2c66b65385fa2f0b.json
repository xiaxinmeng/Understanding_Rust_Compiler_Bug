{"sha": "82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhOWJiYTVmOGE4NTk0OTQzNDc0ZDhhMmM2NmI2NTM4NWZhMmYwYg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-11-08T15:42:45Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-11-08T15:42:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r30451", "tree": {"sha": "aac12f390581b1c5c53b2534189e03747acbb392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aac12f390581b1c5c53b2534189e03747acbb392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/comments", "author": null, "committer": null, "parents": [{"sha": "674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674fdc14b3a2a3a490a20ad6d2856c5fb0b3da1b"}], "stats": {"total": 151, "additions": 37, "deletions": 114}, "files": [{"sha": "20e83f67a62fd2c7e874447472d4f24f75f6b8f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "patch": "@@ -6,6 +6,12 @@ Mon Nov  8 15:38:41 1999  Nick Clifton  <nickc@cygnus.com>\n \t* config/v850/v850.c: Move prototypes to v850-protos.h\n \t* config/v850/v850.md: Fix compile time warnings.\n \n+\t* config/fr30/fr30-protos.h: New file: Prototypes for functions\n+\tdefined in fr30.c\n+\t* config/fr30/fr30.h: Move prototypes to fr30-protos.h\n+\t* config/fr30/fr30.c: Fix compile time warnings.\n+\t* config/fr30/fr30.md: Fix compile time warnings.\n+\n Mon Nov  8 07:25:37 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (get_containing_scope): Declare it."}, {"sha": "e03ea5bb8fde1786fc405a01545e93b7c3cc1505", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"except.h\"\n #include \"function.h\"\n+#include \"fr30-protos.h\"\n \n /*}}}*/\n /*{{{  Function Prologues & Epilogues */ \n@@ -398,7 +399,7 @@ void\n fr30_setup_incoming_varargs (arg_regs_used_so_far, int_mode, type, pretend_size)\n      CUMULATIVE_ARGS arg_regs_used_so_far;\n      int             int_mode;\n-     tree            type;\n+     tree            type ATTRIBUTE_UNUSED;\n      int *           pretend_size;\n {\n   enum machine_mode mode = (enum machine_mode)int_mode;\n@@ -576,7 +577,7 @@ fr30_print_operand (file, x, code)\n       switch (GET_CODE (x0))\n \t{\n \tcase REG:\n-\t  if (REGNO (x0) >= (sizeof (reg_names) / sizeof (reg_names[0])))\n+\t  if ((unsigned) REGNO (x0) >= (sizeof (reg_names) / sizeof (reg_names[0])))\n \t    abort ();\n \t  fprintf (file, \"@%s\", reg_names [REGNO (x0)]);\n \t  break;\n@@ -786,6 +787,10 @@ fr30_va_arg (valist, type)\n /*}}}*/\n /*{{{  Operand predicates */ \n \n+#ifndef Mmode\n+#define Mmode enum machine_mode\n+#endif\n+\n /* Returns true if OPERAND is an integer value suitable for use in\n    an ADDSP instruction.  */\n int"}, {"sha": "1bdd0d65a2cc40ad9a18e07717d0b115c95d7dc5", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 9, "deletions": 98, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "patch": "@@ -30,36 +30,6 @@ Boston, MA 02111-1307, USA.  */\n /* Include prototyping macros */\n #include \"gansidecl.h\"\n \n-/*}}}*/ \f\n-/*{{{  Forward strcuture declarations for use in prototypes.  */ \n-\n-#ifdef BUFSIZ\t\t/* stdio.h has been included, ok to use FILE * */\n-#define STDIO_PROTO(ARGS) PROTO(ARGS)\n-#else\n-#define STDIO_PROTO(ARGS) ()\n-#endif\n-\n-#ifndef RTX_CODE\n-struct rtx_def;\n-#define Rtx struct rtx_def *\n-#else\n-#define Rtx rtx\n-#endif\n-\n-#ifndef TREE_CODE\n-union tree_node;\n-#define Tree union tree_node *\n-#else\n-#define Tree tree\n-#endif\n-\n-#ifndef HAVE_MACHINE_MODES\n-#include \"hwint.h\"\n-#include \"machmode.h\"\n-#endif\n-\n-#define Mmode enum machine_mode\n-\n /*}}}*/ \f\n /*{{{  Driver configuration */ \n \n@@ -585,15 +555,15 @@ enum reg_class\n    containing several integers.  Each sub-initializer must be suitable as an\n    initializer for the type `HARD_REG_SET' which is defined in\n    `hard-reg-set.h'.  */\n-#define REG_CLASS_CONTENTS \t\t\t\\\n-{ \t\t\t\t\t\t\\\n-  0,\t\t\t\t\t\t\\\n-  1 << MD_LOW_REGNUM,\t\t\t\t\\\n-  (1 << MD_LOW_REGNUM) | (1 << MD_HIGH_REGNUM),\t\\\n-  (1 << 8) - 1,\t\t\t\t\t\\\n-  ((1 << 8) - 1) << 8,\t\t\t\t\\\n-  (1 << CONDITION_CODE_REGNUM) - 1,\t\t\\\n-  (1 << FIRST_PSEUDO_REGISTER) - 1\t\t\\\n+#define REG_CLASS_CONTENTS \t\t\t\t\\\n+{ \t\t\t\t\t\t\t\\\n+  { 0 },\t\t\t\t\t\t\\\n+  { 1 << MD_LOW_REGNUM },\t\t\t\t\\\n+  { (1 << MD_LOW_REGNUM) | (1 << MD_HIGH_REGNUM) },\t\\\n+  { (1 << 8) - 1 },\t\t\t\t\t\\\n+  { ((1 << 8) - 1) << 8 },\t\t\t\t\\\n+  { (1 << CONDITION_CODE_REGNUM) - 1 },\t\t\t\\\n+  { (1 << FIRST_PSEUDO_REGISTER) - 1 }\t\t\t\\\n }\n \n /* A C expression whose value is a register class containing hard register\n@@ -1301,8 +1271,6 @@ typedef int CUMULATIVE_ARGS;\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \t\\\n   fr30_function_arg_partial_nregs (CUM, MODE, TYPE, NAMED)\n \n-extern int fr30_function_arg_partial_nregs PROTO ((CUMULATIVE_ARGS, int, Tree, int));\n-\n /* A C expression that indicates when an argument must be passed by reference.\n    If nonzero for an argument, a copy of that argument is made in memory and a\n    pointer to the argument is passed instead of the argument itself.  The\n@@ -1373,8 +1341,6 @@ extern int fr30_function_arg_partial_nregs PROTO ((CUMULATIVE_ARGS, int, Tree, i\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n   (CUM) += (NAMED) * fr30_num_arg_regs (MODE, TYPE)\n \n-extern int fr30_num_arg_regs PROTO ((int, Tree));\n-\n /* If defined, a C expression which determines whether, and in which direction,\n    to pad out an argument with extra space.  The value should be of type `enum\n    direction': either `upward' to pad above the argument, `downward' to pad\n@@ -1934,9 +1900,6 @@ extern int fr30_num_arg_regs PROTO ((int, Tree));\n   if (! SECOND_TIME) \\\n     fr30_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)\n \n-extern void fr30_setup_incoming_varargs\n-  PROTO ((CUMULATIVE_ARGS, int, Tree, int *));\n-\n /* Define this macro if the location where a function argument is passed\n    depends on whether or not it is a named argument.\n \n@@ -2457,39 +2420,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    This macro is not used on machines that do not use `cc0'.  */\n /* #define CC_STATUS_MDEP_INIT */\n \n-/* A C compound statement to set the components of `cc_status' appropriately\n-   for an insn INSN whose body is EXP.  It is this macro's responsibility to\n-   recognize insns that set the condition code as a byproduct of other activity\n-   as well as those that explicitly set `(cc0)'.\n-\n-   This macro is not used on machines that do not use `cc0'.\n-\n-   If there are insns that do not set the condition code but do alter other\n-   machine registers, this macro must check to see whether they invalidate the\n-   expressions that the condition code is recorded as reflecting.  For example,\n-   on the 68000, insns that store in address registers do not set the condition\n-   code, which means that usually `NOTICE_UPDATE_CC' can leave `cc_status'\n-   unaltered for such insns.  But suppose that the previous insn set the\n-   condition code based on location `a4@(102)' and the current insn stores a\n-   new value in `a4'.  Although the condition code is not changed by this, it\n-   will no longer be true that it reflects the contents of `a4@(102)'.\n-   Therefore, `NOTICE_UPDATE_CC' must alter `cc_status' in this case to say\n-   that nothing is known about the condition code value.\n-\n-   The definition of `NOTICE_UPDATE_CC' must be prepared to deal with the\n-   results of peephole optimization: insns whose patterns are `parallel' RTXs\n-   containing various `reg', `mem' or constants which are just the operands.\n-   The RTL structure of these insns is not sufficient to indicate what the\n-   insns actually do.  What `NOTICE_UPDATE_CC' should do when it sees one is\n-   just to run `CC_STATUS_INIT'.\n-\n-   A possible definition of `NOTICE_UPDATE_CC' is to call a function that looks\n-   at an attribute named, for example, `cc'.  This\n-   avoids having detailed information about patterns in two places, the `md'\n-   file and in `NOTICE_UPDATE_CC'.  */\n-/* #define NOTICE_UPDATE_CC(EXP, INSN) fr30_notice_update_cc (INSN)\n-  extern int fr30_notice_update_cc PROTO ((Rtx)); */\n-\n /* A list of names to be used for additional modes for condition code values in\n    registers.  These names are added to `enum\n    machine_mode' and all have class `MODE_CC'.  By convention, they should\n@@ -3655,8 +3585,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the punctuation character for CODE.  */\n #define PRINT_OPERAND(STREAM, X, CODE)\tfr30_print_operand (STREAM, X, CODE)\n \n-extern void fr30_print_operand STDIO_PROTO((FILE *, Rtx, int));\n-\n /* A C expression which evaluates to true if CODE is a valid punctuation\n    character for use in the `PRINT_OPERAND' macro.  If\n    `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no punctuation\n@@ -3672,7 +3600,6 @@ extern void fr30_print_operand STDIO_PROTO((FILE *, Rtx, int));\n    `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n    then check for it here.  *Note Assembler Format::.  */\n #define PRINT_OPERAND_ADDRESS(STREAM, X) fr30_print_operand_address (STREAM, X)\n-extern void fr30_print_operand_address STDIO_PROTO((FILE *, Rtx));\n \n /* A C statement, to be executed after all slot-filler instructions have been\n    output.  If necessary, call `dbr_sequence_length' to determine the number of\n@@ -4472,22 +4399,6 @@ extern struct rtx_def * fr30_compare_op1;\n   { \"sp_displacement_operand\",\t{ CONST_INT }},\t\t\\\n   { \"add_immediate_operand\",\t{ REG, CONST_INT }},\n \n-/*}}}*/ \f\n-/*{{{  Functions defined in fr30.c */\n-\n-extern void fr30_expand_prologue PROTO ((void));\n-extern void fr30_expand_epilogue PROTO ((void));\n-extern unsigned int fr30_compute_frame_size PROTO ((int, int));\n-extern int fr30_check_multiple_regs PROTO ((Rtx *, int, int));\n-extern Rtx fr30_va_arg PROTO ((Tree, Tree));\n-#ifndef NO_MD_PROTOTYPES\n-extern int stack_add_operand        PROTO ((Rtx, Mmode));\n-extern int add_immediate_operand    PROTO ((Rtx, Mmode));\n-extern int high_register_operand    PROTO ((Rtx, Mmode));\n-extern int low_register_operand     PROTO ((Rtx, Mmode));\n-extern int call_operand             PROTO ((Rtx, Mmode));\n-#endif\n-\n /*}}}*/ \f\n \n /* Local Variables: */"}, {"sha": "8dcd782af5d29b46731d6bd6f0408bb97cac4dca", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a9bba5f8a8594943474d8a2c66b65385fa2f0b/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=82a9bba5f8a8594943474d8a2c66b65385fa2f0b", "patch": "@@ -304,7 +304,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\"  \"\")\n \t(match_operand:SI 1 \"immediate_operand\" \"\"))]\n-   \"(INTVAL (operands[1]) < 0) && (INTVAL (operands[1]) & 0x00ffffff == 0)\"\n+   \"(INTVAL (operands[1]) < 0) && ((INTVAL (operands[1]) & 0x00ffffff) == 0)\"\n    [(set:SI (match_dup 0) (match_dup 2))\n     (parallel [(set:SI (match_dup 0) (ashift:SI (match_dup 0) (const_int 24)))\n \t       (clobber (reg:CC 16))])]\n@@ -533,8 +533,8 @@\n   \"\"\n   \"*\n   {\n-  char *         ldi_instr;\n-  char *          tmp_reg;\n+  char *          ldi_instr;\n+  const char *    tmp_reg;\n   static char     buffer[100];\n   REAL_VALUE_TYPE d;\n \n@@ -1145,9 +1145,9 @@\n       return \\\"b%b0%#\\\\t%l1\\\";\n     else\n       {\n-        static char buffer [100];\n-\tchar *      tmp_reg; \n-\tchar *      ldi_insn;\n+        static char   buffer [100];\n+\tconst char *  tmp_reg; \n+\tchar *        ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n \t\n@@ -1199,9 +1199,9 @@\n       return \\\"b%B0%#\\\\t%l1 \\\";\n     else\n       {\n-        static char buffer [100];\n-\tchar *      tmp_reg; \n-\tchar *      ldi_insn;\n+        static char   buffer [100];\n+\tconst char *  tmp_reg; \n+\tchar *        ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n \t\n@@ -1262,17 +1262,18 @@\n ;; For a description of the computation of the length \n ;; attribute see the branch patterns above.\n (define_insn \"jump\"\n-  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n+  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n+   (clobber (reg:SI 0))]\n   \"\"\n   \"*\n   {\n     if (get_attr_length (insn) == 2)\n        return \\\"bra%#\\\\t%0\\\";\n     else\n       {\n-        static char buffer [100];\n-\tchar *      tmp_reg; \n-\tchar *      ldi_insn;\n+        static char   buffer [100];\n+\tconst char *  tmp_reg; \n+\tchar *        ldi_insn;\n \t\n         tmp_reg = reg_names [COMPILER_SCRATCH_REGISTER];\n \n@@ -1320,7 +1321,7 @@\n ;; some cases, it might be necessary to emit a barrier instruction as the last\n ;; insn to prevent such scheduling.\n (define_expand \"prologue\"\n-  [(const_int 0)]\n+  [(clobber (const_int 0))]\n   \"\"\n   \"{\n   fr30_expand_prologue ();"}]}