{"sha": "61c71a62453e4f2def5d94bdb2b293fcec463c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjNzFhNjI0NTNlNGYyZGVmNWQ5NGJkYjJiMjkzZmNlYzQ2M2MxNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T22:23:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T23:53:09Z"}, "message": "libstdc++: Define (and use) _GLIBCXX_HAVE_ATOMIC_WAIT\n\nIn order to simplify the preprocessor checks for whether __atomic_wait\nis available, this commit does:\n\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n\nThe original was wrong anyway, as it should have used 'defined' to check\n_GLIBCXX_HAVE_LINUX_FUTEX (for consistency with how that's used\nelsewhere).\n\nThe new macro is defined in <bits/atomic_wait.h> when the file is\ndefines __atomic_wait and related facilities. All other code that\ndepends on those features can just check the one macro.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_wait.h (_GLIBCXX_HAVE_ATOMIC_WAIT):\n\tDefine.\n\t* include/bits/atomic_base.h: Check _GLIBCXX_HAVE_ATOMIC_WAIT.\n\t* include/bits/atomic_timed_wait.h: Likewise.\n\t* include/bits/semaphore_base.h: Likewise.\n\t* include/std/atomic: Likewise.\n\t* include/std/latch: Likewise.\n\t* include/std/semaphore: Likewise.", "tree": {"sha": "822686c18c7b1d3ca3321b383d5c50426a14160a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/822686c18c7b1d3ca3321b383d5c50426a14160a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c71a62453e4f2def5d94bdb2b293fcec463c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c71a62453e4f2def5d94bdb2b293fcec463c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c71a62453e4f2def5d94bdb2b293fcec463c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c71a62453e4f2def5d94bdb2b293fcec463c14/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71988274865bf049c7705ce33350661b75f0af74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71988274865bf049c7705ce33350661b75f0af74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71988274865bf049c7705ce33350661b75f0af74"}], "stats": {"total": 122, "additions": 57, "deletions": 65}, "files": [{"sha": "d0d962d3047d0a22b838dcf2d2a6f05514b6cdce", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -230,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __v == __GCC_ATOMIC_TEST_AND_SET_TRUEVAL;\n     }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n     _GLIBCXX_ALWAYS_INLINE void\n     wait(bool __old,\n \tmemory_order __m = memory_order_seq_cst) const noexcept\n@@ -253,7 +253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { std::__atomic_notify(&_M_i, true); }\n \n     // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n #endif // C++20\n \n     _GLIBCXX_ALWAYS_INLINE void\n@@ -604,8 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__m));\n       }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__int_type __old,\n \t  memory_order __m = memory_order_seq_cst) const noexcept\n@@ -628,8 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_i, true); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif // C++2a\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n \n       _GLIBCXX_ALWAYS_INLINE __int_type\n       fetch_add(__int_type __i,\n@@ -900,8 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t   int(__m1), int(__m2));\n       }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__pointer_type __old,\n \t   memory_order __m = memory_order_seq_cst) noexcept\n@@ -924,8 +921,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_p, true); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif // C++2a\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n \n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       fetch_add(ptrdiff_t __d,\n@@ -1015,8 +1011,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t int(__success), int(__failure));\n       }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n     template<typename _Tp>\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(const _Tp* __ptr, _Val<_Tp> __old,\n@@ -1041,8 +1036,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(__ptr, true); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif // C++2a\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n \n     template<typename _Tp>\n       _GLIBCXX_ALWAYS_INLINE _Tp\n@@ -1297,7 +1291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(&_M_fp, __old, __m); }\n@@ -1315,7 +1309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(&_M_fp); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1454,7 +1448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1472,7 +1466,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n \n     private:\n       _Tp* _M_ptr;\n@@ -1569,7 +1563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1587,7 +1581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1744,7 +1738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1762,7 +1756,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1873,7 +1867,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1891,7 +1885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n \n       _GLIBCXX_ALWAYS_INLINE value_type\n       fetch_add(difference_type __d,"}, {"sha": "f3a07a3672213b78b79826ae02e951270637cbdd", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -32,10 +32,9 @@\n \n #pragma GCC system_header\n \n-#include <bits/c++config.h>\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n-#include <bits/functional_hash.h>\n #include <bits/atomic_wait.h>\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n+#include <bits/functional_hash.h>\n \n #include <chrono>\n \n@@ -293,5 +292,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n #endif // _GLIBCXX_ATOMIC_TIMED_WAIT_H"}, {"sha": "a59ed8cb4182398cb0ee5cfea38e54fcdb5ed1eb", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -33,7 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#if defined _GLIBCXX_HAS_GTHREADS || defined _GLIBCXX_HAVE_LINUX_FUTEX\n #include <bits/functional_hash.h>\n #include <bits/gthr.h>\n #include <ext/numeric_traits.h>\n@@ -50,6 +50,8 @@\n # include <bits/std_mutex.h>  // std::mutex, std::__condvar\n #endif\n \n+// Other headers use this to check for the facilities defined in this header.\n+#define _GLIBCXX_HAVE_ATOMIC_WAIT 1\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "f2984236e0333a2c11f2e2f778cb79132f692223", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -32,9 +32,8 @@\n \n #pragma GCC system_header\n \n-#include <bits/c++config.h>\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n #include <bits/atomic_base.h>\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n #include <bits/atomic_timed_wait.h>\n \n #include <ext/numeric_traits.h>\n@@ -298,5 +297,5 @@ template<ptrdiff_t __least_max_value>\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n #endif // _GLIBCXX_SEMAPHORE_BASE_H"}, {"sha": "664af023d775231b5dc1ac833cab69bbbbb7bd02", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -164,21 +164,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    memory_order __m = memory_order_seq_cst) volatile noexcept\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n-    void wait(bool __old, memory_order __m = memory_order_seq_cst) const\n-      noexcept\n+#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+    void\n+    wait(bool __old, memory_order __m = memory_order_seq_cst) const noexcept\n     { _M_base.wait(__old, __m); }\n \n     // TODO add const volatile overload\n \n-    void notify_one() const noexcept\n+    void\n+    notify_one() const noexcept\n     { _M_base.notify_one(); }\n \n-    void notify_all() const noexcept\n+    void\n+    notify_all() const noexcept\n     { _M_base.notify_all(); }\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n   };\n \n #if __cplusplus <= 201703L\n@@ -380,9 +380,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return compare_exchange_strong(__e, __i, __m,\n                                        __cmpexch_failure_order(__m)); }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n-    void wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n+#if __cplusplus > 201703L && defined _GLIBCXX_HAVE_ATOMIC_WAIT\n+    void\n+    wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n     {\n       std::__atomic_wait(&_M_i, __old,\n \t\t\t [__m, this, __old]\n@@ -397,13 +397,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // TODO add const volatile overload\n \n-    void notify_one() const noexcept\n+    void\n+    notify_one() const noexcept\n     { std::__atomic_notify(&_M_i, false); }\n \n-    void notify_all() const noexcept\n+    void\n+    notify_all() const noexcept\n     { std::__atomic_notify(&_M_i, true); }\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif // C++20\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n \n     };\n #undef _GLIBCXX20_INIT\n@@ -643,21 +644,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    __cmpexch_failure_order(__m));\n       }\n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n-    void wait(__pointer_type __old,\n-\t      memory_order __m = memory_order_seq_cst) noexcept\n+#if __cplusplus > 201703L && _GLIBCXX_HAVE_ATOMIC_WAIT\n+    void\n+    wait(__pointer_type __old, memory_order __m = memory_order_seq_cst) noexcept\n     { _M_b.wait(__old, __m); }\n \n     // TODO add const volatile overload\n \n-    void notify_one() const noexcept\n+    void\n+    notify_one() const noexcept\n     { _M_b.notify_one(); }\n \n-    void notify_all() const noexcept\n+    void\n+    notify_all() const noexcept\n     { _M_b.notify_all(); }\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n       __pointer_type\n       fetch_add(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) noexcept\n@@ -1411,8 +1412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n-#if __cplusplus > 201703L\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#if __cplusplus > 201703L && _GLIBCXX_HAVE_ATOMIC_WAIT\n   template<typename _Tp>\n     inline void\n     atomic_wait(const atomic<_Tp>* __a,\n@@ -1435,9 +1435,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     atomic_notify_all(atomic<_Tp>* __a) noexcept\n     { __a->notify_all(); }\n-\n-#endif // GTHREADS || LINUX_FUTEX\n-#endif // C++2a\n+#endif // C++20 && HAVE_ATOMIC_WAIT\n \n   // Function templates for atomic_integral and atomic_pointer operations only.\n   // Some operations (and, or, xor) are only available for atomic integrals,"}, {"sha": "2684b72288f141856ec3d3cad39bccf183ae7fd6", "filename": "libstdc++-v3/include/std/latch", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flatch?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -36,7 +36,7 @@\n #include <bits/atomic_base.h>\n #include <ext/numeric_traits.h>\n \n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -89,6 +89,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n #endif // __cplusplus > 201703L\n #endif // _GLIBCXX_LATCH"}, {"sha": "184c7c2867c9f55c177206df626933e4dba5c067", "filename": "libstdc++-v3/include/std/semaphore", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c71a62453e4f2def5d94bdb2b293fcec463c14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore?ref=61c71a62453e4f2def5d94bdb2b293fcec463c14", "patch": "@@ -27,13 +27,13 @@\n  */\n \n #ifndef _GLIBCXX_SEMAPHORE\n-#define _GLIBCXX_SEMAPHORE\n+#define _GLIBCXX_SEMAPHORE 1\n \n #pragma GCC system_header\n \n #if __cplusplus > 201703L\n #include <bits/semaphore_base.h>\n-#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+#ifdef _GLIBCXX_HAVE_ATOMIC_WAIT\n #include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -90,6 +90,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  using binary_semaphore = std::counting_semaphore<1>;\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // GTHREADS || LINUX_FUTEX\n+#endif // HAVE_ATOMIC_WAIT\n #endif // C++20\n #endif // _GLIBCXX_SEMAPHORE"}]}