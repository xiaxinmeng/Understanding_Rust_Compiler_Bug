{"sha": "620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwY2Y1ZWE4NGEzZGE0NzMwNDYyYjU1M2M1ZTNjMTdlMzlkOGVkOQ==", "commit": {"author": {"name": "Arkadiusz Drabczyk", "email": "arkadiusz@drabczyk.org", "date": "2015-10-20T05:52:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-20T05:52:00Z"}, "message": "[PATCH] c/67925 - update documentation on `inline'\n\n\t* doc/extend.texi: Update documentation WRT inline functions.\n\nFrom-SVN: r229020", "tree": {"sha": "0b32f7fc33bd759452bc375d91ebd343aab3a6ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b32f7fc33bd759452bc375d91ebd343aab3a6ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620cf5ea84a3da4730462b553c5e3c17e39d8ed9/comments", "author": {"login": "ardrabczyk", "id": 6062257, "node_id": "MDQ6VXNlcjYwNjIyNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6062257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ardrabczyk", "html_url": "https://github.com/ardrabczyk", "followers_url": "https://api.github.com/users/ardrabczyk/followers", "following_url": "https://api.github.com/users/ardrabczyk/following{/other_user}", "gists_url": "https://api.github.com/users/ardrabczyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ardrabczyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ardrabczyk/subscriptions", "organizations_url": "https://api.github.com/users/ardrabczyk/orgs", "repos_url": "https://api.github.com/users/ardrabczyk/repos", "events_url": "https://api.github.com/users/ardrabczyk/events{/privacy}", "received_events_url": "https://api.github.com/users/ardrabczyk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9fb7125e0b0e73cc36ebbff607aa03d6e02ea4"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "7f5cbf0c5a215ac02a3231fd67b925588e8a012d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cf5ea84a3da4730462b553c5e3c17e39d8ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cf5ea84a3da4730462b553c5e3c17e39d8ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "patch": "@@ -1,3 +1,7 @@\n+2015-10-20  Arkadiusz Drabczyk  <arkadiusz@drabczyk.org>\n+\n+\t* doc/extend.texi: Update documentation WRT inline functions.\n+\n 2015-10-20  Alan Modra  <amodra@gmail.com>\n \n \tPR go/66870"}, {"sha": "bdbf51340d2e73bd630f7853ddca44cd56c44fae", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cf5ea84a3da4730462b553c5e3c17e39d8ed9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cf5ea84a3da4730462b553c5e3c17e39d8ed9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=620cf5ea84a3da4730462b553c5e3c17e39d8ed9", "patch": "@@ -7088,21 +7088,19 @@ function are integrated into the caller, and the function's address is\n never used, then the function's own assembler code is never referenced.\n In this case, GCC does not actually output assembler code for the\n function, unless you specify the option @option{-fkeep-inline-functions}.\n-Some calls cannot be integrated for various reasons (in particular,\n-calls that precede the function's definition cannot be integrated, and\n-neither can recursive calls within the definition).  If there is a\n-nonintegrated call, then the function is compiled to assembler code as\n-usual.  The function must also be compiled as usual if the program\n-refers to its address, because that can't be inlined.\n+If there is a nonintegrated call, then the function is compiled to\n+assembler code as usual.  The function must also be compiled as usual if\n+the program refers to its address, because that can't be inlined.\n \n @opindex Winline\n Note that certain usages in a function definition can make it unsuitable\n-for inline substitution.  Among these usages are: variadic functions, use of\n-@code{alloca}, use of variable-length data types (@pxref{Variable Length}),\n-use of computed goto (@pxref{Labels as Values}), use of nonlocal goto,\n-and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n-warns when a function marked @code{inline} could not be substituted,\n-and gives the reason for the failure.\n+for inline substitution.  Among these usages are: variadic functions,\n+use of @code{alloca}, use of computed goto (@pxref{Labels as Values}),\n+use of nonlocal goto, use of nested functions, use of @code{setjmp}, use\n+of @code{__builtin_longjmp} and use of @code{__builtin_return} or\n+@code{__builtin_apply_args}.  Using @option{-Winline} warns when a\n+function marked @code{inline} could not be substituted, and gives the\n+reason for the failure.\n \n @cindex automatic @code{inline} for C++ member fns\n @cindex @code{inline} automatic for C++ member fns"}]}