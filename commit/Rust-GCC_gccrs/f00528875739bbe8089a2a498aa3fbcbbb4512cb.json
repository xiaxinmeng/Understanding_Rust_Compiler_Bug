{"sha": "f00528875739bbe8089a2a498aa3fbcbbb4512cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwNTI4ODc1NzM5YmJlODA4OWEyYTQ5OGFhM2ZiY2JiYjQ1MTJjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-14T22:21:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-14T22:21:33Z"}, "message": "(build_objc_method_call, get_class_reference):\n\nCall assemble_external on anything we are about to generate a call to.\n(get_super_receiver): Likewise.\n(handle_class_ref): Put constant in readonly-data section, not text.\n(build_objc_symtab_template): Correctly build index type for 0-length array.\n\nFrom-SVN: r3734", "tree": {"sha": "055757595b9e9cd65d872f799ccfdcfef4893c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055757595b9e9cd65d872f799ccfdcfef4893c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f00528875739bbe8089a2a498aa3fbcbbb4512cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00528875739bbe8089a2a498aa3fbcbbb4512cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00528875739bbe8089a2a498aa3fbcbbb4512cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00528875739bbe8089a2a498aa3fbcbbb4512cb/comments", "author": null, "committer": null, "parents": [{"sha": "7463703395236ab469763dc332aaa7b615547fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7463703395236ab469763dc332aaa7b615547fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7463703395236ab469763dc332aaa7b615547fbf"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "bfffa7818cf32a03cdbde26ec6b9df1ec638fc6f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00528875739bbe8089a2a498aa3fbcbbb4512cb/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00528875739bbe8089a2a498aa3fbcbbb4512cb/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f00528875739bbe8089a2a498aa3fbcbbb4512cb", "patch": "@@ -681,7 +681,9 @@ build_objc_symtab_template ()\n \n   /* void *defs[cls_def_cnt + cat_def_cnt]; */\n \n-  index = build_index_type (build_int_2 (imp_count + cat_count - 1, 0));\n+  index = build_index_type (build_int_2 (imp_count + cat_count - 1,\n+\t\t\t\t\t imp_count == 0 && cat_count == 0\n+\t\t\t\t\t ? -1 : 0));\n   field_decl = create_builtin_decl (FIELD_DECL,\n \t\t\t\t    build_array_type (ptr_type_node, index),\n \t\t\t\t    \"defs\");\n@@ -2858,6 +2860,7 @@ build_objc_method_call (super_flag, method_prototype, lookup_object, object,\n     {\n       method_params = tree_cons (NULLT, lookup_object,\n \t\t\t\t tree_cons (NULLT, selector, method_params));\n+      assemble_external (sender);\n       return build_function_call (sender, method_params);\n     }\n   else\n@@ -2885,6 +2888,7 @@ build_objc_method_call (super_flag, method_prototype, lookup_object, object,\n \t This will do type checking using the arg types for this method.  */\n       method_params = tree_cons (NULLT, lookup_object,\n \t\t\t\t tree_cons (NULLT, selector, method_params));\n+      assemble_external (sender);\n       retval = build_function_call (sender, method_params);\n \n       /* Restore SENDER's return/argument types.  */\n@@ -2902,6 +2906,7 @@ build_objc_method_call (super_flag, method_prototype, lookup_object, object,\n   object = save_expr (object);\n   selector = save_expr (selector);\n \n+  assemble_external (sender);\n   method\n     = build_function_call (sender,\n \t\t\t   tree_cons (NULLT, lookup_object,\n@@ -2922,6 +2927,7 @@ build_objc_method_call (super_flag, method_prototype, lookup_object, object,\n \t= build_pointer_type (build_function_type (ptr_type_node, NULLT));\n     }\n   /* Pass the object to the method.  */\n+  assemble_external (method);\n   return build_function_call (method,\n \t\t\t      tree_cons (NULLT, object,\n \t\t\t\t\t tree_cons (NULLT, selector,\n@@ -3405,6 +3411,7 @@ get_class_reference (interface)\n \t\t\t    my_build_string (IDENTIFIER_LENGTH (CLASS_NAME (interface)) + 1,\n \t\t\t\t\t     IDENTIFIER_POINTER (CLASS_NAME (interface))));\n \n+  assemble_external (objc_getClass_decl);\n   return build_function_call (objc_getClass_decl, params);\n }\n \f\n@@ -4355,9 +4362,15 @@ get_super_receiver ()\n \t\t\t\t\t\t     IDENTIFIER_POINTER (super_name)));\n \n \t  if (TREE_CODE (method_context) == INSTANCE_METHOD_DECL)\n-\t    funcCall = build_function_call (objc_getClass_decl, params);\n+\t    {\n+\t      assemble_external (objc_getClass_decl);\n+\t      funcCall = build_function_call (objc_getClass_decl, params);\n+\t    }\n \t  else\n-\t    funcCall = build_function_call (objc_getMetaClass_decl, params);\n+\t    {\n+\t      assemble_external (objc_getMetaClass_decl);\n+\t      funcCall = build_function_call (objc_getMetaClass_decl, params);\n+\t    }\n \n \t  /* cast! */\n \t  TREE_TYPE (funcCall) = TREE_TYPE (_clsSuper_ref);\n@@ -5122,7 +5135,7 @@ handle_class_ref (chain)\n   rest_of_decl_compilation (decl, 0, 0, 0);\n \n   /* Make following constant read-only (why not)?  */\n-  text_section ();\n+  readonly_data_section ();\n \n   /* Inform the assembler about this new external thing.  */\n   assemble_external (decl);"}]}