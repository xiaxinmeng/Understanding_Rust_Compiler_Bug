{"sha": "07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmYjI0YTNkYWYwYTQ2ZTNlMzljMGJhZDk5ZWFlNmUzNGU1YWEwZg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-08T10:44:22Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-08T10:45:23Z"}, "message": "SVE2: Fix aarch64-sve2-acle-asm tests.\n\nThis fixes a logical inconsistency with the SVE2 ACLE tests where the SVE2 tests\nare checking for SVE support in the assembler instead of SVE2.\n\nThis makes all these tests fail when the user has an SVE enabled assembler but\nnot an SVE2 one.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp\n\t(check_effective_target_aarch64_asm_sve2_ok): New.\n\t* g++.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Use it.\n\t* gcc.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Likewise.", "tree": {"sha": "b2f1d88e8927fee670871855a983e3e582fc1936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f1d88e8927fee670871855a983e3e582fc1936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e811f10b61aa2d26416f3d6a79f024dcd21e895c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e811f10b61aa2d26416f3d6a79f024dcd21e895c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e811f10b61aa2d26416f3d6a79f024dcd21e895c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c3a3a01a7ed913720e31729300dc0a5c99232ec4", "filename": "gcc/testsuite/g++.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp?ref=07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "patch": "@@ -66,7 +66,7 @@ set-torture-options {\n # Main loop.\n set files [glob -nocomplain $srcdir/$gcc_subdir/asm/*.c]\n set save-dg-do-what-default ${dg-do-what-default}\n-if { [check_effective_target_aarch64_asm_sve_ok]\n+if { [check_effective_target_aarch64_asm_sve2_ok]\n      && [check_effective_target_aarch64_variant_pcs] } {\n     set dg-do-what-default assemble\n } else {"}, {"sha": "632d3508e3235516c2f91e65e5143b64d8801ce1", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Faarch64-sve2-acle-asm.exp?ref=07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "patch": "@@ -62,7 +62,7 @@ set-torture-options {\n # Main loop.\n set files [glob -nocomplain $srcdir/$subdir/asm/*.c]\n set save-dg-do-what-default ${dg-do-what-default}\n-if { [check_effective_target_aarch64_asm_sve_ok]\n+if { [check_effective_target_aarch64_asm_sve2_ok]\n      && [check_effective_target_aarch64_variant_pcs] } {\n     set dg-do-what-default assemble\n } else {"}, {"sha": "47d4c45e9eb9008148a5f8f26b3c7dd7292369fc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=07fb24a3daf0a46e3e39c0bad99eae6e34e5aa0f", "patch": "@@ -9735,7 +9735,7 @@ proc check_effective_target_aarch64_tiny { } {\n # various architecture extensions via the .arch_extension pseudo-op.\n \n foreach { aarch64_ext } { \"fp\" \"simd\" \"crypto\" \"crc\" \"lse\" \"dotprod\" \"sve\"\n-\t\t\t  \"i8mm\" \"f32mm\" \"f64mm\" \"bf16\" \"sb\" } {\n+\t\t\t  \"i8mm\" \"f32mm\" \"f64mm\" \"bf16\" \"sb\" \"sve2\" } {\n     eval [string map [list FUNC $aarch64_ext] {\n \tproc check_effective_target_aarch64_asm_FUNC_ok { } {\n \t  if { [istarget aarch64*-*-*] } {"}]}