{"sha": "eec818f42d08887631fb130d015de72451a997aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjODE4ZjQyZDA4ODg3NjMxZmIxMzBkMDE1ZGU3MjQ1MWE5OTdhYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T21:39:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T21:39:00Z"}, "message": "sel-sched.c: Use rtx_insn\n\ngcc/\n2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n\n\t* sel-sched.c (substitute_reg_in_expr): Strengthen local\n\t\"new_insn\" from rtx to rtx_insn *.\n\t(create_insn_rtx_with_rhs): Likewise for return type and for local\n\t\"insn_rtx\".\n\t(create_insn_rtx_with_lhs): Likewise.\n\t(create_speculation_check): Likewise for local \"insn_rtx\".\n\t(implicit_clobber_conflict_p): Likewise for local \"insn\".\n\t(get_expr_cost): Likewise.\n\t(emit_bookkeeping_insn): Likewise for local \"new_insn_rtx\".\n\t(move_cond_jump): Likewise for locals \"next\", \"prev\", \"link\",\n\t\"head\", \"from\", \"to\".\n\nFrom-SVN: r214379", "tree": {"sha": "3b03524fba484df0b5e5b820a826093ce1ee0585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b03524fba484df0b5e5b820a826093ce1ee0585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec818f42d08887631fb130d015de72451a997aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec818f42d08887631fb130d015de72451a997aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec818f42d08887631fb130d015de72451a997aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec818f42d08887631fb130d015de72451a997aa/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23f5bd204d3c0a51d5e5255e1c5fbcccfa3b6629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f5bd204d3c0a51d5e5255e1c5fbcccfa3b6629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f5bd204d3c0a51d5e5255e1c5fbcccfa3b6629"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "7b0886e310d40b298be87461d763ae88e97c64b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec818f42d08887631fb130d015de72451a997aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec818f42d08887631fb130d015de72451a997aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eec818f42d08887631fb130d015de72451a997aa", "patch": "@@ -1,3 +1,17 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sel-sched.c (substitute_reg_in_expr): Strengthen local\n+\t\"new_insn\" from rtx to rtx_insn *.\n+\t(create_insn_rtx_with_rhs): Likewise for return type and for local\n+\t\"insn_rtx\".\n+\t(create_insn_rtx_with_lhs): Likewise.\n+\t(create_speculation_check): Likewise for local \"insn_rtx\".\n+\t(implicit_clobber_conflict_p): Likewise for local \"insn\".\n+\t(get_expr_cost): Likewise.\n+\t(emit_bookkeeping_insn): Likewise for local \"new_insn_rtx\".\n+\t(move_cond_jump): Likewise for locals \"next\", \"prev\", \"link\",\n+\t\"head\", \"from\", \"to\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sched-rgn.c (is_cfg_nonregular): Strengthen locals \"insn\" and"}, {"sha": "83044364b5ed0edeb3b3a77007a4a241e1df163b", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec818f42d08887631fb130d015de72451a997aa/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec818f42d08887631fb130d015de72451a997aa/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=eec818f42d08887631fb130d015de72451a997aa", "patch": "@@ -753,7 +753,7 @@ substitute_reg_in_expr (expr_t expr, insn_t insn, bool undo)\n   /* Substitute if INSN has a form of x:=y and LHS(INSN) occurs in *VI.  */\n   if (rtx_ok_for_substitution_p (old, *where))\n     {\n-      rtx new_insn;\n+      rtx_insn *new_insn;\n       rtx *where_replace;\n \n       /* We should copy these rtxes before substitution.  */\n@@ -864,12 +864,12 @@ rtx_ok_for_substitution_p (rtx what, rtx where)\n \n /* Substitute VI's set source with REGNO.  Returns newly created pattern\n    that has REGNO as its source.  */\n-static rtx\n+static rtx_insn *\n create_insn_rtx_with_rhs (vinsn_t vi, rtx rhs_rtx)\n {\n   rtx lhs_rtx;\n   rtx pattern;\n-  rtx insn_rtx;\n+  rtx_insn *insn_rtx;\n \n   lhs_rtx = copy_rtx (VINSN_LHS (vi));\n \n@@ -945,12 +945,12 @@ replace_dest_with_reg_ok_p (insn_t insn, rtx new_reg)\n }\n \n /* Create a pattern with rhs of VI and lhs of LHS_RTX.  */\n-static rtx\n+static rtx_insn *\n create_insn_rtx_with_lhs (vinsn_t vi, rtx lhs_rtx)\n {\n   rtx rhs_rtx;\n   rtx pattern;\n-  rtx insn_rtx;\n+  rtx_insn *insn_rtx;\n \n   rhs_rtx = copy_rtx (VINSN_RHS (vi));\n \n@@ -1802,7 +1802,7 @@ static insn_t\n create_speculation_check (expr_t c_expr, ds_t check_ds, insn_t orig_insn)\n {\n   rtx check_pattern;\n-  rtx insn_rtx;\n+  rtx_insn *insn_rtx;\n   insn_t insn;\n   basic_block recovery_block;\n   rtx label;\n@@ -2103,7 +2103,8 @@ static bool\n implicit_clobber_conflict_p (insn_t through_insn, expr_t expr)\n {\n   HARD_REG_SET temp;\n-  rtx insn, reg, rhs, pat;\n+  rtx_insn *insn;\n+  rtx reg, rhs, pat;\n   hard_reg_set_iterator hrsi;\n   unsigned regno;\n   bool valid;\n@@ -4327,7 +4328,7 @@ estimate_insn_cost (rtx insn, state_t state)\n static int\n get_expr_cost (expr_t expr, fence_t fence)\n {\n-  rtx insn = EXPR_INSN_RTX (expr);\n+  rtx_insn *insn = EXPR_INSN_RTX (expr);\n \n   if (recog_memoized (insn) < 0)\n     {\n@@ -4797,7 +4798,7 @@ find_seqno_for_bookkeeping (insn_t place_to_insert, insn_t join_point)\n static insn_t\n emit_bookkeeping_insn (insn_t place_to_insert, expr_t c_expr, int new_seqno)\n {\n-  rtx new_insn_rtx = create_copy_of_insn_rtx (EXPR_INSN_RTX (c_expr));\n+  rtx_insn *new_insn_rtx = create_copy_of_insn_rtx (EXPR_INSN_RTX (c_expr));\n \n   vinsn_t new_vinsn\n     = create_vinsn_from_insn_rtx (new_insn_rtx,\n@@ -4925,7 +4926,7 @@ move_cond_jump (rtx insn, bnd_t bnd)\n {\n   edge ft_edge;\n   basic_block block_from, block_next, block_new, block_bnd, bb;\n-  rtx next, prev, link, head;\n+  rtx_insn *next, *prev, *link, *head;\n \n   block_from = BLOCK_FOR_INSN (insn);\n   block_bnd = BLOCK_FOR_INSN (BND_TO (bnd));\n@@ -4972,7 +4973,7 @@ move_cond_jump (rtx insn, bnd_t bnd)\n   head = BB_HEAD (block_new);\n   while (bb != block_from->next_bb)\n     {\n-      rtx from, to;\n+      rtx_insn *from, *to;\n       from = bb == block_bnd ? prev : sel_bb_head (bb);\n       to = bb == block_from ? next : sel_bb_end (bb);\n "}]}