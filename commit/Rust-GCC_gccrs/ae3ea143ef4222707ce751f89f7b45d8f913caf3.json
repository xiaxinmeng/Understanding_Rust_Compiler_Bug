{"sha": "ae3ea143ef4222707ce751f89f7b45d8f913caf3", "node_id": "C_kwDOANBUbNoAKGFlM2VhMTQzZWY0MjIyNzA3Y2U3NTFmODlmN2I0NWQ4ZjkxM2NhZjM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-26T14:42:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-26T21:28:57Z"}, "message": "libstdc++: Move std::iostream_category() definition to new file\n\nThis fixes a missing symbol when the dual ABI is disabled, e.g. for the\nversioned namespace build.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/Makefile.am: Add new source file.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/cxx11-ios_failure.cc (iostream_category):\n\tMove to ...\n\t* src/c++11/ios_errcat.cc: New file.\n\t* testsuite/27_io/ios_base/failure/error_code.cc: Check that\n\tstd::iostream_category() is defined and used for std::io_errc.", "tree": {"sha": "033be710b6bd908baa422842fe242d9b4b3241c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/033be710b6bd908baa422842fe242d9b4b3241c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae3ea143ef4222707ce751f89f7b45d8f913caf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3ea143ef4222707ce751f89f7b45d8f913caf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3ea143ef4222707ce751f89f7b45d8f913caf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3ea143ef4222707ce751f89f7b45d8f913caf3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f56efa94e845db0d5c934ca202295019bf334c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f56efa94e845db0d5c934ca202295019bf334c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f56efa94e845db0d5c934ca202295019bf334c1"}], "stats": {"total": 153, "additions": 103, "deletions": 50}, "files": [{"sha": "ecd46aafc019fb025eec34bf093ec819a45e5947", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=ae3ea143ef4222707ce751f89f7b45d8f913caf3", "patch": "@@ -65,6 +65,7 @@ sources = \\\n \thash_c++0x.cc \\\n \thashtable_c++0x.cc \\\n \tios.cc \\\n+\tios_errcat.cc \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\"}, {"sha": "4db28bd85153dbcf3f2d2cf504030cc8da1e2dee", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=ae3ea143ef4222707ce751f89f7b45d8f913caf3", "patch": "@@ -130,9 +130,10 @@ am__objects_2 = ctype_configure_char.lo ctype_members.lo\n am__objects_3 = chrono.lo codecvt.lo condition_variable.lo \\\n \tcow-stdexcept.lo ctype.lo debug.lo functexcept.lo \\\n \tfunctional.lo futex.lo future.lo hash_c++0x.lo \\\n-\thashtable_c++0x.lo ios.lo limits.lo mutex.lo placeholders.lo \\\n-\trandom.lo regex.lo shared_ptr.lo snprintf_lite.lo \\\n-\tsystem_error.lo thread.lo $(am__objects_1) $(am__objects_2)\n+\thashtable_c++0x.lo ios.lo ios_errcat.lo limits.lo mutex.lo \\\n+\tplaceholders.lo random.lo regex.lo shared_ptr.lo \\\n+\tsnprintf_lite.lo system_error.lo thread.lo $(am__objects_1) \\\n+\t$(am__objects_2)\n @ENABLE_DUAL_ABI_TRUE@am__objects_4 = cow-fstream-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.lo cow-string-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-string-io-inst.lo \\\n@@ -479,6 +480,7 @@ sources = \\\n \thash_c++0x.cc \\\n \thashtable_c++0x.cc \\\n \tios.cc \\\n+\tios_errcat.cc \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\"}, {"sha": "0a81e15e4c0d502735aecb1c5145edb3d11f613e", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=ae3ea143ef4222707ce751f89f7b45d8f913caf3", "patch": "@@ -42,57 +42,10 @@\n # error This file should not be compiled for this configuration.\n #endif\n \n-#if __has_cpp_attribute(clang::require_constant_initialization)\n-#  define __constinit [[clang::require_constant_initialization]]\n-#endif\n-\n-namespace\n-{\n-  struct io_error_category final : std::error_category\n-  {\n-    const char*\n-    name() const noexcept final\n-    { return \"iostream\"; }\n-\n-    _GLIBCXX_DEFAULT_ABI_TAG\n-    std::string\n-    message(int __ec) const final\n-    {\n-      std::string __msg;\n-      switch (std::io_errc(__ec))\n-      {\n-      case std::io_errc::stream:\n-          __msg = \"iostream error\";\n-          break;\n-      default:\n-          __msg = \"Unknown error\";\n-          break;\n-      }\n-      return __msg;\n-    }\n-  };\n-\n-  struct constant_init\n-  {\n-    union {\n-      unsigned char unused;\n-      io_error_category cat;\n-    };\n-    constexpr constant_init() : cat() { }\n-    ~constant_init() { /* do nothing, union member is not destroyed */ }\n-  };\n-\n-  __constinit constant_init io_category_instance{};\n-} // namespace\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  const error_category&\n-  iostream_category() noexcept\n-  { return io_category_instance.cat; }\n-\n   ios_base::failure::failure(const string& __str)\n   : system_error(io_errc::stream, __str) { }\n "}, {"sha": "12192447b8b2ab4cab2ad595e8fe860facc63a20", "filename": "libstdc++-v3/src/c++11/ios_errcat.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios_errcat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios_errcat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios_errcat.cc?ref=ae3ea143ef4222707ce751f89f7b45d8f913caf3", "patch": "@@ -0,0 +1,84 @@\n+// std::iostream_category() definition -*- C++ -*-\n+\n+// Copyright (C) 2014-2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:2011: 27.5.6.5  Error reporting [error.reporting]\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <ios>\n+\n+#if __has_cpp_attribute(clang::require_constant_initialization)\n+#  define __constinit [[clang::require_constant_initialization]]\n+#endif\n+\n+namespace\n+{\n+  struct io_error_category final : std::error_category\n+  {\n+    const char*\n+    name() const noexcept final\n+    { return \"iostream\"; }\n+\n+    _GLIBCXX_DEFAULT_ABI_TAG\n+    std::string\n+    message(int __ec) const final\n+    {\n+      std::string __msg;\n+      switch (std::io_errc(__ec))\n+      {\n+      case std::io_errc::stream:\n+          __msg = \"iostream error\";\n+          break;\n+      default:\n+          __msg = \"Unknown error\";\n+          break;\n+      }\n+      return __msg;\n+    }\n+  };\n+\n+  struct constant_init\n+  {\n+    union {\n+      unsigned char unused;\n+      io_error_category cat;\n+    };\n+    constexpr constant_init() : cat() { }\n+    ~constant_init() { /* do nothing, union member is not destroyed */ }\n+  };\n+\n+  __constinit constant_init io_category_instance{};\n+} // namespace\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  const error_category&\n+  iostream_category() noexcept\n+  { return io_category_instance.cat; }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "696976573947c0f865380b7c64f1ce1af6ebe762", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/error_code.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3ea143ef4222707ce751f89f7b45d8f913caf3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc?ref=ae3ea143ef4222707ce751f89f7b45d8f913caf3", "patch": "@@ -41,8 +41,21 @@ test01()\n   VERIFY( e4.code() == ec );\n }\n \n+[[gnu::noinline,gnu::noipa]]\n+const std::error_category&\n+get_iostream_category()\n+{ return std::iostream_category(); }\n+\n+void\n+test02()\n+{\n+  auto ec = std::make_error_code(std::io_errc::stream);\n+  VERIFY( ec.category() == get_iostream_category() );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}