{"sha": "4ba8a4cb63bb75fd679f903fae35dd562e586d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJhOGE0Y2I2M2JiNzVmZDY3OWY5MDNmYWUzNWRkNTYyZTU4NmQxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-03-25T16:41:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-03-25T16:41:27Z"}, "message": "forward_list.h (_Fwd_list_node_base<>:: _M_transfer_after, [...]): Move out of line...\n\n2009-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (_Fwd_list_node_base<>::\n\t_M_transfer_after, _M_reverse_after): Move out of line...\n\t* include/bits/forward_list.tcc: ... here.\n\t(forward_list<>::reverse): Move inline...\n\t* include/bits/forward_list.h: ... here; minor cosmetic changes.\n\nFrom-SVN: r145069", "tree": {"sha": "7d2fcdb350b0f6921419cc102bfb328fc49480a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d2fcdb350b0f6921419cc102bfb328fc49480a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ba8a4cb63bb75fd679f903fae35dd562e586d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba8a4cb63bb75fd679f903fae35dd562e586d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba8a4cb63bb75fd679f903fae35dd562e586d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba8a4cb63bb75fd679f903fae35dd562e586d19/comments", "author": null, "committer": null, "parents": [{"sha": "e50ea10b75a2af7551b4f25448fa25105019863f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50ea10b75a2af7551b4f25448fa25105019863f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50ea10b75a2af7551b4f25448fa25105019863f"}], "stats": {"total": 147, "additions": 83, "deletions": 64}, "files": [{"sha": "07ce90f5b8555baa6a85a496a255aa70c3ce6c43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ba8a4cb63bb75fd679f903fae35dd562e586d19", "patch": "@@ -1,7 +1,15 @@\n+2009-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (_Fwd_list_node_base<>::\n+\t_M_transfer_after, _M_reverse_after): Move out of line...\n+\t* include/bits/forward_list.tcc: ... here.\n+\t(forward_list<>::reverse): Move inline...\n+\t* include/bits/forward_list.h: ... here; minor cosmetic changes.\n+\n 2009-03-22  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/28277.cc:\n-\tLikewise.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/\n+\t28277.cc: Likewise.\n \t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-3.cc:\n \tLikewise.\n \t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-4.cc:"}, {"sha": "0a4bf3a6a958ee49be361dfc01a19ed72bcd9291", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 28, "deletions": 55, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=4ba8a4cb63bb75fd679f903fae35dd562e586d19", "patch": "@@ -62,52 +62,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         ::other::pointer        _Pointer;\n       typedef typename _Alloc::template rebind<_Fwd_list_node_base<_Alloc> >\n         ::other::const_pointer  _Const_pointer;\n-  \n+\n       _Pointer _M_next;\n-  \n+\n       _Fwd_list_node_base() : _M_next(0) { }\n-  \n+\n       static void\n       swap(_Fwd_list_node_base& __x, _Fwd_list_node_base& __y)\n       { std::swap(__x._M_next, __y._M_next); }\n-  \n+\n       void\n-      _M_transfer_after(_Pointer __bbegin, _Pointer __bend)\n-      { \n-        _Pointer __keep = __bbegin->_M_next;\n-        if (__bend)\n-          {\n-            __bbegin->_M_next = __bend->_M_next;\n-            __bend->_M_next = this->_M_next;\n-          }\n-        else\n-          __bbegin->_M_next = 0;\n-        this->_M_next = __keep;\n-      }\n-  \n+      _M_transfer_after(_Pointer __bbegin);\n+\n       void\n-      _M_transfer_after(_Pointer __bbegin)\n-      {\n-        _Pointer __bend = __bbegin;\n-        while (__bend && __bend->_M_next)\n-          __bend = __bend->_M_next;\n-        _M_transfer_after(__bbegin, __bend);\n-      }\n-  \n+      _M_transfer_after(_Pointer __bbegin, _Pointer __bend);\n+\n       void\n-      _M_reverse_after()\n-      { \n-        _Pointer __tail = this->_M_next;\n-        if (!__tail)\n-          return;\n-        while (_Pointer __temp = __tail->_M_next)\n-          {\n-            _Pointer __keep = this->_M_next;\n-            this->_M_next = __temp;\n-            __tail->_M_next = __temp->_M_next;\n-            this->_M_next->_M_next = __keep;\n-          }\n-      }    \n+      _M_reverse_after();\n     };\n \n   /**\n@@ -159,40 +130,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       reference\n       operator*() const\n-      { return __static_pointer_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return __static_pointer_cast<_Node*>(_M_node)->_M_value; }\n \n       pointer\n       operator->() const\n-      { return &__static_pointer_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return &__static_pointer_cast<_Node*>(_M_node)->_M_value; }\n \n       _Self&\n       operator++()\n       {\n-        this->_M_node = this->_M_node->_M_next;\n+        _M_node = _M_node->_M_next;\n         return *this;\n       }\n \n       _Self\n       operator++(int)\n       {\n         _Self __tmp(*this);\n-        this->_M_node = this->_M_node->_M_next;\n+        _M_node = _M_node->_M_next;\n         return __tmp;\n       }\n \n       bool\n       operator==(const _Self& __x) const\n-      { return this->_M_node == __x._M_node; }\n+      { return _M_node == __x._M_node; }\n \n       bool\n       operator!=(const _Self& __x) const\n-      { return this->_M_node != __x._M_node; }\n+      { return _M_node != __x._M_node; }\n \n       _Self\n       _M_next() const\n       {\n         if (_M_node)\n-          return _Fwd_list_iterator(this->_M_node->_M_next);\n+          return _Fwd_list_iterator(_M_node->_M_next);\n         else\n           return _Fwd_list_iterator(0);\n       }\n@@ -230,40 +201,40 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       reference\n       operator*() const\n-      { return __static_pointer_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return __static_pointer_cast<_Node*>(_M_node)->_M_value; }\n \n       pointer\n       operator->() const\n-      { return &__static_pointer_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return &__static_pointer_cast<_Node*>(_M_node)->_M_value; }\n \n       _Self&\n       operator++()\n       {\n-        this->_M_node = this->_M_node->_M_next;\n+        _M_node = _M_node->_M_next;\n         return *this;\n       }\n \n       _Self\n       operator++(int)\n       {\n         _Self __tmp(*this);\n-        this->_M_node = this->_M_node->_M_next;\n+        _M_node = _M_node->_M_next;\n         return __tmp;\n       }\n \n       bool\n       operator==(const _Self& __x) const\n-      { return this->_M_node == __x._M_node; }\n+      { return _M_node == __x._M_node; }\n \n       bool\n       operator!=(const _Self& __x) const\n-      { return this->_M_node != __x._M_node; }\n+      { return _M_node != __x._M_node; }\n \n       _Self\n       _M_next() const\n       {\n         if (this->_M_node)\n-          return _Fwd_list_const_iterator(this->_M_node->_M_next);\n+          return _Fwd_list_const_iterator(_M_node->_M_next);\n         else\n           return _Fwd_list_const_iterator(0);\n       }\n@@ -777,7 +748,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       reference\n       front()\n       {\n-        _Node* __front = __static_pointer_cast<_Node*>(this->_M_impl._M_head._M_next);\n+        _Node* __front =\n+\t  __static_pointer_cast<_Node*>(this->_M_impl._M_head._M_next);\n         return __front->_M_value;\n       }\n \n@@ -1229,7 +1201,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Reverse the order of elements in the list in linear time.\n        */\n       void\n-      reverse();\n+      reverse()\n+      { this->_M_impl._M_head._M_reverse_after(); }\n \n     private:\n       template<typename _Integer>\n@@ -1328,7 +1301,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp, typename _Alloc>\n     inline void \n     swap(forward_list<_Tp, _Alloc>& __lx,\n-         forward_list<_Tp, _Alloc>&& __ly)\n+\t forward_list<_Tp, _Alloc>&& __ly)\n     { __lx.swap(__ly); }\n \n _GLIBCXX_END_NAMESPACE // namespace std"}, {"sha": "35fb9b30afcb447a2c4f9ac160f380877c347c93", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ba8a4cb63bb75fd679f903fae35dd562e586d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=4ba8a4cb63bb75fd679f903fae35dd562e586d19", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.tcc> -*- C++ -*-\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,6 +36,50 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  template<typename _Alloc>\n+    void\n+    _Fwd_list_node_base<_Alloc>::\n+    _M_transfer_after(_Pointer __bbegin)\n+    {\n+      _Pointer __bend = __bbegin;\n+      while (__bend && __bend->_M_next)\n+\t__bend = __bend->_M_next;\n+      _M_transfer_after(__bbegin, __bend);\n+    }\n+\n+  template<typename _Alloc>\n+    void\n+    _Fwd_list_node_base<_Alloc>::\n+    _M_transfer_after(_Pointer __bbegin, _Pointer __bend)\n+    {\n+      _Pointer __keep = __bbegin->_M_next;\n+      if (__bend)\n+\t{\n+\t  __bbegin->_M_next = __bend->_M_next;\n+\t  __bend->_M_next = _M_next;\n+\t}\n+      else\n+\t__bbegin->_M_next = 0;\n+      _M_next = __keep;\n+    }\n+ \n+  template<typename _Alloc>\n+    void\n+    _Fwd_list_node_base<_Alloc>::\n+    _M_reverse_after()\n+    {\n+      _Pointer __tail = _M_next;\n+      if (!__tail)\n+\treturn;\n+      while (_Pointer __temp = __tail->_M_next)\n+\t{\n+\t  _Pointer __keep = _M_next;\n+\t  _M_next = __temp;\n+\t  __tail->_M_next = __temp->_M_next;\n+\t  _M_next->_M_next = __keep;\n+\t}\n+    }\n+\n  /**\n   *  @brief  Sort the singly linked list starting after this node.\n   *          This node is assumed to be an empty head node (of type\n@@ -411,12 +455,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           }\n       }\n \n-  template<typename _Tp, typename _Alloc>\n-    void\n-    forward_list<_Tp, _Alloc>::\n-    reverse()\n-    { this->_M_impl._M_head._M_reverse_after(); }\n-\n   template<typename _Tp, typename _Alloc>\n     bool\n     operator==(const forward_list<_Tp, _Alloc>& __lx,"}]}