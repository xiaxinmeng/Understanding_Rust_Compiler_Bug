{"sha": "515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "node_id": "C_kwDOANBUbNoAKDUxNWVmODMwOTgzMjVlOWUzYjlmN2U3NGIxMTkxMWZiOWVmNmRhZjI", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-08T10:42:48Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:49Z"}, "message": "aarch64: Use type-qualified builtins for unsigned MLA/MLS intrinsics\n\nDeclare type-qualified builtins and use them for MLA/MLS Neon\nintrinsics that operate on unsigned types. This eliminates lots of\ncasts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n\tqualified builtin generators for unsigned MLA/MLS intrinsics.\n\t* config/aarch64/arm_neon.h (vmla_n_u16): Use type-qualified\n\tbuiltin.\n\t(vmla_n_u32): Likewise.\n\t(vmla_u8): Likewise.\n\t(vmla_u16): Likewise.\n\t(vmla_u32): Likewise.\n\t(vmlaq_n_u16): Likewise.\n\t(vmlaq_n_u32): Likewise.\n\t(vmlaq_u8): Likewise.\n\t(vmlaq_u16): Likewise.\n\t(vmlaq_u32): Likewise.\n\t(vmls_n_u16): Likewise.\n\t(vmls_n_u32): Likewise.\n\t(vmls_u8): Likewise.\n\t(vmls_u16): Likewise.\n\t(vmls_u32): Likewise.\n\t(vmlsq_n_u16): Likewise.\n\t(vmlsq_n_u32): Likewise.\n\t(vmlsq_u8): Likewise.\n\t(vmlsq_u16): Likewise.\n\t(vmlsq_u32): Likewise.", "tree": {"sha": "be1dc8993fe95643c513f74f7a20433afd64587a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be1dc8993fe95643c513f74f7a20433afd64587a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515ef83098325e9e3b9f7e74b11911fb9ef6daf2/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d71d3a317236ab4a69f441cf867a43aeb448150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d71d3a317236ab4a69f441cf867a43aeb448150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d71d3a317236ab4a69f441cf867a43aeb448150"}], "stats": {"total": 84, "additions": 24, "deletions": 60}, "files": [{"sha": "c39f172513fbc021462e38dbf69c0e1b336fea58", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515ef83098325e9e3b9f7e74b11911fb9ef6daf2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515ef83098325e9e3b9f7e74b11911fb9ef6daf2/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "patch": "@@ -238,13 +238,17 @@\n \n   /* Implemented by aarch64_mla<mode>.  */\n   BUILTIN_VDQ_BHSI (TERNOP, mla, 0, NONE)\n+  BUILTIN_VDQ_BHSI (TERNOPU, mla, 0, NONE)\n   /* Implemented by aarch64_mla_n<mode>.  */\n   BUILTIN_VDQHS (TERNOP, mla_n, 0, NONE)\n+  BUILTIN_VDQHS (TERNOPU, mla_n, 0, NONE)\n \n   /* Implemented by aarch64_mls<mode>.  */\n   BUILTIN_VDQ_BHSI (TERNOP, mls, 0, NONE)\n+  BUILTIN_VDQ_BHSI (TERNOPU, mls, 0, NONE)\n   /* Implemented by aarch64_mls_n<mode>.  */\n   BUILTIN_VDQHS (TERNOP, mls_n, 0, NONE)\n+  BUILTIN_VDQHS (TERNOPU, mls_n, 0, NONE)\n \n   /* Implemented by aarch64_shrn<mode>\".  */\n   BUILTIN_VQN (SHIFTIMM, shrn, 0, NONE)"}, {"sha": "538fc3cddffd08bafc36f16e1fe27bb0ba041b42", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 20, "deletions": 60, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515ef83098325e9e3b9f7e74b11911fb9ef6daf2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515ef83098325e9e3b9f7e74b11911fb9ef6daf2/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=515ef83098325e9e3b9f7e74b11911fb9ef6daf2", "patch": "@@ -6608,18 +6608,14 @@ __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_n_u16 (uint16x4_t __a, uint16x4_t __b, uint16_t __c)\n {\n-  return (uint16x4_t) __builtin_aarch64_mla_nv4hi ((int16x4_t) __a,\n-                                                   (int16x4_t) __b,\n-                                                   (int16_t) __c);\n+  return __builtin_aarch64_mla_nv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_n_u32 (uint32x2_t __a, uint32x2_t __b, uint32_t __c)\n {\n-  return (uint32x2_t) __builtin_aarch64_mla_nv2si ((int32x2_t) __a,\n-                                                   (int32x2_t) __b,\n-                                                   (int32_t) __c);\n+  return __builtin_aarch64_mla_nv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -6647,27 +6643,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_u8 (uint8x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  return (uint8x8_t) __builtin_aarch64_mlav8qi ((int8x8_t) __a,\n-                                                (int8x8_t) __b,\n-                                                (int8x8_t) __c);\n+  return __builtin_aarch64_mlav8qi_uuuu (__a, __b,  __c);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_u16 (uint16x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  return (uint16x4_t) __builtin_aarch64_mlav4hi ((int16x4_t) __a,\n-                                                 (int16x4_t) __b,\n-                                                 (int16x4_t) __c);\n+  return __builtin_aarch64_mlav4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmla_u32 (uint32x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  return (uint32x2_t) __builtin_aarch64_mlav2si ((int32x2_t) __a,\n-                                                 (int32x2_t) __b,\n-                                                 (int32x2_t) __c);\n+  return __builtin_aarch64_mlav2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n@@ -6955,18 +6945,14 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_mla_nv8hi ((int16x8_t) __a,\n-                                                   (int16x8_t) __b,\n-                                                   (int16_t) __c);\n+  return __builtin_aarch64_mla_nv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_mla_nv4si ((int32x4_t) __a,\n-                                                   (int32x4_t) __b,\n-                                                   (int32_t) __c);\n+  return __builtin_aarch64_mla_nv4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -6994,27 +6980,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  return (uint8x16_t) __builtin_aarch64_mlav16qi ((int8x16_t) __a,\n-                                                  (int8x16_t) __b,\n-                                                  (int8x16_t) __c);\n+  return __builtin_aarch64_mlav16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_mlav8hi ((int16x8_t) __a,\n-                                                 (int16x8_t) __b,\n-                                                 (int16x8_t) __c);\n+  return __builtin_aarch64_mlav8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlaq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_mlav4si ((int32x4_t) __a,\n-                                                 (int32x4_t) __b,\n-                                                 (int32x4_t) __c);\n+  return __builtin_aarch64_mlav4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline float32x2_t\n@@ -7042,18 +7022,14 @@ __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_u16 (uint16x4_t __a, uint16x4_t __b, uint16_t __c)\n {\n-  return (uint16x4_t) __builtin_aarch64_mls_nv4hi ((int16x4_t) __a,\n-                                                   (int16x4_t) __b,\n-                                                   (int16_t) __c);\n+  return __builtin_aarch64_mls_nv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_n_u32 (uint32x2_t __a, uint32x2_t __b, uint32_t __c)\n {\n-  return (uint32x2_t) __builtin_aarch64_mls_nv2si ((int32x2_t) __a,\n-                                                   (int32x2_t) __b,\n-                                                   (int32_t) __c);\n+  return __builtin_aarch64_mls_nv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -7081,27 +7057,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u8 (uint8x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  return (uint8x8_t) __builtin_aarch64_mlsv8qi ((int8x8_t) __a,\n-                                                (int8x8_t) __b,\n-                                                (int8x8_t) __c);\n+  return __builtin_aarch64_mlsv8qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u16 (uint16x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  return (uint16x4_t) __builtin_aarch64_mlsv4hi ((int16x4_t) __a,\n-                                                 (int16x4_t) __b,\n-                                                 (int16x4_t) __c);\n+  return __builtin_aarch64_mlsv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmls_u32 (uint32x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  return (uint32x2_t) __builtin_aarch64_mlsv2si ((int32x2_t) __a,\n-                                                 (int32x2_t) __b,\n-                                                 (int32x2_t) __c);\n+  return __builtin_aarch64_mlsv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n@@ -7393,18 +7363,14 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_u16 (uint16x8_t __a, uint16x8_t __b, uint16_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_mls_nv8hi ((int16x8_t) __a,\n-                                                   (int16x8_t) __b,\n-                                                   (int16_t) __c);\n+  return __builtin_aarch64_mls_nv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_n_u32 (uint32x4_t __a, uint32x4_t __b, uint32_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_mls_nv4si ((int32x4_t) __a,\n-                                                   (int32x4_t) __b,\n-                                                   (int32_t) __c);\n+  return __builtin_aarch64_mls_nv4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -7432,27 +7398,21 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  return (uint8x16_t) __builtin_aarch64_mlsv16qi ((int8x16_t) __a,\n-                                                  (int8x16_t) __b,\n-                                                  (int8x16_t) __c);\n+  return __builtin_aarch64_mlsv16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  return (uint16x8_t) __builtin_aarch64_mlsv8hi ((int16x8_t) __a,\n-                                                 (int16x8_t) __b,\n-                                                 (int16x8_t) __c);\n+  return __builtin_aarch64_mlsv8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  return (uint32x4_t) __builtin_aarch64_mlsv4si ((int32x4_t) __a,\n-                                                 (int32x4_t) __b,\n-                                                 (int32x4_t) __c);\n+  return __builtin_aarch64_mlsv4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}