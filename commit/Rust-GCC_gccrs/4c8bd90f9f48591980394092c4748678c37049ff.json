{"sha": "4c8bd90f9f48591980394092c4748678c37049ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4YmQ5MGY5ZjQ4NTkxOTgwMzk0MDkyYzQ3NDg2NzhjMzcwNDlmZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-28T11:07:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-28T11:07:48Z"}, "message": "hwint.h (*_HALF_WIDE_INT*): Move to ...\n\n2014-05-28  Richard Biener  <rguenther@suse.de>\n\n\t* hwint.h (*_HALF_WIDE_INT*): Move to ...\n\t* wide-int.cc (HOST_BITS_PER_HALF_WIDE_INT, HOST_HALF_WIDE_INT):\n\t... here and remove the rest.\n\t* hwint.h (HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n\nFrom-SVN: r211013", "tree": {"sha": "3a4f1de180a1cd5c46612ef0a280606f7f72cdc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4f1de180a1cd5c46612ef0a280606f7f72cdc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c8bd90f9f48591980394092c4748678c37049ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8bd90f9f48591980394092c4748678c37049ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8bd90f9f48591980394092c4748678c37049ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8bd90f9f48591980394092c4748678c37049ff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a896172d192d4b2ba73877ba164688dcbdb546c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a896172d192d4b2ba73877ba164688dcbdb546c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a896172d192d4b2ba73877ba164688dcbdb546c9"}], "stats": {"total": 112, "additions": 46, "deletions": 66}, "files": [{"sha": "771e2043266a3a94e15df1233f181341149392d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -1,3 +1,10 @@\n+2014-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* hwint.h (*_HALF_WIDE_INT*): Move to ...\n+\t* wide-int.cc (HOST_BITS_PER_HALF_WIDE_INT, HOST_HALF_WIDE_INT):\n+\t... here and remove the rest.\n+\t* hwint.h (HOST_WIDE_INT_PRINT_*): Define in terms of PRI*64.\n+\n 2014-05-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61335"}, {"sha": "f2ecc04ada5cad56b222bbfe211c4a351f84019d", "filename": "gcc/hwint.h", "status": "modified", "additions": 29, "deletions": 66, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -64,40 +64,6 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n # endif\n #endif\n \n-/* Print support for half a host wide int.  */\n-#define HOST_BITS_PER_HALF_WIDE_INT 32\n-#if HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_LONG\n-# define HOST_HALF_WIDE_INT long\n-# define HOST_HALF_WIDE_INT_PRINT HOST_LONG_FORMAT\n-# define HOST_HALF_WIDE_INT_PRINT_C \"L\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n-# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-#elif HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_INT\n-# define HOST_HALF_WIDE_INT int\n-# define HOST_HALF_WIDE_INT_PRINT \"\"\n-# define HOST_HALF_WIDE_INT_PRINT_C \"\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n-# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-#elif HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_SHORT\n-# define HOST_HALF_WIDE_INT short\n-# define HOST_HALF_WIDE_INT_PRINT \"\"\n-# define HOST_HALF_WIDE_INT_PRINT_C \"\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n-# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n-# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n-#else\n-#error Please add support for HOST_HALF_WIDE_INT\n-#endif\n-\n-\n #define HOST_WIDE_INT_UC(X) HOST_WIDE_INT_C (X ## U)\n #define HOST_WIDE_INT_1 HOST_WIDE_INT_C (1)\n #define HOST_WIDE_INT_1U HOST_WIDE_INT_UC (1)\n@@ -109,48 +75,45 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n    typedef before using the __asm_fprintf__ format attribute.  */\n typedef HOST_WIDE_INT __gcc_host_wide_int__;\n \n-/* Various printf format strings for HOST_WIDE_INT.  */\n-\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"L\"\n-  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n-# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n-# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n-    \"%016\" HOST_LONG_FORMAT \"x\"\n-#else\n-# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n-# define HOST_WIDE_INT_PRINT_C \"LL\"\n-  /* HOST_BITS_PER_WIDE_INT is 64 bits.  */\n-# define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n-# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n-    \"%016\" HOST_LONG_LONG_FORMAT \"x\"\n-#endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n-\n-#define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n-#define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n-#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n-#define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n-#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_WIDE_INT_PRINT \"x\"\n-\n /* Provide C99 <inttypes.h> style format definitions for 64bits.  */\n #ifndef HAVE_INTTYPES_H\n+#if HOST_BITS_PER_LONG == 64\n+# define GCC_PRI64 HOST_LONG_FORMAT\n+#else\n+# define GCC_PRI64 HOST_LONG_LONG_FORMAT\n+#endif\n #undef PRId64\n-#define PRId64 HOST_WIDE_INT_PRINT \"d\"\n+#define PRId64 GCC_PRI64 \"d\"\n #undef PRIi64\n-#define PRIi64 HOST_WIDE_INT_PRINT \"i\"\n+#define PRIi64 GCC_PRI64 \"i\"\n #undef PRIo64\n-#define PRIo64 HOST_WIDE_INT_PRINT \"o\"\n+#define PRIo64 GCC_PRI64 \"o\"\n #undef PRIu64\n-#define PRIu64 HOST_WIDE_INT_PRINT \"u\"\n+#define PRIu64 GCC_PRI64 \"u\"\n #undef PRIx64\n-#define PRIx64 HOST_WIDE_INT_PRINT \"x\"\n+#define PRIx64 GCC_PRI64 \"x\"\n #undef PRIX64\n-#define PRIX64 HOST_WIDE_INT_PRINT \"X\"\n+#define PRIX64 GCC_PRI64 \"X\"\n #endif\n \n+/* Various printf format strings for HOST_WIDE_INT.  */\n+\n+#if HOST_BITS_PER_LONG == 64\n+# define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"L\"\n+#else\n+# define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n+# define HOST_WIDE_INT_PRINT_C \"LL\"\n+#endif\n+\n+#define HOST_WIDE_INT_PRINT_DEC \"%\" PRId64\n+#define HOST_WIDE_INT_PRINT_DEC_C \"%\" PRId64 HOST_WIDE_INT_PRINT_C\n+#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" PRIu64\n+#define HOST_WIDE_INT_PRINT_HEX \"%#\" PRIx64\n+#define HOST_WIDE_INT_PRINT_HEX_PURE \"%\" PRIx64\n+#define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%\" PRIx64 \"%016\" PRIx64\n+#define HOST_WIDE_INT_PRINT_PADDED_HEX \"%016\" PRIx64\n+\n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported\n    efficiently in hardware.  (That is, the widest integer type that fits\n    in a hardware register.)  Normally this is \"long\" but on some hosts it"}, {"sha": "0d26edb245f29b0472962f59dc9e482907d41b1c", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -27,6 +27,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"dumpfile.h\"\n \n+\n+#define HOST_BITS_PER_HALF_WIDE_INT 32\n+#if HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_LONG\n+# define HOST_HALF_WIDE_INT long\n+#elif HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_INT\n+# define HOST_HALF_WIDE_INT int\n+#else\n+#error Please add support for HOST_HALF_WIDE_INT\n+#endif\n+\n #define W_TYPE_SIZE HOST_BITS_PER_WIDE_INT\n #if GCC_VERSION >= 3000 && (W_TYPE_SIZE == 32 || defined (__SIZEOF_INT128__))\n typedef unsigned HOST_HALF_WIDE_INT UHWtype;"}]}