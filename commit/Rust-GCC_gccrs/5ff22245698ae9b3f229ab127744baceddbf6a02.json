{"sha": "5ff22245698ae9b3f229ab127744baceddbf6a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmMjIyNDU2OThhZTliM2YyMjlhYjEyNzc0NGJhY2VkZGJmNmEwMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-05-20T12:50:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T12:50:26Z"}, "message": "2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n\t    Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch4.adb\n\t(Try_Indexed_Call): Handle properly a construct of the form F(S) where\n\tF is a parameterless function that returns an array, and S is a subtype\n\tmark.\n\t(Analyze_Call): Insert dereference when the prefix is a parameterless\n\tfunction that returns an access to subprogram and the call has\n\tparameters.\n\tReject a non-overloaded call whose name resolves to denote\n\ta primitive operation of the stub type generated to support a remote\n\taccess-to-class-wide type.\n\nFrom-SVN: r135640", "tree": {"sha": "65942fc7ee2b4434caa3588e34dd2be75ce4d972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65942fc7ee2b4434caa3588e34dd2be75ce4d972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ff22245698ae9b3f229ab127744baceddbf6a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff22245698ae9b3f229ab127744baceddbf6a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ff22245698ae9b3f229ab127744baceddbf6a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff22245698ae9b3f229ab127744baceddbf6a02/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eede5a0d7a073f4a546bed31b2fafc616f9002fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eede5a0d7a073f4a546bed31b2fafc616f9002fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eede5a0d7a073f4a546bed31b2fafc616f9002fd"}], "stats": {"total": 141, "additions": 94, "deletions": 47}, "files": [{"sha": "db5c112f059db7e58f3e6f0ecfc3cd2e43d7278e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 94, "deletions": 47, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ff22245698ae9b3f229ab127744baceddbf6a02/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ff22245698ae9b3f229ab127744baceddbf6a02/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5ff22245698ae9b3f229ab127744baceddbf6a02", "patch": "@@ -691,11 +691,14 @@ package body Sem_Ch4 is\n       Success : Boolean := False;\n \n       function Name_Denotes_Function return Boolean;\n-      --  If the type of the name is an access to subprogram, this may be\n-      --  the type of a name, or the return type of the function being called.\n-      --  If the name is not an entity then it can denote a protected function.\n-      --  Until we distinguish Etype from Return_Type, we must use this\n-      --  routine to resolve the meaning of the name in the call.\n+      --  If the type of the name is an access to subprogram, this may be the\n+      --  type of a name, or the return type of the function being called. If\n+      --  the name is not an entity then it can denote a protected function.\n+      --  Until we distinguish Etype from Return_Type, we must use this routine\n+      --  to resolve the meaning of the name in the call.\n+\n+      procedure No_Interpretation;\n+      --  Output error message when no valid interpretation exists\n \n       ---------------------------\n       -- Name_Denotes_Function --\n@@ -714,6 +717,43 @@ package body Sem_Ch4 is\n          end if;\n       end Name_Denotes_Function;\n \n+      -----------------------\n+      -- No_Interpretation --\n+      -----------------------\n+\n+      procedure No_Interpretation is\n+         L : constant Boolean   := Is_List_Member (N);\n+         K : constant Node_Kind := Nkind (Parent (N));\n+\n+      begin\n+         --  If the node is in a list whose parent is not an expression then it\n+         --  must be an attempted procedure call.\n+\n+         if L and then K not in N_Subexpr then\n+            if Ekind (Entity (Nam)) = E_Generic_Procedure then\n+               Error_Msg_NE\n+                 (\"must instantiate generic procedure& before call\",\n+                  Nam, Entity (Nam));\n+            else\n+               Error_Msg_N\n+                 (\"procedure or entry name expected\", Nam);\n+            end if;\n+\n+         --  Check for tasking cases where only an entry call will do\n+\n+         elsif not L\n+           and then Nkind_In (K, N_Entry_Call_Alternative,\n+                                 N_Triggering_Alternative)\n+         then\n+            Error_Msg_N (\"entry name expected\", Nam);\n+\n+         --  Otherwise give general error message\n+\n+         else\n+            Error_Msg_N (\"invalid prefix in call\", Nam);\n+         end if;\n+      end No_Interpretation;\n+\n    --  Start of processing for Analyze_Call\n \n    begin\n@@ -734,13 +774,19 @@ package body Sem_Ch4 is\n          --  name, or if it is a function name in the context of a procedure\n          --  call. In this latter case, we have a call to a parameterless\n          --  function that returns a pointer_to_procedure which is the entity\n-         --  being called.\n+         --  being called. Finally, F (X) may be a call to a parameterless\n+         --  function that returns a pointer to a function with parameters.\n \n          elsif Is_Access_Type (Etype (Nam))\n            and then Ekind (Designated_Type (Etype (Nam))) = E_Subprogram_Type\n            and then\n              (not Name_Denotes_Function\n-                or else Nkind (N) = N_Procedure_Call_Statement)\n+                or else Nkind (N) = N_Procedure_Call_Statement\n+                or else\n+                  (Nkind (Parent (N)) /= N_Explicit_Dereference\n+                     and then Is_Entity_Name (Nam)\n+                     and then No (First_Formal (Entity (Nam)))\n+                     and then Present (Actuals)))\n          then\n             Nam_Ent := Designated_Type (Etype (Nam));\n             Insert_Explicit_Dereference (Nam);\n@@ -786,41 +832,17 @@ package body Sem_Ch4 is\n             --  If no interpretations, give error message\n \n             if not Is_Overloadable (Nam_Ent) then\n-               declare\n-                  L : constant Boolean   := Is_List_Member (N);\n-                  K : constant Node_Kind := Nkind (Parent (N));\n-\n-               begin\n-                  --  If the node is in a list whose parent is not an\n-                  --  expression then it must be an attempted procedure call.\n-\n-                  if L and then K not in N_Subexpr then\n-                     if Ekind (Entity (Nam)) = E_Generic_Procedure then\n-                        Error_Msg_NE\n-                          (\"must instantiate generic procedure& before call\",\n-                           Nam, Entity (Nam));\n-                     else\n-                        Error_Msg_N\n-                          (\"procedure or entry name expected\", Nam);\n-                     end if;\n-\n-                  --  Check for tasking cases where only an entry call will do\n-\n-                  elsif not L\n-                    and then Nkind_In (K, N_Entry_Call_Alternative,\n-                                          N_Triggering_Alternative)\n-                  then\n-                     Error_Msg_N (\"entry name expected\", Nam);\n+               No_Interpretation;\n+               return;\n+            end if;\n+         end if;\n \n-                  --  Otherwise give general error message\n+         --  Operations generated for RACW stub types are called only through\n+         --  dispatching, and can never be the static interpretation of a call.\n \n-                  else\n-                     Error_Msg_N (\"invalid prefix in call\", Nam);\n-                  end if;\n-\n-                  return;\n-               end;\n-            end if;\n+         if Is_RACW_Stub_Type_Operation (Nam_Ent) then\n+            No_Interpretation;\n+            return;\n          end if;\n \n          Analyze_One_Call (N, Nam_Ent, True, Success);\n@@ -840,9 +862,9 @@ package body Sem_Ch4 is\n          end if;\n \n       else\n-         --  An overloaded selected component must denote overloaded\n-         --  operations of a concurrent type. The interpretations are\n-         --  attached to the simple name of those operations.\n+         --  An overloaded selected component must denote overloaded operations\n+         --  of a concurrent type. The interpretations are attached to the\n+         --  simple name of those operations.\n \n          if Nkind (Nam) = N_Selected_Component then\n             Nam := Selector_Name (Nam);\n@@ -2223,6 +2245,16 @@ package body Sem_Ch4 is\n \n       end if;\n \n+      --  If the call has been transformed into a slice, it is of the form\n+      --  F (Subtype) where F is paramterless. The node has ben rewritten in\n+      --  Try_Indexed_Call and there is nothing else to do.\n+\n+      if Is_Indexed\n+        and then  Nkind (N) = N_Slice\n+      then\n+         return;\n+      end if;\n+\n       Normalize_Actuals (N, Nam, (Report and not Is_Indexed), Norm_OK);\n \n       if not Norm_OK then\n@@ -5535,9 +5567,10 @@ package body Sem_Ch4 is\n       Typ        : Entity_Id;\n       Skip_First : Boolean) return Boolean\n    is\n-      Actuals : constant List_Id   := Parameter_Associations (N);\n-      Actual : Node_Id;\n-      Index  : Entity_Id;\n+      Loc     : constant Source_Ptr := Sloc (N);\n+      Actuals : constant List_Id    := Parameter_Associations (N);\n+      Actual  : Node_Id;\n+      Index   : Entity_Id;\n \n    begin\n       Actual := First (Actuals);\n@@ -5559,7 +5592,21 @@ package body Sem_Ch4 is\n             return False;\n          end if;\n \n-         if not Has_Compatible_Type (Actual, Etype (Index)) then\n+         if Is_Entity_Name (Actual)\n+           and then Is_Type (Entity (Actual))\n+           and then No (Next (Actual))\n+         then\n+            Rewrite (N,\n+              Make_Slice (Loc,\n+                Prefix => Make_Function_Call (Loc,\n+                  Name => Relocate_Node (Name (N))),\n+                Discrete_Range =>\n+                  New_Occurrence_Of (Entity (Actual), Sloc (Actual))));\n+\n+            Analyze (N);\n+            return True;\n+\n+         elsif not Has_Compatible_Type (Actual, Etype (Index)) then\n             return False;\n          end if;\n "}]}