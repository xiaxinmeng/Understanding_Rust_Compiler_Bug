{"sha": "e03ea4ad2c6fea4770c73a2938b604486559f52e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzZWE0YWQyYzZmZWE0NzcwYzczYTI5MzhiNjA0NDg2NTU5ZjUyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-01T04:02:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-01T04:02:31Z"}, "message": "* doc/invoke.texi: Update for -std=c++11.\n\nFrom-SVN: r180726", "tree": {"sha": "b0c922f34ba17bd9413695adc28c16f37785f595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c922f34ba17bd9413695adc28c16f37785f595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03ea4ad2c6fea4770c73a2938b604486559f52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03ea4ad2c6fea4770c73a2938b604486559f52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03ea4ad2c6fea4770c73a2938b604486559f52e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03ea4ad2c6fea4770c73a2938b604486559f52e/comments", "author": null, "committer": null, "parents": [{"sha": "5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9fbcf14adbf0aef998c7b205298a96a7bd8841"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "0c97453dd2d15164b88c4474d5f72800fe084137", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03ea4ad2c6fea4770c73a2938b604486559f52e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03ea4ad2c6fea4770c73a2938b604486559f52e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e03ea4ad2c6fea4770c73a2938b604486559f52e", "patch": "@@ -235,7 +235,7 @@ Objective-C and Objective-C++ Dialects}.\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n--Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n+-Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wno-deprecated  @gol\n -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n@@ -1574,16 +1574,13 @@ C++ code.\n GNU dialect of @option{-std=c++98}.  This is the default for\n C++ code.\n \n-@item c++0x\n-The working draft of the upcoming ISO C++0x standard. This option\n-enables experimental features that are likely to be included in\n-C++0x. The working draft is constantly changing, and any feature that is\n-enabled by this flag may be removed from future versions of GCC if it is\n-not part of the C++0x standard.\n+@item c++11\n+The 2011 ISO C++ standard plus amendments.  Support for C++11 is still\n+experimental, and may change in incompatible ways in future releases.\n \n-@item gnu++0x\n-GNU dialect of @option{-std=c++0x}. This option enables\n-experimental features that may be removed in future versions of GCC.\n+@item gnu++11\n+GNU dialect of @option{-std=c++11}. Support for C++11 is still\n+experimental, and may change in incompatible ways in future releases.\n @end table\n \n @item -fgnu89-inline\n@@ -1870,7 +1867,7 @@ Version 5 corrects the mangling of attribute const/volatile on\n function pointer types, decltype of a plain decl, and use of a\n function parameter in the declaration of another parameter.\n \n-Version 6 corrects the promotion behavior of C++0x scoped enums.\n+Version 6 corrects the promotion behavior of C++11 scoped enums.\n \n See also @option{-Wabi}.\n \n@@ -1905,7 +1902,7 @@ been added for putting variables into BSS without making them common.\n \n @item -fconstexpr-depth=@var{n}\n @opindex fconstexpr-depth\n-Set the maximum nested evaluation depth for C++0x constexpr functions\n+Set the maximum nested evaluation depth for C++11 constexpr functions\n to @var{n}.  A limit is needed to detect endless recursion during\n constant expression evaluation.  The minimum specified by the standard\n is 512.\n@@ -2093,7 +2090,7 @@ Set the maximum instantiation depth for template classes to @var{n}.\n A limit on the template instantiation depth is needed to detect\n endless recursions during template class instantiation.  ANSI/ISO C++\n conforming programs must not rely on a maximum depth greater than 17\n-(changed to 1024 in C++0x).  The default value is 900, as the compiler\n+(changed to 1024 in C++11).  The default value is 900, as the compiler\n can run out of stack space before hitting 1024 in some situations.\n \n @item -fno-threadsafe-statics\n@@ -2368,14 +2365,14 @@ by @option{-Wall}.\n @item -Wno-narrowing @r{(C++ and Objective-C++ only)}\n @opindex Wnarrowing\n @opindex Wno-narrowing\n-With -std=c++0x, suppress the diagnostic required by the standard for\n+With -std=c++11, suppress the diagnostic required by the standard for\n narrowing conversions within @samp{@{ @}}, e.g.\n \n @smallexample\n int i = @{ 2.2 @}; // error: narrowing from double to int\n @end smallexample\n \n-This flag can be useful for compiling valid C++98 code in C++0x mode\n+This flag can be useful for compiling valid C++98 code in C++11 mode.\n \n @item -Wnoexcept @r{(C++ and Objective-C++ only)}\n @opindex Wnoexcept\n@@ -2993,7 +2990,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n \n @gccoptlist{-Waddress   @gol\n -Warray-bounds @r{(only with} @option{-O2}@r{)}  @gol\n--Wc++0x-compat  @gol\n+-Wc++11-compat  @gol\n -Wchar-subscripts  @gol\n -Wenum-compare @r{(in C/Objc; this is on by default in C++)} @gol\n -Wimplicit-int @r{(C and Objective-C only)} @gol\n@@ -4063,10 +4060,10 @@ Warn about ISO C constructs that are outside of the common subset of\n ISO C and ISO C++, e.g.@: request for implicit conversion from\n @code{void *} to a pointer to non-@code{void} type.\n \n-@item -Wc++0x-compat @r{(C++ and Objective-C++ only)}\n+@item -Wc++11-compat @r{(C++ and Objective-C++ only)}\n Warn about C++ constructs whose meaning differs between ISO C++ 1998 and\n-ISO C++ 200x, e.g., identifiers in ISO C++ 1998 that will become keywords\n-in ISO C++ 200x.  This warning is enabled by @option{-Wall}.\n+ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that will become keywords\n+in ISO C++ 2011.  This warning is enabled by @option{-Wall}.\n \n @item -Wcast-qual\n @opindex Wcast-qual"}]}