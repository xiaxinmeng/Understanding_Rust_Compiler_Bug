{"sha": "b5da71d41644c40db95aabac8f67c28294f4c85f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkYTcxZDQxNjQ0YzQwZGI5NWFhYmFjOGY2N2MyODI5NGY0Yzg1Zg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2011-05-09T17:34:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-09T17:34:35Z"}, "message": "Implement final/override for member functions.\n\ngcc/\n\t* tree.h (TYPE_UNQUALIFIED, TYPE_QUAL_CONST): Convert to enum.\n\t(TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT): Likewise.\ngcc/cp/\n\t* class.c (check_for_override): Check for DECL_OVERRIDE_P.\n\t* cp-tree.h (DECL_OVERRIDE_P, DECL_FINAL_P): New.\n\t(cp_virt_specifiers, enum virt_specifier): New.\n\t* decl.c (set_virt_specifiers): New.\n\t(grokdeclarator): Use them. Diagnose virt-specifiers on non-fields.\n\t* parser.c (make_call_declarator): add virt-specifiers parameter.\n\t(cp_parser_lambda_declarator_opt): Adjust.\n\t(cp_parser_direct_declarator): Likewise.\n\t(cp_parser_virt_specifier_seq_opt): New.\n\t* search.c (check_final_overrider): Diagnose attempts to override\n\ta final member function.\n\nFrom-SVN: r173581", "tree": {"sha": "704c11fb901ce576ac515237bef43408fce32e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/704c11fb901ce576ac515237bef43408fce32e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5da71d41644c40db95aabac8f67c28294f4c85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5da71d41644c40db95aabac8f67c28294f4c85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5da71d41644c40db95aabac8f67c28294f4c85f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5da71d41644c40db95aabac8f67c28294f4c85f/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e7f3770c99afc09afc9e9837aad4c8505fbbf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e7f3770c99afc09afc9e9837aad4c8505fbbf8"}], "stats": {"total": 200, "additions": 193, "deletions": 7}, "files": [{"sha": "6406136d7e99b3a4c3b6df19d5f1fd885c4f77e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -1,3 +1,8 @@\n+2011-05-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* tree.h (TYPE_UNQUALIFIED, TYPE_QUAL_CONST): Convert to enum.\n+\t(TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT): Likewise.\n+\n 2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md (const_pow2_1_to_2_operand): Remove."}, {"sha": "17116e00b613ad73c240c1f95cae0caf3a875376", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -1,3 +1,18 @@\n+2011-05-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement final/override for member functions.\n+\t* class.c (check_for_override): Check for DECL_OVERRIDE_P.\n+\t* cp-tree.h (DECL_OVERRIDE_P, DECL_FINAL_P): New.\n+\t(cp_virt_specifiers, enum virt_specifier): New.\n+\t* decl.c (set_virt_specifiers): New.\n+\t(grokdeclarator): Use them. Diagnose virt-specifiers on non-fields.\n+\t* parser.c (make_call_declarator): add virt-specifiers parameter.\n+\t(cp_parser_lambda_declarator_opt): Adjust.\n+\t(cp_parser_direct_declarator): Likewise.\n+\t(cp_parser_virt_specifier_seq_opt): New.\n+\t* search.c (check_final_overrider): Diagnose attempts to override\n+\ta final member function.\n+\n 2011-05-09  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/48574"}, {"sha": "12db2bcb0931c17aa8d9e976c90380cb9cce6cd2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -2477,6 +2477,11 @@ check_for_override (tree decl, tree ctype)\n       if (DECL_DESTRUCTOR_P (decl))\n \tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (ctype) = true;\n     }\n+  else if (DECL_OVERRIDE_P (decl))\n+    {\n+      DECL_VINDEX (decl) = error_mark_node;\n+      error (\"%q+#D marked override, but does not override\", decl);\n+    }\n }\n \n /* Warn about hidden virtual functions that are not overridden in t."}, {"sha": "a03d6a11bcad877b92a2b305fe27171d83f4b845", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -72,6 +72,7 @@ c-common.h, not after.\n       LAMBDA_EXPR_CAPTURES_THIS_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_CAPTURE (in DECLTYPE_TYPE)\n       VEC_INIT_EXPR_IS_CONSTEXPR (in VEC_INIT_EXPR)\n+      DECL_OVERRIDE_P (in FUNCTION_DECL)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -84,6 +85,7 @@ c-common.h, not after.\n       TARGET_EXPR_LIST_INIT_P (in TARGET_EXPR)\n       LAMBDA_EXPR_MUTABLE_P (in LAMBDA_EXPR)\n       DECLTYPE_FOR_LAMBDA_RETURN (in DECLTYPE_TYPE)\n+      DECL_FINAL_P (in FUNCTION_DECL)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n@@ -2284,6 +2286,14 @@ struct GTY((variable_size)) lang_decl {\n #define DECL_INVALID_OVERRIDER_P(NODE) \\\n   (DECL_LANG_FLAG_4 (NODE))\n \n+/* True (in a FUNCTION_DECL) if NODE is a function declared with\n+   an override virt-specifier */\n+#define DECL_OVERRIDE_P(NODE) (TREE_LANG_FLAG_0 (NODE))\n+\n+/* True (in a FUNCTION_DECL) if NODE is a function declared with\n+   a final virt-specifier */\n+#define DECL_FINAL_P(NODE) (TREE_LANG_FLAG_1 (NODE))\n+\n /* The thunks associated with NODE, a FUNCTION_DECL.  */\n #define DECL_THUNKS(NODE) \\\n   (LANG_DECL_FN_CHECK (NODE)->context)\n@@ -4429,6 +4439,22 @@ extern GTY(()) operator_name_info_t assignment_operator_name_info\n \n typedef int cp_cv_quals;\n \n+/* Non-static member functions have an optional virt-specifier-seq.\n+   There is a VIRT_SPEC value for each virt-specifier.\n+   They can be combined by bitwise-or to form the complete set of\n+   virt-specifiers for a member function.  */\n+enum virt_specifier\n+  {\n+    VIRT_SPEC_UNSPECIFIED = 0x0,\n+    VIRT_SPEC_FINAL       = 0x1,\n+    VIRT_SPEC_OVERRIDE    = 0x2\n+  };\n+\n+/* A type-qualifier, or bitmask therefore, using the VIRT_SPEC\n+   constants.  */\n+\n+typedef int cp_virt_specifiers;\n+\n /* A storage class.  */\n \n typedef enum cp_storage_class {\n@@ -4571,6 +4597,8 @@ struct cp_declarator {\n       tree parameters;\n       /* The cv-qualifiers for the function.  */\n       cp_cv_quals qualifiers;\n+      /* The virt-specifiers for the function.  */\n+      cp_virt_specifiers virt_specifiers;\n       /* The exception-specification for the function.  */\n       tree exception_specification;\n       /* The late-specified return type, if any.  */"}, {"sha": "c139f3f0ba4642a8d99dd7fc928dd2bf73742d26", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -7306,6 +7306,25 @@ grokfndecl (tree ctype,\n   return decl;\n }\n \n+/* decl is a FUNCTION_DECL.\n+   specifiers are the parsed virt-specifiers.\n+\n+   Set flags to reflect the virt-specifiers.\n+\n+   Returns decl.  */\n+\n+static tree\n+set_virt_specifiers (tree decl, cp_virt_specifiers specifiers)\n+{\n+  if (decl == NULL_TREE)\n+    return decl;\n+  if (specifiers & VIRT_SPEC_OVERRIDE)\n+    DECL_OVERRIDE_P (decl) = 1;\n+  if (specifiers & VIRT_SPEC_FINAL)\n+    DECL_FINAL_P (decl) = 1;\n+  return decl;\n+}\n+\n /* DECL is a VAR_DECL for a static data member.  Set flags to reflect\n    the linkage that DECL will receive in the object file.  */\n \n@@ -8116,6 +8135,9 @@ grokdeclarator (const cp_declarator *declarator,\n   /* cv-qualifiers that apply to the declarator, for a declaration of\n      a member function.  */\n   cp_cv_quals memfn_quals = TYPE_UNQUALIFIED;\n+  /* virt-specifiers that apply to the declarator, for a declaration of\n+     a member function.  */\n+  cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;\n   /* cv-qualifiers that apply to the type specified by the DECLSPECS.  */\n   int type_quals;\n   tree raises = NULL_TREE;\n@@ -8876,7 +8898,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t    /* Pick up type qualifiers which should be applied to `this'.  */\n \t    memfn_quals = declarator->u.function.qualifiers;\n-\n+\t    /* Pick up virt-specifiers.  */\n+            virt_specifiers = declarator->u.function.virt_specifiers;\n \t    /* Pick up the exception specifications.  */\n \t    raises = declarator->u.function.exception_specification;\n \n@@ -9814,6 +9837,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       sfk,\n \t\t\t       funcdef_flag, template_count, in_namespace,\n \t\t\t       attrlist, declarator->id_loc);\n+            decl = set_virt_specifiers (decl, virt_specifiers);\n \t    if (decl == NULL_TREE)\n \t      return error_mark_node;\n #if 0\n@@ -10007,6 +10031,8 @@ grokdeclarator (const cp_declarator *declarator,\n \telse if (thread_p)\n \t  error (\"storage class %<__thread%> invalid for function %qs\", name);\n \n+        if (virt_specifiers)\n+          error (\"virt-specifiers in %qs not allowed outside a class definition\", name);\n \t/* Function declaration not at top level.\n \t   Storage classes other than `extern' are not allowed\n \t   and `extern' makes no difference.  */"}, {"sha": "fa6cd83ed3040b9b47150b1446887e8f21768d8e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -938,7 +938,7 @@ clear_decl_specs (cp_decl_specifier_seq *decl_specs)\n    VAR_DECLs or FUNCTION_DECLs) should do that directly.  */\n \n static cp_declarator *make_call_declarator\n-  (cp_declarator *, tree, cp_cv_quals, tree, tree);\n+  (cp_declarator *, tree, cp_cv_quals, cp_virt_specifiers, tree, tree);\n static cp_declarator *make_array_declarator\n   (cp_declarator *, tree);\n static cp_declarator *make_pointer_declarator\n@@ -1103,6 +1103,7 @@ cp_declarator *\n make_call_declarator (cp_declarator *target,\n \t\t      tree parms,\n \t\t      cp_cv_quals cv_qualifiers,\n+\t\t      cp_virt_specifiers virt_specifiers,\n \t\t      tree exception_specification,\n \t\t      tree late_return_type)\n {\n@@ -1112,6 +1113,7 @@ make_call_declarator (cp_declarator *target,\n   declarator->declarator = target;\n   declarator->u.function.parameters = parms;\n   declarator->u.function.qualifiers = cv_qualifiers;\n+  declarator->u.function.virt_specifiers = virt_specifiers;\n   declarator->u.function.exception_specification = exception_specification;\n   declarator->u.function.late_return_type = late_return_type;\n   if (target)\n@@ -1691,6 +1693,8 @@ static enum tree_code cp_parser_ptr_operator\n   (cp_parser *, tree *, cp_cv_quals *);\n static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n   (cp_parser *);\n+static cp_virt_specifiers cp_parser_virt_specifier_seq_opt\n+  (cp_parser *);\n static tree cp_parser_late_return_type_opt\n   (cp_parser *);\n static tree cp_parser_declarator_id\n@@ -7665,6 +7669,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n     quals = (LAMBDA_EXPR_MUTABLE_P (lambda_expr)\n \t     ? TYPE_UNQUALIFIED : TYPE_QUAL_CONST);\n     declarator = make_call_declarator (declarator, param_list, quals,\n+\t\t\t\t       VIRT_SPEC_UNSPECIFIED,\n \t\t\t\t       exception_spec,\n                                        /*late_return_type=*/NULL_TREE);\n     declarator->id_loc = LAMBDA_EXPR_LOCATION (lambda_expr);\n@@ -14894,6 +14899,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      if (member_p || cp_parser_parse_definitely (parser))\n \t\t{\n \t\t  cp_cv_quals cv_quals;\n+\t\t  cp_virt_specifiers virt_specifiers;\n \t\t  tree exception_specification;\n \t\t  tree late_return;\n \n@@ -14910,6 +14916,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  /* And the exception-specification.  */\n \t\t  exception_specification\n \t\t    = cp_parser_exception_specification_opt (parser);\n+\t\t  /* Parse the virt-specifier-seq.  */\n+\t\t  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n \n \t\t  late_return\n \t\t    = cp_parser_late_return_type_opt (parser);\n@@ -14918,6 +14926,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  declarator = make_call_declarator (declarator,\n \t\t\t\t\t\t     params,\n \t\t\t\t\t\t     cv_quals,\n+\t\t\t\t\t\t     virt_specifiers,\n \t\t\t\t\t\t     exception_specification,\n \t\t\t\t\t\t     late_return);\n \t\t  /* Any subsequent parameter lists are to do with\n@@ -15425,6 +15434,53 @@ cp_parser_cv_qualifier_seq_opt (cp_parser* parser)\n   return cv_quals;\n }\n \n+/* Parse an (optional) virt-specifier-seq.\n+\n+   virt-specifier-seq:\n+     virt-specifier virt-specifier-seq [opt]\n+\n+   virt-specifier:\n+     override\n+     final\n+\n+   Returns a bitmask representing the virt-specifiers.  */\n+\n+static cp_virt_specifiers\n+cp_parser_virt_specifier_seq_opt (cp_parser* parser)\n+{\n+  cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;\n+\n+  while (true)\n+    {\n+      cp_token *token;\n+      cp_virt_specifiers virt_specifier;\n+\n+      /* Peek at the next token.  */\n+      token = cp_lexer_peek_token (parser->lexer);\n+      /* See if it's a virt-specifier-qualifier.  */\n+      if (token->type != CPP_NAME)\n+        break;\n+      if (!strcmp (IDENTIFIER_POINTER(token->u.value), \"override\"))\n+\tvirt_specifier = VIRT_SPEC_OVERRIDE;\n+      else if (!strcmp (IDENTIFIER_POINTER(token->u.value), \"final\"))\n+\tvirt_specifier = VIRT_SPEC_FINAL;\n+      else\n+\tbreak;\n+\n+      if (virt_specifiers & virt_specifier)\n+\t{\n+\t  error_at (token->location, \"duplicate virt-specifier\");\n+\t  cp_lexer_purge_token (parser->lexer);\n+\t}\n+      else\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  virt_specifiers |= virt_specifier;\n+\t}\n+    }\n+  return virt_specifiers;\n+}\n+\n /* Parse a late-specified return type, if any.  This is not a separate\n    non-terminal, but part of a function declarator, which looks like\n "}, {"sha": "cf0b1a0a7e01326e3b2a23597277bb8c5f3db459", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -1920,6 +1920,12 @@ check_final_overrider (tree overrider, tree basefn)\n \t}\n       return 0;\n     }\n+  if (DECL_FINAL_P (basefn))\n+    {\n+      error (\"virtual function %q+D\", overrider);\n+      error (\"overriding final function %q+D\", basefn);\n+      return 0;\n+    }\n   return 1;\n }\n "}, {"sha": "5b72fc5d6c6cd4529cd597046ddc7a6e620c1221", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -1,3 +1,7 @@\n+2011-05-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+        * g++.dg/inherit/virtual9.C: New.\n+\n 2011-05-09  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/48574"}, {"sha": "d3175e14798ceb72aed14008b866f6a3a3dee4f2", "filename": "gcc/testsuite/g++.dg/inherit/virtual9.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual9.C?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+struct B\n+{\n+  virtual void f() final {}\n+  virtual void g() {}\n+};\n+\n+struct B2\n+{\n+  virtual void h() {}\n+};\n+\n+struct D : B\n+{\n+  virtual void g() override final {} // { dg-error \"overriding\" }\n+};\n+\n+template <class T> struct D2 : T\n+{\n+  void h() override {} // { dg-error \"marked override, but does not override\" }\n+};\n+\n+struct D3 : D\n+{\n+  void g() {} // { dg-error \"virtual function\" }\n+};\n+\n+struct B3\n+{\n+  virtual void f() final final {} // { dg-error \"duplicate virt-specifier\" }\n+};\n+\n+void g() override {} // { dg-error \"virt-specifiers\" }\n+\n+int main()\n+{\n+  D2<B> d2;\n+  D2<B2> d3;\n+}"}, {"sha": "4cf1730d4cb0b0392d07a83c39551d57d6e8974e", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5da71d41644c40db95aabac8f67c28294f4c85f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b5da71d41644c40db95aabac8f67c28294f4c85f", "patch": "@@ -2253,11 +2253,13 @@ extern enum machine_mode vector_type_mode (const_tree);\n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n    type.  */\n-\n-#define TYPE_UNQUALIFIED   0x0\n-#define TYPE_QUAL_CONST    0x1\n-#define TYPE_QUAL_VOLATILE 0x2\n-#define TYPE_QUAL_RESTRICT 0x4\n+enum cv_qualifier\n+  {\n+    TYPE_UNQUALIFIED   = 0x0,\n+    TYPE_QUAL_CONST    = 0x1,\n+    TYPE_QUAL_VOLATILE = 0x2,\n+    TYPE_QUAL_RESTRICT = 0x4\n+  };\n \n /* Encode/decode the named memory support as part of the qualifier.  If more\n    than 8 qualifiers are added, these macros need to be adjusted.  */"}]}