{"sha": "162b25fa1b382102f85ecdd804f8635eaa6a43aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyYjI1ZmExYjM4MjEwMmY4NWVjZGQ4MDRmODYzNWVhYTZhNDNhYQ==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-09-23T22:43:15Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-09-23T22:43:15Z"}, "message": "Support nested generic lambdas.\n\n\t* lambda.c (maybe_add_lambda_conv_op): Don't check for instantiated\n\tcallop in the case of generic lambdas.\n\nFrom-SVN: r202848", "tree": {"sha": "a010bc8a9aee168ef68cc54a9518e2c3b16dad30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a010bc8a9aee168ef68cc54a9518e2c3b16dad30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162b25fa1b382102f85ecdd804f8635eaa6a43aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162b25fa1b382102f85ecdd804f8635eaa6a43aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162b25fa1b382102f85ecdd804f8635eaa6a43aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162b25fa1b382102f85ecdd804f8635eaa6a43aa/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707df8ad64e1ded5a1d0b29af6abc43acb7b9a3e"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "c97cb4546b0ffbf24a4d274851fd21d8a4ec41e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162b25fa1b382102f85ecdd804f8635eaa6a43aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162b25fa1b382102f85ecdd804f8635eaa6a43aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=162b25fa1b382102f85ecdd804f8635eaa6a43aa", "patch": "@@ -1,3 +1,8 @@\n+2013-09-23  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* lambda.c (maybe_add_lambda_conv_op): Don't check for instantiated\n+\tcallop in the case of generic lambdas.\n+\n 2013-09-23  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* parser.c (make_generic_type_name): Use global count rather than"}, {"sha": "2ffa7e01d786990d034110ac2547cfe167ae262e", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162b25fa1b382102f85ecdd804f8635eaa6a43aa/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162b25fa1b382102f85ecdd804f8635eaa6a43aa/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=162b25fa1b382102f85ecdd804f8635eaa6a43aa", "patch": "@@ -810,7 +810,7 @@ maybe_add_lambda_conv_op (tree type)\n     = (DECL_TEMPLATE_INFO (callop)\n     && DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (callop)) == callop);\n \n-  if (DECL_INITIAL (callop) == NULL_TREE)\n+  if (!generic_lambda_p && DECL_INITIAL (callop) == NULL_TREE)\n     {\n       /* If the op() wasn't instantiated due to errors, give up.  */\n       gcc_assert (errorcount || sorrycount);"}]}