{"sha": "d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjNDA2NTBjMmI3NGVkMGJkM2MxNzk3MGU3ZDM4ZjY0YzkxYTNjZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-30T03:10:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-30T03:10:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1355", "tree": {"sha": "8d61cc929a37ca53844ef0d1d39ceb677000a3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d61cc929a37ca53844ef0d1d39ceb677000a3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd/comments", "author": null, "committer": null, "parents": [{"sha": "f3ee8ad13396dad3d2cbded7a3d7db44f5c75d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ee8ad13396dad3d2cbded7a3d7db44f5c75d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ee8ad13396dad3d2cbded7a3d7db44f5c75d22"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "abf8638ea754b3fb888ad2a9a2641b44bd528cb8", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "patch": "@@ -40,6 +40,10 @@ tree size_zero_node;\n \n tree size_one_node;\n \n+/* If nonzero, this is an upper limit on alignment of structure fields.\n+   The value is measured in bits.  */\n+int maximum_field_alignment;\n+\n #define GET_MODE_ALIGNMENT(MODE)   \\\n   MIN (BIGGEST_ALIGNMENT, \t   \\\n        MAX (1, (GET_MODE_UNIT_SIZE (MODE) * BITS_PER_UNIT)))\n@@ -198,7 +202,12 @@ layout_decl (decl, known_align)\n   /* Conditions are: a fixed size that is correct for another mode\n      and occupying a complete byte or bytes on proper boundary.  */\n   if (code == FIELD_DECL)\n-    DECL_BIT_FIELD_TYPE (decl) = DECL_BIT_FIELD (decl) ? type : 0;\n+    {\n+      DECL_BIT_FIELD_TYPE (decl) = DECL_BIT_FIELD (decl) ? type : 0;\n+      if (maximum_field_alignment != 0)\n+\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), maximum_field_alignment);\n+    }\n+\n   if (DECL_BIT_FIELD (decl)\n       && TYPE_SIZE (type) != 0\n       && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST)"}]}