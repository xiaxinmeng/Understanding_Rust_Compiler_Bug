{"sha": "1a1a5f4b25c5897773fae846a68287439555e248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExYTVmNGIyNWM1ODk3NzczZmFlODQ2YTY4Mjg3NDM5NTU1ZTI0OA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2006-05-23T01:17:29Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2006-05-23T01:17:29Z"}, "message": "re PR rtl-optimization/26375 (Swing modulo scheduling results in ICE)\n\n2006-05-22  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\tPR rtl-optimization/26375\n\tPR rtl-optimization/26855\n\t* df-problems (df_ru_bb_local_compute_process_def): Removed update\n\tto gen set.\n\t(df_ru_bb_local_compute): Reversed statements and removed bogus\n\tcomment explaining why they should be in wrong order.\n\t(df_ru_dump, df_rd_dump): Enhanced debug info.     \n\t* modulo-sched.c (sms_schedule, tree_opt_pass pass_sms): Enhanced\n\tdebug info.       \n\t* ddg.c (add_deps_for_def): Converted use of reaching defs to\n        reaching uses and fixed space problem.\n\nFrom-SVN: r114010", "tree": {"sha": "f324d099d9d167255cb708938d6b7fb3a505f4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f324d099d9d167255cb708938d6b7fb3a505f4e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a1a5f4b25c5897773fae846a68287439555e248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1a5f4b25c5897773fae846a68287439555e248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1a5f4b25c5897773fae846a68287439555e248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1a5f4b25c5897773fae846a68287439555e248/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b633db7b859751e579a2f0d44c6869c2f505beb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b633db7b859751e579a2f0d44c6869c2f505beb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b633db7b859751e579a2f0d44c6869c2f505beb8"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "196804b1bd19847d32e60173d6a10fb72509517f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a1a5f4b25c5897773fae846a68287439555e248", "patch": "@@ -1,3 +1,17 @@\n+2006-05-22  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\tPR rtl-optimization/26375\n+\tPR rtl-optimization/26855\n+\t* df-problems (df_ru_bb_local_compute_process_def): Removed update\n+\tto gen set.\n+\t(df_ru_bb_local_compute): Reversed statements and removed bogus\n+\tcomment explaining why they should be in wrong order.\n+\t(df_ru_dump, df_rd_dump): Enhanced debug info.     \n+\t* modulo-sched.c (sms_schedule, tree_opt_pass pass_sms): Enhanced\n+\tdebug info.       \n+\t* ddg.c (add_deps_for_def): Converted use of reaching defs to\n+        reaching uses and fixed space problem.\n+\n 2006-05-23  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (decide_is_function_needed): Also nested functions"}, {"sha": "c59ee6ea8f19009e18b5f58384a5ab7a1fe3ce86", "filename": "gcc/ddg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=1a1a5f4b25c5897773fae846a68287439555e248", "patch": "@@ -225,7 +225,7 @@ static void\n add_deps_for_def (ddg_ptr g, struct df *df, struct df_ref *rd)\n {\n   int regno = DF_REF_REGNO (rd);\n-  struct df_rd_bb_info *bb_info = DF_RD_BB_INFO (df, g->bb);\n+  struct df_ru_bb_info *bb_info = DF_RU_BB_INFO (df, g->bb);\n   struct df_link *r_use;\n   int use_before_def = false;\n   rtx def_insn = DF_REF_INSN (rd);\n@@ -338,7 +338,7 @@ build_inter_loop_deps (ddg_ptr g, struct df *df)\n \n       /* We are interested in uses of this BB.  */\n       if (BLOCK_FOR_INSN (use->insn) == g->bb)\n-      \tadd_deps_for_use (g, df,use);\n+      \tadd_deps_for_use (g, df, use);\n     }\n }\n "}, {"sha": "051ec333b67cdfa9a760b792be62d2d6cffe841d", "filename": "gcc/df-problems.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=1a1a5f4b25c5897773fae846a68287439555e248", "patch": "@@ -440,15 +440,15 @@ df_ru_bb_local_compute_process_def (struct dataflow *dflow,\n \t  unsigned int n_uses = DF_REG_USE_GET (df, regno)->n_refs;\n \t  if (!bitmap_bit_p (seen_in_block, regno))\n \t    {\n-\t      /* The first def for regno, causes the kill info to be\n-\t\t generated and the gen information to cleared.  */\n+\t      /* The first def for regno in the insn, causes the kill\n+\t\t info to be generated.  Do not modify the gen set\n+\t\t because the only values in it are the uses from here\n+\t\t to the top of the block and this def does not effect\n+\t\t them.  */\n \t      if (!bitmap_bit_p (seen_in_insn, regno))\n \t\t{\n \t\t  if (n_uses > DF_SPARSE_THRESHOLD)\n-\t\t    {\n-\t\t      bitmap_set_bit (bb_info->sparse_kill, regno);\n-\t\t      bitmap_clear_range (bb_info->gen, begin, n_uses);\n-\t\t    }\n+\t\t    bitmap_set_bit (bb_info->sparse_kill, regno);\n \t\t  else\n \t\t    {\n \t\t      struct df_ru_problem_data * problem_data\n@@ -457,7 +457,6 @@ df_ru_bb_local_compute_process_def (struct dataflow *dflow,\n \t\t\t= df_ref_bitmap (problem_data->use_sites, regno, \n \t\t\t\t       begin, n_uses);\n \t\t      bitmap_ior_into (bb_info->kill, uses);\n-\t\t      bitmap_and_compl_into (bb_info->gen, uses);\n \t\t    }\n \t\t}\n \t      bitmap_set_bit (seen_in_insn, regno);\n@@ -520,16 +519,12 @@ df_ru_bb_local_compute (struct dataflow *dflow, unsigned int bb_index)\n       if (!INSN_P (insn))\n \tcontinue;\n \n-      df_ru_bb_local_compute_process_def (dflow, bb_info, \n-\t\t\t\t\t  DF_INSN_UID_DEFS (df, uid), 0);\n-\n-      /* The use processing must happen after the defs processing even\n-\t though the uses logically happen first since the defs clear\n-\t the gen set. Otherwise, a use for regno occuring in the same\n-\t instruction as a def for regno would be cleared.  */ \n       df_ru_bb_local_compute_process_use (bb_info, \n \t\t\t\t\t  DF_INSN_UID_USES (df, uid), 0);\n \n+      df_ru_bb_local_compute_process_def (dflow, bb_info, \n+\t\t\t\t\t  DF_INSN_UID_DEFS (df, uid), 0);\n+\n       bitmap_ior_into (seen_in_block, seen_in_insn);\n       bitmap_clear (seen_in_insn);\n     }\n@@ -765,13 +760,13 @@ df_ru_dump (struct dataflow *dflow, FILE *file)\n       if (!bb_info->in)\n \tcontinue;\n       \n-      fprintf (file, \"  in  \\t\");\n+      fprintf (file, \"  in  \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->in));\n       dump_bitmap (file, bb_info->in);\n-      fprintf (file, \"  gen \\t\");\n+      fprintf (file, \"  gen \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->gen));\n       dump_bitmap (file, bb_info->gen);\n-      fprintf (file, \"  kill\\t\");\n+      fprintf (file, \"  kill\\t(%d)\\n\", (int) bitmap_count_bits (bb_info->kill));\n       dump_bitmap (file, bb_info->kill);\n-      fprintf (file, \"  out \\t\");\n+      fprintf (file, \"  out \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->out));\n       dump_bitmap (file, bb_info->out);\n     }\n }\n@@ -1276,13 +1271,13 @@ df_rd_dump (struct dataflow *dflow, FILE *file)\n       if (!bb_info->in)\n \tcontinue;\n       \n-      fprintf (file, \"  in\\t(%d)\\n\", (int) bitmap_count_bits (bb_info->in));\n+      fprintf (file, \"  in  \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->in));\n       dump_bitmap (file, bb_info->in);\n       fprintf (file, \"  gen \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->gen));\n       dump_bitmap (file, bb_info->gen);\n       fprintf (file, \"  kill\\t(%d)\\n\", (int) bitmap_count_bits (bb_info->kill));\n       dump_bitmap (file, bb_info->kill);\n-      fprintf (file, \"  out\\t(%d)\\n\", (int) bitmap_count_bits (bb_info->out));\n+      fprintf (file, \"  out \\t(%d)\\n\", (int) bitmap_count_bits (bb_info->out));\n       dump_bitmap (file, bb_info->out);\n     }\n }"}, {"sha": "56df63c894c14768a4657ade6a7cc2ac180d3263", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a1a5f4b25c5897773fae846a68287439555e248/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=1a1a5f4b25c5897773fae846a68287439555e248", "patch": "@@ -940,6 +940,9 @@ sms_schedule (void)\n   df_chain_add_problem (df, DF_DU_CHAIN | DF_UD_CHAIN);\n   df_analyze (df);\n \n+  if (dump_file)\n+    df_dump (df, dump_file);\n+\n   /* Allocate memory to hold the DDG array one entry for each loop.\n      We use loop->num as index into this array.  */\n   g_arr = XCNEWVEC (ddg_ptr, loops->num);\n@@ -2545,7 +2548,7 @@ struct tree_opt_pass pass_sms =\n   0,                                    /* properties_required */\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n+  TODO_dump_func,                       /* todo_flags_start */\n   TODO_dump_func |\n   TODO_ggc_collect,                     /* todo_flags_finish */\n   'm'                                   /* letter */"}]}