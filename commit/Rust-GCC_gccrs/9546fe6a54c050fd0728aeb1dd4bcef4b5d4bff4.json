{"sha": "9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0NmZlNmE1NGMwNTBmZDA3MjhhZWIxZGQ0YmNlZjRiNWQ0YmZmNA==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-10-29T19:45:23Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-10-29T19:45:23Z"}, "message": "pdp11.md (andhi3, andqi3): Fix wrong code error.\n\nPR/41822\n* config/pdp11/pdp11.md (andhi3, andqi3): Fix wrong code error.\n\nFrom-SVN: r166073", "tree": {"sha": "7bd879d9b49076c2ee4fcd3187528204065af441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd879d9b49076c2ee4fcd3187528204065af441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4/comments", "author": null, "committer": null, "parents": [{"sha": "604a33f52da2cbbec502a2d0ff5393c4139e3834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604a33f52da2cbbec502a2d0ff5393c4139e3834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604a33f52da2cbbec502a2d0ff5393c4139e3834"}], "stats": {"total": 94, "additions": 37, "deletions": 57}, "files": [{"sha": "3e4403205a7b50a6c2c2d5ba8f0f4d1646d491aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "patch": "@@ -1,3 +1,8 @@\n+2010-10-29  Paul Koning  <ni1d@arrl.net>\n+\n+\tPR/41822\n+\t* config/pdp11/pdp11.md (andhi3, andqi3): Fix wrong code error.\n+\n 2010-10-29  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/46226"}, {"sha": "9cb4ef14ef46cf59677e19b36485b0a9cffe7adb", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 32, "deletions": 57, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=9546fe6a54c050fd0728aeb1dd4bcef4b5d4bff4", "patch": "@@ -43,6 +43,11 @@\n ;; HI is 16 bit\n ;; QI is 8 bit \n \n+;; Integer modes supported on the PDP11, with a mapping from machine mode\n+;; to mnemonic suffix.  SImode and DImode always are special cases.\n+(define_mode_iterator PDPint [QI HI])\n+(define_mode_attr  isfx [(QI \"b\") (HI \"\")])\n+\n ;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n \n ;;- cpp macro #define NOTICE_UPDATE_CC in file tm.h handles condition code\n@@ -809,69 +814,39 @@\n ;;;;- and instructions\n ;; Bit-and on the pdp (like on the VAX) is done with a clear-bits insn.\n \n-(define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,o,o,r,r,r,o,o,o\")\n-        (and:SI (match_operand:SI 1 \"general_operand\" \"%0,0,0,0,0,0,0,0,0,0\")\n-                (not:SI (match_operand:SI 2 \"general_operand\" \"r,o,r,o,I,J,K,I,J,K\"))))]\n+(define_expand \"and<mode>3\"\n+  [(set (match_operand:PDPint 0 \"general_operand\" \"\")\n+\t(and:PDPint (not:PDPint (match_operand:PDPint 1 \"general_operand\" \"\"))\n+\t\t   (match_operand:PDPint 2 \"general_operand\" \"\")))]\n   \"\"\n-  \"*\n-{ /* Here we trust that operands don't overlap \n-\n-     or is lateoperands the low word?? - looks like it! */\n+  \"\n+{\n+  rtx op1 = operands[1];\n \n-  rtx lateoperands[3];\n-  \n-  lateoperands[0] = operands[0];\n+  /* If there is a constant argument, complement that one.\n+     Similarly, if one of the inputs is the same as the output,\n+     complement the other input.  */\n+  if ((CONST_INT_P (operands[2]) && ! CONST_INT_P (op1)) ||\n+      rtx_equal_p (operands[0], operands[1]))\n+    {\n+      operands[1] = operands[2];\n+      operands[2] = op1;\n+      op1 = operands[1];\n+    }\n \n-  if (REG_P (operands[0]))\n-    operands[0] = gen_rtx_REG (HImode, REGNO (operands[0]) + 1);\n+  if (CONST_INT_P (op1))\n+    operands[1] = GEN_INT (~INTVAL (op1));\n   else\n-    operands[0] = adjust_address (operands[0], HImode, 2);\n-  \n-  if (! CONSTANT_P(operands[2]))\n-  {\n-    lateoperands[2] = operands[2];\n-\n-    if (REG_P (operands[2]))\n-      operands[2] = gen_rtx_REG (HImode, REGNO (operands[2]) + 1);\n-    else\n-      operands[2] = adjust_address (operands[2], HImode, 2);\n-\n-    output_asm_insn (\\\"bic %2, %0\\\", operands);\n-    output_asm_insn (\\\"bic %2, %0\\\", lateoperands);\n-    return \\\"\\\";\n-  }\n-\n-  lateoperands[2] = GEN_INT ((INTVAL (operands[2]) >> 16) & 0xffff);\n-  operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffff);\n-  \n-  /* these have different lengths, so we should have \n-     different constraints! */\n-  if (INTVAL(operands[2]))\n-    output_asm_insn (\\\"bic %2, %0\\\", operands);\n-\n-  if (INTVAL(lateoperands[2]))\n-    output_asm_insn (\\\"bic %2, %0\\\", lateoperands);\n-\n-  return \\\"\\\";\n-}\"\n-  [(set_attr \"length\" \"4,8,8,12,4,4,8,6,6,12\")])\n-\n-;; FIXME This definition is wrong, PR/41822\n-(define_insn \"andhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n-\t(and:HI (match_operand:HI 1 \"general_operand\" \"0,0,0,0\")\n-\t\t(not:HI (match_operand:HI 2 \"general_operand\" \"rR,Qi,rR,Qi\"))))]\n-  \"\"\n-  \"bic %2, %0\"\n-  [(set_attr \"length\" \"2,4,4,6\")])\n+    operands[1] = expand_unop (<MODE>mode, one_cmpl_optab, op1, 0, 1);\n+}\")\n \n-(define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=rR,rR,Q,Q\")\n-\t(and:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0\")\n-\t\t(not:QI (match_operand:QI 2 \"general_operand\" \"rR,Qi,rR,Qi\"))))]\n+(define_insn \"*and<mode>\"\n+  [(set (match_operand:PDPint 0 \"general_operand\" \"=rR,rR,Q,Q\")\n+\t(and:PDPint\n+\t     (not: PDPint (match_operand:PDPint 1 \"general_operand\" \"rR,Qi,rR,Qi\"))\n+\t     (match_operand:PDPint 2 \"general_operand\" \"0,0,0,0\")))]\n   \"\"\n-  \"bicb %2, %0\"\n+  \"bic<PDPint:isfx> %1, %0\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n ;;- Bit set (inclusive or) instructions"}]}