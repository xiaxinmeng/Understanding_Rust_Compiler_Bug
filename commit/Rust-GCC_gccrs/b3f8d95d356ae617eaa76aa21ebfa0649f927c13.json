{"sha": "b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmOGQ5NWQzNTZhZTYxN2VhYTc2YWEyMWViZmEwNjQ5ZjkyN2MxMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-11T02:50:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-11T02:50:14Z"}, "message": "configure.in (arm*-*-eabi*): New target.\n\n\t* configure.in (arm*-*-eabi*): New target.\n\t* configure: Regenerate.\n\n\t* configure.ac (arm*-*-eabi*): New target.\n\t(arm*-*-symbianelf*): Likewise.\n\t* configure: Regenerated.\n\n\t* config.gcc (arm*-*-eabi*): New target.\n\t* defaults.h (TARGET_LIBGCC_FUNCS): New macro.\n\t(TARGET_LIB_INT_CMP_BIASED): Likewise.\n\t* expmed.c (expand_divmod): Try a two-valued divmod function as a\n\tlast resort.\n\t* gthr.h: Remove bogus tokens at end of #pragma.\n\t* optabs.c (expand_twoval_binop_libfunc): New function.\n\t(prepare_cmp_insn): Handle the !TARGET_LIB_INT_CMP_BIASED case.\n\t(prepare_float_lib_cmp): Try reversing the condition.\n\t(debug_optab_libfuncs): New function.\n\t* optabs.h (expand_twoval_binop_libfunc): Declare.\n\t* config/arm/arm.c (arm_init_libfuncs): New function.\n\t(arm_compute_initial_eliminatino_offset): Return HOST_WIDE_INT.\n\t(TARGET_INIT_LIBFUNCS): Define it.\n\t* config/arm/arm.h (TARGET_BPABI): New macro.\n\t* config/arm/arm-protos.h\n\t(arm_compute_initial_elimination_offset): Return HOST_WIDE_INT.\n\t* config/arm/bpabi.S: New file.\n\t* config/arm/bpabi.c: Likewise.\n\t* config/arm/bpabi.h: Likewise.\n\t* config/arm/ieee754-df.S (__aeabi_dneg): New function or alias.\n\t(__aeabi_drsub): Likewise.\n\t(__aeabi_dsub): Likewise.\n\t(__aeabi_dadd): Likewise.\n\t(__aeabi_ui2d): Likewise.\n\t(__aeabi_i2d): Likewise.\n\t(__aeabi_f2d): Likewise.\n\t(__aeabi_dmul): Likewise.\n\t(__aeabi_ddiv): Likewise.\n\t(__aeabi_cdrcmple): Likewise.\n\t(__aeabi_cdcmpeq): Likewise.\n\t(__aeabi_cdcmple): Likewise.\n\t(__aeabi_dcmpeq): Likewise.\n\t(__aeabi_dcmplt): Likewise.\n\t(__aeabi_dcmple): Likewise.\n\t(__aeabi_dcmpge): Likewise.\n\t(__aeabi_dcmpgt): Likewise.\n\t(__aeabi_dcmpun): Likewise.\n\t(__aeabi_d2iz): Likewise.\n\t(__aeabi_d2uiz): Likewise.\n\t(__aeabi_d2f): Likewise.\n\t* config/arm/ieee754-sf.S (__aeabi_fneg): New function or alias.\n\t(__aeabi_frsub): Likewise.\n\t(__aeabi_fsub): Likewise.\n\t(__aeabi_fadd): Likewise.\n\t(__aeabi_ui2f): Likewise.\n\t(__aeabi_i2f): Likewise.\n\t(__aeabi_fmul): Likewise.\n\t(__aeabi_fdiv): Likewise.\n\t(__aeabi_cfrcmple): Likewise.\n\t(__aeabi_cfcmpeq): Likewise.\n\t(__aeabi_cfcmple): Likewise.\n\t(__aeabi_fcmpeq): Likewise.\n\t(__aeabi_fcmplt): Likewise.\n\t(__aeabi_fcmple): Likewise.\n\t(__aeabi_fcmpge): Likewise.\n\t(__aeabi_fcmpgt): Likewise.\n\t(__aeabi_fcmpun): Likewise.\n\t(__aeabi_f2iz): Likewise.\n\t(__aeabi_f2uiz): Likewise.\n\t* config/arm/lib1funcs.asm (ARM_CALL): New macro.\n\t(__aeabi_uidivmod): New function or alias.\n\t(__aeabi_idivmod): Likewise.\n\t(__aeabi_idiv0): Likewise.\n\t(__aeabi_ldiv0): Likewise.\n\t(__aeabi_llsr): Likewise.\n\t(__aeabi_lasr): Likewise.\n\t(__aeabi_llsl): Likewise.\n\t(bpabi.S): Include it.\n\t* config/arm/libgcc-bpabi.ver: New file.\n\t* config/arm/symbian.h (ARM_DEFAULT_ABI): Remove.\n\t(LINK_SPEC): Remove.\n\t* config/arm/t-arm-elf (LIB1ASMFUNCS): Add __aeabi_lcmp and\n\t__aeabi_ulcmp.\n\t* config/arm/t-bpabi: New file.\n\t* doc/tm.texi (TARGET_LIBGCC_FUNCS): New entry.\n\t(TARGET_LIB_INT_CMP_BIASED): Likewise.\n\n\t* gcc.dg/testsuite/gcc.dg/arm-eabi1.c: New test.\n\t* gcc.dg/dll-2.c: Fix dg-require syntax.\n\t* gcc.misc-tests/arm-isr.c (abort): Declare.\n\t(exit): Likewise.\n\nFrom-SVN: r85788", "tree": {"sha": "8ecb27f99fc899aec528b0cc2ea297f10080750c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ecb27f99fc899aec528b0cc2ea297f10080750c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/comments", "author": null, "committer": null, "parents": [{"sha": "fba73eb1cb3e624b60cb9974d53c004c2562486b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba73eb1cb3e624b60cb9974d53c004c2562486b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba73eb1cb3e624b60cb9974d53c004c2562486b"}], "stats": {"total": 1621, "additions": 1452, "deletions": 169}, "files": [{"sha": "0f01bff895c42f0a9a6793446e9bd260524b9138", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1,3 +1,8 @@\n+2004-08-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* configure.in (arm*-*-eabi*): New target.\n+\t* configure: Regenerate.\n+\n 2004-08-06  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.def (bfd, opcodes, gcc, zlib): Mark as bootstrap module."}, {"sha": "53857ee0cdc3ec795a2b61dccdb807caf07ec5cc", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1263,7 +1263,7 @@ case \"${target}\" in\n   arm-*-coff | strongarm-*-coff | xscale-*-coff)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n-  arm-*-elf* | strongarm-*-elf* | xscale-*-elf*)\n+  arm-*-elf* | strongarm-*-elf* | xscale-*-elf* | arm*-*-eabi* )\n     noconfigdirs=\"$noconfigdirs target-libffi target-qthreads\"\n     ;;\n   arm*-*-symbianelf*)"}, {"sha": "9a04dad18900468996ad93903ef4f892f8ff60d1", "filename": "configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -479,7 +479,7 @@ case \"${target}\" in\n   arm-*-coff | strongarm-*-coff | xscale-*-coff)\n     noconfigdirs=\"$noconfigdirs ${libgcj}\"\n     ;;\n-  arm-*-elf* | strongarm-*-elf* | xscale-*-elf*)\n+  arm-*-elf* | strongarm-*-elf* | xscale-*-elf* | arm*-*-eabi* )\n     noconfigdirs=\"$noconfigdirs target-libffi target-qthreads\"\n     ;;\n   arm*-*-symbianelf*)"}, {"sha": "1022abd673e73fa93f4e96710cc59de9664b94dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1,3 +1,83 @@\n+2004-08-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config.gcc (arm*-*-eabi*): New target.\n+\t* defaults.h (TARGET_LIBGCC_FUNCS): New macro.\n+\t(TARGET_LIB_INT_CMP_BIASED): Likewise.\n+\t* expmed.c (expand_divmod): Try a two-valued divmod function as a\n+\tlast resort.\n+\t* gthr.h: Remove bogus tokens at end of #pragma.\n+\t* optabs.c (expand_twoval_binop_libfunc): New function.\n+\t(prepare_cmp_insn): Handle the !TARGET_LIB_INT_CMP_BIASED case.\n+\t(prepare_float_lib_cmp): Try reversing the condition.\n+\t(debug_optab_libfuncs): New function.\n+\t* optabs.h (expand_twoval_binop_libfunc): Declare.\n+\t* config/arm/arm.c (arm_init_libfuncs): New function.\n+\t(arm_compute_initial_eliminatino_offset): Return HOST_WIDE_INT.\n+\t(TARGET_INIT_LIBFUNCS): Define it.\n+\t* config/arm/arm.h (TARGET_BPABI): New macro.\n+\t* config/arm/arm-protos.h\n+\t(arm_compute_initial_elimination_offset): Return HOST_WIDE_INT.\n+\t* config/arm/bpabi.S: New file.\n+\t* config/arm/bpabi.c: Likewise.\n+\t* config/arm/bpabi.h: Likewise.\n+\t* config/arm/ieee754-df.S (__aeabi_dneg): New function or alias.\n+\t(__aeabi_drsub): Likewise.\n+\t(__aeabi_dsub): Likewise.\n+\t(__aeabi_dadd): Likewise.\n+\t(__aeabi_ui2d): Likewise.\n+\t(__aeabi_i2d): Likewise.\n+\t(__aeabi_f2d): Likewise.\n+\t(__aeabi_dmul): Likewise.\n+\t(__aeabi_ddiv): Likewise.\n+\t(__aeabi_cdrcmple): Likewise.\n+\t(__aeabi_cdcmpeq): Likewise.\n+\t(__aeabi_cdcmple): Likewise.\n+\t(__aeabi_dcmpeq): Likewise.\n+\t(__aeabi_dcmplt): Likewise.\n+\t(__aeabi_dcmple): Likewise.\n+\t(__aeabi_dcmpge): Likewise.\n+\t(__aeabi_dcmpgt): Likewise.\n+\t(__aeabi_dcmpun): Likewise.\n+\t(__aeabi_d2iz): Likewise.\n+\t(__aeabi_d2uiz): Likewise.\n+\t(__aeabi_d2f): Likewise.\n+\t* config/arm/ieee754-sf.S (__aeabi_fneg): New function or alias.\n+\t(__aeabi_frsub): Likewise.\n+\t(__aeabi_fsub): Likewise.\n+\t(__aeabi_fadd): Likewise.\n+\t(__aeabi_ui2f): Likewise.\n+\t(__aeabi_i2f): Likewise.\n+\t(__aeabi_fmul): Likewise.\n+\t(__aeabi_fdiv): Likewise.\n+\t(__aeabi_cfrcmple): Likewise.\n+\t(__aeabi_cfcmpeq): Likewise.\n+\t(__aeabi_cfcmple): Likewise.\n+\t(__aeabi_fcmpeq): Likewise.\n+\t(__aeabi_fcmplt): Likewise.\n+\t(__aeabi_fcmple): Likewise.\n+\t(__aeabi_fcmpge): Likewise.\n+\t(__aeabi_fcmpgt): Likewise.\n+\t(__aeabi_fcmpun): Likewise.\n+\t(__aeabi_f2iz): Likewise.\n+\t(__aeabi_f2uiz): Likewise.\n+\t* config/arm/lib1funcs.asm (ARM_CALL): New macro.\n+\t(__aeabi_uidivmod): New function or alias.\n+\t(__aeabi_idivmod): Likewise.\n+\t(__aeabi_idiv0): Likewise.\n+\t(__aeabi_ldiv0): Likewise.\n+\t(__aeabi_llsr): Likewise.\n+\t(__aeabi_lasr): Likewise.\n+\t(__aeabi_llsl): Likewise.\n+\t(bpabi.S): Include it.\n+\t* config/arm/libgcc-bpabi.ver: New file.\n+\t* config/arm/symbian.h (ARM_DEFAULT_ABI): Remove.\n+\t(LINK_SPEC): Remove.\n+\t* config/arm/t-arm-elf (LIB1ASMFUNCS): Add __aeabi_lcmp and\n+\t__aeabi_ulcmp.\n+\t* config/arm/t-bpabi: New file.\n+\t* doc/tm.texi (TARGET_LIBGCC_FUNCS): New entry.\n+\t(TARGET_LIB_INT_CMP_BIASED): Likewise.\n+\t\n 2004-08-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000-protos.h (expand_block_clear): Declare."}, {"sha": "d6e95c70057957c61511310586a1580eb8d9dd53", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -652,9 +652,19 @@ arm*-*-ecos-elf)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/ecos-elf.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n \t;;\n-arm*-*-symbianelf*)\n-\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/symbian.h arm/aout.h arm/arm.h\"\n-\ttmake_file=\"t-slibgcc-elf-ver arm/t-arm arm/t-arm-elf\"\n+arm*-*-eabi* | arm*-*-symbianelf* )\n+\t# The BPABI long long divmod functions return a 128-bit value in \n+\t# registers r0-r3.  Correctly modeling that requires the use of\n+\t# TImode.\n+\tneed_64bit_hwint=yes\n+\ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/bpabi.h\"\n+\tcase ${target} in\n+\tarm*-*-symbianelf*)\n+\t  tm_file=\"${tm_file} arm/symbian.h\"\n+\t  ;;\n+\tesac\n+\ttm_file=\"${tm_file} arm/aout.h arm/arm.h\"\n+\ttmake_file=\"t-slibgcc-elf-ver arm/t-arm arm/t-arm-elf arm/t-bpabi\"\n \t;;\n arm*-*-rtems*)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/rtems-elf.h rtems.h\""}, {"sha": "2f361cd63627888dd4316c735cf2392fdb6dce9e", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -34,8 +34,8 @@ extern void arm_expand_prologue (void);\n extern const char *arm_strip_name_encoding (const char *);\n extern void arm_asm_output_labelref (FILE *, const char *);\n extern unsigned long arm_current_func_type (void);\n-extern unsigned int arm_compute_initial_elimination_offset (unsigned int,\n-\t\t\t\t\t\t\t    unsigned int);\n+extern HOST_WIDE_INT arm_compute_initial_elimination_offset (unsigned int,\n+\t\t\t\t\t\t\t     unsigned int);\n extern HOST_WIDE_INT thumb_compute_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t\t       unsigned int);\n "}, {"sha": "40b2fd45c652728b79910d07ed016733434cc199", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -169,6 +169,7 @@ static bool arm_cxx_guard_mask_bit (void);\n static tree arm_get_cookie_size (tree);\n static bool arm_cookie_has_size (void);\n static bool arm_cxx_cdtor_returns_this (void);\n+static void arm_init_libfuncs (void);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -250,6 +251,9 @@ static bool arm_cxx_cdtor_returns_this (void);\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN arm_expand_builtin\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS arm_init_libfuncs\n+\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n@@ -614,6 +618,104 @@ bit_count (unsigned long value)\n   return count;\n }\n \n+/* Set up library functions uqniue to ARM.  */\n+\n+static void\n+arm_init_libfuncs (void)\n+{\n+  /* There are no special library functions unless we are using the\n+     ARM BPABI.  */\n+  if (!TARGET_BPABI)\n+    return;\n+\n+  /* The functions below are described in Section 4 of the \"Run-Time\n+     ABI for the ARM architecture\", Version 1.0.  */\n+\n+  /* Double-precision floating-point arithmetic.  Table 2.  */\n+  set_optab_libfunc (add_optab, DFmode, \"__aeabi_dadd\");\n+  set_optab_libfunc (sdiv_optab, DFmode, \"__aeabi_ddiv\");\n+  set_optab_libfunc (smul_optab, DFmode, \"__aeabi_dmul\");\n+  set_optab_libfunc (neg_optab, DFmode, \"__aeabi_dneg\");\n+  set_optab_libfunc (sub_optab, DFmode, \"__aeabi_dsub\");\n+\n+  /* Double-precision comparisions.  Table 3.  */\n+  set_optab_libfunc (eq_optab, DFmode, \"__aeabi_dcmpeq\");\n+  set_optab_libfunc (ne_optab, DFmode, NULL);\n+  set_optab_libfunc (lt_optab, DFmode, \"__aeabi_dcmplt\");\n+  set_optab_libfunc (le_optab, DFmode, \"__aeabi_dcmple\");\n+  set_optab_libfunc (ge_optab, DFmode, \"__aeabi_dcmpge\");\n+  set_optab_libfunc (gt_optab, DFmode, \"__aeabi_dcmpgt\");\n+  set_optab_libfunc (unord_optab, DFmode, \"__aeabi_dcmpun\");\n+\n+  /* Single-precision floating-point arithmetic.  Table 4.  */\n+  set_optab_libfunc (add_optab, SFmode, \"__aeabi_fadd\");\n+  set_optab_libfunc (sdiv_optab, SFmode, \"__aeabi_fdiv\");\n+  set_optab_libfunc (smul_optab, SFmode, \"__aeabi_fmul\");\n+  set_optab_libfunc (neg_optab, SFmode, \"__aeabi_fneg\");\n+  set_optab_libfunc (sub_optab, SFmode, \"__aeabi_fsub\");\n+  \n+  /* Single-precision comparisions.  Table 5.  */\n+  set_optab_libfunc (eq_optab, SFmode, \"__aeabi_fcmpeq\");\n+  set_optab_libfunc (ne_optab, SFmode, NULL);\n+  set_optab_libfunc (lt_optab, SFmode, \"__aeabi_fcmplt\");\n+  set_optab_libfunc (le_optab, SFmode, \"__aeabi_fcmple\");\n+  set_optab_libfunc (ge_optab, SFmode, \"__aeabi_fcmpge\");\n+  set_optab_libfunc (gt_optab, SFmode, \"__aeabi_fcmpgt\");\n+  set_optab_libfunc (unord_optab, SFmode, \"__aeabi_fcmpun\");\n+\n+  /* Floating-point to integer conversions.  Table 6.  */\n+  set_conv_libfunc (sfix_optab, SImode, DFmode, \"__aeabi_d2iz\");\n+  set_conv_libfunc (ufix_optab, SImode, DFmode, \"__aeabi_d2uiz\");\n+  set_conv_libfunc (sfix_optab, DImode, DFmode, \"__aeabi_d2lz\");\n+  set_conv_libfunc (ufix_optab, DImode, DFmode, \"__aeabi_d2ulz\");\n+  set_conv_libfunc (sfix_optab, SImode, SFmode, \"__aeabi_f2iz\");\n+  set_conv_libfunc (ufix_optab, SImode, SFmode, \"__aeabi_f2uiz\");\n+  set_conv_libfunc (sfix_optab, DImode, SFmode, \"__aeabi_f2lz\");\n+  set_conv_libfunc (ufix_optab, DImode, SFmode, \"__aeabi_f2ulz\");\n+\n+  /* Conversions between floating types.  Table 7.  */\n+  set_conv_libfunc (trunc_optab, SFmode, DFmode, \"__aeabi_d2f\");\n+  set_conv_libfunc (sext_optab, DFmode, SFmode, \"__aeabi_f2d\");\n+\n+  /* Integer to floating-point converisons.  Table 8.  */\n+  set_conv_libfunc (sfloat_optab, DFmode, SImode, \"__aeabi_i2d\");\n+  set_conv_libfunc (ufloat_optab, DFmode, SImode, \"__aeabi_ui2d\");\n+  set_conv_libfunc (sfloat_optab, DFmode, DImode, \"__aeabi_l2d\");\n+  set_conv_libfunc (ufloat_optab, DFmode, DImode, \"__aeabi_ul2d\");\n+  set_conv_libfunc (sfloat_optab, SFmode, SImode, \"__aeabi_i2f\");\n+  set_conv_libfunc (ufloat_optab, SFmode, SImode, \"__aeabi_ui2f\");\n+  set_conv_libfunc (sfloat_optab, SFmode, DImode, \"__aeabi_l2f\");\n+  set_conv_libfunc (ufloat_optab, SFmode, DImode, \"__aeabi_ul2f\");\n+\n+  /* Long long.  Table 9.  */\n+  set_optab_libfunc (smul_optab, DImode, \"__aeabi_lmul\");\n+  set_optab_libfunc (sdivmod_optab, DImode, \"__aeabi_ldivmod\");\n+  set_optab_libfunc (udivmod_optab, DImode, \"__aeabi_uldivmod\");\n+  set_optab_libfunc (ashl_optab, DImode, \"__aeabi_llsl\");\n+  set_optab_libfunc (lshr_optab, DImode, \"__aeabi_llsr\");\n+  set_optab_libfunc (ashr_optab, DImode, \"__aeabi_lasr\");\n+  set_optab_libfunc (cmp_optab, DImode, \"__aeabi_lcmp\");\n+  set_optab_libfunc (ucmp_optab, DImode, \"__aeabi_ulcmp\");\n+\n+  /* Integer (32/32->32) division.  \\S 4.3.1.  */\n+  set_optab_libfunc (sdivmod_optab, SImode, \"__aeabi_idivmod\");\n+  set_optab_libfunc (udivmod_optab, SImode, \"__aeabi_uidivmod\");\n+\n+  /* The divmod functions are designed so that they can be used for\n+     plain division, even though they return both the quotient and the\n+     remainder.  The quotient is returned in the usual location (i.e.,\n+     r0 for SImode, {r0, r1} for DImode), just as would be expected\n+     for an ordinary division routine.  Because the AAPCS calling\n+     conventions specify that all of { r0, r1, r2, r3 } are\n+     callee-saved registers, there is no need to tell the compiler\n+     explicitly that those registers are clobbered by these\n+     routines.  */\n+  set_optab_libfunc (sdiv_optab, DImode, \"__aeabi_ldivmod\");\n+  set_optab_libfunc (udiv_optab, DImode, \"__aeabi_uldivmod\");\n+  set_optab_libfunc (sdiv_optab, SImode, \"__aeabi_idivmod\");\n+  set_optab_libfunc (udiv_optab, SImode, \"__aeabi_uidivmod\");\n+}\n+\n /* Fix up any incompatible options that the user has specified.\n    This has now turned into a maze.  */\n void\n@@ -10165,7 +10267,7 @@ arm_get_frame_offsets (void)\n /* Calculate the relative offsets for the different stack pointers.  Positive\n    offsets are in the direction of stack growth.  */\n \n-unsigned int\n+HOST_WIDE_INT\n arm_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n {\n   arm_stack_offsets *offsets;"}, {"sha": "c3e82235c1682a83bc4314987325b699e0cc8cdd", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -296,6 +296,14 @@ extern GTY(()) rtx aof_pic_label;\n #define TARGET_AAPCS_BASED \\\n     (arm_abi != ARM_ABI_APCS && arm_abi != ARM_ABI_ATPCS)\n \n+/* True iff the full BPABI is being used.  If TARGET_BPABI is true,\n+   then TARGET_AAPCS_BASED must be true -- but the converse does not\n+   hold.  TARGET_BPABI implies the use of the BPABI runtime library,\n+   etc., in addition to just the AAPCS calling conventions.  */\n+#ifndef TARGET_BPABI\n+#define TARGET_BPABI false\n+#endif \n+\n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis.  */\n #ifndef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES"}, {"sha": "bebbce5f3e52dada60bca71b9389d2620ac38402", "filename": "gcc/config/arm/bpabi.S", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.S?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,95 @@\n+/* Miscellaneous BPABI functions.\n+\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#ifdef __ARMEB__\n+#define xxh r0\n+#define xxl r1\n+#define yyh r2\n+#define yyl r3\n+#else\n+#define xxh r1\n+#define xxl r0\n+#define yyh r3\n+#define yyl r2\n+#endif\t\n+\t\n+#ifdef L_aeabi_lcmp\n+\n+ARM_FUNC_START aeabi_lcmp\n+\tsubs\tip, xxl, yyl\n+\tsbcs\tip, xxh, yyh\n+\tsubeqs  ip, xxl, yyl\n+\tmov\tr0, ip\n+\tRET\n+\tFUNC_END aeabi_lcmp\n+\n+#endif /* L_aeabi_lcmp */\n+\t\n+#ifdef L_aeabi_ulcmp\n+\n+ARM_FUNC_START aeabi_ulcmp\n+\tcmp\txxh, yyh\n+\tmovlo\tr0, #-1\n+\tmovhi\tr0, #1\n+\tRETc(ne)\n+\tcmp\txxl, yyl\n+\tmovlo\tr0, #-1\n+\tmovhi\tr0, #1\n+\tmoveq\tr0, #0\n+\tRET\n+\tFUNC_END aeabi_ulcmp\n+\n+#endif /* L_aeabi_ulcmp */\n+\n+#ifdef L_aeabi_ldivmod\n+\n+ARM_FUNC_START aeabi_ldivmod\n+\tsub sp, sp, #8\n+\tstmfd sp!, {sp, lr}\n+\tbl SYM(__gnu_ldivmod_helper) __PLT__\n+\tldr lr, [sp, #4]\n+\tadd sp, sp, #8\n+\tldmfd sp!, {r2, r3}\n+\tRET\n+\t\n+#endif /* L_aeabi_ldivmod */\n+\n+#ifdef L_aeabi_uldivmod\n+\n+ARM_FUNC_START aeabi_uldivmod\n+\tsub sp, sp, #8\n+\tstmfd sp!, {sp, lr}\n+\tbl SYM(__gnu_uldivmod_helper) __PLT__\n+\tldr lr, [sp, #4]\n+\tadd sp, sp, #8\n+\tldmfd sp!, {r2, r3}\n+\tRET\n+\t\n+#endif /* L_aeabi_divmod */\n+\t"}, {"sha": "7bdc161215c2e68d58f72d8c1de348bcd12afdf8", "filename": "gcc/config/arm/bpabi.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,94 @@\n+/* Miscellaneous BPABI functions.\n+\n+   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+extern double __aeabi_ul2d (unsigned long long);\n+extern float __aeabi_ul2f (unsigned long long);\n+extern long long __divdi3 (long long, long long);\n+extern unsigned long long __udivdi3 (unsigned long long, \n+\t\t\t\t     unsigned long long);\n+extern long long __gnu_ldivmod_helper (long long, long long, long long *);\n+extern unsigned long long __gnu_uldivmod_helper (unsigned long long, \n+\t\t\t\t\t\t unsigned long long, \n+\t\t\t\t\t\t unsigned long long *);\n+\n+/* These functions are based on __floatdidf and __floatdisf, but\n+   convert unsigned DImode values instead of signed DImode\n+   values.  */\n+\n+#define WORD_SIZE (sizeof (int) * 8)\n+#define HIGH_HALFWORD_COEFF (((unsigned long long) 1) << (WORD_SIZE / 2))\n+#define HIGH_WORD_COEFF (((unsigned long long) 1) << WORD_SIZE)\n+\n+double\n+__aeabi_ul2d (unsigned long long u)\n+{\n+  double d = (unsigned) (u >> WORD_SIZE);\n+  d *= HIGH_HALFWORD_COEFF;\n+  d *= HIGH_HALFWORD_COEFF;\n+  d += (unsigned) (u & (HIGH_WORD_COEFF - 1));\n+\n+  return d;\n+}\n+\n+float\n+__aeabi_ul2f (unsigned long long u)\n+{\n+  /* Do the calculation in DFmode so that we don't lose any of the\n+     precision of the high word while multiplying it.  */\n+  double f = (unsigned) (u >> WORD_SIZE);\n+  f *= HIGH_HALFWORD_COEFF;\n+  f *= HIGH_HALFWORD_COEFF;\n+  f += (unsigned) (u & (HIGH_WORD_COEFF - 1));\n+\n+  return (float) f;\n+}\n+\n+long long\n+__gnu_ldivmod_helper (long long a, \n+\t\t      long long b, \n+\t\t      long long *remainder)\n+{\n+  long long quotient;\n+\n+  quotient = __divdi3 (a, b);\n+  *remainder = a - b * quotient;\n+  return quotient;\n+}\n+\n+unsigned long long\n+__gnu_uldivmod_helper (unsigned long long a, \n+\t\t       unsigned long long b,\n+\t\t       unsigned long long *remainder)\n+{\n+  unsigned long long quotient;\n+\n+  quotient = __udivdi3 (a, b);\n+  *remainder = a - b * quotient;\n+  return quotient;\n+}"}, {"sha": "7647608c7accdc7590fe400f354b6bf26528d4ec", "filename": "gcc/config/arm/bpabi.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,83 @@\n+/* Configuration file for ARM BPABI targets.\n+   Copyright (C) 2004\n+   Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC   \n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* Use the AAPCS ABI by default.  */\n+#define ARM_DEFAULT_ABI ARM_ABI_AAPCS\n+\n+/* Assume that AAPCS ABIs should adhere to the full BPABI.  */ \n+#define TARGET_BPABI (TARGET_AAPCS_BASED)\n+\n+/* The ARM BPABI functions return a boolean; they use no special\n+   calling convention.  */\n+#define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) TARGET_BPABI\n+\n+/* Do not generate calls to any of the standard GCC functions in\n+   libgcc when generating BPABI code.  */\n+#define TARGET_LIBGCC_LIBFUNCS !TARGET_BPABI\n+\n+/* The BPABI integer comparision routines return { -1, 0, 1 }.  */\n+#define TARGET_LIB_INT_CMP_BIASED !TARGET_BPABI\n+\n+/* The generic link spec in elf.h does not support shared libraries.  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} \"\t\t\\\n+  \"%{static:-Bstatic} %{shared:-shared} %{symbolic:-Bsymbolic} \"\t\\\n+  \"-X\"\n+\n+#if defined (__thumb__) && !defined (__THUMB_INTERWORD) \n+#define RENAME_LIBRARY_SET \".thumb_set\"\n+#else\n+#define RENAME_LIBRARY_SET \".set\"\n+#endif\n+\n+/* Make __aeabi_AEABI_NAME an alias for __GCC_NAME.  */\n+#define RENAME_LIBRARY(GCC_NAME, AEABI_NAME)\t\t\\\n+  __asm__ (\".globl\\t__aeabi_\" #AEABI_NAME \"\\n\"\t\t\\\n+\t   RENAME_LIBRARY_SET \"\\t__aeabi_\" #AEABI_NAME \t\\\n+\t     \", __\" #GCC_NAME \"\\n\");\n+\n+/* Give some libgcc functions an additional __aeabi name.  */\n+#ifdef L_muldi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (muldi3, lmul)\n+#endif\n+#ifdef L_muldi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (muldi3, lmul)\n+#endif\n+#ifdef L_fixdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixdfdi, d2lz)\n+#endif\n+#ifdef L_fixunsdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunsdfdi, d2ulz)\n+#endif\n+#ifdef L_fixsfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixsfdi, f2lz)\n+#endif\n+#ifdef L_fixunssfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunssfdi, f2ulz)\n+#endif\n+#ifdef L_floatdidf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatdidf, l2d)\n+#endif\n+#ifdef L_floatdisf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatdisf, l2f)\n+#endif\n+"}, {"sha": "11b356a4186c63440ddee564e05f8a075446eb44", "filename": "gcc/config/arm/ieee754-df.S", "status": "modified", "additions": 98, "deletions": 3, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-df.S?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -59,24 +59,33 @@\n #ifdef L_negdf2\n \n ARM_FUNC_START negdf2\n+ARM_FUNC_ALIAS aeabi_dneg negdf2\n \t@ flip sign bit\n \teor\txh, xh, #0x80000000\n \tRET\n \n+\tFUNC_END aeabi_dneg\n \tFUNC_END negdf2\n \n #endif\n \n #ifdef L_addsubdf3\n \n-ARM_FUNC_START subdf3\n+ARM_FUNC_START aeabi_drsub\n+\n+\teor\txh, xh, #0x80000000\t@ flip sign bit of first arg\n+\tb\t1f\t\n+\n+\tARM_FUNC_START subdf3\n+ARM_FUNC_ALIAS aeabi_dsub subdf3\n \t@ flip sign bit of second arg\n \teor\tyh, yh, #0x80000000\n #if defined(__thumb__) && !defined(__THUMB_INTERWORK__)\n \tb\t1f\t\t\t@ Skip Thumb-code prologue\n #endif\n \n ARM_FUNC_START adddf3\n+ARM_FUNC_ALIAS aeabi_dadd adddf3\n \n 1:\t@ Compare both args, return zero if equal but the sign.\n \tteq\txl, yl\n@@ -373,10 +382,13 @@ LSYM(Lad_i):\n \tmovne\txl, #0\n \tRETLDM\t\"r4, r5\"\n \n+\tFUNC_END aeabi_dsub\n \tFUNC_END subdf3\n+\tFUNC_END aeabi_dadd\n \tFUNC_END adddf3\n \n ARM_FUNC_START floatunsidf\n+ARM_FUNC_ALIAS aeabi_ui2d floatunsidf\n \tteq\tr0, #0\n \tmoveq\tr1, #0\n \tRETc(eq)\n@@ -388,9 +400,11 @@ ARM_FUNC_START floatunsidf\n \tmov\txh, #0\n \tb\tLSYM(Lad_l)\n \n+\tFUNC_END aeabi_ui2d\n \tFUNC_END floatunsidf\n \n ARM_FUNC_START floatsidf\n+ARM_FUNC_ALIAS aeabi_i2d floatsidf\n \tteq\tr0, #0\n \tmoveq\tr1, #0\n \tRETc(eq)\n@@ -403,9 +417,12 @@ ARM_FUNC_START floatsidf\n \tmov\txh, #0\n \tb\tLSYM(Lad_l)\n \n+\tFUNC_END aeabi_i2d\n \tFUNC_END floatsidf\n \n ARM_FUNC_START extendsfdf2\n+ARM_FUNC_ALIAS aeabi_f2d extendsfdf2\n+\t\n \tmovs\tr2, r0, lsl #1\n \tbeq\t1f\t\t\t@ value is 0.0 or -0.0\n \tmov\txh, r2, asr #3\t\t@ stretch exponent\n@@ -429,14 +446,15 @@ ARM_FUNC_START extendsfdf2\n \tbic\txh, xh, #0x80000000\n \tb\tLSYM(Lad_l)\n \n+\tFUNC_END aeabi_f2d\n \tFUNC_END extendsfdf2\n \n #endif /* L_addsubdf3 */\n \n #ifdef L_muldivdf3\n \n ARM_FUNC_START muldf3\n-\n+ARM_FUNC_ALIAS aeabi_dmul muldf3\n \tstmfd\tsp!, {r4, r5, r6, lr}\n \n \t@ Mask out exponents.\n@@ -722,10 +740,12 @@ LSYM(Lml_n):\n \torr\txh, xh, #0x00f80000\n \tRETLDM\t\"r4, r5, r6\"\n \n+\tFUNC_END aeabi_dmul\n \tFUNC_END muldf3\n \n ARM_FUNC_START divdf3\n-\n+ARM_FUNC_ALIAS aeabi_ddiv divdf3\n+\t\n \tstmfd\tsp!, {r4, r5, r6, lr}\n \n \t@ Mask out exponents.\n@@ -934,6 +954,7 @@ LSYM(Ldv_s):\n \tbne\tLSYM(Lml_z)\t\t@ 0 / <non_zero> -> 0\n \tb\tLSYM(Lml_n)\t\t@ 0 / 0 -> NAN\n \n+\tFUNC_END aeabi_ddiv\n \tFUNC_END divdf3\n \n #endif /* L_muldivdf3 */\n@@ -1013,11 +1034,78 @@ ARM_FUNC_ALIAS eqdf2 cmpdf2\n \tFUNC_END eqdf2\n \tFUNC_END cmpdf2\n \n+ARM_FUNC_START aeabi_cdrcmple\n+\tmov\tip, r0\n+\tmov\tr0, r2\n+\tmov\tr2, ip\n+\tmov\tip, r1\n+\tmov\tr1, r3\n+\tmov\tr3, ip\n+\tb\t6f\n+\t\n+ARM_FUNC_START aeabi_cdcmpeq\n+ARM_FUNC_ALIAS aeabi_cdcmple aeabi_cdcmpeq\n+\t@ The status-returning routines are required to preserve all\n+\t@ registers except ip, lr, and cpsr.\n+6:\tstmfd\tsp!, {r0, r1, r2, r3, lr}\n+\tARM_CALL cmpdf2\n+\t@ Set the Z flag correctly, and the C flag unconditionally.\n+\tcmp\t r0, #0\n+\t@ Clear the C flag if the return value was -1, indicating\n+\t@ that the first operand was smaller than the second.\n+\tcmnmi\t r0, #0\n+\tRETLDM   \"r0, r1, r2, r3\"\n+\tFUNC_END aeabi_cdcmple\n+\tFUNC_END aeabi_cdcmpeq\n+\t\n+ARM_FUNC_START\taeabi_dcmpeq\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cdcmple\n+\tmoveq\tr0, #1\t@ Equal to.\n+\tmovne\tr0, #0\t@ Less than, greater than, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_dcmpeq\n+\n+ARM_FUNC_START\taeabi_dcmplt\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cdcmple\n+\tmovcc\tr0, #1\t@ Less than.\n+\tmovcs\tr0, #0\t@ Equal to, greater than, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_dcmplt\n+\n+ARM_FUNC_START\taeabi_dcmple\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cdcmple\n+\tmovls\tr0, #1  @ Less than or equal to.\n+\tmovhi\tr0, #0\t@ Greater than or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_dcmple\n+\n+ARM_FUNC_START\taeabi_dcmpge\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cdrcmple\n+\tmovls\tr0, #1\t@ Operand 2 is less than or equal to operand 1.\n+\tmovhi\tr0, #0\t@ Operand 2 greater than operand 1, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_dcmpge\n+\n+ARM_FUNC_START\taeabi_dcmpgt\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cdrcmple\n+\tmovcc\tr0, #1\t@ Operand 2 is less than operand 1.\n+\tmovcs\tr0, #0  @ Operand 2 is greater than or equal to operand 1,\n+\t\t\t@ or they are unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_dcmpgt\n+\t\t\n #endif /* L_cmpdf2 */\n \n #ifdef L_unorddf2\n \n ARM_FUNC_START unorddf2\n+ARM_FUNC_ALIAS aeabi_dcmpun unorddf2\n+\t\n \tstr\tlr, [sp, #-4]!\n \tmov\tip, #0x7f000000\n \torr\tip, ip, #0x00f00000\n@@ -1037,13 +1125,15 @@ ARM_FUNC_START unorddf2\n 3:\tmov\tr0, #1\t\t\t@ arguments are unordered.\n \tRETLDM\n \n+\tFUNC_END aeabi_dcmpun\n \tFUNC_END unorddf2\n \n #endif /* L_unorddf2 */\n \n #ifdef L_fixdfsi\n \n ARM_FUNC_START fixdfsi\n+ARM_FUNC_ALIAS aeabi_d2iz fixdfsi\n \torrs\tip, xl, xh, lsl #1\n \tbeq\t1f\t\t\t@ value is 0.\n \n@@ -1084,13 +1174,15 @@ ARM_FUNC_START fixdfsi\n 4:\tmov\tr0, #0\t\t\t@ How should we convert NAN?\n \tRET\n \n+\tFUNC_END aeabi_d2iz\n \tFUNC_END fixdfsi\n \n #endif /* L_fixdfsi */\n \n #ifdef L_fixunsdfsi\n \n ARM_FUNC_START fixunsdfsi\n+ARM_FUNC_ALIAS aeabi_d2uiz fixunsdfsi\n \torrs\tip, xl, xh, lsl #1\n \tmovcss\tr0, #0\t\t\t@ value is negative\n \tRETc(eq)\t\t\t@ or 0 (xl, xh overlap r0)\n@@ -1127,13 +1219,15 @@ ARM_FUNC_START fixunsdfsi\n 4:\tmov\tr0, #0\t\t\t@ How should we convert NAN?\n \tRET\n \n+\tFUNC_END aeabi_d2uiz\n \tFUNC_END fixunsdfsi\n \n #endif /* L_fixunsdfsi */\n \n #ifdef L_truncdfsf2\n \n ARM_FUNC_START truncdfsf2\n+ARM_FUNC_ALIAS aeabi_d2f truncdfsf2\n \torrs\tr2, xl, xh, lsl #1\n \tmoveq\tr0, r2, rrx\n \tRETc(eq)\t\t\t@ value is 0.0 or -0.0\n@@ -1219,6 +1313,7 @@ ARM_FUNC_START truncdfsf2\n \tand\txh, xh, #0x80000000\n \tb\t5b\n \n+\tFUNC_END aeabi_d2f\n \tFUNC_END truncdfsf2\n \n #endif /* L_truncdfsf2 */"}, {"sha": "627fd7231d34e488cfc2205b21f5faa2f283146c", "filename": "gcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 139, "deletions": 11, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -41,23 +41,34 @@\n #ifdef L_negsf2\n \t\n ARM_FUNC_START negsf2\n+ARM_FUNC_ALIAS aeabi_fneg negsf2\n+\t\n \teor\tr0, r0, #0x80000000\t@ flip sign bit\n \tRET\n \n+\tFUNC_END aeabi_fneg\n \tFUNC_END negsf2\n \n #endif\n \n #ifdef L_addsubsf3\n \n+ARM_FUNC_START aeabi_frsub\n+\n+\teor\tr0, r0, #0x80000000\t@ flip sign bit of first arg\n+\tb\t1f\t\n+\t\n ARM_FUNC_START subsf3\n+ARM_FUNC_ALIAS aeabi_fsub subsf3\n+\t\n \teor\tr1, r1, #0x80000000\t@ flip sign bit of second arg\n #if defined(__thumb__) && !defined(__THUMB_INTERWORK__)\n \tb\t1f\t\t\t@ Skip Thumb-code prologue\n #endif\n \n ARM_FUNC_START addsf3\n-\n+ARM_FUNC_ALIAS aeabi_fadd addsf3\n+\t\n 1:\t@ Compare both args, return zero if equal but the sign.\n \teor\tr2, r0, r1\n \tteq\tr2, #0x80000000\n@@ -258,14 +269,21 @@ LSYM(Lad_i):\n \torrne\tr0, r3, #0x00400000\t@ NAN\n \tRET\n \n+\tFUNC_END aeabi_frsub\n+\tFUNC_END aeabi_fadd\n \tFUNC_END addsf3\n+\tFUNC_END aeabi_fsub\n \tFUNC_END subsf3\n \n ARM_FUNC_START floatunsisf\n+ARM_FUNC_ALIAS aeabi_ui2f floatunsisf\n+\t\t\n \tmov\tr3, #0\n \tb\t1f\n \n ARM_FUNC_START floatsisf\n+ARM_FUNC_ALIAS aeabi_i2f floatsisf\n+\t\n \tands\tr3, r0, #0x80000000\n \trsbmi\tr0, r0, #0\n \n@@ -290,15 +308,18 @@ ARM_FUNC_START floatsisf\n \tadd\tr2, r2, #(2 << 23)\n \tb\tLSYM(Lad_p)\n \n+\tFUNC_END aeabi_i2f\n \tFUNC_END floatsisf\n+\tFUNC_END aeabi_ui2f\n \tFUNC_END floatunsisf\n \n #endif /* L_addsubsf3 */\n \n #ifdef L_muldivsf3\n \n ARM_FUNC_START mulsf3\n-\n+ARM_FUNC_ALIAS aeabi_fmul mulsf3\n+\t\n \t@ Mask out exponents.\n \tmov\tip, #0xff000000\n \tand\tr2, r0, ip, lsr #1\n@@ -485,10 +506,12 @@ LSYM(Lml_n):\n \torr\tr0, r0, #0x00c00000\n \tRET\n \n+\tFUNC_END aeabi_fmul\n \tFUNC_END mulsf3\n \n ARM_FUNC_START divsf3\n-\n+ARM_FUNC_ALIAS aeabi_fdiv divsf3\n+\t\n \t@ Mask out exponents.\n \tmov\tip, #0xff000000\n \tand\tr2, r0, ip, lsr #1\n@@ -636,12 +659,28 @@ LSYM(Ldv_s):\n \tbne\tLSYM(Lml_z)\t\t@ 0 / <non_zero> -> 0\n \tb\tLSYM(Lml_n)\t\t@ 0 / 0 -> NAN\n \n+\tFUNC_END aeabi_fdiv\n \tFUNC_END divsf3\n \n #endif /* L_muldivsf3 */\n \n #ifdef L_cmpsf2\n \n+\t@ The return value in r0 is\n+\t@\n+\t@   0  if the operands are equal\n+\t@   1  if the first operand is greater than the second, or\n+\t@      the operands are unordered and the operation is\n+\t@      CMP, LT, LE, NE, or EQ.\n+\t@   -1 if the first operand is less than the second, or\n+\t@      the operands are unordered and the operation is GT\n+\t@      or GE.\n+\t@\n+\t@ The Z flag will be set iff the operands are equal.\n+\t@\n+\t@ The following registers are clobbered by this function:\n+\t@   ip, r0, r1, r2, r3\n+\n ARM_FUNC_START gtsf2\n ARM_FUNC_ALIAS gesf2 gtsf2\n \tmov\tr3, #-1\n@@ -657,24 +696,31 @@ ARM_FUNC_ALIAS nesf2 cmpsf2\n ARM_FUNC_ALIAS eqsf2 cmpsf2\n \tmov\tr3, #1\t\t\t@ how should we specify unordered here?\n \n-1:\t@ Trap any INF/NAN first.\n-\tmov\tip, #0xff000000\n+\t@ Both Inf and NaN have an exponent of 255.  Therefore, we\n+\t@ compute (r1 & 0x8f80000) || (r2 & 0x8f8000).\n+1:\tmov\tip, #0xff000000\n \tand\tr2, r1, ip, lsr #1\n \tteq\tr2, ip, lsr #1\n \tand\tr2, r0, ip, lsr #1\n \tteqne\tr2, ip, lsr #1\n \tbeq\t3f\n \n-\t@ Test for equality.\n-\t@ Note that 0.0 is equal to -0.0.\n+\t@ Test for equality.  The representations of +0.0 and -0.0\n+\t@ have all bits set to zero, except for the sign bit.  Since\n+\t@ 0.0 is equal to -0.0, we begin by testing \n+\t@ ((r0 | r1) & ~0x8000000).\n 2:\torr\tr3, r0, r1\n+\t@ If the result of the bitwise and is zero, then the Z flag\n+\t@ will be set.  In any case, the C flag will be set.\n \tbics\tr3, r3, #0x80000000\t@ either 0.0 or -0.0\n \tteqne\tr0, r1\t\t\t@ or both the same\n+\t@ If the Z flag is set, the two operands were equal.  Return zero.\n \tmoveq\tr0, #0\n \tRETc(eq)\n \n-\t@ Check for sign difference.  The N flag is set if it is the case.\n-\t@ If so, return sign of r0.\n+\t@ Check for sign difference.  The N flag is set (due to the\n+\t@ use of teq above) if the sign bit is set on exactly one\n+\t@ of the operands.  Return the sign of the first operand.\n \tmovmi\tr0, r0, asr #31\n \torrmi\tr0, r0, #1\n \tRETc(mi)\n@@ -686,12 +732,24 @@ ARM_FUNC_ALIAS eqsf2 cmpsf2\n \t@ Compare mantissa if exponents are equal\n \tmoveq\tr0, r0, lsl #9\n \tcmpeq\tr0, r1, lsl #9\n+\n+\t@ We know the operands cannot be equal at this point, so the\n+\t@ Z flag is clear.  The C flag is set if the first operand has\n+\t@ the greater exponent, or the exponents are equal and the \n+\t@ first operand has the greater mantissa.  Therefore, if the C\n+\t@ flag is set, the first operand is greater iff the sign is\n+\t@ positive.  These next two instructions will put zero in\n+\t@ r0 if the first operand is greater, and -1 if the second\n+\t@ operand is greater.\n \tmovcs\tr0, r1, asr #31\n \tmvncc\tr0, r1, asr #31\n+\t@ If r0 is 0, the first operand is greater, so return 1.  Leave\n+\t@ -1 unchanged.\n \torr\tr0, r0, #1\n \tRET\n \n-\t@ Look for a NAN. \n+\t@ We know that at least one argument is either Inf or NaN.\n+\t@ Look for a NaN. \n 3:\tand\tr2, r1, ip, lsr #1\n \tteq\tr2, ip, lsr #1\n \tbne\t4f\n@@ -702,7 +760,8 @@ ARM_FUNC_ALIAS eqsf2 cmpsf2\n \tbne\t2b\n \tmovs\tip, r0, lsl #9\n \tbeq\t2b\t\t\t@ r0 is not NAN\n-5:\tmov\tr0, r3\t\t\t@ return unordered code from r3.\n+5:\t@ The Z flag is clear at this point.\n+\tmov\tr0, r3\t\t\t@ return unordered code from r3.\n \tRET\n \n \tFUNC_END gesf2\n@@ -713,11 +772,75 @@ ARM_FUNC_ALIAS eqsf2 cmpsf2\n \tFUNC_END eqsf2\n \tFUNC_END cmpsf2\n \n+ARM_FUNC_START aeabi_cfrcmple\n+\tmov\tip, r0\n+\tmov\tr0, r1\n+\tmov\tr1, ip\n+\tb\t6f\n+\t\n+ARM_FUNC_START aeabi_cfcmpeq\n+ARM_FUNC_ALIAS aeabi_cfcmple aeabi_cfcmpeq\n+\t@ The status-returning routines are required to preserve all\n+\t@ registers except ip, lr, and cpsr.\n+6:\tstmfd\tsp!, {r0, r1, r2, r3, lr}\n+\tARM_CALL cmpsf2\n+\t@ Set the Z flag correctly, and the C flag unconditionally.\n+\tcmp\t r0, #0\n+\t@ Clear the C flag if the return value was -1, indicating\n+\t@ that the first operand was smaller than the second.\n+\tcmnmi\t r0, #0\n+\tRETLDM  \"r0, r1, r2, r3\"\n+\tFUNC_END aeabi_cfcmple\n+\tFUNC_END aeabi_cfcmpeq\n+\t\n+ARM_FUNC_START\taeabi_fcmpeq\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cfcmple\n+\tmoveq\tr0, #1\t@ Equal to.\n+\tmovne\tr0, #0\t@ Less than, greater than, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_fcmpeq\n+\n+ARM_FUNC_START\taeabi_fcmplt\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cfcmple\n+\tmovcc\tr0, #1\t@ Less than.\n+\tmovcs\tr0, #0\t@ Equal to, greater than, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_fcmplt\n+\n+ARM_FUNC_START\taeabi_fcmple\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cfcmple\n+\tmovls\tr0, #1  @ Less than or equal to.\n+\tmovhi\tr0, #0\t@ Greater than or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_fcmple\n+\n+ARM_FUNC_START\taeabi_fcmpge\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cfrcmple\n+\tmovls\tr0, #1\t@ Operand 2 is less than or equal to operand 1.\n+\tmovhi\tr0, #0\t@ Operand 2 greater than operand 1, or unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_fcmpge\n+\n+ARM_FUNC_START\taeabi_fcmpgt\n+\tstr\tlr, [sp, #-4]!\n+\tARM_CALL aeabi_cfrcmple\n+\tmovcc\tr0, #1\t@ Operand 2 is less than operand 1.\n+\tmovcs\tr0, #0  @ Operand 2 is greater than or equal to operand 1,\n+\t\t\t@ or they are unordered.\n+\tRETLDM\n+\tFUNC_END aeabi_fcmpgt\n+\t\t\n #endif /* L_cmpsf2 */\n \n #ifdef L_unordsf2\n \n ARM_FUNC_START unordsf2\n+ARM_FUNC_ALIAS aeabi_fcmpun unordsf2\n+\t\n \tmov\tip, #0xff000000\n \tand\tr2, r1, ip, lsr #1\n \tteq\tr2, ip, lsr #1\n@@ -734,13 +857,15 @@ ARM_FUNC_START unordsf2\n 3:\tmov\tr0, #1\t\t\t@ arguments are unordered.\n \tRET\n \n+\tFUNC_END aeabi_fcmpun\n \tFUNC_END unordsf2\n \n #endif /* L_unordsf2 */\n \n #ifdef L_fixsfsi\n \n ARM_FUNC_START fixsfsi\n+ARM_FUNC_ALIAS aeabi_f2iz fixsfsi\n \tmovs\tr0, r0, lsl #1\n \tRETc(eq)\t\t\t@ value is 0.\n \n@@ -774,13 +899,15 @@ ARM_FUNC_START fixsfsi\n 3:\tmov\tr0, #0\t\t\t@ What should we convert NAN to?\n \tRET\n \n+\tFUNC_END aeabi_f2iz\n \tFUNC_END fixsfsi\n \n #endif /* L_fixsfsi */\n \n #ifdef L_fixunssfsi\n \n ARM_FUNC_START fixunssfsi\n+ARM_FUNC_ALIAS aeabi_f2uiz fixunssfsi\n \tmovs\tr0, r0, lsl #1\n \tmovcss\tr0, #0\t\t\t@ value is negative...\n \tRETc(eq)\t\t\t@ ... or 0.\n@@ -811,6 +938,7 @@ ARM_FUNC_START fixunssfsi\n 3:\tmov\tr0, #0\t\t\t@ What should we convert NAN to?\n \tRET\n \n+\tFUNC_END aeabi_f2uiz\n \tFUNC_END fixunssfsi\n \n #endif /* L_fixunssfsi */"}, {"sha": "cea093c9e25f56234aeeba977ba38b42e4e4bac0", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -199,6 +199,9 @@ SYM (__\\name):\n _L__\\name:\t\t/* A hook to tell gdb that we've switched to ARM */\n .endm\n #define EQUIV .thumb_set\n+.macro  ARM_CALL name\n+\tbl\t_L__\\name\n+.endm\n #else\n .macro\tARM_FUNC_START name\n \t.text\n@@ -209,6 +212,9 @@ _L__\\name:\t\t/* A hook to tell gdb that we've switched to ARM */\n SYM (__\\name):\n .endm\n #define EQUIV .set\n+.macro  ARM_CALL name\n+\tbl\t__\\name\n+.endm\n #endif\n \n .macro\tARM_FUNC_ALIAS new old\n@@ -649,6 +655,15 @@ LSYM(Lgot_result):\n \n \tDIV_FUNC_END udivsi3\n \n+ARM_FUNC_START aeabi_uidivmod\n+\tstmfd\tsp!, { r0, r1, lr }\n+\tARM_CALL udivsi3\n+\tldmfd\tsp!, { r1, r2, lr }\n+\tmul\tr3, r2, r0\n+\tsub\tr1, r1, r3\n+\tRET\n+\tFUNC_END aeabi_uidivmod\n+\t\n #endif /* L_udivsi3 */\n /* ------------------------------------------------------------------------ */\n #ifdef L_umodsi3\n@@ -769,6 +784,15 @@ LSYM(Lover12):\n \t\n \tDIV_FUNC_END divsi3\n \n+ARM_FUNC_START aeabi_idivmod\n+\tstmfd\tsp!, { r0, r1, lr }\n+\tARM_CALL divsi3\n+\tldmfd\tsp!, { r1, r2, lr }\n+\tmul\tr3, r2, r0\n+\tsub\tr1, r1, r3\n+\tRET\n+\tFUNC_END aeabi_idivmod\n+\t\n #endif /* L_divsi3 */\n /* ------------------------------------------------------------------------ */\n #ifdef L_modsi3\n@@ -834,9 +858,13 @@ LSYM(Lover12):\n #ifdef L_dvmd_tls\n \n \tFUNC_START div0\n+\tARM_FUNC_ALIAS aeabi_idiv0 div0\n+\tARM_FUNC_ALIAS aeabi_ldiv0 div0\n \n \tRET\n \n+\tFUNC_END aeabi_ldiv0\n+\tFUNC_END aeabi_idiv0\n \tFUNC_END div0\n \t\n #endif /* L_divmodsi_tools */\n@@ -884,7 +912,8 @@ LSYM(Lover12):\n #ifdef L_lshrdi3\n \n \tFUNC_START lshrdi3\n-\n+\tARM_FUNC_ALIAS aeabi_llsr lshrdi3\n+\t\n #ifdef __thumb__\n \tlsr\tal, r2\n \tmov\tr3, ah\n@@ -907,13 +936,16 @@ LSYM(Lover12):\n \tmov\tah, ah, lsr r2\n \tRET\n #endif\n+\tFUNC_END aeabi_llsr\n \tFUNC_END lshrdi3\n \n #endif\n \t\n #ifdef L_ashrdi3\n \t\n \tFUNC_START ashrdi3\n+\tARM_FUNC_ALIAS aeabi_lasr ashrdi3\n+\t\n #ifdef __thumb__\n \tlsr\tal, r2\n \tmov\tr3, ah\n@@ -941,13 +973,16 @@ LSYM(Lover12):\n \tRET\n #endif\n \n+\tFUNC_END aeabi_lasr\n \tFUNC_END ashrdi3\n \n #endif\n \n #ifdef L_ashldi3\n \n \tFUNC_START ashldi3\n+\tARM_FUNC_ALIAS aeabi_llsl ashldi3\n+\t\n #ifdef __thumb__\n \tlsl\tah, r2\n \tmov\tr3, al\n@@ -970,6 +1005,7 @@ LSYM(Lover12):\n \tmov\tal, al, lsl r2\n \tRET\n #endif\n+\tFUNC_END aeabi_llsl\n \tFUNC_END ashldi3\n \n #endif\n@@ -1104,4 +1140,4 @@ LSYM(Lchange_\\register):\n \n #include \"ieee754-df.S\"\n #include \"ieee754-sf.S\"\n-\n+#include \"bpabi.S\""}, {"sha": "788e3ad2b1ff024c52c7adc1b035078b74a763af", "filename": "gcc/config/arm/libgcc-bpabi.ver", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibgcc-bpabi.ver?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,63 @@\n+GCC_3.5 {\n+  # BPABI symbols\n+  __aeabi_cdcmpeq\n+  __aeabi_cdcmple\n+  __aeabi_cdrcmple\n+  __aeabi_cfcmpeq\n+  __aeabi_cfcmple\n+  __aeabi_cfrcmple\n+  __aeabi_d2f\n+  __aeabi_d2iz\n+  __aeabi_d2lz\n+  __aeabi_d2uiz\n+  __aeabi_d2ulz\n+  __aeabi_dadd\n+  __aeabi_dcmpeq\n+  __aeabi_dcmpge\n+  __aeabi_dcmpgt\n+  __aeabi_dcmple\n+  __aeabi_dcmplt\n+  __aeabi_dcmpun\n+  __aeabi_ddiv\n+  __aeabi_dmul\n+  __aeabi_dneg\n+  __aeabi_drsub\n+  __aeabi_dsub\n+  __aeabi_f2d\n+  __aeabi_f2iz\n+  __aeabi_f2lz\n+  __aeabi_f2uiz\n+  __aeabi_f2ulz\n+  __aeabi_fadd\n+  __aeabi_fcmpeq\n+  __aeabi_fcmpge\n+  __aeabi_fcmpgt\n+  __aeabi_fcmple\n+  __aeabi_fcmplt\n+  __aeabi_fcmpun\n+  __aeabi_fdiv\n+  __aeabi_fmul\n+  __aeabi_fneg\n+  __aeabi_frsub\n+  __aeabi_fsub\n+  __aeabi_i2d\n+  __aeabi_i2f\n+  __aeabi_idiv0\n+  __aeabi_idivmod\n+  __aeabi_l2d\n+  __aeabi_l2f\n+  __aeabi_lasr\n+  __aeabi_lcmp\n+  __aeabi_ldiv0\n+  __aeabi_ldivmod\n+  __aeabi_llsl\n+  __aeabi_llsr\n+  __aeabi_lmul\n+  __aeabi_ui2d\n+  __aeabi_ui2f\n+  __aeabi_uidivmod\n+  __aeabi_uldivmod\n+  __aeabi_ulcmp\n+  __aeabi_ul2d\n+  __aeabi_ul2f\n+}"}, {"sha": "bd647d39f0ce62d9b0734fed91b2368350757ea2", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -20,9 +20,6 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-/* Use the SYMBIAN ABI by default.  */\n-#define ARM_DEFAULT_ABI ARM_ABI_AAPCS\n-\n /* Do not expand builtin functions (unless explicitly prefixed with\n    \"__builtin\").  Symbian OS code relies on properties of the standard\n    library that go beyond those guaranteed by the ANSI/ISO standard.\n@@ -53,11 +50,5 @@\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"crti%O%s crtbegin%O%s\"\n \n-/* The generic link spec in elf.h does not support shared libraries.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} \"\t\t\\\n-  \"%{static:-Bstatic} %{shared:-shared} %{symbolic:-Bsymbolic} \"\t\\\n-  \"-X\"\n-\n /* Support the \"dllimport\" attribute.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1"}, {"sha": "74445ddc92e34be35579062be157bf0578d7887f", "filename": "gcc/config/arm/t-bpabi", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bpabi?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,9 @@\n+# Add the bpabi.S functions.\n+LIB1ASMFUNCS += _aeabi_lcmp _aeabi_ulcmp _aeabi_ldivmod _aeabi_uldivmod\n+\n+# Add the BPABI C functions.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c\n+\n+# Add the BPABI names.\n+SHLIB_MAPFILES += $(srcdir)/config/arm/libgcc-bpabi.ver\n+"}, {"sha": "ef8469c2dfaf651337f42be41c6d6d15fbcd7da0", "filename": "gcc/defaults.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -627,6 +627,19 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) false\n #endif\n \n+/* True if the target should use the standard libgcc arithmetic\n+   library functions, like __addsi3 and _fixdfdi.  */\n+#ifndef TARGET_LIBGCC_LIBFUNCS\n+#define TARGET_LIBGCC_LIBFUNCS (true)\n+#endif\n+\n+/* True if the targets integer-comparision fucntions return { 0, 1, 2\n+   } to indicate { <, ==, > }.  False if { -1, 0, 1 } is used\n+   instead.  The libgcc routines are biased.  */\n+#ifndef TARGET_LIB_INT_CMP_BIASED\n+#define TARGET_LIB_INT_CMP_BIASED (true)\n+#endif\n+\n /* If FLOAT_WORDS_BIG_ENDIAN is not defined in the header files,\n    then the word-endianness is the same as for integers.  */\n #ifndef FLOAT_WORDS_BIG_ENDIAN"}, {"sha": "06c08f99c45c7b0246f2a53bd044d6bc4bffc5e9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -4765,6 +4765,24 @@ comparison operators, so the default returns false always.  Most ports\n don't need to define this macro.\n @end defmac\n \n+@defmac TARGET_LIBGCC_FUNCS\n+This macro should evaluate to @code{true} if the standard GCC library\n+names (like @code{__modsi3}) should be used for functions provided in\n+@file{libgcc.a}.  If this macro evaluates to @code{false}, then the\n+target must explictily set the names of all desired library functions\n+itself using the @code{TARGET_INIT_LIBFUNCS} hook.\n+@end defmac\n+\n+@defmac TARGET_LIB_INT_CMP_BIASED\n+This macro should evaluate to @code{true} if the integer comparison\n+functions (like @code{__cmpdi2}) return 0 to indicate that the first\n+operand is smaller than the second, 1 to indicate that they are equal,\n+and 2 to indicate that the first operand is greater than the second.\n+If this macro evalutes to @code{false} the comparison functions return\n+-1, 0, and 1 instead of 0, 1, and 2.  If the target uses the routines\n+in @file{libgcc.a}, you do not need to define this macro.\n+@end defmac\n+\n @cindex US Software GOFAST, floating point emulation library\n @cindex floating point emulation library, US Software GOFAST\n @cindex GOFAST, floating point emulation library"}, {"sha": "7ee5964853b7b10e212ca755b857d88814ff3097", "filename": "gcc/expmed.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -4337,10 +4337,24 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \ttarget = 0;\n \n       if (quotient == 0)\n-\t/* No divide instruction either.  Use library for remainder.  */\n-\tremainder = sign_expand_binop (compute_mode, umod_optab, smod_optab,\n-\t\t\t\t       op0, op1, target,\n-\t\t\t\t       unsignedp, OPTAB_LIB_WIDEN);\n+\t{\n+\t  /* No divide instruction either.  Use library for remainder.  */\n+\t  remainder = sign_expand_binop (compute_mode, umod_optab, smod_optab,\n+\t\t\t\t\t op0, op1, target,\n+\t\t\t\t\t unsignedp, OPTAB_LIB_WIDEN);\n+\t  /* No remainder function.  Try a quotient-and-remainder\n+\t     function, keeping the remainder.  */\n+\t  if (!remainder)\n+\t    {\n+\t      remainder = gen_reg_rtx (compute_mode);\n+\t      if (!expand_twoval_binop_libfunc \n+\t\t  (unsignedp ? udivmod_optab : sdivmod_optab,\n+\t\t   op0, op1,\n+\t\t   NULL_RTX, remainder,\n+\t\t   unsignedp ? UMOD : MOD))\n+\t\tremainder = NULL_RTX;\n+\t    }\n+\t}\n       else\n \t{\n \t  /* We divided.  Now finish doing X - Y * (X / Y).  */"}, {"sha": "22b2ecd0ca4413c3e5fc6c9c873c5cda52831ad8", "filename": "gcc/gthr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -102,6 +102,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"gthr-single.h\"\n #endif\n \n-#pragma GCC visibility pop(default)\n+#pragma GCC visibility pop\n \n #endif /* ! GCC_GTHR_H */"}, {"sha": "ab826769fad95afb92f347afb481c71fab7ba300", "filename": "gcc/optabs.c", "status": "modified", "additions": 203, "deletions": 73, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -2448,6 +2448,55 @@ expand_twoval_binop (optab binoptab, rtx op0, rtx op1, rtx targ0, rtx targ1,\n   delete_insns_since (entry_last);\n   return 0;\n }\n+\n+/* Expand the two-valued library call indicated by BINOPTAB, but\n+   preserve only one of the values.  If TARG0 is non-NULL, the first\n+   value is placed into TARG0; otherwise the second value is placed\n+   into TARG1.  Exactly one of TARG0 and TARG1 must be non-NULL.  The\n+   value stored into TARG0 or TARG1 is equivalent to (CODE OP0 OP1).\n+   This routine assumes that the value returned by the library call is\n+   as if the return value was of an integral mode twice as wide as the\n+   mode of OP0.  Returns 1 if the call was successful.  */\n+\n+bool\n+expand_twoval_binop_libfunc (optab binoptab, rtx op0, rtx op1, \n+\t\t\t     rtx targ0, rtx targ1, enum rtx_code code)\n+{\n+  enum machine_mode mode;\n+  enum machine_mode libval_mode;\n+  rtx libval;\n+  rtx insns;\n+  \n+  /* Exactly one of TARG0 or TARG1 should be non-NULL.  */\n+  if (!((targ0 != NULL_RTX) ^ (targ1 != NULL_RTX)))\n+    abort ();\n+\n+  mode = GET_MODE (op0);\n+  if (!binoptab->handlers[(int) mode].libfunc)\n+    return false;\n+\n+  /* The value returned by the library function will have twice as\n+     many bits as the nominal MODE.  */\n+  libval_mode = smallest_mode_for_size (2 * GET_MODE_BITSIZE (mode), \n+\t\t\t\t\tMODE_INT);\n+  start_sequence ();\n+  libval = emit_library_call_value (binoptab->handlers[(int) mode].libfunc,\n+\t\t\t\t    NULL_RTX, LCT_CONST, \n+\t\t\t\t    libval_mode, 2,\n+\t\t\t\t    op0, mode, \n+\t\t\t\t    op1, mode);\n+  /* Get the part of VAL containing the value that we want.  */\n+  libval = simplify_gen_subreg (mode, libval, libval_mode,\n+\t\t\t\ttarg0 ? 0 : GET_MODE_SIZE (mode));\n+  insns = get_insns ();\n+  end_sequence ();\n+  /* Move the into the desired location.  */\n+  emit_libcall_block (insns, targ0 ? targ0 : targ1, libval, \n+\t\t      gen_rtx_fmt_ee (code, mode, op0, op1));\n+  \n+  return true;\n+}\n+\n \f\n /* Wrapper around expand_unop which takes an rtx code to specify\n    the operation to perform, not an optab pointer.  All other\n@@ -3817,12 +3866,19 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n       result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n \t\t\t\t\tword_mode, 2, x, mode, y, mode);\n \n-      /* Integer comparison returns a result that must be compared against 1,\n-\t so that even if we do an unsigned compare afterward,\n-\t there is still a value that can represent the result \"less than\".  */\n       *px = result;\n-      *py = const1_rtx;\n       *pmode = word_mode;\n+      if (TARGET_LIB_INT_CMP_BIASED)\n+\t/* Integer comparison returns a result that must be compared\n+\t   against 1, so that even if we do an unsigned compare\n+\t   afterward, there is still a value that can represent the\n+\t   result \"less than\".  */\n+\t*py = const1_rtx;\n+      else\n+\t{\n+\t  *py = const0_rtx;\n+\t  *punsignedp = 1;\n+\t}\n       return;\n     }\n \n@@ -3993,12 +4049,14 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n {\n   enum rtx_code comparison = *pcomparison;\n   enum rtx_code swapped = swap_condition (comparison);\n+  enum rtx_code reversed = reverse_condition_maybe_unordered (comparison);\n   rtx x = *px;\n   rtx y = *py;\n   enum machine_mode orig_mode = GET_MODE (x);\n   enum machine_mode mode;\n   rtx value, target, insns, equiv;\n   rtx libfunc = 0;\n+  bool reversed_p = false;\n \n   for (mode = orig_mode; mode != VOIDmode; mode = GET_MODE_WIDER_MODE (mode))\n     {\n@@ -4012,8 +4070,16 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \t  comparison = swapped;\n \t  break;\n \t}\n-    }\n \n+      if ((libfunc = code_to_optab[reversed]->handlers[mode].libfunc)\n+\t  && FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, reversed))\n+\t{\n+\t  comparison = reversed;\n+\t  reversed_p = true;\n+\t  break;\n+\t}\n+    }\n+ \n   if (mode == VOIDmode)\n     abort ();\n \n@@ -4089,10 +4155,9 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n   target = gen_reg_rtx (word_mode);\n   emit_libcall_block (insns, target, value, equiv);\n \n-\n   if (comparison == UNORDERED\n       || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-    comparison = NE;\n+    comparison = reversed_p ? EQ : NE;\n \n   *px = target;\n   *py = const0_rtx;\n@@ -5418,72 +5483,79 @@ init_optabs (void)\n   init_all_optabs ();\n \n   /* Initialize the optabs with the names of the library functions.  */\n-  init_integral_libfuncs (add_optab, \"add\", '3');\n-  init_floating_libfuncs (add_optab, \"add\", '3');\n-  init_integral_libfuncs (addv_optab, \"addv\", '3');\n-  init_floating_libfuncs (addv_optab, \"add\", '3');\n-  init_integral_libfuncs (sub_optab, \"sub\", '3');\n-  init_floating_libfuncs (sub_optab, \"sub\", '3');\n-  init_integral_libfuncs (subv_optab, \"subv\", '3');\n-  init_floating_libfuncs (subv_optab, \"sub\", '3');\n-  init_integral_libfuncs (smul_optab, \"mul\", '3');\n-  init_floating_libfuncs (smul_optab, \"mul\", '3');\n-  init_integral_libfuncs (smulv_optab, \"mulv\", '3');\n-  init_floating_libfuncs (smulv_optab, \"mul\", '3');\n-  init_integral_libfuncs (sdiv_optab, \"div\", '3');\n-  init_floating_libfuncs (sdiv_optab, \"div\", '3');\n-  init_integral_libfuncs (sdivv_optab, \"divv\", '3');\n-  init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n-  init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n-  init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n-  init_integral_libfuncs (smod_optab, \"mod\", '3');\n-  init_integral_libfuncs (umod_optab, \"umod\", '3');\n-  init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n-  init_integral_libfuncs (and_optab, \"and\", '3');\n-  init_integral_libfuncs (ior_optab, \"ior\", '3');\n-  init_integral_libfuncs (xor_optab, \"xor\", '3');\n-  init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n-  init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n-  init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n-  init_integral_libfuncs (smin_optab, \"min\", '3');\n-  init_floating_libfuncs (smin_optab, \"min\", '3');\n-  init_integral_libfuncs (smax_optab, \"max\", '3');\n-  init_floating_libfuncs (smax_optab, \"max\", '3');\n-  init_integral_libfuncs (umin_optab, \"umin\", '3');\n-  init_integral_libfuncs (umax_optab, \"umax\", '3');\n-  init_integral_libfuncs (neg_optab, \"neg\", '2');\n-  init_floating_libfuncs (neg_optab, \"neg\", '2');\n-  init_integral_libfuncs (negv_optab, \"negv\", '2');\n-  init_floating_libfuncs (negv_optab, \"neg\", '2');\n-  init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n-  init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n-  init_integral_libfuncs (clz_optab, \"clz\", '2');\n-  init_integral_libfuncs (ctz_optab, \"ctz\", '2');\n-  init_integral_libfuncs (popcount_optab, \"popcount\", '2');\n-  init_integral_libfuncs (parity_optab, \"parity\", '2');\n-\n-  /* Comparison libcalls for integers MUST come in pairs, signed/unsigned.  */\n-  init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n-  init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n-  init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n-\n-  /* EQ etc are floating point only.  */\n-  init_floating_libfuncs (eq_optab, \"eq\", '2');\n-  init_floating_libfuncs (ne_optab, \"ne\", '2');\n-  init_floating_libfuncs (gt_optab, \"gt\", '2');\n-  init_floating_libfuncs (ge_optab, \"ge\", '2');\n-  init_floating_libfuncs (lt_optab, \"lt\", '2');\n-  init_floating_libfuncs (le_optab, \"le\", '2');\n-  init_floating_libfuncs (unord_optab, \"unord\", '2');\n-\n-  /* Conversions.  */\n-  init_interclass_conv_libfuncs (sfloat_optab, \"float\", MODE_INT, MODE_FLOAT);\n-  init_interclass_conv_libfuncs (sfix_optab, \"fix\",     MODE_FLOAT, MODE_INT);\n-  init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",  MODE_FLOAT, MODE_INT);\n-\n-  /* sext_optab is also used for FLOAT_EXTEND.  */\n-  init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);\n-  init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, false);\n+  if (TARGET_LIBGCC_LIBFUNCS)\n+    {\n+      init_integral_libfuncs (add_optab, \"add\", '3');\n+      init_floating_libfuncs (add_optab, \"add\", '3');\n+      init_integral_libfuncs (addv_optab, \"addv\", '3');\n+      init_floating_libfuncs (addv_optab, \"add\", '3');\n+      init_integral_libfuncs (sub_optab, \"sub\", '3');\n+      init_floating_libfuncs (sub_optab, \"sub\", '3');\n+      init_integral_libfuncs (subv_optab, \"subv\", '3');\n+      init_floating_libfuncs (subv_optab, \"sub\", '3');\n+      init_integral_libfuncs (smul_optab, \"mul\", '3');\n+      init_floating_libfuncs (smul_optab, \"mul\", '3');\n+      init_integral_libfuncs (smulv_optab, \"mulv\", '3');\n+      init_floating_libfuncs (smulv_optab, \"mul\", '3');\n+      init_integral_libfuncs (sdiv_optab, \"div\", '3');\n+      init_floating_libfuncs (sdiv_optab, \"div\", '3');\n+      init_integral_libfuncs (sdivv_optab, \"divv\", '3');\n+      init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n+      init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n+      init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n+      init_integral_libfuncs (smod_optab, \"mod\", '3');\n+      init_integral_libfuncs (umod_optab, \"umod\", '3');\n+      init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n+      init_integral_libfuncs (and_optab, \"and\", '3');\n+      init_integral_libfuncs (ior_optab, \"ior\", '3');\n+      init_integral_libfuncs (xor_optab, \"xor\", '3');\n+      init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n+      init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n+      init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n+      init_integral_libfuncs (smin_optab, \"min\", '3');\n+      init_floating_libfuncs (smin_optab, \"min\", '3');\n+      init_integral_libfuncs (smax_optab, \"max\", '3');\n+      init_floating_libfuncs (smax_optab, \"max\", '3');\n+      init_integral_libfuncs (umin_optab, \"umin\", '3');\n+      init_integral_libfuncs (umax_optab, \"umax\", '3');\n+      init_integral_libfuncs (neg_optab, \"neg\", '2');\n+      init_floating_libfuncs (neg_optab, \"neg\", '2');\n+      init_integral_libfuncs (negv_optab, \"negv\", '2');\n+      init_floating_libfuncs (negv_optab, \"neg\", '2');\n+      init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n+      init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n+      init_integral_libfuncs (clz_optab, \"clz\", '2');\n+      init_integral_libfuncs (ctz_optab, \"ctz\", '2');\n+      init_integral_libfuncs (popcount_optab, \"popcount\", '2');\n+      init_integral_libfuncs (parity_optab, \"parity\", '2');\n+\n+      /* Comparison libcalls for integers MUST come in pairs,\n+\t signed/unsigned.  */\n+      init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n+      init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n+      init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n+\n+      /* EQ etc are floating point only.  */\n+      init_floating_libfuncs (eq_optab, \"eq\", '2');\n+      init_floating_libfuncs (ne_optab, \"ne\", '2');\n+      init_floating_libfuncs (gt_optab, \"gt\", '2');\n+      init_floating_libfuncs (ge_optab, \"ge\", '2');\n+      init_floating_libfuncs (lt_optab, \"lt\", '2');\n+      init_floating_libfuncs (le_optab, \"le\", '2');\n+      init_floating_libfuncs (unord_optab, \"unord\", '2');\n+\n+      /* Conversions.  */\n+      init_interclass_conv_libfuncs (sfloat_optab, \"float\", \n+\t\t\t\t     MODE_INT, MODE_FLOAT);\n+      init_interclass_conv_libfuncs (sfix_optab, \"fix\",     \n+\t\t\t\t     MODE_FLOAT, MODE_INT);\n+      init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",  \n+\t\t\t\t     MODE_FLOAT, MODE_INT);\n+\n+      /* sext_optab is also used for FLOAT_EXTEND.  */\n+      init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);\n+      init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, false);\n+    }\n \n   /* Use cabs for double complex abs, since systems generally have cabs.\n      Don't define any libcall for float complex, so that cabs will be used.  */\n@@ -5530,6 +5602,64 @@ init_optabs (void)\n   /* Allow the target to add more libcalls or rename some, etc.  */\n   targetm.init_libfuncs ();\n }\n+\n+#ifdef DEBUG\n+\n+/* Print information about the current contents of the optabs on\n+   STDERR.  */\n+\n+static void\n+debug_optab_libfuncs (void)\n+{\n+  int i;\n+  int j;\n+  int k;\n+\n+  /* Dump the arithmetic optabs.  */\n+  for (i = 0; i != (int) OTI_MAX; i++) \n+    for (j = 0; j < NUM_MACHINE_MODES; ++j)\n+      {\n+\toptab o;\n+\tstruct optab_handlers *h;\n+\n+\to = optab_table[i];\n+\th = &o->handlers[j];\n+\tif (h->libfunc)\n+\t  {\n+\t    if (GET_CODE (h->libfunc) != SYMBOL_REF)\n+\t      abort ();\n+\t    fprintf (stderr, \"%s\\t%s:\\t%s\\n\", \n+\t\t     GET_RTX_NAME (o->code),\n+\t\t     GET_MODE_NAME (j),\n+\t\t     XSTR (h->libfunc, 0));\n+\t  }\n+      }\n+\n+  /* Dump the conversion optabs.  */\n+  for (i = 0; i < (int) CTI_MAX; ++i)\n+    for (j = 0; j < NUM_MACHINE_MODES; ++j)\n+      for (k = 0; k < NUM_MACHINE_MODES; ++k)\n+\t{\n+\t  convert_optab o;\n+\t  struct optab_handlers *h;\n+\n+\t  o = &convert_optab_table[i];\n+\t  h = &o->handlers[j][k];\n+\t  if (h->libfunc)\n+\t    {\n+\t      if (GET_CODE (h->libfunc) != SYMBOL_REF)\n+\t\tabort ();\n+\t      fprintf (stderr, \"%s\\t%s\\t%s:\\t%s\\n\", \n+\t\t       GET_RTX_NAME (o->code),\n+\t\t       GET_MODE_NAME (j),\n+\t\t       GET_MODE_NAME (k),\n+\t\t       XSTR (h->libfunc, 0));\n+\t    }\n+\t}\n+}\n+\n+#endif /* DEBUG */\n+\n \f\n /* Generate insns to trap with code TCODE if OP1 and OP2 satisfy condition\n    CODE.  Return 0 on failure.  */"}, {"sha": "24c3c8849406930da1dfa0d25c46679238592671", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -417,6 +417,11 @@ extern int expand_twoval_unop (optab, rtx, rtx, rtx, int);\n /* Generate code to perform an operation on two operands with two results.  */\n extern int expand_twoval_binop (optab, rtx, rtx, rtx, rtx, int);\n \n+/* Generate code to perform an operation on two operands with two\n+   results, using a library function.  */\n+extern bool expand_twoval_binop_libfunc (optab, rtx, rtx, rtx, rtx, \n+\t\t\t\t\t enum rtx_code);\n+\n /* Expand a unary arithmetic operation given optab rtx operand.  */\n extern rtx expand_unop (enum machine_mode, optab, rtx, rtx, int);\n "}, {"sha": "459f7b50cc7d0a532543ca5fbedbdaa4b237586e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1,3 +1,10 @@\n+2004-08-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/testsuite/gcc.dg/arm-eabi1.c: New test.\n+\t* gcc.dg/dll-2.c: Fix dg-require syntax.\n+\t* gcc.misc-tests/arm-isr.c (abort): Declare.\n+\t(exit): Likewise.\n+\n 2004-08-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16971"}, {"sha": "0df295aa72688be6f672693113b0641ded72e34a", "filename": "gcc/testsuite/gcc.dg/arm-eabi1.c", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -0,0 +1,235 @@\n+/* { dg-do run { target arm*-*-symbianelf* arm*-*-eabi* } } */\n+/* { dg-options \"\" } */\n+\n+/* This file tests most of the non-C++ run-time helper functions\n+   described in Section 4 of the \"Run-Time ABI for the ARM\n+   Architecture\".  These are basic tests; they do not try to validate\n+   all of the corner cases in these routines.  \n+\n+   The functions not tested here are:\n+\n+     __aeabi_cdcmpeq\n+     __aeabi_cdcmple\n+     __aeabi_cdrcmple\n+     __aeabi_cfcmpeq\n+     __aeabi_cfcmple\n+     __aeabi_cfrcmple\n+     __aeabi_ldivmod\n+     __aeabi_uldivmod\n+     __aeabi_idivmod\n+     __aeabi_uidivmod\n+\n+   These functions have non-standard calling conventions that would\n+   require the use of inline assembly to test.  It would be good to\n+   add such tests, but they have not yet been implemented.  \n+\n+   There are also no tests for the \"division by zero\", \"unaligned\n+   memory access\", \"memory copying, clearing, and setting\"\n+   functions.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <math.h>\n+\n+#define decl_float(code, type)\t\t\t\t\t\\\n+  extern type __aeabi_ ## code ## add (type, type);\t\t\\\n+  extern type __aeabi_ ## code ## div (type, type);\t\t\\\n+  extern type __aeabi_ ## code ## mul (type, type);\t\t\\\n+  extern type __aeabi_ ## code ## neg (type);\t\t\t\\\n+  extern type __aeabi_ ## code ## rsub (type, type);\t\t\\\n+  extern type __aeabi_ ## code ## sub (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmpeq (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmplt (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmple (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmpge (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmpgt (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## cmpun (type, type);\t\t\\\n+  extern int __aeabi_ ## code ## 2iz (type);\t\t\t\\\n+  extern unsigned int __aeabi_ ## code ## 2uiz (type);\t\t\\\n+  extern long long __aeabi_ ## code ## 2lz (type);\t\t\\\n+  extern unsigned long long __aeabi_ ## code ## 2ulz (type);\t\\\n+  extern type __aeabi_i2 ## code (int);\t\t\t\t\\\n+  extern type __aeabi_ui2 ## code (int);\t\t\t\\\n+  extern type __aeabi_l2 ## code (long long);\t\t\t\\\n+  extern type __aeabi_ul2 ## code (unsigned long long);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  type code ## zero = 0.0;\t\t\t\t\t\\\n+  type code ## one = 1.0;\t\t\t\t\t\\\n+  type code ## two = 2.0;\t\t\t\t\t\\\n+  type code ## four = 4.0;\t\t\t\t\t\\\n+  type code ## minus_one = -1.0;\t\t\t\t\\\n+  type code ## minus_two = -2.0;\t\t\t\t\\\n+  type code ## minus_four = -4.0;\t\t\t\t\\\n+  type code ## epsilon = 1E-32;\t\t\t\t\t\\\n+  type code ## NaN = 0.0 / 0.0;\t\t\t\t\n+\n+decl_float (d, double)\n+decl_float (f, float)\n+\n+extern float __aeabi_d2f (double);\n+extern double __aeabi_f2d (float);\n+extern long long __aeabi_lmul (long long, long long);\n+extern long long __aeabi_llsl (long long, int);\n+extern long long __aeabi_llsr (long long, int);\n+extern long long __aeabi_lasr (long long, int);\n+extern int __aeabi_lcmp (long long, long long);\n+extern int __aeabi_ulcmp (unsigned long long, unsigned long long);\n+\n+#define eq(a, b, type, abs, epsilon, format)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type a1;\t\t\t\t\t\t\t\\\n+    type b1;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    fprintf (stderr, \"%d: Test %s == %s\\n\", __LINE__, #a, #b);\t\\\n+    a1 = a;\t\t\t\t\t\t\t\\\n+    b1 = b;\t\t\t\t\t\t\t\\\n+    if (abs (a1 - b1) > epsilon)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (stderr, \"%d: \" format \" != \" format \"\\n\",\t\\\n+\t       __LINE__, a1, b1);\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define ieq(a, b) eq (a, b, int, abs, 0, \"%d\")\n+#define ueq(a, b) eq (a, b, unsigned int, abs, 0, \"%u\")\n+#define leq(a, b) eq (a, b, long long, abs, 0, \"%lld\")\n+#define uleq(a, b) eq (a, b, unsigned long long, abs, 0, \"%llu\")\n+#define feq(a, b) eq (a, b, float, fabs, fepsilon, \"%f\")\n+#define deq(a, b) eq (a, b, double, fabs, depsilon, \"%g\")\n+\n+int main () {\n+  /* Table 2.  Double-precision floating-point arithmetic.  */\n+  deq (__aeabi_dadd (dzero, done), done);\n+  deq (__aeabi_dadd (done, done), dtwo);\n+  deq (__aeabi_ddiv (dminus_four, dminus_two), dtwo);\n+  deq (__aeabi_ddiv (dminus_two, dtwo), dminus_one);\n+  deq (__aeabi_dmul (dtwo, dtwo), dfour);\n+  deq (__aeabi_dmul (dminus_one, dminus_two), dtwo);\n+  deq (__aeabi_dneg (dminus_one), done);\n+  deq (__aeabi_dneg (dfour), dminus_four);\n+  deq (__aeabi_drsub (done, dzero), dminus_one);\n+  deq (__aeabi_drsub (dtwo, dminus_two), dminus_four);\n+  deq (__aeabi_dsub (dzero, done), dminus_one);\n+  deq (__aeabi_dsub (dminus_two, dtwo), dminus_four);\n+\n+  /* Table 3.  Double-precision floating-point comparisons.  */\n+  ieq (__aeabi_dcmpeq (done, done), 1);\n+  ieq (__aeabi_dcmpeq (done, dzero), 0);\n+  ieq (__aeabi_dcmpeq (dNaN, dzero), 0);\n+  ieq (__aeabi_dcmpeq (dNaN, dNaN), 0);\n+\n+  ieq (__aeabi_dcmplt (dzero, done), 1);\n+  ieq (__aeabi_dcmplt (done, dzero), 0);\n+  ieq (__aeabi_dcmplt (dzero, dzero), 0);\n+  ieq (__aeabi_dcmplt (dzero, dNaN), 0);\n+  ieq (__aeabi_dcmplt (dNaN, dNaN), 0);\n+\n+  ieq (__aeabi_dcmple (dzero, done), 1);\n+  ieq (__aeabi_dcmple (done, dzero), 0);\n+  ieq (__aeabi_dcmple (dzero, dzero), 1);\n+  ieq (__aeabi_dcmple (dzero, dNaN), 0);\n+  ieq (__aeabi_dcmple (dNaN, dNaN), 0);\n+\n+  ieq (__aeabi_dcmpge (dzero, done), 0);\n+  ieq (__aeabi_dcmpge (done, dzero), 1);\n+  ieq (__aeabi_dcmpge (dzero, dzero), 1);\n+  ieq (__aeabi_dcmpge (dzero, dNaN), 0);\n+  ieq (__aeabi_dcmpge (dNaN, dNaN), 0);\n+\n+  ieq (__aeabi_dcmpgt (dzero, done), 0);\n+  ieq (__aeabi_dcmpgt (done, dzero), 1);\n+  ieq (__aeabi_dcmplt (dzero, dzero), 0);\n+  ieq (__aeabi_dcmpgt (dzero, dNaN), 0);\n+  ieq (__aeabi_dcmpgt (dNaN, dNaN), 0);\n+\n+  ieq (__aeabi_dcmpun (done, done), 0);\n+  ieq (__aeabi_dcmpun (done, dzero), 0);\n+  ieq (__aeabi_dcmpun (dNaN, dzero), 1);\n+  ieq (__aeabi_dcmpun (dNaN, dNaN), 1);\n+\n+  /* Table 4.  Single-precision floating-point arithmetic.  */\n+  feq (__aeabi_fadd (fzero, fone), fone);\n+  feq (__aeabi_fadd (fone, fone), ftwo);\n+  feq (__aeabi_fdiv (fminus_four, fminus_two), ftwo);\n+  feq (__aeabi_fdiv (fminus_two, ftwo), fminus_one);\n+  feq (__aeabi_fmul (ftwo, ftwo), ffour);\n+  feq (__aeabi_fmul (fminus_one, fminus_two), ftwo);\n+  feq (__aeabi_fneg (fminus_one), fone);\n+  feq (__aeabi_fneg (ffour), fminus_four);\n+  feq (__aeabi_frsub (fone, fzero), fminus_one);\n+  feq (__aeabi_frsub (ftwo, fminus_two), fminus_four);\n+  feq (__aeabi_fsub (fzero, fone), fminus_one);\n+  feq (__aeabi_fsub (fminus_two, ftwo), fminus_four);\n+\n+  /* Table 5.  Single-precision floating-point comparisons.  */\n+  ieq (__aeabi_fcmpeq (fone, fone), 1);\n+  ieq (__aeabi_fcmpeq (fone, fzero), 0);\n+  ieq (__aeabi_fcmpeq (fNaN, fzero), 0);\n+  ieq (__aeabi_fcmpeq (fNaN, fNaN), 0);\n+\n+  ieq (__aeabi_fcmplt (fzero, fone), 1);\n+  ieq (__aeabi_fcmplt (fone, fzero), 0);\n+  ieq (__aeabi_fcmplt (fzero, fzero), 0);\n+  ieq (__aeabi_fcmplt (fzero, fNaN), 0);\n+  ieq (__aeabi_fcmplt (fNaN, fNaN), 0);\n+\n+  ieq (__aeabi_fcmple (fzero, fone), 1);\n+  ieq (__aeabi_fcmple (fone, fzero), 0);\n+  ieq (__aeabi_fcmple (fzero, fzero), 1);\n+  ieq (__aeabi_fcmple (fzero, fNaN), 0);\n+  ieq (__aeabi_fcmple (fNaN, fNaN), 0);\n+\n+  ieq (__aeabi_fcmpge (fzero, fone), 0);\n+  ieq (__aeabi_fcmpge (fone, fzero), 1);\n+  ieq (__aeabi_fcmpge (fzero, fzero), 1);\n+  ieq (__aeabi_fcmpge (fzero, fNaN), 0);\n+  ieq (__aeabi_fcmpge (fNaN, fNaN), 0);\n+\n+  ieq (__aeabi_fcmpgt (fzero, fone), 0);\n+  ieq (__aeabi_fcmpgt (fone, fzero), 1);\n+  ieq (__aeabi_fcmplt (fzero, fzero), 0);\n+  ieq (__aeabi_fcmpgt (fzero, fNaN), 0);\n+  ieq (__aeabi_fcmpgt (fNaN, fNaN), 0);\n+\n+  ieq (__aeabi_fcmpun (fone, fone), 0);\n+  ieq (__aeabi_fcmpun (fone, fzero), 0);\n+  ieq (__aeabi_fcmpun (fNaN, fzero), 1);\n+  ieq (__aeabi_fcmpun (fNaN, fNaN), 1);\n+\n+  /* Table 6.  Floating-point to integer conversions.  */\n+  ieq (__aeabi_d2iz (dminus_one), -1);\n+  ueq (__aeabi_d2uiz (done), 1);\n+  leq (__aeabi_d2lz (dminus_two), -2LL);\n+  uleq (__aeabi_d2ulz (dfour), 4LL);\n+  ieq (__aeabi_f2iz (fminus_one), -1);\n+  ueq (__aeabi_f2uiz (fone), 1);\n+  leq (__aeabi_f2lz (fminus_two), -2LL);\n+  uleq (__aeabi_f2ulz (ffour), 4LL);\n+\n+  /* Table 7.  Conversions between floating types.  */\n+  feq (__aeabi_d2f (dtwo), ftwo);\n+  deq (__aeabi_f2d (fminus_four), dminus_four);\n+\n+  /* Table 8.  Integer to floating-point conversions.  */\n+  deq (__aeabi_i2d (-1), dminus_one);\n+  deq (__aeabi_ui2d (2), dtwo);\n+  deq (__aeabi_l2d (-1), dminus_one);\n+  deq (__aeabi_ul2d (2ULL), dtwo);\n+  feq (__aeabi_i2f (-1), fminus_one);\n+  feq (__aeabi_ui2f (2), ftwo);\n+  feq (__aeabi_l2f (-1), fminus_one);\n+  feq (__aeabi_ul2f (2ULL), ftwo);\n+\n+  /* Table 9.  Long long functions.  */\n+  leq (__aeabi_lmul (4LL, -1LL), -4LL);\n+  leq (__aeabi_llsl (2LL, 1), 4LL);\n+  leq (__aeabi_llsr (-1LL, 63), 1);\n+  leq (__aeabi_lasr (-1LL, 63), -1);\n+  ieq (__aeabi_lcmp (0LL, 1LL), -1);\n+  ieq (__aeabi_lcmp (0LL, 0LL), 0);\n+  ieq (__aeabi_lcmp (1LL, 0LL), 1);\n+  ieq (__aeabi_ulcmp (0LL, 1LL), -1);\n+  ieq (__aeabi_ulcmp (0LL, 0LL), 0);\n+  ieq (__aeabi_ulcmp (1LL, 0LL), 1);\n+}"}, {"sha": "5c81f4e64a11f669e22fd8d7c0100b37d3987f90", "filename": "gcc/testsuite/gcc.dg/dll-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -8,7 +8,7 @@\n    In C, it's ok to redeclare a variable so this works for variables\n    and functions.  In C++, it only works for functions.  */\n \n-/* { dg-require-dll } */\n+/* { dg-require-dll \"\" } */\n \n __declspec (dllimport) int foo1 ();\n __declspec (dllexport) int foo1 ();"}, {"sha": "737f9ffb643bcc89cdf0a4e9e62133e9c91f5add", "filename": "gcc/testsuite/gcc.misc-tests/arm-isr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Farm-isr.c?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1,3 +1,6 @@\n+extern void abort ();\n+extern void exit (int);\n+\n #ifndef __thumb__\n /* There used to be a couple of bugs in the ARM's prologue and epilogue\n    generation for ISR routines.  The wrong epilogue instruction would be"}, {"sha": "da14057ff458ae24e2a421bda3174e756ba154f7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -1,3 +1,9 @@\n+2004-08-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* configure.ac (arm*-*-eabi*): New target.\n+\t(arm*-*-symbianelf*): Likewise.\n+\t* configure: Regenerated.\n+\n 2004-07-24  Bernardo Innocenti  <bernie@develer.com>\n \n \t* internal.h (xnew, xcnew, xnewvec, xcnewvec, xobnew): Remove."}, {"sha": "f189f4d0ba09d57d02af6a3d2a79e60e9298b410", "filename": "libcpp/configure", "status": "modified", "additions": 108, "deletions": 57, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -969,7 +969,7 @@ esac\n     else\n       echo \"$as_me: WARNING: no configuration information is in $ac_dir\" >&2\n     fi\n-    cd \"$ac_popdir\"\n+    cd $ac_popdir\n   done\n fi\n \n@@ -2428,7 +2428,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -2486,7 +2487,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -2602,7 +2604,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -2656,7 +2659,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -2701,7 +2705,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -2745,7 +2750,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3074,7 +3080,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3135,7 +3142,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3449,7 +3457,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3619,7 +3628,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3696,7 +3706,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3888,7 +3899,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -3948,7 +3960,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4018,7 +4031,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4091,7 +4105,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4156,7 +4171,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4220,7 +4236,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4283,7 +4300,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4345,7 +4363,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4385,7 +4404,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4441,7 +4461,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4481,7 +4502,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4545,7 +4567,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4576,8 +4599,10 @@ See \\`config.log' for more details.\" >&2;}\n esac\n else\n   if test \"$cross_compiling\" = yes; then\n-  { { echo \"$as_me:$LINENO: error: internal error: not reached in cross-compile\" >&5\n-echo \"$as_me: error: internal error: not reached in cross-compile\" >&2;}\n+  { { echo \"$as_me:$LINENO: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&5\n+echo \"$as_me: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&2;}\n    { (exit 1); exit 1; }; }\n else\n   cat >conftest.$ac_ext <<_ACEOF\n@@ -4689,7 +4714,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4751,7 +4777,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4791,7 +4818,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4847,7 +4875,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4887,7 +4916,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4951,7 +4981,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -4982,8 +5013,10 @@ See \\`config.log' for more details.\" >&2;}\n esac\n else\n   if test \"$cross_compiling\" = yes; then\n-  { { echo \"$as_me:$LINENO: error: internal error: not reached in cross-compile\" >&5\n-echo \"$as_me: error: internal error: not reached in cross-compile\" >&2;}\n+  { { echo \"$as_me:$LINENO: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&5\n+echo \"$as_me: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&2;}\n    { (exit 1); exit 1; }; }\n else\n   cat >conftest.$ac_ext <<_ACEOF\n@@ -5137,7 +5170,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5201,7 +5235,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5270,7 +5305,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5339,7 +5375,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5408,7 +5445,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5477,7 +5515,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5546,7 +5585,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5615,7 +5655,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5687,7 +5728,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5768,7 +5810,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -5909,7 +5952,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -6045,7 +6089,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -6207,7 +6252,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -6335,7 +6381,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -6976,7 +7023,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -7026,7 +7074,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -7116,7 +7165,8 @@ if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\t\t\t || test ! -s conftest.err'\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -7180,6 +7230,8 @@ fi\n \n case $target in\n \talpha*-*-* | \\\n+\tarm*-*-eabi* | \\\n+\tarm*-*-symbianelf* | \\\n \tx86_64-*-* | \\\n \tia64-*-* | \\\n \thppa*64*-*-* | parisc*64*-*-* | \\\n@@ -8100,6 +8152,11 @@ esac\n   *) ac_INSTALL=$ac_top_builddir$INSTALL ;;\n   esac\n \n+  if test x\"$ac_file\" != x-; then\n+    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n+echo \"$as_me: creating $ac_file\" >&6;}\n+    rm -f \"$ac_file\"\n+  fi\n   # Let's still pretend it is `configure' which instantiates (i.e., don't\n   # use $as_me), people would be surprised to read:\n   #    /* config.h.  Generated by config.status.  */\n@@ -8138,12 +8195,6 @@ echo \"$as_me: error: cannot find input file: $f\" >&2;}\n \t fi;;\n       esac\n     done` || { (exit 1); exit 1; }\n-\n-  if test x\"$ac_file\" != x-; then\n-    { echo \"$as_me:$LINENO: creating $ac_file\" >&5\n-echo \"$as_me: creating $ac_file\" >&6;}\n-    rm -f \"$ac_file\"\n-  fi\n _ACEOF\n cat >>$CONFIG_STATUS <<_ACEOF\n   sed \"$ac_vpsub"}, {"sha": "e9d57dc762b3a0c45c0e8cae671d63a837b7200b", "filename": "libcpp/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3f8d95d356ae617eaa76aa21ebfa0649f927c13/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=b3f8d95d356ae617eaa76aa21ebfa0649f927c13", "patch": "@@ -65,6 +65,8 @@ fi\n m4_changequote(,)\n case $target in\n \talpha*-*-* | \\\n+\tarm*-*-eabi* | \\\n+\tarm*-*-symbianelf* | \\\n \tx86_64-*-* | \\\n \tia64-*-* | \\\n \thppa*64*-*-* | parisc*64*-*-* | \\"}]}