{"sha": "d21a7b447a2bdf5fe11f70827327c46472ee081a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxYTdiNDQ3YTJiZGY1ZmUxMWY3MDgyNzMyN2M0NjQ3MmVlMDgxYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-05-09T20:41:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-09T20:41:08Z"}, "message": "re PR target/52908 (xop-mul-1:f9 miscompiled on bulldozer (-mxop))\n\n\tPR target/52908\n\t* config/i386/sse.md (vec_widen_smult_hi_v4si): Expand using\n\txop_pmacsdqh insn pattern instead of xop_mulv2div2di3_high.\n\t(vec_widen_smult_lo_v4si): Expand using xop_pmacsdql insn pattern\n\tinstead of xop_mulv2div2di3_low.\n\t(xop_p<macs>dql): Fix vec_select selector.\n\t(xop_p<macs>dqh): Ditto.\n\t(xop_mulv2div2di3_low): Remove insn_and_split pattern.\n\t(xop_mulv2div2di3_high): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/52908\n\t* gcc.target/i386/xop-imul32widen-vector.c: Update scan-assembler\n\tdirective to Scan for vpmuldq, not vpmacsdql.\n\nFrom-SVN: r187354", "tree": {"sha": "f0b3f9057a4fe62a59643810ea390aa9be8ffa03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0b3f9057a4fe62a59643810ea390aa9be8ffa03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21a7b447a2bdf5fe11f70827327c46472ee081a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21a7b447a2bdf5fe11f70827327c46472ee081a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21a7b447a2bdf5fe11f70827327c46472ee081a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21a7b447a2bdf5fe11f70827327c46472ee081a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c54e7136615f2772e46576b83e6da1c17e37b73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54e7136615f2772e46576b83e6da1c17e37b73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54e7136615f2772e46576b83e6da1c17e37b73a"}], "stats": {"total": 116, "additions": 33, "deletions": 83}, "files": [{"sha": "bd8b9b2099265b0c4abeb500dfc6e704285d7cd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21a7b447a2bdf5fe11f70827327c46472ee081a", "patch": "@@ -1,3 +1,15 @@\n+2012-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52908\n+\t* config/i386/sse.md (vec_widen_smult_hi_v4si): Expand using\n+\txop_pmacsdqh insn pattern instead of xop_mulv2div2di3_high.\n+\t(vec_widen_smult_lo_v4si): Expand using xop_pmacsdql insn pattern\n+\tinstead of xop_mulv2div2di3_low.\n+\t(xop_p<macs>dql): Fix vec_select selector.\n+\t(xop_p<macs>dqh): Ditto.\n+\t(xop_mulv2div2di3_low): Remove insn_and_split pattern.\n+\t(xop_mulv2div2di3_high): Ditto.\n+\n 2012-05-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n        * doc/extend.texi (Function Attributes): Point xref to section"}, {"sha": "46d6a8b4ecede09ad7f470c558c4a125fd574d93", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 82, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d21a7b447a2bdf5fe11f70827327c46472ee081a", "patch": "@@ -5748,11 +5748,15 @@\n \n   if (TARGET_XOP)\n     {\n+      rtx t3 = gen_reg_rtx (V2DImode);\n+\n       emit_insn (gen_sse2_pshufd_1 (t1, op1, GEN_INT (0), GEN_INT (2),\n \t\t\t\t    GEN_INT (1), GEN_INT (3)));\n       emit_insn (gen_sse2_pshufd_1 (t2, op2, GEN_INT (0), GEN_INT (2),\n \t\t\t\t    GEN_INT (1), GEN_INT (3)));\n-      emit_insn (gen_xop_mulv2div2di3_high (operands[0], t1, t2));\n+      emit_move_insn (t3, CONST0_RTX (V2DImode));\n+\n+      emit_insn (gen_xop_pmacsdqh (operands[0], t1, t2, t3));\n       DONE;\n     }\n \n@@ -5777,11 +5781,15 @@\n \n   if (TARGET_XOP)\n     {\n+      rtx t3 = gen_reg_rtx (V2DImode);\n+\n       emit_insn (gen_sse2_pshufd_1 (t1, op1, GEN_INT (0), GEN_INT (2),\n \t\t\t\t    GEN_INT (1), GEN_INT (3)));\n       emit_insn (gen_sse2_pshufd_1 (t2, op2, GEN_INT (0), GEN_INT (2),\n \t\t\t\t    GEN_INT (1), GEN_INT (3)));\n-      emit_insn (gen_xop_mulv2div2di3_low (operands[0], t1, t2));\n+      emit_move_insn (t3, CONST0_RTX (V2DImode));\n+\n+      emit_insn (gen_xop_pmacsdql (operands[0], t1, t2, t3));\n       DONE;\n     }\n \n@@ -9792,11 +9800,11 @@\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t    (parallel [(const_int 1) (const_int 3)])))\n+\t    (parallel [(const_int 0) (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 1) (const_int 3)]))))\n+\t    (parallel [(const_int 0) (const_int 2)]))))\n \t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vp<macs>dql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -9810,93 +9818,17 @@\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t    (parallel [(const_int 0) (const_int 2)])))\n+\t    (parallel [(const_int 1) (const_int 3)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0) (const_int 2)]))))\n+\t    (parallel [(const_int 1) (const_int 3)]))))\n \t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vp<macs>dqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; We don't have a straight 32-bit parallel multiply and extend on XOP, so\n-;; fake it with a multiply/add.  In general, we expect the define_split to\n-;; occur before register allocation, so we have to handle the corner case where\n-;; the target is the same as operands 1/2\n-(define_insn_and_split \"xop_mulv2div2di3_low\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(mult:V2DI\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"register_operand\" \"%x\")\n-\t      (parallel [(const_int 1) (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 1) (const_int 3)])))))]\n-  \"TARGET_XOP\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1) (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 1) (const_int 3)]))))\n-\t (match_dup 0)))]\n-{\n-  operands[3] = CONST0_RTX (V2DImode);\n-}\n-  [(set_attr \"type\" \"ssemul\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; We don't have a straight 32-bit parallel multiply and extend on XOP, so\n-;; fake it with a multiply/add.  In general, we expect the define_split to\n-;; occur before register allocation, so we have to handle the corner case where\n-;; the target is the same as either operands[1] or operands[2]\n-(define_insn_and_split \"xop_mulv2div2di3_high\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(mult:V2DI\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"register_operand\" \"%x\")\n-\t      (parallel [(const_int 0) (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0) (const_int 2)])))))]\n-  \"TARGET_XOP\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 0) (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 0) (const_int 2)]))))\n-\t (match_dup 0)))]\n-{\n-  operands[3] = CONST0_RTX (V2DImode);\n-}\n-  [(set_attr \"type\" \"ssemul\")\n-   (set_attr \"mode\" \"TI\")])\n-\n ;; XOP parallel integer multiply/add instructions for the intrinisics\n (define_insn \"xop_p<macs>wd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")"}, {"sha": "7cdad4a6aaa07d9f50d15e9c6b610cc7ae02dfaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21a7b447a2bdf5fe11f70827327c46472ee081a", "patch": "@@ -1,3 +1,9 @@\n+2012-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52908\n+\t* gcc.target/i386/xop-imul32widen-vector.c: Update scan-assembler\n+\tdirective to Scan for vpmuldq, not vpmacsdql.\n+\n 2012-05-09  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/53185"}, {"sha": "0730987e1a69c686686245fdc0a67be0fa299cf0", "filename": "gcc/testsuite/gcc.target/i386/xop-imul32widen-vector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul32widen-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a7b447a2bdf5fe11f70827327c46472ee081a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul32widen-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-imul32widen-vector.c?ref=d21a7b447a2bdf5fe11f70827327c46472ee081a", "patch": "@@ -32,5 +32,5 @@ int main ()\n   exit (0);\n }\n \n-/* { dg-final { scan-assembler \"vpmacsdql\" } } */\n+/* { dg-final { scan-assembler \"vpmuldq\" } } */\n /* { dg-final { scan-assembler \"vpmacsdqh\" } } */"}]}