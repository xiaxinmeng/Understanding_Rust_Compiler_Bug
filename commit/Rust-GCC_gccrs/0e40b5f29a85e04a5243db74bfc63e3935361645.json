{"sha": "0e40b5f29a85e04a5243db74bfc63e3935361645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0MGI1ZjI5YTg1ZTA0YTUyNDNkYjc0YmZjNjNlMzkzNTM2MTY0NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-14T10:46:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-14T10:46:00Z"}, "message": "darwin-c.c, [...]: Follow spelling conventions.\n\n\t* config/darwin-c.c, config/alpha/alpha.c, config/i386/i386.c,\n\tconfig/i386/predicates.md, config/sparc/sparc.c: Follow\n\tspelling conventions.\n\nFrom-SVN: r87489", "tree": {"sha": "cd5a0ae96509ad3809478f19556cf92388a2d2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd5a0ae96509ad3809478f19556cf92388a2d2dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e40b5f29a85e04a5243db74bfc63e3935361645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e40b5f29a85e04a5243db74bfc63e3935361645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e40b5f29a85e04a5243db74bfc63e3935361645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e40b5f29a85e04a5243db74bfc63e3935361645/comments", "author": null, "committer": null, "parents": [{"sha": "8121b89976ad7a834e6a25ab8c93e79b94a887e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8121b89976ad7a834e6a25ab8c93e79b94a887e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8121b89976ad7a834e6a25ab8c93e79b94a887e9"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "e8f96df3678c5c589db17dc036714247948ae16f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -1,3 +1,9 @@\n+2004-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/darwin-c.c, config/alpha/alpha.c, config/i386/i386.c,\n+\tconfig/i386/predicates.md, config/sparc/sparc.c: Follow\n+\tspelling conventions.\n+\n 2004-09-14  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \t    Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "54d78f6c14393a55bac34850c04bcb44cff966c3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -6179,7 +6179,7 @@ set_frame_related_p (void)\n #define FRP(exp)  (start_sequence (), exp, set_frame_related_p ())\n \n /* Generates a store with the proper unwind info attached.  VALUE is\n-   stored at BASE_REG+BASE_OFS.  If FRAME_BIAS is non-zero, then BASE_REG\n+   stored at BASE_REG+BASE_OFS.  If FRAME_BIAS is nonzero, then BASE_REG\n    contains SP+FRAME_BIAS, and that is the unwind info that should be\n    generated.  If FRAME_REG != VALUE, then VALUE is being stored on\n    behalf of FRAME_REG, and FRAME_REG should be present in the unwind.  */"}, {"sha": "9adf2498bcce147808a75bca7722fbe94ea76754", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -449,7 +449,7 @@ darwin_register_frameworks (int stdinc)\n    fails to find a header.  We search each file in the include stack,\n    using FUNC, starting from the most deeply nested include and\n    finishing with the main input file.  We stop searching when FUNC\n-   returns non-zero.  */\n+   returns nonzero.  */\n \n static const char*\n find_subframework_header (cpp_reader *pfile, const char *header, cpp_dir **dirp)"}, {"sha": "57e785d003bbefb5961f26048b6cb631c174807a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -9960,7 +9960,7 @@ ix86_split_long_move (rtx operands[])\n \t}\n     }\n \n-  /* If optimizing for size, attempt to locally unCSE non-zero constants.  */\n+  /* If optimizing for size, attempt to locally unCSE nonzero constants.  */\n   if (optimize_size)\n     {\n       if (GET_CODE (operands[5]) == CONST_INT"}, {"sha": "ec747aef20ecb384a0aa8262106bbc7248409157", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -571,7 +571,7 @@\n     (match_operand 0 \"reg_or_pm1_operand\")))\n \n ;; Return true if OP is a vector load from the constant pool with just\n-;; the first element non-zero.\n+;; the first element nonzero.\n (define_predicate \"zero_extended_scalar_load_operand\"\n   (match_code \"mem\")\n {"}, {"sha": "dd441bac34235aef2674488161cbe7793043c840", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e40b5f29a85e04a5243db74bfc63e3935361645/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0e40b5f29a85e04a5243db74bfc63e3935361645", "patch": "@@ -1644,7 +1644,7 @@ sparc_emit_set_const32 (rtx op0, rtx op1)\n \n \f\n /* Load OP1, a symbolic 64-bit constant, into OP0, a DImode register.\n-   If TEMP is non-zero, we are forbidden to use any other scratch\n+   If TEMP is nonzero, we are forbidden to use any other scratch\n    registers.  Otherwise, we are allowed to generate them as needed.\n \n    Note that TEMP may have TImode if the code model is TARGET_CM_MEDANY"}]}