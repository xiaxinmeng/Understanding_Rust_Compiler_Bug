{"sha": "061df55eca44a7d64f003ebed9c8627b0ecc232e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxZGY1NWVjYTQ0YTdkNjRmMDAzZWJlZDljODYyN2IwZWNjMjMyZQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:47:21Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:47:21Z"}, "message": "vrshl.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrshl.c: New file.\n\nFrom-SVN: r224654", "tree": {"sha": "f1043b67351c7d14172ff4d8545398e78aa0a12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1043b67351c7d14172ff4d8545398e78aa0a12f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/061df55eca44a7d64f003ebed9c8627b0ecc232e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061df55eca44a7d64f003ebed9c8627b0ecc232e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061df55eca44a7d64f003ebed9c8627b0ecc232e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061df55eca44a7d64f003ebed9c8627b0ecc232e/comments", "author": null, "committer": null, "parents": [{"sha": "0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b29b7091bc5bb0ab923540b24a01d86da7b21c6"}], "stats": {"total": 631, "additions": 631, "deletions": 0}, "files": [{"sha": "bde58f4ebb48452ba2f220ebe763a1f8229a35d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061df55eca44a7d64f003ebed9c8627b0ecc232e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061df55eca44a7d64f003ebed9c8627b0ecc232e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=061df55eca44a7d64f003ebed9c8627b0ecc232e", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrshl.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrev.c: New file."}, {"sha": "d970fbda3f7fb3e2716c278467ab770906d444dc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrshl.c", "status": "added", "additions": 627, "deletions": 0, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061df55eca44a7d64f003ebed9c8627b0ecc232e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061df55eca44a7d64f003ebed9c8627b0ecc232e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshl.c?ref=061df55eca44a7d64f003ebed9c8627b0ecc232e", "patch": "@@ -0,0 +1,627 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected results with input=0 and negative shift amount.  */\n+VECT_VAR_DECL(expected_0_sh_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_sh_neg,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n+\t\t\t\t       0xe8, 0xea, 0xec, 0xee };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xff80, 0xff88, 0xff90, 0xff98 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffff000, 0xfffff100 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffffe };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n+\t\t\t\t\t0xe8, 0xea, 0xec, 0xee };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xff80, 0xff88, 0xff90, 0xff98 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffff000, 0xfffff100 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x1ffffffffffffffe };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x0, 0x1000, 0x2000, 0x3000,\n+\t\t\t\t\t0x4000, 0x5000, 0x6000, 0x7000 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x0, 0x8000000000000000 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x0, 0x1000, 0x2000, 0x3000,\n+\t\t\t\t\t 0x4000, 0x5000, 0x6000, 0x7000 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x0, 0x8000000000000000 };\n+\n+/* Expected results with negative shift amount.  */\n+VECT_VAR_DECL(expected_sh_neg,int,8,8) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t\t      0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected_sh_neg,int,16,4) [] = { 0xfffc, 0xfffc, 0xfffd, 0xfffd };\n+VECT_VAR_DECL(expected_sh_neg,int,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected_sh_neg,int,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_sh_neg,uint,8,8) [] = { 0x78, 0x79, 0x79, 0x7a,\n+\t\t\t\t\t       0x7a, 0x7b, 0x7b, 0x7c };\n+VECT_VAR_DECL(expected_sh_neg,uint,16,4) [] = { 0x3ffc, 0x3ffc, 0x3ffd, 0x3ffd };\n+VECT_VAR_DECL(expected_sh_neg,uint,32,2) [] = { 0x1ffffffe, 0x1ffffffe };\n+VECT_VAR_DECL(expected_sh_neg,uint,64,1) [] = { 0xfffffffffffffff };\n+VECT_VAR_DECL(expected_sh_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_neg,uint,8,16) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t\t0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t\t0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t\t0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected_sh_neg,uint,16,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_sh_neg,uint,32,4) [] = { 0x80000, 0x80000,\n+\t\t\t\t\t\t0x80000, 0x80000 };\n+VECT_VAR_DECL(expected_sh_neg,uint,64,2) [] = { 0x100000000000, 0x100000000000 };\n+\n+/* Expected results with max input value shifted by -1 to test\n+   round_const.  */\n+VECT_VAR_DECL(expected_max_sh_minus1,int,8,8) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t     0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,16,4) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t      0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,32,2) [] = { 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,64,1) [] = { 0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t      0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t       0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,8,16) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t      0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t      0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t      0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,16,8) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t      0x4000, 0x4000,\n+\t\t\t\t\t\t      0x4000, 0x4000,\n+\t\t\t\t\t\t      0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t\t      0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,int,64,2) [] = { 0x4000000000000000,\n+\t\t\t\t\t\t      0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t       0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t       0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t       0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t       0x8000, 0x8000,\n+\t\t\t\t\t\t       0x8000, 0x8000,\n+\t\t\t\t\t\t       0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t       0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh_minus1,uint,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t       0x8000000000000000 };\n+\n+/* Expected results with max input value shifted by -3 to test\n+   round_const.  */\n+VECT_VAR_DECL(expected_max_sh_minus3,int,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t     0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,16,4) [] = { 0x1000, 0x1000,\n+\t\t\t\t\t\t      0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,32,2) [] = { 0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,64,1) [] = { 0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,8,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t      0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,16,4) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t       0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,32,2) [] = { 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,64,1) [] = { 0x2000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,8,16) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t      0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t      0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t      0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,16,8) [] = { 0x1000, 0x1000,\n+\t\t\t\t\t\t      0x1000, 0x1000,\n+\t\t\t\t\t\t      0x1000, 0x1000,\n+\t\t\t\t\t\t      0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,32,4) [] = { 0x10000000, 0x10000000,\n+\t\t\t\t\t\t      0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,int,64,2) [] = { 0x1000000000000000,\n+\t\t\t\t\t\t      0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,8,16) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t       0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t       0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t       0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,16,8) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t       0x2000, 0x2000,\n+\t\t\t\t\t\t       0x2000, 0x2000,\n+\t\t\t\t\t\t       0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,32,4) [] = { 0x20000000, 0x20000000,\n+\t\t\t\t\t\t       0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh_minus3,uint,64,2) [] = { 0x2000000000000000,\n+\t\t\t\t\t\t       0x2000000000000000 };\n+\n+/* Expected results with negative shift by vector width.  */\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_minus_width,uint,64,2) [] = { 0x1, 0x1 };\n+\n+/* Expected results with large shift amount.  */\n+VECT_VAR_DECL(expected_max_sh_large,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected results with large negative shift amount.  */\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t\t  0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_large_neg,uint,64,2) [] = { 0x1, 0x1 };\n+\n+#define TEST_MSG \"VRSHL/VRSHLQ\"\n+void exec_vrshl (void)\n+{\n+  /* Basic test: v3=vrshl(v1,v2), then store the result.  */\n+#define TEST_VRSHL(T3, Q, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vrshl##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t       VECT_VAR(vector_shift, T3, W, N));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  DECL_VARIABLE_SIGNED_VARIANTS(vector_shift);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with 0, to check behavior on limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , int, s, 64, 1, 0);\n+  VDUP(vector, , uint, u, 8, 8, 0);\n+  VDUP(vector, , uint, u, 16, 4, 0);\n+  VDUP(vector, , uint, u, 32, 2, 0);\n+  VDUP(vector, , uint, u, 64, 1, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount.  */\n+  /* Use values equal to one-less-than the type width to check\n+     behaviour on limits.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 7);\n+  VDUP(vector_shift, , int, s, 16, 4, 15);\n+  VDUP(vector_shift, , int, s, 32, 2, 31);\n+  VDUP(vector_shift, , int, s, 64, 1, 63);\n+  VDUP(vector_shift, q, int, s, 8, 16, 7);\n+  VDUP(vector_shift, q, int, s, 16, 8, 15);\n+  VDUP(vector_shift, q, int, s, 32, 4, 31);\n+  VDUP(vector_shift, q, int, s, 64, 2, 63);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#define CMT \" (with input = 0)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0, CMT);\n+\n+\n+  /* Use negative shift amounts.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (input 0 and negative shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0_sh_neg, CMT);\n+\n+\n+  /* Test again, with predefined input values.  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 1);\n+  VDUP(vector_shift, , int, s, 16, 4, 3);\n+  VDUP(vector_shift, , int, s, 32, 2, 8);\n+  VDUP(vector_shift, , int, s, 64, 1, -3);\n+  VDUP(vector_shift, q, int, s, 8, 16, 10);\n+  VDUP(vector_shift, q, int, s, 16, 8, 12);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 63);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Use negative shift amounts.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (negative shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_sh_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_sh_neg, CMT);\n+\n+  /* Fill input vector with max value, to check behavior on limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+  /* Use -1 shift amount to check overflow with round_const.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -1);\n+  VDUP(vector_shift, , int, s, 32, 2, -1);\n+  VDUP(vector_shift, , int, s, 64, 1, -1);\n+  VDUP(vector_shift, q, int, s, 8, 16, -1);\n+  VDUP(vector_shift, q, int, s, 16, 8, -1);\n+  VDUP(vector_shift, q, int, s, 32, 4, -1);\n+  VDUP(vector_shift, q, int, s, 64, 2, -1);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (max input, shift by -1)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_minus1, CMT);\n+\n+  /* Use -3 shift amount to check overflow with round_const.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -3);\n+  VDUP(vector_shift, , int, s, 16, 4, -3);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -3);\n+  VDUP(vector_shift, q, int, s, 8, 16, -3);\n+  VDUP(vector_shift, q, int, s, 16, 8, -3);\n+  VDUP(vector_shift, q, int, s, 32, 4, -3);\n+  VDUP(vector_shift, q, int, s, 64, 2, -3);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (check rounding constant: max input, shift by -3)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_minus3, CMT);\n+\n+\n+  /* Use negative shift amount as large as input vector width.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -8);\n+  VDUP(vector_shift, , int, s, 16, 4, -16);\n+  VDUP(vector_shift, , int, s, 32, 2, -32);\n+  VDUP(vector_shift, , int, s, 64, 1, -64);\n+  VDUP(vector_shift, q, int, s, 8, 16, -8);\n+  VDUP(vector_shift, q, int, s, 16, 8, -16);\n+  VDUP(vector_shift, q, int, s, 32, 4, -32);\n+  VDUP(vector_shift, q, int, s, 64, 2, -64);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (max input, right shift by vector width)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_minus_width, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_minus_width, CMT);\n+\n+\n+  /* Test large shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 10);\n+  VDUP(vector_shift, , int, s, 16, 4, 20);\n+  VDUP(vector_shift, , int, s, 32, 2, 33);\n+  VDUP(vector_shift, , int, s, 64, 1, 65);\n+  VDUP(vector_shift, q, int, s, 8, 16, 9);\n+  VDUP(vector_shift, q, int, s, 16, 8, 16);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (max input, large shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_large, CMT);\n+\n+  \n+  /* Test large negative shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -10);\n+  VDUP(vector_shift, , int, s, 16, 4, -20);\n+  VDUP(vector_shift, , int, s, 32, 2, -33);\n+  VDUP(vector_shift, , int, s, 64, 1, -65);\n+  VDUP(vector_shift, q, int, s, 8, 16, -9);\n+  VDUP(vector_shift, q, int, s, 16, 8, -16);\n+  VDUP(vector_shift, q, int, s, 32, 4, -32);\n+  VDUP(vector_shift, q, int, s, 64, 2, -64);\n+\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VRSHL, int);\n+\n+#undef CMT\n+#define CMT \" (max input, large negative shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_large_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_large_neg, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrshl ();\n+  return 0;\n+}"}]}