{"sha": "a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjNWUxYWU1OTg4Y2VmMjU3OTlhNTY5ZjMyNTVhYzE0YzhiYTQxYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-20T13:53:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-20T13:53:56Z"}, "message": "PR libstdc++/86963 Remove use of __tuple_base in std::tuple\n\nThe _Tuple_impl base class can be used to disable copy/move assignment,\nwithout requiring an extra base class.\n\nException specifications on std::tuple assignment and swap functions can\nbe defined directly using is_nothrow_swappable, instead of querying the\nbase classes.\n\n\tPR libstdc++/86963\n\t* include/std/tuple (_Tuple_impl::operator=): Define as deleted.\n\t(_Tuple_impl::_M_assign): New functions to perform assignment instead\n\tof assignment operators.\n\t(_Tuple_impl::_M_swap): Remove exception specification.\n\t(_Tuple_impl<_Idx, _Head>): Likewise.\n\t(_TC::_NonNestedTuple, _TC::_NotSameTuple): Use __remove_cvref_t.\n\t(__tuple_base): Remove.\n\t(tuple, tuple<_T1, _T2>): Remove inheritance from __tuple_base.\n\t(tuple::operator=, tuple<_T1, _T2>::operator=): Call _M_assign.\n\t(tuple::swap, tuple<_T1, _T2>::swap): Define exception specification\n\tusing __is_nothrow_swappable.\n\t(tuple<_T1, _T2>::tuple(_U1&&, _U2&&)): Use __remove_cvref_t.\n\nFrom-SVN: r263661", "tree": {"sha": "02e1aebc861f087b2cc513bd35717069a19b42f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e1aebc861f087b2cc513bd35717069a19b42f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c5e1ae5988cef25799a569f3255ac14c8ba41a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea379c9ec3776b9d4f72d5d8c8987e2e43c7baae"}], "stats": {"total": 147, "additions": 57, "deletions": 90}, "files": [{"sha": "48455953db8e7fb99974d34f838d2ba2b9e6e9d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c5e1ae5988cef25799a569f3255ac14c8ba41a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c5e1ae5988cef25799a569f3255ac14c8ba41a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "patch": "@@ -1,5 +1,19 @@\n 2018-08-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86963\n+\t* include/std/tuple (_Tuple_impl::operator=): Define as deleted.\n+\t(_Tuple_impl::_M_assign): New functions to perform assignment instead\n+\tof assignment operators.\n+\t(_Tuple_impl::_M_swap): Remove exception specification.\n+\t(_Tuple_impl<_Idx, _Head>): Likewise.\n+\t(_TC::_NonNestedTuple, _TC::_NotSameTuple): Use __remove_cvref_t.\n+\t(__tuple_base): Remove.\n+\t(tuple, tuple<_T1, _T2>): Remove inheritance from __tuple_base.\n+\t(tuple::operator=, tuple<_T1, _T2>::operator=): Call _M_assign.\n+\t(tuple::swap, tuple<_T1, _T2>::swap): Define exception specification\n+\tusing __is_nothrow_swappable.\n+\t(tuple<_T1, _T2>::tuple(_U1&&, _U2&&)): Use __remove_cvref_t.\n+\n \t* include/std/optional (_Optional_payload): Use variable templates\n \tfor conditions in default template arguments and exception\n \tspecifications."}, {"sha": "56b97c25eed4a811a0afbf7f815fdb61d5c8e5b0", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 43, "deletions": 90, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c5e1ae5988cef25799a569f3255ac14c8ba41a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c5e1ae5988cef25799a569f3255ac14c8ba41a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a2c5e1ae5988cef25799a569f3255ac14c8ba41a", "patch": "@@ -219,6 +219,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2729. Missing SFINAE on std::pair::operator=\n+      _Tuple_impl& operator=(const _Tuple_impl&) = delete;\n+\n       constexpr\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(__and_<is_nothrow_move_constructible<_Head>,\n@@ -288,49 +292,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 std::forward<_UHead>\n \t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n-      _Tuple_impl&\n-      operator=(const _Tuple_impl& __in)\n-      {\n-\t_M_head(*this) = _M_head(__in);\n-\t_M_tail(*this) = _M_tail(__in);\n-\treturn *this;\n-      }\n-\n-      _Tuple_impl&\n-      operator=(_Tuple_impl&& __in)\n-      noexcept(__and_<is_nothrow_move_assignable<_Head>,\n-\t              is_nothrow_move_assignable<_Inherited>>::value)\n-      {\n-\t_M_head(*this) = std::forward<_Head>(_M_head(__in));\n-\t_M_tail(*this) = std::move(_M_tail(__in));\n-\treturn *this;\n-      }\n-\n       template<typename... _UElements>\n-        _Tuple_impl&\n-        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)\n+        void\n+        _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)\n         {\n \t  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);\n-\t  _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);\n-\t  return *this;\n+\t  _M_tail(*this)._M_assign(\n+\t      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));\n \t}\n \n       template<typename _UHead, typename... _UTails>\n-        _Tuple_impl&\n-        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n+        void\n+        _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n         {\n \t  _M_head(*this) = std::forward<_UHead>\n \t    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));\n-\t  _M_tail(*this) = std::move\n-\t    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));\n-\t  return *this;\n+\t  _M_tail(*this)._M_assign(\n+\t      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));\n \t}\n \n     protected:\n       void\n       _M_swap(_Tuple_impl& __in)\n-      noexcept(__is_nothrow_swappable<_Head>::value\n-               && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))\n       {\n \tusing std::swap;\n \tswap(_M_head(*this), _M_head(__in));\n@@ -367,6 +350,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2729. Missing SFINAE on std::pair::operator=\n+      _Tuple_impl& operator=(const _Tuple_impl&) = delete;\n+\n       constexpr\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(is_nothrow_move_constructible<_Head>::value)\n@@ -420,42 +407,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n \t{ }\n \n-      _Tuple_impl&\n-      operator=(const _Tuple_impl& __in)\n-      {\n-\t_M_head(*this) = _M_head(__in);\n-\treturn *this;\n-      }\n-\n-      _Tuple_impl&\n-      operator=(_Tuple_impl&& __in)\n-      noexcept(is_nothrow_move_assignable<_Head>::value)\n-      {\n-\t_M_head(*this) = std::forward<_Head>(_M_head(__in));\n-\treturn *this;\n-      }\n-\n       template<typename _UHead>\n-        _Tuple_impl&\n-        operator=(const _Tuple_impl<_Idx, _UHead>& __in)\n+        void\n+        _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)\n         {\n \t  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);\n-\t  return *this;\n \t}\n \n       template<typename _UHead>\n-        _Tuple_impl&\n-        operator=(_Tuple_impl<_Idx, _UHead>&& __in)\n+        void\n+        _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)\n         {\n \t  _M_head(*this)\n \t    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));\n-\t  return *this;\n \t}\n \n     protected:\n       void\n       _M_swap(_Tuple_impl& __in)\n-      noexcept(__is_nothrow_swappable<_Head>::value)\n       {\n \tusing std::swap;\n \tswap(_M_head(*this), _M_head(__in));\n@@ -495,20 +464,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static constexpr bool _NonNestedTuple()\n     {\n       return  __and_<__not_<is_same<tuple<_Elements...>,\n-                                   typename remove_cv<\n-                                     typename remove_reference<_SrcTuple>::type\n-                                   >::type>>,\n+\t\t\t\t    __remove_cvref_t<_SrcTuple>>>,\n                      __not_<is_convertible<_SrcTuple, _Elements...>>,\n                      __not_<is_constructible<_Elements..., _SrcTuple>>\n               >::value;\n     }\n+\n     template<typename... _UElements>\n     static constexpr bool _NotSameTuple()\n     {\n       return  __not_<is_same<tuple<_Elements...>,\n-\t\t\t     typename remove_const<\n-\t\t\t       typename remove_reference<_UElements...>::type\n-\t\t\t       >::type>>::value;\n+\t\t\t     __remove_cvref_t<_UElements>...>>::value;\n     }\n   };\n \n@@ -544,30 +510,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       return true;\n     }\n+\n     template<typename... _UElements>\n     static constexpr bool _NotSameTuple()\n     {\n-      return  true;\n+      return true;\n     }\n   };\n \n-  // The tag parameter ensures that in nested tuples each __tuple_base\n-  // is a different type and can use the empty base-class optimisation.\n-  template<typename _Tag>\n-    class __tuple_base\n-    {\n-      template<typename...> friend struct tuple;\n-      __tuple_base() = default;\n-      ~__tuple_base() = default;\n-      __tuple_base(const __tuple_base&) = default;\n-      __tuple_base& operator=(const __tuple_base&) = delete;\n-    };\n-\n   /// Primary class template, tuple\n   template<typename... _Elements>\n-    class tuple\n-    : public _Tuple_impl<0, _Elements...>,\n-      private __tuple_base<tuple<_Elements...>>\n+    class tuple : public _Tuple_impl<0, _Elements...>\n     {\n       typedef _Tuple_impl<0, _Elements...> _Inherited;\n \n@@ -858,13 +811,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))\n \t{ }\n \n+      // tuple assignment\n+\n       tuple&\n       operator=(typename conditional<__assignable<const _Elements&...>(),\n \t\t\t\t     const tuple&,\n \t\t\t\t     const __nonesuch_no_braces&>::type __in)\n       noexcept(__nothrow_assignable<const _Elements&...>())\n       {\n-\tstatic_cast<_Inherited&>(*this) = __in;\n+\tthis->_M_assign(__in);\n \treturn *this;\n       }\n \n@@ -874,7 +829,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     __nonesuch_no_braces&&>::type __in)\n       noexcept(__nothrow_assignable<_Elements...>())\n       {\n-\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n+\tthis->_M_assign(std::move(__in));\n \treturn *this;\n       }\n \n@@ -883,7 +838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator=(const tuple<_UElements...>& __in)\n \tnoexcept(__nothrow_assignable<const _UElements&...>())\n \t{\n-\t  static_cast<_Inherited&>(*this) = __in;\n+\t  this->_M_assign(__in);\n \t  return *this;\n \t}\n \n@@ -892,13 +847,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator=(tuple<_UElements...>&& __in)\n \tnoexcept(__nothrow_assignable<_UElements...>())\n \t{\n-\t  static_cast<_Inherited&>(*this) = std::move(__in);\n+\t  this->_M_assign(std::move(__in));\n \t  return *this;\n \t}\n \n+      // tuple swap\n       void\n       swap(tuple& __in)\n-      noexcept(noexcept(__in._M_swap(__in)))\n+      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)\n       { _Inherited::_M_swap(__in); }\n     };\n \n@@ -934,9 +890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Partial specialization, 2-element tuple.\n   /// Includes construction and assignment from a pair.\n   template<typename _T1, typename _T2>\n-    class tuple<_T1, _T2>\n-    : public _Tuple_impl<0, _T1, _T2>,\n-      private __tuple_base<tuple<_T1, _T2>>\n+    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>\n     {\n       typedef _Tuple_impl<0, _T1, _T2> _Inherited;\n \n@@ -1009,8 +963,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                     _MoveConstructibleTuple<_U1, _U2>()\n                   && _TMC::template\n                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()\n-\t          && !is_same<typename decay<_U1>::type,\n-\t\t\t      allocator_arg_t>::value,\n+\t          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,\n \tbool>::type = true>\n         constexpr tuple(_U1&& __a1, _U2&& __a2)\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n@@ -1020,8 +973,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                     _MoveConstructibleTuple<_U1, _U2>()\n                   && !_TMC::template\n                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()\n-\t          && !is_same<typename decay<_U1>::type,\n-\t\t\t      allocator_arg_t>::value,\n+\t          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,\n \tbool>::type = false>\n         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n@@ -1255,7 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     const __nonesuch_no_braces&>::type __in)\n       noexcept(__nothrow_assignable<const _T1&, const _T2&>())\n       {\n-\tstatic_cast<_Inherited&>(*this) = __in;\n+\tthis->_M_assign(__in);\n \treturn *this;\n       }\n \n@@ -1265,7 +1217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     __nonesuch_no_braces&&>::type __in)\n       noexcept(__nothrow_assignable<_T1, _T2>())\n       {\n-\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n+\tthis->_M_assign(std::move(__in));\n \treturn *this;\n       }\n \n@@ -1274,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator=(const tuple<_U1, _U2>& __in)\n \tnoexcept(__nothrow_assignable<const _U1&, const _U2&>())\n \t{\n-\t  static_cast<_Inherited&>(*this) = __in;\n+\t  this->_M_assign(__in);\n \t  return *this;\n \t}\n \n@@ -1283,7 +1235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator=(tuple<_U1, _U2>&& __in)\n \tnoexcept(__nothrow_assignable<_U1, _U2>())\n \t{\n-\t  static_cast<_Inherited&>(*this) = std::move(__in);\n+\t  this->_M_assign(std::move(__in));\n \t  return *this;\n \t}\n \n@@ -1309,7 +1261,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(tuple& __in)\n-      noexcept(noexcept(__in._M_swap(__in)))\n+      noexcept(__and_<__is_nothrow_swappable<_T1>,\n+\t\t      __is_nothrow_swappable<_T2>>::value)\n       { _Inherited::_M_swap(__in); }\n     };\n "}]}