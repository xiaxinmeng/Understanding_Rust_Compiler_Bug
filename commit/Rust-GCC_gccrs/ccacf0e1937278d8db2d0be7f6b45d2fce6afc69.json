{"sha": "ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhY2YwZTE5MzcyNzhkOGRiMmQwYmU3ZjZiNDVkMmZjZTZhZmM2OQ==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-05-07T16:15:52Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-07T16:15:52Z"}, "message": "Account for loop unrolling in the insn-to-prefetch ratio heuristic.\n\n2010-05-07  Changpeng Fang  <changpeng.fang@amd.com>\n\n\t* tree-ssa-loop-prefetch.c (is_loop_prefetching_profitable):\n\tAccount for loop unrolling in the insn-to-prefetch ratio heuristic.\n\t(loop_prefetch_arrays): Pass to is_loop_prefetching_profitable\n\tthe unroll_factor.\n\nFrom-SVN: r159162", "tree": {"sha": "7421bcfd46f6420c186e05c988f9bdf591a97bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7421bcfd46f6420c186e05c988f9bdf591a97bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e5a2ebc01680658d0e918a5bdb00d119dd8813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e5a2ebc01680658d0e918a5bdb00d119dd8813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e5a2ebc01680658d0e918a5bdb00d119dd8813"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "6236c9e77b2a2f10db3a96b21c187e423aab1352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "patch": "@@ -1,3 +1,10 @@\n+2010-05-07  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\t* tree-ssa-loop-prefetch.c (is_loop_prefetching_profitable):\n+\tAccount for loop unrolling in the insn-to-prefetch ratio heuristic.\n+\t(loop_prefetch_arrays): Pass to is_loop_prefetching_profitable\n+\tthe unroll_factor.\n+\n 2010-05-07  Changpeng Fang  <changpeng.fang@amd.com>\n \n \t* tree-ssa-loop-prefetch.c (is_loop_prefetching_profitable): Dump"}, {"sha": "38d8f23365522e45e6c17f63f4ebce8b70776e49", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccacf0e1937278d8db2d0be7f6b45d2fce6afc69/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=ccacf0e1937278d8db2d0be7f6b45d2fce6afc69", "patch": "@@ -1532,7 +1532,7 @@ determine_loop_nest_reuse (struct loop *loop, struct mem_ref_group *refs,\n static bool\n is_loop_prefetching_profitable (unsigned ahead, HOST_WIDE_INT est_niter,\n \t\t\t\tunsigned ninsns, unsigned prefetch_count,\n-\t\t\t\tunsigned mem_ref_count)\n+\t\t\t\tunsigned mem_ref_count, unsigned unroll_factor)\n {\n   int insn_to_mem_ratio, insn_to_prefetch_ratio;\n \n@@ -1570,13 +1570,18 @@ is_loop_prefetching_profitable (unsigned ahead, HOST_WIDE_INT est_niter,\n      by taking the ratio between the number of prefetches and the total\n      number of instructions.  Since we are using integer arithmetic, we\n      compute the reciprocal of this ratio.\n-     TODO: Account for loop unrolling, which may reduce the costs of\n-     shorter stride prefetches.  Note that not accounting for loop\n-     unrolling over-estimates the cost and hence gives more conservative\n-     results.  */\n+     (unroll_factor * ninsns) is used to estimate the number of instructions in\n+     the unrolled loop.  This implementation is a bit simplistic -- the number\n+     of issued prefetch instructions is also affected by unrolling.  So,\n+     prefetch_mod and the unroll factor should be taken into account when\n+     determining prefetch_count.  Also, the number of insns of the unrolled\n+     loop will usually be significantly smaller than the number of insns of the\n+     original loop * unroll_factor (at least the induction variable increases\n+     and the exit branches will get eliminated), so it might be better to use\n+     tree_estimate_loop_size + estimated_unrolled_size.  */\n   if (est_niter < 0)\n     {\n-      insn_to_prefetch_ratio = ninsns / prefetch_count;\n+      insn_to_prefetch_ratio = (unroll_factor * ninsns) / prefetch_count;\n       return insn_to_prefetch_ratio >= MIN_INSN_TO_PREFETCH_RATIO;\n     }\n \n@@ -1643,8 +1648,8 @@ loop_prefetch_arrays (struct loop *loop)\n \t     ahead, unroll_factor, est_niter,\n \t     ninsns, mem_ref_count, prefetch_count);\n \n-  if (!is_loop_prefetching_profitable (ahead, est_niter, ninsns,\n-\t\t\t\t       prefetch_count, mem_ref_count))\n+  if (!is_loop_prefetching_profitable (ahead, est_niter, ninsns, prefetch_count,\n+\t\t\t\t       mem_ref_count, unroll_factor))\n     goto fail;\n \n   mark_nontemporal_stores (loop, refs);"}]}