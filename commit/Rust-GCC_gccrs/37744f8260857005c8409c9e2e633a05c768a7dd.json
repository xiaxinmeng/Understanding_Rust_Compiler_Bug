{"sha": "37744f8260857005c8409c9e2e633a05c768a7dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3NDRmODI2MDg1NzAwNWM4NDA5YzllMmU2MzNhMDVjNzY4YTdkZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-20T09:32:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-20T10:37:19Z"}, "message": "Refactor BB splitting of DRs for SLP group analysis\n\nThis uses the group_id computed to ensure DRs in different BBs do\nnot get merged into a DR group.  To achieve this we seed the\ngroup from the BB index when group_ids are not computed and we\nmake sure to bump the group_id when advancing to the next BB for\nBB SLP analysis.\n\nThis paves the way for relaxing the grouping for BB vectorization\nby adjusting its group_id computation.\n\n2021-08-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (dr_group_sort_cmp): Do not compare\n\tBBs.\n\t(vect_analyze_data_ref_accesses): Likewise.  Assign the BB\n\tindex as group_id when dataref_groups were not computed.\n\t* tree-vect-slp.c (vect_slp_bbs): Bump current_group when\n\twe advace to the next BB.", "tree": {"sha": "0301a71e812d7b304dfe9e76d38c1493ba149eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0301a71e812d7b304dfe9e76d38c1493ba149eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37744f8260857005c8409c9e2e633a05c768a7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37744f8260857005c8409c9e2e633a05c768a7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37744f8260857005c8409c9e2e633a05c768a7dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37744f8260857005c8409c9e2e633a05c768a7dd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77167196fe8cf840a69913e7739d39ae0df2b074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167196fe8cf840a69913e7739d39ae0df2b074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77167196fe8cf840a69913e7739d39ae0df2b074"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "37f46d1aaa3cec67e974c8ea9fe4975ee9757d40", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37744f8260857005c8409c9e2e633a05c768a7dd/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37744f8260857005c8409c9e2e633a05c768a7dd/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=37744f8260857005c8409c9e2e633a05c768a7dd", "patch": "@@ -2831,12 +2831,6 @@ dr_group_sort_cmp (const void *dra_, const void *drb_)\n   if (dra == drb)\n     return 0;\n \n-  /* DRs in different basic-blocks never belong to the same group.  */\n-  int bb_index1 = gimple_bb (DR_STMT (dra))->index;\n-  int bb_index2 = gimple_bb (DR_STMT (drb))->index;\n-  if (bb_index1 != bb_index2)\n-    return bb_index1 < bb_index2 ? -1 : 1;\n-\n   /* Different group IDs lead never belong to the same group.  */\n   if (dra_pair.second != drb_pair.second)\n     return dra_pair.second < drb_pair.second ? -1 : 1;\n@@ -2963,7 +2957,13 @@ vect_analyze_data_ref_accesses (vec_info *vinfo,\n   datarefs_copy.create (datarefs.length ());\n   for (unsigned i = 0; i < datarefs.length (); i++)\n     {\n-      int group_id = dataref_groups ? (*dataref_groups)[i] : 0;\n+      int group_id;\n+      /* If the caller computed DR grouping use that, otherwise group by\n+\t basic blocks.  */\n+      if (dataref_groups)\n+\tgroup_id = (*dataref_groups)[i];\n+      else\n+\tgroup_id = gimple_bb (DR_STMT (datarefs[i]))->index;\n       datarefs_copy.quick_push (data_ref_pair (datarefs[i], group_id));\n     }\n   datarefs_copy.qsort (dr_group_sort_cmp);\n@@ -2999,13 +2999,8 @@ vect_analyze_data_ref_accesses (vec_info *vinfo,\n \t     matters we can push those to a worklist and re-iterate\n \t     over them.  The we can just skip ahead to the next DR here.  */\n \n-\t  /* DRs in a different BBs should not be put into the same\n+\t  /* DRs in a different DR group should not be put into the same\n \t     interleaving group.  */\n-\t  int bb_index1 = gimple_bb (DR_STMT (dra))->index;\n-\t  int bb_index2 = gimple_bb (DR_STMT (drb))->index;\n-\t  if (bb_index1 != bb_index2)\n-\t    break;\n-\n \t  if (dra_group_id != drb_group_id)\n \t    break;\n "}, {"sha": "d2f6a16f22063f4d8f3ecb00ce0c9f04d5a6b9b0", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37744f8260857005c8409c9e2e633a05c768a7dd/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37744f8260857005c8409c9e2e633a05c768a7dd/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=37744f8260857005c8409c9e2e633a05c768a7dd", "patch": "@@ -5985,6 +5985,8 @@ vect_slp_bbs (const vec<basic_block> &bbs)\n \t\t\t\t\t      &dataref_groups, current_group))\n \t    ++current_group;\n \t}\n+      /* New BBs always start a new DR group.  */\n+      ++current_group;\n     }\n \n   return vect_slp_region (bbs, datarefs, &dataref_groups, insns);"}]}