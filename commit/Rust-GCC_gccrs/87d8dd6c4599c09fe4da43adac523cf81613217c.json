{"sha": "87d8dd6c4599c09fe4da43adac523cf81613217c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkOGRkNmM0NTk5YzA5ZmU0ZGE0M2FkYWM1MjNjZjgxNjEzMjE3Yw==", "commit": {"author": {"name": "Brad Lucier", "email": "lucier@math.purdue.edu", "date": "2015-11-12T22:27:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-12T22:27:47Z"}, "message": "[PATCH] Make disabled-optimization warning more informative; increase default max-gcse-memory\n\n\t* gcc/cprop.c (is_too_expensive): Remove.\n\t(gcse.h): Include.\n\t(one_cprop_pass): Call gcse_or_cprop_is_too_expensive, not\n\tis_too_expensive.\n\t* gcc/gcse.h (gcse_or_cprop_is_too_expensive): Declare.\n\t* gcc/gcse.c (is_too_expensive): Rename to ...\n\t(gcse_or_cprop_is_too_expensive): ... this.\n\tExpand warning to add required size of max-gcse-memory.\n\t(one_pre_gcse_pass): Use it.\n\t(one_code_hoisting_pass): Use it.\n \t* gcc/params.def (max-gcse-memory): Increase from 50MB to 128MB.\n\nFrom-SVN: r230276", "tree": {"sha": "e20097f88c7d396bf5c26e3833485b6bb7294026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e20097f88c7d396bf5c26e3833485b6bb7294026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d8dd6c4599c09fe4da43adac523cf81613217c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d8dd6c4599c09fe4da43adac523cf81613217c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d8dd6c4599c09fe4da43adac523cf81613217c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d8dd6c4599c09fe4da43adac523cf81613217c/comments", "author": {"login": "gambiteer", "id": 1544698, "node_id": "MDQ6VXNlcjE1NDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1544698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gambiteer", "html_url": "https://github.com/gambiteer", "followers_url": "https://api.github.com/users/gambiteer/followers", "following_url": "https://api.github.com/users/gambiteer/following{/other_user}", "gists_url": "https://api.github.com/users/gambiteer/gists{/gist_id}", "starred_url": "https://api.github.com/users/gambiteer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gambiteer/subscriptions", "organizations_url": "https://api.github.com/users/gambiteer/orgs", "repos_url": "https://api.github.com/users/gambiteer/repos", "events_url": "https://api.github.com/users/gambiteer/events{/privacy}", "received_events_url": "https://api.github.com/users/gambiteer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad"}], "stats": {"total": 83, "additions": 30, "deletions": 53}, "files": [{"sha": "1d8da275bcc2ede2fd2b636e5465b4e722eca745", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87d8dd6c4599c09fe4da43adac523cf81613217c", "patch": "@@ -1,3 +1,17 @@\n+2015-11-12  Brad Lucier  <lucier@math.purdue.edu>\n+\n+\t* gcc/cprop.c (is_too_expensive): Remove.\n+\t(gcse.h): Include.\n+\t(one_cprop_pass): Call gcse_or_cprop_is_too_expensive, not\n+\tis_too_expensive.\n+\t* gcc/gcse.h (gcse_or_cprop_is_too_expensive): Declare.\n+\t* gcc/gcse.c (is_too_expensive): Rename to ...\n+\t(gcse_or_cprop_is_too_expensive): ... this.\n+\tExpand warning to add required size of max-gcse-memory.\n+\t(one_pre_gcse_pass): Use it.\n+\t(one_code_hoisting_pass): Use it.\n+ \t* gcc/params.def (max-gcse-memory): Increase from 50MB to 128MB.\n+\n 2015-11-12  James Norris  <jnorris@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "7f1acc09eb022f06126a0f211f2d22745a61bc17", "filename": "gcc/cprop.c", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=87d8dd6c4599c09fe4da43adac523cf81613217c", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n #include \"cfgloop.h\"\n+#include \"gcse.h\"\n \n \f\n /* An obstack for our working variables.  */\n@@ -1724,47 +1725,6 @@ bypass_conditional_jumps (void)\n   return changed;\n }\n \f\n-/* Return true if the graph is too expensive to optimize.  PASS is the\n-   optimization about to be performed.  */\n-\n-static bool\n-is_too_expensive (const char *pass)\n-{\n-  /* Trying to perform global optimizations on flow graphs which have\n-     a high connectivity will take a long time and is unlikely to be\n-     particularly useful.\n-\n-     In normal circumstances a cfg should have about twice as many\n-     edges as blocks.  But we do not want to punish small functions\n-     which have a couple switch statements.  Rather than simply\n-     threshold the number of blocks, uses something with a more\n-     graceful degradation.  */\n-  if (n_edges_for_fn (cfun) > 20000 + n_basic_blocks_for_fn (cfun) * 4)\n-    {\n-      warning (OPT_Wdisabled_optimization,\n-\t       \"%s: %d basic blocks and %d edges/basic block\",\n-\t       pass, n_basic_blocks_for_fn (cfun),\n-\t       n_edges_for_fn (cfun) / n_basic_blocks_for_fn (cfun));\n-\n-      return true;\n-    }\n-\n-  /* If allocating memory for the cprop bitmap would take up too much\n-     storage it's better just to disable the optimization.  */\n-  if ((n_basic_blocks_for_fn (cfun)\n-       * SBITMAP_SET_SIZE (max_reg_num ())\n-       * sizeof (SBITMAP_ELT_TYPE)) > MAX_GCSE_MEMORY)\n-    {\n-      warning (OPT_Wdisabled_optimization,\n-\t       \"%s: %d basic blocks and %d registers\",\n-\t       pass, n_basic_blocks_for_fn (cfun), max_reg_num ());\n-\n-      return true;\n-    }\n-\n-  return false;\n-}\n-\f\n /* Main function for the CPROP pass.  */\n \n static int\n@@ -1775,7 +1735,7 @@ one_cprop_pass (void)\n \n   /* Return if there's nothing to do, or it is too expensive.  */\n   if (n_basic_blocks_for_fn (cfun) <= NUM_FIXED_BLOCKS + 1\n-      || is_too_expensive (_ (\"const/copy propagation disabled\")))\n+      || gcse_or_cprop_is_too_expensive (_ (\"const/copy propagation disabled\")))\n     return 0;\n \n   global_const_prop_count = local_const_prop_count = 0;"}, {"sha": "64f04c7e0454318e126b326c3b3c0e43fe5add74", "filename": "gcc/gcse.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=87d8dd6c4599c09fe4da43adac523cf81613217c", "patch": "@@ -510,7 +510,6 @@ static void trim_ld_motion_mems (void);\n static void update_ld_motion_stores (struct gcse_expr *);\n static void clear_modify_mem_tables (void);\n static void free_modify_mem_tables (void);\n-static bool is_too_expensive (const char *);\n \n #define GNEW(T)\t\t\t((T *) gmalloc (sizeof (T)))\n #define GCNEW(T)\t\t((T *) gcalloc (1, sizeof (T)))\n@@ -2565,7 +2564,7 @@ one_pre_gcse_pass (void)\n \n   /* Return if there's nothing to do, or it is too expensive.  */\n   if (n_basic_blocks_for_fn (cfun) <= NUM_FIXED_BLOCKS + 1\n-      || is_too_expensive (_(\"PRE disabled\")))\n+      || gcse_or_cprop_is_too_expensive (_(\"PRE disabled\")))\n     return 0;\n \n   /* We need alias.  */\n@@ -3493,7 +3492,7 @@ one_code_hoisting_pass (void)\n \n   /* Return if there's nothing to do, or it is too expensive.  */\n   if (n_basic_blocks_for_fn (cfun) <= NUM_FIXED_BLOCKS + 1\n-      || is_too_expensive (_(\"GCSE disabled\")))\n+      || gcse_or_cprop_is_too_expensive (_(\"GCSE disabled\")))\n     return 0;\n \n   doing_code_hoisting_p = true;\n@@ -3957,9 +3956,13 @@ update_ld_motion_stores (struct gcse_expr * expr)\n /* Return true if the graph is too expensive to optimize. PASS is the\n    optimization about to be performed.  */\n \n-static bool\n-is_too_expensive (const char *pass)\n+bool\n+gcse_or_cprop_is_too_expensive (const char *pass)\n {\n+  unsigned int memory_request = (n_basic_blocks_for_fn (cfun)\n+\t\t\t\t * SBITMAP_SET_SIZE (max_reg_num ())\n+\t\t\t\t * sizeof (SBITMAP_ELT_TYPE));\n+  \n   /* Trying to perform global optimizations on flow graphs which have\n      a high connectivity will take a long time and is unlikely to be\n      particularly useful.\n@@ -3981,13 +3984,12 @@ is_too_expensive (const char *pass)\n \n   /* If allocating memory for the dataflow bitmaps would take up too much\n      storage it's better just to disable the optimization.  */\n-  if ((n_basic_blocks_for_fn (cfun)\n-       * SBITMAP_SET_SIZE (max_reg_num ())\n-       * sizeof (SBITMAP_ELT_TYPE)) > MAX_GCSE_MEMORY)\n+  if (memory_request > MAX_GCSE_MEMORY)\n     {\n       warning (OPT_Wdisabled_optimization,\n-\t       \"%s: %d basic blocks and %d registers\",\n-\t       pass, n_basic_blocks_for_fn (cfun), max_reg_num ());\n+\t       \"%s: %d basic blocks and %d registers; increase --param max-gcse-memory above %d\",\n+\t       pass, n_basic_blocks_for_fn (cfun), max_reg_num (),\n+\t       memory_request);\n \n       return true;\n     }"}, {"sha": "752815327cc1868f57276ad54030b2d81dfaf483", "filename": "gcc/gcse.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fgcse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fgcse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.h?ref=87d8dd6c4599c09fe4da43adac523cf81613217c", "patch": "@@ -40,5 +40,6 @@ extern struct target_gcse *this_target_gcse;\n #endif\n \n void gcse_c_finalize (void);\n+extern bool gcse_or_cprop_is_too_expensive (const char *);\n \n #endif"}, {"sha": "41fd8a84da570c6a0ffc7270b82a9221c8b94f5b", "filename": "gcc/params.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d8dd6c4599c09fe4da43adac523cf81613217c/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=87d8dd6c4599c09fe4da43adac523cf81613217c", "patch": "@@ -218,7 +218,7 @@ DEFPARAM(PARAM_STACK_FRAME_GROWTH,\n DEFPARAM(PARAM_MAX_GCSE_MEMORY,\n \t \"max-gcse-memory\",\n \t \"The maximum amount of memory to be allocated by GCSE.\",\n-\t 50 * 1024 * 1024, 0, 0)\n+\t 128 * 1024 * 1024, 0, 0)\n \n /* The GCSE optimization of an expression will avoided if the ratio of\n    insertions to deletions is greater than this value.  */"}]}