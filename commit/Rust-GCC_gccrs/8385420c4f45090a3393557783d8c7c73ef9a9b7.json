{"sha": "8385420c4f45090a3393557783d8c7c73ef9a9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4NTQyMGM0ZjQ1MDkwYTMzOTM1NTc3ODNkOGM3YzczZWY5YTliNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-15T13:24:30Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-15T13:24:30Z"}, "message": "sh.c (sh_rtx_costs): Add handling of MEM, SIGN_EXTEND, ZERO_EXTEND and PARALLEL cases.\n\n\t* config/sh/sh.c (sh_rtx_costs): Add handling of MEM, SIGN_EXTEND,\n\tZERO_EXTEND and PARALLEL cases.\n\t(sh_address_cost): Correct rtx parsing and tweak cost estimations.\n\nFrom-SVN: r191342", "tree": {"sha": "2dedca1f1de4cef97fbcc5696371bb47ed5260e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dedca1f1de4cef97fbcc5696371bb47ed5260e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8385420c4f45090a3393557783d8c7c73ef9a9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8385420c4f45090a3393557783d8c7c73ef9a9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8385420c4f45090a3393557783d8c7c73ef9a9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8385420c4f45090a3393557783d8c7c73ef9a9b7/comments", "author": null, "committer": null, "parents": [{"sha": "29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29454ff5257a3a074e868790dc4f6bcdfb1b0b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29454ff5257a3a074e868790dc4f6bcdfb1b0b03"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "ae8bf3443d2f1d2fedefa5adaa6c74674e7491ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8385420c4f45090a3393557783d8c7c73ef9a9b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8385420c4f45090a3393557783d8c7c73ef9a9b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8385420c4f45090a3393557783d8c7c73ef9a9b7", "patch": "@@ -1,3 +1,9 @@\n+2012-09-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_rtx_costs): Add handling of MEM, SIGN_EXTEND,\n+\tZERO_EXTEND and PARALLEL cases.\n+\t(sh_address_cost): Correct rtx parsing and tweak cost estimations.\n+\n 2012-09-14  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/tm.texi.in (Stack Arguments): Update obsolete references"}, {"sha": "b54bf2fc1efaa9e7d201373aa57294c2edc568c3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 96, "deletions": 19, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8385420c4f45090a3393557783d8c7c73ef9a9b7/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8385420c4f45090a3393557783d8c7c73ef9a9b7/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8385420c4f45090a3393557783d8c7c73ef9a9b7", "patch": "@@ -3196,6 +3196,78 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n         }\n       return false;\n \n+    /* The cost of a mem access is mainly the cost of the address mode.  */\n+    case MEM:\n+      *total = sh_address_cost (XEXP (x, 0), GET_MODE (x), MEM_ADDR_SPACE (x),\n+\t\t\t\ttrue);\n+      return true;\n+\n+    /* The cost of a sign or zero extend depends on whether the source is a\n+       reg or a mem.  In case of a mem take the address into acount.  */\n+    case SIGN_EXTEND:\n+      if (REG_P (XEXP (x, 0)))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      if (MEM_P (XEXP (x, 0)))\n+\t{\n+\t  *total = sh_address_cost (XEXP (XEXP (x, 0), 0),\n+\t\t\t\t    GET_MODE (XEXP (x, 0)),\n+\t\t\t\t    MEM_ADDR_SPACE (XEXP (x, 0)), true);\n+\t  return true;\n+\t}\n+      return false;\n+\n+    case ZERO_EXTEND:\n+      if (REG_P (XEXP (x, 0)))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      else if (TARGET_SH2A && MEM_P (XEXP (x, 0))\n+\t       && (GET_MODE (XEXP (x, 0)) == QImode\n+\t\t   || GET_MODE (XEXP (x, 0)) == HImode))\n+\t{\n+\t  /* Handle SH2A's movu.b and movu.w insn.  */\n+\t  *total = sh_address_cost (XEXP (XEXP (x, 0), 0), \n+\t\t\t\t    GET_MODE (XEXP (x, 0)), \n+\t\t\t\t    MEM_ADDR_SPACE (XEXP (x, 0)), true);\n+\t  return true;\n+\t}\n+      return false;\n+\n+    /* mems for SFmode and DFmode can be inside a parallel due to\n+       the way the fpscr is handled.  */\n+    case PARALLEL:\n+      for (int i = 0; i < XVECLEN (x, 0); i++)\n+\t{\n+\t  rtx xx = XVECEXP (x, 0, i);\n+\t  if (GET_CODE (xx) == SET && MEM_P (XEXP (xx, 0)))\n+\t    {\n+\t      *total = sh_address_cost (XEXP (XEXP (xx, 0), 0), \n+\t\t\t\t\tGET_MODE (XEXP (xx, 0)),\n+\t\t\t\t\tMEM_ADDR_SPACE (XEXP (xx, 0)), true);\n+\t      return true;\n+\t    }\n+\t  if (GET_CODE (xx) == SET && MEM_P (XEXP (xx, 1)))\n+\t    {\n+\t      *total = sh_address_cost (XEXP (XEXP (xx, 1), 0),\n+\t\t\t\t\tGET_MODE (XEXP (xx, 1)),\n+\t\t\t\t\tMEM_ADDR_SPACE (XEXP (xx, 1)), true);\n+\t      return true;\n+\t    }\n+\t}\n+\n+      if (sh_1el_vec (x, VOIDmode))\n+\t*total = outer_code != SET;\n+      else if (sh_rep_vec (x, VOIDmode))\n+\t*total = ((GET_MODE_UNIT_SIZE (GET_MODE (x)) + 3) / 4\n+\t\t  + (outer_code != SET));\n+      else\n+\t*total = COSTS_N_INSNS (3) + (outer_code != SET);\n+      return true;\n+\n     case CONST_INT:\n       if (TARGET_SHMEDIA)\n         {\n@@ -3271,7 +3343,10 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       else\n         *total = 10;\n       return true;\n+\n     case CONST_VECTOR:\n+    /* FIXME: This looks broken.  Only the last statement has any effect.\n+       Probably this could be folded with the PARALLEL case?  */\n       if (x == CONST0_RTX (GET_MODE (x)))\n \t*total = 0;\n       else if (sh_1el_vec (x, VOIDmode))\n@@ -3339,15 +3414,6 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n       *total = COSTS_N_INSNS (20);\n       return true;\n \n-    case PARALLEL:\n-      if (sh_1el_vec (x, VOIDmode))\n-\t*total = outer_code != SET;\n-      if (sh_rep_vec (x, VOIDmode))\n-\t*total = ((GET_MODE_UNIT_SIZE (GET_MODE (x)) + 3) / 4\n-\t\t  + (outer_code != SET));\n-      *total = COSTS_N_INSNS (3) + (outer_code != SET);\n-      return true;\n-\n     case FLOAT:\n     case FIX:\n       *total = 100;\n@@ -3430,36 +3496,47 @@ disp_addr_displacement (rtx x)\n /* Compute the cost of an address.  */\n \n static int\n-sh_address_cost (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED,\n+sh_address_cost (rtx x, enum machine_mode mode,\n \t\t addr_space_t as ATTRIBUTE_UNUSED, bool speed ATTRIBUTE_UNUSED)\n {\n+  /* Simple reg, post-inc, pre-dec addressing.  */\n+  if (REG_P (x) || GET_CODE (x) == POST_INC || GET_CODE (x) == PRE_DEC)\n+    return 1;\n+\n   /* 'reg + disp' addressing.  */\n-  if (satisfies_constraint_Sdd (x))\n+  if (GET_CODE (x) == PLUS\n+      && REG_P (XEXP (x, 0)) && CONST_INT_P (XEXP (x, 1)))\n     {\n-      const HOST_WIDE_INT offset = disp_addr_displacement (x);\n-      const enum machine_mode mode = GET_MODE (x);\n+      const HOST_WIDE_INT offset = INTVAL (XEXP (x, 1));\n+\n+      if (offset == 0)\n+\treturn 1;\n \n-      /* The displacement would fit into a 2 byte move insn.  */\n+      /* The displacement would fit into a 2 byte move insn.\n+\t HImode and QImode loads/stores with displacement put pressure on\n+\t R0 which will most likely require another reg copy.  Thus account\n+\t a higher cost for that.  */\n       if (offset > 0 && offset <= max_mov_insn_displacement (mode, false))\n-\treturn 0;\n+\treturn (mode == HImode || mode == QImode) ? 2 : 1;\n \n       /* The displacement would fit into a 4 byte move insn (SH2A).  */\n       if (TARGET_SH2A\n \t  && offset > 0 && offset <= max_mov_insn_displacement (mode, true))\n-\treturn 1;\n+\treturn 2;\n \n       /* The displacement is probably out of range and will require extra\n \t calculations.  */\n-      return 2;\n+      return 3;\n     }\n \n   /* 'reg + reg' addressing.  Account a slightly higher cost because of \n      increased pressure on R0.  */\n   if (GET_CODE (x) == PLUS && ! CONSTANT_P (XEXP (x, 1))\n       && ! TARGET_SHMEDIA)\n-    return 1;\n+    return 3;\n \n-  return 0;\n+  /* Not sure what it is - probably expensive.  */\n+  return 10;\n }\n \n /* Code to expand a shift.  */"}]}