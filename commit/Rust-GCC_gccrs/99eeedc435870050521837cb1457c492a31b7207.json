{"sha": "99eeedc435870050521837cb1457c492a31b7207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllZWVkYzQzNTg3MDA1MDUyMTgzN2NiMTQ1N2M0OTJhMzFiNzIwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-12-09T08:33:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-12-09T08:33:45Z"}, "message": "re PR target/41082 (FAIL: gfortran.fortran-torture/execute/where_2.f90 execution,  -O3)\n\n\tPR target/41082\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Use stvx\n\tinstead of stve*x.\n\t(altivec_expand_stv_builtin): For op0 use mode of operand 1 instead\n\tof operand 0.\n\t* config/rs6000/altivec.md (VI_scalar): New mode attr.\n\t(altivec_stve<VI_char>x, *altivec_stvesfx): Use scalar instead of\n\tvector mode for operand 0, put operand 1 into UNSPEC.\n\nFrom-SVN: r167629", "tree": {"sha": "c8b673ae7be4fab47133a4fe89be503ba3af41a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b673ae7be4fab47133a4fe89be503ba3af41a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99eeedc435870050521837cb1457c492a31b7207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99eeedc435870050521837cb1457c492a31b7207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99eeedc435870050521837cb1457c492a31b7207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99eeedc435870050521837cb1457c492a31b7207/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74e3207697e4e9b5824024825cd295ca0de7f7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e3207697e4e9b5824024825cd295ca0de7f7d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e3207697e4e9b5824024825cd295ca0de7f7d1"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "03b385b0b6b867e80a8f5f0f2f300fd5a7e501d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99eeedc435870050521837cb1457c492a31b7207/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99eeedc435870050521837cb1457c492a31b7207/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99eeedc435870050521837cb1457c492a31b7207", "patch": "@@ -1,3 +1,14 @@\n+2010-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/41082\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Use stvx\n+\tinstead of stve*x.\n+\t(altivec_expand_stv_builtin): For op0 use mode of operand 1 instead\n+\tof operand 0.\n+\t* config/rs6000/altivec.md (VI_scalar): New mode attr.\n+\t(altivec_stve<VI_char>x, *altivec_stvesfx): Use scalar instead of\n+\tvector mode for operand 0, put operand 1 into UNSPEC.\n+\n 2010-12-09  Yao Qi  <yao@codesourcery.com>\n \n \t* config/arm/arm.c (arm_preferred_rename_class): Implement targethook"}, {"sha": "3ed84f251956896e9357a3c67040d75b615c84a8", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99eeedc435870050521837cb1457c492a31b7207/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99eeedc435870050521837cb1457c492a31b7207/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=99eeedc435870050521837cb1457c492a31b7207", "patch": "@@ -169,6 +169,7 @@\n (define_mode_iterator VM2 [V4SI V8HI V16QI V4SF V2DF V2DI])\n \n (define_mode_attr VI_char [(V4SI \"w\") (V8HI \"h\") (V16QI \"b\")])\n+(define_mode_attr VI_scalar [(V4SI \"SI\") (V8HI \"HI\") (V16QI \"QI\")])\n \n ;; Vector move instructions.\n (define_insn \"*altivec_mov<mode>\"\n@@ -1775,19 +1776,15 @@\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stve<VI_char>x\"\n-  [(parallel\n-    [(set (match_operand:VI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:VI 1 \"register_operand\" \"v\"))\n-     (unspec [(const_int 0)] UNSPEC_STVE)])]\n+  [(set (match_operand:<VI_scalar> 0 \"memory_operand\" \"=Z\")\n+\t(unspec:<VI_scalar> [(match_operand:VI 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n   \"TARGET_ALTIVEC\"\n   \"stve<VI_char>x %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"*altivec_stvesfx\"\n-  [(parallel\n-    [(set (match_operand:V4SF 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SF 1 \"register_operand\" \"v\"))\n-     (unspec [(const_int 0)] UNSPEC_STVE)])]\n+  [(set (match_operand:SF 0 \"memory_operand\" \"=Z\")\n+\t(unspec:SF [(match_operand:V4SF 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n   \"TARGET_ALTIVEC\"\n   \"stvewx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])"}, {"sha": "df7a428b7be7ad15d0735143ada8059d1e28f061", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99eeedc435870050521837cb1457c492a31b7207/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99eeedc435870050521837cb1457c492a31b7207/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=99eeedc435870050521837cb1457c492a31b7207", "patch": "@@ -5436,7 +5436,7 @@ rs6000_expand_vector_extract (rtx target, rtx vec, int elt)\n {\n   enum machine_mode mode = GET_MODE (vec);\n   enum machine_mode inner_mode = GET_MODE_INNER (mode);\n-  rtx mem, x;\n+  rtx mem;\n \n   if (VECTOR_MEM_VSX_P (mode) && (mode == V2DFmode || mode == V2DImode))\n     {\n@@ -5449,17 +5449,11 @@ rs6000_expand_vector_extract (rtx target, rtx vec, int elt)\n   /* Allocate mode-sized buffer.  */\n   mem = assign_stack_temp (mode, GET_MODE_SIZE (mode), 0);\n \n+  emit_move_insn (mem, vec);\n+\n   /* Add offset to field within buffer matching vector element.  */\n-  mem = adjust_address_nv (mem, mode, elt * GET_MODE_SIZE (inner_mode));\n+  mem = adjust_address_nv (mem, inner_mode, elt * GET_MODE_SIZE (inner_mode));\n \n-  /* Store single field into mode-sized buffer.  */\n-  x = gen_rtx_UNSPEC (VOIDmode,\n-\t\t      gen_rtvec (1, const0_rtx), UNSPEC_STVE);\n-  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t       gen_rtvec (2,\n-\t\t\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t       mem, vec),\n-\t\t\t\t\t  x)));\n   emit_move_insn (target, adjust_address_nv (mem, inner_mode, 0));\n }\n \n@@ -11114,6 +11108,7 @@ altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n   rtx op2 = expand_normal (arg2);\n   rtx pat, addr;\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode smode = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = Pmode;\n   enum machine_mode mode2 = Pmode;\n \n@@ -11123,8 +11118,8 @@ altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n       || arg2 == error_mark_node)\n     return const0_rtx;\n \n-  if (! (*insn_data[icode].operand[1].predicate) (op0, tmode))\n-    op0 = copy_to_mode_reg (tmode, op0);\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, smode))\n+    op0 = copy_to_mode_reg (smode, op0);\n \n   op2 = copy_to_mode_reg (mode2, op2);\n "}]}