{"sha": "345ae17774bc0f8b527fa87c28ad7c6116b845bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1YWUxNzc3NGJjMGY4YjUyN2ZhODdjMjhhZDdjNjExNmI4NDViZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-01-09T15:14:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-01-09T15:14:19Z"}, "message": "gimple.c (is_gimple_non_addressable): Remove.\n\n        * gimple.c (is_gimple_non_addressable): Remove.\n        * gimple.h: Remove is_gimple_non_addressable.\n        * gimplify.c (gimplify_modify_expr_rhs): Use is_gimple_reg instead of\n        is_gimple_non_addressable.\n        * trans-mem.c (expand_assign_tm): Same.\n\nFrom-SVN: r183015", "tree": {"sha": "f1670e405d630798297d4ba21644fe965549d789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1670e405d630798297d4ba21644fe965549d789"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/345ae17774bc0f8b527fa87c28ad7c6116b845bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345ae17774bc0f8b527fa87c28ad7c6116b845bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345ae17774bc0f8b527fa87c28ad7c6116b845bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345ae17774bc0f8b527fa87c28ad7c6116b845bd/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c5cbc315fad590eb2a89d46c8397fcb9b9cc2ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5cbc315fad590eb2a89d46c8397fcb9b9cc2ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5cbc315fad590eb2a89d46c8397fcb9b9cc2ba"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "202042abf5a24359faed2ee1650a72d262a777c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=345ae17774bc0f8b527fa87c28ad7c6116b845bd", "patch": "@@ -1,3 +1,11 @@\n+2012-01-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple.c (is_gimple_non_addressable): Remove.\n+\t* gimple.h: Remove is_gimple_non_addressable.\n+\t* gimplify.c (gimplify_modify_expr_rhs): Use is_gimple_reg instead of\n+\tis_gimple_non_addressable.\n+\t* trans-mem.c (expand_assign_tm): Same.\n+\n 2012-01-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51775"}, {"sha": "9a6ed671f8400f3f96c6e5a2d1258ea5cb3d1ff1", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=345ae17774bc0f8b527fa87c28ad7c6116b845bd", "patch": "@@ -2963,17 +2963,6 @@ is_gimple_reg (tree t)\n }\n \n \n-/* Return true if T is a GIMPLE variable whose address is not needed.  */\n-\n-bool\n-is_gimple_non_addressable (tree t)\n-{\n-  if (TREE_CODE (t) == SSA_NAME)\n-    t = SSA_NAME_VAR (t);\n-\n-  return (is_gimple_variable (t) && ! needs_to_live_in_memory (t));\n-}\n-\n /* Return true if T is a GIMPLE rvalue, i.e. an identifier or a constant.  */\n \n bool"}, {"sha": "5283ca2e2d6b809bc85479284ac15bc41d0922e3", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=345ae17774bc0f8b527fa87c28ad7c6116b845bd", "patch": "@@ -1006,9 +1006,6 @@ extern bool is_gimple_mem_rhs (tree);\n /* Returns true iff T is a valid if-statement condition.  */\n extern bool is_gimple_condexpr (tree);\n \n-/* Returns true iff T is a variable that does not need to live in memory.  */\n-extern bool is_gimple_non_addressable (tree t);\n-\n /* Returns true iff T is a valid call address expression.  */\n extern bool is_gimple_call_addr (tree);\n "}, {"sha": "b3b047a75618bca18859d3128ba6befc6359011f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=345ae17774bc0f8b527fa87c28ad7c6116b845bd", "patch": "@@ -4411,7 +4411,9 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t\t/* It's OK to use the target directly if it's being\n \t\t   initialized. */\n \t\tuse_target = true;\n-\t      else if (!is_gimple_non_addressable (*to_p))\n+\t      else if (TREE_CODE (*to_p) != SSA_NAME\n+\t\t      && (!is_gimple_variable (*to_p)\n+\t\t\t  || needs_to_live_in_memory (*to_p)))\n \t\t/* Don't use the original target if it's already addressable;\n \t\t   if its address escapes, and the called function uses the\n \t\t   NRV optimization, a conforming program could see *to_p"}, {"sha": "bd4ce3933e63a3f458c1b7d3590a788f87c59610", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345ae17774bc0f8b527fa87c28ad7c6116b845bd/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=345ae17774bc0f8b527fa87c28ad7c6116b845bd", "patch": "@@ -2184,7 +2184,7 @@ expand_assign_tm (struct tm_region *region, gimple_stmt_iterator *gsi)\n       /* ??? Figure out if there's any possible overlap between the LHS\n \t and the RHS and if not, use MEMCPY.  */\n \n-      if (load_p && is_gimple_non_addressable (lhs))\n+      if (load_p && is_gimple_reg (lhs))\n \t{\n \t  tmp = create_tmp_var (TREE_TYPE (lhs), NULL);\n \t  lhs_addr = build_fold_addr_expr (tmp);"}]}