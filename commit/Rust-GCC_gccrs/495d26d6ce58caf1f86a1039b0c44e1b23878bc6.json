{"sha": "495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1ZDI2ZDZjZTU4Y2FmMWY4NmExMDM5YjBjNDRlMWIyMzg3OGJjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-08-30T23:43:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-08-30T23:43:53Z"}, "message": "cp-tree.h (LOCAL_CLASS_P): Use decl_function_context.\n\n        * cp-tree.h (LOCAL_CLASS_P): Use decl_function_context.\n\n        * tree.c (bot_manip): Check TREE_CONSTANT rather than\n        !TREE_SIDE_EFFECTS.  Call break_out_target_exprs and\n        build_target_expr_with_type for the non-AGGR_INIT_EXPR case.\n\n        * decl.c (start_function): Always call make_function_rtl.\n\nFrom-SVN: r36080", "tree": {"sha": "76823eddd472172198bd2797b111c717108319a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76823eddd472172198bd2797b111c717108319a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/comments", "author": null, "committer": null, "parents": [{"sha": "bf6a611300aeb0f06626e926d8dbc503a4726d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6a611300aeb0f06626e926d8dbc503a4726d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6a611300aeb0f06626e926d8dbc503a4726d0e"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "033185e40219898e6fc33c2994c341a6a30b2797", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "patch": "@@ -1,6 +1,16 @@\n+2000-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (LOCAL_CLASS_P): Use decl_function_context.\n+\n+\t* tree.c (bot_manip): Check TREE_CONSTANT rather than\n+\t!TREE_SIDE_EFFECTS.  Call break_out_target_exprs and\n+\tbuild_target_expr_with_type for the non-AGGR_INIT_EXPR case.\n+\n+\t* decl.c (start_function): Always call make_function_rtl.\n+\n 2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n-\t* cp/semantics.c (prune_unused_decls): New function.\n+\t* semantics.c (prune_unused_decls): New function.\n \t(finish_stmt_tree): Call it via walk_tree.\n \n 2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>"}, {"sha": "4fee6fffc6361d87812b0ad36c2118da753df256", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "patch": "@@ -2226,8 +2226,7 @@ struct lang_decl\n \n /* 1 iff NODE is function-local, but for types.  */\n #define LOCAL_CLASS_P(NODE)\t\t\t\t\\\n-  (TYPE_CONTEXT (NODE)\t\t\t\t\t\\\n-   && TREE_CODE (TYPE_CONTEXT (NODE)) == FUNCTION_DECL)\n+  (decl_function_context (TYPE_MAIN_DECL (NODE)) != NULL_TREE)\n \n /* For a NAMESPACE_DECL: the list of using namespace directives\n    The PURPOSE is the used namespace, the value is the namespace"}, {"sha": "b5627f1df2c9030d02ed83bcd7bd307778e42144", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "patch": "@@ -13838,10 +13838,11 @@ start_function (declspecs, declarator, attrs, flags)\n     cplus_decl_attributes (decl1, NULL_TREE, attrs);\n \n   if (!building_stmt_tree ())\n-    {\n-      GNU_xref_function (decl1, current_function_parms);\n-      make_function_rtl (decl1);\n-    }\n+    GNU_xref_function (decl1, current_function_parms);\n+\n+  /* We need to do this even if we aren't expanding yet so that\n+     assemble_external works.  */\n+  make_function_rtl (decl1);\n \n   /* Promote the value to int before returning it.  */\n   if (C_PROMOTING_INTEGER_TYPE_P (restype))"}, {"sha": "009cb0e388e3eee31c66f8942f91772b45e4e681", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495d26d6ce58caf1f86a1039b0c44e1b23878bc6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=495d26d6ce58caf1f86a1039b0c44e1b23878bc6", "patch": "@@ -1649,13 +1649,15 @@ bot_manip (tp, walk_subtrees, data)\n   splay_tree target_remap = ((splay_tree) data);\n   tree t = *tp;\n \n-  if (TREE_CODE (t) != TREE_LIST && ! TREE_SIDE_EFFECTS (t))\n+  if (TREE_CONSTANT (t))\n     {\n-      /* There can't be any TARGET_EXPRs below this point.  */\n+      /* There can't be any TARGET_EXPRs or their slot variables below\n+         this point.  We used to check !TREE_SIDE_EFFECTS, but then we\n+         failed to copy an ADDR_EXPR of the slot VAR_DECL.  */\n       *walk_subtrees = 0;\n       return NULL_TREE;\n     }\n-  else if (TREE_CODE (t) == TARGET_EXPR)\n+  if (TREE_CODE (t) == TARGET_EXPR)\n     {\n       tree u;\n \n@@ -1667,13 +1669,8 @@ bot_manip (tp, walk_subtrees, data)\n \t}\n       else \n \t{\n-\t  tree var;\n-\n-\t  u = copy_node (t);\n-\t  var = build (VAR_DECL, TREE_TYPE (t));\n-\t  DECL_CONTEXT (var) = current_function_decl;\n-\t  layout_decl (var, 0);\n-\t  TREE_OPERAND (u, 0) = var;\n+\t  u = build_target_expr_with_type\n+\t    (break_out_target_exprs (TREE_OPERAND (t, 1)), TREE_TYPE (t));\n \t}\n \n       /* Map the old variable to the new one.  */"}]}