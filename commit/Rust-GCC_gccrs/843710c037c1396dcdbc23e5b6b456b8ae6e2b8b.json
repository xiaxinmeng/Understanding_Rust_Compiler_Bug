{"sha": "843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzNzEwYzAzN2MxMzk2ZGNkYmMyM2U1YjZiNDU2YjhhZTZlMmI4Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-04T14:11:35Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-04T14:11:35Z"}, "message": "c++: Member initializer list diagnostic locations [PR94024]\n\nThis patch preserves the source locations of each node in a member\ninitializer list so that during processing of the list we can set\ninput_location appropriately for generally more accurate diagnostic\nlocations.  Since TREE_LIST nodes are tcc_exceptional, they can't have\nsource locations, so we instead store the location in a dummy\ntcc_expression node within the TREE_TYPE of the list node.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94024\n\t* init.c (sort_mem_initializers): Preserve TREE_TYPE of the\n\tmember initializer list node.\n\t(emit_mem_initializers): Set input_location when performing each\n\tmember initialization.\n\t* parser.c (cp_parser_mem_initializer): Attach the source\n\tlocation of this initializer to a dummy EMPTY_CLASS_EXPR\n\twithin the TREE_TYPE of the list node.\n\t* pt.c (tsubst_initializer_list): Preserve TREE_TYPE of the\n\tmember initializer list node.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94024\n\t* g++.dg/diagnostic/mem-init1.C: New test.", "tree": {"sha": "75dae029db26c025f3c25904c70b1cec9057bd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75dae029db26c025f3c25904c70b1cec9057bd9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/comments", "author": null, "committer": null, "parents": [{"sha": "1af5cdd77985daf76130f527deac425c43df9f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5cdd77985daf76130f527deac425c43df9f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af5cdd77985daf76130f527deac425c43df9f49"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "3f089404cf261b567cd61e67b95c52b44292dbb5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "patch": "@@ -1151,6 +1151,8 @@ sort_mem_initializers (tree t, tree mem_inits)\n \n       /* Record the initialization.  */\n       TREE_VALUE (subobject_init) = TREE_VALUE (init);\n+      /* Carry over the dummy TREE_TYPE node containing the source location.  */\n+      TREE_TYPE (subobject_init) = TREE_TYPE (init);\n       next_subobject = subobject_init;\n     }\n \n@@ -1367,6 +1369,10 @@ emit_mem_initializers (tree mem_inits)\n   /* Initialize the data members.  */\n   while (mem_inits)\n     {\n+      /* If this initializer was explicitly provided, then the dummy TREE_TYPE\n+\t node contains the source location.  */\n+      iloc_sentinel ils (EXPR_LOCATION (TREE_TYPE (mem_inits)));\n+\n       perform_member_init (TREE_PURPOSE (mem_inits),\n \t\t\t   TREE_VALUE (mem_inits));\n       mem_inits = TREE_CHAIN (mem_inits);"}, {"sha": "765714597b64381bc6754eb4da73e61aca0865f4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "patch": "@@ -15411,7 +15411,20 @@ cp_parser_mem_initializer (cp_parser* parser)\n \n   in_base_initializer = 0;\n \n-  return member ? build_tree_list (member, expression_list) : error_mark_node;\n+  if (!member)\n+    return error_mark_node;\n+  tree node = build_tree_list (member, expression_list);\n+\n+  /* We can't attach the source location of this initializer directly to\n+     the list node, so we instead attach it to a dummy EMPTY_CLASS_EXPR\n+     within the TREE_TYPE of the list node.  */\n+  location_t loc\n+    = make_location (token->location, token->location, parser->lexer);\n+  tree dummy = build0 (EMPTY_CLASS_EXPR, NULL_TREE);\n+  SET_EXPR_LOCATION (dummy, loc);\n+  TREE_TYPE (node) = dummy;\n+\n+  return node;\n }\n \n /* Parse a mem-initializer-id."}, {"sha": "cff2db4a07eeb61febeefa83a2c46eda4009db6e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "patch": "@@ -26018,6 +26018,9 @@ tsubst_initializer_list (tree t, tree argvec)\n           if (decl)\n             {\n               init = build_tree_list (decl, init);\n+\t      /* Carry over the dummy TREE_TYPE node containing the source\n+\t\t location.  */\n+\t      TREE_TYPE (init) = TREE_TYPE (t);\n               TREE_CHAIN (init) = inits;\n               inits = init;\n             }"}, {"sha": "b749c72cd8baea0d3de7f783c92df7649b283567", "filename": "gcc/testsuite/g++.dg/diagnostic/mem-init1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmem-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843710c037c1396dcdbc23e5b6b456b8ae6e2b8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmem-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmem-init1.C?ref=843710c037c1396dcdbc23e5b6b456b8ae6e2b8b", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/94024\n+// { dg-do compile }\n+\n+struct A {\n+    A()\n+    : a()       // { dg-error \"reference type\" }\n+    , b(1)      // { dg-error \"incompatible\" }\n+    , c(0)      // { dg-bogus \"\" }\n+    {}\n+\n+    int &a;\n+    int b[1];\n+    char c;\n+};\n+\n+template<typename T, typename U>\n+struct B {\n+    B()\n+    : a()       // { dg-error \"reference type\" }\n+    , b(1)      // { dg-error \"incompatible\" }\n+    , c(0)      // { dg-bogus \"\" }\n+    {}\n+\n+    T a;\n+    U b;\n+    char c;\n+};\n+\n+B<int&, int[1]> b;"}]}