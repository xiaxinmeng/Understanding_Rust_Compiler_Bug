{"sha": "77f67db2a4709388b905397421bd3a851fbbf884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmNjdkYjJhNDcwOTM4OGI5MDUzOTc0MjFiZDNhODUxZmJiZjg4NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-14T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-14T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "b199105e2f43a8dc382368ab5714157b988e1283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b199105e2f43a8dc382368ab5714157b988e1283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f67db2a4709388b905397421bd3a851fbbf884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f67db2a4709388b905397421bd3a851fbbf884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f67db2a4709388b905397421bd3a851fbbf884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f67db2a4709388b905397421bd3a851fbbf884/comments", "author": null, "committer": null, "parents": [{"sha": "4d039cb9a1d0ffc6910fe09b726c3561b64527dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d039cb9a1d0ffc6910fe09b726c3561b64527dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d039cb9a1d0ffc6910fe09b726c3561b64527dc"}], "stats": {"total": 1088, "additions": 1087, "deletions": 1}, "files": [{"sha": "4438967c5937a6ca99cb812c4faac24c71f209c3", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,7 @@\n+2020-11-13  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* MAINTAINERS (Write After Approval): add myself\n+\n 2020-11-09  Pat Bernardi  <bernardi@adacore.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "89317d42d8215ada5e674bff734c83b1a242f6ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 447, "deletions": 0, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,450 @@\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (ao_ref_base_alias_ptr_type): Remove accidental\n+\tcommit.\n+\t(ao_ref_alias_ptr_type): Remove accidental commit.\n+\n+2020-11-13  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* omp-oacc-kernels-decompose.cc (maybe_build_inner_data_region):\n+\tUse langhook instead of accessing language-specific decl\n+\tinformation.\n+\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-oacc-kernels-decompose.cc: New.\n+\t* Makefile.in (OBJS): Add it.\n+\t* passes.def: Instantiate it.\n+\t* tree-pass.h (make_pass_omp_oacc_kernels_decompose): Declare.\n+\t* flag-types.h (enum openacc_kernels): Add.\n+\t* doc/invoke.texi (-fopenacc-kernels): Document.\n+\t* gimple.h (enum gf_mask): Add\n+\t'GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED',\n+\t'GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE',\n+\t'GF_OMP_TARGET_KIND_OACC_DATA_KERNELS'.\n+\t(is_gimple_omp_oacc, is_gimple_omp_offloaded): Handle these.\n+\t* gimple-pretty-print.c (dump_gimple_omp_target): Likewise.\n+\t* omp-expand.c (expand_omp_target, build_omp_regions_1)\n+\t(omp_make_gimple_edges): Likewise.\n+\t* omp-low.c (scan_sharing_clauses, scan_omp_for)\n+\t(check_omp_nesting_restrictions, lower_oacc_reductions)\n+\t(lower_oacc_head_mark, lower_omp_target): Likewise.\n+\t* omp-offload.c (execute_oacc_device_lower): Likewise.\n+\n+2020-11-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (scan_sharing_clauses, scan_omp_for)\n+\t(lower_oacc_reductions, lower_omp_target): More explicit checking\n+\tof which OMP constructs we're expecting.\n+\n+2020-11-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-expand.c (expand_omp_target): Attach an attribute to all\n+\toutlined OpenACC compute regions.\n+\t* omp-offload.c (execute_oacc_device_lower): Adjust.\n+\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (modref_summaries::insert,\n+\tmodref_summaries_lto::insert): Remove summary if ipa-modref is disabled.\n+\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h (attr_fnspec::arg_readonly_p): Accept '1'...'9'.\n+\n+2020-11-13  Peter Jones  <pjones@redhat.com>\n+\n+\t* doc/extend.texi: Clarify the documentation for the ms_abi\n+\tfunction attribute.\n+\n+2020-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.h (gimple_range_handler): Cast to gimple stmt\n+\tkinds before asking for code and type.\n+\t* gimple.h (gimple_expr_code): Call gassign and gcond routines\n+\tto get their expr_code.\n+\n+2020-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (gen_enumeration_type_die): Call\n+\tequate_decl_number_to_die for enumerators.\n+\t(gen_member_die): Don't move enumerators to their\n+\tenclosing class.\n+\t(dwarf2out_imported_module_or_decl_1): Allow importing\n+\tindividual enumerators.\n+\t(force_decl_die): Handle CONST_DECL.\n+\n+2020-11-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* cfgexpand.c (expand_asm_stmt): Output asm goto with outputs too.\n+\tPlace insns after asm goto on edges.\n+\t* doc/extend.texi: Reflect the changes in asm goto documentation.\n+\t* gimple.c (gimple_build_asm_1): Remove an assert checking output\n+\tabsence for asm goto.\n+\t* gimple.h (gimple_asm_label_op, gimple_asm_set_label_op): Take\n+\tpossible asm goto outputs into account.\n+\t* ira.c (ira): Remove critical edges for potential asm goto output\n+\treloads.\n+\t(ira_nullify_asm_goto): New function.\n+\t* ira.h (ira_nullify_asm_goto): New prototype.\n+\t* lra-assigns.c (lra_split_hard_reg_for): Use ira_nullify_asm_goto.\n+\tCheck that splitting is done inside a basic block.\n+\t* lra-constraints.c (curr_insn_transform): Permit output reloads\n+\tfor any jump insn.\n+\t* lra-spills.c (lra_final_code_change): Remove USEs added in ira\n+\tfor asm gotos.\n+\t* lra.c (lra_process_new_insns): Place output reload insns after\n+\tjumps in the beginning of destination BBs.\n+\t* reload.c (find_reloads): Report error for asm gotos with\n+\toutputs.  Modify them to keep CFG consistency to avoid crashes.\n+\t* tree-into-ssa.c (rewrite_stmt): Don't put debug stmt after asm\n+\tgoto.\n+\n+2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-low.c (scan_sharing_clauses): For now remove for reduction\n+\tclauses with inscan or task modifiers decl from allocate_map.\n+\t(lower_private_allocate): Handle TYPE_P (new_var).\n+\t(lower_rec_input_clauses): Handle allocate clause for C/C++ array\n+\treductions.\n+\n+2020-11-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/97816\n+\t* ipa-cp.c (value_topo_info<valtype>::propagate_effects): Use\n+\tsafe_add instead of a simple addition.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (TARGET_INSN_COST): Define.\n+\t(msp430_insn_cost): New function.\n+\t* config/msp430/msp430.h (BRANCH_COST): Define.\n+\t(LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430-protos.h (msp430x_extendhisi): Return int\n+\tinstead of char *.\n+\t(msp430_output_asm_shift_insns): Likewise.\n+\tAdd new return_length argument.\n+\t(msp430x_insn_required): Add prototype.\n+\t* config/msp430/msp430.c (msp430_output_asm_shift_insns): Return the\n+\ttotal length, in bytes, of the emitted instructions.\n+\t(msp430x_insn_required): New function.\n+\t(msp430x_extendhisi): Return the total length, in bytes, of the\n+\temitted instructions.\n+\t* config/msp430/msp430.h (ADJUST_INSN_LENGTH): Define.\n+\t* config/msp430/msp430.md: New define_attr \"type\".\n+\tNew define_attr \"extension\".\n+\tNew define_attr \"length_multiplier\".\n+\tNew define_attr \"extra_length\".\n+\tRewrite define_attr \"length\".\n+\tSet type, extension, length, length_multiplier or extra_length insn\n+\tattributes on all insns, as appropriate.\n+\t(andneghi3): Rewrite using constraints instead of C code to decide\n+\toutput insns.\n+\t* config/msp430/predicates.md (msp430_cheap_operand): New predicate.\n+\t(msp430_high_memory_operand): New predicate.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (use_helper_for_const_shift): Add forward\n+\tdeclaration.\n+\tRemove unused argument.\n+\t(struct msp430_multlib_costs): New struct.\n+\t(msp430_is_mem_indirect): New function.\n+\t(msp430_costs): Likewise.\n+\t(msp430_shift_costs): Likewise.\n+\t(msp430_muldiv_costs): Likewise.\n+\t(msp430_get_inner_dest_code): Likewise.\n+\t(msp430_single_op_cost): Likewise.\n+\t(msp430_rtx_costs): Rewrite from scratch.\n+\t(msp430_expand_shift): Adjust use_helper_for_const_shift call.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (struct single_op_cost): New struct.\n+\t(struct double_op_cost): Likewise.\n+\t(TARGET_REGISTER_MOVE_COST): Don't define but add comment.\n+\t(TARGET_MEMORY_MOVE_COST): Define to...\n+\t(msp430_memory_move_cost): New function.\n+\t(BRANCH_COST): Don't define but add comment.\n+\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c: Include tree-ssa-alias-compare.h.\n+\t(find_checker::func_checker): Initialize m_tbaa.\n+\t(func_checker::hash_operand): Use hash_ao_ref for memory accesses.\n+\t(func_checker::compare_operand): Use compare_ao_refs for memory\n+\taccesses.\n+\t(func_checker::cmopare_gimple_assign): Do not check LHS types\n+\tof memory stores.\n+\t* ipa-icf-gimple.h (func_checker): Derive from ao_compare;\n+\tadd m_tbaa.\n+\t* ipa-icf.c: Include tree-ssa-alias-compare.h.\n+\t(sem_function::equals_private): Update call of\n+\tfunc_checker::func_checker.\n+\t* ipa-utils.h (lto_streaming_expected_p): New inline\n+\tpredicate.\n+\t* tree-ssa-alias-compare.h: New file.\n+\t* tree-ssa-alias.c: Include tree-ssa-alias-compare.h\n+\tand bultins.h\n+\t(view_converted_memref_p): New function.\n+\t(types_equal_for_same_type_for_tbaa_p): New function.\n+\t(ao_ref_alias_ptr_type, ao_ref_base_alias_ptr_type): New functions.\n+\t(ao_compare::compare_ao_refs): New member function.\n+\t(ao_compare::hash_ao_ref): New function\n+\t* tree-ssa-alias.h (ao_ref_base_alias_ptr_type,\n+\tao_ref_alias_ptr_type): Declare.\n+\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf-gimple.c: Include gimple-walk.h.\n+\t(func_checker::compare_ssa_name): Update call of compare_operand.\n+\t(func_checker::hash_operand): Fix comment and add variant taking\n+\toperand_access_type parameter.\n+\t(func_checker::compare_operand): Add operand_access_type parameter.\n+\t(func_checker::compare_asm_inputs_outputs): Add\n+\toperand_access_type_map parameter; update use of\n+\tfunc_checker::compare_operand.\n+\t(func_checker::compare_gimple_call): Update use of\n+\tfunc_checker::compare_operand.\n+\t(func_checker::compare_gimple_assign): Likewise.\n+\t(func_checker::compare_gimple_cond): Likewise.\n+\t(func_checker::compare_gimple_switch): Likewise.\n+\t(func_checker::compare_gimple_return): Likewise.\n+\t(func_checker::compare_gimple_goto): Likewise.\n+\t(func_checker::compare_gimple_asm): Likewise.\n+\t(visit_load_store): New static functio.\n+\t(func_checker::classify_operands): New member function.\n+\t(func_checker::get_operand_access_type): New member function.\n+\t* ipa-icf-gimple.h (func_checker::operand_access_type): New enum\n+\t(func_checker::operand_access_type_map): New typedef.\n+\t(func_checker::compare_operand): Update prototype.\n+\t(func_checker::compare_asm_inputs_outputs): Likewise.\n+\t(func_checker::cleassify_operands): Declare.\n+\t(func_checker::get_operand_access_type): Declare.\n+\t(func_checker::hash_operand): New variant with operand_access_type.\n+\t* ipa-icf.c (sem_function::hash_stmt): Update uses of hash_operand.\n+\t(sem_function::compare_phi_node): Update use of compare_operand.\n+\n+2020-11-13  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/aarch-common.c (aarch_accumulator_forwarding): Use\n+\tRTL predicates where possible.\n+\t* config/arm/arm.c (legitimate_pic_operand_p)\n+\t(legitimize_pic_address, arm_is_segment_info_known)\n+\t(can_avoid_literal_pool_for_label_p)\n+\t(thumb1_legitimate_address_p, arm_legitimize_address)\n+\t(arm_tls_referenced_p, thumb_legitimate_constant_p)\n+\t(REG_OR_SUBREG_REG, thumb1_rtx_costs, thumb1_size_rtx_costs)\n+\t(arm_adjust_cost, arm_coproc_mem_operand_wb)\n+\t(neon_vector_mem_operand, neon_struct_mem_operand)\n+\t(symbol_mentioned_p, label_mentioned_p, )\n+\t(load_multiple_sequence, store_multiple_sequence)\n+\t(arm_select_cc_mode, arm_reload_in_hi, arm_reload_out_hi)\n+\t(mem_ok_for_ldrd_strd, arm_emit_call_insn, output_move_neon)\n+\t(arm_attr_length_move_neon, arm_assemble_integer)\n+\t(arm_emit_coreregs_64bit_shift, arm_valid_symbolic_address_p)\n+\t(extract_base_offset_in_addr, fusion_load_store): Likewise.\n+\n+2020-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc: (gimple_ranger::range_of_range_op): Check for\n+\tADDR_EXPR and call range_of_address.\n+\t(gimple_ranger::range_of_address): Rename from\n+\trange_of_non_trivial_assignment and match vrp_stmt_computes_nonzero.\n+\t* gimple-range.h: (range_of_address): Renamed.\n+\t* range-op.cc: (pointer_table): Add INTEGER_CST handler.\n+\n+2020-11-13  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/94406\n+\t* tree-ssa-loop-im.c (tree_ssa_lim): Renamed to\n+\tloop_invariant_motion_in_fun, added a parameter to control store\n+\tmotion.\n+\t(pass_lim::execute): Adjust call to tree_ssa_lim, now\n+\tloop_invariant_motion_in_fun.\n+\t* tree-ssa-loop-manip.h (loop_invariant_motion_in_fun): Declare.\n+\t* gimple-loop-interchange.cc (pass_linterchange::execute): Call\n+\tloop_invariant_motion_in_fun if any interchange has been done.\n+\n+2020-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Always hash the\n+\tnumber of predecessors.  Hash the block number also for\n+\tloop header PHIs.\n+\t(expressions_equal_p): Short-cut SSA name compares, remove\n+\ttest for NULL operands.\n+\t(vn_phi_eq): Cache number of predecessors, change inlined\n+\ttest from expressions_equal_p.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* doc/extend.texi: Don't try to line-wrap an @r command.\n+\n+2020-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97812\n+\t* tree-vrp.c (register_edge_assert_for_2): Extend the range\n+\taccording to its sign before seeing whether it fits.\n+\n+2020-11-13  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/aarch64.c (tls_symbolic_operand_type)\n+\t(aarch64_load_symref_appropriately, aarch64_mov128_immediate)\n+\t(aarch64_expand_mov_immediate)\n+\t(aarch64_maybe_expand_sve_subreg_move)\n+\t(aarch64_tls_referenced_p, aarch64_cannot_force_const_mem)\n+\t(aarch64_base_register_rtx_p, aarch64_classify_index)\n+\t(aarch64_classify_address, aarch64_symbolic_address_p)\n+\t(aarch64_reinterpret_float_as_int, aarch64_float_const_rtx_p)\n+\t(aarch64_can_const_movi_rtx_p, aarch64_select_cc_mode)\n+\t(aarch64_print_operand, aarch64_label_mentioned_p)\n+\t(aarch64_secondary_reload, aarch64_preferred_reload_class)\n+\t(aarch64_address_cost, aarch64_tls_symbol_p)\n+\t(aarch64_classify_symbol, aarch64_legitimate_pic_operand_p)\n+\t(aarch64_legitimate_constant_p)\n+\t(aarch64_sve_float_arith_immediate_p)\n+\t(aarch64_sve_float_mul_immediate_p, aarch64_mov_operand_p)\n+\t(fusion_load_store): Use RTL operands where possible.\n+\n+2020-11-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_expand_setmem): New\n+\tdeclaration.\n+\t* config/aarch64/aarch64.c (aarch64_gen_store_pair): Add case for\n+\tE_V16QImode.\n+\t(aarch64_set_one_block_and_progress_pointer): New helper for\n+\taarch64_expand_setmem.\n+\t(aarch64_expand_setmem): Define the expansion for memset.\n+\t* config/aarch64/aarch64.h (CLEAR_RATIO): Tweak to favor\n+\taarch64_expand_setmem when allowed and profitable.\n+\t(SET_RATIO): Likewise.\n+\t* config/aarch64/aarch64.md: Define pattern for setmemdi.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/90707\n+\t* doc/extend.texi: Document the objc_nullability attribute.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* doc/extend.texi: Document the objc_root_class attribute.\n+\t* doc/invoke.texi: Document -Wobjc-root-class.\n+\n+2020-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (gimple_assign_rhs_to_tree): Use\n+\tgimple_assign_rhs_class.\n+\t(expand_gimple_stmt_1): Likewise.\n+\t* gimplify-me.c (gimple_regimplify_operands): Use\n+\tgimple_assign_single_p.\n+\t* ipa-icf-gimple.c (func_checker::compare_gimple_assign):\n+\tRemove redundant compare.\n+\t(func_checker::compare_gimple_cond): Use gimple_cond_code.\n+\t* tree-ssa-tail-merge.c (gimple_equal_p): Likewise.\n+\t* predict.c (predict_loops): Use gimple_assign_rhs_code.\n+\n+2020-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (class vrp_folder): Make visit_stmt, visit_phi,\n+\tand m_vr_values private.\n+\t(vrp_folder::vrp_evaluate_conditional): Remove.\n+\t(vrp_folder::vrp_simplify_stmt_using_ranges): Remove.\n+\t(vrp_folder::fold_predicate_in): Inline\n+\tvrp_evaluate_conditional and vrp_simplify_stmt_using_ranges.\n+\t(vrp_folder::fold_stmt): Same.\n+\n+2020-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (class vrp_prop): Rename vr_values to m_vr_values.\n+\t(vrp_prop::vrp_prop): New.\n+\t(vrp_prop::initialize): Rename vr_values to m_vr_values.\n+\t(vrp_prop::visit_stmt): Same.\n+\t(vrp_prop::visit_phi): Same.\n+\t(vrp_prop::finalize): Same.\n+\t(execute_vrp): Instantiate vrp_vr_values and pass it to folder\n+\tand propagator.\n+\n+2020-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (class vrp_prop): Move entire class...\n+\t(class vrp_folder): ...before here.\n+\n+2020-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (identify_jump_threads): Refactor to..\n+\t(vrp_jump_threader::vrp_jump_threader): ...here\n+\t(vrp_jump_threader::~vrp_jump_threader): ...and here.\n+\t(vrp_jump_threader::after_dom_children): Rename vr_values to\n+\tm_vr_values.\n+\t(execute_vrp): Use vrp_jump_threader.\n+\n+2020-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (struct assert_locus): Move.\n+\t(class vrp_insert): Rename to vrp_asserts.\n+\t(vrp_insert::build_assert_expr_for): Move to vrp_asserts.\n+\t(fp_predicate): Same.\n+\t(vrp_insert::dump): Same.\n+\t(vrp_insert::register_new_assert_for): Same.\n+\t(extract_code_and_val_from_cond_with_ops): Move.\n+\t(vrp_insert::finish_register_edge_assert_for): Move to vrp_asserts.\n+\t(maybe_set_nonzero_bits): Move.\n+\t(vrp_insert::find_conditional_asserts): Move to vrp_asserts.\n+\t(stmt_interesting_for_vrp): Move.\n+\t(struct case_info): Move.\n+\t(compare_case_labels): Move.\n+\t(lhs_of_dominating_assert): Move.\n+\t(find_case_label_index): Move.\n+\t(find_case_label_range): Move.\n+\t(class vrp_asserts): New.\n+\t(vrp_asserts::build_assert_expr_for): Rename from vrp_insert.\n+\t(vrp_asserts::dump): Same.\n+\t(vrp_asserts::register_new_assert_for): Same.\n+\t(vrp_asserts::finish_register_edge_assert_for): Same.\n+\t(vrp_asserts::find_conditional_asserts): Same.\n+\t(vrp_asserts::compare_case_labels): Same.\n+\t(vrp_asserts::find_switch_asserts): Same.\n+\t(vrp_asserts::find_assert_locations_in_bb): Same.\n+\t(vrp_asserts::find_assert_locations): Same.\n+\t(vrp_asserts::process_assert_insertions_for): Same.\n+\t(vrp_asserts::compare_assert_loc): Same.\n+\t(vrp_asserts::process_assert_insertions): Same.\n+\t(vrp_asserts::insert_range_assertions): Same.\n+\t(vrp_asserts::all_imm_uses_in_stmt_or_feed_cond): Same.\n+\t(vrp_asserts::remove_range_assertions): Same.\n+\t(class vrp_prop): Move.\n+\t(all_imm_uses_in_stmt_or_feed_cond): Move.\n+\t(vrp_prop::vrp_initialize): Move.\n+\t(class vrp_folder): Move.\n+\t(vrp_folder::fold_predicate_in): Move.\n+\t(vrp_folder::fold_stmt): Move.\n+\t(vrp_prop::initialize): Move.\n+\t(vrp_prop::visit_stmt): Move.\n+\t(enum ssa_prop_result): Move.\n+\t(vrp_prop::visit_phi): Move.\n+\t(vrp_prop::finalize): Move.\n+\t(class vrp_dom_walker): Rename to...\n+\t(class vrp_jump_threader): ...this.\n+\t(vrp_jump_threader::before_dom_children): Rename from\n+\tvrp_dom_walker.\n+\t(simplify_stmt_for_jump_threading): Rename to...\n+\t(vrp_jump_threader::simplify_stmt): ...here.\n+\t(vrp_jump_threader::after_dom_children): Same.\n+\t(identify_jump_threads): Move.\n+\t(vrp_prop::vrp_finalize): Move array bounds setup code to...\n+\t(execute_vrp): ...here.\n+\n+2020-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.h (gimple_range_handler): Use gimple_assign and\n+\tgimple_cond routines to get type and code.\n+\t* range-op.cc (range_op_handler): Check for integral types.\n+\n 2020-11-12  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* configure: Regenerated."}, {"sha": "30ba5a060da8baf3506229e8e123a8c6d3c9e83d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1 +1 @@\n-20201113\n+20201114"}, {"sha": "fa5cdce6f0f37d10b01d111402a9c67c7557d9e9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,55 @@\n+2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/63287\n+\t* c-cppbuiltin.c: Include configargs.h.\n+\t(c_cpp_builtins): For C++11 and later if THREAD_MODEL_SPEC is not\n+\tdefined, predefine __STDCPP_THREADS__ to 1 unless thread_model is\n+\t\"single\".\n+\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c.opt (fopenacc-kernels): Add.\n+\n+2020-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_using_enum.\n+\n+2020-11-13  Piotr H. Dabrowski  <phd@phd.re>\n+\n+\tPR c++/91318\n+\t* c-cppbuiltin.c: c_cpp_builtins_optimize_pragma(): use cpp_define_unused()\n+\n+2020-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-attribs.c (build_attr_access_from_parms): Format properly.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/90707\n+\t* c-common.c (c_common_reswords): null_unspecified, nullable,\n+\tnonnull, null_resettable: New keywords.\n+\t* c-common.h (enum rid): RID_NULL_UNSPECIFIED, RID_NULLABLE,\n+\tRID_NONNULL, RID_NULL_RESETTABLE: New.\n+\t(OBJC_IS_PATTR_KEYWORD): Include nullability keywords in the\n+\tranges accepted for property attributes.\n+\t* c-attribs.c (handle_objc_nullability_attribute): New.\n+\t* c-objc.h (enum objc_property_attribute_group): Add\n+\tOBJC_PROPATTR_GROUP_NULLABLE.\n+\t(enum objc_property_attribute_kind):Add\n+\tOBJC_PROPERTY_ATTR_NULL_UNSPECIFIED, OBJC_PROPERTY_ATTR_NULLABLE,\n+\tOBJC_PROPERTY_ATTR_NONNULL, OBJC_PROPERTY_ATTR_NULL_RESETTABLE.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* c-attribs.c (handle_objc_root_class_attribute): New\n+\t* c-objc.h (objc_start_class_interface): Add a location\n+\tvalue for the position of the class name.\n+\t* c.opt: Add Wobjc-root-class.\n+\t* stub-objc.c (objc_start_class_interface): Add a location\n+\tvalue for the position of the class name.\n+\n 2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-lex.c (c_common_has_attribute): Take argument std_syntax."}, {"sha": "289a426a7ba203ff0ec7bd8e7b59d93f1ad10552", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,21 @@\n+2020-11-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* c-parser.c (c_parser_asm_statement): Parse outputs for asm\n+\tgoto too.\n+\t* c-typeck.c (build_asm_expr): Remove an assert checking output\n+\tabsence for asm goto.\n+\n+2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Don't clear\n+\tOMP_CLAUSE_REDUCTION_INSCAN unless reduction_seen == -2.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* c-parser.c (c_parser_objc_class_definition): Pass the\n+\tlocation of the class name to the interface declaration.\n+\n 2020-11-10  Strager Neds  <strager.nds@gmail.com>\n \n \t* c-decl.c (merge_decls): Use new overload of"}, {"sha": "de24c7dc7aa8142726f98a025528ce0b768d0c31", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,34 @@\n+2020-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (USING_DECL_UNRELATED_P): New.\n+\t(CONST_DECL_USING_P): New.\n+\t* class.c (handle_using_decl): If USING_DECL_UNRELATED_P,\n+\tclone the CONST_DECL.\n+\t* name-lookup.c (supplement_binding_1): A clone hides its\n+\tusing-declaration.\n+\t(lookup_using_decl): Rewrite to separate lookup and validation.\n+\t(do_class_using_decl): Adjust.\n+\t(finish_nonmember_using_decl): Adjust.\n+\t* parser.c (make_location): Add cp_token overload.\n+\t(finish_using_decl): Split out from...\n+\t(cp_parser_using_declaration): ...here.  Don't look through enums.\n+\t(cp_parser_using_enum): New.\n+\t(cp_parser_block_declaration): Call it.\n+\t(cp_parser_member_declaration): Call it.\n+\t* semantics.c (finish_id_expression_1): Handle enumerator\n+\tused from class scope.\n+\n+2020-11-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* parser.c (cp_parser_asm_definition): Parse outputs for asm\n+\tgoto too.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* parser.c (cp_parser_objc_class_interface): Pass the\n+\tlocation of the class name to the interface declaration.\n+\n 2020-11-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* semantics.c (finish_compound_literal): Don't wrap the original"}, {"sha": "29e3b44fd088a8b4881dc9a11aecb6d967bb780d", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,18 @@\n+2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (expand_intrinsic_copysign): Explicitly determine\n+\twhich built-in copysign function to call.\n+\n+2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97644\n+\t* dmd/MERGE: Merge upstream dmd 95044d8e4.\n+\t* d-target.cc (TargetCPP::thunkMangle): New function.\n+\t* decl.cc (finish_thunk): Don't force expand thunks for external\n+\tfunctions.\n+\t(make_thunk): Emit thunks only if the function has a definition.\n+\tGenerate correct mangling for thunks to C++ classes.\n+\n 2020-11-10  Strager Neds  <strager.nds@gmail.com>\n \n \t* decl.cc (finish_thunk): Use new overload of"}, {"sha": "a44c019dfa1d3b6c12ca7821ec8dd87b6e892727", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,8 @@\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lang.opt (fopenacc-kernels): Add.\n+\n 2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* f95-lang.c (ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST):"}, {"sha": "1290c320f1c5006f662bd0dece5169a40b87f86f", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,21 @@\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/90707\n+\t* objc-act.c (objc_prop_attr_kind_for_rid): Handle nullability.\n+\t(objc_add_property_declaration): Handle nullability attributes.\n+\tCheck that these are applicable to the property type.\n+\t* objc-act.h (enum objc_property_nullability): New.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* objc-act.c (objc_start_class_interface): Accept the location\n+\tof the class name, use it in existing diagnostic.\n+\t(start_class): Accept obj_root_class type attributes.  Warn when\n+\tthe interface for an implementation does not contain a super\n+\tclass (unless the diagnostic is suppressed by the the command\n+\tline flag or the objc_root_class type attribute).\n+\n 2020-11-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc-act.c (objc_prop_attr_kind_for_rid): Handle class"}, {"sha": "a748ff6186c69999a25ae3c12e1d2c6b2ac818fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,373 @@\n+2020-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/binary-constants-2.c, gcc.dg/binary-constants-3.c,\n+\tgcc.dg/system-binary-constants-1.c: Update expected diagnostics.\n+\t* gcc.dg/c11-binary-constants-1.c,\n+\tgcc.dg/c11-binary-constants-2.c, gcc.dg/c2x-binary-constants-1.c,\n+\tgcc.dg/c2x-binary-constants-2.c, gcc.dg/c2x-binary-constants-3.c:\n+\tNew tests.\n+\n+2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/guality/redeclaration1.C (p): New variable.\n+\t(S::f): Increment what p points to before storing S::i into l.  Adjust\n+\tgdb-test line numbers.\n+\t(main): Initialize p to address of an automatic variable.\n+\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/kernels-decompose-1.c: New.\n+\t* c-c++-common/goacc/kernels-decompose-2.c: New.\n+\t* c-c++-common/goacc/kernels-decompose-ice-1.c: New.\n+\t* c-c++-common/goacc/kernels-decompose-ice-2.c: New.\n+\t* gfortran.dg/goacc/kernels-decompose-1.f95: New.\n+\t* gfortran.dg/goacc/kernels-decompose-2.f95: New.\n+\t* c-c++-common/goacc/if-clause-2.c: Adjust.\n+\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n+\n+2020-11-13  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/classify-parallel.c: Adjust.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* c-c++-common/goacc/classify-serial.c: New.\n+\t* gfortran.dg/goacc/classify-serial.f95: Likewise.\n+\n+2020-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Check it.\n+\n+2020-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/inh-ctor28.C: Adjust expected diagnostic.\n+\t* g++.dg/cpp0x/inh-ctor33.C: Likewise.\n+\t* g++.dg/cpp0x/using-enum-1.C: Add comment.\n+\t* g++.dg/cpp0x/using-enum-2.C: Allowed in C++20.\n+\t* g++.dg/cpp0x/using-enum-3.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction69.C: Adjust diagnostic.\n+\t* g++.dg/inherit/using5.C: Likewise.\n+\t* g++.dg/cpp2a/using-enum-1.C: New test.\n+\t* g++.dg/cpp2a/using-enum-2.C: New test.\n+\t* g++.dg/cpp2a/using-enum-3.C: New test.\n+\t* g++.dg/cpp2a/using-enum-4.C: New test.\n+\t* g++.dg/cpp2a/using-enum-5.C: New test.\n+\t* g++.dg/cpp2a/using-enum-6.C: New test.\n+\t* g++.dg/debug/dwarf2/using-enum.C: New test.\n+\n+2020-11-13  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* c-c++-common/asmgoto-2.c: Permit output in asm goto.\n+\t* gcc.c-torture/compile/asmgoto-2.c: New.\n+\t* gcc.c-torture/compile/asmgoto-3.c: New.\n+\t* gcc.c-torture/compile/asmgoto-4.c: New.\n+\t* gcc.c-torture/compile/asmgoto-5.c: New.\n+\n+2020-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp20.c\n+\t* gcc.dg/tree-ssa/evrp21.c\n+\t* gcc.dg/tree-ssa/evrp22.c\n+\n+2020-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/97788\n+\t* g++.dg/ubsan/pr61272.C: Move expected error location.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.c-torture/execute/index-1.c: Skip for the default MSP430 430X ISA.\n+\n+2020-11-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/rtx-cost-O3-default.c: New test.\n+\t* gcc.target/msp430/rtx-cost-O3-f5series.c: New test.\n+\t* gcc.target/msp430/rtx-cost-Os-default.c: New test.\n+\t* gcc.target/msp430/rtx-cost-Os-f5series.c: New test.\n+\n+2020-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-c++-common/Wstringop-overflow-2.c: Disable ICF.\n+\t* g++.dg/warn/Warray-bounds-8.C: Disable ICF.\n+\n+2020-11-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr78655.c: New.\n+\n+2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/pr92216.d: Update scan-assember.\n+\n+2020-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97812\n+\t* gcc.dg/torture/pr97812.c: New testcase.\n+\n+2020-11-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* g++.dg/tree-ssa/pr90883.C: Remove xfail for aarch64.\n+\t* gcc.dg/tree-prof/stringop-2.c: Add xfail for aarch64.\n+\t* gcc.target/aarch64/memset-corner-cases.c: New test.\n+\t* gcc.target/aarch64/memset-q-reg.c: New test.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/90707\n+\t* obj-c++.dg/property/at-property-4.mm: Add basic nullability\n+\ttests.\n+\t* objc.dg/property/at-property-4.m: Likewise.\n+\t* obj-c++.dg/attributes/nullability-00.mm: New test.\n+\t* obj-c++.dg/property/nullability-00.mm: New test.\n+\t* objc.dg/attributes/nullability-00.m: New test.\n+\t* objc.dg/property/nullability-00.m: New test.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* obj-c++.dg/attributes/class-attribute-1.mm:\n+\tAdd Wno-objc-root-class.\n+\t* obj-c++.dg/attributes/class-attribute-2.mm: Likewise.\n+\t* obj-c++.dg/attributes/class-attribute-3.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-deprecated-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-deprecated-2.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-deprecated-3.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-format-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-nonnull-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-noreturn-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-sentinel-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/nsobject-01.mm: Likewise.\n+\t* obj-c++.dg/attributes/parameter-attribute-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/parameter-attribute-2.mm: Likewise.\n+\t* obj-c++.dg/attributes/proto-attribute-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/proto-attribute-3.mm: Likewise.\n+\t* obj-c++.dg/attributes/proto-attribute-4.mm: Likewise.\n+\t* obj-c++.dg/attributes/unused-parameter-1.mm: Likewise.\n+\t* obj-c++.dg/bad-receiver-type.mm: Likewise.\n+\t* obj-c++.dg/bitfield-3.mm: Likewise.\n+\t* obj-c++.dg/bitfield-5.mm: Likewise.\n+\t* obj-c++.dg/class-extension-1.mm: Likewise.\n+\t* obj-c++.dg/class-extension-2.mm: Likewise.\n+\t* obj-c++.dg/class-extension-3.mm: Likewise.\n+\t* obj-c++.dg/class-extension-4.mm: Likewise.\n+\t* obj-c++.dg/class-protocol-1.mm: Likewise.\n+\t* obj-c++.dg/comp-types-1.mm: Likewise.\n+\t* obj-c++.dg/comp-types-10.mm: Likewise.\n+\t* obj-c++.dg/comp-types-2.mm: Likewise.\n+\t* obj-c++.dg/comp-types-3.mm: Likewise.\n+\t* obj-c++.dg/comp-types-5.mm: Likewise.\n+\t* obj-c++.dg/comp-types-6.mm: Likewise.\n+\t* obj-c++.dg/comp-types-7.mm: Likewise.\n+\t* obj-c++.dg/comp-types-8.mm: Likewise.\n+\t* obj-c++.dg/demangle-2.mm: Likewise.\n+\t* obj-c++.dg/demangle-3.mm: Likewise.\n+\t* obj-c++.dg/duplicate-class-1.mm: Likewise.\n+\t* obj-c++.dg/encode-1-next.mm: Likewise.\n+\t* obj-c++.dg/encode-1.mm: Likewise.\n+\t* obj-c++.dg/enhanced-proto-2.mm: Likewise.\n+\t* obj-c++.dg/exceptions-1.mm: Likewise.\n+\t* obj-c++.dg/exceptions-3.mm: Likewise.\n+\t* obj-c++.dg/exceptions-4.mm: Likewise.\n+\t* obj-c++.dg/exceptions-5.mm: Likewise.\n+\t* obj-c++.dg/extern-c-1.mm: Likewise.\n+\t* obj-c++.dg/fobjc-std-1.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-class-meta.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-class.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-ivar.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-method.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-objc.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-objc_msg_lookup.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-object.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-property.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-protocol.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-resolve-method.mm: Likewise.\n+\t* obj-c++.dg/gnu-api-2-sel.mm: Likewise.\n+\t* obj-c++.dg/invalid-method-2.mm: Likewise.\n+\t* obj-c++.dg/ivar-invalid-type-1.mm: Likewise.\n+\t* obj-c++.dg/ivar-problem-1.mm: Likewise.\n+\t* obj-c++.dg/lto/lto.exp: Likewise.\n+\t* obj-c++.dg/lto/trivial-1_0.mm: Likewise.\n+\t* obj-c++.dg/method-1.mm: Likewise.\n+\t* obj-c++.dg/method-12.mm: Likewise.\n+\t* obj-c++.dg/method-18.mm: Likewise.\n+\t* obj-c++.dg/method-19.mm: Likewise.\n+\t* obj-c++.dg/method-20.mm: Likewise.\n+\t* obj-c++.dg/method-3.mm: Likewise.\n+\t* obj-c++.dg/method-4.mm: Likewise.\n+\t* obj-c++.dg/method-5.mm: Likewise.\n+\t* obj-c++.dg/method-8.mm: Likewise.\n+\t* obj-c++.dg/method-9.mm: Likewise.\n+\t* obj-c++.dg/method-namespace-1.mm: Likewise.\n+\t* obj-c++.dg/plugin/diagnostic-test-expressions-1.mm:\n+\tLikewise.\n+\t* obj-c++.dg/pr23709.mm: Likewise.\n+\t* obj-c++.dg/pragma-2.mm: Likewise.\n+\t* obj-c++.dg/private-1.mm: Likewise.\n+\t* obj-c++.dg/private-2.mm: Likewise.\n+\t* obj-c++.dg/property/property.exp: Likewise.\n+\t* obj-c++.dg/proto-lossage-1.mm: Likewise.\n+\t* obj-c++.dg/proto-lossage-5.mm: Likewise.\n+\t* obj-c++.dg/proto-qual-1.mm: Likewise.\n+\t* obj-c++.dg/protocol-inheritance-1.mm: Likewise.\n+\t* obj-c++.dg/protocol-inheritance-2.mm: Likewise.\n+\t* obj-c++.dg/protocol-optional-1.mm: Likewise.\n+\t* obj-c++.dg/selector-1.mm: Likewise.\n+\t* obj-c++.dg/selector-2.mm: Likewise.\n+\t* obj-c++.dg/selector-3.mm: Likewise.\n+\t* obj-c++.dg/selector-4.mm: Likewise.\n+\t* obj-c++.dg/strings/strings.exp: Likewise.\n+\t* obj-c++.dg/stubify-1.mm: Likewise.\n+\t* obj-c++.dg/stubify-2.mm: Likewise.\n+\t* obj-c++.dg/super-dealloc-1.mm: Likewise.\n+\t* obj-c++.dg/super-dealloc-2.mm: Likewise.\n+\t* obj-c++.dg/sync-3.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-2.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-4.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-7.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-9.mm: Likewise.\n+\t* obj-c++.dg/template-4.mm: Likewise.\n+\t* obj-c++.dg/template-7.mm: Likewise.\n+\t* obj-c++.dg/template-8.mm: Likewise.\n+\t* obj-c++.dg/threedotthree-abi-1.mm: Likewise.\n+\t* obj-c++.dg/torture/dg-torture.exp: Likewise.\n+\t* obj-c++.dg/torture/strings/strings.exp: Likewise.\n+\t* obj-c++.dg/try-catch-12.mm: Likewise.\n+\t* obj-c++.dg/try-catch-13.mm: Likewise.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* objc.dg/anon-1.m: Add Wno-objc-root-class.\n+\t* objc.dg/attributes/class-attribute-1.m: Likewise.\n+\t* objc.dg/attributes/class-attribute-2.m: Likewise.\n+\t* objc.dg/attributes/class-attribute-3.m: Likewise.\n+\t* objc.dg/attributes/method-deprecated-1.m: Likewise.\n+\t* objc.dg/attributes/method-deprecated-2.m: Likewise.\n+\t* objc.dg/attributes/method-deprecated-3.m: Likewise.\n+\t* objc.dg/attributes/method-format-1.m: Likewise.\n+\t* objc.dg/attributes/method-nonnull-1.m: Likewise.\n+\t* objc.dg/attributes/method-noreturn-1.m: Likewise.\n+\t* objc.dg/attributes/method-sentinel-1.m: Likewise.\n+\t* objc.dg/attributes/nsobject-01.m: Likewise.\n+\t* objc.dg/attributes/objc-exception-1.m: Likewise.\n+\t* objc.dg/attributes/parameter-attribute-1.m: Likewise.\n+\t* objc.dg/attributes/parameter-attribute-2.m: Likewise.\n+\t* objc.dg/attributes/proto-attribute-1.m: Likewise.\n+\t* objc.dg/attributes/proto-attribute-2.m: Likewise.\n+\t* objc.dg/attributes/proto-attribute-3.m: Likewise.\n+\t* objc.dg/attributes/proto-attribute-4.m: Likewise.\n+\t* objc.dg/bitfield-2.m: Likewise.\n+\t* objc.dg/break-in-ifstmt.m: Likewise.\n+\t* objc.dg/class-1.m: Likewise.\n+\t* objc.dg/class-extension-1.m: Likewise.\n+\t* objc.dg/class-extension-2.m: Likewise.\n+\t* objc.dg/class-extension-3.m: Likewise.\n+\t* objc.dg/class-extension-4.m: Likewise.\n+\t* objc.dg/class-protocol-1.m: Likewise.\n+\t* objc.dg/comp-types-7.m: Likewise.\n+\t* objc.dg/demangle-1.m: Likewise.\n+\t* objc.dg/duplicate-class-1.m: Likewise.\n+\t* objc.dg/encode-6-next.m: Likewise.\n+\t* objc.dg/encode-6.m: Likewise.\n+\t* objc.dg/enhanced-proto-2.m: Likewise.\n+\t* objc.dg/exceptions-1.m: Likewise.\n+\t* objc.dg/exceptions-3.m: Likewise.\n+\t* objc.dg/exceptions-4.m: Likewise.\n+\t* objc.dg/exceptions-5.m: Likewise.\n+\t* objc.dg/fobjc-std-1.m: Likewise.\n+\t* objc.dg/foreach-2.m: Likewise.\n+\t* objc.dg/foreach-4.m: Likewise.\n+\t* objc.dg/foreach-5.m: Likewise.\n+\t* objc.dg/fsyntax-only.m: Likewise.\n+\t* objc.dg/gnu-api-2-class-meta.m: Likewise.\n+\t* objc.dg/gnu-api-2-class.m: Likewise.\n+\t* objc.dg/gnu-api-2-ivar.m: Likewise.\n+\t* objc.dg/gnu-api-2-method.m: Likewise.\n+\t* objc.dg/gnu-api-2-objc.m: Likewise.\n+\t* objc.dg/gnu-api-2-objc_msg_lookup.m: Likewise.\n+\t* objc.dg/gnu-api-2-object.m: Likewise.\n+\t* objc.dg/gnu-api-2-property.m: Likewise.\n+\t* objc.dg/gnu-api-2-protocol.m: Likewise.\n+\t* objc.dg/gnu-api-2-resolve-method.m: Likewise.\n+\t* objc.dg/gnu-api-2-sel.m: Likewise.\n+\t* objc.dg/incomplete-type-1.m: Likewise.\n+\t* objc.dg/instancetype-0.m: Likewise.\n+\t* objc.dg/invalid-method-2.m: Likewise.\n+\t* objc.dg/ivar-invalid-type-1.m: Likewise.\n+\t* objc.dg/ivar-problem-1.m: Likewise.\n+\t* objc.dg/ivar-scope-1.m: Likewise.\n+\t* objc.dg/ivar-scope-2.m: Likewise.\n+\t* objc.dg/ivar-scope-4.m: Likewise.\n+\t* objc.dg/ivar-visibility-1.m: Likewise.\n+\t* objc.dg/ivar-visibility-2.m: Likewise.\n+\t* objc.dg/ivar-visibility-3.m: Likewise.\n+\t* objc.dg/ivar-visibility-4.m: Likewise.\n+\t* objc.dg/local-decl-1.m: Likewise.\n+\t* objc.dg/lto/lto.exp: Likewise.\n+\t* objc.dg/lto/trivial-1_0.m: Likewise.\n+\t* objc.dg/method-1.m: Likewise.\n+\t* objc.dg/method-12.m: Likewise.\n+\t* objc.dg/method-13.m: Likewise.\n+\t* objc.dg/method-14.m: Likewise.\n+\t* objc.dg/missing-proto-3.m: Likewise.\n+\t* objc.dg/next-runtime-1.m: Likewise.\n+\t* objc.dg/objc-foreach-1.m: Likewise.\n+\t* objc.dg/objc-foreach-2.m: Likewise.\n+\t* objc.dg/objc-foreach-3.m: Likewise.\n+\t* objc.dg/objc-nofilename-1.m: Likewise.\n+\t* objc.dg/param-1.m: Likewise.\n+\t* objc.dg/pch/pch.exp: Likewise.\n+\t* objc.dg/plugin/diagnostic-test-expressions-1.m: Likewise.\n+\t* objc.dg/pr23709.m: Likewise.\n+\t* objc.dg/private-1.m: Likewise.\n+\t* objc.dg/private-2.m: Likewise.\n+\t* objc.dg/property/property.exp: Likewise.\n+\t* objc.dg/proto-hier-1.m: Likewise.\n+\t* objc.dg/proto-hier-2.m: Likewise.\n+\t* objc.dg/proto-lossage-1.m: Likewise.\n+\t* objc.dg/proto-lossage-5.m: Likewise.\n+\t* objc.dg/proto-qual-1.m: Likewise.\n+\t* objc.dg/protocol-inheritance-1.m: Likewise.\n+\t* objc.dg/protocol-inheritance-2.m: Likewise.\n+\t* objc.dg/protocol-optional-1.m: Likewise.\n+\t* objc.dg/selector-1.m: Likewise.\n+\t* objc.dg/selector-2.m: Likewise.\n+\t* objc.dg/selector-3.m: Likewise.\n+\t* objc.dg/selector-4.m: Likewise.\n+\t* objc.dg/shadow-1.m: Likewise.\n+\t* objc.dg/shadow-2.m: Likewise.\n+\t* objc.dg/special/load-category-1.m: Likewise.\n+\t* objc.dg/special/load-category-2.m: Likewise.\n+\t* objc.dg/special/load-category-3.m: Likewise.\n+\t* objc.dg/special/special.exp: Likewise.\n+\t* objc.dg/special/unclaimed-category-1.h: Likewise.\n+\t* objc.dg/special/unclaimed-category-1.m: Likewise.\n+\t* objc.dg/stabs-1.m: Likewise.\n+\t* objc.dg/strings/strings.exp: Likewise.\n+\t* objc.dg/stubify-1.m: Likewise.\n+\t* objc.dg/stubify-2.m: Likewise.\n+\t* objc.dg/super-class-2.m: Likewise.\n+\t* objc.dg/super-dealloc-1.m: Likewise.\n+\t* objc.dg/super-dealloc-2.m: Likewise.\n+\t* objc.dg/sync-3.m: Likewise.\n+\t* objc.dg/threedotthree-abi-1.m: Likewise.\n+\t* objc.dg/torture/dg-torture.exp: Likewise.\n+\t* objc.dg/torture/strings/strings.exp: Likewise.\n+\t* objc.dg/try-catch-11.m: Likewise.\n+\t* objc.dg/try-catch-12.m: Likewise.\n+\t* objc.dg/type-size-2.m: Likewise.\n+\t* objc.dg/type-size-3.m: Likewise.\n+\t* objc.dg/type-size-4.m: Likewise.\n+\t* objc.dg/type-size-5.m: Likewise.\n+\t* objc.dg/undeclared-selector.m: Likewise.\n+\t* objc.dg/volatile-1.m: Likewise.\n+\n+2020-11-13  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/77404\n+\t* objc.dg/attributes/root-class-01.m: New test.\n+\t* objc.dg/root-class-00.m: New test.\n+\t* obj-c++.dg/attributes/root-class-01.mm: New test.\n+\t* obj-c++.dg/root-class-00.mm: New test.\n+\n 2020-11-13  Patrick Palka  <ppalka@redhat.com>\n \n \t* g++.dg/cpp2a/concepts-decltype3.C: New test."}, {"sha": "e412bc22a879b0149769dc70e2a7e94083bddde6", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,17 @@\n+2020-11-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* expr.c (cpp_classify_number): Update diagnostic for binary\n+\tconstants for C.  Also diagnose binary constants for\n+\t-Wc11-c2x-compat.\n+\t* init.c (lang_defaults): Enable binary constants for GNUC2X and\n+\tSTDC2X.\n+\n+2020-11-13  Piotr H. Dabrowski  <phd@phd.re>\n+\n+\tPR c++/91318\n+\t* include/cpplib.h: Added cpp_define_unused(), cpp_define_formatted_unused()\n+\t* directives.c: Likewise.\n+\n 2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* include/cpplib.h (struct cpp_callbacks): Add bool argument to"}, {"sha": "4c815a6f741cdb55d7cdf429f3a6e516b2946fad", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,27 @@\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c:\n+\tNew.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: Adjust.\n+\t* testsuite/libgomp.oacc-fortran/pr94358-1.f90: Likewise.\n+\n+2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/94358\n+\t* testsuite/libgomp.oacc-fortran/pr94358-1.f90: New.\n+\n+2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/allocate-1.c (foo): Add tests\n+\tfor array reductions.\n+\t(main): Adjust foo callers.\n+\n 2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.map (GOMP_alloc, GOMP_free): Export at GOMP_5.0.1."}, {"sha": "aed9626f7bb35d448328a3440dc0b550953d63b2", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,35 @@\n+2020-11-13  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n+\n+\t* rust-demangle.c (struct rust_demangler): Add\n+\tskipping_printing and bound_lifetime_depth fields.\n+\t(eat): Add (v0-only).\n+\t(parse_integer_62): Add (v0-only).\n+\t(parse_opt_integer_62): Add (v0-only).\n+\t(parse_disambiguator): Add (v0-only).\n+\t(struct rust_mangled_ident): Add punycode{,_len} fields.\n+\t(parse_ident): Support v0 identifiers.\n+\t(print_str): Respect skipping_printing.\n+\t(print_uint64): Add (v0-only).\n+\t(print_uint64_hex): Add (v0-only).\n+\t(print_ident): Respect skipping_printing,\n+\tSupport v0 identifiers.\n+\t(print_lifetime_from_index): Add (v0-only).\n+\t(demangle_binder): Add (v0-only).\n+\t(demangle_path): Add (v0-only).\n+\t(demangle_generic_arg): Add (v0-only).\n+\t(demangle_type): Add (v0-only).\n+\t(demangle_path_maybe_open_generics): Add (v0-only).\n+\t(demangle_dyn_trait): Add (v0-only).\n+\t(demangle_const): Add (v0-only).\n+\t(demangle_const_uint): Add (v0-only).\n+\t(basic_type): Add (v0-only).\n+\t(rust_demangle_callback): Support v0 symbols.\n+\t* testsuite/rust-demangle-expected: Add v0 testcases.\n+\n+2020-11-13  Seija Kijin  <doremylover456@gmail.com>\n+\n+\t* strstr.c (strstr): Make implementation ANSI/POSIX compliant.\n+\n 2020-11-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88115"}, {"sha": "f31a88946ee7a6ff4930cc2ad299daffc538d9e2", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,8 @@\n+2020-11-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac (libtool_VERSION): Update to 2:0.0.\n+\n 2020-10-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime 58560d51."}, {"sha": "d49cd25da2d582e898c7e854b9657697bb894fb4", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,7 @@\n+2020-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update to the latest commit.\n+\n 2020-10-19  Martin Liska  <mliska@suse.cz>\n \n \t* LOCAL_PATCHES: Add one commit."}, {"sha": "fd2fffc1e2715743104f5d4e70188cf8cfcb53a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f67db2a4709388b905397421bd3a851fbbf884/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f67db2a4709388b905397421bd3a851fbbf884/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77f67db2a4709388b905397421bd3a851fbbf884", "patch": "@@ -1,3 +1,50 @@\n+2020-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93421\n+\t* src/c++11/chrono.cc [_GLIBCXX_USE_CLOCK_GETTIME_SYSCALL]\n+\t(syscall_timespec): Define a type suitable for SYS_clock_gettime\n+\tcalls.\n+\t(system_clock::now(), steady_clock::now()): Use syscall_timespec\n+\tinstead of timespec.\n+\t* src/c++11/futex.cc (syscall_timespec): Define a type suitable\n+\tfor SYS_futex and SYS_clock_gettime calls.\n+\t(relative_timespec): Use syscall_timespec instead of timespec.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until): Likewise.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady):\n+\tLikewise.\n+\n+2020-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93456\n+\t* src/c++11/futex.cc (relative_timespec): Remove redundant check\n+\tnegative values.\n+\t* testsuite/30_threads/future/members/wait_until_overflow.cc: Moved to...\n+\t* testsuite/30_threads/future/members/93456.cc: ...here.\n+\n+2020-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/futex.cc (relative_timespec): Add [[unlikely]]\n+\tattributes.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until)\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady):\n+\tCheck for overflow.\n+\t* testsuite/30_threads/future/members/wait_until_overflow.cc:\n+\tNew test.\n+\n+2020-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/futex.cc (relative_timespec): New function to\n+\tcreate relative time from two absolute times.\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until)\n+\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady):\n+\tUse relative_timespec.\n+\n+2020-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/future/members/poll.cc: Require gthreads\n+\tand add -pthread for targets that require it. Relax required\n+\tratio of wait_for calls before/after the future is ready.\n+\n 2020-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/future (future::wait_for): Do not wait for"}]}