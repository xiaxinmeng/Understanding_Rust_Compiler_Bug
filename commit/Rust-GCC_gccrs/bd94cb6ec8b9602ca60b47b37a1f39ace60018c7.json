{"sha": "bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NGNiNmVjOGI5NjAyY2E2MGI0N2IzN2ExZjM5YWNlNjAwMThjNw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-01-02T18:50:33Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-01-02T18:50:33Z"}, "message": "alpha.md, [...]: Always use set_unique_reg_note to add REG_EQUAL notes.\n\n        * config/alpha/alpha.md, arm/arm.c, darwin.c, frv/frv.md,\n        m32r/m32r.c, m32r/m32r.c, mn10300/mn10300.md, pa/pa.c,\n        rs6000/rs6000.c, s390/s390.md, sh/sh.md, sparc/sparc.c:\n        Always use set_unique_reg_note to add REG_EQUAL notes.\n\nFrom-SVN: r120353", "tree": {"sha": "16497f3f7d5f4c242ea5e0918281c6bbae21fda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16497f3f7d5f4c242ea5e0918281c6bbae21fda4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/comments", "author": null, "committer": null, "parents": [{"sha": "61465e7563e79c8ce885f11f98b3ab639ddb0700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61465e7563e79c8ce885f11f98b3ab639ddb0700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61465e7563e79c8ce885f11f98b3ab639ddb0700"}], "stats": {"total": 166, "additions": 68, "deletions": 98}, "files": [{"sha": "e7e62e9caf3b94e8d96b77639be00d45b2e3e543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -1,3 +1,10 @@\n+2007-01-02  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/alpha/alpha.md, arm/arm.c, darwin.c, frv/frv.md,\n+\tm32r/m32r.c, m32r/m32r.c, mn10300/mn10300.md, pa/pa.c,\n+\trs6000/rs6000.c, s390/s390.md, sh/sh.md, sparc/sparc.c:\n+\tAlways use set_unique_reg_note to add REG_EQUAL notes.\n+\n 2007-01-02  Kazu Hirata  <kazu@codesourcery.com>\n \n \tRevert:"}, {"sha": "f49b0dc10f5afb1b08d0251747d8189d224f716b", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -5336,8 +5336,8 @@\n   emit_insn (gen_ashldi3 (operands[0], operands[0], GEN_INT (32)));\n   insn2 = emit_insn (gen_umk_lalm (operands[0], operands[0], operands[1]));\n   insn3 = emit_insn (gen_umk_lal (operands[0], operands[0], operands[1]));\n-  REG_NOTES (insn3) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\t REG_NOTES (insn3));\n+  set_unique_reg_note (insn3, REG_EQUAL, operands[1]);\n+\n   if (GET_CODE (operands[1]) == LABEL_REF)\n     {\n       rtx label;"}, {"sha": "c7a1ec28eca9c7a2c8bc7f6a0d52f480ae2b1ed2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -3295,8 +3295,8 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n #endif\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, orig,\n-\t\t\t\t\t    REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, orig);\n+\n       return reg;\n     }\n   else if (GET_CODE (orig) == CONST)"}, {"sha": "7bd916d907bd496af17d59a9baedc72477421b9b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -742,8 +742,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t\t\t  gen_rtx_LO_SUM (Pmode,\n \t\t\t\t\t\t  hi_sum_reg, offset));\n \t      insn = emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n-\t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, pic_ref,\n-\t\t\t\t\t\t    REG_NOTES (insn));\n+\t      set_unique_reg_note (insn, REG_EQUAL, pic_ref);\n \n \t      pic_ref = reg;\n #else"}, {"sha": "43af8c429323883682588ad2de6bb9807c608449", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -7904,8 +7904,7 @@\n \n   MEM_READONLY_P (SET_SRC (PATTERN (insn))) = 1;\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")\n@@ -7985,8 +7984,7 @@\n {\n   rtx insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1], operands[2], operands[3]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")\n@@ -8022,8 +8020,7 @@\n   insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1],\n \t\t\t\t\t operands[4], operands[3]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")\n@@ -8053,8 +8050,7 @@\n   insn = emit_insn (gen_symGOTOFF2reg_hilo (operands[0], operands[1],\n \t\t\t\t\t    operands[4], operands[3]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")"}, {"sha": "a4d20397bc2ddffd2ceef9f3ef9149c7d70ea4c2", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -1681,8 +1681,7 @@ m32r_legitimize_pic_address (rtx orig, rtx reg)\n #if 0\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n          by loop.  */\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, orig,\n-                  REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, orig);\n #endif\n       return reg;\n     }"}, {"sha": "5c5bc8de5dc213203a3dc1d7efa16a939368e2ad", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -2631,8 +2631,7 @@\n \n   MEM_READONLY_P (SET_SRC (PATTERN (insn))) = 1;\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")\n@@ -2652,8 +2651,7 @@\n {\n   rtx insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")"}, {"sha": "59f9dfd4d32c2567d071359353cc38d880a35ce2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -662,7 +662,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n       insn = emit_move_insn (reg, pic_ref);\n \n       /* Put a REG_EQUAL note on this insn, so that it can be optimized.  */\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, orig, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, orig);\n \n       return reg;\n     }\n@@ -1978,8 +1978,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t\t}\n \t    }\n \n-\t  REG_NOTES (insn)\n-\t    = gen_rtx_EXPR_LIST (REG_EQUAL, op1, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUAL, op1);\n \n \t  return 1;\n \t}"}, {"sha": "15f263ab01660303c722bacc56193b1e922832ff", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -3363,8 +3363,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\t  emit_move_insn (tmp2, mem);\n \t\t  emit_insn (gen_addsi3 (tmp3, tmp1, tmp2));\n \t\t  last = emit_move_insn (got, tmp3);\n-\t\t  REG_NOTES (last) = gen_rtx_EXPR_LIST (REG_EQUAL, gsym,\n-\t\t\t\t\t\t\tREG_NOTES (last));\n+\t\t  set_unique_reg_note (last, REG_EQUAL, gsym);\n \t\t  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n \t\t\t\t\t\t\t REG_NOTES (first));\n \t\t  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,"}, {"sha": "03bec777bd79979765172b4bd0cde1d0c0cf933b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 25, "deletions": 44, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -4545,12 +4545,10 @@\n   emit_insn (gen_divmodtidi3 (operands[4], operands[1], operands[2]));\n \n   insn = emit_move_insn (operands[0], gen_lowpart (DImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, div_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, div_equal);\n \n   insn = emit_move_insn (operands[3], gen_highpart (DImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, mod_equal);\n \n   DONE;\n })\n@@ -4616,17 +4614,15 @@\n   emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n   emit_move_insn (gen_lowpart (DImode, operands[4]), operands[1]);\n   emit_move_insn (gen_highpart (DImode, operands[4]), const0_rtx);\n+\n   insn = emit_insn (gen_udivmodtidi3 (operands[4], operands[4], operands[2]));\n-  REG_NOTES (insn) =\n-\tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, equal);\n \n   insn = emit_move_insn (operands[0], gen_lowpart (DImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, div_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, div_equal);\n \n   insn = emit_move_insn (operands[3], gen_highpart (DImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, mod_equal);\n \n   DONE;\n })\n@@ -4676,17 +4672,15 @@\n \n   operands[4] = gen_reg_rtx(DImode);\n   emit_insn (gen_extendsidi2 (operands[4], operands[1]));\n+\n   insn = emit_insn (gen_divmoddisi3 (operands[4], operands[4], operands[2]));\n-  REG_NOTES (insn) =\n-\tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, equal);\n \n   insn = emit_move_insn (operands[0], gen_lowpart (SImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, div_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, div_equal);\n \n   insn = emit_move_insn (operands[3], gen_highpart (SImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, mod_equal);\n \n   DONE;\n })\n@@ -4738,17 +4732,15 @@\n   emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n   emit_move_insn (gen_lowpart (SImode, operands[4]), operands[1]);\n   emit_move_insn (gen_highpart (SImode, operands[4]), const0_rtx);\n+\n   insn = emit_insn (gen_udivmoddisi3 (operands[4], operands[4], operands[2]));\n-  REG_NOTES (insn) =\n-\tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, equal);\n \n   insn = emit_move_insn (operands[0], gen_lowpart (SImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, div_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, div_equal);\n \n   insn = emit_move_insn (operands[3], gen_highpart (SImode, operands[4]));\n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, mod_equal);\n \n   DONE;\n })\n@@ -4813,14 +4805,11 @@\n \t  emit_insn (gen_zero_extendsidi2 (operands[3], operands[1]));\n \t  insn = emit_insn (gen_divmoddisi3 (operands[3], operands[3],\n \t\t\t\t\t     operands[2]));\n-\t  REG_NOTES (insn) =\n-\t    gen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+  \t  set_unique_reg_note (insn, REG_EQUAL, equal);\n \n \t  insn = emit_move_insn (operands[0],\n \t\t\t\t gen_lowpart (SImode, operands[3]));\n-\t  REG_NOTES (insn) =\n-\t    gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t       udiv_equal, REG_NOTES (insn));\n+  \t  set_unique_reg_note (insn, REG_EQUAL, udiv_equal);\n         }\n     }\n   else\n@@ -4844,14 +4833,12 @@\n       emit_insn (gen_zero_extendsidi2 (operands[3], operands[1]));\n       insn = emit_insn (gen_divmoddisi3 (operands[3], operands[3],\n \t\t\t\t\t operands[2]));\n-      REG_NOTES (insn) =\n-      gen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, equal);\n \n       insn = emit_move_insn (operands[0],\n \t\t\t     gen_lowpart (SImode, operands[3]));\n-      REG_NOTES (insn) =\n-      gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t       udiv_equal, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, udiv_equal);\n+\n       emit_jump (label3);\n       emit_label (label1);\n       emit_move_insn (operands[0], operands[1]);\n@@ -4905,14 +4892,11 @@\n \t  emit_insn (gen_zero_extendsidi2 (operands[3], operands[1]));\n \t  insn = emit_insn (gen_divmoddisi3 (operands[3], operands[3],\n \t\t\t\t\t     operands[2]));\n-\t  REG_NOTES (insn) =\n-\t    gen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUAL, equal);\n \n \t  insn = emit_move_insn (operands[0],\n \t\t\t\t gen_highpart (SImode, operands[3]));\n-\t  REG_NOTES (insn) =\n-\t    gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t       umod_equal, REG_NOTES (insn));\n+\t  set_unique_reg_note (insn, REG_EQUAL, umod_equal);\n         }\n     }\n   else\n@@ -4936,14 +4920,12 @@\n       emit_insn (gen_zero_extendsidi2 (operands[3], operands[1]));\n       insn = emit_insn (gen_divmoddisi3 (operands[3], operands[3],\n \t\t\t\t\t operands[2]));\n-      REG_NOTES (insn) =\n-      gen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, equal);\n \n       insn = emit_move_insn (operands[0],\n \t\t\t     gen_highpart (SImode, operands[3]));\n-      REG_NOTES (insn) =\n-      gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t umod_equal, REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, umod_equal);\n+\n       emit_jump (label3);\n       emit_label (label1);\n       emit_move_insn (operands[0], const0_rtx);\n@@ -6275,8 +6257,7 @@\n   emit_insn (gen_clztidi2 (wide_reg, operands[1], msb));\n \n   insn = emit_move_insn (operands[0], gen_highpart (DImode, wide_reg));  \n-  REG_NOTES (insn) =\n-        gen_rtx_EXPR_LIST (REG_EQUAL, clz_equal, REG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, clz_equal);\n \n   DONE;\n })"}, {"sha": "0186ba5b30e4fab0f390255987ec5c3bc29093e4", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -2749,9 +2749,9 @@ label:\n      See also smulsi3_highpart.\n      ??? Alternatively, we could put this at the calling site of expand_binop,\n      i.e. expand_expr.  */\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (SET_SRC (single_set (first))),\n-\t\t\t REG_NOTES (last));\n+  set_unique_reg_note (last, REG_EQUAL,\n+\t\t       copy_rtx (SET_SRC (single_set (first))));\n+\n   DONE;\n }\")\n \n@@ -2779,9 +2779,9 @@ label:\n      See also smulsi3_highpart.\n      ??? Alternatively, we could put this at the calling site of expand_binop,\n      i.e. expand_expr.  */\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (SET_SRC (single_set (first))),\n-\t\t\t REG_NOTES (last));\n+  set_unique_reg_note (last, REG_EQUAL,\n+\t\t       copy_rtx (SET_SRC (single_set (first))));\n+\n   DONE;\n }\")\n \n@@ -3058,9 +3058,9 @@ label:\n      See also {,u}mulhisi.\n      ??? Alternatively, we could put this at the calling site of expand_binop,\n      i.e. expand_mult_highpart.  */\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (SET_SRC (single_set (first))),\n-\t\t\t REG_NOTES (last));\n+  set_unique_reg_note (last, REG_EQUAL,\n+\t\t       copy_rtx (SET_SRC (single_set (first))));\n+\n   DONE;\n }\")\n \n@@ -5113,8 +5113,7 @@ label:\n {\n   rtx insn = emit_insn (gen_movsi_const (operands[0], operands[1]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (operands[1]),\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, copy_rtx (operands[1]));\n \n   DONE;\n }\")\n@@ -5497,8 +5496,7 @@ label:\n   else\n     insn = emit_insn (gen_movdi_const_32bit (operands[0], operands[1]));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (operands[1]),\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, copy_rtx (operands[1]));\n \n   DONE;\n }\")\n@@ -8323,8 +8321,7 @@ label:\n \n       insn = emit_move_insn (operands[0], tr);\n \n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, equiv,\n-\t\t\t\t\t    REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, equiv);\n \n       DONE;\n     }\n@@ -8433,9 +8430,8 @@ label:\n   /* ??? Should we have a special alias set for the GOT?  */\n   insn = emit_move_insn (operands[0], mem);\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, XVECEXP (XEXP (operands[1],\n-\t\t\t\t\t\t\t\t  0), 0, 0),\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL,\n+\t\t       XVECEXP (XEXP (operands[1], 0), 0, 0));\n \n   DONE;\n }\")\n@@ -8494,8 +8490,7 @@ label:\n \t\t\t gen_rtx_PLUS (Pmode, t,\n \t\t\t\t       gen_rtx_REG (Pmode, PIC_REG)));\n \n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n-\t\t\t\t\tREG_NOTES (insn));\n+  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n   DONE;\n }\")\n@@ -13203,9 +13198,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   emit_insn (gen_adddi3 (scratch, scratch, GEN_INT (-64)));\n   emit_insn (gen_movdicc_false (scratch, operands[1], const0_rtx, scratch));\n   last = emit_insn (gen_subdi3 (operands[0], const0_rtx, scratch));\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t gen_rtx_FFS (DImode, operands[0]), REG_NOTES (last));\n+  set_unique_reg_note (last, REG_EQUAL, gen_rtx_FFS (DImode, operands[0]));\n+\n   DONE;\n }\")\n \n@@ -13228,9 +13222,8 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   emit_insn (gen_nsbsi (scratch, discratch));\n   last = emit_insn (gen_subsi3 (operands[0],\n \t\t\t\tforce_reg (SImode, GEN_INT (63)), scratch));\n-  REG_NOTES (last)\n-    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t gen_rtx_FFS (SImode, operands[0]), REG_NOTES (last));\n+  set_unique_reg_note (last, REG_EQUAL, gen_rtx_FFS (SImode, operands[0]));\n+\n   DONE;\n }\")\n "}, {"sha": "05390096b7c833cd1d86fe677778d673d8e6305a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -3257,8 +3257,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n       insn = emit_move_insn (reg, pic_ref);\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n-      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, orig,\n-\t\t\t\t  REG_NOTES (insn));\n+      set_unique_reg_note (insn, REG_EQUAL, orig);\n       return reg;\n     }\n   else if (GET_CODE (orig) == CONST)"}, {"sha": "fdf39cc4623d651e38ca7299a519eeeff1f40be7", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd94cb6ec8b9602ca60b47b37a1f39ace60018c7/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=bd94cb6ec8b9602ca60b47b37a1f39ace60018c7", "patch": "@@ -183,7 +183,7 @@ build_addr (tree exp, tree context)\n   save_context = current_function_decl;\n   current_function_decl = context;\n   retval = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (exp)), exp);\n-  current_function_decl = save_context;;\n+  current_function_decl = save_context;\n   return retval;\n }\n "}]}