{"sha": "f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjNjA4NmJhODQ3NGU1OTk3YmVjNGQxZjljNDRlMWVlNmE3ZDYwMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:03:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:03:21Z"}, "message": "[multiple changes]\n\n2009-07-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-convec.adb: Add comments about suspicious/subtle code.\n\n2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads: Document use of Alias in private overriding\n\n2009-07-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): For the case of\n\tan array type, propagate alignment from first subtype to implicit base\n\ttype so that other subtypes (such as the itypes for aggregates of the\n\ttype) also receive the expected alignment.\n\n\t* g-comlin.ads: Minor documentation clarification/rewording. \n\t* scos.ads: Minor comments update.\n\t* lib-writ.ads: Minor reformatting\n\nFrom-SVN: r149991", "tree": {"sha": "7ae7fba8e94011dd7ba6c2ee0a68fee53e23528e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae7fba8e94011dd7ba6c2ee0a68fee53e23528e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/comments", "author": null, "committer": null, "parents": [{"sha": "dfcfdc0a7ce79e58aa028a1c9313399fb5676d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcfdc0a7ce79e58aa028a1c9313399fb5676d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcfdc0a7ce79e58aa028a1c9313399fb5676d56"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "c07e7190aee50641ce45372d9beb13111570f044", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -1,3 +1,22 @@\n+2009-07-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-convec.adb: Add comments about suspicious/subtle code.\n+\n+2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: Document use of Alias in private overriding\n+\n+2009-07-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): For the case of\n+\tan array type, propagate alignment from first subtype to implicit base\n+\ttype so that other subtypes (such as the itypes for aggregates of the\n+\ttype) also receive the expected alignment.\n+\n+\t* g-comlin.ads: Minor documentation clarification/rewording. \n+\t* scos.ads: Minor comments update.\n+\t* lib-writ.ads: Minor reformatting\n+\n 2009-07-23  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch3.adb (Expand_N_Object_Declaration): For an initialized object"}, {"sha": "64b1b07d9273e88dbafaa33713d34bac581407a5", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -267,10 +267,15 @@ package body Ada.Containers.Vectors is\n \n       begin\n          Container.Elements := null;\n-         Container.Last := No_Index;\n          Container.Busy := 0;\n          Container.Lock := 0;\n \n+         --  Note: it may seem that the following assignment to Container.Last\n+         --  is useless, since we assign it to L below. However this code is\n+         --  used in case 'new Elements_Type' below raises an exception, to\n+         --  keep Container in a consistent state.\n+\n+         Container.Last := No_Index;\n          Container.Elements := new Elements_Type'(L, EA);\n          Container.Last := L;\n       end;"}, {"sha": "79f86863783528aaac8cf7f8f3ff09d901d1812b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -358,7 +358,12 @@ package Einfo is\n --       subprogram. In case of abstract interface subprograms it points to the\n --       subprogram that covers the abstract interface primitive. Also used for\n --       a subprogram renaming, where it points to the renamed subprogram.\n---       Always empty for entries.\n+--       For an inherited operation (of a type extension) that is overridden\n+--       in a private part, the Alias is the overriding operation. In this\n+--       fashion a call from outside the package ends up executing the new body\n+--       even if non-dispatching, and a call from inside calls the overriding\n+--       operation because it hides the implicit one.\n+--       Alias is always empty for entries.\n \n --    Alignment (Uint14)\n --       Present in entities for types and also in constants, variables"}, {"sha": "5e8f63f420c46ece0854327880d9129bc360a238", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -84,7 +84,7 @@\n --  A more complicated example would involve the use of sections for the\n --  switches, as for instance in gnatmake. The same command line is used to\n --  provide switches for several tools. Each tool recognizes its switches by\n---  separating them with special switches, chosen by the programmer.\n+--  separating them with special switches that act as section separators.\n --  Each section acts as a command line of its own.\n \n --  begin\n@@ -136,14 +136,14 @@\n --  Creating and manipulating the command line\n --  ===========================================\n \n---  This package provides handling of command line by providing methods to\n---  add or remove arguments from it. The resulting command line is kept as\n---  short as possible by coalescing arguments whenever possible.\n+--  This package provides mechanisms to create and modify command lines by\n+--  adding or removing arguments from them. The resulting command line is kept\n+--  as short as possible by coalescing arguments whenever possible.\n \n---  This package can be used to construct complex command lines for instance\n---  from an GUI interface (although the package itself does not depend on a\n---  specific GUI toolkit). For instance, if you are configuring the command\n---  line to use when spawning a tool with the following characteristics:\n+--  Complex command lines can thus be constructed, for example from an GUI\n+--  (although this package does not by itself depend upon any specific GUI\n+--  toolkit). For instance, if you are configuring the command line to use\n+--  when spawning a tool with the following characteristics:\n \n --    * Specifying -gnatwa is the same as specifying -gnatwu -gnatwv, but\n --      shorter and more readable\n@@ -157,7 +157,7 @@\n \n --    * A switch -foo takes one mandatory parameter\n \n---  These attributes can be configured through this package with the following\n+--  These properties can be configured through this package with the following\n --  calls:\n \n --     Config : Command_Line_Configuration;\n@@ -212,12 +212,12 @@\n --  Parsing the command line with grouped arguments\n --  ===============================================\n \n---  This package also works great in collaboration with GNAT.Command_Line, to\n---  parse the input to your tools. If you are writing the tool we described\n---  above, you would do a first loop with Getopt to pass the switches and\n---  their arguments, and create a temporary representation of the command line\n---  as a Command_Line object. Finally, you can ask each individual switch to\n---  that object. For instance:\n+--  The command line construction facility can also be used in conjunction with\n+--  Getopt to interpret a command line. For example when implementing the tool\n+--  described above, you would do a first loop with Getopt to pass the switches\n+--  and their arguments, and create a temporary representation of the command\n+--  line as a Command_Line object. Finally, you can query each individual\n+--  switch from that object. For instance:\n \n --    declare\n --      Cmd  : Command_Line;\n@@ -338,7 +338,7 @@ package GNAT.Command_Line is\n    --  that is located. If there are no more switches in the current section,\n    --  returns ASCII.NUL. If Concatenate is True (by default), the switches\n    --  does not need to be separated by spaces (they can be concatenated if\n-   --  they do not require an argument, e.g. -ab is the ame as two separate\n+   --  they do not require an argument, e.g. -ab is the same as two separate\n    --  arguments -a -b).\n    --\n    --  Switches is a string of all the possible switches, separated by a"}, {"sha": "d5236773a3dd65e8779f62ef8fcc1d715f90186c", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -344,9 +344,9 @@ package Lib.Writ is\n    --      name are separated by periods. The names themselves are in encoded\n    --      form, as documented in Namet.\n \n-   --  ------------------------\n-   --  -- I Interrupt States --\n-   --  ------------------------\n+   --  -------------------------\n+   --  -- I  Interrupt States --\n+   --  -------------------------\n \n    --    I interrupt-number interrupt-state line-number\n \n@@ -363,9 +363,9 @@ package Lib.Writ is\n    --      number of the corresponding Interrupt_State pragma. This is used\n    --      in consistency messages.\n \n-   --  -------------------------------------\n-   --  -- S Priority Specific Dispatching --\n-   --  -------------------------------------\n+   --  --------------------------------------\n+   --  -- S  Priority Specific Dispatching --\n+   --  --------------------------------------\n \n    --    S policy_identifier first_priority last_priority line-number\n "}, {"sha": "fa039a5f5feae159c4fc8fe548c4e738f1f8bcfd", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -86,6 +86,9 @@ package SCOs is\n    --        a Source_Reference pragma was encountered (since all line number\n    --        references will be with respect to the original file).\n \n+   --        Isn't the filename indication redundant, since we can look it up\n+   --        from the D line???\n+\n    --  Statements\n \n    --    For the purpose of SCO generation, the notion of statement includes\n@@ -253,15 +256,15 @@ package SCOs is\n    --    Complex Decision\n    --      C1   = 'I', 'E', 'W', 'X' (if/exit/while/expression)\n    --      C2   = ' '\n-   --      From = No_Location\n-   --      To   = No_Location\n+   --      From = No_Source_Location\n+   --      To   = No_Source_Location\n    --      Last = False\n \n    --    Operator\n    --      C1   = '!', '^', '&', '|'\n    --      C2   = ' '\n-   --      From = No_Location\n-   --      To   = No_Location\n+   --      From = No_Source_Location\n+   --      To   = No_Source_Location\n    --      Last = False\n \n    --    Element"}, {"sha": "a2156b38cd452bf1fd27f2ab4827a3d6057f83fd", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "patch": "@@ -1059,7 +1059,7 @@ package body Sem_Ch13 is\n \n          --  Alignment attribute definition clause\n \n-         when Attribute_Alignment => Alignment_Block : declare\n+         when Attribute_Alignment => Alignment : declare\n             Align : constant Uint := Get_Alignment_Value (Expr);\n \n          begin\n@@ -1078,8 +1078,17 @@ package body Sem_Ch13 is\n             elsif Align /= No_Uint then\n                Set_Has_Alignment_Clause (U_Ent);\n                Set_Alignment            (U_Ent, Align);\n+\n+               --  For an array type, U_Ent is the first subtype. In that case,\n+               --  also set the alignment of the anonymous base type so that\n+               --  other subtypes (such as the itypes for aggregates of the\n+               --  type) also receive the expected alignment.\n+\n+               if Is_Array_Type (U_Ent) then\n+                  Set_Alignment (Base_Type (U_Ent), Align);\n+               end if;\n             end if;\n-         end Alignment_Block;\n+         end Alignment;\n \n          ---------------\n          -- Bit_Order --"}]}