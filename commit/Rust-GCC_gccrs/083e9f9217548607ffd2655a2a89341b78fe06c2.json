{"sha": "083e9f9217548607ffd2655a2a89341b78fe06c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzZTlmOTIxNzU0ODYwN2ZmZDI2NTVhMmE4OTM0MWI3OGZlMDZjMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-05-22T07:23:37Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-05-22T07:23:37Z"}, "message": "c-lex.c (c_lex): Just cast cpp's hashnode to gcc's one.\n\n\t* c-lex.c (c_lex): Just cast cpp's hashnode to gcc's one.\n\t* stringpool.c:\t(IS_FE_IDENT, make_identifier): Delete.\n\t(maybe_get_identifier): Update.\n\t* tree.h (make_identifier): Delete.\n\nFrom-SVN: r42432", "tree": {"sha": "04db4302bc987e3271205fe750e45aff9855d0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04db4302bc987e3271205fe750e45aff9855d0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083e9f9217548607ffd2655a2a89341b78fe06c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083e9f9217548607ffd2655a2a89341b78fe06c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083e9f9217548607ffd2655a2a89341b78fe06c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083e9f9217548607ffd2655a2a89341b78fe06c2/comments", "author": null, "committer": null, "parents": [{"sha": "bada7cdabb47290572d233d2df0c2ae3d5d9427e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada7cdabb47290572d233d2df0c2ae3d5d9427e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bada7cdabb47290572d233d2df0c2ae3d5d9427e"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "1442a191b51849351b0c3c67a6a73b6168a60f38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=083e9f9217548607ffd2655a2a89341b78fe06c2", "patch": "@@ -1,3 +1,10 @@\n+2001-05-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-lex.c (c_lex): Just cast cpp's hashnode to gcc's one.\n+\t* stringpool.c:\t(IS_FE_IDENT, make_identifier): Delete.\n+\t(maybe_get_identifier): Update.\n+\t* tree.h (make_identifier): Delete.\n+\n 2001-05-21  Richard Henderson  <rth@redhat.com>\n \n \t* combine.c (subst): Do not substitute for a register as"}, {"sha": "914da81cd92bb3a5f68b0ce8f8670b855703f835", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=083e9f9217548607ffd2655a2a89341b78fe06c2", "patch": "@@ -997,12 +997,7 @@ c_lex (value)\n       goto retry;\n       \n     case CPP_NAME:\n-      {\n-\ttree node = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok.val.node));\n-\tif (TREE_CODE (node) != IDENTIFIER_NODE)\n-\t  make_identifier (node);\n-\t*value = node;\n-      }\n+      *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok.val.node));\n       break;\n \n     case CPP_INT:"}, {"sha": "7abca36b30c407af7d7dd649d05d5d2b806fe5ec", "filename": "gcc/stringpool.c", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=083e9f9217548607ffd2655a2a89341b78fe06c2", "patch": "@@ -35,8 +35,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"toplev.h\"\n \n-#define IS_FE_IDENT(NODE) (TREE_CODE (NODE) == IDENTIFIER_NODE)\n-\n /* The \"\" allocated string.  */\n const char empty_string[] = \"\";\n \n@@ -99,23 +97,6 @@ ggc_alloc_string (contents, length)\n   return obstack_finish (&string_stack);\n }\n \n-/* NODE is an identifier known to the preprocessor.  Make it known to\n-   the front ends as well.  */\n-\n-void\n-make_identifier (node)\n-     tree node;\n-{\n-  /* If this identifier is longer than the clash-warning length,\n-     do a brute force search of the entire table for clashes.  */\n-  if (warn_id_clash && do_identifier_warnings\n-      && IDENTIFIER_LENGTH (node) >= id_clash_len)\n-    ht_forall (ident_hash, (ht_cb) scan_for_clashes,\n-\t       IDENTIFIER_POINTER (node));\n-\n-  TREE_SET_CODE (node, IDENTIFIER_NODE);\n-}\n-\n /* Return an IDENTIFIER_NODE whose name is TEXT (a null-terminated string).\n    If an identifier with that name has previously been referred to,\n    the same node is returned this time.  */\n@@ -141,17 +122,11 @@ maybe_get_identifier (text)\n      const char *text;\n {\n   hashnode ht_node;\n-  tree node;\n-  size_t length = strlen (text);\n \n   ht_node = ht_lookup (ident_hash, (const unsigned char *) text,\n-\t\t       length, HT_NO_INSERT);\n+\t\t       strlen (text), HT_NO_INSERT);\n   if (ht_node)\n-    {\n-      node = HT_IDENT_TO_GCC_IDENT (ht_node);\n-      if (IS_FE_IDENT (node))\n-\treturn node;\n-    }\n+    return HT_IDENT_TO_GCC_IDENT (ht_node);\n \n   return NULL_TREE;\n }\n@@ -167,8 +142,7 @@ scan_for_clashes (pfile, h, text)\n {\n   tree node = HT_IDENT_TO_GCC_IDENT (h);\n \n-  if (IS_FE_IDENT (node)\n-      && IDENTIFIER_LENGTH (node) >= id_clash_len\n+  if (IDENTIFIER_LENGTH (node) >= id_clash_len\n       && !memcmp (IDENTIFIER_POINTER (node), text, id_clash_len))\n     {\n       warning (\"\\\"%s\\\" and \\\"%s\\\" identical in first %d characters\","}, {"sha": "bea25d08fc5c6b189ae098ec4eabe6064ba43b2d", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083e9f9217548607ffd2655a2a89341b78fe06c2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=083e9f9217548607ffd2655a2a89341b78fe06c2", "patch": "@@ -1958,10 +1958,6 @@ extern tree make_tree_vec\t\tPARAMS ((int));\n \n extern tree get_identifier\t\tPARAMS ((const char *));\n \n-/* NODE is an identifier known to the preprocessor.  Make it known to\n-   the front ends as well.  */\n-extern void make_identifier\t\tPARAMS ((tree node));\n-\n /* If an identifier with the name TEXT (a null-terminated string) has\n    previously been referred to, return that node; otherwise return\n    NULL_TREE.  */"}]}