{"sha": "29d84b2c1477769100559f9427028001fd07b113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkODRiMmMxNDc3NzY5MTAwNTU5Zjk0MjcwMjgwMDFmZDA3YjExMw==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-13T07:41:04Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-13T07:41:04Z"}, "message": "add some comments about how scan dead code pass handle PathInExpression and PathExprSegment", "tree": {"sha": "5f51ad082be6cb31d191648b548a93f00cef4fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f51ad082be6cb31d191648b548a93f00cef4fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d84b2c1477769100559f9427028001fd07b113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d84b2c1477769100559f9427028001fd07b113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d84b2c1477769100559f9427028001fd07b113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d84b2c1477769100559f9427028001fd07b113/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9415a4b712371706d7f130695fd959fddb6506cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9415a4b712371706d7f130695fd959fddb6506cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9415a4b712371706d7f130695fd959fddb6506cc"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "8339345da4d7e324a65f3fc8d070aa1d799b306a", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d84b2c1477769100559f9427028001fd07b113/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d84b2c1477769100559f9427028001fd07b113/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=29d84b2c1477769100559f9427028001fd07b113", "patch": "@@ -106,6 +106,8 @@ MarkLive::go (HIR::Crate &crate)\n void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n+  // We should iterate every path segment in order to mark the function which is\n+  // called in the expression\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n     return visit_path_segment (seg);\n   });\n@@ -121,6 +123,7 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n     return true;\n   });\n \n+  // Trying to find the method definition and mark it alive.\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n   find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n@@ -140,6 +143,14 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n   NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n \n+  // There are two different kinds of segment for us.\n+  // 1. function segment\n+  //      like the symbol \"foo\" in expression `foo()`.\n+  // 2. type segment\n+  //      like the symbol \"Foo\" in expression `Foo{a: 1, b: 2}`\n+  //\n+  // We should mark them alive all and ignoring other kind of segments.\n+  // If the segment we dont care then just return false is fine\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n       Resolver::Definition def;"}]}