{"sha": "e28cd97b00fe7bddae105d4d92e26ba254a68d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4Y2Q5N2IwMGZlN2JkZGFlMTA1ZDRkOTJlMjZiYTI1NGE2OGQ5YQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-02-19T13:27:35Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T13:27:35Z"}, "message": "parse.y (check_pkg_class_access): Allow private class access within the same package.\n\n \n\t* parse.y (check_pkg_class_access): Allow private class access\n \twithin the same package.\n\t(strip_out_static_field_access_decl): New function.\n\t(patch_unaryop): Call strip_out_static_field_access_decl on ++/--\n \toperator argument before testing its nature.\n\nFrom-SVN: r25317", "tree": {"sha": "e750e6c4415cc885b119c08e9982ff4bc3238314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e750e6c4415cc885b119c08e9982ff4bc3238314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e28cd97b00fe7bddae105d4d92e26ba254a68d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28cd97b00fe7bddae105d4d92e26ba254a68d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28cd97b00fe7bddae105d4d92e26ba254a68d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28cd97b00fe7bddae105d4d92e26ba254a68d9a/comments", "author": null, "committer": null, "parents": [{"sha": "19378cf80343bc455c6d3ef513365aaf58884222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19378cf80343bc455c6d3ef513365aaf58884222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19378cf80343bc455c6d3ef513365aaf58884222"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "8079bdedcf1bb9ccd187bfd9f34f6d0ad7fa1eb2", "filename": "gcc/java/parse.y", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e28cd97b00fe7bddae105d4d92e26ba254a68d9a/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e28cd97b00fe7bddae105d4d92e26ba254a68d9a/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=e28cd97b00fe7bddae105d4d92e26ba254a68d9a", "patch": "@@ -239,6 +239,7 @@ static int array_constructor_check_entry PROTO ((tree, tree));\n static char *purify_type_name PROTO ((char *));\n static tree patch_initialized_static_field PROTO ((tree));\n static tree fold_constant_for_init PROTO ((tree, tree));\n+static tree strip_out_static_field_access_decl PROTO ((tree));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -5206,6 +5207,13 @@ check_pkg_class_access (class_name, cl)\n \n   if (!CLASS_PUBLIC (TYPE_NAME (type)))\n     {\n+      /* Access to a private class within the same package is\n+         allowed. */\n+      tree l, r;\n+      breakdown_qualified (&l, &r, class_name);\n+      if (l == ctxp->package)\n+\treturn 0;\n+\n       parse_error_context \n \t(cl, \"Can't access %s `%s'. Only public classes and interfaces in \"\n \t \"other packages can be accessed\",\n@@ -6158,6 +6166,30 @@ resolve_field_access (qual_wfl, field_decl, field_type)\n   return field_ref;\n }\n \n+/* If NODE is an access to f static field, strip out the class\n+   initialization part and return the field decl, otherwise, return\n+   NODE. */\n+\n+static tree\n+strip_out_static_field_access_decl (node)\n+    tree node;\n+{\n+  if (TREE_CODE (node) == COMPOUND_EXPR)\n+    {\n+      tree op1 = TREE_OPERAND (node, 1);\n+      if (TREE_CODE (op1) == COMPOUND_EXPR)\n+\t {\n+\t   tree call = TREE_OPERAND (op1, 0);\n+\t   if (TREE_CODE (call) == CALL_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (call, 0)) == ADDR_EXPR\n+\t       && TREE_OPERAND (TREE_OPERAND (call, 0), 0)\n+\t       == soft_initclass_node)\n+\t     return TREE_OPERAND (op1, 1);\n+\t }\n+    }\n+  return node;\n+}\n+\n /* 6.5.5.2: Qualified Expression Names */\n \n static int\n@@ -9493,7 +9525,7 @@ patch_unaryop (node, wfl_op)\n {\n   tree op = TREE_OPERAND (node, 0);\n   tree op_type = TREE_TYPE (op);\n-  tree prom_type, value;\n+  tree prom_type, value, decl;\n   int code = TREE_CODE (node);\n   int error_found = 0;\n \n@@ -9509,9 +9541,11 @@ patch_unaryop (node, wfl_op)\n     case PREINCREMENT_EXPR:\n       /* 15.14.2 Prefix Decrement Operator -- */\n     case PREDECREMENT_EXPR:\n-      if (!JDECL_P (op) && !((TREE_CODE (op) == INDIRECT_REF \n-\t\t\t      || TREE_CODE (op) == COMPONENT_REF) \n-\t\t\t     && JPRIMITIVE_TYPE_P (TREE_TYPE (op))))\n+      decl = strip_out_static_field_access_decl (op);\n+      if (!JDECL_P (decl) \n+\t  && !((TREE_CODE (decl) == INDIRECT_REF \n+\t\t|| TREE_CODE (decl) == COMPONENT_REF) \n+\t       && JPRIMITIVE_TYPE_P (TREE_TYPE (decl))))\n \t{\n \t  tree lvalue;\n \t  /* Before screaming, check that we're not in fact trying to"}]}