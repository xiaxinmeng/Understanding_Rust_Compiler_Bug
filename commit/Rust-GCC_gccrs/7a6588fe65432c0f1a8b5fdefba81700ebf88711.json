{"sha": "7a6588fe65432c0f1a8b5fdefba81700ebf88711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2NTg4ZmU2NTQzMmMwZjFhOGI1ZmRlZmJhODE3MDBlYmY4ODcxMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T08:01:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T08:01:16Z"}, "message": "aarch64: Fix {ash[lr],lshr}<mode>3 expanders [PR94488]\n\nThe following testcase ICEs on aarch64 apparently since the introduction of\nthe aarch64 port.  The reason is that the {ashl,ashr,lshr}<mode>3 expanders\ncompletely unnecessarily FAIL; if operands[2] is something other than\na CONST_INT or REG or MEM and the middle-end code can't cope with the\npattern giving up in these cases.  All the expanders use general_operand\npredicate for the shift amount operand, but then have just a special case\nfor CONST_INT (if in-bound, emit an immediate shift, otherwise force into\nREG), or MEM (force into REG), or REG (that is the case it handles).\nIn the testcase, operands[2] is a lowpart SUBREG of a REG, which is valid\ngeneral_operand.\nI don't see any reason what is magic about MEMs that it should be forced\ninto REG and others like SUBREGs that it shouldn't, there isn't even a\nreason to check for !REG_P because force_reg will do nothing if the operand\nis already a REG, and otherwise can handle general_operand just fine.\n\n2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94488\n\t* config/aarch64/aarch64-simd.md (ashl<mode>3, lshr<mode>3,\n\tashr<mode>3): Force operands[2] into reg whenever it is not CONST_INT.\n\tAssume it is a REG after that instead of testing it and doing FAIL\n\totherwise.  Formatting fix.\n\n\t* gcc.c-torture/compile/pr94488.c: New test.", "tree": {"sha": "d29ec8d82d9f8f99505d44ab2333b5f1ae085f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29ec8d82d9f8f99505d44ab2333b5f1ae085f34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a6588fe65432c0f1a8b5fdefba81700ebf88711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6588fe65432c0f1a8b5fdefba81700ebf88711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6588fe65432c0f1a8b5fdefba81700ebf88711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6588fe65432c0f1a8b5fdefba81700ebf88711/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d26118f96fa542ee078834bc3cb4eef6730451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d26118f96fa542ee078834bc3cb4eef6730451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d26118f96fa542ee078834bc3cb4eef6730451"}], "stats": {"total": 122, "additions": 53, "deletions": 69}, "files": [{"sha": "9f0e2bd1e6ff5246f84e919402c687687a84beb8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 31, "deletions": 69, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6588fe65432c0f1a8b5fdefba81700ebf88711/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6588fe65432c0f1a8b5fdefba81700ebf88711/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=7a6588fe65432c0f1a8b5fdefba81700ebf88711", "patch": "@@ -1105,31 +1105,17 @@\n \t\t\t\t\t\t     tmp));\n           DONE;\n         }\n-      else\n-        {\n-          operands[2] = force_reg (SImode, operands[2]);\n-        }\n-    }\n-  else if (MEM_P (operands[2]))\n-    {\n-      operands[2] = force_reg (SImode, operands[2]);\n     }\n \n-  if (REG_P (operands[2]))\n-    {\n-      rtx tmp = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_aarch64_simd_dup<mode> (tmp,\n-\t\t\t\t\t     convert_to_mode (<VEL>mode,\n-\t\t\t\t\t\t\t      operands[2],\n-\t\t\t\t\t\t\t      0)));\n-      emit_insn (gen_aarch64_simd_reg_sshl<mode> (operands[0], operands[1],\n-\t\t\t\t\t\t  tmp));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\n-)\n+  operands[2] = force_reg (SImode, operands[2]);\n+\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_aarch64_simd_dup<mode> (tmp, convert_to_mode (<VEL>mode,\n+\t\t\t\t\t\t\t       operands[2],\n+\t\t\t\t\t\t\t       0)));\n+  emit_insn (gen_aarch64_simd_reg_sshl<mode> (operands[0], operands[1], tmp));\n+  DONE;\n+})\n \n (define_expand \"lshr<mode>3\"\n   [(match_operand:VDQ_I 0 \"register_operand\")\n@@ -1152,31 +1138,19 @@\n \t\t\t\t\t\t  tmp));\n \t  DONE;\n \t}\n-      else\n-        operands[2] = force_reg (SImode, operands[2]);\n-    }\n-  else if (MEM_P (operands[2]))\n-    {\n-      operands[2] = force_reg (SImode, operands[2]);\n     }\n \n-  if (REG_P (operands[2]))\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-      rtx tmp1 = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_negsi2 (tmp, operands[2]));\n-      emit_insn (gen_aarch64_simd_dup<mode> (tmp1,\n-\t\t\t\t\t     convert_to_mode (<VEL>mode,\n-\t\t\t\t\t\t\t      tmp, 0)));\n-      emit_insn (gen_aarch64_simd_reg_shl<mode>_unsigned (operands[0],\n-\t\t\t\t\t\t\t  operands[1],\n-\t\t\t\t\t\t\t  tmp1));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\n-)\n+  operands[2] = force_reg (SImode, operands[2]);\n+\n+  rtx tmp = gen_reg_rtx (SImode);\n+  rtx tmp1 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_negsi2 (tmp, operands[2]));\n+  emit_insn (gen_aarch64_simd_dup<mode> (tmp1,\n+\t\t\t\t\t convert_to_mode (<VEL>mode, tmp, 0)));\n+  emit_insn (gen_aarch64_simd_reg_shl<mode>_unsigned (operands[0], operands[1],\n+\t\t\t\t\t\t      tmp1));\n+  DONE;\n+})\n \n (define_expand \"ashr<mode>3\"\n   [(match_operand:VDQ_I 0 \"register_operand\")\n@@ -1199,31 +1173,19 @@\n \t\t\t\t\t\t  tmp));\n           DONE;\n \t}\n-      else\n-        operands[2] = force_reg (SImode, operands[2]);\n-    }\n-  else if (MEM_P (operands[2]))\n-    {\n-      operands[2] = force_reg (SImode, operands[2]);\n     }\n \n-  if (REG_P (operands[2]))\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-      rtx tmp1 = gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_negsi2 (tmp, operands[2]));\n-      emit_insn (gen_aarch64_simd_dup<mode> (tmp1,\n-\t\t\t\t\t     convert_to_mode (<VEL>mode,\n-\t\t\t\t\t\t\t      tmp, 0)));\n-      emit_insn (gen_aarch64_simd_reg_shl<mode>_signed (operands[0],\n-\t\t\t\t\t\t\toperands[1],\n-\t\t\t\t\t\t\ttmp1));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\n-)\n+  operands[2] = force_reg (SImode, operands[2]);\n+\n+  rtx tmp = gen_reg_rtx (SImode);\n+  rtx tmp1 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_negsi2 (tmp, operands[2]));\n+  emit_insn (gen_aarch64_simd_dup<mode> (tmp1, convert_to_mode (<VEL>mode,\n+\t\t\t\t\t\t\t\ttmp, 0)));\n+  emit_insn (gen_aarch64_simd_reg_shl<mode>_signed (operands[0], operands[1],\n+\t\t\t\t\t\t    tmp1));\n+  DONE;\n+})\n \n (define_expand \"vashl<mode>3\"\n  [(match_operand:VDQ_I 0 \"register_operand\")"}, {"sha": "6e20a4168de15b320f5f0d06ef7cde8284adb078", "filename": "gcc/testsuite/gcc.c-torture/compile/pr94488.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a6588fe65432c0f1a8b5fdefba81700ebf88711/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a6588fe65432c0f1a8b5fdefba81700ebf88711/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94488.c?ref=7a6588fe65432c0f1a8b5fdefba81700ebf88711", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/94488 */\n+\n+typedef unsigned long V __attribute__((__vector_size__(16)));\n+typedef long W __attribute__((__vector_size__(16)));\n+\n+void\n+foo (V *x, unsigned long y)\n+{\n+  *x = *x >> (unsigned int) y;\n+}\n+\n+void\n+bar (V *x, unsigned long y)\n+{\n+  *x = *x << (unsigned int) y;\n+}\n+\n+void\n+baz (W *x, unsigned long y)\n+{\n+  *x = *x >> (unsigned int) y;\n+}"}]}