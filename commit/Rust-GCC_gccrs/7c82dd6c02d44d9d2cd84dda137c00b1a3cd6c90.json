{"sha": "7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MmRkNmMwMmQ0NGQ5ZDJjZDg0ZGRhMTM3YzAwYjFhM2NkNmM5MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-10T22:14:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-13T17:50:12Z"}, "message": "PR c++/33799 - destroy return value if local cleanup throws.\n\nThis is a pretty rare situation since the C++11 change to make all\ndestructors default to noexcept, but it is still possible to define throwing\ndestructors, and if a destructor for a local variable throws during the\nreturn, we've already constructed the return value, so now we need to\ndestroy it.  I handled this somewhat like the new-expression cleanup; as in\nthat case, this cleanup can't properly nest with the cleanups for local\nvariables, so I introduce a cleanup region around the whole function and a\nflag variable to indicate whether the return value actually needs to be\ndestroyed.\n\nSetting the flag requires giving a COMPOUND_EXPR as the operand of a\nRETURN_EXPR, so I adjust gimplify_return_expr to handle that.\n\nThis doesn't currently work with deduced return type because we don't know\nthe type when we're deciding whether to introduce the cleanup region.\n\ngcc/\n\t* gimplify.c (gimplify_return_expr): Handle COMPOUND_EXPR.\ngcc/cp/\n\t* cp-tree.h (current_retval_sentinel): New macro.\n\t* decl.c (start_preparsed_function): Set up cleanup for retval.\n\t* typeck.c (check_return_expr): Set current_retval_sentinel.", "tree": {"sha": "d5bf3e04c5a748eb795b36dd2aa133add540fa74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bf3e04c5a748eb795b36dd2aa133add540fa74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1acad4e43908e90ca2b5155a878639cbea4c4e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1acad4e43908e90ca2b5155a878639cbea4c4e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1acad4e43908e90ca2b5155a878639cbea4c4e1"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "803e7ea8408e82029e22b05361e768ccda980b2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/33799 - destroy return value if local cleanup throws.\n+\t* gimplify.c (gimplify_return_expr): Handle COMPOUND_EXPR.\n+\n 2020-01-13  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-cp.c (get_max_overall_size): Use newly"}, {"sha": "146c28087fb9ecce77ed68662d34fdc78448885a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -1,5 +1,10 @@\n 2020-01-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/33799 - destroy return value if local cleanup throws.\n+\t* cp-tree.h (current_retval_sentinel): New macro.\n+\t* decl.c (start_preparsed_function): Set up cleanup for retval.\n+\t* typeck.c (check_return_expr): Set current_retval_sentinel.\n+\n \tPR c++/93238 - short right-shift with enum.\n \t* typeck.c (cp_build_binary_op): Use folded op1 for short_shift.\n "}, {"sha": "c0f780df685be5a0d85e82c60eebde03fc07dcd0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -1952,6 +1952,13 @@ struct GTY(()) language_function {\n \n #define current_vtt_parm cp_function_chain->x_vtt_parm\n \n+/* A boolean flag to control whether we need to clean up the return value if a\n+   local destructor throws.  Only used in functions that return by value a\n+   class with a destructor.  Which 'tors don't, so we can use the same\n+   field as current_vtt_parm.  */\n+\n+#define current_retval_sentinel current_vtt_parm\n+\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n "}, {"sha": "52da0deef40b1915acbc66d5f9b62071239dd3c9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -16418,6 +16418,20 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   if (!DECL_OMP_DECLARE_REDUCTION_P (decl1))\n     start_lambda_scope (decl1);\n \n+  /* If cleaning up locals on return throws an exception, we need to destroy\n+     the return value that we just constructed.  */\n+  if (!processing_template_decl\n+      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (TREE_TYPE (decl1))))\n+    {\n+      tree retval = DECL_RESULT (decl1);\n+      tree dtor = build_cleanup (retval);\n+      current_retval_sentinel = get_temp_regvar (boolean_type_node,\n+\t\t\t\t\t\t boolean_false_node);\n+      dtor = build3 (COND_EXPR, void_type_node, current_retval_sentinel,\n+\t\t     dtor, void_node);\n+      push_cleanup (retval, dtor, /*eh-only*/true);\n+    }\n+\n   return true;\n }\n "}, {"sha": "2be4e2462c09a3de54186b36dc07de454b08ee2c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -10090,6 +10090,15 @@ check_return_expr (tree retval, bool *no_warning)\n   if (retval && retval != result)\n     retval = build2 (INIT_EXPR, TREE_TYPE (result), result, retval);\n \n+  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (valtype)\n+      /* FIXME doesn't work with deduced return type.  */\n+      && current_retval_sentinel)\n+    {\n+      tree set = build2 (MODIFY_EXPR, boolean_type_node,\n+\t\t\t current_retval_sentinel, boolean_true_node);\n+      retval = build2 (COMPOUND_EXPR, void_type_node, retval, set);\n+    }\n+\n   return retval;\n }\n "}, {"sha": "05d7922116b0da57ee3e25c0a52ad3dc66c51fb2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -1599,6 +1599,14 @@ gimplify_return_expr (tree stmt, gimple_seq *pre_p)\n \n   if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (current_function_decl))))\n     result_decl = NULL_TREE;\n+  else if (TREE_CODE (ret_expr) == COMPOUND_EXPR)\n+    {\n+      /* Used in C++ for handling EH cleanup of the return value if a local\n+\t cleanup throws.  Assume the front-end knows what it's doing.  */\n+      result_decl = DECL_RESULT (current_function_decl);\n+      /* But crash if we end up trying to modify ret_expr below.  */\n+      ret_expr = NULL_TREE;\n+    }\n   else\n     {\n       result_decl = TREE_OPERAND (ret_expr, 0);"}, {"sha": "7469d3128dca7ae77748f95af8dd1441a09da2c1", "filename": "gcc/testsuite/g++.dg/eh/return1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Freturn1.C?ref=7c82dd6c02d44d9d2cd84dda137c00b1a3cd6c90", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/33799\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+int c, d;\n+\n+#if __cplusplus >= 201103L\n+#define THROWS noexcept(false)\n+#else\n+#define THROWS\n+#endif\n+\n+struct X\n+{\n+  X(bool throws) : throws_(throws) { ++c; }\n+  X(const X& x) : throws_(x.throws_) { ++c; }\n+  ~X() THROWS\n+  {\n+    ++d;\n+    if (throws_) { throw 1; }\n+  }\n+private:\n+  bool throws_;\n+};\n+\n+X f()\n+{\n+  X x(true);\n+  return X(false);\n+}\n+\n+int main()\n+{\n+  try { f(); }\n+  catch (...) {}\n+\n+  if (c != d)\n+    throw;\n+}"}]}