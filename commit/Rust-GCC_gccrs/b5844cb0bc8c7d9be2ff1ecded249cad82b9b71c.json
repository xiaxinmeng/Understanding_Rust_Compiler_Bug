{"sha": "b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "node_id": "C_kwDOANBUbNoAKGI1ODQ0Y2IwYmM4YzdkOWJlMmZmMWVjZGVkMjQ5Y2FkODJiOWI3MWM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-17T07:48:37Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-22T03:24:11Z"}, "message": "Don't allow mask/sse/mmx mov in TLS code sequences.\n\nAs change in assembler, refer to [1], this patch disallow mask/sse/mmx\nmov in TLS code sequences which require integer MOV instructions.\n\n[1] https://sourceware.org/git/?p=binutils-gdb.git;a=patch;h=d7e3e627027fcf37d63e284144fe27ff4eba36b5\n\ngcc/ChangeLog:\n\n\tPR target/103275\n\t* config/i386/constraints.md (Bk): New\n\tdefine_memory_constraint.\n\t* config/i386/i386-protos.h (ix86_gpr_tls_address_pattern_p):\n\tDeclare.\n\t* config/i386/i386.c (ix86_gpr_tls_address_pattern_p): New\n\tfunction.\n\t* config/i386/i386.md (*movsi_internal): Don't allow\n\tmask/sse/mmx move in TLS code sequences.\n\t(*movdi_internal): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr103275.c: New test.", "tree": {"sha": "c198cb62c5ac097569b97a3ce23cd727eba4a068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c198cb62c5ac097569b97a3ce23cd727eba4a068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5b8610e985e23a0c2e0272339ab074a750e240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5b8610e985e23a0c2e0272339ab074a750e240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5b8610e985e23a0c2e0272339ab074a750e240"}], "stats": {"total": 127, "additions": 123, "deletions": 4}, "files": [{"sha": "6b291a02d88e825e5e1b1dfb9a0ec28be07841c9", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "patch": "@@ -186,6 +186,11 @@\n   (and (match_operand 0 \"memory_operand\")\n        (match_test \"constant_address_p (XEXP (op, 0))\")))\n \n+(define_memory_constraint \"Bk\"\n+  \"@internal TLS address that allows insn using non-integer registers.\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (not (match_test \"ix86_gpr_tls_address_pattern_p (op)\"))))\n+\n (define_special_memory_constraint \"Bn\"\n   \"@internal Memory operand without REX prefix.\"\n   (match_operand 0 \"norex_memory_operand\"))"}, {"sha": "1cd219798e32fda6a0390bb114dc81976c4b6a76", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "patch": "@@ -243,6 +243,7 @@ extern unsigned int ix86_get_callcvt (const_tree);\n #endif\n \n extern rtx ix86_tls_module_base (void);\n+extern bool ix86_gpr_tls_address_pattern_p (rtx);\n extern bool ix86_tls_address_pattern_p (rtx);\n extern rtx ix86_rewrite_tls_address (rtx);\n "}, {"sha": "10bfa0e74595e8e31f7e293e172b191a06c26611", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "patch": "@@ -11628,6 +11628,36 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n   return dest;\n }\n \n+/* Return true if the TLS address requires insn using integer registers.\n+   It's used to prevent KMOV/VMOV in TLS code sequences which require integer\n+   MOV instructions, refer to PR103275.  */\n+bool\n+ix86_gpr_tls_address_pattern_p (rtx mem)\n+{\n+  gcc_assert (MEM_P (mem));\n+\n+  rtx addr = XEXP (mem, 0);\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, addr, ALL)\n+    {\n+      rtx op = *iter;\n+      if (GET_CODE (op) == UNSPEC)\n+\tswitch (XINT (op, 1))\n+\t  {\n+\t  case UNSPEC_GOTNTPOFF:\n+\t    return true;\n+\t  case UNSPEC_TPOFF:\n+\t    if (!TARGET_64BIT)\n+\t      return true;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+\n+  return false;\n+}\n+\n /* Return true if OP refers to a TLS address.  */\n bool\n ix86_tls_address_pattern_p (rtx op)"}, {"sha": "03d401efff8d885c8c7dbd3533df50655a8c14c8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "patch": "@@ -2164,9 +2164,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k ,*r,*m,*k\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,m,?r ,?*Yd,?r,?*v,?*y,?*x,*k,*k  ,*r,*m,*k\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*km,*k,*k,CBC\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,Bk ,*y,*y,r  ,C ,*v,Bk,*v,v,*Yd,r   ,*v,r  ,*x ,*y ,*r,*kBk,*k,*k,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n {\n@@ -2385,9 +2385,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k ,*rm,*k\")\n+    \"=r,m ,*y,*y,?*y,?m,?r,?*y,*v,*v,*v,m ,?r,?*v,*k,*k  ,*rm,*k\")\n \t(match_operand:SI 1 \"general_operand\"\n-    \"g ,re,C ,*y,m  ,*y,*y,r  ,C ,*v,m ,*v,*v,r  ,*r,*km,*k ,CBC\"))]\n+    \"g ,re,C ,*y,Bk ,*y,*y,r  ,C ,*v,Bk,*v,*v,r  ,*r,*kBk,*k ,CBC\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n {"}, {"sha": "c93413f3cded7095a547ca1e497f6bd936ed8248", "filename": "gcc/testsuite/gcc.target/i386/pr103275.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103275.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103275.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103275.c?ref=b5844cb0bc8c7d9be2ff1ecded249cad82b9b71c", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile { target ia32 } }  */\n+/* { dg-options \"-O2 -march=tigerlake -fPIC\" } */\n+/* { dg-final { scan-assembler-not {(?n)kmovd.*@gotntpoff} } }  */\n+\n+typedef unsigned short uint16_t;\n+typedef int int32_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned char uint8_t;\n+\n+typedef uint32_t in_addr_t;\n+struct in_addr { in_addr_t s_addr; };\n+\n+extern __thread const uint16_t * __libc_tsd_CTYPE_B __attribute__ ((tls_model (\"initial-exec\")));\n+extern __thread int __libc_errno __attribute__ ((tls_model (\"initial-exec\")));\n+\n+extern unsigned long strtoul (const char*, char**, int);\n+extern uint32_t __bswap_32 (in_addr_t);\n+int\n+inet_aton_end (const char *cp, struct in_addr *addr, const char **endp)\n+{\n+  static const in_addr_t max[4] = { 0xffffffff, 0xffffff, 0xffff, 0xff };\n+  in_addr_t val;\n+  char c;\n+  union iaddr\n+  {\n+    uint8_t bytes[4];\n+    uint32_t word;\n+  } res;\n+  uint8_t *pp = res.bytes;\n+  int digit;\n+\n+  int saved_errno = __libc_errno;\n+  __libc_errno = 0;\n+  res.word = 0;\n+  c = *cp;\n+\n+  for (;;)\n+    {\n+      if (c < '0' || c > '9')\n+\tgoto ret_0;\n+      {\n+\tchar *endp;\n+\tunsigned long ul = strtoul (cp, &endp, 0);\n+\tif (ul == 0x7fffffffL && __libc_errno == 34)\n+\t  goto ret_0;\n+\tif (ul > 0xfffffffful)\n+\t  goto ret_0;\n+\tval = ul;\n+\tdigit = cp != endp;\n+\tcp = endp;\n+      }\n+      c = *cp;\n+      if (c == '.')\n+\t{\n+\t  if (pp > res.bytes + 2 || val > 0xff)\n+\t    goto ret_0;\n+\t  *pp++ = val;\n+\t  c = *++cp;\n+\t}\n+      else\n+\tbreak;\n+    }\n+\n+  if (!(__libc_tsd_CTYPE_B[(int)c] & 8192))\n+    goto ret_0;\n+\n+  if (!digit)\n+    goto ret_0;\n+\n+  if (val > max[pp - res.bytes])\n+    goto ret_0;\n+\n+  if (addr != 0)\n+    addr->s_addr = res.word | __bswap_32 (val);\n+  *endp = cp;\n+\n+  __libc_errno = saved_errno;\n+  return 1;\n+\n+ ret_0:\n+  __libc_errno = saved_errno;\n+  return 0;\n+}"}]}