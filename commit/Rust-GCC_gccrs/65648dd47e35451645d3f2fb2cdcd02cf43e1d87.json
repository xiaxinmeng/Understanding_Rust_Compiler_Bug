{"sha": "65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2NDhkZDQ3ZTM1NDUxNjQ1ZDNmMmZiMmNkY2QwMmNmNDNlMWQ4Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-12T13:24:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-12T13:24:06Z"}, "message": "re PR tree-optimization/34027 (-Os code size nearly doubled)\n\n2007-11-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/34027\n\t* fold-const.c (fold_binary): Fold n - (n / m) * m to n % m.\n\t(fold_binary): Fold unsinged FLOOR_DIV_EXPR to TRUNC_DIV_EXPR.\n\n\t* gcc.dg/pr34027-1.c: New testcase.\n\t* gcc.dg/pr34027-2.c: Likewise.\n\nFrom-SVN: r130097", "tree": {"sha": "1748ca812d38b49f003e3b8885790ebee8e08000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1748ca812d38b49f003e3b8885790ebee8e08000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50d76c246f1268b945c941c24d877b7acc5acae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d76c246f1268b945c941c24d877b7acc5acae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d76c246f1268b945c941c24d877b7acc5acae9"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "b95f35d96793607be7b00a48e35a1ec3b700ca8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "patch": "@@ -1,3 +1,12 @@\n+2007-11-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34027\n+\t* fold-const.c (fold_binary): Fold n - (n / m) * m to n % m.\n+\t(fold_binary): Fold unsinged FLOOR_DIV_EXPR to TRUNC_DIV_EXPR.\n+\n+\t* gcc.dg/pr34027-1.c: New testcase.\n+\t* gcc.dg/pr34027-2.c: Likewise.\n+\n 2007-11-12  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/33953"}, {"sha": "5b81d88fd572b2fce7bc6473da551539e5976c52", "filename": "gcc/fold-const.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "patch": "@@ -9653,6 +9653,21 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t  return omit_one_operand (type, t1, arg0);\n \t\t}\n \t    }\n+\n+\t  /* X + (X / CST) * -CST is X % CST.  */\n+\t  if (TREE_CODE (arg1) == MULT_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (arg1, 0)) == TRUNC_DIV_EXPR\n+\t      && operand_equal_p (arg0,\n+\t\t\t\t  TREE_OPERAND (TREE_OPERAND (arg1, 0), 0), 0))\n+\t    {\n+\t      tree cst0 = TREE_OPERAND (TREE_OPERAND (arg1, 0), 1);\n+\t      tree cst1 = TREE_OPERAND (arg1, 1);\n+\t      tree sum = fold_binary (PLUS_EXPR, TREE_TYPE (cst1), cst1, cst0);\n+\t      if (sum && integer_zerop (sum))\n+\t\treturn fold_convert (type,\n+\t\t\t\t     fold_build2 (TRUNC_MOD_EXPR,\n+\t\t\t\t\t\t  TREE_TYPE (arg0), arg0, cst0));\n+\t    }\n \t}\n \n       /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the\n@@ -10061,6 +10076,19 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && integer_all_onesp (arg0))\n \treturn fold_build1 (BIT_NOT_EXPR, type, op1);\n \n+\n+      /* X - (X / CST) * CST is X % CST.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (arg1) == MULT_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == TRUNC_DIV_EXPR\n+\t  && operand_equal_p (arg0,\n+\t\t\t      TREE_OPERAND (TREE_OPERAND (arg1, 0), 0), 0)\n+\t  && operand_equal_p (TREE_OPERAND (TREE_OPERAND (arg1, 0), 1),\n+\t\t\t      TREE_OPERAND (arg1, 1), 0))\n+\treturn fold_convert (type,\n+\t\t\t     fold_build2 (TRUNC_MOD_EXPR, TREE_TYPE (arg0),\n+\t\t\t\t\t  arg0, TREE_OPERAND (arg1, 1)));\n+\n       if (! FLOAT_TYPE_P (type))\n \t{\n \t  if (integer_zerop (arg0))\n@@ -11221,6 +11249,14 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\t  fold_convert (type, arg0), sh_cnt);\n \t    }\n \t}\n+\n+      /* For unsigned integral types, FLOOR_DIV_EXPR is the same as\n+\t TRUNC_DIV_EXPR.  Rewrite into the latter in this case.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TYPE_UNSIGNED (type)\n+\t  && code == FLOOR_DIV_EXPR)\n+\treturn fold_build2 (TRUNC_DIV_EXPR, type, op0, op1);\n+\n       /* Fall thru */\n \n     case ROUND_DIV_EXPR:"}, {"sha": "e22485905ac904a135010925d15530a3f6a0a2a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "patch": "@@ -1,3 +1,9 @@\n+2007-11-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/34027\n+\t* gcc.dg/pr34027-1.c: New testcase.\n+\t* gcc.dg/pr34027-2.c: Likewise.\n+\n 2007-11-12  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/33953"}, {"sha": "532e4976dc37eb3de322662580a60973131860d6", "filename": "gcc/testsuite/gcc.dg/pr34027-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c?ref=65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-optimized\" } */\n+\n+unsigned long foobar(unsigned long ns)\n+{\n+  while(ns >= 10000L)\n+    ns -= 10000L;\n+  return ns;\n+}\n+\n+/* { dg-final { scan-tree-dump \"ns % 10000\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "70c4561d0f10635564538ec259042499403a72f2", "filename": "gcc/testsuite/gcc.dg/pr34027-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65648dd47e35451645d3f2fb2cdcd02cf43e1d87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-2.c?ref=65648dd47e35451645d3f2fb2cdcd02cf43e1d87", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+long foo(long n, long m)\n+{\n+  return n - (n / m) * m;\n+}\n+\n+/* { dg-final { scan-tree-dump \"n % m\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}