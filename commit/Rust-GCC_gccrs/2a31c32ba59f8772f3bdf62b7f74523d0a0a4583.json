{"sha": "2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzMWMzMmJhNTlmODc3MmYzYmRmNjJiN2Y3NDUyM2QwYTBhNDU4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-25T09:34:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-25T09:34:02Z"}, "message": "[multiple changes]\n\n2009-06-25  Vincent Celier  <celier@adacore.com>\n\n\t* vms_data.ads: Minor comment change\n\n2009-06-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Don't build an\n\tassignment statement to targeting a caller-provided object when the\n\tresult type is an interface type.\n\n\t* exp_ch6.adb (Expand_Call): Remove redundant test of\n\tIs_Limited_Interface (Is_Inherently_Limited is sufficient).\n\t(Is_Build_In_Place_Function): Remove test for Is_Limited_Interface.\n\n\t* sem_aggr.adb (Check_Expr_OK_In_Limited_Aggregate): Add type in call\n\tto OK_For_Limited_Init.\n\n\t* sem_aux.adb (Is_Inherently_Limited_Type): Revise limited type\n\tcondition so that True is returned for all limited interfaces, not\n\tjust synchronized ones. Ignore components of an interface type when\n\tchecking for limited components (such a component can be a parent\n\tcomponent).\n\n\t* sem_ch3.ads (OK_For_Limited_Init_In_05): Add type parameter.\n\t(OK_For_Limited_Init): Add type parameter.\n\n\t* sem_ch3.adb (Check_Initialization): Add type in call to\n\tOK_For_Limited_Init.\n\t(OK_For_Limited_Init): Add new type param in call to\n\tOK_For_Limited_Init_In_05.\n\t(OK_For_Limited_Init_In_05): Permit arbitrary expressions of a\n\tnonlimited type when the context type is a limited interface. Add type\n\ton recursive calls.\n\n\t* sem_ch4.adb (Analyze_Allocator): Add type in call to\n\tOK_For_Limited_Init.\n\n\t* sem_ch6.adb (Check_Limited_Return): Add type in call to\n\tOK_For_Limited_Init.\n\n\t* sem_ch12.adb (Analyze_Formal_Object_Declaration): Add type in call to\n\tOK_For_Limited_Init.\n\t(Instantiate_Object): Add type in call to OK_For_Limited_Init.\n\n\t* sem_type.adb (Interface_Present_In_Ancestor): In the case of a\n\tclass-wide interface, get the base type before applying Etype, in order\n\tto account for class-wide subtypes.\n\nFrom-SVN: r148938", "tree": {"sha": "e33ff61b64fe2dc5c8b03a655de538b8f1d30368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33ff61b64fe2dc5c8b03a655de538b8f1d30368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/comments", "author": null, "committer": null, "parents": [{"sha": "fadcf3134557b94e1e52b8d9d6aa95e2ec2443ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fadcf3134557b94e1e52b8d9d6aa95e2ec2443ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fadcf3134557b94e1e52b8d9d6aa95e2ec2443ef"}], "stats": {"total": 201, "additions": 157, "deletions": 44}, "files": [{"sha": "e8918c4b1e8f88fa5c91535c5f5b9f67a9fca23b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -1,3 +1,51 @@\n+2009-06-25  Vincent Celier  <celier@adacore.com>\n+\n+\t* vms_data.ads: Minor comment change\n+\n+2009-06-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Extended_Return_Statement): Don't build an\n+\tassignment statement to targeting a caller-provided object when the\n+\tresult type is an interface type.\n+\n+\t* exp_ch6.adb (Expand_Call): Remove redundant test of\n+\tIs_Limited_Interface (Is_Inherently_Limited is sufficient).\n+\t(Is_Build_In_Place_Function): Remove test for Is_Limited_Interface.\n+\n+\t* sem_aggr.adb (Check_Expr_OK_In_Limited_Aggregate): Add type in call\n+\tto OK_For_Limited_Init.\n+\n+\t* sem_aux.adb (Is_Inherently_Limited_Type): Revise limited type\n+\tcondition so that True is returned for all limited interfaces, not\n+\tjust synchronized ones. Ignore components of an interface type when\n+\tchecking for limited components (such a component can be a parent\n+\tcomponent).\n+\n+\t* sem_ch3.ads (OK_For_Limited_Init_In_05): Add type parameter.\n+\t(OK_For_Limited_Init): Add type parameter.\n+\n+\t* sem_ch3.adb (Check_Initialization): Add type in call to\n+\tOK_For_Limited_Init.\n+\t(OK_For_Limited_Init): Add new type param in call to\n+\tOK_For_Limited_Init_In_05.\n+\t(OK_For_Limited_Init_In_05): Permit arbitrary expressions of a\n+\tnonlimited type when the context type is a limited interface. Add type\n+\ton recursive calls.\n+\n+\t* sem_ch4.adb (Analyze_Allocator): Add type in call to\n+\tOK_For_Limited_Init.\n+\n+\t* sem_ch6.adb (Check_Limited_Return): Add type in call to\n+\tOK_For_Limited_Init.\n+\n+\t* sem_ch12.adb (Analyze_Formal_Object_Declaration): Add type in call to\n+\tOK_For_Limited_Init.\n+\t(Instantiate_Object): Add type in call to OK_For_Limited_Init.\n+\n+\t* sem_type.adb (Interface_Present_In_Ancestor): In the case of a\n+\tclass-wide interface, get the base type before applying Etype, in order\n+\tto account for class-wide subtypes.\n+\n 2009-06-25  Emmanuel Briot  <briot@adacore.com>\n \n \t* gnatcmd.adb, prj-proc.adb, make.adb, prj.adb, prj.ads, prj-nmsc.adb,"}, {"sha": "0659c7ef8f909536a00de73161449646dd4101de", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -2694,10 +2694,21 @@ package body Exp_Ch5 is\n                --  and the declaration isn't marked as No_Initialization, then\n                --  we need to generate an assignment to the object and insert\n                --  it after the declaration before rewriting it as a renaming\n-               --  (otherwise we'll lose the initialization).\n+               --  (otherwise we'll lose the initialization). The case where\n+               --  the result type is an interface (or class-wide interface)\n+               --  is also excluded because the context of the function call\n+               --  must be unconstrained, so the initialization will always\n+               --  be done as part of an allocator evaluation (storage pool\n+               --  or secondary stack), never to a constrained target object\n+               --  passed in by the caller. Besides the assignment being\n+               --  unneeded in this case, it avoids problems with trying to\n+               --  generate a dispatching assignment when the return expression\n+               --  is a nonlimited descendant of a limited interface (the\n+               --  interface has no assignment operation).\n \n                if Present (Return_Obj_Expr)\n                  and then not No_Initialization (Return_Object_Decl)\n+                 and then not Is_Interface (Return_Obj_Typ)\n                then\n                   Init_Assignment :=\n                     Make_Assignment_Statement (Loc,\n@@ -2822,12 +2833,21 @@ package body Exp_Ch5 is\n                      if Present (Return_Obj_Expr)\n                        and then not No_Initialization (Return_Object_Decl)\n                      then\n+                        --  Always use the type of the expression for the\n+                        --  qualified expression, rather than the result type.\n+                        --  In general we cannot always use the result type\n+                        --  for the allocator, because the expression might be\n+                        --  of a specific type, such as in the case of an\n+                        --  aggregate or even a nonlimited object when the\n+                        --  result type is a limited class-wide interface type.\n+\n                         Heap_Allocator :=\n                           Make_Allocator (Loc,\n                             Expression =>\n                               Make_Qualified_Expression (Loc,\n                                 Subtype_Mark =>\n-                                  New_Reference_To (Return_Obj_Typ, Loc),\n+                                  New_Reference_To\n+                                    (Etype (Return_Obj_Expr), Loc),\n                                 Expression =>\n                                   New_Copy_Tree (Return_Obj_Expr)));\n "}, {"sha": "991783f9415f40043f83cf2d22cb2b6929d94e2f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -3065,7 +3065,6 @@ package body Exp_Ch6 is\n \n       if Needs_Finalization (Etype (Subp))\n         and then not Is_Inherently_Limited_Type (Etype (Subp))\n-        and then not Is_Limited_Interface (Etype (Subp))\n       then\n          Expand_Ctrl_Function_Call (N);\n       end if;\n@@ -4653,12 +4652,10 @@ package body Exp_Ch6 is\n          then\n             return False;\n \n-         --  If the return type is a limited interface it has to be treated\n-         --  as a return in place, even if the actual object is some non-\n-         --  limited descendant.\n-\n-         elsif Is_Limited_Interface (Etype (E)) then\n-            return True;\n+         --  In Ada 2005 all functions with an inherently limited return type\n+         --  must be handled using a build-in-place profile, including the case\n+         --  of a function with a limited interface result, where the function\n+         --  may return objects of nonlimited descendants.\n \n          else\n             return Is_Inherently_Limited_Type (Etype (E))"}, {"sha": "43ed7c01295fe9c0eef0d672a2a7d6e0b5e6debd", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -776,7 +776,7 @@ package body Sem_Aggr is\n          and then Comes_From_Source (Expr)\n          and then not In_Instance_Body\n       then\n-         if not OK_For_Limited_Init (Expr) then\n+         if not OK_For_Limited_Init (Etype (Expr), Expr) then\n             Error_Msg_N (\"initialization not allowed for limited types\", Expr);\n             Explain_Limited_Type (Etype (Expr), Expr);\n          end if;"}, {"sha": "6513e73d07352f5f5519803f03ea29bcdd8eeb1e", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -594,11 +594,16 @@ package body Sem_Aux is\n          return True;\n \n       elsif Is_Record_Type (Btype) then\n+\n+         --  Note that we return True for all limited interfaces, even though\n+         --  (unsynchronized) limited interfaces can have descendants that are\n+         --  nonlimited, because this is a predicate on the type itself, and\n+         --  things like functions with limited interface results need to be\n+         --  handled as build in place even though they might return objects\n+         --  of a type that is not inherently limited.\n+\n          if Is_Limited_Record (Btype) then\n-            return not Is_Interface (Btype)\n-              or else Is_Protected_Interface (Btype)\n-              or else Is_Synchronized_Interface (Btype)\n-              or else Is_Task_Interface (Btype);\n+            return True;\n \n          elsif Is_Class_Wide_Type (Btype) then\n             return Is_Inherently_Limited_Type (Root_Type (Btype));\n@@ -610,7 +615,16 @@ package body Sem_Aux is\n             begin\n                C := First_Component (Btype);\n                while Present (C) loop\n-                  if Is_Inherently_Limited_Type (Etype (C)) then\n+\n+                  --  Don't consider components with interface types (which can\n+                  --  only occur in the case of a _parent component anyway).\n+                  --  They don't have any components, plus it would cause this\n+                  --  function to return true for nonlimited types derived from\n+                  --  limited intefaces.\n+\n+                  if not Is_Interface (Etype (C))\n+                    and then Is_Inherently_Limited_Type (Etype (C))\n+                  then\n                      return True;\n                   end if;\n "}, {"sha": "9afdb0a5a48d768648b416022a76932b01f4dfda", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -1884,7 +1884,7 @@ package body Sem_Ch12 is\n          if Present (E) then\n             Preanalyze_Spec_Expression (E, T);\n \n-            if Is_Limited_Type (T) and then not OK_For_Limited_Init (E) then\n+            if Is_Limited_Type (T) and then not OK_For_Limited_Init (T, E) then\n                Error_Msg_N\n                  (\"initialization not allowed for limited types\", E);\n                Explain_Limited_Type (T, E);\n@@ -8434,7 +8434,7 @@ package body Sem_Ch12 is\n                end if;\n \n                if Is_Limited_Type (Typ)\n-                 and then not OK_For_Limited_Init (Actual)\n+                 and then not OK_For_Limited_Init (Typ, Actual)\n                then\n                   Error_Msg_N\n                     (\"initialization not allowed for limited types\", Actual);"}, {"sha": "488b300ab69e0db4dc5586ae95109f0fda468231", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -8780,7 +8780,7 @@ package body Sem_Ch3 is\n         and then not In_Instance\n         and then not In_Inlined_Body\n       then\n-         if not OK_For_Limited_Init (Exp) then\n+         if not OK_For_Limited_Init (T, Exp) then\n \n             --  In GNAT mode, this is just a warning, to allow it to be evilly\n             --  turned off. Otherwise it is a real error.\n@@ -15316,20 +15316,36 @@ package body Sem_Ch3 is\n    --  ???Check all calls of this, and compare the conditions under which it's\n    --  called.\n \n-   function OK_For_Limited_Init (Exp : Node_Id) return Boolean is\n+   function OK_For_Limited_Init\n+     (Typ : Entity_Id;\n+      Exp : Node_Id) return Boolean\n+   is\n    begin\n       return Is_CPP_Constructor_Call (Exp)\n         or else (Ada_Version >= Ada_05\n                   and then not Debug_Flag_Dot_L\n-                  and then OK_For_Limited_Init_In_05 (Exp));\n+                  and then OK_For_Limited_Init_In_05 (Typ, Exp));\n    end OK_For_Limited_Init;\n \n    -------------------------------\n    -- OK_For_Limited_Init_In_05 --\n    -------------------------------\n \n-   function OK_For_Limited_Init_In_05 (Exp : Node_Id) return Boolean is\n+   function OK_For_Limited_Init_In_05\n+     (Typ : Entity_Id;\n+      Exp : Node_Id) return Boolean\n+   is\n    begin\n+      --  An object of a limited interface type can be initialized with any\n+      --  expression of a nonlimited descendant type.\n+\n+      if Is_Class_Wide_Type (Typ)\n+        and then Is_Limited_Interface (Typ)\n+        and then not Is_Limited_Type (Etype (Exp))\n+      then\n+         return True;\n+      end if;\n+\n       --  Ada 2005 (AI-287, AI-318): Relax the strictness of the front end in\n       --  case of limited aggregates (including extension aggregates), and\n       --  function calls. The function call may have been give in prefixed\n@@ -15341,7 +15357,8 @@ package body Sem_Ch3 is\n \n          when N_Qualified_Expression =>\n             return\n-              OK_For_Limited_Init_In_05 (Expression (Original_Node (Exp)));\n+              OK_For_Limited_Init_In_05\n+                (Typ, Expression (Original_Node (Exp)));\n \n          --  Ada 2005 (AI-251): If a class-wide interface object is initialized\n          --  with a function call, the expander has rewritten the call into an\n@@ -15354,7 +15371,8 @@ package body Sem_Ch3 is\n          when N_Type_Conversion | N_Unchecked_Type_Conversion =>\n             return not Comes_From_Source (Exp)\n               and then\n-                OK_For_Limited_Init_In_05 (Expression (Original_Node (Exp)));\n+                OK_For_Limited_Init_In_05\n+                  (Typ, Expression (Original_Node (Exp)));\n \n          when N_Indexed_Component | N_Selected_Component  =>\n             return Nkind (Exp) = N_Function_Call;"}, {"sha": "c8fc885e771e8dda2d657ec58db13219dac932d8", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -182,18 +182,24 @@ package Sem_Ch3 is\n    --  wide type is created at the same time, and therefore there is a private\n    --  and a full declaration for the class-wide type as well.\n \n-   function OK_For_Limited_Init_In_05 (Exp : Node_Id) return Boolean;\n-   --  Presuming Exp is an expression of an inherently limited type, returns\n-   --  True if the expression is allowed in an initialization context by the\n-   --  rules of Ada 2005. We use the rule in RM-7.5(2.1/2), \"...it is an\n-   --  aggregate, a function_call, or a parenthesized expression or\n-   --  qualified_expression whose operand is permitted...\". Note that in Ada\n-   --  95 mode, we sometimes wish to give warnings based on whether the\n-   --  program _would_ be legal in Ada 2005. Note that Exp must already have\n-   --  been resolved, so we can know whether it's a function call (as opposed\n-   --  to an indexed component, for example).\n-\n-   function OK_For_Limited_Init (Exp : Node_Id) return Boolean;\n+   function OK_For_Limited_Init_In_05\n+     (Typ : Entity_Id;\n+      Exp : Node_Id) return Boolean;\n+   --  Presuming Exp is an expression of an inherently limited type Typ,\n+   --  returns True if the expression is allowed in an initialization context\n+   --  by the rules of Ada 2005. We use the rule in RM-7.5(2.1/2), \"...it is an\n+   --  aggregate, a function_call, or a parenthesized expression or qualified\n+   --  expression whose operand is permitted...\". Note that in Ada 95 mode,\n+   --  we sometimes wish to give warnings based on whether the program _would_\n+   --  be legal in Ada 2005. Note that Exp must already have been resolved,\n+   --  so we can know whether it's a function call (as opposed to an indexed\n+   --  component, for example). In the case where Typ is a limited interface's\n+   --  class-wide type, then the expression is allowed to be of any kind if its\n+   --  type is a nonlimited descendant of the interface.\n+\n+   function OK_For_Limited_Init\n+     (Typ : Entity_Id;\n+      Exp : Node_Id) return Boolean;\n    --  Always False in Ada 95 mode. Equivalent to OK_For_Limited_Init_In_05 in\n    --  Ada 2005 mode.\n "}, {"sha": "06d075211ffef28cf6cccefb7c16dbf55789af8b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -387,7 +387,7 @@ package body Sem_Ch4 is\n            and then Comes_From_Source (N)\n            and then not In_Instance_Body\n          then\n-            if not OK_For_Limited_Init (Expression (E)) then\n+            if not OK_For_Limited_Init (Type_Id, Expression (E)) then\n                Error_Msg_N (\"initialization not allowed for limited types\", N);\n                Explain_Limited_Type (Type_Id, N);\n             end if;"}, {"sha": "2fa6cf81918747951b637c9b5a59c4b5a141cf60", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -464,7 +464,7 @@ package body Sem_Ch6 is\n          if Is_Limited_Type (R_Type)\n            and then Comes_From_Source (N)\n            and then not In_Instance_Body\n-           and then not OK_For_Limited_Init_In_05 (Expr)\n+           and then not OK_For_Limited_Init_In_05 (R_Type, Expr)\n          then\n             --  Error in Ada 2005\n "}, {"sha": "5883e3fe867c97d1f7351189da43976aabf9b14f", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -2367,8 +2367,10 @@ package body Sem_Type is\n    --  Start of processing for Interface_Present_In_Ancestor\n \n    begin\n+      --  Iface might be a class-wide subtype, so we have to apply Base_Type\n+\n       if Is_Class_Wide_Type (Iface) then\n-         Iface_Typ := Etype (Iface);\n+         Iface_Typ := Etype (Base_Type (Iface));\n       else\n          Iface_Typ := Iface;\n       end if;"}, {"sha": "a8565c3d2e27c80bbb5b832fa66fcdd8c51e6c93", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31c32ba59f8772f3bdf62b7f74523d0a0a4583/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=2a31c32ba59f8772f3bdf62b7f74523d0a0a4583", "patch": "@@ -820,12 +820,19 @@ package VMS_Data is\n    --\n    --   Work quietly, only output warnings and errors.\n \n-   S_Check_Time  : aliased constant S := \"/TIME \"                        &\n-                                            \"-t\";\n+   S_Check_Time     : aliased constant S := \"/TIME \"                       &\n+                                               \"-t\";\n    --        /NOTIME (D)\n-   --        /QUIET\n+   --        /TIME\n+   --\n+   --   Print out execution time\n+\n+   S_Check_Log      : aliased constant S := \"/LOG \"                        &\n+                                               \"-log\";\n+   --        /NOLOG (D)\n+   --        /LOG\n    --\n-   --   Print  out execution time\n+   --   Duplicate all the output sent to Stderr into a log file.\n \n    S_Check_Sections : aliased constant S := \"/SECTIONS=\"                   &\n                                             \"DEFAULT \"                     &\n@@ -901,6 +908,7 @@ package VMS_Data is\n                        S_Check_Project  'Access,\n                        S_Check_Quiet    'Access,\n                        S_Check_Time     'Access,\n+                       S_Check_Log      'Access,\n                        S_Check_Sections 'Access,\n                        S_Check_Short    'Access,\n                        S_Check_Subdirs  'Access,"}]}