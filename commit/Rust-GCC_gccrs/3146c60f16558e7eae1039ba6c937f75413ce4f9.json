{"sha": "3146c60f16558e7eae1039ba6c937f75413ce4f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0NmM2MGYxNjU1OGU3ZWFlMTAzOWJhNmM5MzdmNzU0MTNjZTRmOQ==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-19T18:28:11Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-19T18:28:11Z"}, "message": "re PR tree-optimization/87473 (ICE in create_add_on_incoming_edge, at gimple-ssa-strength-reduction.c:2344)\n\n[gcc]\n\n2018-10-19  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/87473\n\t* gimple-ssa-strength-reduction.c (record_phi_increments_1): For\n\tphi arguments identical to the base expression of the phi\n\tcandidate, record a phi-adjust increment of zero minus the index\n\texpression of the hidden basis.\n\t(phi_incr_cost_1): For phi arguments identical to the base\n\texpression of the phi candidate, the difference to compare against\n\tthe increment is zero minus the index expression of the hidden\n\tbasis, and there is no potential savings from replacing the (phi)\n\tstatement.\n\t(ncd_with_phi): For phi arguments identical to the base expression\n\tof the phi candidate, the difference to compare against the\n\tincrement is zero minus the index expression of the hidden basis.\n\t(all_phi_incrs_profitable_1): For phi arguments identical to the\n\tbase expression of the phi candidate, the increment to be checked\n\tfor profitability is zero minus the index expression of the hidden\n\tbasis.\n\n[gcc/testsuite]\n\n2018-10-19  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\tPR tree-optimization/87473\n\t* gcc.c-torture/compile/pr87473.c: New file.\n\nFrom-SVN: r265319", "tree": {"sha": "1095403462d7da08f6d6f4b0e38a5135c80d380c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1095403462d7da08f6d6f4b0e38a5135c80d380c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3146c60f16558e7eae1039ba6c937f75413ce4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3146c60f16558e7eae1039ba6c937f75413ce4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3146c60f16558e7eae1039ba6c937f75413ce4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3146c60f16558e7eae1039ba6c937f75413ce4f9/comments", "author": null, "committer": null, "parents": [{"sha": "273f3d4bb4734845ce527bf92b4781e288e4aae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273f3d4bb4734845ce527bf92b4781e288e4aae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273f3d4bb4734845ce527bf92b4781e288e4aae2"}], "stats": {"total": 176, "additions": 110, "deletions": 66}, "files": [{"sha": "e8a657e458122b5747c6a86fb6ceda96e1bc03b6", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 91, "deletions": 66, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146c60f16558e7eae1039ba6c937f75413ce4f9/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146c60f16558e7eae1039ba6c937f75413ce4f9/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=3146c60f16558e7eae1039ba6c937f75413ce4f9", "patch": "@@ -2779,17 +2779,23 @@ record_phi_increments_1 (slsr_cand_t basis, gimple *phi)\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n+      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n \n-      if (!operand_equal_p (arg, phi_cand->base_expr, 0))\n+      if (gimple_code (arg_def) == GIMPLE_PHI)\n+\trecord_phi_increments_1 (basis, arg_def);\n+      else\n \t{\n-\t  gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n+\t  widest_int diff;\n \n-\t  if (gimple_code (arg_def) == GIMPLE_PHI)\n-\t    record_phi_increments_1 (basis, arg_def);\n+\t  if (operand_equal_p (arg, phi_cand->base_expr, 0))\n+\t    {\n+\t      diff = -basis->index;\n+\t      record_increment (phi_cand, diff, PHI_ADJUST);\n+\t    }\n \t  else\n \t    {\n \t      slsr_cand_t arg_cand = base_cand_from_table (arg);\n-\t      widest_int diff = arg_cand->index - basis->index;\n+\t      diff = arg_cand->index - basis->index;\n \t      record_increment (arg_cand, diff, PHI_ADJUST);\n \t    }\n \t}\n@@ -2864,29 +2870,43 @@ phi_incr_cost_1 (slsr_cand_t c, const widest_int &incr, gimple *phi,\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n+      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n \n-      if (!operand_equal_p (arg, phi_cand->base_expr, 0))\n+      if (gimple_code (arg_def) == GIMPLE_PHI)\n \t{\n-\t  gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n-      \n-\t  if (gimple_code (arg_def) == GIMPLE_PHI)\n+\t  int feeding_savings = 0;\n+\t  tree feeding_var = gimple_phi_result (arg_def);\n+\t  cost += phi_incr_cost_1 (c, incr, arg_def, &feeding_savings);\n+\t  if (uses_consumed_by_stmt (feeding_var, phi))\n+\t    *savings += feeding_savings;\n+\t}\n+      else\n+\t{\n+\t  widest_int diff;\n+\t  slsr_cand_t arg_cand;\n+\n+\t  /* When the PHI argument is just a pass-through to the base\n+\t     expression of the hidden basis, the difference is zero minus\n+\t     the index of the basis.  There is no potential savings by\n+\t     eliminating a statement in this case.  */\n+\t  if (operand_equal_p (arg, phi_cand->base_expr, 0))\n \t    {\n-\t      int feeding_savings = 0;\n-\t      tree feeding_var = gimple_phi_result (arg_def);\n-\t      cost += phi_incr_cost_1 (c, incr, arg_def, &feeding_savings);\n-\t      if (uses_consumed_by_stmt (feeding_var, phi))\n-\t\t*savings += feeding_savings;\n+\t      arg_cand = (slsr_cand_t)NULL;\n+\t      diff = -basis->index;\n \t    }\n \t  else\n \t    {\n-\t      slsr_cand_t arg_cand = base_cand_from_table (arg);\n-\t      widest_int diff = arg_cand->index - basis->index;\n-\n-\t      if (incr == diff)\n+\t      arg_cand = base_cand_from_table (arg);\n+\t      diff = arg_cand->index - basis->index;\n+\t    }\n+\t  \n+\t  if (incr == diff)\n+\t    {\n+\t      tree basis_lhs = gimple_assign_lhs (basis->cand_stmt);\n+\t      cost += add_cost (true, TYPE_MODE (TREE_TYPE (basis_lhs)));\n+\t      if (arg_cand)\n \t\t{\n-\t\t  tree basis_lhs = gimple_assign_lhs (basis->cand_stmt);\n \t\t  tree lhs = gimple_assign_lhs (arg_cand->cand_stmt);\n-\t\t  cost += add_cost (true, TYPE_MODE (TREE_TYPE (basis_lhs)));\n \t\t  if (uses_consumed_by_stmt (lhs, phi))\n \t\t    *savings += stmt_cost (arg_cand->cand_stmt, true);\n \t\t}\n@@ -3228,23 +3248,26 @@ ncd_with_phi (slsr_cand_t c, const widest_int &incr, gphi *phi,\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n+      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n \n-      if (!operand_equal_p (arg, phi_cand->base_expr, 0))\n+      if (gimple_code (arg_def) == GIMPLE_PHI)\n+\tncd = ncd_with_phi (c, incr, as_a <gphi *> (arg_def), ncd, where);\n+      else \n \t{\n-\t  gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n+\t  widest_int diff;\n \n-\t  if (gimple_code (arg_def) == GIMPLE_PHI)\n-\t    ncd = ncd_with_phi (c, incr, as_a <gphi *> (arg_def), ncd,\n-\t\t\t\twhere);\n-\t  else \n+\t  if (operand_equal_p (arg, phi_cand->base_expr, 0))\n+\t    diff = -basis->index;\n+\t  else\n \t    {\n \t      slsr_cand_t arg_cand = base_cand_from_table (arg);\n-\t      widest_int diff = arg_cand->index - basis->index;\n-\t      basic_block pred = gimple_phi_arg_edge (phi, i)->src;\n-\n-\t      if ((incr == diff) || (!address_arithmetic_p && incr == -diff))\n-\t\tncd = ncd_for_two_cands (ncd, pred, *where, NULL, where);\n+\t      diff = arg_cand->index - basis->index;\n \t    }\n+\t  \n+\t  basic_block pred = gimple_phi_arg_edge (phi, i)->src;\n+\t  \n+\t  if ((incr == diff) || (!address_arithmetic_p && incr == -diff))\n+\t    ncd = ncd_for_two_cands (ncd, pred, *where, NULL, where);\n \t}\n     }\n \n@@ -3515,51 +3538,53 @@ all_phi_incrs_profitable_1 (slsr_cand_t c, gphi *phi, int *spread)\n \treturn false;\n \n       tree arg = gimple_phi_arg_def (phi, i);\n+      gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n \n-      if (!operand_equal_p (arg, phi_cand->base_expr, 0))\n+      if (gimple_code (arg_def) == GIMPLE_PHI)\n \t{\n-\t  gimple *arg_def = SSA_NAME_DEF_STMT (arg);\n+\t  if (!all_phi_incrs_profitable_1 (c, as_a <gphi *> (arg_def), spread)\n+\t      || *spread > MAX_SPREAD)\n+\t    return false;\n+\t}\n+      else\n+\t{\n+\t  int j;\n+\t  widest_int increment;\n \n-\t  if (gimple_code (arg_def) == GIMPLE_PHI)\n-\t    {\n-\t      if (!all_phi_incrs_profitable_1 (c, as_a <gphi *> (arg_def),\n-\t\t\t\t\t       spread)\n-\t\t  || *spread > MAX_SPREAD)\n-\t\treturn false;\n-\t    }\n+\t  if (operand_equal_p (arg, phi_cand->base_expr, 0))\n+\t    increment = -basis->index;\n \t  else\n \t    {\n-\t      int j;\n \t      slsr_cand_t arg_cand = base_cand_from_table (arg);\n-\t      widest_int increment = arg_cand->index - basis->index;\n+\t      increment = arg_cand->index - basis->index;\n+\t    }\n \n-\t      if (!address_arithmetic_p && wi::neg_p (increment))\n-\t\tincrement = -increment;\n+\t  if (!address_arithmetic_p && wi::neg_p (increment))\n+\t    increment = -increment;\n \n-\t      j = incr_vec_index (increment);\n+\t  j = incr_vec_index (increment);\n \n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t{\n-\t\t  fprintf (dump_file, \"  Conditional candidate %d, phi: \",\n-\t\t\t   c->cand_num);\n-\t\t  print_gimple_stmt (dump_file, phi, 0);\n-\t\t  fputs (\"    increment: \", dump_file);\n-\t\t  print_decs (increment, dump_file);\n-\t\t  if (j < 0)\n-\t\t    fprintf (dump_file,\n-\t\t\t     \"\\n  Not replaced; incr_vec overflow.\\n\");\n-\t\t  else {\n-\t\t    fprintf (dump_file, \"\\n    cost: %d\\n\", incr_vec[j].cost);\n-\t\t    if (profitable_increment_p (j))\n-\t\t      fputs (\"  Replacing...\\n\", dump_file);\n-\t\t    else\n-\t\t      fputs (\"  Not replaced.\\n\", dump_file);\n-\t\t  }\n-\t\t}\n-\n-\t      if (j < 0 || !profitable_increment_p (j))\n-\t\treturn false;\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"  Conditional candidate %d, phi: \",\n+\t\t       c->cand_num);\n+\t      print_gimple_stmt (dump_file, phi, 0);\n+\t      fputs (\"    increment: \", dump_file);\n+\t      print_decs (increment, dump_file);\n+\t      if (j < 0)\n+\t\tfprintf (dump_file,\n+\t\t\t \"\\n  Not replaced; incr_vec overflow.\\n\");\n+\t      else {\n+\t\tfprintf (dump_file, \"\\n    cost: %d\\n\", incr_vec[j].cost);\n+\t\tif (profitable_increment_p (j))\n+\t\t  fputs (\"  Replacing...\\n\", dump_file);\n+\t\telse\n+\t\t  fputs (\"  Not replaced.\\n\", dump_file);\n+\t      }\n \t    }\n+\n+\t  if (j < 0 || !profitable_increment_p (j))\n+\t    return false;\n \t}\n     }\n "}, {"sha": "0ca5e302b97d3e087a85a69e448d0e79d7604b32", "filename": "gcc/testsuite/gcc.c-torture/compile/pr87473.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146c60f16558e7eae1039ba6c937f75413ce4f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87473.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146c60f16558e7eae1039ba6c937f75413ce4f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87473.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr87473.c?ref=3146c60f16558e7eae1039ba6c937f75413ce4f9", "patch": "@@ -0,0 +1,19 @@\n+/* PR87473: SLSR ICE on hidden basis with |increment| > 1.  */\n+/* { dg-additional-options \"-fno-tree-ch\" } */\n+\n+void\n+t6 (int qz, int wh)\n+{\n+  int jl = wh;\n+\n+  while (1.0 / 0 < 1)\n+    {\n+      qz = wh * (wh + 2);\n+\n+      while (wh < 1)\n+        jl = 0;\n+    }\n+\n+  while (qz < 1)\n+    qz = jl * wh;\n+}"}]}