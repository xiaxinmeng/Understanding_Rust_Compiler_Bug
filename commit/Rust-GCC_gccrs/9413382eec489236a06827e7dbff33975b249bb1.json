{"sha": "9413382eec489236a06827e7dbff33975b249bb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxMzM4MmVlYzQ4OTIzNmEwNjgyN2U3ZGJmZjMzOTc1YjI0OWJiMQ==", "commit": {"author": {"name": "Sven de Marothy", "email": "sven@physto.se", "date": "2004-09-21T13:50:13Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-09-21T13:50:13Z"}, "message": "ByteBuffer.java (hashCode): Implemented.\n\n2004-09-21  Sven de Marothy <sven@physto.se>\n\n\t* java/nio/ByteBuffer.java (hashCode): Implemented.\n\t* java/nio/CharBuffer.java: Likewise.\n\t* java/nio/DoubleBuffer.java: Likewise.\n\t* java/nio/FloatBuffer.java: Likewise.\n\t* java/nio/LongBuffer.java: Likewise.\n\t* java/nio/IntBuffer.java: Likewise.\n\t* java/nio/ShortBuffer.java: Likewise.\n\nFrom-SVN: r87804", "tree": {"sha": "adb823d7896f1493d35bab1cf7e20fb7b557415c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb823d7896f1493d35bab1cf7e20fb7b557415c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9413382eec489236a06827e7dbff33975b249bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9413382eec489236a06827e7dbff33975b249bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9413382eec489236a06827e7dbff33975b249bb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9413382eec489236a06827e7dbff33975b249bb1/comments", "author": null, "committer": null, "parents": [{"sha": "c6847e25b997c686563a537de5fb9eaa34568730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6847e25b997c686563a537de5fb9eaa34568730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6847e25b997c686563a537de5fb9eaa34568730"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "c27d6ee96bb56a62037e4bba9c714d284bd44d30", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -1,3 +1,13 @@\n+2004-09-21  Sven de Marothy <sven@physto.se>\n+\n+\t* java/nio/ByteBuffer.java (hashCode): Implemented.\n+\t* java/nio/CharBuffer.java: Likewise.\n+\t* java/nio/DoubleBuffer.java: Likewise.\n+\t* java/nio/FloatBuffer.java: Likewise.\n+\t* java/nio/LongBuffer.java: Likewise.\n+\t* java/nio/IntBuffer.java: Likewise.\n+\t* java/nio/ShortBuffer.java: Likewise.\n+\n 2004-09-21  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* javax/security/auth/x500/X500Principal.java: Fix some merge glitches."}, {"sha": "e502e003199476d8c2eb2bfd3d7019f13f2fbb66", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -260,11 +260,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>int</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data. Note that the hashcode is dependent\n+   * on buffer content, and therefore is not useful if the buffer\n+   * content may change.\n+   *\n+   * @return the hash code\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    int hashCode = get(position()) + 31;\n+    int multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (get(i) + 30)*multiplier;\n+      }\n+    return hashCode;\n   }\n \n   /**"}, {"sha": "700c56750f3a57a215128c568a67754a95322bf4", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -297,11 +297,25 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with int arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data. Note that the hashcode is dependent\n+   * on buffer content, and therefore is not useful if the buffer\n+   * content may change.\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    int hashCode = get(position()) + 31;\n+    int multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (get(i) + 30)*multiplier;\n+      }\n+    return hashCode;\n   }\n \n   /**"}, {"sha": "dd16ee0496205ca87c2a398f9b85a4a06becfc2b", "filename": "libjava/java/nio/DoubleBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FDoubleBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDoubleBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -243,11 +243,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>long</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data, in Double.doubleToLongBits() form\n+   * Note that the hashcode is dependent on buffer content, \n+   * and therefore is not useful if the buffer content may change.\n+   *\n+   * @return the hash code (casted to int)\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    long hashCode = Double.doubleToLongBits(get(position())) + 31;\n+    long multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (Double.doubleToLongBits(get(i)) + 30)*multiplier;\n+      }\n+    return ((int)hashCode);\n   }\n \n   /**"}, {"sha": "2ead8cbc494c8644bd1bff06b5c635ef5443f3b0", "filename": "libjava/java/nio/FloatBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FFloatBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FFloatBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -243,11 +243,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>int</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data, in Float.floatToIntBits() form\n+   * Note that the hashcode is dependent on buffer content, \n+   * and therefore is not useful if the buffer content may change.\n+   *\n+   * @return the hash code\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    int hashCode = Float.floatToIntBits(get(position())) + 31;\n+    int multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (Float.floatToIntBits(get(i)) + 30)*multiplier;\n+      }\n+    return hashCode;\n   }\n \n   /**"}, {"sha": "814e0414bc6cee4261c2e6a5717fd531fc153731", "filename": "libjava/java/nio/IntBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FIntBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FIntBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FIntBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -243,11 +243,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>int</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data. Note that the hashcode is dependent\n+   * on buffer content, and therefore is not useful if the buffer\n+   * content may change.\n+   *\n+   * @return the hash code\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    int hashCode = get(position()) + 31;\n+    int multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (get(i) + 30)*multiplier;\n+      }\n+    return hashCode;\n   }\n \n   /**"}, {"sha": "6e9ef34e8eb269e7ed43c144edd6a5ad4cd3b046", "filename": "libjava/java/nio/LongBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FLongBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FLongBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FLongBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -243,11 +243,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>long</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data. Note that the hashcode is dependent\n+   * on buffer content, and therefore is not useful if the buffer\n+   * content may change.\n+   *\n+   * @return the hash code (casted to int)\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    long hashCode = get(position()) + 31;\n+    long multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (get(i) + 30)*multiplier;\n+      }\n+    return ((int)hashCode);\n   }\n \n   /**"}, {"sha": "db03076b6291c5fb2b2a6f15f6416d4e0c1a29fb", "filename": "libjava/java/nio/ShortBuffer.java", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FShortBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9413382eec489236a06827e7dbff33975b249bb1/libjava%2Fjava%2Fnio%2FShortBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FShortBuffer.java?ref=9413382eec489236a06827e7dbff33975b249bb1", "patch": "@@ -243,11 +243,27 @@ public final int arrayOffset ()\n \n   /**\n    * Calculates a hash code for this buffer.\n+   *\n+   * This is done with <code>int</code> arithmetic,\n+   * where ** represents exponentiation, by this formula:<br>\n+   * <code>s[position()] + 31 + (s[position()+1] + 30)*31**1 + ... +\n+   * (s[limit()-1]+30)*31**(limit()-1)</code>.\n+   * Where s is the buffer data. Note that the hashcode is dependent\n+   * on buffer content, and therefore is not useful if the buffer\n+   * content may change.\n+   *\n+   * @return the hash code\n    */\n   public int hashCode ()\n   {\n-    // FIXME: Check what SUN calculates here.\n-    return super.hashCode ();\n+    int hashCode = get(position()) + 31;\n+    int multiplier = 1;\n+    for (int i = position() + 1; i < limit(); ++i)\n+      {\n+\t  multiplier *= 31;\n+\t  hashCode += (get(i) + 30)*multiplier;\n+      }\n+    return hashCode;\n   }\n \n   /**"}]}