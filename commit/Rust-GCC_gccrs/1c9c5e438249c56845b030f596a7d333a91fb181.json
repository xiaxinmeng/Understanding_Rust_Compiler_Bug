{"sha": "1c9c5e438249c56845b030f596a7d333a91fb181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5YzVlNDM4MjQ5YzU2ODQ1YjAzMGY1OTZhN2QzMzNhOTFmYjE4MQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2008-04-30T05:19:11Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2008-04-30T05:19:11Z"}, "message": "rs6000.c (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP): Define.\n\n\t* config/rs6000/rs6000.c (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP): Define.\n\t(rs6000_emit_epilogue): Use backchain to restore only when we\n\thave a large frame.  Make use of frame pointer to restore if we\n\thave one.  Handle ALWAYS_RESTORE_ALTIVEC_BEFORE_POP.\n\nFrom-SVN: r134816", "tree": {"sha": "bb56e6a8f79446005c7fdac8bc126a2f57d7cb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb56e6a8f79446005c7fdac8bc126a2f57d7cb3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c9c5e438249c56845b030f596a7d333a91fb181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9c5e438249c56845b030f596a7d333a91fb181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9c5e438249c56845b030f596a7d333a91fb181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9c5e438249c56845b030f596a7d333a91fb181/comments", "author": null, "committer": null, "parents": [{"sha": "d4f90ccc7c400ed4cb974de0824c3df9fb4c2e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f90ccc7c400ed4cb974de0824c3df9fb4c2e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f90ccc7c400ed4cb974de0824c3df9fb4c2e27"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "e62a91a69fae26fe5c6846538c54a79a39f77889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9c5e438249c56845b030f596a7d333a91fb181/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9c5e438249c56845b030f596a7d333a91fb181/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c9c5e438249c56845b030f596a7d333a91fb181", "patch": "@@ -1,3 +1,10 @@\n+2008-04-30  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP): Define.\n+\t(rs6000_emit_epilogue): Use backchain to restore only when we\n+\thave a large frame.  Make use of frame pointer to restore if we\n+\thave one.  Handle ALWAYS_RESTORE_ALTIVEC_BEFORE_POP.\n+\n 2008-04-29  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config/avr/avr.md (*sbrx_branch, *sbix_branch, *sbix_branch_tmp):"}, {"sha": "20cfe95b95d00326ba8ba4427dc7ffa0542208b5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c9c5e438249c56845b030f596a7d333a91fb181/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c9c5e438249c56845b030f596a7d333a91fb181/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1c9c5e438249c56845b030f596a7d333a91fb181", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on IBM RS/6000.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n@@ -16244,6 +16244,10 @@ rs6000_output_function_prologue (FILE *file,\n   rs6000_pic_labelno++;\n }\n \n+/* Non-zero if vmx regs are restored before the frame pop, zero if\n+   we restore after the pop when possible.  */\n+#define ALWAYS_RESTORE_ALTIVEC_BEFORE_POP 0\n+\n /* Emit function epilogue as insns.\n \n    At present, dwarf2out_frame_debug_expr doesn't understand\n@@ -16283,13 +16287,18 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t   || crtl->calls_eh_return\n \t\t\t   || info->first_fp_reg_save == 64\n \t\t\t   || FP_SAVE_INLINE (info->first_fp_reg_save));\n-  use_backchain_to_restore_sp = (frame_pointer_needed\n-\t\t\t\t || cfun->calls_alloca\n-\t\t\t\t || info->total_size > 32767);\n   using_mtcr_multiple = (rs6000_cpu == PROCESSOR_PPC601\n \t\t\t || rs6000_cpu == PROCESSOR_PPC603\n \t\t\t || rs6000_cpu == PROCESSOR_PPC750\n \t\t\t || optimize_size);\n+  /* Restore via the backchain when we have a large frame, since this\n+     is more efficient than an addis, addi pair.  The second condition\n+     here will not trigger at the moment;  We don't actually need a\n+     frame pointer for alloca, but the generic parts of the compiler\n+     give us one anyway.  */\n+  use_backchain_to_restore_sp = (info->total_size > 32767\n+\t\t\t\t || (cfun->calls_alloca\n+\t\t\t\t     && !frame_pointer_needed));\n \n   if (WORLD_SAVE_P (info))\n     {\n@@ -16390,8 +16399,9 @@ rs6000_emit_epilogue (int sibcall)\n      stack.  */\n   if (TARGET_ALTIVEC_ABI\n       && info->altivec_size != 0\n-      && DEFAULT_ABI != ABI_V4\n-      && info->altivec_save_offset < (TARGET_32BIT ? -220 : -288))\n+      && (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n+\t  || (DEFAULT_ABI != ABI_V4\n+\t      && info->altivec_save_offset < (TARGET_32BIT ? -220 : -288))))\n     {\n       int i;\n \n@@ -16402,6 +16412,8 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t  gen_rtx_MEM (Pmode, sp_reg_rtx));\n \t  sp_offset = 0;\n \t}\n+      else if (frame_pointer_needed)\n+\tframe_reg_rtx = hard_frame_pointer_rtx;\n \n       for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n \tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n@@ -16426,18 +16438,23 @@ rs6000_emit_epilogue (int sibcall)\n   if (TARGET_ALTIVEC\n       && TARGET_ALTIVEC_VRSAVE\n       && info->vrsave_mask != 0\n-      && DEFAULT_ABI != ABI_V4\n-      && info->vrsave_save_offset < (TARGET_32BIT ? -220 : -288))\n+      && (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n+\t  || (DEFAULT_ABI != ABI_V4\n+\t      && info->vrsave_save_offset < (TARGET_32BIT ? -220 : -288))))\n     {\n       rtx addr, mem, reg;\n \n-      if (use_backchain_to_restore_sp\n-\t  && frame_reg_rtx == sp_reg_rtx)\n+      if (frame_reg_rtx == sp_reg_rtx)\n \t{\n-\t  frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n-\t  emit_move_insn (frame_reg_rtx,\n-\t\t\t  gen_rtx_MEM (Pmode, sp_reg_rtx));\n-\t  sp_offset = 0;\n+\t  if (use_backchain_to_restore_sp)\n+\t    {\n+\t      frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n+\t      emit_move_insn (frame_reg_rtx,\n+\t\t\t      gen_rtx_MEM (Pmode, sp_reg_rtx));\n+\t      sp_offset = 0;\n+\t    }\n+\t  else if (frame_pointer_needed)\n+\t    frame_reg_rtx = hard_frame_pointer_rtx;\n \t}\n \n       addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n@@ -16449,17 +16466,11 @@ rs6000_emit_epilogue (int sibcall)\n       emit_insn (generate_set_vrsave (reg, info, 1));\n     }\n \n-  /* If we have a frame pointer, a call to alloca,  or a large stack\n-     frame, restore the old stack pointer using the backchain.  Otherwise,\n-     we know what size to update it with.  */\n+  /* If we have a large stack frame, restore the old stack pointer\n+     using the backchain.  */\n   if (use_backchain_to_restore_sp)\n     {\n-      if (frame_reg_rtx != sp_reg_rtx)\n-\t{\n-\t  emit_move_insn (sp_reg_rtx, frame_reg_rtx);\n-\t  frame_reg_rtx = sp_reg_rtx;\n-\t}\n-      else\n+      if (frame_reg_rtx == sp_reg_rtx)\n \t{\n \t  /* Under V.4, don't reset the stack pointer until after we're done\n \t     loading the saved registers.  */\n@@ -16470,6 +16481,30 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t  gen_rtx_MEM (Pmode, sp_reg_rtx));\n \t  sp_offset = 0;\n \t}\n+      else if (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n+\t       && DEFAULT_ABI == ABI_V4)\n+\t/* frame_reg_rtx has been set up by the altivec restore.  */\n+\t;\n+      else\n+\t{\n+\t  emit_move_insn (sp_reg_rtx, frame_reg_rtx);\n+\t  frame_reg_rtx = sp_reg_rtx;\n+\t}\n+    }\n+  /* If we have a frame pointer, we can restore the old stack pointer\n+     from it.  */\n+  else if (frame_pointer_needed)\n+    {\n+      frame_reg_rtx = sp_reg_rtx;\n+      if (DEFAULT_ABI == ABI_V4)\n+\tframe_reg_rtx = gen_rtx_REG (Pmode, 11);\n+\n+      emit_insn (TARGET_32BIT\n+\t\t ? gen_addsi3 (frame_reg_rtx, hard_frame_pointer_rtx,\n+\t\t\t       GEN_INT (info->total_size))\n+\t\t : gen_adddi3 (frame_reg_rtx, hard_frame_pointer_rtx,\n+\t\t\t       GEN_INT (info->total_size)));\n+      sp_offset = 0;\n     }\n   else if (info->push_p\n \t   && DEFAULT_ABI != ABI_V4\n@@ -16484,7 +16519,8 @@ rs6000_emit_epilogue (int sibcall)\n     }\n \n   /* Restore AltiVec registers if we have not done so already.  */\n-  if (TARGET_ALTIVEC_ABI\n+  if (!ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n+      && TARGET_ALTIVEC_ABI\n       && info->altivec_size != 0\n       && (DEFAULT_ABI == ABI_V4\n \t  || info->altivec_save_offset >= (TARGET_32BIT ? -220 : -288)))\n@@ -16511,7 +16547,8 @@ rs6000_emit_epilogue (int sibcall)\n     }\n \n   /* Restore VRSAVE if we have not done so already.  */\n-  if (TARGET_ALTIVEC\n+  if (!ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n+      && TARGET_ALTIVEC\n       && TARGET_ALTIVEC_VRSAVE\n       && info->vrsave_mask != 0\n       && (DEFAULT_ABI == ABI_V4"}]}