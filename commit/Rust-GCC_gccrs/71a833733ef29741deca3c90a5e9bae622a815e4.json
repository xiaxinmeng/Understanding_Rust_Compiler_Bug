{"sha": "71a833733ef29741deca3c90a5e9bae622a815e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhODMzNzMzZWYyOTc0MWRlY2EzYzkwYTVlOWJhZTYyMmE4MTVlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-20T22:02:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-20T22:02:06Z"}, "message": "re PR target/4792 (Internal compiler error building libgcc2 for arc-elf target)\n\n\tPR target/4792\n\t* config/arc/arc.md (movsicc, movdicc, movsfcc, movdfcc): Add mode\n\tto if_then_else.\n\t(movsicc_insn, movdicc_insn, movsfcc_insn, movdfcc_insn): Likewise.\n\t* config/arc/arc.c (arc_final_prescan_insn): Use extract_insn_cached\n\tinstead of insn_extract.\n\nFrom-SVN: r51090", "tree": {"sha": "35f5c03d04379479108b5696b185dcc1b2472a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f5c03d04379479108b5696b185dcc1b2472a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a833733ef29741deca3c90a5e9bae622a815e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a833733ef29741deca3c90a5e9bae622a815e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a833733ef29741deca3c90a5e9bae622a815e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a833733ef29741deca3c90a5e9bae622a815e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a29b099d7aa8f3819b5791f69b1d5e346e2a1018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29b099d7aa8f3819b5791f69b1d5e346e2a1018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29b099d7aa8f3819b5791f69b1d5e346e2a1018"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "b38eacaa7e6dd174024c89e63f41cf5752d9cd88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71a833733ef29741deca3c90a5e9bae622a815e4", "patch": "@@ -1,7 +1,16 @@\n+2002-03-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/4792\n+\t* config/arc/arc.md (movsicc, movdicc, movsfcc, movdfcc): Add mode\n+\tto if_then_else.\n+\t(movsicc_insn, movdicc_insn, movsfcc_insn, movdfcc_insn): Likewise.\n+\t* config/arc/arc.c (arc_final_prescan_insn): Use extract_insn_cached\n+\tinstead of insn_extract.\n+\n 2002-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/4192\n-\t* config/fr30/fr30.md (jump): Comment out clobber of fixed register.\n+\t* config/fr30/fr30.md (jump): Remove clobber of fixed register.\n \n \t* genemit.c (output_added_clobbers_hard_reg_p): Only output return\n \tstmt if some case has been output."}, {"sha": "663f50b6e844d761564faf4c7caaee6cfb3d3d4c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=71a833733ef29741deca3c90a5e9bae622a815e4", "patch": "@@ -2190,7 +2190,7 @@ arc_final_prescan_insn (insn, opvec, noperands)\n \t      if (!this_insn)\n \t        {\n \t\t  /* Oh dear! we ran off the end, give up.  */\n-\t\t  insn_extract (insn);\n+\t\t  extract_insn_cached (insn);\n \t\t  arc_ccfsm_state = 0;\n \t\t  arc_ccfsm_target_insn = NULL;\n \t\t  return;\n@@ -2212,9 +2212,8 @@ arc_final_prescan_insn (insn, opvec, noperands)\n \n       /* Restore recog_data.  Getting the attributes of other insns can\n \t destroy this array, but final.c assumes that it remains intact\n-\t across this call; since the insn has been recognized already we\n-\t call insn_extract direct.  */\n-      insn_extract (insn);\n+\t across this call.  */\n+      extract_insn_cached (insn);\n     }\n }\n "}, {"sha": "4df42cc91b51bb467b291256e2e37d4cee6f8896", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a833733ef29741deca3c90a5e9bae622a815e4/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=71a833733ef29741deca3c90a5e9bae622a815e4", "patch": "@@ -583,9 +583,9 @@\n \n (define_expand \"movsicc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"\")))]\n+\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -599,9 +599,9 @@\n \n ;(define_expand \"movdicc\"\n ;  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-;\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-;\t\t      (match_operand:DI 2 \"nonmemory_operand\" \"\")\n-;\t\t      (match_operand:DI 3 \"register_operand\" \"\")))]\n+;\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n+;\t\t\t (match_operand:DI 2 \"nonmemory_operand\" \"\")\n+;\t\t\t (match_operand:DI 3 \"register_operand\" \"\")))]\n ;  \"0 /* ??? this would work better if we had cmpdi */\"\n ;  \"\n ;{\n@@ -612,12 +612,12 @@\n ;\n ;  operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n ;}\")\n-(define_expand \"movsfcc\"\n \n+(define_expand \"movsfcc\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SF 2 \"nonmemory_operand\" \"\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"\")))]\n+\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SF 2 \"nonmemory_operand\" \"\")\n+\t\t\t (match_operand:SF 3 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -631,9 +631,9 @@\n \n ;(define_expand \"movdfcc\"\n ;  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-;\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-;\t\t      (match_operand:DF 2 \"nonmemory_operand\" \"\")\n-;\t\t      (match_operand:DF 3 \"register_operand\" \"\")))]\n+;\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n+;\t\t\t (match_operand:DF 2 \"nonmemory_operand\" \"\")\n+;\t\t\t (match_operand:DF 3 \"register_operand\" \"\")))]\n ;  \"0 /* ??? can generate less efficient code if constants involved */\"\n ;  \"\n ;{\n@@ -647,19 +647,19 @@\n \n (define_insn \"*movsicc_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"rJi\")\n-\t\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n+\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"rJi\")\n+\t\t\t (match_operand:SI 3 \"register_operand\" \"0\")))]\n   \"\"\n   \"mov.%d1 %0,%S2\"\n   [(set_attr \"type\" \"cmove\")])\n \n ; ??? This doesn't properly handle constants.\n ;(define_insn \"*movdicc_insn\"\n ;  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-;\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-;\t\t      (match_operand:DI 2 \"nonmemory_operand\" \"r,Ji\")\n-;\t\t      (match_operand:DI 3 \"register_operand\" \"0,0\")))]\n+;\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n+;\t\t\t (match_operand:DI 2 \"nonmemory_operand\" \"r,Ji\")\n+;\t\t\t (match_operand:DI 3 \"register_operand\" \"0,0\")))]\n ;  \"0\"\n ;  \"*\n ;{\n@@ -682,9 +682,9 @@\n \n (define_insn \"*movsfcc_insn\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-\t\t      (match_operand:SF 2 \"nonmemory_operand\" \"r,E\")\n-\t\t      (match_operand:SF 3 \"register_operand\" \"0,0\")))]\n+\t(if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SF 2 \"nonmemory_operand\" \"r,E\")\n+\t\t\t (match_operand:SF 3 \"register_operand\" \"0,0\")))]\n   \"\"\n   \"@\n    mov.%d1 %0,%2\n@@ -693,9 +693,9 @@\n \n ;(define_insn \"*movdfcc_insn\"\n ;  [(set (match_operand:DF 0 \"register_operand\" \"=r,r\")\n-;\t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n-;\t\t      (match_operand:DF 2 \"nonmemory_operand\" \"r,E\")\n-;\t\t      (match_operand:DF 3 \"register_operand\" \"0,0\")))]\n+;\t(if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n+;\t\t\t (match_operand:DF 2 \"nonmemory_operand\" \"r,E\")\n+;\t\t\t (match_operand:DF 3 \"register_operand\" \"0,0\")))]\n ;  \"0\"\n ;  \"*\n ;{"}]}