{"sha": "d772f97cb639014ca02c6109e902cf1d1280af10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3MmY5N2NiNjM5MDE0Y2EwMmM2MTA5ZTkwMmNmMWQxMjgwYWYxMA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-07-14T15:10:12Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-07-14T15:10:12Z"}, "message": "re PR target/49487 ([avr] ICE in bytewise rotate)\n\n\t\n\tPR target/49487\n\t* config/avr/avr.md (rotl<mode>3): Generate SCRATCH instead\n\tof REG.\n\t(*rotw<mode>): Use const_int_operand for operand2.\n\tUse match_scatch for operand3.\n\t(*rotb<mode>): Ditto\n\t* config/avr/avr.c (avr_rotate_bytes): Treat SCRATCH.\n\nFrom-SVN: r176276", "tree": {"sha": "d17b83ce9559a5f11cb454402c4e8a5642745ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d17b83ce9559a5f11cb454402c4e8a5642745ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d772f97cb639014ca02c6109e902cf1d1280af10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d772f97cb639014ca02c6109e902cf1d1280af10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d772f97cb639014ca02c6109e902cf1d1280af10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d772f97cb639014ca02c6109e902cf1d1280af10/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5d20a4e01472c30e360f94b33373f1ab8e2354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d20a4e01472c30e360f94b33373f1ab8e2354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5d20a4e01472c30e360f94b33373f1ab8e2354"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "5ffb0dc644e525b9aa9e3e28511e05abb6fc3989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d772f97cb639014ca02c6109e902cf1d1280af10", "patch": "@@ -1,3 +1,13 @@\n+2011-07-14  Georg-Johann Lay  <avr@gjlay.de>\n+\t\n+\tPR target/49487\n+\t* config/avr/avr.md (rotl<mode>3): Generate SCRATCH instead\n+\tof REG.\n+\t(*rotw<mode>): Use const_int_operand for operand2.\n+\tUse match_scatch for operand3.\n+\t(*rotb<mode>): Ditto\n+\t* config/avr/avr.c (avr_rotate_bytes): Treat SCRATCH.\n+\n 2011-07-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49651"}, {"sha": "209a5b92a04295898ccc3165b72894f0f6a9210b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d772f97cb639014ca02c6109e902cf1d1280af10", "patch": "@@ -4438,7 +4438,9 @@ avr_rotate_bytes (rtx operands[])\n     if (mode == DImode)\n       move_mode = QImode;\n     /* Make scratch smaller if needed.  */\n-    if (GET_MODE (scratch) == HImode && move_mode == QImode)\n+    if (SCRATCH != GET_CODE (scratch)\n+        && HImode == GET_MODE (scratch)\n+        && QImode == move_mode)\n       scratch = simplify_gen_subreg (move_mode, scratch, HImode, 0); \n \n     move_size = GET_MODE_SIZE (move_mode);\n@@ -4534,6 +4536,8 @@ avr_rotate_bytes (rtx operands[])\n \t\t   When this move occurs, it will break chain deadlock.\n \t\t   The scratch register is substituted for real move.  */\n \n+\t\tgcc_assert (SCRATCH != GET_CODE (scratch));\n+\n \t\tmove[size].src = move[blocked].dst;\n \t\tmove[size].dst =  scratch;\n \t\t/* Scratch move is never blocked.  */"}, {"sha": "bbfcb10ffc00ef69ba4e99e01e1a80967ee39b65", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d772f97cb639014ca02c6109e902cf1d1280af10/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d772f97cb639014ca02c6109e902cf1d1280af10", "patch": "@@ -1597,18 +1597,18 @@\n \t\t\t\t(match_operand:VOID 2 \"const_int_operand\" \"\")))\n \t\t(clobber (match_dup 3))])]\n   \"\"\n-  \"\n-{\n-  if (CONST_INT_P (operands[2]) && 0 == (INTVAL (operands[2]) % 8))\n   {\n-  if (AVR_HAVE_MOVW && 0 == INTVAL (operands[2]) % 16)\n-    operands[3] = gen_reg_rtx (<rotsmode>mode);\n-  else\n-    operands[3] = gen_reg_rtx (QImode);\n-  }\n-  else\n-    FAIL;\n-}\")\n+    if (CONST_INT_P (operands[2])\n+        && 0 == INTVAL (operands[2]) % 8)\n+      {\n+        if (AVR_HAVE_MOVW && 0 == INTVAL (operands[2]) % 16)\n+          operands[3] = gen_rtx_SCRATCH (<rotsmode>mode);\n+        else\n+          operands[3] = gen_rtx_SCRATCH (QImode);\n+      }\n+    else\n+      FAIL;\n+  })\n \n \n ;; Overlapping non-HImode registers often (but not always) need a scratch.\n@@ -1620,34 +1620,38 @@\n ; Split word aligned rotates using scratch that is mode dependent.\n (define_insn_and_split \"*rotw<mode>\"\n   [(set (match_operand:HIDI 0 \"register_operand\" \"=r,r,#&r\")\n-\t(rotate:HIDI (match_operand:HIDI 1 \"register_operand\" \"0,r,r\")\n-\t\t     (match_operand 2 \"immediate_operand\" \"n,n,n\")))\n-   (clobber (match_operand:<rotsmode> 3 \"register_operand\"  \"=<rotx>\" ))]\n-  \"(CONST_INT_P (operands[2]) &&\n-     (0 == (INTVAL (operands[2]) % 16) && AVR_HAVE_MOVW))\"\n+        (rotate:HIDI (match_operand:HIDI 1 \"register_operand\" \"0,r,r\")\n+                     (match_operand 2 \"const_int_operand\" \"n,n,n\")))\n+   (clobber (match_scratch:<rotsmode> 3 \"=<rotx>\"))]\n+  \"AVR_HAVE_MOVW\n+   && CONST_INT_P (operands[2])\n+   && 0 == INTVAL (operands[2]) % 16\"\n   \"#\"\n   \"&& (reload_completed || <MODE>mode == DImode)\"\n   [(const_int 0)]\n-  \"avr_rotate_bytes (operands);\n-  DONE;\"\n-)\n+  {\n+    avr_rotate_bytes (operands);\n+    DONE;\n+  })\n \n \n ; Split byte aligned rotates using scratch that is always QI mode.\n (define_insn_and_split \"*rotb<mode>\"\n   [(set (match_operand:HIDI 0 \"register_operand\" \"=r,r,#&r\")\n-\t(rotate:HIDI (match_operand:HIDI 1 \"register_operand\" \"0,r,r\")\n-\t\t     (match_operand 2 \"immediate_operand\" \"n,n,n\")))\n-   (clobber (match_operand:QI 3 \"register_operand\" \"=<rotx>\" ))]\n-  \"(CONST_INT_P (operands[2]) &&\n-     (8 == (INTVAL (operands[2]) % 16)\n-     \t|| (!AVR_HAVE_MOVW && 0 == (INTVAL (operands[2]) % 16))))\"\n+        (rotate:HIDI (match_operand:HIDI 1 \"register_operand\" \"0,r,r\")\n+                     (match_operand 2 \"const_int_operand\" \"n,n,n\")))\n+   (clobber (match_scratch:QI 3 \"=<rotx>\"))]\n+  \"CONST_INT_P (operands[2])\n+   && (8 == INTVAL (operands[2]) % 16\n+       || (!AVR_HAVE_MOVW\n+           && 0 == INTVAL (operands[2]) % 16))\"\n   \"#\"\n   \"&& (reload_completed || <MODE>mode == DImode)\"\n   [(const_int 0)]\n-  \"avr_rotate_bytes (operands);\n-  DONE;\"\n-)\n+  {\n+    avr_rotate_bytes (operands);\n+    DONE;\n+  })\n \n \n ;;<< << << << << << << << << << << << << << << << << << << << << << << << << <<"}]}