{"sha": "82d89471a4ee354af3105064b8c60c92a30fa4eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkODk0NzFhNGVlMzU0YWYzMTA1MDY0YjhjNjBjOTJhMzBmYTRlYg==", "commit": {"author": {"name": "Bingfeng Mei", "email": "bmei@broadcom.com", "date": "2014-01-03T15:40:57Z"}, "committer": {"name": "Bingfeng Mei", "email": "meibf@gcc.gnu.org", "date": "2014-01-03T15:40:57Z"}, "message": "re PR tree-optimization/59651 (Vectorizer failing to spot dependence causes incorrect code generation.)\n\n2014-01-03  Bingfeng Mei <bmei@broadcom.com>\n\n\tPR tree-optimization/59651\n\t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): \n\tAddress\trange for negative step should be added by TYPE_SIZE_UNIT.\n\n\tPR tree-optimization/59651\n\t* gcc.dg/torture/pr59651.c: New test.\n\t* gcc.dg/vect/pr59651.c: Ditto.\n\nFrom-SVN: r206319", "tree": {"sha": "4bd50bb744ce8fbbe28950f5da0d1188ce74dd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd50bb744ce8fbbe28950f5da0d1188ce74dd26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d89471a4ee354af3105064b8c60c92a30fa4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d89471a4ee354af3105064b8c60c92a30fa4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d89471a4ee354af3105064b8c60c92a30fa4eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d89471a4ee354af3105064b8c60c92a30fa4eb/comments", "author": null, "committer": null, "parents": [{"sha": "e864837ad6b324d0025bc4a1a06cf480da34deb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e864837ad6b324d0025bc4a1a06cf480da34deb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e864837ad6b324d0025bc4a1a06cf480da34deb3"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "cf4cfabeb8200340b951e203b8df705fa641a13f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82d89471a4ee354af3105064b8c60c92a30fa4eb", "patch": "@@ -1,3 +1,9 @@\n+2014-01-03  Bingfeng Mei <bmei@broadcom.com>\n+\n+\tPR tree-optimization/59651\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): \n+\tAddress\trange for negative step should be added by TYPE_SIZE_UNIT.\n+\n 2014-01-03  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* config/m68k/m68k.c (handle_move_double): Handle pushes with"}, {"sha": "b7639618d1923b5e984647892278ddab98178639", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82d89471a4ee354af3105064b8c60c92a30fa4eb", "patch": "@@ -1,3 +1,9 @@\n+2014-01-03  Bingfeng Mei  <bmei@broadcom.com>\n+\n+\tPR tree-optimization/59651\n+\t* gcc.dg/torture/pr59651.c: New test.\n+\t* gcc.dg/vect/pr59651.c: Ditto.\n+\n 2014-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/59625"}, {"sha": "7139ba9bf52c0e67c4f0dcc2e1db2684f8dfd798", "filename": "gcc/testsuite/gcc.dg/torture/pr59651.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59651.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59651.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59651.c?ref=82d89471a4ee354af3105064b8c60c92a30fa4eb", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/59561 */\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+int a[] = { 0, 0, 0, 0, 0, 0, 0, 6 };\n+\n+int b;\n+int\n+main ()\n+{\n+  for (;;)\n+    {\n+      for (b = 7; b; --b)\n+\ta[b] = a[7] > 1;\n+      break;\n+    }\n+  if (a[1] != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "4407785aab4d2de7a34e1e77e85f678fd5d3aef4", "filename": "gcc/testsuite/gcc.dg/vect/pr59651.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59651.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59651.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr59651.c?ref=82d89471a4ee354af3105064b8c60c92a30fa4eb", "patch": "@@ -0,0 +1,4 @@\n+/* PR tree-optimization/59561 */\n+#include \"../torture/pr59651.c\"\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e8dbf4daf468d5a1c411822c288bd1189ba4204e", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d89471a4ee354af3105064b8c60c92a30fa4eb/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=82d89471a4ee354af3105064b8c60c92a30fa4eb", "patch": "@@ -2240,13 +2240,24 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo, tree * cond_expr)\n \n       tree seg_a_min = addr_base_a;\n       tree seg_a_max = fold_build_pointer_plus (addr_base_a, segment_length_a);\n+      /* For negative step, we need to adjust address range by TYPE_SIZE_UNIT\n+\t bytes, e.g., int a[3] -> a[1] range is [a+4, a+16) instead of\n+\t [a, a+12) */\n       if (tree_int_cst_compare (DR_STEP (dr_a.dr), size_zero_node) < 0)\n-\tseg_a_min = seg_a_max, seg_a_max = addr_base_a;\n+\t{\n+\t  tree unit_size = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dr_a.dr)));\n+\t  seg_a_min = fold_build_pointer_plus (seg_a_max, unit_size);\n+\t  seg_a_max = fold_build_pointer_plus (addr_base_a, unit_size);\n+\t}\n \n       tree seg_b_min = addr_base_b;\n       tree seg_b_max = fold_build_pointer_plus (addr_base_b, segment_length_b);\n       if (tree_int_cst_compare (DR_STEP (dr_b.dr), size_zero_node) < 0)\n-\tseg_b_min = seg_b_max, seg_b_max = addr_base_b;\n+\t{\n+\t  tree unit_size = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dr_b.dr)));\n+\t  seg_b_min = fold_build_pointer_plus (seg_b_max, unit_size);\n+\t  seg_b_max = fold_build_pointer_plus (addr_base_b, unit_size);\n+\t}\n \n       part_cond_expr =\n       \tfold_build2 (TRUTH_OR_EXPR, boolean_type_node,"}]}