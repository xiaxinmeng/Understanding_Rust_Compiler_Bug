{"sha": "77f5310f0205714538668b88fbf1de44f1f435be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmNTMxMGYwMjA1NzE0NTM4NjY4Yjg4ZmJmMWRlNDRmMWY0MzViZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T17:04:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T21:21:06Z"}, "message": "libstdc++: subrange converting constructor should disallow slicing (LWG 3282)\n\n\t* include/std/ranges (__detail::__convertible_to_non_slicing): New\n\thelper concept.\n\t(__detail::__pair_like_convertible_to): Remove.\n\t(__detail::__pair_like_convertible_from): Add requirements for\n\tnon-slicing conversions.\n\t(subrange): Constrain constructors with __convertible_to_non_slicing.\n\tRemove constructors from pair-like types. Add new deduction guide.\n\t* testsuite/std/ranges/subrange/lwg3282_neg.cc: New test.", "tree": {"sha": "36dc532e0fe7a20db16d3a553ba6881b19312053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36dc532e0fe7a20db16d3a553ba6881b19312053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f5310f0205714538668b88fbf1de44f1f435be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f5310f0205714538668b88fbf1de44f1f435be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f5310f0205714538668b88fbf1de44f1f435be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f5310f0205714538668b88fbf1de44f1f435be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59aa9e577eb2b182374f5421828687c93b81ad3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59aa9e577eb2b182374f5421828687c93b81ad3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59aa9e577eb2b182374f5421828687c93b81ad3d"}], "stats": {"total": 88, "additions": 57, "deletions": 31}, "files": [{"sha": "6e22536680fcdad7af2ba4172b36aaad56a4834a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77f5310f0205714538668b88fbf1de44f1f435be", "patch": "@@ -1,5 +1,14 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/ranges (__detail::__convertible_to_non_slicing): New\n+\thelper concept.\n+\t(__detail::__pair_like_convertible_to): Remove.\n+\t(__detail::__pair_like_convertible_from): Add requirements for\n+\tnon-slicing conversions.\n+\t(subrange): Constrain constructors with __convertible_to_non_slicing.\n+\tRemove constructors from pair-like types. Add new deduction guide.\n+\t* testsuite/std/ranges/subrange/lwg3282_neg.cc: New test.\n+\n \t* include/bits/iterator_concepts.h (iter_move): Add declaration to\n \tprevent unqualified lookup finding a suitable declaration (LWG 3247).\n "}, {"sha": "b348ba2cfcb2c70fc5e08c74c3ad3ea1af12a4e4", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=77f5310f0205714538668b88fbf1de44f1f435be", "patch": "@@ -214,6 +214,12 @@ namespace ranges\n \n   namespace __detail\n   {\n+    template<class _From, class _To>\n+      concept __convertible_to_non_slicing = convertible_to<_From, _To>\n+\t&& !(is_pointer_v<decay_t<_From>> && is_pointer_v<decay_t<_To>>\n+\t    && __not_same_as<remove_pointer_t<decay_t<_From>>,\n+\t\t\t     remove_pointer_t<decay_t<_To>>>);\n+\n     template<typename _Tp>\n       concept __pair_like\n \t= !is_reference_v<_Tp> && requires(_Tp __t)\n@@ -226,19 +232,12 @@ namespace ranges\n \t  { get<1>(__t) } -> convertible_to<const tuple_element_t<1, _Tp>&>;\n \t};\n \n-    template<typename _Tp, typename _Up, typename _Vp>\n-      concept __pair_like_convertible_to\n-\t= !range<_Tp> && __pair_like<remove_reference_t<_Tp>>\n-\t&& requires(_Tp&& __t)\n-\t{\n-\t  { get<0>(std::forward<_Tp>(__t)) } -> convertible_to<_Up>;\n-\t  { get<1>(std::forward<_Tp>(__t)) } -> convertible_to<_Vp>;\n-\t};\n-\n     template<typename _Tp, typename _Up, typename _Vp>\n       concept __pair_like_convertible_from\n \t= !range<_Tp> && __pair_like<_Tp>\n-\t&& constructible_from<_Tp, _Up, _Vp>;\n+\t&& constructible_from<_Tp, _Up, _Vp>\n+\t&& __convertible_to_non_slicing<_Up, tuple_element_t<0, _Tp>>\n+\t&& convertible_to<_Vp, tuple_element_t<1, _Tp>>;\n \n     template<typename _Tp>\n       concept __iterator_sentinel_pair\n@@ -277,12 +276,13 @@ namespace ranges\n       subrange() = default;\n \n       constexpr\n-      subrange(_It __i, _Sent __s) requires (!_S_store_size)\n+      subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s)\n+\trequires (!_S_store_size)\n       : _M_begin(std::move(__i)), _M_end(__s)\n       { }\n \n       constexpr\n-      subrange(_It __i, _Sent __s,\n+      subrange(__detail::__convertible_to_non_slicing<_It> auto __i, _Sent __s,\n \t       __detail::__make_unsigned_like_t<iter_difference_t<_It>> __n)\n \trequires (_Kind == subrange_kind::sized)\n       : _M_begin(std::move(__i)), _M_end(__s)\n@@ -295,7 +295,7 @@ namespace ranges\n \n       template<__detail::__not_same_as<subrange> _Rng>\n \trequires borrowed_range<_Rng>\n-\t  && convertible_to<iterator_t<_Rng>, _It>\n+\t  && __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n \tsubrange(_Rng&& __r) requires (!_S_store_size || sized_range<_Rng>)\n@@ -306,7 +306,7 @@ namespace ranges\n \t}\n \n       template<borrowed_range _Rng>\n-\trequires convertible_to<iterator_t<_Rng>, _It>\n+\trequires __detail::__convertible_to_non_slicing<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n \tsubrange(_Rng&& __r,\n@@ -315,23 +315,6 @@ namespace ranges\n \t: subrange{ranges::begin(__r), ranges::end(__r), __n}\n \t{ }\n \n-      template<__detail::__not_same_as<subrange> _PairLike>\n-\trequires __detail::__pair_like_convertible_to<_PairLike, _It, _Sent>\n-\tconstexpr\n-\tsubrange(_PairLike&& __r) requires (!_S_store_size)\n-\t: subrange{std::get<0>(std::forward<_PairLike>(__r)),\n-\t\t   std::get<1>(std::forward<_PairLike>(__r))}\n-\t{ }\n-\n-      template<__detail::__pair_like_convertible_to<_It, _Sent> _PairLike>\n-\tconstexpr\n-\tsubrange(_PairLike&& __r,\n-\t\t __detail::__make_unsigned_like_t<iter_difference_t<_It>> __n)\n-\trequires (_Kind == subrange_kind::sized)\n-\t: subrange{std::get<0>(std::forward<_PairLike>(__r)),\n-\t\t   std::get<1>(std::forward<_PairLike>(__r)), __n}\n-\t{ }\n-\n       template<__detail::__not_same_as<subrange> _PairLike>\n \trequires __detail::__pair_like_convertible_from<_PairLike, const _It&,\n \t\t\t\t\t\t\tconst _Sent&>\n@@ -402,6 +385,9 @@ namespace ranges\n       }\n     };\n \n+  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+    subrange(_It, _Sent) -> subrange<_It, _Sent>;\n+\n   template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n     subrange(_It, _Sent,\n \t     __detail::__make_unsigned_like_t<iter_difference_t<_It>>)"}, {"sha": "5c2f1de45ad4547fce9c1853505aaf1f4c2bb536", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/lwg3282_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3282_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f5310f0205714538668b88fbf1de44f1f435be/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3282_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2Flwg3282_neg.cc?ref=77f5310f0205714538668b88fbf1de44f1f435be", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+using std::ranges::subrange;\n+\n+// LWG 3282. subrange converting constructor should disallow derived to base\n+// conversions\n+\n+struct Base {};\n+struct Derived : Base {};\n+subrange<Derived*> sd;\n+subrange<Base*> sb = sd; // { dg-error \"conversion\" }"}]}