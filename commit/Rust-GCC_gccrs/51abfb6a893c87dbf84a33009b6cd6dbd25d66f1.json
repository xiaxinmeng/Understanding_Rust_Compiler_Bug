{"sha": "51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhYmZiNmE4OTNjODdkYmY4NGEzMzAwOWI2Y2Q2ZGJkMjVkNjZmMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-29T21:30:34Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-06T07:32:40Z"}, "message": "Fix 101256: Wrong code due to range incorrect from PHI-OPT\n\nSo the problem here is that replace_phi_edge_with_variable\nwill copy range information to a already (not newly) defined\nssa name.  This causes wrong code later on.\nThis fixes the problem by require the new ssa name to\nbe defined in the same bb as the conditional that is\nabout to be deleted.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nChanges from v1:\n* this is a simplification of what was trying to be done before.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/101256\n\t* dbgcnt.def (phiopt_edge_range): New counter.\n\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable):\n\tCheck to make sure the new name is defined in the same\n\tbb as the conditional before duplicating range info.\n\tAlso add debug counter.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/101256\n\t* g++.dg/torture/pr101256.C: New test.", "tree": {"sha": "3ba29867c6a85c8d476306977787785c5f2ffb70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba29867c6a85c8d476306977787785c5f2ffb70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e3855d5dd8c001bb65dc7da1cda0249bfc2986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e3855d5dd8c001bb65dc7da1cda0249bfc2986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e3855d5dd8c001bb65dc7da1cda0249bfc2986"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "2345899ba68f163c0139f78cde48de30f9492fb8", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "patch": "@@ -183,6 +183,7 @@ DEBUG_COUNTER (lim)\n DEBUG_COUNTER (local_alloc_for_sched)\n DEBUG_COUNTER (match)\n DEBUG_COUNTER (merged_ipa_icf)\n+DEBUG_COUNTER (phiopt_edge_range)\n DEBUG_COUNTER (postreload_cse)\n DEBUG_COUNTER (pre)\n DEBUG_COUNTER (pre_insn)"}, {"sha": "973a8b4caf34b28fe5f10cd27cbd1ea0248e48b9", "filename": "gcc/testsuite/g++.dg/torture/pr101256.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr101256.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr101256.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr101256.C?ref=51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+\n+template<class T> \n+const T& max(const T& a, const T& b)\n+{\n+    return (a < b) ? b : a;\n+}\n+\n+signed char var_5 = -128;\n+unsigned int var_11 = 2144479212U;\n+unsigned long long int arr [22];\n+\n+void\n+__attribute__((noipa))\n+test(signed char var_5, unsigned var_11) {\n+  for (short i_61 = 0; i_61 < var_5 + 149; i_61 += 10000)\n+    arr[i_61] = max((signed char)0, var_5) ? max((signed char)1, var_5) : var_11;\n+}\n+\n+int main() {\n+  for (int i_0 = 0; i_0 < 22; ++i_0) \n+      arr [i_0] = 11834725929543695741ULL;\n+\n+  test(var_5, var_11);\n+  if (arr [0] != 2144479212ULL && arr [0] != 11834725929543695741ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8b60ee8108213bfa53672322244a33a776e7a6c8", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51abfb6a893c87dbf84a33009b6cd6dbd25d66f1/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=51abfb6a893c87dbf84a33009b6cd6dbd25d66f1", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"gimple-range.h\"\n #include \"gimple-match.h\"\n+#include \"dbgcnt.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n@@ -390,27 +391,30 @@ replace_phi_edge_with_variable (basic_block cond_block,\n   gimple_stmt_iterator gsi;\n   tree phi_result = PHI_RESULT (phi);\n \n-  /* Duplicate range info if we're the only things setting the target PHI.\n+  /* Duplicate range info if they are the only things setting the target PHI.\n      This is needed as later on, the new_tree will be replacing\n      The assignement of the PHI.\n      For an example:\n      bb1:\n      _4 = min<a_1, 255>\n      goto bb2\n \n-     range<-INF,255>\n+     # RANGE [-INF, 255]\n      a_3 = PHI<_4(1)>\n      bb3:\n \n      use(a_3)\n-     And _4 gets prograted into the use of a_3 and losing the range info.\n-     This can't be done for more than 2 incoming edges as the progration\n-     won't happen.  */\n+     And _4 gets propagated into the use of a_3 and losing the range info.\n+     This can't be done for more than 2 incoming edges as the propagation\n+     won't happen.\n+     The new_tree needs to be defined in the same basic block as the conditional.  */\n   if (TREE_CODE (new_tree) == SSA_NAME\n       && EDGE_COUNT (gimple_bb (phi)->preds) == 2\n       && INTEGRAL_TYPE_P (TREE_TYPE (phi_result))\n       && !SSA_NAME_RANGE_INFO (new_tree)\n-      && SSA_NAME_RANGE_INFO (phi_result))\n+      && SSA_NAME_RANGE_INFO (phi_result)\n+      && gimple_bb (SSA_NAME_DEF_STMT (new_tree)) == cond_block\n+      && dbg_cnt (phiopt_edge_range))\n     duplicate_ssa_name_range_info (new_tree,\n \t\t\t\t   SSA_NAME_RANGE_TYPE (phi_result),\n \t\t\t\t   SSA_NAME_RANGE_INFO (phi_result));"}]}