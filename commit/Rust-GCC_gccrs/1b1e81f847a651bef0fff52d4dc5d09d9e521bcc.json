{"sha": "1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxZTgxZjg0N2E2NTFiZWYwZmZmNTJkNGRjNWQwOWQ5ZTUyMWJjYw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-06-26T14:00:56Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-06-26T14:00:56Z"}, "message": "[AArch64][2/2] Implement -fpic for -mcmodel=small\n\n2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n\ngcc/\n  * config/aarch64/aarch64-protos.h (aarch64_symbol_type): New type\n  SYMBOL_SMALL_GOT_28K.\n  * config/aarch64/aarch64.md: (ldr_got_small_<mode>): Support new GOT\n  relocation modifiers.\n  (unspec): New enum \"UNSPEC_GOTMALLPIC28K.\n  (ldr_got_small_28k_<mode>): New.\n  (ldr_got_small_28k_sidi): New.\n  * config/aarch64/iterators.md (got_modifier): New mode iterator.\n  * config/aarch64/aarch64-otps.h (aarch64_code_model): New model.\n  * config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Support\n  SYMBOL_SMALL_GOT_28K.\n  (aarch64_rtx_costs): Add costs for new instruction sequences.\n  (initialize_aarch64_code_model): Initialize new model.\n  (aarch64_classify_symbol): Recognize new model and new symbol classification.\n  (aarch64_asm_preferred_eh_data_format): Support new model.\n  (aarch64_load_symref_appropriately): Generate new instruction\n  sequences for -fpic.\n  (TARGET_USE_PSEUDO_PIC_REG): New definition.\n  (aarch64_use_pseudo_pic_reg): New function.\n\ngcc/testsuite/\n  * gcc.target/aarch64/pic-small.c: New testcase.\n\nFrom-SVN: r225017", "tree": {"sha": "64b16d72cff8de0a9ba7d3f8cb5d1b43cdde3f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b16d72cff8de0a9ba7d3f8cb5d1b43cdde3f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/comments", "author": null, "committer": null, "parents": [{"sha": "b175b679a4ec31502b1eb6752265f7be09ba9c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b175b679a4ec31502b1eb6752265f7be09ba9c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b175b679a4ec31502b1eb6752265f7be09ba9c08"}], "stats": {"total": 177, "additions": 174, "deletions": 3}, "files": [{"sha": "bf2d02c8c3c2b935499310ab491ca971a318356d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -67,6 +67,28 @@\n \t(AARCH64_FUSE_ADRP_LDR): Likewise.\n \t(AARCH64_FUSE_CMP_BRANCH): Likewise.\n \n+2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): New type\n+\tSYMBOL_SMALL_GOT_28K.\n+\t* config/aarch64/aarch64.md: (ldr_got_small_<mode>): Support new GOT\n+\trelocation modifiers.\n+\t(unspec): New enum \"UNSPEC_GOTMALLPIC28K.\n+\t(ldr_got_small_28k_<mode>): New.\n+\t(ldr_got_small_28k_sidi): New.\n+\t* config/aarch64/iterators.md (got_modifier): New mode iterator.\n+\t* config/aarch64/aarch64-otps.h (aarch64_code_model): New model.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Support\n+\tSYMBOL_SMALL_GOT_28K.\n+\t(aarch64_rtx_costs): Add costs for new instruction sequences.\n+\t(initialize_aarch64_code_model): Initialize new model.\n+\t(aarch64_classify_symbol): Recognize new model and new symbol classification.\n+\t(aarch64_asm_preferred_eh_data_format): Support new model.\n+\t(aarch64_load_symref_appropriately): Generate new instruction\n+\tsequences for -fpic.\n+\t(TARGET_USE_PSEUDO_PIC_REG): New definition.\n+\t(aarch64_use_pseudo_pic_reg): New function.\n+\n 2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Rename"}, {"sha": "24bfd9fd1506abf64478e3cf7abb29c573861435", "filename": "gcc/config/aarch64/aarch64-opts.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -56,6 +56,9 @@ enum aarch64_code_model {\n   /* Static code, data and GOT/PLT fit within a 4GB region.\n      The default PIC code model.  */\n   AARCH64_CMODEL_SMALL_PIC,\n+  /* -fpic for small memory model.\n+     GOT size to 28KiB (4K*8-4K) or 3580 entries.  */\n+  AARCH64_CMODEL_SMALL_SPIC,\n   /* No assumptions about addresses of code and data.\n      The PIC variant is not yet implemented.  */\n   AARCH64_CMODEL_LARGE"}, {"sha": "2c623cc145cbdbf195a2dff35aada15c454905b0", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -62,6 +62,13 @@ enum aarch64_symbol_context\n \n    This corresponds to the small PIC model of the compiler.\n \n+   SYMBOL_SMALL_GOT_28K: Similar to SYMBOL_SMALL_GOT_4G, but used for symbol\n+   restricted within 28K GOT table size.\n+\n+   ldr reg, [gp, #:gotpage_lo15:sym]\n+\n+   This corresponds to -fpic model for small memory model of the compiler.\n+\n    SYMBOL_SMALL_TLSGD\n    SYMBOL_SMALL_TLSDESC\n    SYMBOL_SMALL_GOTTPREL\n@@ -95,6 +102,7 @@ enum aarch64_symbol_context\n enum aarch64_symbol_type\n {\n   SYMBOL_SMALL_ABSOLUTE,\n+  SYMBOL_SMALL_GOT_28K,\n   SYMBOL_SMALL_GOT_4G,\n   SYMBOL_SMALL_TLSGD,\n   SYMBOL_SMALL_TLSDESC,"}, {"sha": "a11d8568e31d99f31f97e4323c60e05d53b186b3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -846,6 +846,66 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       emit_insn (gen_rtx_SET (dest, imm));\n       return;\n \n+    case SYMBOL_SMALL_GOT_28K:\n+      {\n+\tmachine_mode mode = GET_MODE (dest);\n+\trtx gp_rtx = pic_offset_table_rtx;\n+\n+\t/* NOTE: pic_offset_table_rtx can be NULL_RTX, because we can reach\n+\t   here before rtl expand.  Tree IVOPT will generate rtl pattern to\n+\t   decide rtx costs, in which case pic_offset_table_rtx is not\n+\t   initialized.  For that case no need to generate the first adrp\n+\t   instruction as the the final cost for global variable access is\n+\t   one instruction.  */\n+\tif (gp_rtx != NULL)\n+\t  {\n+\t    /* -fpic for -mcmodel=small allow 32K GOT table size (but we are\n+\t       using the page base as GOT base, the first page may be wasted,\n+\t       in the worst scenario, there is only 28K space for GOT).\n+\n+\t       The generate instruction sequence for accessing global variable\n+\t       is:\n+\n+\t         ldr reg, [pic_offset_table_rtx, #:gotpage_lo15:sym]\n+\n+\t       Only one instruction needed. But we must initialize\n+\t       pic_offset_table_rtx properly.  We generate initialize insn for\n+\t       every global access, and allow CSE to remove all redundant.\n+\n+\t       The final instruction sequences will look like the following\n+\t       for multiply global variables access.\n+\n+\t         adrp pic_offset_table_rtx, _GLOBAL_OFFSET_TABLE_\n+\n+\t         ldr reg, [pic_offset_table_rtx, #:gotpage_lo15:sym1]\n+\t         ldr reg, [pic_offset_table_rtx, #:gotpage_lo15:sym2]\n+\t         ldr reg, [pic_offset_table_rtx, #:gotpage_lo15:sym3]\n+\t         ...  */\n+\n+\t    rtx s = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+\t    crtl->uses_pic_offset_table = 1;\n+\t    emit_move_insn (gp_rtx, gen_rtx_HIGH (Pmode, s));\n+\n+\t    if (mode != GET_MODE (gp_rtx))\n+\t      gp_rtx = simplify_gen_subreg (mode, gp_rtx, GET_MODE (gp_rtx), 0);\n+\t  }\n+\n+\tif (mode == ptr_mode)\n+\t  {\n+\t    if (mode == DImode)\n+\t      emit_insn (gen_ldr_got_small_28k_di (dest, gp_rtx, imm));\n+\t    else\n+\t      emit_insn (gen_ldr_got_small_28k_si (dest, gp_rtx, imm));\n+\t  }\n+\telse\n+\t  {\n+\t    gcc_assert (mode == Pmode);\n+\t    emit_insn (gen_ldr_got_small_28k_sidi (dest, gp_rtx, imm));\n+\t  }\n+\n+\treturn;\n+      }\n+\n     case SYMBOL_SMALL_GOT_4G:\n       {\n \t/* In ILP32, the mode of dest can be either SImode or DImode,\n@@ -1498,6 +1558,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n         case SYMBOL_SMALL_TLSGD:\n         case SYMBOL_SMALL_TLSDESC:\n         case SYMBOL_SMALL_GOTTPREL:\n+\tcase SYMBOL_SMALL_GOT_28K:\n \tcase SYMBOL_SMALL_GOT_4G:\n \tcase SYMBOL_TINY_GOT:\n \t  if (offset != const0_rtx)\n@@ -6441,7 +6502,8 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n     case SYMBOL_REF:\n \n-      if (aarch64_cmodel == AARCH64_CMODEL_LARGE)\n+      if (aarch64_cmodel == AARCH64_CMODEL_LARGE\n+\t  || aarch64_cmodel == AARCH64_CMODEL_SMALL_SPIC)\n \t{\n \t  /* LDR.  */\n \t  if (speed)\n@@ -7295,7 +7357,9 @@ initialize_aarch64_code_model (void)\n \t   aarch64_cmodel = AARCH64_CMODEL_TINY_PIC;\n \t   break;\n \t case AARCH64_CMODEL_SMALL:\n-\t   aarch64_cmodel = AARCH64_CMODEL_SMALL_PIC;\n+\t   aarch64_cmodel = (flag_pic == 2\n+\t\t\t     ? AARCH64_CMODEL_SMALL_PIC\n+\t\t\t     : AARCH64_CMODEL_SMALL_SPIC);\n \t   break;\n \t case AARCH64_CMODEL_LARGE:\n \t   sorry (\"code model %qs with -f%s\", \"large\",\n@@ -7376,6 +7440,7 @@ aarch64_classify_symbol (rtx x, rtx offset,\n \tcase AARCH64_CMODEL_TINY:\n \t  return SYMBOL_TINY_ABSOLUTE;\n \n+\tcase AARCH64_CMODEL_SMALL_SPIC:\n \tcase AARCH64_CMODEL_SMALL_PIC:\n \tcase AARCH64_CMODEL_SMALL:\n \t  return SYMBOL_SMALL_ABSOLUTE;\n@@ -7423,9 +7488,11 @@ aarch64_classify_symbol (rtx x, rtx offset,\n \t    return SYMBOL_TINY_GOT;\n \t  return SYMBOL_TINY_ABSOLUTE;\n \n+\tcase AARCH64_CMODEL_SMALL_SPIC:\n \tcase AARCH64_CMODEL_SMALL_PIC:\n \t  if (!aarch64_symbol_binds_local_p (x))\n-\t    return SYMBOL_SMALL_GOT_4G;\n+\t    return (aarch64_cmodel == AARCH64_CMODEL_SMALL_SPIC\n+\t\t    ?  SYMBOL_SMALL_GOT_28K : SYMBOL_SMALL_GOT_4G);\n \t  return SYMBOL_SMALL_ABSOLUTE;\n \n \tdefault:\n@@ -9299,6 +9366,7 @@ aarch64_asm_preferred_eh_data_format (int code ATTRIBUTE_UNUSED, int global)\n      case AARCH64_CMODEL_TINY_PIC:\n      case AARCH64_CMODEL_SMALL:\n      case AARCH64_CMODEL_SMALL_PIC:\n+     case AARCH64_CMODEL_SMALL_SPIC:\n        /* text+got+data < 4Gb.  4-byte signed relocs are sufficient\n \t  for everything.  */\n        type = DW_EH_PE_sdata4;\n@@ -11594,6 +11662,15 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n   return true;\n }\n \n+/* Return 1 if pseudo register should be created and used to hold\n+   GOT address for PIC code.  */\n+\n+bool\n+aarch64_use_pseudo_pic_reg (void)\n+{\n+  return aarch64_cmodel == AARCH64_CMODEL_SMALL_SPIC;\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -11872,6 +11949,9 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n #undef TARGET_SCHED_FUSION_PRIORITY\n #define TARGET_SCHED_FUSION_PRIORITY aarch64_sched_fusion_priority\n \n+#undef TARGET_USE_PSEUDO_PIC_REG\n+#define TARGET_USE_PSEUDO_PIC_REG aarch64_use_pseudo_pic_reg\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "a1722684bc5b2e4bd982c0e6002505e0494c7a1c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -87,6 +87,7 @@\n     UNSPEC_FRINTX\n     UNSPEC_FRINTZ\n     UNSPEC_GOTSMALLPIC\n+    UNSPEC_GOTSMALLPIC28K\n     UNSPEC_GOTSMALLTLS\n     UNSPEC_GOTTINYPIC\n     UNSPEC_LD1\n@@ -4360,6 +4361,29 @@\n   [(set_attr \"type\" \"load1\")]\n )\n \n+(define_insn \"ldr_got_small_28k_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+\t(unspec:PTR [(mem:PTR (lo_sum:PTR\n+\t\t\t      (match_operand:PTR 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:PTR 2 \"aarch64_valid_symref\" \"S\")))]\n+\t\t    UNSPEC_GOTSMALLPIC28K))]\n+  \"\"\n+  \"ldr\\\\t%<w>0, [%1, #:<got_modifier>:%a2]\"\n+  [(set_attr \"type\" \"load1\")]\n+)\n+\n+(define_insn \"ldr_got_small_28k_sidi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (unspec:SI [(mem:SI (lo_sum:DI\n+\t\t\t     (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:DI 2 \"aarch64_valid_symref\" \"S\")))]\n+\t\t    UNSPEC_GOTSMALLPIC28K)))]\n+  \"TARGET_ILP32\"\n+  \"ldr\\\\t%w0, [%1, #:gotpage_lo14:%a2]\"\n+  [(set_attr \"type\" \"load1\")]\n+)\n+\n (define_insn \"ldr_got_tiny\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"aarch64_valid_symref\" \"S\")]"}, {"sha": "b19d3d743a733303371341d9f323f47ed83618c3", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -657,6 +657,10 @@\n \n (define_mode_attr insn_count [(OI \"8\") (CI \"12\") (XI \"16\")])\n \n+;; -fpic small model GOT reloc modifers: gotpage_lo15/lo14 for ILP64/32.\n+;; No need of iterator for -fPIC as it use got_lo12 for both modes.\n+(define_mode_attr got_modifier [(SI \"gotpage_lo14\") (DI \"gotpage_lo15\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------"}, {"sha": "610650edef7d6fff3ede7b5ca77c6b4188e152af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -1,3 +1,7 @@\n+2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/pic-small.c: New testcase.\n+\n 2015-06-26  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/forwprop-25.c: Adjust."}, {"sha": "874f81b830be9be13a1eaf4a1dc575809fccb785", "filename": "gcc/testsuite/gcc.target/aarch64/pic-small.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1e81f847a651bef0fff52d4dc5d09d9e521bcc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-small.c?ref=1b1e81f847a651bef0fff52d4dc5d09d9e521bcc", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic -fno-inline --save-temps\" } */\n+\n+void abort ();\n+int global_a;\n+\n+int\n+initialize (void)\n+{\n+  global_a = 0x10;\n+  return global_a - 1;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int a = initialize ();\n+\n+  if (a != global_a - 1)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"adrp\\tx\\[0-9\\]+, _GLOBAL_OFFSET_TABLE\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}