{"sha": "74ac79fa800af6de648e984cc5576c20b817839d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhYzc5ZmE4MDBhZjZkZTY0OGU5ODRjYzU1NzZjMjBiODE3ODM5ZA==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.com", "date": "2006-01-20T09:30:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-20T09:30:22Z"}, "message": "re PR c++/5520 (Add a warning to detect empty body of if statements (like in the C frontend))\n\n2006-01-20  Dirk Mueller  <dmueller@suse.com>\n\n        PR c++/5520\n        * c-parser.c (c_parser_if_body): Use build_empty_stmt()\n        instead of a special NOP marker.\n        * c-typeck.c (c_finish_if_stmt): Remove obsoleted special\n        NOP marker handling.\n        * c-common.h (empty_body_warning): Add forward declaration.\n        * c-common.c (empty_body_warning): Add (from c_finish_if_stmt).\n        Now uses IS_EMPTY_STMT() instead of special NOP markers.\n\n        * semantics.c (finish_if_stmt): Call empty_body_warning.\n        * parser.c (cp_parser_implicitly_scoped_statement):\n        Mark empty statement with an empty stmt.\n\n        * g++.dg/warn/empty-body.C: New.\n\nFrom-SVN: r110019", "tree": {"sha": "bc92b7d88bae96e3177ed2217eb031fe56a30961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc92b7d88bae96e3177ed2217eb031fe56a30961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74ac79fa800af6de648e984cc5576c20b817839d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ac79fa800af6de648e984cc5576c20b817839d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ac79fa800af6de648e984cc5576c20b817839d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ac79fa800af6de648e984cc5576c20b817839d/comments", "author": {"login": "dirkmueller", "id": 1029152, "node_id": "MDQ6VXNlcjEwMjkxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1029152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirkmueller", "html_url": "https://github.com/dirkmueller", "followers_url": "https://api.github.com/users/dirkmueller/followers", "following_url": "https://api.github.com/users/dirkmueller/following{/other_user}", "gists_url": "https://api.github.com/users/dirkmueller/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirkmueller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirkmueller/subscriptions", "organizations_url": "https://api.github.com/users/dirkmueller/orgs", "repos_url": "https://api.github.com/users/dirkmueller/repos", "events_url": "https://api.github.com/users/dirkmueller/events{/privacy}", "received_events_url": "https://api.github.com/users/dirkmueller/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "577b02d86397e9f5a09392d2ea9f722b8a250709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577b02d86397e9f5a09392d2ea9f722b8a250709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577b02d86397e9f5a09392d2ea9f722b8a250709"}], "stats": {"total": 114, "additions": 79, "deletions": 35}, "files": [{"sha": "0a23c2214f6096f95fa6354f2ee027d4e0f4202f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -1,3 +1,14 @@\n+2006-01-20  Dirk Mueller  <dmueller@suse.com>\n+\n+        PR c++/5520\n+        * c-parser.c (c_parser_if_body): Use build_empty_stmt()\n+        instead of a special NOP marker.\n+        * c-typeck.c (c_finish_if_stmt): Remove obsoleted special\n+        NOP marker handling.\n+        * c-common.h (empty_body_warning): Add forward declaration.\n+        * c-common.c (empty_body_warning): Add (from c_finish_if_stmt).\n+        Now uses IS_EMPTY_STMT() instead of special NOP markers.\n+\n 2005-01-20  Paul Brook  <paul@codesourcery.com>\n \n \t* Makefile.in (lang_checks): Keep going if mkdir fails."}, {"sha": "60035ea601b8286fe5e0531b585c298ec40dca3f", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -994,6 +994,36 @@ strict_aliasing_warning(tree otype, tree type, tree expr)\n     }\n }\n \n+\n+/* Print a warning about if (); or if () .. else; constructs\n+   via the special empty statement node that we create.  INNER_THEN\n+   and INNER_ELSE are the statement lists of the if and the else\n+   block.  */\n+\n+void\n+empty_body_warning (tree inner_then, tree inner_else)\n+{\n+  if (extra_warnings)\n+    {\n+      if (TREE_CODE (inner_then) == STATEMENT_LIST\n+\t  && STATEMENT_LIST_TAIL (inner_then))\n+\tinner_then = STATEMENT_LIST_TAIL (inner_then)->stmt;\n+\n+      if (inner_else && TREE_CODE (inner_else) == STATEMENT_LIST\n+\t  && STATEMENT_LIST_TAIL (inner_else))\n+\tinner_else = STATEMENT_LIST_TAIL (inner_else)->stmt;\n+\n+      if (IS_EMPTY_STMT (inner_then) && !inner_else)\n+\twarning (OPT_Wextra, \"%Hempty body in an if-statement\",\n+\t\t EXPR_LOCUS (inner_then));\n+\n+      if (inner_else && IS_EMPTY_STMT (inner_else))\n+\twarning (OPT_Wextra, \"%Hempty body in an else-statement\",\n+\t\t EXPR_LOCUS (inner_else));\n+   }\n+}\n+\n+  \n /* Nonzero if constant C has a value that is permissible\n    for type TYPE (an INTEGER_TYPE).  */\n "}, {"sha": "ba7dc5cf6e89e64b147c9682bd5fd21d65e20619", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -655,6 +655,7 @@ extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);\n extern void strict_aliasing_warning(tree, tree, tree);\n+extern void empty_body_warning (tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void unsigned_conversion_warning (tree, tree);"}, {"sha": "a5fa523dd3e8e44c0cdd4b0a445e3caca92c29a7", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -3804,7 +3804,7 @@ c_parser_if_body (c_parser *parser, bool *if_p)\n     c_parser_label (parser);\n   *if_p = c_parser_next_token_is_keyword (parser, RID_IF);\n   if (extra_warnings && c_parser_next_token_is (parser, CPP_SEMICOLON))\n-    add_stmt (build1 (NOP_EXPR, NULL_TREE, NULL_TREE));\n+    add_stmt (build_empty_stmt ());\n   c_parser_statement_after_labels (parser);\n   return c_end_compound_stmt (block, flag_isoc99);\n }"}, {"sha": "c6f658baf85748702c779f44e3f9cb2a78fb80fa", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -7186,36 +7186,7 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n \t\t  &if_locus);\n     }\n \n-  /* Diagnose \";\" via the special empty statement node that we create.  */\n-  if (extra_warnings)\n-    {\n-      tree *inner_then = &then_block, *inner_else = &else_block;\n-\n-      if (TREE_CODE (*inner_then) == STATEMENT_LIST\n-\t  && STATEMENT_LIST_TAIL (*inner_then))\n-\tinner_then = &STATEMENT_LIST_TAIL (*inner_then)->stmt;\n-      if (*inner_else && TREE_CODE (*inner_else) == STATEMENT_LIST\n-\t  && STATEMENT_LIST_TAIL (*inner_else))\n-\tinner_else = &STATEMENT_LIST_TAIL (*inner_else)->stmt;\n-\n-      if (TREE_CODE (*inner_then) == NOP_EXPR && !TREE_TYPE (*inner_then))\n-\t{\n-\t  if (!*inner_else)\n-\t    warning (0, \"%Hempty body in an if-statement\",\n-\t\t     EXPR_LOCUS (*inner_then));\n-\n-\t  *inner_then = alloc_stmt_list ();\n-\t}\n-      if (*inner_else\n-\t  && TREE_CODE (*inner_else) == NOP_EXPR\n-\t  && !TREE_TYPE (*inner_else))\n-\t{\n-\t  warning (0, \"%Hempty body in an else-statement\",\n-\t\t   EXPR_LOCUS (*inner_else));\n-\n-\t  *inner_else = alloc_stmt_list ();\n-\t}\n-    }\n+  empty_body_warning (then_block, else_block);\n \n   stmt = build3 (COND_EXPR, void_type_node, cond, then_block, else_block);\n   SET_EXPR_LOCATION (stmt, if_locus);"}, {"sha": "b54d930c377cc9600e5932dd9244e06edaa209f7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -1,3 +1,10 @@\n+2006-01-20  Dirk Mueller  <dmueller@suse.com>\n+\n+        PR c++/5520\n+        * semantics.c (finish_if_stmt): Call empty_body_warning.\n+        * parser.c (cp_parser_implicitly_scoped_statement):\n+        Mark empty statement with an empty stmt.\n+\n 2006-01-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22136"}, {"sha": "cf19fbf1595caabaafb6a395a043d3d7d2a1cab5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -6827,8 +6827,17 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser)\n {\n   tree statement;\n \n+  /* Mark if () ; with a special NOP_EXPR.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+    {\n+      cp_lexer_consume_token (parser->lexer);\n+      statement = add_stmt (build_empty_stmt ());\n+    }\n+  /* if a compound is opened, we simply parse the statement directly.  */\n+  else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+    statement = cp_parser_compound_statement (parser, NULL, false);\n   /* If the token is not a `{', then we must take special action.  */\n-  if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n+  else\n     {\n       /* Create a compound-statement.  */\n       statement = begin_compound_stmt (0);\n@@ -6837,9 +6846,6 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser)\n       /* Finish the dummy compound-statement.  */\n       finish_compound_stmt (statement);\n     }\n-  /* Otherwise, we simply parse the statement directly.  */\n-  else\n-    statement = cp_parser_compound_statement (parser, NULL, false);\n \n   /* Return the statement.  */\n   return statement;"}, {"sha": "6121d43b99f6fbdb15156ff093fe1d6248154979", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -670,6 +670,7 @@ finish_if_stmt (tree if_stmt)\n   TREE_CHAIN (if_stmt) = NULL;\n   add_stmt (do_poplevel (scope));\n   finish_stmt ();\n+  empty_body_warning (THEN_CLAUSE (if_stmt), ELSE_CLAUSE (if_stmt));\n }\n \n /* Begin a while-statement.  Returns a newly created WHILE_STMT if"}, {"sha": "c0cc34200a28ab5cc6402934408ea5fb4faccb0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -1,3 +1,8 @@\n+2006-01-20  Dirk Mueller  <dmueller@suse.com>\n+\n+        PR c++/5520\n+        * g++.dg/warn/empty-body.C: New.\n+\n 2006-01-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22136"}, {"sha": "6ca8900fda0cf74d20e66f1e8cac311d8122959c", "filename": "gcc/testsuite/g++.dg/warn/empty-body.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fempty-body.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ac79fa800af6de648e984cc5576c20b817839d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fempty-body.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fempty-body.C?ref=74ac79fa800af6de648e984cc5576c20b817839d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/5520\n+// { dg-options \"-O2 -Wextra\" }\n+\n+void breakme()\n+{\n+  if(1) ;   // { dg-warning \"empty body\" }\n+  if(1) {}  // { dg-bogus \"empty body\" }\n+  if(1) (void)0; // { dg-bogus \"empty body\" }\n+  if(1) {} else; // { dg-warning \"empty body\" }\n+  if(1) {} else (void)0; // // { dg-bogus \"empty body\" }\n+  if(1) ;  else (void)0; // // { dg-bogus \"empty body\" }\n+}"}]}