{"sha": "e2e04288542667307df925f7d0a4b0fa2030f741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMDQyODg1NDI2NjczMDdkZjkyNWY3ZDBhNGIwZmEyMDMwZjc0MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-21T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-21T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "163aabd926cde017c5efb3f901127d21d2a53dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/163aabd926cde017c5efb3f901127d21d2a53dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e04288542667307df925f7d0a4b0fa2030f741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e04288542667307df925f7d0a4b0fa2030f741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e04288542667307df925f7d0a4b0fa2030f741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e04288542667307df925f7d0a4b0fa2030f741/comments", "author": null, "committer": null, "parents": [{"sha": "deb1365e5cbb9c76b721a41ba53d8e63dc8de9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb1365e5cbb9c76b721a41ba53d8e63dc8de9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb1365e5cbb9c76b721a41ba53d8e63dc8de9f0"}], "stats": {"total": 771, "additions": 770, "deletions": 1}, "files": [{"sha": "a44bc0995ff5bcc54a33a82c31ef574f3fd045f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,139 @@\n+2020-10-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97505\n+\t* vr-values.c (vr_values::extract_range_basic): Trap if\n+\tvr_values version disagrees with range_of_builtin_call.\n+\n+2020-10-20  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tDon't implcitly enable Altivec ABI if set on the command line.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* calls.c (get_size_range): Adjust to work with ranger.\n+\t* calls.h (get_size_range): Add ranger argument to prototype.\n+\t* gimple-ssa-warn-restrict.c (class wrestrict_dom_walker): Remove.\n+\t(check_call): Pull out of wrestrict_dom_walker into a\n+\tstatic function.\n+\t(wrestrict_dom_walker::before_dom_children): Rename to...\n+\t(wrestrict_walk): ...this.\n+\t(pass_wrestrict::execute): Instantiate ranger.\n+\t(class builtin_memref): Add stmt and query fields.\n+\t(builtin_access::builtin_access): Add range_query field.\n+\t(builtin_memref::builtin_memref): Same.\n+\t(builtin_memref::extend_offset_range): Same.\n+\t(builtin_access::builtin_access): Make work with ranger.\n+\t(wrestrict_dom_walker::check_call): Pull out into...\n+\t(check_call): ...here.\n+\t(check_bounds_or_overlap): Add range_query argument.\n+\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap):\n+\tAdd range_query and gimple stmt arguments.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-warn-alloca.c (enum alloca_type): Remove\n+\tALLOCA_BOUND_UNKNOWN and ALLOCA_CAST_FROM_SIGNED.\n+\t(warn_limit_specified_p): New.\n+\t(alloca_call_type_by_arg): Remove.\n+\t(cast_from_signed_p): Remove.\n+\t(is_max): Remove.\n+\t(alloca_call_type): Remove heuristics and replace with call into\n+\tranger.\n+\t(pass_walloca::execute): Instantiate ranger.\n+\n+2020-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* lto-wrapper.c (run_gcc): Use proper variable for\n+\t%u.ltrans_args dump suffix.\n+\n+2020-10-20  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor get/set reg intrinsics.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::range_of_builtin_ubsan_call):\n+\tMake externally visble...\n+\t(range_of_builtin_ubsan_call): ...here.  Add range_query argument.\n+\t(gimple_ranger::range_of_builtin_call): Make externally visible...\n+\t(range_of_builtin_call): ...here.  Add range_query argument.\n+\t* gimple-range.h (range_of_builtin_call): Move out from class and\n+\tmake externally visible.\n+\t* vr-values.c (vr_values::extract_range_basic): Abstract out\n+\tbuiltin handling to...\n+\t(vr_values::range_of_expr): Handle non SSAs.\n+\t(vr_values::extract_range_builtin): ...here.\n+\t* vr-values.h (class vr_values): Add extract_range_builtin.\n+\t(range_of_expr): Rename NAME to EXPR.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97501\n+\t* gimple-range.cc (gimple_ranger::range_of_ssa_name_with_loop_info):\n+\tSaturate overflows returned from SCEV.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::operator=): Split up call to\n+\tcopy_legacy_range into...\n+\t(irange::copy_to_legacy): ...this.\n+\t(irange::copy_legacy_to_multi_range): ...and this.\n+\t(irange::copy_legacy_range): Remove.\n+\t* value-range.h: Remove copoy_legacy_range.\n+\tAdd copy_legacy_to_multi_range and copy_to_legacy.\n+\n+2020-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/invoke.texi (NVPTX options): Use @item not @itemx.\n+\n+2020-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (reinstall_phi_args): Remove.\n+\t(gimple_split_edge): Remove PHIs around the edge redirection\n+\tto avoid touching them at all.\n+\n+2020-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Use the correct\n+\tloops latch edge for the PHI arg lookup.\n+\n+2020-10-20  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.md (andneghi3): Allow general operand for\n+\top1 and update output assembler template.\n+\n+2020-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* collect-utils.c (collect_execute, fork_execute): Add at-file suffix\n+\targument.\n+\t* collect-utils.h (collect_execute, fork_execute): Update prototype.\n+\t* collect2.c (maybe_run_lto_and_relink, do_link, main, do_dsymutil):\n+\tUpdate calls by passing NULL.\n+\t* config/i386/intelmic-mkoffload.c (compile_for_target,\n+\tgenerate_host_descr_file, prepare_target_image, main): Likewise.\n+\t* config/gcn/mkoffload.c (compile_native, main): Pass at-file suffix.\n+\t* config/nvptx/mkoffload.c (compile_native, main): Likewise.\n+\t* lto-wrapper.c (compile_offload_image): Likewise.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_rshift::op1_range): Special case\n+\tshifting by zero.\n+\n+2020-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97496\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Guard extern\n+\tpromotion with not in pattern.\n+\n+2020-10-20  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_strlen): Add alignment\n+\tfor memory access inside loop.\n+\n 2020-10-19  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/97360"}, {"sha": "8a26653d7f826a92ab7326ca7930d098ccd607ec", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1 +1 @@\n-20201020\n+20201021"}, {"sha": "85d1f54f020badfa102f1255f278c9749231f6d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 438, "deletions": 0, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,441 @@\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Decimal, Constrain_Enumeration,\n+\tConstrain_Float, Constrain_Integer, Constrain_Ordinary_Fixed):\n+\tRefine parameter type from Node_Id to Entity_Id.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sprint.adb (po): Set Dump_Freeze_Null to False; align colons.\n+\t(ps): Likewise.\n+\n+2020-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb: The flag Box_Present can appear in\n+\tIterated_Element_Association nodes.\n+\t* sem_aggr.adb (Resolve_Aggregate): Call\n+\tResolve_Container_Aggregate when type of context has\n+\tcorresponding aspect.\n+\t* sem_type.adb (Covers): In Ada_2020 an aggregate is compatible\n+\twith a type that carries the corresponding aspect.\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Do not\n+\tcreate declarations and bodies for inherited primitive functions\n+\tof null extensions that dispatch on result, when current scope\n+\tincludes an immediately visible non-overloadable homonym of the\n+\tfunction.\n+\t* libgnat/a-cborse.adb, libgnat/a-cborse.ads,\n+\tlibgnat/a-cbhase.ads, libgnat/a-cbhase.adb,\n+\tlibgnat/a-cborma.adb, libgnat/a-cborma.ads,\n+\tlibgnat/a-cbhama.adb, libgnat/a-cbhama.ads,\n+\tlibgnat/a-cbdlli.adb, libgnat/a-cbdlli.ads,\n+\tlibgnat/a-convec.ads, libgnat/a-ciorse.ads,\n+\tlibgnat/a-cihase.ads, libgnat/a-cihase.adb,\n+\tlibgnat/a-ciorma.ads, libgnat/a-cihama.ads,\n+\tlibgnat/a-cihama.adb, libgnat/a-cidlli.ads,\n+\tlibgnat/a-cidlli.adb, libgnat/a-coinve.adb,\n+\tlibgnat/a-cobove.adb, libgnat/a-cobove.ads,\n+\tlibgnat/a-convec.adb, libgnat/a-coinve.ads,\n+\tlibgnat/a-coorse.ads, libgnat/a-cohase.adb,\n+\tlibgnat/a-cohase.ads, libgnat/a-coorma.ads,\n+\tlibgnat/a-cohama.adb, libgnat/a-cohama.ads,\n+\tlibgnat/a-cdlili.ads: Add primitive function Empty for use in\n+\taspect Aggregate, and add corresponding body or expression\n+\tfunction.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.adb (Has_Aspect_Specifications_Flag): Add\n+\tN_Parameter_Specification.\n+\t* par-ch13.adb (Aspect_Specifications_Present): Also handle case\n+\tof an unknown aspect on the last formal parameter (terminated by\n+\ta Tok_Right_Paren). Minor reformatting.\n+\t* par-ch6.adb (P_Formal_Part): Scan aspects on formal\n+\tparameters.\n+\t* par.adb: Fix typos.\n+\t* sem_ch6.adb (Process_Formals): Add processing of aspects and\n+\tin particular Unreferenced aspect for now.\n+\t* sinfo.ads: Allow ASPECT_SPECIFICATIONS on a\n+\tPARAMETER_SPECIFICATION.\n+\t* doc/gnat_rm/implementation_defined_aspects.rst\n+\t(Aspect Unreferenced): Update documentation.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Get_Accessibility): Refine result\n+\ttype from Node_Id to Entity_Id.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb, exp_attr.adb, sem_ch13.adb, sem_util.adb: Use\n+\tIs_Formal where possible.\n+\n+2020-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.ads: Declare a new package, Old_Attr_Util, which in\n+\tturn declares two more packages, Conditional_Evaluation and\n+\tIndirect_Temps. Conditional_Evaluation provides a predicate for\n+\tdeciding whether a given 'Old attribute reference is eligible\n+\tfor conditional evaluation and, in the case where it is\n+\teligible, a function that constructs the Boolean-valued\n+\tcondition that is to be evaluated at run time in deciding\n+\twhether to evaluate the attribute prefix.  Indirect_Temps\n+\tprovides support for declaring a temporary which is only\n+\tinitialized conditionally; more specifically, an access type and\n+\ta variable of that type are declared (unconditionally) and then\n+\tthe variable is (conditionally) initialized with an allocator.\n+\tThe existence of the access type and the pointer variable is\n+\thidden from clients, except that a predicate,\n+\tIs_Access_Type_For_Indirect_Temp, is provided for identifying\n+\tsuch access types. This is needed because we want such an access\n+\ttype to be treated like a \"normal\" access type (specifically\n+\twith respect to finalization of allocated objects). Other parts\n+\tof the compiler treat access types differently if\n+\tComes_From_Source is False, or if the secondary stack storage\n+\tpool is used; this predicate is used to disable this special\n+\ttreatment.\n+\t* sem_attr.adb (Uneval_Old_Msg): Improve message text to reflect\n+\tAda202x changes.\n+\t(Analyze_Attribute): A previously-illegal 'Old attribute\n+\treference is accepted in Ada2020 if it is eligible for\n+\tconditional evaluation.\n+\t* sem_res.adb (Valid_Conversion): Do not treat a rewritten 'Old\n+\tattribute like other rewrite substitutions. This makes a\n+\tdifference, for example, in the case where we are generating the\n+\texpansion of a membership test of the form \"Saooaaat'Old in\n+\tNamed_Access_Type\"; in this case Valid_Conversion needs to\n+\treturn True (otherwise the expansion will be False - see the\n+\tcall site in exp_ch4.adb).\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): When expanding a\n+\t'Old attribute reference, test for the case where the reference\n+\tis eligible for conditional evaluation. In that case, use the\n+\tnew \"indirect temporary\" mechanism provided by Sem_Util.\n+\t* exp_prag.adb\n+\t(Expand_Attributes_In_Consequence.Expand_Attributes): If\n+\tSem_Util.Indirect_Temp_Needed indicates that there could be\n+\tcorrectness problems associated with the old expansion scheme\n+\tfor dealing with 'Old attributes in contract cases consequences,\n+\tthen we use the new \"indirect temporary\" mechanism provided by\n+\tSem_Util instead. We do not want to do this unconditionally.\n+\t* sem_util.adb: Provide a body for the new Old_Attr_Util\n+\tpackage. Further work is needed in several areas for\n+\tcorrectness:\n+\t- The function Is_Repeatedly_Evaluated does not deal with\n+\tcontainer aggregates yet.\n+\t- The function Is_Known_On_Entry does not deal with interactions\n+\twith the Global aspect.\n+\tEach area where more work is needed is indicated with a \"???\"\n+\tcomment in the code; a more detailed description can be found\n+\tthere. Some optimization opportunties are similarly indicated\n+\twith a \"???\" comment.\n+\t* exp_ch3.adb (Freeze_Type): In deciding whether to generate\n+\texpansion for the list controller of an access type, take the\n+\tpredicate Is_Access_Type_For_Indirect_Temp into account. If the\n+\tpredicate yields True, then generate the expansion.\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): We don't\n+\tnormally finalize allocated objects that are allocated on the\n+\tsecondary stack. Add an exception to this rule if the predicate\n+\tIs_Access_Type_For_Indirect_Temp yields True.  As a result of\n+\tthis exception, we have to deal with the fact that gigi expects\n+\ta different parameter profile if we are using the secondary\n+\tstack pool; the Pool and Alignment parameters must be omitted in\n+\tthis case.\n+\n+2020-10-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch12.adb (Install_Parents_Of_Generic_Context,\n+\tRemove_Parents_Of_Generic_Context): New subprograms.\n+\t(Instantiate_Package_Body): Adding assertions to ensure that\n+\tinstalled parents are properly removed.\n+\n+2020-10-20  Claire Dross  <dross@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Emit a warning on 'Update\n+\twhen Warn_On_Obsolescent_Feature is set to True.\n+\n+2020-10-20  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gnat_cuda.adb (Build_Register_Function_Call): Make procedure\n+\tcall instead of function, rename to\n+\tBuild_Register_Procedure_Call.\n+\t(Build_CUDA_Init_Proc): Make procedure call instead of function.\n+\n+2020-10-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Branch): Properly anticipate expansion of\n+\tconditional expressions producing object declarations in\n+\taddition to assignment statements, and rename formal.\n+\n+2020-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Write_Source_Code_Line): Adopt display closer to\n+\tGCC format.\n+\t(Output_Messages): Deal specially with info messages.\n+\t* erroutc.adb (Prescan_Message): Fix bug leading to check\n+\tmessages being considered as error messages in pretty output\n+\tmode.\n+\n+2020-10-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Properly handle the case\n+\twhere the condition of a conditional expression has been\n+\toptimized out when calculating the value of an extra\n+\taccessibility parameter.\n+\n+2020-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Change \"_\" to \"-\".\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Aggregate): Warn on not fully\n+\tinitialized box aggregate.\n+\t* sem_aggr.ads: Fix typo.\n+\t* sem_res.adb (Resolve_Actuals): Fix typo in error message\n+\tformat marking it incorrectly as a continuation message.\n+\t* sem_elab.adb (Check_Internal_Call_Continue): Similarly, add\n+\tmissing primary message in case of a call to an actual generic\n+\tsubprogram.\n+\t* sem_warn.adb (Check_References): Do not warn on read but never\n+\tassigned variables if the type is partially initialized.\n+\t* libgnat/a-except.ads, libgnat/a-ststun.ads,\n+\tlibgnat/g-sechas.ads, libgnat/a-cbdlli.ads,\n+\tlibgnat/a-cfdlli.ads, libgnat/a-cobove.ads,\n+\tlibgnat/a-cohata.ads, libgnat/a-crbltr.ads,\n+\tlibgnat/a-cbmutr.ads, libgnat/a-crdlli.ads,\n+\tlibgnat/a-cbsyqu.ads: Address new warning.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tUpdate doc on -gnatwv.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-10-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Mark static\n+\texpression functions as inlined.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* contracts.adb (Is_Prologue_Renaming): This function was\n+\tmissing support for E_Constant which can also be generated in\n+\tprotected objects.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindgen.adb (Gen_Bind_Env_String): Generate Ada 2012 compatible\n+\tstrings. Code cleanup.\n+\n+2020-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads: Comment fix.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Check_Constrained_Object): Suppress discriminant\n+\tchecks when the type has default discriminants and comes from\n+\texpansion of a \"for of\" loop.\n+\n+2020-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.ads: Make Default_Node a constant.  Remove the\n+\tmodification of Comes_From_Source, and use a separate flag for\n+\tthat.  Change Sloc to 0; it always overwritten, and never left\n+\tas the No_Location value.\n+\t(Print_Statistics): Move to spec so we can call it from\n+\tgnat1drv.\n+\t(Num_Nodes): Rename to clarify that this is approximate.\n+\tCorrect comment: nodes and entities are never deleted, the count\n+\tis never decremented, and this is not used by Xref.\n+\t(Initialize): Correct comment: Error_List is not created here.\n+\tOther minor naming and comment changes.\n+\t* atree.adb (Extend_Node, New_Copy, New_Entity, New_Node):\n+\tStreamline these. Simplify and improve efficiency.  Move code\n+\tfrom Allocate_Initialize_Node to these, where it can be executed\n+\tunconditionally.  Take advantage of automatic zeroing of the\n+\tNodes table.\n+\t(Allocate_Initialize_Node): Remove this. It was an efficiency\n+\tbottleneck, and somewhat complicated, because it was called from\n+\t4 places, and had all sorts of conditionals to check where it\n+\twas called from. Better to move most of that code to the call\n+\tsites, where it can be executed (or not) unconditionally.\n+\t(Allocate_New_Node): New procedure to partly replace\n+\tAllocate_Initialize_Node (called from just 2 of those 4 places).\n+\t(Comes_From_Source_Default): New flag written/read by\n+\tSet_Comes_From_Source_Default/Get_Comes_From_Source_Default.\n+\tThis allows us to make Default_Node into a constant with\n+\tall-zeros value.\n+\t(Set_Paren_Count_Of_Copy): New procedure to avoid duplicated\n+\tcode.\n+\t(Report): New procedure to encapsulate the call to the reporting\n+\tprocedure.\n+\t(Atree_Private_Part): We now need a body for this package, to\n+\tcontain package body Nodes.\n+\t(Approx_Num_Nodes_And_Entities): Was Num_Nodes.  For efficiency,\n+\tcompute the answer from Nodes.Last. That way we don't need to\n+\tincrement a counter on every node creation. Other minor naming\n+\tand comment changes.\n+\t* gnat1drv.adb: Call Atree.Print_Statistics if -gnatd.A switch\n+\twas given.  Add comment documenting the new order dependency (we\n+\tmust process the command line before calling Atree.Initialize).\n+\t* debug.adb: Document -gnatd.A.\n+\t* einfo.adb, sinfo.adb: Remove useless Style_Checks pragmas.\n+\t* nlists.ads (Allocate_List_Tables): Inline makes node creation\n+\ta little faster.\n+\t* nlists.adb (Initialize): Remove local constant E, which didn't\n+\tseem to add clarity.\n+\t* treepr.adb (Print_Init): Use renamed\n+\tApprox_Num_Nodes_And_Entities function.\n+\t* types.ads: Change the Low and High bounds as described above.\n+\t* types.h: Change Low and High bounds to match types.ads.\n+\t* sem_ch8.adb, namet.adb, namet.ads: Move the computation of\n+\tLast_Name_Id from sem_ch8 to namet, and correct it to not assume\n+\tName_Ids are positive.\n+\t* ali.adb, ali-util.adb, bindo-writers.adb, exp_dist.adb,\n+\tfmap.adb, fname-uf.adb, osint.adb: Fix various hash functions to\n+\tavoid assuming the various ranges are positive. Note that \"mod\"\n+\treturns a nonnegative result when the second operand is\n+\tpositive. \"rem\" can return negative values in that case (in\n+\tparticular, if the first operand is negative, which it now is).\n+\t* switch-c.adb: Allow switch -gnaten to control the value of\n+\tNodes_Size_In_Meg.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tRemove traling whitespaces.\n+\t* opt.ads (Nodes_Size_In_Meg): New Variable.\n+\n+2020-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Always generate a renaming\n+\tthat is handled by the front-end in the case of an indexed or a\n+\tselected component whose prefix has a nonstandard representation.\n+\n+2020-10-20  Pat Rogers  <rogers@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Add Ada.Task_Initialization.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb: (Error_Msg-Internal): Pass the location for a line\n+\tinsertion if any in the message.\n+\t(Output_Messages: Add display of source code lines if -gnatdF is\n+\tset.\n+\t(Write_Source_Code_Line): Code clean up.\n+\t* erroutc.adb (Prescan_Message): Apply prescan for continuation\n+\tlines when -gnatdF is set, and record presence of line\n+\tinsertion.\n+\t* erroutc.ads (Has_Insertion_Line): New global for prescan.\n+\t(Error_Msg_Object): Add field to record line insertion if\n+\tpresent.\n+\t* errutil.adb (Error_Msg): Pass no location for Insertion_Sloc.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Case_Statement): Do not generate\n+\tvalidity check when possible.\n+\n+2020-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Iterated_Component): Reorganize code to\n+\tensure that Loop_Id is properly initialized on all paths, and\n+\tremove code duplication.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Propagate predicate\n+\tfunction to full view of the created type as well, if it was\n+\tcreated.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Merge handling of\n+\tSimple_Storage_Pool and Storage_Pool.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* aspects.ads: Introduce Subprogram_Variant aspect with the\n+\tfollowing properties: GNAT-specific, with mandatory expression,\n+\tnot a representation aspect, never delayed.\n+\t* contracts.adb (Expand_Subprogram_Contract): Mention new aspect\n+\tin the comment.\n+\t(Add_Contract_Item): Support addition of pragma\n+\tSubprogram_Variant to N_Contract node.\n+\t(Analyze_Entry_Or_Subprogram_Contract): Mention new aspect in\n+\tthe comment; add pragma Subprogram_Variant to N_Contract node.\n+\t(Build_Postconditions_Procedure): Adapt call to\n+\tInsert_Before_First_Source_Declaration, which is now reused in\n+\texpansion of new aspect.\n+\t(Process_Contract_Cases_For): Also process Subprogram_Variant,\n+\twhich is stored in N_Contract node together with Contract_Cases.\n+\t* contracts.ads (Analyze_Entry_Or_Subprogram_Contract): Mention\n+\tnew aspect in the comment.\n+\t(Analyze_Entry_Or_Subprogram_Body_Contract): Likewise.\n+\t* einfo.adb (Get_Pragma): Support retrieval of new pragma.\n+\t* einfo.ads (Get_Pragma): Likewise.\n+\t* exp_ch6.adb (Check_Subprogram_Variant): New routine for\n+\temitting call to check Subprogram_Variant expressions at run\n+\ttime.\n+\t(Expand_Call_Helper): Check Subprogram_Variant expressions at\n+\trecursive calls.\n+\t* exp_prag.adb (Make_Op): Moved from expansion of pragma\n+\tLoop_Variant to Exp_Util, so it is now reused for expansion of\n+\tpragma Subprogram_Variant.\n+\t(Process_Variant): Adapt call to Make_Op after moving it to\n+\tExp_Util.\n+\t(Expand_Pragma_Subprogram_Variant): New routine.\n+\t* exp_prag.ads (Expand_Pragma_Subprogram_Variant): Likewise.\n+\t* exp_util.adb (Make_Variant_Comparison): Moved from Exp_Prag\n+\t(see above).\n+\t* exp_util.ads (Make_Variant_Comparison): Likewise.\n+\t* inline.adb (Remove_Aspects_And_Pragmas): Handle aspect/pragma\n+\tSubprogram_Variant just like similar contracts.\n+\t* par-prag.adb (Prag): Likewise.\n+\t* sem.adb (Insert_Before_First_Source_Declaration): Moved from\n+\tContracts (see above).\n+\t* sem.ads (Insert_Before_First_Source_Declaration): Likewise.\n+\t* sem_ch12.adb: Mention new aspect in the comment about\n+\t\"Implementation of Generic Contracts\", just like similar aspects\n+\tare mentioned there.\n+\t* sem_ch13.adb (Insert_Pragma): Mention new aspect in the\n+\tcomment, because this routine is now used for Subprogram_Variant\n+\tjust like for other similar aspects.\n+\t(Analyze_Aspect_Specifications): Mention new aspect in comments;\n+\tit is handled just like aspect Contract_Cases.\n+\t(Check_Aspect_At_Freeze_Point): Do not expect aspect\n+\tSubprogram_Variant just like we don't expect aspect\n+\tContract_Cases.\n+\t* sem_prag.adb (Ensure_Aggregate_Form): Now also used for pragma\n+\tSubprogram_Variant, so update comment.\n+\t(Analyze_Pragma): Add initial checks for pragma\n+\tSubprogram_Variant.\n+\t(Analyze_Subprogram_Variant_In_Decl_Part): New routine with\n+\tsecondary checks on the new pragma.\n+\t(Sig_Flags): Handle references within pragma Subprogram_Variant\n+\texpression just like references in similar pragma\n+\tContract_Cases.\n+\t(Is_Valid_Assertion_Kind): Handle Subprogram_Variant just like\n+\tother similar contracts.\n+\t* sem_prag.ads (Analyze_Subprogram_Variant_In_Decl_Part): New\n+\troutine.\n+\t* sem_res.adb (Same_Or_Aliased_Subprograms): Moved to Sem_Util,\n+\tso it can be reused for detection of recursive calls where\n+\tSubprogram_Variant needs to be verified.\n+\t* sem_util.adb (Is_Subprogram_Contract_Annotation): Handle new\n+\tSubprogram_Variant annotation just like other similar\n+\tannotations.\n+\t(Same_Or_Aliased_Subprograms): Moved from Sem_Res (see above).\n+\t* sem_util.ads (Is_Subprogram_Contract_Annotation): Mention new\n+\taspect in the comment.\n+\t(Same_Or_Aliased_Subprograms): Moved from Sem_Res (see above).\n+\t* sinfo.ads (N_Contract): Document handling of\n+\tSubprogram_Variant.\n+\t* snames.ads-tmpl: Add name for the internally generated\n+\tprocedure with checks for Subprogram_Variant expression, name\n+\tfor the new aspect and new pragma corresponding to aspect\n+\tSubprogram_Variant.\n+\n+2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.ads: Reorder declaration.\n+\n 2020-10-19  Ed Schonberg  <schonberg@adacore.com>\n \n \t* par-ch4.adb: (P_Aggregate_Or_Paren_Expr): Recognize"}, {"sha": "aa321fb8a8962da885b7b8244f52ed5ce311d61d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,8 @@\n+2020-10-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (push_local_extern_decl_alias): Reconstextualize\n+\talias' parm decls.  Drop any default args.\n+\n 2020-10-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/97438"}, {"sha": "649f2bd0c63bc76d91c02423b109ef157671bb91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,68 @@\n+2020-10-20  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-9.c: Improve pruning of\n+\tinvalid scanf call messages.\n+\n+2020-10-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97505\n+\t* gfortran.dg/pr97505.f90: New file.\n+\n+2020-10-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/local-extern.C: New.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Wrestrict-22.c: New test.\n+\t* g++.dg/torture/pr92421.C: Adjust for ranger.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Walloca-1.c: Adjust for ranger.\n+\t* gcc.dg/Walloca-12.c: Same.\n+\t* gcc.dg/Walloca-13.c: Same.\n+\t* gcc.dg/Walloca-2.c: Same.\n+\t* gcc.dg/Walloca-3.c: Same.\n+\t* gcc.dg/Walloca-6.c: Same.\n+\t* gcc.dg/Wvla-larger-than-2.c: Same.\n+\n+2020-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Add ltrans_args dump files\n+\tfor 'lto save-temps'.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97501.c: New test.\n+\n+2020-10-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.dg/cpp/endif.c: Move to ...\n+\t* c-c++-common/cpp/endif.c: ... here.\n+\t* gcc.dg/cpp/endif.h: Move to ...\n+\t* c-c++-common/cpp/endif.h: ... here.\n+\t* c-c++-common/cpp/eof-2.c: Adjust diagnostic.\n+\t* c-c++-common/cpp/eof-3.c: Adjust diagnostic.\n+\n+2020-10-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/82239\n+\t* g++.dg/cpp0x/static_assert16.C: New test.\n+\n+2020-10-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat.dg/opt11.adb: Add new expected warning.\n+\n+2020-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97496\n+\t* gcc.dg/vect/bb-slp-pr97496.c: New testcase.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97488.c: Add target int128 predicate.\n+\n 2020-10-19  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/pr97360-2.c: New test."}, {"sha": "528b2b0e2f27dbc37e51295ed0db9a7038e9579b", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,8 @@\n+2020-10-20  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* internal.h (ATTRIBUTE_FALLTHROUGH): Define.\n+\t* elf.c (elf_zlib_inflate): Use ATTRIBUTE_FALLTHROUGH.\n+\n 2020-09-28  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/97082"}, {"sha": "61bfe8131678b802cfa992db7fcc045021c6876c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,11 @@\n+2020-10-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lex.c (_cpp_lex_direct): Do not complete EOF processing when\n+\tparsing_args.\n+\t* macro.c (collect_args): Do not unwind fake EOF.\n+\t(funlike_invocation_p): Do not unwind fake EOF.\n+\t(cpp_context): Replace abort with gcc_assert.\n+\n 2020-10-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* internal.h (struct cpp_reader): Rename 'eof' field to 'endarg'."}, {"sha": "931df0a19eb3231405b7399041ee65566070a1da", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,30 @@\n+2020-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* target.c (gomp_target_init): Inside of the function, use automatic\n+\tvariables corresponding to num_devices, num_devices_openmp and devices\n+\tglobal variables and update the globals only at the end of the\n+\tfunction.\n+\n+2020-10-20  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* env.c (gomp_target_offload_var): New.\n+\t(parse_target_offload): New.\n+\t(handle_omp_display_env): Print value of OMP_TARGET_OFFLOAD.\n+\t(initialize_env): Parse OMP_TARGET_OFFLOAD.\n+\t* libgomp.h (gomp_target_offload_t): New.\n+\t(gomp_target_offload_var): New.\n+\t* libgomp.texi (OMP_TARGET_OFFLOAD): New section.\n+\t* target.c (resolve_device): Generate error if device not found and\n+\toffloading is mandatory.\n+\t(gomp_target_fallback): Generate error if offloading is mandatory.\n+\t(GOMP_target): Add argument in call to gomp_target_fallback.\n+\t(GOMP_target_ext): Likewise.\n+\t(gomp_target_data_fallback): Generate error if offloading is mandatory.\n+\t(GOMP_target_data): Add argument in call to gomp_target_data_fallback.\n+\t(GOMP_target_data_ext): Likewise.\n+\t(gomp_target_task_fn): Add argument in call to gomp_target_fallback.\n+\t(gomp_target_init): Return early if offloading is disabled.\n+\n 2020-10-15  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* libgomp.texi (omp_get_max_active_levels): Modify description."}, {"sha": "b898cee82955a88e1acf38ad019fbf3abd3ad78a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e04288542667307df925f7d0a4b0fa2030f741/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e04288542667307df925f7d0a4b0fa2030f741/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2e04288542667307df925f7d0a4b0fa2030f741", "patch": "@@ -1,3 +1,88 @@\n+2020-10-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h\n+\t(_Hash_node_value_base<>): Remove _Hash_node_base inheritance.\n+\t(_Hash_node_code_cache<bool _Cache_hash_code>): New.\n+\t(_Hash_node_value<typename _Value, bool _Cache_hash_code>): New.\n+\t(_Hash_node<>): Inherits _Hash_node_base<> and _Hash_node_value<>.\n+\t(_Map_base<>::__node_type): Remove.\n+\t(_Map_base<>::iterator): Remove.\n+\t(_Insert_base<>::__hash_cached): New.\n+\t(_Insert_base<>::__constant_iterators): New.\n+\t(_Insert_base<>::__hashtable_alloc): New.\n+\t(_Insert_base<>::__node_type): Remove.\n+\t(_Insert_base<>::__node_ptr): New.\n+\t(_Hash_code_base<>): Remove specializations.\n+\t(_Hash_code_base<>::__node_type): Remove.\n+\t(_Hash_code_base<>::_M_bucket_index(const __node_type*, size_t)):\n+\tReplace by...\n+\t(_Hash_code_base<>::_M_bucket_index(const _Hash_node_value<>&, size_t)):\n+\t...this.\n+\t(_Hash_code_base<>::_M_store_code(__node_type*, __hash_code)):\n+\tReplace by...\n+\t(_Hash_code_base<>::_M_store_code(_Hash_node_code_cache<>&, __hash_code)):\n+\t...this.\n+\t(_Hash_code_base<>::_M_copy_code(__node_type*, const __node_type*)):\n+\tReplace by...\n+\t(_Hash_code_base<>::_M_copy_code(_Hash_node_code_cache<>&,\n+\tconst _Hash_node_code_base<>&)): ...this.\n+\t(_Hashtable_base<>::__constant_iterators): Remove.\n+\t(_Hashtable_base<>::__unique_keys): Remove.\n+\t(_Hashtable_base<>::__node_type): Remove.\n+\t(_Hashtable_base<>::iterator): Remove.\n+\t(_Hashtable_base<>::const_iterator): Remove.\n+\t(_Hashtable_base<>::local_iterator): Remove.\n+\t(_Hashtable_base<>::const_local_iterator): Remove.\n+\t(_Hashtable_base<>::__ireturn_type): Remove.\n+\t(_Hashtable_base<>::_Equal_hash_code<>::_S_equals): Replace by...\n+\t(_Hashtable_base<>::_S_equals(__hash_code, const _Hash_node_code_hash<>&)):\n+\t...this.\n+\t(_Hashtable_base<>::_Equal_hash_code<>::_S_node_equals): Replace by...\n+\t(_Hashtable_base<>::_S_node_equals(__hash_code,\n+\tconst _Hash_node_code_hash<>&)): ...this.\n+\t(_Hashtable_base<>::_Equal_hash_code<>): Remove.\n+\t(_Hashtable_base<>::_M_equals): Adapt.\n+\t(_Hashtable_baxe<>::_M_node_equals): Adapt.\n+\t(_Equality<>::_M_equal): Adapt.\n+\t(_Hashtable_alloc<>::__node_ptr): New.\n+\t(_Hashtable_alloc<>::__bucket_type): Rename into...\n+\t(_Hashtable_alloc<>::__node_base_ptr): ...this.\n+\t(_Hashtable_alloc<>::__bucket_alloc_type): Rename into...\n+\t(_Hashtable_alloc<>::__buckets_alloc_type): ...this.\n+\t(_Hashtable_alloc<>::__bucket_alloc_traits): Rename into...\n+\t(_Hashtable_alloc<>::__buckets_alloc_traits): ...this.\n+\t(_Hashtable_alloc<>::__buckets_ptr): New.\n+\t(_Hashtable_alloc<>::_M_allocate_node): Adapt.\n+\t(_Hashtable_alloc<>::_M_deallocate_node): Adapt.\n+\t(_Hashtable_alloc<>::_M_deallocate_node_ptr): Adapt.\n+\t(_Hashtable_alloc<>::_M_deallocate_nodes): Adapt.\n+\t(_Hashtable_alloc<>::_M_allocate_buckets): Adapt.\n+\t(_Hashtable_alloc<>::_M_deallocate_buckets): Adapt.\n+\t* include/bits/hashtable.h (_Hashtable<>): Adapt.\n+\n+2020-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/capacity/1.cc: Pass\n+\t-Wno-stringop-overflow to test.\n+\n+2020-10-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95917\n+\t* include/std/coroutine (__noop_coro_frame): Replace with\n+\tnoop_coroutine_handle::__frame.\n+\t(__dummy_resume_destroy): Define inline in __frame.\n+\t(__noop_coro_fr): Replace with noop_coroutine_handle::_S_fr\n+\tand define as inline.\n+\t* testsuite/18_support/coroutines/95917.cc: New test.\n+\n+2020-10-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/coroutine (coroutine_handle<_Promise>): Remove\n+\tbase class. Add constructors, conversions, accessors etc. as\n+\tproposed for LWG 3460.\n+\t(coroutine_handle<noop_coroutine_promise>): Likewise.\n+\t* testsuite/18_support/coroutines/lwg3460.cc: New test.\n+\n 2020-10-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/unique_ptr.h (make_unique_for_overwrite): Define"}]}