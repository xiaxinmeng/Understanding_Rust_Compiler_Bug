{"sha": "f759eb8bf0d98603f2e6930126e517ed995a64a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1OWViOGJmMGQ5ODYwM2YyZTY5MzAxMjZlNTE3ZWQ5OTVhNjRhOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-07T02:26:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-07T02:26:51Z"}, "message": "reload.c (subst_reloads): Take INSN argument.\n\n* reload.c (subst_reloads): Take INSN argument.  When\nreplacing a LABEL_REF in a JUMP_INSN, add a REG_LABEL note.\n* reload.h (subst_reloads): Adjust prototype.\n* reload1.c (reload_as_needed): Pass INSN to subst_reloads.\n* jump.c (mark_all_labels): Canonicalize any REG_LABEL notes\npresent in JUMP_INSNs and copy them to JUMP_LABEL.\n* flow.c (find_label_refs, find_basic_blocks_1): Skip\nJUMP_INSNs and insns with REG_LABELs that are followed by\nJUMP_INSNs with the same REG_LABEL.\n* sched-rgn.c (is_cfg_nonregular): Likewise.\n* rtlanal.c (computed_jump_p): Make it false if a REG_LABEL\nnote is available.\n* unroll.c (unroll_loop): Look for REG_LABEL notes in\nJUMP_INSNs too.\n* rtl.texi (REG_LABEL): Document usage in JUMP_INSNs.\n\nFrom-SVN: r38755", "tree": {"sha": "17de3bb34420626f8eab111aee34a18e3a1f275f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17de3bb34420626f8eab111aee34a18e3a1f275f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f759eb8bf0d98603f2e6930126e517ed995a64a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f759eb8bf0d98603f2e6930126e517ed995a64a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f759eb8bf0d98603f2e6930126e517ed995a64a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f759eb8bf0d98603f2e6930126e517ed995a64a8/comments", "author": null, "committer": null, "parents": [{"sha": "0e2e89fd2e117555f71be7a28e41f5f7663c3395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2e89fd2e117555f71be7a28e41f5f7663c3395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2e89fd2e117555f71be7a28e41f5f7663c3395"}], "stats": {"total": 114, "additions": 90, "deletions": 24}, "files": [{"sha": "e912ed00b91ec0692167cc253df32b234d6495c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,3 +1,21 @@\n+2001-01-07  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* reload.c (subst_reloads): Take INSN argument.  When\n+\treplacing a LABEL_REF in a JUMP_INSN, add a REG_LABEL note.\n+\t* reload.h (subst_reloads): Adjust prototype.\n+\t* reload1.c (reload_as_needed): Pass INSN to subst_reloads.\n+\t* jump.c (mark_all_labels): Canonicalize any REG_LABEL notes\n+\tpresent in JUMP_INSNs and copy them to JUMP_LABEL.\n+\t* flow.c (find_label_refs, find_basic_blocks_1): Skip\n+\tJUMP_INSNs and insns with REG_LABELs that are followed by\n+\tJUMP_INSNs with the same REG_LABEL.\n+\t* sched-rgn.c (is_cfg_nonregular): Likewise.\n+\t* rtlanal.c (computed_jump_p): Make it false if a REG_LABEL\n+\tnote is available.\n+\t* unroll.c (unroll_loop): Look for REG_LABEL notes in\n+\tJUMP_INSNs too.\n+\t* rtl.texi (REG_LABEL): Document usage in JUMP_INSNs.\n+\n 2001-01-06  Richard Henderson  <rth@redhat.com>\n \n \t* loop.c (scan_loop): Use xcalloc for the regs array."}, {"sha": "a53043dc534aabcdad7211444fd641913f531b5a", "filename": "gcc/flow.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -640,7 +640,7 @@ find_label_refs (f, lvl)\n   rtx insn;\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn))\n+    if (INSN_P (insn) && GET_CODE (insn) != JUMP_INSN)\n       {\n \trtx note;\n \n@@ -651,7 +651,10 @@ find_label_refs (f, lvl)\n \t   as this would be a part of the tablejump setup code.\n \n \t   Make a special exception for the eh_return_stub_label, which\n-\t   we know isn't part of any otherwise visible control flow.  */\n+\t   we know isn't part of any otherwise visible control flow.\n+\n+\t   Make a special exception to registers loaded with label\n+\t   values just before jump insns that use them.  */\n \n \tfor (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n \t  if (REG_NOTE_KIND (note) == REG_LABEL)\n@@ -667,6 +670,9 @@ find_label_refs (f, lvl)\n \t\t;\n \t      else if (GET_CODE (lab) == NOTE)\n \t\t;\n+\t      else if (GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n+\t\t       && find_reg_note (NEXT_INSN (insn), REG_LABEL, lab))\n+\t\t;\n \t      else\n \t\tlvl = alloc_EXPR_LIST (0, XEXP (note, 0), lvl);\n \t    }\n@@ -862,18 +868,21 @@ find_basic_blocks_1 (f)\n \t  break;\n \t}\n \n-      if (GET_RTX_CLASS (code) == 'i')\n+      if (GET_RTX_CLASS (code) == 'i'\n+\t  && GET_CODE (insn) != JUMP_INSN)\n \t{\n \t  rtx note;\n \n-\t  /* Make a list of all labels referred to other than by jumps\n-\t     (which just don't have the REG_LABEL notes).\n+\t  /* Make a list of all labels referred to other than by jumps.\n \n \t     Make a special exception for labels followed by an ADDR*VEC,\n \t     as this would be a part of the tablejump setup code.\n \n \t     Make a special exception for the eh_return_stub_label, which\n-\t     we know isn't part of any otherwise visible control flow.  */\n+\t     we know isn't part of any otherwise visible control flow.\n+\n+\t     Make a special exception to registers loaded with label\n+\t     values just before jump insns that use them.  */\n \n \t  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n \t    if (REG_NOTE_KIND (note) == REG_LABEL)\n@@ -889,6 +898,9 @@ find_basic_blocks_1 (f)\n \t\t  ;\n \t\telse if (GET_CODE (lab) == NOTE)\n \t\t  ;\n+\t\telse if (GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n+\t\t\t && find_reg_note (NEXT_INSN (insn), REG_LABEL, lab))\n+\t\t  ;\n \t\telse\n \t\t  lvl = alloc_EXPR_LIST (0, XEXP (note, 0), lvl);\n \t      }"}, {"sha": "032172d3907d356fbc54f42bc27c2306b5bab3fd", "filename": "gcc/jump.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -863,6 +863,24 @@ mark_all_labels (f, cross_jump)\n \tmark_jump_label (PATTERN (insn), insn, cross_jump, 0);\n \tif (! INSN_DELETED_P (insn) && GET_CODE (insn) == JUMP_INSN)\n \t  {\n+\t    /* When we know the LABEL_REF contained in a REG used in\n+\t       an indirect jump, we'll have a REG_LABEL note so that\n+\t       flow can tell where it's going.  */\n+\t    if (JUMP_LABEL (insn) == 0)\n+\t      {\n+\t\trtx label_note = find_reg_note (insn, REG_LABEL, NULL_RTX);\n+\t\tif (label_note)\n+\t\t  {\n+\t\t    /* But a LABEL_REF around the REG_LABEL note, so\n+\t\t       that we can canonicalize it.  */\n+\t\t    rtx label_ref = gen_rtx_LABEL_REF (VOIDmode,\n+\t\t\t\t\t\t       XEXP (label_note, 0));\n+\n+\t\t    mark_jump_label (label_ref, insn, cross_jump, 0);\n+\t\t    XEXP (label_note, 0) = XEXP (label_ref, 0);\n+\t\t    JUMP_LABEL (insn) = XEXP (label_note, 0);\n+\t\t  }\n+\t      }\n \t    if (JUMP_LABEL (insn) != 0 && simplejump_p (insn))\n \t      {\n \t\tjump_chain[INSN_UID (insn)]"}, {"sha": "11e33f05fc869d8c3d6017070b2696b49a40660d", "filename": "gcc/reload.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -5679,7 +5679,8 @@ find_reloads_subreg_address (x, force_replace, opnum, type,\n    Return the rtx that X translates into; usually X, but modified.  */\n \n void\n-subst_reloads ()\n+subst_reloads (insn)\n+     rtx insn;\n {\n   register int i;\n \n@@ -5689,6 +5690,15 @@ subst_reloads ()\n       register rtx reloadreg = rld[r->what].reg_rtx;\n       if (reloadreg)\n \t{\n+\t  /* If we're replacing a LABEL_REF with a register, add a\n+\t     REG_LABEL note to indicate to flow which label this\n+\t     register refers to.  */\n+\t  if (GET_CODE (*r->where) == LABEL_REF\n+\t      && GET_CODE (insn) == JUMP_INSN)\n+\t    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_LABEL,\n+\t\t\t\t\t\t  XEXP (*r->where, 0),\n+\t\t\t\t\t\t  REG_NOTES (insn));\n+\n \t  /* Encapsulate RELOADREG so its machine mode matches what\n \t     used to be there.  Note that gen_lowpart_common will\n \t     do the wrong thing if RELOADREG is multi-word.  RELOADREG"}, {"sha": "b604184a5297493a273e88449b2a37a7d5b6131a", "filename": "gcc/reload.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,6 +1,6 @@\n /* Communication between reload.c and reload1.c.\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -302,7 +302,7 @@ extern rtx form_sum PARAMS ((rtx, rtx));\n \n /* Substitute into the current INSN the registers into which we have reloaded\n    the things that need reloading.  */\n-extern void subst_reloads PARAMS ((void));\n+extern void subst_reloads PARAMS ((rtx));\n \n /* Make a copy of any replacements being done into X and move those copies\n    to locations in Y, a copy of X.  We only look at the highest level of"}, {"sha": "783c8dc9beb6e0b5075d3803ae102e9029da8edf", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -3830,7 +3830,7 @@ reload_as_needed (live_known)\n \t\t into the insn's body (or perhaps into the bodies of other\n \t\t load and store insn that we just made for reloading\n \t\t and that we moved the structure into).  */\n-\t      subst_reloads ();\n+\t      subst_reloads (insn);\n \n \t      /* If this was an ASM, make sure that all the reload insns\n \t\t we have generated are valid.  If not, give an error"}, {"sha": "0e9d8c48652021866748ab524eae907325299255", "filename": "gcc/rtl.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,4 +1,5 @@\n-@c Copyright (C) 1988, 89, 92, 94, 97, 1998, 1999, 2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 1989, 1992, 1994, 1997, 1998, 1999, 2000, 2001\n+@c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -2752,8 +2753,10 @@ last insns, respectively.\n @findex REG_LABEL\n @item REG_LABEL\n This insn uses @var{op}, a @code{code_label}, but is not a\n-@code{jump_insn}.  The presence of this note allows jump optimization to\n-be aware that @var{op} is, in fact, being used.\n+@code{jump_insn}, or it is a @code{jump_insn} that required the label to\n+be held in a register.  The presence of this note allows jump\n+optimization to be aware that @var{op} is, in fact, being used, and flow\n+optimization to build an accurate flow graph.\n @end table\n \n The following notes describe attributes of outputs of an insn:"}, {"sha": "b0fbcf31063902c2dcfeaac01cdd67f9db28d153", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,6 +1,6 @@\n /* Analyze RTL for C-Compiler\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2285,7 +2285,9 @@ computed_jump_p (insn)\n     {\n       rtx pat = PATTERN (insn);\n \n-      if (GET_CODE (pat) == PARALLEL)\n+      if (find_reg_note (insn, REG_LABEL, NULL_RTX))\n+\treturn 0;\n+      else if (GET_CODE (pat) == PARALLEL)\n \t{\n \t  int len = XVECLEN (pat, 0);\n \t  int has_use_labelref = 0;"}, {"sha": "c1c215a1ea92a6afc11e7d5b29bc0e4b07e891af", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -349,13 +349,16 @@ is_cfg_nonregular ()\n     for (insn = BLOCK_HEAD (b);; insn = NEXT_INSN (insn))\n       {\n \tcode = GET_CODE (insn);\n-\tif (GET_RTX_CLASS (code) == 'i')\n+\tif (GET_RTX_CLASS (code) == 'i' && code != JUMP_INSN)\n \t  {\n-\t    rtx note;\n-\n-\t    for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t      if (REG_NOTE_KIND (note) == REG_LABEL)\n-\t\treturn 1;\n+\t    rtx note = find_reg_note (REG_NOTES (insn), REG_LABEL, NULL_RTX);\n+\n+\t    if (note\n+\t\t&& ! (GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n+\t\t      && find_reg_note (REG_NOTES (NEXT_INSN (insn)),\n+\t\t\t\t\tREG_LABEL,\n+\t\t\t\t\tXEXP (note, 0))))\n+\t      return 1;\n \t  }\n \n \tif (insn == BLOCK_END (b))"}, {"sha": "bdd6cb4e7811c05885de9d864e10f45560394d08", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f759eb8bf0d98603f2e6930126e517ed995a64a8/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=f759eb8bf0d98603f2e6930126e517ed995a64a8", "patch": "@@ -1,5 +1,5 @@\n /* Try to unroll loops, and split induction variables.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson, Cygnus Support/UC Berkeley.\n \n@@ -768,7 +768,7 @@ unroll_loop (loop, insn_count, end_insert_before, strength_reduce_p)\n \t\t}\n \t    }\n \t}\n-      else if ((note = find_reg_note (insn, REG_LABEL, NULL_RTX)))\n+      if ((note = find_reg_note (insn, REG_LABEL, NULL_RTX)))\n \tset_label_in_map (map, CODE_LABEL_NUMBER (XEXP (note, 0)),\n \t\t\t  XEXP (note, 0));\n     }"}]}