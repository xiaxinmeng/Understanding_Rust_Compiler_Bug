{"sha": "5f9ccf17de7f7581412c6bffd4a37beca9a79836", "node_id": "C_kwDOANBUbNoAKDVmOWNjZjE3ZGU3Zjc1ODE0MTJjNmJmZmQ0YTM3YmVjYTlhNzk4MzY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-01T11:05:36Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-01T22:03:23Z"}, "message": "[PR102546] X << Y being non-zero implies X is also non-zero.\n\nThis patch teaches this to range-ops.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102546\n\t* range-op.cc (operator_lshift::op1_range): Teach range-ops that\n\tX << Y is non-zero implies X is also non-zero.", "tree": {"sha": "e10e84c7a9062a57145cea3cbd6229b47a350446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e10e84c7a9062a57145cea3cbd6229b47a350446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9ccf17de7f7581412c6bffd4a37beca9a79836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9ccf17de7f7581412c6bffd4a37beca9a79836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9ccf17de7f7581412c6bffd4a37beca9a79836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9ccf17de7f7581412c6bffd4a37beca9a79836/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257d2890a769a8aa564d079170377e637e07acb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257d2890a769a8aa564d079170377e637e07acb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257d2890a769a8aa564d079170377e637e07acb1"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "2baca4a197f3a6df1bd6d751741b7e7514e7d6e1", "filename": "gcc/range-op.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9ccf17de7f7581412c6bffd4a37beca9a79836/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9ccf17de7f7581412c6bffd4a37beca9a79836/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=5f9ccf17de7f7581412c6bffd4a37beca9a79836", "patch": "@@ -2078,6 +2078,12 @@ operator_lshift::op1_range (irange &r,\n \t\t\t    relation_kind rel ATTRIBUTE_UNUSED) const\n {\n   tree shift_amount;\n+\n+  if (!lhs.contains_p (build_zero_cst (type)))\n+    r.set_nonzero (type);\n+  else\n+    r.set_varying (type);\n+\n   if (op2.singleton_p (&shift_amount))\n     {\n       wide_int shift = wi::to_wide (shift_amount);\n@@ -2089,21 +2095,24 @@ operator_lshift::op1_range (irange &r,\n \treturn false;\n       if (shift == 0)\n \t{\n-\t  r = lhs;\n+\t  r.intersect (lhs);\n \t  return true;\n \t}\n \n       // Work completely in unsigned mode to start.\n       tree utype = type;\n+      int_range_max tmp_range;\n       if (TYPE_SIGN (type) == SIGNED)\n \t{\n \t  int_range_max tmp = lhs;\n \t  utype = unsigned_type_for (type);\n \t  range_cast (tmp, utype);\n-\t  op_rshift.fold_range (r, utype, tmp, op2);\n+\t  op_rshift.fold_range (tmp_range, utype, tmp, op2);\n \t}\n       else\n-\top_rshift.fold_range (r, utype, lhs, op2);\n+\top_rshift.fold_range (tmp_range, utype, lhs, op2);\n+\n+      r.intersect (tmp_range);\n \n       // Start with ranges which can produce the LHS by right shifting the\n       // result by the shift amount.\n@@ -2128,7 +2137,8 @@ operator_lshift::op1_range (irange &r,\n \trange_cast (r, type);\n       return true;\n     }\n-  return false;\n+\n+  return !r.varying_p ();\n }\n \n bool"}, {"sha": "4bd98747732ffd7222bc2aa18d3dc7c18e983633", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr102546.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9ccf17de7f7581412c6bffd4a37beca9a79836/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102546.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9ccf17de7f7581412c6bffd4a37beca9a79836/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102546.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102546.c?ref=5f9ccf17de7f7581412c6bffd4a37beca9a79836", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -fdump-tree-optimized\" }\n+\n+static int a;\n+static char b, c, d;\n+void bar(void);\n+void foo(void);\n+\n+int main() {\n+    int f = 0;\n+    for (; f <= 5; f++) {\n+        bar();\n+        b = b && f;\n+        d = f << f;\n+        if (!(a >= d || f))\n+            foo();\n+        c = 1;\n+        for (; c; c = 0)\n+            ;\n+    }\n+}\n+\n+// { dg-final { scan-tree-dump-not \"foo\" \"optimized\" } }"}]}