{"sha": "e4a6acd67ef7ab110b7f575b22019554819af0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRhNmFjZDY3ZWY3YWIxMTBiN2Y1NzViMjIwMTk1NTQ4MTlhZjBjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-06-09T15:58:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:28Z"}, "message": "[Ada] Code cleanups in a-strfix.adb\n\ngcc/ada/\n\n\t* libgnat/a-strfix.adb: Take advantage of extended returns.", "tree": {"sha": "808d5034cce1c3d17047f6e5748acaa2b42f6419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808d5034cce1c3d17047f6e5748acaa2b42f6419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4a6acd67ef7ab110b7f575b22019554819af0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a6acd67ef7ab110b7f575b22019554819af0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a6acd67ef7ab110b7f575b22019554819af0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a6acd67ef7ab110b7f575b22019554819af0cc/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a847e8c8fa3523ac8bfb3e20600dce6addcd7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a847e8c8fa3523ac8bfb3e20600dce6addcd7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a847e8c8fa3523ac8bfb3e20600dce6addcd7f9"}], "stats": {"total": 138, "additions": 54, "deletions": 84}, "files": [{"sha": "ee72b6b4fbc9f5d171e61ec1bce9c90d9314f9b3", "filename": "gcc/ada/libgnat/a-strfix.adb", "status": "modified", "additions": 54, "deletions": 84, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a6acd67ef7ab110b7f575b22019554819af0cc/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a6acd67ef7ab110b7f575b22019554819af0cc/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strfix.adb?ref=e4a6acd67ef7ab110b7f575b22019554819af0cc", "patch": "@@ -145,30 +145,26 @@ package body Ada.Strings.Fixed is\n      (Left  : Natural;\n       Right : Character) return String\n    is\n-      Result : String (1 .. Left);\n-\n    begin\n-      for J in Result'Range loop\n-         Result (J) := Right;\n-      end loop;\n-\n-      return Result;\n+      return Result : String (1 .. Left) do\n+         for J in Result'Range loop\n+            Result (J) := Right;\n+         end loop;\n+      end return;\n    end \"*\";\n \n    function \"*\"\n      (Left  : Natural;\n       Right : String) return String\n    is\n-      Result : String (1 .. Left * Right'Length);\n       Ptr    : Integer := 1;\n-\n    begin\n-      for J in 1 .. Left loop\n-         Result (Ptr .. Ptr + Right'Length - 1) := Right;\n-         Ptr := Ptr + Right'Length;\n-      end loop;\n-\n-      return Result;\n+      return Result : String (1 .. Left * Right'Length) do\n+         for J in 1 .. Left loop\n+            Result (Ptr .. Ptr + Right'Length - 1) := Right;\n+            Ptr := Ptr + Right'Length;\n+         end loop;\n+      end return;\n    end \"*\";\n \n    ------------\n@@ -180,6 +176,7 @@ package body Ada.Strings.Fixed is\n       From    : Positive;\n       Through : Natural) return String\n    is\n+      Front : Integer;\n    begin\n       if From > Through then\n          declare\n@@ -207,18 +204,13 @@ package body Ada.Strings.Fixed is\n          end if;\n \n       else\n-         declare\n-            Front  : constant Integer := From - Source'First;\n-            Result : String (1 .. Source'Length - (Through - From + 1));\n-\n-         begin\n+         Front := From - Source'First;\n+         return Result : String (1 .. Source'Length - (Through - From + 1)) do\n             Result (1 .. Front) :=\n               Source (Source'First .. From - 1);\n             Result (Front + 1 .. Result'Last) :=\n               Source (Through + 1 .. Source'Last);\n-\n-            return Result;\n-         end;\n+         end return;\n       end if;\n    end Delete;\n \n@@ -253,18 +245,13 @@ package body Ada.Strings.Fixed is\n            Result_Type (Source (Source'First .. Source'First + Count - 1));\n \n       else\n-         declare\n-            Result : Result_Type;\n-\n-         begin\n+         return Result : Result_Type do\n             Result (1 .. Source'Length) := Source;\n \n             for J in Source'Length + 1 .. Count loop\n                Result (J) := Pad;\n             end loop;\n-\n-            return Result;\n-         end;\n+         end return;\n       end if;\n    end Head;\n \n@@ -291,22 +278,21 @@ package body Ada.Strings.Fixed is\n       Before   : Positive;\n       New_Item : String) return String\n    is\n-      Result : String (1 .. Source'Length + New_Item'Length);\n       Front  : constant Integer := Before - Source'First;\n \n    begin\n       if Before not in Source'First .. Source'Last + 1 then\n          raise Index_Error;\n       end if;\n \n-      Result (1 .. Front) :=\n-        Source (Source'First .. Before - 1);\n-      Result (Front + 1 .. Front + New_Item'Length) :=\n-        New_Item;\n-      Result (Front + New_Item'Length + 1 .. Result'Last) :=\n-        Source (Before .. Source'Last);\n-\n-      return Result;\n+      return Result : String (1 .. Source'Length + New_Item'Length) do\n+         Result (1 .. Front) :=\n+           Source (Source'First .. Before - 1);\n+         Result (Front + 1 .. Front + New_Item'Length) :=\n+           New_Item;\n+         Result (Front + New_Item'Length + 1 .. Result'Last) :=\n+           Source (Before .. Source'Last);\n+      end return;\n    end Insert;\n \n    procedure Insert\n@@ -435,30 +421,25 @@ package body Ada.Strings.Fixed is\n    function Overwrite\n      (Source   : String;\n       Position : Positive;\n-      New_Item : String) return String\n-   is\n+      New_Item : String) return String is\n    begin\n       if Position not in Source'First .. Source'Last + 1 then\n          raise Index_Error;\n       end if;\n \n       declare\n          Result_Length : constant Natural :=\n-           Integer'Max\n-             (Source'Length,\n-              Position - Source'First + New_Item'Length);\n-\n-         Result : String (1 .. Result_Length);\n-         Front  : constant Integer := Position - Source'First;\n+           Integer'Max (Source'Length,\n+                        Position - Source'First + New_Item'Length);\n+         Front         : constant Integer := Position - Source'First;\n \n       begin\n-         Result (1 .. Front) :=\n-           Source (Source'First .. Position - 1);\n-         Result (Front + 1 .. Front + New_Item'Length) :=\n-           New_Item;\n-         Result (Front + New_Item'Length + 1 .. Result'Length) :=\n-           Source (Position + New_Item'Length .. Source'Last);\n-         return Result;\n+         return Result : String (1 .. Result_Length) do\n+            Result (1 .. Front) := Source (Source'First .. Position - 1);\n+            Result (Front + 1 .. Front + New_Item'Length) := New_Item;\n+            Result (Front + New_Item'Length + 1 .. Result'Length) :=\n+              Source (Position + New_Item'Length .. Source'Last);\n+         end return;\n       end;\n    end Overwrite;\n \n@@ -495,24 +476,21 @@ package body Ada.Strings.Fixed is\n               Integer'Max (0, Low - Source'First);\n             --  Length of prefix of Source copied to result\n \n-            Back_Len : constant Integer :=\n-              Integer'Max (0, Source'Last - High);\n+            Back_Len : constant Integer := Integer'Max (0, Source'Last - High);\n             --  Length of suffix of Source copied to result\n \n             Result_Length : constant Integer :=\n               Front_Len + By'Length + Back_Len;\n             --  Length of result\n \n-            Result : String (1 .. Result_Length);\n-\n          begin\n-            Result (1 .. Front_Len) := Source (Source'First .. Low - 1);\n-            Result (Front_Len + 1 .. Front_Len + By'Length) := By;\n-            Result (Front_Len + By'Length + 1 .. Result'Length) :=\n-              Source (High + 1 .. Source'Last);\n-            return Result;\n+            return Result : String (1 .. Result_Length) do\n+               Result (1 .. Front_Len) := Source (Source'First .. Low - 1);\n+               Result (Front_Len + 1 .. Front_Len + By'Length) := By;\n+               Result (Front_Len + By'Length + 1 .. Result'Length) :=\n+                 Source (High + 1 .. Source'Last);\n+            end return;\n          end;\n-\n       else\n          return Insert (Source, Before => Low, New_Item => By);\n       end if;\n@@ -549,17 +527,13 @@ package body Ada.Strings.Fixed is\n       --  Pad on left\n \n       else\n-         declare\n-            Result : Result_Type;\n-\n-         begin\n+         return Result : Result_Type do\n             for J in 1 .. Count - Source'Length loop\n                Result (J) := Pad;\n             end loop;\n \n             Result (Count - Source'Length + 1 .. Count) := Source;\n-            return Result;\n-         end;\n+         end return;\n       end if;\n    end Tail;\n \n@@ -585,14 +559,12 @@ package body Ada.Strings.Fixed is\n      (Source  : String;\n       Mapping : Maps.Character_Mapping) return String\n    is\n-      Result : String (1 .. Source'Length);\n-\n    begin\n-      for J in Source'Range loop\n-         Result (J - (Source'First - 1)) := Value (Mapping, Source (J));\n-      end loop;\n-\n-      return Result;\n+      return Result : String (1 .. Source'Length) do\n+         for J in Source'Range loop\n+            Result (J - (Source'First - 1)) := Value (Mapping, Source (J));\n+         end loop;\n+      end return;\n    end Translate;\n \n    procedure Translate\n@@ -609,15 +581,13 @@ package body Ada.Strings.Fixed is\n      (Source  : String;\n       Mapping : Maps.Character_Mapping_Function) return String\n    is\n-      Result : String (1 .. Source'Length);\n       pragma Unsuppress (Access_Check);\n-\n    begin\n-      for J in Source'Range loop\n-         Result (J - (Source'First - 1)) := Mapping.all (Source (J));\n-      end loop;\n-\n-      return Result;\n+      return Result : String (1 .. Source'Length) do\n+         for J in Source'Range loop\n+            Result (J - (Source'First - 1)) := Mapping.all (Source (J));\n+         end loop;\n+      end return;\n    end Translate;\n \n    procedure Translate"}]}