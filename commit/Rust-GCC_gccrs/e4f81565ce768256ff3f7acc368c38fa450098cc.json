{"sha": "e4f81565ce768256ff3f7acc368c38fa450098cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmODE1NjVjZTc2ODI1NmZmM2Y3YWNjMzY4YzM4ZmE0NTAwOThjYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-17T10:52:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-17T10:52:58Z"}, "message": "Gimple FE support for internal functions\n\nThis patch gets the gimple FE to parse calls to internal functions.\nThe only non-obvious thing was how the functions should be written\nto avoid clashes with real function names.  One option would be to\ngo the magic number of underscores route, but we already do that for\nbuilt-in functions, and it would be good to keep them visually\ndistinct.  In the end I borrowed the local/internal label convention\nfrom asm and used:\n\n  x = .SQRT (y);\n\n2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* internal-fn.h (lookup_internal_fn): Declare\n\t* internal-fn.c (lookup_internal_fn): New function.\n\t* gimple.c (gimple_build_call_from_tree): Handle calls to\n\tinternal functions.\n\t* gimple-pretty-print.c (dump_gimple_call): Print \".\" before\n\tinternal function names.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-ssa-scopedtables.c (expr_hash_elt::print): Likewise.\n\ngcc/c/\n\t* gimple-parser.c: Include internal-fn.h.\n\t(c_parser_gimple_statement): Treat a leading CPP_DOT as a call.\n\t(c_parser_gimple_call_internal): New function.\n\t(c_parser_gimple_postfix_expression): Use it to handle CPP_DOT.\n\tFix typos in comment.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-28.c: New test.\n\t* gcc.dg/asan/use-after-scope-9.c: Adjust expected output for\n\tinternal function calls.\n\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n\nFrom-SVN: r260316", "tree": {"sha": "0a8bc7b8cca8bc8c488119cf5a5f80dd27acc639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8bc7b8cca8bc8c488119cf5a5f80dd27acc639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f81565ce768256ff3f7acc368c38fa450098cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f81565ce768256ff3f7acc368c38fa450098cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f81565ce768256ff3f7acc368c38fa450098cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f81565ce768256ff3f7acc368c38fa450098cc/comments", "author": null, "committer": null, "parents": [{"sha": "eb69361d0c5e98423e7ad7a537bc3250e083de4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69361d0c5e98423e7ad7a537bc3250e083de4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb69361d0c5e98423e7ad7a537bc3250e083de4a"}], "stats": {"total": 156, "additions": 141, "deletions": 15}, "files": [{"sha": "9e22926fba7d9b1765865f79f319da9926952e24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -1,3 +1,14 @@\n+2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* internal-fn.h (lookup_internal_fn): Declare\n+\t* internal-fn.c (lookup_internal_fn): New function.\n+\t* gimple.c (gimple_build_call_from_tree): Handle calls to\n+\tinternal functions.\n+\t* gimple-pretty-print.c (dump_gimple_call): Print \".\" before\n+\tinternal function names.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-ssa-scopedtables.c (expr_hash_elt::print): Likewise.\n+\n 2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gimple-fold.h (gimple_build): Make the function forms take"}, {"sha": "f31c86fbf958f9a65a2991135037d570cdbdeb95", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -1,3 +1,11 @@\n+2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gimple-parser.c: Include internal-fn.h.\n+\t(c_parser_gimple_statement): Treat a leading CPP_DOT as a call.\n+\t(c_parser_gimple_call_internal): New function.\n+\t(c_parser_gimple_postfix_expression): Use it to handle CPP_DOT.\n+\tFix typos in comment.\n+\n 2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85662"}, {"sha": "c9abe24bfe619fb6e0b513abb2e10d60ba7220dd", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-dfa.h\"\n+#include \"internal-fn.h\"\n \n \n /* Gimple parsing functions.  */\n@@ -400,9 +401,10 @@ c_parser_gimple_statement (c_parser *parser, gimple_seq *seq)\n     }\n \n   /* GIMPLE call with lhs.  */\n-  if (c_parser_next_token_is (parser, CPP_NAME)\n-      && c_parser_peek_2nd_token (parser)->type == CPP_OPEN_PAREN\n-      && lookup_name (c_parser_peek_token (parser)->value))\n+  if (c_parser_next_token_is (parser, CPP_DOT)\n+      || (c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_2nd_token (parser)->type == CPP_OPEN_PAREN\n+\t  && lookup_name (c_parser_peek_token (parser)->value)))\n     {\n       rhs = c_parser_gimple_unary_expression (parser);\n       if (rhs.value != error_mark_node)\n@@ -726,14 +728,57 @@ c_parser_parse_ssa_name (c_parser *parser,\n   return name;\n }\n \n+/* Parse a gimple call to an internal function.\n+\n+   gimple-call-internal:\n+     . identifier ( gimple-argument-expression-list[opt] )  */\n+\n+static struct c_expr\n+c_parser_gimple_call_internal (c_parser *parser)\n+{\n+  struct c_expr expr;\n+  expr.set_error ();\n+\n+  gcc_assert (c_parser_next_token_is (parser, CPP_DOT));\n+  c_parser_consume_token (parser);\n+  location_t loc = c_parser_peek_token (parser)->location;\n+  if (!c_parser_next_token_is (parser, CPP_NAME)\n+      || c_parser_peek_token (parser)->id_kind != C_ID_ID)\n+    {\n+      c_parser_error (parser, \"expecting internal function name\");\n+      return expr;\n+    }\n+  tree id = c_parser_peek_token (parser)->value;\n+  internal_fn ifn = lookup_internal_fn (IDENTIFIER_POINTER (id));\n+  c_parser_consume_token (parser);\n+  if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    {\n+      auto_vec<tree> exprlist;\n+      if (!c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n+\tc_parser_gimple_expr_list (parser, &exprlist);\n+      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n+      if (ifn == IFN_LAST)\n+\terror_at (loc, \"unknown internal function %qE\", id);\n+      else\n+\t{\n+\t  expr.value = build_call_expr_internal_loc_array\n+\t    (loc, ifn, void_type_node, exprlist.length (),\n+\t     exprlist.address ());\n+\t  expr.original_code = ERROR_MARK;\n+\t  expr.original_type = NULL;\n+\t}\n+    }\n+  return expr;\n+}\n+\n /* Parse gimple postfix expression.\n \n    gimple-postfix-expression:\n      gimple-primary-expression\n-     gimple-primary-xpression [ gimple-primary-expression ]\n+     gimple-primary-expression [ gimple-primary-expression ]\n      gimple-primary-expression ( gimple-argument-expression-list[opt] )\n-     postfix-expression . identifier\n-     postfix-expression -> identifier\n+     gimple-postfix-expression . identifier\n+     gimple-postfix-expression -> identifier\n \n    gimple-argument-expression-list:\n      gimple-unary-expression\n@@ -743,6 +788,7 @@ c_parser_parse_ssa_name (c_parser *parser,\n      identifier\n      constant\n      string-literal\n+     gimple-call-internal\n \n */\n \n@@ -779,6 +825,9 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n       expr.original_code = STRING_CST;\n       c_parser_consume_token (parser);\n       break;\n+    case CPP_DOT:\n+      expr = c_parser_gimple_call_internal (parser);\n+      break;\n     case CPP_NAME:\n       if (c_parser_peek_token (parser)->id_kind == C_ID_ID)\n \t{"}, {"sha": "afe01471a45cb0d73de270540dcb69982659c3f4", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -874,7 +874,7 @@ dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n   if (flags & TDF_RAW)\n     {\n       if (gimple_call_internal_p (gs))\n-\tdump_gimple_fmt (buffer, spc, flags, \"%G <%s, %T\", gs,\n+\tdump_gimple_fmt (buffer, spc, flags, \"%G <.%s, %T\", gs,\n \t\t\t internal_fn_name (gimple_call_internal_fn (gs)), lhs);\n       else\n \tdump_gimple_fmt (buffer, spc, flags, \"%G <%T, %T\", gs, fn, lhs);\n@@ -898,7 +898,10 @@ dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n \t  pp_space (buffer);\n         }\n       if (gimple_call_internal_p (gs))\n-\tpp_string (buffer, internal_fn_name (gimple_call_internal_fn (gs)));\n+\t{\n+\t  pp_dot (buffer);\n+\t  pp_string (buffer, internal_fn_name (gimple_call_internal_fn (gs)));\n+\t}\n       else\n \tprint_call_name (buffer, fn, flags);\n       pp_string (buffer, \" (\");"}, {"sha": "745cdf33586ab588af6e40744a853fbde9347fc3", "filename": "gcc/gimple.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -350,12 +350,19 @@ gimple_build_call_from_tree (tree t, tree fnptrtype)\n {\n   unsigned i, nargs;\n   gcall *call;\n-  tree fndecl = get_callee_fndecl (t);\n \n   gcc_assert (TREE_CODE (t) == CALL_EXPR);\n \n   nargs = call_expr_nargs (t);\n-  call = gimple_build_call_1 (fndecl ? fndecl : CALL_EXPR_FN (t), nargs);\n+\n+  tree fndecl = NULL_TREE;\n+  if (CALL_EXPR_FN (t) == NULL_TREE)\n+    call = gimple_build_call_internal_1 (CALL_EXPR_IFN (t), nargs);\n+  else\n+    {\n+      fndecl = get_callee_fndecl (t);\n+      call = gimple_build_call_1 (fndecl ? fndecl : CALL_EXPR_FN (t), nargs);\n+    }\n \n   for (i = 0; i < nargs; i++)\n     gimple_call_set_arg (call, i, CALL_EXPR_ARG (t, i));"}, {"sha": "ba94a61cf11197d6a7e50b14794eb2ae64098f2b", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -64,6 +64,26 @@ const int internal_fn_flags_array[] = {\n   0\n };\n \n+/* Return the internal function called NAME, or IFN_LAST if there's\n+   no such function.  */\n+\n+internal_fn\n+lookup_internal_fn (const char *name)\n+{\n+  typedef hash_map<nofree_string_hash, internal_fn> name_to_fn_map_type;\n+  static name_to_fn_map_type *name_to_fn_map;\n+\n+  if (!name_to_fn_map)\n+    {\n+      name_to_fn_map = new name_to_fn_map_type (IFN_LAST);\n+      for (unsigned int i = 0; i < IFN_LAST; ++i)\n+\tname_to_fn_map->put (internal_fn_name (internal_fn (i)),\n+\t\t\t     internal_fn (i));\n+    }\n+  internal_fn *entry = name_to_fn_map->get (name);\n+  return entry ? *entry : IFN_LAST;\n+}\n+\n /* Fnspec of each internal function, indexed by function number.  */\n const_tree internal_fn_fnspec_array[IFN_LAST + 1];\n "}, {"sha": "34ea8c67a4ee807df92d3e950ec94ffe2d8966ef", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -107,6 +107,8 @@ internal_fn_name (enum internal_fn fn)\n   return internal_fn_name_array[(int) fn];\n }\n \n+extern internal_fn lookup_internal_fn (const char *);\n+\n /* Return the ECF_* flags for function FN.  */\n \n extern const int internal_fn_flags_array[];"}, {"sha": "c20e717ed97e38ced7ea1f7490612e02b406a889", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -1,3 +1,10 @@\n+2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.dg/gimplefe-28.c: New test.\n+\t* gcc.dg/asan/use-after-scope-9.c: Adjust expected output for\n+\tinternal function calls.\n+\t* gcc.dg/goacc/loop-processing-1.c: Likewise.\n+\n 2018-05-17  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/plugin/ggcplug.c (plugin_init): Do not use"}, {"sha": "c3e4da55aade001b6cc880057a3225347f8021ef", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-9.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -17,7 +17,7 @@ main (int argc, char **argv)\n   return *ptr;\n }\n \n-// { dg-final { scan-tree-dump-times \"= ASAN_POISON \\\\(\\\\)\" 1 \"asan1\" } }\n+// { dg-final { scan-tree-dump-times {= \\.ASAN_POISON \\(\\)} 1 \"asan1\" } }\n // { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"READ of size .*\" }\n // { dg-output \".*'a' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "467172d3d8cce6f2f2cb4c0121e07bf321e196ad", "filename": "gcc/testsuite/gcc.dg/gimplefe-28.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-28.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target sqrt_insn } } */\n+/* { dg-options \"-fgimple -O2\" } */\n+\n+double __GIMPLE\n+f1 (double x)\n+{\n+  double res;\n+  res = .SQRT (x);\n+  return res;\n+}\n+\n+void __GIMPLE\n+f2 (double x)\n+{\n+  .SQRT (x); // Dead code\n+}"}, {"sha": "bd4c07e7d81cf4334912bea1711a983b32a811e2", "filename": "gcc/testsuite/gcc.dg/goacc/loop-processing-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Floop-processing-1.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -15,4 +15,4 @@ void vector_1 (int *ary, int size)\n   }\n }\n \n-/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 24\\(1\\).*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccdevlow\" } } */\n+/* { dg-final { scan-tree-dump {OpenACC loops.*Loop 0\\(0\\).*Loop 24\\(1\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 1, 36\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 0\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 0\\);.*Loop 6\\(6\\).*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*Head-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, 0, 2, 6\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 1\\);.*Head-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_HEAD_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_FORK, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-1:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 2\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 2\\);.*Tail-0:.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_TAIL_MARK, \\.data_dep\\.[0-9_]+, 1\\);.*\\.data_dep\\.[0-9_]+ = \\.UNIQUE \\(OACC_JOIN, \\.data_dep\\.[0-9_]+, 1\\);} \"oaccdevlow\" } } */"}, {"sha": "bc36c28643b8b420dc47b538c11667d22593c200", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -2262,7 +2262,10 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       if (CALL_EXPR_FN (node) != NULL_TREE)\n \tprint_call_name (pp, CALL_EXPR_FN (node), flags);\n       else\n-\tpp_string (pp, internal_fn_name (CALL_EXPR_IFN (node)));\n+\t{\n+\t  pp_dot (pp);\n+\t  pp_string (pp, internal_fn_name (CALL_EXPR_IFN (node)));\n+\t}\n \n       /* Print parameters.  */\n       pp_space (pp);"}, {"sha": "9e751a2715262a687e396830711a471220f3b9ff", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f81565ce768256ff3f7acc368c38fa450098cc/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=e4f81565ce768256ff3f7acc368c38fa450098cc", "patch": "@@ -906,8 +906,8 @@ expr_hash_elt::print (FILE *stream)\n \n           fn_from = m_expr.ops.call.fn_from;\n           if (gimple_call_internal_p (fn_from))\n-            fputs (internal_fn_name (gimple_call_internal_fn (fn_from)),\n-                   stream);\n+\t    fprintf (stream, \".%s\",\n+\t\t     internal_fn_name (gimple_call_internal_fn (fn_from)));\n           else\n \t    print_generic_expr (stream, gimple_call_fn (fn_from));\n           fprintf (stream, \" (\");"}]}