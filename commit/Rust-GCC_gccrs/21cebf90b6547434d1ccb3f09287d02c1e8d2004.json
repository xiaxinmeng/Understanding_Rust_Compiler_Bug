{"sha": "21cebf90b6547434d1ccb3f09287d02c1e8d2004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjZWJmOTBiNjU0NzQzNGQxY2NiM2YwOTI4N2QwMmMxZThkMjAwNA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-10-16T17:28:56Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-10-16T17:28:56Z"}, "message": "[AArch64] Use @ pattern to eliminate switch statement in one more place\n\nWe can use the new '@' modifier to MD patterns to generate mode-parametrised gen_ functions\nfor the despeculate_copy patterns and therefore remove the switch on modes in aarch64.c\nthat is used to pick the right generator. This simplifies the code. \n\n\t* config/aarch64/aarch64.md (despeculate_copy<ALLI_TI:mode>):\n\tRename to...\n\t(@despeculate_copy<ALLI_TI:mode>): ... This.\n\t* config/aarch64/aarch64.c (aarch64_speculation_safe_value): Remove\n\tswitch statement.\n\nFrom-SVN: r265210", "tree": {"sha": "670b879f6905ab578eadac730317d86517e680b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670b879f6905ab578eadac730317d86517e680b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21cebf90b6547434d1ccb3f09287d02c1e8d2004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cebf90b6547434d1ccb3f09287d02c1e8d2004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cebf90b6547434d1ccb3f09287d02c1e8d2004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cebf90b6547434d1ccb3f09287d02c1e8d2004/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "436ea0e5d316be9867bb23db70a09e12107c0d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436ea0e5d316be9867bb23db70a09e12107c0d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436ea0e5d316be9867bb23db70a09e12107c0d7d"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "b398d1bef1fce160e13eb6d2925c33f572fce2a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21cebf90b6547434d1ccb3f09287d02c1e8d2004", "patch": "@@ -1,3 +1,11 @@\n+2018-10-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (despeculate_copy<ALLI_TI:mode>):\n+\tRename to...\n+\t(@despeculate_copy<ALLI_TI:mode>): ... This.\n+\t* config/aarch64/aarch64.c (aarch64_speculation_safe_value): Remove\n+\tswitch statement.\n+\n 2018-10-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc: Obsolete *-*-solaris2.10*."}, {"sha": "54f57463e97fabade59b7fa097594dd8735d58d5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=21cebf90b6547434d1ccb3f09287d02c1e8d2004", "patch": "@@ -17969,26 +17969,7 @@ aarch64_speculation_safe_value (machine_mode mode,\n   if (!aarch64_reg_or_zero (failval, mode))\n     failval = copy_to_mode_reg (mode, failval);\n \n-  switch (mode)\n-    {\n-    case E_QImode:\n-      emit_insn (gen_despeculate_copyqi (result, val, failval));\n-      break;\n-    case E_HImode:\n-      emit_insn (gen_despeculate_copyhi (result, val, failval));\n-      break;\n-    case E_SImode:\n-      emit_insn (gen_despeculate_copysi (result, val, failval));\n-      break;\n-    case E_DImode:\n-      emit_insn (gen_despeculate_copydi (result, val, failval));\n-      break;\n-    case E_TImode:\n-      emit_insn (gen_despeculate_copyti (result, val, failval));\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  emit_insn (gen_despeculate_copy (mode, result, val, failval));\n   return result;\n }\n "}, {"sha": "d7473418a8eb62b2757017cd1675493f86e41ef4", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21cebf90b6547434d1ccb3f09287d02c1e8d2004/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=21cebf90b6547434d1ccb3f09287d02c1e8d2004", "patch": "@@ -6716,7 +6716,7 @@\n ;; Support for __builtin_speculation_safe_value when we have speculation\n ;; tracking enabled.  Use the speculation tracker to decide whether to\n ;; copy operand 1 to the target, or to copy the fail value (operand 2).\n-(define_expand \"despeculate_copy<ALLI_TI:mode>\"\n+(define_expand \"@despeculate_copy<ALLI_TI:mode>\"\n   [(set (match_operand:ALLI_TI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:ALLI_TI\n \t [(match_operand:ALLI_TI 1 \"register_operand\" \"r\")"}]}