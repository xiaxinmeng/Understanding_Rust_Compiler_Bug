{"sha": "06b1145579432ef77e572b9538b68971146f0468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiMTE0NTU3OTQzMmVmNzdlNTcyYjk1MzhiNjg5NzExNDZmMDQ2OA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-12-16T20:19:37Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-12-16T20:19:37Z"}, "message": "re PR objc/25360 (Complex types are not encoded)\n\n2005-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR objc/25360\n        * objc/objc-act.c (encode_type): Encode Complex types as 'j' followed\n        by the inner type.\n\n2005-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR objc/25360\n        * objc/objc-api.c (_C_COMPLEX): New define.\n        * encoding.c (objc_sizeof_type): Handle _C_Complex.\n        (objc_alignof_type): Likewise.\n        (objc_skip_typespec): Likewise.\n\nFrom-SVN: r108675", "tree": {"sha": "5624961b5cadba21d6c5047592828975c5ed7404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5624961b5cadba21d6c5047592828975c5ed7404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b1145579432ef77e572b9538b68971146f0468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1145579432ef77e572b9538b68971146f0468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b1145579432ef77e572b9538b68971146f0468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1145579432ef77e572b9538b68971146f0468/comments", "author": null, "committer": null, "parents": [{"sha": "184210e82c5572ee07f62fe342f42d38d20f54e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184210e82c5572ee07f62fe342f42d38d20f54e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184210e82c5572ee07f62fe342f42d38d20f54e6"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "466ff50ca26cd9be1854e49fff4c0d4c9ae60020", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1145579432ef77e572b9538b68971146f0468/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1145579432ef77e572b9538b68971146f0468/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=06b1145579432ef77e572b9538b68971146f0468", "patch": "@@ -1,3 +1,9 @@\n+2005-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR objc/25360\n+        * objc/objc-act.c (encode_type): Encode Complex types as 'j' followed\n+        by the inner type.\n+\n 2005-12-12  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR objc/25348"}, {"sha": "526dec6144b706dc8e9dff979905e3879d95b2f8", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1145579432ef77e572b9538b68971146f0468/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1145579432ef77e572b9538b68971146f0468/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=06b1145579432ef77e572b9538b68971146f0468", "patch": "@@ -8119,6 +8119,12 @@ encode_type (tree type, int curtype, int format)\n \n   else if (code == FUNCTION_TYPE) /* '?' */\n     obstack_1grow (&util_obstack, '?');\n+    \n+  else if (code == COMPLEX_TYPE)\n+    {\n+      obstack_1grow (&util_obstack, 'j');\n+      encode_type (TREE_TYPE (type), curtype, format);\n+    }\n }\n \n static void"}, {"sha": "27378fbd79bb5580f3576f0ca4a4d010b7d95e63", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1145579432ef77e572b9538b68971146f0468/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1145579432ef77e572b9538b68971146f0468/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=06b1145579432ef77e572b9538b68971146f0468", "patch": "@@ -1,3 +1,11 @@\n+2005-12-14  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR objc/25360\n+        * objc/objc-api.c (_C_COMPLEX): New define.\n+        * encoding.c (objc_sizeof_type): Handle _C_Complex.\n+        (objc_alignof_type): Likewise.\n+        (objc_skip_typespec): Likewise.\n+\n 2005-12-15  David Ayers  <d.ayers@inode.at>\n \n \tPR libobjc/14382"}, {"sha": "21a785814dc8d51a82e6cf3b037b0089cf3cf29d", "filename": "libobjc/encoding.c", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1145579432ef77e572b9538b68971146f0468/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1145579432ef77e572b9538b68971146f0468/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=06b1145579432ef77e572b9538b68971146f0468", "patch": "@@ -248,6 +248,68 @@ objc_sizeof_type (const char *type)\n \n       return size;\n     }\n+    \n+  case _C_COMPLEX:\n+    {\n+      type++; /* Skip after the 'j'. */\n+      switch (*type)\n+        {\n+\t    case _C_CHR:\n+\t      return sizeof (_Complex char);\n+\t      break;\n+\n+\t    case _C_UCHR:\n+\t      return sizeof (_Complex unsigned char);\n+\t      break;\n+\n+\t    case _C_SHT:\n+\t      return sizeof (_Complex short);\n+\t      break;\n+\n+\t    case _C_USHT:\n+\t      return sizeof (_Complex unsigned short);\n+\t      break;\n+\n+\t    case _C_INT:\n+\t      return sizeof (_Complex int);\n+\t      break;\n+\n+\t    case _C_UINT:\n+\t      return sizeof (_Complex unsigned int);\n+\t      break;\n+\n+\t    case _C_LNG:\n+\t      return sizeof (_Complex long);\n+\t      break;\n+\n+\t    case _C_ULNG:\n+\t      return sizeof (_Complex unsigned long);\n+\t      break;\n+\n+\t    case _C_LNG_LNG:\n+\t      return sizeof (_Complex long long);\n+\t      break;\n+\n+\t    case _C_ULNG_LNG:\n+\t      return sizeof (_Complex unsigned long long);\n+\t      break;\n+\n+\t    case _C_FLT:\n+\t      return sizeof (_Complex float);\n+\t      break;\n+\n+\t    case _C_DBL:\n+\t      return sizeof (_Complex double);\n+\t      break;\n+\t    \n+\t    default:\n+\t      {\n+\t\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown complex type %s\\n\",\n+\t\t\t    type);\n+\t\treturn 0;\n+\t      }\n+\t}\n+    }\n \n   default:\n     {\n@@ -360,6 +422,69 @@ objc_alignof_type (const char *type)\n \n       return align;\n     }\n+    \n+    \n+  case _C_COMPLEX:\n+    {\n+      type++; /* Skip after the 'j'. */\n+      switch (*type)\n+        {\n+\t    case _C_CHR:\n+\t      return __alignof__ (_Complex char);\n+\t      break;\n+\n+\t    case _C_UCHR:\n+\t      return __alignof__ (_Complex unsigned char);\n+\t      break;\n+\n+\t    case _C_SHT:\n+\t      return __alignof__ (_Complex short);\n+\t      break;\n+\n+\t    case _C_USHT:\n+\t      return __alignof__ (_Complex unsigned short);\n+\t      break;\n+\n+\t    case _C_INT:\n+\t      return __alignof__ (_Complex int);\n+\t      break;\n+\n+\t    case _C_UINT:\n+\t      return __alignof__ (_Complex unsigned int);\n+\t      break;\n+\n+\t    case _C_LNG:\n+\t      return __alignof__ (_Complex long);\n+\t      break;\n+\n+\t    case _C_ULNG:\n+\t      return __alignof__ (_Complex unsigned long);\n+\t      break;\n+\n+\t    case _C_LNG_LNG:\n+\t      return __alignof__ (_Complex long long);\n+\t      break;\n+\n+\t    case _C_ULNG_LNG:\n+\t      return __alignof__ (_Complex unsigned long long);\n+\t      break;\n+\n+\t    case _C_FLT:\n+\t      return __alignof__ (_Complex float);\n+\t      break;\n+\n+\t    case _C_DBL:\n+\t      return __alignof__ (_Complex double);\n+\t      break;\n+\t    \n+\t    default:\n+\t      {\n+\t\tobjc_error (nil, OBJC_ERR_BAD_TYPE, \"unknown complex type %s\\n\",\n+\t\t\t    type);\n+\t\treturn 0;\n+\t      }\n+\t}\n+    }\n \n   default:\n     {\n@@ -491,6 +616,10 @@ objc_skip_typespec (const char *type)\n   case _C_UNDEF:\n     return ++type;\n     break;\n+    \n+  case _C_COMPLEX:\n+    return type + 2;\n+    break;\n \n   case _C_ARY_B:\n     /* skip digits, typespec and closing ']' */"}, {"sha": "e0e49e21fdfc89f86f424978b39802069951e5a4", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b1145579432ef77e572b9538b68971146f0468/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b1145579432ef77e572b9538b68971146f0468/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=06b1145579432ef77e572b9538b68971146f0468", "patch": "@@ -82,6 +82,7 @@ struct objc_method_description\n #define _C_STRUCT_B '{'\n #define _C_STRUCT_E '}'\n #define _C_VECTOR   '!'\n+#define _C_COMPLEX   'j'\n \n \n /*"}]}