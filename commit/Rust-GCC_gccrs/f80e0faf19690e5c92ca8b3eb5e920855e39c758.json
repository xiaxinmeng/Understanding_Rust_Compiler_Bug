{"sha": "f80e0faf19690e5c92ca8b3eb5e920855e39c758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwZTBmYWYxOTY5MGU1YzkyY2E4YjNlYjVlOTIwODU1ZTM5Yzc1OA==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-02-12T06:50:32Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-02-12T06:50:32Z"}, "message": "extend.texi: Document Function Multiversioning and \"default\" parameter string to target...\n\n\t* doc/extend.texi: Document Function Multiversioning and \"default\"\n\tparameter string to target attribute.\n\t* g++.dg/ext/mv12.C: New test.\n\t* g++.dg/ext/mv12.h: New file.\n\t* g++.dg/ext/mv12-aux.C: New file.\n\t* g++.dg/ext/mv13.C: New test.\n\t* config/i386/i386.c (get_builtin_code_for_version): Return 0 if\n\ttarget attribute parameter is \"default\".\n\t(ix86_compare_version_priority): Remove checks for target attribute.\n\t(ix86_mangle_function_version_assembler_name): Change error to sorry.\n\tRemove check for target attribute equal to NULL. Add assert.\n\t(ix86_generate_version_dispatcher_body): Change error to sorry.\n\nFrom-SVN: r195967", "tree": {"sha": "bffd76743900390a5af447e0f2216487f175ebad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bffd76743900390a5af447e0f2216487f175ebad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f80e0faf19690e5c92ca8b3eb5e920855e39c758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80e0faf19690e5c92ca8b3eb5e920855e39c758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80e0faf19690e5c92ca8b3eb5e920855e39c758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80e0faf19690e5c92ca8b3eb5e920855e39c758/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e1d47c46a7037d98885677fb4b43227f66c7c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1d47c46a7037d98885677fb4b43227f66c7c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1d47c46a7037d98885677fb4b43227f66c7c96"}], "stats": {"total": 164, "additions": 149, "deletions": 15}, "files": [{"sha": "360514e201981c338ff0b6bf4b28c7b1de40d71b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -1,3 +1,14 @@\n+2013-02-11  Sriraman Tallam  <tmsriramgoogle.com>\n+\n+\t* doc/extend.texi: Document Function Multiversioning and \"default\"\n+\tparameter string to target attribute.\n+\t* config/i386/i386.c (get_builtin_code_for_version): Return 0 if\n+\ttarget attribute parameter is \"default\".\n+\t(ix86_compare_version_priority): Remove checks for target attribute.\n+\t(ix86_mangle_function_version_assembler_name): Change error to sorry.\n+\tRemove check for target attribute equal to NULL. Add assert.\n+\t(ix86_generate_version_dispatcher_body): Change error to sorry.\n+\n 2013-02-11  Iain Sandoe  <iain@codesourcery.com>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>\n \t    Patrick Marlier  <patrick.marlier@gmail.com>"}, {"sha": "caf4894f605209b439f7c0b496c48325f5db4e34", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -28696,6 +28696,9 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   gcc_assert (TREE_CODE (attrs) == STRING_CST);\n   attrs_str = TREE_STRING_POINTER (attrs);\n \n+  /* Return priority zero for default function.  */\n+  if (strcmp (attrs_str, \"default\") == 0)\n+    return 0;\n \n   /* Handle arch= if specified.  For priority, set it to be 1 more than\n      the best instruction set the processor can handle.  For instance, if\n@@ -28828,14 +28831,8 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n static int\n ix86_compare_version_priority (tree decl1, tree decl2)\n {\n-  unsigned int priority1 = 0;\n-  unsigned int priority2 = 0;\n-\n-  if (lookup_attribute (\"target\", DECL_ATTRIBUTES (decl1)) != NULL)\n-    priority1 = get_builtin_code_for_version (decl1, NULL);\n-\n-  if (lookup_attribute (\"target\", DECL_ATTRIBUTES (decl2)) != NULL)\n-    priority2 = get_builtin_code_for_version (decl2, NULL);\n+  unsigned int priority1 = get_builtin_code_for_version (decl1, NULL);\n+  unsigned int priority2 = get_builtin_code_for_version (decl2, NULL);\n \n   return (int)priority1 - (int)priority2;\n }\n@@ -29065,14 +29062,12 @@ ix86_mangle_function_version_assembler_name (tree decl, tree id)\n \n   if (DECL_VIRTUAL_P (decl)\n       || DECL_VINDEX (decl))\n-    error_at (DECL_SOURCE_LOCATION (decl),\n-\t      \"Virtual function versioning not supported\\n\");\n+    sorry (\"Virtual function multiversioning not supported\");\n \n   version_attr = lookup_attribute (\"target\", DECL_ATTRIBUTES (decl));\n \n-  /* target attribute string is NULL for default functions.  */\n-  if (version_attr == NULL_TREE)\n-    return id;\n+  /* target attribute string cannot be NULL.  */\n+  gcc_assert (version_attr != NULL_TREE);\n \n   orig_name = IDENTIFIER_POINTER (id);\n   version_string\n@@ -29512,8 +29507,8 @@ ix86_generate_version_dispatcher_body (void *node_p)\n \t virtual methods in base classes but are not explicitly marked as\n \t virtual.  */\n       if (DECL_VINDEX (versn->symbol.decl))\n-        error_at (DECL_SOURCE_LOCATION (versn->symbol.decl),\n-\t\t  \"Virtual function multiversioning not supported\");\n+\tsorry (\"Virtual function multiversioning not supported\");\n+\n       fn_ver_vec.safe_push (versn->symbol.decl);\n     }\n "}, {"sha": "eb84408ce7ca253d2018bdb4d17945fbc0b705a8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -3655,6 +3655,11 @@ Enable/disable the generation of the advanced bit instructions.\n @cindex @code{target(\"aes\")} attribute\n Enable/disable the generation of the AES instructions.\n \n+@item default\n+@cindex @code{target(\"default\")} attribute\n+@xref{Function Multiversioning}, where it is used to specify the\n+default function version.\n+\n @item mmx\n @itemx no-mmx\n @cindex @code{target(\"mmx\")} attribute\n@@ -15215,6 +15220,7 @@ Predefined Macros,cpp,The GNU C Preprocessor}).\n * Bound member functions:: You can extract a function pointer to the\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n * C++ Attributes::      Variable, function, and type attributes for C++ only.\n+* Function Multiversioning::   Declaring multiple function versions.\n * Namespace Association:: Strong using-directives for namespace association.\n * Type Traits::         Compiler support for type traits\n * Java Exceptions::     Tweaking exception handling to work with Java.\n@@ -15744,6 +15750,64 @@ interface table mechanism, instead of regular virtual table dispatch.\n \n See also @ref{Namespace Association}.\n \n+@node Function Multiversioning\n+@section Function Multiversioning\n+@cindex function versions\n+\n+With the GNU C++ front end, for target i386, you may specify multiple\n+versions of a function, where each function is specialized for a\n+specific target feature.  At runtime, the appropriate version of the\n+function is automatically executed depending on the characteristics of\n+the execution platform.  Here is an example.\n+\n+@smallexample\n+__attribute__ ((target (\"default\")))\n+int foo ()\n+@{\n+  // The default version of foo.\n+  return 0;\n+@}\n+\n+__attribute__ ((target (\"sse4.2\")))\n+int foo ()\n+@{\n+  // foo version for SSE4.2\n+  return 1;\n+@}\n+\n+__attribute__ ((target (\"arch=atom\")))\n+int foo ()\n+@{\n+  // foo version for the Intel ATOM processor\n+  return 2;\n+@}\n+\n+__attribute__ ((target (\"arch=amdfam10\")))\n+int foo ()\n+@{\n+  // foo version for the AMD Family 0x10 processors.\n+  return 3;\n+@}\n+\n+int main ()\n+@{\n+  int (*p)() = &foo;\n+  assert ((*p) () == foo ());\n+  return 0;\n+@}\n+@end smallexample\n+\n+In the above example, four versions of function foo are created. The\n+first version of foo with the target attribute \"default\" is the default\n+version.  This version gets executed when no other target specific\n+version qualifies for execution on a particular platform. A new version\n+of foo is created by using the same function signature but with a\n+different target string.  Function foo is called or a pointer to it is\n+taken just like a regular function.  GCC takes care of doing the\n+dispatching to call the right version at runtime.  Refer to the\n+@uref{http://gcc.gnu.org/wiki/FunctionMultiVersioning, GCC wiki on\n+Function Multiversioning} for more details.\n+\n @node Namespace Association\n @section Namespace Association\n "}, {"sha": "4aa1b4ceeb83b55ec9cc10aacb4d171bb951b513", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -1,3 +1,10 @@\n+2013-02-11  Sriraman Tallam  <tmsriramgoogle.com>\n+\n+\t* g++.dg/ext/mv12.C: New test.\n+\t* g++.dg/ext/mv12.h: New file.\n+\t* g++.dg/ext/mv12-aux.C: New file.\n+\t* g++.dg/ext/mv13.C: New test.\n+\n 2013-02-11  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* lib/target-supports.exp"}, {"sha": "abdc1424ecd1e65381e100881230033c84a80589", "filename": "gcc/testsuite/g++.dg/ext/mv12-aux.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12-aux.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12-aux.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12-aux.C?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -0,0 +1,11 @@\n+// Test case to check if multiversioning works as expected when the versions\n+// are defined in different files. Auxiliary file for mv12.C.\n+// { dg-do compile }\n+\n+#include \"mv12.h\"\n+\n+__attribute__ ((target (\"sse4.2\")))\n+int foo ()\n+{\n+  return 1;\n+}"}, {"sha": "3ffb2459e5466baf609daadb21546f9f9badf531", "filename": "gcc/testsuite/g++.dg/ext/mv12.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.C?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -0,0 +1,22 @@\n+// Test case to check if multiversioning works as expected when the versions\n+// are defined in different files.\n+\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-require-ifunc \"\" }\n+// { dg-options \"-O2\" }\n+// { dg-additional-sources \"mv12-aux.C\" }\n+\n+#include \"mv12.h\"\n+\n+int main ()\n+{\n+  if (__builtin_cpu_supports (\"sse4.2\"))\n+    return foo () - 1;\n+  return foo ();\n+}\n+\n+__attribute__ ((target (\"default\")))\n+int foo ()\n+{\n+  return 0;\n+}"}, {"sha": "1d09f453b6ab005a018a4540304ee125dbf68e1b", "filename": "gcc/testsuite/g++.dg/ext/mv12.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv12.h?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -0,0 +1,6 @@\n+// Header file used by mv12.C and mv12-aux.C.\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"\" }\n+\n+int foo () __attribute__ ((target (\"default\")));\n+int foo () __attribute__ ((target (\"sse4.2\")));"}, {"sha": "9554993130ccf8a72689f635db926aa83476936e", "filename": "gcc/testsuite/g++.dg/ext/mv13.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80e0faf19690e5c92ca8b3eb5e920855e39c758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv13.C?ref=f80e0faf19690e5c92ca8b3eb5e920855e39c758", "patch": "@@ -0,0 +1,18 @@\n+// Test case to check if multiversioning functions that are extern \"C\"\n+// generates errors.\n+\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+\n+extern \"C\"\n+__attribute__ ((target (\"default\")))\n+int foo ()  // { dg-error \"previously defined here\" }\n+{\n+  return 0;\n+}\n+\n+extern \"C\"\n+__attribute__ ((target (\"sse4.2\")))\n+int foo () // { dg-error \"redefinition\" }\n+{\n+  return 1;\n+}"}]}