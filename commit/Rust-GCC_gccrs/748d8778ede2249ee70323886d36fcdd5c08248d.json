{"sha": "748d8778ede2249ee70323886d36fcdd5c08248d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4ZDg3NzhlZGUyMjQ5ZWU3MDMyMzg4NmQzNmZjZGQ1YzA4MjQ4ZA==", "commit": {"author": {"name": "Matthew Gingell", "email": "gingell@adacore.com", "date": "2005-11-15T13:54:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:54:25Z"}, "message": "tb-gcc.c (trace_callback): Work around problem with _Unwind_GetIP on ia64 HP-UX.\n\n2005-11-14  Matthew Gingell  <gingell@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n\t* tb-gcc.c (trace_callback): Work around problem with _Unwind_GetIP on\n\tia64 HP-UX.\n\n\t* tracebak.c (ia64 configuration): Enable _Unwind_Backtrace driven\n\ttracebacks on ia64 HP-UX and provide explanatory comment.\n\tEnable backtraces on ia64 GNU/Linux.\n\t(x86 configuration): Bump FRAME_LEVEL to 1 to ensure we retrieve a real\n\tbase pointer from builtin_frame_address. Adjust BASE_SKIP accordingly.\n\nFrom-SVN: r106964", "tree": {"sha": "42a177a53177be2db515cfdae24464e13832f3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a177a53177be2db515cfdae24464e13832f3a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/748d8778ede2249ee70323886d36fcdd5c08248d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d8778ede2249ee70323886d36fcdd5c08248d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748d8778ede2249ee70323886d36fcdd5c08248d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748d8778ede2249ee70323886d36fcdd5c08248d/comments", "author": null, "committer": null, "parents": [{"sha": "e1ac6e5b2140d274f5e37b948e3074a284c3c3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1ac6e5b2140d274f5e37b948e3074a284c3c3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1ac6e5b2140d274f5e37b948e3074a284c3c3e6"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "1a3566ec37965b20c7dab683b5adf30c08a72fed", "filename": "gcc/ada/tb-gcc.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d8778ede2249ee70323886d36fcdd5c08248d/gcc%2Fada%2Ftb-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d8778ede2249ee70323886d36fcdd5c08248d/gcc%2Fada%2Ftb-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftb-gcc.c?ref=748d8778ede2249ee70323886d36fcdd5c08248d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *              Copyright (C) 2004 Ada Core Technologies, Inc               *\n+ *                     Copyright (C) 2004-2005, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -54,10 +54,21 @@ typedef struct {\n  * trace_callback *\n  ******************/\n \n+#if defined (__ia64__) && defined (__hpux__)\n+#include <uwx.h>\n+#endif\n+\n static _Unwind_Reason_Code\n trace_callback (struct _Unwind_Context * uw_context, uw_data_t * uw_data)\n {\n-  void * pc = (void *) _Unwind_GetIP (uw_context);\n+  void * pc;\n+\n+#if defined (__ia64__) && defined (__hpux__)\n+  /* Work around problem with _Unwind_GetIP on ia64 HP-UX. */\n+  uwx_get_reg ((struct uwx_env *) uw_context, UWX_REG_IP, (uint64_t *) &pc);\n+#else\n+  pc = (void *) _Unwind_GetIP (uw_context);\n+#endif\n \n   if (uw_data->n_frames_skipped < uw_data->n_frames_to_skip)\n     {"}, {"sha": "db825d155eeff9544e1e17905d3cb4e9c9636504", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748d8778ede2249ee70323886d36fcdd5c08248d/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748d8778ede2249ee70323886d36fcdd5c08248d/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=748d8778ede2249ee70323886d36fcdd5c08248d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 2000-2005 Ada Core Technologies, Inc.            *\n+ *                     Copyright (C) 2000-2005, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -300,7 +300,11 @@ struct layout\n };\n \n #define LOWEST_ADDR 0\n-#define FRAME_LEVEL 0\n+#define FRAME_LEVEL 1\n+/* builtin_frame_address (1) is expected to work on this target, and (0) might\n+   return the soft stack pointer, which does not designate a location where a\n+   backchain and a return address might be found.  */\n+\n #define FRAME_OFFSET 0\n #define PC_ADJUST -2\n #define STOP_FRAME(CURRENT, TOP_STACK) \\\n@@ -309,7 +313,7 @@ struct layout\n    || (CURRENT)->return_address == 0|| (CURRENT)->next == 0  \\\n    || (void *) (CURRENT) < (TOP_STACK))\n \n-#define BASE_SKIP 1\n+#define BASE_SKIP (1+FRAME_LEVEL)\n \n /* On i386 architecture we check that at the call point we really have a call\n    insn. Possible call instructions are:\n@@ -349,9 +353,13 @@ struct layout\n \n /*----------------------------- ia64 ---------------------------------*/\n \n-#elif defined (__ia64__) && !defined (USE_LIBUNWIND_EXCEPTIONS)\n+#elif defined (__ia64__) && (defined (linux) || defined (__hpux__))\n \n #define USE_GCC_UNWINDER\n+/* Use _Unwind_Backtrace driven exceptions on ia64 HP-UX and ia64\n+   GNU/Linux, where _Unwind_Backtrace is provided by the system unwind\n+   library. On HP-UX 11.23 this requires patch PHSS_33352, which adds\n+   _Unwind_Backtrace to the system unwind library. */\n \n #define PC_ADJUST -16\n /* Every call on ia64 is part of a 128 bit bundle, so an adjustment of"}]}