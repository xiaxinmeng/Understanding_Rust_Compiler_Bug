{"sha": "3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2OGU3NmU5MDQxOTYwZTRhYjNjNDMzZDhkN2M4OWM0ZDQ1YmYzNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-12-30T02:50:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-12-30T02:50:28Z"}, "message": "calls.c (expand_call): Set MEM_IN_STRUCT_P as needed on return value from assign_stack_temp.\n\n\t* calls.c (expand_call): Set MEM_IN_STRUCT_P as needed on return\n\tvalue from assign_stack_temp.\n\t(store_one_arg): Likewise.\n\t* expr.c (save_noncopied_parts): Likewise.\n\t(expand_expr): Likewise.\n\t* function.c (assign_parms): Likewise.\n\t* integrate.c (expand_inline_function): Likewise.\n\t* stmt.c (expand_decl): Likewise.\n\nFrom-SVN: r8708", "tree": {"sha": "e76d1c027d75b3621e5ef33487d810775b94b68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76d1c027d75b3621e5ef33487d810775b94b68e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/comments", "author": null, "committer": null, "parents": [{"sha": "4879acf67e24704a6c6690605d754db55b385c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4879acf67e24704a6c6690605d754db55b385c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4879acf67e24704a6c6690605d754db55b385c94"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "cfc864441426ad174bcd8ae7d3a73565b79e633f", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "patch": "@@ -684,6 +684,8 @@ expand_call (exp, target, ignore)\n \n \t    structure_value_addr\n \t      = XEXP (assign_stack_temp (BLKmode, struct_value_size, 1), 0);\n+\t    MEM_IN_STRUCT_P (structure_value_addr)\n+\t      = AGGREGATE_TYPE_P (TREE_TYPE (exp));\n \t    target = 0;\n \t  }\n       }\n@@ -1682,6 +1684,7 @@ expand_call (exp, target, ignore)\n       if (save_mode == BLKmode)\n \t{\n \t  save_area = assign_stack_temp (BLKmode, num_to_save, 1);\n+\t  MEM_IN_STRUCT_P (save_area) = 0;\n \t  emit_block_move (validize_mem (save_area), stack_area,\n \t\t\t   GEN_INT (num_to_save),\n \t\t\t   PARM_BOUNDARY / BITS_PER_UNIT);\n@@ -2949,6 +2952,8 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n \t    {\n \t      arg->save_area = assign_stack_temp (BLKmode,\n \t\t\t\t\t\t  arg->size.constant, 1);\n+\t      MEM_IN_STRUCT_P (arg->save_area)\n+\t\t= AGGREGATE_TYPE_P (TREE_TYPE (arg->tree_value));\n \t      preserve_temp_slots (arg->save_area);\n \t      emit_block_move (validize_mem (arg->save_area), stack_area,\n \t\t\t       GEN_INT (arg->size.constant),"}, {"sha": "087f39120577c0b3421942a38363b110ddde0856", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "patch": "@@ -3727,6 +3727,7 @@ save_noncopied_parts (lhs, list)\n \ttree to_be_saved = build (COMPONENT_REF, part_type, lhs, part);\n \trtx target = assign_stack_temp (TYPE_MODE (part_type),\n \t\t\t\t\tint_size_in_bytes (part_type), 0);\n+\tMEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (part_type);\n \tif (! memory_address_p (TYPE_MODE (part_type), XEXP (target, 0)))\n \t  target = change_address (target, TYPE_MODE (part_type), NULL_RTX);\n \tparts = tree_cons (to_be_saved,\n@@ -5025,6 +5026,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t\t\t      (TREE_INT_CST_LOW (TYPE_SIZE (type))\n \t\t\t\t\t       + BITS_PER_UNIT - 1)\n \t\t\t\t\t      / BITS_PER_UNIT, 0);\n+\t\t  MEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (type);\n \t\t}\n \t      else\n \t\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n@@ -6014,6 +6016,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    else\n \t      {\n \t\ttarget = assign_stack_temp (mode, int_size_in_bytes (type), 2);\n+\t\tMEM_IN_STRUCT_P (target) = AGGREGATE_TYPE_P (type);\n \t\t/* All temp slots at this level must not conflict.  */\n \t\tpreserve_temp_slots (target);\n \t\tDECL_RTL (slot) = target;\n@@ -6222,6 +6225,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      rtx memloc\n \t\t= assign_stack_temp (inner_mode,\n \t\t\t\t     int_size_in_bytes (inner_type), 1);\n+\t      MEM_IN_STRUCT_P (memloc) = AGGREGATE_TYPE_P (inner_type);\n \n \t      mark_temp_addr_taken (memloc);\n \t      emit_move_insn (memloc, op0);"}, {"sha": "884cca70ff209bf5eb7116571a61fd7e4f82ab20", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "patch": "@@ -3646,6 +3646,7 @@ assign_parms (fndecl, second_time)\n \t      else\n \t\tcopy = assign_stack_temp (TYPE_MODE (type),\n \t\t\t\t\t  int_size_in_bytes (type), 1);\n+\t      MEM_IN_STRUCT_P (copy) = AGGREGATE_TYPE_P (type);\n \n \t      store_expr (parm, copy, 0);\n \t      emit_move_insn (parmreg, XEXP (copy, 0));"}, {"sha": "ed21858659e266cbfeb8936b71795b7860ebbbbd", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "patch": "@@ -1271,6 +1271,7 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t  rtx stack_slot\n \t    = assign_stack_temp (TYPE_MODE (TREE_TYPE (arg)),\n \t\t\t\t int_size_in_bytes (TREE_TYPE (arg)), 1);\n+\t  MEM_IN_STRUCT_P (stack_slot) = AGGREGATE_TYPE_P (TREE_TYPE (arg));\n \n \t  store_expr (arg, stack_slot, 0);\n "}, {"sha": "30eb838b71712b1064a2092e1ea06fad30a793d5", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3668e76e9041960e4ab3c433d8d7c89c4d45bf35/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "patch": "@@ -3248,6 +3248,7 @@ expand_decl (decl)\n \t/* An initializer is going to decide the size of this array.\n \t   Until we know the size, represent its address with a reg.  */\n \tDECL_RTL (decl) = gen_rtx (MEM, BLKmode, gen_reg_rtx (Pmode));\n+      MEM_IN_STRUCT_P (DECL_RTL (decl)) = AGGREGATE_TYPE_P (type);\n     }\n   else if (DECL_MODE (decl) != BLKmode\n \t   /* If -ffloat-store, don't put explicit float vars\n@@ -3309,6 +3310,7 @@ expand_decl (decl)\n \t\t\t       + BITS_PER_UNIT - 1)\n \t\t\t      / BITS_PER_UNIT),\n \t\t\t     1);\n+      MEM_IN_STRUCT_P (DECL_RTL (decl)) = AGGREGATE_TYPE_P (TREE_TYPE (decl));\n \n       /* Set alignment we actually gave this decl.  */\n       DECL_ALIGN (decl) = (DECL_MODE (decl) == BLKmode ? BIGGEST_ALIGNMENT"}]}