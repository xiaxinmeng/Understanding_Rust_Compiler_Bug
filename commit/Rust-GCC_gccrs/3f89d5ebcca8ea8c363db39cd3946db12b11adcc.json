{"sha": "3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4OWQ1ZWJjY2E4ZWE4YzM2M2RiMzljZDM5NDZkYjEyYjExYWRjYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-14T08:31:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-14T08:36:41Z"}, "message": "openmp: Add testing checks (whether lhs appears in operands at all) to more trees\n\nThis patch adds testing checks (goa_stabilize_expr with NULL pre_p) for more\ntree codes, so that we don't gimplify their operands individually unless lhs\nappears in them.  Also, so that we don't have exponential compile time complexity\nwith the added checks, I've added a depth computation, we don't expect lhs\nto be found in depth 8 or above as all the atomic forms must have x expression\nin specific places in the expressions.\n\n2021-09-14  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gimplify.c (goa_stabilize_expr): Add depth argument, propagate\n\tit to recursive calls, for depth above 7 just gimplify or return.\n\tPerform a test even for MODIFY_EXPR, ADDR_EXPR, COMPOUND_EXPR with\n\t__builtin_clear_padding and TARGET_EXPR.\n\t(gimplify_omp_atomic): Adjust goa_stabilize_expr callers.", "tree": {"sha": "dfee36022ad2f1cc90f8e61bb81ad4c3801cd640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfee36022ad2f1cc90f8e61bb81ad4c3801cd640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f89d5ebcca8ea8c363db39cd3946db12b11adcc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3922acfdfff1e426bd1238cf09eeb84332464c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3922acfdfff1e426bd1238cf09eeb84332464c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3922acfdfff1e426bd1238cf09eeb84332464c9"}], "stats": {"total": 133, "additions": 78, "deletions": 55}, "files": [{"sha": "f680292fd91d2dae84b8ddb270a0ed0afabd363d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 78, "deletions": 55, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f89d5ebcca8ea8c363db39cd3946db12b11adcc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f89d5ebcca8ea8c363db39cd3946db12b11adcc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3f89d5ebcca8ea8c363db39cd3946db12b11adcc", "patch": "@@ -13859,10 +13859,10 @@ goa_lhs_expr_p (tree expr, tree addr)\n \n static int\n goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n-\t\t    tree lhs_var, tree &target_expr, bool rhs)\n+\t\t    tree lhs_var, tree &target_expr, bool rhs, int depth)\n {\n   tree expr = *expr_p;\n-  int saw_lhs;\n+  int saw_lhs = 0;\n \n   if (goa_lhs_expr_p (expr, lhs_addr))\n     {\n@@ -13873,17 +13873,22 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n   if (is_gimple_val (expr))\n     return 0;\n \n-  saw_lhs = 0;\n+  /* Maximum depth of lhs in expression is for the\n+     __builtin_clear_padding (...), __builtin_clear_padding (...),\n+     __builtin_memcmp (&TARGET_EXPR <lhs, >, ...) == 0 ? ... : lhs;  */\n+  if (++depth > 7)\n+    goto finish;\n+\n   switch (TREE_CODE_CLASS (TREE_CODE (expr)))\n     {\n     case tcc_binary:\n     case tcc_comparison:\n       saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p, lhs_addr,\n-\t\t\t\t     lhs_var, target_expr, true);\n+\t\t\t\t     lhs_var, target_expr, true, depth);\n       /* FALLTHRU */\n     case tcc_unary:\n       saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p, lhs_addr,\n-\t\t\t\t     lhs_var, target_expr, true);\n+\t\t\t\t     lhs_var, target_expr, true, depth);\n       break;\n     case tcc_expression:\n       switch (TREE_CODE (expr))\n@@ -13895,84 +13900,101 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n \tcase TRUTH_XOR_EXPR:\n \tcase BIT_INSERT_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n \t  /* FALLTHRU */\n \tcase TRUTH_NOT_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n \t  break;\n \tcase MODIFY_EXPR:\n+\t  if (pre_p && !goa_stabilize_expr (expr_p, NULL, lhs_addr, lhs_var,\n+\t\t\t\t\t    target_expr, true, depth))\n+\t    break;\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n+\t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, false,\n+\t\t\t\t\t depth);\n+\t  break;\n \t  /* FALLTHRU */\n \tcase ADDR_EXPR:\n+\t  if (pre_p && !goa_stabilize_expr (expr_p, NULL, lhs_addr, lhs_var,\n+\t\t\t\t\t    target_expr, true, depth))\n+\t    break;\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, false);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, false,\n+\t\t\t\t\t depth);\n \t  break;\n \tcase COMPOUND_EXPR:\n-\t  /* Special-case __builtin_clear_padding call before\n-\t     __builtin_memcmp.  */\n-\t  if (TREE_CODE (TREE_OPERAND (expr, 0)) == CALL_EXPR)\n-\t    {\n-\t      tree fndecl = get_callee_fndecl (TREE_OPERAND (expr, 0));\n-\t      if (fndecl\n-\t\t  && fndecl_built_in_p (fndecl, BUILT_IN_CLEAR_PADDING)\n-\t\t  && VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 0))))\n+\t  /* Break out any preevaluations from cp_build_modify_expr.  */\n+\t  for (; TREE_CODE (expr) == COMPOUND_EXPR;\n+\t       expr = TREE_OPERAND (expr, 1))\n+\t    {\n+\t      /* Special-case __builtin_clear_padding call before\n+\t\t __builtin_memcmp.  */\n+\t      if (TREE_CODE (TREE_OPERAND (expr, 0)) == CALL_EXPR)\n \t\t{\n-\t\t  saw_lhs = goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n-\t\t\t\t\t\tlhs_addr, lhs_var,\n-\t\t\t\t\t\ttarget_expr, true);\n-\t\t  if (!saw_lhs)\n-\t\t    {\n-\t\t      expr = TREE_OPERAND (expr, 1);\n-\t\t      if (!pre_p)\n-\t\t\treturn goa_stabilize_expr (&expr, pre_p, lhs_addr,\n-\t\t\t\t\t\t   lhs_var, target_expr, true);\n-\t\t      *expr_p = expr;\n-\t\t      return goa_stabilize_expr (expr_p, pre_p, lhs_addr,\n-\t\t\t\t\t\t lhs_var, target_expr, true);\n-\t\t    }\n-\t\t  else\n+\t\t  tree fndecl = get_callee_fndecl (TREE_OPERAND (expr, 0));\n+\t\t  if (fndecl\n+\t\t      && fndecl_built_in_p (fndecl, BUILT_IN_CLEAR_PADDING)\n+\t\t      && VOID_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 0)))\n+\t\t      && (!pre_p\n+\t\t\t  || goa_stabilize_expr (&TREE_OPERAND (expr, 0), NULL,\n+\t\t\t\t\t\t lhs_addr, lhs_var,\n+\t\t\t\t\t\t target_expr, true, depth)))\n \t\t    {\n+\t\t      if (pre_p)\n+\t\t\t*expr_p = expr;\n+\t\t      saw_lhs = goa_stabilize_expr (&TREE_OPERAND (expr, 0),\n+\t\t\t\t\t\t    pre_p, lhs_addr, lhs_var,\n+\t\t\t\t\t\t    target_expr, true, depth);\n \t\t      saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1),\n \t\t\t\t\t\t     pre_p, lhs_addr, lhs_var,\n-\t\t\t\t\t\t     target_expr, rhs);\n-\t\t      break;\n+\t\t\t\t\t\t     target_expr, rhs, depth);\n+\t\t      return saw_lhs;\n \t\t    }\n \t\t}\n+\n+\t      if (pre_p)\n+\t\tgimplify_stmt (&TREE_OPERAND (expr, 0), pre_p);\n \t    }\n-\t  /* Break out any preevaluations from cp_build_modify_expr.  */\n-\t  for (; TREE_CODE (expr) == COMPOUND_EXPR;\n-\t       expr = TREE_OPERAND (expr, 1))\n-\t    if (pre_p)\n-\t      gimplify_stmt (&TREE_OPERAND (expr, 0), pre_p);\n \t  if (!pre_p)\n \t    return goa_stabilize_expr (&expr, pre_p, lhs_addr, lhs_var,\n-\t\t\t\t       target_expr, rhs);\n+\t\t\t\t       target_expr, rhs, depth);\n \t  *expr_p = expr;\n \t  return goa_stabilize_expr (expr_p, pre_p, lhs_addr, lhs_var,\n-\t\t\t\t     target_expr, rhs);\n+\t\t\t\t     target_expr, rhs, depth);\n \tcase COND_EXPR:\n \t  if (!goa_stabilize_expr (&TREE_OPERAND (expr, 0), NULL, lhs_addr,\n-\t\t\t\t   lhs_var, target_expr, true))\n+\t\t\t\t   lhs_var, target_expr, true, depth))\n \t    break;\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 2), pre_p,\n-\t\t\t\t\t lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t\t lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t\t depth);\n \t  break;\n \tcase TARGET_EXPR:\n \t  if (TARGET_EXPR_INITIAL (expr))\n \t    {\n+\t      if (pre_p && !goa_stabilize_expr (expr_p, NULL, lhs_addr,\n+\t\t\t\t\t\tlhs_var, target_expr, true,\n+\t\t\t\t\t\tdepth))\n+\t\tbreak;\n \t      if (expr == target_expr)\n \t\tsaw_lhs = 1;\n \t      else\n \t\t{\n \t\t  saw_lhs = goa_stabilize_expr (&TARGET_EXPR_INITIAL (expr),\n \t\t\t\t\t\tpre_p, lhs_addr, lhs_var,\n-\t\t\t\t\t\ttarget_expr, true);\n+\t\t\t\t\t\ttarget_expr, true, depth);\n \t\t  if (saw_lhs && target_expr == NULL_TREE && pre_p)\n \t\t    target_expr = expr;\n \t\t}\n@@ -13986,7 +14008,8 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n       if (TREE_CODE (expr) == BIT_FIELD_REF\n \t  || TREE_CODE (expr) == VIEW_CONVERT_EXPR)\n \tsaw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n-\t\t\t\t       lhs_addr, lhs_var, target_expr, true);\n+\t\t\t\t       lhs_addr, lhs_var, target_expr, true,\n+\t\t\t\t       depth);\n       break;\n     case tcc_vl_exp:\n       if (TREE_CODE (expr) == CALL_EXPR)\n@@ -13999,24 +14022,24 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n \t\tfor (int i = 0; i < nargs; i++)\n \t\t  saw_lhs |= goa_stabilize_expr (&CALL_EXPR_ARG (expr, i),\n \t\t\t\t\t\t pre_p, lhs_addr, lhs_var,\n-\t\t\t\t\t\t target_expr, true);\n+\t\t\t\t\t\t target_expr, true, depth);\n \t      }\n-\t  if (saw_lhs == 0 && VOID_TYPE_P (TREE_TYPE (expr)))\n-\t    {\n-\t      if (pre_p)\n-\t\tgimplify_stmt (&expr, pre_p);\n-\t      return 0;\n-\t    }\n \t}\n       break;\n     default:\n       break;\n     }\n \n+ finish:\n   if (saw_lhs == 0 && pre_p)\n     {\n       enum gimplify_status gs;\n-      if (rhs)\n+      if (TREE_CODE (expr) == CALL_EXPR && VOID_TYPE_P (TREE_TYPE (expr)))\n+\t{\n+\t  gimplify_stmt (&expr, pre_p);\n+\t  return saw_lhs;\n+\t}\n+      else if (rhs)\n \tgs = gimplify_expr (expr_p, pre_p, NULL, is_gimple_val, fb_rvalue);\n       else\n \tgs = gimplify_expr (expr_p, pre_p, NULL, is_gimple_lvalue, fb_lvalue);\n@@ -14044,7 +14067,7 @@ gimplify_omp_atomic (tree *expr_p, gimple_seq *pre_p)\n   tmp_load = create_tmp_reg (type);\n   if (rhs\n       && goa_stabilize_expr (&rhs, pre_p, addr, tmp_load, target_expr,\n-\t\t\t     true) < 0)\n+\t\t\t     true, 0) < 0)\n     return GS_ERROR;\n \n   if (gimplify_expr (&addr, pre_p, NULL, is_gimple_val, fb_rvalue)"}]}