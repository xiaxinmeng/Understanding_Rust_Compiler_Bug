{"sha": "dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjYjMzNmUxMGQzNjc5ZTcyYzdhNmUzZDZhM2ZmOTYwMTIzNGU1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-12T17:19:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-12T17:19:23Z"}, "message": "Makefile.in (TREE_SSA_LIVE_H): Add vecprim.h.\n\n\t* Makefile.in (TREE_SSA_LIVE_H): Add vecprim.h.\n\t* tree-ssa-live.c (tpa_init, tpa_remove_partition, tpa_delete,\n\ttpa_compact, root_var_init, type_var_init): Use VEC instead of\n\tVARRAY.\n\t* tree-ssa-live.h: Include vecprim.h.\n\t(tree_partition_associator_d): Change the type of\n\tfirst_partition to VEC(int,heap) *.\n\t(tpa_first_partition): Use VEC instead of VARRAY.\n\nFrom-SVN: r112893", "tree": {"sha": "11f379d8dd19e84315d94096c16870aa09611e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11f379d8dd19e84315d94096c16870aa09611e0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/comments", "author": null, "committer": null, "parents": [{"sha": "aa9d194eec39c73ac45c617a2df0efc4435db8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9d194eec39c73ac45c617a2df0efc4435db8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9d194eec39c73ac45c617a2df0efc4435db8b7"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "d540abd2a92f260f2ffe5a17440b0b3a135e79b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "patch": "@@ -1,3 +1,14 @@\n+2006-04-12  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* Makefile.in (TREE_SSA_LIVE_H): Add vecprim.h.\n+\t* tree-ssa-live.c (tpa_init, tpa_remove_partition, tpa_delete,\n+\ttpa_compact, root_var_init, type_var_init): Use VEC instead of\n+\tVARRAY.\n+\t* tree-ssa-live.h: Include vecprim.h.\n+\t(tree_partition_associator_d): Change the type of\n+\tfirst_partition to VEC(int,heap) *.\n+\t(tpa_first_partition): Use VEC instead of VARRAY.\n+\n 2006-04-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (emit_group_store): Correct operand order in call to"}, {"sha": "67fdd77c64db9dcfd7d9ef2fd932e3daa0d21018", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "patch": "@@ -787,7 +787,7 @@ TREE_GIMPLE_H = tree-gimple.h tree-iterator.h\n TREE_FLOW_H = tree-flow.h tree-flow-inline.h tree-ssa-operands.h \\\n \t\tbitmap.h $(BASIC_BLOCK_H) hard-reg-set.h $(TREE_GIMPLE_H) \\\n \t\t$(HASHTAB_H) $(CGRAPH_H) $(IPA_REFERENCE_H)\n-TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H)\n+TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H) vecprim.h\n PRETTY_PRINT_H = pretty-print.h input.h $(OBSTACK_H)\n DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H) options.h\n C_PRETTY_PRINT_H = c-pretty-print.h $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)"}, {"sha": "a5fe403ef531b1c2e8d673e95f7772d4c634ec8e", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "patch": "@@ -882,7 +882,7 @@ tpa_init (var_map map)\n \n   x = MAX (40, (num_partitions / 20));\n   tpa->trees = VEC_alloc (tree, heap, x);\n-  VARRAY_INT_INIT (tpa->first_partition, x, \"first_partition\");\n+  tpa->first_partition = VEC_alloc (int, heap, x);\n \n   return tpa;\n \n@@ -899,7 +899,8 @@ tpa_remove_partition (tpa_p tpa, int tree_index, int partition_index)\n   i = tpa_first_partition (tpa, tree_index);\n   if (i == partition_index)\n     {\n-      VARRAY_INT (tpa->first_partition, tree_index) = tpa->next_partition[i];\n+      VEC_replace (int, tpa->first_partition, tree_index,\n+\t\t   tpa->next_partition[i]);\n     }\n   else\n     {\n@@ -924,6 +925,7 @@ tpa_delete (tpa_p tpa)\n     return;\n \n   VEC_free (tree, heap, tpa->trees);\n+  VEC_free (int, heap, tpa->first_partition);\n   free (tpa->partition_to_tree_map);\n   free (tpa->next_partition);\n   free (tpa);\n@@ -958,20 +960,20 @@ tpa_compact (tpa_p tpa)\n       if (tpa_next_partition (tpa, first) == NO_PARTITION)\n         {\n \t  swap_t = VEC_index (tree, tpa->trees, last);\n-\t  swap_i = VARRAY_INT (tpa->first_partition, last);\n+\t  swap_i = VEC_index (int, tpa->first_partition, last);\n \n \t  /* Update the last entry. Since it is known to only have one\n \t     partition, there is nothing else to update.  */\n \t  VEC_replace (tree, tpa->trees, last,\n \t\t       VEC_index (tree, tpa->trees, x));\n-\t  VARRAY_INT (tpa->first_partition, last) \n-\t    = VARRAY_INT (tpa->first_partition, x);\n+\t  VEC_replace (int, tpa->first_partition, last,\n+\t\t       VEC_index (int, tpa->first_partition, x));\n \t  tpa->partition_to_tree_map[tpa_first_partition (tpa, last)] = last;\n \n \t  /* Since this list is known to have more than one partition, update\n \t     the list owner entries.  */\n \t  VEC_replace (tree, tpa->trees, x, swap_t);\n-\t  VARRAY_INT (tpa->first_partition, x) = swap_i;\n+\t  VEC_replace (int, tpa->first_partition, x, swap_i);\n \t  for (y = tpa_first_partition (tpa, x); \n \t       y != NO_PARTITION; \n \t       y = tpa_next_partition (tpa, y))\n@@ -1041,16 +1043,16 @@ root_var_init (var_map map)\n       ann = var_ann (t);\n       if (ann->root_var_processed)\n         {\n-\t  rv->next_partition[p] = VARRAY_INT (rv->first_partition, \n-\t\t\t\t\t      VAR_ANN_ROOT_INDEX (ann));\n-\t  VARRAY_INT (rv->first_partition, VAR_ANN_ROOT_INDEX (ann)) = p;\n+\t  rv->next_partition[p] = VEC_index (int, rv->first_partition, \n+\t\t\t\t\t     VAR_ANN_ROOT_INDEX (ann));\n+\t  VEC_replace (int, rv->first_partition, VAR_ANN_ROOT_INDEX (ann), p);\n \t}\n       else\n         {\n \t  ann->root_var_processed = 1;\n \t  VAR_ANN_ROOT_INDEX (ann) = rv->num_trees++;\n \t  VEC_safe_push (tree, heap, rv->trees, t);\n-\t  VARRAY_PUSH_INT (rv->first_partition, p);\n+\t  VEC_safe_push (int, heap, rv->first_partition, p);\n \t}\n       rv->partition_to_tree_map[p] = VAR_ANN_ROOT_INDEX (ann);\n     }\n@@ -1120,12 +1122,12 @@ type_var_init (var_map map)\n         {\n \t  tv->num_trees++;\n \t  VEC_safe_push (tree, heap, tv->trees, t);\n-\t  VARRAY_PUSH_INT (tv->first_partition, p);\n+\t  VEC_safe_push (int, heap, tv->first_partition, p);\n \t}\n       else\n         {\n-\t  tv->next_partition[p] = VARRAY_INT (tv->first_partition, y);\n-\t  VARRAY_INT (tv->first_partition, y) = p;\n+\t  tv->next_partition[p] = VEC_index (int, tv->first_partition, y);\n+\t  VEC_replace (int, tv->first_partition, y, p);\n \t}\n       tv->partition_to_tree_map[p] = y;\n     }"}, {"sha": "f0c59028e19f1b1aa0f844fa136e2d37d5327546", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacb336e10d3679e72c7a6e3d6a3ff9601234e5e/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=dacb336e10d3679e72c7a6e3d6a3ff9601234e5e", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02110-1301, USA.  */\n #define _TREE_SSA_LIVE_H 1\n \n #include \"partition.h\"\n+#include \"vecprim.h\"\n \n /* Used to create the variable mapping when we go out of SSA form.  */\n typedef struct _var_map\n@@ -338,7 +339,7 @@ make_live_on_entry (tree_live_info_p live, basic_block bb , int p)\n typedef struct tree_partition_associator_d\n {\n   VEC(tree,heap) *trees;\n-  varray_type first_partition;\n+  VEC(int,heap) *first_partition;\n   int *next_partition;\n   int *partition_to_tree_map;\n   int num_trees;\n@@ -384,7 +385,7 @@ tpa_tree (tpa_p tpa, int i)\n static inline int\n tpa_first_partition (tpa_p tpa, int i)\n {\n-  return VARRAY_INT (tpa->first_partition, i);\n+  return VEC_index (int, tpa->first_partition, i);\n }\n \n "}]}