{"sha": "078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4YTcwYTE1ZWQ3NWUyZTllZDRjNGQwOTQ1MGIyNTIyZTgyZTZhZQ==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2008-09-18T05:24:57Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2008-09-18T05:24:57Z"}, "message": "haifa-sched.c (dep_cost_1): Recognize the producer even if the consumer is an asm.\n\n\t* haifa-sched.c (dep_cost_1): Recognize the producer even if the\n\tconsumer is an asm.  Add comment why this is important.\n\t(choose_ready): Add comment to the \"INSN_CODE (insn) >= 0 ||\n\trecog_memoized (insn) < 0\" assert.  Put ENABLE_CHECKING around\n\tit.\n\nFrom-SVN: r140444", "tree": {"sha": "388b3c690b3ecfc5059bdde479615be0a23582dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388b3c690b3ecfc5059bdde479615be0a23582dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae/comments", "author": null, "committer": null, "parents": [{"sha": "38c4df0b852230edc05c20b000bec61819735ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c4df0b852230edc05c20b000bec61819735ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c4df0b852230edc05c20b000bec61819735ecf"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "6c2e2b362255be53e40905c6fb4b2d81d5feb618", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "patch": "@@ -1,3 +1,11 @@\n+2008-09-17  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* haifa-sched.c (dep_cost_1): Recognize the producer even if the\n+\tconsumer is an asm.  Add comment why this is important.\n+\t(choose_ready): Add comment to the \"INSN_CODE (insn) >= 0 ||\n+\trecog_memoized (insn) < 0\" assert.  Put ENABLE_CHECKING around\n+\tit.\n+\n 2008-09-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* expr.c (emit_group_store): Do not shift before moving via a"}, {"sha": "46640c4a64566009cc773c12a1d53e27231ed082", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078a70a15ed75e2e9ed4c4d09450b2522e82e6ae/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=078a70a15ed75e2e9ed4c4d09450b2522e82e6ae", "patch": "@@ -646,21 +646,25 @@ insn_cost (rtx insn)\n \n /* Compute cost of dependence LINK.\n    This is the number of cycles between instruction issue and\n-   instruction results.  */\n+   instruction results.\n+   ??? We also use this function to call recog_memoized on all insns.  */\n int\n dep_cost_1 (dep_t link, dw_t dw)\n {\n+  rtx insn = DEP_PRO (link);\n   rtx used = DEP_CON (link);\n   int cost;\n \n   /* A USE insn should never require the value used to be computed.\n      This allows the computation of a function's result and parameter\n      values to overlap the return and call.  */\n   if (recog_memoized (used) < 0)\n-    cost = 0;\n+    {\n+      cost = 0;\n+      recog_memoized (insn);\n+    }\n   else\n     {\n-      rtx insn = DEP_PRO (link);\n       enum reg_note dep_type = DEP_TYPE (link);\n \n       cost = insn_cost (insn);\n@@ -2312,8 +2316,14 @@ choose_ready (struct ready_list *ready, rtx *insn_ptr)\n \t  {\n \t    insn = ready_element (ready, i);\n \n+#ifdef ENABLE_CHECKING\n+\t    /* If this insn is recognizable we should have already\n+\t       recognized it earlier.\n+\t       ??? Not very clear where this is supposed to be done.\n+\t       See dep_cost_1.  */\n \t    gcc_assert (INSN_CODE (insn) >= 0\n \t\t\t|| recog_memoized (insn) < 0);\n+#endif\n \n \t    ready_try [i]\n \t      = (/* INSN_CODE check can be omitted here as it is also done later"}]}