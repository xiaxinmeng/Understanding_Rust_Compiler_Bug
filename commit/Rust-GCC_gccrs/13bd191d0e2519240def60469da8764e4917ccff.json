{"sha": "13bd191d0e2519240def60469da8764e4917ccff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiZDE5MWQwZTI1MTkyNDBkZWY2MDQ2OWRhODc2NGU0OTE3Y2NmZg==", "commit": {"author": {"name": "Philip Blundell", "email": "pb@nexus.co.uk", "date": "1999-05-22T09:40:04Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-05-22T09:40:04Z"}, "message": "Apply patch from Philip Blundell  <pb@nexus.co.uk> to fix PIC support for\nconstant tables.\n\nFrom-SVN: r27100", "tree": {"sha": "d2e677b7e6bf7df0b630f8662371d0031a538237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2e677b7e6bf7df0b630f8662371d0031a538237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13bd191d0e2519240def60469da8764e4917ccff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bd191d0e2519240def60469da8764e4917ccff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bd191d0e2519240def60469da8764e4917ccff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bd191d0e2519240def60469da8764e4917ccff/comments", "author": null, "committer": null, "parents": [{"sha": "ed4e4c744119bc235110c121e12d79494404a8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4e4c744119bc235110c121e12d79494404a8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4e4c744119bc235110c121e12d79494404a8c6"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "963fdc3997ce517175a2ae3e6384759f757bfb49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bd191d0e2519240def60469da8764e4917ccff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bd191d0e2519240def60469da8764e4917ccff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13bd191d0e2519240def60469da8764e4917ccff", "patch": "@@ -1,3 +1,13 @@\n+Thu May 13 09:35:51 1999  Philip Blundell  <pb@nexus.co.uk>\n+\n+\tBased on patch by Scott Bambrough and Pat Beirne:\n+\t* config/arm/arm.c (making_const_table): New variable.\n+\t* config/arm/arm.h (making_const_table): Declare.\n+\t(OUTPUT_INT_ADDR_CONST): Mark symbols as position independent if\n+\tappropriate.\n+\t* config/arm/arm.md (consttable_4, consttable_8, consttable_end):\n+\tKeep track of when we are building the constant table.\t\n+\n Tue May 18 17:44:22 1999  Philip Blundell  <pb@nexus.co.uk>\n \n \t* config/arm/arm.c (arm_override_options): Fix erroneous warning"}, {"sha": "b60f55240ed6921117de0121c2513c9566ce3932", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=13bd191d0e2519240def60469da8764e4917ccff", "patch": "@@ -70,6 +70,9 @@ static void emit_sfm PROTO ((int, int));\n static enum arm_cond_code get_arm_condition_code PROTO ((rtx));\n static int const_ok_for_op RTX_CODE_PROTO ((Hint, Rcode));\n \n+/* True if we are currently building a constant table. */\n+int making_const_table;\n+\n /*  Define the information needed to generate branch insns.  This is\n    stored from the compare operation. */\n rtx arm_compare_op0, arm_compare_op1;\n@@ -277,7 +280,7 @@ arm_override_options ()\n       \n       if (ptr->string != NULL && ptr->string[0] != '\\0')\n         {\n-\t  struct processors * sel;\n+\t  const struct processors * sel;\n \n           for (sel = ptr->processors; sel->name != NULL; sel ++)\n             if (streq (ptr->string, sel->name))"}, {"sha": "ac2dc05bbc0a69c4c776caf0a6557ae5520f7ee8", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=13bd191d0e2519240def60469da8764e4917ccff", "patch": "@@ -1800,7 +1800,11 @@ extern int arm_pic_register;\n \t(! symbol_mentioned_p (X)\t\t\t\t\\\n \t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n \t     || ! symbol_mentioned_p (get_pool_constant (X))))\n- \n+     \n+/* We need to know when we are making a constant pool; this determines\n+   whether data needs to be in the GOT or can be referenced via a GOT\n+   offset.  */\n+extern int making_const_table;\n \n \f\n /* Condition code information. */\n@@ -2019,20 +2023,33 @@ extern struct rtx_def *arm_compare_op0, *arm_compare_op1;\n \t\t GET_CODE (X) == POST_DEC ? \"-\" : \"\",\t\t\t\\\n \t\t GET_MODE_SIZE (output_memory_reference_mode));\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  else output_addr_const(STREAM, X);\t\t\t\t\t\\\n+  else output_addr_const (STREAM, X);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* Mark symbols as position independent.  We only do this in the\t\\\n+      .text segment, not in the .data segment. */\t\t\t\\\n+    if (NEED_PLT_GOT && flag_pic && making_const_table &&\t\t\\\n+    \t(GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == LABEL_REF))\t\\\n+     {\t\t\t\t\t\t\t\t\t\\\n+        if (GET_CODE (X) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (X))\t\\\n+          fprintf (STREAM, \"(GOTOFF)\");\t\t\t\t\t\\\n+        else if (GET_CODE (X) == LABEL_REF)\t\t\t\t\\\n+          fprintf (STREAM, \"(GOTOFF)\");\t\t\t\t\t\\\n+        else\t\t\t\t\t\t\t\t\\\n+          fprintf (STREAM, \"(GOT)\");\t\t\t\t\t\\\n+     }\t\t\t\t\t\t\t\t\t\\\n }\n \n /* Handles PIC addr specially */\n-#define OUTPUT_INT_ADDR_CONST(STREAM,X) \\\n+#define OUTPUT_INT_ADDR_CONST(STREAM,X) \t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic && GET_CODE(X) == CONST && is_pic(X))\t\t\t\\\n+    if (flag_pic && GET_CODE (X) == CONST && is_pic (X))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\toutput_addr_const(STREAM, XEXP (XEXP (XEXP (X, 0), 0), 0));\t\\\n-\tfputs(\" - (\", STREAM);\t\t\t\t\t\t\\\n-\toutput_addr_const(STREAM, XEXP (XEXP (XEXP (X, 0), 1), 0));\t\\\n-\tfputs(\")\", STREAM);\t\t\t\t\t\t\\\n+\toutput_addr_const (STREAM, XEXP (XEXP (XEXP (X, 0), 0), 0));\t\\\n+\tfputs (\" - (\", STREAM);\t\t\t\t\t\t\\\n+\toutput_addr_const (STREAM, XEXP (XEXP (XEXP (X, 0), 1), 0));\t\\\n+\tfputs (\")\", STREAM);\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    else output_addr_const(STREAM, X);\t\t\t\t\t\\\n+    else output_addr_const (STREAM, X);\t\t\t\t\t\\\n   }\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n@@ -2042,7 +2059,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   int mi_delta = (DELTA);\t\t\t\t\t\t\\\n   char *mi_op = mi_delta < 0 ? \"sub\" : \"add\";\t\t\t\t\\\n   int shift = 0;\t\t\t\t\t\t\t\\\n-  int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION))) \\\n+  int this_regno = (aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION)))\\\n \t\t    ? 1 : 0);\t\t\t\t\t\t\\\n   if (mi_delta < 0) mi_delta = -mi_delta;\t\t\t\t\\\n   while (mi_delta != 0)\t\t\t\t\t\t\t\\"}, {"sha": "acc5d34eb499f23581ebeb228d6eff8a2adfd59b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bd191d0e2519240def60469da8764e4917ccff/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=13bd191d0e2519240def60469da8764e4917ccff", "patch": "@@ -6216,6 +6216,7 @@\n   \"\"\n   \"*\n {\n+  making_const_table = TRUE;\n   switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n     {\n     case MODE_FLOAT:\n@@ -6238,6 +6239,7 @@\n   \"\"\n   \"*\n {\n+  making_const_table = TRUE;\n   switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n     {\n     case MODE_FLOAT:\n@@ -6259,7 +6261,7 @@\n   [(unspec_volatile [(const_int 0)] 4)]\n   \"\"\n   \"*\n-  /* Nothing to do (currently).  */\n+  making_const_table = FALSE;\n   return \\\"\\\";\n \")\n "}]}