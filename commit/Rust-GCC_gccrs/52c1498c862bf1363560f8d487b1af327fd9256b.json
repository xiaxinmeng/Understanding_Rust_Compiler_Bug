{"sha": "52c1498c862bf1363560f8d487b1af327fd9256b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjMTQ5OGM4NjJiZjEzNjM1NjBmOGQ0ODdiMWFmMzI3ZmQ5MjU2Yg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2014-07-30T12:41:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:41:59Z"}, "message": "einfo.ads (Is_Inlined): Document new use in GNATprove mode.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.ads (Is_Inlined): Document new use in GNATprove mode.\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Add comments\n\tto explain rationale for inlining or not in GNATprove mode.\n\t(Expand_Inlined_Call): In GNATprove mode, set Is_Inlined flag\n\tto False when inlining is not possible.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Is_Inlined\n\tflag to indicate that subprogram is fully inlined. To be reversed\n\tif inlining problem is found.\n\t* sem_res.adb (Resolve_Call): Set Is_Inlined flag to False when\n\tcall in potentially unevaluated context.\n\nFrom-SVN: r213255", "tree": {"sha": "30c33ad2f80441e26c9e0b42e61123d09561cc60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30c33ad2f80441e26c9e0b42e61123d09561cc60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c1498c862bf1363560f8d487b1af327fd9256b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1498c862bf1363560f8d487b1af327fd9256b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1498c862bf1363560f8d487b1af327fd9256b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1498c862bf1363560f8d487b1af327fd9256b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c4e2bc5bdc3100399604a462c2d94aaee5ba8e"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "f34919648c26b2161013933318740044dc799832", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52c1498c862bf1363560f8d487b1af327fd9256b", "patch": "@@ -1,3 +1,16 @@\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads (Is_Inlined): Document new use in GNATprove mode.\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Add comments\n+\tto explain rationale for inlining or not in GNATprove mode.\n+\t(Expand_Inlined_Call): In GNATprove mode, set Is_Inlined flag\n+\tto False when inlining is not possible.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Set Is_Inlined\n+\tflag to indicate that subprogram is fully inlined. To be reversed\n+\tif inlining problem is found.\n+\t* sem_res.adb (Resolve_Call): Set Is_Inlined flag to False when\n+\tcall in potentially unevaluated context.\n+\n 2014-07-30  Jose Ruiz  <ruiz@adacore.com>\n \n \t* s-tarest.adb, s-tarest.ads: Fix comments."}, {"sha": "6d03646ef6ee4d886ebb23eae9945781a8b539c8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=52c1498c862bf1363560f8d487b1af327fd9256b", "patch": "@@ -2477,6 +2477,10 @@ package Einfo is\n --       inherited by their instances. It is also set on the body entities\n --       of inlined subprograms. See also Has_Pragma_Inline.\n \n+--       Is_Inlined is also set for subprograms that are always inlined in\n+--       GNATprove mode. GNATprove uses this flag to know when a body does not\n+--       need to be analyzed.\n+\n --    Is_Instantiated (Flag126)\n --       Defined in generic packages and generic subprograms. Set if the unit\n --       is instantiated from somewhere in the extended main source unit. This"}, {"sha": "9701f3ab92f78d8562d53f56eeb1e359ac535887", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=52c1498c862bf1363560f8d487b1af327fd9256b", "patch": "@@ -1558,9 +1558,14 @@ package body Inline is\n          Id := Body_Id;\n       end if;\n \n-      --  General note. The following comments clearly say what cannot be\n-      --  inlined, but they do not give any clue on the motivation for the\n-      --  exclusion. It would be good to document the motivations ???\n+      --  Only local subprograms without contracts are inlined in GNATprove\n+      --  mode, as these are the subprograms which a user is not interested in\n+      --  analyzing in isolation, but rather in the context of their call. This\n+      --  is a convenient convention, that could be changed for an explicit\n+      --  pragma/aspect one day.\n+\n+      --  In a number of special cases, inlining is not desirable or not\n+      --  possible, see below.\n \n       --  Do not inline unit-level subprograms\n \n@@ -1584,19 +1589,22 @@ package body Inline is\n       then\n          return False;\n \n-      --  Do not inline expression functions\n+      --  Do not inline expression functions, which are directly inlined at the\n+      --  prover level.\n \n       elsif (Present (Spec_Id) and then Is_Expression_Function (Spec_Id))\n         or else Is_Expression_Function (Body_Id)\n       then\n          return False;\n \n-      --  Do not inline generic subprogram instances\n+      --  Do not inline generic subprogram instances. The visibility rules of\n+      --  generic instances plays badly with inlining.\n \n       elsif Is_Generic_Instance (Spec_Id) then\n          return False;\n \n-      --  Only inline subprograms whose body is marked SPARK_Mode On\n+      --  Only inline subprograms whose body is marked SPARK_Mode On. Other\n+      --  subprogram bodies should not be analyzed.\n \n       elsif No (SPARK_Pragma (Body_Id))\n         or else Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On\n@@ -2952,11 +2960,11 @@ package body Inline is\n       function Process_Sloc (Nod : Node_Id) return Traverse_Result;\n       --  If the call being expanded is that of an internal subprogram, set the\n       --  sloc of the generated block to that of the call itself, so that the\n-      --  expansion is skipped by the \"next\" command in gdb.\n-      --  Same processing for a subprogram in a predefined file, e.g.\n-      --  Ada.Tags. If Debug_Generated_Code is true, suppress this change to\n-      --  simplify our own development. Same in in GNATprove mode, to ensure\n-      --  that warnings and diagnostics point to the proper location.\n+      --  expansion is skipped by the \"next\" command in gdb. Same processing\n+      --  for a subprogram in a predefined file, e.g. Ada.Tags. If\n+      --  Debug_Generated_Code is true, suppress this change to simplify our\n+      --  own development. Same in GNATprove mode, to ensure that warnings and\n+      --  diagnostics point to the proper location.\n \n       procedure Reset_Dispatching_Calls (N : Node_Id);\n       --  In subtree N search for occurrences of dispatching calls that use the\n@@ -3634,15 +3642,17 @@ package body Inline is\n          if Present (Renamed_Object (F)) then\n \n             --  If expander is active, it is an error to try to inline a\n-            --  recursive program. In GNATprove mode, just indicate that\n-            --  the inlining will not happen.\n+            --  recursive program. In GNATprove mode, just indicate that the\n+            --  inlining will not happen, and mark the subprogram as not always\n+            --  inlined.\n \n             if Expander_Active then\n                Error_Msg_N\n                  (\"cannot inline call to recursive subprogram\", N);\n             else\n                Cannot_Inline\n                  (\"cannot inline call to recursive subprogram?\", N, Subp);\n+               Set_Is_Inlined (Subp, False);\n             end if;\n \n             return;"}, {"sha": "4d0264f1452fcaca5814543db68bbf4b1ed5aa7f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=52c1498c862bf1363560f8d487b1af327fd9256b", "patch": "@@ -3483,6 +3483,7 @@ package body Sem_Ch6 is\n            and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n            and then not Body_Has_Contract\n          then\n+            Set_Is_Inlined (Spec_Id, True);\n             Build_Body_To_Inline (N, Spec_Id);\n          end if;\n \n@@ -3510,6 +3511,7 @@ package body Sem_Ch6 is\n         and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n         and then not Body_Has_Contract\n       then\n+         Set_Is_Inlined (Spec_Id, True);\n          Check_And_Build_Body_To_Inline (N, Spec_Id, Body_Id);\n       end if;\n \n@@ -3644,6 +3646,7 @@ package body Sem_Ch6 is\n         and then Nkind (Parent (Parent (Spec_Id))) = N_Subprogram_Declaration\n       then\n          Set_Body_To_Inline (Parent (Parent (Spec_Id)), Empty);\n+         Set_Is_Inlined (Spec_Id, False);\n       end if;\n \n       --  Check completion, and analyze the statements"}, {"sha": "332bc6090c7677b5eb51c787a45433a974c57e34", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c1498c862bf1363560f8d487b1af327fd9256b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=52c1498c862bf1363560f8d487b1af327fd9256b", "patch": "@@ -6222,7 +6222,14 @@ package body Sem_Res is\n             if Nkind (Decl) = N_Subprogram_Declaration\n               and then Present (Body_To_Inline (Decl))\n             then\n-               Expand_Inlined_Call (N, Nam_Alias, Nam);\n+               if Is_Potentially_Unevaluated (N) then\n+                  Error_Msg_NE (\"?cannot inline call to &\", N, Nam);\n+                  Error_Msg_N\n+                    (\"\\call appears in potentially unevaluated context\", N);\n+                  Set_Is_Inlined (Nam, False);\n+               else\n+                  Expand_Inlined_Call (N, Nam_Alias, Nam);\n+               end if;\n             end if;\n          end;\n       end if;"}]}