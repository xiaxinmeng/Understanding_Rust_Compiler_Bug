{"sha": "f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZWVhN2JhZWExOGVkMjcxYmI3YTQ1NzFiYzdmYTQyYTUxYjljMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-10T00:05:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-10T00:05:49Z"}, "message": "fstream.tcc (_M_underflow): Do not special case the unbuffered case...\n\n2003-06-09  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/fstream.tcc (_M_underflow): Do not special\n\tcase the unbuffered case, which really means simply a one char\n\tget area.\n\t(basic_filebuf): Initialize _M_buf_size.\n\t(setbuf): Unbuffered means _M_buf_size == 1, since only\n\t_M_buf_size - 1 == 0 chars are going to be used for the\n\tput area and 1 for the get area.\n\t* include/std/std_streambuf.h (_M_buf_size): Move to basic_filebuf.\n\t(~basic_streambuf): Tweak.\n\t(basic_streambuf): Do not initialize _M_buf_size.\n\t* include/std/std_fstream.h (_M_buf_size): Add from basic_streambuf.\n\t(~basic_filebuf): Tweak.\n\t(_M_set_buffer): Tweak, considering that _M_buf_size == 1 is the\n\tunbuffered situation (i.e., put area pointers NULL).\n\t* include/bits/streambuf.tcc (sbumpc): Clean up.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-out.cc: New.\n\nFrom-SVN: r67686", "tree": {"sha": "4796888c4873be33692877192639786c97003001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4796888c4873be33692877192639786c97003001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/comments", "author": null, "committer": null, "parents": [{"sha": "22597a82ee205a8640b812d29d12811b6a8b6e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22597a82ee205a8640b812d29d12811b6a8b6e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22597a82ee205a8640b812d29d12811b6a8b6e07"}], "stats": {"total": 737, "additions": 620, "deletions": 117}, "files": [{"sha": "1e370c045682f4e6843b6a37c36b5aef2014b63f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -1,3 +1,28 @@\n+2003-06-09  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/fstream.tcc (_M_underflow): Do not special\n+\tcase the unbuffered case, which really means simply a one char\n+\tget area.\n+\t(basic_filebuf): Initialize _M_buf_size.\n+\t(setbuf): Unbuffered means _M_buf_size == 1, since only\n+\t_M_buf_size - 1 == 0 chars are going to be used for the\n+\tput area and 1 for the get area.\n+\t* include/std/std_streambuf.h (_M_buf_size): Move to basic_filebuf.\n+\t(~basic_streambuf): Tweak.\n+\t(basic_streambuf): Do not initialize _M_buf_size.\n+\t* include/std/std_fstream.h (_M_buf_size): Add from basic_streambuf.\n+\t(~basic_filebuf): Tweak.\n+\t(_M_set_buffer): Tweak, considering that _M_buf_size == 1 is the\n+\tunbuffered situation (i.e., put area pointers NULL).\n+\t* include/bits/streambuf.tcc (sbumpc): Clean up.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputbackc/char/2-out.cc: New.\n+\n 2003-06-09  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4:  Move all AM_CONDITIONAL calls out."}, {"sha": "d98830921835dce2b763621770abcfbb1e1942d1", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 53, "deletions": 91, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -71,9 +71,9 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() : __streambuf_type(), _M_file(&_M_lock), \n-    _M_state_cur(__state_type()), _M_state_beg(__state_type()), _M_buf(NULL), \n-    _M_buf_allocated(false),_M_last_overflowed(false), \n-    _M_filepos(0), _M_pback(char_type()), _M_pback_cur_save(0), \n+    _M_state_cur(__state_type()), _M_state_beg(__state_type()),\n+    _M_buf(NULL), _M_buf_size(BUFSIZ), _M_buf_allocated(false),\n+    _M_last_overflowed(false), _M_filepos(0), _M_pback_cur_save(0), \n     _M_pback_end_save(0), _M_pback_init(false), _M_codecvt(0)\n     { \n       this->_M_buf_unified = true; \t  \n@@ -193,102 +193,64 @@ namespace std\n \t  // fileops happen...\n \t  _M_destroy_pback();\n \n-\t  const size_t __buflen = this->_M_buf_size \n-\t                          ? this->_M_buf_size - 1 : 0;\n-\t  if (__buflen)\n-\t    {\n-\t      if (this->_M_in_cur < this->_M_in_end)\n-\t\t{\n-\t\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n-\t\t  if (__bump)\n-\t\t    _M_move_in_cur(1);\n-\t\t  return __ret;\n-\t\t}\n+\t  const size_t __buflen = this->_M_buf_size > 1\n+\t                          ? this->_M_buf_size - 1 : 1;\n \n-\t      // Sync internal and external buffers.\n-\t      if (__testout && this->_M_out_beg < this->_M_out_lim)\n-\t\tthis->overflow();\n+\t  if (this->_M_in_cur < this->_M_in_end)\n+\t    {\n+\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t      if (__bump)\n+\t\t_M_move_in_cur(1);\n+\t      return __ret;\n+\t    }\n \n-\t      // Get and convert input sequence.\n-\t      streamsize __elen = 0;\n-\t      streamsize __ilen = 0;\n-\t      if (__check_facet(_M_codecvt).always_noconv())\n+\t  // Sync internal and external buffers.\n+\t  if (__testout && this->_M_out_beg < this->_M_out_lim)\n+\t    this->overflow();\n+\t  \n+\t  // Get and convert input sequence.\n+\t  streamsize __elen = 0;\n+\t  streamsize __ilen = 0;\n+\t  if (__check_facet(_M_codecvt).always_noconv())\n+\t    {\n+\t      __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), __buflen);\n+\t      __ilen = __elen;\n+\t    }\n+\t  else\n+\t    {\n+\t      char* __buf = static_cast<char*>(__builtin_alloca(__buflen));\n+\t      __elen = _M_file.xsgetn(__buf, __buflen);\n+\t      \n+\t      const char* __eend;\n+\t      char_type* __iend;\n+\t      codecvt_base::result __r;\n+\t      __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n+\t\t\t\t   __eend, this->_M_in_beg, \n+\t\t\t\t   this->_M_in_beg + __buflen, __iend);\n+\t      if (__r == codecvt_base::ok)\n+\t\t__ilen = __iend - this->_M_in_beg;\n+\t      else if (__r == codecvt_base::noconv)\n \t\t{\n-\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), __buflen);\n+\t\t  traits_type::copy(this->_M_in_beg,\n+\t\t\t\t    reinterpret_cast<char_type*>(__buf), \n+\t\t\t\t    __elen);\n \t\t  __ilen = __elen;\n \t\t}\n-\t      else\n+\t      else \n \t\t{\n-\t\t  char* __buf = static_cast<char*>(__builtin_alloca(__buflen));\n-\t\t  __elen = _M_file.xsgetn(__buf, __buflen);\n-\t\t  \n-\t\t  const char* __eend;\n-\t\t  char_type* __iend;\n-\t\t  codecvt_base::result __r;\n-\t\t  __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n-\t\t\t\t       __eend, this->_M_in_beg, \n-\t\t\t\t       this->_M_in_beg + __buflen, __iend);\n-\t\t  if (__r == codecvt_base::ok)\n-\t\t    __ilen = __iend - this->_M_in_beg;\n-\t\t  else if (__r == codecvt_base::noconv)\n-\t\t    {\n-\t\t      traits_type::copy(this->_M_in_beg,\n- \t\t\t\t\treinterpret_cast<char_type*>(__buf), \n-\t\t\t\t\t__elen);\n- \t\t      __ilen = __elen;\n-\t\t    }\n-\t\t  else \n-\t\t    {\n-\t\t      // Unwind.\n-\t\t      __ilen = 0;\n-\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n-\t\t    }\n+\t\t  // Unwind.\n+\t\t  __ilen = 0;\n+\t\t  _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n \t\t}\n-\n-\t      if (__ilen > 0)\n-\t\t{\n-\t\t  _M_set_buffer(__ilen);\n-\t\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n-\t\t  if (__bump)\n-\t\t    _M_move_in_cur(1);\n-\t\t}\t   \t    \n \t    }\n-\t  else\n+\n+\t  if (__ilen > 0)\n \t    {\n-\t      // Unbuffered.\n-\t      char __buf;\n-\t      if (_M_file.xsgetn(&__buf, 1) > 0)\n-\t\t{\n-\t\t  if (__check_facet(_M_codecvt).always_noconv())\n-\t\t    {\n-\t\t      char_type* __cp = reinterpret_cast<char_type*>(&__buf);\n-\t\t      __ret = traits_type::to_int_type(*__cp);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      char_type __c;\t\t \n-\t\t      const char* __eend;\n-\t\t      char_type* __iend;\n-\t\t      codecvt_base::result __r;\n-\t\t      __r = _M_codecvt->in(_M_state_cur, &__buf, &__buf + 1, \n-\t\t\t\t\t   __eend, &__c, &__c + 1, __iend);\n-\t\t      if (__r == codecvt_base::ok \n-\t\t\t  || __r == codecvt_base::noconv)\n-\t\t\t__ret = traits_type::to_int_type(__c);\n-\t\t    }\n-\n-\t\t  // Need to put back this extracted character so that\n-\t\t  // sgetc will not advance the input stream iff\n-\t\t  // underflow, but cannot call pbackfail directly as\n-\t\t  // it calls underflow... which leads to a recursive\n-\t\t  // showdown.\n-\t\t  if (!__bump)\n-\t\t    {\n-\t\t      _M_create_pback();\n-\t\t      *this->_M_in_cur = traits_type::to_char_type(__ret); \n-\t\t    }\n-\t\t}\n-\t    }\n+\t      _M_set_buffer(__ilen);\n+\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t      if (__bump)\n+\t\t_M_move_in_cur(1);\n+\t    }\t   \t    \n \t}\n       _M_last_overflowed = false;\t\n       return __ret;\n@@ -467,7 +429,7 @@ namespace std\n     setbuf(char_type* __s, streamsize __n)\n     {\n       if (!this->is_open() && __s == 0 && __n == 0)\n-\tthis->_M_buf_size = 0;\n+\tthis->_M_buf_size = 1;\n       else if (__s && __n > 1)\n \t{\n \t  // This is implementation-defined behavior, and assumes that"}, {"sha": "5b76c40f9288c85d77f47eb8aa028d6ca27cef2d", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -48,12 +48,8 @@ namespace std\n       if (_M_in_cur < _M_in_end)\n \t{\n \t  char_type __c = *this->_M_in_cur;\n+\t  _M_move_in_cur(1);\n \t  __ret = traits_type::to_int_type(__c);\n-\t  \n-\t  if (_M_buf_size)\n-\t    _M_move_in_cur(1);\n-\t  else\n-\t    this->underflow();\n \t}\n       else \n \t__ret = this->uflow();"}, {"sha": "fe72e9d9b18f6d2cc1c547d900ee1652e8ff29fe", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -121,6 +121,15 @@ namespace std\n       */\n       char_type*\t\t_M_buf; \t\n \n+      /**\n+       *  @if maint\n+       *  Actual size of internal buffer. This number is equal to the size\n+       *  of the put area + 1 position, reserved for the overflow char of\n+       *  a full area.\n+       *  @endif\n+      */\n+      size_t\t\t\t_M_buf_size;\n+\n       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.\n       /**\n        *  @if maint\n@@ -206,6 +215,7 @@ namespace std\n       ~basic_filebuf()\n       {\n \tthis->close();\n+\t_M_buf_size = 0;\n \t_M_last_overflowed = false;\n       }\n \n@@ -429,17 +439,15 @@ namespace std\n       {\n  \tconst bool __testin = this->_M_mode & ios_base::in;\n  \tconst bool __testout = this->_M_mode & ios_base::out;\n-\tif (this->_M_buf_size)\n+\t\n+\tif (__testin)\n+\t  this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);\n+\tif (__testout && this->_M_buf_size > 1)\n \t  {\n-\t    if (__testin)\n-\t      this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);\n-\t    if (__testout)\n-\t      {\n-\t\tthis->setp(this->_M_buf, this->_M_buf + this->_M_buf_size - 1);\n-\t\tthis->_M_out_lim += __off;\n-\t      }\n-\t    _M_filepos = this->_M_buf + __off;\n+\t    this->setp(this->_M_buf, this->_M_buf + this->_M_buf_size - 1);\n+\t    this->_M_out_lim += __off;\n \t  }\n+\t_M_filepos = this->_M_buf + __off;\n       }\n     };\n "}, {"sha": "b39ff9267c3e8bf2f5be4602431db89777527146", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -195,15 +195,6 @@ namespace std\n       */\n       bool \t\t\t_M_buf_unified;\t\n \n-      /**\n-       *  @if maint\n-       *  Actual size of internal buffer. This number is equal to the size\n-       *  of the put area + 1 position, reserved for the overflow char of\n-       *  a full area.\n-       *  @endif\n-      */\n-      size_t\t\t\t_M_buf_size;\n-\n       /**\n        *  @if maint\n        *  Place to stash in || out || in | out settings for current streambuf.\n@@ -267,7 +258,6 @@ namespace std\n       ~basic_streambuf() \n       {\n \t_M_buf_unified = false;\n-\t_M_buf_size = 0;\n \t_M_mode = ios_base::openmode(0);\n       }\n \n@@ -468,8 +458,8 @@ namespace std\n       */\n       basic_streambuf()\n       : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), \n-      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),_M_out_lim(0), \n-      _M_buf_unified(false), _M_buf_size(BUFSIZ), \n+      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),\n+      _M_out_lim(0), _M_buf_unified(false), \n       _M_mode(ios_base::openmode(0)),_M_buf_locale(locale()) \n       { }\n "}, {"sha": "bd6e2055eff6a9483c0d165d9aee7e743026c160", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-in.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-in.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,92 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // in\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.open(name_01, ios::in);\n+    VERIFY( !fb_01.write_position() );\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sputbackc('/');\n+    VERIFY( c1 == c2 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == c2 );\n+    fb_01.sbumpc();\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == ' ' );\n+    c1 = fb_01.sgetc();\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c2 == 'a' );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == c2 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == c3 );\n+    fb_01.pubseekoff(5, ios_base::beg, ios_base::in);\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '0' );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '1' );\n+    c2 = fb_01.sputbackc('b');\n+    VERIFY( c2 == 'b' );\n+    fb_01.sbumpc();\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '1' );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '7' );\n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd1708ef9f7f8bf62022a96b571a71215aede9ea", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-io.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-io.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,99 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sputbackc_1io.tst\"; // empty file, need to create\n+\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+    strmsz_1 = fb_01.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+    strmsz_2 = fb_01.sputn(\", i wanna reach out and\", 10);\n+    c1 = fb_01.sgetc(); // -1\n+    c2 = fb_01.sputbackc('z');\n+    strmsz_2 = fb_01.in_avail();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    VERIFY( c1 != c3 );\n+    VERIFY( 1 == strmsz_2 );\n+    //test for _in_cur == _in_beg\n+    // fb_01._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n+    fb_01.pubseekoff(10, std::ios_base::beg, \n+\t\t   std::ios_base::in | std::ios_base::out);\n+    fb_01.sputc('m');\n+    strmsz_1 = fb_01.in_avail(); \n+    c1 = fb_01.sgetc(); \n+    fb_01.snextc();\n+    c2 = fb_01.sputbackc('z');  \n+    strmsz_2 = fb_01.in_avail(); \n+    c3 = fb_01.sgetc();  \n+    VERIFY( c1 != c2 );\n+    VERIFY( c3 == c2 );\n+    VERIFY( c1 != c3 );\n+    VERIFY( c2 == 'z' );\n+    // test for replacing char with identical one\n+    fb_01.snextc();\n+    fb_01.sputc('u');\n+    fb_01.sputc('v');\n+    fb_01.sputc('a');\n+    strmsz_1 = fb_01.in_avail();\n+    c2 = fb_01.sputbackc('a');\n+    strmsz_2 = fb_01.in_avail();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    VERIFY( strmsz_1 + 1 == strmsz_2 );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "78d3b790df68395592895d0ff118ce0bd9f95c2f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/1-out.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F1-out.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,70 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sputbackc_1out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // out\n+  {\n+    constraint_filebuf fb_01; // out\n+    fb_01.open(name_01, ios::out | ios::trunc);    \n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5deafbc7da758f22e5f0e0ba36532b53df8ea4a9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/2-in.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-in.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,92 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // in\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::in);\n+    VERIFY( fb_01.unbuffered() );\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sputbackc('/');\n+    VERIFY( c1 == c2 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == c2 );\n+    fb_01.sbumpc();\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == ' ' );\n+    c1 = fb_01.sgetc();\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c2 == 'a' );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == c2 );\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == c3 );\n+    fb_01.pubseekoff(5, ios_base::beg, ios_base::in);\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '0' );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '1' );\n+    c2 = fb_01.sputbackc('b');\n+    VERIFY( c2 == 'b' );\n+    fb_01.sbumpc();\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '1' );\n+    c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '7' );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fba448136299c1d54cd737bfa376c5b45000a663", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/2-io.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-io.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,98 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sputbackc_2io.tst\"; // empty file, need to create\n+\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_01;\n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_01.unbuffered() );\n+    strmsz_1 = fb_01.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+    strmsz_2 = fb_01.sputn(\", i wanna reach out and\", 10);\n+    c1 = fb_01.sgetc(); // -1\n+    c2 = fb_01.sputbackc('z');\n+    strmsz_2 = fb_01.in_avail();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    VERIFY( c1 != c3 );\n+    VERIFY( 1 == strmsz_2 );\n+    //test for _in_cur == _in_beg\n+    // fb_01._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n+    fb_01.pubseekoff(10, std::ios_base::beg, \n+\t\t   std::ios_base::in | std::ios_base::out);\n+    fb_01.sputc('m');\n+    strmsz_1 = fb_01.in_avail(); \n+    c1 = fb_01.sgetc(); \n+    fb_01.snextc();\n+    c2 = fb_01.sputbackc('z');  \n+    strmsz_2 = fb_01.in_avail(); \n+    c3 = fb_01.sgetc();  \n+    VERIFY( c1 != c2 );\n+    VERIFY( c3 == c2 );\n+    VERIFY( c1 != c3 );\n+    VERIFY( c2 == 'z' );\n+    // test for replacing char with identical one\n+    fb_01.snextc();\n+    fb_01.sputc('u');\n+    fb_01.sputc('v');\n+    fb_01.sputc('a');\n+    strmsz_1 = fb_01.in_avail();\n+    c2 = fb_01.sputbackc('a');\n+    strmsz_2 = fb_01.in_avail();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c3 == c2 );\n+    VERIFY( strmsz_1 == strmsz_2 );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "52f041d8af91a4cf409660984e9651042cd872d7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputbackc/char/2-out.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10eea7baea18ed271bb7a4571bc7fa42a51b9c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputbackc%2Fchar%2F2-out.cc?ref=f10eea7baea18ed271bb7a4571bc7fa42a51b9c0", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"tmp_sputbackc_2out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test01() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputbackc(char_type c)\n+  // if in_cur not avail || ! traits::eq(c, gptr() [-1]), return pbfail\n+  // otherwise decrements in_cur and returns *gptr()\n+\n+  // out\n+  {\n+    constraint_filebuf fb_01; // out\n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::out | ios::trunc);    \n+    VERIFY( fb_01.unbuffered() );\n+    VERIFY( !fb_01.read_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sputbackc('a');\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_01.unbuffered() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test01();\n+  return 0;\n+}"}]}