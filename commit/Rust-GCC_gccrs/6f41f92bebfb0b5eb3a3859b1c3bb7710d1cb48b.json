{"sha": "6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0MWY5MmJlYmZiMGI1ZWIzYTM4NTliMWMzYmI3NzEwZDFjYjQ4Yg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-07-18T19:36:01Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2018-07-18T19:36:01Z"}, "message": "re PR c/69558 (glib2 warning pragmas stopped working)\n\nlibcpp:\n2018-07-18  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR 69558\n        * macro.c (enter_macro_context): Change the location info for builtin\n        macros and _Pragma from location of the closing parenthesis to location\n        of the macro expansion point.\n\ntestsuite:\n2018-07-18  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR 69558\n        * c-c++-common/cpp/diagnostic-pragma-2.c: New test.\n        * c-c++-common/pr69558.c: Remove xfail.\n        * gcc.dg/cpp/builtin-macro-1.c: Adjust test expectations.\n        * gcc.dg/pr61817-1.c: Likewise.\n        * gcc.dg/pr61817-2.c: Likewise.\n        * g++.dg/plugin/pragma_plugin.c: Warn at expansion_point_location.\n\nFrom-SVN: r262861", "tree": {"sha": "2b8cce2b14c4b6bdf5c483562bfbf676ff3cab6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8cce2b14c4b6bdf5c483562bfbf676ff3cab6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6457b1f096d216ca742f8e1f2a93462ecb24b38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6457b1f096d216ca742f8e1f2a93462ecb24b38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6457b1f096d216ca742f8e1f2a93462ecb24b38d"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "37354f3724dafe69b1ef0278563d43abbb9bb418", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -1,3 +1,13 @@\n+2018-07-18  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR 69558\n+\t* c-c++-common/cpp/diagnostic-pragma-2.c: New test.\n+\t* c-c++-common/pr69558.c: Remove xfail.\n+\t* gcc.dg/cpp/builtin-macro-1.c: Adjust test expectations.\n+\t* gcc.dg/pr61817-1.c: Likewise.\n+\t* gcc.dg/pr61817-2.c: Likewise.\n+\t* g++.dg/plugin/pragma_plugin.c: Warn at expansion_point_location.\n+\n 2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/85599"}, {"sha": "1163bbee1bfef32336790b28e11cfb04535fd98d", "filename": "gcc/testsuite/c-c++-common/cpp/diagnostic-pragma-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdiagnostic-pragma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdiagnostic-pragma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fdiagnostic-pragma-2.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+#define B _Pragma(\"GCC diagnostic push\") \\\n+\t  _Pragma(\"GCC diagnostic ignored \\\"-Wattributes\\\"\")\n+#define E _Pragma(\"GCC diagnostic pop\")\n+\n+#define X() B int __attribute((unknown_attr)) x; E /* { dg-bogus \"attribute directive ignored\" } */\n+#define Y   B int __attribute((unknown_attr)) y; E /* { dg-bogus \"attribute directive ignored\" } */\n+\n+void test1(void)\n+{\n+    X()  /* { dg-bogus \"in expansion of macro\" } */\n+    Y    /* { dg-bogus \"in expansion of macro\" } */\n+}"}, {"sha": "a930653111751a1c4cdd0250453aa224d0cc0feb", "filename": "gcc/testsuite/c-c++-common/pr69558.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -11,9 +11,9 @@\n   _Pragma (\"GCC diagnostic pop\")\n #define C(x) \\\n   A \\\n-  static inline void bar (void) { x (); } /* { dg-bogus \"in definition of|deprecated\" \"\" { xfail { c++ } } } */ \\\n+  static inline void bar (void) { x (); } /* { dg-bogus \"in definition of|deprecated\" \"\" } */ \\\n   B\n \n-__attribute__((deprecated)) void foo (void); /* { dg-bogus \"declared here\" \"\" { xfail { c++ } } } */\n+__attribute__((deprecated)) void foo (void); /* { dg-bogus \"declared here\" \"\" } */\n \n C (foo) /* { dg-bogus \"is deprecated\" } */"}, {"sha": "d72842f799a1f9e25e39c5e5cb6519f96407fdbe", "filename": "gcc/testsuite/g++.dg/plugin/pragma_plugin.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -33,14 +33,15 @@ handle_pragma_sayhello (cpp_reader *dummy)\n     }\n   if (TREE_STRING_LENGTH (message) > 1)\n     {\n+      location_t loc = expansion_point_location (input_location);\n       if (cfun)\n-        warning (OPT_Wpragmas, \n-\t\t\"%<pragma GCCPLUGIN sayhello%> from function %qE: %s\",\n-\t\tcfun->decl, TREE_STRING_POINTER (message));\n+\twarning_at (loc, OPT_Wpragmas, \n+\t\t    \"%<pragma GCCPLUGIN sayhello%> from function %qE: %s\",\n+\t\t    cfun->decl, TREE_STRING_POINTER (message));\n       else\n-        warning (OPT_Wpragmas, \n-\t\t \"%<pragma GCCPLUGIN sayhello%> outside of function: %s\",\n-\t\t TREE_STRING_POINTER (message));\n+\twarning_at (loc, OPT_Wpragmas, \n+\t\t    \"%<pragma GCCPLUGIN sayhello%> outside of function: %s\",\n+\t\t    TREE_STRING_POINTER (message));\n     }\n }\n "}, {"sha": "0f950038d1bd52dfbc24b8b9369507c2adcbc97f", "filename": "gcc/testsuite/gcc.dg/cpp/builtin-macro-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbuiltin-macro-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbuiltin-macro-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbuiltin-macro-1.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -1,8 +1,8 @@\n /* Origin PR preprocessor/64803\n \n    This test ensures that the value the __LINE__ macro expands to is\n-   constant and corresponds to the line of the closing parenthesis of\n-   the top-most function-like macro expansion it's part of.\n+   constant and corresponds to the line of the macro expansion point\n+   the function-like macro expansion it's part of.\n \n    { dg-do run }\n    { do-options -no-integrated-cpp }  */\n@@ -19,8 +19,8 @@ main()\n   M(a\n     );\n \n-  assert(L20 == 20);\t\t/* 20 is the line number of the\n-\t\t\t\t   closing parenthesis of the\n+  assert(L19 == 19);\t\t/* 19 is the line number of the\n+\t\t\t\t   macro expansion point of the\n \t\t\t\t   invocation of the M macro.  Please\n \t\t\t\t   adjust in case the layout of this\n \t\t\t\t   file changes.  */"}, {"sha": "d58497fa89e07b6d142214ee3a5a87ba30614eec", "filename": "gcc/testsuite/gcc.dg/pr61817-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -14,6 +14,6 @@ enum {\n       )\n };\n \n-A(a == 15);\n-A(b == 15);\n-A(c == 15);\n+A(a == 10);\n+A(b == 10);\n+A(c == 10);"}, {"sha": "b7a860bd7dbefb0900b47b25442e1a7a26f095be", "filename": "gcc/testsuite/gcc.dg/pr61817-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -14,6 +14,6 @@ enum {\n       )\n };\n \n-A(a == 15);\n-A(b == 15);\n-A(c == 15);\n+A(a == 10);\n+A(b == 10);\n+A(c == 14);"}, {"sha": "c57d546e608c3c513b95602d0a7cf3bc906e949d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -1,3 +1,10 @@\n+2018-07-18  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR 69558\n+\t* macro.c (enter_macro_context): Change the location info for builtin\n+\tmacros and _Pragma from location of the closing parenthesis to location\n+\tof the macro expansion point.\n+\n 2018-07-17  Jason Franklin  <j_fra@fastmail.us>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "683f918145cd357d937b1c104bb3dcdbb1d560c9", "filename": "libcpp/macro.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=6f41f92bebfb0b5eb3a3859b1c3bb7710d1cb48b", "patch": "@@ -1410,29 +1410,25 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n   pfile->about_to_expand_macro_p = false;\n   /* Handle built-in macros and the _Pragma operator.  */\n   {\n-    source_location loc, expand_loc;\n+    source_location expand_loc;\n \n     if (/* The top-level macro invocation that triggered the expansion\n-\t   we are looking at is with a standard macro ...*/\n+\t   we are looking at is with a standard macro ...  */\n \t!(pfile->top_most_macro_node->flags & NODE_BUILTIN)\n-\t/* ... and it's a function-like macro invocation.  */\n-\t&& pfile->top_most_macro_node->value.macro->fun_like)\n-      {\n-\t/* Then the location of the end of the macro invocation is the\n-\t   location of the closing parenthesis.  */\n-\tloc = pfile->cur_token[-1].src_loc;\n-\texpand_loc = loc;\n-      }\n+\t/* ... and it's a function-like macro invocation,  */\n+\t&& pfile->top_most_macro_node->value.macro->fun_like\n+\t/* ... and we are tracking the macro expansion.  */\n+\t&& CPP_OPTION (pfile, track_macro_expansion))\n+      /* Then the location of the end of the macro invocation is the\n+\t location of the expansion point of this macro.  */\n+      expand_loc = location;\n     else\n-      {\n-\t/* Otherwise, the location of the end of the macro invocation is\n-\t   the location of the expansion point of that top-level macro\n-\t   invocation.  */\n-\tloc = location;\n-\texpand_loc = pfile->invocation_location;\n-      }\n+      /* Otherwise, the location of the end of the macro invocation is\n+\t the location of the expansion point of that top-level macro\n+\t invocation.  */\n+      expand_loc = pfile->invocation_location;\n \n-    return builtin_macro (pfile, node, loc, expand_loc);\n+    return builtin_macro (pfile, node, location, expand_loc);\n   }\n }\n "}]}