{"sha": "92e776e9971b9fc4e31fd0f23352809cb3680d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlNzc2ZTk5NzFiOWZjNGUzMWZkMGYyMzM1MjgwOWNiMzY4MGQzYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-23T14:36:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-23T14:36:02Z"}, "message": "re PR middle-end/57036 (ice in update_ssa_across_abnormal_edges)\n\n2013-04-23  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57036\n\t* tree-inline.c (copy_edges_for_bb): Add can_make_abnormal_goto\n\tparameter, only add abnormal goto edges from the copied body\n\tif the call could perform abnormal gotos.\n\t(copy_cfg_body): Adjust.\n\n\t* gcc.dg/torture/pr57036-1.c: New testcase.\n\t* gcc.dg/torture/pr57036-2.c: Likewise.\n\nFrom-SVN: r198192", "tree": {"sha": "875a3489ed6c6effaec734bac5a457d62d6807af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875a3489ed6c6effaec734bac5a457d62d6807af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e776e9971b9fc4e31fd0f23352809cb3680d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e776e9971b9fc4e31fd0f23352809cb3680d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e776e9971b9fc4e31fd0f23352809cb3680d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e776e9971b9fc4e31fd0f23352809cb3680d3a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a15ee567f234312ebc2b2bda8a8465d6a668e9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ee567f234312ebc2b2bda8a8465d6a668e9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15ee567f234312ebc2b2bda8a8465d6a668e9d1"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "ca931ae03749e6bfedb02da258f5b5477aeb9e8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92e776e9971b9fc4e31fd0f23352809cb3680d3a", "patch": "@@ -1,3 +1,11 @@\n+2013-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57036\n+\t* tree-inline.c (copy_edges_for_bb): Add can_make_abnormal_goto\n+\tparameter, only add abnormal goto edges from the copied body\n+\tif the call could perform abnormal gotos.\n+\t(copy_cfg_body): Adjust.\n+\n 2013-04-23  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add simd attribute."}, {"sha": "a9c869490c8ab7cc34215ba326dfcf40e60a68a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92e776e9971b9fc4e31fd0f23352809cb3680d3a", "patch": "@@ -1,3 +1,9 @@\n+2013-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57036\n+\t* gcc.dg/torture/pr57036-1.c: New testcase.\n+\t* gcc.dg/torture/pr57036-2.c: Likewise.\n+\n 2013-04-23  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* gcc.target/aarch64/scalar-mov.c: New testcase."}, {"sha": "5aa63bd7506ef222e38a4832845bc45d66d9fa9c", "filename": "gcc/testsuite/gcc.dg/torture/pr57036-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-1.c?ref=92e776e9971b9fc4e31fd0f23352809cb3680d3a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+extern void g (void);\n+extern __inline __attribute__ ((__always_inline__,__leaf__))\n+f ()\n+{\n+  g ();\n+}\n+struct __jmp_buf_tag *b;\n+int jpgDecode_convert (unsigned i)\n+{\n+  if (i != 0)\n+    f ();\n+  read_buf_open ();\n+  return _setjmp (b);\n+}"}, {"sha": "25de5cd1509f49c8ac217b7c77ed8620aa81a279", "filename": "gcc/testsuite/gcc.dg/torture/pr57036-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57036-2.c?ref=92e776e9971b9fc4e31fd0f23352809cb3680d3a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+int j_;\n+int jpgDecode_convert (unsigned i)\n+{\n+  __label__ label;\n+  int j;\n+\n+  inline void __attribute__((always_inline,leaf)) f(void)\n+    {\n+      g();\n+    }\n+\n+  void __attribute__((noinline)) read_buf_open (void)\n+    {\n+      goto label;\n+    }\n+\n+  if (i != 0)\n+    f ();\n+  j = j_;\n+  read_buf_open ();\n+label:\n+  return j;\n+}"}, {"sha": "7fa0245d16cced68f25fd8211892e88494218cd4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e776e9971b9fc4e31fd0f23352809cb3680d3a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=92e776e9971b9fc4e31fd0f23352809cb3680d3a", "patch": "@@ -1866,7 +1866,8 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n    debug stmts are left after a statement that must end the basic block.  */\n \n static bool\n-copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb)\n+copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb,\n+\t\t   bool can_make_abnormal_goto)\n {\n   basic_block new_bb = (basic_block) bb->aux;\n   edge_iterator ei;\n@@ -1921,7 +1922,11 @@ copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb)\n          into a COMPONENT_REF which doesn't.  If the copy\n          can throw, the original could also throw.  */\n       can_throw = stmt_can_throw_internal (copy_stmt);\n-      nonlocal_goto = stmt_can_make_abnormal_goto (copy_stmt);\n+      /* If the call we inline cannot make abnormal goto do not add\n+         additional abnormal edges but only retain those already present\n+\t in the original function body.  */\n+      nonlocal_goto\n+\t= can_make_abnormal_goto && stmt_can_make_abnormal_goto (copy_stmt);\n \n       if (can_throw || nonlocal_goto)\n \t{\n@@ -2270,10 +2275,13 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency_scale,\n   last = last_basic_block;\n \n   /* Now that we've duplicated the blocks, duplicate their edges.  */\n+  bool can_make_abormal_goto\n+    = id->gimple_call && stmt_can_make_abnormal_goto (id->gimple_call);\n   FOR_ALL_BB_FN (bb, cfun_to_copy)\n     if (!blocks_to_copy\n         || (bb->index > 0 && bitmap_bit_p (blocks_to_copy, bb->index)))\n-      need_debug_cleanup |= copy_edges_for_bb (bb, count_scale, exit_block_map);\n+      need_debug_cleanup |= copy_edges_for_bb (bb, count_scale, exit_block_map,\n+\t\t\t\t\t       can_make_abormal_goto);\n \n   if (new_entry)\n     {"}]}