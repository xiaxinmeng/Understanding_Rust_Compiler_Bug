{"sha": "7fa5296e5791829f1ef67de819e5188c58952d67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhNTI5NmU1NzkxODI5ZjFlZjY3ZGU4MTllNTE4OGM1ODk1MmQ2Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-06-17T12:16:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-06-17T12:16:19Z"}, "message": "expr.c (get_inner_reference): Use double_int for bit_offset calculation.\n\n2010-06-17  Richard Guenther  <rguenther@suse.de>\n\n\t* expr.c (get_inner_reference): Use double_int for bit_offset\n\tcalculation.\n\nFrom-SVN: r160902", "tree": {"sha": "4ce6cf48a166480c94364adc7d49b9c47824882d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce6cf48a166480c94364adc7d49b9c47824882d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fa5296e5791829f1ef67de819e5188c58952d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa5296e5791829f1ef67de819e5188c58952d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa5296e5791829f1ef67de819e5188c58952d67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa5296e5791829f1ef67de819e5188c58952d67/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4f73deb6c4d65a88e9c678aac9de2ac006d77ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f73deb6c4d65a88e9c678aac9de2ac006d77ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f73deb6c4d65a88e9c678aac9de2ac006d77ca"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "30c4dca091d5c8eecb4c9ef7a1e7baa164832cc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa5296e5791829f1ef67de819e5188c58952d67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa5296e5791829f1ef67de819e5188c58952d67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fa5296e5791829f1ef67de819e5188c58952d67", "patch": "@@ -1,3 +1,8 @@\n+2010-06-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* expr.c (get_inner_reference): Use double_int for bit_offset\n+\tcalculation.\n+\n 2010-06-16  DJ Delorie  <dj@redhat.com>\n \n \t* common.opt (-fstrict-volatile-bitfields): new."}, {"sha": "08efff7156fa6f835575616f84927149d9a54e21", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa5296e5791829f1ef67de819e5188c58952d67/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa5296e5791829f1ef67de819e5188c58952d67/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7fa5296e5791829f1ef67de819e5188c58952d67", "patch": "@@ -5984,7 +5984,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   enum machine_mode mode = VOIDmode;\n   bool blkmode_bitfield = false;\n   tree offset = size_zero_node;\n-  tree bit_offset = bitsize_zero_node;\n+  double_int bit_offset = double_int_zero;\n \n   /* First get the mode, signedness, and size.  We do this from just the\n      outermost expression.  */\n@@ -6045,8 +6045,9 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n       switch (TREE_CODE (exp))\n \t{\n \tcase BIT_FIELD_REF:\n-\t  bit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t   TREE_OPERAND (exp, 2));\n+\t  bit_offset\n+\t    = double_int_add (bit_offset,\n+\t\t\t      tree_to_double_int (TREE_OPERAND (exp, 2)));\n \t  break;\n \n \tcase COMPONENT_REF:\n@@ -6061,8 +6062,9 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t      break;\n \n \t    offset = size_binop (PLUS_EXPR, offset, this_offset);\n-\t    bit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t     DECL_FIELD_BIT_OFFSET (field));\n+\t    bit_offset = double_int_add (bit_offset,\n+\t\t\t\t\t tree_to_double_int\n+\t\t\t\t\t   (DECL_FIELD_BIT_OFFSET (field)));\n \n \t    /* ??? Right now we don't do anything with DECL_OFFSET_ALIGN.  */\n \t  }\n@@ -6094,8 +6096,8 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t  break;\n \n \tcase IMAGPART_EXPR:\n-\t  bit_offset = size_binop (PLUS_EXPR, bit_offset,\n-\t\t\t\t   bitsize_int (*pbitsize));\n+\t  bit_offset = double_int_add (bit_offset,\n+\t\t\t\t       uhwi_to_double_int (*pbitsize));\n \t  break;\n \n \tcase VIEW_CONVERT_EXPR:\n@@ -6126,9 +6128,11 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n      this conversion.  */\n   if (host_integerp (offset, 0))\n     {\n-      double_int tem = double_int_mul (tree_to_double_int (offset),\n-\t\t\t\t       uhwi_to_double_int (BITS_PER_UNIT));\n-      tem = double_int_add (tem, tree_to_double_int (bit_offset));\n+      double_int tem = double_int_lshift (tree_to_double_int (offset),\n+\t\t\t\t\t  BITS_PER_UNIT == 8\n+\t\t\t\t\t  ? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t\t\t  HOST_BITS_PER_DOUBLE_INT, true);\n+      tem = double_int_add (tem, bit_offset);\n       if (double_int_fits_in_shwi_p (tem))\n \t{\n \t  *pbitpos = double_int_to_shwi (tem);\n@@ -6139,7 +6143,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   /* Otherwise, split it up.  */\n   if (offset)\n     {\n-      *pbitpos = tree_low_cst (bit_offset, 0);\n+      *pbitpos = double_int_to_shwi (bit_offset);\n       *poffset = offset;\n     }\n "}]}