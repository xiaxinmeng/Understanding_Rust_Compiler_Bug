{"sha": "765b3379354e3018b5440693625f8aace232f44a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1YjMzNzkzNTRlMzAxOGI1NDQwNjkzNjI1ZjhhYWNlMjMyZjQ0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-21T12:26:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-21T12:26:34Z"}, "message": "re PR sanitizer/81715 (asan-stack=1 redzone allocation is too inflexible)\n\n\tPR sanitizer/81715\n\t* tree-inline.c (expand_call_inline): Emit clobber stmts for\n\tVAR_DECLs to which addressable non-volatile parameters are mapped\n\tand for id->retvar after the return value assignment.  Clear\n\tid->retval and id->retbnd after inlining.\n\n\t* g++.dg/tree-ssa/pr8781.C (noop): Change argument type from\n\tconst predicate to const predicate & to avoid UB.\n\t* g++.dg/opt/pr81715.C: New test.\n\nFrom-SVN: r253065", "tree": {"sha": "e299dda2a3c3c6838ec7d26db09180193bb65a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e299dda2a3c3c6838ec7d26db09180193bb65a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765b3379354e3018b5440693625f8aace232f44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765b3379354e3018b5440693625f8aace232f44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765b3379354e3018b5440693625f8aace232f44a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765b3379354e3018b5440693625f8aace232f44a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c94f2d84e51b39f4f90c3cb3bf3c0d056080bc57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94f2d84e51b39f4f90c3cb3bf3c0d056080bc57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94f2d84e51b39f4f90c3cb3bf3c0d056080bc57"}], "stats": {"total": 107, "additions": 105, "deletions": 2}, "files": [{"sha": "c743c21f9e8a24e007a29e6ba3fb7a7d047b8e4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765b3379354e3018b5440693625f8aace232f44a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765b3379354e3018b5440693625f8aace232f44a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=765b3379354e3018b5440693625f8aace232f44a", "patch": "@@ -1,3 +1,11 @@\n+2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81715\n+\t* tree-inline.c (expand_call_inline): Emit clobber stmts for\n+\tVAR_DECLs to which addressable non-volatile parameters are mapped\n+\tand for id->retvar after the return value assignment.  Clear\n+\tid->retval and id->retbnd after inlining.\n+\n 2017-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82276"}, {"sha": "1c241b921daf53ffd82ec5be1ca302079a658ac3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=765b3379354e3018b5440693625f8aace232f44a", "patch": "@@ -1,3 +1,10 @@\n+2017-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81715\n+\t* g++.dg/tree-ssa/pr8781.C (noop): Change argument type from\n+\tconst predicate to const predicate & to avoid UB.\n+\t* g++.dg/opt/pr81715.C: New test.\n+\n 2017-09-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82276"}, {"sha": "c38b22b7daa791456f368c0ab4c5411326dda452", "filename": "gcc/testsuite/g++.dg/opt/pr81715.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr81715.C?ref=765b3379354e3018b5440693625f8aace232f44a", "patch": "@@ -0,0 +1,36 @@\n+// PR sanitizer/81715\n+// { dg-do compile }\n+// Verify the variables for inlined foo parameters are reused\n+// { dg-options \"-O2 -Wframe-larger-than=16384\" }\n+\n+struct S { int a, b, c, d, e; char f[1024]; };\n+void baz (int *, int *, int *, struct S *, int *, int *);\n+\n+static inline struct S\n+foo (int a, int b, int c, struct S d, int e, int f)\n+{\n+  struct S s;\n+  baz (&a, &b, &c, &d, &e, &f);\n+  s = d;\n+  return s;\n+}\n+\n+struct S g[64];\n+\n+void\n+bar (int a, int b, int c, struct S d, int e, int f)\n+{\n+#define A(N) \\\n+  g[N+0] = foo (a, b, c, d, e, f);\t\\\n+  g[N+1] = foo (a, b, c, d, e, f);\t\\\n+  g[N+2] = foo (a, b, c, d, e, f);\t\\\n+  g[N+3] = foo (a, b, c, d, e, f);\t\\\n+  g[N+4] = foo (a, b, c, d, e, f);\t\\\n+  g[N+5] = foo (a, b, c, d, e, f);\t\\\n+  g[N+6] = foo (a, b, c, d, e, f);\t\\\n+  g[N+7] = foo (a, b, c, d, e, f);\t\\\n+  foo (a, b, c, d, e, f);\t\t\\\n+  foo (a, b, c, d, e, f)\n+  A(0); A(8); A(16); A(24);\n+  A(32); A(40); A(48); A(56);\n+}"}, {"sha": "1f115b2b26d10075bb7358c470c6036eeebe0823", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr8781.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C?ref=765b3379354e3018b5440693625f8aace232f44a", "patch": "@@ -13,7 +13,7 @@ public:\n };\n \n template<typename predicate>\n-inline noop_t<predicate> noop(const predicate pred) {\n+inline noop_t<predicate> noop(const predicate &pred) {\n     return noop_t<predicate>(pred);\n }\n "}, {"sha": "a226096504f2d3575a6c6ba1a2a24c79e1fbd2db", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765b3379354e3018b5440693625f8aace232f44a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=765b3379354e3018b5440693625f8aace232f44a", "patch": "@@ -4796,6 +4796,22 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \n   reset_debug_bindings (id, stmt_gsi);\n \n+  if (flag_stack_reuse != SR_NONE)\n+    for (tree p = DECL_ARGUMENTS (id->src_fn); p; p = DECL_CHAIN (p))\n+      if (!TREE_THIS_VOLATILE (p))\n+\t{\n+\t  tree *varp = id->decl_map->get (p);\n+\t  if (varp && VAR_P (*varp) && !is_gimple_reg (*varp))\n+\t    {\n+\t      tree clobber = build_constructor (TREE_TYPE (*varp), NULL);\n+\t      gimple *clobber_stmt;\n+\t      TREE_THIS_VOLATILE (clobber) = 1;\n+\t      clobber_stmt = gimple_build_assign (*varp, clobber);\n+\t      gimple_set_location (clobber_stmt, gimple_location (stmt));\n+\t      gsi_insert_before (&stmt_gsi, clobber_stmt, GSI_SAME_STMT);\n+\t    }\n+\t}\n+\n   /* Reset the escaped solution.  */\n   if (cfun->gimple_df)\n     pt_solution_reset (&cfun->gimple_df->escaped);\n@@ -4846,6 +4862,23 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       stmt = gimple_build_assign (gimple_call_lhs (stmt), use_retvar);\n       gsi_replace (&stmt_gsi, stmt, false);\n       maybe_clean_or_replace_eh_stmt (old_stmt, stmt);\n+      /* Append a clobber for id->retvar if easily possible.  */\n+      if (flag_stack_reuse != SR_NONE\n+\t  && id->retvar\n+\t  && VAR_P (id->retvar)\n+\t  && id->retvar != return_slot\n+\t  && id->retvar != modify_dest\n+\t  && !TREE_THIS_VOLATILE (id->retvar)\n+\t  && !is_gimple_reg (id->retvar)\n+\t  && !stmt_ends_bb_p (stmt))\n+\t{\n+\t  tree clobber = build_constructor (TREE_TYPE (id->retvar), NULL);\n+\t  gimple *clobber_stmt;\n+\t  TREE_THIS_VOLATILE (clobber) = 1;\n+\t  clobber_stmt = gimple_build_assign (id->retvar, clobber);\n+\t  gimple_set_location (clobber_stmt, gimple_location (old_stmt));\n+\t  gsi_insert_after (&stmt_gsi, clobber_stmt, GSI_SAME_STMT);\n+\t}\n \n       /* Copy bounds if we copy structure with bounds.  */\n       if (chkp_function_instrumented_p (id->dst_fn)\n@@ -4884,8 +4917,25 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t      SSA_NAME_DEF_STMT (name) = gimple_build_nop ();\n \t    }\n \t}\n+      /* Replace with a clobber for id->retvar.  */\n+      else if (flag_stack_reuse != SR_NONE\n+\t       && id->retvar\n+\t       && VAR_P (id->retvar)\n+\t       && id->retvar != return_slot\n+\t       && id->retvar != modify_dest\n+\t       && !TREE_THIS_VOLATILE (id->retvar)\n+\t       && !is_gimple_reg (id->retvar))\n+\t{\n+\t  tree clobber = build_constructor (TREE_TYPE (id->retvar), NULL);\n+\t  gimple *clobber_stmt;\n+\t  TREE_THIS_VOLATILE (clobber) = 1;\n+\t  clobber_stmt = gimple_build_assign (id->retvar, clobber);\n+\t  gimple_set_location (clobber_stmt, gimple_location (stmt));\n+\t  gsi_replace (&stmt_gsi, clobber_stmt, false);\n+\t  maybe_clean_or_replace_eh_stmt (stmt, clobber_stmt);\n+\t}\n       else\n-        gsi_remove (&stmt_gsi, true);\n+\tgsi_remove (&stmt_gsi, true);\n     }\n \n   /* Put returned bounds into the correct place if required.  */\n@@ -4934,6 +4984,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   cg_edge->callee->remove ();\n \n   id->block = NULL_TREE;\n+  id->retvar = NULL_TREE;\n+  id->retbnd = NULL_TREE;\n   successfully_inlined = true;\n \n  egress:"}]}