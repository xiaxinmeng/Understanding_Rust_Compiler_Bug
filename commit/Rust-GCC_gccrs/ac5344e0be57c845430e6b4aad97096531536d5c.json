{"sha": "ac5344e0be57c845430e6b4aad97096531536d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1MzQ0ZTBiZTU3Yzg0NTQzMGU2YjRhYWQ5NzA5NjUzMTUzNmQ1Yw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:52:52Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:52:52Z"}, "message": "tree-ssa-loop-ivopts.c (allow_ip_end_pos_p): Refine comments.\n\n\t* tree-ssa-loop-ivopts.c (allow_ip_end_pos_p): Refine comments.\n\t(get_shiftadd_cost): Ditto.\n\nFrom-SVN: r247895", "tree": {"sha": "b5ad6f3bdbc712dfeff6cf7dced8452c0c7674a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ad6f3bdbc712dfeff6cf7dced8452c0c7674a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5344e0be57c845430e6b4aad97096531536d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5344e0be57c845430e6b4aad97096531536d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5344e0be57c845430e6b4aad97096531536d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5344e0be57c845430e6b4aad97096531536d5c/comments", "author": null, "committer": null, "parents": [{"sha": "7a89b97a018b688cf2fdd9f023b81d8a85277648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a89b97a018b688cf2fdd9f023b81d8a85277648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a89b97a018b688cf2fdd9f023b81d8a85277648"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "4f8a7b3c35c9e9024a2410d5644590e428979724", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5344e0be57c845430e6b4aad97096531536d5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5344e0be57c845430e6b4aad97096531536d5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac5344e0be57c845430e6b4aad97096531536d5c", "patch": "@@ -1,3 +1,8 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (allow_ip_end_pos_p): Refine comments.\n+\t(get_shiftadd_cost): Ditto.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-address.c: Include header file."}, {"sha": "d8032c85fa0c7d075edb21cd509b910b89d31551", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5344e0be57c845430e6b4aad97096531536d5c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5344e0be57c845430e6b4aad97096531536d5c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ac5344e0be57c845430e6b4aad97096531536d5c", "patch": "@@ -3108,9 +3108,9 @@ add_candidate_1 (struct ivopts_data *data,\n \n    The purpose is to avoid splitting latch edge with a biv increment, thus\n    creating a jump, possibly confusing other optimization passes and leaving\n-   less freedom to scheduler.  So we allow IP_END_POS only if IP_NORMAL_POS\n-   is not available (so we do not have a better alternative), or if the latch\n-   edge is already nonempty.  */\n+   less freedom to scheduler.  So we allow IP_END only if IP_NORMAL is not\n+   available (so we do not have a better alternative), or if the latch edge\n+   is already nonempty.  */\n \n static bool\n allow_ip_end_pos_p (struct loop *loop)\n@@ -3955,10 +3955,10 @@ adjust_setup_cost (struct ivopts_data *data, unsigned cost,\n     return cost;\n }\n \n- /* Calculate the SPEED or size cost of shiftadd EXPR in MODE.  MULT is the\n-    EXPR operand holding the shift.  COST0 and COST1 are the costs for\n-    calculating the operands of EXPR.  Returns true if successful, and returns\n-    the cost in COST.  */\n+/* Calculate the SPEED or size cost of shiftadd EXPR in MODE.  MULT is the\n+   EXPR operand holding the shift.  COST0 and COST1 are the costs for\n+   calculating the operands of EXPR.  Returns true if successful, and returns\n+   the cost in COST.  */\n \n static bool\n get_shiftadd_cost (tree expr, machine_mode mode, comp_cost cost0,"}]}