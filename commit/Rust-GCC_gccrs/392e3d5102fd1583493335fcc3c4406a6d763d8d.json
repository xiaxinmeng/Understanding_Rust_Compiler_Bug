{"sha": "392e3d5102fd1583493335fcc3c4406a6d763d8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyZTNkNTEwMmZkMTU4MzQ5MzMzNWZjYzNjNDQwNmE2ZDc2M2Q4ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-05-27T23:17:21Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-05-27T23:17:21Z"}, "message": "cp-tree.def (UNARY_PLUS_EXPR): New C++ unary tree code.\n\n\n\t* cp-tree.def (UNARY_PLUS_EXPR): New C++ unary tree code.\n\t* parser.c (cp_parser_unary_expression): Use UNARY_PLUS_EXPR instead\n\tof CONVERT_EXPR.\n\t(cp_parser_unary_expression): Likewise.\n\t* typeck.c (build_unary_op): Likewise.\n\t* call.c (add_builtin_candidate, build_new_op): Likewise.\n\t* error.c (dump_expr): Likewise.\n\t* pt.c (tsubst_copy, tsubst_copy_and_build): Likewise.\n\t* decl.c (ambi_op_p, grok_op_properties): Likewise.\n\t* dump.c (dump_op): Likewise.\n\t* lex.c (init_operators): Likewise.\n\t* operators.def (\"+\"): Likewise.\n\t* cp-gimplify.c (cp_gimplify_expr): Handle UNARY_PLUS_EXPR like a\n\tconversion, if the result and argument types differ.\n\t* tree.c (fold_if_not_in_template): Fold UNARY_PLUS_EXPR much\n\tlike a NOP_EXPR when !processing_template_decl.\n\n\t* cxx-pretty-print.c (pp_cxx_cast_expression): Prototype.\n\t(pp_cxx_unary_expression): Handle new UNARY_PLUS_EXPR tree code.\n\nCo-Authored-By: Giovanni Bajo <giovannibajo@gcc.gnu.org>\n\nFrom-SVN: r100285", "tree": {"sha": "2be222dfe287de45827c33a8493952cbc0dfb261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be222dfe287de45827c33a8493952cbc0dfb261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392e3d5102fd1583493335fcc3c4406a6d763d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392e3d5102fd1583493335fcc3c4406a6d763d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392e3d5102fd1583493335fcc3c4406a6d763d8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392e3d5102fd1583493335fcc3c4406a6d763d8d/comments", "author": null, "committer": null, "parents": [{"sha": "99a3237ac34b2384180f1ebc0c7d46f9c9e22a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a3237ac34b2384180f1ebc0c7d46f9c9e22a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a3237ac34b2384180f1ebc0c7d46f9c9e22a3e"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "29bd60037f501ffab3deeae7701596c550f60f88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -1,3 +1,26 @@\n+2005-05-27  Roger Sayle  <roger@eyesopen.com>\n+\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* cp-tree.def (UNARY_PLUS_EXPR): New C++ unary tree code.\n+\t* parser.c (cp_parser_unary_expression): Use UNARY_PLUS_EXPR instead\n+\tof CONVERT_EXPR.\n+\t(cp_parser_unary_expression): Likewise.\n+\t* typeck.c (build_unary_op): Likewise.\n+\t* call.c (add_builtin_candidate, build_new_op): Likewise.\n+\t* error.c (dump_expr): Likewise.\n+\t* pt.c (tsubst_copy, tsubst_copy_and_build): Likewise.\n+\t* decl.c (ambi_op_p, grok_op_properties): Likewise.\n+\t* dump.c (dump_op): Likewise.\n+\t* lex.c (init_operators): Likewise.\n+\t* operators.def (\"+\"): Likewise.\n+\t* cp-gimplify.c (cp_gimplify_expr): Handle UNARY_PLUS_EXPR like a\n+\tconversion, if the result and argument types differ.\n+\t* tree.c (fold_if_not_in_template): Fold UNARY_PLUS_EXPR much\n+\tlike a NOP_EXPR when !processing_template_decl.\n+\n+\t* cxx-pretty-print.c (pp_cxx_cast_expression): Prototype.\n+\t(pp_cxx_unary_expression): Handle new UNARY_PLUS_EXPR tree code.\n+\n 2005-05-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21455"}, {"sha": "01d4046e0bf069da6f220fc802ca90e52f696556", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -1652,7 +1652,7 @@ add_builtin_candidate (struct z_candidate **candidates, enum tree_code code,\n \t     T       operator+(T);\n \t     T       operator-(T);  */\n \n-    case CONVERT_EXPR: /* unary + */\n+    case UNARY_PLUS_EXPR: /* unary + */\n       if (TREE_CODE (type1) == POINTER_TYPE)\n \tbreak;\n     case NEGATE_EXPR:\n@@ -3848,7 +3848,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case TRUTH_ORIF_EXPR:\n       return cp_build_binary_op (code, arg1, arg2);\n \n-    case CONVERT_EXPR:\n+    case UNARY_PLUS_EXPR:\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:"}, {"sha": "4ad30b98008c7d16450e0650041f63ea4690466c", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -557,6 +557,16 @@ cp_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       ret = GS_OK;\n       break;\n \n+    case UNARY_PLUS_EXPR:\n+      {\n+\ttree arg = TREE_OPERAND (*expr_p, 0);\n+\ttree type = TREE_TYPE (*expr_p);\n+\t*expr_p = (TREE_TYPE (arg) != type) ? fold_convert (type, arg)\n+\t\t\t\t\t    : arg;\n+\tret = GS_OK;\n+      }\n+      break;\n+\n     default:\n       ret = c_gimplify_expr (expr_p, pre_p, post_p);\n       break;"}, {"sha": "c42dbfbf7c016fec113cffd44ff1f6b22007d47e", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -340,6 +340,10 @@ DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", tcc_unary, 1)\n    STMT_EXPR_STMT is the statement given by the expression.  */\n DEFTREECODE (STMT_EXPR, \"stmt_expr\", tcc_expression, 1)\n \n+/* Unary plus. Operand 0 is the expression to which the unary plus\n+   is applied.  */\n+DEFTREECODE (UNARY_PLUS_EXPR, \"unary_plus_expr\", tcc_unary, 1)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "afa969f9f710f4d4ef4e7737622ba14cfced958c", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -43,6 +43,7 @@ static void pp_cxx_parameter_declaration_clause (cxx_pretty_printer *, tree);\n static void pp_cxx_abstract_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_statement (cxx_pretty_printer *, tree);\n static void pp_cxx_template_parameter (cxx_pretty_printer *, tree);\n+static void pp_cxx_cast_expression (cxx_pretty_printer *, tree);\n \f\n \n static inline void\n@@ -640,6 +641,11 @@ pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n \tpp_unary_expression (pp, TREE_OPERAND (t, 0));\n       break;\n \n+    case UNARY_PLUS_EXPR:\n+      pp_plus (pp);\n+      pp_cxx_cast_expression (pp, TREE_OPERAND (t, 0));\n+      break;\n+\n     default:\n       pp_c_unary_expression (pp_c_base (pp), t);\n       break;"}, {"sha": "7f919d5c99b2bf4872d64e1c6ff9199394db2a4a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -8586,7 +8586,7 @@ ambi_op_p (enum tree_code code)\n {\n   return (code == INDIRECT_REF\n \t  || code == ADDR_EXPR\n-\t  || code == CONVERT_EXPR\n+\t  || code == UNARY_PLUS_EXPR\n \t  || code == NEGATE_EXPR\n \t  || code == PREINCREMENT_EXPR\n \t  || code == PREDECREMENT_EXPR);\n@@ -8806,7 +8806,7 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t\t  operator_code = BIT_AND_EXPR;\n \t\t  break;\n \n-\t\tcase CONVERT_EXPR:\n+\t\tcase UNARY_PLUS_EXPR:\n \t\t  operator_code = PLUS_EXPR;\n \t\t  break;\n "}, {"sha": "daf55952c537058efedcdb06c3c2a78775f9bab7", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -65,7 +65,7 @@ dump_op (dump_info_p di, tree t)\n     case VEC_DELETE_EXPR:\n       dump_string (di, \"vecdelete\");\n       break;\n-    case CONVERT_EXPR:\n+    case UNARY_PLUS_EXPR:\n       dump_string (di, \"pos\");\n       break;\n     case NEGATE_EXPR:"}, {"sha": "8eab229269675be69c23c62a482dba14eb52e159", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -1511,7 +1511,7 @@ dump_expr (tree t, int flags)\n       pp_cxx_right_bracket (cxx_pp);\n       break;\n \n-    case CONVERT_EXPR:\n+    case UNARY_PLUS_EXPR:\n       if (TREE_TYPE (t) && VOID_TYPE_P (TREE_TYPE (t)))\n \t{\n \t  pp_cxx_left_paren (cxx_pp);"}, {"sha": "7e891860306e8bc8b77784cfaa85825d4ab821c1", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -145,7 +145,7 @@ init_operators (void)\n   operator_name_info [(int) TRUTH_AND_EXPR].name = \"strict &&\";\n   operator_name_info [(int) TRUTH_OR_EXPR].name = \"strict ||\";\n   operator_name_info [(int) RANGE_EXPR].name = \"...\";\n-  operator_name_info [(int) CONVERT_EXPR].name = \"+\";\n+  operator_name_info [(int) UNARY_PLUS_EXPR].name = \"+\";\n \n   assignment_operator_name_info [(int) EXACT_DIV_EXPR].name\n     = \"(exact /=)\";"}, {"sha": "19c1b6f9c70dab18e0ff54acc071fda3e8a843c8", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -84,7 +84,7 @@ DEF_SIMPLE_OPERATOR (\"delete\", DELETE_EXPR, \"dl\", -1)\n DEF_SIMPLE_OPERATOR (\"delete []\", VEC_DELETE_EXPR, \"da\", -1)\n \n /* Unary operators.  */\n-DEF_SIMPLE_OPERATOR (\"+\", CONVERT_EXPR, \"ps\", 1)\n+DEF_SIMPLE_OPERATOR (\"+\", UNARY_PLUS_EXPR, \"ps\", 1)\n DEF_SIMPLE_OPERATOR (\"-\", NEGATE_EXPR, \"ng\", 1)\n DEF_SIMPLE_OPERATOR (\"&\", ADDR_EXPR, \"ad\", 1)\n DEF_SIMPLE_OPERATOR (\"*\", INDIRECT_REF, \"de\", 1)"}, {"sha": "27c1751cb02afce13f0a80a43202dd2809643c51", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -4873,7 +4873,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p)\n \t  non_constant_p = (unary_operator == PREINCREMENT_EXPR\n \t\t\t    ? \"`++'\" : \"`--'\");\n \t  /* Fall through.  */\n-\tcase CONVERT_EXPR:\n+\tcase UNARY_PLUS_EXPR:\n \tcase NEGATE_EXPR:\n \tcase TRUTH_NOT_EXPR:\n \t  expression = finish_unary_op_expr (unary_operator, cast_expression);\n@@ -4909,7 +4909,7 @@ cp_parser_unary_operator (cp_token* token)\n       return ADDR_EXPR;\n \n     case CPP_PLUS:\n-      return CONVERT_EXPR;\n+      return UNARY_PLUS_EXPR;\n \n     case CPP_MINUS:\n       return NEGATE_EXPR;"}, {"sha": "8a0a430add26b789f1a58f6aa24cbc49fd6c814d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -7784,7 +7784,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case TRUTH_NOT_EXPR:\n     case BIT_NOT_EXPR:\n     case ADDR_EXPR:\n-    case CONVERT_EXPR:      /* Unary + */\n+    case UNARY_PLUS_EXPR:      /* Unary + */\n     case SIZEOF_EXPR:\n     case ALIGNOF_EXPR:\n     case ARROW_EXPR:\n@@ -8465,7 +8465,7 @@ tsubst_copy_and_build (tree t,\n     case BIT_NOT_EXPR:\n     case ABS_EXPR:\n     case TRUTH_NOT_EXPR:\n-    case CONVERT_EXPR:  /* Unary + */\n+    case UNARY_PLUS_EXPR:  /* Unary + */\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       return build_x_unary_op (TREE_CODE (t), RECUR (TREE_OPERAND (t, 0)));"}, {"sha": "8ef383c30eeaf8f890120568f383b18837787293", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -2268,7 +2268,14 @@ fold_if_not_in_template (tree expr)\n      \"fold\".  We will call fold later when actually instantiating the\n      template.  Integral constant expressions in templates will be\n      evaluated via fold_non_dependent_expr, as necessary.  */\n-  return (processing_template_decl ? expr : fold (expr));\n+  if (processing_template_decl)\n+    return expr;\n+\n+  /* Fold C++ front-end specific tree codes.  */\n+  if (TREE_CODE (expr) == UNARY_PLUS_EXPR)\n+    return fold_convert (TREE_TYPE (expr), TREE_OPERAND (expr, 0));\n+\n+  return fold (expr);\n }\n \n \f"}, {"sha": "464b8efd3fa2dd6854f02bc88f74f196508801b7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392e3d5102fd1583493335fcc3c4406a6d763d8d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=392e3d5102fd1583493335fcc3c4406a6d763d8d", "patch": "@@ -3692,13 +3692,12 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \n   switch (code)\n     {\n-    /* CONVERT_EXPR stands for unary plus in this context.  */\n-    case CONVERT_EXPR:\n+    case UNARY_PLUS_EXPR:\n     case NEGATE_EXPR:\n       {\n \tint flags = WANT_ARITH | WANT_ENUM;\n \t/* Unary plus (but not unary minus) is allowed on pointers.  */\n-\tif (code == CONVERT_EXPR)\n+\tif (code == UNARY_PLUS_EXPR)\n \t  flags |= WANT_POINTER;\n \targ = build_expr_type_conversion (flags, arg, true);\n \tif (!arg)"}]}