{"sha": "119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5ZDBjMzZhNmIyZjM2YmQzYjNkYjVjOGM1YzQ4NjAxNjc2N2UyNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-04-17T19:11:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-04-17T19:11:28Z"}, "message": "(process_pragma): Take the IDENTIFIER_POINTER tree\nnode instead of a character.\n\nFrom-SVN: r11840", "tree": {"sha": "c4067d3f31246f1af37f35bb83d80094b4696572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4067d3f31246f1af37f35bb83d80094b4696572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/comments", "author": null, "committer": null, "parents": [{"sha": "86d086ba048ec54762c1cb69589518e9db0e9651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d086ba048ec54762c1cb69589518e9db0e9651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d086ba048ec54762c1cb69589518e9db0e9651"}], "stats": {"total": 116, "additions": 54, "deletions": 62}, "files": [{"sha": "1399dc1f4055fc803092a939d641b6eb9001fac4", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "patch": "@@ -90,28 +90,29 @@ static int ret_label = 0;\n    intel compilers understand.  */\n \n int\n-process_pragma (finput, c)\n+process_pragma (finput, t)\n      FILE *finput;\n-     int c;\n+     tree t;\n {\n   int i;\n+  register int c;\n+  register char *pname;\n \n-  while (c == ' ' || c == '\\t')\n-    c = getc (finput);\n+  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+    return 0;\n+\n+  pname = IDENTIFIER_POINTER (t);\n \n-  if (c == 'a'\n-      && getc (finput) == 'l'\n-      && getc (finput) == 'i'\n-      && getc (finput) == 'g'\n-      && getc (finput) == 'n'\n-      && ((c = getc (finput)) == ' ' || c == '\\t' || c == '\\n'))\n+  if (strcmp (pname, \"align\") == 0)\n     {\n       char buf[20];\n       char *s = buf;\n       int align;\n \n-      while (c == ' ' || c == '\\t')\n+      do {\n \tc = getc (finput);\n+      } while (c == ' ' || c == '\\t');\n+\n       if (c == '(')\n \tc = getc (finput);\n       while (c >= '0' && c <= '9')\n@@ -157,13 +158,13 @@ process_pragma (finput, c)\n \t - missing identifier means next struct\n \n \t - alignment rules for bitfields need more investigation  */\n+\n+      return 1;\n     }\n \n   /* Should be pragma 'far' or equivalent for callx/balx here.  */\n \n-  while (c != '\\n' && c != EOF)\n-    c = getc (finput);\n-  return c;\n+  return 0;\n }\n \n /* Initialize variables before compiling any files.  */"}, {"sha": "3d6286dcb6b45813b6a1a25151d19d1f293cfcd0", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "patch": "@@ -18,6 +18,8 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#include <tree.h>\n+\n /* Make everything that used to go in the text section really go there.  */\n \n int flag_no_mach_text_sections = 0;\n@@ -37,15 +39,15 @@ extern char *get_directive_line ();\n /* Called from check_newline via the macro HANDLE_PRAGMA.\n    FINPUT is the source file input stream.\n    CH is the first character after `#pragma'.\n-   The result is the terminating character ('\\n' or EOF).  */\n+   The result is 1 if the pragma was handled.  */\n \n int\n-handle_pragma (finput, ch, get_line_function)\n+handle_pragma (finput, node)\n      FILE *finput;\n-     int ch;\n-     char *(*get_line_function) ();\n+     tree node;\n {\n-  register char *p;\n+  int retval = 0;\n+  register char *pname;\n \n   /* Record initial setting of optimize flag, so we can restore it.  */\n   if (!pragma_initialized)\n@@ -54,22 +56,24 @@ handle_pragma (finput, ch, get_line_function)\n       initial_optimize_flag = optimize;\n     }\n \n-  /* Nothing to do if #pragma is by itself.  */\n-  if (ch == '\\n' || ch == EOF)\n-    return ch;\n+  if (TREE_CODE (node) != IDENTIFIER_NODE)\n+    return 0;\n+\n+  pname = IDENTIFIER_POINTER (node);\n \n-  p = (*get_line_function) (finput);\n-  if (OPT_STRCMP (\"CC_OPT_ON\"))\n+  if (strcmp (pname, \"CC_OPT_ON\") == 0)\n     {\n       optimize = 1, obey_regdecls = 0;\n       warning (\"optimization turned on\");\n+      retval = 1;\n     }\n-  else if (OPT_STRCMP (\"CC_OPT_OFF\"))\n+  else if (strcmp (pname, \"CC_OPT_OFF\") == 0)\n     {\n       optimize = 0, obey_regdecls = 1;\n       warning (\"optimization turned off\");\n+      retval = 1;\n     }\n-  else if (OPT_STRCMP (\"CC_OPT_RESTORE\"))\n+  else if (strcmp (pname, \"CC_OPT_RESTORE\") == 0)\n     {\n       extern int initial_optimize_flag;\n \n@@ -82,14 +86,14 @@ handle_pragma (finput, ch, get_line_function)\n \t  optimize = initial_optimize_flag;\n \t}\n       warning (\"optimization level restored\");\n+      retval = 1;\n     }\n-  else if (OPT_STRCMP (\"CC_WRITABLE_STRINGS\"))\n-    flag_writable_strings = 1;\n-  else if (OPT_STRCMP (\"CC_NON_WRITABLE_STRINGS\"))\n-    flag_writable_strings = 0;\n-  else if (OPT_STRCMP (\"CC_NO_MACH_TEXT_SECTIONS\"))\n-    flag_no_mach_text_sections = 1;\n-\n-  /* get_line_function must leave the last character read in FINPUT.  */\n-  return getc (finput);\n+  else if (strcmp (pname, \"CC_WRITABLE_STRINGS\") == 0)\n+    flag_writable_strings = retval = 1;\n+  else if (strcmp (pname, \"CC_NON_WRITABLE_STRINGS\") == 0)\n+    flag_writable_strings = 0, retval = 1;\n+  else if (strcmp (pname, \"CC_NO_MACH_TEXT_SECTIONS\") == 0)\n+    flag_no_mach_text_sections = retval = 1;\n+\n+  return retval;\n }"}, {"sha": "764bf31d5e8203b1ee4ca2df3f4f6860c685f641", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/119d0c36a6b2f36bd3b3db5c8c5c486016767e25/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=119d0c36a6b2f36bd3b3db5c8c5c486016767e25", "patch": "@@ -2132,38 +2132,25 @@ initial_elimination_offset (from, to)\n    compiler.  */\n \n int\n-handle_pragma (file, c)\n+handle_pragma (file, t)\n      FILE *file;\n-     int c;\n+     tree t;\n {\n-  char pbuf[200];\n-  int psize = 0;\n+  int retval = 0;\n+  register char *pname;\n \n-  while (c == ' ' || c == '\\t')\n-    c = getc (file);\n-\n-  if (c != '\\n' & c != EOF)\n-    {\n-      while (psize < sizeof (pbuf) - 1\n-\t     && (isalpha (c) || c == '_'))\n-\t{\n-\t  pbuf[psize++] = c;\n-\t  c = getc (file);\n-\t}\n-      pbuf[psize] = 0;\n-\n-      if (strcmp (pbuf, \"interrupt\") == 0)\n-\tpragma_interrupt = 1;\n-      else if (strcmp (pbuf, \"trapa\") == 0)\n-\tpragma_interrupt = pragma_trapa = 1;\n-      else if (strcmp (pbuf, \"nosave_low_regs\") == 0)\n-\tpragma_nosave_low_regs = 1;\n+  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+    return 0;\n \n-      while (c != '\\n' && c != EOF)\n-\tc = getc (file);\n-    }\n+  pname = IDENTIFIER_POINTER (t);\n+  if (strcmp (pname, \"interrupt\") == 0)\n+    pragma_interrupt = retval = 1;\n+  else if (strcmp (pname, \"trapa\") == 0)\n+    pragma_interrupt = pragma_trapa = retval = 1;\n+  else if (strcmp (pname, \"nosave_low_regs\") == 0)\n+    pragma_nosave_low_regs = retval = 1;\n \n-  return c;\n+  return retval;\n }\n \f\n /* Predicates used by the templates.  */"}]}