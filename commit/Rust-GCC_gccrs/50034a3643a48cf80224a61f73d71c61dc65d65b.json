{"sha": "50034a3643a48cf80224a61f73d71c61dc65d65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwMzRhMzY0M2E0OGNmODAyMjRhNjFmNzNkNzFjNjFkYzY1ZDY1Yg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-01-25T06:46:31Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-01-25T06:46:31Z"}, "message": "Remove the temporary array for reductions written to memory.\n\n2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c\n\t(translate_scalar_reduction_to_array_for_stmt): Call unshare_expr.\n\t(close_phi_written_to_memory): New.\n\t(translate_scalar_reduction_to_array): Call close_phi_written_to_memory\n\tand unshare_expr.\n\n\t* gcc.dg/graphite/block-0.c: Un-XFAILed.\n\t* gcc.dg/graphite/block-1.c: Un-XFAILed.\n\t* gcc.dg/graphite/block-7.c: Un-XFAILed.\n\t* gcc.dg/graphite/block-8.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-12.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-14.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-15.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-8.c: Un-XFAILed.\n\t* gcc.dg/graphite/interchange-mvt.c: Un-XFAILed.\n\nFrom-SVN: r169208", "tree": {"sha": "f185c0f41aed331f39babd74ae528f5fbffa6471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f185c0f41aed331f39babd74ae528f5fbffa6471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50034a3643a48cf80224a61f73d71c61dc65d65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50034a3643a48cf80224a61f73d71c61dc65d65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50034a3643a48cf80224a61f73d71c61dc65d65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50034a3643a48cf80224a61f73d71c61dc65d65b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0deada9e5b187a9b7bd39e35b3043c5e8242d982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0deada9e5b187a9b7bd39e35b3043c5e8242d982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0deada9e5b187a9b7bd39e35b3043c5e8242d982"}], "stats": {"total": 113, "additions": 89, "deletions": 24}, "files": [{"sha": "c887aae489e1aab71b1b2b439697c2d855df8d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -1,3 +1,11 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c\n+\t(translate_scalar_reduction_to_array_for_stmt): Call unshare_expr.\n+\t(close_phi_written_to_memory): New.\n+\t(translate_scalar_reduction_to_array): Call close_phi_written_to_memory\n+\tand unshare_expr.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* doc/install.texi: Update the expected version number of PPL to 0.11."}, {"sha": "3f6ef54f6410351b5a3c99cf5e5ecb2637060de9", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -1,3 +1,21 @@\n+2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c\n+\t(translate_scalar_reduction_to_array_for_stmt): Call unshare_expr.\n+\t(close_phi_written_to_memory): New.\n+\t(translate_scalar_reduction_to_array): Call close_phi_written_to_memory\n+\tand unshare_expr.\n+\n+\t* gcc.dg/graphite/block-0.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-1.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-7.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-8.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-12.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-14.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-15.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-8.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-mvt.c: Un-XFAILed.\n+\n 2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* doc/install.texi: Update the expected version number of PPL to 0.11."}, {"sha": "301fb9688ca4ba9331835d85cf253207f08f9d74", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -2903,12 +2903,12 @@ translate_scalar_reduction_to_array_for_stmt (scop_p scop, tree red,\n \t\t\t\t\t      gimple stmt, gimple loop_phi)\n {\n   tree res = gimple_phi_result (loop_phi);\n-  gimple assign = gimple_build_assign (res, red);\n+  gimple assign = gimple_build_assign (res, unshare_expr (red));\n   gimple_stmt_iterator gsi;\n \n   insert_stmts (scop, assign, NULL, gsi_after_labels (gimple_bb (loop_phi)));\n \n-  assign = gimple_build_assign (red, gimple_assign_lhs (stmt));\n+  assign = gimple_build_assign (unshare_expr (red), gimple_assign_lhs (stmt));\n   gsi = gsi_for_stmt (stmt);\n   gsi_next (&gsi);\n   insert_stmts (scop, assign, NULL, gsi);\n@@ -2949,6 +2949,29 @@ remove_phi (gimple phi)\n   remove_phi_node (&gsi, false);\n }\n \n+/* When the result of a CLOSE_PHI is written to a memory location,\n+   return a pointer to that memory reference, otherwise return\n+   NULL_TREE.  */\n+\n+static tree\n+close_phi_written_to_memory (gimple close_phi)\n+{\n+  imm_use_iterator imm_iter;\n+  tree res, def = gimple_phi_result (close_phi);\n+  use_operand_p use_p;\n+  gimple stmt;\n+\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, def)\n+    if ((stmt = USE_STMT (use_p))\n+\t&& gimple_code (stmt) == GIMPLE_ASSIGN\n+\t&& (res = gimple_assign_lhs (stmt))\n+\t&& (TREE_CODE (res) == ARRAY_REF\n+\t    || TREE_CODE (res) == MEM_REF))\n+      return res;\n+\n+  return NULL_TREE;\n+}\n+\n /* Rewrite out of SSA the reduction described by the loop phi nodes\n    IN, and the close phi nodes OUT.  IN and OUT are structured by loop\n    levels like this:\n@@ -2964,9 +2987,9 @@ translate_scalar_reduction_to_array (scop_p scop,\n \t\t\t\t     VEC (gimple, heap) *in,\n \t\t\t\t     VEC (gimple, heap) *out)\n {\n-  unsigned int i;\n   gimple loop_phi;\n-  tree red = NULL_TREE;\n+  unsigned int i = VEC_length (gimple, out) - 1;\n+  tree red = close_phi_written_to_memory (VEC_index (gimple, out, i));\n \n   FOR_EACH_VEC_ELT (gimple, in, i, loop_phi)\n     {\n@@ -2980,20 +3003,22 @@ translate_scalar_reduction_to_array (scop_p scop,\n \t  PBB_IS_REDUCTION (pbb) = true;\n \t  gcc_assert (close_phi == loop_phi);\n \n-\t  red = create_zero_dim_array\n-\t    (gimple_assign_lhs (stmt), \"Commutative_Associative_Reduction\");\n+\t  if (!red)\n+\t    red = create_zero_dim_array\n+\t      (gimple_assign_lhs (stmt), \"Commutative_Associative_Reduction\");\n+\n \t  translate_scalar_reduction_to_array_for_stmt\n \t    (scop, red, stmt, VEC_index (gimple, in, 1));\n \t  continue;\n \t}\n \n       if (i == VEC_length (gimple, in) - 1)\n \t{\n-\t  insert_out_of_ssa_copy (scop, gimple_phi_result (close_phi), red,\n-\t\t\t\t  close_phi);\n+\t  insert_out_of_ssa_copy (scop, gimple_phi_result (close_phi),\n+\t\t\t\t  unshare_expr (red), close_phi);\n \t  insert_out_of_ssa_copy_on_edge\n \t    (scop, edge_initial_value_for_loop_phi (loop_phi),\n-\t     red, initial_value_for_loop_phi (loop_phi));\n+\t     unshare_expr (red), initial_value_for_loop_phi (loop_phi));\n \t}\n \n       remove_phi (loop_phi);"}, {"sha": "18f1ddbc508c381ab080e9d3486974fe21cea054", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -1,3 +1,15 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* gcc.dg/graphite/block-0.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-1.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-7.c: Un-XFAILed.\n+\t* gcc.dg/graphite/block-8.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-12.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-14.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-15.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-8.c: Un-XFAILed.\n+\t* gcc.dg/graphite/interchange-mvt.c: Un-XFAILed.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/graphite/block-0.c: Add documentation."}, {"sha": "9bf97126df847caea1e6768b413308d5865e5f61", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -12,7 +12,7 @@ foo (void)\n   int j;\n   int i;\n \n-  /* This should be blocked.  */\n+  /* This is not blocked as it is not profitable.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       a[j] = a[i] + 1;\n@@ -42,5 +42,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-not \"will be loop blocked\" \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "d335345a6990b53fa3a354d535f71953edddfddc", "filename": "gcc/testsuite/gcc.dg/graphite/block-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -17,17 +17,20 @@ main (void)\n   int A[MAX * MAX];\n   int B[MAX * MAX];\n \n+  /* These loops should be loop blocked.  */\n   for (i = 0; i < MAX; i++)\n     for (j = 0; j < MAX; j++)\n       {\n \tA[i*MAX + j] = j;\n \tB[i*MAX + j] = j;\n       }\n \n+  /* These loops should be loop blocked.  */\n   for (i = 0; i < MAX; i++)\n     for (j = 0; j < MAX; j++)\n       A[i*MAX + j] += B[j*MAX + i];\n \n+  /* These loops should be loop blocked.  */\n   for(i = 0; i < MAX; i++)\n     for(j = 0; j < MAX; j++)\n       sum += A[i*MAX + j];\n@@ -42,5 +45,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 2 \"graphite\" { xfail *-*-* } } } */ \n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 3 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "fbbe1f3ad5181051c2bcf5abd1035634f9f170a8", "filename": "gcc/testsuite/gcc.dg/graphite/block-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-7.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -53,5 +53,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "9c1c9cebe839bc28bc053a943735eb01be177838", "filename": "gcc/testsuite/gcc.dg/graphite/block-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-8.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -54,5 +54,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "fc27b4c5358df18eda405f7509db7d63ec005182", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-12.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -14,8 +14,7 @@ matmult (void)\n {\n   int i, j, k;\n \n-  /* This should be interchanged twice: (i, k) and (j, i).  The\n-     resulting nest should look like this (k, i, j).  */\n+  /* Loops J and K should be interchanged.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       {\n@@ -54,5 +53,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "53809b54d7d6c48d5d24fb0d567907408bdfc85b", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-14.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -18,8 +18,7 @@ matmult (void)\n     for (j = 0; j < N; j++)\n       A[i][j] = 0;\n \n-  /* This should be interchanged twice: (i, k) and (j, i).  The\n-     resulting nest should look like this (k, i, j).  */\n+  /* Loops J and K should be interchanged.  */\n   for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       for (k = 0; k < N; k++)\n@@ -55,5 +54,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "9eeef66173150091def4c48bdb58be2345fbc221", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -48,6 +48,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */\n "}, {"sha": "ca99dbc13a1224e42b1bf90a006f6451ce7bf9fe", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -11,7 +11,8 @@ foo (void)\n {\n   int i, j, k, l;\n \n-  /* Loops K and L should be interchanged.  */\n+  /* Loops (L, J) are interchanged, and then loops (J and K) are\n+     interchanged.  The result is a nest starting with (K, J, L).  */\n   for (l = 0; l < 4; l++)\n     {\n       for (k = 0; k < 4; k++)\n@@ -81,5 +82,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 2 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "ee262e9f7651f508a2bf5f70627a1e0b3f912c7a", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50034a3643a48cf80224a61f73d71c61dc65d65b/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=50034a3643a48cf80224a61f73d71c61dc65d65b", "patch": "@@ -58,6 +58,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */\n "}]}