{"sha": "a6b1490d35d7acb3dc5fe785fce116a674092c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiMTQ5MGQzNWQ3YWNiM2RjNWZlNzg1ZmNlMTE2YTY3NDA5MmMyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-17T18:52:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-17T18:52:59Z"}, "message": "cgraph.c (symbol_table::create_edge): Use opt_for_fn.\n\n\n\t* cgraph.c (symbol_table::create_edge): Use opt_for_fn.\n\t(cgraph_node::cannot_return_p): Likewise.\n\t(cgraph_edge::cannot_lead_to_return_p): Likewise.\n\t(cgraph_edge::maybe_hot_p): Likewise.\n\nFrom-SVN: r217667", "tree": {"sha": "271a33802b79d2437828ed71c783c755e8ff4130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/271a33802b79d2437828ed71c783c755e8ff4130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6b1490d35d7acb3dc5fe785fce116a674092c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b1490d35d7acb3dc5fe785fce116a674092c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b1490d35d7acb3dc5fe785fce116a674092c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b1490d35d7acb3dc5fe785fce116a674092c20/comments", "author": null, "committer": null, "parents": [{"sha": "7525bb7d7fe6d44c4634401e7468c408cee94d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7525bb7d7fe6d44c4634401e7468c408cee94d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7525bb7d7fe6d44c4634401e7468c408cee94d81"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "f5a6ee4db970781237c1acd21c56a5aae9ecc1b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b1490d35d7acb3dc5fe785fce116a674092c20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b1490d35d7acb3dc5fe785fce116a674092c20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6b1490d35d7acb3dc5fe785fce116a674092c20", "patch": "@@ -1,3 +1,10 @@\n+2014-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (symbol_table::create_edge): Use opt_for_fn.\n+\t(cgraph_node::cannot_return_p): Likewise.\n+\t(cgraph_edge::cannot_lead_to_return_p): Likewise.\n+\t(cgraph_edge::maybe_hot_p): Likewise.\n+\n 2014-11-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (maybe_hot_frequency_p): Use opt_for_fn."}, {"sha": "cc0474429ba27943a340352be94c0f2ea9bc2f0f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b1490d35d7acb3dc5fe785fce116a674092c20/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b1490d35d7acb3dc5fe785fce116a674092c20/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a6b1490d35d7acb3dc5fe785fce116a674092c20", "patch": "@@ -859,7 +859,8 @@ symbol_table::create_edge (cgraph_node *caller, cgraph_node *callee,\n   edge->indirect_inlining_edge = 0;\n   edge->speculative = false;\n   edge->indirect_unknown_callee = indir_unknown_callee;\n-  if (flag_devirtualize && call_stmt && DECL_STRUCT_FUNCTION (caller->decl))\n+  if (opt_for_fn (edge->caller->decl, flag_devirtualize)\n+      && call_stmt && DECL_STRUCT_FUNCTION (caller->decl))\n     edge->in_polymorphic_cdtor\n       = decl_maybe_in_construction_p (NULL, NULL, call_stmt,\n \t\t\t\t      caller->decl);\n@@ -2374,7 +2375,7 @@ bool\n cgraph_node::cannot_return_p (void)\n {\n   int flags = flags_from_decl_or_type (decl);\n-  if (!flag_exceptions)\n+  if (!opt_for_fn (decl, flag_exceptions))\n     return (flags & ECF_NORETURN) != 0;\n   else\n     return ((flags & (ECF_NORETURN | ECF_NOTHROW))\n@@ -2394,7 +2395,7 @@ cgraph_edge::cannot_lead_to_return_p (void)\n   if (indirect_unknown_callee)\n     {\n       int flags = indirect_info->ecf_flags;\n-      if (!flag_exceptions)\n+      if (!opt_for_fn (caller->decl, flag_exceptions))\n \treturn (flags & ECF_NORETURN) != 0;\n       else\n \treturn ((flags & (ECF_NORETURN | ECF_NOTHROW))\n@@ -2409,7 +2410,9 @@ cgraph_edge::cannot_lead_to_return_p (void)\n bool\n cgraph_edge::maybe_hot_p (void)\n {\n-  if (profile_info && flag_branch_probabilities\n+  /* TODO: Export profile_status from cfun->cfg to cgraph_node.  */\n+  if (profile_info\n+      && opt_for_fn (caller->decl, flag_branch_probabilities)\n       && !maybe_hot_count_p (NULL, count))\n     return false;\n   if (caller->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED\n@@ -2420,17 +2423,18 @@ cgraph_edge::maybe_hot_p (void)\n       && (callee\n \t  && callee->frequency <= NODE_FREQUENCY_EXECUTED_ONCE))\n     return false;\n-  if (optimize_size) return false;\n+  if (opt_for_fn (caller->decl, optimize_size))\n+    return false;\n   if (caller->frequency == NODE_FREQUENCY_HOT)\n     return true;\n   if (caller->frequency == NODE_FREQUENCY_EXECUTED_ONCE\n       && frequency < CGRAPH_FREQ_BASE * 3 / 2)\n     return false;\n-  if (flag_guess_branch_prob)\n+  if (opt_for_fn (caller->decl, flag_guess_branch_prob))\n     {\n       if (PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION) == 0\n \t  || frequency <= (CGRAPH_FREQ_BASE\n-\t\t\t\t / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION)))\n+\t\t\t   / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION)))\n         return false;\n     }\n   return true;"}]}