{"sha": "d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwN2U3ZjUzYjRhOWMzZjYwN2I2OTJkODliNGFkN2Q4N2RmNTkzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-29T17:27:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-29T17:27:13Z"}, "message": "PR c++/82081 - tail call optimization breaks noexcept\n\nIf a noexcept function calls a function that might throw, doing the tail\ncall optimization means that an exception thrown in the called function\nwill propagate out, breaking the noexcept specification.  So we need to\nprevent the optimization in that case.\n\n\t* tree-tailcall.c (find_tail_calls): Don't turn a call from a\n\tnothrow function to a might-throw function into a tail call.\n\nFrom-SVN: r270656", "tree": {"sha": "3c9963eb4dd5887df09070c5d7199822d305c7d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c9963eb4dd5887df09070c5d7199822d305c7d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "348dd384c8f647ba56be21932d068d180be243e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348dd384c8f647ba56be21932d068d180be243e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348dd384c8f647ba56be21932d068d180be243e3"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "b4554f60269d52250367421c43a26f71bb047c1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "patch": "@@ -1,3 +1,9 @@\n+2019-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82081 - tail call optimization breaks noexcept\n+\t* tree-tailcall.c (find_tail_calls): Don't turn a call from a\n+\tnothrow function to a might-throw function into a tail call.\n+\n 2019-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-data-ref.h (data_dependence_relation::inner_loop): Delete."}, {"sha": "c67af6e41c7283355d2d686c4a9b55896f7a111a", "filename": "gcc/testsuite/g++.dg/tree-ssa/tail-call-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftail-call-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftail-call-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Ftail-call-1.C?ref=d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/82081\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O2 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-not \"tail call\" \"optimized\" } }\n+\n+int g(int) ;\n+\n+int f() noexcept {\n+    int i = 42, j = 43;\n+    return g(i+j);\n+}"}, {"sha": "e0265b22dd5f85c91a004fbb813ffd89d311a2ec", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407e7f53b4a9c3f607b692d89b4ad7d87df5933/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=d407e7f53b4a9c3f607b692d89b4ad7d87df5933", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-into-ssa.h\"\n #include \"tree-dfa.h\"\n #include \"except.h\"\n+#include \"tree-eh.h\"\n #include \"dbgcnt.h\"\n #include \"cfgloop.h\"\n #include \"common/common-target.h\"\n@@ -472,6 +473,12 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n       && !auto_var_in_fn_p (ass_var, cfun->decl))\n     return;\n \n+  /* If the call might throw an exception that wouldn't propagate out of\n+     cfun, we can't transform to a tail or sibling call (82081).  */\n+  if (stmt_could_throw_p (cfun, stmt)\n+      && !stmt_can_throw_external (cfun, stmt))\n+    return;\n+\n   /* We found the call, check whether it is suitable.  */\n   tail_recursion = false;\n   func = gimple_call_fndecl (call);"}]}