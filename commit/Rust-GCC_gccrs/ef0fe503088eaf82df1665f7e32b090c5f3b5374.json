{"sha": "ef0fe503088eaf82df1665f7e32b090c5f3b5374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwZmU1MDMwODhlYWY4MmRmMTY2NWY3ZTMyYjA5MGM1ZjNiNTM3NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T00:26:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T00:26:56Z"}, "message": "Replace BB_HEAD et al macros with functions\n\ngcc/\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* basic-block.h (BB_HEAD): Convert to a function.  Strengthen the\n\treturn type from rtx to rtx_insn *.\n\t(BB_END): Likewise.\n\t(BB_HEADER): Likewise.\n\t(BB_FOOTER): Likewise.\n\t(SET_BB_HEAD): Convert to a function.\n\t(SET_BB_END): Likewise.\n\t(SET_BB_HEADER): Likewise.\n\t(SET_BB_FOOTER): Likewise.\n\n\t* cfgrtl.c (BB_HEAD): New function, from macro of same name.\n\tStrengthen the return type from rtx to rtx_insn *.  For now, this\n\tis done by adding a checked cast, but this will eventually\n\tbecome a field lookup.\n\t(BB_END): Likewise.\n\t(BB_HEADER): Likewise.\n\t(BB_FOOTER): Likewise.\n\t(SET_BB_HEAD): New function, from macro of same name.  This is\n\tintended for use as an lvalue, and so returns an rtx& to allow\n\tin-place modification.\n\t(SET_BB_END): Likewise.\n\t(SET_BB_HEADER): Likewise.\n\t(SET_BB_FOOTER): Likewise.\n\nFrom-SVN: r214126", "tree": {"sha": "b36c1adf97283d550b96e06e464780e67b445c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b36c1adf97283d550b96e06e464780e67b445c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef0fe503088eaf82df1665f7e32b090c5f3b5374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0fe503088eaf82df1665f7e32b090c5f3b5374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0fe503088eaf82df1665f7e32b090c5f3b5374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0fe503088eaf82df1665f7e32b090c5f3b5374/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a140b66ba7419e17673cc2bbd5facb8c846f0b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a140b66ba7419e17673cc2bbd5facb8c846f0b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a140b66ba7419e17673cc2bbd5facb8c846f0b0c"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "8ccdde2fff040aa0257739b7f868e835d6a2023e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef0fe503088eaf82df1665f7e32b090c5f3b5374", "patch": "@@ -1,3 +1,29 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (BB_HEAD): Convert to a function.  Strengthen the\n+\treturn type from rtx to rtx_insn *.\n+\t(BB_END): Likewise.\n+\t(BB_HEADER): Likewise.\n+\t(BB_FOOTER): Likewise.\n+\t(SET_BB_HEAD): Convert to a function.\n+\t(SET_BB_END): Likewise.\n+\t(SET_BB_HEADER): Likewise.\n+\t(SET_BB_FOOTER): Likewise.\n+\n+\t* cfgrtl.c (BB_HEAD): New function, from macro of same name.\n+\tStrengthen the return type from rtx to rtx_insn *.  For now, this\n+\tis done by adding a checked cast, but this will eventually\n+\tbecome a field lookup.\n+\t(BB_END): Likewise.\n+\t(BB_HEADER): Likewise.\n+\t(BB_FOOTER): Likewise.\n+\t(SET_BB_HEAD): New function, from macro of same name.  This is\n+\tintended for use as an lvalue, and so returns an rtx& to allow\n+\tin-place modification.\n+\t(SET_BB_END): Likewise.\n+\t(SET_BB_HEADER): Likewise.\n+\t(SET_BB_FOOTER): Likewise.\n+\n 2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (BB_HEAD): Split macro in two: the existing one,"}, {"sha": "d6aebb45df71fe32ddf933298ea161fe642664b2", "filename": "gcc/basic-block.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=ef0fe503088eaf82df1665f7e32b090c5f3b5374", "patch": "@@ -368,17 +368,21 @@ struct GTY(()) control_flow_graph {\n \f\n /* Stuff for recording basic block info.  */\n \n-/* These macros are currently split into two:\n-   one suitable for reading, and for writing.\n-   These will become functions in a follow-up patch.  */\n-#define BB_HEAD(B)      (((const_basic_block)B)->il.x.head_)\n-#define SET_BB_HEAD(B)  (B)->il.x.head_\n-#define BB_END(B)       (((const rtl_bb_info *)(B)->il.x.rtl)->end_)\n-#define SET_BB_END(B)   (B)->il.x.rtl->end_\n-#define BB_HEADER(B)    (((const rtl_bb_info *)(B)->il.x.rtl)->header_)\n-#define SET_BB_HEADER(B) (B)->il.x.rtl->header_\n-#define BB_FOOTER(B)    (((const rtl_bb_info *)(B)->il.x.rtl)->footer_)\n-#define SET_BB_FOOTER(B) (B)->il.x.rtl->footer_\n+/* For now, these will be functions (so that they can include checked casts\n+   to rtx_insn.   Once the underlying fields are converted from rtx\n+   to rtx_insn, these can be converted back to macros.  */\n+\n+extern rtx_insn *BB_HEAD (const_basic_block bb);\n+extern rtx& SET_BB_HEAD (basic_block bb);\n+\n+extern rtx_insn *BB_END (const_basic_block bb);\n+extern rtx& SET_BB_END (basic_block bb);\n+\n+extern rtx_insn *BB_HEADER (const_basic_block bb);\n+extern rtx& SET_BB_HEADER (basic_block bb);\n+\n+extern rtx_insn *BB_FOOTER (const_basic_block bb);\n+extern rtx& SET_BB_FOOTER (basic_block bb);\n \n /* Special block numbers [markers] for entry and exit.\n    Neither of them is supposed to hold actual statements.  */"}, {"sha": "671d5f327673395a7321ba3b7a28e69a4bbd6506", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef0fe503088eaf82df1665f7e32b090c5f3b5374/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=ef0fe503088eaf82df1665f7e32b090c5f3b5374", "patch": "@@ -5091,4 +5091,64 @@ struct cfg_hooks cfg_layout_rtl_cfg_hooks = {\n   rtl_account_profile_record,\n };\n \n+/* BB_HEAD as an rvalue. */\n+\n+rtx_insn *BB_HEAD (const_basic_block bb)\n+{\n+  rtx insn = bb->il.x.head_;\n+  return safe_as_a <rtx_insn *> (insn);\n+}\n+\n+/* BB_HEAD for use as an lvalue. */\n+\n+rtx& SET_BB_HEAD (basic_block bb)\n+{\n+  return bb->il.x.head_;\n+}\n+\n+/* BB_END as an rvalue. */\n+\n+rtx_insn *BB_END (const_basic_block bb)\n+{\n+  rtx insn = bb->il.x.rtl->end_;\n+  return safe_as_a <rtx_insn *> (insn);\n+}\n+\n+/* BB_END as an lvalue. */\n+\n+rtx& SET_BB_END (basic_block bb)\n+{\n+  return bb->il.x.rtl->end_;\n+}\n+\n+/* BB_HEADER as an rvalue. */\n+\n+rtx_insn *BB_HEADER (const_basic_block bb)\n+{\n+  rtx insn = bb->il.x.rtl->header_;\n+  return safe_as_a <rtx_insn *> (insn);\n+}\n+\n+/* BB_HEADER as an lvalue. */\n+\n+rtx& SET_BB_HEADER (basic_block bb)\n+{\n+  return bb->il.x.rtl->header_;\n+}\n+\n+/* BB_FOOTER as an rvalue. */\n+\n+rtx_insn *BB_FOOTER (const_basic_block bb)\n+{\n+  rtx insn = bb->il.x.rtl->footer_;\n+  return safe_as_a <rtx_insn *> (insn);\n+}\n+\n+/* BB_FOOTER as an lvalue. */\n+\n+rtx& SET_BB_FOOTER (basic_block bb)\n+{\n+  return bb->il.x.rtl->footer_;\n+}\n+\n #include \"gt-cfgrtl.h\""}]}