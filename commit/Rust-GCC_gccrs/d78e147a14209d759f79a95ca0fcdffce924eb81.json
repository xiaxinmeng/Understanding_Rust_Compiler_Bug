{"sha": "d78e147a14209d759f79a95ca0fcdffce924eb81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4ZTE0N2ExNDIwOWQ3NTlmNzlhOTVjYTBmY2RmZmNlOTI0ZWI4MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-12-01T18:48:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-12-01T18:48:24Z"}, "message": "C++STYLE: Add exception bits.\n\n\n2003-12-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/17_intro/C++STYLE: Add exception bits.\n\t* include/bits/fstream.tcc: Add location info to exception strings.\n\n\t* include/bits/stl_construct.h: Formatting tweaks.\n\nFrom-SVN: r74119", "tree": {"sha": "b89ba5bffe4ad19575de1adbbed31354ecddbc48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89ba5bffe4ad19575de1adbbed31354ecddbc48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78e147a14209d759f79a95ca0fcdffce924eb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78e147a14209d759f79a95ca0fcdffce924eb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78e147a14209d759f79a95ca0fcdffce924eb81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78e147a14209d759f79a95ca0fcdffce924eb81/comments", "author": null, "committer": null, "parents": [{"sha": "aa66a642c1fc139f3a7db4d98dd033bc47d84e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa66a642c1fc139f3a7db4d98dd033bc47d84e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa66a642c1fc139f3a7db4d98dd033bc47d84e05"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "7b3acabb8a35859abc89e70cae7fa06698d03ae7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d78e147a14209d759f79a95ca0fcdffce924eb81", "patch": "@@ -1,3 +1,10 @@\n+2003-12-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/17_intro/C++STYLE: Add exception bits.\n+\t* include/bits/fstream.tcc: Add location info to exception strings.\n+\n+\t* include/bits/stl_construct.h: Formatting tweaks.\n+\n 2003-12-01  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/10378"}, {"sha": "90dc879b1d1170d58bb372999c5f40d3085a460e", "filename": "libstdc++-v3/docs/html/17_intro/C++STYLE", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FC%2B%2BSTYLE?ref=d78e147a14209d759f79a95ca0fcdffce924eb81", "patch": "@@ -200,7 +200,25 @@ Notable areas of divergence from what may be previous local practice\n    For more explanation and examples, see src/globals.cc.  All such\n    variables should be contained in that file, for simplicity.\n \n-\n+15. Exception abstractions\n+    Use the exception abstractions found in functexcept.h, which allow\n+    C++ programmers to use this library with -fno-exceptions. (Even if\n+    that is rarely advisable, it's a necessary evil for backwards\n+    compatibility.)\n+\n+16. Exception error messages\n+    All start with the name of the function where the exception is\n+    thrown, and then (optional) descriptive text is added. Example:\n+\n+    __throw_logic_error(\"basic_string::_S_construct NULL not valid\");\n+\n+    Reason: The verbose terminate handler prints out exception::what(),\n+    as well as the typeinfo for the thrown exception. As this is the\n+    default terminate handler, by putting location info into the\n+    exception string, a very useful error message is printed out for\n+    uncaught exceptions. So useful, in fact, that non-programmers can\n+    give useful error messages, and programmers can intelligently\n+    speculate what went wrong without even using a debugger.\n \n The library currently has a mixture of GNU-C and modern C++ coding\n styles.  The GNU C usages will be combed out gradually."}, {"sha": "ef4260b5f810d0aea4aec4deab3177a36a9d8715", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=d78e147a14209d759f79a95ca0fcdffce924eb81", "patch": "@@ -254,7 +254,8 @@ namespace std\n \t\t      // codecvt::max_length() is bogus.\n \t\t      if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)\n \t\t\t{\n-\t\t\t  __throw_ios_failure(\"codecvt::max_length() \"\n+\t\t\t  __throw_ios_failure(\"basic_filebuf::underflow \"\n+\t\t\t\t\t      \"codecvt::max_length() \"\n \t\t\t\t\t      \"is not valid\");\n \t\t\t}\n \t\t      streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);\n@@ -305,10 +306,12 @@ namespace std\n \t      // However, reaching it while looping on partial means that\n \t      // the file has got an incomplete character.\n \t      if (__r == codecvt_base::partial)\n-\t\t__throw_ios_failure(\"incomplete character in file\");\n+\t\t__throw_ios_failure(\"basic_filebuf::underflow \"\n+\t\t\t\t    \"incomplete character in file\");\n \t    }\n \t  else\n-\t    __throw_ios_failure(\"invalid byte sequence in file\");\n+\t    __throw_ios_failure(\"basic_filebuf::underflow \"\n+\t\t\t\t\"invalid byte sequence in file\");\n \t}\n       return __ret;\n     }"}, {"sha": "c705c003b5d3f9e8fd916c4642bf7ac51b6ae5f1", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78e147a14209d759f79a95ca0fcdffce924eb81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=d78e147a14209d759f79a95ca0fcdffce924eb81", "patch": "@@ -1,6 +1,6 @@\n // nonstandard construct and destroy functions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -72,13 +72,13 @@ namespace std\n    * object's constructor with an initializer.\n    * @endif\n    */\n-  template <class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline void\n     _Construct(_T1* __p, const _T2& __value)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_]allocator::construct\n-      ::new (static_cast<void*>(__p)) _T1(__value); \n+      ::new(static_cast<void*>(__p)) _T1(__value); \n     }\n   \n   /**\n@@ -87,21 +87,21 @@ namespace std\n    * object's default constructor (no initializers).\n    * @endif\n    */\n-  template <class _T1>\n+  template<typename _T1>\n     inline void\n     _Construct(_T1* __p)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_]allocator::construct     \n-      ::new (static_cast<void*>(__p)) _T1();\n+      ::new(static_cast<void*>(__p)) _T1();\n     }\n \n   /**\n    * @if maint\n    * Destroy the object pointed to by a pointer type.\n    * @endif\n    */\n-  template <class _Tp>\n+  template<typename _Tp>\n     inline void\n     _Destroy(_Tp* __pointer)\n     { __pointer->~_Tp(); }\n@@ -113,7 +113,7 @@ namespace std\n    * This is a helper function used only by _Destroy().\n    * @endif\n    */\n-  template <class _ForwardIterator>\n+  template<typename _ForwardIterator>\n     inline void\n     __destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)\n     { for ( ; __first != __last; ++__first) std::_Destroy(&*__first); }\n@@ -127,7 +127,7 @@ namespace std\n    * This is a helper function used only by _Destroy().\n    * @endif\n    */\n-  template <class _ForwardIterator> \n+  template<typename _ForwardIterator> \n     inline void\n     __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)\n     { }\n@@ -139,7 +139,7 @@ namespace std\n    * away, otherwise the objects' destructors must be invoked.\n    * @endif\n    */\n-  template <class _ForwardIterator>\n+  template<typename _ForwardIterator>\n     inline void\n     _Destroy(_ForwardIterator __first, _ForwardIterator __last)\n     {"}]}