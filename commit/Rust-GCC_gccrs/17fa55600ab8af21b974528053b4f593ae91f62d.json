{"sha": "17fa55600ab8af21b974528053b4f593ae91f62d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmYTU1NjAwYWI4YWYyMWI5NzQ1MjgwNTNiNGY1OTNhZTkxZjYyZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-04T18:34:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-04T18:34:27Z"}, "message": "numeric_members.cc (_M_initialize_numpunct): Avoid unnecessarily zero terminating _M_atoms_out and _M_atoms_in...\n\n2004-01-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/generic/numeric_members.cc (_M_initialize_numpunct):\n\tAvoid unnecessarily zero terminating _M_atoms_out and _M_atoms_in;\n\talways use double underscored names.\n\t* config/locale/gnu/numeric_members.cc (_M_initialize_numpunct):\n\tLikewise.\n\t* include/bits/locale_facets.h (struct __numpunct_cache):\n\tDimension _M_atoms_out and _M_atoms_in one position smaller.\n\t(__numpunct_cache<>::_M_cache): Don't zero terminate _M_atoms_out\n\tand _M_atoms_in.\n\nFrom-SVN: r75393", "tree": {"sha": "19a818a24f648bd274212772f0223efb4727bb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a818a24f648bd274212772f0223efb4727bb56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17fa55600ab8af21b974528053b4f593ae91f62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fa55600ab8af21b974528053b4f593ae91f62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fa55600ab8af21b974528053b4f593ae91f62d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fa55600ab8af21b974528053b4f593ae91f62d/comments", "author": null, "committer": null, "parents": [{"sha": "dc0bfe6a357714f761a6b4326dc7a3cb03c79d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0bfe6a357714f761a6b4326dc7a3cb03c79d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0bfe6a357714f761a6b4326dc7a3cb03c79d8c"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "a2c78c0e6b5b1bfeca36c4db8ec1a3df8e5e6ea5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=17fa55600ab8af21b974528053b4f593ae91f62d", "patch": "@@ -1,3 +1,15 @@\n+2004-01-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/generic/numeric_members.cc (_M_initialize_numpunct):\n+\tAvoid unnecessarily zero terminating _M_atoms_out and _M_atoms_in;\n+\talways use double underscored names.\n+\t* config/locale/gnu/numeric_members.cc (_M_initialize_numpunct):\n+\tLikewise.\n+\t* include/bits/locale_facets.h (struct __numpunct_cache):\n+\tDimension _M_atoms_out and _M_atoms_in one position smaller.\n+\t(__numpunct_cache<>::_M_cache): Don't zero terminate _M_atoms_out\n+\tand _M_atoms_in.\n+\n 2003-12-31  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get::_M_extract_int,"}, {"sha": "8af127b8644fa56f18ccafecda858c304fa9c5e9", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=17fa55600ab8af21b974528053b4f593ae91f62d", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,13 +51,11 @@ namespace std\n       _M_data->_M_decimal_point = '.';\n       _M_data->_M_thousands_sep = ',';\n       \n-      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n-\t_M_data->_M_atoms_out[i] = __num_base::_S_atoms_out[i];\n-      _M_data->_M_atoms_out[__num_base::_S_oend] = char();\n+      for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n+\t_M_data->_M_atoms_out[__i] = __num_base::_S_atoms_out[__i];\n       \n-      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n-\t_M_data->_M_atoms_in[i] = __num_base::_S_atoms_in[i];\n-      _M_data->_M_atoms_in[__num_base::_S_iend] = char();\n+      for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n+\t_M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n \n       _M_data->_M_truename = \"true\";\n       _M_data->_M_falsename = \"false\";      \n@@ -84,19 +82,17 @@ namespace std\n       \n       // Use ctype::widen code without the facet...\n       unsigned char uc;\n-      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+      for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n \t{\n-\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_out[i]);\n-\t  _M_data->_M_atoms_out[i] = btowc(uc);\n+\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_out[__i]);\n+\t  _M_data->_M_atoms_out[__i] = btowc(uc);\n \t}\n-      _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n       \n-      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+      for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t{\n-\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_in[i]);\n-\t  _M_data->_M_atoms_in[i] = btowc(uc);\n+\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_in[__i]);\n+\t  _M_data->_M_atoms_in[__i] = btowc(uc);\n \t}\n-      _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n       \n       _M_data->_M_truename = L\"true\";\n       _M_data->_M_falsename = L\"false\";"}, {"sha": "bc7711a7e55bdcddde1c29cfe0ab1b9ddecdb63a", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=17fa55600ab8af21b974528053b4f593ae91f62d", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,13 +54,11 @@ namespace std\n \t  _M_data->_M_decimal_point = '.';\n \t  _M_data->_M_thousands_sep = ',';\n \n-\t  for (size_t i = 0; i < __num_base::_S_oend; ++i)\n-\t    _M_data->_M_atoms_out[i] = __num_base::_S_atoms_out[i];\n-\t  _M_data->_M_atoms_out[__num_base::_S_oend] = char();\n+\t  for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n+\t    _M_data->_M_atoms_out[__i] = __num_base::_S_atoms_out[__i];\n \n-\t  for (size_t i = 0; i < __num_base::_S_iend; ++i)\n-\t    _M_data->_M_atoms_in[i] = __num_base::_S_atoms_in[i];\n-\t  _M_data->_M_atoms_in[__num_base::_S_iend] = char();\n+\t  for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n+\t    _M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n \t}\n       else\n \t{\n@@ -107,19 +105,17 @@ namespace std\n #endif\n \t  // Use ctype::widen code without the facet...\n \t  unsigned char uc;\n-\t  for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t  for (size_t __i = 0; __i < __num_base::_S_oend; ++__i)\n \t    {\n-\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_out[i]);\n-\t      _M_data->_M_atoms_out[i] = btowc(uc);\n+\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_out[__i]);\n+\t      _M_data->_M_atoms_out[__i] = btowc(uc);\n \t    }\n-\t  _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n \n-\t  for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t  for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t    {\n-\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_in[i]);\n-\t      _M_data->_M_atoms_in[i] = btowc(uc);\n+\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_in[__i]);\n+\t      _M_data->_M_atoms_in[__i] = btowc(uc);\n \t    }\n-\t  _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t  __uselocale(__old);\n #endif"}, {"sha": "bf642780193b9f815f20801f75f504aa9600c2ba", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fa55600ab8af21b974528053b4f593ae91f62d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=17fa55600ab8af21b974528053b4f593ae91f62d", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1612,13 +1612,13 @@ namespace std\n       // \"C\" locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".\n       // This array contains the chars after having been passed\n       // through the current locale's ctype<_CharT>.widen().\n-      _CharT                    \t_M_atoms_out[__num_base::_S_oend + 1];\n+      _CharT                    \t_M_atoms_out[__num_base::_S_oend];\n \n       // A list of valid numeric literals for input: in the standard\n       // \"C\" locale, this is \"-+xX0123456789abcdefABCDEF\"\n       // This array contains the chars after having been passed\n       // through the current locale's ctype<_CharT>.widen().\n-      _CharT                    \t_M_atoms_in[__num_base::_S_iend + 1];\n+      _CharT                    \t_M_atoms_in[__num_base::_S_iend];\n \n       bool\t\t\t\t_M_allocated;\n \n@@ -1668,10 +1668,8 @@ namespace std\n       const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n       __ct.widen(__num_base::_S_atoms_out, \n \t\t __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);\n-      _M_atoms_out[__num_base::_S_oend] = _CharT();\n       __ct.widen(__num_base::_S_atoms_in, \n \t\t __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);\n-      _M_atoms_in[__num_base::_S_iend] = _CharT();\n     }\n \n   template<typename _CharT>"}]}