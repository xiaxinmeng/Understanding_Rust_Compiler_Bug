{"sha": "ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyZWFhOWY2ZTc0YTE0NmFhNjg2YzRmYWJiN2RlMjI3YWJmOTliNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-11-22T04:25:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-11-22T04:25:56Z"}, "message": "configure.ac: Change default of poststage1_ldflags to be empty if poststage1_libs is set.\n\n./:\t* configure.ac: Change default of poststage1_ldflags to be empty if\n\tpoststage1_libs is set.  When poststage1_libs is empty, and\n\tENABLE_BUILD_WITH_CXX is set, add -static-libgcc.\n\t* configure: Rebuild.\ngcc/:\n\t* Makefile.in (HOST_LIBS): Move higher in file.\n\t(LINKER, LINKER_FLAGS): If ENABLE_BUILD_WITH_CXX, but $(HOST_LIBS)\n\tis not empty, set to $(CC) and $(CFLAGS).\n\nFrom-SVN: r154422", "tree": {"sha": "3dadafd71165a50c78510cebe37e4dd81eda3a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dadafd71165a50c78510cebe37e4dd81eda3a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/comments", "author": null, "committer": null, "parents": [{"sha": "44e795858656da385d7bc99b0f23138d08cccd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e795858656da385d7bc99b0f23138d08cccd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e795858656da385d7bc99b0f23138d08cccd3f"}], "stats": {"total": 106, "additions": 66, "deletions": 40}, "files": [{"sha": "73859b46fb9453be47c4859e63a88463f46658f7", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "patch": "@@ -1,3 +1,10 @@\n+2009-11-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Change default of poststage1_ldflags to be empty if\n+\tpoststage1_libs is set.  When poststage1_libs is empty, and\n+\tENABLE_BUILD_WITH_CXX is set, add -static-libgcc.\n+\t* configure: Rebuild.\n+\n 2009-11-21  Adam Nemet  <adambnmet@gmail.com>\n \n \t* MAINTAINERS (Write After Approval): Update my email address."}, {"sha": "52ca8b206228f8669743ef97ac06547ce88d3fa3", "filename": "configure", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "patch": "@@ -683,8 +683,8 @@ clooginc\n clooglibs\n pplinc\n ppllibs\n-poststage1_libs\n poststage1_ldflags\n+poststage1_libs\n stage1_libs\n stage1_ldflags\n extra_mpc_mpfr_configure_flags\n@@ -796,8 +796,8 @@ with_gmp_lib\n with_host_libstdcxx\n with_stage1_ldflags\n with_stage1_libs\n-with_boot_ldflags\n with_boot_libs\n+with_boot_ldflags\n with_ppl\n with_ppl_include\n with_ppl_lib\n@@ -1531,8 +1531,8 @@ Optional Packages:\n                           when linking with PPL\n   --with-stage1-ldflags=FLAGS Linker flags for stage1\n   -with-stage1-libs=LIBS      Libraries for stage1\n-  --with-boot-ldflags=FLAGS Linker flags for stage2 and later\n   --with-boot-libs=LIBS     Libraries for stage2 and later\n+  --with-boot-ldflags=FLAGS Linker flags for stage2 and later\n   --with-ppl=PATH         Specify prefix directory for the installed PPL package\n                           Equivalent to --with-ppl-include=PATH/include\n                           plus --with-ppl-lib=PATH/lib\n@@ -5706,25 +5706,6 @@ fi\n \n \n \n-# Linker flags to use for stage2 and later builds.\n-\n-# Check whether --with-boot-ldflags was given.\n-if test \"${with_boot_ldflags+set}\" = set; then :\n-  withval=$with_boot_ldflags; if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n-   poststage1_ldflags=\n- else\n-   poststage1_ldflags=$withval\n- fi\n-else\n-  if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n-   poststage1_ldflags=-static-libstdc++\n- else\n-   poststage1_ldflags=\n- fi\n-fi\n-\n-\n-\n # Libraries to use for stage2 and later builds.  This defaults to the\n # argument passed to --with-host-libstdcxx.\n \n@@ -5741,6 +5722,27 @@ fi\n \n \n \n+# Linker flags to use for stage2 and later builds.\n+\n+# Check whether --with-boot-ldflags was given.\n+if test \"${with_boot_ldflags+set}\" = set; then :\n+  withval=$with_boot_ldflags; if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_ldflags=\n+ else\n+   poststage1_ldflags=$withval\n+ fi\n+else\n+  poststage1_ldflags=\n+ # With --enable-build-with-cxx, default to linking libstdc++ and\n+ # libgcc statically.  But if the user explicitly specified the\n+ # libraries to use, trust that they are doing what they want.\n+ if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\" -a \"$poststage1_libs\" = \"\"; then\n+   poststage1_ldflags=\"-static-libstdc++ -static-libgcc\"\n+ fi\n+fi\n+\n+\n+\n # Check for PPL\n ppl_major_version=0\n ppl_minor_version=10"}, {"sha": "66a9e8db0f2cd279528a57abaef9e984d86cda49", "filename": "configure.ac", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "patch": "@@ -1481,21 +1481,6 @@ AC_ARG_WITH(stage1-libs,\n [stage1_libs=$with_host_libstdcxx])\n AC_SUBST(stage1_libs)\n \n-# Linker flags to use for stage2 and later builds.\n-AC_ARG_WITH(boot-ldflags,\n-[  --with-boot-ldflags=FLAGS Linker flags for stage2 and later],\n-[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n-   poststage1_ldflags=\n- else\n-   poststage1_ldflags=$withval\n- fi],\n-[if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n-   poststage1_ldflags=-static-libstdc++\n- else\n-   poststage1_ldflags=\n- fi])\n-AC_SUBST(poststage1_ldflags)\n-\n # Libraries to use for stage2 and later builds.  This defaults to the\n # argument passed to --with-host-libstdcxx.\n AC_ARG_WITH(boot-libs,\n@@ -1508,6 +1493,23 @@ AC_ARG_WITH(boot-libs,\n [poststage1_libs=$with_host_libstdcxx])\n AC_SUBST(poststage1_libs)\n \n+# Linker flags to use for stage2 and later builds.\n+AC_ARG_WITH(boot-ldflags,\n+[  --with-boot-ldflags=FLAGS Linker flags for stage2 and later],\n+[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_ldflags=\n+ else\n+   poststage1_ldflags=$withval\n+ fi],\n+[poststage1_ldflags=\n+ # With --enable-build-with-cxx, default to linking libstdc++ and\n+ # libgcc statically.  But if the user explicitly specified the\n+ # libraries to use, trust that they are doing what they want.\n+ if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\" -a \"$poststage1_libs\" = \"\"; then\n+   poststage1_ldflags=\"-static-libstdc++ -static-libgcc\"\n+ fi])\n+AC_SUBST(poststage1_ldflags)\n+\n # Check for PPL\n ppl_major_version=0\n ppl_minor_version=10"}, {"sha": "31dcdb6cbb9241c18b28fcc473a51e976ad75da7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "patch": "@@ -1,3 +1,9 @@\n+2009-11-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Makefile.in (HOST_LIBS): Move higher in file.\n+\t(LINKER, LINKER_FLAGS): If ENABLE_BUILD_WITH_CXX, but $(HOST_LIBS)\n+\tis not empty, set to $(CC) and $(CFLAGS).\n+\n 2009-11-22  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-cfg.c (verify_types_in_gimple_reference): Error out on"}, {"sha": "c2b06437854adf2f3a16dbec1d0b85e64c33c52d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2eaa9f6e74a146aa686c4fabb7de227abf99b5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ed2eaa9f6e74a146aa686c4fabb7de227abf99b5", "patch": "@@ -206,6 +206,9 @@ NM = @NM@\n RANLIB = @RANLIB@\n RANLIB_FLAGS = @ranlib_flags@\n \n+# Libraries to use on the host.\n+HOST_LIBS = @HOST_LIBS@\n+\n # The name of the compiler to use.\n ENABLE_BUILD_WITH_CXX = @ENABLE_BUILD_WITH_CXX@\n ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n@@ -216,8 +219,17 @@ LINKER_FLAGS = $(CFLAGS)\n else\n COMPILER = $(CXX)\n COMPILER_FLAGS = $(CXXFLAGS)\n+# If HOST_LIBS is set, then the user is controlling the libraries to\n+# link against.  In that case, link with $(CC) so that the -lstdc++\n+# library is not introduced.  If HOST_LIBS is not set, link with\n+# $(CXX) to pick up -lstdc++.\n+ifeq ($(HOST_LIBS),)\n LINKER = $(CXX)\n LINKER_FLAGS = $(CXXFLAGS)\n+else\n+LINKER = $(CC)\n+LINKER_FLAGS = $(CFLAGS)\n+endif\n endif\n \n # -------------------------------------------\n@@ -288,9 +300,6 @@ write_entries_to_file = $(shell rm -f $(2) || :) $(shell touch $(2)) \\\n # In stage2 and beyond, we force this to \"-o $@\" since we know we're using gcc.\n OUTPUT_OPTION = @OUTPUT_OPTION@\n \n-# Libraries to use on the host.\n-HOST_LIBS = @HOST_LIBS@\n-\n # This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is\n # -I../zlib, unless we were configured with --with-system-zlib, in which\n # case both are empty."}]}