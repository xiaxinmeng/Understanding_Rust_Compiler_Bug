{"sha": "2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjOTlhMWE5NGQ4NTUzMmNhYTNjMjBiYmI1OGNlYTZkZjJlYmQ2Yw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-29T15:30:26Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-29T15:30:26Z"}, "message": "pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n\n\t* config/pa/pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n\t(MALLOC_ABI_ALIGNMENT): Define to 128 on all targets except SOM.\n\tAdjust comment.\n\nFrom-SVN: r241676", "tree": {"sha": "99b2a3399d968d69010293d17c744d528efa1669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b2a3399d968d69010293d17c744d528efa1669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c/comments", "author": null, "committer": null, "parents": [{"sha": "c9850009529c89c6b634fda500d9c9dff1533bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9850009529c89c6b634fda500d9c9dff1533bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9850009529c89c6b634fda500d9c9dff1533bca"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "2a74c71ef65c6db917fa71ee68e179bb03d2f0df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "patch": "@@ -1,3 +1,9 @@\n+2016-10-29  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n+\t(MALLOC_ABI_ALIGNMENT): Define to 128 on all targets except SOM.\n+\tAdjust comment.\n+\n 2016-10-28  Jeff Law  <law@redhat.com>\n \n \t* config/vax/vax.h (REGNO_REG_CLASS): Access the REGNO argument."}, {"sha": "77874821314b854482204e08783dc9798c336af2", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=2bc99a1a94d85532caa3c20bbb58cea6df2ebd6c", "patch": "@@ -295,17 +295,19 @@ typedef struct GTY(()) machine_function\n /* No data type wants to be aligned rounder than this.  The long double\n    type has 16-byte alignment on the 64-bit target even though it was never\n    implemented in hardware.  The software implementation only needs 8-byte\n-   alignment.  This is to match the HP compilers.  */\n+   alignment.  This matches the biggest alignment of the HP compilers.  */\n #define BIGGEST_ALIGNMENT (2 * BITS_PER_WORD)\n \n /* Alignment, in bits, a C conformant malloc implementation has to provide.\n    The HP-UX malloc implementation provides a default alignment of 8 bytes.\n-   This can be increased with mallopt.  The glibc implementation also provides\n-   8-byte alignment.  Note that this isn't enough for various POSIX types such\n-   as pthread_mutex_t.  However, since we no longer need the 16-byte alignment\n-   for atomic operations, we ignore the nominal alignment specified for these\n-   types.  The same is true for long double on 64-bit HP-UX.  */\n-#define MALLOC_ABI_ALIGNMENT (64)\n+   It should be 16 bytes on the 64-bit target since long double has 16-byte\n+   alignment.  It can be increased with mallopt but it's non critical since\n+   long double was never implemented in hardware.  The glibc implementation\n+   currently provides 8-byte alignment.  It should be 16 bytes since various\n+   POSIX types such as pthread_mutex_t require 16-byte alignment.  Again,\n+   this is non critical since 16-byte alignment is no longer needed for\n+   atomic operations.  */\n+#define MALLOC_ABI_ALIGNMENT (TARGET_SOM ? 64 : 128)\n \n /* Get around hp-ux assembler bug, and make strcpy of constants fast.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\\"}]}