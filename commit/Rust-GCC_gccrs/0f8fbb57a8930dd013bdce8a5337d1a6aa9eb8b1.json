{"sha": "0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "node_id": "C_kwDOANBUbNoAKDBmOGZiYjU3YTg5MzBkZDAxM2JkY2U4YTUzMzdkMWE2YWE5ZWI4YjE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-04T00:17:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-04T00:17:22Z"}, "message": "Daily bump.", "tree": {"sha": "9e72a8580600c2c1ebf3ec60cba2ee987d462db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e72a8580600c2c1ebf3ec60cba2ee987d462db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/comments", "author": null, "committer": null, "parents": [{"sha": "e098c5d10521f2cf67202ea742b0af337b33c6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e098c5d10521f2cf67202ea742b0af337b33c6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e098c5d10521f2cf67202ea742b0af337b33c6b1"}], "stats": {"total": 258, "additions": 257, "deletions": 1}, "files": [{"sha": "0191f9224eb688d01960b28db43006b9d933d908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1,3 +1,74 @@\n+2023-01-03  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* cgraph.h (struct cgraph_node): Add gc_candidate bit, modify\n+\tdefault constructor to initialize it.\n+\t* cgraphunit.cc (expand_all_functions): Save gc_candidate functions\n+\tfor last and iterate to handle recursive calls.  Delete leftover\n+\tcandidates at the end.\n+\t* omp-simd-clone.cc (simd_clone_create): Set gc_candidate bit\n+\ton local clones.\n+\t* tree-vect-stmts.cc (vectorizable_simd_clone_call): Clear\n+\tgc_candidate bit when a clone is used.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-02  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* dwarf2cfi.cc (init_return_column_size): Remove.\n+\t(init_one_dwarf_reg_size): Adjust.\n+\t(generate_dwarf_reg_sizes): New function.  Extracted\n+\tfrom expand_builtin_init_dwarf_reg_sizes.\n+\t(expand_builtin_init_dwarf_reg_sizes): Call\n+\tgenerate_dwarf_reg_sizes.\n+\t* target.def (init_dwarf_reg_sizes_extra): Adjust\n+\thook signature.\n+\t* config/msp430/msp430.cc\n+\t(msp430_init_dwarf_reg_sizes_extra): Adjust.\n+\t* config/rs6000/rs6000.cc\n+\t(rs6000_init_dwarf_reg_sizes_extra): Likewise.\n+\t* doc/tm.texi: Update.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-02  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* debug.h (dwarf_reg_sizes_constant): Declare.\n+\t* dwarf2cfi.cc (dwarf_reg_sizes_constant): New function.\n+\n+2023-01-03  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR tree-optimization/105043\n+\t* doc/extend.texi (Object Size Checking): Split out into two\n+\tsubsections and mention _FORTIFY_SOURCE.\n+\n+2023-01-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Rewrite\n+\tRTL expansion to allow condition (mask) to be shared/reused,\n+\tby avoiding overwriting pseudos and adding REG_EQUAL notes.\n+\n+2023-01-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/108229\n+\t* config/i386/i386-features.cc\n+\t(general_scalar_chain::compute_convert_gain) <case PLUS>: Consider\n+\tthe gain/cost of converting a MEM operand.\n+\n+2023-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108264\n+\t* expr.cc (store_expr): For stores into SUBREG_PROMOTED_* targets\n+\tfrom source which doesn't have scalar integral mode first convert\n+\tit to outer_mode.\n+\n+2023-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108263\n+\t* cfgrtl.cc (fixup_reorder_chain): Avoid trying to redirect\n+\tasm goto to EXIT.\n+\n 2023-01-02  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/87832"}, {"sha": "488992842fa5de3259e8c81bbfb2e8c8f973931e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1 +1 @@\n-20230103\n+20230104"}, {"sha": "c492ee71f273aa9898526a11fd1b2669a5cb2be0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1,3 +1,110 @@\n+2023-01-03  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* errout.adb (Write_JSON_Span): Escape subprogram name.\n+\n+2023-01-03  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* output.adb (Write_Buffer): Use Flush_Buffer instead of Write_Eol.\n+\n+2023-01-03  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (P_Flt_Format): Add \"*\" syntax handling.\n+\n+2023-01-03  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* libgnat/g-forstr.adb (P_Int_Format): Fix parsing bug.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Make sure that a\n+\tcaptured function call also verifies Is_Related_To_Func_Return.\n+\tDo not generate an actual subtype for special return objects.\n+\t* exp_util.ads (Is_Related_To_Func_Return): Add commentary.\n+\n+2023-01-03  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* libgnat/g-forstr.adb\n+\t(Advance_And_Accumulate_Until_Next_Specifier): New procedure.\n+\t(\"-\"): Replace inline code with call to\n+\tAdvance_And_Accumulate_Until_Next_Specifier.\n+\t(Next_Format): likewise.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Apply_Discriminant_Check.Denotes_Explicit_Dereference):\n+\tReturn false for artificial dereferences generated by the expander.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function): Adjust comment.\n+\t* sem_util.adb (Compute_Returns_By_Ref): Do not set Returns_By_Ref\n+\ton functions with foreign convention.\n+\n+2023-01-03  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Assignment_With_Temporary): New.\n+\t(Expand_Array_Aggregate): Tune backend optimization\n+\tand insert a temporary in the case of an access with\n+\tDesignated_Storage_Model aspect.\n+\t(Convert_Array_Aggr_In_Allocator): Likewise.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Membership_Op): Adjust again latest change.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.ads (Set_Debug_Info_Defining_Id): Adjust comment.\n+\t* sem_util.adb (Is_Aliased_View) <N_Explicit_Dereference>: Return\n+\tfalse for more artificial dereferences generated by the expander.\n+\t(Set_Debug_Info_Defining_Id): Set Debug_Info_Needed unconditionally\n+\tin -gnatD mode.\n+\t* exp_ch6.adb (Replace_Renaming_Declaration_Id): Also preserve the\n+\tIs_Aliased flag.\n+\n+2023-01-03  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* doc/gnat_ugn/platform_specific_information.rst\n+\t(_Platform_Specific_Information): Minor rewording of intro text.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.ads (Is_Captured_Function_Call): Declare.\n+\t* exp_util.adb (Is_Captured_Function_Call): New predicate.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Use it to detect a\n+\trewritten function call as the initializing expression.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Use it to detect a\n+\trewritten function call as the returned expression.\n+\n+2023-01-03  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.adb (Integer_Type_For): Assertion and comment.\n+\t(Small_Integer_Type_For): Remove some code and call\n+\tInteger_Type_For instead.\n+\t* sem_util.ads (Rep_To_Pos_Flag): Improve comments. \"Standard_...\"\n+\tseems overly pedantic here.\n+\t* exp_attr.adb (Succ, Pred): Clean up: make the code as similar as\n+\tpossible.\n+\t* exp_ch4.adb: Minor: named notation.\n+\n+2023-01-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* ghost.adb (Is_OK_Declaration): A reference to a Ghost entity may\n+\tappear within the class-wide precondition of a helper subprogram.\n+\tThis context is treated as suitable because it was already\n+\tverified when we were analyzing the original class-wide\n+\tprecondition.\n+\n+2023-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_tss.adb (Base_Init_Proc): Do not return the Init_Proc of the\n+\tancestor type for a derived array type.\n+\t* sem_ch13.adb (Inherit_Aspects_At_Freeze_Point): Factor out the\n+\tcommon processing done on representation items.\n+\tFor Default_Component_Value and Default_Value, look into the first\n+\tsubtype to find out the representation items.\n+\n 2023-01-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR ada/108202"}, {"sha": "c57cd01136a92b0fabbca8d6b6cd0b85f19545e8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1,3 +1,24 @@\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Define\n+\t__LIBGCC_DWARF_CIE_DATA_ALIGNMENT__.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* c-cppbuiltin.cc (__LIBGCC_DWARF_REG_SIZES_CONSTANT__):\n+\tDefine if constant is known.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-02  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Define\n+\t__LIBGCC_DWARF_CIE_DATA_ALIGNMENT__.\n+\n 2023-01-02  Florian Weimer  <fweimer@redhat.com>\n \n \t* c-cppbuiltin.cc (c_cpp_builtins): Define"}, {"sha": "365de9d05ad62ecd4bf4f49e006fd53bec663836", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1,3 +1,28 @@\n+2023-01-03  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/modules/modules.exp: Skip on AIX.\n+\t* gcc.target/powerpc/pr99708.c: Skip on AIX.\n+\n+2023-01-03  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* g++.dg/gomp/target-simd-clone-1.C: Tweak to test\n+\tthat the unused clone is GC'ed.\n+\t* gcc.dg/gomp/target-simd-clone-1.c: Likewise.\n+\n+2023-01-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/cmov10.c: New test case.\n+\n+2023-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108264\n+\t* gcc.dg/pr108264.c: New test.\n+\n+2023-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/108263\n+\t* gcc.dg/pr108263.c: New test.\n+\n 2023-01-01  Roger Sayle  <roger@nextmovesoftware.com>\n \t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "d9a1aef0dcf22ccd64e4dccede5d68e634bcb2f3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0f8fbb57a8930dd013bdce8a5337d1a6aa9eb8b1", "patch": "@@ -1,3 +1,35 @@\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2-execute_cfa.h: New file.  Extracted from\n+\tthe execute_cfa_program function in unwind-dw2.c.\n+\t* unwind-dw2.c (execute_cfa_program_generic): New function.\n+\t(execute_cfa_program_specialized): Likewise.\n+\t(execute_cfa_program): Call execute_cfa_program_specialized\n+\tor execute_cfa_program_generic, as appropriate.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2.c (dwarf_reg_size): New function.\n+\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_SetGRPtr)\n+\t(_Unwind_SetSpColumn, uw_install_context_1): Use it.\n+\t(uw_init_context_1): Do not initialize dwarf_reg_size_table\n+\tif not in use.\n+\n+2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\tRevert:\n+\t2023-01-03  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2-execute_cfa.h: New file.  Extracted from\n+\tthe execute_cfa_program function in unwind-dw2.c.\n+\t* unwind-dw2.c (execute_cfa_program_generic): New function.\n+\t(execute_cfa_program_specialized): Likewise.\n+\t(execute_cfa_program): Call execute_cfa_program_specialized\n+\tor execute_cfa_program_generic, as appropriate.\n+\n 2023-01-02  Florian Weimer  <fweimer@redhat.com>\n \n \t* unwind-dw2-execute_cfa.h: New file.  Extracted from"}]}