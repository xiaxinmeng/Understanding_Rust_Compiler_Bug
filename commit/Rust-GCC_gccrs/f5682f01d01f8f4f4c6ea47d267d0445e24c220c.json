{"sha": "f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2ODJmMDFkMDFmOGY0ZjRjNmVhNDdkMjY3ZDA0NDVlMjRjMjIwYw==", "commit": {"author": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-10-04T14:13:52Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-10-04T14:13:52Z"}, "message": "Add missing testcases from previous patch revision r240379, failed to svn add.\n\nFrom-SVN: r240746", "tree": {"sha": "4b0f5daeb5861fed53398346205c5dc4f0fde1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0f5daeb5861fed53398346205c5dc4f0fde1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/comments", "author": null, "committer": null, "parents": [{"sha": "078b5aab3875630d6b09cac4ea4408ef9ba04a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078b5aab3875630d6b09cac4ea4408ef9ba04a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078b5aab3875630d6b09cac4ea4408ef9ba04a00"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "26fe38c05295b70ccc35ed900d41b34aae2c87a8", "filename": "gcc/testsuite/gcc.target/arm/pure-code/ffunction-sections.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fffunction-sections.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fffunction-sections.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fffunction-sections.c?ref=f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n+/* { dg-options \"-ffunction-sections -mpure-code\" } */\n+#include <limits.h>\n+\n+char * foo (void)\n+{\n+  return \"foo\";\n+}\n+\n+unsigned int bar (unsigned int b)\n+{\n+  return UINT_MAX - b;\n+}\n+\n+/* { dg-final { scan-assembler {\\.section\\t\\.text\\.foo[^\\n]*\\\"0x20000006\\\"} } } */\n+/* { dg-final { scan-assembler {\\.section\\t\\.text\\.bar[^\\n]*\\\"0x20000006\\\"} } } */"}, {"sha": "ba116a8261b16610e6af47d26a6e1a07b0127561", "filename": "gcc/testsuite/gcc.target/arm/pure-code/no-casesi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-casesi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-casesi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-casesi.c?ref=f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpure-code\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-fpic\" \"-fPIC\" } { \"\" } } */\n+\n+extern int foo (void);\n+extern int bar (void);\n+extern int baz (void);\n+extern int fooz (void);\n+\n+int caller (unsigned int reg_type)\n+{\n+  switch (reg_type)\n+    {\n+    case 0x80000000:\n+      return (int) foo ();\n+\n+    case 0x80000003:\n+      return (int) bar ();\n+\n+    case 0x80000001:\n+      return (int) baz ();\n+\n+    case 0x80000004:\n+      return (int) fooz ();\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\.(float|l\\\\?double|\\d?byte|short|int|long|quad|word)\\\\s+\\[^.\\]\" } } */\n+/* { dg-final { scan-assembler \"text,\\\"0x20000006\\\"\" } } */"}, {"sha": "4b893fd32f722e6cd7dfde5c8542ab98327ba375", "filename": "gcc/testsuite/gcc.target/arm/pure-code/no-literal-pool.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fno-literal-pool.c?ref=f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpure-code\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-g\" \"-fpic\" \"-fPIC\" } { \"\" } } */\n+\n+float sf;\n+double df;\n+long long l;\n+static char *p = \"Hello World\";\n+\n+float\n+testsf (float *p)\n+{\n+  if (*p > 1.1234f)\n+    return 2.1234f;\n+  else\n+    return 3.1234f;\n+}\n+\n+double\n+testdf (double *p)\n+{\n+  if (*p > 4.1234)\n+    return 2.1234;\n+  else\n+    return 3.1234;\n+}\n+\n+long long\n+testll (long long *p)\n+{\n+  if (*p > 0x123456789ABCDEFll)\n+    return 0x111111111ll;\n+  else\n+    return 0x222222222ll;\n+}\n+\n+char *\n+testchar ()\n+{\n+  return p + 4;\n+}\n+\n+int\n+foo (int a, int b)\n+{\n+  int i;\n+  volatile int *labelref = &&label1;\n+\n+  if (a > b)\n+    {\n+      while (i < b)\n+\t{\n+\t  a += *labelref;\n+\t  i += 1;\n+\t}\n+      goto *labelref;\n+    }\n+  else\n+    b = b + 3;\n+\n+  a = a * b;\n+\n+label1:\n+  return a + b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\\\.(float|l\\\\?double|\\d?byte|short|int|long|quad|word)\\\\s+\\[^.\\]\" } } */\n+/* { dg-final { scan-assembler \"text,\\\"0x20000006\\\"\" } } */"}, {"sha": "1abe7782c0e5dbb6e2deef25f4bea9415664f942", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pure-code.exp", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5682f01d01f8f4f4c6ea47d267d0445e24c220c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp?ref=f5682f01d01f8f4f4c6ea47d267d0445e24c220c", "patch": "@@ -0,0 +1,54 @@\n+#   Copyright (C) 1997-2016 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite for ARM's -mpure-code option, using the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# The -mpure-code option is only available for M-profile targets that support\n+# thumb2.\n+if {[check_effective_target_arm_thumb2_ok]\n+    && ![check_effective_target_arm_arm_ok]} then {\n+# Initialize `dg'.\n+dg-init\n+\n+set saved-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default \"assemble\"\n+\n+set saved-lto_torture_options ${LTO_TORTURE_OPTIONS}\n+\n+# Add -ffat-lto-objects option to all LTO options such that we can do assembly\n+# scans.\n+proc add_fat_objects { list } {\n+    set res {}\n+    foreach el $list {set res [lappend res [concat $el \" -ffat-lto-objects\"]]}\n+    return $res\n+};\n+set LTO_TORTURE_OPTIONS [add_fat_objects ${LTO_TORTURE_OPTIONS}]\n+\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish\n+}"}]}