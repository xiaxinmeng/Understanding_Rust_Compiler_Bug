{"sha": "c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5YzdiZTEwYjgyZDc2ZDZiM2Q4ZGFmODhkOWU3YTA1Mjc4YmRkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-12-09T06:04:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-09T06:04:50Z"}, "message": "re PR c++/38410 (g++.dg/eh/crossjump1.C (internal compiler error))\n\n        PR c++/38410\n        * gimplify.c (gimplify_init_constructor): Don't write out a static\n        copy of the CONSTRUCTOR for TREE_ADDRESSABLE types or small sparse\n        initializers.\n\nFrom-SVN: r142580", "tree": {"sha": "3f57073523259bbf324791a19922b2e0b03088dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f57073523259bbf324791a19922b2e0b03088dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6c2b18db9626c66d5b86e9aeb315be3d81774bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c2b18db9626c66d5b86e9aeb315be3d81774bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c2b18db9626c66d5b86e9aeb315be3d81774bb"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "a8b338f59daaa6d7045f079551c9154794db3918", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "patch": "@@ -1,3 +1,10 @@\n+2008-12-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38410\n+\t* gimplify.c (gimplify_init_constructor): Don't write out a static\n+\tcopy of the CONSTRUCTOR for TREE_ADDRESSABLE types or small sparse\n+\tinitializers.\n+\n 2008-12-09 Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \tPR middle-end/38084"}, {"sha": "01b2fbef6b7ea865e64941b256335ad36b51c650", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "patch": "@@ -3502,7 +3502,7 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tstruct gimplify_init_ctor_preeval_data preeval_data;\n \tHOST_WIDE_INT num_type_elements, num_ctor_elements;\n \tHOST_WIDE_INT num_nonzero_elements;\n-\tbool cleared, valid_const_initializer;\n+\tbool cleared, valid_const_initializer, sparse;\n \n \t/* Aggregate types must lower constructors to initialization of\n \t   individual elements.  The exception is that a CONSTRUCTOR node\n@@ -3558,6 +3558,9 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \tnum_type_elements = count_type_elements (type, true);\n \n+\t/* Are there significantly more zeros than non-zeros?  */\n+\tsparse = (num_nonzero_elements <= num_type_elements/4);\n+\n \t/* If count_type_elements could not determine number of type elements\n \t   for a constant-sized object, assume clearing is needed.\n \t   Don't do this for variable-sized objects, as store_constructor\n@@ -3567,7 +3570,7 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t/* If there are \"lots\" of zeros, then block clear the object first.  */\n \telse if (num_type_elements - num_nonzero_elements\n \t\t > CLEAR_RATIO (optimize_function_for_speed_p (cfun))\n-\t\t && num_nonzero_elements < num_type_elements/4)\n+\t\t && sparse)\n \t  cleared = true;\n \t/* ??? This bit ought not be needed.  For any element not present\n \t   in the initializer, we should simply set them to zero.  Except\n@@ -3582,8 +3585,10 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t   be dropped to memory, and then memcpy'd out.  Don't do this\n \t   for sparse arrays, though, as it's more efficient to follow\n \t   the standard CONSTRUCTOR behavior of memset followed by\n-\t   individual element initialization.  */\n-\tif (valid_const_initializer && !cleared)\n+\t   individual element initialization.  Also don't try to do\n+\t   bitwise copies of TREE_ADDRESSABLE types.  */\n+\tif (valid_const_initializer && !(cleared || sparse)\n+\t    && !TREE_ADDRESSABLE (type))\n \t  {\n \t    HOST_WIDE_INT size = int_size_in_bytes (type);\n \t    unsigned int align;"}, {"sha": "07c5eb0c8efda1373b6a29ae5a0254988a8ecad3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "patch": "@@ -1,3 +1,8 @@\n+2008-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/38410\n+\t* gcc.dg/ctor1.c: New test.\n+\n 2008-12-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/mips/fix-r10000-6.c: Add dg-message to look for"}, {"sha": "6c1cd72cc77ab2f27c4a6fda42008d7a622ac12a", "filename": "gcc/testsuite/gcc.dg/ctor1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Ftestsuite%2Fgcc.dg%2Fctor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c69c7be10b82d76d6b3d8daf88d9e7a05278bdda/gcc%2Ftestsuite%2Fgcc.dg%2Fctor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fctor1.c?ref=c69c7be10b82d76d6b3d8daf88d9e7a05278bdda", "patch": "@@ -0,0 +1,10 @@\n+/* Related to PR c++/38410.\n+   We shouldn't write out a static variable for an all-zero aggregate\n+   initializer.  The variable named C.0 was created by\n+   gimplify_init_constructor. */\n+/* { dg-final { scan-assembler-not \"C\\\\.0\" } } */\n+\n+int main()\n+{\n+  int a[] = { 0,0 };\n+}"}]}