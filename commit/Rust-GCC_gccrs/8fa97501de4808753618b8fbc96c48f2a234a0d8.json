{"sha": "8fa97501de4808753618b8fbc96c48f2a234a0d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhOTc1MDFkZTQ4MDg3NTM2MThiOGZiYzk2YzQ4ZjJhMjM0YTBkOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-04-29T20:57:14Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-04-29T20:57:14Z"}, "message": "altivec.h: Change definitions of vec_xl and vec_xst.\n\n[gcc]\n\n2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h: Change definitions of vec_xl and\n\tvec_xst.\n\t* config/rs6000/rs6000-builtin.def (LD_ELEMREV_V2DF): New.\n\t(LD_ELEMREV_V2DI): New.\n\t(LD_ELEMREV_V4SF): New.\n\t(LD_ELEMREV_V4SI): New.\n\t(LD_ELEMREV_V8HI): New.\n\t(LD_ELEMREV_V16QI): New.\n\t(ST_ELEMREV_V2DF): New.\n\t(ST_ELEMREV_V2DI): New.\n\t(ST_ELEMREV_V4SF): New.\n\t(ST_ELEMREV_V4SI): New.\n\t(ST_ELEMREV_V8HI): New.\n\t(ST_ELEMREV_V16QI): New.\n\t(XL): New.\n\t(XST): New.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\tdescriptions for VSX_BUILTIN_VEC_XL and VSX_BUILTIN_VEC_XST.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Map from\n\tTARGET_P9_VECTOR to RS6000_BTM_P9_VECTOR.\n\t(altivec_expand_builtin): Add handling for\n\tVSX_BUILTIN_ST_ELEMREV_<MODE> and VSX_BUILTIN_LD_ELEMREV_<MODE>.\n\t(rs6000_invalid_builtin): Add error-checking for\n\tRS6000_BTM_P9_VECTOR.\n\t(altivec_init_builtins): Define builtins used to implement vec_xl\n\tand vec_xst.\n\t(rs6000_builtin_mask_names): Define power9-vector.\n\t* config/rs6000/rs6000.h (MASK_P9_VECTOR): Define.\n\t(RS6000_BTM_P9_VECTOR): Define.\n\t(RS6000_BTM_COMMON): Include RS6000_BTM_P9_VECTOR.\n\t* config/rs6000/vsx.md (vsx_ld_elemrev_v2di): New define_insn.\n\t(vsx_ld_elemrev_v2df): Likewise.\n\t(vsx_ld_elemrev_v4sf): Likewise.\n\t(vsx_ld_elemrev_v4si): Likewise.\n\t(vsx_ld_elemrev_v8hi): Likewise.\n\t(vsx_ld_elemrev_v16qi): Likewise.\n\t(vsx_st_elemrev_v2df): Likewise.\n\t(vsx_st_elemrev_v2di): Likewise.\n\t(vsx_st_elemrev_v4sf): Likewise.\n\t(vsx_st_elemrev_v4si): Likewise.\n\t(vsx_st_elemrev_v8hi): Likewise.\n\t(vsx_st_elemrev_v16qi): Likewise.\n\t* doc/extend.texi: Add prototypes for vec_xl and vec_xst.  Correct\n\tgrammar.\n\n[gcc/testsuite]\n\n2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vsx-elemrev-1.c: New.\n\t* gcc.target/powerpc/vsx-elemrev-2.c: New.\n\t* gcc.target/powerpc/vsx-elemrev-3.c: New.\n\t* gcc.target/powerpc/vsx-elemrev-4.c: New.\n\nFrom-SVN: r235654", "tree": {"sha": "868248bcd8df0168ef3dc49740c0c4e1157c7d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/868248bcd8df0168ef3dc49740c0c4e1157c7d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa97501de4808753618b8fbc96c48f2a234a0d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa97501de4808753618b8fbc96c48f2a234a0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa97501de4808753618b8fbc96c48f2a234a0d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa97501de4808753618b8fbc96c48f2a234a0d8/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a9561113a3898ee5ec2ea1ba05ec65de0c391d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9561113a3898ee5ec2ea1ba05ec65de0c391d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9561113a3898ee5ec2ea1ba05ec65de0c391d0"}], "stats": {"total": 1219, "additions": 1214, "deletions": 5}, "files": [{"sha": "cd8bbf14171a4148763b60ac8ffa24888a19b1b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -1,3 +1,50 @@\n+2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Change definitions of vec_xl and\n+\tvec_xst.\n+\t* config/rs6000/rs6000-builtin.def (LD_ELEMREV_V2DF): New.\n+\t(LD_ELEMREV_V2DI): New.\n+\t(LD_ELEMREV_V4SF): New.\n+\t(LD_ELEMREV_V4SI): New.\n+\t(LD_ELEMREV_V8HI): New.\n+\t(LD_ELEMREV_V16QI): New.\n+\t(ST_ELEMREV_V2DF): New.\n+\t(ST_ELEMREV_V2DI): New.\n+\t(ST_ELEMREV_V4SF): New.\n+\t(ST_ELEMREV_V4SI): New.\n+\t(ST_ELEMREV_V8HI): New.\n+\t(ST_ELEMREV_V16QI): New.\n+\t(XL): New.\n+\t(XST): New.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\tdescriptions for VSX_BUILTIN_VEC_XL and VSX_BUILTIN_VEC_XST.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Map from\n+\tTARGET_P9_VECTOR to RS6000_BTM_P9_VECTOR.\n+\t(altivec_expand_builtin): Add handling for\n+\tVSX_BUILTIN_ST_ELEMREV_<MODE> and VSX_BUILTIN_LD_ELEMREV_<MODE>.\n+\t(rs6000_invalid_builtin): Add error-checking for\n+\tRS6000_BTM_P9_VECTOR.\n+\t(altivec_init_builtins): Define builtins used to implement vec_xl\n+\tand vec_xst.\n+\t(rs6000_builtin_mask_names): Define power9-vector.\n+\t* config/rs6000/rs6000.h (MASK_P9_VECTOR): Define.\n+\t(RS6000_BTM_P9_VECTOR): Define.\n+\t(RS6000_BTM_COMMON): Include RS6000_BTM_P9_VECTOR.\n+\t* config/rs6000/vsx.md (vsx_ld_elemrev_v2di): New define_insn.\n+\t(vsx_ld_elemrev_v2df): Likewise.\n+\t(vsx_ld_elemrev_v4sf): Likewise.\n+\t(vsx_ld_elemrev_v4si): Likewise.\n+\t(vsx_ld_elemrev_v8hi): Likewise.\n+\t(vsx_ld_elemrev_v16qi): Likewise.\n+\t(vsx_st_elemrev_v2df): Likewise.\n+\t(vsx_st_elemrev_v2di): Likewise.\n+\t(vsx_st_elemrev_v4sf): Likewise.\n+\t(vsx_st_elemrev_v4si): Likewise.\n+\t(vsx_st_elemrev_v8hi): Likewise.\n+\t(vsx_st_elemrev_v16qi): Likewise.\n+\t* doc/extend.texi: Add prototypes for vec_xl and vec_xst.  Correct\n+\tgrammar.\n+\n 2016-04-29  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Split"}, {"sha": "5fc1cce0165397141fa28fac538b9e02646440a7", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -327,8 +327,8 @@\n #define vec_sqrt __builtin_vec_sqrt\n #define vec_vsx_ld __builtin_vec_vsx_ld\n #define vec_vsx_st __builtin_vec_vsx_st\n-#define vec_xl __builtin_vec_vsx_ld\n-#define vec_xst __builtin_vec_vsx_st\n+#define vec_xl __builtin_vec_xl\n+#define vec_xst __builtin_vec_xst\n \n /* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions\n    instead of __builtin_vec_<xxx>  */"}, {"sha": "ef9fbadd200db88373a2974ca9afdc2c60a84638", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -1398,6 +1398,18 @@ BU_VSX_X (STXVW4X_V4SF,\t      \"stxvw4x_v4sf\",\tMEM)\n BU_VSX_X (STXVW4X_V4SI,\t      \"stxvw4x_v4si\",\tMEM)\n BU_VSX_X (STXVW4X_V8HI,\t      \"stxvw4x_v8hi\",\tMEM)\n BU_VSX_X (STXVW4X_V16QI,      \"stxvw4x_v16qi\",\tMEM)\n+BU_VSX_X (LD_ELEMREV_V2DF,    \"ld_elemrev_v2df\",  MEM)\n+BU_VSX_X (LD_ELEMREV_V2DI,    \"ld_elemrev_v2di\",  MEM)\n+BU_VSX_X (LD_ELEMREV_V4SF,    \"ld_elemrev_v4sf\",  MEM)\n+BU_VSX_X (LD_ELEMREV_V4SI,    \"ld_elemrev_v4si\",  MEM)\n+BU_VSX_X (LD_ELEMREV_V8HI,    \"ld_elemrev_v8hi\",  MEM)\n+BU_VSX_X (LD_ELEMREV_V16QI,   \"ld_elemrev_v16qi\", MEM)\n+BU_VSX_X (ST_ELEMREV_V2DF,    \"st_elemrev_v2df\",  MEM)\n+BU_VSX_X (ST_ELEMREV_V2DI,    \"st_elemrev_v2di\",  MEM)\n+BU_VSX_X (ST_ELEMREV_V4SF,    \"st_elemrev_v4sf\",  MEM)\n+BU_VSX_X (ST_ELEMREV_V4SI,    \"st_elemrev_v4si\",  MEM)\n+BU_VSX_X (ST_ELEMREV_V8HI,    \"st_elemrev_v8hi\",  MEM)\n+BU_VSX_X (ST_ELEMREV_V16QI,   \"st_elemrev_v16qi\", MEM)\n BU_VSX_X (XSABSDP,\t      \"xsabsdp\",\tCONST)\n BU_VSX_X (XSADDDP,\t      \"xsadddp\",\tFP)\n BU_VSX_X (XSCMPODP,\t      \"xscmpodp\",\tFP)\n@@ -1455,6 +1467,8 @@ BU_VSX_OVERLOAD_1 (DOUBLE,   \"double\")\n /* VSX builtins that are handled as special cases.  */\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n BU_VSX_OVERLOAD_X (ST,\t     \"st\")\n+BU_VSX_OVERLOAD_X (XL,\t     \"xl\")\n+BU_VSX_OVERLOAD_X (XST,\t     \"xst\")\n \f\n /* 1 argument VSX instructions added in ISA 2.07.  */\n BU_P8V_VSX_1 (XSCVSPDPN,      \"xscvspdpn\",\tCONST,\tvsx_xscvspdpn)"}, {"sha": "c69c93c5bd2866427a7b17fc4f6b336199669ac5", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -2721,6 +2721,49 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUMS, ALTIVEC_BUILTIN_VSUMSWS,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n@@ -3470,6 +3513,55 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DF,\n+    RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DF,\n+    RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_long_long },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V2DI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SF,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SF,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V4SI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_UINTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V8HI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_UINTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V16QI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_UINTQI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_NOT_OPAQUE },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_16QI,"}, {"sha": "1cbb206ff754e7dfabfb8409c0f141f47f1a3f9c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -3621,6 +3621,7 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_POPCNTD)\t\t    ? RS6000_BTM_POPCNTD   : 0)\n \t  | ((rs6000_cpu == PROCESSOR_CELL) ? RS6000_BTM_CELL      : 0)\n \t  | ((TARGET_P8_VECTOR)\t\t    ? RS6000_BTM_P8_VECTOR : 0)\n+\t  | ((TARGET_P9_VECTOR)\t\t    ? RS6000_BTM_P9_VECTOR : 0)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n@@ -14217,6 +14218,47 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case VSX_BUILTIN_STXVW4X_V16QI:\n       return altivec_expand_stv_builtin (CODE_FOR_vsx_store_v16qi, exp);\n \n+    /* For the following on big endian, it's ok to use any appropriate\n+       unaligned-supporting store, so use a generic expander.  For\n+       little-endian, the exact element-reversing instruction must\n+       be used.  */\n+    case VSX_BUILTIN_ST_ELEMREV_V2DF:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v2df\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v2df);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+    case VSX_BUILTIN_ST_ELEMREV_V2DI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v2di\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v2di);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+    case VSX_BUILTIN_ST_ELEMREV_V4SF:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v4sf\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v4sf);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+    case VSX_BUILTIN_ST_ELEMREV_V4SI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v4si\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v4si);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+    case VSX_BUILTIN_ST_ELEMREV_V8HI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v8hi\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v8hi);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+    case VSX_BUILTIN_ST_ELEMREV_V16QI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v16qi\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v16qi);\n+\treturn altivec_expand_stv_builtin (code, exp);\n+      }\n+\n     case ALTIVEC_BUILTIN_MFVSCR:\n       icode = CODE_FOR_altivec_mfvscr;\n       tmode = insn_data[icode].operand[0].mode;\n@@ -14411,6 +14453,46 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case VSX_BUILTIN_LXVW4X_V16QI:\n       return altivec_expand_lv_builtin (CODE_FOR_vsx_load_v16qi,\n \t\t\t\t\texp, target, false);\n+    /* For the following on big endian, it's ok to use any appropriate\n+       unaligned-supporting load, so use a generic expander.  For\n+       little-endian, the exact element-reversing instruction must\n+       be used.  */\n+    case VSX_BUILTIN_LD_ELEMREV_V2DF:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v2df\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v2df);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n+    case VSX_BUILTIN_LD_ELEMREV_V2DI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v2di\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v2di);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n+    case VSX_BUILTIN_LD_ELEMREV_V4SF:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v4sf\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v4sf);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n+    case VSX_BUILTIN_LD_ELEMREV_V4SI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v4si\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v4si);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n+    case VSX_BUILTIN_LD_ELEMREV_V8HI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v8hi\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v8hi);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n+    case VSX_BUILTIN_LD_ELEMREV_V16QI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v16qi\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v16qi);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n       break;\n     default:\n       break;\n@@ -14880,6 +14962,8 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n     error (\"Builtin function %s requires the -mhard-dfp option\", name);\n   else if ((fnmask & RS6000_BTM_P8_VECTOR) != 0)\n     error (\"Builtin function %s requires the -mpower8-vector option\", name);\n+  else if ((fnmask & RS6000_BTM_P9_VECTOR) != 0)\n+    error (\"Builtin function %s requires the -mpower9-vector option\", name);\n   else if ((fnmask & (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n \t   == (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n     error (\"Builtin function %s requires the -mhard-float and\"\n@@ -15908,10 +15992,44 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_STXVW4X_V8HI);\n   def_builtin (\"__builtin_vsx_stxvw4x_v16qi\", void_ftype_v16qi_long_pvoid,\n \t       VSX_BUILTIN_STXVW4X_V16QI);\n+\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v2df\", v2df_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V2DF);\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v2di\", v2di_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V2DI);\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v4sf\", v4sf_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V4SF);\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v4si\", v4si_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V4SI);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v2df\", void_ftype_v2df_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V2DF);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v2di\", void_ftype_v2di_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V2DI);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v4sf\", void_ftype_v4sf_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V4SF);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v4si\", void_ftype_v4si_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V4SI);\n+\n+  if (TARGET_P9_VECTOR)\n+    {\n+      def_builtin (\"__builtin_vsx_ld_elemrev_v8hi\", v8hi_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_LD_ELEMREV_V8HI);\n+      def_builtin (\"__builtin_vsx_ld_elemrev_v16qi\", v16qi_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_LD_ELEMREV_V16QI);\n+      def_builtin (\"__builtin_vsx_st_elemrev_v8hi\",\n+\t\t   void_ftype_v8hi_long_pvoid, VSX_BUILTIN_ST_ELEMREV_V8HI);\n+      def_builtin (\"__builtin_vsx_st_elemrev_v16qi\",\n+\t\t   void_ftype_v16qi_long_pvoid, VSX_BUILTIN_ST_ELEMREV_V16QI);\n+    }\n+\n   def_builtin (\"__builtin_vec_vsx_ld\", opaque_ftype_long_pcvoid,\n \t       VSX_BUILTIN_VEC_LD);\n   def_builtin (\"__builtin_vec_vsx_st\", void_ftype_opaque_long_pvoid,\n \t       VSX_BUILTIN_VEC_ST);\n+  def_builtin (\"__builtin_vec_xl\", opaque_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_VEC_XL);\n+  def_builtin (\"__builtin_vec_xst\", void_ftype_opaque_long_pvoid,\n+\t       VSX_BUILTIN_VEC_XST);\n \n   def_builtin (\"__builtin_vec_step\", int_ftype_opaque, ALTIVEC_BUILTIN_VEC_STEP);\n   def_builtin (\"__builtin_vec_splats\", opaque_ftype_opaque, ALTIVEC_BUILTIN_VEC_SPLATS);\n@@ -34545,6 +34663,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"popcntd\",\t\t RS6000_BTM_POPCNTD,\tfalse, false },\n   { \"cell\",\t\t RS6000_BTM_CELL,\tfalse, false },\n   { \"power8-vector\",\t RS6000_BTM_P8_VECTOR,\tfalse, false },\n+  { \"power9-vector\",\t RS6000_BTM_P9_VECTOR,\tfalse, false },\n   { \"crypto\",\t\t RS6000_BTM_CRYPTO,\tfalse, false },\n   { \"htm\",\t\t RS6000_BTM_HTM,\tfalse, false },\n   { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },"}, {"sha": "6e02d1d286716a20dd7529d2a06a580da3176066", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -615,6 +615,7 @@ extern int rs6000_vector_align[];\n #define MASK_MULTIPLE\t\t\tOPTION_MASK_MULTIPLE\n #define MASK_NO_UPDATE\t\t\tOPTION_MASK_NO_UPDATE\n #define MASK_P8_VECTOR\t\t\tOPTION_MASK_P8_VECTOR\n+#define MASK_P9_VECTOR\t\t\tOPTION_MASK_P9_VECTOR\n #define MASK_POPCNTB\t\t\tOPTION_MASK_POPCNTB\n #define MASK_POPCNTD\t\t\tOPTION_MASK_POPCNTD\n #define MASK_PPC_GFXOPT\t\t\tOPTION_MASK_PPC_GFXOPT\n@@ -2660,6 +2661,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n #define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n #define RS6000_BTM_P8_VECTOR\tMASK_P8_VECTOR\t/* ISA 2.07 vector.  */\n+#define RS6000_BTM_P9_VECTOR\tMASK_P9_VECTOR\t/* ISA 3.0 vector.  */\n #define RS6000_BTM_CRYPTO\tMASK_CRYPTO\t/* crypto funcs.  */\n #define RS6000_BTM_HTM\t\tMASK_HTM\t/* hardware TM funcs.  */\n #define RS6000_BTM_SPE\t\tMASK_STRING\t/* E500 */\n@@ -2677,6 +2679,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n \t\t\t\t | RS6000_BTM_P8_VECTOR\t\t\t\\\n+\t\t\t\t | RS6000_BTM_P9_VECTOR\t\t\t\\\n \t\t\t\t | RS6000_BTM_CRYPTO\t\t\t\\\n \t\t\t\t | RS6000_BTM_FRE\t\t\t\\\n \t\t\t\t | RS6000_BTM_FRES\t\t\t\\"}, {"sha": "508eeacd3a4bd3d7aebb4898f7f4ddc1e3fb29e5", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -887,6 +887,140 @@\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"\")\n \n+;; Explicit load/store expanders for the builtin functions for lxvd2x, etc.,\n+;; when you really want their element-reversing behavior.\n+(define_insn \"vsx_ld_elemrev_v2di\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V2DI\n+\t  (match_operand:V2DI 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !BYTES_BIG_ENDIAN\"\n+  \"lxvd2x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_ld_elemrev_v2df\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V2DF\n+\t  (match_operand:V2DF 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V2DFmode) && !BYTES_BIG_ENDIAN\"\n+  \"lxvd2x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_ld_elemrev_v4si\"\n+  [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V4SI\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V4SImode) && !BYTES_BIG_ENDIAN\"\n+  \"lxvw4x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_ld_elemrev_v4sf\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V4SF\n+\t  (match_operand:V4SF 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && !BYTES_BIG_ENDIAN\"\n+  \"lxvw4x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_ld_elemrev_v8hi\"\n+  [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V8HI\n+\t  (match_operand:V8HI 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 7) (const_int 6)\n+\t             (const_int 5) (const_int 4)\n+\t\t     (const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n+  \"lxvh8x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_ld_elemrev_v16qi\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V16QI\n+\t  (match_operand:V16QI 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 15) (const_int 14)\n+\t             (const_int 13) (const_int 12)\n+\t\t     (const_int 11) (const_int 10)\n+\t\t     (const_int  9) (const_int  8)\n+\t\t     (const_int  7) (const_int  6)\n+\t             (const_int  5) (const_int  4)\n+\t\t     (const_int  3) (const_int  2)\n+\t             (const_int  1) (const_int  0)])))]\n+  \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n+  \"lxvb16x %x0,%y1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"vsx_st_elemrev_v2df\"\n+  [(set (match_operand:V2DF 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V2DF\n+\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V2DFmode) && !BYTES_BIG_ENDIAN\"\n+  \"stxvd2x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"vsx_st_elemrev_v2di\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V2DI\n+\t  (match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !BYTES_BIG_ENDIAN\"\n+  \"stxvd2x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"vsx_st_elemrev_v4sf\"\n+  [(set (match_operand:V4SF 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V4SF\n+\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && !BYTES_BIG_ENDIAN\"\n+  \"stxvw4x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"vsx_st_elemrev_v4si\"\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V4SI\n+\t  (match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V4SImode) && !BYTES_BIG_ENDIAN\"\n+  \"stxvw4x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"vsx_st_elemrev_v8hi\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V8HI\n+\t  (match_operand:V8HI 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 7) (const_int 6)\n+\t             (const_int 5) (const_int 4)\n+\t\t     (const_int 3) (const_int 2)\n+\t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n+  \"stxvh8x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"vsx_st_elemrev_v16qi\"\n+  [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V16QI\n+\t  (match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")\n+\t  (parallel [(const_int 15) (const_int 14)\n+\t             (const_int 13) (const_int 12)\n+\t\t     (const_int 11) (const_int 10)\n+\t\t     (const_int  9) (const_int  8)\n+\t             (const_int  7) (const_int  6)\n+\t             (const_int  5) (const_int  4)\n+\t\t     (const_int  3) (const_int  2)\n+\t             (const_int  1) (const_int  0)])))]\n+  \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n+  \"stxvb16x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n \f\n ;; VSX vector floating point arithmetic instructions.  The VSX scalar\n ;; instructions are now combined with the insn for the traditional floating"}, {"sha": "8ec7dcb5e5c6c89439fff581d43d274bfd5cdf2e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -13728,7 +13728,7 @@ CPU supports ISA 2.06 (eg, POWER7)\n @item arch_2_07\n CPU supports ISA 2.07 (eg, POWER8)\n @item arch_3_00\n-CPU supports ISA 3.00 (eg, POWER9)\n+CPU supports ISA 3.0 (eg, POWER9)\n @item archpmu\n CPU supports the set of compatible performance monitoring events.\n @item booke\n@@ -15930,6 +15930,18 @@ void vec_st (vector double, int, vector double *);\n void vec_st (vector double, int, double *);\n vector double vec_sub (vector double, vector double);\n vector double vec_trunc (vector double);\n+vector double vec_xl (int, vector double *);\n+vector double vec_xl (int, double *);\n+vector long long vec_xl (int, vector long long *);\n+vector long long vec_xl (int, long long *);\n+vector unsigned long long vec_xl (int, vector unsigned long long *);\n+vector unsigned long long vec_xl (int, unsigned long long *);\n+vector float vec_xl (int, vector float *);\n+vector float vec_xl (int, float *);\n+vector int vec_xl (int, vector int *);\n+vector int vec_xl (int, int *);\n+vector unsigned int vec_xl (int, vector unsigned int *);\n+vector unsigned int vec_xl (int, unsigned int *);\n vector double vec_xor (vector double, vector double);\n vector double vec_xor (vector double, vector bool long);\n vector double vec_xor (vector bool long, vector double);\n@@ -15939,6 +15951,18 @@ vector long vec_xor (vector bool long, vector long);\n vector unsigned long vec_xor (vector unsigned long, vector unsigned long);\n vector unsigned long vec_xor (vector unsigned long, vector bool long);\n vector unsigned long vec_xor (vector bool long, vector unsigned long);\n+void vec_xst (vector double, int, vector double *);\n+void vec_xst (vector double, int, double *);\n+void vec_xst (vector long long, int, vector long long *);\n+void vec_xst (vector long long, int, long long *);\n+void vec_xst (vector unsigned long long, int, vector unsigned long long *);\n+void vec_xst (vector unsigned long long, int, unsigned long long *);\n+void vec_xst (vector float, int, vector float *);\n+void vec_xst (vector float, int, float *);\n+void vec_xst (vector int, int, vector int *);\n+void vec_xst (vector int, int, int *);\n+void vec_xst (vector unsigned int, int, vector unsigned int *);\n+void vec_xst (vector unsigned int, int, unsigned int *);\n int vec_all_eq (vector double, vector double);\n int vec_all_ge (vector double, vector double);\n int vec_all_gt (vector double, vector double);\n@@ -16053,7 +16077,7 @@ if the VSX instruction set is available.  The @samp{vec_vsx_ld} and\n @samp{LXVW4X}, @samp{STXVD2X}, and @samp{STXVW4X} instructions.\n \n If the ISA 2.07 additions to the vector/scalar (power8-vector)\n-instruction set is available, the following additional functions are\n+instruction set are available, the following additional functions are\n available for both 32-bit and 64-bit targets.  For 64-bit targets, you\n can use @var{vector long} instead of @var{vector long long},\n @var{vector bool long} instead of @var{vector bool long long}, and\n@@ -16366,7 +16390,7 @@ vector unsigned long long vec_vupklsw (vector int);\n @end smallexample\n \n If the ISA 2.07 additions to the vector/scalar (power8-vector)\n-instruction set is available, the following additional functions are\n+instruction set are available, the following additional functions are\n available for 64-bit targets.  New vector types\n (@var{vector __int128_t} and @var{vector __uint128_t}) are available\n to hold the @var{__int128_t} and @var{__uint128_t} types to use these\n@@ -16481,6 +16505,28 @@ The second argument to the @var{__builtin_crypto_vshasigmad} and\n integer that is 0 or 1.  The third argument to these builtin functions\n must be a constant integer in the range of 0 to 15.\n \n+If the ISA 3.0 additions to the vector/scalar (power9-vector)\n+instruction set are available, the following additional functions are\n+available for both 32-bit and 64-bit targets.\n+\n+vector short vec_xl (int, vector short *);\n+vector short vec_xl (int, short *);\n+vector unsigned short vec_xl (int, vector unsigned short *);\n+vector unsigned short vec_xl (int, unsigned short *);\n+vector char vec_xl (int, vector char *);\n+vector char vec_xl (int, char *);\n+vector unsigned char vec_xl (int, vector unsigned char *);\n+vector unsigned char vec_xl (int, unsigned char *);\n+\n+void vec_xst (vector short, int, vector short *);\n+void vec_xst (vector short, int, short *);\n+void vec_xst (vector unsigned short, int, vector unsigned short *);\n+void vec_xst (vector unsigned short, int, unsigned short *);\n+void vec_xst (vector char, int, vector char *);\n+void vec_xst (vector char, int, char *);\n+void vec_xst (vector unsigned char, int, vector unsigned char *);\n+void vec_xst (vector unsigned char, int, unsigned char *);\n+\n @node PowerPC Hardware Transactional Memory Built-in Functions\n @subsection PowerPC Hardware Transactional Memory Built-in Functions\n GCC provides two interfaces for accessing the Hardware Transactional"}, {"sha": "cf91897dc02e2b82a9832c425cf8c47bcf51e97a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -1,3 +1,10 @@\n+2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-elemrev-1.c: New.\n+\t* gcc.target/powerpc/vsx-elemrev-2.c: New.\n+\t* gcc.target/powerpc/vsx-elemrev-3.c: New.\n+\t* gcc.target/powerpc/vsx-elemrev-4.c: New.\n+\n 2016-04-29  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* gcc.dg/tree-ssa/ssa-thread-14.c: New test."}, {"sha": "7ab6d446a232e9670cec06e0cc8a0cc7ea7ab612", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-elemrev-1.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-1.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do compile { target { powerpc64le*-*-* } } } */\n+/* { dg-skip-if \"do not override mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O0\" } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 18 } } */\n+/* { dg-final { scan-assembler-times \"lxvw4x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxvd2x\" 18 } } */\n+/* { dg-final { scan-assembler-times \"stxvw4x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 24 } } */\n+\n+#include <altivec.h>\n+\n+extern vector double vd, *vdp;\n+extern vector signed long long vsll, *vsllp;\n+extern vector unsigned long long vull, *vullp;\n+extern vector float vf, *vfp;\n+extern vector signed int vsi, *vsip;\n+extern vector unsigned int vui, *vuip;\n+extern double *dp;\n+extern signed long long *sllp;\n+extern unsigned long long *ullp;\n+extern float *fp;\n+extern signed int *sip;\n+extern unsigned int *uip;\n+\n+void foo0 (void)\n+{\n+  vd = vec_xl (0, vdp);\n+}\n+\n+void foo1 (void)\n+{\n+  vsll = vec_xl (0, vsllp);\n+}\n+\n+void foo2 (void)\n+{\n+  vull = vec_xl (0, vullp);\n+}\n+\n+void foo3 (void)\n+{\n+  vf = vec_xl (0, vfp);\n+}\n+\n+void foo4 (void)\n+{\n+  vsi = vec_xl (0, vsip);\n+}\n+\n+void foo5 (void)\n+{\n+  vui = vec_xl (0, vuip);\n+}\n+\n+void foo6 (void)\n+{\n+  vec_xst (vd, 0, vdp);\n+}\n+\n+void foo7 (void)\n+{\n+  vec_xst (vsll, 0, vsllp);\n+}\n+\n+void foo8 (void)\n+{\n+  vec_xst (vull, 0, vullp);\n+}\n+\n+void foo9 (void)\n+{\n+  vec_xst (vf, 0, vfp);\n+}\n+\n+void foo10 (void)\n+{\n+  vec_xst (vsi, 0, vsip);\n+}\n+\n+void foo11 (void)\n+{\n+  vec_xst (vui, 0, vuip);\n+}\n+\n+void foo20 (void)\n+{\n+  vd = vec_xl (0, dp);\n+}\n+\n+void foo21 (void)\n+{\n+  vsll = vec_xl (0, sllp);\n+}\n+\n+void foo22 (void)\n+{\n+  vull = vec_xl (0, ullp);\n+}\n+\n+void foo23 (void)\n+{\n+  vf = vec_xl (0, fp);\n+}\n+\n+void foo24 (void)\n+{\n+  vsi = vec_xl (0, sip);\n+}\n+\n+void foo25 (void)\n+{\n+  vui = vec_xl (0, uip);\n+}\n+\n+void foo26 (void)\n+{\n+  vec_xst (vd, 0, dp);\n+}\n+\n+void foo27 (void)\n+{\n+  vec_xst (vsll, 0, sllp);\n+}\n+\n+void foo28 (void)\n+{\n+  vec_xst (vull, 0, ullp);\n+}\n+\n+void foo29 (void)\n+{\n+  vec_xst (vf, 0, fp);\n+}\n+\n+void foo30 (void)\n+{\n+  vec_xst (vsi, 0, sip);\n+}\n+\n+void foo31 (void)\n+{\n+  vec_xst (vui, 0, uip);\n+}"}, {"sha": "f1c44039c76b16f2619ad9fadfe3f4fdd4093d99", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-elemrev-2.c", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-2.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -0,0 +1,234 @@\n+/* { dg-do compile { target { powerpc64le*-*-* } } } */\n+/* { dg-skip-if \"do not override mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O0\" } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"lxvw4x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"lxvh8x\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lxvb16x\" 4 } } */\n+/* { dg-final { scan-assembler-times \"stxvd2x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxvw4x\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stxvh8x\" 4 } } */\n+/* { dg-final { scan-assembler-times \"stxvb16x\" 4 } } */\n+\n+#include <altivec.h>\n+\n+extern vector double vd, *vdp;\n+extern vector signed long long vsll, *vsllp;\n+extern vector unsigned long long vull, *vullp;\n+extern vector float vf, *vfp;\n+extern vector signed int vsi, *vsip;\n+extern vector unsigned int vui, *vuip;\n+extern vector signed short vss, *vssp;\n+extern vector unsigned short vus, *vusp;\n+extern vector signed char vsc, *vscp;\n+extern vector unsigned char vuc, *vucp;\n+extern double *dp;\n+extern signed long long *sllp;\n+extern unsigned long long *ullp;\n+extern float *fp;\n+extern signed int *sip;\n+extern unsigned int *uip;\n+extern signed short *ssp;\n+extern unsigned short *usp;\n+extern signed char *scp;\n+extern unsigned char *ucp;\n+\n+void foo0 (void)\n+{\n+  vd = vec_xl (0, vdp);\n+}\n+\n+void foo1 (void)\n+{\n+  vsll = vec_xl (0, vsllp);\n+}\n+\n+void foo2 (void)\n+{\n+  vull = vec_xl (0, vullp);\n+}\n+\n+void foo3 (void)\n+{\n+  vf = vec_xl (0, vfp);\n+}\n+\n+void foo4 (void)\n+{\n+  vsi = vec_xl (0, vsip);\n+}\n+\n+void foo5 (void)\n+{\n+  vui = vec_xl (0, vuip);\n+}\n+\n+void foo6 (void)\n+{\n+  vss = vec_xl (0, vssp);\n+}\n+\n+void foo7 (void)\n+{\n+  vus = vec_xl (0, vusp);\n+}\n+\n+void foo8 (void)\n+{\n+  vsc = vec_xl (0, vscp);\n+}\n+\n+void foo9 (void)\n+{\n+  vuc = vec_xl (0, vucp);\n+}\n+\n+void foo10 (void)\n+{\n+  vec_xst (vd, 0, vdp);\n+}\n+\n+void foo11 (void)\n+{\n+  vec_xst (vsll, 0, vsllp);\n+}\n+\n+void foo12 (void)\n+{\n+  vec_xst (vull, 0, vullp);\n+}\n+\n+void foo13 (void)\n+{\n+  vec_xst (vf, 0, vfp);\n+}\n+\n+void foo14 (void)\n+{\n+  vec_xst (vsi, 0, vsip);\n+}\n+\n+void foo15 (void)\n+{\n+  vec_xst (vui, 0, vuip);\n+}\n+\n+void foo16 (void)\n+{\n+  vec_xst (vss, 0, vssp);\n+}\n+\n+void foo17 (void)\n+{\n+  vec_xst (vus, 0, vusp);\n+}\n+\n+void foo18 (void)\n+{\n+  vec_xst (vsc, 0, vscp);\n+}\n+\n+void foo19 (void)\n+{\n+  vec_xst (vuc, 0, vucp);\n+}\n+\n+void foo20 (void)\n+{\n+  vd = vec_xl (0, dp);\n+}\n+\n+void foo21 (void)\n+{\n+  vsll = vec_xl (0, sllp);\n+}\n+\n+void foo22 (void)\n+{\n+  vull = vec_xl (0, ullp);\n+}\n+\n+void foo23 (void)\n+{\n+  vf = vec_xl (0, fp);\n+}\n+\n+void foo24 (void)\n+{\n+  vsi = vec_xl (0, sip);\n+}\n+\n+void foo25 (void)\n+{\n+  vui = vec_xl (0, uip);\n+}\n+\n+void foo26 (void)\n+{\n+  vss = vec_xl (0, ssp);\n+}\n+\n+void foo27 (void)\n+{\n+  vus = vec_xl (0, usp);\n+}\n+\n+void foo28 (void)\n+{\n+  vsc = vec_xl (0, scp);\n+}\n+\n+void foo29 (void)\n+{\n+  vuc = vec_xl (0, ucp);\n+}\n+\n+void foo30 (void)\n+{\n+  vec_xst (vd, 0, dp);\n+}\n+\n+void foo31 (void)\n+{\n+  vec_xst (vsll, 0, sllp);\n+}\n+\n+void foo32 (void)\n+{\n+  vec_xst (vull, 0, ullp);\n+}\n+\n+void foo33 (void)\n+{\n+  vec_xst (vf, 0, fp);\n+}\n+\n+void foo34 (void)\n+{\n+  vec_xst (vsi, 0, sip);\n+}\n+\n+void foo35 (void)\n+{\n+  vec_xst (vui, 0, uip);\n+}\n+\n+void foo36 (void)\n+{\n+  vec_xst (vss, 0, ssp);\n+}\n+\n+void foo37 (void)\n+{\n+  vec_xst (vus, 0, usp);\n+}\n+\n+void foo38 (void)\n+{\n+  vec_xst (vsc, 0, scp);\n+}\n+\n+void foo39 (void)\n+{\n+  vec_xst (vuc, 0, ucp);\n+}"}, {"sha": "2888c171c4fc7bcf4007c2ffa5d4ab2911027b9f", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-elemrev-3.c", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-3.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -0,0 +1,142 @@\n+/* { dg-do compile { target { powerpc64-*-* } } } */\n+/* { dg-skip-if \"do not override mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O0\" } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 16 } } */\n+/* { dg-final { scan-assembler-times \"lxvw4x\" 8 } } */\n+/* { dg-final { scan-assembler-times \"stxvd2x\" 16 } } */\n+/* { dg-final { scan-assembler-times \"stxvw4x\" 8 } } */\n+\n+#include <altivec.h>\n+\n+extern vector double vd, *vdp;\n+extern vector signed long long vsll, *vsllp;\n+extern vector unsigned long long vull, *vullp;\n+extern vector float vf, *vfp;\n+extern vector signed int vsi, *vsip;\n+extern vector unsigned int vui, *vuip;\n+extern double *dp;\n+extern signed long long *sllp;\n+extern unsigned long long *ullp;\n+extern float *fp;\n+extern signed int *sip;\n+extern unsigned int *uip;\n+\n+void foo0 (void)\n+{\n+  vd = vec_xl (0, vdp);\n+}\n+\n+void foo1 (void)\n+{\n+  vsll = vec_xl (0, vsllp);\n+}\n+\n+void foo2 (void)\n+{\n+  vull = vec_xl (0, vullp);\n+}\n+\n+void foo3 (void)\n+{\n+  vf = vec_xl (0, vfp);\n+}\n+\n+void foo4 (void)\n+{\n+  vsi = vec_xl (0, vsip);\n+}\n+\n+void foo5 (void)\n+{\n+  vui = vec_xl (0, vuip);\n+}\n+\n+void foo6 (void)\n+{\n+  vec_xst (vd, 0, vdp);\n+}\n+\n+void foo7 (void)\n+{\n+  vec_xst (vsll, 0, vsllp);\n+}\n+\n+void foo8 (void)\n+{\n+  vec_xst (vull, 0, vullp);\n+}\n+\n+void foo9 (void)\n+{\n+  vec_xst (vf, 0, vfp);\n+}\n+\n+void foo10 (void)\n+{\n+  vec_xst (vsi, 0, vsip);\n+}\n+\n+void foo11 (void)\n+{\n+  vec_xst (vui, 0, vuip);\n+}\n+\n+void foo20 (void)\n+{\n+  vd = vec_xl (0, dp);\n+}\n+\n+void foo21 (void)\n+{\n+  vsll = vec_xl (0, sllp);\n+}\n+\n+void foo22 (void)\n+{\n+  vull = vec_xl (0, ullp);\n+}\n+\n+void foo23 (void)\n+{\n+  vf = vec_xl (0, fp);\n+}\n+\n+void foo24 (void)\n+{\n+  vsi = vec_xl (0, sip);\n+}\n+\n+void foo25 (void)\n+{\n+  vui = vec_xl (0, uip);\n+}\n+\n+void foo26 (void)\n+{\n+  vec_xst (vd, 0, dp);\n+}\n+\n+void foo27 (void)\n+{\n+  vec_xst (vsll, 0, sllp);\n+}\n+\n+void foo28 (void)\n+{\n+  vec_xst (vull, 0, ullp);\n+}\n+\n+void foo29 (void)\n+{\n+  vec_xst (vf, 0, fp);\n+}\n+\n+void foo30 (void)\n+{\n+  vec_xst (vsi, 0, sip);\n+}\n+\n+void foo31 (void)\n+{\n+  vec_xst (vui, 0, uip);\n+}"}, {"sha": "ef84581bc0a308834601393cd3efbabbcf0b7852", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-elemrev-4.c", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa97501de4808753618b8fbc96c48f2a234a0d8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-elemrev-4.c?ref=8fa97501de4808753618b8fbc96c48f2a234a0d8", "patch": "@@ -0,0 +1,228 @@\n+/* { dg-do compile { target { powerpc64-*-* } } } */\n+/* { dg-skip-if \"do not override mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O0\" } */\n+/* { dg-final { scan-assembler-times \"lxvx\" 40 } } */\n+/* { dg-final { scan-assembler-times \"stxvx\" 40 } } */\n+\n+#include <altivec.h>\n+\n+extern vector double vd, *vdp;\n+extern vector signed long long vsll, *vsllp;\n+extern vector unsigned long long vull, *vullp;\n+extern vector float vf, *vfp;\n+extern vector signed int vsi, *vsip;\n+extern vector unsigned int vui, *vuip;\n+extern vector signed short vss, *vssp;\n+extern vector unsigned short vus, *vusp;\n+extern vector signed char vsc, *vscp;\n+extern vector unsigned char vuc, *vucp;\n+extern double *dp;\n+extern signed long long *sllp;\n+extern unsigned long long *ullp;\n+extern float *fp;\n+extern signed int *sip;\n+extern unsigned int *uip;\n+extern signed short *ssp;\n+extern unsigned short *usp;\n+extern signed char *scp;\n+extern unsigned char *ucp;\n+\n+void foo0 (void)\n+{\n+  vd = vec_xl (0, vdp);\n+}\n+\n+void foo1 (void)\n+{\n+  vsll = vec_xl (0, vsllp);\n+}\n+\n+void foo2 (void)\n+{\n+  vull = vec_xl (0, vullp);\n+}\n+\n+void foo3 (void)\n+{\n+  vf = vec_xl (0, vfp);\n+}\n+\n+void foo4 (void)\n+{\n+  vsi = vec_xl (0, vsip);\n+}\n+\n+void foo5 (void)\n+{\n+  vui = vec_xl (0, vuip);\n+}\n+\n+void foo6 (void)\n+{\n+  vss = vec_xl (0, vssp);\n+}\n+\n+void foo7 (void)\n+{\n+  vus = vec_xl (0, vusp);\n+}\n+\n+void foo8 (void)\n+{\n+  vsc = vec_xl (0, vscp);\n+}\n+\n+void foo9 (void)\n+{\n+  vuc = vec_xl (0, vucp);\n+}\n+\n+void foo10 (void)\n+{\n+  vec_xst (vd, 0, vdp);\n+}\n+\n+void foo11 (void)\n+{\n+  vec_xst (vsll, 0, vsllp);\n+}\n+\n+void foo12 (void)\n+{\n+  vec_xst (vull, 0, vullp);\n+}\n+\n+void foo13 (void)\n+{\n+  vec_xst (vf, 0, vfp);\n+}\n+\n+void foo14 (void)\n+{\n+  vec_xst (vsi, 0, vsip);\n+}\n+\n+void foo15 (void)\n+{\n+  vec_xst (vui, 0, vuip);\n+}\n+\n+void foo16 (void)\n+{\n+  vec_xst (vss, 0, vssp);\n+}\n+\n+void foo17 (void)\n+{\n+  vec_xst (vus, 0, vusp);\n+}\n+\n+void foo18 (void)\n+{\n+  vec_xst (vsc, 0, vscp);\n+}\n+\n+void foo19 (void)\n+{\n+  vec_xst (vuc, 0, vucp);\n+}\n+\n+void foo20 (void)\n+{\n+  vd = vec_xl (0, dp);\n+}\n+\n+void foo21 (void)\n+{\n+  vsll = vec_xl (0, sllp);\n+}\n+\n+void foo22 (void)\n+{\n+  vull = vec_xl (0, ullp);\n+}\n+\n+void foo23 (void)\n+{\n+  vf = vec_xl (0, fp);\n+}\n+\n+void foo24 (void)\n+{\n+  vsi = vec_xl (0, sip);\n+}\n+\n+void foo25 (void)\n+{\n+  vui = vec_xl (0, uip);\n+}\n+\n+void foo26 (void)\n+{\n+  vss = vec_xl (0, ssp);\n+}\n+\n+void foo27 (void)\n+{\n+  vus = vec_xl (0, usp);\n+}\n+\n+void foo28 (void)\n+{\n+  vsc = vec_xl (0, scp);\n+}\n+\n+void foo29 (void)\n+{\n+  vuc = vec_xl (0, ucp);\n+}\n+\n+void foo30 (void)\n+{\n+  vec_xst (vd, 0, dp);\n+}\n+\n+void foo31 (void)\n+{\n+  vec_xst (vsll, 0, sllp);\n+}\n+\n+void foo32 (void)\n+{\n+  vec_xst (vull, 0, ullp);\n+}\n+\n+void foo33 (void)\n+{\n+  vec_xst (vf, 0, fp);\n+}\n+\n+void foo34 (void)\n+{\n+  vec_xst (vsi, 0, sip);\n+}\n+\n+void foo35 (void)\n+{\n+  vec_xst (vui, 0, uip);\n+}\n+\n+void foo36 (void)\n+{\n+  vec_xst (vss, 0, ssp);\n+}\n+\n+void foo37 (void)\n+{\n+  vec_xst (vus, 0, usp);\n+}\n+\n+void foo38 (void)\n+{\n+  vec_xst (vsc, 0, scp);\n+}\n+\n+void foo39 (void)\n+{\n+  vec_xst (vuc, 0, ucp);\n+}"}]}