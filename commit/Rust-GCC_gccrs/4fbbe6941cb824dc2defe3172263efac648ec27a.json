{"sha": "4fbbe6941cb824dc2defe3172263efac648ec27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiYmU2OTQxY2I4MjRkYzJkZWZlMzE3MjI2M2VmYWM2NDhlYzI3YQ==", "commit": {"author": {"name": "Stuart Hastings", "email": "stuart@apple.com", "date": "2006-08-01T16:17:53Z"}, "committer": {"name": "Stuart Hastings", "email": "stuart@gcc.gnu.org", "date": "2006-08-01T16:17:53Z"}, "message": "* rtl.h (UINTVAL) New.\n\n\t* config/rs6000/rs6000.c (SMALL_INT) Use it.\n\t* testsuite/gcc.dg/20060801-1.c: New.\n\nFrom-SVN: r115855", "tree": {"sha": "0404f507b2c1b0a334fec96e68cd3a10c4e8d0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0404f507b2c1b0a334fec96e68cd3a10c4e8d0cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fbbe6941cb824dc2defe3172263efac648ec27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbbe6941cb824dc2defe3172263efac648ec27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbbe6941cb824dc2defe3172263efac648ec27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbbe6941cb824dc2defe3172263efac648ec27a/comments", "author": null, "committer": null, "parents": [{"sha": "6193b8b7edb139ddf475352a0822482f16be4a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6193b8b7edb139ddf475352a0822482f16be4a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6193b8b7edb139ddf475352a0822482f16be4a2d"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "8cf26707b74c84ec8d5f823658237831b16eabfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fbbe6941cb824dc2defe3172263efac648ec27a", "patch": "@@ -1,3 +1,9 @@\n+2006-08-01  Stuart Hastings  <stuart@apple.com>\n+\n+\t* rtl.h (UINTVAL) New.\n+\t* config/rs6000/rs6000.c (SMALL_INT) Use it.\n+\t* testsuite/gcc.dg/20060801-1.c: New.\n+\t\n 2006-08-01  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \tPR debug/23336"}, {"sha": "c9888579c76149c4cee2bf3e3b104ac300f2aad6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4fbbe6941cb824dc2defe3172263efac648ec27a", "patch": "@@ -18105,7 +18105,7 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n    position-independent addresses go into a reg.  This is REG if non\n    zero, otherwise we allocate register(s) as necessary.  */\n \n-#define SMALL_INT(X) ((unsigned) (INTVAL (X) + 0x8000) < 0x10000)\n+#define SMALL_INT(X) ((UINTVAL (X) + 0x8000) < 0x10000)\n \n rtx\n rs6000_machopic_legitimize_pic_address (rtx orig, enum machine_mode mode,"}, {"sha": "75a89b63df10c92b54af1ef42eedf869789caed7", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4fbbe6941cb824dc2defe3172263efac648ec27a", "patch": "@@ -996,6 +996,7 @@ enum label_kind\n \n /* For a CONST_INT rtx, INTVAL extracts the integer.  */\n #define INTVAL(RTX) XCWINT(RTX, 0, CONST_INT)\n+#define UINTVAL(RTX) ((unsigned HOST_WIDE_INT) INTVAL (RTX))\n \n /* For a CONST_DOUBLE:\n    For a VOIDmode, there are two integers CONST_DOUBLE_LOW is the"}, {"sha": "7181f6bb95e425b481e90be0966994ce6f1a91f3", "filename": "gcc/testsuite/gcc.dg/20060801-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Ftestsuite%2Fgcc.dg%2F20060801-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fbbe6941cb824dc2defe3172263efac648ec27a/gcc%2Ftestsuite%2Fgcc.dg%2F20060801-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20060801-1.c?ref=4fbbe6941cb824dc2defe3172263efac648ec27a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { lp64 } } */\n+/* { dg-options \"-fPIC\" } */\n+char *ptr = 0;\n+char array[100];\n+void\n+f()\n+{\n+  ptr = &array[0x100000000ULL];\t/* A 33-bit constant.  */\n+}"}]}