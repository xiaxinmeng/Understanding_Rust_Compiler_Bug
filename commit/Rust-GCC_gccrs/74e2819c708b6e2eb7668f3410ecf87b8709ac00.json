{"sha": "74e2819c708b6e2eb7668f3410ecf87b8709ac00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlMjgxOWM3MDhiNmUyZWI3NjY4ZjM0MTBlY2Y4N2I4NzA5YWMwMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-23T20:41:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-23T20:41:59Z"}, "message": "alias.c (can_address_p): Compnonents are not addressable if the containing type has alias set 0.\n\n\t* alias.c (can_address_p): Compnonents are not addressable if\n\tthe containing type has alias set 0.\n\t(get_alias_set): Rework to use STRIP_NOPS.\n\tOnly call front-end routine on object, type, or object with\n\tNOPs stripped, not inner values.\n\tUse language hook to call front-end routine.\n\t* builtins.c (get_memory_rtx): Always call set_mem_attributes.\n\t(expand_builtin_apply): Call set_mem_align on MEMs we make.\n\tDon't pass alignment to emit_block_move.\n\t(expand_builtin_memcpy, expand_builtin_va_copy): Likewise.\n\t(expand_builtin_memset): Likewise, but for clear_storage.\n\t* c-common.c (lang_get_alias_set): Renamed to c_common_alias_set\n\tand remove C++ specific parts.\n\t* c-common.h (c_common_get_alias_set): Add declaration.\n\t* c-lang.c (LANG_HOOKS_GET_ALIAS_SET): New macro.\n\t* calls.c (emit_call_1): Fix typo in sibcall_pop case.\n\t(save_fixed_argument_area): Call set_mem_align.\n\tRemove alignment in call to emit_block_move.\n\t(emit_library_call_value_1, store_one_arg): Likewise.\n\t(target_for_arg): Remove; disabled long ago.\n\t* emit-rtl.c (set_mem_attributes): Rework to only call get_mem_attrs\n\tonce and similar cleanups.\n\t(offset_address): Use proper introductory comment.\n\t* expr.c (emit_block_move): Use alignment from that of MEM args, not\n\tfrom explicit operand; all callers changed.\n\t(clear_storage): Likewise.\n\t(expand_assignment): Don't call set_mem_alias_set on to_rtx.\n\t(store_field): Remove kludge on alias set used for to_rtx.\n\t(highest_pow2_factor, case *_DIV_EXPR): Never return 0.\n\t(expand_expr_unaligned): Call set_mem_attributes instead of\n\tset_mem_alias_set.\n\t* expr.h (emit_block_move, clear_storage): Remove ALIGN argument.\n\t* function.c (assign_stack_temp_for_type): Set MEM alignment.\n\t(expand_function_end): Track MEM attributes of trampolines.\n\t* ifcvt.c (noce_try_cmove_arith): Set alignment of new MEM.\n\t* integrate.c (copy_rtx_and_substitute, case CALL): Copy memory\n\tattributes from original.\n\t* langhooks.c (lang_hook_default_get_alias_set): New function.\n\t(hook_get_alias_set_0): New function.\n\t* langhooks.h (hook_get_alias_set_0): New declaration.\n\t(lang_hook_default_get_alias_set): Likewise.\n\t(LANG_HOOKS_GET_ALIAS_SET): New macro; add to initializer.\n\t* reload1.c (alter_reg): Use adjust_address_nv.\n\t* rtl.c (get_mode_alignment): Moved to here.\n\t* rtl.h (MEM_ALIGN): Take default from mode, if not BLKmode, and\n\tchange default if unknown from 1 to BITS_PER_UNIT.\n\t* stor-layout.c (get_mode_alignment): Remove from here.\n\t* toplev.h (struct lang_hoks): Add get_alias_set field.\n\t* tree.h (lang_get_alias_set): Delete declaration.\n\t* config/arc/arc.c (arc_setup_incoming_varags): Set MEM alignment.\n\t* config/i386/i386.c (ix86_setup_incoming_varargs): Likewise.\n\t(ix86_va_arg): Likewise.\n\t* config/i960/i960.c (i960_setup_incoming_varargs): Likewise.\n\t* config/pa/pa.c (hppa_builtin_saveregs): Likewise.\n\t* config/sparc/sparc.c (sparc_va_arg): Likewise.\n\t* config/rs6000/rs6000.c (setup_incoming_varargs): Likewise.\n\t(expand_block_move_mem): Remove dead code.\n\t* cp/cp-lang.c (cxx_get_alias_set): New function.\n\tPoint LANG_HOOKS_GET_ALIAS_SET to it.\n\t* f/com.c (LANG_HOOKS_GET_ALIAS_SET): New macro.\n\t(lang_get_alias_set): Delete.\n\t* java/lang.c (lang_get_alias_set): Deleted.\n\nFrom-SVN: r46442", "tree": {"sha": "f173c4170eb2341a9b4ee312f64d6251725fd5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f173c4170eb2341a9b4ee312f64d6251725fd5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e2819c708b6e2eb7668f3410ecf87b8709ac00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e2819c708b6e2eb7668f3410ecf87b8709ac00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e2819c708b6e2eb7668f3410ecf87b8709ac00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e2819c708b6e2eb7668f3410ecf87b8709ac00/comments", "author": null, "committer": null, "parents": [{"sha": "711062347e4f7842dd31adfa76159c8be9f244cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711062347e4f7842dd31adfa76159c8be9f244cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711062347e4f7842dd31adfa76159c8be9f244cd"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "f4d0fff26350f899e48d42d542a0706eb56d12f9", "filename": "gcc/function.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e2819c708b6e2eb7668f3410ecf87b8709ac00/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e2819c708b6e2eb7668f3410ecf87b8709ac00/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=74e2819c708b6e2eb7668f3410ecf87b8709ac00", "patch": "@@ -637,7 +637,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n      int keep;\n      tree type;\n {\n-  int align;\n+  unsigned int align;\n   struct temp_slot *p, *best_p = 0;\n \n   /* If SIZE is -1 it means that somebody tried to allocate a temporary\n@@ -795,6 +795,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n      it.  If there's no TYPE, then we don't know anything about the\n      alias set for the memory.  */\n   set_mem_alias_set (p->slot, type ? get_alias_set (type) : 0);\n+  set_mem_align (p->slot, align);\n \n   /* If a type is specified, set the relevant flags.  */\n   if (type != 0)\n@@ -5017,8 +5018,15 @@ assign_parms (fndecl)\n       if (parm == function_result_decl)\n \t{\n \t  tree result = DECL_RESULT (fndecl);\n-\t  rtx x = gen_rtx_MEM (DECL_MODE (result), DECL_RTL (parm));\n+\t  rtx addr = DECL_RTL (parm);\n+\t  rtx x;\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+\t  if (GET_MODE (addr) != Pmode)\n+\t    addr = convert_memory_address (Pmode, addr);\n+#endif\n \n+\t  x = gen_rtx_MEM (DECL_MODE (result), addr);\n \t  set_mem_attributes (x, result, 1);\n \t  SET_DECL_RTL (result, x);\n \t}\n@@ -6709,6 +6717,7 @@ expand_function_end (filename, line, end_bindings)\n \t{\n \t  initial_trampoline\n \t    = gen_rtx_MEM (BLKmode, assemble_trampoline_template ());\n+\t  set_mem_align (initial_trampoline, TRAMPOLINE_ALIGNMENT);\n \n \t  ggc_add_rtx_root (&initial_trampoline, 1);\n \t}\n@@ -6718,10 +6727,9 @@ expand_function_end (filename, line, end_bindings)\n       start_sequence ();\n       tramp = round_trampoline_addr (XEXP (tramp, 0));\n #ifdef TRAMPOLINE_TEMPLATE\n-      blktramp = change_address (initial_trampoline, BLKmode, tramp);\n+      blktramp = replace_equiv_address (initial_trampoline, tramp);\n       emit_block_move (blktramp, initial_trampoline,\n-\t\t       GEN_INT (TRAMPOLINE_SIZE),\n-\t\t       TRAMPOLINE_ALIGNMENT);\n+\t\t       GEN_INT (TRAMPOLINE_SIZE));\n #endif\n       INITIALIZE_TRAMPOLINE (tramp, XEXP (DECL_RTL (function), 0), context);\n       seq = get_insns ();"}]}