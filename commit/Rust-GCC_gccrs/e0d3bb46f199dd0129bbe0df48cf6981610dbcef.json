{"sha": "e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkM2JiNDZmMTk5ZGQwMTI5YmJlMGRmNDhjZjY5ODE2MTBkYmNlZg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-28T17:57:27Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-28T17:57:27Z"}, "message": "tree-ssa-alias.c (maybe_create_global_var): Don't just return if .GLOBAL_VAR has been created.\n\n\n\t* tree-ssa-alias.c (maybe_create_global_var): Don't just\n\treturn if .GLOBAL_VAR has been created.\n\nFrom-SVN: r85268", "tree": {"sha": "62decfb4fb7049220455e8e34566da59c3049bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62decfb4fb7049220455e8e34566da59c3049bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d3bb46f199dd0129bbe0df48cf6981610dbcef/comments", "author": null, "committer": null, "parents": [{"sha": "852c7b12c56a25dfbad50418d9c4a093b7463bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c7b12c56a25dfbad50418d9c4a093b7463bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852c7b12c56a25dfbad50418d9c4a093b7463bd4"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "7341996e85e463756c844c4d4bd21372a6cf505b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d3bb46f199dd0129bbe0df48cf6981610dbcef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d3bb46f199dd0129bbe0df48cf6981610dbcef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "patch": "@@ -1,3 +1,8 @@\n+2004-07-28  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-ssa-alias.c (maybe_create_global_var): Don't just\n+\treturn if .GLOBAL_VAR has been created.\n+\n 2004-07-28  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa.c (verify_flow_insensitive_alias_info): Process"}, {"sha": "7ad1867c453cf71e52c9fdd0f1cd42aaef8d40f5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d3bb46f199dd0129bbe0df48cf6981610dbcef/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d3bb46f199dd0129bbe0df48cf6981610dbcef/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e0d3bb46f199dd0129bbe0df48cf6981610dbcef", "patch": "@@ -1492,33 +1492,34 @@ maybe_create_global_var (struct alias_info *ai)\n   size_t i, n_clobbered;\n   \n   /* No need to create it, if we have one already.  */\n-  if (global_var)\n-    return;\n-\n-  /* Count all the call-clobbered variables.  */\n-  n_clobbered = 0;\n-  EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, n_clobbered++);\n+  if (global_var == NULL_TREE)\n+    {\n+      /* Count all the call-clobbered variables.  */\n+      n_clobbered = 0;\n+      EXECUTE_IF_SET_IN_BITMAP (call_clobbered_vars, 0, i, n_clobbered++);\n \n-  /* Create .GLOBAL_VAR if we have too many call-clobbered variables.\n-     We also create .GLOBAL_VAR when there no call-clobbered variables\n-     to prevent code motion transformations from re-arranging function\n-     calls that may have side effects.  For instance,\n+      /* Create .GLOBAL_VAR if we have too many call-clobbered\n+\t variables.  We also create .GLOBAL_VAR when there no\n+\t call-clobbered variables to prevent code motion\n+\t transformations from re-arranging function calls that may\n+\t have side effects.  For instance,\n \n-     \t\tfoo ()\n+\t\tfoo ()\n \t\t{\n \t\t  int a = f ();\n \t\t  g ();\n \t\t  h (a);\n \t\t}\n \n-     There are no call-clobbered variables in foo(), so it would be\n-     entirely possible for a pass to want to move the call to f()\n-     after the call to g().  If f() has side effects, that would be\n-     wrong.  Creating .GLOBAL_VAR in this case will insert VDEFs for\n-     it and prevent such transformations.  */\n-  if (n_clobbered == 0\n-      || ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD)\n-    create_global_var ();\n+\t There are no call-clobbered variables in foo(), so it would\n+\t be entirely possible for a pass to want to move the call to\n+\t f() after the call to g().  If f() has side effects, that\n+\t would be wrong.  Creating .GLOBAL_VAR in this case will\n+\t insert VDEFs for it and prevent such transformations.  */\n+      if (n_clobbered == 0\n+\t  || ai->num_calls_found * n_clobbered >= (size_t) GLOBAL_VAR_THRESHOLD)\n+\tcreate_global_var ();\n+    }\n \n   /* If the function has calls to clobbering functions and .GLOBAL_VAR has\n      been created, make it an alias for all call-clobbered variables.  */"}]}