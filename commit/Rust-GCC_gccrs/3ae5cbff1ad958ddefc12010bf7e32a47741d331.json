{"sha": "3ae5cbff1ad958ddefc12010bf7e32a47741d331", "node_id": "C_kwDOANBUbNoAKDNhZTVjYmZmMWFkOTU4ZGRlZmMxMjAxMGJmN2UzMmE0Nzc0MWQzMzE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-25T07:43:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-04T11:58:04Z"}, "message": "Fold more vector constants early\n\nIn PR105049 we had\n\n  return VIEW_CONVERT_EXPR<U>( VEC_PERM_EXPR < {<<< Unknown tree: compound_literal_expr\n        V D.1984 = { 0 }; >>>, { 0 }} , {<<< Unknown tree: compound_literal_expr\n        V D.1985 = { 0 }; >>>, { 0 }} , { 0, 0 } >  & {(short int) SAVE_EXPR <c>, (short int) SAVE_EXPR <c>});\n\nwhere we gimplify the init CTORs to\n\n  _1 = {{ 0 }, { 0 }};\n  _2 = {{ 0 }, { 0 }};\n\ninstead of to vector constants.  The following makes sure to simplify the\nCTORs to VECTOR_CSTs during gimplification by re-ordering the simplification\nto after CTOR flag recomputation and gimplification of the elements.\n\n2022-03-25  Richard Biener  <rguenther@suse.de>\n\n\t* gimplify.cc (gimplify_init_constructor): First gimplify,\n\tthen simplify the result to a VECTOR_CST.", "tree": {"sha": "9e0878f6c65bdc8addc0fdb87a0cacbb3196e5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e0878f6c65bdc8addc0fdb87a0cacbb3196e5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae5cbff1ad958ddefc12010bf7e32a47741d331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae5cbff1ad958ddefc12010bf7e32a47741d331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae5cbff1ad958ddefc12010bf7e32a47741d331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae5cbff1ad958ddefc12010bf7e32a47741d331/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afcd148103b0467126483151b6fb5ac68920e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afcd148103b0467126483151b6fb5ac68920e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afcd148103b0467126483151b6fb5ac68920e72"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f052d9f970c1dc6dffd40688a17a4baf9fbe274d", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae5cbff1ad958ddefc12010bf7e32a47741d331/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae5cbff1ad958ddefc12010bf7e32a47741d331/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=3ae5cbff1ad958ddefc12010bf7e32a47741d331", "patch": "@@ -5432,6 +5432,22 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tif (notify_temp_creation)\n \t  return GS_OK;\n \n+\t/* Vector types use CONSTRUCTOR all the way through gimple\n+\t   compilation as a general initializer.  */\n+\tFOR_EACH_VEC_SAFE_ELT (elts, ix, ce)\n+\t  {\n+\t    enum gimplify_status tret;\n+\t    tret = gimplify_expr (&ce->value, pre_p, post_p, is_gimple_val,\n+\t\t\t\t  fb_rvalue);\n+\t    if (tret == GS_ERROR)\n+\t      ret = GS_ERROR;\n+\t    else if (TREE_STATIC (ctor)\n+\t\t     && !initializer_constant_valid_p (ce->value,\n+\t\t\t\t\t\t       TREE_TYPE (ce->value)))\n+\t      TREE_STATIC (ctor) = 0;\n+\t  }\n+\trecompute_constructor_flags (ctor);\n+\n \t/* Go ahead and simplify constant constructors to VECTOR_CST.  */\n \tif (TREE_CONSTANT (ctor))\n \t  {\n@@ -5454,25 +5470,8 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\tTREE_OPERAND (*expr_p, 1) = build_vector_from_ctor (type, elts);\n \t\tbreak;\n \t      }\n-\n-\t    TREE_CONSTANT (ctor) = 0;\n \t  }\n \n-\t/* Vector types use CONSTRUCTOR all the way through gimple\n-\t   compilation as a general initializer.  */\n-\tFOR_EACH_VEC_SAFE_ELT (elts, ix, ce)\n-\t  {\n-\t    enum gimplify_status tret;\n-\t    tret = gimplify_expr (&ce->value, pre_p, post_p, is_gimple_val,\n-\t\t\t\t  fb_rvalue);\n-\t    if (tret == GS_ERROR)\n-\t      ret = GS_ERROR;\n-\t    else if (TREE_STATIC (ctor)\n-\t\t     && !initializer_constant_valid_p (ce->value,\n-\t\t\t\t\t\t       TREE_TYPE (ce->value)))\n-\t      TREE_STATIC (ctor) = 0;\n-\t  }\n-\trecompute_constructor_flags (ctor);\n \tif (!is_gimple_reg (TREE_OPERAND (*expr_p, 0)))\n \t  TREE_OPERAND (*expr_p, 1) = get_formal_tmp_var (ctor, pre_p);\n       }"}]}