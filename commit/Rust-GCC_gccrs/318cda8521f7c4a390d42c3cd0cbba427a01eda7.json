{"sha": "318cda8521f7c4a390d42c3cd0cbba427a01eda7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE4Y2RhODUyMWY3YzRhMzkwZDQyYzNjZDBjYmJhNDI3YTAxZWRhNw==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-08-20T01:10:56Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-08-20T01:10:56Z"}, "message": "re PR c/57490 (ICE on c-c++-common/cilk-plus/AN/an-if.c)\n\nFix for PR c/57490.\n\ngcc/c/ChangeLog\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       PR c/57490\n+       * c-array-notation.c (fix_conditional_array_notations_1): Added a\n+       check for truth values.\n+       (expand_array_notation_exprs): Added truth values case.  Removed an\n+       unwanted else.  Added for-loop to walk through subtrees in default\n+       case.\n+\n\ngcc/cp/ChangeLog\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       PR c/57490\n+       * cp-array-notation.c (cp_expand_cond_array_notations): Added a\n+       check for truth values.\n+       (expand_array_notation_exprs): Added truth values case.  Removed an\n+       unwanted else.  Added for-loop to walk through subtrees in default\n+       case.\n+       * call.c (build_cxx_call): Inherited the type of the array notation for\n+       certain built-in array notation functions.\n+\n\ngcc/testsuite/ChangeLog\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       PR c/57490\n+       * c-c++-common/cilk-plus/AN/pr57490.c: New test.\n+\n\nFrom-SVN: r201867", "tree": {"sha": "313e7fa61465ceac80856ae997ce3ae03f2e5254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/313e7fa61465ceac80856ae997ce3ae03f2e5254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/318cda8521f7c4a390d42c3cd0cbba427a01eda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318cda8521f7c4a390d42c3cd0cbba427a01eda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/318cda8521f7c4a390d42c3cd0cbba427a01eda7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318cda8521f7c4a390d42c3cd0cbba427a01eda7/comments", "author": null, "committer": null, "parents": [{"sha": "e42c64cb6dca35a4979db08706033d89b94f196f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42c64cb6dca35a4979db08706033d89b94f196f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42c64cb6dca35a4979db08706033d89b94f196f"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "6ce1398dd5bd4ce759fff6a4473d1935b0408578", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -1,3 +1,12 @@\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\t\n+\tPR c/57490\n+\t* c-array-notation.c (fix_conditional_array_notations_1): Added a\n+\tcheck for truth values.\n+\t(expand_array_notation_exprs): Added truth values case.  Removed an\n+\tunwanted else.  Added for-loop to walk through subtrees in default\n+\tcase.\n+\n 2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-objc-common.c (c_initialize_diagnostics): Don't call pp_base."}, {"sha": "5747bcb5ca84c1a3e0f0c5e41c33be958e598c1b", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -906,6 +906,8 @@ fix_conditional_array_notations_1 (tree stmt)\n     cond = COND_EXPR_COND (stmt);\n   else if (TREE_CODE (stmt) == SWITCH_EXPR)\n     cond = SWITCH_COND (stmt);\n+  else if (truth_value_p (TREE_CODE (stmt)))\n+    cond = TREE_OPERAND (stmt, 0);\n   else\n     /* Otherwise dont even touch the statement.  */\n     return stmt;\n@@ -1232,6 +1234,12 @@ expand_array_notation_exprs (tree t)\n     case BIND_EXPR:\n       t = expand_array_notation_exprs (BIND_EXPR_BODY (t));\n       return t;\n+    case TRUTH_ORIF_EXPR:\n+    case TRUTH_ANDIF_EXPR:\n+    case TRUTH_OR_EXPR:\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_XOR_EXPR:\n+    case TRUTH_NOT_EXPR:\n     case COND_EXPR:\n       t = fix_conditional_array_notations (t);\n \n@@ -1246,8 +1254,6 @@ expand_array_notation_exprs (tree t)\n \t    COND_EXPR_ELSE (t) =\n \t      expand_array_notation_exprs (COND_EXPR_ELSE (t));\n \t}\n-      else\n-\tt = expand_array_notation_exprs (t);\n       return t;\n     case STATEMENT_LIST:\n       {\n@@ -1284,6 +1290,10 @@ expand_array_notation_exprs (tree t)\n \t Replace those with just void zero node.  */\n       t = void_zero_node;\n     default:\n+      for (int ii = 0; ii < TREE_CODE_LENGTH (TREE_CODE (t)); ii++)\n+\tif (contains_array_notation_expr (TREE_OPERAND (t, ii)))\n+\t  TREE_OPERAND (t, ii) =\n+\t    expand_array_notation_exprs (TREE_OPERAND (t, ii));\n       return t;\n     }\n   return t;"}, {"sha": "d4099b0a28db9e113089ac84c32cd24948ccbe69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -1,3 +1,14 @@\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\tPR c/57490\n+\t* cp-array-notation.c (cp_expand_cond_array_notations): Added a\n+\tcheck for truth values.\n+\t(expand_array_notation_exprs): Added truth values case.  Removed an\n+\tunwanted else.  Added for-loop to walk through subtrees in default\n+\tcase.\n+\t* call.c (build_cxx_call): Inherited the type of the array notation for\n+\tcertain built-in array notation functions.\n+\n 2013-08-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* parser.c (cp_parser_lambda_introducer, cp_parser_decltype_expr):"}, {"sha": "df87d8f4d8d698d632a07ab9b40f1bd2e0791b1c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -7177,6 +7177,33 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n       && !check_builtin_function_arguments (fndecl, nargs, argarray))\n     return error_mark_node;\n \n+    /* If it is a built-in array notation function, then the return type of\n+     the function is the element type of the array passed in as array \n+     notation (i.e. the first parameter of the function).  */\n+  if (flag_enable_cilkplus && TREE_CODE (fn) == CALL_EXPR) \n+    {\n+      enum built_in_function bif = \n+\tis_cilkplus_reduce_builtin (CALL_EXPR_FN (fn));\n+      if (bif == BUILT_IN_CILKPLUS_SEC_REDUCE_ADD\n+\t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE_MUL\n+\t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE_MAX\n+\t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE_MIN\n+\t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE\n+\t  || bif == BUILT_IN_CILKPLUS_SEC_REDUCE_MUTATING)\n+\t{ \n+\t  /* for bif == BUILT_IN_CILKPLUS_SEC_REDUCE_ALL_ZERO or\n+\t     BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_ZERO or\n+\t     BUILT_IN_CILKPLUS_SEC_REDUCE_ANY_NONZERO or \n+\t     BUILT_IN_CILKPLUS_SEC_REDUCE_ALL_NONZERO or\n+\t     BUILT_IN_CILKPLUS_SEC_REDUCE_MIN_IND or\n+             BUILT_IN_CILKPLUS_SEC_REDUCE_MAX_IND\n+\t     The pre-defined return-type is the correct one.  */\n+\t  tree array_ntn = CALL_EXPR_ARG (fn, 0); \n+\t  TREE_TYPE (fn) = TREE_TYPE (array_ntn); \n+\t  return fn;\n+\t}\n+    }\n+\n   /* Some built-in function calls will be evaluated at compile-time in\n      fold ().  Set optimize to 1 when folding __builtin_constant_p inside\n      a constexpr function so that fold_builtin_1 doesn't fold it to 0.  */"}, {"sha": "f4581f01e57e2a2d47d45a33fea58ad3873a657e", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -857,6 +857,19 @@ cp_expand_cond_array_notations (tree orig_stmt)\n \t  return error_mark_node;\n \t}\n     }\n+  else if (truth_value_p (TREE_CODE (orig_stmt)))\n+    {\n+      size_t left_rank = 0, right_rank = 0;\n+      tree left_expr = TREE_OPERAND (orig_stmt, 0);\n+      tree right_expr = TREE_OPERAND (orig_stmt, 1);\n+      if (!find_rank (EXPR_LOCATION (left_expr), left_expr, left_expr, true,\n+\t\t      &left_rank)\n+\t  || !find_rank (EXPR_LOCATION (right_expr), right_expr, right_expr,\n+\t\t\t true, &right_rank))\n+\treturn error_mark_node;\n+      if (right_rank == 0 && left_rank == 0)\n+\treturn orig_stmt;\n+    }\n \n   if (!find_rank (EXPR_LOCATION (orig_stmt), orig_stmt, orig_stmt, true,\n \t\t  &rank))\n@@ -1213,6 +1226,12 @@ expand_array_notation_exprs (tree t)\n       if (TREE_OPERAND (t, 0) == error_mark_node)\n \treturn TREE_OPERAND (t, 0); \n       return t;\n+    case TRUTH_ANDIF_EXPR:\n+    case TRUTH_ORIF_EXPR:\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_OR_EXPR:\n+    case TRUTH_XOR_EXPR:\n+    case TRUTH_NOT_EXPR:\n     case COND_EXPR:\n       t = cp_expand_cond_array_notations (t);\n       if (TREE_CODE (t) == COND_EXPR)\n@@ -1222,8 +1241,6 @@ expand_array_notation_exprs (tree t)\n \t  COND_EXPR_ELSE (t) =\n \t    expand_array_notation_exprs (COND_EXPR_ELSE (t));\n \t}\n-      else\n-\tt = expand_array_notation_exprs (t);\n       return t;\n     case FOR_STMT:\n       if (contains_array_notation_expr (FOR_COND (t)))"}, {"sha": "f01cbc602f8f07132deb34073617dfd898c50e1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -1,3 +1,8 @@\n+2013-08-19  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\t\n+\tPR c/57490\n+\t* c-c++-common/cilk-plus/AN/pr57490.c: New test.\n+\n 2013-08-19  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* gcc.target/powerpc/dfp-dd-2.c: New test."}, {"sha": "db38b30b5f3124b7b0f27d6b944d07a969e21294", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57490.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57490.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/318cda8521f7c4a390d42c3cd0cbba427a01eda7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57490.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57490.c?ref=318cda8521f7c4a390d42c3cd0cbba427a01eda7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+const int n = 8;\n+float x[8], y[8], z[8];\n+int main() {\n+    int i = 0;\n+    float x_sum =0;\n+    for(i=1; i<=5; i+=4 ) {\n+        x[0:n] = 3;\n+        y[0:n] = i;\n+        z[0:n] = 0;\n+        (void)((__sec_reduce_add(x[0:n])==3*n) || (__builtin_abort (), 0));\n+        (void)((__sec_reduce_add(y[0:n])==i*n) || (__builtin_abort (), 0));\n+        (void)((__sec_reduce_add(z[0:n])==0) || (__builtin_abort (), 0));\n+\n+        if (x[0:n] >= y[0:n]) {\n+            z[0:n] = x[0:n] - y[0:n];\n+        } else {\n+            z[0:n] = x[0:n] + y[0:n];\n+        }\n+        (void)((__sec_reduce_add(x[0:n])==3*n) || (__builtin_abort (), 0));\n+        (void)((__sec_reduce_add(y[0:n])==i*n) || (__builtin_abort (), 0));\n+        (void)((__sec_reduce_add(z[0:n])==(3>=i?3-i:3+i)*n) \n+\t       || (__builtin_abort (), 0));\n+    }\n+    return 0;\n+}"}]}