{"sha": "b03e9863c9802d3c143c07613be95b0a91518e18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZTk4NjNjOTgwMmQzYzE0M2MwNzYxM2JlOTViMGE5MTUxOGUxOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-11-03T19:57:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-11-03T19:57:55Z"}, "message": "dwarf2asm.c (dw2_force_const_mem): Add new parameter 'public'.\n\n\t* dwarf2asm.c (dw2_force_const_mem): Add new parameter 'public'.\n\tOn USE_LINKONCE_INDIRECT platforms, build a DECL_ONE_ONLY indirect\n\treference only if 'public' is true.\n\t(dw2_output_indirect_constant_1): On USE_LINKONCE_INDIRECT platforms,\n\temit the .hidden directive only if the indirect reference is public.\n\t(dw2_asm_output_encoded_addr_rtx): Add new parameter 'public'.\n\tPass it to dw2_force_const_mem.\n\t* dwarf2asm.h (dw2_asm_output_encoded_addr_rtx): New param 'public'.\n\t* dwarf2out.c (output_cfi): Adjust calls to above function.\n\t(output_call_frame_info): Likewise.\n\t* except.c (output_ttype): Pass TREE_PUBLIC of the type_info object\n\tas 'public' argument to dw2_asm_output_encoded_addr_rtx.\n\nFrom-SVN: r106445", "tree": {"sha": "262c3cfc442253a7dd1a33f90c4f37cc51a23e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/262c3cfc442253a7dd1a33f90c4f37cc51a23e39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03e9863c9802d3c143c07613be95b0a91518e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03e9863c9802d3c143c07613be95b0a91518e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03e9863c9802d3c143c07613be95b0a91518e18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03e9863c9802d3c143c07613be95b0a91518e18/comments", "author": null, "committer": null, "parents": [{"sha": "a39041fae9f62c038e457f754c7578fb7e772dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39041fae9f62c038e457f754c7578fb7e772dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39041fae9f62c038e457f754c7578fb7e772dbb"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "2935b3274a40c4ca7ddf0a338e1a4d8382a6aa73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b03e9863c9802d3c143c07613be95b0a91518e18", "patch": "@@ -1,3 +1,18 @@\n+2005-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2asm.c (dw2_force_const_mem): Add new parameter 'public'.\n+\tOn USE_LINKONCE_INDIRECT platforms, build a DECL_ONE_ONLY indirect\n+\treference only if 'public' is true.\n+\t(dw2_output_indirect_constant_1): On USE_LINKONCE_INDIRECT platforms,\n+\temit the .hidden directive only if the indirect reference is public.\n+\t(dw2_asm_output_encoded_addr_rtx): Add new parameter 'public'.\n+\tPass it to dw2_force_const_mem.\n+\t* dwarf2asm.h (dw2_asm_output_encoded_addr_rtx): New param 'public'.\n+\t* dwarf2out.c (output_cfi): Adjust calls to above function.\n+\t(output_call_frame_info): Likewise.\n+\t* except.c (output_ttype): Pass TREE_PUBLIC of the type_info object\n+\tas 'public' argument to dw2_asm_output_encoded_addr_rtx.\n+\n 2005-11-03  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/24483"}, {"sha": "f4cd52be2d974edff49fabce723b3af866a05fa1", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=b03e9863c9802d3c143c07613be95b0a91518e18", "patch": "@@ -683,7 +683,7 @@ dw2_asm_output_delta_sleb128 (const char *lab1 ATTRIBUTE_UNUSED,\n }\n #endif /* 0 */\n \f\n-static rtx dw2_force_const_mem (rtx);\n+static rtx dw2_force_const_mem (rtx, bool);\n static int dw2_output_indirect_constant_1 (splay_tree_node, void *);\n \n static GTY((param1_is (char *), param2_is (tree))) splay_tree indirect_pool;\n@@ -699,10 +699,11 @@ static GTY(()) int dw2_const_labelno;\n /* Put X, a SYMBOL_REF, in memory.  Return a SYMBOL_REF to the allocated\n    memory.  Differs from force_const_mem in that a single pool is used for\n    the entire unit of translation, and the memory is not guaranteed to be\n-   \"near\" the function in any interesting sense.  */\n+   \"near\" the function in any interesting sense.  PUBLIC controls whether\n+   the symbol can be shared across the entire application (or DSO).  */\n \n static rtx\n-dw2_force_const_mem (rtx x)\n+dw2_force_const_mem (rtx x, bool public)\n {\n   splay_tree_node node;\n   const char *str;\n@@ -721,7 +722,7 @@ dw2_force_const_mem (rtx x)\n     {\n       tree id;\n \n-      if (USE_LINKONCE_INDIRECT)\n+      if (public && USE_LINKONCE_INDIRECT)\n \t{\n \t  char *ref_name = alloca (strlen (str) + sizeof \"DW.ref.\");\n \n@@ -768,12 +769,14 @@ dw2_output_indirect_constant_1 (splay_tree_node node,\n {\n   const char *sym;\n   rtx sym_ref;\n+  tree decl;\n \n   sym = (const char *) node->key;\n+  decl = (tree) node->value;\n   sym_ref = gen_rtx_SYMBOL_REF (Pmode, sym);\n-  if (USE_LINKONCE_INDIRECT)\n+  if (TREE_PUBLIC (decl) && USE_LINKONCE_INDIRECT)\n     fprintf (asm_out_file, \"\\t.hidden %sDW.ref.%s\\n\", user_label_prefix, sym);\n-  assemble_variable ((tree) node->value, 1, 1, 1);\n+  assemble_variable (decl, 1, 1, 1);\n   assemble_integer (sym_ref, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n   return 0;\n@@ -788,10 +791,12 @@ dw2_output_indirect_constants (void)\n     splay_tree_foreach (indirect_pool, dw2_output_indirect_constant_1, NULL);\n }\n \n-/* Like dw2_asm_output_addr_rtx, but encode the pointer as directed.  */\n+/* Like dw2_asm_output_addr_rtx, but encode the pointer as directed.\n+   If PUBLIC is set and the encoding is DW_EH_PE_indirect, the indirect\n+   reference is shared across the entire application (or DSO).  */\n \n void\n-dw2_asm_output_encoded_addr_rtx (int encoding, rtx addr,\n+dw2_asm_output_encoded_addr_rtx (int encoding, rtx addr, bool public,\n \t\t\t\t const char *comment, ...)\n {\n   int size;\n@@ -830,9 +835,9 @@ dw2_asm_output_encoded_addr_rtx (int encoding, rtx addr,\n \t  /* It is very tempting to use force_const_mem so that we share data\n \t     with the normal constant pool.  However, we've already emitted\n \t     the constant pool for this function.  Moreover, we'd like to\n-\t     share these constants across the entire unit of translation,\n-\t     or better, across the entire application (or DSO).  */\n-\t  addr = dw2_force_const_mem (addr);\n+\t     share these constants across the entire unit of translation and\n+\t     even, if possible, across the entire application (or DSO).  */\n+\t  addr = dw2_force_const_mem (addr, public);\n \t  encoding &= ~DW_EH_PE_indirect;\n \t  goto restart;\n \t}"}, {"sha": "c57e3e94b6c728828c3c05adf781d855dd551083", "filename": "gcc/dwarf2asm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.h?ref=b03e9863c9802d3c143c07613be95b0a91518e18", "patch": "@@ -38,9 +38,9 @@ extern void dw2_asm_output_addr (int, const char *, const char *, ...)\n extern void dw2_asm_output_addr_rtx (int, rtx, const char *, ...)\n      ATTRIBUTE_NULL_PRINTF_3;\n \n-extern void dw2_asm_output_encoded_addr_rtx (int, rtx,\n+extern void dw2_asm_output_encoded_addr_rtx (int, rtx, bool,\n \t\t\t\t\t     const char *, ...)\n-     ATTRIBUTE_NULL_PRINTF_3;\n+     ATTRIBUTE_NULL_PRINTF_4;\n \n extern void dw2_asm_output_nstring (const char *, size_t,\n \t\t\t\t    const char *, ...)"}, {"sha": "d0520b5811f2b2cca057e03f53e858d3d0149237", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b03e9863c9802d3c143c07613be95b0a91518e18", "patch": "@@ -2005,7 +2005,7 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \t    dw2_asm_output_encoded_addr_rtx (\n \t\tASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1, /*global=*/0),\n \t\tgen_rtx_SYMBOL_REF (Pmode, cfi->dw_cfi_oprnd1.dw_cfi_addr),\n-\t\tNULL);\n+\t\tfalse, NULL);\n \t  else\n \t    dw2_asm_output_addr (DWARF2_ADDR_SIZE,\n \t\t\t\t cfi->dw_cfi_oprnd1.dw_cfi_addr, NULL);\n@@ -2261,7 +2261,8 @@ output_call_frame_info (int for_eh)\n \t  dw2_asm_output_data (1, per_encoding, \"Personality (%s)\",\n \t\t\t       eh_data_format_name (per_encoding));\n \t  dw2_asm_output_encoded_addr_rtx (per_encoding,\n-\t\t\t\t\t   eh_personality_libfunc, NULL);\n+\t\t\t\t\t   eh_personality_libfunc,\n+\t\t\t\t\t   true, NULL);\n \t}\n \n       if (any_lsda_needed)\n@@ -2313,6 +2314,7 @@ output_call_frame_info (int for_eh)\n \t  SYMBOL_REF_FLAGS (sym_ref) |= SYMBOL_FLAG_LOCAL;\n \t  dw2_asm_output_encoded_addr_rtx (fde_encoding,\n \t\t\t\t\t   sym_ref,\n+\t\t\t\t\t   false,\n \t\t\t\t\t   \"FDE initial location\");\n \t  if (fde->dw_fde_switched_sections)\n \t    {\n@@ -2322,13 +2324,13 @@ output_call_frame_info (int for_eh)\n \t\t\t\t      fde->dw_fde_hot_section_label);\n \t      SYMBOL_REF_FLAGS (sym_ref2) |= SYMBOL_FLAG_LOCAL;\n \t      SYMBOL_REF_FLAGS (sym_ref3) |= SYMBOL_FLAG_LOCAL;\n-\t      dw2_asm_output_encoded_addr_rtx (fde_encoding, sym_ref3,\n+\t      dw2_asm_output_encoded_addr_rtx (fde_encoding, sym_ref3, false,\n \t\t\t\t\t       \"FDE initial location\");\n \t      dw2_asm_output_delta (size_of_encoded_value (fde_encoding),\n \t\t\t\t    fde->dw_fde_hot_section_end_label,\n \t\t\t\t    fde->dw_fde_hot_section_label,\n \t\t\t\t    \"FDE address range\");\n-\t      dw2_asm_output_encoded_addr_rtx (fde_encoding, sym_ref2,\n+\t      dw2_asm_output_encoded_addr_rtx (fde_encoding, sym_ref2, false,\n \t\t\t\t\t       \"FDE initial location\");\n \t      dw2_asm_output_delta (size_of_encoded_value (fde_encoding),\n \t\t\t\t    fde->dw_fde_unlikely_section_end_label,\n@@ -2393,7 +2395,7 @@ output_call_frame_info (int for_eh)\n \t\t\t\t\t       fde->funcdef_number);\n \t\t  dw2_asm_output_encoded_addr_rtx (\n \t\t\tlsda_encoding, gen_rtx_SYMBOL_REF (Pmode, l1),\n-\t\t\t\"Language Specific Data Area\");\n+\t\t\tfalse, \"Language Specific Data Area\");\n \t\t}\n \t      else\n \t\t{"}, {"sha": "34dddfeacbf9d57e590db2bd38c7220d952c1a16", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03e9863c9802d3c143c07613be95b0a91518e18/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b03e9863c9802d3c143c07613be95b0a91518e18", "patch": "@@ -3463,6 +3463,7 @@ static void\n output_ttype (tree type, int tt_format, int tt_format_size)\n {\n   rtx value;\n+  bool public = true;\n \n   if (type == NULL_TREE)\n     value = const0_rtx;\n@@ -3485,6 +3486,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n \t      node = cgraph_varpool_node (type);\n \t      if (node)\n \t\tcgraph_varpool_mark_needed_node (node);\n+\t      public = TREE_PUBLIC (type);\n \t    }\n \t}\n       else if (TREE_CODE (type) != INTEGER_CST)\n@@ -3499,7 +3501,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n     assemble_integer (value, tt_format_size,\n \t\t      tt_format_size * BITS_PER_UNIT, 1);\n   else\n-    dw2_asm_output_encoded_addr_rtx (tt_format, value, NULL);\n+    dw2_asm_output_encoded_addr_rtx (tt_format, value, public, NULL);\n }\n \n void"}]}