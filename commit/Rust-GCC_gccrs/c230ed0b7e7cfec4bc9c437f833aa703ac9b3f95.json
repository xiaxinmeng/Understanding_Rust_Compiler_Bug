{"sha": "c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzMGVkMGI3ZTdjZmVjNGJjOWM0MzdmODMzYWE3MDNhYzliM2Y5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T10:49:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T10:49:33Z"}, "message": "[multiple changes]\n\n2014-06-11  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_util.adb: Minor typo fix.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Check_References): Do not emit spurious warnings\n\ton uninitialzed variable of a formal private type if variable\n\tis not read.\n\nFrom-SVN: r211446", "tree": {"sha": "009cd08a126d59c813644336bd154928f17e5ba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009cd08a126d59c813644336bd154928f17e5ba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/comments", "author": null, "committer": null, "parents": [{"sha": "83f14a64efe8bc80360892e9de824644a74d84fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f14a64efe8bc80360892e9de824644a74d84fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f14a64efe8bc80360892e9de824644a74d84fd"}], "stats": {"total": 347, "additions": 160, "deletions": 187}, "files": [{"sha": "0a404e082c4e5629992cab715c81d371bce073a7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "patch": "@@ -1,3 +1,13 @@\n+2014-06-11  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb: Minor typo fix.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Do not emit spurious warnings\n+\ton uninitialzed variable of a formal private type if variable\n+\tis not read.\n+\n 2014-06-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc-interface/utils.c (process_attributes) <ATTR_LINK_SECTION>: Use"}, {"sha": "ba472b91b8d27695b44e87b57915a308cc6a14f9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "patch": "@@ -687,9 +687,9 @@ package body Sem_Util is\n       end if;\n    end Bad_Predicated_Subtype_Use;\n \n-   ----------------------------------------\n+   -----------------------------------------\n    -- Bad_Unordered_Enumeration_Reference --\n-   ----------------------------------------\n+   -----------------------------------------\n \n    function Bad_Unordered_Enumeration_Reference\n      (N : Node_Id;\n@@ -15908,7 +15908,7 @@ package body Sem_Util is\n       --  Remaining checks are only done on source nodes. Note that we test\n       --  for violation of No_Fixed_IO even on non-source nodes, because the\n       --  cases for checking violations of this restriction are instantiations\n-      --  where the refernece in the instance has Comes_From_Source False.\n+      --  where the reference in the instance has Comes_From_Source False.\n \n       if not Comes_From_Source (N) then\n          return;"}, {"sha": "285959908a4123195dd4100be575e19ddd8b213e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 147, "deletions": 184, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=c230ed0b7e7cfec4bc9c437f833aa703ac9b3f95", "patch": "@@ -327,9 +327,7 @@ package body Sem_Warn is\n             begin\n                --  One argument, so check the argument\n \n-               if Present (PA)\n-                 and then List_Length (PA) = 1\n-               then\n+               if Present (PA) and then List_Length (PA) = 1 then\n                   if Nkind (First (PA)) = N_Parameter_Association then\n                      Find_Var (Explicit_Actual_Parameter (First (PA)));\n                   else\n@@ -415,9 +413,7 @@ package body Sem_Warn is\n          begin\n             for J in 1 .. Name_Len - (Len - 1) loop\n                if Name_Buffer (J .. J + (Len - 1)) = S\n-                 and then\n-                   (J = 1\n-                     or else Name_Buffer (J - 1) not in 'a' .. 'z')\n+                 and then (J = 1 or else Name_Buffer (J - 1) not in 'a' .. 'z')\n                  and then\n                    (J + Len > Name_Len\n                      or else Name_Buffer (J + Len) not in 'a' .. 'z')\n@@ -841,8 +837,8 @@ package body Sem_Warn is\n             Res := True;\n \n          elsif (Nkind (Par)) = N_Formal_Type_Declaration\n-           and then Nkind (Formal_Type_Definition (Par))\n-              = N_Formal_Private_Type_Definition\n+           and then Nkind (Formal_Type_Definition (Par)) =\n+                                         N_Formal_Private_Type_Definition\n          then\n             Set_Needs_Initialized_Actual (Formal_Type_Definition (Par));\n             Res := True;\n@@ -984,8 +980,8 @@ package body Sem_Warn is\n                when N_Generic_Package_Declaration =>\n                   return\n                     not Is_List_Member (Prev)\n-                      or else List_Containing (Prev)\n-                        /= Generic_Formal_Declarations (P);\n+                      or else List_Containing (Prev) /=\n+                                            Generic_Formal_Declarations (P);\n \n                --  Similarly, the generic formals of a generic subprogram are\n                --  not accessible.\n@@ -1051,9 +1047,7 @@ package body Sem_Warn is\n       --  real errors so far (this last check avoids junk messages resulting\n       --  from errors, e.g. a subunit that is not loaded).\n \n-      if Warning_Mode = Suppress\n-        or else Serious_Errors_Detected /= 0\n-      then\n+      if Warning_Mode = Suppress or else Serious_Errors_Detected /= 0 then\n          return;\n       end if;\n \n@@ -1101,9 +1095,8 @@ package body Sem_Warn is\n \n                --  Special processing for access types\n \n-               if Present (UR)\n-                 and then Is_Access_Type (E1T)\n-               then\n+               if Present (UR) and then Is_Access_Type (E1T) then\n+\n                   --  For access types, the only time we made a UR entry was\n                   --  for a dereference, and so we post the appropriate warning\n                   --  here (note that the dereference may not be explicit in\n@@ -1125,7 +1118,7 @@ package body Sem_Warn is\n \n                elsif Warn_On_Constant\n                  and then (Ekind (E1) = E_Variable\n-                             and then Has_Initial_Value (E1))\n+                            and then Has_Initial_Value (E1))\n                  and then Never_Set_In_Source_Check_Spec (E1)\n                  and then not Address_Taken (E1)\n                  and then not Generic_Package_Spec_Entity (E1)\n@@ -1173,35 +1166,35 @@ package body Sem_Warn is\n \n                elsif Never_Set_In_Source_Check_Spec (E1)\n \n-                  --  No warning if warning for this case turned off\n+                 --  No warning if warning for this case turned off\n \n-                  and then Warn_On_No_Value_Assigned\n+                 and then Warn_On_No_Value_Assigned\n \n-                  --  No warning if address taken somewhere\n+                 --  No warning if address taken somewhere\n \n-                  and then not Address_Taken (E1)\n+                 and then not Address_Taken (E1)\n \n-                  --  No warning if explicit initial value\n+                 --  No warning if explicit initial value\n \n-                  and then not Has_Initial_Value (E1)\n+                 and then not Has_Initial_Value (E1)\n \n-                  --  No warning for generic package spec entities, since we\n-                  --  might set them in a child unit or something like that\n+                 --  No warning for generic package spec entities, since we\n+                 --  might set them in a child unit or something like that\n \n-                  and then not Generic_Package_Spec_Entity (E1)\n+                 and then not Generic_Package_Spec_Entity (E1)\n \n-                  --  No warning if fully initialized type, except that for\n-                  --  this purpose we do not consider access types to qualify\n-                  --  as fully initialized types (relying on an access type\n-                  --  variable being null when it is never set is a bit odd).\n+                 --  No warning if fully initialized type, except that for\n+                 --  this purpose we do not consider access types to qualify\n+                 --  as fully initialized types (relying on an access type\n+                 --  variable being null when it is never set is a bit odd).\n \n-                  --  Also we generate warning for an out parameter that is\n-                  --  never referenced, since again it seems odd to rely on\n-                  --  default initialization to set an out parameter value.\n+                 --  Also we generate warning for an out parameter that is\n+                 --  never referenced, since again it seems odd to rely on\n+                 --  default initialization to set an out parameter value.\n \n-                 and then (Is_Access_Type (E1T)\n-                            or else Ekind (E1) = E_Out_Parameter\n-                            or else not Is_Fully_Initialized_Type (E1T))\n+                and then (Is_Access_Type (E1T)\n+                           or else Ekind (E1) = E_Out_Parameter\n+                           or else not Is_Fully_Initialized_Type (E1T))\n                then\n                   --  Do not output complaint about never being assigned a\n                   --  value if a pragma Unmodified applies to the variable\n@@ -1321,7 +1314,6 @@ package body Sem_Warn is\n                      elsif not Has_Unreferenced (E1)\n                        and then not Warnings_Off_E1\n                        and then not Is_Junk_Name (Chars (E1))\n-                       and then not May_Need_Initialized_Actual (E1)\n                      then\n                         Output_Reference_Error -- CODEFIX\n                           (\"?v?variable& is never read and never assigned!\");\n@@ -1460,134 +1452,125 @@ package body Sem_Warn is\n \n             if not Referenced_Check_Spec (E1)\n \n-               --  If Referenced_As_LHS is set, then that's still interesting\n-               --  (potential \"assigned but never read\" case), but not if we\n-               --  have pragma Unreferenced, which cancels this warning.\n+              --  If Referenced_As_LHS is set, then that's still interesting\n+              --  (potential \"assigned but never read\" case), but not if we\n+              --  have pragma Unreferenced, which cancels this warning.\n \n               and then (not Referenced_As_LHS_Check_Spec (E1)\n-                          or else not Has_Unreferenced (E1))\n+                         or else not Has_Unreferenced (E1))\n \n-               --  Check that warnings on unreferenced entities are enabled\n+              --  Check that warnings on unreferenced entities are enabled\n \n               and then\n                 ((Check_Unreferenced and then not Is_Formal (E1))\n \n-                     --  Case of warning on unreferenced formal\n-\n-                     or else\n-                      (Check_Unreferenced_Formals and then Is_Formal (E1))\n-\n-                     --  Case of warning on unread variables modified by an\n-                     --  assignment, or an OUT parameter if it is the only one.\n-\n-                     or else\n-                       (Warn_On_Modified_Unread\n-                          and then Referenced_As_LHS_Check_Spec (E1))\n-\n-                     --  Case of warning on any unread OUT parameter (note\n-                     --  such indications are only set if the appropriate\n-                     --  warning options were set, so no need to recheck here.)\n-\n-                     or else\n-                       Referenced_As_Out_Parameter_Check_Spec (E1))\n-\n-               --  All other entities, including local packages that cannot be\n-               --  referenced from elsewhere, including those declared within a\n-               --  package body.\n-\n-               and then (Is_Object (E1)\n-                           or else\n-                         Is_Type (E1)\n-                           or else\n-                         Ekind (E1) = E_Label\n-                           or else\n-                         Ekind (E1) = E_Exception\n-                           or else\n-                         Ekind (E1) = E_Named_Integer\n-                           or else\n-                         Ekind (E1) = E_Named_Real\n-                           or else\n-                         Is_Overloadable (E1)\n-\n-                           --  Package case, if the main unit is a package spec\n-                           --  or generic package spec, then there may be a\n-                           --  corresponding body that references this package\n-                           --  in some other file. Otherwise we can be sure\n-                           --  that there is no other reference.\n-\n-                           or else\n-                             (Ekind (E1) = E_Package\n-                                and then\n-                                  not Is_Package_Or_Generic_Package\n-                                        (Cunit_Entity (Current_Sem_Unit))))\n+                  --  Case of warning on unreferenced formal\n+\n+                  or else (Check_Unreferenced_Formals and then Is_Formal (E1))\n+\n+                  --  Case of warning on unread variables modified by an\n+                  --  assignment, or an OUT parameter if it is the only one.\n+\n+                  or else (Warn_On_Modified_Unread\n+                            and then Referenced_As_LHS_Check_Spec (E1))\n+\n+                  --  Case of warning on any unread OUT parameter (note such\n+                  --  indications are only set if the appropriate warning\n+                  --  options were set, so no need to recheck here.)\n+\n+                  or else Referenced_As_Out_Parameter_Check_Spec (E1))\n+\n+              --  All other entities, including local packages that cannot be\n+              --  referenced from elsewhere, including those declared within a\n+              --  package body.\n+\n+              and then (Is_Object (E1)\n+                         or else Is_Type (E1)\n+                         or else Ekind (E1) = E_Label\n+                         or else Ekind_In (E1, E_Exception,\n+                                               E_Named_Integer,\n+                                               E_Named_Real)\n+                         or else Is_Overloadable (E1)\n \n-               --  Exclude instantiations, since there is no reason why every\n-               --  entity in an instantiation should be referenced.\n+                         --  Package case, if the main unit is a package spec\n+                         --  or generic package spec, then there may be a\n+                         --  corresponding body that references this package\n+                         --  in some other file. Otherwise we can be sure\n+                         --  that there is no other reference.\n \n-               and then Instantiation_Location (Sloc (E1)) = No_Location\n+                         or else\n+                           (Ekind (E1) = E_Package\n+                             and then\n+                               not Is_Package_Or_Generic_Package\n+                                     (Cunit_Entity (Current_Sem_Unit))))\n \n-               --  Exclude formal parameters from bodies if the corresponding\n-               --  spec entity has been referenced in the case where there is\n-               --  a separate spec.\n+              --  Exclude instantiations, since there is no reason why every\n+              --  entity in an instantiation should be referenced.\n \n-               and then not (Is_Formal (E1)\n-                              and then Ekind (Scope (E1)) = E_Subprogram_Body\n-                              and then Present (Spec_Entity (E1))\n-                              and then Referenced (Spec_Entity (E1)))\n+              and then Instantiation_Location (Sloc (E1)) = No_Location\n \n-               --  Consider private type referenced if full view is referenced.\n-               --  If there is not full view, this is a generic type on which\n-               --  warnings are also useful.\n+              --  Exclude formal parameters from bodies if the corresponding\n+              --  spec entity has been referenced in the case where there is\n+              --  a separate spec.\n \n-               and then\n-                 not (Is_Private_Type (E1)\n-                       and then Present (Full_View (E1))\n-                       and then Referenced (Full_View (E1)))\n+              and then not (Is_Formal (E1)\n+                             and then Ekind (Scope (E1)) = E_Subprogram_Body\n+                             and then Present (Spec_Entity (E1))\n+                             and then Referenced (Spec_Entity (E1)))\n \n-               --  Don't worry about full view, only about private type\n+              --  Consider private type referenced if full view is referenced.\n+              --  If there is not full view, this is a generic type on which\n+              --  warnings are also useful.\n \n-               and then not Has_Private_Declaration (E1)\n+              and then\n+                not (Is_Private_Type (E1)\n+                      and then Present (Full_View (E1))\n+                      and then Referenced (Full_View (E1)))\n+\n+              --  Don't worry about full view, only about private type\n \n-               --  Eliminate dispatching operations from consideration, we\n-               --  cannot tell if these are referenced or not in any easy\n-               --  manner (note this also catches Adjust/Finalize/Initialize).\n+              and then not Has_Private_Declaration (E1)\n \n-               and then not Is_Dispatching_Operation (E1)\n+              --  Eliminate dispatching operations from consideration, we\n+              --  cannot tell if these are referenced or not in any easy\n+              --  manner (note this also catches Adjust/Finalize/Initialize).\n \n-               --  Check entity that can be publicly referenced (we do not give\n-               --  messages for such entities, since there could be other\n-               --  units, not involved in this compilation, that contain\n-               --  relevant references.\n+              and then not Is_Dispatching_Operation (E1)\n \n-               and then not Publicly_Referenceable (E1)\n+              --  Check entity that can be publicly referenced (we do not give\n+              --  messages for such entities, since there could be other\n+              --  units, not involved in this compilation, that contain\n+              --  relevant references.\n+\n+              and then not Publicly_Referenceable (E1)\n \n-               --  Class wide types are marked as source entities, but they are\n-               --  not really source entities, and are always created, so we do\n-               --  not care if they are not referenced.\n+              --  Class wide types are marked as source entities, but they are\n+              --  not really source entities, and are always created, so we do\n+              --  not care if they are not referenced.\n \n-               and then Ekind (E1) /= E_Class_Wide_Type\n+              and then Ekind (E1) /= E_Class_Wide_Type\n \n-               --  Objects other than parameters of task types are allowed to\n-               --  be non-referenced, since they start up tasks.\n+              --  Objects other than parameters of task types are allowed to\n+              --  be non-referenced, since they start up tasks.\n \n-               and then ((Ekind (E1) /= E_Variable\n-                           and then Ekind (E1) /= E_Constant\n-                           and then Ekind (E1) /= E_Component)\n-                          or else not Is_Task_Type (E1T))\n+              and then ((Ekind (E1) /= E_Variable\n+                          and then Ekind (E1) /= E_Constant\n+                          and then Ekind (E1) /= E_Component)\n+                         or else not Is_Task_Type (E1T))\n \n-               --  For subunits, only place warnings on the main unit itself,\n-               --  since parent units are not completely compiled.\n+              --  For subunits, only place warnings on the main unit itself,\n+              --  since parent units are not completely compiled.\n \n-               and then (Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit\n-                          or else Get_Source_Unit (E1) = Main_Unit)\n+              and then (Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit\n+                         or else Get_Source_Unit (E1) = Main_Unit)\n \n-               --  No warning on a return object, because these are often\n-               --  created with a single expression and an implicit return.\n-               --  If the object is a variable there will be a warning\n-               --  indicating that it could be declared constant.\n+              --  No warning on a return object, because these are often\n+              --  created with a single expression and an implicit return.\n+              --  If the object is a variable there will be a warning\n+              --  indicating that it could be declared constant.\n \n-               and then not\n-                 (Ekind (E1) = E_Constant and then Is_Return_Object (E1))\n+              and then not\n+                (Ekind (E1) = E_Constant and then Is_Return_Object (E1))\n             then\n                --  Suppress warnings in internal units if not in -gnatg mode\n                --  (these would be junk warnings for an applications program,\n@@ -1648,10 +1631,10 @@ package body Sem_Warn is\n \n          <<Continue>>\n             if (Is_Package_Or_Generic_Package (E1)\n-                  and then Nkind (Parent (E1)) = N_Package_Specification\n-                  and then\n-                    Nkind (Original_Node (Unit_Declaration_Node (E1)))\n-                      /= N_Formal_Package_Declaration)\n+                 and then Nkind (Parent (E1)) = N_Package_Specification\n+                 and then\n+                   Nkind (Original_Node (Unit_Declaration_Node (E1))) /=\n+                                                N_Formal_Package_Declaration)\n \n               or else Ekind (E1) = E_Block\n             then\n@@ -1770,9 +1753,7 @@ package body Sem_Warn is\n                E : constant Entity_Id := Entity (N);\n \n             begin\n-               if (Ekind (E) = E_Variable\n-                     or else\n-                   Ekind (E) = E_Out_Parameter)\n+               if Ekind_In (E, E_Variable, E_Out_Parameter)\n                  and then Never_Set_In_Source_Check_Spec (E)\n                  and then not Has_Initial_Value (E)\n                  and then (No (Unset_Reference (E))\n@@ -1860,10 +1841,8 @@ package body Sem_Warn is\n                               P := Parent (Nod);\n \n                               if Nkind (P) = N_Pragma\n-                                and then\n-                                  Pragma_Name (P) = Name_Test_Case\n-                                and then\n-                                  Nod = Get_Ensures_From_CTC_Pragma (P)\n+                                and then Pragma_Name (P) = Name_Test_Case\n+                                and then Nod = Get_Ensures_From_CTC_Pragma (P)\n                               then\n                                  return True;\n                               end if;\n@@ -1977,10 +1956,8 @@ package body Sem_Warn is\n                               P := Parent (P);\n                               exit when No (P);\n \n-                              if (Nkind (P) = N_If_Statement\n-                                     or else\n-                                   Nkind (P) = N_Elsif_Part)\n-                                 and then Ref_In (Condition (P))\n+                              if Nkind_In (P, N_If_Statement, N_Elsif_Part)\n+                                and then Ref_In (Condition (P))\n                               then\n                                  return;\n \n@@ -2272,9 +2249,7 @@ package body Sem_Warn is\n \n             E1 := First_Entity (P);\n             while Present (E1) loop\n-               if Ekind (E1) = E_Package\n-                  and then Renamed_Object (E1) = L\n-               then\n+               if Ekind (E1) = E_Package and then Renamed_Object (E1) = L then\n                   Is_Visible_Renaming := not Is_Hidden (E1);\n                   return E1;\n \n@@ -2321,12 +2296,8 @@ package body Sem_Warn is\n                E := First_Entity (P);\n             end if;\n \n-            while Present (E)\n-              and then E /= First_Private_Entity (P)\n-            loop\n-               if Comes_From_Source (E)\n-                 or else Present (Limited_View (P))\n-               then\n+            while Present (E) and then E /= First_Private_Entity (P) loop\n+               if Comes_From_Source (E) or else Present (Limited_View (P)) then\n                   return True;\n                end if;\n \n@@ -2364,16 +2335,15 @@ package body Sem_Warn is\n          Item := First (Context_Items (Cnode));\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause\n-               and then not Implicit_With (Item)\n-               and then In_Extended_Main_Source_Unit (Item)\n+              and then not Implicit_With (Item)\n+              and then In_Extended_Main_Source_Unit (Item)\n             then\n                Lunit := Entity (Name (Item));\n \n                --  Check if this unit is referenced (skip the check if this\n                --  is explicitly marked by a pragma Unreferenced).\n \n-               if not Referenced (Lunit)\n-                 and then not Has_Unreferenced (Lunit)\n+               if not Referenced (Lunit) and then not Has_Unreferenced (Lunit)\n                then\n                   --  Suppress warnings in internal units if not in -gnatg mode\n                   --  (these would be junk warnings for an application program,\n@@ -2688,9 +2658,7 @@ package body Sem_Warn is\n \n    function Goto_Spec_Entity (E : Entity_Id) return Entity_Id is\n    begin\n-      if Is_Formal (E)\n-        and then Present (Spec_Entity (E))\n-      then\n+      if Is_Formal (E) and then Present (Spec_Entity (E)) then\n          return Spec_Entity (E);\n       else\n          return E;\n@@ -3217,9 +3185,7 @@ package body Sem_Warn is\n             Track (Left_Opnd (Nod), Loc);\n             Track (Right_Opnd (Nod), Loc);\n \n-         elsif Is_Entity_Name (Nod)\n-           and then Is_Object (Entity (Nod))\n-         then\n+         elsif Is_Entity_Name (Nod) and then Is_Object (Entity (Nod)) then\n             declare\n                CV : constant Node_Id := Current_Value (Entity (Nod));\n \n@@ -3343,8 +3309,7 @@ package body Sem_Warn is\n                Cond        : Node_Id := C;\n \n             begin\n-               if Present (Parent (C))\n-                 and then Nkind (Parent (C)) = N_Op_Not\n+               if Present (Parent (C)) and then Nkind (Parent (C)) = N_Op_Not\n                then\n                   True_Branch := not True_Branch;\n                   Cond        := Parent (C);\n@@ -3479,9 +3444,9 @@ package body Sem_Warn is\n                     Present (Underlying_Type (Etype (Form1)))\n                       and then\n                         (Is_By_Reference_Type (Underlying_Type (Etype (Form1)))\n-                           or else\n-                             Convention (Underlying_Type (Etype (Form1))) =\n-                               Convention_Ada_Pass_By_Reference)\n+                          or else\n+                            Convention (Underlying_Type (Etype (Form1))) =\n+                                              Convention_Ada_Pass_By_Reference)\n                   then\n                      null;\n \n@@ -3673,9 +3638,9 @@ package body Sem_Warn is\n          begin\n             return\n               Nkind (R) = N_Attribute_Reference\n-               and then Attribute_Name (R) = Name_Length\n-               and then Is_Entity_Name (Prefix (R))\n-               and then Entity (Prefix (R)) = Ent;\n+                and then Attribute_Name (R) = Name_Length\n+                and then Is_Entity_Name (Prefix (R))\n+                and then Entity (Prefix (R)) = Ent;\n          end Length_Reference;\n \n          -----------\n@@ -3777,7 +3742,7 @@ package body Sem_Warn is\n \n                      exit when Pctr = 0\n                        and then (Tref (Sref .. Sref + 1) = \"..\"\n-                                  or else\n+                                   or else\n                                  Tref (Sref .. Sref + 2) = \" ..\");\n \n                      --  Quit if we have hit EOF character, something wrong\n@@ -4132,9 +4097,7 @@ package body Sem_Warn is\n          --  is not quite right, but it really does not matter that we fail\n          --  to output the warning in some obscure cases of name clashes.\n \n-         if Nkind (N) = N_Identifier\n-           and then Chars (N) = Chars (Ent)\n-         then\n+         if Nkind (N) = N_Identifier and then Chars (N) = Chars (Ent) then\n             return Abandon;\n          else\n             return OK;"}]}