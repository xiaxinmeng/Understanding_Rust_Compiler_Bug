{"sha": "e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwMGYyMTk4ZjdkY2RiZGFkMmQ0NjlhM2Q0OThmNmRiYWZiNDQ2OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-23T14:40:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-23T14:40:05Z"}, "message": "re PR tree-optimization/78396 (gcc.dg/vect/bb-slp-cond-1.c FAILs after fix for PR77848)\n\n2016-11-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78396\n\t* tree-vectorizer.c (vectorize_loops): If an innermost loop didn't\n\tvectorize try vectorizing an if-converted body using BB vectorization.\n\n\t* gcc.dg/vect/bb-slp-cond-1.c: Adjust.\n\nFrom-SVN: r242759", "tree": {"sha": "b78ada2a6538f446a7584ca6ebf21c4d3f9ea03d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b78ada2a6538f446a7584ca6ebf21c4d3f9ea03d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07ce14666601681f7638e8e955740566ce3386ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ce14666601681f7638e8e955740566ce3386ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ce14666601681f7638e8e955740566ce3386ec"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "a5f757c4e172c20c4b9bbe36e33ce8a54732b24c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78396\n+\t* tree-vectorizer.c (vectorize_loops): If an innermost loop didn't\n+\tvectorize try vectorizing an if-converted body using BB vectorization.\n+\n 2016-11-23  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7bdb38ac14209c3b36a37310b05121dc4989ab4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78396\n+\t* gcc.dg/vect/bb-slp-cond-1.c: Adjust.\n+\n 2016-11-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78482"}, {"sha": "ddad85374b615d7fe3e1e3d411f139c0160e713c", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-cond-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-cond-1.c?ref=e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_condition } */\n+/* { dg-additional-options \"-fdump-tree-vect-details\" } */\n \n #include \"tree-vect.h\"\n \n@@ -41,5 +42,10 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp1\" { target vect_element_align } } } */\n+/* Basic blocks of if-converted loops are vectorized from within the loop\n+   vectorizer pass.  In this case it is really a deficiency in loop\n+   vectorization data dependence analysis that causes us to require\n+   basic block vectorization in the first place.  */\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"vect\" { target vect_element_align } } } */\n "}, {"sha": "b3906643b8f6506b8fad6b5b014e02b4a0476fb0", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e600f2198f7dcdbdad2d469a3d498f6dbafb4468/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=e600f2198f7dcdbdad2d469a3d498f6dbafb4468", "patch": "@@ -540,6 +540,7 @@ vectorize_loops (void)\n \t     || loop->force_vectorize)\n       {\n \tloop_vec_info loop_vinfo, orig_loop_vinfo = NULL;\n+\tgimple *loop_vectorized_call = vect_loop_vectorized_call (loop);\n vectorize_epilogue:\n \tvect_location = find_loop_location (loop);\n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION\n@@ -558,6 +559,33 @@ vectorize_loops (void)\n \t    if (loop_constraint_set_p (loop, LOOP_C_FINITE))\n \t      vect_free_loop_info_assumptions (loop);\n \n+\t    /* If we applied if-conversion then try to vectorize the\n+\t       BB of innermost loops.\n+\t       ???  Ideally BB vectorization would learn to vectorize\n+\t       control flow by applying if-conversion on-the-fly, the\n+\t       following retains the if-converted loop body even when\n+\t       only non-if-converted parts took part in BB vectorization.  */\n+\t    if (flag_tree_slp_vectorize != 0\n+\t\t&& loop_vectorized_call\n+\t\t&& ! loop->inner)\n+\t      {\n+\t\tbasic_block bb = loop->header;\n+\t\tfor (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n+\t\t     !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\t  {\n+\t\t    gimple *stmt = gsi_stmt (gsi);\n+\t\t    gimple_set_uid (stmt, -1);\n+\t\t    gimple_set_visited (stmt, false);\n+\t\t  }\n+\t\tif (vect_slp_bb (bb))\n+\t\t  {\n+\t\t    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+\t\t\t\t     \"basic block vectorized\\n\");\n+\t\t    fold_loop_vectorized_call (loop_vectorized_call,\n+\t\t\t\t\t       boolean_true_node);\n+\t\t    ret |= TODO_cleanup_cfg;\n+\t\t  }\n+\t      }\n \t    continue;\n \t  }\n \n@@ -575,7 +603,6 @@ vectorize_loops (void)\n \t    break;\n \t  }\n \n-\tgimple *loop_vectorized_call = vect_loop_vectorized_call (loop);\n \tif (loop_vectorized_call)\n \t  set_uid_loop_bbs (loop_vinfo, loop_vectorized_call);\n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION"}]}