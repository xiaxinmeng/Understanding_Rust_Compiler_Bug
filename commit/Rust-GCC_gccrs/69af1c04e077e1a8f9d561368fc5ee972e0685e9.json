{"sha": "69af1c04e077e1a8f9d561368fc5ee972e0685e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhZjFjMDRlMDc3ZTFhOGY5ZDU2MTM2OGZjNWVlOTcyZTA2ODVlOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-27T11:01:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-27T11:01:49Z"}, "message": "Adjust precision of filesystem::last_write_time tests\n\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tUse end() function to get end iterator.\n\t* testsuite/experimental/filesystem/iterators/pop.cc: Remove printf\n\tstatements that were present for debugging.\n\t* testsuite/experimental/filesystem/iterators/\n\trecursive_directory_iterator.cc: Use end() function to get end\n\titerator.\n\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n\tOnly require file timestamps to be accurate to one second.\n\nFrom-SVN: r241616", "tree": {"sha": "474b0e2e01577f0f7561f031c8a5c3df0423ec89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474b0e2e01577f0f7561f031c8a5c3df0423ec89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69af1c04e077e1a8f9d561368fc5ee972e0685e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69af1c04e077e1a8f9d561368fc5ee972e0685e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69af1c04e077e1a8f9d561368fc5ee972e0685e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69af1c04e077e1a8f9d561368fc5ee972e0685e9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb92ab95f6ba681423ba55db9910821735544c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb92ab95f6ba681423ba55db9910821735544c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb92ab95f6ba681423ba55db9910821735544c1"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "958d75bec3aa4461c6e458ac655eef9a722f839d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=69af1c04e077e1a8f9d561368fc5ee972e0685e9", "patch": "@@ -1,3 +1,15 @@\n+2016-10-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n+\tUse end() function to get end iterator.\n+\t* testsuite/experimental/filesystem/iterators/pop.cc: Remove printf\n+\tstatements that were present for debugging.\n+\t* testsuite/experimental/filesystem/iterators/\n+\trecursive_directory_iterator.cc: Use end() function to get end\n+\titerator.\n+\t* testsuite/experimental/filesystem/operations/last_write_time.cc:\n+\tOnly require file timestamps to be accurate to one second.\n+\n 2016-10-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_map.h (map()): Make default."}, {"sha": "d1f2c543513d12e059780d625776c778506400c0", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=69af1c04e077e1a8f9d561368fc5ee972e0685e9", "patch": "@@ -34,14 +34,14 @@ test01()\n   const auto p = __gnu_test::nonexistent_path();\n   fs::directory_iterator iter(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test empty directory.\n   create_directory(p, fs::current_path(), ec);\n   VERIFY( !ec );\n   iter = fs::directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test non-empty directory.\n   create_directory_symlink(p, p / \"l\", ec);\n@@ -51,20 +51,20 @@ test01()\n   VERIFY( iter != fs::directory_iterator() );\n   VERIFY( iter->path() == p/\"l\" );\n   ++iter;\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible directory.\n   permissions(p, fs::perms::none, ec);\n   VERIFY( !ec );\n   iter = fs::directory_iterator(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible directory, skipping permission denied.\n   const auto opts = fs::directory_options::skip_permission_denied;\n   iter = fs::directory_iterator(p, opts, ec);\n   VERIFY( !ec );\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   permissions(p, fs::perms::owner_all, ec);\n   remove_all(p, ec);\n@@ -82,12 +82,12 @@ test02()\n   // Test post-increment (libstdc++/71005)\n   auto iter = fs::directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter != fs::directory_iterator() );\n+  VERIFY( iter != end(iter) );\n   const auto entry1 = *iter;\n   const auto entry2 = *iter++;\n   VERIFY( entry1 == entry2 );\n   VERIFY( entry1.path() == p/\"l\" );\n-  VERIFY( iter == fs::directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   remove_all(p, ec);\n }"}, {"sha": "9306c0331ee82811fc7c24d5b9709f5dbe1929af", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/pop.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc?ref=69af1c04e077e1a8f9d561368fc5ee972e0685e9", "patch": "@@ -84,14 +84,10 @@ test03()\n     std::advance(dir, i);\n     int expected_depth = i;\n     VERIFY( dir.depth() == expected_depth );\n-    __builtin_printf(\"%d %d %s\\n\", i, dir.depth(), dir->path().c_str());\n     dir.pop(ec);\n     VERIFY( !ec );\n     if (dir != end(dir))\n-    {\n-    __builtin_printf(\"%d %d %s\\n\", i, dir.depth(), dir->path().c_str());\n       VERIFY( dir.depth() == (expected_depth - 1) );\n-    }\n \n     dir = fs::recursive_directory_iterator(p);\n     std::advance(dir, i);"}, {"sha": "3dc7ba2df650c59289a9cc02a4fbf48ec4b495a1", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=69af1c04e077e1a8f9d561368fc5ee972e0685e9", "patch": "@@ -34,39 +34,39 @@ test01()\n   const auto p = __gnu_test::nonexistent_path();\n   fs::recursive_directory_iterator iter(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test empty directory.\n   create_directory(p, fs::current_path(), ec);\n   VERIFY( !ec );\n   iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test non-empty directory.\n   create_directories(p / \"d1/d2\");\n   VERIFY( !ec );\n   iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter != end(iter) );\n   VERIFY( iter->path() == p/\"d1\" );\n   ++iter;\n   VERIFY( iter->path() == p/\"d1/d2\" );\n   ++iter;\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible directory.\n   permissions(p, fs::perms::none, ec);\n   VERIFY( !ec );\n   iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible directory, skipping permission denied.\n   const auto opts = fs::directory_options::skip_permission_denied;\n   iter = fs::recursive_directory_iterator(p, opts, ec);\n   VERIFY( !ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible sub-directory.\n   permissions(p, fs::perms::owner_all, ec);\n@@ -75,24 +75,24 @@ test01()\n   VERIFY( !ec );\n   iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter != end(iter) );\n   VERIFY( iter->path() == p/\"d1\" );\n   ++iter;              // should recurse into d1\n   VERIFY( iter->path() == p/\"d1/d2\" );\n   iter.increment(ec);  // should fail to recurse into p/d1/d2\n   VERIFY( ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   // Test inaccessible sub-directory, skipping permission denied.\n   iter = fs::recursive_directory_iterator(p, opts, ec);\n   VERIFY( !ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter != end(iter) );\n   VERIFY( iter->path() == p/\"d1\" );\n   ++iter;              // should recurse into d1\n   VERIFY( iter->path() == p/\"d1/d2\" );\n   iter.increment(ec);  // should fail to recurse into p/d1/d2, so skip it\n   VERIFY( !ec );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   permissions(p/\"d1/d2\", fs::perms::owner_all, ec);\n   remove_all(p, ec);\n@@ -109,7 +109,7 @@ test02()\n   // Test post-increment (libstdc++/71005)\n   auto iter = fs::recursive_directory_iterator(p, ec);\n   VERIFY( !ec );\n-  VERIFY( iter != fs::recursive_directory_iterator() );\n+  VERIFY( iter != end(iter) );\n   const auto entry1 = *iter;\n   const auto entry2 = *iter++;\n   VERIFY( entry1 == entry2 );\n@@ -118,7 +118,7 @@ test02()\n   const auto entry4 = *iter++;\n   VERIFY( entry3 == entry4 );\n   VERIFY( entry3.path() == p/\"d1/d2\" );\n-  VERIFY( iter == fs::recursive_directory_iterator() );\n+  VERIFY( iter == end(iter) );\n \n   remove_all(p, ec);\n }\n@@ -145,7 +145,7 @@ test04()\n {\n   // libstdc++/71004\n   const fs::recursive_directory_iterator it;\n-  VERIFY( it == fs::recursive_directory_iterator() );\n+  VERIFY( it == end(it) );\n }\n \n void"}, {"sha": "a60a25f4a62424bcc4998ba7abf348e045d96bb6", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af1c04e077e1a8f9d561368fc5ee972e0685e9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=69af1c04e077e1a8f9d561368fc5ee972e0685e9", "patch": "@@ -32,13 +32,13 @@\n # include <utime.h>\n #endif\n \n+using time_type = std::experimental::filesystem::file_time_type;\n+\n void\n test01()\n {\n   // read times\n \n-  using time_type = std::experimental::filesystem::file_time_type;\n-\n   auto p = __gnu_test::nonexistent_path();\n   std::error_code ec;\n   time_type mtime = last_write_time(p, ec);\n@@ -105,41 +105,47 @@ test01()\n #endif\n }\n \n+bool approx_equal(time_type file_time, time_type expected)\n+{\n+  auto delta = expected - file_time;\n+  if (delta < delta.zero())\n+    delta = -delta;\n+  return delta < std::chrono::seconds(1);\n+}\n+\n void\n test02()\n {\n   // write times\n \n-  using time_type = std::experimental::filesystem::file_time_type;\n-\n   __gnu_test::scoped_file f;\n   std::error_code ec;\n   time_type time;\n \n   time = last_write_time(f.path);\n   last_write_time(f.path, time, ec);\n   VERIFY( !ec );\n-  VERIFY( last_write_time(f.path) == time );\n+  VERIFY( approx_equal(last_write_time(f.path), time) );\n \n   time -= std::chrono::milliseconds(1000 * 60 * 10 + 15);\n   last_write_time(f.path, time, ec);\n   VERIFY( !ec );\n-  VERIFY( last_write_time(f.path) == time );\n+  VERIFY( approx_equal(last_write_time(f.path), time) );\n \n   time += std::chrono::milliseconds(1000 * 60 * 20 + 15);\n   last_write_time(f.path, time, ec);\n   VERIFY( !ec );\n-  VERIFY( last_write_time(f.path) == time );\n+  VERIFY( approx_equal(last_write_time(f.path), time) );\n \n   time = time_type();\n   last_write_time(f.path, time, ec);\n   VERIFY( !ec );\n-  VERIFY( last_write_time(f.path) == time );\n+  VERIFY( approx_equal(last_write_time(f.path), time) );\n \n   time -= std::chrono::milliseconds(1000 * 60 * 10 + 15);\n   last_write_time(f.path, time, ec);\n   VERIFY( !ec );\n-  VERIFY( last_write_time(f.path) == time );\n+  VERIFY( approx_equal(last_write_time(f.path), time) );\n }\n \n int"}]}