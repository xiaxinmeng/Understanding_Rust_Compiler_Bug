{"sha": "6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkOWU5N2Y5MTM2NGZmMDk5MmFlYjFhM2E3ZTQ4ZmQxMTBjMTA3Yg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-10-02T01:12:19Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-10-02T01:12:19Z"}, "message": "tree-ssa-live.c (remove_unused_scope_block_p): Don't change generated code depending on -g.\n\n* tree-ssa-live.c (remove_unused_scope_block_p): Don't change\ngenerated code depending on -g.  Reverts part of 2007-07-26's\npatch.\n\nFrom-SVN: r128932", "tree": {"sha": "f080e5bc0c41e620117d71d9389c1471cac2ab33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f080e5bc0c41e620117d71d9389c1471cac2ab33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b/comments", "author": null, "committer": null, "parents": [{"sha": "d75a2a99a07cd216dc6bb3207934e367933963a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75a2a99a07cd216dc6bb3207934e367933963a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75a2a99a07cd216dc6bb3207934e367933963a1"}], "stats": {"total": 45, "additions": 10, "deletions": 35}, "files": [{"sha": "12ef27f70b8c493d66a33662d2f9b09dc7bd6a17", "filename": "gcc/ChangeLog.vta", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b/gcc%2FChangeLog.vta", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b/gcc%2FChangeLog.vta", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.vta?ref=6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "patch": "@@ -1,3 +1,9 @@\n+2007-10-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Don't change\n+\tgenerated code depending on -g.  Reverts part of 2007-07-26's\n+\tpatch.\n+\n Local Variables:\n mode: change-log\n change-log-default-name: \"ChangeLog.vta\""}, {"sha": "4cf6620a759a27efcb54469d017ff90d5fa6dd66", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd9e97f91364ff0992aeb1a3a7e48fd110c107b/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=6cd9e97f91364ff0992aeb1a3a7e48fd110c107b", "patch": "@@ -468,39 +468,10 @@ mark_scope_block_unused (tree scope)\n static bool\n remove_unused_scope_block_p (tree scope)\n {\n-  tree *t, *next;\n+  tree *t;\n   bool unused = !TREE_USED (scope);\n-  var_ann_t ann;\n   int nsubblocks = 0;\n \n-  for (t = &BLOCK_VARS (scope); *t; t = next)\n-    {\n-      next = &TREE_CHAIN (*t);\n-\n-      /* Debug info of nested function refers to the block of the\n-\t function.  */\n-      if (TREE_CODE (*t) == FUNCTION_DECL)\n-\tunused = false;\n-\n-      /* When we are outputting debug info, we usually want to output\n-\t info about optimized-out variables in the scope blocks.\n-\t Exception are the scope blocks not containing any instructions\n-\t at all so user can't get into the scopes at first place.  */\n-      else if ((ann = var_ann (*t)) != NULL\n-\t\t&& ann->used)\n-\tunused = false;\n-\n-      /* When we are not doing full debug info, we however can keep around\n-\t only the used variables for cfgexpand's memory packing saving quite\n-\t a lot of memory.  */\n-      else if (debug_info_level != DINFO_LEVEL_NORMAL\n-\t       && debug_info_level != DINFO_LEVEL_VERBOSE)\n-\t{\n-\t  *t = TREE_CHAIN (*t);\n-\t  next = t;\n-\t}\n-    }\n-\n   for (t = &BLOCK_SUBBLOCKS (scope); *t ;)\n     if (remove_unused_scope_block_p (*t))\n       {\n@@ -533,12 +504,10 @@ remove_unused_scope_block_p (tree scope)\n    /* When there is only one subblock, see if it is just wrapper we can\n       ignore.  Wrappers are not declaring any variables and not changing\n       abstract origin.  */\n-   else if (nsubblocks == 1\n+   else if (nsubblocks <= 1\n \t    && (BLOCK_VARS (scope)\n-\t\t|| ((debug_info_level == DINFO_LEVEL_NORMAL\n-\t\t     || debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t\t    && ((BLOCK_ABSTRACT_ORIGIN (scope)\n-\t\t\t!= BLOCK_ABSTRACT_ORIGIN (BLOCK_SUPERCONTEXT (scope)))))))\n+\t\t|| (BLOCK_ABSTRACT_ORIGIN (scope)\n+\t\t    != BLOCK_ABSTRACT_ORIGIN (BLOCK_SUPERCONTEXT (scope)))))\n      unused = false;\n    return unused;\n }"}]}