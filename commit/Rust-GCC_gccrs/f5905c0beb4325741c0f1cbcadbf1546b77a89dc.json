{"sha": "f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5MDVjMGJlYjQzMjU3NDFjMGYxY2JjYWRiZjE1NDZiNzdhODlkYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-03-15T16:12:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T16:12:20Z"}, "message": "sem_ch10.adb (Build_Ancestor_Name): If the ancestor is an instantiation that has been rewritten as a package body...\n\n2005-03-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Build_Ancestor_Name): If the ancestor is an\n\tinstantiation that has been rewritten as a package body, retrieve spec\n\tto generate proper name for implicit_with_clause.\n\t(Install_Parents): Recognize a parent that is an instantiation but has\n\tbeen rewritten as a package declaration during analysis.\n\nFrom-SVN: r96502", "tree": {"sha": "14bba272cb4deec884057025bb6d981057771d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bba272cb4deec884057025bb6d981057771d99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5905c0beb4325741c0f1cbcadbf1546b77a89dc/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8427bff140cfe0c3a749a32ee531314f19e178a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8427bff140cfe0c3a749a32ee531314f19e178a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8427bff140cfe0c3a749a32ee531314f19e178a"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "0a7496c8e535559ff0dc47f4bde42a38be948f85", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5905c0beb4325741c0f1cbcadbf1546b77a89dc/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5905c0beb4325741c0f1cbcadbf1546b77a89dc/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=f5905c0beb4325741c0f1cbcadbf1546b77a89dc", "patch": "@@ -2556,15 +2556,26 @@ package body Sem_Ch10 is\n       -------------------------\n \n       function Build_Ancestor_Name (P : Node_Id) return Node_Id is\n-         P_Ref : constant Node_Id :=\n+         P_Ref  : constant Node_Id :=\n                    New_Reference_To (Defining_Entity (P), Loc);\n+         P_Spec : Node_Id := P;\n+\n       begin\n-         if No (Parent_Spec (P)) then\n+         --  Ancestor may have been rewritten as a package body. Retrieve\n+         --  the original spec to trace earlier ancestors.\n+\n+         if Nkind (P) = N_Package_Body\n+           and then Nkind (Original_Node (P)) = N_Package_Instantiation\n+         then\n+            P_Spec := Original_Node (P);\n+         end if;\n+\n+         if No (Parent_Spec (P_Spec)) then\n             return P_Ref;\n          else\n             return\n               Make_Selected_Component (Loc,\n-                Prefix => Build_Ancestor_Name (Unit (Parent_Spec (P))),\n+                Prefix => Build_Ancestor_Name (Unit (Parent_Spec (P_Spec))),\n                 Selector_Name => P_Ref);\n          end if;\n       end Build_Ancestor_Name;\n@@ -3139,16 +3150,24 @@ package body Sem_Ch10 is\n       --  Verify that a child of an instance is itself an instance, or\n       --  the renaming of one. Given that an instance that is a unit is\n       --  replaced with a package declaration, check against the original\n-      --  node.\n+      --  node. The parent may be currently being instantiated, in which\n+      --  case it appears as a declaration, but the generic_parent is\n+      --  already established indicating that we deal with an instance.\n \n-      elsif Nkind (Original_Node (P)) = N_Package_Instantiation\n-        and then Nkind (Lib_Unit)\n-                   not in N_Renaming_Declaration\n-        and then Nkind (Original_Node (Lib_Unit))\n-                   not in N_Generic_Instantiation\n-      then\n-         Error_Msg_N\n-           (\"child of an instance must be an instance or renaming\", Lib_Unit);\n+      elsif Nkind (Original_Node (P)) = N_Package_Instantiation then\n+\n+         if Nkind (Lib_Unit) in N_Renaming_Declaration\n+           or else Nkind (Original_Node (Lib_Unit)) in N_Generic_Instantiation\n+           or else\n+             (Nkind (Lib_Unit) = N_Package_Declaration\n+               and then Present (Generic_Parent (Specification (Lib_Unit))))\n+         then\n+            null;\n+         else\n+            Error_Msg_N\n+              (\"child of an instance must be an instance or renaming\",\n+                Lib_Unit);\n+         end if;\n       end if;\n \n       --  This is the recursive call that ensures all parents are loaded"}]}