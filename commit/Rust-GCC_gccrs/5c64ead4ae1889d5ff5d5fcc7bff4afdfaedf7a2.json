{"sha": "5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2NGVhZDRhZTE4ODlkNWZmNWQ1ZmNjN2JmZjRhZmRmYWVkZjdhMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-01-21T18:54:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-01-21T18:54:25Z"}, "message": "class.c (supers_all_compiled): New function.\n\n\t* class.c (supers_all_compiled): New function.\n\t(make_class_data): Use it.\n\nFrom-SVN: r61561", "tree": {"sha": "9766241670e17d3cecba272f6528b5390929f045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9766241670e17d3cecba272f6528b5390929f045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2/comments", "author": null, "committer": null, "parents": [{"sha": "9179646e87d54f448b89d4f0881edf5eb4a1e791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9179646e87d54f448b89d4f0881edf5eb4a1e791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9179646e87d54f448b89d4f0881edf5eb4a1e791"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "346dd6bea47f580691808e4a595aeecbcd7f7895", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "patch": "@@ -1,3 +1,8 @@\n+2003-01-21  Tom Tromey  <tromey@redhat.com>\n+\n+\t* class.c (supers_all_compiled): New function.\n+\t(make_class_data): Use it.\n+\n 2003-01-21  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (method_header): Native method can't be strictfp."}, {"sha": "1e0e83a7520be52b5860add83d169e29cc984b64", "filename": "gcc/java/class.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=5c64ead4ae1889d5ff5d5fcc7bff4afdfaedf7a2", "patch": "@@ -54,6 +54,7 @@ static int32 hashUtf8String (const char *, int);\n static tree make_field_value (tree);\n static tree get_dispatch_vector (tree);\n static tree get_dispatch_table (tree, tree);\n+static int supers_all_compiled (tree type);\n static void add_interface_do (tree, tree, int);\n static tree maybe_layout_super_class (tree, tree);\n static int assume_compiled (const char *);\n@@ -1265,7 +1266,8 @@ static tree\n get_dispatch_vector (tree type)\n {\n   tree vtable = TYPE_VTABLE (type);\n-  if (vtable == NULL)\n+\n+  if (vtable == NULL_TREE)\n     {\n       HOST_WIDE_INT i;\n       tree method;\n@@ -1367,6 +1369,18 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t\tNULL_TREE, list);\n }\n \n+static int\n+supers_all_compiled (tree type)\n+{\n+  while (type != NULL_TREE)\n+    {\n+      if (!assume_compiled (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)))))\n+\treturn 0;\n+      type = CLASSTYPE_SUPER (type);\n+    }\n+  return 1;\n+}\n+\n void\n make_class_data (tree type)\n {\n@@ -1468,8 +1482,8 @@ make_class_data (tree type)\n   DECL_IGNORED_P (methods_decl) = 1;\n   rest_of_decl_compilation (methods_decl, (char*) 0, 1, 0);\n \n-  if (assume_compiled (IDENTIFIER_POINTER (DECL_NAME (type_decl)))\n-      && ! CLASS_INTERFACE (type_decl) && !flag_indirect_dispatch)\n+  if (supers_all_compiled (type) && ! CLASS_INTERFACE (type_decl)\n+      && !flag_indirect_dispatch)\n     {\n       tree dtable = get_dispatch_table (type, this_class_addr);\n       dtable_decl = build_dtable_decl (type);\n@@ -1956,9 +1970,6 @@ layout_class_methods (tree this_class)\n   TYPE_NVIRTUALS (this_class) = dtable_count;\n }\n \n-/* Return 0 if NAME is equal to STR, -1 if STR is \"less\" than NAME,\n-   and 1 if STR is \"greater\" than NAME.  */\n-\n /* Lay METHOD_DECL out, returning a possibly new value of\n    DTABLE_COUNT. Also mangle the method's name. */\n \n@@ -1995,7 +2006,7 @@ layout_class_method (tree this_class, tree super_class,\n     }\n   else if (! METHOD_STATIC (method_decl) && !DECL_ARTIFICIAL (method_decl))\n     {\n-      tree method_sig = \n+      tree method_sig =\n \tbuild_java_argument_signature (TREE_TYPE (method_decl));\n       tree super_method = lookup_argument_method (super_class, method_name,\n \t\t\t\t\t\t  method_sig);"}]}