{"sha": "9c30c0e76a04d193c7ffa850c2357931b728d87a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzMGMwZTc2YTA0ZDE5M2M3ZmZhODUwYzIzNTc5MzFiNzI4ZDg3YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1999-03-19T00:47:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-19T00:47:41Z"}, "message": "system.h: Use putc_unlocked...\n\n        * system.h: Use putc_unlocked, fputc_unlocked, and\n        fputs_unlocked only if putc_unlocked has a prototype already.\n        Prototype fputs_unlocked if necessary.\n        * configure.in: Check for prototypes of putc_unlocked and\n        fputs_unlocked.\n        * acconfig.h: Updated.\n        * config.in, configure: Rebuilt.\n\nFrom-SVN: r25855", "tree": {"sha": "3f666fa4225b96bda8e31b545e0a8ca45460b3d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f666fa4225b96bda8e31b545e0a8ca45460b3d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c30c0e76a04d193c7ffa850c2357931b728d87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c30c0e76a04d193c7ffa850c2357931b728d87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c30c0e76a04d193c7ffa850c2357931b728d87a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c30c0e76a04d193c7ffa850c2357931b728d87a/comments", "author": null, "committer": null, "parents": [{"sha": "21677228916e96eff78fb5ad3b84f147daec690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21677228916e96eff78fb5ad3b84f147daec690c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21677228916e96eff78fb5ad3b84f147daec690c"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "2a2f52652611701b23ebfca98e871fefa238d68c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -1,3 +1,13 @@\n+Fri Mar 19 01:42:05 1999  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* system.h: Use putc_unlocked, fputc_unlocked, and\n+\tfputs_unlocked only if putc_unlocked has a prototype already.\n+\tPrototype fputs_unlocked if necessary.\n+\t* configure.in: Check for prototypes of putc_unlocked and\n+\tfputs_unlocked. \n+\t* acconfig.h: Updated.\n+\t* config.in, configure: Rebuilt.\n+\n Fri Mar 19 02:45:12 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* Makefile.in (INTL_TARGETS): new macro"}, {"sha": "3aae71e13beeedbf39da27656c44c84b4e809d10", "filename": "gcc/acconfig.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -75,6 +75,9 @@\n /* Whether atol must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_ATOL\n \n+/* Whether atof must be declared even if <stdlib.h> is included.  */\n+#undef NEED_DECLARATION_ATOF\n+\n /* Whether sbrk must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_SBRK\n \n@@ -99,6 +102,12 @@\n /* Whether setrlimit must be declared even if <sys/resource.h> is included.  */\n #undef NEED_DECLARATION_SETRLIMIT\n \n+/* Whether putc_unlocked must be declared even if <stdio.h> is included.  */\n+#undef NEED_DECLARATION_PUTC_UNLOCKED\n+\n+/* Whether fputs_unlocked must be declared even if <stdio.h> is included.  */\n+#undef NEED_DECLARATION_FPUTS_UNLOCKED\n+\n /* Define if you want expensive run-time checks. */\n #undef ENABLE_CHECKING\n "}, {"sha": "dc6cf2e937e7ad7633b64e08c7d845d726781140", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -76,6 +76,9 @@\n /* Whether atol must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_ATOL\n \n+/* Whether atof must be declared even if <stdlib.h> is included.  */\n+#undef NEED_DECLARATION_ATOF\n+\n /* Whether sbrk must be declared even if <stdlib.h> is included.  */\n #undef NEED_DECLARATION_SBRK\n \n@@ -100,6 +103,12 @@\n /* Whether setrlimit must be declared even if <sys/resource.h> is included.  */\n #undef NEED_DECLARATION_SETRLIMIT\n \n+/* Whether putc_unlocked must be declared even if <stdio.h> is included.  */\n+#undef NEED_DECLARATION_PUTC_UNLOCKED\n+\n+/* Whether fputs_unlocked must be declared even if <stdio.h> is included.  */\n+#undef NEED_DECLARATION_FPUTS_UNLOCKED\n+\n /* Define if you want expensive run-time checks. */\n #undef ENABLE_CHECKING\n "}, {"sha": "e697e3df28154b9d00ae595fe578b43cf277d5dc", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -2593,7 +2593,7 @@ fi\n \n for ac_func in malloc realloc calloc free bcopy bzero bcmp \\\n \tindex rindex getenv atol sbrk abort atof strerror getcwd getwd \\\n-\tstrsignal\n+\tstrsignal putc_unlocked fputs_unlocked\n do\n echo $ac_n \"checking whether $ac_func must be declared\"\"... $ac_c\" 1>&6\n echo \"configure:2600: checking whether $ac_func must be declared\" >&5"}, {"sha": "02071b8987177dc3175df21f91101499b81d6e51", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -383,7 +383,7 @@ AC_FUNC_VFORK\n \n GCC_NEED_DECLARATIONS(malloc realloc calloc free bcopy bzero bcmp \\\n \tindex rindex getenv atol sbrk abort atof strerror getcwd getwd \\\n-\tstrsignal)\n+\tstrsignal putc_unlocked fputs_unlocked)\n \n GCC_NEED_DECLARATIONS(getrlimit setrlimit, [\n #include <sys/types.h>"}, {"sha": "a744760f3aa3c5abe7d94645edaee378cf5d1514", "filename": "gcc/system.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c30c0e76a04d193c7ffa850c2357931b728d87a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=9c30c0e76a04d193c7ffa850c2357931b728d87a", "patch": "@@ -37,18 +37,28 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* The compiler is not a multi-threaded application and therefore we\n-   do not have to use the locking functions.  */\n-#ifdef HAVE_PUTC_UNLOCKED\n+   do not have to use the locking functions.\n+\n+   NEED_DECLARATION_PUTC_UNLOCKED actually indicates whether or not\n+   the IO code is multi-thread safe by default.  If it is not declared,\n+   then do not worry about using the _unlocked functions.\n+   \n+   fputs_unlocked is an extension and needs to be prototyped specially.  */\n+\n+#if defined HAVE_PUTC_UNLOCKED && !defined NEED_DECLARATION_PUTC_UNLOCKED\n # undef putc\n # define putc(C, Stream) putc_unlocked (C, Stream)\n #endif\n-#ifdef HAVE_FPUTC_UNLOCKED\n+#if defined HAVE_FPUTC_UNLOCKED && !defined NEED_DECLARATION_PUTC_UNLOCKED\n # undef fputc\n # define fputc(C, Stream) fputc_unlocked (C, Stream)\n #endif\n-#ifdef HAVE_FPUTS_UNLOCKED\n+#if defined HAVE_FPUTS_UNLOCKED && !defined NEED_DECLARATION_PUTC_UNLOCKED\n # undef fputs\n # define fputs(String, Stream) fputs_unlocked (String, Stream)\n+# ifdef NEED_DECLARATION_FPUTS_UNLOCKED\n+extern int fputs_unlocked PROTO ((const char *, FILE *));\n+# endif\n #endif\n \n #include <ctype.h>"}]}