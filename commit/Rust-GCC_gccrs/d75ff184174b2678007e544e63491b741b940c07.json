{"sha": "d75ff184174b2678007e544e63491b741b940c07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1ZmYxODQxNzRiMjY3ODAwN2U1NDRlNjM0OTFiNzQxYjk0MGMwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-04-11T14:16:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-04-11T14:16:26Z"}, "message": "decl.c (duplicate_decls): Don't try to unify an implicit typedef with an explicit one.\n\n\t* decl.c (duplicate_decls): Don't try to unify an implicit typedef\n\twith an explicit one.\n\t(lookup_tag): Extract the tag of an explicit typedef.\n\nFrom-SVN: r52159", "tree": {"sha": "b9c92a24a07b911bb6cbc5fe6a1e66d9f720f0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c92a24a07b911bb6cbc5fe6a1e66d9f720f0f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d75ff184174b2678007e544e63491b741b940c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75ff184174b2678007e544e63491b741b940c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75ff184174b2678007e544e63491b741b940c07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75ff184174b2678007e544e63491b741b940c07/comments", "author": null, "committer": null, "parents": [{"sha": "df51a2457a141c12dc203ebd0b3a04e17bfd497f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df51a2457a141c12dc203ebd0b3a04e17bfd497f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df51a2457a141c12dc203ebd0b3a04e17bfd497f"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "6f355c30e30c00ed69ab13eb888760baf19c374b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75ff184174b2678007e544e63491b741b940c07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75ff184174b2678007e544e63491b741b940c07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d75ff184174b2678007e544e63491b741b940c07", "patch": "@@ -1,3 +1,9 @@\n+2002-04-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* decl.c (duplicate_decls): Don't try to unify an implicit typedef\n+\twith an explicit one.\n+\t(lookup_tag): Extract the tag of an explicit typedef.\n+\n 2002-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5507"}, {"sha": "f55e1d41c0a0f2904e91c652d00e804222f92d58", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75ff184174b2678007e544e63491b741b940c07/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75ff184174b2678007e544e63491b741b940c07/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d75ff184174b2678007e544e63491b741b940c07", "patch": "@@ -3426,6 +3426,18 @@ duplicate_decls (newdecl, olddecl)\n \t}\n     }\n \n+  /* Do not merge an implicit typedef with an explicit one.  In:\n+\n+       class A;\n+       ...\n+       typedef class A A __attribute__ ((foo));\n+\n+     the attribute should apply only to the typedef.  */\n+  if (TREE_CODE (olddecl) == TYPE_DECL\n+      && (DECL_IMPLICIT_TYPEDEF_P (olddecl)\n+\t  || DECL_IMPLICIT_TYPEDEF_P (newdecl)))\n+    return 0;\n+\n   /* If new decl is `static' and an `extern' was seen previously,\n      warn about it.  */\n   warn_extern_redeclared_static (newdecl, olddecl);\n@@ -5336,10 +5348,23 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t    else\n \t      old = BINDING_TYPE (old);\n \n-\t    /* If it has an original type, it is a typedef, and we\n-\t       should not return it.  */\n+\t    /* If the declaration has an original type, it must a\n+\t       typedef.  When it is an explicit typedef of the form:\n+\n+\t\t   typedef struct A A;\n+\n+\t       the original type will be the tag that we want.\n+\t       We should not return any other kind of typedef.\n+\n+\t       Detect the valid case by checking that the original\n+\t       type has the same name and context as the typedef.  */\n \t    if (old && DECL_ORIGINAL_TYPE (TYPE_NAME (old)))\n-\t      old = NULL_TREE;\n+\t      {\n+\t\told = DECL_ORIGINAL_TYPE (TYPE_NAME (old));\n+\t\tif (TYPE_IDENTIFIER (old) != name\n+\t\t    || context_for_name_lookup (TYPE_NAME (old)) != tail)\n+\t\t  old = NULL_TREE;\n+\t      }\n \t    if (old && TREE_CODE (old) != form\n \t\t&& (form == ENUMERAL_TYPE || TREE_CODE (old) == ENUMERAL_TYPE))\n \t      {"}]}