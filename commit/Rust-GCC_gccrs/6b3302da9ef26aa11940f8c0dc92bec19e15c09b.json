{"sha": "6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzMzAyZGE5ZWYyNmFhMTE5NDBmOGMwZGM5MmJlYzE5ZTE1YzA5Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-03T22:56:44Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-04T04:21:51Z"}, "message": "c++: Fix mismatch in template argument deduction [PR90505]\n\nMy GCC 9 patch for C++20 P0846R0 (ADL and function templates) tweaked\ncp_parser_template_name to only return an identifier if name lookup\ndidn't find anything.  In the deduce4.C case it means that we now\nreturn an OVERLOAD.  That means that cp_parser_template_id will call\nlookup_template_function whereby producing a TEMPLATE_ID_EXPR with\nunknown_type_node.  Previously, we created a TEMPLATE_ID_EXPR with\nno type, making it type-dependent.  What we have now is no longer\ntype-dependent.  And so, when we call finish_call_expr after we've\nparsed \"foo<int>(10)\", even though we're in a template, we still do\nthe normal processing, thus perform overload resolution.  When adding\nthe template candidate foo we need to deduce the template arguments,\nand that is where things go downhill.\n\nWhen fn_type_unification sees that we have explicit template arguments,\nbut they aren't complete, it will use them to substitute the function\ntype.  So we substitute e.g. \"void <T33d> (U)\".  But the explicit\ntemplate argument was for a different parameter so we don't actually\nsubstitute anything.  But the problem here was that we reduced the\ntemplate level of 'U' anyway.  So then when we're actually deducing\nthe template arguments via type_unification_real, we fail in unify:\n22932       if (TEMPLATE_TYPE_LEVEL (parm)\n22933           != template_decl_level (tparm))\n22934         /* The PARM is not one we're trying to unify.  Just check\n22935            to see if it matches ARG.  */\nbecause 'parm' has been reduced but 'tparm' has not yet.\n\nTherefore we shouldn't reduce the template level of template parameters\nwhen tf_partial aka template argument deduction substitution.  But we\ncan only return after performing the cp_build_qualified_type etc.\nbusiness otherwise things break horribly.\n\n2020-03-03  Jason Merrill  <jason@redhat.com>\n\t    Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/90505 - mismatch in template argument deduction.\n\t* pt.c (tsubst): Don't reduce the template level of template\n\tparameters when tf_partial.\n\n\t* g++.dg/template/deduce4.C: New test.\n\t* g++.dg/template/deduce5.C: New test.\n\t* g++.dg/template/deduce6.C: New test.\n\t* g++.dg/template/deduce7.C: New test.", "tree": {"sha": "21fc91491e05da4bb2b9ddb6ccee153fb89d534b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21fc91491e05da4bb2b9ddb6ccee153fb89d534b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "712b182a8bc2d7510d7a2fbede43bf134c539f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712b182a8bc2d7510d7a2fbede43bf134c539f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712b182a8bc2d7510d7a2fbede43bf134c539f25"}], "stats": {"total": 90, "additions": 84, "deletions": 6}, "files": [{"sha": "590c898866632aea3614ea0e843b76c3ec1e03aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -1,3 +1,10 @@\n+2020-03-03  Jason Merrill  <jason@redhat.com>\n+\t    Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90505 - mismatch in template argument deduction.\n+\t* pt.c (tsubst): Don't reduce the template level of template\n+\tparameters when tf_partial.\n+\n 2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93998"}, {"sha": "1c721b311764a312068d996315d738d6cfa3308f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -15057,12 +15057,6 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \tint levels;\n \ttree arg = NULL_TREE;\n \n-\t/* Early in template argument deduction substitution, we don't\n-\t   want to reduce the level of 'auto', or it will be confused\n-\t   with a normal template parm in subsequent deduction.  */\n-\tif (is_auto (t) && (complain & tf_partial))\n-\t  return t;\n-\n \tr = NULL_TREE;\n \n \tgcc_assert (TREE_VEC_LENGTH (args) > 0);\n@@ -15193,6 +15187,14 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     about the template parameter in question.  */\n \t  return t;\n \n+\t/* Early in template argument deduction substitution, we don't\n+\t   want to reduce the level of 'auto', or it will be confused\n+\t   with a normal template parm in subsequent deduction.\n+\t   Similarly, don't reduce the level of template parameters to\n+\t   avoid mismatches when deducing their types.  */\n+\tif (complain & tf_partial)\n+\t  return t;\n+\n \t/* If we get here, we must have been looking at a parm for a\n \t   more deeply nested template.  Make a new version of this\n \t   template parameter, but with a lower level.  */"}, {"sha": "5e8a8356a4237f6e4495b492abccfafd6ddbf9fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -1,3 +1,11 @@\n+2020-03-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90505 - mismatch in template argument deduction.\n+\t* g++.dg/template/deduce4.C: New test.\n+\t* g++.dg/template/deduce5.C: New test.\n+\t* g++.dg/template/deduce6.C: New test.\n+\t* g++.dg/template/deduce7.C: New test.\n+\n 2020-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93998"}, {"sha": "e2c165dc788af265c7fb336af74c584de788567c", "filename": "gcc/testsuite/g++.dg/template/deduce4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce4.C?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/90505 - mismatch in template argument deduction.\n+// { dg-do compile }\n+\n+template <typename T>\n+struct S {\n+  template <typename U, typename V>\n+  static void foo(V) { }\n+\n+  void bar () { foo<int>(10); }\n+};\n+\n+void\n+test ()\n+{\n+  S<int> s;\n+  s.bar ();\n+}"}, {"sha": "9d382bfe03a5af94ce2b177aea5ffe0e54ba86ed", "filename": "gcc/testsuite/g++.dg/template/deduce5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce5.C?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/90505 - mismatch in template argument deduction.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct S {\n+  template <typename U, typename V = void>\n+  static void foo(U) { }\n+\n+  void bar () { foo<int>(10); }\n+};\n+\n+void\n+test ()\n+{\n+  S<int> s;\n+  s.bar ();\n+}"}, {"sha": "8fee6124f5a3fd87e38b4cec559830279fe54038", "filename": "gcc/testsuite/g++.dg/template/deduce6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce6.C?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/90505 - mismatch in template argument deduction.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct S {\n+  template <typename U = int, typename V>\n+  static void foo(V) { }\n+\n+  void bar () { foo<>(10); }\n+};\n+\n+void\n+test ()\n+{\n+  S<int> s;\n+  s.bar ();\n+}"}, {"sha": "fbc28e5150d048930829aaf71d6fa18b76d39600", "filename": "gcc/testsuite/g++.dg/template/deduce7.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3302da9ef26aa11940f8c0dc92bec19e15c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdeduce7.C?ref=6b3302da9ef26aa11940f8c0dc92bec19e15c09b", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90505 - mismatch in template argument deduction.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> class a {\n+  using b = int;\n+  using c = int;\n+  b d;\n+  void e() { g<c>(d); }\n+  template <typename... f> static void g(f...);\n+};"}]}