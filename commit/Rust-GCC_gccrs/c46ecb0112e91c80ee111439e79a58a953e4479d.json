{"sha": "c46ecb0112e91c80ee111439e79a58a953e4479d", "node_id": "C_kwDOANBUbNoAKGM0NmVjYjAxMTJlOTFjODBlZTExMTQzOWU3OWE1OGE5NTNlNDQ3OWQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-19T13:49:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:48Z"}, "message": "libstdc++: Allow visiting inherited variants [PR 90943]\n\nImplement the changes from P2162R2 (as a DR for C++17).\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/90943\n\t* include/std/variant (__cpp_lib_variant): Update value.\n\t(__detail::__variant::__as): New helpers implementing the\n\tas-variant exposition-only function templates.\n\t(visit, visit<R>): Use __as to upcast the variant parameters.\n\t* include/std/version (__cpp_lib_variant): Update value.\n\t* testsuite/20_util/variant/visit_inherited.cc: New test.", "tree": {"sha": "45bda3f165e02e455b4ea52cb5b68e35911b8778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bda3f165e02e455b4ea52cb5b68e35911b8778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c46ecb0112e91c80ee111439e79a58a953e4479d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46ecb0112e91c80ee111439e79a58a953e4479d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46ecb0112e91c80ee111439e79a58a953e4479d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46ecb0112e91c80ee111439e79a58a953e4479d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "c651326ead900238d4990d55f137661764e02ceb", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=c46ecb0112e91c80ee111439e79a58a953e4479d", "patch": "@@ -71,7 +71,7 @@ namespace __variant\n } // namespace __variant\n } // namespace __detail\n \n-#define __cpp_lib_variant 201606L\n+#define __cpp_lib_variant 202102L\n \n   template<typename... _Types> class tuple;\n   template<typename... _Types> class variant;\n@@ -202,6 +202,28 @@ namespace __variant\n \t  std::forward<_Variants>(__variants)...);\n     }\n \n+  // The __as function templates implement the exposition-only \"as-variant\"\n+\n+  template<typename... _Types>\n+    constexpr std::variant<_Types...>&\n+    __as(std::variant<_Types...>& __v)\n+    { return __v; }\n+\n+  template<typename... _Types>\n+    constexpr const std::variant<_Types...>&\n+    __as(const std::variant<_Types...>& __v) noexcept\n+    { return __v; }\n+\n+  template<typename... _Types>\n+    constexpr std::variant<_Types...>&&\n+    __as(std::variant<_Types...>&& __v) noexcept\n+    { return std::move(__v); }\n+\n+  template<typename... _Types>\n+    constexpr const std::variant<_Types...>&&\n+    __as(const std::variant<_Types...>&& __v) noexcept\n+    { return std::move(__v); }\n+\n   // _Uninitialized<T> is guaranteed to be a trivially destructible type,\n   // even if T is not.\n   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>\n@@ -1063,8 +1085,12 @@ namespace __variant\n \t\t\t      std::index_sequence<__indices...>>\n     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };\n \n-  template<size_t _Np, typename _Variant>\n-    using __get_t = decltype(std::get<_Np>(std::declval<_Variant>()));\n+  // Equivalent to decltype(get<_Np>(as-variant(declval<_Variant>())))\n+  template<size_t _Np, typename _Variant,\n+      typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),\n+      typename _Tp = variant_alternative_t<_Np, remove_reference_t<_AsV>>>\n+    using __get_t\n+      = conditional_t<is_lvalue_reference_v<_Variant>, _Tp&, _Tp&&>;\n \n   // Return type of std::visit.\n   template<typename _Visitor, typename... _Variants>\n@@ -1741,7 +1767,9 @@ namespace __variant\n     constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n-      if ((__variants.valueless_by_exception() || ...))\n+      namespace __variant = std::__detail::__variant;\n+\n+      if ((__variant::__as(__variants).valueless_by_exception() || ...))\n \t__throw_bad_variant_access(\"std::visit: variant is valueless\");\n \n       using _Result_type\n@@ -1751,10 +1779,11 @@ namespace __variant\n \n       if constexpr (sizeof...(_Variants) == 1)\n \t{\n+\t  using _Vp = decltype(__variant::__as(std::declval<_Variants>()...));\n+\n \t  constexpr bool __visit_rettypes_match = __detail::__variant::\n-\t    __check_visitor_results<_Visitor, _Variants...>(\n-\t      std::make_index_sequence<\n-\t        std::variant_size<remove_reference_t<_Variants>...>::value>());\n+\t    __check_visitor_results<_Visitor, _Vp>(\n+\t      make_index_sequence<variant_size_v<remove_reference_t<_Vp>>>());\n \t  if constexpr (!__visit_rettypes_match)\n \t    {\n \t      static_assert(__visit_rettypes_match,\n@@ -1765,24 +1794,26 @@ namespace __variant\n \t  else\n \t    return std::__do_visit<_Tag>(\n \t      std::forward<_Visitor>(__visitor),\n-\t      std::forward<_Variants>(__variants)...);\n+\t      static_cast<_Vp>(__variants)...);\n \t}\n       else\n \treturn std::__do_visit<_Tag>(\n \t  std::forward<_Visitor>(__visitor),\n-\t  std::forward<_Variants>(__variants)...);\n+\t  __variant::__as(std::forward<_Variants>(__variants))...);\n     }\n \n #if __cplusplus > 201703L\n   template<typename _Res, typename _Visitor, typename... _Variants>\n     constexpr _Res\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n-      if ((__variants.valueless_by_exception() || ...))\n+      namespace __variant = std::__detail::__variant;\n+\n+      if ((__variant::__as(__variants).valueless_by_exception() || ...))\n \t__throw_bad_variant_access(\"std::visit<R>: variant is valueless\");\n \n       return std::__do_visit<_Res>(std::forward<_Visitor>(__visitor),\n-\t\t\t\t   std::forward<_Variants>(__variants)...);\n+\t  __variant::__as(std::forward<_Variants>(__variants))...);\n     }\n #endif\n "}, {"sha": "42f7dfa62adadcefba8443b8f2341a84bb070a2e", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=c46ecb0112e91c80ee111439e79a58a953e4479d", "patch": "@@ -171,7 +171,7 @@\n # define __cpp_lib_to_chars 201611L\n #endif\n #define __cpp_lib_unordered_map_try_emplace 201411\n-#define __cpp_lib_variant 201606L\n+#define __cpp_lib_variant 202102L\n #endif\n \n #if __cplusplus >= 202002L"}, {"sha": "ade83096475e9a3db87e8bf2c765f0edb6f2598c", "filename": "libstdc++-v3/testsuite/20_util/variant/visit_inherited.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_inherited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46ecb0112e91c80ee111439e79a58a953e4479d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_inherited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_inherited.cc?ref=c46ecb0112e91c80ee111439e79a58a953e4479d", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <variant>\n+\n+// P2062R2 Inheriting from std::variant (resolving LWG 3052)\n+\n+#if __cpp_lib_variant < 202102L\n+#error __cpp_lib_variant has the wrong value in <variant>\n+#endif\n+\n+struct V : std::variant<int> {\n+    using std::variant<int>::variant;\n+};\n+\n+constexpr int\n+test01()\n+{\n+  V v = 42;\n+  return std::visit([](int&){ return 17; }, v);\n+}\n+static_assert( test01() == 17 );\n+\n+constexpr int\n+test02()\n+{\n+  const V c = 77;\n+  std::variant<char*, long> x = 88L;\n+  return std::visit([](auto&& a, auto&& b) {\n+    if constexpr (std::is_same_v<decltype(a), const int&&>)\n+      if constexpr (std::is_same_v<decltype(b), long&&>)\n+\treturn 99;\n+    return 0;\n+  },\n+  std::move(c), std::move(x));\n+}\n+static_assert( test02() == 99 );"}]}