{"sha": "8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3NWFlMjI4NWI3NGYwNWE0NDY1ZTdhOWM4YzBiZGY4Y2YzMDBiMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-03-28T20:11:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-03-28T20:11:20Z"}, "message": "tree-dfa.c (get_ref_base_and_extent): Do not expect positive offsets for BIT_FIELD_REF and COMPONENT_REF.\n\n\t* tree-dfa.c (get_ref_base_and_extent): Do not expect positive\n\toffsets for BIT_FIELD_REF and COMPONENT_REF.\n\nFrom-SVN: r123311", "tree": {"sha": "5b3ea977e0d89e228ad35e4d140ae606fd436493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3ea977e0d89e228ad35e4d140ae606fd436493"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/comments", "author": null, "committer": null, "parents": [{"sha": "7fc100eb8166f32898842a823d58343e9149a8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc100eb8166f32898842a823d58343e9149a8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc100eb8166f32898842a823d58343e9149a8c6"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "5267e52b734c684ca30dde1472a3cd45996906b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "patch": "@@ -1,3 +1,8 @@\n+2007-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-dfa.c (get_ref_base_and_extent): Do not expect positive\n+\toffsets for BIT_FIELD_REF and COMPONENT_REF.\n+\n 2007-03-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (is_global_var): Move ..."}, {"sha": "b3b28b30527ea6f9f7031bc314a2e2d3ff857fd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "patch": "@@ -1,3 +1,7 @@\n+2007-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/thin_pointer.ad[sb]: New test.\n+\n 2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n \n \t* g++.dg/cpp0x/bracket1.C: New."}, {"sha": "1e3943f7a5b0f747bf8c534f3119b2423d70317b", "filename": "gcc/testsuite/gnat.dg/thin_pointer.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.adb?ref=8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+package body Thin_Pointer is\n+\n+   procedure Set_Buffer (AD : Buf_Ptr; Buffer : Stream_ptr) is\n+   begin\n+      AD.B.A := Buffer (Buffer'First)'Address;\n+   end Set_Buffer;\n+\n+end Thin_Pointer;"}, {"sha": "6f528a51ed9ca033e3948a71afbadf88fc75e1db", "filename": "gcc/testsuite/gnat.dg/thin_pointer.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer.ads?ref=8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "patch": "@@ -0,0 +1,22 @@\n+with System;\n+\n+package Thin_Pointer is\n+\n+   type Stream is array (Integer range <>) of Character;\n+\n+   type Stream_Ptr is access Stream;\n+   for Stream_Ptr'Size use Standard'Address_Size;\n+\n+   type Buf is record\n+      A : System.Address;\n+   end record;\n+\n+   type Buf_Wrapper is record\n+      B : Buf;\n+   end record;\n+\n+   type Buf_Ptr is access Buf_Wrapper;\n+\n+   procedure Set_Buffer (AD : Buf_Ptr; Buffer : Stream_ptr);\n+\n+end Thin_Pointer;"}, {"sha": "70563e70646ae2030f2fcafc3a9eacd3ad3423b6", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=8975ae2285b74f05a4465e7a9c8c0bdf8cf300b1", "patch": "@@ -896,7 +896,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       switch (TREE_CODE (exp))\n \t{\n \tcase BIT_FIELD_REF:\n-\t  bit_offset += tree_low_cst (TREE_OPERAND (exp, 2), 1);\n+\t  bit_offset += tree_low_cst (TREE_OPERAND (exp, 2), 0);\n \t  break;\n \n \tcase COMPONENT_REF:\n@@ -906,23 +906,20 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \n \t    if (this_offset && TREE_CODE (this_offset) == INTEGER_CST)\n \t      {\n-\t\tHOST_WIDE_INT hthis_offset = tree_low_cst (this_offset, 1);\n+\t\tHOST_WIDE_INT hthis_offset = tree_low_cst (this_offset, 0);\n \n \t\ththis_offset *= BITS_PER_UNIT;\n \t\tbit_offset += hthis_offset;\n-\t\tbit_offset += tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1);\n+\t\tbit_offset += tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 0);\n \t      }\n \t    else\n \t      {\n \t\ttree csize = TYPE_SIZE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n \t\t/* We need to adjust maxsize to the whole structure bitsize.\n \t\t   But we can subtract any constant offset seen sofar,\n \t\t   because that would get us out of the structure otherwise.  */\n-\t\tif (maxsize != -1\n-\t\t    && csize && host_integerp (csize, 1))\n-\t\t  {\n-\t\t    maxsize = (TREE_INT_CST_LOW (csize) - bit_offset);\n-\t\t  }\n+\t\tif (maxsize != -1 && csize && host_integerp (csize, 1))\n+\t\t  maxsize = TREE_INT_CST_LOW (csize) - bit_offset;\n \t\telse\n \t\t  maxsize = -1;\n \t      }\n@@ -959,11 +956,8 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t/* We need to adjust maxsize to the whole array bitsize.\n \t\t   But we can subtract any constant offset seen sofar,\n \t\t   because that would get us outside of the array otherwise.  */\n-\t\tif (maxsize != -1\n-\t\t    && asize && host_integerp (asize, 1))\n-\t\t  {\n-\t\t    maxsize = (TREE_INT_CST_LOW (asize) - bit_offset);\n-\t\t  }\n+\t\tif (maxsize != -1 && asize && host_integerp (asize, 1))\n+\t\t  maxsize = TREE_INT_CST_LOW (asize) - bit_offset;\n \t\telse\n \t\t  maxsize = -1;\n "}]}