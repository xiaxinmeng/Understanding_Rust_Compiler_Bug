{"sha": "ee629d242d9f93a38e49bed904bb334bbe15dde1", "node_id": "C_kwDOANBUbNoAKGVlNjI5ZDI0MmQ5ZjkzYTM4ZTQ5YmVkOTA0YmIzMzRiYmUxNWRkZTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-28T09:13:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-28T09:13:43Z"}, "message": "i386: Fix up ix86_abi handling [PR106875]\n\nThe following testcase fails since my changes to make also\nopts_set saved/restored upon function target/optimization changes\n(before it has been acting as \"has this option be ever explicit\nanywhere?\").\n\nThe problem is that for ix86_abi we depend on the opts_set\nvalue for it in ix86_option_override_internal:\n  SET_OPTION_IF_UNSET (opts, opts_set, ix86_abi, DEFAULT_ABI);\nbut as it is a TargetSave, the backend code is required to\nsave/restore it manually (it does that) and since gcc 11 also\nto save/restore the opts_set bit for it (which isn't done).\nWe don't do that for various other TargetSave which\nix86_function_specific_{save,restore} saves/restores, but as long\nas we never test opts_set for it, it doesn't really matter.\nOne possible fix would be to introduce some new TargetSave into\nwhich ix86_function_specific_{save,restore} would save/restore a bitmask\nof the opts_set bits.  The following patch uses an easier fix, by\nmaking it a TargetVariable instead the saving/restoring is handled\nby the generated code.\nThe differences in options.h are just slight movements on where\n*ix86_abi stuff appears in it, ditto for options.cc, the real\ndifferences are just in options-save.cc, where cl_target_option_save\ngets:\n+  ptr->x_ix86_abi = opts->x_ix86_abi;\n...\n+  if (opts_set->x_ix86_abi) mask |= HOST_WIDE_INT_1U << 3;\n(plus adjustments of following TargetVariables mask related stuff),\ncl_target_option_restore gets:\n+  opts->x_ix86_abi = ptr->x_ix86_abi;\n...\n+  opts_set->x_ix86_abi = static_cast<enum calling_abi>((mask & 1) != 0);\n+  mask >>= 1;\nplus the movements in other functions too.  So, by it being a\nTargetVariable, the only thing that changed is that we don't need to\nhandle it manually in ix86_function_specific_{save,restore} because it\nis handled automatically including the opts_set stuff.\n\n2022-11-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/106875\n\t* config/i386/i386.opt (x_ix86_abi): Remove TargetSave.\n\t(ix86_abi): Replace it with TargetVariable.\n\t* config/i386/i386-options.cc (ix86_function_specific_save,\n\tix86_function_specific_restore): Don't save and restore x_ix86_abi.\n\n\t* g++.target/i386/pr106875.C: New test.", "tree": {"sha": "6929f88d6382cec264aa2401a3ae78a41a3993e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6929f88d6382cec264aa2401a3ae78a41a3993e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee629d242d9f93a38e49bed904bb334bbe15dde1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee629d242d9f93a38e49bed904bb334bbe15dde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee629d242d9f93a38e49bed904bb334bbe15dde1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee629d242d9f93a38e49bed904bb334bbe15dde1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b54e5b796b00f0072b61f9cd6a964c66ead29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b54e5b796b00f0072b61f9cd6a964c66ead29b"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "44dcccb0a736f6f1a56004d8464eba0441a0bb0f", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=ee629d242d9f93a38e49bed904bb334bbe15dde1", "patch": "@@ -687,7 +687,6 @@ ix86_function_specific_save (struct cl_target_option *ptr,\n   ptr->x_recip_mask_explicit = opts->x_recip_mask_explicit;\n   ptr->x_ix86_arch_string = opts->x_ix86_arch_string;\n   ptr->x_ix86_tune_string = opts->x_ix86_tune_string;\n-  ptr->x_ix86_abi = opts->x_ix86_abi;\n   ptr->x_ix86_asm_dialect = opts->x_ix86_asm_dialect;\n   ptr->x_ix86_branch_cost = opts->x_ix86_branch_cost;\n   ptr->x_ix86_dump_tunes = opts->x_ix86_dump_tunes;\n@@ -823,7 +822,6 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   opts->x_recip_mask_explicit = ptr->x_recip_mask_explicit;\n   opts->x_ix86_arch_string = ptr->x_ix86_arch_string;\n   opts->x_ix86_tune_string = ptr->x_ix86_tune_string;\n-  opts->x_ix86_abi = ptr->x_ix86_abi;\n   opts->x_ix86_asm_dialect = ptr->x_ix86_asm_dialect;\n   opts->x_ix86_branch_cost = ptr->x_ix86_branch_cost;\n   opts->x_ix86_dump_tunes = ptr->x_ix86_dump_tunes;"}, {"sha": "aa8574e6b71b40c172adf92be312a2239568fdb0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ee629d242d9f93a38e49bed904bb334bbe15dde1", "patch": "@@ -109,8 +109,8 @@ TargetVariable\n enum cmodel ix86_cmodel = CM_32\n \n ;; -mabi=\n-TargetSave\n-enum calling_abi x_ix86_abi\n+TargetVariable\n+enum calling_abi ix86_abi = SYSV_ABI\n \n ;; -masm=\n TargetSave"}, {"sha": "eeab510761c777e1c202f81096bedb8ea63d4bb8", "filename": "gcc/testsuite/g++.target/i386/pr106875.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106875.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee629d242d9f93a38e49bed904bb334bbe15dde1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106875.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106875.C?ref=ee629d242d9f93a38e49bed904bb334bbe15dde1", "patch": "@@ -0,0 +1,5 @@\n+// PR target/106875\n+// { dg-do compile { target { c++11 && lp64 } } }\n+// { dg-options \"-O0 -mabi=ms -fabi-version=3 -mcall-ms2sysv-xlogues\" }\n+\n+#include \"pr101180.C\""}]}