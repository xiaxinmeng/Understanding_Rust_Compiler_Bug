{"sha": "93103603fd66a9fcf3ea2d8b52657e4b2496f544", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMDM2MDNmZDY2YTlmY2YzZWEyZDhiNTI2NTdlNGIyNDk2ZjU0NA==", "commit": {"author": {"name": "Sunil K Pandey", "email": "skpgkp2@gmail.com", "date": "2020-10-14T18:36:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-10-14T18:37:38Z"}, "message": "x86: Add missing intrinsics [PR95483]\n\nTested on x86-64.\n\ngcc/ChangeLog:\n\n\tPR target/95483\n\t* config/i386/avx2intrin.h (_mm_broadcastsi128_si256): New intrinsics.\n\t(_mm_broadcastsd_pd): Ditto.\n\t* config/i386/avx512bwintrin.h (_mm512_loadu_epi16): New intrinsics.\n\t(_mm512_storeu_epi16): Ditto.\n\t(_mm512_loadu_epi8): Ditto.\n\t(_mm512_storeu_epi8): Ditto.\n\t* config/i386/avx512dqintrin.h (_mm_reduce_round_sd): New intrinsics.\n\t(_mm_mask_reduce_round_sd): Ditto.\n\t(_mm_maskz_reduce_round_sd): Ditto.\n\t(_mm_reduce_round_ss): Ditto.\n\t(_mm_mask_reduce_round_ss): Ditto.\n\t(_mm_maskz_reduce_round_ss): Ditto.\n\t(_mm512_reduce_round_pd): Ditto.\n\t(_mm512_mask_reduce_round_pd): Ditto.\n\t(_mm512_maskz_reduce_round_pd): Ditto.\n\t(_mm512_reduce_round_ps): Ditto.\n\t(_mm512_mask_reduce_round_ps): Ditto.\n\t(_mm512_maskz_reduce_round_ps): Ditto.\n\t* config/i386/avx512erintrin.h\n\t(_mm_mask_rcp28_round_sd): New intrinsics.\n\t(_mm_maskz_rcp28_round_sd): Ditto.\n\t(_mm_mask_rcp28_round_ss): Ditto.\n\t(_mm_maskz_rcp28_round_ss): Ditto.\n\t(_mm_mask_rsqrt28_round_sd): Ditto.\n\t(_mm_maskz_rsqrt28_round_sd): Ditto.\n\t(_mm_mask_rsqrt28_round_ss): Ditto.\n\t(_mm_maskz_rsqrt28_round_ss): Ditto.\n\t(_mm_mask_rcp28_sd): Ditto.\n\t(_mm_maskz_rcp28_sd): Ditto.\n\t(_mm_mask_rcp28_ss): Ditto.\n\t(_mm_maskz_rcp28_ss): Ditto.\n\t(_mm_mask_rsqrt28_sd): Ditto.\n\t(_mm_maskz_rsqrt28_sd): Ditto.\n\t(_mm_mask_rsqrt28_ss): Ditto.\n\t(_mm_maskz_rsqrt28_ss): Ditto.\n\t* config/i386/avx512fintrin.h (_mm_mask_sqrt_sd): New intrinsics.\n\t(_mm_maskz_sqrt_sd): Ditto.\n\t(_mm_mask_sqrt_ss): Ditto.\n\t(_mm_maskz_sqrt_ss): Ditto.\n\t(_mm_mask_scalef_sd): Ditto.\n\t(_mm_maskz_scalef_sd): Ditto.\n\t(_mm_mask_scalef_ss): Ditto.\n\t(_mm_maskz_scalef_ss): Ditto.\n\t(_mm_mask_cvt_roundsd_ss): Ditto.\n\t(_mm_maskz_cvt_roundsd_ss): Ditto.\n\t(_mm_mask_cvt_roundss_sd): Ditto.\n\t(_mm_maskz_cvt_roundss_sd): Ditto.\n\t(_mm_mask_cvtss_sd): Ditto.\n\t(_mm_maskz_cvtss_sd): Ditto.\n\t(_mm_mask_cvtsd_ss): Ditto.\n\t(_mm_maskz_cvtsd_ss): Ditto.\n\t(_mm512_cvtsi512_si32): Ditto.\n\t(_mm_cvtsd_i32): Ditto.\n\t(_mm_cvtss_i32): Ditto.\n\t(_mm_cvti32_sd): Ditto.\n\t(_mm_cvti32_ss): Ditto.\n\t(_mm_cvtsd_i64): Ditto.\n\t(_mm_cvtss_i64): Ditto.\n\t(_mm_cvti64_sd): Ditto.\n\t(_mm_cvti64_ss): Ditto.\n\t* config/i386/avx512vlbwintrin.h (_mm256_storeu_epi8): New intrinsics.\n\t(_mm_storeu_epi8): Ditto.\n\t(_mm256_loadu_epi16): Ditto.\n\t(_mm_loadu_epi16): Ditto.\n\t(_mm256_loadu_epi8): Ditto.\n\t(_mm_loadu_epi8): Ditto.\n\t(_mm256_storeu_epi16): Ditto.\n\t(_mm_storeu_epi16): Ditto.\n\t* config/i386/avx512vlintrin.h (_mm256_load_epi64): New intrinsics.\n\t(_mm_load_epi64): Ditto.\n\t(_mm256_load_epi32): Ditto.\n\t(_mm_load_epi32): Ditto.\n\t(_mm256_store_epi32): Ditto.\n\t(_mm_store_epi32): Ditto.\n\t(_mm256_loadu_epi64): Ditto.\n\t(_mm_loadu_epi64): Ditto.\n\t(_mm256_loadu_epi32): Ditto.\n\t(_mm_loadu_epi32): Ditto.\n\t(_mm256_mask_cvt_roundps_ph): Ditto.\n\t(_mm256_maskz_cvt_roundps_ph): Ditto.\n\t(_mm_mask_cvt_roundps_ph): Ditto.\n\t(_mm_maskz_cvt_roundps_ph): Ditto.\n\t* config/i386/avxintrin.h (_mm256_cvtsi256_si32): New intrinsics.\n\t* config/i386/emmintrin.h (_mm_loadu_si32): New intrinsics.\n\t(_mm_loadu_si16): Ditto.\n\t(_mm_storeu_si32): Ditto.\n\t(_mm_storeu_si16): Ditto.\n\t* config/i386/i386-builtin-types.def\n\t(V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT): Add new type.\n\t(V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT): Ditto.\n\t(V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT): Ditto.\n\t(V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT): Ditto.\n\t* config/i386/i386-builtin.def\n\t(__builtin_ia32_cvtsd2ss_mask_round): New builtin.\n\t(__builtin_ia32_cvtss2sd_mask_round): Ditto.\n\t(__builtin_ia32_rcp28sd_mask_round): Ditto.\n\t(__builtin_ia32_rcp28ss_mask_round): Ditto.\n\t(__builtin_ia32_rsqrt28sd_mask_round): Ditto.\n\t(__builtin_ia32_rsqrt28ss_mask_round): Ditto.\n\t(__builtin_ia32_reducepd512_mask_round): Ditto.\n\t(__builtin_ia32_reduceps512_mask_round): Ditto.\n\t(__builtin_ia32_reducesd_mask_round): Ditto.\n\t(__builtin_ia32_reducess_mask_round): Ditto.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_round_builtin): Expand round builtin for new type.\n\t(V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT)\n\t(V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT)\n\t(V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT)\n\t(V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT)\n\t* config/i386/mmintrin.h ()\n\tDefine datatype __m32 and __m16.\n\tDefine datatype __m32_u and __m16_u.\n\t* config/i386/sse.md: Adjust pattern.\n\t(<mask_codefor>reducep<mode><mask_name><round_saeonly_name>): Adjust.\n\t(reduces<mode><mask_scalar_name><round_saeonly_scalar_name>): Ditto.\n\t(sse2_cvtsd2ss<mask_name><round_name>): Ditto.\n\t(sse2_cvtss2sd<mask_name><round_saeonly_name>): Ditto.\n\t(avx512er_vmrcp28<mode><mask_name><round_saeonly_name>): Ditto.\n\t(avx512er_vmrsqrt28<mode><mask_name><round_saeonly_name>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/95483\n\t* gcc.target/i386/avx-1.c: Add test.\n\t* gcc.target/i386/avx2-vbroadcastsi128-1.c: Ditto.\n\t* gcc.target/i386/avx2-vbroadcastsi128-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducesd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducesd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducess-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducess-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28sd-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28sd-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28ss-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrcp28ss-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28sd-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28sd-2.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28ss-1.c: Ditto.\n\t* gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtss-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducepd-3.c: New test.\n\t* gcc.target/i386/avx512dq-vreducepd-4.c: New test.\n\t* gcc.target/i386/avx512dq-vreduceps-3.c: New test.\n\t* gcc.target/i386/avx512dq-vreduceps-4.c: New test.\n\t* gcc.target/i386/avx512f-vcvtsi2sd-1.c: New test.\n\t* gcc.target/i386/pr95483-1.c: New test.\n\t* gcc.target/i386/pr95483-2.c: New test.\n\t* gcc.target/i386/pr95483-3.c: New test.\n\t* gcc.target/i386/pr95483-4.c: New test.\n\t* gcc.target/i386/pr95483-5.c: New test.\n\t* gcc.target/i386/pr95483-6.c: New test.\n\t* gcc.target/i386/pr95483-7.c: New test.", "tree": {"sha": "81903fe7a2a57d752baaef08c0e3cfb5016b5f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81903fe7a2a57d752baaef08c0e3cfb5016b5f95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93103603fd66a9fcf3ea2d8b52657e4b2496f544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93103603fd66a9fcf3ea2d8b52657e4b2496f544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93103603fd66a9fcf3ea2d8b52657e4b2496f544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93103603fd66a9fcf3ea2d8b52657e4b2496f544/comments", "author": {"login": "skpgkp1", "id": 33876910, "node_id": "MDQ6VXNlcjMzODc2OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/33876910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skpgkp1", "html_url": "https://github.com/skpgkp1", "followers_url": "https://api.github.com/users/skpgkp1/followers", "following_url": "https://api.github.com/users/skpgkp1/following{/other_user}", "gists_url": "https://api.github.com/users/skpgkp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/skpgkp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skpgkp1/subscriptions", "organizations_url": "https://api.github.com/users/skpgkp1/orgs", "repos_url": "https://api.github.com/users/skpgkp1/repos", "events_url": "https://api.github.com/users/skpgkp1/events{/privacy}", "received_events_url": "https://api.github.com/users/skpgkp1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fca6a981790b8445e91db9b955909ed902d94a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fca6a981790b8445e91db9b955909ed902d94a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fca6a981790b8445e91db9b955909ed902d94a6"}], "stats": {"total": 1486, "additions": 1429, "deletions": 57}, "files": [{"sha": "e29c53200aa2e1ca4d4f7d14f3d38a6001a9fdf2", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -950,6 +950,9 @@ _mm256_broadcastsi128_si256 (__m128i __X)\n   return (__m256i) __builtin_ia32_vbroadcastsi256 ((__v2di)__X);\n }\n \n+#define _mm_broadcastsi128_si256(X) _mm256_broadcastsi128_si256(X)\n+#define _mm_broadcastsd_pd(X) _mm_movedup_pd(X)\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "3da05e15dd6eb9048b5f63a2a5722ed7f1d6cca6", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -36,7 +36,11 @@\n \n /* Internal data types for implementing the intrinsics.  */\n typedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+typedef short __v32hi_u __attribute__ ((__vector_size__ (64),\t\\\n+\t\t\t\t\t__may_alias__, __aligned__ (1)));\n typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n+typedef char __v64qi_u __attribute__ ((__vector_size__ (64),\t\\\n+\t\t\t\t       __may_alias__, __aligned__ (1)));\n \n typedef unsigned long long __mmask64;\n \n@@ -301,6 +305,13 @@ _mm512_maskz_mov_epi16 (__mmask32 __U, __m512i __A)\n \t\t\t\t\t\t    (__mmask32) __U);\n }\n \n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_loadu_epi16 (void const *__P)\n+{\n+  return (__m512i) (*(__v32hi_u *) __P);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_loadu_epi16 (__m512i __W, __mmask32 __U, void const *__P)\n@@ -320,6 +331,13 @@ _mm512_maskz_loadu_epi16 (__mmask32 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask32) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_storeu_epi16 (void *__P, __m512i __A)\n+{\n+  *(__v32hi_u *) __P = (__v32hi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_storeu_epi16 (void *__P, __mmask32 __U, __m512i __A)\n@@ -380,6 +398,13 @@ _kunpackd_mask64 (__mmask32 __A, __mmask32 __B)\n \t\t\t\t\t      (__mmask64) __B);\n }\n \n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_loadu_epi8 (void const *__P)\n+{\n+  return (__m512i) (*(__v64qi_u *) __P);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_loadu_epi8 (__m512i __W, __mmask64 __U, void const *__P)\n@@ -399,6 +424,13 @@ _mm512_maskz_loadu_epi8 (__mmask64 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask64) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_storeu_epi8 (void *__P, __m512i __A)\n+{\n+  *(__v64qi_u *) __P = (__v64qi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_storeu_epi8 (void *__P, __mmask64 __U, __m512i __A)"}, {"sha": "fd61b70fa19c4a240f1a6e23bffb25a94e9bb02b", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1166,6 +1166,17 @@ _mm_reduce_sd (__m128d __A, __m128d __B, int __C)\n \t\t\t\t\t\t (__mmask8) -1);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_round_sd (__m128d __A, __m128d __B, int __C, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_reducesd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t       (__v2df) __B, __C,\n+\t\t\t\t\t\t       (__v2df)\n+\t\t\t\t\t\t       _mm_setzero_pd (),\n+\t\t\t\t\t\t       (__mmask8) -1, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_reduce_sd (__m128d __W,  __mmask8 __U, __m128d __A,\n@@ -1177,6 +1188,17 @@ _mm_mask_reduce_sd (__m128d __W,  __mmask8 __U, __m128d __A,\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_reduce_round_sd (__m128d __W,  __mmask8 __U, __m128d __A,\n+\t\t\t  __m128d __B, int __C, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_reducesd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t       (__v2df) __B, __C,\n+\t\t\t\t\t\t       (__v2df) __W,\n+\t\t\t\t\t\t       __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_reduce_sd (__mmask8 __U, __m128d __A, __m128d __B, int __C)\n@@ -1187,6 +1209,18 @@ _mm_maskz_reduce_sd (__mmask8 __U, __m128d __A, __m128d __B, int __C)\n \t\t\t\t\t\t (__mmask8) __U);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_reduce_round_sd (__mmask8 __U, __m128d __A, __m128d __B,\n+\t\t\t   int __C, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_reducesd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t       (__v2df) __B, __C,\n+\t\t\t\t\t\t       (__v2df)\n+\t\t\t\t\t\t       _mm_setzero_pd (),\n+\t\t\t\t\t\t       __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_reduce_ss (__m128 __A, __m128 __B, int __C)\n@@ -1197,6 +1231,16 @@ _mm_reduce_ss (__m128 __A, __m128 __B, int __C)\n \t\t\t\t\t\t(__mmask8) -1);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_reduce_round_ss (__m128 __A, __m128 __B, int __C, const int __R)\n+{\n+  return (__m128) __builtin_ia32_reducess_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t      (__v4sf) __B, __C,\n+\t\t\t\t\t\t      (__v4sf)\n+\t\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t\t      (__mmask8) -1, __R);\n+}\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1209,6 +1253,17 @@ _mm_mask_reduce_ss (__m128 __W,  __mmask8 __U, __m128 __A,\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_reduce_round_ss (__m128 __W,  __mmask8 __U, __m128 __A,\n+\t\t\t  __m128 __B, int __C, const int __R)\n+{\n+  return (__m128) __builtin_ia32_reducess_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t      (__v4sf) __B, __C,\n+\t\t\t\t\t\t      (__v4sf) __W,\n+\t\t\t\t\t\t      __U, __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_reduce_ss (__mmask8 __U, __m128 __A, __m128 __B, int __C)\n@@ -1219,6 +1274,18 @@ _mm_maskz_reduce_ss (__mmask8 __U, __m128 __A, __m128 __B, int __C)\n \t\t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_reduce_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n+\t\t\t   int __C, const int __R)\n+{\n+  return (__m128) __builtin_ia32_reducess_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t      (__v4sf) __B, __C,\n+\t\t\t\t\t\t      (__v4sf)\n+\t\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t\t      __U, __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_range_sd (__m128d __A, __m128d __B, int __C)\n@@ -1806,6 +1873,17 @@ _mm512_reduce_pd (__m512d __A, int __B)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_round_pd (__m512d __A, int __B, const int __R)\n+{\n+  return (__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df) __A,\n+\t\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t\t  (__v8df)\n+\t\t\t\t\t\t\t  _mm512_setzero_pd (),\n+\t\t\t\t\t\t\t  (__mmask8) -1, __R);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_reduce_pd (__m512d __W, __mmask8 __U, __m512d __A, int __B)\n@@ -1815,6 +1893,17 @@ _mm512_mask_reduce_pd (__m512d __W, __mmask8 __U, __m512d __A, int __B)\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_round_pd (__m512d __W, __mmask8 __U, __m512d __A,\n+\t\t\t     int __B, const int __R)\n+{\n+  return (__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df) __A,\n+\t\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t\t  (__v8df) __W,\n+\t\t\t\t\t\t\t  __U, __R);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_reduce_pd (__mmask8 __U, __m512d __A, int __B)\n@@ -1825,6 +1914,18 @@ _mm512_maskz_reduce_pd (__mmask8 __U, __m512d __A, int __B)\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_reduce_round_pd (__mmask8 __U, __m512d __A, int __B,\n+\t\t\t      const int __R)\n+{\n+  return (__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df) __A,\n+\t\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t\t  (__v8df)\n+\t\t\t\t\t\t\t  _mm512_setzero_pd (),\n+\t\t\t\t\t\t\t  __U, __R);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_reduce_ps (__m512 __A, int __B)\n@@ -1835,6 +1936,17 @@ _mm512_reduce_ps (__m512 __A, int __B)\n \t\t\t\t\t\t   (__mmask16) -1);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_reduce_round_ps (__m512 __A, int __B, const int __R)\n+{\n+  return (__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf) __A,\n+\t\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t\t (__v16sf)\n+\t\t\t\t\t\t\t _mm512_setzero_ps (),\n+\t\t\t\t\t\t\t (__mmask16) -1, __R);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_reduce_ps (__m512 __W, __mmask16 __U, __m512 __A, int __B)\n@@ -1844,6 +1956,17 @@ _mm512_mask_reduce_ps (__m512 __W, __mmask16 __U, __m512 __A, int __B)\n \t\t\t\t\t\t   (__mmask16) __U);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_reduce_round_ps (__m512 __W, __mmask16 __U, __m512 __A, int __B,\n+\t\t\t     const int __R)\n+{\n+  return (__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf) __A,\n+\t\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t\t (__v16sf) __W,\n+\t\t\t\t\t\t\t __U, __R);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_reduce_ps (__mmask16 __U, __m512 __A, int __B)\n@@ -1854,6 +1977,18 @@ _mm512_maskz_reduce_ps (__mmask16 __U, __m512 __A, int __B)\n \t\t\t\t\t\t   (__mmask16) __U);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_reduce_round_ps (__mmask16 __U, __m512 __A, int __B,\n+\t\t\t      const int __R)\n+{\n+  return (__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf) __A,\n+\t\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t\t (__v16sf)\n+\t\t\t\t\t\t\t _mm512_setzero_ps (),\n+\t\t\t\t\t\t\t __U, __R);\n+}\n+\n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_extractf32x8_ps (__m512 __A, const int __imm)\n@@ -2440,26 +2575,50 @@ _mm512_fpclass_ps_mask (__m512 __A, const int __imm)\n   ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),\t\\\n     (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)-1))\n \n+#define _mm512_reduce_round_pd(A, B, R)\t\t\t\t\t \\\n+  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\\\n+    (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)-1, (R)))\n+\n #define _mm512_mask_reduce_pd(W, U, A, B)\t\t\t\t\\\n   ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),\t\\\n     (int)(B), (__v8df)(__m512d)(W), (__mmask8)(U)))\n \n+#define _mm512_mask_reduce_round_pd(W, U, A, B, R)\t\t\t \\\n+  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\\\n+    (int)(B), (__v8df)(__m512d)(W), (U), (R)))\n+\n #define _mm512_maskz_reduce_pd(U, A, B)\t\t\t\t\t\\\n   ((__m512d) __builtin_ia32_reducepd512_mask ((__v8df)(__m512d)(A),\t\\\n     (int)(B), (__v8df)_mm512_setzero_pd (), (__mmask8)(U)))\n \n+#define _mm512_maskz_reduce_round_pd(U, A, B, R)\t\t\t \\\n+  ((__m512d) __builtin_ia32_reducepd512_mask_round ((__v8df)(__m512d)(A),\\\n+    (int)(B), (__v8df)_mm512_setzero_pd (), (U), (R)))\n+\n #define _mm512_reduce_ps(A, B)\t\t\t\t\t\t\\\n   ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),\t\\\n     (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)-1))\n \n+#define _mm512_reduce_round_ps(A, B, R)\t\t\t\t\t\\\n+  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\\\n+    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)-1, (R)))\n+\n #define _mm512_mask_reduce_ps(W, U, A, B)\t\t\t\t\\\n   ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),\t\\\n     (int)(B), (__v16sf)(__m512)(W), (__mmask16)(U)))\n \n+#define _mm512_mask_reduce_round_ps(W, U, A, B, R)\t\t\t\\\n+  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\\\n+    (int)(B), (__v16sf)(__m512)(W), (U), (R)))\n+\n #define _mm512_maskz_reduce_ps(U, A, B)\t\t\t\t\t\\\n   ((__m512) __builtin_ia32_reduceps512_mask ((__v16sf)(__m512)(A),\t\\\n     (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)(U)))\n \n+#define _mm512_maskz_reduce_round_ps(U, A, B, R)\t\t\t\\\n+  ((__m512) __builtin_ia32_reduceps512_mask_round ((__v16sf)(__m512)(A),\\\n+    (int)(B), (__v16sf)_mm512_setzero_ps (), (__mmask16)(U), (R)))\n+\n #define _mm512_extractf32x8_ps(X, C)                                    \\\n   ((__m256) __builtin_ia32_extractf32x8_mask ((__v16sf)(__m512) (X),    \\\n     (int) (C), (__v8sf)(__m256) _mm256_setzero_ps (), (__mmask8)-1))\n@@ -2679,6 +2838,20 @@ _mm512_fpclass_ps_mask (__m512 __A, const int __imm)\n     (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),\t\t\\\n     (__mmask8)(U)))\n \n+#define _mm_reduce_round_sd(A, B, C, R)\t\t\t\t       \\\n+  ((__m128d) __builtin_ia32_reducesd_round ((__v2df)(__m128d)(A),      \\\n+    (__v2df)(__m128d)(B), (int)(C), (__mmask8)(U), (int)(R)))\n+\n+#define _mm_mask_reduce_round_sd(W, U, A, B, C, R)\t\t       \\\n+  ((__m128d) __builtin_ia32_reducesd_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df)(__m128d)(W),\t       \\\n+    (__mmask8)(U), (int)(R)))\n+\n+#define _mm_maskz_reduce_round_sd(U, A, B, C, R)\t\t       \\\n+  ((__m128d) __builtin_ia32_reducesd_mask_round ((__v2df)(__m128d)(A), \\\n+    (__v2df)(__m128d)(B), (int)(C), (__v2df) _mm_setzero_pd (),\t       \\\n+    (__mmask8)(U), (int)(R)))\n+\n #define _mm_reduce_ss(A, B, C)\t\t\t\t\t\t\\\n   ((__m128) __builtin_ia32_reducess_mask ((__v4sf)(__m128)(A),\t\t\\\n     (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n@@ -2693,6 +2866,19 @@ _mm512_fpclass_ps_mask (__m512 __A, const int __imm)\n     (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t\t\\\n     (__mmask8)(U)))\n \n+#define _mm_reduce_round_ss(A, B, C, R)\t\t\t\t       \\\n+  ((__m128) __builtin_ia32_reducess_round ((__v4sf)(__m128)(A),\t       \\\n+    (__v4sf)(__m128)(B), (int)(C), (__mmask8)(U), (int)(R)))\n+\n+#define _mm_mask_reduce_round_ss(W, U, A, B, C, R)\t\t       \\\n+  ((__m128) __builtin_ia32_reducess_mask_round ((__v4sf)(__m128)(A),   \\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf)(__m128)(W),\t\t       \\\n+    (__mmask8)(U), (int)(R)))\n+\n+#define _mm_maskz_reduce_round_ss(U, A, B, C, R)\t\t       \\\n+  ((__m128) __builtin_ia32_reducesd_mask_round ((__v4sf)(__m128)(A),   \\\n+    (__v4sf)(__m128)(B), (int)(C), (__v4sf) _mm_setzero_ps (),\t       \\\n+    (__mmask8)(U), (int)(R)))\n \n \n #endif"}, {"sha": "6ec8ee2d3cb3388b699b8058f9ec9bb7ed268318", "filename": "gcc/config/i386/avx512erintrin.h", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512erintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -168,6 +168,30 @@ _mm_rcp28_round_sd (__m128d __A, __m128d __B, int __R)\n \t\t\t\t\t\t __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp28_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rcp28sd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t      (__v2df) __A,\n+\t\t\t\t\t\t      (__v2df) __W,\n+\t\t\t\t\t\t      __U,\n+\t\t\t\t\t\t      __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp28_round_sd (__mmask8 __U, __m128d __A, __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rcp28sd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t      (__v2df) __A,\n+\t\t\t\t\t\t      (__v2df)\n+\t\t\t\t\t\t      _mm_setzero_pd (),\n+\t\t\t\t\t\t      __U,\n+\t\t\t\t\t\t      __R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp28_round_ss (__m128 __A, __m128 __B, int __R)\n@@ -177,6 +201,30 @@ _mm_rcp28_round_ss (__m128 __A, __m128 __B, int __R)\n \t\t\t\t\t\t__R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rcp28_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rcp28ss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t     (__v4sf) __A,\n+\t\t\t\t\t\t     (__v4sf) __W,\n+\t\t\t\t\t\t     __U,\n+\t\t\t\t\t\t     __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rcp28_round_ss (__mmask8 __U, __m128 __A, __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rcp28ss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t     (__v4sf) __A,\n+\t\t\t\t\t\t     (__v4sf)\n+\t\t\t\t\t\t     _mm_setzero_ps (),\n+\t\t\t\t\t\t     __U,\n+\t\t\t\t\t\t     __R);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt28_round_pd (__m512d __A, int __R)\n@@ -242,6 +290,30 @@ _mm_rsqrt28_round_sd (__m128d __A, __m128d __B, int __R)\n \t\t\t\t\t\t   __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rsqrt28_round_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t   __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rsqrt28sd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t\t(__v2df) __A,\n+\t\t\t\t\t\t\t(__v2df) __W,\n+\t\t\t\t\t\t\t__U,\n+\t\t\t\t\t\t\t__R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rsqrt28_round_sd (__mmask8 __U, __m128d __A, __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rsqrt28sd_mask_round ((__v2df) __B,\n+\t\t\t\t\t\t\t(__v2df) __A,\n+\t\t\t\t\t\t\t(__v2df)\n+\t\t\t\t\t\t\t_mm_setzero_pd (),\n+\t\t\t\t\t\t\t__U,\n+\t\t\t\t\t\t\t__R);\n+}\n+\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n@@ -251,6 +323,30 @@ _mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n \t\t\t\t\t\t  __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_rsqrt28_round_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t   __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rsqrt28ss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t       (__v4sf) __A,\n+\t\t\t\t\t\t       (__v4sf) __W,\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_rsqrt28_round_ss (__mmask8 __U, __m128 __A, __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rsqrt28ss_mask_round ((__v4sf) __B,\n+\t\t\t\t\t\t       (__v4sf) __A,\n+\t\t\t\t\t\t       (__v4sf)\n+\t\t\t\t\t\t       _mm_setzero_ps (),\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t       __R);\n+}\n+\n #else\n #define _mm512_exp2a23_round_pd(A, C)            \\\n     __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n@@ -309,17 +405,69 @@ _mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n #define _mm_rcp28_round_sd(A, B, R)\t\\\n     __builtin_ia32_rcp28sd_round(A, B, R)\n \n+#define _mm_mask_rcp28_round_sd(W, U, A, B, R)\t\\\n+    __builtin_ia32_rcp28sd_mask_round ((A), (B), (W), (U), (R))\n+\n+#define _mm_maskz_rcp28_round_sd(U, A, B, R)\t\\\n+    __builtin_ia32_rcp28sd_mask_round ((A), (B), (__v2df) _mm_setzero_pd (), \\\n+\t\t\t\t       (U), (R))\n+\n #define _mm_rcp28_round_ss(A, B, R)\t\\\n     __builtin_ia32_rcp28ss_round(A, B, R)\n \n+#define _mm_mask_rcp28_round_ss(W, U, A, B, R)\t\\\n+    __builtin_ia32_rcp28ss_mask_round ((A), (B), (W), (U), (R))\n+\n+#define _mm_maskz_rcp28_round_ss(U, A, B, R)\t\\\n+    __builtin_ia32_rcp28ss_mask_round ((A), (B), (__v4sf) _mm_setzero_ps (), \\\n+\t\t\t\t       (U), (R))\n+\n #define _mm_rsqrt28_round_sd(A, B, R)\t\\\n     __builtin_ia32_rsqrt28sd_round(A, B, R)\n \n+#define _mm_mask_rsqrt28_round_sd(W, U, A, B, R)\t\\\n+    __builtin_ia32_rsqrt28sd_mask_round ((A), (B), (W), (U), (R))\n+\n+#define _mm_maskz_rsqrt28_round_sd(U, A, B, R)\t\\\n+    __builtin_ia32_rsqrt28sd_mask_round ((A), (B), (__v2df) _mm_setzero_pd (),\\\n+\t\t\t\t\t (U), (R))\n+\n #define _mm_rsqrt28_round_ss(A, B, R)\t\\\n     __builtin_ia32_rsqrt28ss_round(A, B, R)\n \n+#define _mm_mask_rsqrt28_round_ss(W, U, A, B, R)\t\\\n+    __builtin_ia32_rsqrt28ss_mask_round ((A), (B), (W), (U), (R))\n+\n+#define _mm_maskz_rsqrt28_round_ss(U, A, B, R)\t\\\n+    __builtin_ia32_rsqrt28ss_mask_round ((A), (B), (__v4sf) _mm_setzero_ps (),\\\n+\t\t\t\t\t (U), (R))\n+\n #endif\n \n+#define _mm_mask_rcp28_sd(W, U, A, B)\\\n+    _mm_mask_rcp28_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_rcp28_sd(U, A, B)\\\n+    _mm_maskz_rcp28_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_rcp28_ss(W, U, A, B)\\\n+    _mm_mask_rcp28_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_rcp28_ss(U, A, B)\\\n+    _mm_maskz_rcp28_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_rsqrt28_sd(W, U, A, B)\\\n+    _mm_mask_rsqrt28_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_rsqrt28_sd(U, A, B)\\\n+    _mm_maskz_rsqrt28_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_rsqrt28_ss(W, U, A, B)\\\n+    _mm_mask_rsqrt28_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_rsqrt28_ss(U, A, B)\\\n+    _mm_maskz_rsqrt28_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n #define _mm512_exp2a23_pd(A)                    \\\n     _mm512_exp2a23_round_pd(A, _MM_FROUND_CUR_DIRECTION)\n "}, {"sha": "6342fdebf914b34b8617c94384ce67d9dbe216c0", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2124,6 +2124,18 @@ _mm_maskz_sqrt_round_ss (__mmask8 __U, __m128 __A, __m128 __B, const int __R)\n \t(__v4sf) _mm_setzero_ps (), U, C)\n #endif\n \n+#define _mm_mask_sqrt_sd(W, U, A, B) \\\n+    _mm_mask_sqrt_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_sqrt_sd(U, A, B) \\\n+    _mm_maskz_sqrt_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_sqrt_ss(W, U, A, B) \\\n+    _mm_mask_sqrt_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_sqrt_ss(U, A, B) \\\n+    _mm_maskz_sqrt_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cvtepi8_epi32 (__m128i __A)\n@@ -3259,6 +3271,18 @@ _mm_maskz_scalef_round_ss (__mmask8 __U, __m128 __A, __m128 __B, const int __R)\n \t(__v4sf)_mm_setzero_ps (), -1, C)\n #endif\n \n+#define _mm_mask_scalef_sd(W, U, A, B) \\\n+    _mm_mask_scalef_round_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_scalef_sd(U, A, B) \\\n+    _mm_maskz_scalef_round_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_scalef_ss(W, U, A, B) \\\n+    _mm_mask_scalef_round_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_scalef_ss(U, A, B) \\\n+    _mm_maskz_scalef_round_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -8621,6 +8645,30 @@ _mm_cvt_roundsd_ss (__m128 __A, __m128d __B, const int __R)\n \t\t\t\t\t\t __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundsd_ss (__m128 __W, __mmask8 __U, __m128 __A,\n+\t\t\t __m128d __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_cvtsd2ss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t      (__v2df) __B,\n+\t\t\t\t\t\t      (__v4sf) __W,\n+\t\t\t\t\t\t      __U,\n+\t\t\t\t\t\t      __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundsd_ss (__mmask8 __U, __m128 __A,\n+\t\t\t __m128d __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_cvtsd2ss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t      (__v2df) __B,\n+\t\t\t\t\t\t      _mm_setzero_ps (),\n+\t\t\t\t\t\t      __U,\n+\t\t\t\t\t\t      __R);\n+}\n+\n extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvt_roundss_sd (__m128d __A, __m128 __B, const int __R)\n@@ -8629,6 +8677,30 @@ _mm_cvt_roundss_sd (__m128d __A, __m128 __B, const int __R)\n \t\t\t\t\t\t  (__v4sf) __B,\n \t\t\t\t\t\t  __R);\n }\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvt_roundss_sd (__m128d __W, __mmask8 __U, __m128d __A,\n+\t\t\t __m128 __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_cvtss2sd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t       (__v4sf) __B,\n+\t\t\t\t\t\t       (__v2df) __W,\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvt_roundss_sd (__mmask8 __U, __m128d __A,\n+\t\t\t  __m128 __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_cvtss2sd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t       (__v4sf) __B,\n+\t\t\t\t\t\t       _mm_setzero_pd (),\n+\t\t\t\t\t\t       __U,\n+\t\t\t\t\t\t       __R);\n+}\n #else\n #define _mm512_cvt_roundpd_ps(A, B)\t\t \\\n     (__m256)__builtin_ia32_cvtpd2ps512_mask(A, (__v8sf)_mm256_undefined_ps(), -1, B)\n@@ -8642,10 +8714,37 @@ _mm_cvt_roundss_sd (__m128d __A, __m128 __B, const int __R)\n #define _mm_cvt_roundsd_ss(A, B, C)\t\t \\\n     (__m128)__builtin_ia32_cvtsd2ss_round(A, B, C)\n \n+#define _mm_mask_cvt_roundsd_ss(W, U, A, B, C)\t\\\n+    (__m128)__builtin_ia32_cvtsd2ss_mask_round ((A), (B), (W), (U), (C))\n+\n+#define _mm_maskz_cvt_roundsd_ss(U, A, B, C)\t\\\n+    (__m128)__builtin_ia32_cvtsd2ss_mask_round ((A), (B), _mm_setzero_ps (), \\\n+\t\t\t\t\t\t(U), (C))\n+\n #define _mm_cvt_roundss_sd(A, B, C)\t\t \\\n     (__m128d)__builtin_ia32_cvtss2sd_round(A, B, C)\n+\n+#define _mm_mask_cvt_roundss_sd(W, U, A, B, C)\t\\\n+    (__m128d)__builtin_ia32_cvtss2sd_mask_round ((A), (B), (W), (U), (C))\n+\n+#define _mm_maskz_cvt_roundss_sd(U, A, B, C)\t\\\n+    (__m128d)__builtin_ia32_cvtss2sd_mask_round ((A), (B), _mm_setzero_pd (), \\\n+\t\t\t\t\t\t (U), (C))\n+\n #endif\n \n+#define _mm_mask_cvtss_sd(W, U, A, B) \\\n+    _mm_mask_cvt_roundss_sd ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_cvtss_sd(U, A, B) \\\n+    _mm_maskz_cvt_roundss_sd ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_mask_cvtsd_ss(W, U, A, B) \\\n+    _mm_mask_cvt_roundsd_ss ((W), (U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_maskz_cvtsd_ss(U, A, B) \\\n+    _mm_maskz_cvt_roundsd_ss ((U), (A), (B), _MM_FROUND_CUR_DIRECTION)\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_stream_si512 (__m512i * __P, __m512i __A)\n@@ -14265,6 +14364,14 @@ _mm_cvttss_i64 (__m128 __A)\n }\n #endif /* __x86_64__ */\n \n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtsi512_si32 (__m512i __A)\n+{\n+  __v16si __B = (__v16si) __A;\n+  return __B[0];\n+}\n+\n extern __inline unsigned\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtss_u32 (__m128 __A)\n@@ -14289,6 +14396,34 @@ _mm_cvttss_i32 (__m128 __A)\n \t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsd_i32 (__m128d __A)\n+{\n+  return (int) __builtin_ia32_cvtsd2si ((__v2df) __A);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtss_i32 (__m128 __A)\n+{\n+  return (int) __builtin_ia32_cvtss2si ((__v4sf) __A);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti32_sd (__m128d __A, int __B)\n+{\n+  return (__m128d) __builtin_ia32_cvtsi2sd ((__v2df) __A, __B);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti32_ss (__m128 __A, int __B)\n+{\n+  return (__m128) __builtin_ia32_cvtsi2ss ((__v4sf) __A, __B);\n+}\n+\n #ifdef __x86_64__\n extern __inline unsigned long long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -14315,6 +14450,34 @@ _mm_cvttsd_i64 (__m128d __A)\n   return (long long) __builtin_ia32_vcvttsd2si64 ((__v2df) __A,\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsd_i64 (__m128d __A)\n+{\n+  return (long long) __builtin_ia32_cvtsd2si64 ((__v2df) __A);\n+}\n+\n+extern __inline long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtss_i64 (__m128 __A)\n+{\n+  return (long long) __builtin_ia32_cvtss2si64 ((__v4sf) __A);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti64_sd (__m128d __A, long long __B)\n+{\n+  return (__m128d) __builtin_ia32_cvtsi642sd ((__v2df) __A, __B);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvti64_ss (__m128 __A, long long __B)\n+{\n+  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);\n+}\n #endif /* __x86_64__ */\n \n extern __inline unsigned"}, {"sha": "b4b1d7fb19e0e7afad215c25ba63f741d6049ede", "filename": "gcc/config/i386/avx512vlbwintrin.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -34,6 +34,15 @@\n #define __DISABLE_AVX512VLBW__\n #endif /* __AVX512VLBW__ */\n \n+/* Internal data types for implementing the intrinsics.  */\n+typedef short __v16hi_u __attribute__ ((__vector_size__ (32),\t\\\n+\t\t\t\t\t__may_alias__, __aligned__ (1)));\n+typedef short __v8hi_u __attribute__ ((__vector_size__ (16),\t\\\n+\t\t\t\t       __may_alias__, __aligned__ (1)));\n+typedef char __v32qi_u __attribute__ ((__vector_size__ (32),\t\\\n+\t\t\t\t       __may_alias__, __aligned__ (1)));\n+typedef char __v16qi_u __attribute__ ((__vector_size__ (16),\t\\\n+\t\t\t\t       __may_alias__, __aligned__ (1)));\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -73,6 +82,13 @@ _mm_maskz_mov_epi8 (__mmask16 __U, __m128i __A)\n \t\t\t\t\t\t    (__mmask16) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu_epi8 (void *__P, __m256i __A)\n+{\n+  *(__v32qi_u *) __P = (__v32qi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_storeu_epi8 (void *__P, __mmask32 __U, __m256i __A)\n@@ -82,6 +98,13 @@ _mm256_mask_storeu_epi8 (void *__P, __mmask32 __U, __m256i __A)\n \t\t\t\t     (__mmask32) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_storeu_epi8 (void *__P, __m128i __A)\n+{\n+  *(__v16qi_u *) __P = (__v16qi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_storeu_epi8 (void *__P, __mmask16 __U, __m128i __A)\n@@ -91,6 +114,13 @@ _mm_mask_storeu_epi8 (void *__P, __mmask16 __U, __m128i __A)\n \t\t\t\t     (__mmask16) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu_epi16 (void const *__P)\n+{\n+  return (__m256i) (*(__v16hi_u *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_loadu_epi16 (__m256i __W, __mmask16 __U, void const *__P)\n@@ -110,6 +140,13 @@ _mm256_maskz_loadu_epi16 (__mmask16 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask16) __U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_epi16 (void const *__P)\n+{\n+  return (__m128i) (*(__v8hi_u *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_loadu_epi16 (__m128i __W, __mmask8 __U, void const *__P)\n@@ -168,6 +205,13 @@ _mm_maskz_mov_epi16 (__mmask8 __U, __m128i __A)\n \t\t\t\t\t\t    (__mmask8) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu_epi8 (void const *__P)\n+{\n+  return (__m256i) (*(__v32qi_u *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_loadu_epi8 (__m256i __W, __mmask32 __U, void const *__P)\n@@ -187,6 +231,13 @@ _mm256_maskz_loadu_epi8 (__mmask32 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask32) __U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_epi8 (void const *__P)\n+{\n+  return (__m128i) (*(__v16qi_u *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_loadu_epi8 (__m128i __W, __mmask16 __U, void const *__P)\n@@ -3708,6 +3759,13 @@ _mm256_cmple_epu16_mask (__m256i __X, __m256i __Y)\n \t\t\t\t\t\t   (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_storeu_epi16 (void *__P, __m256i __A)\n+{\n+  *(__v16hi_u *) __P = (__v16hi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_storeu_epi16 (void *__P, __mmask16 __U, __m256i __A)\n@@ -3717,6 +3775,13 @@ _mm256_mask_storeu_epi16 (void *__P, __mmask16 __U, __m256i __A)\n \t\t\t\t     (__mmask16) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_storeu_epi16 (void *__P, __m128i __A)\n+{\n+  *(__v8hi_u *) __P = (__v8hi_u) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_storeu_epi16 (void *__P, __mmask8 __U, __m128i __A)"}, {"sha": "99666c7f9e092e7f0a9032759f40bc88debf414c", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -36,6 +36,14 @@\n \n /* Internal data types for implementing the intrinsics.  */\n typedef unsigned int __mmask32;\n+typedef int __v4si_u __attribute__ ((__vector_size__ (16),\t\\\n+\t\t\t\t     __may_alias__, __aligned__ (1)));\n+typedef int __v8si_u __attribute__ ((__vector_size__ (32),\t\\\n+\t\t\t\t     __may_alias__, __aligned__ (1)));\n+typedef long long __v2di_u __attribute__ ((__vector_size__ (16),\t\\\n+\t\t\t\t\t   __may_alias__, __aligned__ (1)));\n+typedef long long __v4di_u __attribute__ ((__vector_size__ (32),\t\\\n+\t\t\t\t\t   __may_alias__, __aligned__ (1)));\n \n extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -263,6 +271,13 @@ _mm_maskz_mov_epi64 (__mmask8 __U, __m128i __A)\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_load_epi64 (void const *__P)\n+{\n+  return (__m256i) (*(__v4di *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_load_epi64 (__m256i __W, __mmask8 __U, void const *__P)\n@@ -284,6 +299,13 @@ _mm256_maskz_load_epi64 (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t\t__U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_load_epi64 (void const *__P)\n+{\n+  return (__m128i) (*(__v2di *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_load_epi64 (__m128i __W, __mmask8 __U, void const *__P)\n@@ -361,6 +383,13 @@ _mm_maskz_mov_epi32 (__mmask8 __U, __m128i __A)\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_load_epi32 (void const *__P)\n+{\n+  return (__m256i) (*(__v8si *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_load_epi32 (__m256i __W, __mmask8 __U, void const *__P)\n@@ -382,6 +411,13 @@ _mm256_maskz_load_epi32 (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t\t__U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_load_epi32 (void const *__P)\n+{\n+  return (__m128i) (*(__v4si *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_load_epi32 (__m128i __W, __mmask8 __U, void const *__P)\n@@ -403,6 +439,13 @@ _mm_maskz_load_epi32 (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t\t__U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_store_epi32 (void *__P, __m256i __A)\n+{\n+  *(__v8si *) __P = (__v8si) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_store_epi32 (void *__P, __mmask8 __U, __m256i __A)\n@@ -412,6 +455,13 @@ _mm256_mask_store_epi32 (void *__P, __mmask8 __U, __m256i __A)\n \t\t\t\t\t(__mmask8) __U);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_store_epi32 (void *__P, __m128i __A)\n+{\n+  *(__v4si *) __P = (__v4si) __A;\n+}\n+\n extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_store_epi32 (void *__P, __mmask8 __U, __m128i __A)\n@@ -717,6 +767,13 @@ _mm_mask_storeu_ps (void *__P, __mmask8 __U, __m128 __A)\n \t\t\t\t   (__mmask8) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu_epi64 (void const *__P)\n+{\n+  return (__m256i) (*(__v4di_u *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_loadu_epi64 (__m256i __W, __mmask8 __U, void const *__P)\n@@ -736,6 +793,13 @@ _mm256_maskz_loadu_epi64 (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_epi64 (void const *__P)\n+{\n+  return (__m128i) (*(__v2di_u *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_loadu_epi64 (__m128i __W, __mmask8 __U, void const *__P)\n@@ -787,6 +851,13 @@ _mm_mask_storeu_epi64 (void *__P, __mmask8 __U, __m128i __A)\n \t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_loadu_epi32 (void const *__P)\n+{\n+  return (__m256i) (*(__v8si_u *) __P);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_loadu_epi32 (__m256i __W, __mmask8 __U, void const *__P)\n@@ -806,6 +877,13 @@ _mm256_maskz_loadu_epi32 (__mmask8 __U, void const *__P)\n \t\t\t\t\t\t     (__mmask8) __U);\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_epi32 (void const *__P)\n+{\n+  return (__m128i) (*(__v4si_u *) __P);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_loadu_epi32 (__m128i __W, __mmask8 __U, void const *__P)\n@@ -13730,6 +13808,13 @@ _mm256_permutex_pd (__m256d __X, const int __M)\n #endif\n \n #define _mm256_permutexvar_ps(A, B)\t_mm256_permutevar8x32_ps ((B), (A))\n+#define _mm256_mask_cvt_roundps_ph(A, B, C, D)\t\\\n+  _mm256_mask_cvtps_ph ((A), (B), (C), (D))\n+#define _mm256_maskz_cvt_roundps_ph(A, B, C)\t\\\n+  _mm256_maskz_cvtps_ph ((A), (B), (C))\n+#define _mm_mask_cvt_roundps_ph(A, B, C, D)\t\\\n+  _mm_mask_cvtps_ph ((A), (B), (C), (D))\n+#define _mm_maskz_cvt_roundps_ph(A, B, C) _mm_maskz_cvtps_ph ((A), (B), (C))\n \n #ifdef __DISABLE_AVX512VL__\n #undef __DISABLE_AVX512VL__"}, {"sha": "fd5cf6ad53a49fc8ba5575540d1b9757efa26778", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -444,6 +444,13 @@ _mm_cmp_ss (__m128 __X, __m128 __Y, const int __P)\n \t\t\t\t  (__v4sf)(__m128)(Y), (int)(P)))\n #endif\n \n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtsi256_si32 (__m256i __A)\n+{\n+  __v8si __B = (__v8si) __A;\n+  return __B[0];\n+}\n+\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_cvtepi32_pd (__m128i __A)\n {"}, {"sha": "8ff240eef6d64ea4699eb8c8d34244e553df0eb0", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -715,6 +715,19 @@ _mm_loadu_si64 (void const *__P)\n   return _mm_loadl_epi64 ((__m128i_u *)__P);\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_si32 (void const *__P)\n+{\n+  return _mm_set_epi32 (*(int *)__P, (int)0, (int)0, (int)0);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadu_si16 (void const *__P)\n+{\n+  return _mm_set_epi16 (*(short *)__P, (short)0, (short)0, (short)0,\n+\t\t\t(short)0, (short)0, (short)0, (short)0);\n+}\n+\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_store_si128 (__m128i *__P, __m128i __B)\n {\n@@ -739,6 +752,18 @@ _mm_storeu_si64 (void *__P, __m128i __B)\n   _mm_storel_epi64 ((__m128i_u *)__P, __B);\n }\n \n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_storeu_si32 (void *__P, __m128i __B)\n+{\n+  *(__m32_u *)__P = (__m32) ((__v4si)__B)[0];\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_storeu_si16 (void *__P, __m128i __B)\n+{\n+  *(__m16_u *)__P = (__m16) ((__v8hi)__B)[0];\n+}\n+\n extern __inline __m64 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movepi64_pi64 (__m128i __B)\n {"}, {"sha": "ff2fa3f5b9db1b61fd9d191aac25933c1006dfb7", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -443,6 +443,7 @@ DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT, V8DF, UQI)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, INT, V8DF, QI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, UQI)\n+DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, UQI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, V8DF, V8DI, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF, V4DI, INT, UQI)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT, UQI)\n@@ -452,6 +453,7 @@ DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT, V16SF, UHI)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, INT, V16SF, HI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, UHI)\n+DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, UHI, INT)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V4SI, INT, V16SI, UHI)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT)\n DEF_FUNCTION_TYPE (V16SF, V16SF, V16SF, V16SI, INT, HI, INT)\n@@ -1026,8 +1028,10 @@ DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, UQI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, QI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, QI, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, UQI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, V2DF, QI, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, V2DF, UQI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, INT)\n "}, {"sha": "e6deaa2c5c21ee8d7433066207ac7e48ea8efe71", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2772,10 +2772,12 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_r\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_cvtps2pd512_mask_round, \"__builtin_ia32_cvtps2pd512_mask\", IX86_BUILTIN_CVTPS2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2udq512_mask\", IX86_BUILTIN_CVTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtsd2ss_round, \"__builtin_ia32_cvtsd2ss_round\", IX86_BUILTIN_CVTSD2SS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtsd2ss_mask_round, \"__builtin_ia32_cvtsd2ss_mask_round\", IX86_BUILTIN_CVTSD2SS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_sse2_cvtsi2sdq_round, \"__builtin_ia32_cvtsi2sd64\", IX86_BUILTIN_CVTSI2SD64, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT64_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse_cvtsi2ss_round, \"__builtin_ia32_cvtsi2ss32\", IX86_BUILTIN_CVTSI2SS32, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_sse_cvtsi2ssq_round, \"__builtin_ia32_cvtsi2ss64\", IX86_BUILTIN_CVTSI2SS64, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT64_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtss2sd_round, \"__builtin_ia32_cvtss2sd_round\", IX86_BUILTIN_CVTSS2SD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtss2sd_mask_round, \"__builtin_ia32_cvtss2sd_mask_round\", IX86_BUILTIN_CVTSS2SD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fix_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2dq512_mask\", IX86_BUILTIN_CVTTPD2DQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fixuns_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2udq512_mask\", IX86_BUILTIN_CVTTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fix_truncv16sfv16si2_mask_round, \"__builtin_ia32_cvttps2dq512_mask\", IX86_BUILTIN_CVTTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n@@ -2911,13 +2913,21 @@ BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_exp2v16sf_mask_round, \"__b\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_rcp28v8df_mask_round, \"__builtin_ia32_rcp28pd_mask\", IX86_BUILTIN_RCP28PD, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_rcp28v16sf_mask_round, \"__builtin_ia32_rcp28ps_mask\", IX86_BUILTIN_RCP28PS, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrcp28v2df_round, \"__builtin_ia32_rcp28sd_round\", IX86_BUILTIN_RCP28SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrcp28v2df_mask_round, \"__builtin_ia32_rcp28sd_mask_round\", IX86_BUILTIN_RCP28SD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrcp28v4sf_round, \"__builtin_ia32_rcp28ss_round\", IX86_BUILTIN_RCP28SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrcp28v4sf_mask_round, \"__builtin_ia32_rcp28ss_mask_round\", IX86_BUILTIN_RCP28SS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_rsqrt28v8df_mask_round, \"__builtin_ia32_rsqrt28pd_mask\", IX86_BUILTIN_RSQRT28PD, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_rsqrt28v16sf_mask_round, \"__builtin_ia32_rsqrt28ps_mask\", IX86_BUILTIN_RSQRT28PS, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrsqrt28v2df_round, \"__builtin_ia32_rsqrt28sd_round\", IX86_BUILTIN_RSQRT28SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrsqrt28v2df_mask_round, \"__builtin_ia32_rsqrt28sd_mask_round\", IX86_BUILTIN_RSQRT28SD_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrsqrt28v4sf_round, \"__builtin_ia32_rsqrt28ss_round\", IX86_BUILTIN_RSQRT28SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT)\n+BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_vmrsqrt28v4sf_mask_round, \"__builtin_ia32_rsqrt28ss_mask_round\", IX86_BUILTIN_RSQRT28SS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_UQI_INT)\n \n /* AVX512DQ.  */\n+BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_reducepv8df_mask_round, \"__builtin_ia32_reducepd512_mask_round\", IX86_BUILTIN_REDUCEPD512_MASK_ROUND, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_reducepv16sf_mask_round, \"__builtin_ia32_reduceps512_mask_round\", IX86_BUILTIN_REDUCEPS512_MASK_ROUND, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_reducesv2df_mask_round, \"__builtin_ia32_reducesd_mask_round\", IX86_BUILTIN_REDUCESD128_MASK_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_reducesv4sf_mask_round, \"__builtin_ia32_reducess_mask_round\", IX86_BUILTIN_REDUCESS128_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangesv2df_mask_round, \"__builtin_ia32_rangesd128_mask_round\", IX86_BUILTIN_RANGESD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_V2DF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangesv4sf_mask_round, \"__builtin_ia32_rangess128_mask_round\", IX86_BUILTIN_RANGESS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_fix_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2qq512_mask\", IX86_BUILTIN_CVTPD2QQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)"}, {"sha": "d35c6540cea2eefa37a080ae2f536e31b3b6c829", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -10225,12 +10225,16 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_QI_INT:\n     case V2DF_FTYPE_V2DF_V4SF_V2DF_QI_INT:\n+    case V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_QI_INT:\n     case V4SF_FTYPE_V4SF_V2DF_V4SF_QI_INT:\n+    case V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT:\n       nargs = 5;\n       break;\n     case V16SF_FTYPE_V16SF_INT_V16SF_HI_INT:\n     case V8DF_FTYPE_V8DF_INT_V8DF_QI_INT:\n+    case V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT:\n+    case V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT:\n       nargs_constant = 4;\n       nargs = 5;\n       break;"}, {"sha": "dff42fd73c4290e8bbcd32a7305f71339c319d29", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -42,9 +42,15 @@\n /* The Intel API is flexible enough that we must allow aliasing with other\n    vector types, and their scalar components.  */\n typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n+typedef int __m32 __attribute__ ((__vector_size__ (4), __may_alias__));\n+typedef short __m16 __attribute__ ((__vector_size__ (2), __may_alias__));\n \n /* Unaligned version of the same type  */\n typedef int __m64_u __attribute__ ((__vector_size__ (8), __may_alias__, __aligned__ (1)));\n+typedef int __m32_u __attribute__ ((__vector_size__ (4), \\\n+\t\t\t\t    __may_alias__, __aligned__ (1)));\n+typedef short __m16_u __attribute__ ((__vector_size__ (2), \\\n+\t\t\t\t      __may_alias__, __aligned__ (1)));\n \n /* Internal data types for implementing the intrinsics.  */\n typedef int __v2si __attribute__ ((__vector_size__ (8)));"}, {"sha": "3689ab0e7b706edcbf4e5a14cc6e6b5dc3b9b27b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2861,30 +2861,30 @@\n   DONE;\n })\n \n-(define_insn \"<mask_codefor>reducep<mode><mask_name>\"\n+(define_insn \"<mask_codefor>reducep<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL\n-\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n+\t  [(match_operand:VF_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_REDUCE))]\n   \"TARGET_AVX512DQ\"\n-  \"vreduce<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  \"vreduce<ssemodesuffix>\\t{%2, <round_saeonly_mask_op3>%1, %0<mask_operand3>|%0<mask_operand3>, %1<round_saeonly_mask_op3>, %2}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"reduces<mode><mask_scalar_name>\"\n+(define_insn \"reduces<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_REDUCE)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512DQ\"\n-  \"vreduce<ssescalarmodesuffix>\\t{%3, %2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2, %3}\"\n+  \"vreduce<ssescalarmodesuffix>\\t{%3, <round_saeonly_scalar_mask_op4>%2, %1, %0<mask_scalar_operand4>|%0<mask_scalar_operand4>, %1, %<iptr>2<round_saeonly_scalar_mask_op4>, %3}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -6374,7 +6374,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_cvtsd2ss<round_name>\"\n+(define_insn \"sse2_cvtsd2ss<mask_name><round_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n@@ -6386,7 +6386,7 @@\n   \"@\n    cvtsd2ss\\t{%2, %0|%0, %2}\n    cvtsd2ss\\t{%2, %0|%0, %q2}\n-   vcvtsd2ss\\t{<round_op3>%2, %1, %0|%0, %1, %q2<round_op3>}\"\n+   vcvtsd2ss\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|<mask_operand3>%0, %1, %q2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n@@ -6417,7 +6417,7 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse2_cvtss2sd<round_saeonly_name>\"\n+(define_insn \"sse2_cvtss2sd<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V2DF\n \t  (float_extend:V2DF\n@@ -6430,7 +6430,7 @@\n   \"@\n    cvtss2sd\\t{%2, %0|%0, %2}\n    cvtss2sd\\t{%2, %0|%0, %k2}\n-   vcvtss2sd\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %k2<round_saeonly_op3>}\"\n+   vcvtss2sd\\t{<round_saeonly_mask_op3>%2, %1, %0<mask_operand3>|<mask_operand3>%0, %1, %k2<round_saeonly_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n@@ -19092,7 +19092,7 @@\n    (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512er_vmrcp28<mode><round_saeonly_name>\"\n+(define_insn \"avx512er_vmrcp28<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n@@ -19101,7 +19101,7 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512ER\"\n-  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%1, %2, %0|%0, %2, %<iptr>1<round_saeonly_op3>}\"\n+  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%1, %2, %0<mask_operand3>|<mask_opernad3>%0, %2, %<iptr>1<round_saeonly_mask_op3>}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"type\" \"sse\")\n@@ -19118,7 +19118,7 @@\n    (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512er_vmrsqrt28<mode><round_saeonly_name>\"\n+(define_insn \"avx512er_vmrsqrt28<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n@@ -19127,7 +19127,7 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512ER\"\n-  \"vrsqrt28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%1, %2, %0|%0, %2, %<iptr>1<round_saeonly_op3>}\"\n+  \"vrsqrt28<ssescalarmodesuffix>\\t{<round_saeonly_mask_op3>%1, %2, %0<mask_operand3>|<mask_operand3>%0, %2, %<iptr>1<round_saeonly_mask_op3>}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")"}, {"sha": "6178e38ce02aafd2a5cf8d7aff43f1c1f69b27eb", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -381,6 +381,8 @@\n #define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, 8)\n \n /* avx512erintrin.h */\n #define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 8)\n@@ -393,6 +395,10 @@\n #define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 8)\n #define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 8)\n #define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 8)\n+#define __builtin_ia32_rcp28sd_mask_round(A, B, C, D, E) __builtin_ia32_rcp28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rcp28ss_mask_round(A, B, C, D, E) __builtin_ia32_rcp28ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, 8)\n \n /* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, _MM_HINT_T0)\n@@ -464,6 +470,10 @@\n #define __builtin_ia32_cvtps2qq512_mask(A, B, C, D) __builtin_ia32_cvtps2qq512_mask(A, B, C, 8)\n #define __builtin_ia32_cvtpd2uqq512_mask(A, B, C, D) __builtin_ia32_cvtpd2uqq512_mask(A, B, C, 8)\n #define __builtin_ia32_cvtpd2qq512_mask(A, B, C, D) __builtin_ia32_cvtpd2qq512_mask(A, B, C, 8)\n+#define __builtin_ia32_reducesd_mask_round(A, B, C, D, E, F) __builtin_ia32_reducesd_mask_round(A, B, 8, D, E, 8)\n+#define __builtin_ia32_reducess_mask_round(A, B, C, D, E, F) __builtin_ia32_reducess_mask_round(A, B, 8, D, E, 8)\n+#define __builtin_ia32_reducepd512_mask_round(A, B, C, D, E) __builtin_ia32_reducepd512_mask_round(A, 8, C, D, 8)\n+#define __builtin_ia32_reduceps512_mask_round(A, B, C, D, E) __builtin_ia32_reduceps512_mask_round(A, 8, C, D, 8)\n \n /* avx512vlintrin.h */\n #define __builtin_ia32_vpermilps_mask(A, E, C, D) __builtin_ia32_vpermilps_mask(A, 1, C, D)"}, {"sha": "24dadbef4c8529566ef71a61ceccf20e235e6cf5", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsi128-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,15 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx2 -O2\" } */\n-/* { dg-final { scan-assembler \"vbroadcasti128\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti128\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" 2 } } */\n \n #include <immintrin.h>\n \n-volatile __m256i x;\n-__m128i y;\n+volatile __m256i x,xx;\n+__m128i y,yy;\n \n void extern\n avx2_test (void)\n {\n   x = _mm256_broadcastsi128_si256 (y);\n+  xx = _mm_broadcastsi128_si256 (yy);\n }"}, {"sha": "a19464e718c3165e536f379ba46789da2bdc0fa2", "filename": "gcc/testsuite/gcc.target/i386/avx2-vbroadcastsi128-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vbroadcastsi128-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -9,7 +9,7 @@ void static\n avx2_test (void)\n {\n   union128i_q s1;\n-  union256i_q res;\n+  union256i_q res, res1;\n   long long int res_ref[4];\n   int i, j;\n   int fail = 0;\n@@ -20,11 +20,13 @@ avx2_test (void)\n \ts1.a[j] = j * i;\n \n       res.x = _mm256_broadcastsi128_si256 (s1.x);\n+      res1.x = _mm_broadcastsi128_si256 (s1.x);\n \n       memcpy (res_ref, s1.a, 16);\n       memcpy (res_ref + 2, s1.a, 16);\n \n       fail += check_union256i_q (res, res_ref);\n+      fail += check_union256i_q (res1, res_ref);\n     }\n \n   if (fail != 0)"}, {"sha": "dcb8caaa73e2bf37b29f9ab2cc404a7e33c027b1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu16-1.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -15,13 +15,19 @@\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vinserti128)\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vextracti128)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-short *p;\n-volatile __m512i x1, yy;\n-volatile __m256i x2, y2;\n-volatile __m128i x3, y3;\n+short *p, *p1, *p2, *p3, *p4, *p5, *p6;\n+volatile __m512i x1, yy, zzz;\n+volatile __m256i x2, y2, yyy;\n+volatile __m128i x3, y3, xxx;\n volatile __mmask32 m32;\n volatile __mmask16 m16;\n volatile __mmask8 m8;\n@@ -45,7 +51,15 @@ avx512bw_test (void)\n   x2 = _mm256_maskz_loadu_epi16 (m16, p);\n   x3 = _mm_maskz_loadu_epi16 (m8, p);\n \n+  zzz = _mm512_loadu_epi16 (p5);\n+  yyy = _mm256_loadu_epi16 (p3);\n+  xxx = _mm_loadu_epi16 (p1);\n+\n   _mm512_mask_storeu_epi16 (p, m32, x1);\n   _mm256_mask_storeu_epi16 (p, m16, x2);\n   _mm_mask_storeu_epi16 (p, m8, x3);\n+\n+  _mm512_storeu_epi16 (p6, zzz);\n+  _mm256_storeu_epi16 (p4, yyy);\n+  _mm_storeu_epi16 (p2, xxx);\n }"}, {"sha": "a335bcab3b2782f51b48cf50652443b9507d5a5f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu8-1.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -15,13 +15,17 @@\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-char *p;\n-volatile __m512i x1, yy;\n+char *p, *p1, *p2, *p3, *p4;\n+volatile __m512i x1, yy, zzz;\n volatile __m256i x2, y2;\n-volatile __m128i x3, y3;\n+volatile __m128i x3, y3, xxx;\n volatile __mmask64 m64;\n volatile __mmask32 m32;\n volatile __mmask16 m16;\n@@ -45,7 +49,13 @@ avx512bw_test (void)\n   x2 = _mm256_maskz_loadu_epi8 (m32, p);\n   x3 = _mm_maskz_loadu_epi8 (m16, p);\n \n+  zzz = _mm512_loadu_epi8 (p3);\n+  xxx = _mm_loadu_epi8 (p1);\n+\n   _mm512_mask_storeu_epi8 (p, m64, x1);\n   _mm256_mask_storeu_epi8 (p, m32, x2);\n   _mm_mask_storeu_epi8 (p, m16, x3);\n+\n+  _mm512_storeu_epi8 (p4, zzz);\n+  _mm_storeu_epi8 (p2, xxx);\n }"}, {"sha": "4dc1585691b24c509238665121ef179810e8c499", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducepd-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-3.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512d xx1;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  xx1 = _mm512_reduce_round_pd(xx1, IMM, _MM_FROUND_NO_EXC);\n+  \n+  xx1 = _mm512_mask_reduce_round_pd (xx1, m, xx1, IMM, _MM_FROUND_NO_EXC);\n+\n+  xx1 = _mm512_maskz_reduce_round_pd (m, xx1, IMM, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "2b39670847a7bdfd4629b9c5b80697bccfc53fa9", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducepd-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-4.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#define AVX512DQ\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#define IMM 0x23\n+\n+void\n+CALC (double *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      double tmp = (int) (4 * s[i]) / 4.0;\n+      r[i] = s[i] - tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_reduce_round_pd) (s.x, IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t | _MM_FROUND_NO_EXC);\n+  res2.x = INTRINSIC (_mask_reduce_round_pd) (res2.x, mask, s.x,\n+\t\t\t\t\t      IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t      | _MM_FROUND_NO_EXC);\n+  res3.x = INTRINSIC (_maskz_reduce_round_pd) (mask, s.x, IMM,\n+\t\t\t\t\t       _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t       | _MM_FROUND_NO_EXC);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "959d51ff9e01567a4b372086338d07ecbbbfbd25", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreduceps-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-3.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512 xx1;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  xx1 = _mm512_reduce_round_ps (xx1, IMM, _MM_FROUND_NO_EXC);\n+\n+  xx1 = _mm512_mask_reduce_round_ps (xx1, m16, xx1, IMM, _MM_FROUND_NO_EXC);\n+\n+  xx1 = _mm512_maskz_reduce_round_ps (m16, xx1, IMM, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "6b687b292e04bc7996d94f5195ed63091755d07c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreduceps-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-4.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#define AVX512DQ\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+#define IMM 0x23\n+\n+void\n+CALC (float *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      float tmp = (int) (4 * s[i]) / 4.0;\n+      r[i] = s[i] - tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_reduce_round_ps) (s.x, IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t | _MM_FROUND_NO_EXC);\n+  res2.x = INTRINSIC (_mask_reduce_round_ps) (res2.x, mask, s.x,\n+\t\t\t\t\t      IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t      | _MM_FROUND_NO_EXC);\n+  res3.x = INTRINSIC (_maskz_reduce_round_ps) (mask, s.x, IMM,\n+\t\t\t\t\t       _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t\t       | _MM_FROUND_NO_EXC);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "63d9537dc707150834c17d24fe9f92053ccf780f", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducesd-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,24 +2,30 @@\n /* { dg-options \"-mavx512dq -O2\" } */\n /* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n+/* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n \n #include <immintrin.h>\n \n #define IMM 123\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, xx1, xx2;\n volatile __mmask8 m;\n \n void extern\n avx512dq_test (void)\n {\n+  xx1 = _mm_reduce_round_sd (xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_reduce_sd (x1, x2, IMM);\n \n+  xx1 = _mm_mask_reduce_round_sd(xx1, m, xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_reduce_sd(x1, m, x1, x2, IMM);\n \n+  xx1 = _mm_maskz_reduce_round_sd(m, xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_reduce_sd(m, x1, x2, IMM);\n }"}, {"sha": "17448c0fceeb23e0f600def130f4373e14f33690", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducesd-2.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -28,7 +28,7 @@ CALC (double *r, double *s)\n void\n TEST (void)\n {\n-  union128d res1, res2, res3;\n+  union128d res1, res2, res3, res4, res5, res6;\n   union128d s1, s2, src;\n   double res_ref[2];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -42,25 +42,45 @@ TEST (void)\n       res1.a[j] = DEFAULT_VALUE;\n       res2.a[j] = DEFAULT_VALUE;\n       res3.a[j] = DEFAULT_VALUE;\n+      res4.a[j] = DEFAULT_VALUE;\n+      res5.a[j] = DEFAULT_VALUE;\n+      res6.a[j] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_reduce_sd (s1.x, s2.x, IMM);\n   res2.x = _mm_mask_reduce_sd (s1.x, mask, s1.x, s2.x, IMM);\n   res3.x = _mm_maskz_reduce_sd (mask, s1.x, s2.x, IMM);\n+  res4.x = _mm_reduce_round_sd (s1.x, s2.x, IMM,_MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t| _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_reduce_round_sd (s1.x, mask, s1.x, s2.x, IMM,\n+\t\t\t\t     _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_reduce_round_sd (mask, s1.x, s2.x, IMM,\n+\t\t\t\t      _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t      | _MM_FROUND_NO_EXC);\n \n   CALC (res_ref, s2.a);\n \n   if (check_union128d (res1, res_ref))\n     abort ();\n  \n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+ \n   MASK_MERGE (d) (res_ref, mask, 1);\n \n   if (check_union128d (res2, res_ref))\n     abort ();\n \n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+\n   MASK_ZERO (d) (res_ref, mask, 1);\n \n   if (check_union128d (res3, res_ref))\n     abort ();\n \n+  if (check_union128d (res6, res_ref))\n+    abort ();\n+\n }"}, {"sha": "341bd46aa56a58c49cdf88c940169191699f83cd", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducess-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,23 +2,29 @@\n /* { dg-options \"-mavx512dq -O2\" } */\n /* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n+/* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n #define IMM 123\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, xx1, xx2;\n volatile __mmask8 m;\n \n void extern\n avx512dq_test (void)\n {\n+  xx1 = _mm_reduce_round_ss (xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_reduce_ss (x1, x2, IMM);\n \n+  xx1 = _mm_mask_reduce_round_ss (xx1, m, xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_reduce_ss (x1, m, x1, x2, IMM);\n  \n+  xx1 = _mm_maskz_reduce_round_ss (m, xx1, xx2, IMM, _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_reduce_ss (m, x1, x2, IMM);\n }"}, {"sha": "6d8938deb307e1375fff686b412187f234b4000f", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducess-2.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -30,7 +30,7 @@ TEST (void)\n {\n   printf(\"\\nsize = %d\\n\\n\", SIZE);\n \n-  union128 res1, res2, res3;\n+  union128 res1, res2, res3, res4, res5, res6;\n   union128 s1, s2, src;\n   float res_ref[4];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -44,25 +44,45 @@ TEST (void)\n       res1.a[j] = DEFAULT_VALUE;\n       res2.a[j] = DEFAULT_VALUE;\n       res3.a[j] = DEFAULT_VALUE;\n+      res4.a[j] = DEFAULT_VALUE;\n+      res5.a[j] = DEFAULT_VALUE;\n+      res6.a[j] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_reduce_ss (s1.x, s2.x, IMM);\n   res2.x = _mm_mask_reduce_ss (s1.x, mask, s1.x, s2.x, IMM);\n   res3.x = _mm_maskz_reduce_ss (mask, s1.x, s2.x, IMM);\n+  res4.x = _mm_reduce_round_ss (s1.x, s2.x, IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t| _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_reduce_round_ss (s1.x, mask, s1.x, s2.x,\n+\t\t\t\t     IMM, _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n+  res6.x = _mm_maskz_reduce_round_ss (mask, s1.x, s2.x, IMM,\n+\t\t\t\t      _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t      | _MM_FROUND_NO_EXC);\n \n   CALC (res_ref, s2.a);\n \n   if (check_union128 (res1, res_ref))\n     abort ();\n  \n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+ \n   MASK_MERGE () (res_ref, mask, 1);\n \n   if (check_union128 (res2, res_ref))\n     abort ();\n \n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+\n   MASK_ZERO () (res_ref, mask, 1);\n \n   if (check_union128 (res3, res_ref))\n     abort ();\n \n+  if (check_union128 (res6, res_ref))\n+    abort ();\n+\n }"}, {"sha": "03e75cc5f3b7cd6e318972ed78e397c18074554a", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28sd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,14 +2,23 @@\n /* { dg-options \"-mavx512er -O2\" } */\n /* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x, y;\n+volatile __m128d x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512er_test (void)\n {\n   x = _mm_rcp28_sd (x, y);\n   x = _mm_rcp28_round_sd (x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_rcp28_sd (z, m, x, y);\n+  x = _mm_mask_rcp28_round_sd (z, m, x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_rcp28_sd (m, x, y);\n+  x = _mm_maskz_rcp28_round_sd (m, x, y, _MM_FROUND_NO_EXC);\n }"}, {"sha": "93d370d0d78595f13c457ceb51effe14b3116965", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28sd-2.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -7,11 +7,14 @@\n #include \"avx512f-helper.h\"\n #include <math.h>\n \n+#define IMM 0x23\n+\n void static\n avx512er_test (void)\n {\n-  union128d src1, src2, res;\n+  union128d src1, src2, res, res1, res2, res3, res4;\n   double res_ref[2];\n+  MASK_TYPE mask = MASK_VALUE;\n   int i;\n   \n   for (i = 0; i < 2; i++)\n@@ -24,7 +27,32 @@ avx512er_test (void)\n   res_ref[0] = 1.0 / src2.a[0];\n \n   res.x = _mm_rcp28_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_rcp28_sd (src1.x, IMM, src1.x, src2.x);\n+  res2.x = _mm_mask_rcp28_round_sd (src1.x, IMM, src1.x, src2.x,\n+\t\t\t\t    _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t    | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_rcp28_sd (IMM, src1.x, src2.x);\n+  res4.x = _mm_maskz_rcp28_round_sd (IMM, src1.x, src2.x,\n+\t\t\t\t     _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n+\n \n   if (checkVd (res.a, res_ref, 2))\n     abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+\n+  if (checkVd (res1.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVd (res2.a, res_ref, 2))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+\n+  if (checkVd (res3.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVd (res4.a, res_ref, 2))\n+    abort ();\n }"}, {"sha": "87a8ac3026fefec16c21fcbf6d7f547dc8395763", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,14 +2,23 @@\n /* { dg-options \"-mavx512er -O2\" } */\n /* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x, y;\n+volatile __m128 x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512er_test (void)\n {\n   x = _mm_rcp28_ss (x, y);\n   x = _mm_rcp28_round_ss (x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_rcp28_ss (z, m, x, y);\n+  x = _mm_mask_rcp28_round_ss (z, m, x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_rcp28_ss (m, x, y);\n+  x = _mm_maskz_rcp28_round_ss (m, x, y, _MM_FROUND_NO_EXC);\n }"}, {"sha": "4ffa92c66eee64825ba40c03bb9f7797b54996fe", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ss-2.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -7,11 +7,14 @@\n #include \"avx512f-helper.h\"\n #include <math.h>\n \n+#define IMM 0x23\n+\n void static\n avx512er_test (void)\n {\n-  union128 src1, src2, res;\n+  union128 src1, src2, res, res1, res2, res3, res4;\n   float res_ref[4];\n+  MASK_TYPE mask = MASK_VALUE;\n   int i;\n   \n   for (i = 0; i < 4; i++)\n@@ -24,7 +27,31 @@ avx512er_test (void)\n   res_ref[0] = 1.0 / src2.a[0];\n \n   res.x = _mm_rcp28_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_rcp28_ss (src1.x, IMM, src1.x, src2.x);\n+  res2.x = _mm_mask_rcp28_round_ss (src1.x, IMM, src1.x, src2.x,\n+\t\t\t\t    _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t    | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_rcp28_ss (IMM, src1.x, src2.x);\n+  res4.x = _mm_maskz_rcp28_round_ss (IMM, src1.x, src2.x,\n+\t\t\t\t     _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t     | _MM_FROUND_NO_EXC);\n \n   if (checkVf (res.a, res_ref, 4))\n     abort ();\n+\n+  MASK_MERGE () (res_ref, mask, 1);\n+\n+  if (checkVf (res1.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVf (res2.a, res_ref, 2))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+\n+  if (checkVf (res3.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVf (res4.a, res_ref, 2))\n+    abort ();\n }"}, {"sha": "ca549062b7546333ce542ae8ef9ca49d14c31884", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28sd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,14 +2,23 @@\n /* { dg-options \"-mavx512er -O2\" } */\n /* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\{^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x, y;\n+volatile __m128d x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512er_test (void)\n {\n   x = _mm_rsqrt28_sd (x, y);\n   x = _mm_rsqrt28_round_sd (x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_rsqrt28_sd (z, m, x, y);\n+  x = _mm_mask_rsqrt28_round_sd (z, m, x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_rsqrt28_sd (m, x, y);\n+  x = _mm_maskz_rsqrt28_round_sd (m, x, y, _MM_FROUND_NO_EXC); \n }"}, {"sha": "2606191b97bf3a0bf9263ea419a589ad69c1caab", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28sd-2.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -7,11 +7,14 @@\n #include \"avx512f-helper.h\"\n #include <math.h>\n \n+#define IMM 0x23\n+\n void static\n avx512er_test (void)\n {\n-  union128d src1, src2, res;\n+  union128d src1, src2, res, res1, res2, res3, res4;\n   double res_ref[2];\n+  MASK_TYPE mask = MASK_VALUE;\n   int i;\n   \n   for (i = 0; i < 2; i++)\n@@ -24,7 +27,31 @@ avx512er_test (void)\n   res_ref[0] = 1.0 / sqrt (src2.a[0]);\n \n   res.x = _mm_rsqrt28_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_rsqrt28_sd (src1.x, IMM, src1.x, src2.x);\n+  res2.x = _mm_mask_rsqrt28_round_sd (src1.x, IMM, src1.x, src2.x,\n+\t\t\t\t      _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t      | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_rsqrt28_sd (IMM, src1.x, src2.x);\n+  res4.x = _mm_maskz_rsqrt28_round_sd (IMM, src1.x, src2.x,\n+\t\t\t\t       _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t       | _MM_FROUND_NO_EXC);\n \n   if (checkVd (res.a, res_ref, 2))\n     abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 1);\n+\n+  if (checkVd (res1.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVd (res2.a, res_ref, 2))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+\n+  if (checkVd (res3.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVd (res4.a, res_ref, 2))\n+    abort ();\n }"}, {"sha": "c97376ed746de829b1875a0d850fb6395a6a6244", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -2,14 +2,23 @@\n /* { dg-options \"-mavx512er -O2\" } */\n /* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\{^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x, y;\n+volatile __m128 x, y, z;\n+volatile __mmask8 m;\n \n void extern\n avx512er_test (void)\n {\n   x = _mm_rsqrt28_ss (x, y);\n   x = _mm_rsqrt28_round_ss (x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_mask_rsqrt28_ss (z, m, x, y);\n+  x = _mm_mask_rsqrt28_round_ss (z, m, x, y, _MM_FROUND_NO_EXC);\n+  x = _mm_maskz_rsqrt28_ss (m, x, y);\n+  x = _mm_maskz_rsqrt28_round_ss (m, x, y, _MM_FROUND_NO_EXC);\n }"}, {"sha": "fa1c19b9f6bdbd405285ac8d2f30111307ba8dcf", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ss-2.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -7,11 +7,14 @@\n #include \"avx512f-helper.h\"\n #include <math.h>\n \n+#define IMM 0x23\n+\n void static\n avx512er_test (void)\n {\n-  union128 src1, src2, res;\n+  union128 src1, src2, res, res1, res2, res3, res4;\n   float res_ref[4];\n+  MASK_TYPE mask = MASK_VALUE;\n   int i;\n   \n   for (i = 0; i < 4; i++)\n@@ -24,7 +27,31 @@ avx512er_test (void)\n   res_ref[0] = 1.0 / sqrt (src2.a[0]);\n \n   res.x = _mm_rsqrt28_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_rsqrt28_ss (src1.x, IMM, src1.x, src2.x);\n+  res2.x = _mm_mask_rsqrt28_round_ss (src1.x, IMM, src1.x, src2.x,\n+\t\t\t\t      _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t      | _MM_FROUND_NO_EXC);\n+  res3.x = _mm_maskz_rsqrt28_ss (IMM, src1.x, src2.x);\n+  res4.x = _mm_maskz_rsqrt28_round_ss (IMM, src1.x, src2.x,\n+\t\t\t\t       _MM_FROUND_TO_NEAREST_INT\n+\t\t\t\t       | _MM_FROUND_NO_EXC);\n \n   if (checkVf (res.a, res_ref, 4))\n     abort ();\n+  \n+  MASK_MERGE () (res_ref, mask, 1);\n+\n+  if (checkVf (res1.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVf (res2.a, res_ref, 2))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+\n+  if (checkVf (res3.a, res_ref, 2))\n+    abort ();\n+\n+  if (checkVf (res4.a, res_ref, 2))\n+    abort ();\n }"}, {"sha": "402af5048f619bc59e126f618008b8577a3217e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vcvtsd2sil?\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sil?\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n #include <immintrin.h>\n \n volatile __m128d x;\n-volatile unsigned y;\n+volatile unsigned y, z;\n \n void extern\n avx512f_test (void)\n {\n   y = _mm_cvt_roundsd_i32 (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  z = _mm_cvtsd_i32 (x);\n }"}, {"sha": "dad26e4b7296935499466ef76b081ac0830c9b19", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si64-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vcvtsd2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2siq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128d x;\n-volatile unsigned long long y;\n+volatile unsigned long long y, z;\n \n void extern\n avx512f_test (void)\n {\n   y = _mm_cvt_roundsd_i64 (x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  z = _mm_cvtsd_i64 (x);\n }"}, {"sha": "d61e76c84d29fb83e685c11cd9292d53fbce1142", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2ss-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 s1, r;\n+volatile __m128 s1, r, s3;\n volatile __m128d s2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   r = _mm_cvt_roundsd_ss (s1, s2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  r = _mm_mask_cvtsd_ss (s3, m, s1, s2);\n+  r = _mm_maskz_cvtsd_ss (m, s1, s2);\n+  r = _mm_mask_cvt_roundsd_ss (s3, m, s1, s2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); \n+  r = _mm_maskz_cvt_roundsd_ss (m, s1, s2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC); \n }"}, {"sha": "2035eeaadb03a3d39608b35ea212cdef7472bf1a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2sd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2sdl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+volatile int n;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_cvti32_sd (x, n);\n+}"}, {"sha": "4843ace8f0a726a085713631577a0470bf6963ad", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2sd64-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vcvtsi2sdq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2sdq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x;\n+volatile __m128d x, y;\n volatile long long n;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_cvt_roundi64_sd (x, n, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  y = _mm_cvti64_sd (x, n);\n }"}, {"sha": "0b3f518e566657460c2eb73ef8156c0c678e2c2e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vcvtsi2ssl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2ssl\\[ \\\\t\\]+\\[^%\\n\\]*%e\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x;\n+volatile __m128 x, y;\n volatile int n;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_cvt_roundi32_ss (x, n, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  y = _mm_cvti32_ss (x, n);\n }"}, {"sha": "9b2bce136844d1e43d2a74663fa09b33c84d972a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss64-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vcvtsi2ssq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2ssq\\[ \\\\t\\]+\\[^%\\n\\]*%r\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128 x;\n+volatile __m128 x, y;\n volatile long long n;\n \n void extern\n avx512f_test (void)\n {\n   x = _mm_cvt_roundi64_ss (x, n, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  y = _mm_cvti64_ss (x, n);\n }"}, {"sha": "48cbac50fefebcbbe351e5635bfca5ebcac8de28", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2sd-1.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,23 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d s1, r;\n+volatile __m128d s1, r, s3;\n volatile __m128 s2;\n+volatile __mmask8 m;\n \n void extern\n avx512f_test (void)\n {\n   r = _mm_cvt_roundss_sd (s1, s2, _MM_FROUND_NO_EXC);\n+  r = _mm_mask_cvtss_sd (s3, m, s1, s2);\n+  r = _mm_maskz_cvtss_sd (m, s1, s2);\n+  r = _mm_mask_cvt_roundss_sd (s3, m, s1, s2, _MM_FROUND_NO_EXC);\n+  r = _mm_maskz_cvt_roundss_sd (m, s1, s2, _MM_FROUND_NO_EXC);\n }"}, {"sha": "e3f42238097ad41601071897ac7fb66626ed25ef", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vcvtss2sil?\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sil?\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n #include <immintrin.h>\n \n volatile __m128 x;\n-volatile unsigned y;\n+volatile unsigned y, z;\n \n void extern\n avx512f_test (void)\n {\n   y = _mm_cvt_roundss_i32 (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  z = _mm_cvtss_i32 (x);\n }"}, {"sha": "86ef95a64fdc4f3b666651c0896aaf6d5b68b75d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si64-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -1,14 +1,16 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -mavx512f\" } */\n /* { dg-final { scan-assembler-times \"vcvtss2siq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2siq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+.{6}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n volatile __m128 x;\n-volatile unsigned long long y;\n+volatile unsigned long long y, z;\n \n void extern\n avx512f_test (void)\n {\n   y = _mm_cvt_roundss_i64 (x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  z = _mm_cvtss_i64 (x);\n }"}, {"sha": "d0ba9cf0e0e42a0290e83b1fcefc6608a09f84fa", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefsd-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -4,6 +4,8 @@\n /* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n \n #include <immintrin.h>\n@@ -18,4 +20,6 @@ avx512f_test (void)\n   x = _mm_scalef_round_sd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   x = _mm_mask_scalef_round_sd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n   x = _mm_maskz_scalef_round_sd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  x = _mm_mask_scalef_sd (x, m, x, x);\n+  x = _mm_maskz_scalef_sd (m, x, x);\n }"}, {"sha": "986e9787a251ed6b421730e553815d0b79b5464f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefsd-2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -18,7 +18,7 @@ compute_scalefsd (double *s1, double *s2, double *r)\n void static\n avx512f_test (void)\n {\n-  union128d res1, res2, res3, res4;\n+  union128d res1, res2, res3, res4, res5, res6;\n   union128d s1, s2;\n   double res_ref[SIZE];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -33,6 +33,8 @@ avx512f_test (void)\n       res2.a[i] = DEFAULT_VALUE;\n       res3.a[i] = DEFAULT_VALUE;\n       res4.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_scalef_sd (s1.x, s2.x);\n@@ -42,6 +44,8 @@ avx512f_test (void)\n               _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   res4.x = _mm_maskz_scalef_round_sd (mask, s1.x, s2.x,\n               _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_scalef_sd (s1.x, mask, s1.x, s2.x);\n+  res6.x = _mm_maskz_scalef_sd (mask, s1.x, s2.x);\n \n   compute_scalefsd (s1.a, s2.a, res_ref);\n \n@@ -55,8 +59,14 @@ avx512f_test (void)\n   if (check_union128d (res3, res_ref))\n     abort ();\n \n+  if (check_union128d (res5, res_ref))\n+    abort ();\n+\n   MASK_ZERO (d) (res_ref, mask, 1);\n \n   if (check_union128d (res4, res_ref))\n     abort ();\n+\n+  if (check_union128d (res6, res_ref))\n+    abort ();\n }"}, {"sha": "381d39ef21b89dfb2efd5d601f2975ed672ca07e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefss-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -4,6 +4,8 @@\n /* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -17,4 +19,6 @@ avx512f_test (void)\n   x = _mm_scalef_round_ss (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   x = _mm_mask_scalef_round_ss (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n   x = _mm_maskz_scalef_round_ss (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  x = _mm_mask_scalef_ss (x, m, x, x);\n+  x = _mm_maskz_scalef_ss (m, x, x);\n }"}, {"sha": "d83feecf97de789c3c1b134474ed50b2b96c922a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefss-2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -20,7 +20,7 @@ compute_scalefss (float *s1, float *s2, float *r)\n static void\n avx512f_test (void)\n {\n-  union128 res1, res2, res3, res4;\n+  union128 res1, res2, res3, res4, res5, res6;\n   union128 s1, s2;\n   float res_ref[SIZE];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -35,6 +35,8 @@ avx512f_test (void)\n       res2.a[i] = DEFAULT_VALUE;\n       res3.a[i] = DEFAULT_VALUE;\n       res4.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_scalef_ss (s1.x, s2.x);\n@@ -44,6 +46,8 @@ avx512f_test (void)\n               _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   res4.x = _mm_maskz_scalef_round_ss (mask, s1.x, s2.x,\n               _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res5.x = _mm_mask_scalef_ss (s1.x, mask, s1.x, s2.x);\n+  res6.x = _mm_maskz_scalef_ss (mask, s1.x, s2.x);\n \n   compute_scalefss (s1.a, s2.a, res_ref);\n \n@@ -57,8 +61,14 @@ avx512f_test (void)\n   if (check_union128 (res3, res_ref))\n     abort ();\n \n+  if (check_union128 (res5, res_ref))\n+    abort ();\n+\n   MASK_ZERO () (res_ref, mask, 1);\n \n   if (check_union128 (res4, res_ref))\n     abort ();\n+\n+  if (check_union128 (res6, res_ref))\n+    abort ();\n }"}, {"sha": "22601e9a9e6666e35b007280508609a661d1f4e0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -3,10 +3,12 @@\n /* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128d x1, x2;\n+volatile __m128d x1, x2, x3;\n volatile __mmask8 m;\n \n void extern\n@@ -15,4 +17,6 @@ avx512f_test (void)\n   x1 = _mm_sqrt_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_sqrt_round_sd (x1, m, x1, x2, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_sqrt_round_sd (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sqrt_sd (x3, m, x1, x2);\n+  x1 = _mm_maskz_sqrt_sd (m, x1, x2);\n }"}, {"sha": "ec908fdc8033c5c5239d7b441520166ebb510b69", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -18,7 +18,7 @@ compute_sqrtsd (double *s1, double *s2, double *r)\n void static\n avx512f_test (void)\n {\n-  union128d res1, res2, res3;\n+  union128d res1, res2, res3, res4, res5;\n   union128d s1, s2;\n   double res_ref[SIZE];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -32,6 +32,8 @@ avx512f_test (void)\n       res1.a[i] = DEFAULT_VALUE;\n       res2.a[i] = DEFAULT_VALUE;\n       res3.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_sqrt_round_sd (s1.x, s2.x, \n@@ -40,6 +42,8 @@ avx512f_test (void)\n \t\t_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   res3.x = _mm_maskz_sqrt_round_sd (mask, s1.x, s2.x,\n \t\t_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_sqrt_sd (s1.x, mask, s1.x, s2.x);\n+  res5.x = _mm_maskz_sqrt_sd (mask, s1.x, s2.x);\n \n   compute_sqrtsd (s1.a, s2.a, res_ref);\n \n@@ -51,10 +55,16 @@ avx512f_test (void)\n   if (check_union128d (res2, res_ref))\n     abort ();\n \n+  if (check_union128d (res4, res_ref))\n+    abort ();\n+\n   MASK_ZERO (d) (res_ref, mask, 1);\n \n   if (check_union128d (res3, res_ref))\n     abort ();\n+\n+  if (check_union128d (res5, res_ref))\n+    abort ();\n }\n \n "}, {"sha": "c32903b702f801807c7df9b5903d3135263974eb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -3,11 +3,13 @@\n /* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n \n #include <immintrin.h>\n \n-volatile __m128 x1, x2;\n+volatile __m128 x1, x2, x3;\n volatile __mmask8 m;\n \n void extern\n@@ -16,4 +18,6 @@ avx512f_test (void)\n   x1 = _mm_sqrt_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_sqrt_round_ss (x1, m, x1, x2, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_sqrt_round_ss (m, x1, x2, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+  x1 = _mm_mask_sqrt_ss (x3, m, x1, x2);\n+  x1 = _mm_maskz_sqrt_ss (m, x1, x2);\n }"}, {"sha": "33222bb0424507268fb7afe44a2dbcec48eae009", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -22,7 +22,7 @@ compute_sqrtss (float *s1, float *s2, float *r)\n static void\n avx512f_test (void)\n {\n-  union128 res1, res2, res3;\n+  union128 res1, res2, res3, res4, res5;\n   union128 s1, s2;\n   float res_ref[SIZE];\n   MASK_TYPE mask = MASK_VALUE;\n@@ -36,6 +36,8 @@ avx512f_test (void)\n       res1.a[i] = DEFAULT_VALUE;\n       res2.a[i] = DEFAULT_VALUE;\n       res3.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = _mm_sqrt_round_ss (s1.x, s2.x,\n@@ -44,6 +46,8 @@ avx512f_test (void)\n                 _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n   res3.x = _mm_maskz_sqrt_round_ss (mask, s1.x, s2.x,\n                 _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_sqrt_ss (s1.x, mask, s1.x, s2.x);\n+  res5.x = _mm_maskz_sqrt_ss (mask, s1.x, s2.x);\n \n   compute_sqrtss (s1.a, s2.a, res_ref);\n \n@@ -55,9 +59,15 @@ avx512f_test (void)\n   if (check_union128 (res2, res_ref))\n     abort ();\n \n+  if (check_union128 (res4, res_ref))\n+    abort ();\n+\n   MASK_ZERO () (res_ref, mask, 1);\n \n   if (check_union128 (res3, res_ref))\n     abort ();\n+\n+  if (check_union128 (res5, res_ref))\n+    abort ();\n }\n "}, {"sha": "5c6a3d0bfb40f9d61c33c7310deb05bccff2d5bb", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqa32-1.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -10,12 +10,16 @@\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\[ \\\\t\\]+\\\\(\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\[ \\\\t\\]+\\\\(\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n-int *p;\n-volatile __m256i yy, y2;\n-volatile __m128i xx, x2;\n+int *p, *p1, *p2;\n+volatile __m256i yy, y2, yyy;\n+volatile __m128i xx, x2, xxx;\n volatile __mmask8 m;\n \n void extern\n@@ -30,9 +34,15 @@ avx512vl_test (void)\n   yy = _mm256_mask_load_epi32 (yy, m, p);\n   xx = _mm_mask_load_epi32 (xx, m, p);\n \n+  yyy = _mm256_load_epi32 (p2);\n+  xxx = _mm_load_epi32 (p1);\n+\n   yy = _mm256_maskz_load_epi32 (m, p);\n   xx = _mm_maskz_load_epi32 (m, p);\n \n   _mm256_mask_store_epi32 (p, m, yy);\n   _mm_mask_store_epi32 (p, m, xx);\n+\n+  _mm256_store_epi32 (p2, yyy);\n+  _mm_store_epi32 (p2, xxx);\n }"}, {"sha": "592541aeb8e93e24ffcc246b4f74a1a2ed6bae83", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqa64-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -4,8 +4,8 @@\n /* { dg-final { scan-assembler-times \"(?:vmovdqa64|vpblendmq)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { target nonpic } } } */\n-/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 { target nonpic } } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n@@ -35,6 +35,9 @@ avx512vl_test (void)\n   yy = _mm256_load_si256 (p1);\n   xx = _mm_load_si128 (p2);\n \n+  yy = _mm256_load_epi64 (p);\n+  xx = _mm_load_epi64 (p);\n+\n   yy = _mm256_mask_load_epi64 (yy, m, p);\n   xx = _mm_mask_load_epi64 (xx, m, p);\n "}, {"sha": "6b008261f35a1ea38d760ce132ca83399aeb13f1", "filename": "gcc/testsuite/gcc.target/i386/pr95483-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-1.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse\" } */\n+/* { dg-final { scan-assembler-times \"pxor\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pinsrw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pextrw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <emmintrin.h>\n+unsigned short *p1,*p2;\n+volatile __m128i x1,x2; \n+\n+void foo (void)\n+{\n+   x1=_mm_loadu_si16 (p1);\n+   _mm_storeu_si16 (p2, x2);\n+}"}, {"sha": "a12aea8f83bb0f2926ccc3784f0af1ac69cda62d", "filename": "gcc/testsuite/gcc.target/i386/pr95483-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-2.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-final { scan-assembler-times \"(?:vpinsrd|movd)\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <emmintrin.h>\n+unsigned int *p1,*p2;\n+volatile __m128i x1,x2; \n+\n+void foo (void)\n+{\n+   x1=_mm_loadu_si32 (p1);\n+   _mm_storeu_si32 (p2, x2);\n+}"}, {"sha": "ec9018965b258abede36f1ea74ab30fb3ef745ee", "filename": "gcc/testsuite/gcc.target/i386/pr95483-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-3.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler-times \"vmovd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __m256i x1; \n+\n+int foo (void)\n+{\n+   return _mm256_cvtsi256_si32 (x1);\n+}"}, {"sha": "1d4cdb45020453622a257a33ff29616007fdcdf4", "filename": "gcc/testsuite/gcc.target/i386/pr95483-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-4.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vmovd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __m512i x1; \n+\n+int foo (void)\n+{\n+   return _mm512_cvtsi512_si32 (x1);\n+}"}, {"sha": "b52e39dff79f958274803680468f719e7463a1f5", "filename": "gcc/testsuite/gcc.target/i386/pr95483-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-5.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu8|vinserti128)\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmovdqu8|vextracti128)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+char *p, *p1;\n+volatile __m256i yyy;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  yyy = _mm256_loadu_epi8 (p);\n+  _mm256_storeu_epi8 (p1, yyy);\n+}"}, {"sha": "3540bf8218e431df6d880d0c087000c8f4401cb5", "filename": "gcc/testsuite/gcc.target/i386/pr95483-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-6.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"(?:vinserti128|vmovdqu)\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+long long *p1;\n+volatile __m256i x1, x2;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm256_loadu_epi32 (p);\n+  x2 = _mm256_loadu_epi64 (p1);\n+}"}, {"sha": "f72aa93eae27176744df4c1b9b9fa9f55fa7edb1", "filename": "gcc/testsuite/gcc.target/i386/pr95483-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95483-7.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+long long *p1;\n+volatile __m128i x1, x2;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm_loadu_epi32 (p);\n+  x2 = _mm_loadu_epi64 (p1);\n+}"}, {"sha": "dd6dd55ae8bb611d9a2902da57dc8966e2e5fc25", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -398,6 +398,8 @@\n #define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, 8)\n \n /* avx512erintrin.h */\n #define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 8)\n@@ -410,6 +412,10 @@\n #define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 8)\n #define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 8)\n #define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 8)\n+#define __builtin_ia32_rcp28sd_mask_round(A, B, C, D, E) __builtin_ia32_rcp28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rcp28ss_mask_round(A, B, C, D, E) __builtin_ia32_rcp28ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, 8)\n \n /* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, _MM_HINT_T0)\n@@ -621,6 +627,10 @@\n #define __builtin_ia32_cmpw128_mask(A, B, E, D) __builtin_ia32_cmpw128_mask(A, B, 1, D)\n #define __builtin_ia32_cmpb256_mask(A, B, E, D) __builtin_ia32_cmpb256_mask(A, B, 1, D)\n #define __builtin_ia32_cmpb128_mask(A, B, E, D) __builtin_ia32_cmpb128_mask(A, B, 1, D)\n+#define __builtin_ia32_reducepd512_mask_round(A,B,C,D,E) __builtin_ia32_reducepd512_mask_round(A,1,C,D,8)\n+#define __builtin_ia32_reduceps512_mask_round(A,B,C,D,E) __builtin_ia32_reduceps512_mask_round(A,1,C,D,8)\n+#define __builtin_ia32_reducesd_mask_round(A, B, F, W, U, E) __builtin_ia32_reducesd_mask_round(A, B, 1, W, U, 8)\n+#define __builtin_ia32_reducess_mask_round(A, B, F, W, U, E) __builtin_ia32_reducess_mask_round(A, B, 1, W, U, 8)\n \n /* avx512vldqintrin.h */\n #define __builtin_ia32_reduceps256_mask(A, E, C, D) __builtin_ia32_reduceps256_mask(A, 1, C, D)"}, {"sha": "b51644c70e25db5138982d0dea2e07b4b2d88bd3", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93103603fd66a9fcf3ea2d8b52657e4b2496f544/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=93103603fd66a9fcf3ea2d8b52657e4b2496f544", "patch": "@@ -399,6 +399,8 @@\n #define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n #define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask_round(A, B, C, D, 8)\n \n /* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, _MM_HINT_T0)\n@@ -421,6 +423,10 @@\n #define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 8)\n #define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 8)\n #define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 8)\n+#define __builtin_ia32_rcp28sd_mask_round(A, B, C, D, E) __builtin_ia32_rcp28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rcp28ss_mask_round(A, B, C, D, E) __builtin_ia32_rcp28ss_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28sd_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, E) __builtin_ia32_rsqrt28ss_mask_round(A, B, C, D, 8)\n \n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n@@ -482,6 +488,10 @@\n #define __builtin_ia32_cvtps2qq512_mask(A, B, C, D) __builtin_ia32_cvtps2qq512_mask(A, B, C, 8)\n #define __builtin_ia32_cvtpd2uqq512_mask(A, B, C, D) __builtin_ia32_cvtpd2uqq512_mask(A, B, C, 8)\n #define __builtin_ia32_cvtpd2qq512_mask(A, B, C, D) __builtin_ia32_cvtpd2qq512_mask(A, B, C, 8)\n+#define __builtin_ia32_reducesd_mask_round(A, B, C, D, E, F) __builtin_ia32_reducesd_mask_round(A, B, 8, D, E, 8)\n+#define __builtin_ia32_reducess_mask_round(A, B, C, D, E, F) __builtin_ia32_reducess_mask_round(A, B, 8, D, E, 8)\n+#define __builtin_ia32_reducepd512_mask_round(A, B, C, D, E) __builtin_ia32_reducepd512_mask_round(A, 8, C, D, 8)\n+#define __builtin_ia32_reduceps512_mask_round(A, B, C, D, E) __builtin_ia32_reduceps512_mask_round(A, 8, C, D, 8)\n \n /* avx512vlintrin.h */\n #define __builtin_ia32_vpermilps_mask(A, E, C, D) __builtin_ia32_vpermilps_mask(A, 1, C, D)"}]}