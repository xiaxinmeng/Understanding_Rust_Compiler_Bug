{"sha": "b8f564124ed51964b704452e3ea05b2423446e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhmNTY0MTI0ZWQ1MTk2NGI3MDQ0NTJlM2VhMDViMjQyMzQ0NmUxYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-11-17T15:55:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-11-17T15:55:26Z"}, "message": "Fix locations within raw strings\n\nWhilst investigating PR preprocessor/78324 I noticed that the\nsubstring location code currently doesn't handle raw strings\ncorrectly, by not skipping the 'R', opening quote, delimiter\nand opening parenthesis.\n\nFor example, an attempt to underline chars 4-7 with caret at 6 of\nthis raw string yields this erroneous output:\n   __emit_string_literal_range (R\"foo(0123456789)foo\",\n                                    ~~^~\n\nWith the patch, the correct range/caret is printed:\n\n   __emit_string_literal_range (R\"foo(0123456789)foo\",\n                                          ~~^~\n\ngcc/ChangeLog:\n\t* input.c (selftest::test_lexer_string_locations_long_line): New\n\tfunction.\n\t(selftest::test_lexer_string_locations_raw_string_multiline): New\n\tfunction.\n\t(selftest::input_c_tests): Call the new functions, via\n\tfor_each_line_table_case.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_raw_string_one_liner): New function.\n\t(test_raw_string_multiline): New function.\n\nlibcpp/ChangeLog:\n\t* charset.c (cpp_interpret_string_1): Skip locations from\n\tloc_reader when advancing 'p' when handling raw strings.\n\nFrom-SVN: r242552", "tree": {"sha": "c847c4257bce9fb3b4aec31453d07ca3f78bf42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c847c4257bce9fb3b4aec31453d07ca3f78bf42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8f564124ed51964b704452e3ea05b2423446e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f564124ed51964b704452e3ea05b2423446e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f564124ed51964b704452e3ea05b2423446e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f564124ed51964b704452e3ea05b2423446e1c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141a3ccff1f53ca8a86453fbe4eaa1bc6b64d920"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "1bb29c0ab03a535d396c1bbd6e47655c031ad676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -1,3 +1,12 @@\n+2016-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (selftest::test_lexer_string_locations_long_line): New\n+\tfunction.\n+\t(selftest::test_lexer_string_locations_raw_string_multiline): New\n+\tfunction.\n+\t(selftest::input_c_tests): Call the new functions, via\n+\tfor_each_line_table_case.\n+\n 2016-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (mov<mode>): Call"}, {"sha": "728f4dd65d7716642d8f474140e49abb6e1fa848", "filename": "gcc/input.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -3156,6 +3156,78 @@ test_lexer_string_locations_long_line (const line_table_case &case_)\n \t\t\t  i, 2, 7 + i, 7 + i);\n }\n \n+/* Test of locations within a raw string that doesn't contain a newline.  */\n+\n+static void\n+test_lexer_string_locations_raw_string_one_line (const line_table_case &case_)\n+{\n+  /* .....................00.0000000111111111122.\n+     .....................12.3456789012345678901.  */\n+  const char *content = (\"R\\\"foo(0123456789)foo\\\"\\n\");\n+  lexer_test test (case_, content, NULL);\n+\n+  /* Verify that we get the expected token back.  */\n+  const cpp_token *tok = test.get_token ();\n+  ASSERT_EQ (tok->type, CPP_STRING);\n+\n+  /* Verify that cpp_interpret_string works.  */\n+  cpp_string dst_string;\n+  const enum cpp_ttype type = CPP_STRING;\n+  bool result = cpp_interpret_string (test.m_parser, &tok->val.str, 1,\n+\t\t\t\t      &dst_string, type);\n+  ASSERT_TRUE (result);\n+  ASSERT_STREQ (\"0123456789\", (const char *)dst_string.text);\n+  free (const_cast <unsigned char *> (dst_string.text));\n+\n+  if (!should_have_column_data_p (line_table->highest_location))\n+    return;\n+\n+  /* 0-9, plus the nil terminator.  */\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 11);\n+  for (int i = 0; i < 11; i++)\n+    ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n+\t\t\t  i, 1, 7 + i, 7 + i);\n+}\n+\n+/* Test of locations within a raw string that contains a newline.  */\n+\n+static void\n+test_lexer_string_locations_raw_string_multiline (const line_table_case &case_)\n+{\n+  /* .....................00.0000.\n+     .....................12.3456.  */\n+  const char *content = (\"R\\\"foo(\\n\"\n+  /* .....................00000.\n+     .....................12345.  */\n+\t\t\t \"hello\\n\"\n+\t\t\t \"world\\n\"\n+  /* .....................00000.\n+     .....................12345.  */\n+\t\t\t \")foo\\\"\\n\");\n+  lexer_test test (case_, content, NULL);\n+\n+  /* Verify that we get the expected token back.  */\n+  const cpp_token *tok = test.get_token ();\n+  ASSERT_EQ (tok->type, CPP_STRING);\n+\n+  /* Verify that cpp_interpret_string works.  */\n+  cpp_string dst_string;\n+  const enum cpp_ttype type = CPP_STRING;\n+  bool result = cpp_interpret_string (test.m_parser, &tok->val.str, 1,\n+\t\t\t\t      &dst_string, type);\n+  ASSERT_TRUE (result);\n+  ASSERT_STREQ (\"\\nhello\\nworld\\n\", (const char *)dst_string.text);\n+  free (const_cast <unsigned char *> (dst_string.text));\n+\n+  if (!should_have_column_data_p (line_table->highest_location))\n+    return;\n+\n+  /* Currently we don't support locations within raw strings that\n+     contain newlines.  */\n+  ASSERT_HAS_NO_SUBSTRING_RANGES (test, tok->src_loc, tok->type,\n+\t\t\t\t  \"range endpoints are on different lines\");\n+}\n+\n /* Test of lexing char constants.  */\n \n static void\n@@ -3297,6 +3369,8 @@ input_c_tests ()\n   for_each_line_table_case (test_lexer_string_locations_stringified_macro_argument);\n   for_each_line_table_case (test_lexer_string_locations_non_string);\n   for_each_line_table_case (test_lexer_string_locations_long_line);\n+  for_each_line_table_case (test_lexer_string_locations_raw_string_one_line);\n+  for_each_line_table_case (test_lexer_string_locations_raw_string_multiline);\n   for_each_line_table_case (test_lexer_char_constants);\n \n   test_reading_source_line ();"}, {"sha": "fb0bd45f431184bc7e8156bde4386d51b54c1185", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -1,3 +1,9 @@\n+2016-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_raw_string_one_liner): New function.\n+\t(test_raw_string_multiline): New function.\n+\n 2016-11-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/store_repeating_constant_1.c: New test."}, {"sha": "3e449360f756ed4f7c2031564231146fb7360cff", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -193,6 +193,39 @@ test_L (void)\n    { dg-end-multiline-output \"\" } */\n }\n \n+void\n+test_raw_string_one_liner (void)\n+{\n+  /* Digits 0-9.  */\n+  __emit_string_literal_range (R\"foo(0123456789)foo\", /* { dg-warning \"range\" } */\n+\t\t\t       6, 4, 7);\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_string_literal_range (R\"foo(0123456789)foo\",\n+                                          ~~^~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void\n+test_raw_string_multiline (void)\n+{\n+  __emit_string_literal_range (R\"foo(\n+hello\n+world\n+)foo\",\n+\t\t\t       6, 4, 7);\n+  /* { dg-error \"unable to read substring location: range endpoints are on different lines\" \"\" { target *-*-* } .-5 } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __emit_string_literal_range (R\"foo(\n+                                ^~~~~~\n+ hello\n+ ~~~~~                           \n+ world\n+ ~~~~~                           \n+ )foo\",\n+ ~~~~~                           \n+   { dg-end-multiline-output \"\" } */\n+}\n+\n void\n test_macro (void)\n {"}, {"sha": "6b928078636bc24cc978816467720e91ad47263d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -1,3 +1,8 @@\n+2016-11-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* charset.c (cpp_interpret_string_1): Skip locations from\n+\tloc_reader when advancing 'p' when handling raw strings.\n+\n 2016-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/72823"}, {"sha": "9cd1e10ae89ac7407d9c5d2c7aefdc61b4e8d997", "filename": "libcpp/charset.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8f564124ed51964b704452e3ea05b2423446e1c/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8f564124ed51964b704452e3ea05b2423446e1c/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=b8f564124ed51964b704452e3ea05b2423446e1c", "patch": "@@ -1564,10 +1564,21 @@ cpp_interpret_string_1 (cpp_reader *pfile, const cpp_string *from, size_t count,\n \n \t  /* Skip over 'R\"'.  */\n \t  p += 2;\n+\t  if (loc_reader)\n+\t    {\n+\t      loc_reader->get_next ();\n+\t      loc_reader->get_next ();\n+\t    }\n \t  prefix = p;\n \t  while (*p != '(')\n-\t    p++;\n+\t    {\n+\t      p++;\n+\t      if (loc_reader)\n+\t\tloc_reader->get_next ();\n+\t    }\n \t  p++;\n+\t  if (loc_reader)\n+\t    loc_reader->get_next ();\n \t  limit = from[i].text + from[i].len;\n \t  if (limit >= p + (p - prefix) + 1)\n \t    limit -= (p - prefix) + 1;"}]}