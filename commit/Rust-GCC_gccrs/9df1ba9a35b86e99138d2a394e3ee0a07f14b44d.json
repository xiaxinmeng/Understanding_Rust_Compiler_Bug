{"sha": "9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "node_id": "C_kwDOANBUbNoAKDlkZjFiYTlhMzViODZlOTkxMzhkMmEzOTRlM2VlMGEwN2YxNGI0NGQ", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-12-08T00:21:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-12-08T00:22:49Z"}, "message": "libbacktrace: support zstd decompression\n\n\tSupport decompressing --compress-debug-sections=zstd.\n\t* configure.ac: Check for zstd library and\n\t--compress-debug-sections=zstd linker option.\n\t* Makefile.am (zstdtest_*): New targets.\n\t(zstdtest_alloc_*, ctestzstd_*): New targets.\n\t(BUILDTESTS): Add zstdtest, zstdtest_alloc, ctestzstd as\n\tappropriate.\n\t* elf.c (ELFCOMPRESS_ZSTD): Define.\n\t(elf_fetch_bits): Rename from elf_zlib_fetch.  Update uses.\n\t(elf_fetch_bits_backward): New static function.\n\t(ZLIB_HUFFMAN_*): Rename from HUFFMAN_*.  Update uses.\n\t(ZLIB_TABLE_*): Rename from ZDEBUG_TABLE_*.  Update uses.\n\t(ZSTD_TABLE_*): Define.\n\t(struct elf_zstd_fse_entry): Define.\n\t(elf_zstd_read_fse): New static function.\n\t(elf_zstd_build_fse): Likewise.\n\t(lit): Define if BACKTRACE_GENERATE_ZSTD_FSE_TABLES.\n\t(match, offset, next, print_table, main): Likewise.\n\t(elf_zstd_lit_table): New static const array.\n\t(elf_zstd_match_table, elf_zstd_offset_table): Likewise.\n\t(elf_zstd_read_huff): New static function.\n\t(struct elf_zstd_seq_decode): Define.\n\t(elf_zstd_unpack_seq_decode): New static function.\n\t(ZSTD_LIT_*): Define.\n\t(struct elf_zstd_literals): Define.\n\t(elf_zstd_literal_output): New static function.\n\t(ZSTD_LITERAL_LENGTH_BASELINE_OFFSET): Define.\n\t(elf_zstd_literal_length_baseline): New static const array.\n\t(elf_zstd_literal_length_bits): Likewise.\n\t(ZSTD_MATCH_LENGTH_BASELINE_OFFSET): Define.\n\t(elf_zstd_match_length_baseline): New static const array.\n\t(elf_zstd_match_length_bits): Likewise.\n\t(elf_zstd_decompress): New static function.\n\t(ZDEBUG_TABLE_SIZE): New definition.\n\t(elf_uncompress_chdr): Support ELF_COMPRESS_ZSTD.\n\t(backtrace_uncompress_zstd): New function.\n\t(elf_add): Use ZLIB_TABLE_SIZE for zlib-gnu sections.\n\t* internal.h (backtrace_uncompress_zstd): Declare.\n\t* zstdtest.c: New file.\n\t* configure, config.h.in, Makefile.in: Regenerate.", "tree": {"sha": "0634f421549291ff651c7fa53fb1cdc26dc7ebad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0634f421549291ff651c7fa53fb1cdc26dc7ebad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc2d9f6cb1554bdd634f190c325c8d8e4046f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc2d9f6cb1554bdd634f190c325c8d8e4046f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc2d9f6cb1554bdd634f190c325c8d8e4046f42"}], "stats": {"total": 3649, "additions": 3352, "deletions": 297}, "files": [{"sha": "047b573c29a5655512b53876c3dbf43e6d3db0a7", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -368,6 +368,25 @@ ztest_alloc_CFLAGS = $(ztest_CFLAGS)\n \n BUILDTESTS += ztest_alloc\n \n+zstdtest_SOURCES = zstdtest.c testlib.c\n+zstdtest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -DSRCDIR=\\\"$(srcdir)\\\"\n+zstdtest_LDADD = libbacktrace.la\n+zstdtest_alloc_LDADD = libbacktrace_alloc.la\n+\n+if HAVE_ZSTD\n+zstdtest_LDADD += -lzstd\n+zstdtest_alloc_LDADD += -lzstd\n+endif\n+zstdtest_LDADD += $(CLOCK_GETTIME_LINK)\n+zstdtest_alloc_LDADD += $(CLOCK_GETTIME_LINK)\n+\n+BUILDTESTS += zstdtest\n+\n+zstdtest_alloc_SOURCES = $(zstdtest_SOURCES)\n+zstdtest_alloc_CFLAGS = $(zstdtest_CFLAGS)\n+\n+BUILDTESTS += zstdtest_alloc\n+\n endif HAVE_ELF\n \n edtest_SOURCES = edtest.c edtest2_build.c testlib.c\n@@ -450,6 +469,17 @@ ctesta_LDADD = libbacktrace.la\n \n BUILDTESTS += ctestg ctesta\n \n+if HAVE_COMPRESSED_DEBUG_ZSTD\n+\n+ctestzstd_SOURCES = btest.c testlib.c\n+ctestzstd_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n+ctestzstd_LDFLAGS = -Wl,--compress-debug-sections=zstd\n+ctestzstd_LDADD = libbacktrace.la\n+\n+BUILDTESTS += ctestzstd\n+\n+endif\n+\n ctestg_alloc_SOURCES = $(ctestg_SOURCES)\n ctestg_alloc_CFLAGS = $(ctestg_CFLAGS)\n ctestg_alloc_LDFLAGS = $(ctestg_LDFLAGS)"}, {"sha": "0eceea4070082d0803b6bb1dcc188e7996f77fab", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 160, "deletions": 38, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -121,8 +121,8 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n check_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\\n-\t$(am__EXEEXT_14)\n-TESTS = $(am__append_4) $(MAKETESTS) $(am__EXEEXT_14)\n+\t$(am__EXEEXT_16)\n+TESTS = $(am__append_4) $(MAKETESTS) $(am__EXEEXT_16)\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_1 = libbacktrace_elf_for_test.la\n @NATIVE_TRUE@am__append_2 = test_elf_32 test_elf_64 test_macho \\\n @NATIVE_TRUE@\ttest_xcoff_32 test_xcoff_64 test_pecoff \\\n@@ -143,26 +143,29 @@ TESTS = $(am__append_4) $(MAKETESTS) $(am__EXEEXT_14)\n @HAVE_DWZ_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_13 = btest_dwz_gnudebuglink\n @HAVE_ELF_TRUE@@HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_14 = -lz\n @HAVE_ELF_TRUE@@HAVE_ZLIB_TRUE@@NATIVE_TRUE@am__append_15 = -lz\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@am__append_16 = ztest ztest_alloc\n-@NATIVE_TRUE@am__append_17 = edtest edtest_alloc\n-@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_18 = ttest ttest_alloc\n-@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_19 =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@am__append_16 = ztest ztest_alloc zstdtest \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest_alloc\n+@HAVE_ELF_TRUE@@HAVE_ZSTD_TRUE@@NATIVE_TRUE@am__append_17 = -lzstd\n+@HAVE_ELF_TRUE@@HAVE_ZSTD_TRUE@@NATIVE_TRUE@am__append_18 = -lzstd\n+@NATIVE_TRUE@am__append_19 = edtest edtest_alloc\n+@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__append_20 = ttest ttest_alloc\n+@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_21 =  \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@\tttest.dSYM \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@\tttest_alloc.dSYM\n-@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_20 = btest_gnudebuglink\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__append_21 = ctestg ctesta \\\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg_alloc \\\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta_alloc\n-@HAVE_DWARF5_TRUE@@NATIVE_TRUE@am__append_22 = dwarf5 dwarf5_alloc\n-@HAVE_DWARF5_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_23 =  \\\n+@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am__append_22 = btest_gnudebuglink\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__append_23 = ctestg ctesta\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@am__append_24 = ctestzstd\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__append_25 = ctestg_alloc ctesta_alloc\n+@HAVE_DWARF5_TRUE@@NATIVE_TRUE@am__append_26 = dwarf5 dwarf5_alloc\n+@HAVE_DWARF5_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_27 =  \\\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@\tdwarf5.dSYM \\\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@\tdwarf5_alloc.dSYM\n-@NATIVE_TRUE@am__append_24 = mtest\n-@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_25 = mtest.dSYM\n-@HAVE_MINIDEBUG_TRUE@@NATIVE_TRUE@am__append_26 = mtest_minidebug\n-@HAVE_ELF_TRUE@@HAVE_LIBLZMA_TRUE@am__append_27 = -llzma\n-@HAVE_ELF_TRUE@@HAVE_LIBLZMA_TRUE@am__append_28 = -llzma\n-@HAVE_ELF_TRUE@am__append_29 = xztest xztest_alloc\n+@NATIVE_TRUE@am__append_28 = mtest\n+@NATIVE_TRUE@@USE_DSYMUTIL_TRUE@am__append_29 = mtest.dSYM\n+@HAVE_MINIDEBUG_TRUE@@NATIVE_TRUE@am__append_30 = mtest_minidebug\n+@HAVE_ELF_TRUE@@HAVE_LIBLZMA_TRUE@am__append_31 = -llzma\n+@HAVE_ELF_TRUE@@HAVE_LIBLZMA_TRUE@am__append_32 = -llzma\n+@HAVE_ELF_TRUE@am__append_33 = xztest xztest_alloc\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/cet.m4 \\\n@@ -230,23 +233,26 @@ libbacktrace_noformat_la_OBJECTS =  \\\n @NATIVE_TRUE@am__EXEEXT_6 = btest_alloc$(EXEEXT) stest$(EXEEXT) \\\n @NATIVE_TRUE@\tstest_alloc$(EXEEXT)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@am__EXEEXT_7 = ztest$(EXEEXT) \\\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest_alloc$(EXEEXT)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest_alloc$(EXEEXT) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest$(EXEEXT) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest_alloc$(EXEEXT)\n @NATIVE_TRUE@am__EXEEXT_8 = edtest$(EXEEXT) edtest_alloc$(EXEEXT)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am__EXEEXT_9 = ttest$(EXEEXT) \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest_alloc$(EXEEXT)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__EXEEXT_10 =  \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg$(EXEEXT) \\\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta$(EXEEXT) \\\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctestg_alloc$(EXEEXT) \\\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta$(EXEEXT)\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@am__EXEEXT_11 = ctestzstd$(EXEEXT)\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@am__EXEEXT_12 = ctestg_alloc$(EXEEXT) \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@\tctesta_alloc$(EXEEXT)\n-@HAVE_DWARF5_TRUE@@NATIVE_TRUE@am__EXEEXT_11 = dwarf5$(EXEEXT) \\\n+@HAVE_DWARF5_TRUE@@NATIVE_TRUE@am__EXEEXT_13 = dwarf5$(EXEEXT) \\\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@\tdwarf5_alloc$(EXEEXT)\n-@NATIVE_TRUE@am__EXEEXT_12 = mtest$(EXEEXT)\n-@HAVE_ELF_TRUE@am__EXEEXT_13 = xztest$(EXEEXT) xztest_alloc$(EXEEXT)\n-am__EXEEXT_14 = $(am__EXEEXT_4) $(am__EXEEXT_5) $(am__EXEEXT_6) \\\n+@NATIVE_TRUE@am__EXEEXT_14 = mtest$(EXEEXT)\n+@HAVE_ELF_TRUE@am__EXEEXT_15 = xztest$(EXEEXT) xztest_alloc$(EXEEXT)\n+am__EXEEXT_16 = $(am__EXEEXT_4) $(am__EXEEXT_5) $(am__EXEEXT_6) \\\n \t$(am__EXEEXT_7) $(am__EXEEXT_8) $(am__EXEEXT_9) \\\n \t$(am__EXEEXT_10) $(am__EXEEXT_11) $(am__EXEEXT_12) \\\n-\t$(am__EXEEXT_13)\n+\t$(am__EXEEXT_13) $(am__EXEEXT_14) $(am__EXEEXT_15)\n @NATIVE_TRUE@am_allocfail_OBJECTS = allocfail-allocfail.$(OBJEXT) \\\n @NATIVE_TRUE@\tallocfail-testlib.$(OBJEXT)\n allocfail_OBJECTS = $(am_allocfail_OBJECTS)\n@@ -328,6 +334,13 @@ ctestg_alloc_OBJECTS = $(am_ctestg_alloc_OBJECTS)\n ctestg_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(ctestg_alloc_CFLAGS) \\\n \t$(CFLAGS) $(ctestg_alloc_LDFLAGS) $(LDFLAGS) -o $@\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@am_ctestzstd_OBJECTS = ctestzstd-btest.$(OBJEXT) \\\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@\tctestzstd-testlib.$(OBJEXT)\n+ctestzstd_OBJECTS = $(am_ctestzstd_OBJECTS)\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@ctestzstd_DEPENDENCIES = libbacktrace.la\n+ctestzstd_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(ctestzstd_CFLAGS) \\\n+\t$(CFLAGS) $(ctestzstd_LDFLAGS) $(LDFLAGS) -o $@\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@am_dwarf5_OBJECTS =  \\\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@\tdwarf5-btest.$(OBJEXT) \\\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@\tdwarf5-testlib.$(OBJEXT)\n@@ -498,6 +511,30 @@ xztest_alloc_OBJECTS = $(am_xztest_alloc_OBJECTS)\n xztest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(xztest_alloc_CFLAGS) \\\n \t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@am_zstdtest_OBJECTS =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest-zstdtest.$(OBJEXT) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest-testlib.$(OBJEXT)\n+zstdtest_OBJECTS = $(am_zstdtest_OBJECTS)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_DEPENDENCIES = libbacktrace.la \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__DEPENDENCIES_1) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__DEPENDENCIES_1)\n+zstdtest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(zstdtest_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@am__objects_13 =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest_alloc-zstdtest.$(OBJEXT) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tzstdtest_alloc-testlib.$(OBJEXT)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@am_zstdtest_alloc_OBJECTS =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__objects_13)\n+zstdtest_alloc_OBJECTS = $(am_zstdtest_alloc_OBJECTS)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_alloc_DEPENDENCIES =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tlibbacktrace_alloc.la \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__DEPENDENCIES_1) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__DEPENDENCIES_1)\n+zstdtest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \\\n+\t$(zstdtest_alloc_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \\\n+\t$@\n @HAVE_ELF_TRUE@@NATIVE_TRUE@am_ztest_OBJECTS = ztest-ztest.$(OBJEXT) \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest-testlib.$(OBJEXT)\n ztest_OBJECTS = $(am_ztest_OBJECTS)\n@@ -507,11 +544,11 @@ ztest_OBJECTS = $(am_ztest_OBJECTS)\n ztest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(ztest_CFLAGS) $(CFLAGS) \\\n \t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@am__objects_13 =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@am__objects_14 =  \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest_alloc-ztest.$(OBJEXT) \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest_alloc-testlib.$(OBJEXT)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@am_ztest_alloc_OBJECTS =  \\\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__objects_13)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__objects_14)\n ztest_alloc_OBJECTS = $(am_ztest_alloc_OBJECTS)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_alloc_DEPENDENCIES =  \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\tlibbacktrace_alloc.la \\\n@@ -561,7 +598,7 @@ SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n \t$(b2test_SOURCES) $(b3test_SOURCES) $(btest_SOURCES) \\\n \t$(btest_alloc_SOURCES) $(btest_lto_SOURCES) $(ctesta_SOURCES) \\\n \t$(ctesta_alloc_SOURCES) $(ctestg_SOURCES) \\\n-\t$(ctestg_alloc_SOURCES) $(dwarf5_SOURCES) \\\n+\t$(ctestg_alloc_SOURCES) $(ctestzstd_SOURCES) $(dwarf5_SOURCES) \\\n \t$(dwarf5_alloc_SOURCES) $(edtest_SOURCES) \\\n \t$(edtest_alloc_SOURCES) $(mtest_SOURCES) $(stest_SOURCES) \\\n \t$(stest_alloc_SOURCES) $(test_elf_32_SOURCES) \\\n@@ -570,7 +607,8 @@ SOURCES = $(libbacktrace_la_SOURCES) $(EXTRA_libbacktrace_la_SOURCES) \\\n \t$(test_xcoff_32_SOURCES) $(test_xcoff_64_SOURCES) \\\n \t$(ttest_SOURCES) $(ttest_alloc_SOURCES) $(unittest_SOURCES) \\\n \t$(unittest_alloc_SOURCES) $(xztest_SOURCES) \\\n-\t$(xztest_alloc_SOURCES) $(ztest_SOURCES) \\\n+\t$(xztest_alloc_SOURCES) $(zstdtest_SOURCES) \\\n+\t$(zstdtest_alloc_SOURCES) $(ztest_SOURCES) \\\n \t$(ztest_alloc_SOURCES)\n am__can_run_installinfo = \\\n   case $$AM_UPDATE_INFO_DIR in \\\n@@ -989,18 +1027,18 @@ libbacktrace_la_DEPENDENCIES = $(libbacktrace_la_LIBADD)\n # Add a test to this variable if you want it to be built as a Makefile\n # target and run.\n MAKETESTS = $(am__append_7) $(am__append_9) $(am__append_12) \\\n-\t$(am__append_13) $(am__append_20) $(am__append_26)\n+\t$(am__append_13) $(am__append_22) $(am__append_30)\n \n # Add a test to this variable if you want it to be built as a program,\n # with SOURCES, etc., and run.\n BUILDTESTS = $(am__append_2) $(am__append_10) $(am__append_11) \\\n-\t$(am__append_16) $(am__append_17) $(am__append_18) \\\n-\t$(am__append_21) $(am__append_22) $(am__append_24) \\\n-\t$(am__append_29)\n+\t$(am__append_16) $(am__append_19) $(am__append_20) \\\n+\t$(am__append_23) $(am__append_24) $(am__append_25) \\\n+\t$(am__append_26) $(am__append_28) $(am__append_33)\n \n # Add a file to this variable if you want it to be built for testing.\n-check_DATA = $(am__append_5) $(am__append_19) $(am__append_23) \\\n-\t$(am__append_25)\n+check_DATA = $(am__append_5) $(am__append_21) $(am__append_27) \\\n+\t$(am__append_29)\n \n # Flags to use when compiling test programs.\n libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n@@ -1088,6 +1126,17 @@ libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_alloc_SOURCES = $(ztest_SOURCES)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_alloc_CFLAGS = $(ztest_CFLAGS)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_SOURCES = zstdtest.c testlib.c\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -DSRCDIR=\\\"$(srcdir)\\\"\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_LDADD = libbacktrace.la \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__append_17) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_alloc_LDADD =  \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\tlibbacktrace_alloc.la \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__append_18) \\\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_alloc_SOURCES = $(zstdtest_SOURCES)\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@zstdtest_alloc_CFLAGS = $(zstdtest_CFLAGS)\n @NATIVE_TRUE@edtest_SOURCES = edtest.c edtest2_build.c testlib.c\n @NATIVE_TRUE@edtest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@edtest_LDADD = libbacktrace.la\n@@ -1108,6 +1157,10 @@ libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_LDFLAGS = -Wl,--compress-debug-sections=zlib-gabi\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_LDADD = libbacktrace.la\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@ctestzstd_SOURCES = btest.c testlib.c\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@ctestzstd_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@ctestzstd_LDFLAGS = -Wl,--compress-debug-sections=zstd\n+@HAVE_COMPRESSED_DEBUG_TRUE@@HAVE_COMPRESSED_DEBUG_ZSTD_TRUE@@NATIVE_TRUE@ctestzstd_LDADD = libbacktrace.la\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_alloc_SOURCES = $(ctestg_SOURCES)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_alloc_CFLAGS = $(ctestg_CFLAGS)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_alloc_LDFLAGS = $(ctestg_LDFLAGS)\n@@ -1127,12 +1180,12 @@ libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n @NATIVE_TRUE@mtest_LDADD = libbacktrace.la\n @HAVE_ELF_TRUE@xztest_SOURCES = xztest.c testlib.c\n @HAVE_ELF_TRUE@xztest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -DSRCDIR=\\\"$(srcdir)\\\"\n-@HAVE_ELF_TRUE@xztest_LDADD = libbacktrace.la $(am__append_27) \\\n+@HAVE_ELF_TRUE@xztest_LDADD = libbacktrace.la $(am__append_31) \\\n @HAVE_ELF_TRUE@\t$(CLOCK_GETTIME_LINK)\n @HAVE_ELF_TRUE@xztest_alloc_SOURCES = $(xztest_SOURCES)\n @HAVE_ELF_TRUE@xztest_alloc_CFLAGS = $(xztest_CFLAGS)\n @HAVE_ELF_TRUE@xztest_alloc_LDADD = libbacktrace_alloc.la \\\n-@HAVE_ELF_TRUE@\t$(am__append_28) $(CLOCK_GETTIME_LINK)\n+@HAVE_ELF_TRUE@\t$(am__append_32) $(CLOCK_GETTIME_LINK)\n CLEANFILES = \\\n \t$(MAKETESTS) $(BUILDTESTS) *.debug elf_for_test.c edtest2_build.c \\\n \tgen_edtest2_build \\\n@@ -1302,6 +1355,10 @@ ctestg_alloc$(EXEEXT): $(ctestg_alloc_OBJECTS) $(ctestg_alloc_DEPENDENCIES) $(EX\n \t@rm -f ctestg_alloc$(EXEEXT)\n \t$(AM_V_CCLD)$(ctestg_alloc_LINK) $(ctestg_alloc_OBJECTS) $(ctestg_alloc_LDADD) $(LIBS)\n \n+ctestzstd$(EXEEXT): $(ctestzstd_OBJECTS) $(ctestzstd_DEPENDENCIES) $(EXTRA_ctestzstd_DEPENDENCIES) \n+\t@rm -f ctestzstd$(EXEEXT)\n+\t$(AM_V_CCLD)$(ctestzstd_LINK) $(ctestzstd_OBJECTS) $(ctestzstd_LDADD) $(LIBS)\n+\n dwarf5$(EXEEXT): $(dwarf5_OBJECTS) $(dwarf5_DEPENDENCIES) $(EXTRA_dwarf5_DEPENDENCIES) \n \t@rm -f dwarf5$(EXEEXT)\n \t$(AM_V_CCLD)$(dwarf5_LINK) $(dwarf5_OBJECTS) $(dwarf5_LDADD) $(LIBS)\n@@ -1382,6 +1439,14 @@ xztest_alloc$(EXEEXT): $(xztest_alloc_OBJECTS) $(xztest_alloc_DEPENDENCIES) $(EX\n \t@rm -f xztest_alloc$(EXEEXT)\n \t$(AM_V_CCLD)$(xztest_alloc_LINK) $(xztest_alloc_OBJECTS) $(xztest_alloc_LDADD) $(LIBS)\n \n+zstdtest$(EXEEXT): $(zstdtest_OBJECTS) $(zstdtest_DEPENDENCIES) $(EXTRA_zstdtest_DEPENDENCIES) \n+\t@rm -f zstdtest$(EXEEXT)\n+\t$(AM_V_CCLD)$(zstdtest_LINK) $(zstdtest_OBJECTS) $(zstdtest_LDADD) $(LIBS)\n+\n+zstdtest_alloc$(EXEEXT): $(zstdtest_alloc_OBJECTS) $(zstdtest_alloc_DEPENDENCIES) $(EXTRA_zstdtest_alloc_DEPENDENCIES) \n+\t@rm -f zstdtest_alloc$(EXEEXT)\n+\t$(AM_V_CCLD)$(zstdtest_alloc_LINK) $(zstdtest_alloc_OBJECTS) $(zstdtest_alloc_LDADD) $(LIBS)\n+\n ztest$(EXEEXT): $(ztest_OBJECTS) $(ztest_DEPENDENCIES) $(EXTRA_ztest_DEPENDENCIES) \n \t@rm -f ztest$(EXEEXT)\n \t$(AM_V_CCLD)$(ztest_LINK) $(ztest_OBJECTS) $(ztest_LDADD) $(LIBS)\n@@ -1525,6 +1590,18 @@ ctestg_alloc-testlib.o: testlib.c\n ctestg_alloc-testlib.obj: testlib.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ctestg_alloc_CFLAGS) $(CFLAGS) -c -o ctestg_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n \n+ctestzstd-btest.o: btest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ctestzstd_CFLAGS) $(CFLAGS) -c -o ctestzstd-btest.o `test -f 'btest.c' || echo '$(srcdir)/'`btest.c\n+\n+ctestzstd-btest.obj: btest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ctestzstd_CFLAGS) $(CFLAGS) -c -o ctestzstd-btest.obj `if test -f 'btest.c'; then $(CYGPATH_W) 'btest.c'; else $(CYGPATH_W) '$(srcdir)/btest.c'; fi`\n+\n+ctestzstd-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ctestzstd_CFLAGS) $(CFLAGS) -c -o ctestzstd-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+ctestzstd-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ctestzstd_CFLAGS) $(CFLAGS) -c -o ctestzstd-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n dwarf5-btest.o: btest.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dwarf5_CFLAGS) $(CFLAGS) -c -o dwarf5-btest.o `test -f 'btest.c' || echo '$(srcdir)/'`btest.c\n \n@@ -1765,6 +1842,30 @@ xztest_alloc-testlib.o: testlib.c\n xztest_alloc-testlib.obj: testlib.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(xztest_alloc_CFLAGS) $(CFLAGS) -c -o xztest_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n \n+zstdtest-zstdtest.o: zstdtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_CFLAGS) $(CFLAGS) -c -o zstdtest-zstdtest.o `test -f 'zstdtest.c' || echo '$(srcdir)/'`zstdtest.c\n+\n+zstdtest-zstdtest.obj: zstdtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_CFLAGS) $(CFLAGS) -c -o zstdtest-zstdtest.obj `if test -f 'zstdtest.c'; then $(CYGPATH_W) 'zstdtest.c'; else $(CYGPATH_W) '$(srcdir)/zstdtest.c'; fi`\n+\n+zstdtest-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_CFLAGS) $(CFLAGS) -c -o zstdtest-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+zstdtest-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_CFLAGS) $(CFLAGS) -c -o zstdtest-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+zstdtest_alloc-zstdtest.o: zstdtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_alloc_CFLAGS) $(CFLAGS) -c -o zstdtest_alloc-zstdtest.o `test -f 'zstdtest.c' || echo '$(srcdir)/'`zstdtest.c\n+\n+zstdtest_alloc-zstdtest.obj: zstdtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_alloc_CFLAGS) $(CFLAGS) -c -o zstdtest_alloc-zstdtest.obj `if test -f 'zstdtest.c'; then $(CYGPATH_W) 'zstdtest.c'; else $(CYGPATH_W) '$(srcdir)/zstdtest.c'; fi`\n+\n+zstdtest_alloc-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_alloc_CFLAGS) $(CFLAGS) -c -o zstdtest_alloc-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+zstdtest_alloc-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(zstdtest_alloc_CFLAGS) $(CFLAGS) -c -o zstdtest_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n ztest-ztest.o: ztest.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ztest_CFLAGS) $(CFLAGS) -c -o ztest-ztest.o `test -f 'ztest.c' || echo '$(srcdir)/'`ztest.c\n \n@@ -2159,6 +2260,20 @@ ztest_alloc.log: ztest_alloc$(EXEEXT)\n \t--log-file $$b.log --trs-file $$b.trs \\\n \t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n \t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+zstdtest.log: zstdtest$(EXEEXT)\n+\t@p='zstdtest$(EXEEXT)'; \\\n+\tb='zstdtest'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+zstdtest_alloc.log: zstdtest_alloc$(EXEEXT)\n+\t@p='zstdtest_alloc$(EXEEXT)'; \\\n+\tb='zstdtest_alloc'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n edtest.log: edtest$(EXEEXT)\n \t@p='edtest$(EXEEXT)'; \\\n \tb='edtest'; \\\n@@ -2201,6 +2316,13 @@ ctesta.log: ctesta$(EXEEXT)\n \t--log-file $$b.log --trs-file $$b.trs \\\n \t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n \t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n+ctestzstd.log: ctestzstd$(EXEEXT)\n+\t@p='ctestzstd$(EXEEXT)'; \\\n+\tb='ctestzstd'; \\\n+\t$(am__check_pre) $(LOG_DRIVER) --test-name \"$$f\" \\\n+\t--log-file $$b.log --trs-file $$b.trs \\\n+\t$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \\\n+\t\"$$tst\" $(AM_TESTS_FD_REDIRECT)\n ctestg_alloc.log: ctestg_alloc$(EXEEXT)\n \t@p='ctestg_alloc$(EXEEXT)'; \\\n \tb='ctestg_alloc'; \\"}, {"sha": "94621c2e385c39cde9ea3f8997c1dd4a2b299aa2", "filename": "libbacktrace/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfig.h.in?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -103,6 +103,9 @@\n /* Define if -lz is available. */\n #undef HAVE_ZLIB\n \n+/* Define if -lzstd is available. */\n+#undef HAVE_ZSTD\n+\n /* Define to the sub-directory in which libtool stores uninstalled libraries.\n    */\n #undef LT_OBJDIR"}, {"sha": "cbd69522202860599c801ca066f7d61af0f848fc", "filename": "libbacktrace/configure", "status": "modified", "additions": 103, "deletions": 2, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -651,6 +651,10 @@ HAVE_OBJCOPY_DEBUGLINK_FALSE\n HAVE_OBJCOPY_DEBUGLINK_TRUE\n READELF\n OBJCOPY\n+HAVE_COMPRESSED_DEBUG_ZSTD_FALSE\n+HAVE_COMPRESSED_DEBUG_ZSTD_TRUE\n+HAVE_ZSTD_FALSE\n+HAVE_ZSTD_TRUE\n HAVE_COMPRESSED_DEBUG_FALSE\n HAVE_COMPRESSED_DEBUG_TRUE\n HAVE_ZLIB_FALSE\n@@ -11535,7 +11539,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11538 \"configure\"\n+#line 11542 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11641,7 +11645,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11644 \"configure\"\n+#line 11648 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13776,6 +13780,95 @@ else\n fi\n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ZSTD_compress in -lzstd\" >&5\n+$as_echo_n \"checking for ZSTD_compress in -lzstd... \" >&6; }\n+if ${ac_cv_lib_zstd_ZSTD_compress+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lzstd  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char ZSTD_compress ();\n+int\n+main ()\n+{\n+return ZSTD_compress ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_zstd_ZSTD_compress=yes\n+else\n+  ac_cv_lib_zstd_ZSTD_compress=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_zstd_ZSTD_compress\" >&5\n+$as_echo \"$ac_cv_lib_zstd_ZSTD_compress\" >&6; }\n+if test \"x$ac_cv_lib_zstd_ZSTD_compress\" = xyes; then :\n+\n+$as_echo \"#define HAVE_ZSTD 1\" >>confdefs.h\n+\n+fi\n+\n+ if test \"$ac_cv_lib_zstd_ZSTD_compress\" = yes; then\n+  HAVE_ZSTD_TRUE=\n+  HAVE_ZSTD_FALSE='#'\n+else\n+  HAVE_ZSTD_TRUE='#'\n+  HAVE_ZSTD_FALSE=\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether --compress-debug-sections=zstd is supported\" >&5\n+$as_echo_n \"checking whether --compress-debug-sections=zstd is supported... \" >&6; }\n+if ${libgo_cv_ld_compress_zstd+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  LDFLAGS_hold=$LDFLAGS\n+LDFLAGS=\"$LDFLAGS -Wl,--compress-debug-sections=zstd\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_ld_compress_zstd=yes\n+else\n+  libgo_cv_ld_compress_zstd=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LDFLAGS=$LDFLAGS_hold\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_ld_compress_zstd\" >&5\n+$as_echo \"$libgo_cv_ld_compress_zstd\" >&6; }\n+ if test \"$libgo_cv_ld_compress_zstd\" = yes; then\n+  HAVE_COMPRESSED_DEBUG_ZSTD_TRUE=\n+  HAVE_COMPRESSED_DEBUG_ZSTD_FALSE='#'\n+else\n+  HAVE_COMPRESSED_DEBUG_ZSTD_TRUE='#'\n+  HAVE_COMPRESSED_DEBUG_ZSTD_FALSE=\n+fi\n+\n+\n \n # Extract the first word of \"objcopy\", so it can be a program name with args.\n set dummy objcopy; ac_word=$2\n@@ -14322,6 +14415,14 @@ if test -z \"${HAVE_COMPRESSED_DEBUG_TRUE}\" && test -z \"${HAVE_COMPRESSED_DEBUG_F\n   as_fn_error $? \"conditional \\\"HAVE_COMPRESSED_DEBUG\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${HAVE_ZSTD_TRUE}\" && test -z \"${HAVE_ZSTD_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"HAVE_ZSTD\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${HAVE_COMPRESSED_DEBUG_ZSTD_TRUE}\" && test -z \"${HAVE_COMPRESSED_DEBUG_ZSTD_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"HAVE_COMPRESSED_DEBUG_ZSTD\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${HAVE_OBJCOPY_DEBUGLINK_TRUE}\" && test -z \"${HAVE_OBJCOPY_DEBUGLINK_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"HAVE_OBJCOPY_DEBUGLINK\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "d0a0475cfa8c9704c966ffa019c1c534d0280122", "filename": "libbacktrace/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure.ac?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -495,6 +495,21 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM(,)],\n LDFLAGS=$LDFLAGS_hold])\n AM_CONDITIONAL(HAVE_COMPRESSED_DEBUG, test \"$libgo_cv_ld_compress\" = yes)\n \n+AC_CHECK_LIB([zstd], [ZSTD_compress],\n+    [AC_DEFINE(HAVE_ZSTD, 1, [Define if -lzstd is available.])])\n+AM_CONDITIONAL(HAVE_ZSTD, test \"$ac_cv_lib_zstd_ZSTD_compress\" = yes)\n+\n+dnl Test whether the linker supports --compress-debug-sections=zstd option.\n+AC_CACHE_CHECK([whether --compress-debug-sections=zstd is supported],\n+[libgo_cv_ld_compress_zstd],\n+[LDFLAGS_hold=$LDFLAGS\n+LDFLAGS=\"$LDFLAGS -Wl,--compress-debug-sections=zstd\"\n+AC_LINK_IFELSE([AC_LANG_PROGRAM(,)],\n+[libgo_cv_ld_compress_zstd=yes],\n+[libgo_cv_ld_compress_zstd=no])\n+LDFLAGS=$LDFLAGS_hold])\n+AM_CONDITIONAL(HAVE_COMPRESSED_DEBUG_ZSTD, test \"$libgo_cv_ld_compress_zstd\" = yes)\n+\n AC_ARG_VAR(OBJCOPY, [location of objcopy])\n AC_CHECK_PROG(OBJCOPY, objcopy, objcopy,)\n AC_CHECK_PROG(READELF, readelf, readelf)"}, {"sha": "15e6f284db65d52b35f5505401302a54848e2049", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 2509, "deletions": 257, "changes": 2766, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d"}, {"sha": "95e884558e4f368a83a5a3098446dd134a654b59", "filename": "libbacktrace/internal.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finternal.h?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -368,6 +368,15 @@ extern int backtrace_uncompress_zdebug (struct backtrace_state *,\n \t\t\t\t\tunsigned char **uncompressed,\n \t\t\t\t\tsize_t *uncompressed_size);\n \n+/* A test-only hook for elf_zstd_decompress.  */\n+\n+extern int backtrace_uncompress_zstd (struct backtrace_state *,\n+\t\t\t\t      const unsigned char *compressed,\n+\t\t\t\t      size_t compressed_size,\n+\t\t\t\t      backtrace_error_callback, void *data,\n+\t\t\t\t      unsigned char *uncompressed,\n+\t\t\t\t      size_t uncompressed_size);\n+\n /* A test-only hook for elf_uncompress_lzma.  */\n \n extern int backtrace_uncompress_lzma (struct backtrace_state *,"}, {"sha": "fe31b157a41688ff6b0979dca83a03e429ca8749", "filename": "libbacktrace/zstdtest.c", "status": "added", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fzstdtest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df1ba9a35b86e99138d2a394e3ee0a07f14b44d/libbacktrace%2Fzstdtest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fzstdtest.c?ref=9df1ba9a35b86e99138d2a394e3ee0a07f14b44d", "patch": "@@ -0,0 +1,523 @@\n+/* ztest.c -- Test for libbacktrace zstd code.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+   Written by Ian Lance Taylor, Google.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    (1) Redistributions of source code must retain the above copyright\n+    notice, this list of conditions and the following disclaimer.\n+\n+    (2) Redistributions in binary form must reproduce the above copyright\n+    notice, this list of conditions and the following disclaimer in\n+    the documentation and/or other materials provided with the\n+    distribution.\n+\n+    (3) The name of the author may not be used to\n+    endorse or promote products derived from this software without\n+    specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+POSSIBILITY OF SUCH DAMAGE.  */\n+\n+#include \"config.h\"\n+\n+#include <errno.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+\n+#ifdef HAVE_ZSTD\n+#include <zstd.h>\n+#endif\n+\n+#include \"backtrace.h\"\n+#include \"backtrace-supported.h\"\n+\n+#include \"internal.h\"\n+#include \"testlib.h\"\n+\n+#ifndef HAVE_CLOCK_GETTIME\n+\n+typedef int xclockid_t;\n+\n+static int\n+xclock_gettime (xclockid_t id ATTRIBUTE_UNUSED,\n+\t\tstruct timespec *ts ATTRIBUTE_UNUSED)\n+{\n+  errno = EINVAL;\n+  return -1;\n+}\n+\n+#define clockid_t xclockid_t\n+#define clock_gettime xclock_gettime\n+#undef CLOCK_REALTIME\n+#define CLOCK_REALTIME 0\n+\n+#endif /* !defined(HAVE_CLOCK_GETTIME) */\n+\n+#ifdef CLOCK_PROCESS_CPUTIME_ID\n+#define ZSTD_CLOCK_GETTIME_ARG CLOCK_PROCESS_CPUTIME_ID\n+#else\n+#define ZSTD_CLOCK_GETTIME_ARG CLOCK_REALTIME\n+#endif\n+\n+/* Some tests for the local zstd inflation code.  */\n+\n+struct zstd_test\n+{\n+  const char *name;\n+  const char *uncompressed;\n+  size_t uncompressed_len;\n+  const char *compressed;\n+  size_t compressed_len;\n+};\n+\n+/* Error callback.  */\n+\n+static void\n+error_callback_compress (void *vdata ATTRIBUTE_UNUSED, const char *msg,\n+\t\t\t int errnum)\n+{\n+  fprintf (stderr, \"%s\", msg);\n+  if (errnum > 0)\n+    fprintf (stderr, \": %s\", strerror (errnum));\n+  fprintf (stderr, \"\\n\");\n+  exit (EXIT_FAILURE);\n+}\n+\n+static const struct zstd_test tests[] =\n+{\n+  {\n+    \"empty\",\n+    \"\",\n+    0,\n+    \"\\x28\\xb5\\x2f\\xfd\\x24\\x00\\x01\\x00\\x00\\x99\\xe9\\xd8\\x51\",\n+    13,\n+  },\n+  {\n+    \"hello\",\n+    \"hello, world\\n\",\n+    0,\n+    (\"\\x28\\xb5\\x2f\\xfd\\x24\\x0d\\x69\\x00\\x00\\x68\\x65\\x6c\\x6c\\x6f\\x2c\\x20\"\n+     \"\\x77\\x6f\\x72\\x6c\\x64\\x0a\\x4c\\x1f\\xf9\\xf1\"),\n+    26,\n+  },\n+  {\n+    \"goodbye\",\n+    \"goodbye, world\",\n+    0,\n+    (\"\\x28\\xb5\\x2f\\xfd\\x24\\x0e\\x71\\x00\\x00\\x67\\x6f\\x6f\\x64\\x62\\x79\\x65\"\n+     \"\\x2c\\x20\\x77\\x6f\\x72\\x6c\\x64\\x61\\x7b\\x4b\\x83\"),\n+    27,\n+  },\n+  {\n+    \"ranges\",\n+    (\"\\xcc\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\xd5\\x13\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x1c\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9d\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\xd5\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xfb\\x12\\x00\\x00\\x00\\x00\\x00\\x00\\x09\\x13\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x0c\\x13\\x00\\x00\\x00\\x00\\x00\\x00\\xcb\\x13\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x29\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x4e\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9d\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\xd5\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xfb\\x12\\x00\\x00\\x00\\x00\\x00\\x00\\x09\\x13\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x67\\x13\\x00\\x00\\x00\\x00\\x00\\x00\\xcb\\x13\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9d\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\xd5\\x14\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x5f\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x6c\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x7d\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x7e\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x38\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x5c\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x83\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\xfa\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xfd\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\xef\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x14\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x38\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9f\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xac\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xdb\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xfd\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\xd8\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9f\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xac\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xdb\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xfa\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\xea\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xef\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x5c\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x9f\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xac\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\xdb\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\xff\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x2c\\x10\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x60\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x16\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x40\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x2c\\x10\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x7a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xb6\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9f\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\xa7\\x01\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x7a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa9\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x9f\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\xa7\\x01\\x00\\x00\\x00\\x00\\x00\\x00\"\n+     \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"),\n+    672,\n+    (\"\\x28\\xb5\\x2f\\xfd\\x64\\xa0\\x01\\x2d\\x05\\x00\\xc4\\x04\\xcc\\x11\\x00\\xd5\"\n+     \"\\x13\\x00\\x1c\\x14\\x00\\x72\\x9d\\xd5\\xfb\\x12\\x00\\x09\\x0c\\x13\\xcb\\x13\"\n+     \"\\x29\\x4e\\x67\\x5f\\x0b\\x6c\\x0b\\x7d\\x0b\\x7e\\x0c\\x38\\x0f\\x5c\\x0f\\x83\"\n+     \"\\x0c\\xfa\\x0c\\xfd\\x0d\\xef\\x0e\\x14\\x38\\x9f\\x0f\\xac\\x0f\\xdb\\x0f\\xff\"\n+     \"\\x0f\\xd8\\x9f\\xac\\xdb\\xff\\xea\\x5c\\x2c\\x10\\x60\\xd1\\x16\\x40\\x0b\\x7a\"\n+     \"\\x00\\xb6\\x00\\x9f\\x01\\xa7\\x01\\xa9\\x36\\x20\\xa0\\x83\\x14\\x34\\x63\\x4a\"\n+     \"\\x21\\x70\\x8c\\x07\\x46\\x03\\x4e\\x10\\x62\\x3c\\x06\\x4e\\xc8\\x8c\\xb0\\x32\"\n+     \"\\x2a\\x59\\xad\\xb2\\xf1\\x02\\x82\\x7c\\x33\\xcb\\x92\\x6f\\x32\\x4f\\x9b\\xb0\"\n+     \"\\xa2\\x30\\xf0\\xc0\\x06\\x1e\\x98\\x99\\x2c\\x06\\x1e\\xd8\\xc0\\x03\\x56\\xd8\"\n+     \"\\xc0\\x03\\x0f\\x6c\\xe0\\x01\\xf1\\xf0\\xee\\x9a\\xc6\\xc8\\x97\\x99\\xd1\\x6c\"\n+     \"\\xb4\\x21\\x45\\x3b\\x10\\xe4\\x7b\\x99\\x4d\\x8a\\x36\\x64\\x5c\\x77\\x08\\x02\"\n+     \"\\xcb\\xe0\\xce\"),\n+    179,\n+  }\n+};\n+\n+/* Test the hand coded samples.  */\n+\n+static void\n+test_samples (struct backtrace_state *state)\n+{\n+  size_t i;\n+\n+  for (i = 0; i < sizeof tests / sizeof tests[0]; ++i)\n+    {\n+      unsigned char *uncompressed;\n+      size_t uncompressed_len;\n+\n+      uncompressed = (unsigned char *) malloc (tests[i].uncompressed_len);\n+      if (uncompressed == NULL)\n+\t{\n+\t  perror (\"malloc\");\n+\t  fprintf (stderr, \"test %s: uncompress failed\\n\", tests[i].name);\n+\t  ++failures;\n+\t  continue;\n+\t}\n+\n+      uncompressed_len = tests[i].uncompressed_len;\n+      if (uncompressed_len == 0)\n+\tuncompressed_len = strlen (tests[i].uncompressed);\n+\n+      if (!backtrace_uncompress_zstd (state,\n+\t\t\t\t      ((const unsigned char *)\n+\t\t\t\t       tests[i].compressed),\n+\t\t\t\t      tests[i].compressed_len,\n+\t\t\t\t      error_callback_compress, NULL,\n+\t\t\t\t      uncompressed, uncompressed_len))\n+\t{\n+\t  fprintf (stderr, \"test %s: uncompress failed\\n\", tests[i].name);\n+\t  ++failures;\n+\t}\n+      else\n+\t{\n+\t  if (memcmp (tests[i].uncompressed, uncompressed, uncompressed_len)\n+\t      != 0)\n+\t    {\n+\t      size_t j;\n+\n+\t      fprintf (stderr, \"test %s: uncompressed data mismatch\\n\",\n+\t\t       tests[i].name);\n+\t      for (j = 0; j < uncompressed_len; ++j)\n+\t\tif (tests[i].uncompressed[j] != uncompressed[j])\n+\t\t  fprintf (stderr, \"  %zu: got %#x want %#x\\n\", j,\n+\t\t\t   uncompressed[j], tests[i].uncompressed[j]);\n+\t      ++failures;\n+\t    }\n+\t  else\n+\t    printf (\"PASS: uncompress %s\\n\", tests[i].name);\n+\t}\n+\n+      free (uncompressed);\n+    }\n+}\n+\n+#ifdef HAVE_ZSTD\n+\n+/* Given a set of TRIALS timings, discard the lowest and highest\n+   values and return the mean average of the rest.  */\n+\n+static size_t\n+average_time (const size_t *times, size_t trials)\n+{\n+  size_t imax;\n+  size_t max;\n+  size_t imin;\n+  size_t min;\n+  size_t i;\n+  size_t sum;\n+\n+  imin = 0;\n+  imax = 0;\n+  min = times[0];\n+  max = times[0];\n+  for (i = 1; i < trials; ++i)\n+    {\n+      if (times[i] < min)\n+\t{\n+\t  imin = i;\n+\t  min = times[i];\n+\t}\n+      if (times[i] > max)\n+\t{\n+\t  imax = i;\n+\t  max = times[i];\n+\t}\n+    }\n+\n+  sum = 0;\n+  for (i = 0; i < trials; ++i)\n+    {\n+      if (i != imax && i != imin)\n+\tsum += times[i];\n+    }\n+  return sum / (trials - 2);\n+}\n+\n+#endif\n+\n+/* Test a larger text, if available.  */\n+\n+static void\n+test_large (struct backtrace_state *state ATTRIBUTE_UNUSED)\n+{\n+#ifdef HAVE_ZSTD\n+  unsigned char *orig_buf;\n+  size_t orig_bufsize;\n+  size_t i;\n+  char *compressed_buf;\n+  size_t compressed_bufsize;\n+  size_t compressed_size;\n+  unsigned char *uncompressed_buf;\n+  size_t r;\n+  clockid_t cid;\n+  struct timespec ts1;\n+  struct timespec ts2;\n+  size_t ctime;\n+  size_t ztime;\n+  const size_t trials = 16;\n+  size_t ctimes[16];\n+  size_t ztimes[16];\n+  static const char * const names[] = {\n+    \"Isaac.Newton-Opticks.txt\",\n+    \"../libgo/go/testdata/Isaac.Newton-Opticks.txt\",\n+  };\n+\n+  orig_buf = NULL;\n+  orig_bufsize = 0;\n+  uncompressed_buf = NULL;\n+  compressed_buf = NULL;\n+\n+  for (i = 0; i < sizeof names / sizeof names[0]; ++i)\n+    {\n+      size_t len;\n+      char *namebuf;\n+      FILE *e;\n+      struct stat st;\n+      char *rbuf;\n+      size_t got;\n+\n+      len = strlen (SRCDIR) + strlen (names[i]) + 2;\n+      namebuf = malloc (len);\n+      if (namebuf == NULL)\n+\t{\n+\t  perror (\"malloc\");\n+\t  goto fail;\n+\t}\n+      snprintf (namebuf, len, \"%s/%s\", SRCDIR, names[i]);\n+      e = fopen (namebuf, \"r\");\n+      free (namebuf);\n+      if (e == NULL)\n+\tcontinue;\n+      if (fstat (fileno (e), &st) < 0)\n+\t{\n+\t  perror (\"fstat\");\n+\t  fclose (e);\n+\t  continue;\n+\t}\n+      rbuf = malloc (st.st_size);\n+      if (rbuf == NULL)\n+\t{\n+\t  perror (\"malloc\");\n+\t  goto fail;\n+\t}\n+      got = fread (rbuf, 1, st.st_size, e);\n+      fclose (e);\n+      if (got > 0)\n+\t{\n+\t  orig_buf = (unsigned char *) rbuf;\n+\t  orig_bufsize = got;\n+\t  break;\n+\t}\n+      free (rbuf);\n+    }\n+\n+  if (orig_buf == NULL)\n+    {\n+      /* We couldn't find an input file.  */\n+      printf (\"UNSUPPORTED: zstd large\\n\");\n+      return;\n+    }\n+\n+  compressed_bufsize = ZSTD_compressBound (orig_bufsize);\n+  compressed_buf = malloc (compressed_bufsize);\n+  if (compressed_buf == NULL)\n+    {\n+      perror (\"malloc\");\n+      goto fail;\n+    }\n+\n+  r = ZSTD_compress (compressed_buf, compressed_bufsize,\n+\t\t     orig_buf, orig_bufsize,\n+\t\t     ZSTD_CLEVEL_DEFAULT);\n+  if (ZSTD_isError (r))\n+    {\n+      fprintf (stderr, \"zstd compress failed: %s\\n\", ZSTD_getErrorName (r));\n+      goto fail;\n+    }\n+  compressed_size = r;\n+\n+  uncompressed_buf = malloc (orig_bufsize);\n+  if (uncompressed_buf == NULL)\n+    {\n+      perror (\"malloc\");\n+      goto fail;\n+    }\n+\n+  if (!backtrace_uncompress_zstd (state, (unsigned char *) compressed_buf,\n+\t\t\t\t  compressed_size,\n+\t\t\t\t  error_callback_compress, NULL,\n+\t\t\t\t  uncompressed_buf, orig_bufsize))\n+    {\n+      fprintf (stderr, \"zstd large: backtrace_uncompress_zstd failed\\n\");\n+      goto fail;\n+    }\n+\n+  if (memcmp (uncompressed_buf, orig_buf, orig_bufsize) != 0)\n+    {\n+      size_t j;\n+\n+      fprintf (stderr, \"zstd large: uncompressed data mismatch\\n\");\n+      for (j = 0; j < orig_bufsize; ++j)\n+\tif (orig_buf[j] != uncompressed_buf[j])\n+\t  fprintf (stderr, \"  %zu: got %#x want %#x\\n\", j,\n+\t\t   uncompressed_buf[j], orig_buf[j]);\n+      goto fail;\n+    }\n+\n+  printf (\"PASS: zstd large\\n\");\n+\n+  for (i = 0; i < trials; ++i)\n+    {\n+      cid = ZSTD_CLOCK_GETTIME_ARG;\n+      if (clock_gettime (cid, &ts1) < 0)\n+\t{\n+\t  if (errno == EINVAL)\n+\t    return;\n+\t  perror (\"clock_gettime\");\n+\t  return;\n+\t}\n+\n+      if (!backtrace_uncompress_zstd (state,\n+\t\t\t\t      (unsigned char *) compressed_buf,\n+\t\t\t\t      compressed_size,\n+\t\t\t\t      error_callback_compress, NULL,\n+\t\t\t\t      uncompressed_buf,\n+\t\t\t\t      orig_bufsize))\n+\t{\n+\t  fprintf (stderr,\n+\t\t   (\"zstd large: \"\n+\t\t    \"benchmark backtrace_uncompress_zstd failed\\n\"));\n+\t  return;\n+\t}\n+\n+      if (clock_gettime (cid, &ts2) < 0)\n+\t{\n+\t  perror (\"clock_gettime\");\n+\t  return;\n+\t}\n+\n+      ctime = (ts2.tv_sec - ts1.tv_sec) * 1000000000;\n+      ctime += ts2.tv_nsec - ts1.tv_nsec;\n+      ctimes[i] = ctime;\n+\n+      if (clock_gettime (cid, &ts1) < 0)\n+\t{\n+\t  perror(\"clock_gettime\");\n+\t  return;\n+\t}\n+\n+      r = ZSTD_decompress (uncompressed_buf, orig_bufsize,\n+\t\t\t   compressed_buf, compressed_size);\n+\n+      if (clock_gettime (cid, &ts2) < 0)\n+\t{\n+\t  perror (\"clock_gettime\");\n+\t  return;\n+\t}\n+\n+      if (ZSTD_isError (r))\n+\t{\n+\t  fprintf (stderr,\n+\t\t   \"zstd large: benchmark zlib uncompress failed: %s\\n\",\n+\t\t   ZSTD_getErrorName (r));\n+\t  return;\n+\t}\n+\n+      ztime = (ts2.tv_sec - ts1.tv_sec) * 1000000000;\n+      ztime += ts2.tv_nsec - ts1.tv_nsec;\n+      ztimes[i] = ztime;\n+    }\n+\n+  /* Toss the highest and lowest times and average the rest.  */\n+  ctime = average_time (ctimes, trials);\n+  ztime = average_time (ztimes, trials);\n+\n+  printf (\"backtrace: %zu ns\\n\", ctime);\n+  printf (\"zstd     : %zu ns\\n\", ztime);\n+  printf (\"ratio    : %g\\n\", (double) ztime / (double) ctime);\n+\n+  return;\n+\n+ fail:\n+  printf (\"FAIL: zstd large\\n\");\n+  ++failures;\n+\n+  if (orig_buf != NULL)\n+    free (orig_buf);\n+  if (compressed_buf != NULL)\n+    free (compressed_buf);\n+  if (uncompressed_buf != NULL)\n+    free (uncompressed_buf);\n+\n+#else /* !HAVE_ZSTD */\n+\n+ printf (\"UNSUPPORTED: zstd large\\n\");\n+\n+#endif /* !HAVE_ZSTD */\n+}\n+\n+int\n+main (int argc ATTRIBUTE_UNUSED, char **argv)\n+{\n+  struct backtrace_state *state;\n+\n+  state = backtrace_create_state (argv[0], BACKTRACE_SUPPORTS_THREADS,\n+\t\t\t\t  error_callback_create, NULL);\n+\n+  test_samples (state);\n+  test_large (state);\n+\n+  exit (failures != 0 ? EXIT_FAILURE : EXIT_SUCCESS);\n+}"}]}