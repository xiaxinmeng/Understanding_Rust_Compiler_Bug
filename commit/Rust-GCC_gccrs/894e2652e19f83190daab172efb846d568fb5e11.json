{"sha": "894e2652e19f83190daab172efb846d568fb5e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0ZTI2NTJlMTlmODMxOTBkYWFiMTcyZWZiODQ2ZDU2OGZiNWUxMQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-03-01T09:56:41Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-03-01T09:56:41Z"}, "message": "toplev.h (inform_n, error_n): Declare.\n\ngcc/\n2010-03-01  Marco Poletti  <poletti.marco@gmail.com> \n\n        * toplev.h (inform_n, error_n): Declare.\n        * diagnostic.c (inform_n, error_n): New function.\n\ngcc/cp/\n2010-03-01  Marco Poletti  <poletti.marco@gmail.com>\n\n        * pt.c (redeclare_class_template): Use error_n and inform_n.\n\ngcc/po\n2010-03-01  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        * exgettext: Handle the functions that end with _n.\n\nFrom-SVN: r157134", "tree": {"sha": "3c8a51e597c7b2b45c9e3da4413201d7c7bea223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8a51e597c7b2b45c9e3da4413201d7c7bea223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894e2652e19f83190daab172efb846d568fb5e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e2652e19f83190daab172efb846d568fb5e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894e2652e19f83190daab172efb846d568fb5e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e2652e19f83190daab172efb846d568fb5e11/comments", "author": null, "committer": null, "parents": [{"sha": "fef06326e1d9b67939f0fdff8b36e2c1dd9eaa2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef06326e1d9b67939f0fdff8b36e2c1dd9eaa2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef06326e1d9b67939f0fdff8b36e2c1dd9eaa2d"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "1e6ab7f51a1ff99db84f7ee26c24ef0a6daa96ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -1,3 +1,8 @@\n+2010-03-01  Marco Poletti  <poletti.marco@gmail.com> \n+\n+\t* toplev.h (inform_n, error_n): Declare.\n+\t* diagnostic.c (inform_n, error_n): New function.\n+\n 2010-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cfgexpand.c (expand_used_vars): If an artificial non-ignored var"}, {"sha": "556c4ac39fc9a2224cf6039d6522c1a12f913b4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -1,3 +1,7 @@\n+2010-03-01  Marco Poletti  <poletti.marco@gmail.com>\n+\n+\t* pt.c (redeclare_class_template): Use error_n and inform_n.\n+\n 2010-02-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/42748"}, {"sha": "f5d3851cab91e26327803fb6552d369e6245d6ff", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -4661,10 +4661,14 @@ redeclare_class_template (tree type, tree parms)\n \n   if (TREE_VEC_LENGTH (parms) != TREE_VEC_LENGTH (tmpl_parms))\n     {\n-      error (\"redeclared with %d template parameter(s)\", \n-             TREE_VEC_LENGTH (parms));\n-      inform (input_location, \"previous declaration %q+D used %d template parameter(s)\", \n-             tmpl, TREE_VEC_LENGTH (tmpl_parms));\n+      error_n (input_location, TREE_VEC_LENGTH (parms),\n+               \"redeclared with %d template parameter\",\n+               \"redeclared with %d template parameters\",\n+               TREE_VEC_LENGTH (parms));\n+      inform_n (input_location, TREE_VEC_LENGTH (tmpl_parms),\n+                \"previous declaration %q+D used %d template parameter\",\n+                \"previous declaration %q+D used %d template parameters\",\n+                tmpl, TREE_VEC_LENGTH (tmpl_parms));\n       return false;\n     }\n "}, {"sha": "2bdeb88185817cda423be5acd4fc89c21d5bcf7d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -520,6 +520,23 @@ inform (location_t location, const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* An informative note at LOCATION.  Use this for additional details on an\n+   error message.  */\n+void\n+inform_n (location_t location, int n, const char *singular_gmsgid,\n+          const char *plural_gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, plural_gmsgid);\n+  diagnostic_set_info_translated (&diagnostic,\n+                                  ngettext (singular_gmsgid, plural_gmsgid, n),\n+                                  &ap, location, DK_NOTE);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n /* A warning at INPUT_LOCATION.  Use this for code which is correct according\n    to the relevant language specification but is likely to be buggy anyway.\n    Returns true if the warning was printed, false if it was inhibited.  */\n@@ -615,6 +632,23 @@ error (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n+/* A hard error: the code is definitely ill-formed, and an object file\n+   will not be produced.  */\n+void\n+error_n (location_t location, int n, const char *singular_gmsgid,\n+         const char *plural_gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, plural_gmsgid);\n+  diagnostic_set_info_translated (&diagnostic,\n+                                  ngettext (singular_gmsgid, plural_gmsgid, n),\n+                                  &ap, location, DK_ERROR);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n /* Same as ebove, but use location LOC instead of input_location.  */\n void\n error_at (location_t loc, const char *gmsgid, ...)"}, {"sha": "8a22b0c67a3792cb8cfda6ebc82c23092f7138ea", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -1,3 +1,7 @@\n+2010-03-01  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* exgettext: Handle the functions that end with _n.\n+\n 2010-02-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* zh_CN.po: Update."}, {"sha": "a85f705f820dc5dc27743e4ca94471a6e8705d74", "filename": "gcc/po/exgettext", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fpo%2Fexgettext", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Fpo%2Fexgettext", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fexgettext?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -113,9 +113,15 @@ function keyword_option(line) {\n     \tformat=\"c-format\"\n \n     if (n == 1) { keyword = \"--keyword=\" name }\n-    else { keyword = \"--keyword=\" name \":\" n }\n+    else {\n+       keyword = \"--keyword=\" name \":\" n\n+       if (name ~ /_n$/)\n+         keyword = keyword \",\" (n + 1)\n+    }\n     if (format) {\n         keyword=keyword \"\\n--flag=\" name \":\" n \":\" format\n+        if (name ~ /_n$/)\n+          keyword = keyword \"\\n--flag=\" name \":\" (n + 1) \":\" format\n     }\n \n     if (! keyword_seen[name]) {"}, {"sha": "2b2a2918c26d9185573250ceb120bc9ac933d760", "filename": "gcc/toplev.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e2652e19f83190daab172efb846d568fb5e11/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=894e2652e19f83190daab172efb846d568fb5e11", "patch": "@@ -63,6 +63,8 @@ extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void error_n (location_t, int, const char *, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n@@ -72,6 +74,8 @@ extern bool pedwarn (location_t, int, const char *, ...)\n extern bool permerror (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void inform_n (location_t, int, const char *, const char *, ...)\n+    ATTRIBUTE_GCC_DIAG(3,5) ATTRIBUTE_GCC_DIAG(4,5);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n \n extern void rest_of_decl_compilation (tree, int, int);"}]}