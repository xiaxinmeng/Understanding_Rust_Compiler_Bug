{"sha": "bbeb5bebd66e300ae907d133740580a7b4f33c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlYjViZWJkNjZlMzAwYWU5MDdkMTMzNzQwNTgwYTdiNGYzM2M1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-26T19:42:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-26T19:42:30Z"}, "message": "i386.md (round<mode>2): New expander.\n\n\t* config/i386/i386.md (round<mode>2): New expander.\n\t* config/i386/i386.c (enum ix86_builtins): Add\n\tIX86_BUILTIN_ROUND{PS,PD}_AZ{,256}.\n\t(struct builtin_description): Add __builtin_ia32_round{ps,pd}_az{,256}\n\tdescriptions.\n\t(ix86_builtin_vectorized_function): Handle BUILT_IN_ROUND{,F} builtins.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse_4_1-round-vec.c: New test.\n\t* gcc.target/i386/sse_4_1-roundf-vec.c: New test.\n\t* gcc.target/i386/avx-round-vec.c: New test.\n\t* gcc.target/i386/avx-roundf-vec.c: New test.\n\nFrom-SVN: r178123", "tree": {"sha": "6ba15c2675c44333e41b6c6c577891ecd9576e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba15c2675c44333e41b6c6c577891ecd9576e46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbeb5bebd66e300ae907d133740580a7b4f33c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeb5bebd66e300ae907d133740580a7b4f33c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbeb5bebd66e300ae907d133740580a7b4f33c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeb5bebd66e300ae907d133740580a7b4f33c5b/comments", "author": null, "committer": null, "parents": [{"sha": "44782c0cba5373316f040b9c9074ded0c3e889f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44782c0cba5373316f040b9c9074ded0c3e889f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44782c0cba5373316f040b9c9074ded0c3e889f2"}], "stats": {"total": 305, "additions": 301, "deletions": 4}, "files": [{"sha": "698bc7692ec159d5fc9a6ae3eba5d224ee308e8e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -23661,10 +23661,12 @@ enum ix86_builtins\n   IX86_BUILTIN_CEILPD,\n   IX86_BUILTIN_TRUNCPD,\n   IX86_BUILTIN_RINTPD,\n+  IX86_BUILTIN_ROUNDPD_AZ,\n   IX86_BUILTIN_FLOORPS,\n   IX86_BUILTIN_CEILPS,\n   IX86_BUILTIN_TRUNCPS,\n   IX86_BUILTIN_RINTPS,\n+  IX86_BUILTIN_ROUNDPS_AZ,\n \n   IX86_BUILTIN_PTESTZ,\n   IX86_BUILTIN_PTESTC,\n@@ -23837,10 +23839,12 @@ enum ix86_builtins\n   IX86_BUILTIN_CEILPD256,\n   IX86_BUILTIN_TRUNCPD256,\n   IX86_BUILTIN_RINTPD256,\n+  IX86_BUILTIN_ROUNDPD_AZ256,\n   IX86_BUILTIN_FLOORPS256,\n   IX86_BUILTIN_CEILPS256,\n   IX86_BUILTIN_TRUNCPS256,\n   IX86_BUILTIN_RINTPS256,\n+  IX86_BUILTIN_ROUNDPS_AZ256,\n \n   IX86_BUILTIN_UNPCKHPD256,\n   IX86_BUILTIN_UNPCKLPD256,\n@@ -25063,11 +25067,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_truncpd\", IX86_BUILTIN_TRUNCPD, (enum rtx_code) ROUND_TRUNC, (int) V2DF_FTYPE_V2DF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_rintpd\", IX86_BUILTIN_RINTPD, (enum rtx_code) ROUND_MXCSR, (int) V2DF_FTYPE_V2DF_ROUND },\n \n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv2df2, \"__builtin_ia32_roundpd_az\", IX86_BUILTIN_ROUNDPD_AZ, UNKNOWN, (int) V2DF_FTYPE_V2DF },\n+\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_rintps\", IX86_BUILTIN_RINTPS, (enum rtx_code) ROUND_MXCSR, (int) V4SF_FTYPE_V4SF_ROUND },\n \n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2, \"__builtin_ia32_roundps_az\", IX86_BUILTIN_ROUNDPS_AZ, UNKNOWN, (int) V4SF_FTYPE_V4SF },\n+\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n@@ -25185,11 +25193,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_truncpd256\", IX86_BUILTIN_TRUNCPD256, (enum rtx_code) ROUND_TRUNC, (int) V4DF_FTYPE_V4DF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_rintpd256\", IX86_BUILTIN_RINTPD256, (enum rtx_code) ROUND_MXCSR, (int) V4DF_FTYPE_V4DF_ROUND },\n \n+  { OPTION_MASK_ISA_AVX, CODE_FOR_roundv4df2, \"__builtin_ia32_roundpd_az256\", IX86_BUILTIN_ROUNDPD_AZ256, UNKNOWN, (int) V4DF_FTYPE_V4DF },\n+\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_floorps256\", IX86_BUILTIN_FLOORPS256, (enum rtx_code) ROUND_FLOOR, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_ceilps256\", IX86_BUILTIN_CEILPS256, (enum rtx_code) ROUND_CEIL, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_truncps256\", IX86_BUILTIN_TRUNCPS256, (enum rtx_code) ROUND_TRUNC, (int) V8SF_FTYPE_V8SF_ROUND },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_rintps256\", IX86_BUILTIN_RINTPS256, (enum rtx_code) ROUND_MXCSR, (int) V8SF_FTYPE_V8SF_ROUND },\n \n+  { OPTION_MASK_ISA_AVX, CODE_FOR_roundv8sf2, \"__builtin_ia32_roundps_az256\", IX86_BUILTIN_ROUNDPS_AZ256, UNKNOWN, (int) V8SF_FTYPE_V8SF },\n+\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpckhpd256,  \"__builtin_ia32_unpckhpd256\", IX86_BUILTIN_UNPCKHPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpcklpd256,  \"__builtin_ia32_unpcklpd256\", IX86_BUILTIN_UNPCKLPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpckhps256,  \"__builtin_ia32_unpckhps256\", IX86_BUILTIN_UNPCKHPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n@@ -28146,6 +28158,34 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n+    case BUILT_IN_ROUND:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == DFmode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 2 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPD_AZ];\n+\t  else if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPD_AZ256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_ROUNDF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math || !TARGET_ROUND)\n+\tbreak;\n+\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPS_AZ];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_ROUNDPS_AZ256];\n+\t}\n+      break;\n+\n     case BUILT_IN_FMA:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{"}, {"sha": "e1c70eb21e038ed59ec282bfde2bdbb0d649368b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -9646,6 +9646,40 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"round<mode>2\"\n+  [(set (match_dup 4)\n+\t(plus:VF\n+\t  (match_operand:VF 1 \"nonimmediate_operand\" \"\")\n+\t  (match_dup 3)))\n+   (set (match_operand:VF 0 \"register_operand\" \"\")\n+\t(unspec:VF\n+\t  [(match_dup 4) (match_dup 5)]\n+\t  UNSPEC_ROUND))]\n+  \"TARGET_ROUND && !flag_trapping_math\"\n+{\n+  enum machine_mode scalar_mode;\n+  const struct real_format *fmt;\n+  REAL_VALUE_TYPE pred_half, half_minus_pred_half;\n+  rtx half, vec_half;\n+\n+  scalar_mode = GET_MODE_INNER (<MODE>mode);\n+\n+  /* load nextafter (0.5, 0.0) */\n+  fmt = REAL_MODE_FORMAT (scalar_mode);\n+  real_2expN (&half_minus_pred_half, -(fmt->p) - 1, scalar_mode);\n+  REAL_ARITHMETIC (pred_half, MINUS_EXPR, dconsthalf, half_minus_pred_half);\n+  half = const_double_from_real_value (pred_half, scalar_mode);\n+\n+  vec_half = ix86_build_const_vector (<MODE>mode, true, half);\n+  vec_half = force_reg (<MODE>mode, vec_half);\n+\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_copysign<mode>3 (operands[3], vec_half, operands[1]));\n+\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+  operands[5] = GEN_INT (ROUND_TRUNC);\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Intel SSE4.2 string/text processing instructions"}, {"sha": "8974d2eb5f2092f6a53a53ef4be19b2dba7411ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -1,3 +1,10 @@\n+2011-08-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse_4_1-round-vec.c: New test.\n+\t* gcc.target/i386/sse_4_1-roundf-vec.c: New test.\n+\t* gcc.target/i386/avx-round-vec.c: New test.\n+\t* gcc.target/i386/avx-roundf-vec.c: New test.\n+\n 2011-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/cmpxchg16b-1.c: Match also space after the\n@@ -12,10 +19,10 @@\n \n 2011-08-26  Jiangning Liu  <jiangning.liu@arm.com>\n \n-       * gcc.target/arm/thumb2-cond-cmp-1.c: New.\n-       * gcc.target/arm/thumb2-cond-cmp-2.c: Likewise.\n-       * gcc.target/arm/thumb2-cond-cmp-3.c: Likewise.\n-       * gcc.target/arm/thumb2-cond-cmp-4.c: Likewise.\n+\t* gcc.target/arm/thumb2-cond-cmp-1.c: New.\n+\t* gcc.target/arm/thumb2-cond-cmp-2.c: Likewise.\n+\t* gcc.target/arm/thumb2-cond-cmp-3.c: Likewise.\n+\t* gcc.target/arm/thumb2-cond-cmp-4.c: Likewise.\n \n 2011-08-26  Andrew Stubbs  <ams@codesourcery.com>\n "}, {"sha": "d9514c17ddba3d127159a61a9dab01a5f601f465", "filename": "gcc/testsuite/gcc.target/i386/avx-round-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-vec.c?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern double floor (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = round (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != round (a[i]))\n+      abort();\n+}"}, {"sha": "ec4c16691c2d64944d378efb1ca1549ba4d64936", "filename": "gcc/testsuite/gcc.target/i386/avx-roundf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-roundf-vec.c?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern float roundf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = roundf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != roundf (a[i]))\n+      abort();\n+}"}, {"sha": "dcd36cd2b117c47e82b1667fe3d4937391e1083b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-round-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-round-vec.c?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern double round (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = round (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != round (a[i]))\n+      abort();\n+}"}, {"sha": "d64660a1a91e3e21170741d38ce5d844e4f5f890", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-roundf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb5bebd66e300ae907d133740580a7b4f33c5b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-roundf-vec.c?ref=bbeb5bebd66e300ae907d133740580a7b4f33c5b", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern float roundf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = roundf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != roundf (a[i]))\n+      abort();\n+}"}]}