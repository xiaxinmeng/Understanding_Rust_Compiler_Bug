{"sha": "82b77dee751c916bcef55e527bffdd82b68fc897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiNzdkZWU3NTFjOTE2YmNlZjU1ZTUyN2JmZmRkODJiNjhmYzg5Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-24T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-24T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "1e21df798176f295228846bd2a068ce4256f20e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e21df798176f295228846bd2a068ce4256f20e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82b77dee751c916bcef55e527bffdd82b68fc897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b77dee751c916bcef55e527bffdd82b68fc897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b77dee751c916bcef55e527bffdd82b68fc897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b77dee751c916bcef55e527bffdd82b68fc897/comments", "author": null, "committer": null, "parents": [{"sha": "27cdb4de83660c20c08663e2b6c47436eeed34a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27cdb4de83660c20c08663e2b6c47436eeed34a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27cdb4de83660c20c08663e2b6c47436eeed34a7"}], "stats": {"total": 342, "additions": 341, "deletions": 1}, "files": [{"sha": "9ed37858069f941fd970ea09ffa3a7c9f231092d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,186 @@\n+2020-09-24  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* doc/extend.texi: Add 'd' for doubleword variant of\n+\tvector insert instruction.\n+\n+2020-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-array-bounds.cc (build_zero_elt_array_type): New function.\n+\t(array_bounds_checker::check_mem_ref): Call it.\n+\n+2020-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97175\n+\t* builtins.c (maybe_warn_for_bound): Handle both DECLs and EXPRESSIONs\n+\tin pad->dst.ref, same is pad->src.ref.\n+\n+2020-09-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.c (refs_local_or_readonly_memory_p): New function.\n+\t(points_to_local_or_readonly_memory_p): New function.\n+\t* ipa-fnsummary.h (refs_local_or_readonly_memory_p): Declare.\n+\t(points_to_local_or_readonly_memory_p): Declare.\n+\t* ipa-modref.c (record_access_p): Use refs_local_or_readonly_memory_p.\n+\t* ipa-pure-const.c (check_op): Likewise.\n+\n+2020-09-23  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md: Don't allow operand containing sum of\n+\tfunction ref and const.\n+\n+2020-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_salt_type): New enum.\n+\t(aarch64_stack_protect_canary_mem): Declare.\n+\t* config/aarch64/aarch64.md (UNSPEC_SALT_ADDR): New unspec.\n+\t(stack_protect_set): Forward to stack_protect_combined_set.\n+\t(stack_protect_combined_set): New pattern.  Use\n+\taarch64_stack_protect_canary_mem.\n+\t(reg_stack_protect_address_<mode>): Add a salt operand.\n+\t(stack_protect_test): Forward to stack_protect_combined_test.\n+\t(stack_protect_combined_test): New pattern.  Use\n+\taarch64_stack_protect_canary_mem.\n+\t* config/aarch64/aarch64.c (strip_salt): New function.\n+\t(strip_offset_and_salt): Likewise.\n+\t(tls_symbolic_operand_type): Use strip_offset_and_salt.\n+\t(aarch64_stack_protect_canary_mem): New function.\n+\t(aarch64_cannot_force_const_mem): Use strip_offset_and_salt.\n+\t(aarch64_classify_address): Likewise.\n+\t(aarch64_symbolic_address_p): Likewise.\n+\t(aarch64_print_operand): Likewise.\n+\t(aarch64_output_addr_const_extra): New function.\n+\t(aarch64_tls_symbol_p): Use strip_salt.\n+\t(aarch64_classify_symbol): Likewise.\n+\t(aarch64_legitimate_pic_operand_p): Use strip_offset_and_salt.\n+\t(aarch64_legitimate_constant_p): Likewise.\n+\t(aarch64_mov_operand_p): Use strip_salt.\n+\t(TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA): Override.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vreinterpretq_f64_p128,\n+\tvreinterpretq_p128_f64): Define.\n+\n+2020-09-23  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/arm/arm-cpus.in (neoverse-v1): New.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Regenerate.\n+\t* doc/invoke.texi: Document support for Neoverse V1.\n+\n+2020-09-23  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Add Neoverse V1.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/invoke.texi: Document support for Neoverse V1.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96453\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Remove\n+\tLT_EXPR -> NE_EXPR verification and also apply it for\n+\tnon-constant masks.\n+\n+2020-09-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (modref_summary::lto_useful_p): New member function.\n+\t(modref_summary::useful_p): New member function.\n+\t(analyze_function): Drop useless summaries.\n+\t(modref_write): Skip useless summaries.\n+\t(pass_ipa_modref::execute): Drop useless summaries.\n+\t* ipa-modref.h (struct GTY): Declare useful_p and lto_useful_p.\n+\t* tree-ssa-alias.c (dump_alias_stats): Fix.\n+\t(modref_may_conflict): Fix stats.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96466\n+\t* internal-fn.c (expand_vect_cond_mask_optab_fn): Use\n+\tappropriate mode for force_reg.\n+\t* tree.c (build_truth_vector_type_for): Pass VOIDmode to\n+\tmake_vector_type.\n+\n+2020-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (determine_peel_for_niter): Delete in favor of...\n+\t(vect_determine_partial_vectors_and_peeling): ...this new function.\n+\t* tree-vect-loop-manip.c (vect_update_epilogue_niters): New function.\n+\tReject using vector epilogue loops for single iterations.  Install\n+\tthe constant number of epilogue loop iterations in the associated\n+\tloop_vinfo.  Rely on vect_determine_partial_vectors_and_peeling\n+\tto do the main part of the test.\n+\t(vect_do_peeling): Use vect_update_epilogue_niters to handle\n+\tepilogue loops with a known number of iterations.  Skip recomputing\n+\tthe number of iterations later in that case.  Otherwise, use\n+\tvect_determine_partial_vectors_and_peeling to decide whether the\n+\tepilogue loop needs to use partial vectors or peeling.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Set the\n+\tdefault can_use_partial_vectors_p to false if partial-vector-usage=0.\n+\t(determine_peel_for_niter): Remove in favor of...\n+\t(vect_determine_partial_vectors_and_peeling): ...this new function,\n+\tsplit out from...\n+\t(vect_analyze_loop_2): ...here.  Reflect the vect_verify_full_masking\n+\tand vect_verify_loop_lens results in CAN_USE_PARTIAL_VECTORS_P\n+\trather than USING_PARTIAL_VECTORS_P.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/aarch64-simd-builtins.def (frintn): Use BUILTIN_VHSDF_HSDF\n+\tfor modes.  Remove explicit hf instantiation.\n+\t* config/aarch64/arm_neon.h (vrndns_f32): Define.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97173\n+\t* tree-vect-loop.c (vectorizable_live_operation): Extend\n+\tassert to also conver element conversions.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vtrn1q_p64, vtrn2q_p64, vuzp1q_p64,\n+\tvuzp2q_p64, vzip1q_p64, vzip2q_p64): Define.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vldrq_p128): Define.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vstrq_p128): Define.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97151\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call):\n+\tDECL_IS_REPLACEABLE_OPERATOR_DELETE_P has no effect on\n+\targuments.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97162\n+\t* alias.c (compare_base_decls): Use DECL_HARD_REGISTER\n+\tand guard with VAR_P.\n+\n+2020-09-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97069\n+\t* profile.c (branch_prob): Line number must be at least 1.\n+\n+2020-09-23  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97158\n+\t* config/nvptx/nvptx.c (nvptx_output_mov_insn): Handle move from\n+\tDF subreg to DF reg.\n+\n+2020-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in: Add $(ZLIBINC) to CFLAGS-analyzer/engine.o.\n+\n 2020-09-22  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-modref.c (analyze_stmt): Ignore gimple clobber."}, {"sha": "52a894dd6541e05b562019d81bdc38ccb5194e87", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1 +1 @@\n-20200923\n+20200924"}, {"sha": "8bba0718c2b436bc0beebf24e18729b395dca344", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,29 @@\n+2020-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97178\n+\t* engine.cc (impl_run_checkers): Update for change to ext_state\n+\tctor.\n+\t* program-state.cc (selftest::test_sm_state_map): Pass an engine\n+\tinstance to ext_state ctor.\n+\t(selftest::test_program_state_1): Likewise.\n+\t(selftest::test_program_state_2): Likewise.\n+\t(selftest::test_program_state_merging): Likewise.\n+\t(selftest::test_program_state_merging_2): Likewise.\n+\t* program-state.h (extrinsic_state::extrinsic_state): Remove NULL\n+\tdefault value for \"eng\" param.\n+\n+2020-09-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* analyzer-logging.cc: Guard '#pragma ... ignored \"-Wformat-diag\"'\n+\tby '#if __GNUC__ >= 10'\n+\t* analyzer.h: Likewise.\n+\t* call-string.cc: Likewise.\n+\n+2020-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::on_stmt): Replace sequence of dyn_cast\n+\twith switch.\n+\n 2020-09-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analysis-plan.cc: Include \"json.h\"."}, {"sha": "4dd58224f86b6d7321dd8c63542723749ddad885", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,14 @@\n+2020-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97131\n+\t* c-warn.c (warn_parm_ptrarray_mismatch): Handle more invalid input.\n+\n+2020-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/97125\n+\t* c-gimplify.c (c_genericize): Only call do_warn_duplicated_branches_r\n+\tafter loops and other structured control constructs have been lowered.\n+\n 2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c.opt (Wbuiltin-declaration-mismatch): Fix typo in variable name:"}, {"sha": "e583c647cd3d4c072bea6c29c8fedf3399c68f5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,15 @@\n+2020-09-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.h (typedef cxx_binding): Delete tdef.\n+\t(typedef cp_binding_level): Likewise.\n+\t(struct cxx_binding): Flags are bools.\n+\n+2020-09-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97171\n+\t* pt.c (tsubst_copy) [FUNCTION_DECL,VAR_DECL]: Retrieve local\n+\tspecialization for DECL_LOCAL_P decls.\n+\n 2020-09-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95310"}, {"sha": "e40c4749df63063e1db94e934fb9fe35109c32f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,105 @@\n+2020-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97175\n+\t* gcc.dg/Wstringop-overflow-44.c: New test.\n+\n+2020-09-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/local-pure-const.c: Update template.\n+\n+2020-09-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97131\n+\t* gcc.dg/Warray-parameter-6.c: New test.\n+\n+2020-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/stack-protector-5.c: New test.\n+\t* gcc.target/aarch64/stack-protector-6.c: Likewise.\n+\t* gcc.target/aarch64/stack-protector-7.c: Likewise.\n+\n+2020-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/stack-protector-3.c: New test.\n+\t* gcc.target/aarch64/stack-protector-4.c: Likewise.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(clean_results): Add float64x2_t cleanup.\n+\t(DECL_VARIABLE_128BITS_VARIANTS): Add float64x2_t variable.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Add\n+\ttesting of vreinterpretq_f64_p128, vreinterpretq_p128_f64.\n+\n+2020-09-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97171\n+\t* g++.dg/template/local10.C: New.\n+\n+2020-09-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/97125\n+\t* c-c++-common/Wduplicated-branches-15.c: New test.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96453\n+\t* gcc.dg/pr96453.c: New testcase.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96466\n+\t* gcc.dg/pr96466.c: New testcase.\n+\n+2020-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/powerpc/p9-vec-length-epil-1.c: Do not expect the\n+\tsingle-iteration epilogues of the 64-bit loops to be vectorized.\n+\t* gcc.target/powerpc/p9-vec-length-epil-7.c: Likewise.\n+\t* gcc.target/powerpc/p9-vec-length-epil-8.c: Likewise.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vrndns_f32_1.c: New test.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97173\n+\t* gcc.dg/vect/pr97173.c: New testcase.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/trn_zip_p64_1.c: New test.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vldrq_p128_1.c: New test.\n+\n+2020-09-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vstrq_p128_1.c: New test.\n+\n+2020-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97151\n+\t* g++.dg/cpp1y/new1.C: Adjust for two more handled transforms.\n+\n+2020-09-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/97069\n+\t* g++.dg/gcov/pr97069.C: New test.\n+\n+2020-09-23  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/Warray-bounds-63.c: Add require-effective-target alloca.\n+\t* gcc.dg/Warray-bounds-66.c: Same.\n+\t* gcc.dg/atomic/stdatomic-vm.c: Same.\n+\n 2020-09-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95310"}, {"sha": "ae190485d6154a0224c80182e50109977e877dbd", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82b77dee751c916bcef55e527bffdd82b68fc897/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82b77dee751c916bcef55e527bffdd82b68fc897/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=82b77dee751c916bcef55e527bffdd82b68fc897", "patch": "@@ -1,3 +1,9 @@\n+2020-09-23  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* dwarf.c (report_inlined_functions): Handle PC == -1 and PC ==\n+\tp->low.\n+\t(dwarf_lookup_pc): Likewise.\n+\n 2020-09-17  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/97080"}]}