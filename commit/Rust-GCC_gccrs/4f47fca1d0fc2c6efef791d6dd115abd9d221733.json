{"sha": "4f47fca1d0fc2c6efef791d6dd115abd9d221733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0N2ZjYTFkMGZjMmM2ZWZlZjc5MWQ2ZGQxMTVhYmQ5ZDIyMTczMw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:27Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:27Z"}, "message": "PR target/95294: VAX: Add test cases for MODE_CC representation\n\n\tgcc/testsuite/\n\tPR target/95294\n\t* gcc.target/vax/cmpelim-eq-adddf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-addhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-addqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-addsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-addsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-andhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-andqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-andsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-ashlsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-ashrsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-divdf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-divhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-divqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-divsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-divsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-extendhisi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-extendqisi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-extvsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-extzvsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixdfhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixdfqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixdfsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixsfhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixsfqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-fixsfsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-floatsisf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-insvsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-iorhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-iorqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-iorsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-mova.c: New test.\n\t* gcc.target/vax/cmpelim-eq-movdf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-movhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-movqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-movsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-movsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-muldf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-mulhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-mulqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-mulsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-mulsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-nothi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-notqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-notsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-rotlsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-rotrsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-subdf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-subhi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-subqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-subsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-subsi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-truncdfsf.c: New test.\n\t* gcc.target/vax/cmpelim-eq-trunchiqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-truncsihi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-truncsiqi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-zextendhisi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-zextendqihi.c: New test.\n\t* gcc.target/vax/cmpelim-eq-zextendqisi.c: New test.\n\t* gcc.target/vax/cmpelim-le-adddf.c: New test.\n\t* gcc.target/vax/cmpelim-le-addhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-addqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-addsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-addsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-andhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-andqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-andsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-ashlsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-ashrsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-divdf.c: New test.\n\t* gcc.target/vax/cmpelim-le-divhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-divqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-divsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-divsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-extendhisi.c: New test.\n\t* gcc.target/vax/cmpelim-le-extendqisi.c: New test.\n\t* gcc.target/vax/cmpelim-le-extvsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-extzvsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixdfhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixdfqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixdfsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixsfhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixsfqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-fixsfsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-floatsisf.c: New test.\n\t* gcc.target/vax/cmpelim-le-insvsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-iorhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-iorqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-iorsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-movdf.c: New test.\n\t* gcc.target/vax/cmpelim-le-movhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-movqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-movsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-movsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-muldf.c: New test.\n\t* gcc.target/vax/cmpelim-le-mulhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-mulqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-mulsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-mulsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-nothi.c: New test.\n\t* gcc.target/vax/cmpelim-le-notqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-notsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-rotlsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-rotrsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-subdf.c: New test.\n\t* gcc.target/vax/cmpelim-le-subhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-subqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-subsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-subsi.c: New test.\n\t* gcc.target/vax/cmpelim-le-truncdfsf.c: New test.\n\t* gcc.target/vax/cmpelim-le-xorhi.c: New test.\n\t* gcc.target/vax/cmpelim-le-xorqi.c: New test.\n\t* gcc.target/vax/cmpelim-le-xorsi.c: New test.\n\t* gcc.target/vax/cmpelim-leu-subhi.c: New test.\n\t* gcc.target/vax/cmpelim-leu-subqi.c: New test.\n\t* gcc.target/vax/cmpelim-leu-subsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-adddf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-addhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-addqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-addsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-addsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-andhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-andqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-andsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-ashlsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-ashrsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-divdf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-divhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-divqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-divsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-divsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-extendhisi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-extendqisi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-extvsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-extzvsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixdfhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixdfqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixdfsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixsfhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixsfqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-fixsfsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-floatsisf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-insvsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-iorhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-iorqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-iorsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-movdf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-movhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-movqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-movsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-movsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-muldf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-mulhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-mulqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-mulsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-mulsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-nothi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-notqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-notsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-rotlsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-rotrsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-subdf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-subhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-subqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-subsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-subsi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-truncdfsf.c: New test.\n\t* gcc.target/vax/cmpelim-lt-xorhi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-xorqi.c: New test.\n\t* gcc.target/vax/cmpelim-lt-xorsi.c: New test.\n\t* gcc.target/vax/cmpelim-ltu-subhi.c: New test.\n\t* gcc.target/vax/cmpelim-ltu-subqi.c: New test.\n\t* gcc.target/vax/cmpelim-ltu-subsi.c: New test.\n\t* gcc.target/vax/cmpelim-xx-addsi.c: New test.\n\t* gcc.target/vax/cmpelim-xx-insvsi.c: New test.\n\t* gcc.target/vax/cmpelim-xxu-subsi.c: New test.\n\t* gcc.target/vax/peephole2-eq-andhi.c: New test.\n\t* gcc.target/vax/peephole2-eq-andqi.c: New test.\n\t* gcc.target/vax/peephole2-eq-andsi.c: New test.\n\t* gcc.target/vax/peephole2-eq-cmpvsi.c: New test.\n\t* gcc.target/vax/peephole2-eq-cmpzvsi.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzhi-0.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzhi-1.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzqi-0.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzqi-1.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzsi-0.c: New test.\n\t* gcc.target/vax/peephole2-eq-ctzsi-1.c: New test.\n\t* gcc.target/vax/peephole2-eq-ffshi.c: New test.\n\t* gcc.target/vax/peephole2-eq-ffsqi.c: New test.\n\t* gcc.target/vax/peephole2-eq-ffssi.c: New test.\n\t* gcc.target/vax/peephole2-le-andhi.c: New test.\n\t* gcc.target/vax/peephole2-le-andqi.c: New test.\n\t* gcc.target/vax/peephole2-le-andsi.c: New test.\n\t* gcc.target/vax/peephole2-le-cmpvsi.c: New test.\n\t* gcc.target/vax/peephole2-le-cmpzvsi.c: New test.\n\t* gcc.target/vax/peephole2-leu-cmpvsi.c: New test.\n\t* gcc.target/vax/peephole2-leu-cmpzvsi.c: New test.\n\t* gcc.target/vax/peephole2-lt-andhi.c: New test.\n\t* gcc.target/vax/peephole2-lt-andqi.c: New test.\n\t* gcc.target/vax/peephole2-lt-andsi.c: New test.\n\t* gcc.target/vax/peephole2-lt-cmpvsi.c: New test.\n\t* gcc.target/vax/peephole2-lt-cmpzvsi.c: New test.\n\t* gcc.target/vax/peephole2-ltu-cmpvsi.c: New test.\n\t* gcc.target/vax/peephole2-ltu-cmpzvsi.c: New test.", "tree": {"sha": "c1d96598904a8b1e9fc23f1088fa5e0d8b664bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1d96598904a8b1e9fc23f1088fa5e0d8b664bb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f47fca1d0fc2c6efef791d6dd115abd9d221733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f47fca1d0fc2c6efef791d6dd115abd9d221733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f47fca1d0fc2c6efef791d6dd115abd9d221733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f47fca1d0fc2c6efef791d6dd115abd9d221733/comments", "author": null, "committer": null, "parents": [{"sha": "e552abe2ba27ccec0d7c0d050b4617f2f636dd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e552abe2ba27ccec0d7c0d050b4617f2f636dd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e552abe2ba27ccec0d7c0d050b4617f2f636dd63"}], "stats": {"total": 6382, "additions": 6382, "deletions": 0}, "files": [{"sha": "872d46bbd76e3d8193b9f7a7eb32b8fbe7178638", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-adddf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-adddf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-adddf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-adddf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+eq_adddf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddd3 4(%ap),12(%ap),%r0\t# 35\t[c=68]  *adddf3_ccz/2\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddd2 $0d2.0e+0,%r0\t\t# 34\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"adddf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "3a5dbad72dc2eaf9d998c400610cab0396ed28aa", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-addhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_addhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddw3 *8(%ap),*12(%ap),%r0\t# 33\t[c=64]  *addhi3_ccz\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 32\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "b0fe468ee65ced8d608086b5a93f113d6abda421", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-addqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_addqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddb3 *8(%ap),*12(%ap),%r0\t# 33\t[c=64]  *addqi3_ccz\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 32\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "de9e9c1b9d84c53decb24aafa61255d4ab7e52b7", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-addsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+eq_addsf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddf3 4(%ap),8(%ap),%r0\t\t# 34\t[c=48]  *addsf3_ccz/2\n+\tjeql .L1\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 33\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "6998e606a07a7237b4d6e73173eb0683a36fb120", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-addsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-addsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_addsi (int_t x, int_t y)\n+{\n+  x += y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddl3 4(%ap),8(%ap),%r0\t\t# 33\t[c=48]  *addsi3_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "d4d0c59d2b2c58f745bd12b0cf6e47776b6cec86", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-andhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicw3 *12(%ap),*8(%ap),%r0\t# 34\t[c=44]  *andhi3_2_ccz/1\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 33\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "efa0dfe95a3e70309dcb122a8b00a64058d54b05", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-andqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicb3 *12(%ap),*8(%ap),%r0\t# 34\t[c=44]  *andqi3_2_ccz/1\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 33\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "9afc86090a55eba92ca4ede7e968e7e14ecbe980", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-andsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_andsi (int_t x, int_t y)\n+{\n+  x &= ~y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicl3 8(%ap),4(%ap),%r0\t\t# 35\t[c=28]  *andsi3_2_ccz/1\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 34\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "a824f2d19876c745d9e9e5965cc266d075b9d9ff", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-ashlsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+eq_ashlsi (int_t x, short_t y)\n+{\n+  x <<= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tashl 8(%ap),4(%ap),%r0\t\t# 35\t[c=56]  *ashlsi3_ccz\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 34\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "5f1e3a41919325f90486a8af70c3d3002ecdcf61", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-ashrsi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-ashrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+eq_ashrsi (int_t x, short_t y)\n+{\n+  x >>= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 36\t[c=16]  *negqi2\n+\tashl %r0,4(%ap),%r0\t\t# 37\t[c=52]  *ashlnegsi3_2_ccz\n+\tjeql .L1\t\t\t# 39\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 35\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlnegsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "7101960351c9fb46fa87bd7920309b4b59cfcf87", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-divdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+eq_divdf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivd3 12(%ap),4(%ap),%r0\t# 35\t[c=112]  *divdf3_ccz/1\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddd2 $0d2.0e+0,%r0\t\t# 34\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divdf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "03866f9554fd56d94565f59cd4fa96bba78ea43b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-divhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI), vector_size (2))) int_t;\n+\n+void\n+eq_divhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivw3 *12(%ap),*8(%ap),%r0\t# 38\t[c=76]  *divhi3_ccz/1\n+\tjeql .L2\t\t\t# 40\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 37\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "e4cfbf0315c8c5edf3e18edaf86526022e191c15", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-divqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI), vector_size (1))) int_t;\n+\n+void\n+eq_divqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivb3 *12(%ap),*8(%ap),%r0\t# 38\t[c=76]  *divqi3_ccz/1\n+\tjeql .L2\t\t\t# 40\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 37\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "492becfd080a5981108448aa6a62c325710b737f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-divsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+eq_divsf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivf3 8(%ap),4(%ap),%r0\t\t# 34\t[c=60]  *divsf3_ccz/1\n+\tjeql .L1\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 33\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "324614fdbd3ee795dbcb1b7d4e503b7dc2180abf", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-divsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-divsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_divsi (int_t x, int_t y)\n+{\n+  x /= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivl3 8(%ap),4(%ap),%r0\t\t# 33\t[c=60]  *divsi3_ccz/1\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "f875da9202c611fafe93ff66587e3c17c04a8a35", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-extendhisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendhisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendhisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendhisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (HI))) short_t;\n+\n+int_t\n+eq_extendhisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtwl 4(%ap),%r0\t\t# 33\t[c=20]  *extendhisi2_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendhisi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "16a6acd8098c6dc7bb2db682ede15dfc2d181e1f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-extendqisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendqisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendqisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extendqisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+eq_extendqisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtbl 4(%ap),%r0\t\t# 33\t[c=20]  *extendqisi2_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendqisi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "5383059fe01408cb8ce15e019421c3309c4539b4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-extvsi.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+eq_extvsi (bit_t x)\n+{\n+  int_t v;\n+\n+  v = x.i;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\textv $7,$18,4(%ap),%r0\t\t# 32\t[c=68]  *extv_non_const_2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "d21fa29393670b9130c8a0094b488b318c2f9e81", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-extzvsi.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-extzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+eq_extzvsi (bit_t x)\n+{\n+  int_t v;\n+\n+  v = x.i;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\trotl $25,4(%ap),%r0\t\t# 32\t[c=68]  *extzv_non_const_2_ccz\n+\tbicl2 $-262144,%r0\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extzv\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "8912d14b31a0ab49ac08f6ae54fcb3bcfd3e9fce", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixdfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_fixdfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdw 8(%ap),%r0\t\t# 31\t[c=36]  *fix_truncdfhi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 30\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "12f9385bba2d96214a369036cff00c10ebe4eb64", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixdfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_fixdfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdb 8(%ap),%r0\t\t# 31\t[c=36]  *fix_truncdfqi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 30\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "ad54d88b9ff3c05f34bca4e05a0efd8bfc4593f1", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixdfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixdfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_fixdfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdl 4(%ap),%r0\t\t# 32\t[c=36]  *fix_truncdfsi2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "0c26857c014c23280f73cca89b9987ff271e4ab0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixsfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_fixsfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfw 8(%ap),%r0\t\t# 31\t[c=36]  *fix_truncsfhi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 30\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "2d32525bc299b447766c905d886ab8a8493c6e55", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixsfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_fixsfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfb 8(%ap),%r0\t\t# 31\t[c=36]  *fix_truncsfqi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 30\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "a704ad8600add31514e6b3695571bad0de479646", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-fixsfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-fixsfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_fixsfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfl 4(%ap),%r0\t\t# 32\t[c=36]  *fix_truncsfsi2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "1ea83cc8ef76193d8b5ce183c903f19d7c236bcb", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-floatsisf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-floatsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-floatsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-floatsisf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+float_t\n+eq_floatsisf (int_t x)\n+{\n+  float_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtlf 4(%ap),%r0\t\t# 33\t[c=32]  *floatsisf2_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 32\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"floatsisf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "fbdcdb43b066783db6b7c8cad59af4ae1876362b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-insvsi.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-insvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-insvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-insvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef union\n+  {\n+    int_t i;\n+    struct\n+      {\n+\tint_t h : 7;\n+\tint_t i : 18;\n+\tint_t l : 7;\n+      } b;\n+  }\n+bit_t;\n+\n+int\n+eq_insvsi (bit_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x.b.i;\n+  x.b.i = y;\n+  if (v != 0)\n+    return x.i;\n+  else\n+    return x.i + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 35\t[c=16]  *movsi_2\n+\textv $7,$18,%r0,%r1\t\t# 36\t[c=60]  *extv_non_const_2_ccz\n+\tinsv 8(%ap),$7,$18,%r0\t\t# 8\t[c=16]  *insv_2\n+\tjneq .L1\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 34\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"extv.*insv.*branch\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "9bbe881897e0a2568d69247817e5362ece708ec3", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-iorhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_iorhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisw3 *12(%ap),*8(%ap),%r0\t# 32\t[c=44]  *iorhi3_ccz/2\n+\tjeql .L2\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 31\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "82f3f6bb7c637e352041ac258cb217454046fc5b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-iorqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_iorqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisb3 *12(%ap),*8(%ap),%r0\t# 32\t[c=44]  *iorqi3_ccz/2\n+\tjeql .L2\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 31\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "dd4490d9fd20bed0b165691d0ddeebca52495263", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-iorsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-iorsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_iorsi (int_t x, int_t y)\n+{\n+  x |= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisl3 8(%ap),4(%ap),%r0\t\t# 33\t[c=28]  *iorsi3_ccz/2\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "286025f4982e99601f7ef07eac61f4903bdfb24a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-mova.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mova.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mova.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mova.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+extern char __attribute__ ((weak)) c;\n+\n+char *\n+eq_mova (char *p)\n+{\n+  char *v;\n+\n+  v = &c;\n+  if (v)\n+    return v;\n+  return p;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovab c,%r0\t\t\t# 35\t[c=12]  *movsym_2_ccz\n+\tjeql .L6\t\t\t# 37\t[c=26]  *branch_ccz\n+\tret\t\t\t\t# 43\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsym\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "c83e966c889ebfbd5119f959d5cacf0070aae6f7", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-movdf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+eq_movdf (float_t x)\n+{\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovd 4(%ap),%r0\t\t\t# 34\t[c=24]  *movdf_ccz/1\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddd2 $0d2.0e+0,%r0\t\t# 33\t[c=56]  *adddf3/0\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movdf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "99832dcf74d401701b18a65556f59498935055a4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-movhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_movhi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r0\t\t# 31\t[c=24]  *movhi_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 30\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "5014b8bcbc63fbd9f087d070ef056b8c5a50bd9e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-movqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_movqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r0\t\t# 31\t[c=24]  *movqi_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 30\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "89074613d8ed920c5bbdda5cfa0e8ed95a2b9aa9", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-movsf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+eq_movsf (float_t x)\n+{\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovf 4(%ap),%r0\t\t\t# 33\t[c=16]  *movsf_ccz/1\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 32\t[c=36]  *addsf3/0\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "1e65f4b81f915edcb617c4f4fd3dd16056c41c1d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-movsi.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-movsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_movsi (int_t x)\n+{\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 32\t[c=16]  *movsi_2_ccz\n+\tjeql .L2\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "7271c218d335c809c8589957deaf6588f59d3ab2", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-muldf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-muldf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-muldf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-muldf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+eq_muldf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmuld3 4(%ap),12(%ap),%r0\t# 35\t[c=80]  *muldf3_ccz/2\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddd2 $0d2.0e+0,%r0\t\t# 34\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"muldf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "d44a62250d7636e3d086c0b726e39750f5995694", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-mulhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_mulhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulw3 *8(%ap),*12(%ap),%r0\t# 33\t[c=72]  *mulhi3_ccz/2\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 32\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "2451843e704e0a095225ec7797568d4d9abcd8d7", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-mulqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_mulqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulb3 *8(%ap),*12(%ap),%r0\t# 33\t[c=72]  *mulqi3_ccz/2\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 32\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "824487bf4880b0f25e5a62e81ab1046615fc55fa", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-mulsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+eq_mulsf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulf3 4(%ap),8(%ap),%r0\t\t# 34\t[c=52]  *mulsf3_ccz/2\n+\tjeql .L1\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 33\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "fbefa541784598cce15886633c8f285a1a1ce626", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-mulsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-mulsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_mulsi (int_t x, int_t y)\n+{\n+  x *= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmull3 4(%ap),8(%ap),%r0\t\t# 33\t[c=56]  *mulsi3_ccz/2\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "79b274c7841d434c55c1bd466b3c714b500a3451", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-nothi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-nothi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-nothi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-nothi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_nothi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomw *8(%ap),%r0\t\t# 31\t[c=24]  *one_cmplhi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 30\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "ae98a2fbc7e9a2ac0f009127a32cd9960ed6765b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-notqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_notqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomb *8(%ap),%r0\t\t# 31\t[c=24]  *one_cmplqi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 30\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "ba5b735e01be7ce88c07ca6f0c69b8d0c535e01e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-notsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-notsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_notsi (int_t x)\n+{\n+  x = ~x;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcoml 4(%ap),%r0\t\t# 32\t[c=16]  *one_cmplsi2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "17c48687299c510614b4b17d350a795a4818334e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-rotlsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+eq_rotlsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x << y | x >> 8 * sizeof (x) - y;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\trotl 8(%ap),4(%ap),%r0\t\t# 36\t[c=40]  *rotlsi3_ccz\n+\tjeql .L1\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 35\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotlsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "ffbca2348676ec63d55115f4fc569bc2a5e56bf9", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-rotrsi.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-rotrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+eq_rotrsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x >> y | x << 8 * sizeof (x) - y;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 37\t[c=16]  *negqi2\n+\trotl %r0,4(%ap),%r0\t\t# 38\t[c=36]  *rotrnegsi3_2_ccz\n+\tjeql .L1\t\t\t# 40\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 36\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotrnegsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "a8d3f1f93a5b8fe1bd691c1f14d97a49344d32c0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-subdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+eq_subdf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubd3 12(%ap),4(%ap),%r0\t# 35\t[c=68]  *subdf3_ccz/1\n+\tjeql .L1\t\t\t# 37\t[c=26]  *branch_ccz\n+\taddd2 $0d2.0e+0,%r0\t\t# 34\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subdf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "f01b4b6f968a0dd21b5b19dc222e9db20f191b7b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-subhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_subhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubw3 *12(%ap),*8(%ap),%r0\t# 33\t[c=64]  *subhi3_ccz/1\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 32\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "733e30f8b05815e9482e3182fe64bce5c4a0a0e4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-subqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_subqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 *12(%ap),*8(%ap),%r0\t# 33\t[c=64]  *subqi3_ccz/1\n+\tjeql .L2\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 32\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "34e8555ca1965769a55c42ab6377dfd1986db72f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-subsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+eq_subsf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubf3 8(%ap),4(%ap),%r0\t\t# 34\t[c=48]  *subsf3_ccz/1\n+\tjeql .L1\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 33\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "456e35a737e0c992508b09ebd65ff983b0c4d607", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-subsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_subsi (int_t x, int_t y)\n+{\n+  x -= y;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubl3 8(%ap),4(%ap),%r0\t\t# 33\t[c=48]  *subsi3_ccz/1\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "7192d874aef583410d38b384d8af688e19cf6d7f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-truncdfsf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncdfsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncdfsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncdfsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) single_t;\n+typedef float __attribute__ ((mode (DF))) double_t;\n+\n+single_t\n+eq_truncdfsf (double_t x)\n+{\n+  single_t v;\n+\n+  v = x;\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdf 4(%ap),%r0\t\t# 33\t[c=20]  *truncdfsf2_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddf2 $0f2.0e+0,%r0\t\t# 32\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"truncdfsf\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "9e7a8850eaef894a052e172ddb734f750cc07abc", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-trunchiqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-trunchiqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-trunchiqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-trunchiqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (HI))) int_t;\n+typedef unsigned int __attribute__ ((mode (QI))) short_t;\n+\n+void\n+eq_trunchiqi (short_t *w, int_t *x, int y)\n+{\n+  short_t v;\n+\n+  v = x[y];\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 12(%ap),%r0\t\t# 33\t[c=16]  *movsi_2\n+\tcvtwb *8(%ap)[%r0],%r0\t\t# 34\t[c=28]  *trunchiqi2_ccz\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 32\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"trunchiqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "36dd7dfcccaaec016ef7120c6097575d9de05c39", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-truncsihi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsihi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsihi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsihi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef unsigned int __attribute__ ((mode (HI))) short_t;\n+\n+void\n+eq_truncsihi (short_t *w, int_t *x, int y)\n+{\n+  short_t v;\n+\n+  v = x[y];\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 12(%ap),%r0\t\t# 33\t[c=16]  *movsi_2\n+\tcvtlw *8(%ap)[%r0],%r0\t\t# 34\t[c=28]  *truncsihi2_ccz\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 32\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"truncsihi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "a0ee4cffa7cab84069c38141e7906c1c9917bfca", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-truncsiqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsiqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsiqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-truncsiqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef unsigned int __attribute__ ((mode (QI))) short_t;\n+\n+void\n+eq_truncsiqi (short_t *w, int_t *x, int y)\n+{\n+  short_t v;\n+\n+  v = x[y];\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 12(%ap),%r0\t\t# 33\t[c=16]  *movsi_2\n+\tcvtlb *8(%ap)[%r0],%r0\t\t# 34\t[c=28]  *truncsiqi2_ccz\n+\tjeql .L2\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 32\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"truncsiqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "2fa86dde7b0e33b8c01dc7563c70cb545fa7bfde", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-zextendhisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendhisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendhisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendhisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef unsigned int __attribute__ ((mode (HI))) short_t;\n+\n+int_t\n+eq_zextendhisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovzwl 4(%ap),%r0\t\t# 32\t[c=20]  *zero_extendhisi2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"zero_extendhisi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "16613c6e16f4712706cf0bc37fb7ce158bde7e13", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-zextendqihi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqihi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqihi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqihi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (HI))) int_t;\n+typedef unsigned int __attribute__ ((mode (QI))) short_t;\n+\n+void\n+eq_zextendqihi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = (short_t) *x;\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovzbw *8(%ap),%r0\t\t# 31\t[c=28]  *zero_extendqihi2_ccz\n+\tjeql .L2\t\t\t# 33\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 30\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"zero_extendqihi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "bb75f73cd68dcbc694985d3402ddc2c6bea62ccb", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-eq-zextendqisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-eq-zextendqisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef unsigned int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+eq_zextendqisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x == 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovzbl 4(%ap),%r0\t\t# 32\t[c=20]  *zero_extendqisi2_ccz\n+\tjeql .L1\t\t\t# 34\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"zero_extendqisi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "383d51d662caa3edfb680551452c8b2c6ac23e6d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-adddf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-adddf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-adddf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-adddf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+le_adddf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddd3 4(%ap),12(%ap),%r0\t# 29\t[c=68]  *adddf3_ccnz/2\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"adddf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "19cc62191109921de6bc03c7516641091a7b6d7b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-addhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_addhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddw3 *8(%ap),*12(%ap),%r0\t# 29\t[c=64]  *addhi3_ccnz\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "291beb028f9eb16e86da24f48bf085890569511c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-addqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_addqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddb3 *8(%ap),*12(%ap),%r0\t# 29\t[c=64]  *addqi3_ccnz\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "e4596fe7c337722f74b53f266573b19cc16acab4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-addsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+le_addsf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddf3 4(%ap),8(%ap),%r0\t\t# 28\t[c=48]  *addsf3_ccnz/2\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "254b30c2ea7f2219d2b13096be58f8362b6b64fa", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-addsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-addsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_addsi (int_t x, int_t y)\n+{\n+  x += y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddl3 4(%ap),8(%ap),%r0\t\t# 29\t[c=48]  *addsi3_ccnz\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "ddf04d90b6c129c7506f2a224633e2226de2f515", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-andhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicw3 *12(%ap),*8(%ap),%r0\t# 30\t[c=44]  *andhi3_2_ccnz/1\n+\tjleq .L2\t\t\t# 32\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 29\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "bd781dc1ad9a7dafeb0d4781fdc7f44100f86e4d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-andqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicb3 *12(%ap),*8(%ap),%r0\t# 30\t[c=44]  *andqi3_2_ccnz/1\n+\tjleq .L2\t\t\t# 32\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 29\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "81fd7ba9a8ab4c293930f337449b7d460dca34f8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-andsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_andsi (int_t x, int_t y)\n+{\n+  x &= ~y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicl3 8(%ap),4(%ap),%r0\t\t# 31\t[c=28]  *andsi3_2_ccnz/1\n+\tjleq .L1\t\t\t# 33\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "2b677424b265ea88fdb10f39730acd2c94babe1a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-ashlsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+le_ashlsi (int_t x, short_t y)\n+{\n+  x <<= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tashl 8(%ap),4(%ap),%r0\t\t# 31\t[c=56]  *ashlsi3_ccnz\n+\tjleq .L1\t\t\t# 33\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "c4d9f28d0e39e04f67f394e085ef4c8381f604c5", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-ashrsi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-ashrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+le_ashrsi (int_t x, short_t y)\n+{\n+  x >>= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 32\t[c=16]  *negqi2\n+\tashl %r0,4(%ap),%r0\t\t# 33\t[c=52]  *ashlnegsi3_2_ccnz\n+\tjleq .L1\t\t\t# 35\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlnegsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "62b419ccd4356b3dc7c6319c11ffafa7a9eac893", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-divdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+le_divdf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivd3 12(%ap),4(%ap),%r0\t# 29\t[c=112]  *divdf3_ccnz/1\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divdf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "68ee4844fd25d1665e321fc5ffb276f47348240b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-divhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI), vector_size (2))) int_t;\n+\n+void\n+le_divhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivw3 *12(%ap),*8(%ap),%r0\t# 34\t[c=76]  *divhi3_ccnz/1\n+\tjleq .L2\t\t\t# 36\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 33\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "e0b0cd31754453b34da0c082ec02964ef8275efc", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-divqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI), vector_size (1))) int_t;\n+\n+void\n+le_divqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivb3 *12(%ap),*8(%ap),%r0\t# 34\t[c=76]  *divqi3_ccnz/1\n+\tjleq .L2\t\t\t# 36\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 33\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "b55b36e622d0840d3538d9f5f598fbcabdfddef1", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-divsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+le_divsf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivf3 8(%ap),4(%ap),%r0\t\t# 28\t[c=60]  *divsf3_ccnz/1\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "6a45a38c24279cae8c1d03e4d42935fa493e9904", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-divsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-divsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_divsi (int_t x, int_t y)\n+{\n+  x /= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=60]  *divsi3_ccnz/1\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "693c752f8aad8b638b0752a4d97770a29fb0e7fc", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-extendhisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendhisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendhisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendhisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (HI))) short_t;\n+\n+int_t\n+le_extendhisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtwl 4(%ap),%r0\t\t# 29\t[c=20]  *extendhisi2_ccnz\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendhisi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "4965bcff4d5275b5c5a7248764afb247da3d2a7b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-extendqisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendqisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendqisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extendqisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+le_extendqisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtbl 4(%ap),%r0\t\t# 29\t[c=20]  *extendqisi2_ccnz\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendqisi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "641c8f0dd3d461cb5956e1735c5efcd2d2d0860e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-extvsi.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+le_extvsi (bit_t x)\n+{\n+  int_t v;\n+\n+  v = x.i;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\textv $7,$18,4(%ap),%r0\t\t# 28\t[c=68]  *extv_non_const_2_ccnz\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "18dd7ff9bd9997bac1308a4ddd0a23e593ede67b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-extzvsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-extzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+le_extzvsi (uint_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x >> y;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 31\t[c=40]  *subqi3/1\n+\textzv 8(%ap),%r0,4(%ap),%r0\t# 32\t[c=76]  *extzv_non_const_2_ccnz\n+\tjleq .L1\t\t\t# 34\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extzv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "ea649c63c52642b935ea39bb5ca9f10b696d516c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixdfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_fixdfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdw 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncdfhi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "a53e9367c041d71404fcb3145eff9e8e8b5214b0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixdfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_fixdfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdb 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncdfqi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "bcf5f364155d0da8f8ded6b584c78c15370a5be0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixdfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixdfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_fixdfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdl 4(%ap),%r0\t\t# 28\t[c=36]  *fix_truncdfsi2_ccnz\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "2301500531bc916eeea7cb0b168ba1818f6da2cd", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixsfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_fixsfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfw 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncsfhi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "34a4783713416bdd22e250cceb342d9fd3c32785", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixsfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_fixsfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfb 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncsfqi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "39735af7e51ca975f3583e85df383b3664141c2c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-fixsfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-fixsfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_fixsfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfl 4(%ap),%r0\t\t# 28\t[c=36]  *fix_truncsfsi2_ccnz\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "bab7101c3a52a8b735c7cb4caa4b6b3f57d27a62", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-floatsisf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-floatsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-floatsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-floatsisf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+float_t\n+le_floatsisf (int_t x)\n+{\n+  float_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtlf 4(%ap),%r0\t\t# 27\t[c=32]  *floatsisf2_ccnz\n+\tjleq .L1\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 26\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"floatsisf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "26c368ba9cb1ae45ffe6870878dca6f2b85b3095", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-insvsi.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-insvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-insvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-insvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef union\n+  {\n+    int_t i;\n+    struct\n+      {\n+\tint_t h : 7;\n+\tint_t i : 18;\n+\tint_t l : 7;\n+      } b;\n+  }\n+bit_t;\n+\n+int\n+le_insvsi (bit_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x.b.i;\n+  x.b.i = y;\n+  if (v <= 0)\n+    return x.i;\n+  else\n+    return x.i + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 37\t[c=16]  *movsi_2\n+\textv $7,$18,%r0,%r1\t\t# 38\t[c=60]  *extv_non_const_2_ccnz\n+\tinsv 8(%ap),$7,$18,%r0\t\t# 8\t[c=16]  *insv_2\n+\tjleq .L1\t\t\t# 40\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 36\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"extv.*insv.*branch\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "26a4d76577854a46dc87930c5ea11fb8d7f61d26", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-iorhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_iorhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisw3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *iorhi3_ccnz/2\n+\tjleq .L2\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "fbb97b33e5488769d10e3b3de0a0d45b7d3d12ab", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-iorqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_iorqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisb3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *iorqi3_ccnz/2\n+\tjleq .L2\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "4cf50fe89ac0e7103f71d55f5afcdfc3113d0399", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-iorsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-iorsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_iorsi (int_t x, int_t y)\n+{\n+  x |= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=28]  *iorsi3_ccnz/2\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "acbaa2d3a8541ca6958a6b6a10eb865b432714aa", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-movdf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+le_movdf (float_t x)\n+{\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovd 4(%ap),%r0\t\t\t# 34\t[c=24]  *movdf_ccnz/1\n+\tjleq .L1\t\t\t# 36\t[c=26]  *branch_ccnz\n+\taddd2 $0d2.0e+0,%r0\t\t# 33\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movdf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "3e99f872101df26ce4833fa8680abf1a59817dc4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-movhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_movhi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r0\t\t# 27\t[c=24]  *movhi_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "8c73a82224052fcc26510a23d918cb2008fadc3a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-movqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_movqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r0\t\t# 27\t[c=24]  *movqi_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "71a70b8e70da72e551907d80c81fb083ba4d09f3", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-movsf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+le_movsf (float_t x)\n+{\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovf 4(%ap),%r0\t\t\t# 33\t[c=16]  *movsf_ccnz/1\n+\tjleq .L1\t\t\t# 35\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 32\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "2203f8b1713ea989700a85a324843ddd7e4e051a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-movsi.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-movsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_movsi (int_t x)\n+{\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 34\t[c=16]  *movsi_2_ccnz\n+\tjleq .L1\t\t\t# 36\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 33\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "ed3193def4a0d9406105b1fbef44a1c15d5eaa26", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-muldf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-muldf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-muldf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-muldf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+le_muldf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmuld3 4(%ap),12(%ap),%r0\t# 29\t[c=80]  *muldf3_ccnz/2\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"muldf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "426a469be1e394920ba9862286e2650c4bdbef46", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-mulhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_mulhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulw3 *8(%ap),*12(%ap),%r0\t# 29\t[c=72]  *mulhi3_ccnz/2\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "ca3bb48d9516fa99dfeada8f003c998c2b714f3a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-mulqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_mulqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulb3 *8(%ap),*12(%ap),%r0\t# 29\t[c=72]  *mulqi3_ccnz/2\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "0d3ac3776d9d23a4a98fa39b2cfa84827631aa1a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-mulsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+le_mulsf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulf3 4(%ap),8(%ap),%r0\t\t# 28\t[c=52]  *mulsf3_ccnz/2\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "de72158569eb32090685c75b8b38dd5f17493a00", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-mulsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-mulsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_mulsi (int_t x, int_t y)\n+{\n+  x *= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmull3 4(%ap),8(%ap),%r0\t\t# 29\t[c=56]  *mulsi3_ccnz/2\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "6884a782e01efca7de87d6db8388fb10f36bee99", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-nothi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-nothi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-nothi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-nothi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_nothi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomw *8(%ap),%r0\t\t# 27\t[c=24]  *one_cmplhi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "60a9e615484b1cd79c524185d4e2e1a982b0b36e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-notqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_notqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomb *8(%ap),%r0\t\t# 27\t[c=24]  *one_cmplqi2_ccnz\n+\tjleq .L2\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "938a6b3a4d33927c7233cabd8224d5df2f867e49", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-notsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-notsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_notsi (int_t x)\n+{\n+  x = ~x;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcoml 4(%ap),%r0\t\t# 28\t[c=16]  *one_cmplsi2_ccnz\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "9e01429cd0de7cab53adeb695e80fc323a08055a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-rotlsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+le_rotlsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x << y | x >> 8 * sizeof (x) - y;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\trotl 8(%ap),4(%ap),%r0\t\t# 32\t[c=40]  *rotlsi3_ccnz\n+\tjleq .L1\t\t\t# 34\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotlsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "4fe533bc086987748b9344e31202b77b5e25b2a1", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-rotrsi.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-rotrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+le_rotrsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x >> y | x << 8 * sizeof (x) - y;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 33\t[c=16]  *negqi2\n+\trotl %r0,4(%ap),%r0\t\t# 34\t[c=36]  *rotrnegsi3_2_ccnz\n+\tjleq .L1\t\t\t# 36\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotrnegsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "0456cd32bb5b46dd3d13549a38b7e06e5a112d5a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-subdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+le_subdf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubd3 12(%ap),4(%ap),%r0\t# 29\t[c=68]  *subdf3_ccnz/1\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subdf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "4391b76b7be4a357babed8fe399f3b7c1194710d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-subhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_subhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubw3 *12(%ap),*8(%ap),%r0\t# 29\t[c=64]  *subhi3_ccnz/1\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "f725be9b8090ca78aec90c7648fef6380d452970", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-subqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_subqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 *12(%ap),*8(%ap),%r0\t# 29\t[c=64]  *subqi3_ccnz/1\n+\tjleq .L2\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "77a9bf06b11fef11107b821a169371dfe7987a78", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-subsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+le_subsf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubf3 8(%ap),4(%ap),%r0\t\t# 28\t[c=48]  *subsf3_ccnz/1\n+\tjleq .L1\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "db64ffc5b57c34ec73448e79ff29597d72620004", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-subsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_subsi (int_t x, int_t y)\n+{\n+  x -= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=48]  *subsi3_ccnz/1\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "6e7673d607f60fb70e1fa1bc97a303f44611c6b4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-truncdfsf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-truncdfsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-truncdfsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-truncdfsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) single_t;\n+typedef float __attribute__ ((mode (DF))) double_t;\n+\n+single_t\n+le_truncdfsf (double_t x)\n+{\n+  single_t v;\n+\n+  v = x;\n+  if (v <= 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdf 4(%ap),%r0\t\t# 27\t[c=20]  *truncdfsf2_ccnz\n+\tjleq .L1\t\t\t# 29\t[c=26]  *branch_ccnz\n+\taddf2 $0f2.0e+0,%r0\t\t# 26\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"truncdfsf\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "e65eed8a4bc5474044aec09d59fa178ccc86593c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-xorhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_xorhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x ^ *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorw3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *xorhi3_ccnz/2\n+\tjleq .L2\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorhi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "ca8d5fb80a9279e32d2161f2ad79b8e85c46ed16", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-xorqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_xorqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x ^ *y;\n+  if (v <= 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorb3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *xorqi3_ccnz/2\n+\tjleq .L2\t\t\t# 30\t[c=26]  *branch_ccnz\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "3de63cabc39b2aa644449df778258032b29af604", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-le-xorsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-le-xorsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_xorsi (int_t x, int_t y)\n+{\n+  x ^= y;\n+  if (x <= 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=28]  *xorsi3_ccnz/2\n+\tjleq .L1\t\t\t# 31\t[c=26]  *branch_ccnz\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "5f3e372d5e7547e4cf02ba7dc7fa3c02607932c6", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-leu-subhi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+leu_subhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (*x <= *y)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r2\t\t# 28\t[c=24]  *movhi\n+\tmovw *12(%ap),%r1\t\t# 29\t[c=24]  *movhi\n+\tsubw3 %r1,%r2,%r0\t\t# 30\t[c=32]  *subhi3_cc/1\n+\tjlequ .L2\t\t\t# 32\t[c=26]  *branch_cc\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subhi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "97ef2a9836b408ade8c8c62b0ed663fdf268f0fb", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-leu-subqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+leu_subqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (*x <= *y)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r2\t\t# 28\t[c=24]  *movqi\n+\tmovb *12(%ap),%r1\t\t# 29\t[c=24]  *movqi\n+\tsubb3 %r1,%r2,%r0\t\t# 30\t[c=32]  *subqi3_cc/1\n+\tjlequ .L2\t\t\t# 32\t[c=26]  *branch_cc\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subqi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "9402fab0ea29c12ccb195eb37cd43784f3c9b307", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-leu-subsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-leu-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+leu_subsi (int_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x - y;\n+  if (x <= y)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r2\t\t\t# 27\t[c=16]  *movsi_2\n+\tmovl 8(%ap),%r1\t\t\t# 28\t[c=16]  *movsi_2\n+\tsubl3 %r1,%r2,%r0\t\t# 29\t[c=32]  *subsi3_cc/1\n+\tjlequ .L1\t\t\t# 31\t[c=26]  *branch_cc\n+\taddl2 $2,%r0\t\t\t# 26\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "6e3718d5e2e155f60ddc5bd98759b0a49ffe0d4b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-adddf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-adddf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-adddf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-adddf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+lt_adddf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddd3 4(%ap),12(%ap),%r0\t# 29\t[c=68]  *adddf3_ccn/2\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"adddf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "a93675a500fe2e7cbf9735d5a3fa5db8a2ba84cf", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-addhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_addhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddw3 *8(%ap),*12(%ap),%r0\t# 29\t[c=64]  *addhi3_ccn\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "32a1328ae12ab231dc76857d189465955a5e2331", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-addqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_addqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x + *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddb3 *8(%ap),*12(%ap),%r0\t# 29\t[c=64]  *addqi3_ccn\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "19c0b68b5f801188d6674b2a98104d02bcaa4233", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-addsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+lt_addsf (float_t x, float_t y)\n+{\n+  x += y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddf3 4(%ap),8(%ap),%r0\t\t# 28\t[c=48]  *addsf3_ccn/2\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "1bb59d358ea7b0bc6b4c9fe381ed9441ff338511", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-addsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-addsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_addsi (int_t x, int_t y)\n+{\n+  x += y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddl3 4(%ap),8(%ap),%r0\t\t# 29\t[c=48]  *addsi3_ccn\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "f725931170832bfb90a3a68e14d7e2855ee46bf8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-andhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicw3 *12(%ap),*8(%ap),%r0\t# 30\t[c=44]  *andhi3_2_ccn/1\n+\tjlss .L2\t\t\t# 32\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 29\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "afae63586d39f5693f9d59439b0bd7b0a6f481f8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-andqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & ~*y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicb3 *12(%ap),*8(%ap),%r0\t# 30\t[c=44]  *andqi3_2_ccn/1\n+\tjlss .L2\t\t\t# 32\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 29\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5a86ddb51b51a6d9d2e5354758681ab1b89fba90", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-andsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_andsi (int_t x, int_t y)\n+{\n+  x &= ~y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbicl3 8(%ap),4(%ap),%r0\t\t# 31\t[c=28]  *andsi3_2_ccn/1\n+\tjlss .L1\t\t\t# 33\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"andsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "0c858936bf89aa0ddc47398a0d642f8f5118fa3e", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-ashlsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+lt_ashlsi (int_t x, short_t y)\n+{\n+  x <<= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tashl 8(%ap),4(%ap),%r0\t\t# 31\t[c=56]  *ashlsi3_ccn\n+\tjlss .L1\t\t\t# 33\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "977f32cb4fcabb0677d6969484c610d44b672ec0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-ashrsi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-ashrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+lt_ashrsi (int_t x, short_t y)\n+{\n+  x >>= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 32\t[c=16]  *negqi2\n+\tashl %r0,4(%ap),%r0\t\t# 33\t[c=52]  *ashlnegsi3_2_ccn\n+\tjlss .L1\t\t\t# 35\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ashlnegsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "ddcb8c1ccd942259625d02044fbf947c9e366201", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-divdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+lt_divdf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivd3 12(%ap),4(%ap),%r0\t# 29\t[c=112]  *divdf3_ccn/1\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divdf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "23bbf425544944a6ad201d4980c5768f6fcbc7ac", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-divhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI), vector_size (2))) int_t;\n+\n+void\n+lt_divhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivw3 *12(%ap),*8(%ap),%r0\t# 34\t[c=76]  *divhi3_ccn/1\n+\tjlss .L2\t\t\t# 36\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 33\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5401b6b23e24d5e3b903810ed7df9bcde3964303", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-divqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI), vector_size (1))) int_t;\n+\n+void\n+lt_divqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x / *y;\n+  if (v[0] < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivb3 *12(%ap),*8(%ap),%r0\t# 34\t[c=76]  *divqi3_ccn/1\n+\tjlss .L2\t\t\t# 36\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 33\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "89d5930bcc5945e95339be3d916156fa683d34da", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-divsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+lt_divsf (float_t x, float_t y)\n+{\n+  x /= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivf3 8(%ap),4(%ap),%r0\t\t# 28\t[c=60]  *divsf3_ccn/1\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5c50635d8971666ef38f5a08e1a3dcd2956959c6", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-divsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-divsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_divsi (int_t x, int_t y)\n+{\n+  x /= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tdivl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=60]  *divsi3_ccn/1\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"divsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5dcc89aad35b7f5ad994e2ebb4df837c9e00d77b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-extendhisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendhisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendhisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendhisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (HI))) short_t;\n+\n+int_t\n+lt_extendhisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtwl 4(%ap),%r0\t\t# 29\t[c=20]  *extendhisi2_ccn\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendhisi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "9ec5a415bb5bf2b037c3f3432e10218b947a7ea4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-extendqisi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendqisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendqisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extendqisi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+typedef int __attribute__ ((mode (QI))) short_t;\n+\n+int_t\n+lt_extendqisi (int_t x)\n+{\n+  x = (short_t) x;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtbl 4(%ap),%r0\t\t# 29\t[c=20]  *extendqisi2_ccn\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extendqisi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "a10435ba78c557aed5ccc14afc8799ba6fb38ab9", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-extvsi.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+lt_extvsi (bit_t x)\n+{\n+  int_t v;\n+\n+  v = x.i;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\textv $7,$18,4(%ap),%r0\t\t# 28\t[c=68]  *extv_non_const_2_ccn\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "e019d741193a410129456f5d313bcc3085238ab8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-extzvsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-extzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+lt_extzvsi (uint_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x >> y;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 31\t[c=40]  *subqi3/1\n+\textzv 8(%ap),%r0,4(%ap),%r0\t# 32\t[c=76]  *extzv_non_const_2_ccn\n+\tjlss .L1\t\t\t# 34\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 30\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extzv\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5d63a22d0983fe3cef947db8c1c68153dd643f0b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixdfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_fixdfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdw 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncdfhi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "d1616558a188ff10155861e3758c75738e6ee5b8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixdfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_fixdfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdb 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncdfqi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "b07d1dedab624aa1782a4b17f01012da634b82b6", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixdfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixdfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_fixdfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdl 4(%ap),%r0\t\t# 28\t[c=36]  *fix_truncdfsi2_ccn\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncdfsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "42c8d74e9c45df7b5bc676d120fcda278d5bbbb8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixsfhi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_fixsfhi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfw 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncsfhi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "49327ee7eaa6050520bbddf14587760ba419a7f0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixsfqi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_fixsfqi (int_t *w, float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfb 8(%ap),%r0\t\t# 27\t[c=36]  *fix_truncsfqi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "3d172910aeb35585c669e9684493f3612d4e57e7", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-fixsfsi.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-fixsfsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_fixsfsi (float_t x)\n+{\n+  int_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtfl 4(%ap),%r0\t\t# 28\t[c=36]  *fix_truncsfsi2_ccn\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"fix_truncsfsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "cefc71ef9086edc3b9fd8276cb79ab634d0e6dab", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-floatsisf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-floatsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-floatsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-floatsisf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+float_t\n+lt_floatsisf (int_t x)\n+{\n+  float_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtlf 4(%ap),%r0\t\t# 27\t[c=32]  *floatsisf2_ccn\n+\tjlss .L1\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 26\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"floatsisf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "52f97ef455931579b0f364a43359dc4dbfb40be1", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-insvsi.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-insvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-insvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-insvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef union\n+  {\n+    int_t i;\n+    struct\n+      {\n+\tint_t h : 7;\n+\tint_t i : 18;\n+\tint_t l : 7;\n+      } b;\n+  }\n+bit_t;\n+\n+int\n+lt_insvsi (bit_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x.b.i;\n+  x.b.i = y;\n+  if (v < 0)\n+    return x.i;\n+  else\n+    return x.i + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 37\t[c=16]  *movsi_2\n+\textv $7,$18,%r0,%r1\t\t# 38\t[c=60]  *extv_non_const_2_ccn\n+\tinsv 8(%ap),$7,$18,%r0\t\t# 8\t[c=16]  *insv_2\n+\tjlss .L1\t\t\t# 40\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 36\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"extv.*insv.*branch\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "edd91e1d79181935a3309c510f19f31a07df1395", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-iorhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_iorhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisw3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *iorhi3_ccn/2\n+\tjlss .L2\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "82a9e04e59a3b14265c2b04642172231af8bf0a0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-iorqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_iorqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x | *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisb3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *iorqi3_ccn/2\n+\tjlss .L2\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "1246686831272677ab06b3880c0717509b095b87", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-iorsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-iorsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_iorsi (int_t x, int_t y)\n+{\n+  x |= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbisl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=28]  *iorsi3_ccn/2\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"iorsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "02b4c5abf84b819658b63e6f1ab6c048adc39172", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-movdf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+lt_movdf (float_t x)\n+{\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovd 4(%ap),%r0\t\t\t# 34\t[c=24]  *movdf_ccn/1\n+\tjlss .L1\t\t\t# 36\t[c=26]  *branch_ccn\n+\taddd2 $0d2.0e+0,%r0\t\t# 33\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movdf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "51ce5b7eacee629eabf94688671df1d0eef3f09f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-movhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_movhi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r0\t\t# 27\t[c=24]  *movhi_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "fb5450cc63f3e5a3058f909f02c7eeb180bea3e3", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-movqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_movqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = *x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r0\t\t# 27\t[c=24]  *movqi_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "1669f16209d093344abb00a1d24b93fda3e37ef9", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-movsf.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+lt_movsf (float_t x)\n+{\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovf 4(%ap),%r0\t\t\t# 33\t[c=16]  *movsf_ccn/1\n+\tjlss .L1\t\t\t# 35\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 32\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "b4cd073352b7ff5f91d3275e01183a677c58943c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-movsi.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-movsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_movsi (int_t x)\n+{\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 34\t[c=16]  *movsi_2_ccn\n+\tjlss .L1\t\t\t# 36\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 33\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"movsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "1f9279ba662e9c9da199f0139e7af9f8de5a900f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-muldf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-muldf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-muldf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-muldf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+lt_muldf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmuld3 4(%ap),12(%ap),%r0\t# 29\t[c=80]  *muldf3_ccn/2\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"muldf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "29a77e39d19cb19a3b39688d9500fd52cbc9896c", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-mulhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_mulhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulw3 *8(%ap),*12(%ap),%r0\t# 29\t[c=72]  *mulhi3_ccn/2\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "844456e60e405f06ebe2d65dd3d05d0542645bb0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-mulqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_mulqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x * *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulb3 *8(%ap),*12(%ap),%r0\t# 29\t[c=72]  *mulqi3_ccn/2\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "ea1c083f4aa33767ccbf31ba9f6d00b5eaea8d51", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-mulsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+lt_mulsf (float_t x, float_t y)\n+{\n+  x *= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmulf3 4(%ap),8(%ap),%r0\t\t# 28\t[c=52]  *mulsf3_ccn/2\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "5f46c8c573bd97a920b7f1c4857e3ced135a0001", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-mulsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-mulsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_mulsi (int_t x, int_t y)\n+{\n+  x *= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmull3 4(%ap),8(%ap),%r0\t\t# 29\t[c=56]  *mulsi3_ccn/2\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"mulsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "59d1d9a5dbf49cc05639ce785578af39f3c37860", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-nothi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-nothi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-nothi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-nothi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_nothi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomw *8(%ap),%r0\t\t# 27\t[c=24]  *one_cmplhi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 26\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "7a2ef96e77e78a85a0420c3563ac9978529f590d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-notqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_notqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = ~*x;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcomb *8(%ap),%r0\t\t# 27\t[c=24]  *one_cmplqi2_ccn\n+\tjlss .L2\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 26\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "c3586b198fdbe962c97db1bebe73ee0c89aac032", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-notsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-notsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_notsi (int_t x)\n+{\n+  x = ~x;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmcoml 4(%ap),%r0\t\t# 28\t[c=16]  *one_cmplsi2_ccn\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 27\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"one_cmplsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "7f5c89d14abcfe1c01d29053a45fdbc69c60772f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-rotlsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotlsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotlsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotlsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+lt_rotlsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x << y | x >> 8 * sizeof (x) - y;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\trotl 8(%ap),4(%ap),%r0\t\t# 32\t[c=40]  *rotlsi3_ccn\n+\tjlss .L1\t\t\t# 34\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotlsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "6c9daf4b73e772095803097ce59e867708308f65", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-rotrsi.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotrsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotrsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-rotrsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) ulong_t;\n+typedef int __attribute__ ((mode (SI))) long_t;\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+ulong_t\n+lt_rotrsi (ulong_t x, int_t y)\n+{\n+  long_t v;\n+\n+  v = x >> y | x << 8 * sizeof (x) - y;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmnegb 8(%ap),%r0\t\t# 33\t[c=16]  *negqi2\n+\trotl %r0,4(%ap),%r0\t\t# 34\t[c=36]  *rotrnegsi3_2_ccn\n+\tjlss .L1\t\t\t# 36\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"rotrnegsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "fb7bb1d2fe21e4d378d6b10ff84f4454940dbec1", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-subdf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subdf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (DF))) float_t;\n+\n+float_t\n+lt_subdf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubd3 12(%ap),4(%ap),%r0\t# 29\t[c=68]  *subdf3_ccn/1\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddd2 $0d2.0e+0,%r0\t\t# 28\t[c=56]  *adddf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subdf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "d06af83554e823388db2dac5c329465af483d14f", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-subhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_subhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubw3 *12(%ap),*8(%ap),%r0\t# 29\t[c=64]  *subhi3_ccn/1\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 28\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "254ad715e73eee959d57d0c8e63250a0846c37ab", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-subqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_subqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 *12(%ap),*8(%ap),%r0\t# 29\t[c=64]  *subqi3_ccn/1\n+\tjlss .L2\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 28\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "26181d801740a19d4b0f09bdf2a9e8a06528c93b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-subsf.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) float_t;\n+\n+float_t\n+lt_subsf (float_t x, float_t y)\n+{\n+  x -= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubf3 8(%ap),4(%ap),%r0\t\t# 28\t[c=48]  *subsf3_ccn/1\n+\tjlss .L1\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 27\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "6e98e4cbbc7856a295a3c0f3c0144b648fe2cf25", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-subsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_subsi (int_t x, int_t y)\n+{\n+  x -= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=48]  *subsi3_ccn/1\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "98fac66bd37747c51f1696f52c77e79754076021", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-truncdfsf.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-truncdfsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-truncdfsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-truncdfsf.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef float __attribute__ ((mode (SF))) single_t;\n+typedef float __attribute__ ((mode (DF))) double_t;\n+\n+single_t\n+lt_truncdfsf (double_t x)\n+{\n+  single_t v;\n+\n+  v = x;\n+  if (v < 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtdf 4(%ap),%r0\t\t# 27\t[c=20]  *truncdfsf2_ccn\n+\tjlss .L1\t\t\t# 29\t[c=26]  *branch_ccn\n+\taddf2 $0f2.0e+0,%r0\t\t# 26\t[c=36]  *addsf3/0\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"truncdfsf\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "be36e0a3334aa5748b88731d445c1ae590eb588a", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-xorhi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+lt_xorhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x ^ *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorw3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *xorhi3_ccn/2\n+\tjlss .L2\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorhi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "51b05e711fc9987f27ff6c6d5f49005738ab90d4", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-xorqi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_xorqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x ^ *y;\n+  if (v < 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorb3 *12(%ap),*8(%ap),%r0\t# 28\t[c=44]  *xorqi3_ccn/2\n+\tjlss .L2\t\t\t# 30\t[c=26]  *branch_ccn\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "439e36d965788a36c960b45b8571e6fa55938ae0", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-lt-xorsi.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-lt-xorsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_xorsi (int_t x, int_t y)\n+{\n+  x ^= y;\n+  if (x < 0)\n+    return x;\n+  else\n+    return x + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\txorl3 8(%ap),4(%ap),%r0\t\t# 29\t[c=28]  *xorsi3_ccn/2\n+\tjlss .L1\t\t\t# 31\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 28\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"xorsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "7965322d93fd04b0e8e60282e51b0f799db8c2b8", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-ltu-subhi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+ltu_subhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (*x < *y)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r2\t\t# 28\t[c=24]  *movhi\n+\tmovw *12(%ap),%r1\t\t# 29\t[c=24]  *movhi\n+\tsubw3 %r1,%r2,%r0\t\t# 30\t[c=32]  *subhi3_cc/1\n+\tjlssu .L2\t\t\t# 32\t[c=26]  *branch_cc\n+\taddw2 $2,%r0\t\t\t# 27\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subhi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "3ba1d0f37f0ee611b369c54f5983dc1bf9f3f61b", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-ltu-subqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+ltu_subqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x - *y;\n+  if (*x < *y)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r2\t\t# 28\t[c=24]  *movqi\n+\tmovb *12(%ap),%r1\t\t# 29\t[c=24]  *movqi\n+\tsubb3 %r1,%r2,%r0\t\t# 30\t[c=32]  *subqi3_cc/1\n+\tjlssu .L2\t\t\t# 32\t[c=26]  *branch_cc\n+\taddb2 $2,%r0\t\t\t# 27\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subqi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "542ff809a357091e76545e228175f32f7ced21cd", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-ltu-subsi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-ltu-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+ltu_subsi (int_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x - y;\n+  if (x < y)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r2\t\t\t# 27\t[c=16]  *movsi_2\n+\tmovl 8(%ap),%r1\t\t\t# 28\t[c=16]  *movsi_2\n+\tsubl3 %r1,%r2,%r0\t\t# 29\t[c=32]  *subsi3_cc/1\n+\tjlssu .L1\t\t\t# 31\t[c=26]  *branch_cc\n+\taddl2 $2,%r0\t\t\t# 26\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 1 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "033b1195c1d05b3f32293de39884232ae3a7b76d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-xx-addsi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-addsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-addsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-addsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+xx_addsi (int_t x, int_t y)\n+{\n+  x += y;\n+  if (x == 0)\n+    return x;\n+  else if (x >= 0)\n+    return x + 2;\n+  else\n+    return x - 3;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddl3 4(%ap),8(%ap),%r0\t\t# 47\t[c=48]  *addsi3_ccnz\n+\tjeql .L1\t\t\t# 49\t[c=26]  *branch_ccz\n+\tjlss .L3\t\t\t# 46\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 44\t[c=32]  *addsi3\n+\tret\t\t\t\t# 39\t[c=0]  return\n+.L3:\n+\tsubl2 $3,%r0\t\t\t# 43\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 2 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"addsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "8f3e4ff8901ece4ed05b02d3abb5646595b7882d", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-xx-insvsi.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-insvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-insvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xx-insvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef union\n+  {\n+    int_t i;\n+    struct\n+      {\n+\tint_t h : 7;\n+\tint_t i : 18;\n+\tint_t l : 7;\n+      } b;\n+  }\n+bit_t;\n+\n+int\n+xx_insvsi (bit_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x.b.i;\n+  x.b.i = y;\n+  if (v == 0)\n+    return x.i;\n+  else if (v >= 0)\n+    return x.i + 2;\n+  else\n+    return x.i - 3;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r0\t\t\t# 50\t[c=16]  *movsi_2\n+\textv $7,$18,%r0,%r1\t\t# 51\t[c=60]  *extv_non_const_2_ccnz\n+\tinsv 8(%ap),$7,$18,%r0\t\t# 8\t[c=16]  *insv_2\n+\tjeql .L1\t\t\t# 53\t[c=26]  *branch_ccz\n+\tjlss .L4\t\t\t# 49\t[c=26]  *branch_ccn\n+\taddl2 $2,%r0\t\t\t# 47\t[c=32]  *addsi3\n+\tret\t\t\t\t# 42\t[c=0]  return\n+.L4:\n+\tsubl2 $3,%r0\t\t\t# 46\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 2 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"extv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"extv.*insv.*branch\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "b9f730445fd10ee2ea72c512338b293833be0ee5", "filename": "gcc/testsuite/gcc.target/vax/cmpelim-xxu-subsi.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xxu-subsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xxu-subsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fcmpelim-xxu-subsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-cmpelim -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+xxu_subsi (int_t x, int_t y)\n+{\n+  int_t v;\n+\n+  v = x - y;\n+  if (x == y)\n+    return v;\n+  else if (x >= y)\n+    return v + 2;\n+  else\n+    return v - 3;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r2\t\t\t# 39\t[c=16]  *movsi_2\n+\tmovl 8(%ap),%r1\t\t\t# 40\t[c=16]  *movsi_2\n+\tsubl3 %r1,%r2,%r0\t\t# 41\t[c=32]  *subsi3_cc/1\n+\tjeql .L1\t\t\t# 43\t[c=26]  *branch_ccz\n+\tjlssu .L3\t\t\t# 38\t[c=26]  *branch_cc\n+\taddl2 $2,%r0\t\t\t# 36\t[c=32]  *addsi3\n+\tret\t\t\t\t# 31\t[c=0]  return\n+.L3:\n+\tsubl2 $3,%r0\t\t\t# 35\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"deleting insn with uid\" 2 \"cmpelim\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"subsi\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "485b32497cace593a65475afea6cd7a82f701dc1", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-andhi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v == 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitw *8(%ap),*12(%ap)\t\t# 50\t[c=50]  *bithi_ccz\n+\tjneq .L3\t\t\t# 40\t[c=26]  *branch_ccz\n+\tmovw $1,%r0\t\t\t# 36\t[c=4]  *movhi\n+\tmovw %r0,*4(%ap)\t\t# 34\t[c=4]  *movhi\n+\tret\t\t\t\t# 46\t[c=0]  return\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bithi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "ffea453b5ca5cb5fc4a2d774e3a8e63c95bf0fe4", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-andqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v == 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitb *8(%ap),*12(%ap)\t\t# 50\t[c=50]  *bitqi_ccz\n+\tjneq .L3\t\t\t# 40\t[c=26]  *branch_ccz\n+\tmovb $1,%r0\t\t\t# 36\t[c=4]  *movqi\n+\tmovb %r0,*4(%ap)\t\t# 34\t[c=4]  *movqi\n+\tret\t\t\t\t# 46\t[c=0]  return\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "b84c35299ea5639a7bd50338e77d866d35a9371a", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-andsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_andsi (int_t x, int_t y)\n+{\n+  x &= y;\n+  if (x == 0)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitl 4(%ap),8(%ap)\t\t# 52\t[c=34]  *bitsi_ccz\n+\tjneq .L6\t\t\t# 41\t[c=26]  *branch_ccz\n+\tmovl $1,%r0\t\t\t# 36\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 47\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "3e09a78a7e9e7799a4d5a18f83569ed2a1724b49", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-cmpvsi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+eq_cmpvsi (bit_t x, int_t y)\n+{\n+  if (x.i == y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpv_ccz\n+\tjeql .L3\t\t\t# 39\t[c=26]  *branch_ccz\n+\tmovl $2,%r0\t\t\t# 36\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 31\t[c=0]  return\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpv\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "3713c1ddd474180ba7a43ce923705d903f451989", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-cmpzvsi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-cmpzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+eq_extzvsi (bit_t x, int_t y)\n+{\n+  if (x.i == y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpzv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpzv_ccz\n+\tjeql .L3\t\t\t# 39\t[c=26]  *branch_ccz\n+\tmovl $2,%r0\t\t\t# 36\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 31\t[c=0]  return\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpzv\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "8a56451cd16ac0b88237b4ad96bb38ed66a61d1b", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzhi-0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-0.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_ctzhi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (*x);\n+  if (*x == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovw *8(%ap),%r1\t\t# 34\t[c=24]  *movhi\n+\tffs $0,$16,%r1,%r0\t\t# 49\t[c=4]  *ctzhi2_ccz\n+\tjeql .L3\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 33\t[c=32]  *addhi3\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 2 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "db76da433e44339a4532ad7ff6afa99a9ba1a82b", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzhi-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzhi-1.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_ctzhi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (*x + 1);\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtwl *8(%ap),%r0\t\t# 34\t[c=28]  *extendhisi2\n+\tincl %r0\t\t\t# 35\t[c=32]  *addsi3\n+\tffs $0,$32,%r0,%r0\t\t# 36\t[c=4]  *ctzsi2\n+\ttstl %r0\t\t\t# 37\t[c=6]  *cmpsi_ccz/0\n+\tjeql .L2\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddw2 $2,%r0\t\t\t# 33\t[c=32]  *addhi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-not \"Splitting with gen_peephole2\" \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"cmpsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "b6078bc2c781f78f20ac023da9e1cfcaa56777e4", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzqi-0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-0.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_ctzqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (*x);\n+  if (*x == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovb *8(%ap),%r1\t\t# 34\t[c=24]  *movqi\n+\tffs $0,$8,%r1,%r0\t\t# 49\t[c=4]  *ctzqi2_ccz\n+\tjeql .L3\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 33\t[c=32]  *addqi3\n+.L3:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 2 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "44311b98205a09fbbdfb2adc9f1bf55b94b5b26b", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzqi-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzqi-1.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_ctzqi (int_t *w, int_t *x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (*x + 1);\n+  if (v == 0)\n+    *w = v;\n+  else\n+    *w = v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcvtbl *8(%ap),%r0\t\t# 34\t[c=28]  *extendqisi2\n+\tincl %r0\t\t\t# 35\t[c=32]  *addsi3\n+\tffs $0,$32,%r0,%r0\t\t# 36\t[c=4]  *ctzsi2\n+\ttstl %r0\t\t\t# 37\t[c=6]  *cmpsi_ccz/0\n+\tjeql .L2\t\t\t# 38\t[c=26]  *branch_ccz\n+\taddb2 $2,%r0\t\t\t# 33\t[c=32]  *addqi3\n+.L2:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-not \"Splitting with gen_peephole2\" \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"cmpsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "bf84bdc08009d0c1d88498ca51ef6f160327ffc6", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzsi-0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-0.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_ctzsi (int_t x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (x);\n+  if (x == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r1\t\t\t# 32\t[c=16]  *movsi_2\n+\tffs $0,$32,%r1,%r0\t\t# 45\t[c=4]  *ctzsi2_ccz\n+\tjeql .L1\t\t\t# 35\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 31\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "0cc40ed363c3664da371e93e5c4110dd99029715", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ctzsi-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ctzsi-1.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_ctzsi (int_t x)\n+{\n+  int_t v;\n+\n+  v = __builtin_ctz (x + 1);\n+  if (v == 0)\n+    return v;\n+  else\n+    return v + 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\taddl3 4(%ap),$1,%r0\t\t# 33\t[c=40]  *addsi3\n+\tffs $0,$32,%r0,%r0\t\t# 34\t[c=4]  *ctzsi2\n+\ttstl %r0\t\t\t# 35\t[c=6]  *cmpsi_ccz/0\n+\tjeql .L1\t\t\t# 36\t[c=26]  *branch_ccz\n+\taddl2 $2,%r0\t\t\t# 32\t[c=32]  *addsi3\n+.L1:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-not \"Splitting with gen_peephole2\" \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"cmpsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "50a6cdb18bf75e146d75f9d8e75e9dcba6f60e00", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ffshi.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffshi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffshi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffshi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+eq_ffshi (int_t *w, int_t *x)\n+{\n+  *w = __builtin_ffs (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$16,*8(%ap),%r1\t\t# 40\t[c=28]  *ctzhi2_ccz\n+\tjneq .L2\t\t\t# 30\t[c=26]  *branch_ccz\n+\tmnegl $1,%r1\t\t\t# 26\t[c=8]  *negsi2\n+.L2:\n+\taddw3 %r1,$1,*4(%ap)\t\t# 25\t[c=32]  *addhi3\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzhi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "0b3ef0ff8488268eed4bbefd32301f2c94d06fd4", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ffsqi.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffsqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffsqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffsqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+eq_ffsqi (int_t *w, int_t *x)\n+{\n+  *w = __builtin_ffs (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$8,*8(%ap),%r1\t\t# 40\t[c=28]  *ctzqi2_ccz\n+\tjneq .L2\t\t\t# 30\t[c=26]  *branch_ccz\n+\tmnegl $1,%r1\t\t\t# 26\t[c=8]  *negsi2\n+.L2:\n+\taddb3 %r1,$1,*4(%ap)\t\t# 25\t[c=32]  *addqi3\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzqi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "0e321216020c0167b72abe71e726264598224804", "filename": "gcc/testsuite/gcc.target/vax/peephole2-eq-ffssi.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffssi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffssi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-eq-ffssi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+eq_ffssi (int_t x)\n+{\n+  return __builtin_ffs (x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r1\t\t\t# 28\t[c=16]  *movsi_2\n+\tffs $0,$32,%r1,%r0\t\t# 41\t[c=4]  *ctzsi2_ccz\n+\tjneq .L2\t\t\t# 31\t[c=26]  *branch_ccz\n+\tmnegl $1,%r0\t\t\t# 27\t[c=8]  *negsi2\n+.L2:\n+\tincl %r0\t\t\t# 26\t[c=32]  *addsi3\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"ctzsi\\[^ \\]*_ccz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccz\\n\" } } */"}, {"sha": "9eb40c0bc8c6b2e0348cea2c6ad62bd5443b2bd6", "filename": "gcc/testsuite/gcc.target/vax/peephole2-le-andhi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v <= 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitw *8(%ap),*12(%ap)\t\t# 56\t[c=50]  *bithi_ccnz\n+\tjleq .L6\t\t\t# 46\t[c=26]  *branch_ccnz\n+\tmovw $2,%r0\t\t\t# 41\t[c=4]  *movhi\n+\tmovw %r0,*4(%ap)\t\t# 40\t[c=4]  *movhi\n+\tret\t\t\t\t# 52\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bithi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "14797b0c23ae0afa99cb9600ec750984eb8a9acd", "filename": "gcc/testsuite/gcc.target/vax/peephole2-le-andqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+le_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v <= 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitb *8(%ap),*12(%ap)\t\t# 56\t[c=50]  *bitqi_ccnz\n+\tjleq .L6\t\t\t# 46\t[c=26]  *branch_ccnz\n+\tmovb $2,%r0\t\t\t# 41\t[c=4]  *movqi\n+\tmovb %r0,*4(%ap)\t\t# 40\t[c=4]  *movqi\n+\tret\t\t\t\t# 52\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitqi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "6d1193ee239160f431262fee3f6d9dce27181ae9", "filename": "gcc/testsuite/gcc.target/vax/peephole2-le-andsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+le_andsi (int_t x, int_t y)\n+{\n+  x &= y;\n+  if (x <= 0)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitl 4(%ap),8(%ap)\t\t# 58\t[c=34]  *bitsi_ccnz\n+\tjgtr .L6\t\t\t# 47\t[c=26]  *branch_ccnz\n+\tmovl $1,%r0\t\t\t# 42\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 53\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitsi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "dd268493c7703469a1f3624c531596c38ccb77a9", "filename": "gcc/testsuite/gcc.target/vax/peephole2-le-cmpvsi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+le_cmpvsi (bit_t x, int_t y)\n+{\n+  if (x.i <= y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpv_ccnz\n+\tjgtr .L6\t\t\t# 39\t[c=26]  *branch_ccnz\n+\tmovl $1,%r0\t\t\t# 35\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 45\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "3cf028a956013671beafe144e03adae989f63af6", "filename": "gcc/testsuite/gcc.target/vax/peephole2-le-cmpzvsi.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-le-cmpzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+le_cmpzvsi (uint_t x, int_t y, int_t z)\n+{\n+  int_t v;\n+\n+  v = x >> y;\n+  if (v <= z)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 39\t[c=40]  *subqi3/1\n+\tcmpzv 8(%ap),%r0,4(%ap),12(%ap)\t# 53\t[c=96]  *cmpzv_ccnz\n+\tjgtr .L6\t\t\t# 42\t[c=26]  *branch_ccnz\n+\tmovl $1,%r0\t\t\t# 37\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 48\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpzv\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "0a0468b7988ca5638aaa3642c750770e359f1ab4", "filename": "gcc/testsuite/gcc.target/vax/peephole2-leu-cmpvsi.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+leu_cmpvsi (bit_t x, uint_t y)\n+{\n+  uint_t v;\n+\n+  v = x.i;\n+  if (v <= y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpv_cc\n+\tjgtru .L6\t\t\t# 39\t[c=26]  *branch_cc\n+\tmovl $1,%r0\t\t\t# 35\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 45\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpv\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "ca7cfe4dff9cf0d6d1330d28bd305c5aa1ca7844", "filename": "gcc/testsuite/gcc.target/vax/peephole2-leu-cmpzvsi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-leu-cmpzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+leu_cmpzvsi (uint_t x, int_t y, uint_t z)\n+{\n+  if (x >> y <= z)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 39\t[c=40]  *subqi3/1\n+\tcmpzv 8(%ap),%r0,4(%ap),12(%ap)\t# 53\t[c=96]  *cmpzv_cc\n+\tjgtru .L6\t\t\t# 42\t[c=26]  *branch_cc\n+\tmovl $1,%r0\t\t\t# 37\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 48\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpzv\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "9eb40c0bc8c6b2e0348cea2c6ad62bd5443b2bd6", "filename": "gcc/testsuite/gcc.target/vax/peephole2-lt-andhi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andhi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+void\n+le_andhi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v <= 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitw *8(%ap),*12(%ap)\t\t# 56\t[c=50]  *bithi_ccnz\n+\tjleq .L6\t\t\t# 46\t[c=26]  *branch_ccnz\n+\tmovw $2,%r0\t\t\t# 41\t[c=4]  *movhi\n+\tmovw %r0,*4(%ap)\t\t# 40\t[c=4]  *movhi\n+\tret\t\t\t\t# 52\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bithi\\[^ \\]*_ccnz(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccnz\\n\" } } */"}, {"sha": "d71c46dad866e4e492034414383efea871866132", "filename": "gcc/testsuite/gcc.target/vax/peephole2-lt-andqi.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andqi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+void\n+lt_andqi (int_t *w, int_t *x, int_t *y)\n+{\n+  int_t v;\n+\n+  v = *x & *y;\n+  if (v < 0)\n+    *w = 1;\n+  else\n+    *w = 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitb *8(%ap),*12(%ap)\t\t# 68\t[c=50]  *bitqi_ccn\n+\tjlss .L6\t\t\t# 58\t[c=26]  *branch_ccn\n+\tmovb $2,%r0\t\t\t# 53\t[c=4]  *movqi\n+\tmovb %r0,*4(%ap)\t\t# 52\t[c=4]  *movqi\n+\tret\t\t\t\t# 64\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitqi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "4045b360ab593f3c77bafc0aa0cab497b45978b1", "filename": "gcc/testsuite/gcc.target/vax/peephole2-lt-andsi.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-andsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+int_t\n+lt_andsi (int_t x, int_t y)\n+{\n+  x &= y;\n+  if (x < 0)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tbitl 4(%ap),8(%ap)\t\t# 68\t[c=34]  *bitsi_ccn\n+\tjgeq .L6\t\t\t# 57\t[c=26]  *branch_ccn\n+\tmovl $1,%r0\t\t\t# 52\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 63\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(cmpz?|tst). \" } } */\n+/* { dg-final { scan-assembler \"bitsi\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "a50f322d488188227fbb61b2543ade2697f72bd1", "filename": "gcc/testsuite/gcc.target/vax/peephole2-lt-cmpvsi.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+lt_cmpvsi (bit_t x, int_t y)\n+{\n+  if (x.i < y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpv_ccn\n+\tjgeq .L6\t\t\t# 39\t[c=26]  *branch_ccn\n+\tmovl $1,%r0\t\t\t# 35\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 45\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpv\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "de386431cfa897a4be1c2b56b4a86168f56029a1", "filename": "gcc/testsuite/gcc.target/vax/peephole2-lt-cmpzvsi.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-lt-cmpzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+lt_cmpzvsi (uint_t x, int_t y, int_t z)\n+{\n+  int_t v;\n+\n+  v = x >> y;\n+  if (v < z)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 39\t[c=40]  *subqi3/1\n+\tcmpzv 8(%ap),%r0,4(%ap),12(%ap)\t# 53\t[c=96]  *cmpzv_ccn\n+\tjgeq .L6\t\t\t# 42\t[c=26]  *branch_ccn\n+\tmovl $1,%r0\t\t\t# 37\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 48\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpzv\\[^ \\]*_ccn(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_ccn\\n\" } } */"}, {"sha": "8eba5051278a8e87eebd1981a82c71df4c553dc1", "filename": "gcc/testsuite/gcc.target/vax/peephole2-ltu-cmpvsi.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef signed int __attribute__ ((mode (SI))) int_t;\n+typedef struct\n+  {\n+    int_t h : 7;\n+    int_t i : 18;\n+    int_t l : 7;\n+  }\n+bit_t;\n+\n+int_t\n+ltu_cmpvsi (bit_t x, uint_t y)\n+{\n+  uint_t v;\n+\n+  v = x.i;\n+  if (v < y)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tcmpv $7,$18,4(%ap),8(%ap)\t# 50\t[c=88]  *cmpv_cc\n+\tjgequ .L6\t\t\t# 39\t[c=26]  *branch_cc\n+\tmovl $1,%r0\t\t\t# 35\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 45\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpv\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}, {"sha": "9cdee86b18e7eb5b9c41a7a90e3afb5196bccedd", "filename": "gcc/testsuite/gcc.target/vax/peephole2-ltu-cmpzvsi.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpzvsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f47fca1d0fc2c6efef791d6dd115abd9d221733/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpzvsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpeephole2-ltu-cmpzvsi.c?ref=4f47fca1d0fc2c6efef791d6dd115abd9d221733", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2 -dp\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (SI))) uint_t;\n+typedef int __attribute__ ((mode (SI))) int_t;\n+\n+uint_t\n+ltu_cmpzvsi (uint_t x, int_t y, uint_t z)\n+{\n+  if (x >> y < z)\n+    return 1;\n+  else\n+    return 2;\n+}\n+\n+/* Expect assembly like:\n+\n+\tsubb3 8(%ap),$32,%r0\t\t# 39\t[c=40]  *subqi3/1\n+\tcmpzv 8(%ap),%r0,4(%ap),12(%ap)\t# 53\t[c=96]  *cmpzv_cc\n+\tjgequ .L6\t\t\t# 42\t[c=26]  *branch_cc\n+\tmovl $1,%r0\t\t\t# 37\t[c=4]  *movsi_2\n+\tret\t\t\t\t# 48\t[c=0]  return\n+.L6:\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler-not \"\\t(bit|cmp|tst)\\[bwl\\] \" } } */\n+/* { dg-final { scan-assembler \"cmpzv\\[^ \\]*_cc(/\\[0-9\\]+)?\\n\" } } */\n+/* { dg-final { scan-assembler \"branch_cc\\n\" } } */"}]}