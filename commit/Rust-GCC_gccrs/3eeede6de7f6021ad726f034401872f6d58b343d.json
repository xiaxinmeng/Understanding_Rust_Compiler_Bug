{"sha": "3eeede6de7f6021ad726f034401872f6d58b343d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlZWRlNmRlN2Y2MDIxYWQ3MjZmMDM0NDAxODcyZjZkNThiMzQzZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-22T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-22T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "3b02991161e189e91c3f5522b198517d7224d19b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b02991161e189e91c3f5522b198517d7224d19b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eeede6de7f6021ad726f034401872f6d58b343d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eeede6de7f6021ad726f034401872f6d58b343d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eeede6de7f6021ad726f034401872f6d58b343d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eeede6de7f6021ad726f034401872f6d58b343d/comments", "author": null, "committer": null, "parents": [{"sha": "09698e44c766c4a05ee463d2e36bc1fdac21dce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09698e44c766c4a05ee463d2e36bc1fdac21dce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09698e44c766c4a05ee463d2e36bc1fdac21dce4"}], "stats": {"total": 151, "additions": 150, "deletions": 1}, "files": [{"sha": "2323d79c4398c9100097e0511bf438519ef411c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eeede6de7f6021ad726f034401872f6d58b343d", "patch": "@@ -1,3 +1,100 @@\n+2020-08-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/extend.texi: Update links to Arm docs.\n+\t* doc/invoke.texi: Likewise.\n+\n+2020-08-21  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/96262\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_vec_shift_qihi_constant): Refine.\n+\n+2020-08-21  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR jit/63854\n+\t* gcc.c (set_static_spec): New.\n+\t(set_static_spec_owned): New.\n+\t(set_static_spec_shared): New.\n+\t(driver::maybe_putenv_COLLECT_LTO_WRAPPER): Use\n+\tset_static_spec_owned() to take ownership of lto_wrapper_file\n+\tsuch that it gets freed in driver::finalize.\n+\t(driver::maybe_run_linker): Use set_static_spec_shared() to\n+\tensure that we don't try and free() the static string \"ld\",\n+\talso ensuring that any previously-allocated string in\n+\tlinker_name_spec is freed. Likewise with argv0.\n+\t(driver::finalize): Use set_static_spec_shared() when resetting\n+\tspecs that previously had allocated strings; remove if(0)\n+\taround call to free().\n+\n+2020-08-21  Senthil Kumar Selvaraj  <saaadhu@gcc.gnu.org>\n+\n+\t* emit-rtl.c (try_split): Call copy_frame_info_to_split_insn\n+\tto split certain RTX_FRAME_RELATED_P insns.\n+\t* recog.c (copy_frame_info_to_split_insn): New function.\n+\t(peep2_attempt): Split copying of frame related info of\n+\tRTX_FRAME_RELATED_P insns into above function and call it.\n+\t* recog.h (copy_frame_info_to_split_insn): Declare it.\n+\n+2020-08-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/88808\n+\t* config/i386/i386.c (ix86_preferred_reload_class): Allow\n+\tQImode data go into mask registers.\n+\t* config/i386/i386.md: (*movhi_internal): Adjust constraints\n+\tfor mask registers.\n+\t(*movqi_internal): Ditto.\n+\t(*anddi_1): Support mask register operations\n+\t(*and<mode>_1): Ditto.\n+\t(*andqi_1): Ditto.\n+\t(*andn<mode>_1): Ditto.\n+\t(*<code><mode>_1): Ditto.\n+\t(*<code>qi_1): Ditto.\n+\t(*one_cmpl<mode>2_1): Ditto.\n+\t(*one_cmplsi2_1_zext): Ditto.\n+\t(*one_cmplqi2_1): Ditto.\n+\t(define_peephole2): Move constant 0/-1 directly into mask\n+\tregisters.\n+\t* config/i386/predicates.md (mask_reg_operand): New predicate.\n+\t* config/i386/sse.md (define_split): Add post-reload splitters\n+\tthat would convert \"generic\" patterns to mask patterns.\n+\t(*knotsi_1_zext): New define_insn.\n+\n+2020-08-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/x86-tune-costs.h (skylake_cost): Adjust cost\n+\tmodel.\n+\n+2020-08-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386.c (inline_secondary_memory_needed):\n+\tNo memory is needed between mask regs and gpr.\n+\t(ix86_hard_regno_mode_ok): Add condition TARGET_AVX512F for\n+\tmask regno.\n+\t* config/i386/i386.h (enum reg_class): Add INT_MASK_REGS.\n+\t(REG_CLASS_NAMES): Ditto.\n+\t(REG_CLASS_CONTENTS): Ditto.\n+\t* config/i386/i386.md: Exclude mask register in\n+\tdefine_peephole2 which is avaiable only for gpr.\n+\n+2020-08-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/71453\n+\t* config/i386/i386.h (struct processor_costs): Add member\n+\tmask_to_integer, integer_to_mask, mask_load[3], mask_store[3],\n+\tmask_move.\n+\t* config/i386/x86-tune-costs.h (ix86_size_cost, i386_cost,\n+\ti386_cost, pentium_cost, lakemont_cost, pentiumpro_cost,\n+\tgeode_cost, k6_cost, athlon_cost, k8_cost, amdfam10_cost,\n+\tbdver_cost, znver1_cost, znver2_cost, skylake_cost,\n+\tbtver1_cost, btver2_cost, pentium4_cost, nocona_cost,\n+\tatom_cost, slm_cost, intel_cost, generic_cost, core_cost):\n+\tInitialize mask_load[3], mask_store[3], mask_move,\n+\tinteger_to_mask, mask_to_integer for all target costs.\n+\t* config/i386/i386.c (ix86_register_move_cost): Using cost\n+\tmodel of mask registers.\n+\t(inline_memory_move_cost): Ditto.\n+\t(ix86_register_move_cost): Ditto.\n+\n 2020-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* config/vxworks.h (VXWORKS_ADDITIONAL_CPP_SPEC): Don't include"}, {"sha": "faac5049dd8e81f558276dcda99b7d4be113eeae", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3eeede6de7f6021ad726f034401872f6d58b343d", "patch": "@@ -1 +1 @@\n-20200821\n+20200822"}, {"sha": "47b1372de8552567520ef42eab6cd6381413f575", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eeede6de7f6021ad726f034401872f6d58b343d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3eeede6de7f6021ad726f034401872f6d58b343d", "patch": "@@ -1,3 +1,32 @@\n+2020-08-21  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr96262-1.c: New test.\n+\n+2020-08-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/bitwise_mask_op-1.c: New test.\n+\t* gcc.target/i386/bitwise_mask_op-2.c: New test.\n+\t* gcc.target/i386/bitwise_mask_op-3.c: New test.\n+\t* gcc.target/i386/avx512bw-pr88465.c: New testcase.\n+\t* gcc.target/i386/avx512bw-kunpckwd-1.c: Adjust testcase.\n+\t* gcc.target/i386/avx512bw-kunpckwd-3.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kmovb-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-kmovw-5.c: Ditto.\n+\t* gcc.target/i386/pr55342.c: Ditto.\n+\n+2020-08-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/spill_to_mask-1.c: New tests.\n+\t* gcc.target/i386/spill_to_mask-2.c: New tests.\n+\t* gcc.target/i386/spill_to_mask-3.c: New tests.\n+\t* gcc.target/i386/spill_to_mask-4.c: New tests.\n+\n+2020-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/95152\n+\t* gcc.dg/analyzer/pr95152-4.c: New test.\n+\t* gcc.dg/analyzer/pr95152-5.c: New test.\n+\n 2020-08-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96723"}, {"sha": "c807254c162046a4fb0997d61aa516e2de942eec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eeede6de7f6021ad726f034401872f6d58b343d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eeede6de7f6021ad726f034401872f6d58b343d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3eeede6de7f6021ad726f034401872f6d58b343d", "patch": "@@ -1,3 +1,26 @@\n+2020-08-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96736\n+\t* testsuite/17_intro/headers/c++1998/all_attributes.cc: Do not\n+\ttest \"cold\" on darwin.\n+\t* testsuite/17_intro/headers/c++2011/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2014/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2017/all_attributes.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2020/all_attributes.cc:\n+\tLikewise.\n+\n+2020-08-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96718\n+\t* testsuite/25_algorithms/pstl/feature_test-2.cc: Require\n+\ttbb-backend effective target.\n+\t* testsuite/25_algorithms/pstl/feature_test-3.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/feature_test-5.cc: Likewise.\n+\t* testsuite/25_algorithms/pstl/feature_test.cc: Likewise.\n+\n 2020-08-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/iterator_concepts.h [__STRICT_ANSI__]"}]}