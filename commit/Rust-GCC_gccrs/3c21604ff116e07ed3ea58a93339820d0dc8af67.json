{"sha": "3c21604ff116e07ed3ea58a93339820d0dc8af67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyMTYwNGZmMTE2ZTA3ZWQzZWE1OGE5MzMzOTgyMGQwZGM4YWY2Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-03T12:03:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-03T12:03:29Z"}, "message": "i386.md (isa): Add x64_sse4_noavx and x64_avx members.\n\n\t* config/i386/i386.md (isa): Add x64_sse4_noavx and x64_avx members.\n\t(enabled): Handle new members.\n\t* config/i386/sse.md (*vec_concatv2si): Merge from\n\t*vec_concatv2si_sse2 and vec_concatv2si_sse.\n\t(vec_concatv2di): Merge with *vec_concatv2di_rex64.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse2-init-v2di-2.c: Update scan assembler string.\n\nFrom-SVN: r198578", "tree": {"sha": "f73cb1ece280fa9a14c16ee845be2fc27666ad2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73cb1ece280fa9a14c16ee845be2fc27666ad2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c21604ff116e07ed3ea58a93339820d0dc8af67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c21604ff116e07ed3ea58a93339820d0dc8af67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c21604ff116e07ed3ea58a93339820d0dc8af67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c21604ff116e07ed3ea58a93339820d0dc8af67/comments", "author": null, "committer": null, "parents": [{"sha": "95c03b3683344ffe73b8116412045ad955a9e2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c03b3683344ffe73b8116412045ad955a9e2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c03b3683344ffe73b8116412045ad955a9e2a0"}], "stats": {"total": 110, "additions": 45, "deletions": 65}, "files": [{"sha": "2b906ebd785de314ebffc21cc12a3a73325c7e48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c21604ff116e07ed3ea58a93339820d0dc8af67", "patch": "@@ -1,3 +1,11 @@\n+2013-05-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (isa): Add x64_sse4_noavx and x64_avx members.\n+\t(enabled): Handle new members.\n+\t* config/i386/sse.md (*vec_concatv2si): Merge from\n+\t*vec_concatv2si_sse2 and vec_concatv2si_sse.\n+\t(vec_concatv2di): Merge with *vec_concatv2di_rex64.\n+\n 2013-05-03  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR tree-optimization/57027\n@@ -80,8 +88,7 @@\n \t* graphds.c (new_graph): Initialize obstack and allocate\n \tvertices from it.\n \t(add_edge): Allocate edge from the obstack.\n-\t(free_graph): Free the obstack instead of all edges and\n-\tvertices.\n+\t(free_graph): Free the obstack instead of all edges and vertices.\n \n 2013-05-02  Teresa Johnson  <tejohnson@google.com>\n \n@@ -321,8 +328,7 @@\n 2013-04-30  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57122\n-\t* cfghooks.c (split_edge): Properly check for the loop\n-\tlatch edge.\n+\t* cfghooks.c (split_edge): Properly check for the loop latch edge.\n \n 2013-04-30  Richard Biener  <rguenther@suse.de>\n \n@@ -333,7 +339,6 @@\n \n \tPR rtl-optimization/56957\n \tPR rtl-optimization/57105\n-\n \t* sel-sched.c (move_op_orig_expr_found): Remove insn_emitted\n \tvariable.  Use just INSN_UID for determining whether an insn\n \tshould be only disconnected from the insn stream.\n@@ -1151,7 +1156,7 @@\n 2013-04-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/57066\n-        * builtins.c (fold_builtin_logb): Return +Inf for -Inf.\n+\t* builtins.c (fold_builtin_logb): Return +Inf for -Inf.\n \n 2013-04-25  James Greenhalgh  <jame.greenhalgh@arm.com>\n \n@@ -1189,7 +1194,7 @@\n \t(*ngcsi_uxtw): New pattern.\n \n 2013-04-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-            Julian Brown  <julian@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.c (neon_builtin_type_mode): Add T_V4HF.\n \t(TB_DREG): Add T_V4HF."}, {"sha": "d0241db6bcfb87fb849cb3befcf0b4312a8ea349", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3c21604ff116e07ed3ea58a93339820d0dc8af67", "patch": "@@ -658,12 +658,16 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,x64,nox64,sse2,sse2_noavx,sse3,sse4,sse4_noavx,\n-\t\t    noavx,avx,avx2,noavx2,bmi2,fma4,fma\"\n+(define_attr \"isa\" \"base,x64,x64_sse4_noavx,x64_avx,nox64,sse2,sse2_noavx,\n+\t\t    sse3,sse4,sse4_noavx,avx,noavx,avx2,noavx2,bmi2,fma4,fma\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n+\t (eq_attr \"isa\" \"x64_sse4_noavx\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1 && !TARGET_AVX\")\n+\t (eq_attr \"isa\" \"x64_avx\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_AVX\")\n \t (eq_attr \"isa\" \"nox64\") (symbol_ref \"!TARGET_64BIT\")\n \t (eq_attr \"isa\" \"sse2\") (symbol_ref \"TARGET_SSE2\")\n \t (eq_attr \"isa\" \"sse2_noavx\")"}, {"sha": "ffd6be07dd8a1dd31467307c053bdcf09f63763f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 55, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3c21604ff116e07ed3ea58a93339820d0dc8af67", "patch": "@@ -7505,33 +7505,23 @@\n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n-(define_insn \"*vec_concatv2si_sse2\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x ,*y,*y\")\n+(define_insn \"*vec_concatv2si\"\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x ,*y,x,x,*y,*y\")\n \t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,rm, 0,rm\")\n-\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" x,C ,*y, C\")))]\n-  \"TARGET_SSE2\"\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,rm,rm,0,m, 0,*rm\")\n+\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" x,C ,C, x,C,*y,C\")))]\n+  \"TARGET_SSE && !TARGET_SSE4_1\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\n-   punpckldq\\t{%2, %0|%0, %2}\n-   movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"mode\" \"TI,TI,DI,DI\")])\n-\n-(define_insn \"*vec_concatv2si_sse\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x,*y,*y\")\n-\t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,m, 0,*rm\")\n-\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" x,C,*y,C\")))]\n-  \"TARGET_SSE\"\n-  \"@\n+   movd\\t{%1, %0|%0, %1}\n    unpcklps\\t{%2, %0|%0, %2}\n    movss\\t{%1, %0|%0, %1}\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"mode\" \"V4SF,V4SF,DI,DI\")])\n+  [(set_attr \"isa\" \"sse2,sse2,sse2,*,*,*,*\")\n+   (set_attr \"type\" \"sselog,ssemov,mmxmov,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"mode\" \"TI,TI,DI,V4SF,SF,DI,DI\")])\n \n (define_insn \"*vec_concatv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\"       \"=x,x,x,x,x\")\n@@ -7551,60 +7541,37 @@\n    (set_attr \"mode\" \"TI,TI,V4SF,V2SF,V2SF\")])\n \n ;; movd instead of movq is required to handle broken assemblers.\n-(define_insn \"*vec_concatv2di_rex64\"\n+(define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=x,x ,x ,Yi,!x,x,x,x,x\")\n+\t  \"=x,x ,Yi,x ,!x,x,x,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \" 0,x ,xm,r ,*y,0,x,0,x\")\n+\t  \" 0,x ,r ,xm,*y,0,x,0,0,x\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n-\t  \"rm,rm,C ,C ,C ,x,x,m,m\")))]\n-  \"TARGET_64BIT\"\n+\t  \"rm,rm,C ,C ,C ,x,x,x,m,m\")))]\n+  \"TARGET_SSE\"\n   \"@\n    pinsrq\\t{$1, %2, %0|%0, %2, 1}\n    vpinsrq\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n-   %vmovq\\t{%1, %0|%0, %1}\n    %vmovd\\t{%1, %0|%0, %1}\n+   %vmovq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n    punpcklqdq\\t{%2, %0|%0, %2}\n    vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n+   movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"sse4_noavx,avx,*,*,*,noavx,avx,noavx,avx\")\n+  [(set_attr \"isa\" \"x64_sse4_noavx,x64_avx,x64,sse2,sse2,sse2_noavx,avx,noavx,noavx,avx\")\n    (set (attr \"type\")\n      (if_then_else\n        (eq_attr \"alternative\" \"0,1,5,6\")\n        (const_string \"sselog\")\n        (const_string \"ssemov\")))\n-   (set (attr \"prefix_rex\")\n-     (if_then_else\n-       (and (eq_attr \"alternative\" \"0,3\")\n-\t    (not (match_test \"TARGET_AVX\")))\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix\" \"orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,vex\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V2SF,V2SF\")])\n-\n-(define_insn \"vec_concatv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,?x,x,x,x,x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"xm,*y,0,x,0,0,x\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C, C,x,x,x,m,m\")))]\n-  \"!TARGET_64BIT && TARGET_SSE\"\n-  \"@\n-   %vmovq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   punpcklqdq\\t{%2, %0|%0, %2}\n-   vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n-   movlhps\\t{%2, %0|%0, %2}\n-   movhps\\t{%2, %0|%0, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"sse2,sse2,sse2_noavx,avx,noavx,noavx,avx\")\n-   (set_attr \"type\" \"ssemov,ssemov,sselog,sselog,ssemov,ssemov,ssemov\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,orig,vex,orig,orig,vex\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+   (set_attr \"prefix_rex\" \"1,1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")"}, {"sha": "e40150aa6e149fac0fec06f7c64e55058e167b2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c21604ff116e07ed3ea58a93339820d0dc8af67", "patch": "@@ -1,3 +1,7 @@\n+2013-05-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse2-init-v2di-2.c: Update scan assembler string.\n+\n 2013-05-03  Vidya Praveen <vidyapraveen@arm.com>\n \n \t* gcc.target/aarch64/fabd.c: New file."}, {"sha": "dfe2d94a53a6533128c229c440ae5a9b3e5e46d8", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c21604ff116e07ed3ea58a93339820d0dc8af67/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c?ref=3c21604ff116e07ed3ea58a93339820d0dc8af67", "patch": "@@ -9,4 +9,4 @@ test (long long b)\n   return _mm_cvtsi64_si128 (b); \n }\n \n-/* { dg-final { scan-assembler-times \"\\\\*vec_concatv2di_rex64/4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\vec_concatv2di/3\" 1 } } */"}]}