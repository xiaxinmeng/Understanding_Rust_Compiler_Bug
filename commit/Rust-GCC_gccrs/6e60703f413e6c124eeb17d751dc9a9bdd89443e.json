{"sha": "6e60703f413e6c124eeb17d751dc9a9bdd89443e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2MDcwM2Y0MTNlNmMxMjRlZWIxN2Q3NTFkYzlhOWJkZDg5NDQzZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-08-20T10:23:08Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-08-20T10:23:08Z"}, "message": "configure.ac (HAVE_GAS_CFI_DIRECTIVE): Always test for assembler support of this feature.\n\n        * configure.ac (HAVE_GAS_CFI_DIRECTIVE): Always test for assembler\n        support of this feature.  Do not assume that a sufficiently new\n        assembler will support the feature regardless of the target type.\n        (HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): Likewise.\n        * configure: Regenerate.\n\nFrom-SVN: r139266", "tree": {"sha": "481c9b9685b452b37df46fbde94136e34f494bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/481c9b9685b452b37df46fbde94136e34f494bad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e60703f413e6c124eeb17d751dc9a9bdd89443e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e60703f413e6c124eeb17d751dc9a9bdd89443e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e60703f413e6c124eeb17d751dc9a9bdd89443e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e60703f413e6c124eeb17d751dc9a9bdd89443e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4ab2baad2c3e42f8afdeccd96b4bccdefbcb19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ab2baad2c3e42f8afdeccd96b4bccdefbcb19e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ab2baad2c3e42f8afdeccd96b4bccdefbcb19e"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "de65ecf32e9d08e12273a89dabb32a9e4a3dfd9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e60703f413e6c124eeb17d751dc9a9bdd89443e", "patch": "@@ -1,3 +1,11 @@\n+2008-08-20  Nick Clifton  <nickc@redhat.com>\n+\n+\t* configure.ac (HAVE_GAS_CFI_DIRECTIVE): Always test for assembler\n+\tsupport of this feature.  Do not assume that a sufficiently new\n+\tassembler will support the feature regardless of the target type.\n+\t(HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): Likewise.\n+        * configure: Regenerate.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (found_in_subgraph): Remove."}, {"sha": "ba2b6d05128d4cd15cdb7b9bbbf3f3fc814ad4f5", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6e60703f413e6c124eeb17d751dc9a9bdd89443e", "patch": "@@ -20839,12 +20839,7 @@ if test \"${gcc_cv_as_cfi_directive+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n   gcc_cv_as_cfi_directive=no\n-    if test $in_tree_gas = yes; then\n-    if test $in_tree_gas_is_elf = yes \\\n-  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n-  then gcc_cv_as_cfi_directive=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n+  if test x$gcc_cv_as != x; then\n     echo '\t.text\n \t.cfi_startproc\n \t.cfi_offset 0, 0\n@@ -20882,12 +20877,7 @@ if test \"${gcc_cv_as_cfi_personality_directive+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n   gcc_cv_as_cfi_personality_directive=no\n-    if test $in_tree_gas = yes; then\n-    if test $in_tree_gas_is_elf = yes \\\n-  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n-  then gcc_cv_as_cfi_personality_directive=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n+  if test x$gcc_cv_as != x; then\n     echo '\t.text\n \t.cfi_startproc,\n \t.cfi_personality 0, symbol"}, {"sha": "97cf160f72d78fc39fd359cfd63fbd5e66f948ef", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e60703f413e6c124eeb17d751dc9a9bdd89443e/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6e60703f413e6c124eeb17d751dc9a9bdd89443e", "patch": "@@ -2182,7 +2182,7 @@ changequote([,])dnl\n \n # Check if we have assembler support for unwind directives.\n gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n-  [elf,2,17,0],,\n+  ,,\n [\t.text\n \t.cfi_startproc\n \t.cfi_offset 0, 0\n@@ -2195,7 +2195,7 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_DIRECTIVE,\n   [Define 0/1 if your assembler supports CFI directives.])\n \n gcc_GAS_CHECK_FEATURE([cfi personality directive],\n-  gcc_cv_as_cfi_personality_directive, [elf,2,17,0],,\n+  gcc_cv_as_cfi_personality_directive, ,,\n [\t.text\n \t.cfi_startproc,\n \t.cfi_personality 0, symbol"}]}