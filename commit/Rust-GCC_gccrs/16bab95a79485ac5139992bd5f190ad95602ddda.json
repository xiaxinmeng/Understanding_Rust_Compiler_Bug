{"sha": "16bab95a79485ac5139992bd5f190ad95602ddda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiYWI5NWE3OTQ4NWFjNTEzOTk5MmJkNWYxOTBhZDk1NjAyZGRkYQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2017-07-28T07:17:10Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2017-07-28T07:17:10Z"}, "message": "[PowerPC/RTEMS] Add 64-bit support using ELFv2 ABI\n\nAdd 64-bit support for RTEMS using the ELFv2 ABI with 64-bit long\ndouble.\n\ngcc/\n\t* config.gcc (powerpc-*-rtems*): Remove rs6000/eabi.h.  Add\n\trs6000/biarch64.h.\n\t* config/rs6000/rtems.h (ASM_DECLARE_FUNCTION_SIZE): New macro.\n\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n\t(CRT_CALL_STATIC_FUNCTION): Likewise.\n\t(ASM_DEFAULT_SPEC): New define.\n\t(ASM_SPEC32): Likewise.\n\t(ASM_SPEC64): Likewise.\n\t(ASM_SPEC_COMMON): Likewise.\n\t(ASM_SPEC): Likewise.\n\t(INVALID_64BIT): Likewise.\n\t(LINK_OS_DEFAULT_SPEC): Likewise.\n\t(LINK_OS_SPEC32): Likewise.\n\t(LINK_OS_SPEC64): Likewise.\n\t(POWERPC_LINUX): Likewise.\n\t(PTRDIFF_TYPE): Likewise.\n\t(RESTORE_FP_PREFIX): Likewise.\n\t(RESTORE_FP_SUFFIX): Likewise.\n\t(SAVE_FP_PREFIX): Likewise.\n\t(SAVE_FP_SUFFIX): Likewise.\n\t(SIZE_TYPE): Likewise.\n\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(TARGET_64BIT): Likewise.\n\t(TARGET_64BIT): Likewise.\n\t(TARGET_AIX): Likewise.\n\t(WCHAR_TYPE_SIZE): Likewise.\n\t(WCHAR_TYPE): Undefine.\n\t(TARGET_OS_CPP_BUILTINS): Add 64-bit PowerPC defines.\n\t(CPP_OS_DEFAULT_SPEC): Use previous CPP_OS_RTEMS_SPEC.\n\t(CPP_OS_RTEMS_SPEC): Delete.\n\t(SUBSUBTARGET_EXTRA_SPECS): Remove cpp_os_rtems.  Add\n\tasm_spec_common, asm_spec32, asm_spec64, link_os_spec32, and\n\tlink_os_spec64.\n\t* config/rs6000/t-rtems: Add mcpu=e6500/m64 multilibs.\n\nlibgcc/\n\t* config/rs6000/ibm-ldouble.c: Disable if defined __rtems__.\n\nFrom-SVN: r250652", "tree": {"sha": "b86d7338eca60abf956b9f82f201e11e4777c654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86d7338eca60abf956b9f82f201e11e4777c654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16bab95a79485ac5139992bd5f190ad95602ddda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bab95a79485ac5139992bd5f190ad95602ddda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16bab95a79485ac5139992bd5f190ad95602ddda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16bab95a79485ac5139992bd5f190ad95602ddda/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0ee55a1f7ce56b20e9d52904da026a316241930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ee55a1f7ce56b20e9d52904da026a316241930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ee55a1f7ce56b20e9d52904da026a316241930"}], "stats": {"total": 249, "additions": 229, "deletions": 20}, "files": [{"sha": "6b9a588ec43a1a7c814f1402b17e76f9ef6170b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -1,3 +1,40 @@\n+2017-07-28  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config.gcc (powerpc-*-rtems*): Remove rs6000/eabi.h.  Add\n+\trs6000/biarch64.h.\n+\t* config/rs6000/rtems.h (ASM_DECLARE_FUNCTION_SIZE): New macro.\n+\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Likewise.\n+\t(CRT_CALL_STATIC_FUNCTION): Likewise.\n+\t(ASM_DEFAULT_SPEC): New define.\n+\t(ASM_SPEC32): Likewise.\n+\t(ASM_SPEC64): Likewise.\n+\t(ASM_SPEC_COMMON): Likewise.\n+\t(ASM_SPEC): Likewise.\n+\t(INVALID_64BIT): Likewise.\n+\t(LINK_OS_DEFAULT_SPEC): Likewise.\n+\t(LINK_OS_SPEC32): Likewise.\n+\t(LINK_OS_SPEC64): Likewise.\n+\t(POWERPC_LINUX): Likewise.\n+\t(PTRDIFF_TYPE): Likewise.\n+\t(RESTORE_FP_PREFIX): Likewise.\n+\t(RESTORE_FP_SUFFIX): Likewise.\n+\t(SAVE_FP_PREFIX): Likewise.\n+\t(SAVE_FP_SUFFIX): Likewise.\n+\t(SIZE_TYPE): Likewise.\n+\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(TARGET_64BIT): Likewise.\n+\t(TARGET_64BIT): Likewise.\n+\t(TARGET_AIX): Likewise.\n+\t(WCHAR_TYPE_SIZE): Likewise.\n+\t(WCHAR_TYPE): Undefine.\n+\t(TARGET_OS_CPP_BUILTINS): Add 64-bit PowerPC defines.\n+\t(CPP_OS_DEFAULT_SPEC): Use previous CPP_OS_RTEMS_SPEC.\n+\t(CPP_OS_RTEMS_SPEC): Delete.\n+\t(SUBSUBTARGET_EXTRA_SPECS): Remove cpp_os_rtems.  Add\n+\tasm_spec_common, asm_spec32, asm_spec64, link_os_spec32, and\n+\tlink_os_spec64.\n+\t* config/rs6000/t-rtems: Add mcpu=e6500/m64 multilibs.\n+\n 2017-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81578"}, {"sha": "f28164646c3b7998d16dfa9c279972ccf15ee1b2", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -2429,7 +2429,7 @@ powerpc-*-rtems*spe*)\n \ttmake_file=\"${tmake_file} powerpcspe/t-fprules powerpcspe/t-rtems powerpcspe/t-ppccomm\"\n \t;;\n powerpc-*-rtems*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/rtems.h rtems.h\"\n+\ttm_file=\"rs6000/biarch64.h ${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/rtems.h rtems.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-rtems rs6000/t-ppccomm\"\n \t;;"}, {"sha": "8a62fdcbaf321d616021c4c396619b7f56cf5ed2", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 181, "deletions": 16, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -23,29 +23,163 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* Specify predefined symbols in preprocessor.  */\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n \n #undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()          \\\n-  do                                      \\\n-    {                                     \\\n-      builtin_define_std (\"PPC\");         \\\n-      builtin_define (\"__rtems__\");       \\\n-      builtin_define (\"__USE_INIT_FINI__\"); \\\n-      builtin_assert (\"system=rtems\");    \\\n-      builtin_assert (\"cpu=powerpc\");     \\\n-      builtin_assert (\"machine=powerpc\"); \\\n-      TARGET_OS_SYSV_CPP_BUILTINS ();     \\\n-    }                                     \\\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      builtin_define (\"__rtems__\");\t\t\t\\\n+      builtin_define (\"__USE_INIT_FINI__\");\t\t\\\n+      builtin_assert (\"system=rtems\");\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+\n+/* A lot of copy and paste from linux64.h and freebsd64.h */\n+#undef\tSUBSUBTARGET_OVERRIDE_OPTIONS\n+#define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (rs6000_isa_flags & OPTION_MASK_64BIT)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  rs6000_elf_abi = 2;\t\t\t\t\t\\\n+\t  rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_prototype = 0;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n+\t      error (\"-m64 requires a PowerPC64 cpu\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n #undef TARGET_LIBGCC_SDATA_SECTION\n #define TARGET_LIBGCC_SDATA_SECTION \".sdata\"\n \n-#undef CPP_OS_DEFAULT_SPEC\n-#define CPP_OS_DEFAULT_SPEC \"%(cpp_os_rtems)\"\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef\tSIZE_TYPE\n+#define\tSIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef\tPTRDIFF_TYPE\n+#define\tPTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+/* Copy and paste from freebsd64.h */\n+#undef WCHAR_TYPE\n+\n+/* Copy and paste from freebsd64.h */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#ifdef __powerpc64__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+  asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbl \" #FUNC \"\\n\"\t\t\t\t\t\\\n+\"\tnop\\n\"\t\t\t\t\t\t\\\n+\"\t.previous\");\n+#endif\n+\n+/* This could be also POWERPC_FREEBSD.  It is related to the save/restore\n+   defines below.  */\n+#define POWERPC_LINUX\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef  SAVE_FP_PREFIX\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n+#undef  SAVE_FP_SUFFIX\n+#define SAVE_FP_SUFFIX \"\"\n+#undef  RESTORE_FP_PREFIX\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n+#undef  RESTORE_FP_SUFFIX\n+#define RESTORE_FP_SUFFIX \"\"\n \n-#define CPP_OS_RTEMS_SPEC \"\\\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef\tASM_DECLARE_FUNCTION_SIZE\n+#define\tASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.size\\t\", (FILE));\t\t\t\t\t\\\n+\t  if (TARGET_64BIT && DOT_SYMBOLS)\t\t\t\t\\\n+\t    putc ('.', (FILE));\t\t\t\t\t\t\\\n+\t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n+\t  fputs (\",.-\", (FILE));\t\t\t\t\t\\\n+\t  rs6000_output_function_entry (FILE, FNAME);\t\t\t\\\n+\t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Copy and paste from linux64.h and freebsd64.h */\n+#undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n+#define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)\t\t\t\\\n+  (TARGET_TOC\t\t\t\t\t\t\t\t\\\n+   && (GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS\t\\\n+\t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)\t\t\\\n+       || GET_CODE (X) == LABEL_REF\t\t\t\t\t\\\n+       || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n+\t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n+       || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n+\t   && ((TARGET_64BIT\t\t\t\t\t\t\\\n+\t\t&& (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n+\t\t    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n+\t\t\t&& ! TARGET_NO_FP_IN_TOC)))\t\t\t\\\n+\t       || (!TARGET_64BIT\t\t\t\t\t\\\n+\t\t   && !TARGET_NO_FP_IN_TOC\t\t\t\t\\\n+\t\t   && SCALAR_FLOAT_MODE_P (GET_MODE (X))\t\t\\\n+\t\t   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n+\n+#undef CPP_OS_DEFAULT_SPEC\n+#define CPP_OS_DEFAULT_SPEC \"\\\n %{!mcpu*:  %{!Dppc*: %{!Dmpc*: -Dmpc750} } }\\\n %{mcpu=403:  %{!Dppc*: %{!Dmpc*: -Dppc403}  } } \\\n %{mcpu=505:  %{!Dppc*: %{!Dmpc*: -Dmpc505}  } } \\\n@@ -60,6 +194,37 @@\n %{mcpu=8540: %{!Dppc*: %{!Dmpc*: -Dppc8540}  } } \\\n %{mcpu=e6500: -D__PPC_CPU_E6500__}\"\n \n+#undef\tASM_DEFAULT_SPEC\n+#define\tASM_DEFAULT_SPEC \"-mppc%{m64:64}\"\n+\n+#undef\tASM_SPEC\n+#define\tASM_SPEC \"%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)\"\n+\n+#define ASM_SPEC32 \"-a32 \\\n+%{mrelocatable} %{mrelocatable-lib} %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\\n+%{memb|msdata=eabi: -memb}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}}\" \\\n+  ENDIAN_SELECT(\" -mbig\", \" -mlittle\", DEFAULT_ASM_ENDIAN)\n+\n+#undef  LINK_OS_DEFAULT_SPEC\n+#define LINK_OS_DEFAULT_SPEC \\\n+\"%{!m64:%(link_os_spec32)}%{m64:%(link_os_spec64)}\"\n+\n+#define LINK_OS_SPEC32 ENDIAN_SELECT(\" -m elf32ppc\",\t\t\\\n+\t\t\t\t     \" -m elf32lppc\",\t\t\\\n+\t\t\t\t     \" -m elf32ppc\")\n+#define LINK_OS_SPEC64 ENDIAN_SELECT(\" -m elf64ppc\",\t\t\\\n+\t\t\t\t     \" -m elf64lppc\",\t\t\\\n+\t\t\t\t     \" -m elf64ppc\")\n+\n #undef  SUBSUBTARGET_EXTRA_SPECS\n #define SUBSUBTARGET_EXTRA_SPECS \\\n-  { \"cpp_os_rtems\",\t\tCPP_OS_RTEMS_SPEC }\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_spec32\",\t\tLINK_OS_SPEC32 },\t\t\t\\\n+  { \"link_os_spec64\",\t\tLINK_OS_SPEC64 },"}, {"sha": "0e39c6320c8db155dd3c07a7e980e7525e753879", "filename": "gcc/config/rs6000/t-rtems", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig%2Frs6000%2Ft-rtems", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/gcc%2Fconfig%2Frs6000%2Ft-rtems", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rtems?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -27,8 +27,8 @@ MULTILIB_REQUIRED =\n MULTILIB_OPTIONS += mcpu=403/mcpu=505/mcpu=603e/mcpu=604/mcpu=860/mcpu=7400/mcpu=8540/mcpu=e6500\n MULTILIB_DIRNAMES += m403 m505 m603e m604 m860 m7400 m8540 me6500\n \n-MULTILIB_OPTIONS += m32\n-MULTILIB_DIRNAMES += m32\n+MULTILIB_OPTIONS += m32/m64\n+MULTILIB_DIRNAMES += m32 m64\n \n MULTILIB_OPTIONS += msoft-float\n MULTILIB_DIRNAMES += nof\n@@ -72,3 +72,5 @@ MULTILIB_REQUIRED += mcpu=8540/msoft-float\n MULTILIB_REQUIRED += mcpu=860\n MULTILIB_REQUIRED += mcpu=e6500/m32\n MULTILIB_REQUIRED += mcpu=e6500/m32/msoft-float/mno-altivec\n+MULTILIB_REQUIRED += mcpu=e6500/m64\n+MULTILIB_REQUIRED += mcpu=e6500/m64/msoft-float/mno-altivec"}, {"sha": "fc7b878d95c0d838d6e339b89bee3d9d0048ff12", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -1,3 +1,7 @@\n+2017-07-28  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/rs6000/ibm-ldouble.c: Disable if defined __rtems__.\n+\n 2017-07-24  Daniel Santos  <daniel.santos@pobox.com>\n \n \tPR testsuite/80759"}, {"sha": "e99652e523f4b65158ea5b5a3e87677f16fa7269", "filename": "libgcc/config/rs6000/ibm-ldouble.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16bab95a79485ac5139992bd5f190ad95602ddda/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16bab95a79485ac5139992bd5f190ad95602ddda/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c?ref=16bab95a79485ac5139992bd5f190ad95602ddda", "patch": "@@ -45,7 +45,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    This code currently assumes the most significant double is in\n    the lower numbered register or lower addressed memory.  */\n \n-#if defined (__MACH__) || defined (__powerpc__) || defined (_AIX)\n+#if (defined (__MACH__) || defined (__powerpc__) || defined (_AIX)) \\\n+    && !defined (__rtems__)\n \n #define fabs(x) __builtin_fabs(x)\n #define isless(x, y) __builtin_isless (x, y)"}]}