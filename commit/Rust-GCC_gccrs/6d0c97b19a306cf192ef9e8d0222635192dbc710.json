{"sha": "6d0c97b19a306cf192ef9e8d0222635192dbc710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwYzk3YjE5YTMwNmNmMTkyZWY5ZThkMDIyMjYzNTE5MmRiYzcxMA==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2020-10-16T07:12:30Z"}, "committer": {"name": "Daniel Hellstrom", "email": "daniel@gaisler.com", "date": "2021-09-16T11:05:48Z"}, "message": "sparc: Skip all empty assembly statements\n\nThis version detects multiple empty assembly statements in a row and also\ndetects non-memory barrier empty assembly statements (__asm__(\"\")). It\ncan be used instead of next_active_insn().\n\ngcc/ChangeLog:\n\n\t* config/sparc/sparc.c (next_active_non_empty_insn): New function\n\tthat returns next active non empty assembly instruction.\n\t(sparc_do_work_around_errata): Use new function.", "tree": {"sha": "23f1b3cc8c3dba9a59a935a7f0c714c741b2308f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f1b3cc8c3dba9a59a935a7f0c714c741b2308f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0c97b19a306cf192ef9e8d0222635192dbc710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0c97b19a306cf192ef9e8d0222635192dbc710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0c97b19a306cf192ef9e8d0222635192dbc710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0c97b19a306cf192ef9e8d0222635192dbc710/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daniel-hellstrom", "id": 1167836, "node_id": "MDQ6VXNlcjExNjc4MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1167836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-hellstrom", "html_url": "https://github.com/daniel-hellstrom", "followers_url": "https://api.github.com/users/daniel-hellstrom/followers", "following_url": "https://api.github.com/users/daniel-hellstrom/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-hellstrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-hellstrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-hellstrom/subscriptions", "organizations_url": "https://api.github.com/users/daniel-hellstrom/orgs", "repos_url": "https://api.github.com/users/daniel-hellstrom/repos", "events_url": "https://api.github.com/users/daniel-hellstrom/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-hellstrom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bbb373dfad830e8daa43e880e4f6536c868a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4bbb373dfad830e8daa43e880e4f6536c868a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4bbb373dfad830e8daa43e880e4f6536c868a53"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "94061e111bdf7f60485bd444609e68099906109c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0c97b19a306cf192ef9e8d0222635192dbc710/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0c97b19a306cf192ef9e8d0222635192dbc710/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=6d0c97b19a306cf192ef9e8d0222635192dbc710", "patch": "@@ -1094,6 +1094,24 @@ load_insn_p (rtx_insn *insn)\n    && GET_CODE (PATTERN (INSN)) != USE\t\t\t\t\t\\\n    && GET_CODE (PATTERN (INSN)) != CLOBBER)\n \n+rtx_insn *\n+next_active_non_empty_insn (rtx_insn *insn)\n+{\n+  insn = next_active_insn (insn);\n+\n+  while (insn\n+\t && (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t     || GET_CODE (PATTERN (insn)) == ASM_INPUT\n+\t     || (USEFUL_INSN_P (insn)\n+\t\t && (asm_noperands (PATTERN (insn)) >= 0)\n+\t\t && !strcmp (decode_asm_operands (PATTERN (insn),\n+\t\t\t\t\t\t  NULL, NULL, NULL,\n+\t\t\t\t\t\t  NULL, NULL), \"\"))))\n+    insn = next_active_insn (insn);\n+\n+  return insn;\n+}\n+\n static unsigned int\n sparc_do_work_around_errata (void)\n {\n@@ -1151,7 +1169,7 @@ sparc_do_work_around_errata (void)\n \t\temit_insn_before (gen_nop (), target);\n \t    }\n \n-\t  next = next_active_insn (insn);\n+\t  next = next_active_non_empty_insn (insn);\n \t  if (!next)\n \t    break;\n \n@@ -1254,23 +1272,12 @@ sparc_do_work_around_errata (void)\n \t  rtx_insn *after;\n \t  int i;\n \n-\t  next = next_active_insn (insn);\n+\t  next = next_active_non_empty_insn (insn);\n \t  if (!next)\n \t    break;\n \n \t  for (after = next, i = 0; i < 2; i++)\n \t    {\n-\t      /* Skip empty assembly statements.  */\n-\t      if ((GET_CODE (PATTERN (after)) == UNSPEC_VOLATILE)\n-\t\t  || (USEFUL_INSN_P (after)\n-\t\t      && (asm_noperands (PATTERN (after))>=0)\n-\t\t      && !strcmp (decode_asm_operands (PATTERN (after),\n-\t\t\t\t\t\t       NULL, NULL, NULL,\n-\t\t\t\t\t\t       NULL, NULL), \"\")))\n-\t\tafter = next_active_insn (after);\n-\t      if (!after)\n-\t\tbreak;\n-\n \t      /* If the insn is a branch, then it cannot be problematic.  */\n \t      if (!NONJUMP_INSN_P (after)\n \t\t  || GET_CODE (PATTERN (after)) == SEQUENCE)\n@@ -1295,7 +1302,7 @@ sparc_do_work_around_errata (void)\n \t\t      && (MEM_P (SET_DEST (set)) || mem_ref (SET_SRC (set))))\n \t\t    break;\n \n-\t\t  after = next_active_insn (after);\n+\t\t  after = next_active_non_empty_insn (after);\n \t\t  if (!after)\n \t\t    break;\n \t\t}"}]}