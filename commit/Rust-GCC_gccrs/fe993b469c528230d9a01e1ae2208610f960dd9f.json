{"sha": "fe993b469c528230d9a01e1ae2208610f960dd9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5OTNiNDY5YzUyODIzMGQ5YTAxZTFhZTIyMDg2MTBmOTYwZGQ5Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-18T04:28:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-18T04:28:44Z"}, "message": "libstdc++: Fix up semiregular-box partial specialization [PR100475]\n\nThis makes the in-place constructor of our partial specialization of\n__box for already-semiregular types perform direct-non-list-initialization\n(in accordance with the specification of the primary template), and\nadditionally makes the member function data() use std::__addressof.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100475\n\t* include/std/ranges (__box::__box): Use non-list-initialization\n\tin member initializer list of in-place constructor of the\n\tpartial specialization for semiregular types.\n\t(__box::operator->): Use std::__addressof.\n\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc\n\t(test02): New test.\n\t* testsuite/std/ranges/single_view.cc (test04): New test.", "tree": {"sha": "da6f0ea5b3480b0632dfa72e05d4011a57d4ea69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da6f0ea5b3480b0632dfa72e05d4011a57d4ea69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe993b469c528230d9a01e1ae2208610f960dd9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe993b469c528230d9a01e1ae2208610f960dd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe993b469c528230d9a01e1ae2208610f960dd9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe993b469c528230d9a01e1ae2208610f960dd9f/comments", "author": null, "committer": null, "parents": [{"sha": "03cf8d54e5c27cfe6b184cc96757cab30d8fa1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cf8d54e5c27cfe6b184cc96757cab30d8fa1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cf8d54e5c27cfe6b184cc96757cab30d8fa1df"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "ca62f73ae5d0a5db7e0814b09ae4e9d285d825da", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=fe993b469c528230d9a01e1ae2208610f960dd9f", "patch": "@@ -163,7 +163,7 @@ namespace ranges\n \t  constexpr explicit\n \t  __box(in_place_t, _Args&&... __args)\n \t  noexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n-\t  : _M_value{std::forward<_Args>(__args)...}\n+\t  : _M_value(std::forward<_Args>(__args)...)\n \t  { }\n \n \tconstexpr bool\n@@ -180,11 +180,11 @@ namespace ranges\n \n \tconstexpr _Tp*\n \toperator->() noexcept\n-\t{ return &_M_value; }\n+\t{ return std::__addressof(_M_value); }\n \n \tconstexpr const _Tp*\n \toperator->() const noexcept\n-\t{ return &_M_value; }\n+\t{ return std::__addressof(_M_value); }\n       };\n   } // namespace __detail\n "}, {"sha": "ed694e04fd1b4797f5395bdaa22edfe5cf49c581", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/detail/semiregular_box.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdetail%2Fsemiregular_box.cc?ref=fe993b469c528230d9a01e1ae2208610f960dd9f", "patch": "@@ -81,3 +81,21 @@ test01()\n   return true;\n }\n static_assert(test01());\n+\n+template<bool make_semiregular>\n+  struct A {\n+    A() requires make_semiregular;\n+    A(int, int);\n+    A(std::initializer_list<int>) = delete;\n+  };\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/100475\n+  static_assert(std::semiregular<A<true>>);\n+  __box<A<true>> x2(std::in_place, 0, 0);\n+\n+  static_assert(!std::semiregular<A<false>>);\n+  __box<A<false>> x1(std::in_place, 0, 0);\n+}"}, {"sha": "f530cc075658c10a87a78768da6701792a8551f8", "filename": "libstdc++-v3/testsuite/std/ranges/single_view.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe993b469c528230d9a01e1ae2208610f960dd9f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc?ref=fe993b469c528230d9a01e1ae2208610f960dd9f", "patch": "@@ -58,9 +58,25 @@ test03()\n   VERIFY(*std::ranges::begin(s3) == 'a');\n }\n \n+void\n+test04()\n+{\n+  // PR libstdc++/100475\n+  struct A {\n+    A() = default;\n+    A(int, int) { }\n+    A(std::initializer_list<int>) = delete;\n+    void operator&() const = delete;\n+  };\n+  std::ranges::single_view<A> s(std::in_place, 0, 0);\n+  s.data();\n+  std::as_const(s).data();\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}