{"sha": "27bf39a8035445ffc71b551619d7c1a232498054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZjM5YTgwMzU0NDVmZmM3MWI1NTE2MTlkN2MxYTIzMjQ5ODA1NA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-24T15:40:03Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-24T15:40:03Z"}, "message": "ortran: ICE using SHAPE with FINDLOC PR93835\n\nThe expression representing the array returned by SHAPE does not\nhave its shape defined. An ICE occurs when FINDLOC attempts to\nuse the shape of the array.  Add shape to expression before returning\nfrom SHAPE.\n\nWhitespace issues identified by Steven G. Kargl  <kargl@gcc.gnu.org>\nhave also been fixed.\n\ngcc/fortran/ChangeLog\n\n\tPR fortran/93835\n\t* simplify.c (simplify_findloc_nodim) : Fix whitespace issues.\n\t(gfc_simplify_shape) : Create and initialise one shape value\n\tfor the result expression. Set shape value with the rank of\n\tthe source array.\n\ngcc/testsuite/ChangeLog\n\n\tPR fortran/93835\n\t* gfortran.dg/pr77351.f90 : Check for one error instead of two.\n\t* gfortran.dg/pr93835.f08 : New test.", "tree": {"sha": "8285da0bc6ad45669e4ac48e03a9d21cddc3833e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8285da0bc6ad45669e4ac48e03a9d21cddc3833e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27bf39a8035445ffc71b551619d7c1a232498054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf39a8035445ffc71b551619d7c1a232498054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bf39a8035445ffc71b551619d7c1a232498054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf39a8035445ffc71b551619d7c1a232498054/comments", "author": null, "committer": null, "parents": [{"sha": "b07c085581eb98cde408d9583ee17d58832826ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07c085581eb98cde408d9583ee17d58832826ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07c085581eb98cde408d9583ee17d58832826ae"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "5759689f8b758e54f30eed874491b15e955b1734", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=27bf39a8035445ffc71b551619d7c1a232498054", "patch": "@@ -1,3 +1,12 @@\n+2020-02-24  Mark Eggleston  <mark.eggleston@codethink.com>\n+\tSteven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/93835\n+\t* decl.c (gfc_match_data) : Check whether the data expression\n+\tis a derived type and is a constructor. If a BOZ constant\n+\tis encountered in the constructor output an error and return\n+\tMATCH_ERROR.\n+\n 2020-02-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93604"}, {"sha": "86715d52d9067097a0850a12bee0d5246d2fab8d", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=27bf39a8035445ffc71b551619d7c1a232498054", "patch": "@@ -5497,7 +5497,7 @@ simplify_findloc_nodim (gfc_expr *result, gfc_expr *value, gfc_expr *array,\n   bool continue_loop;\n   bool ma;\n \n-  for (i = 0; i<array->rank; i++)\n+  for (i = 0; i < array->rank; i++)\n     res[i] = -1;\n \n   /* Shortcut for constant .FALSE. MASK.  */\n@@ -5540,7 +5540,7 @@ simplify_findloc_nodim (gfc_expr *result, gfc_expr *value, gfc_expr *array,\n \n \t  if (ma && gfc_compare_expr (a, value, INTRINSIC_EQ) == 0)\n \t    {\n-\t      for (i = 0; i<array->rank; i++)\n+\t      for (i = 0; i < array->rank; i++)\n \t\tres[i] = count[i];\n \t      if (!back_val)\n \t\tgoto finish;\n@@ -5565,9 +5565,9 @@ simplify_findloc_nodim (gfc_expr *result, gfc_expr *value, gfc_expr *array,\n \t} while (count[n] == extent[n]);\n     }\n \n- finish:\n+finish:\n   result_ctor = gfc_constructor_first (result->value.constructor);\n-  for (i = 0; i<array->rank; i++)\n+  for (i = 0; i < array->rank; i++)\n     {\n       gfc_expr *r_expr;\n       r_expr = result_ctor->expr;\n@@ -7228,6 +7228,8 @@ gfc_simplify_shape (gfc_expr *source, gfc_expr *kind)\n     return NULL;\n \n   result = gfc_get_array_expr (BT_INTEGER, k, &source->where);\n+  result->shape = gfc_get_shape (1);\n+  mpz_init (result->shape[0]);\n \n   if (source->rank == 0)\n     return result;\n@@ -7284,6 +7286,8 @@ gfc_simplify_shape (gfc_expr *source, gfc_expr *kind)\n   if (t)\n     gfc_clear_shape (shape, source->rank);\n \n+  mpz_set_si (result->shape[0], source->rank);\n+\n   return result;\n }\n "}, {"sha": "8c7ae6f3685365db5020f3b774d53084cf05b879", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27bf39a8035445ffc71b551619d7c1a232498054", "patch": "@@ -1,3 +1,9 @@\n+2020-02-20  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/93835\n+\t* gfortran.dg/pr77351.f90 : Check for one error instead of two.\n+\t* gfortran.dg/pr93835.f08 : New test.\n+\n 2020-02-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93712 - ICE with ill-formed array list-initialization."}, {"sha": "e3e8bc4f64bd9b411ba6e8c13106c2bee50d81ab", "filename": "gcc/testsuite/gfortran.dg/pr77351.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77351.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77351.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77351.f90?ref=27bf39a8035445ffc71b551619d7c1a232498054", "patch": "@@ -1,6 +1,8 @@\n ! { dg-do compile }\n+!\n+! PR93835 resulted in different but valid error message\n program p\n    integer :: z(4) = [1, 2, 3, 4]\n-   print *, any(shape(z) /= [4,1])  ! { dg-error \"shape for elemental binary\" }\n+   print *, any(shape(z) /= [4,1])  ! { dg-error \"Shapes for operands at .1. and .2. are not conformable\" }\n end\n-! { dg-excess-errors \"operands are incommensurate\" }\n+"}, {"sha": "933e249e632ef38ce9fcf08dfa9517c596a2ea51", "filename": "gcc/testsuite/gfortran.dg/pr93835.f08", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bf39a8035445ffc71b551619d7c1a232498054/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08?ref=27bf39a8035445ffc71b551619d7c1a232498054", "patch": "@@ -0,0 +1,8 @@\n+! {dg-do run }\n+!\n+! PR fortran/93835 - the following code resulted in an ICE\n+!\n+program p\n+  if (any(findloc(shape(1), 1) .ne. 0)) stop 1\n+end\n+"}]}