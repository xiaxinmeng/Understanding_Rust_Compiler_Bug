{"sha": "570221c20101ecc72f193e2b88e39069e05c963d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwMjIxYzIwMTAxZWNjNzJmMTkzZTJiODhlMzkwNjllMDVjOTYzZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-04-01T17:05:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-04-01T17:05:25Z"}, "message": "friend.c (is_friend): Fix access control for local classes.\n\n\t* friend.c (is_friend): Fix access control for local classes.\n\t* class.c (is_empty_class): New fn.\n\t* call.c (build_call): Don't pass empty class objects to a function.\n\nFrom-SVN: r18933", "tree": {"sha": "c1e54f83c5989df56ecb7ded908c39c5421e4413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e54f83c5989df56ecb7ded908c39c5421e4413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/570221c20101ecc72f193e2b88e39069e05c963d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570221c20101ecc72f193e2b88e39069e05c963d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570221c20101ecc72f193e2b88e39069e05c963d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570221c20101ecc72f193e2b88e39069e05c963d/comments", "author": null, "committer": null, "parents": [{"sha": "59581da6977aeae5819b43ebdd1eed1ee7f0d514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59581da6977aeae5819b43ebdd1eed1ee7f0d514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59581da6977aeae5819b43ebdd1eed1ee7f0d514"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "8536976c06f8f03fd81526857521def8c8b8a937", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=570221c20101ecc72f193e2b88e39069e05c963d", "patch": "@@ -1,3 +1,10 @@\n+Wed Apr  1 15:38:36 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* friend.c (is_friend): Fix access control for local classes.\n+\n+\t* class.c (is_empty_class): New fn.\n+\t* call.c (build_call): Don't pass empty class objects to a function.\n+\n Wed Apr  1 14:58:35 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* call.c (build_over_call): Do name resolution for default"}, {"sha": "ebfe3140075e57f3e303a2933f2419177abfc318", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=570221c20101ecc72f193e2b88e39069e05c963d", "patch": "@@ -1,9 +1,25 @@\n *** Changes since EGCS 1.0:\n \n-* Template template parameters are now supported.\n+* Massive template improvements:\n+  + member template classes are supported.\n+  + template friends are supported.\n+  + template template parameters are supported.\n+  + local classes in templates are supported.\n+  + lots of bugs fixed.\n \n * operator new now throws bad_alloc where appropriate.\n \n+* Exception handling is now thread safe, and supports nested\n+  exceptions and placement delete.\n+\n+* protected virtual inheritance is now supported.\n+\n+* Loops are optimized better; we now move the test to the end in most\n+  cases, like the C frontend does.\n+\n+* For class D derived from B which has a member 'int i', &D::i is now of\n+  type 'int B::*' instead of 'int D::*'.\n+\n *** Changes in EGCS 1.0:\n \n * A public review copy of the December 1996 Draft of the ISO/ANSI C++"}, {"sha": "dc5957d1b887cdf3777dc17891ccebf7322cd10f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=570221c20101ecc72f193e2b88e39069e05c963d", "patch": "@@ -24,11 +24,12 @@ Boston, MA 02111-1307, USA.  */\n /* High-level class interface.  */\n \n #include \"config.h\"\n-#include \"tree.h\"\n #include \"system.h\"\n+#include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"output.h\"\n #include \"flags.h\"\n+#include \"rtl.h\"\n \n #include \"obstack.h\"\n #define obstack_chunk_alloc xmalloc\n@@ -492,6 +493,7 @@ build_call (function, result_type, parms)\n      tree function, result_type, parms;\n {\n   int is_constructor = 0;\n+  tree tmp;\n \n   function = build_addr_func (function);\n \n@@ -506,6 +508,20 @@ build_call (function, result_type, parms)\n       && DECL_CONSTRUCTOR_P (TREE_OPERAND (function, 0)))\n     is_constructor = 1;\n \n+  /* Don't actually pass empty class objects to a function.  This is useful\n+     for tags in STL, which are used to control overload resolution.\n+     We don't need to handle other cases of copying empty classes.  */\n+  for (tmp = parms; tmp; tmp = TREE_CHAIN (tmp))\n+    if (is_empty_class (TREE_TYPE (TREE_VALUE (tmp)))\n+\t&& ! TREE_ADDRESSABLE (TREE_TYPE (TREE_VALUE (tmp))))\n+      {\n+\ttree t = make_node (RTL_EXPR);\n+\tTREE_TYPE (t) = TREE_TYPE (TREE_VALUE (tmp));\n+\tRTL_EXPR_RTL (t) = const0_rtx;\n+\tRTL_EXPR_SEQUENCE (t) = NULL_RTX;\n+\tTREE_VALUE (tmp) = t;\n+      }\n+\n   function = build_nt (CALL_EXPR, function, parms, NULL_TREE);\n   TREE_HAS_CONSTRUCTOR (function) = is_constructor;\n   TREE_TYPE (function) = result_type;"}, {"sha": "73701d2ee614daf54c4fa753c17f8220f8ed4cba", "filename": "gcc/cp/class.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=570221c20101ecc72f193e2b88e39069e05c963d", "patch": "@@ -5526,3 +5526,19 @@ build_self_reference ()\n   pushdecl_class_level (value);\n   return value;\n }\n+\n+/* Returns 1 if TYPE contains only padding bytes.  */\n+\n+int\n+is_empty_class (type)\n+     tree type;\n+{\n+  tree t;\n+\n+  if (! IS_AGGR_TYPE (type) || TYPE_BINFO_BASETYPES (type))\n+    return 0;\n+  t = TYPE_FIELDS (type);\n+  while (t && TREE_CODE (t) != FIELD_DECL)\n+    t = TREE_CHAIN (t);\n+  return (t == NULL_TREE);\n+}"}, {"sha": "9a86ebc609c9e57d180979c6f99a28cc53970783", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/570221c20101ecc72f193e2b88e39069e05c963d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=570221c20101ecc72f193e2b88e39069e05c963d", "patch": "@@ -44,15 +44,6 @@ is_friend (type, supplicant)\n \n   declp = (TREE_CODE_CLASS (TREE_CODE (supplicant)) == 'd');\n \n-  /* Local classes have the same access as the enclosing function.  */\n-  context = declp ? supplicant : TYPE_MAIN_DECL (supplicant);\n-  context = hack_decl_function_context (context);\n-  if (context)\n-    {\n-      supplicant = context;\n-      declp = 1;\n-    }\n-\n   if (declp)\n     /* It's a function decl.  */\n     {\n@@ -121,8 +112,10 @@ is_friend (type, supplicant)\n \n   if (declp && DECL_FUNCTION_MEMBER_P (supplicant))\n     context = DECL_CLASS_CONTEXT (supplicant);\n+  else if (! declp)\n+    /* Local classes have the same access as the enclosing function.  */\n+    context = hack_decl_function_context (TYPE_MAIN_DECL (supplicant));\n   else\n-    /* Nested classes don't inherit the access of their enclosing class.  */\n     context = NULL_TREE;\n \n   if (context)"}]}