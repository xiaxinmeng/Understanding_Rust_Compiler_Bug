{"sha": "e009aaf31fe0817ed9935c668817b2b83e141ba4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwOWFhZjMxZmUwODE3ZWQ5OTM1YzY2ODgxN2IyYjgzZTE0MWJhNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-16T23:56:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-16T23:56:12Z"}, "message": "loop.c (regs_patch_p): Add prototype.\n\n        * loop.c (regs_patch_p): Add prototype.\n        (add_label_notes, count_nonfixed_reads): Likewise.\n        (find_single_use_in_loop): Likewise.\n        (express_from): Surround prototype with #ifdef.\n        (giv_sort): Similarly.\n        * jump.c (mark_modified_reg): Add prototype.\n        * haifa-sched.c (is_prisky): Add prototype.\n        (queue_to_ready): Likewise.\n        * genextract.c (gen_insn): Add prototype.\n        * genemit.c (max_operand_1): Add prototype.\n        (max_operand_vec, print_code, gen_exp, gen_insn): Likewise.\n        (gen_expand, gen_explit, output_add_clobbers): Likewise.\n        (output_init_mov_optab): Likewise.\n        * genattrtab.c (attr_hash_add_rtx): Add prototype.\n        (attr_hash_add_string, write_length_unit_log): Likewise.\n        * genattr.c (init_range): Add prototype.\n        * combine.c (sets_function_arg_p): Add prototype.\n\nFrom-SVN: r19251", "tree": {"sha": "08a9115271749de97a7598114ffea608e5c1aca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a9115271749de97a7598114ffea608e5c1aca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e009aaf31fe0817ed9935c668817b2b83e141ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009aaf31fe0817ed9935c668817b2b83e141ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e009aaf31fe0817ed9935c668817b2b83e141ba4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009aaf31fe0817ed9935c668817b2b83e141ba4/comments", "author": null, "committer": null, "parents": [{"sha": "d77fac3be28ceefab764590a51a07cd6d0af3492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77fac3be28ceefab764590a51a07cd6d0af3492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77fac3be28ceefab764590a51a07cd6d0af3492"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "ef8ed46333d7545ea78807321823acd6521492ad", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -399,6 +399,7 @@ static void init_reg_last_arrays\tPROTO((void));\n static void setup_incoming_promotions   PROTO((void));\n static void set_nonzero_bits_and_sign_copies  PROTO((rtx, rtx));\n static int can_combine_p\tPROTO((rtx, rtx, rtx, rtx, rtx *, rtx *));\n+static int sets_function_arg_p\tPROTO((rtx));\n static int combinable_i3pat\tPROTO((rtx, rtx *, rtx, rtx, int, rtx *));\n static rtx try_combine\t\tPROTO((rtx, rtx, rtx));\n static void undo_all\t\tPROTO((void));"}, {"sha": "f2b97d3bf7ab85035f6123a15c481b62fd33a5a8", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -169,7 +169,8 @@ static void store_constructor_field PROTO((rtx, int, int, enum machine_mode,\n static void store_constructor\tPROTO((tree, rtx, int));\n static rtx store_field\t\tPROTO((rtx, int, int, enum machine_mode, tree,\n \t\t\t\t       enum machine_mode, int, int, int));\n-static enum memory_use_mode\tPROTO((enum expand_modifier));\n+static enum memory_use_mode\n+  get_memory_usage_from_modifier PROTO((enum expand_modifier));\n static tree save_noncopied_parts PROTO((tree, tree));\n static tree init_noncopied_parts PROTO((tree, tree));\n static int safe_from_p\t\tPROTO((rtx, tree, int));"}, {"sha": "58e99307b6caf1a1ee7ef086e3b0de80f1fc08bc", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -61,6 +61,7 @@ struct function_unit\n };\n \n static void extend_range PROTO((struct range *, int, int));\n+static void init_range PROTO((struct range *));\n static void write_upcase PROTO((char *));\n static void gen_attr PROTO((rtx));\n static void write_units PROTO((int, struct range *, struct range *,"}, {"sha": "2c2c9dd48ac83e3faed323f6640ff3ba1b92656a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -363,6 +363,8 @@ int optimize = 0;\n struct _global_rtl global_rtl;\n rtx pic_offset_table_rtx;\n \n+static void attr_hash_add_rtx\tPROTO((int, rtx));\n+static void attr_hash_add_string PROTO((int, char *));\n static rtx attr_rtx\t\tPVPROTO((enum rtx_code, ...));\n #ifdef HAVE_VPRINTF\n static char *attr_printf\tPVPROTO((int, char *, ...));\n@@ -396,6 +398,7 @@ static rtx identity_fn\t\tPROTO((rtx));\n static rtx zero_fn\t\tPROTO((rtx));\n static rtx one_fn\t\tPROTO((rtx));\n static rtx max_fn\t\tPROTO((rtx));\n+static void write_length_unit_log PROTO ((void));\n static rtx simplify_cond\tPROTO((rtx, int, int));\n #if 0\n static rtx simplify_by_alternatives PROTO((rtx, int, int));"}, {"sha": "209fe096e0c0267cce55de4e8f7a90287ba44e55", "filename": "gcc/genemit.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -63,6 +63,17 @@ struct clobber_ent\n   struct clobber_ent *next;\n };\n \n+static void max_operand_1\t\tPROTO((rtx));\n+static int max_operand_vec\t\tPROTO((rtx, int));\n+static void print_code\t\t\tPROTO((RTX_CODE));\n+static void gen_exp\t\t\tPROTO((rtx));\n+static void gen_insn\t\t\tPROTO((rtx));\n+static void gen_expand\t\t\tPROTO((rtx));\n+static void gen_split\t\t\tPROTO((rtx));\n+static void output_add_clobbers\t\tPROTO((void));\n+static void output_init_mov_optab\tPROTO((void));\n+\n+\f\n static void\n max_operand_1 (x)\n      rtx x;"}, {"sha": "574a8f38b9c92536c096b3694cbcf75d466ef1b6", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -95,6 +95,7 @@ static int dupnums[MAX_DUP_OPERANDS];\n \n static struct code_ptr *peepholes;\n \n+static void gen_insn PROTO ((rtx));\n static void walk_rtx PROTO ((rtx, char *));\n static void print_path PROTO ((char *));\n char *xmalloc PROTO ((unsigned));"}, {"sha": "5ca158728ea26abd73448696f99095f0353e0d18", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -518,7 +518,6 @@ extern rtx forced_labels;\n \n \n static int is_cfg_nonregular PROTO ((void));\n-void debug_control_flow PROTO ((void));\n static int build_control_flow PROTO ((int_list_ptr *, int_list_ptr *,\n \t\t\t\t      int *, int *));\n static void new_edge PROTO ((int, int));\n@@ -715,6 +714,7 @@ static int find_conditional_protection PROTO ((rtx, int));\n static int is_conditionally_protected PROTO ((rtx, int, int));\n static int may_trap_exp PROTO ((rtx, int));\n static int haifa_classify_insn PROTO ((rtx));\n+static int is_prisky PROTO ((rtx, int, int));\n static int is_exception_free PROTO ((rtx, int, int));\n \n static char find_insn_mem_list PROTO ((rtx, rtx, rtx, rtx));\n@@ -761,6 +761,7 @@ static void get_block_head_tail PROTO ((int, rtx *, rtx *));\n static void find_pre_sched_live PROTO ((int));\n static void find_post_sched_live PROTO ((int));\n static void update_reg_usage PROTO ((void));\n+static int queue_to_ready ((rtx [], int))\n \n void debug_ready_list PROTO ((rtx[], int));\n static void init_target_units PROTO (());"}, {"sha": "49c07fcb39edd423c6f1f6dd61e3c93b5d089724", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -116,6 +116,7 @@ static void mark_jump_label\t\tPROTO((rtx, rtx, int));\n static void delete_computation\t\tPROTO((rtx));\n static void delete_from_jump_chain\tPROTO((rtx));\n static int delete_labelref_insn\t\tPROTO((rtx, rtx, int));\n+static void mark_modified_reg\t\tPROTO((rtx, rtx));\n static void redirect_tablejump\t\tPROTO((rtx, rtx));\n static rtx find_insert_position         PROTO((rtx, rtx));\n \f"}, {"sha": "93269794200af70d8e654147d0b54b627fd2ced8", "filename": "gcc/loop.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009aaf31fe0817ed9935c668817b2b83e141ba4/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e009aaf31fe0817ed9935c668817b2b83e141ba4", "patch": "@@ -296,9 +296,13 @@ static int libcall_benefit PROTO((rtx));\n static void ignore_some_movables PROTO((struct movable *));\n static void force_movables PROTO((struct movable *));\n static void combine_movables PROTO((struct movable *, int));\n+static int regs_patch_p PROTO((rtx, rtx, struct movable *));\n static int rtx_equal_for_loop_p PROTO((rtx, rtx, struct movable *));\n+static void add_label_notes PROTO((rtx, rtx));\n static void move_movables PROTO((struct movable *, int, int, rtx, rtx, int));\n+static int count_nonfixed_reads PROTO((rtx));\n static void strength_reduce PROTO((rtx, rtx, rtx, int, rtx, rtx, int));\n+static void find_single_use_in_loop PROTO((rtx, rtx, rtx *));\n static int valid_initial_value_p PROTO((rtx, rtx, int, rtx));\n static void find_mem_givs PROTO((rtx, rtx, int, rtx, rtx));\n static void record_biv PROTO((struct induction *, rtx, rtx, rtx, rtx, int, int));\n@@ -310,8 +314,13 @@ static rtx simplify_giv_expr PROTO((rtx, int *));\n static int general_induction_var PROTO((rtx, rtx *, rtx *, rtx *));\n static int consec_sets_giv PROTO((int, rtx, rtx, rtx, rtx *, rtx *));\n static int check_dbra_loop PROTO((rtx, int, rtx));\n+#ifdef ADDRESS_COST\n static rtx express_from PROTO((struct induction *, struct induction *));\n+#endif\n static int combine_givs_p PROTO((struct induction *, struct induction *));\n+#ifdef GIV_SORT_CRITERION\n+static int giv_sort PROTO((struct induction **, struct induction **));\n+#endif\n static void combine_givs PROTO((struct iv_class *));\n static int product_cheap_p PROTO((rtx, rtx));\n static int maybe_eliminate_biv PROTO((struct iv_class *, rtx, rtx, int, int, int));"}]}