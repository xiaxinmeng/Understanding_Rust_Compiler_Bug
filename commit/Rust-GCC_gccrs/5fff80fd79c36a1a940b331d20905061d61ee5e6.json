{"sha": "5fff80fd79c36a1a940b331d20905061d61ee5e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmZjgwZmQ3OWMzNmExYTk0MGIzMzFkMjA5MDUwNjFkNjFlZTVlNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-15T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-15T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "d9f5540eaa89c7a70caf2cd6c30adb1dea484926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f5540eaa89c7a70caf2cd6c30adb1dea484926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fff80fd79c36a1a940b331d20905061d61ee5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fff80fd79c36a1a940b331d20905061d61ee5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fff80fd79c36a1a940b331d20905061d61ee5e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fff80fd79c36a1a940b331d20905061d61ee5e6/comments", "author": null, "committer": null, "parents": [{"sha": "b95d97f1a5f54f55c15bca65ec79b626b53cd40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95d97f1a5f54f55c15bca65ec79b626b53cd40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95d97f1a5f54f55c15bca65ec79b626b53cd40c"}], "stats": {"total": 479, "additions": 478, "deletions": 1}, "files": [{"sha": "9b7e4a7691025afc7e7cea22123822a1828525c1", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,7 @@\n+2021-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Fix infinite loop for unsupported files.\n+\n 2021-01-13  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Support wrapping of functions"}, {"sha": "1e3f28fbf4af3ed811e73d205c398e945dc6efa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,217 @@\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/98586\n+\t* diagnostic.c (diagnostic_kind_text): Break out this array\n+\tfrom...\n+\t(diagnostic_build_prefix): ...here.\n+\t(fancy_abort): Detect when diagnostic_initialize has not yet been\n+\tcalled and fall back to a minimal implementation of printing the\n+\tICE, rather than segfaulting in internal_error.\n+\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.c (diagnostic_initialize): Eliminate\n+\tparseable_fixits_p in favor of initializing extra_output_kind from\n+\tGCC_EXTRA_DIAGNOSTIC_OUTPUT.\n+\t(convert_column_unit): New function, split out from...\n+\t(diagnostic_converted_column): ...this.\n+\t(print_parseable_fixits): Add \"column_unit\" and \"tabstop\" params.\n+\tUse them to call convert_column_unit on the column values.\n+\t(diagnostic_report_diagnostic): Eliminate conditional on\n+\tparseable_fixits_p in favor of a switch statement on\n+\textra_output_kind, passing the appropriate values to the new\n+\tparams of print_parseable_fixits.\n+\t(selftest::test_print_parseable_fixits_none): Update for new\n+\tparams of print_parseable_fixits.\n+\t(selftest::test_print_parseable_fixits_insert): Likewise.\n+\t(selftest::test_print_parseable_fixits_remove): Likewise.\n+\t(selftest::test_print_parseable_fixits_replace): Likewise.\n+\t(selftest::test_print_parseable_fixits_bytes_vs_display_columns):\n+\tNew.\n+\t(selftest::diagnostic_c_tests): Call it.\n+\t* diagnostic.h (enum diagnostics_extra_output_kind): New.\n+\t(diagnostic_context::parseable_fixits_p): Delete field in favor\n+\tof...\n+\t(diagnostic_context::extra_output_kind): ...this new field.\n+\t* doc/invoke.texi (Environment Variables): Add\n+\tGCC_EXTRA_DIAGNOSTIC_OUTPUT.\n+\t* opts.c (common_handle_option): Update handling of\n+\tOPT_fdiagnostics_parseable_fixits for change to diagnostic_context\n+\tfields.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (class complex_operations_pattern,\n+\tcomplex_operations_pattern::matches,\n+\tcomplex_operations_pattern::recognize,\n+\tcomplex_operations_pattern::build): New.\n+\t(slp_patterns): Use it.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* internal-fn.def (COMPLEX_FMS, COMPLEX_FMS_CONJ): New.\n+\t* optabs.def (cmls_optab, cmls_conj_optab): New.\n+\t* doc/md.texi: Document them.\n+\t* tree-vect-slp-patterns.c (class complex_fms_pattern,\n+\tcomplex_fms_pattern::matches, complex_fms_pattern::recognize,\n+\tcomplex_fms_pattern::build): New.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* internal-fn.def (COMPLEX_FMA, COMPLEX_FMA_CONJ): New.\n+\t* optabs.def (cmla_optab, cmla_conj_optab): New.\n+\t* doc/md.texi: Document them.\n+\t* tree-vect-slp-patterns.c (vect_match_call_p,\n+\tclass complex_fma_pattern, vect_slp_reset_pattern,\n+\tcomplex_fma_pattern::matches, complex_fma_pattern::recognize,\n+\tcomplex_fma_pattern::build): New.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* internal-fn.def (COMPLEX_MUL, COMPLEX_MUL_CONJ): New.\n+\t* optabs.def (cmul_optab, cmul_conj_optab): New.\n+\t* doc/md.texi: Document them.\n+\t* tree-vect-slp-patterns.c (vect_match_call_complex_mla,\n+\tvect_normalize_conj_loc, is_eq_or_top, vect_validate_multiplication,\n+\tvect_build_combine_node, class complex_mul_pattern,\n+\tcomplex_mul_pattern::matches, complex_mul_pattern::recognize,\n+\tcomplex_mul_pattern::build): New.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp.c (optimize_load_redistribution_1): New.\n+\t(optimize_load_redistribution, vect_is_slp_load_node): New.\n+\t(vect_match_slp_patterns): Use it.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (complex_add_pattern::build):\n+\tElide nodes.\n+\n+2021-01-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.c (main): Create an offload image only in\n+\t64-bit configurations.\n+\n+2021-01-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98667\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tIssue an error for -fcf-protection with CF_BRANCH when compiling\n+\tfor 32-bit non-TARGET_CMOV targets.\n+\n+2021-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98671\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p):\n+\tRemove declaration and initialization of shadow variable \"ret\".\n+\t(ix86_option_override_internal): Remove delcaration of\n+\tshadow variable \"i\".  Redeclare shadowed variable to unsigned.\n+\t* common/config/i386/i386-common.c (pta_size): Redeclare to unsigned.\n+\t* config/i386/i386-builtins.c (get_builtin_code_for_version):\n+\tUpdate for redeclaration.\n+\t* config/i386/i386.h (pta_size): Ditto.\n+\n+2021-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98674\n+\t* tree-data-ref.c (base_supports_access_fn_components_p): New.\n+\t(initialize_data_dependence_relation): For two bases without\n+\tpossible access fns resort to type size equality when determining\n+\tshape compatibility.\n+\n+2021-01-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/66791\n+\t* config/arm/arm_neon.h: Replace calls to __builtin_vcge* by\n+\t<=, >= operators in vcle and vcge intrinsics respectively.\n+\t* config/arm/arm_neon_builtins.def: Remove entry for\n+\tvcge and vcgeu.\n+\n+2021-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/98671\n+\t* config/i386/i386-options.c (ix86_function_specific_save):\n+\tRemove redundant assignment to opts->x_ix86_branch_cost.\n+\t* config/i386/i386.c (ix86_prefetch_sse):\n+\tRename from x86_prefetch_sse.  Update all uses.\n+\t* config/i386/i386.h: Update for rename.\n+\t* config/i386/i386-options.h: Ditto.\n+\n+2021-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98670\n+\t* config/i386/sse.md (*sse4_1_zero_extendv8qiv8hi2_3,\n+\t*sse4_1_zero_extendv4hiv4si2_3, *sse4_1_zero_extendv2siv2di2_3):\n+\tUse Bm instead of m for non-avx.  Add isa attribute.\n+\n+2021-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96688\n+\t* match.pd (~(X >> Y) -> ~X >> Y): New simplification if\n+\t~X can be simplified.\n+\n+2021-01-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vect_model_load_cost): Account for unused\n+\tIFN_LOAD_LANES results.\n+\n+2021-01-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>xtl<mode>):\n+\tDefine.\n+\t(aarch64_xtn<mode>): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (sxtl, uxtl, xtn):\n+\tDefine\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vmovl_s8): Reimplement using\n+\tbuiltin.\n+\t(vmovl_s16): Likewise.\n+\t(vmovl_s32): Likewise.\n+\t(vmovl_u8): Likewise.\n+\t(vmovl_u16): Likewise.\n+\t(vmovl_u32): Likewise.\n+\t(vmovn_s16): Likewise.\n+\t(vmovn_s32): Likewise.\n+\t(vmovn_s64): Likewise.\n+\t(vmovn_u16): Likewise.\n+\t(vmovn_u32): Likewise.\n+\t(vmovn_u64): Likewise.\n+\n+2021-01-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>qxtn2<mode>_le):\n+\tDefine.\n+\t(aarch64_<su>qxtn2<mode>_be): Likewise.\n+\t(aarch64_<su>qxtn2<mode>): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (sqxtn2, uqxtn2):\n+\tDefine builtins.\n+\t* config/aarch64/iterators.md (SAT_TRUNC): Define code_iterator.\n+\t(su): Handle ss_truncate and us_truncate.\n+\t* config/aarch64/arm_neon.h (vqmovn_high_s16): Reimplement using\n+\tbuiltin.\n+\t(vqmovn_high_s32): Likewise.\n+\t(vqmovn_high_s64): Likewise.\n+\t(vqmovn_high_u16): Likewise.\n+\t(vqmovn_high_u32): Likewise.\n+\t(vqmovn_high_u64): Likewise.\n+\n+2021-01-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_xtn2<mode>_le):\n+\tDefine.\n+\t(aarch64_xtn2<mode>_be): Likewise.\n+\t(aarch64_xtn2<mode>): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (xtn2): Define\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vmovn_high_s16): Reimplement using\n+\tbuiltins.\n+\t(vmovn_high_s32): Likewise.\n+\t(vmovn_high_s64): Likewise.\n+\t(vmovn_high_u16): Likewise.\n+\t(vmovn_high_u32): Likewise.\n+\t(vmovn_high_u64): Likewise.\n+\n 2021-01-13  Stafford Horne  <shorne@gmail.com>\n \n \t* config/or1k/or1k.h (ASM_PREFERRED_EH_DATA_FORMAT): New macro."}, {"sha": "75c2a43429f260b5f0f6624bc895967673c8e09c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1 +1 @@\n-20210114\n+20210115"}, {"sha": "a6b2b89374adabdbcfb29d407280412fdfdfa4e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,9 @@\n+2021-01-14  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\tPR ada/98595\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS) <riscv*-*-rtems*>: Use\n+\twraplf version of Aux_Long_Long_Float.\n+\n 2021-01-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads: Bump copyright year."}, {"sha": "435c1b299044bd94cc9a592c678b26c2f220d409", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,25 @@\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (strongly_connected_components::to_json): New.\n+\t(worklist::to_json): New.\n+\t(exploded_graph::to_json): JSON-ify the worklist.\n+\t* exploded-graph.h (strongly_connected_components::to_json): New\n+\tdecl.\n+\t(worklist::to_json): New decl.\n+\t* store.cc (store::to_json): Fix comment.\n+\t* supergraph.cc (supernode::to_json): Fix reference to\n+\t\"returning_call\" in comment.  Add optional \"fun\" to JSON.\n+\t(edge_kind_to_string): New.\n+\t(superedge::to_json): Add \"kind\" to JSON.\n+\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98679\n+\t* analyzer.h (region_offset::operator==): Make const.\n+\t* pending-diagnostic.h (pending_diagnostic::equal_p): Likewise.\n+\t* store.h (binding_cluster::for_each_value): Likewise.\n+\t(binding_cluster::for_each_binding): Likewise.\n+\n 2021-01-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/98628"}, {"sha": "7eb6773d02e6ce965e74e946595998d9235b8b5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,13 @@\n+2021-01-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.c (process_init_constructor_record): Use fldtype\n+\tvariable consistently.\n+\n+2021-01-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98372\n+\t* tree.c (cp_tree_equal): Correct map_context logic.\n+\n 2021-01-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/98231"}, {"sha": "c348517d3aca1661abb55ba574feb2fb9494dcc3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,32 @@\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.h (gfc_resolve_substring): Add prototype.\n+\t* primary.c (match_string_constant): Simplify substrings with\n+\tconstant starting and ending points.\n+\t* resolve.c: Rename resolve_substring to gfc_resolve_substring.\n+\t(gfc_resolve_ref): Use renamed function gfc_resolve_substring.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* resolve.c (resolve_component): Derived type components with\n+\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* resolve.c (resolve_component): Derived type components with\n+\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* resolve.c (resolve_component): Derived type components with\n+\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n+\n 2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/93794"}, {"sha": "4d81b8435522475e0d897971463e459d504f7be0", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,9 @@\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/index.rst: Remove \"Alpha\" warning.\n+\t* docs/index.rst: Likewise.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate\n+\n 2020-11-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/94982"}, {"sha": "c27656e7454adc500be8658badcda8f0cf62a75d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,129 @@\n+2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c:\n+\tNew file.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c:\n+\tNew file.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.\n+\n+2021-01-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/complex/complex-mla-template.c: New test.\n+\t* gcc.dg/vect/complex/complex-mls-template.c: New test.\n+\t* gcc.dg/vect/complex/complex-mul-template.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mla-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mls-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-mul-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mla-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mls-half-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-double.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-float.c: New test.\n+\t* gcc.dg/vect/complex/fast-math-complex-mul-half-float.c: New test.\n+\n+2021-01-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/template/pr98372.C: Only run in C++14 and up.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* substr_10.f90: New test.\n+\t* substr_9.f90: New test.\n+\n+2021-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/analyzer/sigsetjmp-5.c: Use sigjmp_buf.\n+\t* gcc.dg/analyzer/sigsetjmp-6.c: Likewise.\n+\n+2021-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/analyzer/sensitive-1.c: Declare getpass.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* gfortran.dg/pr98661.f90: New test.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* gfortran.dg/pr98661.f90: New test.\n+\n+2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98661\n+\t* gfortran.dg/pr98661.f90: New test.\n+\n+2021-01-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/gcov/gcov-17.C: New test.\n+\t* g++.dg/gcov/test-gcov-17.py: New test.\n+\n+2021-01-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98667\n+\t* gcc.target/i386/pr98667-1.c: New file.\n+\t* gcc.target/i386/pr98667-2.c: Likewise.\n+\t* gcc.target/i386/pr98667-3.c: Likewise.\n+\n+2021-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98674\n+\t* gcc.dg/vect/pr98674.c: New testcase.\n+\n+2021-01-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98676\n+\t* gcc.target/i386/pr95021-1.c: Add -mpreferred-stack-boundary=4\n+\t-mno-stackrealign.\n+\t* gcc.target/i386/pr95021-3.c: Likewise.\n+\n+2021-01-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98372\n+\t* g++.dg/cpp0x/constexpr-52830.C: Restore dg-ice\n+\t* g++.dg/template/pr98372.C: New.\n+\n+2021-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98670\n+\t* gcc.target/i386/pr98670.c: New test.\n+\n+2021-01-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96688\n+\t* gcc.dg/tree-ssa/pr96688.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-37.c: Adjust scan-tree-dump regex.\n+\t* gcc.target/i386/pr66821.c: Likewise.\n+\n+2021-01-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_11.c: New test.\n+\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Use\n+\t-fno-vect-cost-model.\n+\n+2021-01-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Update uqxtn2 and\n+\tsqxtn2 scan-assembler-times.\n+\n+2021-01-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Adjust\n+\tscan-assembler-times for xtn2.\n+\n 2021-01-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/98231"}, {"sha": "7de6311f119d6cfe05ec0ae81e7977103e2d16ac", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,12 @@\n+2021-01-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/65099\n+\t* plugin/configfrag.ac (PLUGIN_NVPTX): Restrict to supported\n+\tconfigurations.\n+\t* configure: Regenerate.\n+\t* plugin/plugin-nvptx.c (nvptx_get_num_devices): Remove 64-bit\n+\tcheck.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "c2b92608888fff9160ca41d0996a8e83b1b62588", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fff80fd79c36a1a940b331d20905061d61ee5e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fff80fd79c36a1a940b331d20905061d61ee5e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5fff80fd79c36a1a940b331d20905061d61ee5e6", "patch": "@@ -1,3 +1,54 @@\n+2021-01-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/23_containers/deque/debug/98466.cc: Make it pre-C++11\n+\tcompliant.\n+\n+2021-01-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/30_threads/future/members/poll.cc: Calibrate\n+\titeration count.\n+\n+2021-01-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/98466\n+\t* include/bits/hashtable_policy.h (_Node_iterator_base()): Set _M_cur to nullptr.\n+\t(_Node_iterator()): Make default.\n+\t(_Node_const_iterator()): Make default.\n+\t* include/debug/macros.h (__glibcxx_check_erae_range_after): Add _M_singular\n+\titerator checks.\n+\t* include/debug/safe_iterator.h\n+\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS): Accept if both iterator are value initialized.\n+\t* include/debug/safe_local_iterator.h (_GLIBCXX_DEBUG_VERIFY_OPERANDS):\n+\tLikewise.\n+\t* include/debug/safe_iterator.tcc (_Safe_iterator<>::_M_valid_range): Add\n+\t_M_singular checks on input iterators.\n+\t* src/c++11/debug.cc (_Safe_iterator_base::_M_can_compare): Remove _M_singular\n+\tchecks.\n+\t* testsuite/23_containers/deque/debug/98466.cc: New test.\n+\t* testsuite/23_containers/unordered_map/debug/98466.cc: New test.\n+\n+2021-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98471\n+\t* include/bits/fs_path.h (__throw_conversion_error): New\n+\tfunction to throw or abort on character conversion errors.\n+\t(__wstr_from_utf8): Move definition after filesystem_error has\n+\tbeen defined. Use __throw_conversion_error.\n+\t(path::_S_convert<_EcharT>): Use __throw_conversion_error.\n+\t(path::_S_str_convert<_CharT, _Traits, _Allocator>): Likewise.\n+\t(path::u8string): Likewise.\n+\n+2021-01-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/barrier: Update copyright years. Fix whitespace.\n+\t* include/std/version: Fix whitespace.\n+\t* testsuite/30_threads/barrier/1.cc: Update copyright years.\n+\t* testsuite/30_threads/barrier/2.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_drop.cc: Likewise.\n+\t* testsuite/30_threads/barrier/arrive_and_wait.cc: Likewise.\n+\t* testsuite/30_threads/barrier/completion.cc: Likewise.\n+\n 2021-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/doxygen/user.cfg.in (INPUT): Remove include/debug/array."}]}