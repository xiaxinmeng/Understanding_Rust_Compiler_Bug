{"sha": "74d06cf221682acc2ce3f55b52020e63c88f5a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkMDZjZjIyMTY4MmFjYzJjZTNmNTViNTIwMjBlNjNjODhmNWE2OA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-17T21:31:42Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-17T21:31:42Z"}, "message": "cpplib.c (do_sccs): Handle #sccs on all systems.\n\n\t* cpplib.c (do_sccs): Handle #sccs on all systems.\n\t* system.h (SCCS_DIRECTIVE): Poison.\n\t* config/darwin.h, config/freebsd.h, config/netbsd.h,\n\tconfig/ptx4.h, config/svr3.h, config/svr4.h, config/alpha/elf.h,\n\tconfig/arm/linux-elf.h, config/c4x/c4x.h, config/d30v/d30v.h,\n\tconfig/i370/i370.h, config/i386/gas.h, config/i386/sco5.h,\n\tconfig/i960/i960.h, config/m68hc11/m68hc11.h, config/m68k/3b1.h,\n\tconfig/m68k/3b1g.h, config/m68k/crds.h, config/m68k/mot3300.h,\n\tconfig/m68k/pbb.h, config/m88k/m88k.h, config/mips/mips.h,\n\tconfig/sparc/pbd.h, config/stormy16/stormy16.h, config/vax/vaxv.h:\n\tRemove all references to SCCS_DIRECTIVE.\n\t* doc/cpp.texi, doc/tm.texi: Update.\n\nFrom-SVN: r55542", "tree": {"sha": "fe351c680db9579e33873d4fc5b985b8dde0266f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe351c680db9579e33873d4fc5b985b8dde0266f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d06cf221682acc2ce3f55b52020e63c88f5a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d06cf221682acc2ce3f55b52020e63c88f5a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d06cf221682acc2ce3f55b52020e63c88f5a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d06cf221682acc2ce3f55b52020e63c88f5a68/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61dde664e4595c54df930963a2f7b731a8566bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dde664e4595c54df930963a2f7b731a8566bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61dde664e4595c54df930963a2f7b731a8566bc8"}], "stats": {"total": 135, "additions": 20, "deletions": 115}, "files": [{"sha": "01b605fbcab27f5e808b4903c2b22715f7d6cfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1,3 +1,18 @@\n+2002-07-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpplib.c (do_sccs): Handle #sccs on all systems.\n+\t* system.h (SCCS_DIRECTIVE): Poison.\n+\t* config/darwin.h, config/freebsd.h, config/netbsd.h,\n+\tconfig/ptx4.h, config/svr3.h, config/svr4.h, config/alpha/elf.h,\n+\tconfig/arm/linux-elf.h, config/c4x/c4x.h, config/d30v/d30v.h,\n+\tconfig/i370/i370.h, config/i386/gas.h, config/i386/sco5.h,\n+\tconfig/i960/i960.h, config/m68hc11/m68hc11.h, config/m68k/3b1.h,\n+\tconfig/m68k/3b1g.h, config/m68k/crds.h, config/m68k/mot3300.h,\n+\tconfig/m68k/pbb.h, config/m88k/m88k.h, config/mips/mips.h,\n+\tconfig/sparc/pbd.h, config/stormy16/stormy16.h, config/vax/vaxv.h:\n+\tRemove all references to SCCS_DIRECTIVE.\n+\t* doc/cpp.texi, doc/tm.texi: Update.\n+\n Wed Jul 17 19:23:32 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* regrename.c (maybe_mode_change): New function."}, {"sha": "180fbcb6d8421d26eb858941baa6b2e5fb9d5d00", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -68,9 +68,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef  IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n-/* Allow #sccs in preprocessor.  */\n-#define SCCS_DIRECTIVE\n-\n /* Output #ident as a .ident.  */\n #undef  ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\"}, {"sha": "792ea7362657d5dafa1ebb1b7176fbb74707fdc9", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -99,9 +99,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_assert (\"system=posix\");\t\\\n     } while (0)\n \n-/* Allow #sccs in preprocessor.  */\n-#define SCCS_DIRECTIVE\n-\n /* This is how we tell the assembler that two symbols have the same value.  */\n #define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n   do\t\t\t\t\t   \\"}, {"sha": "63d80b28ab8ac6d06ea4338a628d0931049d6e73", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1793,10 +1793,6 @@ do {\t\t\t\t\t\t\\\n #define DOUBLE_TYPE_SIZE\t32\n #define LONG_DOUBLE_TYPE_SIZE\t64 /* Actually only 40.  */\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Output #ident as a .ident.  */\n \n #define ASM_OUTPUT_IDENT(FILE, NAME) \\"}, {"sha": "44d70fbf86951e014b832c3c963b88bf2ea4ab93", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -4286,12 +4286,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    should be used on RISC machines.  */\n /* #define INTEGRATE_THRESHOLD(DECL) */\n \n-/* Define this if the preprocessor should ignore `#sccs' directives and print\n-   no error message.\n-\n-   Defined in svr4.h.  */\n-/* #define SCCS_DIRECTIVE */\n-\n /* Define this macro if the system header files support C++ as well as C.  This\n    macro inhibits the usual method of using system header files in C++, which\n    is to pretend that the file's contents are enclosed in `extern \"C\" {...}'.  */"}, {"sha": "339fb6b9b0b750f4996dbd31cb7a46492c74ee6a", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -103,10 +103,6 @@ Boston, MA 02111-1307, USA.  */\n #undef\tDOLLARS_IN_IDENTIFIERS\n #define DOLLARS_IN_IDENTIFIERS 2\n \n-/* Allow #sccs (but don't do anything). */\n-\n-#define SCCS_DIRECTIVE\n-\n /* We use Dbx symbol format.  */\n \n #define DBX_DEBUGGING_INFO"}, {"sha": "285f5bf85f9b0beeba11b3062f922f1357372fc9", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -67,10 +67,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  NO_IMPLICIT_EXTERN_C\n #define NO_IMPLICIT_EXTERN_C\t1\n \n-/* Allow #sccs in preprocessor.  */\n-#undef  SCCS_DIRECTIVE\n-#define SCCS_DIRECTIVE\t1\n-\n /* Make gcc agree with FreeBSD's standard headers (<machine/ansi.h>, etc...)  */\n \n #undef  WCHAR_TYPE"}, {"sha": "3b7a798def504fe0430a0b14153015ed2d6d994c", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1905,9 +1905,6 @@ abort(); \\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),    \\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n  \n-/* Allow #sccs in preprocessor.  */\n-#define SCCS_DIRECTIVE\n-\n  /* Implicit library calls should use memcpy, not bcopy, etc.  */\n #define TARGET_MEM_FUNCTIONS\n  "}, {"sha": "7c15e0bdb13c7e833d3f8828b921df9a28674e74", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -45,10 +45,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define SDB_DEBUGGING_INFO\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Output #ident as a .ident.  */\n \n #define ASM_OUTPUT_IDENT(FILE, NAME) fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME);"}, {"sha": "53b1a183fcb4567dc89356b6fea2c53fb287e122", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -541,9 +541,6 @@ init_section ()\t\t\t\t\t\t\t\t\\\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME);\t\t\\\n \tfputc ('\\n', FILE); } while (0)\n \n-#undef SCCS_DIRECTIVE\n-#define SCCS_DIRECTIVE 1\n-\n /*\n  * Define sizes and types\n  */"}, {"sha": "b048d99b25c4cdfee887bfc778062d151738a843", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1151,9 +1151,6 @@ struct cum_args { int ca_nregparms; int ca_nstackparms; };\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n \n-/* Allow and ignore #sccs directives.  */\n-#define\tSCCS_DIRECTIVE\n-\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 16"}, {"sha": "0dec6e6a5f910ccd123d48a5b0686c60bc3e08a7", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1706,9 +1706,6 @@ do {                                                                    \\\n    purposes) so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE\t\tQImode\n \n-/* define SCCS_DIRECTIVE if SCCS directives should be ignored */\n-#define SCCS_DIRECTIVE\t\t1\n-\n /* Allow $ in identifiers */\n #define DOLLARS_IN_IDENTIFIERS\t1\n "}, {"sha": "898ece10c66d55cffa367d86ca5dc42d8e875383", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -50,10 +50,6 @@ Boston, MA 02111-1307, USA.  */\n   \"%{!shlib:%{pg:mcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}\\\n    %{shlib:crt0s.o%s shlib.ifile%s} \"\n \n-/* cpp has to support a #sccs directive for the /usr/include files */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Make output for SDB.  */\n \n #define SDB_DEBUGGING_INFO"}, {"sha": "5aecd46291916ab70a1573c92b7d357b3beabad1", "filename": "gcc/config/m68k/3b1g.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2F3b1g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2F3b1g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1g.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -43,9 +43,6 @@ Boston, MA 02111-1307, USA.  */\n /* This is (not really) BSD, so (but) it wants DBX format.  */\n #define DBX_DEBUGGING_INFO\n \n-/* Brain damage.  */\n-#define SCCS_DIRECTIVE\n-\n /* Specify how to pad function arguments.\n    Value should be `upward', `downward' or `none'.\n    Same as the default, except no padding for large or variable-size args.  */"}, {"sha": "563234ce2433b701766303de12066548cc80393a", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -68,10 +68,6 @@ Boston, MA 02111-1307, USA.  */\n #undef CC1_SPEC\n #define CC1_SPEC \"%{O2:-fstrength-reduce}\"\n \n-/* cpp has to support a #sccs directive for the /usr/include files */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Make output for SDB.  */\n \n /* #define SDB_DEBUGGING_INFO UNOS casm has no debugging :-( */"}, {"sha": "8868e6e537dc6f0df1398cf13bc739f8e1d9b1e2", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -118,10 +118,6 @@ Boston, MA 02111-1307, USA.  */\n #undef PARM_BOUNDARY\n #define PARM_BOUNDARY 16\n \n-/* cpp has to support a #sccs directive for the /usr/include files */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Make output for SDB.  */\n \n #define SDB_DEBUGGING_INFO"}, {"sha": "01d96bce2c1d64438c1982bd7318aa60faf1f23a", "filename": "gcc/config/m68k/pbb.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fpbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm68k%2Fpbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpbb.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -83,10 +83,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define ENDFILE_SPEC \"crtn.o%s\"\n \n-/* cpp has to support a #sccs directive for the /usr/include files */\n-\n-#define SCCS_DIRECTIVE\n-\n /* GAS register prefix assembly syntax: */\n \n /* User labels have no prefix */"}, {"sha": "abfca762bbe90cb49c0277b22f1f08139d61bd3a", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -1446,9 +1446,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n /* The 88open ABI says size_t is unsigned int.  */\n #define SIZE_TYPE \"unsigned int\"\n \n-/* Allow and ignore #sccs directives */\n-#define SCCS_DIRECTIVE\n-\n /* Handle #pragma pack and sometimes #pragma weak.  */\n #define HANDLE_SYSV_PRAGMA\n "}, {"sha": "f57199c213125be86da0eea08d3c7e50eddf8d52", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -4350,9 +4350,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(STREAM, STRING, LEN)\t\t\t\t\\\n   mips_output_ascii (STREAM, STRING, LEN)\n \n-/* Handle certain cpp directives used in header files on sysV.  */\n-#define SCCS_DIRECTIVE\n-\n /* Output #ident as a in the read-only data section.  */\n #undef  ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, STRING)\t\t\t\t\t\\"}, {"sha": "38eb7491d8441abe3a1807ddb01b21d92ab47e1c", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -128,11 +128,6 @@ Boston, MA 02111-1307, USA.  */\n     fprintf ((STREAM), \"void __fini() {\\n\\t%s();\\n}\\n\", (FUNC));\t\\\n   } while (0)\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#undef SCCS_DIRECTIVE\n-#define SCCS_DIRECTIVE\n-\n #undef TARGET_HAS_F_SETLKW\n #define TARGET_HAS_F_SETLKW\n "}, {"sha": "d4a61de810753d47c70751d1e601376faf8633bf", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -180,10 +180,6 @@ Boston, MA 02111-1307, USA.\n \t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Don't use bcopy, which doesn't handle overlaps before DYNIX/ptx 4.6. */\n \n #undef HAVE_BCOPY"}, {"sha": "18391abed9a49e3c9ac85afcbcbd9d7b43bf9c74", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -59,10 +59,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define ENDFILE_SPEC \"crtn.o%s\"\n \n-/* cpp has to support a #sccs directive for the /usr/include files */\n-\n-#define SCCS_DIRECTIVE\n-\n /* LINK_SPEC is needed only for SunOS 4.  */\n \n #undef LINK_SPEC"}, {"sha": "8fe189290bbc35c8664b3312d98c215eefbc6831", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -3923,12 +3923,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    should be used on RISC machines.  */\n /* #define INTEGRATE_THRESHOLD(DECL) */\n \n-/* Define this if the preprocessor should ignore `#sccs' directives and print\n-   no error message.\n-\n-   Defined in svr4.h.  */\n-/* #define SCCS_DIRECTIVE */\n-\n /* Define this macro if the system header files support C++ as well as C.  This\n    macro inhibits the usual method of using system header files in C++, which\n    is to pretend that the file's contents are enclosed in `extern \"C\" {...}'.  */"}, {"sha": "13e46b2e4c4d6a6440d9aa62c12c323fde3df509", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -113,10 +113,6 @@ Boston, MA 02111-1307, USA.\n #define LINK_SPEC \"%{T*} %{z:-lm}\"\n #endif\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#define SCCS_DIRECTIVE\n-\n /* Output #ident as a .ident.  */\n \n #undef  ASM_OUTPUT_IDENT"}, {"sha": "bc6a3b8ed5dc64566552d94730165cb47091e575", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -192,10 +192,6 @@ Boston, MA 02111-1307, USA.\n \t\t\t%{!ansi:values-Xa.o%s} \\\n  \t\t\tcrtbegin.o%s\"\n \n-/* Allow #sccs in preprocessor.  */\n-\n-#define SCCS_DIRECTIVE\n-\n /* The numbers used to denote specific machine registers in the System V\n    Release 4 DWARF debugging information are quite likely to be totally\n    different from the numbers used in BSD stabs debugging information"}, {"sha": "7b8e7fff5ff0ae4404b0f3e5f1bbfba45853ceef", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -18,10 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Cope with these under SysV */\n-\n-#define SCCS_DIRECTIVE\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\"}, {"sha": "c87572aba1204b5bbe7f8f887d1246fbd379d928", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -162,14 +162,7 @@ D(ident,\tT_IDENT,\tEXTENSION, IN_I)\t   /*     11 */ \\\n D(import,\tT_IMPORT,\tEXTENSION, INCL | EXPAND)  /* 0 ObjC */\t\\\n D(assert,\tT_ASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n D(unassert,\tT_UNASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n-SCCS_ENTRY\t\t\t\t\t\t   /* 0 SVR4? */\n-\n-/* #sccs is not always recognized.  */\n-#ifdef SCCS_DIRECTIVE\n-# define SCCS_ENTRY D(sccs, T_SCCS, EXTENSION, 0)\n-#else\n-# define SCCS_ENTRY /* nothing */\n-#endif\n+D(sccs,\t\tT_SCCS,\t\tEXTENSION, 0)\t\t   /* 0 SVR4? */\n \n /* Use the table to generate a series of prototypes, an enum for the\n    directive names, and an array of directive handlers.  */\n@@ -1319,14 +1312,12 @@ _cpp_do__Pragma (pfile)\n     }\n }\n \n-/* Just ignore #sccs, on systems where we define it at all.  */\n-#ifdef SCCS_DIRECTIVE\n+/* Just ignore #sccs on all systems.  */\n static void\n do_sccs (pfile)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n }\n-#endif\n \n /* Handle #ifdef.  */\n static void"}, {"sha": "28e78000cf8db9b6fecfc8debe5fef0abf2f9db6", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -3252,8 +3252,8 @@ This directive is not part of the C standard, but it is not an official\n GNU extension either.  We believe it came from System V@.\n \n @findex #sccs\n-The @samp{#sccs} directive is recognized on some systems, because it\n-appears in their header files.  It is a very old, obscure, extension\n+The @samp{#sccs} directive is recognized, because it appears in the\n+header files of some systems.  It is a very old, obscure, extension\n which we did not invent, and we have been unable to find any\n documentation of what it should do, so GCC simply ignores it.\n "}, {"sha": "17d0d138aef20dad84d4116cc3d9e254250cf606", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -8584,11 +8584,6 @@ Defining @code{STDC_0_IN_SYSTEM_HEADERS} makes GNU CPP follows the host\n convention when processing system header files, but when processing user\n files @code{__STDC__} will always expand to 1.\n \n-@findex SCCS_DIRECTIVE\n-@item SCCS_DIRECTIVE\n-Define this if the preprocessor should ignore @code{#sccs} directives\n-and print no error message.\n-\n @findex NO_IMPLICIT_EXTERN_C\n @item NO_IMPLICIT_EXTERN_C\n Define this macro if the system header files support C++ as well as C@."}, {"sha": "47cabcf4e7f30739d9423341212c9ddec9cd9332", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d06cf221682acc2ce3f55b52020e63c88f5a68/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=74d06cf221682acc2ce3f55b52020e63c88f5a68", "patch": "@@ -620,7 +620,7 @@ typedef char _Bool;\n \tNO_BUILTIN_PTRDIFF_TYPE NO_BUILTIN_WCHAR_TYPE NO_BUILTIN_WINT_TYPE \\\n \tBLOCK_PROFILER BLOCK_PROFILER_CODE FUNCTION_BLOCK_PROFILER\t   \\\n \tFUNCTION_BLOCK_PROFILER_EXIT MACHINE_STATE_SAVE\t\t\t   \\\n-\tMACHINE_STATE_RESTORE\n+\tMACHINE_STATE_RESTORE SCCS_DIRECTIVE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}