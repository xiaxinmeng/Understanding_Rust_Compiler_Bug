{"sha": "6271a07219a7d764ef59607836c01e0084c3d50c", "node_id": "C_kwDOANBUbNoAKDYyNzFhMDcyMTlhN2Q3NjRlZjU5NjA3ODM2YzAxZTAwODRjM2Q1MGM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-09T21:45:44Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T07:26:24Z"}, "message": "RISC-V: Add vnsrl/vnsra/vncvt/vmerge/vmv C/C++ support\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (Wbr): Remove unused constraint.\n\t* config/riscv/predicates.md: Fix move operand predicate.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vnshift): New class.\n\t(class vncvt_x): Ditto.\n\t(class vmerge): Ditto.\n\t(class vmv_v): Ditto.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vsra): Ditto.\n\t(vsrl): Ditto.\n\t(vnsrl): Ditto.\n\t(vnsra): Ditto.\n\t(vncvt_x): Ditto.\n\t(vmerge): Ditto.\n\t(vmv_v): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct narrow_alu_def): Ditto.\n\t(struct move_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_WEXTI_OPS): New variable.\n\t(DEF_RVV_WEXTU_OPS): Ditto\n\t* config/riscv/riscv-vector-builtins.def (x_x_w): Fix type for suffix.\n\t(v_v): Ditto.\n\t(v_x): Ditto.\n\t(x_w): Ditto.\n\t(x): Ditto.\n\t* config/riscv/riscv.cc (riscv_print_operand): Refine ASM printting rule.\n\t* config/riscv/vector-iterators.md (nmsac):New iterator.\n\t(nmsub): New iterator.\n\t* config/riscv/vector.md (@pred_merge<mode>): New pattern.\n\t(@pred_merge<mode>_scalar): New pattern.\n\t(*pred_merge<mode>_scalar): New pattern.\n\t(*pred_merge<mode>_extended_scalar): New pattern.\n\t(@pred_narrow_<optab><mode>): New pattern.\n\t(@pred_narrow_<optab><mode>_scalar): New pattern.\n\t(@pred_trunc<mode>): New pattern.", "tree": {"sha": "e144002776f8d81e2a0ed4b375e3bce9c03ceafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e144002776f8d81e2a0ed4b375e3bce9c03ceafd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6271a07219a7d764ef59607836c01e0084c3d50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6271a07219a7d764ef59607836c01e0084c3d50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6271a07219a7d764ef59607836c01e0084c3d50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6271a07219a7d764ef59607836c01e0084c3d50c/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30eedd6a4fccbd3202490ad2dd483bfd1b48201e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30eedd6a4fccbd3202490ad2dd483bfd1b48201e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30eedd6a4fccbd3202490ad2dd483bfd1b48201e"}], "stats": {"total": 592, "additions": 536, "deletions": 56}, "files": [{"sha": "a051d466ae2793ab5c70eb9f70e24d59262d71a5", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -166,16 +166,3 @@\n   \"Vector duplicate memory operand\"\n   (and (match_code \"mem\")\n        (match_code \"reg\" \"0\")))\n-\n-;; (vec_duplicate:V (const_int 2863311530 [0xaaaaaaaa])) of pred_broadcast\n-;; is CSEed into (const_vector:V (const_int 2863311530 [0xaaaaaaaa])) here\n-;; which is not the pattern matching we want since we can't generate\n-;; instruction directly for it when SEW = 64 and !TARGET_64BIT. We should\n-;; not allow RA (register allocation) allocate a DImode register in\n-;; pred_broadcast pattern.\n-(define_constraint \"Wbr\"\n-  \"@internal\n-   Broadcast register operand\"\n-  (and (match_code \"reg\")\n-       (match_test \"REGNO (op) <= GP_REG_LAST\n-\t&& direct_broadcast_operand (op, GET_MODE (op))\")))"}, {"sha": "fe2c5ba3c5c8b4da3015b315a75c7bfb022b59b2", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -288,10 +288,9 @@\n        (match_test \"op == CONSTM1_RTX (GET_MODE (op))\")))\n \n (define_predicate \"vector_merge_operand\"\n-  (ior (match_operand 0 \"memory_operand\")\n-       (ior (match_operand 0 \"register_operand\")\n-\t    (match_test \"GET_CODE (op) == UNSPEC\n-\t\t\t && (XINT (op, 1) == UNSPEC_VUNDEF)\"))))\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_test \"GET_CODE (op) == UNSPEC\n+\t\t    && (XINT (op, 1) == UNSPEC_VUNDEF)\")))\n \n (define_predicate \"vector_arith_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "30f9734c36b8e46bb1552869436633e89e07ad16", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -396,6 +396,74 @@ class vmsbc : public function_base\n   }\n };\n \n+/* Implements vnsrl/vnsra.  */\n+template<rtx_code CODE>\n+class vnshift : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_wx:\n+\treturn e.use_exact_insn (\n+\t  code_for_pred_narrow_scalar (CODE, e.vector_mode ()));\n+      case OP_TYPE_wv:\n+\treturn e.use_exact_insn (code_for_pred_narrow (CODE, e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vncvt.  */\n+class vncvt_x : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_trunc (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vmerge.  */\n+class vmerge : public function_base\n+{\n+public:\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool use_mask_predication_p () const override { return false; }\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_vvm:\n+\treturn e.use_exact_insn (code_for_pred_merge (e.vector_mode ()));\n+      case OP_TYPE_vxm:\n+\treturn e.use_exact_insn (code_for_pred_merge_scalar (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n+/* Implements vmv.v.x/vmv.v.v.  */\n+class vmv_v : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    switch (e.op_info->op)\n+      {\n+      case OP_TYPE_v:\n+\treturn e.use_exact_insn (code_for_pred_mov (e.vector_mode ()));\n+      case OP_TYPE_x:\n+\treturn e.use_exact_insn (code_for_pred_broadcast (e.vector_mode ()));\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -458,6 +526,11 @@ static CONSTEXPR const vadc vadc_obj;\n static CONSTEXPR const vsbc vsbc_obj;\n static CONSTEXPR const vmadc vmadc_obj;\n static CONSTEXPR const vmsbc vmsbc_obj;\n+static CONSTEXPR const vnshift<LSHIFTRT> vnsrl_obj;\n+static CONSTEXPR const vnshift<ASHIFTRT> vnsra_obj;\n+static CONSTEXPR const vncvt_x vncvt_x_obj;\n+static CONSTEXPR const vmerge vmerge_obj;\n+static CONSTEXPR const vmv_v vmv_v_obj;\n static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n@@ -530,6 +603,11 @@ BASE (vadc)\n BASE (vsbc)\n BASE (vmadc)\n BASE (vmsbc)\n+BASE (vnsrl)\n+BASE (vnsra)\n+BASE (vncvt_x)\n+BASE (vmerge)\n+BASE (vmv_v)\n BASE (vsadd)\n BASE (vssub)\n BASE (vsaddu)"}, {"sha": "411db5627ee9f501356f3ee609fde5d7f44eac45", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -86,6 +86,11 @@ extern const function_base *const vadc;\n extern const function_base *const vsbc;\n extern const function_base *const vmadc;\n extern const function_base *const vmsbc;\n+extern const function_base *const vnsrl;\n+extern const function_base *const vnsra;\n+extern const function_base *const vncvt_x;\n+extern const function_base *const vmerge;\n+extern const function_base *const vmv_v;\n extern const function_base *const vsadd;\n extern const function_base *const vssub;\n extern const function_base *const vsaddu;"}, {"sha": "28483463d644505237c0e0cde86c4899bbefcba2", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -69,8 +69,8 @@ DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsra, alu, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsrl, alu, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvv_ops)\n DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvv_ops)\n@@ -90,8 +90,8 @@ DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvx_ops)\n DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvx_ops)\n DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvx_ops)\n DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsra, alu, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsrl, alu, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvx_ops)\n DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvx_ops)\n@@ -148,6 +148,15 @@ DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvv_ops)\n DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvv_ops)\n DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvx_ops)\n DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvx_ops)\n+DEF_RVV_FUNCTION (vnsrl, narrow_alu, full_preds, u_narrow_shift_vwv_ops)\n+DEF_RVV_FUNCTION (vnsra, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n+DEF_RVV_FUNCTION (vnsrl, narrow_alu, full_preds, u_narrow_shift_vwx_ops)\n+DEF_RVV_FUNCTION (vnsra, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n+DEF_RVV_FUNCTION (vncvt_x, narrow_alu, full_preds, iu_trunc_ops)\n+DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, all_vvvm_ops)\n+DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, iu_vvxm_ops)\n+DEF_RVV_FUNCTION (vmv_v, move, tu_preds, all_v_ops)\n+DEF_RVV_FUNCTION (vmv_v, move, tu_preds, iu_x_ops)\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)"}, {"sha": "e1d8f4f13f005d3f9cd2ec0f31cf6c8cfcacfbf5", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -293,6 +293,58 @@ struct return_mask_def : public build_base\n   }\n };\n \n+/* narrow_alu_def class. Handle narrowing instructions like vnsrl.wv.  */\n+struct narrow_alu_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    b.append_base_name (instance.base_name);\n+\n+    if (!overloaded_p)\n+      {\n+\t/* vop --> vop_<op>.  */\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\t/* vop_<op> --> vop_<op>_<type>.  */\n+\tvector_type_index ret_type_idx\n+\t  = instance.op_info->ret.get_base_vector_type (\n+\t    builtin_types[instance.type.index].vector);\n+\tb.append_name (type_suffixes[ret_type_idx].vector);\n+      }\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n+/* move_def class. Handle vmv.v.v/vmv.v.x.  */\n+struct move_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    /* vmv.v.x (PRED_none) can not be overloaded.  */\n+    if (instance.op_info->op == OP_TYPE_x && overloaded_p\n+\t&& instance.pred == PRED_TYPE_none)\n+      return nullptr;\n+\n+    b.append_base_name (instance.base_name);\n+\n+    if (!overloaded_p)\n+      {\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\tb.append_name (type_suffixes[instance.type.index].vector);\n+      }\n+\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n SHAPE(vsetvl, vsetvl)\n SHAPE(vsetvl, vsetvlmax)\n SHAPE(loadstore, loadstore)\n@@ -301,5 +353,7 @@ SHAPE(alu, alu)\n SHAPE(widen_alu, widen_alu)\n SHAPE(no_mask_policy, no_mask_policy)\n SHAPE(return_mask, return_mask)\n+SHAPE(narrow_alu, narrow_alu)\n+SHAPE(move, move)\n \n } // end namespace riscv_vector"}, {"sha": "91c174f56cde547bef224c0e353d09f9933b12d7", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -32,6 +32,8 @@ extern const function_shape *const alu;\n extern const function_shape *const widen_alu;\n extern const function_shape *const no_mask_policy;\n extern const function_shape *const return_mask;\n+extern const function_shape *const narrow_alu;\n+extern const function_shape *const move;\n }\n \n } // end namespace riscv_vector"}, {"sha": "e937edbf536547eec2b4b82d92f0958ff8ff7bdc", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -202,6 +202,14 @@ static const rvv_type_info wextu_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of Double-Widening all integer will be registered for intrinsic\n+ * functions.  */\n+static const rvv_type_info wextiu_ops[] = {\n+#define DEF_RVV_WEXTI_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#define DEF_RVV_WEXTU_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of Quad-Widening unsigned integer will be registered for intrinsic\n  * functions.  */\n static const rvv_type_info qextu_ops[] = {\n@@ -340,10 +348,21 @@ static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info (RVV_BASE_shift_vector), rvv_arg_type_info_end};\n \n+/* A list of args for double demote type func (vector_type, shift_type)\n+ * function.  */\n+static CONSTEXPR const rvv_arg_type_info shift_wv_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector),\n+     rvv_arg_type_info (RVV_BASE_double_trunc_unsigned_vector),\n+     rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type) function.  */\n static CONSTEXPR const rvv_arg_type_info v_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (scalar_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info x_args[]\n+  = {rvv_arg_type_info (RVV_BASE_scalar), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type, size) function.  */\n static CONSTEXPR const rvv_arg_type_info vector_size_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_size),\n@@ -562,6 +581,14 @@ static CONSTEXPR const rvv_op_info iu_vvvm_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vvm_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type,\n+ * mask_type) function registration. */\n+static CONSTEXPR const rvv_op_info all_vvvm_ops\n+  = {all_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vvm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vvm_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, scalar_type,\n  * mask_type) function registration. */\n static CONSTEXPR const rvv_op_info iu_vvxm_ops\n@@ -707,6 +734,38 @@ static CONSTEXPR const rvv_op_info iu_shift_vvx_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vector_size_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, shift_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_shift_vvv_ops\n+  = {i_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     shift_vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, size_t)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_shift_vvx_ops\n+  = {i_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vector_size_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, shift_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_shift_vvv_ops\n+  = {u_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     shift_vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, size_t)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_shift_vvx_ops\n+  = {u_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_vx,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vector_size_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info iu_v_ops\n@@ -715,6 +774,22 @@ static CONSTEXPR const rvv_op_info iu_v_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      v_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info all_v_ops\n+  = {all_ops,\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_x_ops\n+  = {iu_ops,\t\t\t/* Types */\n+     OP_TYPE_x,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     x_args /* Args */};\n+\n /* A static operand information for vector_type func (double demote type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info i_vf2_ops\n@@ -859,6 +934,46 @@ static CONSTEXPR const rvv_op_info u_x_x_v_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      x_x_v_args /* Args */};\n \n+/* A static operand information for double demote type func (vector_type,\n+ * shift_type) function registration. */\n+static CONSTEXPR const rvv_op_info i_narrow_shift_vwv_ops\n+  = {wexti_ops,\t\t\t\t\t       /* Types */\n+     OP_TYPE_wv,\t\t\t\t       /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), /* Return type */\n+     shift_wv_args /* Args */};\n+\n+/* A static operand information for double demote type func (vector_type,\n+ * shift_type) function registration. */\n+static CONSTEXPR const rvv_op_info u_narrow_shift_vwv_ops\n+  = {wextu_ops,\t\t\t\t\t       /* Types */\n+     OP_TYPE_wv,\t\t\t\t       /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), /* Return type */\n+     shift_wv_args /* Args */};\n+\n+/* A static operand information for double demote type func (vector_type,\n+ * size_t) function registration. */\n+static CONSTEXPR const rvv_op_info i_narrow_shift_vwx_ops\n+  = {wexti_ops,\t\t\t\t\t       /* Types */\n+     OP_TYPE_wx,\t\t\t\t       /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), /* Return type */\n+     vector_size_args /* Args */};\n+\n+/* A static operand information for double demote type func (vector_type,\n+ * size_t) function registration. */\n+static CONSTEXPR const rvv_op_info u_narrow_shift_vwx_ops\n+  = {wextu_ops,\t\t\t\t\t       /* Types */\n+     OP_TYPE_wx,\t\t\t\t       /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), /* Return type */\n+     vector_size_args /* Args */};\n+\n+/* A static operand information for double demote type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_trunc_ops\n+  = {wextiu_ops,\t\t\t\t       /* Types */\n+     OP_TYPE_x_w,\t\t\t\t       /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_double_trunc_vector), /* Return type */\n+     v_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\"}, {"sha": "baafed8a4e94c475e0a9adc3660092c9c4f98cd7", "filename": "gcc/config/riscv/riscv-vector-builtins.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -279,9 +279,8 @@ DEF_RVV_OP_TYPE (vf4)\n DEF_RVV_OP_TYPE (vf8)\n DEF_RVV_OP_TYPE (vvm)\n DEF_RVV_OP_TYPE (vxm)\n-DEF_RVV_OP_TYPE (x_x_w)\n-DEF_RVV_OP_TYPE (v_v)\n-DEF_RVV_OP_TYPE (v_x)\n+DEF_RVV_OP_TYPE (x_w)\n+DEF_RVV_OP_TYPE (x)\n DEF_RVV_OP_TYPE (vs)\n DEF_RVV_OP_TYPE (mm)\n DEF_RVV_OP_TYPE (m)"}, {"sha": "a282c7c6494e39f43f46fad27aaf6b1b920f2bb5", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -4229,17 +4229,45 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \n   switch (letter)\n     {\n+      case 'o': {\n+\t/* Print 'OP' variant for RVV instructions.\n+\t   1. If the operand is VECTOR REG, we print 'v'(vnsrl.wv).\n+\t   2. If the operand is CONST_INT/CONST_VECTOR, we print 'i'(vnsrl.wi).\n+\t   3. If the operand is SCALAR REG, we print 'x'(vnsrl.wx).  */\n+\tif (riscv_v_ext_vector_mode_p (mode))\n+\t  {\n+\t    if (REG_P (op))\n+\t      asm_fprintf (file, \"v\");\n+\t    else if (CONST_VECTOR_P (op))\n+\t      asm_fprintf (file, \"i\");\n+\t    else\n+\t      output_operand_lossage (\"invalid vector operand\");\n+\t  }\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (op))\n+\t      asm_fprintf (file, \"i\");\n+\t    else\n+\t      asm_fprintf (file, \"x\");\n+\t  }\n+\tbreak;\n+      }\n       case 'v': {\n \trtx elt;\n \n-\tif (!const_vec_duplicate_p (op, &elt))\n-\t  output_operand_lossage (\"invalid vector constant\");\n-\telse if (satisfies_constraint_Wc0 (op))\n-\t  asm_fprintf (file, \"0\");\n-\telse if (satisfies_constraint_vi (op))\n-\t  asm_fprintf (file, \"%wd\", INTVAL (elt));\n+\tif (REG_P (op))\n+\t  asm_fprintf (file, \"%s\", reg_names[REGNO (op)]);\n \telse\n-\t  output_operand_lossage (\"invalid vector constant\");\n+\t  {\n+\t    if (!const_vec_duplicate_p (op, &elt))\n+\t      output_operand_lossage (\"invalid vector constant\");\n+\t    else if (satisfies_constraint_Wc0 (op))\n+\t      asm_fprintf (file, \"0\");\n+\t    else if (satisfies_constraint_vi (op))\n+\t      asm_fprintf (file, \"%wd\", INTVAL (elt));\n+\t    else\n+\t      output_operand_lossage (\"invalid vector constant\");\n+\t  }\n \tbreak;\n       }\n       case 'V': {"}, {"sha": "e76ad21140b27d88ca01ee26a4b66af476b602b5", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -289,6 +289,9 @@\n (define_code_iterator any_widen_binop [plus minus mult])\n (define_code_iterator plus_minus [plus minus])\n \n+(define_code_attr macc_nmsac [(plus \"macc\") (minus \"nmsac\")])\n+(define_code_attr madd_nmsub [(plus \"madd\") (minus \"nmsub\")])\n+\n (define_code_attr binop_rhs1_predicate [\n \t\t\t(plus \"register_operand\")\n \t\t\t(minus \"vector_arith_operand\")"}, {"sha": "976f82e7514ca5d2943b241ec7677ed2669b7868", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 226, "deletions": 25, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6271a07219a7d764ef59607836c01e0084c3d50c/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=6271a07219a7d764ef59607836c01e0084c3d50c", "patch": "@@ -144,7 +144,8 @@\n (define_attr \"ratio\" \"\"\n   (cond [(eq_attr \"type\" \"vimov,vfmov,vldux,vldox,vstux,vstox,\\\n \t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  vext,viwalu,viwmul,vicalu\")\n+\t\t\t  vext,viwalu,viwmul,vicalu,vnshift,\\\n+\t\t\t  vimuladd,vimerge\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -195,8 +196,12 @@\n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,\\\n-\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,viwmul\")\n-\t (const_int 2)]\n+\t\t\t\tvialu,vshift,vicmp,vimul,vidiv,vsalu,vext,viwalu,\\\n+\t\t\t\tviwmul,vnshift,vimuladd\")\n+\t       (const_int 2)\n+\n+\t       (eq_attr \"type\" \"vimerge\")\n+\t       (const_int 1)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The index of operand[] to get the avl op.\n@@ -213,7 +218,7 @@\n              (const_int 4))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge\")\n \t   (const_int 5)]\n   (const_int INVALID_ATTRIBUTE)))\n \n@@ -230,7 +235,7 @@\n \t     (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd,vimerge\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -247,13 +252,13 @@\n \t     (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The avl type value.\n (define_attr \"avl_type\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext\")\n+  (cond [(eq_attr \"type\" \"vlde,vlde,vste,vimov,vimov,vimov,vfmov,vext,vimerge\")\n \t   (symbol_ref \"INTVAL (operands[7])\")\n \t (eq_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n \t   (symbol_ref \"INTVAL (operands[5])\")\n@@ -266,7 +271,7 @@\n \t     (symbol_ref \"INTVAL (operands[7])\"))\n \n \t (eq_attr \"type\" \"vldux,vldox,vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n-\t\t\t  viwalu,viwmul\")\n+\t\t\t  viwalu,viwmul,vnshift,vimuladd\")\n \t   (symbol_ref \"INTVAL (operands[8])\")\n \t (eq_attr \"type\" \"vstux,vstox\")\n \t   (symbol_ref \"INTVAL (operands[5])\")]\n@@ -659,6 +664,7 @@\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 7.4. Vector Unit-Stride Instructions\n+;; - 11.15 Vector Integer Merge Instructions\n ;; - 11.16 Vector Integer Move Instructions\n ;; - 13.16 Vector Floating-Point Move Instruction\n ;; - 15.1 Vector Mask-Register Logical Instructions\n@@ -720,7 +726,8 @@\n    vmv.v.i\\t%0,%v3\"\n   \"&& register_operand (operands[0], <MODE>mode)\n    && register_operand (operands[3], <MODE>mode)\n-   && satisfies_constraint_vu (operands[2])\"\n+   && satisfies_constraint_vu (operands[2])\n+   && INTVAL (operands[7]) == riscv_vector::VLMAX\"\n   [(set (match_dup 0) (match_dup 3))]\n   \"\"\n   [(set_attr \"type\" \"vlde,vlde,vlde,vste,vimov,vimov\")\n@@ -794,6 +801,134 @@\n    (set (attr \"avl_type\") (symbol_ref \"riscv_vector::NONVLMAX\"))\n    (set_attr \"vl_op_idx\" \"3\")])\n \n+(define_insn \"@pred_merge<mode>\"\n+  [(set (match_operand:V 0 \"register_operand\"            \"=vd,    vd\")\n+    (if_then_else:V\n+      (match_operand:<VM> 4 \"register_operand\"         \"   vm,    vm\")\n+      (if_then_else:V\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\"    \"   rK,    rK\")\n+           (match_operand 6 \"const_int_operand\"        \"    i,     i\")\n+           (match_operand 7 \"const_int_operand\"        \"    i,     i\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+        (match_operand:V 3 \"vector_arith_operand\"      \"   vr,    vi\")\n+        (match_operand:V 2 \"register_operand\"          \"   vr,    vr\"))\n+      (match_operand:V 1 \"vector_merge_operand\"        \"  0vu,   0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmerge.v%o3m\\t%0,%2,%v3,%4\"\n+  [(set_attr \"type\" \"vimerge\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_merge<mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"   \"=vd\")\n+    (if_then_else:VI_QHS\n+      (match_operand:<VM> 4 \"register_operand\"       \" vm\")\n+      (if_then_else:VI_QHS\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\"  \" rK\")\n+           (match_operand 6 \"const_int_operand\"      \"  i\")\n+           (match_operand 7 \"const_int_operand\"      \"  i\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t(vec_duplicate:VI_QHS\n+          (match_operand:<VEL> 3 \"register_operand\"  \"  r\"))\n+        (match_operand:VI_QHS 2 \"register_operand\"   \" vr\"))\n+      (match_operand:VI_QHS 1 \"vector_merge_operand\" \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmerge.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vimerge\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_merge<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+    (if_then_else:VI_D\n+      (match_operand:<VM> 4 \"register_operand\")\n+      (if_then_else:VI_D\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\")\n+           (match_operand 6 \"const_int_operand\")\n+           (match_operand 7 \"const_int_operand\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t(vec_duplicate:VI_D\n+          (match_operand:<VEL> 3 \"reg_or_int_operand\"))\n+        (match_operand:VI_D 2 \"register_operand\"))\n+      (match_operand:VI_D 1 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::neg_simm5_p (operands[3]))\n+      operands[3] = force_reg (<VEL>mode, operands[3]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[3]))\n+\t  operands[3] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[3]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[3]))\n+\t      operands[3] = force_reg (<VEL>mode, operands[3]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[3], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_merge<mode> (operands[0], operands[1],\n+\t\t\toperands[2], v, operands[4],operands[5],\n+\t\t\toperands[6], operands[7]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[3] = force_reg (<VEL>mode, operands[3]);\n+  })\n+\n+(define_insn \"*pred_merge<mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"     \"=vd\")\n+    (if_then_else:VI_D\n+      (match_operand:<VM> 4 \"register_operand\"       \" vm\")\n+      (if_then_else:VI_D\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\"  \" rK\")\n+           (match_operand 6 \"const_int_operand\"      \"  i\")\n+           (match_operand 7 \"const_int_operand\"      \"  i\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t(vec_duplicate:VI_D\n+          (match_operand:<VEL> 3 \"register_operand\" \"  r\"))\n+        (match_operand:VI_D 2 \"register_operand\"     \" vr\"))\n+      (match_operand:VI_D 1 \"vector_merge_operand\"   \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmerge.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vimerge\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_merge<mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"     \"=vd\")\n+    (if_then_else:VI_D\n+      (match_operand:<VM> 4 \"register_operand\"       \" vm\")\n+      (if_then_else:VI_D\n+        (unspec:<VM>\n+          [(match_dup 4)\n+           (match_operand 5 \"vector_length_operand\"  \" rK\")\n+           (match_operand 6 \"const_int_operand\"      \"  i\")\n+           (match_operand 7 \"const_int_operand\"      \"  i\")\n+           (reg:SI VL_REGNUM)\n+           (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t(vec_duplicate:VI_D\n+\t  (sign_extend:<VEL>\n+            (match_operand:<VSUBEL> 3 \"register_operand\" \"  r\")))\n+        (match_operand:VI_D 2 \"register_operand\"     \" vr\"))\n+      (match_operand:VI_D 1 \"vector_merge_operand\"   \"0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vmerge.vxm\\t%0,%2,%3,%4\"\n+  [(set_attr \"type\" \"vimerge\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated Broadcast\n ;; -------------------------------------------------------------------------------\n@@ -823,7 +958,7 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (vec_duplicate:V\n-\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"Wbr,   f, Wdm, Wdm\"))\n+\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"  r,   f, Wdm, Wdm\"))\n \t  (match_operand:V 2 \"vector_merge_operand\"           \"0vu, 0vu, 0vu, 0vu\")))]\n   \"TARGET_VECTOR\"\n   \"@\n@@ -1227,11 +1362,7 @@\n \t    (match_operand 4 \"pmode_reg_or_uimm5_operand\" \"  r,  r,  K,  K\"))\n \t  (match_operand:VI 2 \"vector_merge_operand\"      \"0vu,0vu,0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"@\n-   v<insn>.vx\\t%0,%3,%4%p1\n-   v<insn>.vx\\t%0,%3,%4%p1\n-   v<insn>.vi\\t%0,%3,%4%p1\n-   v<insn>.vi\\t%0,%3,%4%p1\"\n+  \"v<insn>.v%o4\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vshift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1957,9 +2088,7 @@\n \t     (match_operand:<VM> 4 \"register_operand\"     \"  vm,  vm\")] UNSPEC_VADC)\n \t  (match_operand:VI 1 \"vector_merge_operand\"      \" 0vu, 0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"@\n-   vadc.vvm\\t%0,%2,%3,%4\n-   vadc.vim\\t%0,%2,%v3,%4\"\n+  \"vadc.v%o3m\\t%0,%2,%v3,%4\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"merge_op_idx\" \"1\")\n@@ -2250,9 +2379,7 @@\n \t       (reg:SI VL_REGNUM)\n \t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_VMADC))]\n   \"TARGET_VECTOR\"\n-  \"@\n-   vmadc.vvm\\t%0,%1,%2,%3\n-   vmadc.vim\\t%0,%1,%v2,%3\"\n+  \"vmadc.v%o2m\\t%0,%1,%v2,%3\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"vl_op_idx\" \"4\")\n@@ -2497,9 +2624,7 @@\n \t       (reg:SI VL_REGNUM)\n \t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)] UNSPEC_OVERFLOW))]\n   \"TARGET_VECTOR\"\n-  \"@\n-   vmadc.vv\\t%0,%1,%2\n-   vmadc.vi\\t%0,%1,%v2\"\n+  \"vmadc.v%o2\\t%0,%1,%v2\"\n   [(set_attr \"type\" \"vicalu\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"vl_op_idx\" \"3\")\n@@ -2754,7 +2879,7 @@\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n \n ;; -------------------------------------------------------------------------------\n-;; ---- Predicated integer widening operations\n+;; ---- Predicated integer widening binary operations\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 11.2 Vector Widening Integer Add/Subtract\n@@ -2982,3 +3107,79 @@\n    (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n    (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated integer Narrowing operations\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 11.7 Vector Narrowing Integer Right Shift Instructions\n+;; -------------------------------------------------------------------------------\n+\n+;; The destination EEW is smaller than the source EEW and the overlap is in the\n+;; lowest-numbered part of the source register group\n+;; e.g, when LMUL = 1, vnsrl.wi v0,v0,3 is legal but a destination of v1 is not.\n+(define_insn \"@pred_narrow_<optab><mode>\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"           \"=vd, vr,  &vr, vd, vr,  &vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \" vm,Wc1,vmWc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \" rK, rK,   rK, rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (truncate:<V_DOUBLE_TRUNC>\n+\t    (any_shiftrt:VWEXTI\n+\t     (match_operand:VWEXTI 3 \"register_operand\"                \"  0,  0,   vr,  0,  0,   vr\")\n+\t     (match_operand:<V_DOUBLE_TRUNC> 4 \"vector_shift_operand\"  \" vr, vr,   vr, vk, vk,   vk\")))\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\"     \"0vu,0vu,  0vu,0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vn<insn>.w%o4\\t%0,%3,%v4%p1\"\n+  [(set_attr \"type\" \"vnshift\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+(define_insn \"@pred_narrow_<optab><mode>_scalar\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"           \"=vd, vr,  &vr, vd, vr,  &vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \" vm,Wc1,vmWc1, vm,Wc1,vmWc1\")\n+\t     (match_operand 5 \"vector_length_operand\"                  \" rK, rK,   rK, rK, rK,   rK\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (match_operand 8 \"const_int_operand\"                      \"  i,  i,    i,  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (truncate:<V_DOUBLE_TRUNC>\n+\t    (any_shiftrt:VWEXTI\n+\t     (match_operand:VWEXTI 3 \"register_operand\"                \"  0,  0,   vr,  0,  0,   vr\")\n+\t     (match_operand 4 \"pmode_reg_or_uimm5_operand\"             \"  r,  r,    r,  K,  K,    K\")))\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\"     \"0vu,0vu,  0vu,0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vn<insn>.w%o4\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vnshift\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")])\n+\n+;; vncvt.x.x.w\n+(define_insn \"@pred_trunc<mode>\"\n+  [(set (match_operand:<V_DOUBLE_TRUNC> 0 \"register_operand\"           \"=vd, vr,  &vr\")\n+\t(if_then_else:<V_DOUBLE_TRUNC>\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"               \" vm,Wc1,vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"                  \" rK, rK,   rK\")\n+\t     (match_operand 5 \"const_int_operand\"                      \"  i,  i,    i\")\n+\t     (match_operand 6 \"const_int_operand\"                      \"  i,  i,    i\")\n+\t     (match_operand 7 \"const_int_operand\"                      \"  i,  i,    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (truncate:<V_DOUBLE_TRUNC>\n+\t    (match_operand:VWEXTI 3 \"register_operand\"                 \"  0,  0,   vr\"))\n+\t  (match_operand:<V_DOUBLE_TRUNC> 2 \"vector_merge_operand\"     \"0vu,0vu,  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vncvt.x.x.w\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vnshift\")\n+   (set_attr \"mode\" \"<V_DOUBLE_TRUNC>\")\n+   (set_attr \"vl_op_idx\" \"4\")\n+   (set (attr \"ta\") (symbol_ref \"riscv_vector::get_ta(operands[5])\"))\n+   (set (attr \"ma\") (symbol_ref \"riscv_vector::get_ma(operands[6])\"))\n+   (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[7])\"))])"}]}