{"sha": "e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0ZmE5YzQ1YTVmZDliNGJlNjJkZWRkNzhkYWE1NTU5ZjRjODNmYw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-12T00:10:21Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-12T00:10:21Z"}, "message": "* (RETURN_IN_MEMORY): Handle BLKmode values.\n\nFrom-SVN: r3709", "tree": {"sha": "db4aa309ff091e04ba8f5df5c60b09e38c6ea2db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4aa309ff091e04ba8f5df5c60b09e38c6ea2db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/comments", "author": null, "committer": null, "parents": [{"sha": "ac07e0665d5044978a404837c22bfbf4adbe7ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac07e0665d5044978a404837c22bfbf4adbe7ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac07e0665d5044978a404837c22bfbf4adbe7ffa"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "23adda288eaf94857380b8b97d5b4f073de74bec", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -673,7 +673,8 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    are integers whose size is larger than 64 bits.  */\n \n #define RETURN_IN_MEMORY(TYPE) \\\n-  (TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE  \\\n+  (TYPE_MODE (TYPE) == BLKmode \\\n+   || TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE  \\\n    || (TREE_CODE (TYPE) == INTEGER_TYPE && TYPE_PRECISION (TYPE) > 64))\n \n /* 1 if N is a possible register number for a function value"}, {"sha": "9cc99251919123982db9f6c8720157d9914054c5", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -31,7 +31,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef RETURN_IN_MEMORY\n #define RETURN_IN_MEMORY(TYPE) \\\n-  (TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE(TYPE) == UNION_TYPE)\n+  (TYPE_MODE (TYPE) == BLKmode \\\n+   || TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE(TYPE) == UNION_TYPE)\n \n /* Define which macros to predefine.  __svr4__ is our extension.  */\n /* This used to define X86, but james@bigtex.cactus.org says that"}, {"sha": "01d2c5ef1a18b705b5bfeb945ea1bf329cb8578d", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -814,10 +814,11 @@ extern struct rtx_def *i960_function_arg ();\n #define FUNCTION_VALUE(TYPE, FUNC) \\\n   gen_rtx (REG, TYPE_MODE (TYPE), 0)\n \n-/* Force objects larger than 16 bytes to be returned in memory, since we\n-   only have 4 registers available for return values.  */\n+/* Force aggregates and objects larger than 16 bytes to be returned in memory,\n+   since we only have 4 registers available for return values.  */\n \n-#define RETURN_IN_MEMORY(TYPE) (int_size_in_bytes (TYPE) > 16)\n+#define RETURN_IN_MEMORY(TYPE) \\\n+  (TYPE_MODE (TYPE) == BLKmode || int_size_in_bytes (TYPE) > 16)\n \n /* For an arg passed partly in registers and partly in memory,\n    this is the number of registers used."}, {"sha": "a7989b0a872974218469bc16bfc66601063f50db", "filename": "gcc/config/m68k/apollo68.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fapollo68.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -161,7 +161,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    returned that way. */\n \n #define RETURN_IN_MEMORY(type) \\\n-  (GET_MODE_SIZE (TYPE_MODE (type)) > UNITS_PER_WORD)\n+  (TYPE_MODE (type) == BLKmode \\\n+   || GET_MODE_SIZE (TYPE_MODE (type)) > UNITS_PER_WORD)\n \n /* In order to link with Apollo libraries, we can't prefix external\n    symbols with an underscore.  */"}, {"sha": "9e8ceb7e23d6e6f3c262f1e51e57fcd4abe51a88", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -999,11 +999,12 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Disable the promotion of some structures and unions to registers. */\n #define RETURN_IN_MEMORY(TYPE) \\\n-  ((TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE(TYPE) == UNION_TYPE) \\\n-   && !(TYPE_MODE (TYPE) == SImode \\\n-\t|| (TYPE_MODE (TYPE) == BLKmode \\\n-\t    && TYPE_ALIGN (TYPE) == BITS_PER_WORD \\\n-\t    && int_size_in_bytes (TYPE) == UNITS_PER_WORD)))\n+  (TYPE_MODE (TYPE) == BLKmode \\\n+   || ((TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE(TYPE) == UNION_TYPE) \\\n+       && !(TYPE_MODE (TYPE) == SImode \\\n+\t    || (TYPE_MODE (TYPE) == BLKmode \\\n+\t\t&& TYPE_ALIGN (TYPE) == BITS_PER_WORD \\\n+\t\t&& int_size_in_bytes (TYPE) == UNITS_PER_WORD))))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */"}, {"sha": "9cceff20de57dbb188a86e6a888452c2b7eb8775", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -1759,19 +1759,21 @@ extern struct mips_frame_info current_frame_info;\n    always returned.  Here TYPE will be a C expression of type\n    `tree', representing the data type of the value.\n \n-   Note that values of mode `BLKmode' are returned in memory\n-   regardless of this macro.  Also, the option `-fpcc-struct-return'\n+   Note that values of mode `BLKmode' must be explicitly\n+   handled by this macro.  Also, the option `-fpcc-struct-return'\n    takes effect regardless of this macro.  On most systems, it is\n    possible to leave the macro undefined; this causes a default\n-   definition to be used, whose value is the constant 0.\n+   definition to be used, whose value is the constant 1 for BLKmode\n+   values, and 0 otherwise.\n \n    GCC normally converts 1 byte structures into chars, 2 byte\n    structs into shorts, and 4 byte structs into ints, and returns\n    them this way.  Defining the following macro overrides this,\n    to give us MIPS cc compatibility.  */\n \n #define RETURN_IN_MEMORY(TYPE)\t\\\n-  ((TREE_CODE (TYPE) == RECORD_TYPE) || (TREE_CODE (TYPE) == UNION_TYPE))\n+  ((TYPE_MODE (TYPE) == BLKmode) \\\n+   || (TREE_CODE (TYPE) == RECORD_TYPE) || (TREE_CODE (TYPE) == UNION_TYPE))\n \n \f\n /* A code distinguishing the floating point format of the target"}, {"sha": "aa48d4a00161241b1bfecde9b225a89fc75f453a", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -552,7 +552,8 @@ enum reg_class { NO_REGS, R0_REGS, R15_REGS, BASE_REGS, GENERAL_REGS,\n    type DImode is returned in memory.  */\n \n #define RETURN_IN_MEMORY(type) \\\n-  (TARGET_HC_STRUCT_RETURN && TYPE_MODE (type) == DImode)\n+  (TYPE_MODE (type) == BLKmode \\\n+   || (TARGET_HC_STRUCT_RETURN && TYPE_MODE (type) == DImode))\n \n /* 1 if N is a possible register number for a function value\n    as seen by the caller."}, {"sha": "b5cc26a2f5072c75afc370542d60e3b6161c3feb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -644,7 +644,8 @@ enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n    For the RS/6000, any structure or union type is returned in memory.  */\n \n #define RETURN_IN_MEMORY(TYPE) \\\n-  (TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE)\n+  (TYPE_MODE (TYPE) == BLKmode \\\n+   || TREE_CODE (TYPE) == RECORD_TYPE || TREE_CODE (TYPE) == UNION_TYPE)\n \n /* 1 if N is a possible register number for a function value\n    as seen by the caller."}, {"sha": "be46d31893266703f1d15d818d63e8684a39a8bf", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -447,7 +447,7 @@ extern int leaf_function;\n    we follow GCC's normal policy.  Use -fpcc-struct-value\n    if you want to follow the ABI.  */\n #define RETURN_IN_MEMORY(TYPE)\t\\\n-  (TYPE_MODE (TYPE) == TFmode)\n+  (TYPE_MODE (TYPE) == BLKmode || TYPE_MODE (TYPE) == TFmode)\n \n /* Functions which return large structures get the address\n    to place the wanted value at offset 64 from the frame."}, {"sha": "39e29db40ac3fe1baf7e642d26038b4486919472", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e14fa9c45a5fd9b4be62dedd78daa5559f4c83fc", "patch": "@@ -225,12 +225,11 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == MUST_PASS_IN_STACK_BAD_PADDING))))\n \n-/* Nonzero if type TYPE should be returned in memory\n-   (even though its mode is not BLKmode).\n+/* Nonzero if type TYPE should be returned in memory.\n    Most machines can use the following default definition.  */\n \n #ifndef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) 0\n+#define RETURN_IN_MEMORY(TYPE) (TYPE_MODE (TYPE) == BLKmode)\n #endif\n \f\n /* Optabs are tables saying how to generate insn bodies"}]}