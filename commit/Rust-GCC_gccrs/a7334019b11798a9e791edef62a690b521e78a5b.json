{"sha": "a7334019b11798a9e791edef62a690b521e78a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczMzQwMTliMTE3OThhOWU3OTFlZGVmNjJhNjkwYjUyMWU3OGE1Yg==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2019-12-02T16:23:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-02T16:23:06Z"}, "message": "libstdc++: Fix timed_mutex::try_lock_until on arbitrary clock (PR 91906)\n\nA non-standard clock may tick more slowly than\nstd::chrono::steady_clock.  This means that we risk returning false\nearly when the specified timeout may not have expired. This can be\navoided by looping until the timeout time as reported by the\nnon-standard clock has been reached.\n\nUnfortunately, we have no way to tell whether the non-standard clock\nticks more quickly that std::chrono::steady_clock. If it does then we\nrisk returning later than would be expected, but that is unavoidable and\npermitted by the standard.\n\n2019-12-02  Mike Crowe  <mac@mcrowe.com>\n\n\tPR libstdc++/91906 Fix timed_mutex::try_lock_until on arbitrary clock\n\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Loop\n\tuntil the absolute timeout time is reached as measured against the\n\tappropriate clock.\n\t* testsuite/util/slow_clock.h: New file. Move implementation of\n\tslow_clock test class.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Include\n\tslow_clock from header.\n\t* testsuite/30_threads/shared_timed_mutex/try_lock/3.cc: Convert\n\texisting test to templated function so that it can be called with\n\tboth system_clock and steady_clock.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: Also run test\n\tusing slow_clock to test above fix.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/4.cc: Add\n\tnew test that try_lock_until behaves as try_lock if the timeout has\n\talready expired or exactly matches the current time.\n\nFrom-SVN: r278902", "tree": {"sha": "498509b78868b1b78e45cd8b030fa1f557a57d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/498509b78868b1b78e45cd8b030fa1f557a57d41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7334019b11798a9e791edef62a690b521e78a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7334019b11798a9e791edef62a690b521e78a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7334019b11798a9e791edef62a690b521e78a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7334019b11798a9e791edef62a690b521e78a5b/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b2fb54353d29ae7c6067ebc78549d1296b1340d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2fb54353d29ae7c6067ebc78549d1296b1340d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2fb54353d29ae7c6067ebc78549d1296b1340d"}], "stats": {"total": 176, "additions": 153, "deletions": 23}, "files": [{"sha": "a67fb0c23ea1fd6ef603094123751f167c6e825c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -1,5 +1,24 @@\n 2019-12-02  Mike Crowe  <mac@mcrowe.com>\n \n+\tPR libstdc++/91906 Fix timed_mutex::try_lock_until on arbitrary clock\n+\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Loop\n+\tuntil the absolute timeout time is reached as measured against the\n+\tappropriate clock.\n+\t* testsuite/util/slow_clock.h: New file. Move implementation of\n+\tslow_clock test class.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Include\n+\tslow_clock from header.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock/3.cc: Convert\n+\texisting test to templated function so that it can be called with\n+\tboth system_clock and steady_clock.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: Also run test\n+\tusing slow_clock to test above fix.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/4.cc: Add\n+\tnew test that try_lock_until behaves as try_lock if the timeout has\n+\talready expired or exactly matches the current time.\n+\n \tPR libstdc++/78237 Add full steady_clock support to timed_mutex\n \t* acinclude.m4 (GLIBCXX_CHECK_PTHREAD_MUTEX_CLOCKLOCK): Define to\n \tdetect presence of pthread_mutex_clocklock function."}, {"sha": "10e1ea5a61bd8f89d140fdc77b0465f8ecf86c0b", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -189,8 +189,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool\n \t_M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n \t{\n-\t  auto __rtime = __atime - _Clock::now();\n-\t  return _M_try_lock_for(__rtime);\n+\t  // The user-supplied clock may not tick at the same rate as\n+\t  // steady_clock, so we must loop in order to guarantee that\n+\t  // the timeout has expired before returning false.\n+\t  auto __now = _Clock::now();\n+\t  do {\n+\t    auto __rtime = __atime - __now;\n+\t    if (_M_try_lock_for(__rtime))\n+\t      return true;\n+\t    __now = _Clock::now();\n+\t  } while (__atime > __now);\n+\t  return false;\n \t}\n     };\n "}, {"sha": "f821d3fe6a5cf6e13fa0d1efb4d4efa767089259", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -25,6 +25,7 @@\n #include <condition_variable>\n #include <system_error>\n #include <testsuite_hooks.h>\n+#include <slow_clock.h>\n \n template <typename ClockType>\n void test01()\n@@ -52,22 +53,6 @@ void test01()\n     }\n }\n \n-struct slow_clock\n-{\n-  using rep = std::chrono::system_clock::rep;\n-  using period = std::chrono::system_clock::period;\n-  using duration = std::chrono::system_clock::duration;\n-  using time_point = std::chrono::time_point<slow_clock, duration>;\n-  static constexpr bool is_steady = false;\n-\n-  static time_point now()\n-  {\n-    auto real = std::chrono::system_clock::now();\n-    return time_point{real.time_since_epoch() / 3};\n-  }\n-};\n-\n-\n void test01_alternate_clock()\n {\n   try"}, {"sha": "182c60b11ad88385148abb9795c72667af3fba2a", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -26,6 +26,7 @@\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>\n+#include <slow_clock.h>\n \n template <typename clock_type>\n void test()\n@@ -71,4 +72,5 @@ int main()\n {\n   test<std::chrono::system_clock>();\n   test<std::chrono::steady_clock>();\n+  test<slow_clock>();\n }"}, {"sha": "1cf191c452f3eaa54527860d0d5f1e77911fbe29", "filename": "libstdc++-v3/testsuite/30_threads/shared_timed_mutex/try_lock/3.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock%2F3.cc?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -27,7 +27,8 @@\n #include <system_error>\n #include <testsuite_hooks.h>\n \n-int main()\n+template <typename clock_type>\n+void test()\n {\n   typedef std::shared_timed_mutex mutex_type;\n \n@@ -42,15 +43,15 @@ int main()\n           {\n             using namespace std::chrono;\n             auto timeout = 100ms;\n-            auto start = system_clock::now();\n+            auto start = clock_type::now();\n             b = m.try_lock_for(timeout);\n-            auto t = system_clock::now() - start;\n+            auto t = clock_type::now() - start;\n             VERIFY( !b );\n             VERIFY( t >= timeout );\n \n-            start = system_clock::now();\n+            start = clock_type::now();\n             b = m.try_lock_until(start + timeout);\n-            t = system_clock::now() - start;\n+            t = clock_type::now() - start;\n             VERIFY( !b );\n             VERIFY( t >= timeout );\n           }\n@@ -71,3 +72,9 @@ int main()\n       VERIFY( false );\n     }\n }\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+}"}, {"sha": "a28dfd971f5273bb9460e25250104e5db13f4d6d", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -26,6 +26,7 @@\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>\n+#include <slow_clock.h>\n \n template <typename clock_type>\n void test()\n@@ -71,4 +72,5 @@ int main()\n {\n   test<std::chrono::system_clock>();\n   test<std::chrono::steady_clock>();\n+  test<slow_clock>();\n }"}, {"sha": "cd94ede70204bd929ca9c69cf58f092ee11ce329", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/4.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++14 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+#include <slow_clock.h>\n+\n+template <typename clock_type>\n+void test()\n+{\n+  typedef std::timed_mutex mutex_type;\n+\n+  try\n+    {\n+      using namespace std::chrono;\n+      mutex_type m;\n+\n+      // Confirm that try_lock_until acts like try_lock if the timeout has\n+      // already passed.\n+\n+      // First test with a timeout that is definitely in the past.\n+      VERIFY( m.try_lock_until( clock_type::now() - 1s ) );\n+      m.unlock();\n+\n+      // Then attempt to test with a timeout that might exactly match the\n+      // current time.\n+      VERIFY( m.try_lock_until( clock_type::now() ) );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+  test<slow_clock>();\n+}"}, {"sha": "b81754ec2408dfef654702dae08a52b2b4d40e71", "filename": "libstdc++-v3/testsuite/util/slow_clock.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7334019b11798a9e791edef62a690b521e78a5b/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h?ref=a7334019b11798a9e791edef62a690b521e78a5b", "patch": "@@ -0,0 +1,38 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU General Public License as\n+// published by the Free Software Foundation; either version 3, or (at\n+// your option) any later version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// A clock that ticks at a third of the speed of system_clock that can be used\n+// to ensure that functions with timeouts don't erroneously return early.\n+\n+#include <chrono>\n+\n+struct slow_clock\n+{\n+  using rep = std::chrono::system_clock::rep;\n+  using period = std::chrono::system_clock::period;\n+  using duration = std::chrono::system_clock::duration;\n+  using time_point = std::chrono::time_point<slow_clock, duration>;\n+  static constexpr bool is_steady = false;\n+\n+  static time_point now()\n+  {\n+    auto real = std::chrono::system_clock::now();\n+    return time_point{real.time_since_epoch() / 3};\n+  }\n+};"}]}