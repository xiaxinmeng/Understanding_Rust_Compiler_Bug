{"sha": "aa940f7c213e4a1378ebf97873089a6becec5015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5NDBmN2MyMTNlNGExMzc4ZWJmOTc4NzMwODlhNmJlY2VjNTAxNQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-09-16T15:12:22Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-09-16T15:12:22Z"}, "message": "re PR middle-end/58418 (wrong code at -O2 and -O3 on x86_64-linux-gnu (in 32-bit mode))\n\n2013-09-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR middle-end/58418\n\t* lra-constraints.c (undo_optional_reloads): Consider all optional\n\treload even if it did not get a hard reg.\n\n2013-09-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* gcc.target/i386/pr58418.c: New.\n\nFrom-SVN: r202630", "tree": {"sha": "2ba33e8f994c3944d13bd64a5c2feae8cdeefa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ba33e8f994c3944d13bd64a5c2feae8cdeefa65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa940f7c213e4a1378ebf97873089a6becec5015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa940f7c213e4a1378ebf97873089a6becec5015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa940f7c213e4a1378ebf97873089a6becec5015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa940f7c213e4a1378ebf97873089a6becec5015/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e645e94288a253da5ba9f14c599378a96348e4ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e645e94288a253da5ba9f14c599378a96348e4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e645e94288a253da5ba9f14c599378a96348e4ea"}], "stats": {"total": 111, "additions": 76, "deletions": 35}, "files": [{"sha": "8f437597502f474b4a3bc2e1cc80286026fcfbdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa940f7c213e4a1378ebf97873089a6becec5015", "patch": "@@ -1,3 +1,9 @@\n+2013-09-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/58418\n+\t* lra-constraints.c (undo_optional_reloads): Consider all optional\n+\treload even if it did not get a hard reg.\n+\n 2013-09-16  Teresa Johnson  <tejohnson@google.com>\n \n \t* dumpfile.c (dump_loc): Remove newline emission."}, {"sha": "b949a6b4f2eca3ee439bced8a8451f6773f6a1ec", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=aa940f7c213e4a1378ebf97873089a6becec5015", "patch": "@@ -5454,43 +5454,42 @@ undo_optional_reloads (void)\n   bitmap_initialize (&removed_optional_reload_pseudos, &reg_obstack);\n   bitmap_copy (&removed_optional_reload_pseudos, &lra_optional_reload_pseudos);\n   EXECUTE_IF_SET_IN_BITMAP (&lra_optional_reload_pseudos, 0, regno, bi)\n-    if (reg_renumber[regno] >= 0)\n-      {\n-\tkeep_p = false;\n-\tif (reg_renumber[lra_reg_info[regno].restore_regno] >= 0)\n-\t  /* If the original pseudo changed its allocation, just\n-\t     removing the optional pseudo is dangerous as the original\n-\t     pseudo will have longer live range.  */\n-\t  keep_p = true;\n-\telse\n-\t  EXECUTE_IF_SET_IN_BITMAP (&lra_reg_info[regno].insn_bitmap, 0, uid, bi2)\n-\t    {\n-\t      insn = lra_insn_recog_data[uid]->insn;\n-\t      if ((set = single_set (insn)) == NULL_RTX)\n-\t\tcontinue;\n-\t      src = SET_SRC (set);\n-\t      dest = SET_DEST (set);\n-\t      if (! REG_P (src) || ! REG_P (dest))\n-\t\tcontinue;\n-\t      if (REGNO (dest) == regno\n-\t\t  /* Ignore insn for optional reloads itself.  */\n-\t\t  && lra_reg_info[regno].restore_regno != (int) REGNO (src)\n-\t\t  /* Check only inheritance on last inheritance pass.  */\n-\t\t  && (int) REGNO (src) >= new_regno_start\n-\t\t  /* Check that the optional reload was inherited.  */\n-\t\t  && bitmap_bit_p (&lra_inheritance_pseudos, REGNO (src)))\n-\t\t{\n-\t\t  keep_p = true;\n-\t\t  break;\n-\t\t}\n-\t    }\n-\tif (keep_p)\n+    {\n+      keep_p = false;\n+      if (reg_renumber[lra_reg_info[regno].restore_regno] >= 0)\n+\t/* If the original pseudo changed its allocation, just\n+\t   removing the optional pseudo is dangerous as the original\n+\t   pseudo will have longer live range.  */\n+\tkeep_p = true;\n+      else if (reg_renumber[regno] >= 0)\n+\tEXECUTE_IF_SET_IN_BITMAP (&lra_reg_info[regno].insn_bitmap, 0, uid, bi2)\n \t  {\n-\t    bitmap_clear_bit (&removed_optional_reload_pseudos, regno);\n-\t    if (lra_dump_file != NULL)\n-\t      fprintf (lra_dump_file, \"Keep optional reload reg %d\\n\", regno);\n+\t    insn = lra_insn_recog_data[uid]->insn;\n+\t    if ((set = single_set (insn)) == NULL_RTX)\n+\t      continue;\n+\t    src = SET_SRC (set);\n+\t    dest = SET_DEST (set);\n+\t    if (! REG_P (src) || ! REG_P (dest))\n+\t      continue;\n+\t    if (REGNO (dest) == regno\n+\t\t/* Ignore insn for optional reloads itself.  */\n+\t\t&& lra_reg_info[regno].restore_regno != (int) REGNO (src)\n+\t\t/* Check only inheritance on last inheritance pass.  */\n+\t\t&& (int) REGNO (src) >= new_regno_start\n+\t\t/* Check that the optional reload was inherited.  */\n+\t\t&& bitmap_bit_p (&lra_inheritance_pseudos, REGNO (src)))\n+\t      {\n+\t\tkeep_p = true;\n+\t\tbreak;\n+\t      }\n \t  }\n-      }\n+      if (keep_p)\n+\t{\n+\t  bitmap_clear_bit (&removed_optional_reload_pseudos, regno);\n+\t  if (lra_dump_file != NULL)\n+\t    fprintf (lra_dump_file, \"Keep optional reload reg %d\\n\", regno);\n+\t}\n+    }\n   change_p = ! bitmap_empty_p (&removed_optional_reload_pseudos);\n   bitmap_initialize (&insn_bitmap, &reg_obstack);\n   EXECUTE_IF_SET_IN_BITMAP (&removed_optional_reload_pseudos, 0, regno, bi)"}, {"sha": "5971d1fd1b67bf077b8f24fc887fb3ed099c06f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa940f7c213e4a1378ebf97873089a6becec5015", "patch": "@@ -1,3 +1,7 @@\n+2013-09-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* gcc.target/i386/pr58418.c: New.\n+\n 2013-09-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/fmla-intrinsic.c: New."}, {"sha": "27634c9c2f76c2afecc6daa2f8be1fe6899cd085", "filename": "gcc/testsuite/gcc.target/i386/pr58418.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940f7c213e4a1378ebf97873089a6becec5015/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58418.c?ref=aa940f7c213e4a1378ebf97873089a6becec5015", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+int a, b, *c = &b, d = -1, e, f, *g, *h = &f, **i = &g, j;\n+\n+unsigned int\n+foo (unsigned int p)\n+{\n+  return p == 0 ? 0 : 1 / p;\n+}\n+\n+static int *\n+bar ()\n+{\n+  *c = *h = foo (d) & (-9 < d);\n+  for (e = 0; e; e++)\n+    ;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  for (; j; j++)\n+    for (;; a--)\n+      ;\n+  *i = bar ();\n+  if (f != 0)\n+    abort ();\n+  return 0;\n+}"}]}