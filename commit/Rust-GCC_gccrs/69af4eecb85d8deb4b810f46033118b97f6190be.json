{"sha": "69af4eecb85d8deb4b810f46033118b97f6190be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhZjRlZWNiODVkOGRlYjRiODEwZjQ2MDMzMTE4Yjk3ZjYxOTBiZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-17T09:17:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-17T09:17:54Z"}, "message": "re PR sanitizer/71160 (libasan: Backport support for malloc within dlsym)\n\n\tPR sanitizer/71160\n\t* asan/asan_malloc_linux.cc: Cherry pick upstream r254395\n\tand r269633.\n\nFrom-SVN: r236314", "tree": {"sha": "cefefe77f3ffe4fdc5cfc1e3b2a333a238332453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cefefe77f3ffe4fdc5cfc1e3b2a333a238332453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69af4eecb85d8deb4b810f46033118b97f6190be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69af4eecb85d8deb4b810f46033118b97f6190be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69af4eecb85d8deb4b810f46033118b97f6190be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69af4eecb85d8deb4b810f46033118b97f6190be/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e989235095ab207ce5338f5c4127da0435eea93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e989235095ab207ce5338f5c4127da0435eea93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e989235095ab207ce5338f5c4127da0435eea93c"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "063846922b63f34b5dfec55a0f59c509d7e20af2", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af4eecb85d8deb4b810f46033118b97f6190be/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af4eecb85d8deb4b810f46033118b97f6190be/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=69af4eecb85d8deb4b810f46033118b97f6190be", "patch": "@@ -1,3 +1,9 @@\n+2016-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/71160\n+\t* asan/asan_malloc_linux.cc: Cherry pick upstream r254395\n+\tand r269633.\n+\n 2016-04-21  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR sanitizer/70624"}, {"sha": "bfe72af69e6a8a2f9f976cabbba364c09760778a", "filename": "libsanitizer/asan/asan_malloc_linux.cc", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69af4eecb85d8deb4b810f46033118b97f6190be/libsanitizer%2Fasan%2Fasan_malloc_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69af4eecb85d8deb4b810f46033118b97f6190be/libsanitizer%2Fasan%2Fasan_malloc_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_malloc_linux.cc?ref=69af4eecb85d8deb4b810f46033118b97f6190be", "patch": "@@ -24,39 +24,62 @@\n // ---------------------- Replacement functions ---------------- {{{1\n using namespace __asan;  // NOLINT\n \n+static uptr allocated_for_dlsym;\n+static const uptr kDlsymAllocPoolSize = 1024;\n+static uptr alloc_memory_for_dlsym[kDlsymAllocPoolSize];\n+\n+static bool IsInDlsymAllocPool(const void *ptr) {\n+  uptr off = (uptr)ptr - (uptr)alloc_memory_for_dlsym;\n+  return off < sizeof(alloc_memory_for_dlsym);\n+}\n+\n+static void *AllocateFromLocalPool(uptr size_in_bytes) {\n+  uptr size_in_words = RoundUpTo(size_in_bytes, kWordSize) / kWordSize;\n+  void *mem = (void*)&alloc_memory_for_dlsym[allocated_for_dlsym];\n+  allocated_for_dlsym += size_in_words;\n+  CHECK_LT(allocated_for_dlsym, kDlsymAllocPoolSize);\n+  return mem;\n+}\n+\n INTERCEPTOR(void, free, void *ptr) {\n   GET_STACK_TRACE_FREE;\n+  if (UNLIKELY(IsInDlsymAllocPool(ptr)))\n+    return;\n   asan_free(ptr, &stack, FROM_MALLOC);\n }\n \n INTERCEPTOR(void, cfree, void *ptr) {\n   GET_STACK_TRACE_FREE;\n+  if (UNLIKELY(IsInDlsymAllocPool(ptr)))\n+    return;\n   asan_free(ptr, &stack, FROM_MALLOC);\n }\n \n INTERCEPTOR(void*, malloc, uptr size) {\n+  if (UNLIKELY(!asan_inited))\n+    // Hack: dlsym calls malloc before REAL(malloc) is retrieved from dlsym.\n+    return AllocateFromLocalPool(size);\n   GET_STACK_TRACE_MALLOC;\n   return asan_malloc(size, &stack);\n }\n \n INTERCEPTOR(void*, calloc, uptr nmemb, uptr size) {\n-  if (UNLIKELY(!asan_inited)) {\n+  if (UNLIKELY(!asan_inited))\n     // Hack: dlsym calls calloc before REAL(calloc) is retrieved from dlsym.\n-    const uptr kCallocPoolSize = 1024;\n-    static uptr calloc_memory_for_dlsym[kCallocPoolSize];\n-    static uptr allocated;\n-    uptr size_in_words = ((nmemb * size) + kWordSize - 1) / kWordSize;\n-    void *mem = (void*)&calloc_memory_for_dlsym[allocated];\n-    allocated += size_in_words;\n-    CHECK(allocated < kCallocPoolSize);\n-    return mem;\n-  }\n+    return AllocateFromLocalPool(nmemb * size);\n   GET_STACK_TRACE_MALLOC;\n   return asan_calloc(nmemb, size, &stack);\n }\n \n INTERCEPTOR(void*, realloc, void *ptr, uptr size) {\n   GET_STACK_TRACE_MALLOC;\n+  if (UNLIKELY(IsInDlsymAllocPool(ptr))) {\n+    uptr offset = (uptr)ptr - (uptr)alloc_memory_for_dlsym;\n+    uptr copy_size = Min(size, kDlsymAllocPoolSize - offset);\n+    void *new_ptr = asan_malloc(size, &stack);\n+    internal_memcpy(new_ptr, ptr, copy_size);\n+    return new_ptr;\n+  }\n   return asan_realloc(ptr, size, &stack);\n }\n "}]}