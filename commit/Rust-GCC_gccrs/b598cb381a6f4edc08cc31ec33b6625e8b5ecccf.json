{"sha": "b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5OGNiMzgxYTZmNGVkYzA4Y2MzMWVjMzNiNjYyNWU4YjVlY2NjZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-09-12T17:13:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-09-12T17:13:55Z"}, "message": "re PR target/22223 (New testsuite failure on Tru64 UNIX V5.1B: gcc.c-torture/compile/20050622-1.c)\n\n\n\tPR target/22223\n\t* config/alpha/alpha.c (alpha_start_function): Don't emit stack\n\tframe information for frames larger than 512 Kbytes on Tru64 when\n\tusing the native assembler.\n\nFrom-SVN: r116895", "tree": {"sha": "b765e14ee4d8f9cfada1547337dfad4e0510fc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b765e14ee4d8f9cfada1547337dfad4e0510fc9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf/comments", "author": null, "committer": null, "parents": [{"sha": "f63fc0d933c16105877f57f19a4500e8afabc47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63fc0d933c16105877f57f19a4500e8afabc47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63fc0d933c16105877f57f19a4500e8afabc47d"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "0a87b0ee7531c565a0d05577e5c9b757a877f70e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "patch": "@@ -1,3 +1,10 @@\n+2006-09-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/22223\n+\t* config/alpha/alpha.c (alpha_start_function): Don't emit stack\n+\tframe information for frames larger than 512 Kbytes on Tru64 when\n+\tusing the native assembler.\n+\n 2006-09-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/4520"}, {"sha": "0b3da82231e4b49ef9d800cbdfced1def5567403", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b598cb381a6f4edc08cc31ec33b6625e8b5ecccf/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b598cb381a6f4edc08cc31ec33b6625e8b5ecccf", "patch": "@@ -7836,6 +7836,10 @@ alpha_start_function (FILE *file, const char *fnname,\n   HOST_WIDE_INT sa_size;\n   /* Complete stack size needed.  */\n   unsigned HOST_WIDE_INT frame_size;\n+  /* The maximum debuggable frame size (512 Kbytes using Tru64 as).  */\n+  unsigned HOST_WIDE_INT max_frame_size = TARGET_ABI_OSF && !TARGET_GAS\n+\t\t\t\t\t  ? 524288\n+\t\t\t\t\t  : 1UL << 31;\n   /* Offset from base reg to register save area.  */\n   HOST_WIDE_INT reg_offset;\n   char *entry_label = (char *) alloca (strlen (fnname) + 6);\n@@ -7960,7 +7964,7 @@ alpha_start_function (FILE *file, const char *fnname,\n     fprintf (file, \"\\t.frame $%d,\" HOST_WIDE_INT_PRINT_DEC \",$26,%d\\n\",\n \t     (frame_pointer_needed\n \t      ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM),\n-\t     frame_size >= (1UL << 31) ? 0 : frame_size,\n+\t     frame_size >= max_frame_size ? 0 : frame_size,\n \t     current_function_pretend_args_size);\n \n   /* Describe which registers were spilled.  */\n@@ -7982,7 +7986,7 @@ alpha_start_function (FILE *file, const char *fnname,\n       if (imask)\n \t{\n \t  fprintf (file, \"\\t.mask 0x%lx,\" HOST_WIDE_INT_PRINT_DEC \"\\n\", imask,\n-\t\t   frame_size >= (1UL << 31) ? 0 : reg_offset - frame_size);\n+\t\t   frame_size >= max_frame_size ? 0 : reg_offset - frame_size);\n \n \t  for (i = 0; i < 32; ++i)\n \t    if (imask & (1UL << i))\n@@ -7991,7 +7995,7 @@ alpha_start_function (FILE *file, const char *fnname,\n \n       if (fmask)\n \tfprintf (file, \"\\t.fmask 0x%lx,\" HOST_WIDE_INT_PRINT_DEC \"\\n\", fmask,\n-\t\t frame_size >= (1UL << 31) ? 0 : reg_offset - frame_size);\n+\t\t frame_size >= max_frame_size ? 0 : reg_offset - frame_size);\n     }\n \n #if TARGET_ABI_OPEN_VMS"}]}