{"sha": "378f73afe05d3dbce185f9ab74f0c24e53f4b218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4ZjczYWZlMDVkM2RiY2UxODVmOWFiNzRmMGMyNGU1M2Y0YjIxOA==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@gcc.gnu.org", "date": "2005-07-07T07:54:40Z"}, "committer": {"name": "Feng Wang", "email": "fengwang@gcc.gnu.org", "date": "2005-07-07T07:54:40Z"}, "message": "re PR fortran/16531 ([4.0 only, gfortran] Hollerith Data not supported)\n\n2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>\n\n        PR fortran/16531\n        PR fortran/15966\n        PR fortran/18781\n        * arith.c (gfc_hollerith2int, gfc_hollerith2real,\n        gfc_hollerith2complex, gfc_hollerith2character, gfc_hollerith2logical):\n        New functions.\n        (eval_intrinsic): Don't evaluate if Hollerith constant arguments exist.\n        * arith.h (gfc_hollerith2int, gfc_hollerith2real,\n        gfc_hollerith2complex, gfc_hollerith2character, gfc_hollerith2logical):\n        Add prototypes.\n        * expr.c (free_expr0): Free memery allocated for Hollerith constant.\n        (gfc_copy_expr): Allocate and copy string if Expr is from Hollerith.\n        (gfc_check_assign): Enable conversion from Hollerith to other.\n        * gfortran.h (bt): Add BT_HOLLERITH.\n        (gfc_expr): Add from_H flag.\n        * intrinsic.c (gfc_type_letter): Return 'h' for BT_HOLLERITH.\n        (add_conversions): Add conversions from Hollerith constant to other.\n        (do_simplify): Don't simplify if  Hollerith constant arguments exist.\n        * io.c (resolve_tag): Enable array in FORMAT tag under GFC_STD_GNU.\n        * misc.c (gfc_basetype_name): Return \"HOLLERITH\" for BT_HOLLERITH.\n        (gfc_type_name): Print \"HOLLERITH\" for BT_HOLLERITH.\n        * primary.c (match_hollerith_constant): New function.\n        (gfc_match_literal_constant): Add match Hollerith before Integer.\n        * simplify.c (gfc_convert_constant): Add conversion from Hollerith\n        to other.\n        * trans-const.c (gfc_conv_constant_to_tree): Use VIEW_CONVERT_EXPR to\n        convert Hollerith constant to tree.\n        * trans-io.c (gfc_convert_array_to_string): Get array's address and\n        length to set string expr.\n        (set_string): Deal with array assigned Hollerith constant and character\n        array.\n        * gfortran.texi: Document Hollerith constants as extention support.\n\n2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>\n\n        PR fortran/16531\n        PR fortran/15966\n        PR fortran/18781\n        * gfortran.dg/hollerith.f90: New.\n        * gfortran.dg/hollerith2.f90: New.\n        * gfortran.dg/hollerith3.f90: New.\n        * gfortran.dg/hollerith4.f90: New.\n        * gfortran.dg/hollerith_f95.f90: New.\n        * gfortran.dg/hollerith_legacy.f90: New.\n        * gfortran.dg/g77/cpp4.F: New. Port from g77.\n\n2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>\n\n        PR fortran/16531\n        * io/transfer.c (formatted_transfer): Enable FMT_A on other types to\n        support Hollerith constants.\n\nFrom-SVN: r101687", "tree": {"sha": "34841290399c5a9c4f2f059ef7395d3b23360a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34841290399c5a9c4f2f059ef7395d3b23360a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378f73afe05d3dbce185f9ab74f0c24e53f4b218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378f73afe05d3dbce185f9ab74f0c24e53f4b218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378f73afe05d3dbce185f9ab74f0c24e53f4b218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378f73afe05d3dbce185f9ab74f0c24e53f4b218/comments", "author": null, "committer": null, "parents": [{"sha": "f5d21c4ca15a9423443ce33efb3c9b8ebcde051e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d21c4ca15a9423443ce33efb3c9b8ebcde051e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d21c4ca15a9423443ce33efb3c9b8ebcde051e"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "d897396c42b5f0b5a3b524493676f714814f30b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f73afe05d3dbce185f9ab74f0c24e53f4b218/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f73afe05d3dbce185f9ab74f0c24e53f4b218/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=378f73afe05d3dbce185f9ab74f0c24e53f4b218", "patch": "@@ -1,3 +1,38 @@\n+2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\tPR fortran/16531\n+\tPR fortran/15966\n+\tPR fortran/18781\n+\t* arith.c (gfc_hollerith2int, gfc_hollerith2real,\n+\tgfc_hollerith2complex, gfc_hollerith2character, gfc_hollerith2logical):\n+\tNew functions.\n+\t(eval_intrinsic): Don't evaluate if Hollerith constant arguments exist.\n+\t* arith.h (gfc_hollerith2int, gfc_hollerith2real,\n+\tgfc_hollerith2complex, gfc_hollerith2character, gfc_hollerith2logical):\n+\tAdd prototypes.\n+\t* expr.c (free_expr0): Free memery allocated for Hollerith constant.\n+\t(gfc_copy_expr): Allocate and copy string if Expr is from Hollerith.\n+\t(gfc_check_assign): Enable conversion from Hollerith to other.\n+\t* gfortran.h (bt): Add BT_HOLLERITH.\n+\t(gfc_expr): Add from_H flag.\n+\t* intrinsic.c (gfc_type_letter): Return 'h' for BT_HOLLERITH.\n+\t(add_conversions): Add conversions from Hollerith constant to other.\n+\t(do_simplify): Don't simplify if  Hollerith constant arguments exist.\n+\t* io.c (resolve_tag): Enable array in FORMAT tag under GFC_STD_GNU.\n+\t* misc.c (gfc_basetype_name): Return \"HOLLERITH\" for BT_HOLLERITH.\n+\t(gfc_type_name): Print \"HOLLERITH\" for BT_HOLLERITH.\n+\t* primary.c (match_hollerith_constant): New function.\n+\t(gfc_match_literal_constant): Add match Hollerith before Integer.\n+\t* simplify.c (gfc_convert_constant): Add conversion from Hollerith\n+\tto other.\n+\t* trans-const.c (gfc_conv_constant_to_tree): Use VIEW_CONVERT_EXPR to\n+\tconvert Hollerith constant to tree.\n+\t* trans-io.c (gfc_convert_array_to_string): Get array's address and\n+\tlength to set string expr.\n+\t(set_string): Deal with array assigned Hollerith constant and character\n+\tarray.\n+\t* gfortran.texi: Document Hollerith constants as extention support.\n+\n 2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/22327"}]}