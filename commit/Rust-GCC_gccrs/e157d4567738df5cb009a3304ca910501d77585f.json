{"sha": "e157d4567738df5cb009a3304ca910501d77585f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1N2Q0NTY3NzM4ZGY1Y2IwMDlhMzMwNGNhOTEwNTAxZDc3NTg1Zg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-12T05:55:23Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-12T05:55:23Z"}, "message": "Enable VAES support [2/5]\n\ngcc/\n\t* config.gcc: Add vaesintrin.h.\n\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI_V64QI): New type.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n\t__builtin_ia32_vaesdec_v32qi, __builtin_ia32_vaesdec_v64qi): New builtins.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n\t* config/i386/immintrin.h: Include vaesintrin.h.\n\t* config/i386/sse.md (vaesdec_<mode>): New pattern.\n\t* config/i386/vaesintrin.h (_mm256_aesdec_epi128, _mm512_aesdec_epi128,\n\t_mm_aesdec_epi128): New intrinsics.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512-check.h: Handle bit_VAES.\n\t* gcc.target/i386/avx512f-aesdec-2.c: New test.\n\t* gcc.target/i386/avx512fvl-vaes-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-aesdec-2.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512vaes): New.\n\nFrom-SVN: r255572", "tree": {"sha": "490dfa5dd77044d245bccc0cb6a451cbafc8af22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/490dfa5dd77044d245bccc0cb6a451cbafc8af22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e157d4567738df5cb009a3304ca910501d77585f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e157d4567738df5cb009a3304ca910501d77585f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e157d4567738df5cb009a3304ca910501d77585f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e157d4567738df5cb009a3304ca910501d77585f/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7"}], "stats": {"total": 216, "additions": 214, "deletions": 2}, "files": [{"sha": "9ec6f5f6d14ea16ec2cae7caf1ba6261b6cbe184", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -1,3 +1,15 @@\n+2017-12-12  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config.gcc: Add vaesintrin.h.\n+\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI_V64QI): New type.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n+\t__builtin_ia32_vaesdec_v32qi, __builtin_ia32_vaesdec_v64qi): New builtins.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n+\t* config/i386/immintrin.h: Include vaesintrin.h.\n+\t* config/i386/sse.md (vaesdec_<mode>): New pattern.\n+\t* config/i386/vaesintrin.h (_mm256_aesdec_epi128, _mm512_aesdec_epi128,\n+\t_mm_aesdec_epi128): New intrinsics.\n+\n 2017-12-12  Julia Koval  <julia.koval@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_VAES_SET,"}, {"sha": "e208d00bd5bf582f8179d045ae27f452c57eb623", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -381,7 +381,7 @@ i[34567]86-*-*)\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n-\t\t       avx512vnnivlintrin.h\"\n+\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -408,7 +408,7 @@ x86_64-*-*)\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n-\t\t       avx512vnnivlintrin.h\"\n+\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "8cfa1497213b983dc1ccd89d6a7e045b0372667f", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -2763,6 +2763,11 @@ BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si, \"__builtin_ia32_vpdp\n BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si_mask, \"__builtin_ia32_vpdpwssds_v4si_mask\", IX86_BUILTIN_VPDPWSSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VNNI, CODE_FOR_vpdpwssds_v4si_maskz, \"__builtin_ia32_vpdpwssds_v4si_maskz\", IX86_BUILTIN_VPDPWSSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n \n+/* VAES */\n+BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesdec_v16qi, \"__builtin_ia32_vaesdec_v16qi\", IX86_BUILTIN_VAESDEC16, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesdec_v32qi, \"__builtin_ia32_vaesdec_v32qi\", IX86_BUILTIN_VAESDEC32, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n+BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesdec_v64qi, \"__builtin_ia32_vaesdec_v64qi\", IX86_BUILTIN_VAESDEC64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n+\n BDESC_END (ARGS2, SPECIAL_ARGS2)\n \n BDESC_FIRST (special_args2, SPECIAL_ARGS2, OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressstorev64qi_mask, \"__builtin_ia32_compressstoreuqi512_mask\", IX86_BUILTIN_PCOMPRESSBSTORE512, UNKNOWN, (int) VOID_FTYPE_PV64QI_V64QI_UDI)"}, {"sha": "a6e27dd43a3f1ef0b72a13397789629d93847fe3", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -102,6 +102,8 @@\n \n #include <gfniintrin.h>\n \n+#include <vaesintrin.h>\n+\n #ifndef __RDRND__\n #pragma GCC push_options\n #pragma GCC target(\"rdrnd\")"}, {"sha": "238a6062f988e9298202a9aef1b866dd0bf0dea5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -172,6 +172,9 @@\n   UNSPEC_VPMADDUBSWACCSSD\n   UNSPEC_VPMADDWDACCD\n   UNSPEC_VPMADDWDACCSSD\n+\n+  ;; For VAES support\n+  UNSPEC_VAESDEC\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -374,6 +377,9 @@\n (define_mode_iterator VI2_AVX512VL\n   [(V8HI \"TARGET_AVX512VL\") (V16HI \"TARGET_AVX512VL\") V32HI])\n \n+(define_mode_iterator VI1_AVX512VL_F\n+  [V32QI (V16QI \"TARGET_AVX512VL\") (V64QI \"TARGET_AVX512F\")])\n+\n (define_mode_iterator VI8_AVX2_AVX512BW\n   [(V8DI \"TARGET_AVX512BW\") (V4DI \"TARGET_AVX2\") V2DI])\n \n@@ -20449,3 +20455,13 @@\n   \"TARGET_AVX512VNNI\"\n   \"vpdpwssds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vaesdec_<mode>\"\n+  [(set (match_operand:VI1_AVX512VL_F 0 \"register_operand\" \"=v\")\n+\t  (unspec:VI1_AVX512VL_F\n+\t  [(match_operand:VI1_AVX512VL_F 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI1_AVX512VL_F 2 \"vector_operand\" \"v\")]\n+\t  UNSPEC_VAESDEC))]\n+  \"TARGET_VAES\"\n+  \"vaesdec\\t{%2, %1, %0|%0, %1, %2}\"\n+)"}, {"sha": "0208cc7cce2367f9a877758626f174a9d22c3a77", "filename": "gcc/config/i386/vaesintrin.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fvaesintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Fconfig%2Fi386%2Fvaesintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvaesintrin.h?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -0,0 +1,59 @@\n+#ifndef __VAESINTRIN_H_INCLUDED\n+#define __VAESINTRIN_H_INCLUDED\n+\n+#ifndef __VAES__\n+#pragma GCC push_options\n+#pragma GCC target(\"vaes\")\n+#define __DISABLE_VAES__\n+#endif /* __VAES__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_aesdec_epi128 (__m256i __A, __m256i __B)\n+{\n+  return (__m256i)__builtin_ia32_vaesdec_v32qi ((__v32qi) __A, (__v32qi) __B);\n+}\n+\n+#ifdef __DISABLE_VAES__\n+#undef __DISABLE_VAES__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VAES__ */\n+\n+\n+#if !defined(__VAES__) || !defined(__AVX512F)\n+#pragma GCC push_options\n+#pragma GCC target(\"vaes,avx512f\")\n+#define __DISABLE_VAESF__\n+#endif /* __VAES__ */\n+\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_aesdec_epi128 (__m512i __A, __m512i __B)\n+{\n+  return (__m512i)__builtin_ia32_vaesdec_v64qi ((__v64qi) __A, (__v64qi) __B);\n+}\n+\n+#ifdef __DISABLE_VAESF__\n+#undef __DISABLE_VAESF__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VAES__ */\n+\n+#if !defined(__VAES__) || !defined(__AVX512VL)\n+#pragma GCC push_options\n+#pragma GCC target(\"vaes,avx512vl\")\n+#define __DISABLE_VAESVL__\n+#endif /* __VAES__ */\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdec_epi128 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)__builtin_ia32_vaesdec_v16qi ((__v16qi) __A, (__v16qi) __B);\n+}\n+\n+#ifdef __DISABLE_VAESVL__\n+#undef __DISABLE_VAESVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VAES__ */\n+#endif /* __VAESINTRIN_H_INCLUDED */"}, {"sha": "cacb3f4f97665fcab53c51cecb4fdf054438a38d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -1,3 +1,11 @@\n+2017-12-12  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512-check.h: Handle bit_VAES.\n+\t* gcc.target/i386/avx512f-aesdec-2.c: New test.\n+\t* gcc.target/i386/avx512fvl-vaes-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-aesdec-2.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512vaes): New.\n+\n 2017-12-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/82050"}, {"sha": "8ea8751990e0cdbaa69911ef3e51be575bf7b68e", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -83,6 +83,9 @@ main ()\n #endif\n #ifdef AVX512VNNI\n       && (ecx & bit_AVX512VNNI)\n+#endif\n+#ifdef VAES\n+      && (ecx & bit_VAES)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "a343fbba4eba89d732f48ade26f6ae825bd9a942", "filename": "gcc/testsuite/gcc.target/i386/avx512f-aesdec-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-aesdec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-aesdec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-aesdec-2.c?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mvaes\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vaes } */\n+\n+#define AVX512F\n+\n+#define VAES\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (unsigned int *r)\n+{\n+  for (int i = 0; i < SIZE; i+=4)\n+    {\n+      r[i] = 0xba0cda94;\n+      r[i + 1] = 0x73676a7;\n+      r[i + 2] = 0xd3204422;\n+      r[i + 3] = 0x5506edd;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_ud) res1, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned int res_ref[SIZE];\n+\n+  for (int i = 0; i < SIZE; i+=4)\n+    {\n+      src1.a[i] = 0x5d53475d;\n+      src1.a[i + 1] = 0x63746f72;\n+      src1.a[i + 2] = 0x73745665;\n+      src1.a[i + 3] = 0x7b5b5465;\n+      src2.a[i] = 0x726f6e5d;\n+      src2.a[i + 1] = 0x5b477565;\n+      src2.a[i + 2] = 0x68617929;\n+      src2.a[i + 3] = 0x48692853;\n+    }\n+\n+  CALC (res_ref);\n+  res1.x = INTRINSIC (_aesdec_epi128) (src2.x, src1.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_ud) (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "fc4e6bfb5eae594155f502b013f86929bacaacda", "filename": "gcc/testsuite/gcc.target/i386/avx512fvl-vaes-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fvl-vaes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fvl-vaes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fvl-vaes-1.c?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mvaes -mavx512f -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaesdec\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vaesdec\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vaesdec\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y;\n+volatile __m256i x256, y256;\n+volatile __m128i x128, y128;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_aesdec_epi128 (x, y);\n+\n+  x256 = _mm256_aesdec_epi128 (x256, y256);\n+\n+  x128 = _mm_aesdec_epi128 (x128, y128);\n+\n+}"}, {"sha": "92a6eb3cbdcae49fdcf074931b505416f639fd9c", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-aesdec-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-aesdec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-aesdec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-aesdec-2.c?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mvaes\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vaes } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-aesdec-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-aesdec-2.c\""}, {"sha": "bebc6dd7935c2715393877c7b7b14fefd14354d5", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e157d4567738df5cb009a3304ca910501d77585f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=e157d4567738df5cb009a3304ca910501d77585f", "patch": "@@ -456,6 +456,20 @@ proc check_effective_target_avx512vnni { } {\n     } \"-mavx512vnni -mavx512f\" ]\n }\n \n+# Return 1 if vaes instructions can be compiled.\n+proc check_effective_target_avx512vaes { } {\n+    return [check_no_compiler_messages avx512vaes object {\n+\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+\t__v32qi\n+\t_mm256_aesdec_epi128 (__v32qi __A, __v32qi __B)\n+\t{\n+\t  return (__v32qi)__builtin_ia32_vaesdec_v32qi ((__v32qi) __A, (__v32qi) __B);\n+\t}\n+    } \"-mvaes\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}]}