{"sha": "eabd44a02529f7921a4997240aaaefb15f1ef81f", "node_id": "C_kwDOANBUbNoAKGVhYmQ0NGEwMjUyOWY3OTIxYTQ5OTcyNDBhYWFlZmIxNWYxZWY4MWY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-28T12:41:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-28T12:41:07Z"}, "message": "Add TFLAGS to gcc's GCC_FOR_TARGET\n\nWhen the GCC build runs GCC_FOR_TARGET, e.g. for selftests or for\ndumping specs, it doesn't use TFLAGS in non-bootstrap scenarios.  This\npatch arranges for TFLAGS to be passed from the top level down to gcc\nin GCC_FOR_TARGET in this case.\n\nAnother issue related with TFLAGS fixed herein is that there's no easy\nway to add a TFLAGS to GCC_FOR_TARGET when running \"make gnatlib\"\nwithin the gcc directory.  Overriding all of GCC_FOR_TARGET is\nsomewhat cumbersome, so I'm adding TFLAGS support to gcc/Makefile.in,\ngetting it added to GCC_FOR_TARGET, as it would when passed down from\nthe top level.\n\n\nfor  ChangeLog\n\n\t* Makefile.tpl (HOST_EXPORTS): Add TFLAGS to GCC_FOR_TARGET.\n\t(EXTRA_GCC_FLAGS): Likewise.\n\t* Makefile.in: Rebuilt.\n\nfor  gcc/ChangeLog\n\n\t* Makefile.in (TFLAGS): New.\n\t(GCC_FOR_TARGET): Add TFLAGS.\n\t(FLAGS_TO_PASS): Pass TFLAGS down.", "tree": {"sha": "77b81818f949a1cbb6f6f0683a31105929475908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b81818f949a1cbb6f6f0683a31105929475908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eabd44a02529f7921a4997240aaaefb15f1ef81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabd44a02529f7921a4997240aaaefb15f1ef81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabd44a02529f7921a4997240aaaefb15f1ef81f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabd44a02529f7921a4997240aaaefb15f1ef81f/comments", "author": null, "committer": null, "parents": [{"sha": "bb1f266a7d602ffee4a070f586351bdfafcb6150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f266a7d602ffee4a070f586351bdfafcb6150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1f266a7d602ffee4a070f586351bdfafcb6150"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "13ee95a2602ab29a8f348661a3837ba9334d596b", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabd44a02529f7921a4997240aaaefb15f1ef81f/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabd44a02529f7921a4997240aaaefb15f1ef81f/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=eabd44a02529f7921a4997240aaaefb15f1ef81f", "patch": "@@ -222,7 +222,7 @@ HOST_EXPORTS = \\\n \tAR_FOR_TARGET=\"$(AR_FOR_TARGET)\"; export AR_FOR_TARGET; \\\n \tAS_FOR_TARGET=\"$(AS_FOR_TARGET)\"; export AS_FOR_TARGET; \\\n \tDSYMUTIL_FOR_TARGET=\"$(DSYMUTIL_FOR_TARGET)\"; export DSYMUTIL_FOR_TARGET; \\\n-\tGCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\"; export GCC_FOR_TARGET; \\\n+\tGCC_FOR_TARGET=\"$(GCC_FOR_TARGET) $$TFLAGS\"; export GCC_FOR_TARGET; \\\n \tLD_FOR_TARGET=\"$(LD_FOR_TARGET)\"; export LD_FOR_TARGET; \\\n \tNM_FOR_TARGET=\"$(NM_FOR_TARGET)\"; export NM_FOR_TARGET; \\\n \tOBJDUMP_FOR_TARGET=\"$(OBJDUMP_FOR_TARGET)\"; export OBJDUMP_FOR_TARGET; \\\n@@ -1047,7 +1047,7 @@ TARGET_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)\n # The BUILD_* variables are a special case, which are used for the gcc\n # cross-building scheme.\n EXTRA_GCC_FLAGS = \\\n-\t\"GCC_FOR_TARGET=$(GCC_FOR_TARGET)\" \\\n+\t\"GCC_FOR_TARGET=$(GCC_FOR_TARGET) $$TFLAGS\" \\\n \t\"`echo 'STMP_FIXPROTO=$(STMP_FIXPROTO)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\" \\\n \t\"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"\n "}, {"sha": "ba0727153a9b8d0f35e0c9b89410c20d108b6f84", "filename": "Makefile.tpl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabd44a02529f7921a4997240aaaefb15f1ef81f/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabd44a02529f7921a4997240aaaefb15f1ef81f/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=eabd44a02529f7921a4997240aaaefb15f1ef81f", "patch": "@@ -225,7 +225,7 @@ HOST_EXPORTS = \\\n \tAR_FOR_TARGET=\"$(AR_FOR_TARGET)\"; export AR_FOR_TARGET; \\\n \tAS_FOR_TARGET=\"$(AS_FOR_TARGET)\"; export AS_FOR_TARGET; \\\n \tDSYMUTIL_FOR_TARGET=\"$(DSYMUTIL_FOR_TARGET)\"; export DSYMUTIL_FOR_TARGET; \\\n-\tGCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\"; export GCC_FOR_TARGET; \\\n+\tGCC_FOR_TARGET=\"$(GCC_FOR_TARGET) $$TFLAGS\"; export GCC_FOR_TARGET; \\\n \tLD_FOR_TARGET=\"$(LD_FOR_TARGET)\"; export LD_FOR_TARGET; \\\n \tNM_FOR_TARGET=\"$(NM_FOR_TARGET)\"; export NM_FOR_TARGET; \\\n \tOBJDUMP_FOR_TARGET=\"$(OBJDUMP_FOR_TARGET)\"; export OBJDUMP_FOR_TARGET; \\\n@@ -801,7 +801,7 @@ TARGET_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)\n # The BUILD_* variables are a special case, which are used for the gcc\n # cross-building scheme.\n EXTRA_GCC_FLAGS = \\\n-\t\"GCC_FOR_TARGET=$(GCC_FOR_TARGET)\" \\\n+\t\"GCC_FOR_TARGET=$(GCC_FOR_TARGET) $$TFLAGS\" \\\n \t\"`echo 'STMP_FIXPROTO=$(STMP_FIXPROTO)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\" \\\n \t\"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"\n "}, {"sha": "57edc47fc0c4745325991d2389f7b5cf9a2079dd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabd44a02529f7921a4997240aaaefb15f1ef81f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabd44a02529f7921a4997240aaaefb15f1ef81f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=eabd44a02529f7921a4997240aaaefb15f1ef81f", "patch": "@@ -146,8 +146,11 @@ endif\n # CFLAGS is for the user to override to, e.g., do a cross build with -O2.\n # TCFLAGS is used for compilations with the GCC just built.\n # T_CFLAGS is used for all compilations and is overridden by t-* files.\n+# TFLAGS is also for the user to override, passed down from the top-level\n+# Makefile.  It is used for all compilations.\n T_CFLAGS =\n TCFLAGS =\n+TFLAGS =\n CFLAGS = @CFLAGS@\n CXXFLAGS = @CXXFLAGS@\n LDFLAGS = @LDFLAGS@\n@@ -457,7 +460,7 @@ T_STDINT_GCC_H = $(srcdir)/ginclude/stdint-gcc.h\n # The GCC to use for compiling crt*.o.\n # Usually the one we just built.\n # Don't use this as a dependency--use $(GCC_PASSES).\n-GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include -L$(objdir)/../ld\n+GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include -L$(objdir)/../ld $(TFLAGS)\n \n # Set if the compiler was configured with --with-build-sysroot.\n SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n@@ -1193,6 +1196,7 @@ FLAGS_TO_PASS = \\\n \t\"MAKEINFOFLAGS=$(MAKEINFOFLAGS)\" \\\n \t\"MAKEOVERRIDES=\" \\\n \t\"SHELL=$(SHELL)\" \\\n+\t\"TFLAGS=$(TFLAGS)\" \\\n \t\"exeext=$(exeext)\" \\\n \t\"build_exeext=$(build_exeext)\" \\\n \t\"objext=$(objext)\" \\"}]}