{"sha": "e3b205be21d6d891e9c1e7942d57af1c510d49fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiMjA1YmUyMWQ2ZDg5MWU5YzFlNzk0MmQ1N2FmMWM1MTBkNDlmZA==", "commit": {"author": {"name": "Janis Johnson", "email": "janisjo@codesourcery.com", "date": "2012-06-26T03:10:43Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2012-06-26T03:10:43Z"}, "message": "target-supports-dg.exp (testname-for-summary): New.\n\n\t* lib/target-supports-dg.exp (testname-for-summary): New.\n\t* lib/profopt.exp (profopt_execute): Define testname_with_flags.\n\t* lib/gcc-dg.exp (cleanup-coverage-files, cleanup-repo-notes,\n\tcleanup-stack-usage, cleanup-dump, cleanup-saved-temps, scan-module,\n\tscan-module-absence, output-exists, output-exists-not: Use\n\ttestname-for-summary.\n\t(dg-test): Clean up testname_with_flags.\n\t* lib/scanasm.exp (scan-assembler, scan-assembler-not, scan-hidden,\n\tscan-not-hidden, scan-file, scan-file-not, scan-stack-usage,\n\tscan-stack-usage-not, scan-assembler-times, scan-assembler-dem,\n\tscan-assembler-dem-not, object-size: Use testname-for-summary.\n\t* lib/gcov.exp (run-gcov): Likewise.\n\t* lib/scandump.exp (scan-dump, scan-dump-times, scan-dump-not,\n\tscan-dump-dem, scan-dump-dem-note): Likewise.\n\nFrom-SVN: r188972", "tree": {"sha": "f5cd6542f29ec0e5e82054de63def7a401fe8aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5cd6542f29ec0e5e82054de63def7a401fe8aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b205be21d6d891e9c1e7942d57af1c510d49fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b205be21d6d891e9c1e7942d57af1c510d49fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b205be21d6d891e9c1e7942d57af1c510d49fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b205be21d6d891e9c1e7942d57af1c510d49fd/comments", "author": null, "committer": null, "parents": [{"sha": "25038c7e71ccb02df8dd1a85304610720661dc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25038c7e71ccb02df8dd1a85304610720661dc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25038c7e71ccb02df8dd1a85304610720661dc38"}], "stats": {"total": 186, "additions": 88, "deletions": 98}, "files": [{"sha": "b4f21e7493e1fdcc6e53a28500be6aba086da900", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -1,5 +1,20 @@\n 2012-06-25  Janis Johnson  <janisjo@codesourcery.com>\n \n+\t* lib/target-supports-dg.exp (testname-for-summary): New.\n+\t* lib/profopt.exp (profopt_execute): Define testname_with_flags.\n+\t* lib/gcc-dg.exp (cleanup-coverage-files, cleanup-repo-notes,\n+\tcleanup-stack-usage, cleanup-dump, cleanup-saved-temps, scan-module,\n+\tscan-module-absence, output-exists, output-exists-not: Use\n+\ttestname-for-summary.\n+\t(dg-test): Clean up testname_with_flags.\n+\t* lib/scanasm.exp (scan-assembler, scan-assembler-not, scan-hidden,\n+\tscan-not-hidden, scan-file, scan-file-not, scan-stack-usage,\n+\tscan-stack-usage-not, scan-assembler-times, scan-assembler-dem,\n+\tscan-assembler-dem-not, object-size: Use testname-for-summary.\n+\t* lib/gcov.exp (run-gcov): Likewise.\n+\t* lib/scandump.exp (scan-dump, scan-dump-times, scan-dump-not,\n+\tscan-dump-dem, scan-dump-dem-note): Likewise.\n+\n \t* lib/profopt.exp: Make prof_option_list local to profopt-execute.\n \t* g++.dg/tree-prof/tree-prof.exp (PROFOPT_OPTIONS): Define after\n \tincluding profopt.opt; save and restore existing value."}, {"sha": "3b9f9c0a514c176f139b2a4f682775e1622b1353", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -433,10 +433,7 @@ proc cleanup-profile-file { } {\n \n # Remove compiler-generated coverage files for the current test.\n proc cleanup-coverage-files { } {\n-    # This assumes that we are two frames down from dg-test or some other proc\n-    # that stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     # The name might include a list of options; extract the file name.\n     set testcase [lindex $testcase 0]\n     remove-build-file \"[file rootname [file tail $testcase]].gc??\"\n@@ -451,10 +448,7 @@ proc cleanup-coverage-files { } {\n \n # Remove compiler-generated files from -repo for the current test.\n proc cleanup-repo-files { } {\n-    # This assumes that we are two frames down from dg-test or some other proc\n-    # that stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     # The name might include a list of options; extract the file name.\n     set testcase [lindex $testcase 0]\n     remove-build-file \"[file rootname [file tail $testcase]].o\"\n@@ -492,10 +486,7 @@ proc cleanup-ipa-dump { suffix } {\n \n # Remove a stack usage file for the current test.\n proc cleanup-stack-usage { } {\n-    # This assumes that we are two frames down from dg-test or some other proc\n-    # that stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     # The name might include a list of options; extract the file name.\n     set testcase [lindex $testcase 0]\n     remove-build-file \"[file rootname [file tail $testcase]].su\"\n@@ -510,10 +501,7 @@ proc cleanup-stack-usage { } {\n \n # Remove all dump files with the provided suffix.\n proc cleanup-dump { suffix } {\n-    # This assumes that we are three frames down from dg-test or some other\n-    # proc that stores the filename of the testcase in a local variable\n-    # \"name\".  A cleaner solution would require a new DejaGnu release.\n-    upvar 3 name testcase\n+    set testcase [testname-for-summary]\n     # The name might include a list of options; extract the file name.\n     set src [file tail [lindex $testcase 0]]\n     remove-build-file \"[file tail $src].$suffix\"\n@@ -550,10 +538,7 @@ proc cleanup-saved-temps { args } {\n \t}\n     }\n \n-    # This assumes that we are two frames down from dg-test or some other proc\n-    # that stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     # The name might include a list of options; extract the file name.\n     set testcase [lindex $testcase 0]\n     foreach suffix $suffixes {\n@@ -584,7 +569,7 @@ proc scan-module { args } {\n     set text [read $fd]\n     close $fd\n \n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     if [regexp -- [lindex $args 1] $text] {\n       pass \"$testcase scan-module [lindex $args 1]\"\n     } else {\n@@ -602,7 +587,7 @@ proc scan-module-absence { args } {\n     set text [read $fd]\n     close $fd\n \n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n     if [regexp -- [lindex $args 1] $text] {\n       fail \"$testcase scan-module [lindex $args 1]\"\n     } else {\n@@ -622,8 +607,8 @@ proc output-exists { args } {\n \t}\n     }\n \n-    # Access variables from gcc-dg-test-1.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n+    # Access variable from gcc-dg-test-1.\n     upvar 2 output_file output_file\n \n     if [file exists $output_file] {\n@@ -645,8 +630,8 @@ proc output-exists-not { args } {\n \t}\n     }\n \n-    # Access variables from gcc-dg-test-1.\n-    upvar 2 name testcase\n+    set testcase [testname-for-summary]\n+    # Access variable from gcc-dg-test-1.\n     upvar 2 output_file output_file\n \n     if [file exists $output_file] {\n@@ -674,6 +659,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal errorInfo\n \tglobal compiler_conditional_xfail_data\n \tglobal shouldfail\n+\tglobal testname_with_flags\n \n \tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n \t    set saved_info $errorInfo\n@@ -684,6 +670,9 @@ if { [info procs saved-dg-test] == [list] } {\n \t    if [info exists compiler_conditional_xfail_data] {\n \t\tunset compiler_conditional_xfail_data\n \t    }\n+\t    if [info exists testname_with_flags] {\n+\t\tunset testname_with_flags\n+\t    }\n \t    unset_timeout_vars\n \t    error $errmsg $saved_info\n \t}\n@@ -695,6 +684,9 @@ if { [info procs saved-dg-test] == [list] } {\n \tif [info exists compiler_conditional_xfail_data] {\n \t    unset compiler_conditional_xfail_data\n \t}\n+\tif [info exists testname_with_flags] {\n+\t    unset testname_with_flags\n+\t}\n     }\n }\n "}, {"sha": "1cf93a718a67dc784689acee634e85b69e7dcdbd", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -265,8 +265,7 @@ proc run-gcov { args } {\n \t}\n     }\n \n-    # Get the test name, including options that make it unique, from gnu-test 2 levels up.\n-    upvar 2 name testname\n+    set testname [testname-for-summary]\n \n     # Extract the test file name from the arguments.\n     set testcase [lindex $gcov_args end]"}, {"sha": "b74b7cae1e70fc743cdccb39fb5e742f7e3eae6d", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -217,6 +217,7 @@ proc profopt-execute { src } {\n     global tool profile_option feedback_option prof_ext perf_ext perf_delta\n     global generate_final_code use_final_code\n     global verbose\n+    global testname_with_flags\n \n     if ![info exists profile_option] {\n         error \"No profile option specified for first compile.\"\n@@ -240,6 +241,12 @@ proc profopt-execute { src } {\n \tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n     }\n \n+    # Several procedures access the name of the test with torture flags,\n+    # normally defined in dg-test.  Profile optimization tests don't\n+    # use dg-test, so define it here to make it accessible via\n+    # testname-for-summary.\n+    set testname_with_flags $testcase\n+\n     set executable $tmpdir/[file tail [file rootname $src].x]\n     set basename [file tail $testcase]\n     set base [file rootname $basename]\n@@ -272,6 +279,7 @@ proc profopt-execute { src } {\n \tset extra_flags [profopt-get-options $src]\n \tif { [lindex ${dg-do-what} 1 ] == \"N\" } {\n \t    unsupported \"$src\"\n+\t    unset testname_with_flags\n \t    verbose \"$src not supported on this target, skipping it\" 3\n \t    return\n \t}\n@@ -437,4 +445,5 @@ proc profopt-execute { src } {\n \t    remote_file build delete $execname3\n \t}\n     }\n+    unset testname_with_flags\n }"}, {"sha": "51c19d3ade1c3f3af1d8161ced44bd159723baef", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 12, "deletions": 53, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -78,10 +78,7 @@ proc dg-scan { name positive testcase output_file orig_args } {\n # dg-scan for details.\n \n proc scan-assembler { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n     dg-scan \"scan-assembler\" 1 $testcase $output_file $args\n }\n@@ -95,10 +92,7 @@ proc scan-assembler_required_options { args } {\n # compiler.  See dg-scan for details.\n \n proc scan-assembler-not { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n \n     dg-scan \"scan-assembler-not\" 0 $testcase $output_file $args\n@@ -128,10 +122,7 @@ proc hidden-scan-for { symbol } {\n # produced by the compiler.\n \n proc scan-hidden { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n \n     set symbol [lindex $args 0]\n@@ -147,10 +138,7 @@ proc scan-hidden { args } {\n # produced by the compiler.\n \n proc scan-not-hidden { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n \n     set symbol [lindex $args 0]\n@@ -164,32 +152,23 @@ proc scan-not-hidden { args } {\n # Look for a pattern in OUTPUT_FILE.  See dg-scan for details.\n \n proc scan-file { output_file args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     dg-scan \"scan-file\" 1 $testcase $output_file $args\n }\n \n # Check that a pattern is not present in the OUTPUT_FILE.  See dg-scan\n # for details.\n \n proc scan-file-not { output_file args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     dg-scan \"scan-file-not\" 0 $testcase $output_file $args\n }\n \n # Look for a pattern in the .su file produced by the compiler.  See\n # dg-scan for details.\n \n proc scan-stack-usage { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].su\"\n \n     dg-scan \"scan-file\" 1 $testcase $output_file $args\n@@ -199,10 +178,7 @@ proc scan-stack-usage { args } {\n # compiler.  See dg-scan for details.\n \n proc scan-stack-usage-not { args } {\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set output_file \"[file rootname [file tail $testcase]].su\"\n \n     dg-scan \"scan-file-not\" 0 $testcase $output_file $args\n@@ -227,14 +203,7 @@ proc scan-assembler-times { args } {\n \t}\n     }\n \n-    # This assumes that we are two frames down from dg-test, and that\n-    # it still stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new dejagnu release.\n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n-\n+    set testcase [testname-for-summary]\n     set pattern [lindex $args 0]\n     set pp_pattern [make_pattern_printable $pattern]\n \n@@ -292,10 +261,7 @@ proc scan-assembler-dem { args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set pattern [lindex $args 0]\n     set pp_pattern [make_pattern_printable $pattern]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n@@ -349,10 +315,7 @@ proc scan-assembler-dem-not { args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n+    set testcase [testname-for-summary]\n     set pattern [lindex $args 0]\n     set pp_pattern [make_pattern_printable $pattern]\n     set output_file \"[file rootname [file tail $testcase]].s\"\n@@ -407,11 +370,7 @@ proc object-size { args } {\n \tverbose -log \"size is $size\"\n     }\n \n-    upvar 2 name testcase\n-    if { [llength $testcase] > 1 } {\n-\tset testcase \"$testcase \"\n-    }\n-\n+    set testcase [testname-for-summary]\n     set what [lindex $args 0]\n     set where [lsearch { text data bss total } $what]\n     if { $where == -1 } {"}, {"sha": "80b554bf09ef5d560c0affa3f052931d72f497c2", "filename": "gcc/testsuite/lib/scandump.exp", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fscandump.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Fscandump.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscandump.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -45,10 +45,7 @@ proc scan-dump { args } {\n         }\n     }\n \n-    # This assumes that we are three frames down from dg-test, and that\n-    # it still stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 3 name testcase\n+    set testcase [testname-for-summary]\n \n     set suf [dump-suffix [lindex $args 2]]\n     set testname \"$testcase scan-[lindex $args 0]-dump $suf \\\"[lindex $args 1]\\\"\"\n@@ -88,11 +85,7 @@ proc scan-dump-times { args } {\n \t}\n     }\n \n-    # This assumes that we are three frames down from dg-test, and that\n-    # it still stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 3 name testcase\n-\n+    set testcase [testname-for-summary]\n     set suf [dump-suffix [lindex $args 3]]\n     set printable_pattern [make_pattern_printable [lindex $args 1]]\n     set testname \"$testcase scan-[lindex $args 0]-dump-times $suf \\\"$printable_pattern\\\" [lindex $args 2]\"\n@@ -132,11 +125,7 @@ proc scan-dump-not { args } {\n \t}\n     }\n \n-    # This assumes that we are three frames down from dg-test, and that\n-    # it still stores the filename of the testcase in a local variable \"name\".\n-    # A cleaner solution would require a new DejaGnu release.\n-    upvar 3 name testcase\n-\n+    set testcase [testname-for-summary]\n     set suf [dump-suffix [lindex $args 2]]\n     set testname \"$testcase scan-[lindex $args 0]-dump-not $suf \\\"[lindex $args 1]\\\"\"\n     set src [file tail [lindex $testcase 0]]\n@@ -188,7 +177,7 @@ proc scan-dump-dem { args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    upvar 3 name testcase\n+    set testcase [testname-for-summary]\n     set suf [dump-suffix [lindex $args 2]]\n     set testname \"$testcase scan-[lindex $args 0]-dump-dem $suf \\\"[lindex $args 1]\\\"\"\n     set src [file tail [lindex $testcase 0]]\n@@ -239,8 +228,7 @@ proc scan-dump-dem-not { args } {\n \tverbose -log \"c++filt is $cxxfilt\"\n     }\n \n-    upvar 3 name testcase\n-\n+    set testcase [testname-for-summary]\n     set suf [dump-suffix [lindex $args 2]]\n     set testname \"$testcase scan-[lindex $args 0]-dump-dem-not $suf \\\"[lindex $args 1]\\\"\"\n     set src [file tail [lindex $testcase 0]]"}, {"sha": "2f6c4c2ce8359faa9f1fe5c76d84e32a1118916d", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b205be21d6d891e9c1e7942d57af1c510d49fd/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=e3b205be21d6d891e9c1e7942d57af1c510d49fd", "patch": "@@ -31,6 +31,34 @@ proc current_compiler_flags { } {\n     return \"$flags1 $flags2\"\n }\n \n+# DejaGnu's dg-test defines a test name that includes torture options\n+# which is used in most pass/fail messages.  Grab a copy of it.\n+\n+proc testname-for-summary { } {\n+    global testname_with_flags\n+\n+    # A variable called \"name\" is too generic, so identify dg-test by\n+    # the existence of dg-extra-tool-flags.\n+    if ![info exists testname_with_flags] {\n+\tset frames 2\n+\twhile { ![info exists flags] } {\n+\t    set frames [expr $frames + 1]\n+\t    upvar $frames dg-extra-tool-flags flags\n+\t}\n+\n+\t# We've got the stack level for dg-test; get the variable we want.\n+\tupvar $frames name name\n+\tset testname_with_flags $name\n+\n+\t# If there are flags, add an extra space to improve readability of\n+\t# the test summary.\n+\tif { [llength $testname_with_flags] > 1 } {\n+\t    set testname_with_flags \"$testname_with_flags \"\n+\t}\n+    }\n+    return \"$testname_with_flags\"\n+}\n+\n # If this target does not support weak symbols, skip this test.\n \n proc dg-require-weak { args } {"}]}