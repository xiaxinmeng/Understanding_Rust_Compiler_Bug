{"sha": "0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "node_id": "C_kwDOANBUbNoAKDBkNGE0NDc1ZTlmYmQ5NzJiZGJjZjhlMGJjZjZmM2JlM2RiMmYwMGY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-23T18:00:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-24T14:59:12Z"}, "message": "typecheck: Refactor cast_site\n\nRefactor cast_site to be a simple function in rust-type-util.h.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::cast_site):\n\tRemove cast_site.\n\t* typecheck/rust-hir-type-check-base.h: Remove cast_site\n\tprototype.\n\t* typecheck/rust-type-util.cc (cast_site): Add cast_site.\n\t* typecheck/rust-type-util.h (cast_site): Add cast_site\n\tprototype.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3404ee8f9b787f2a4b9c743b5039c8bc6c2f6155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3404ee8f9b787f2a4b9c743b5039c8bc6c2f6155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0f9fb8ba2140fb365b9c771c733401de929ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0f9fb8ba2140fb365b9c771c733401de929ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0f9fb8ba2140fb365b9c771c733401de929ff2"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b87ed01758357a9620aa38608875b996fe2cfa35", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "patch": "@@ -17,7 +17,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-hir-type-check-base.h\"\n-#include \"rust-casts.h\"\n #include \"rust-hir-type-check-expr.h\"\n #include \"rust-hir-type-check-implitem.h\"\n #include \"rust-hir-type-check-item.h\"\n@@ -348,40 +347,6 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n   return repr;\n }\n \n-TyTy::BaseType *\n-TypeCheckBase::cast_site (HirId id, TyTy::TyWithLocation from,\n-\t\t\t  TyTy::TyWithLocation to, Location cast_locus)\n-{\n-  rust_debug (\"cast_site id={%u} from={%s} to={%s}\", id,\n-\t      from.get_ty ()->debug_str ().c_str (),\n-\t      to.get_ty ()->debug_str ().c_str ());\n-\n-  auto context = TypeCheckContext::get ();\n-  if (from.get_ty ()->get_kind () == TyTy::TypeKind::ERROR\n-      || to.get_ty ()->get_kind () == TyTy::TypeKind::ERROR)\n-    return to.get_ty ();\n-\n-  // do the cast\n-  auto result = TypeCastRules::resolve (cast_locus, from, to);\n-\n-  // we assume error has already been emitted\n-  if (result.is_error ())\n-    return to.get_ty ();\n-\n-  // the result needs to be unified\n-  TyTy::BaseType *casted_result = result.tyty;\n-  rust_debug (\"cast_default_unify(a={%s}, b={%s})\",\n-\t      casted_result->debug_str ().c_str (),\n-\t      to.get_ty ()->debug_str ().c_str ());\n-\n-  TyTy::BaseType *casted\n-    = unify_site (id, to,\n-\t\t  TyTy::TyWithLocation (casted_result, from.get_locus ()),\n-\t\t  cast_locus);\n-  context->insert_cast_autoderef_mappings (id, std::move (result.adjustments));\n-  return casted;\n-}\n-\n void\n TypeCheckBase::resolve_generic_params (\n   const std::vector<std::unique_ptr<HIR::GenericParam> > &generic_params,"}, {"sha": "fe25a4285a0c70de66f6c52c9964137363c15fbe", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "patch": "@@ -34,10 +34,6 @@ class TypeCheckBase\n public:\n   virtual ~TypeCheckBase () {}\n \n-  static TyTy::BaseType *cast_site (HirId id, TyTy::TyWithLocation from,\n-\t\t\t\t    TyTy::TyWithLocation to,\n-\t\t\t\t    Location cast_locus);\n-\n protected:\n   TypeCheckBase ();\n "}, {"sha": "dbd10366fd7257f973d5733a7cdf57d8fea24824", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-type-check.h\"\n #include \"rust-hir-visitor.h\"\n #include \"rust-name-resolver.h\"\n+#include \"rust-casts.h\"\n #include \"rust-unify.h\"\n #include \"rust-coercion.h\"\n \n@@ -154,5 +155,39 @@ coercion_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n   return coerced;\n }\n \n+TyTy::BaseType *\n+cast_site (HirId id, TyTy::TyWithLocation from, TyTy::TyWithLocation to,\n+\t   Location cast_locus)\n+{\n+  rust_debug (\"cast_site id={%u} from={%s} to={%s}\", id,\n+\t      from.get_ty ()->debug_str ().c_str (),\n+\t      to.get_ty ()->debug_str ().c_str ());\n+\n+  auto context = TypeCheckContext::get ();\n+  if (from.get_ty ()->get_kind () == TyTy::TypeKind::ERROR\n+      || to.get_ty ()->get_kind () == TyTy::TypeKind::ERROR)\n+    return to.get_ty ();\n+\n+  // do the cast\n+  auto result = TypeCastRules::resolve (cast_locus, from, to);\n+\n+  // we assume error has already been emitted\n+  if (result.is_error ())\n+    return to.get_ty ();\n+\n+  // the result needs to be unified\n+  TyTy::BaseType *casted_result = result.tyty;\n+  rust_debug (\"cast_default_unify(a={%s}, b={%s})\",\n+\t      casted_result->debug_str ().c_str (),\n+\t      to.get_ty ()->debug_str ().c_str ());\n+\n+  TyTy::BaseType *casted\n+    = unify_site (id, to,\n+\t\t  TyTy::TyWithLocation (casted_result, from.get_locus ()),\n+\t\t  cast_locus);\n+  context->insert_cast_autoderef_mappings (id, std::move (result.adjustments));\n+  return casted;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "01333d8b984cadfe83cb3fdd327c51e0c50a781f", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=0d4a4475e9fbd972bdbcf8e0bcf6f3be3db2f00f", "patch": "@@ -41,6 +41,10 @@ TyTy::BaseType *\n coercion_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t       Location coercion_locus);\n \n+TyTy::BaseType *\n+cast_site (HirId id, TyTy::TyWithLocation from, TyTy::TyWithLocation to,\n+\t   Location cast_locus);\n+\n } // namespace Resolver\n } // namespace Rust\n "}]}