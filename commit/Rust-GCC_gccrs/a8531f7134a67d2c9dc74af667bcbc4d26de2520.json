{"sha": "a8531f7134a67d2c9dc74af667bcbc4d26de2520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1MzFmNzEzNGE2N2QyYzlkYzc0YWY2NjdiY2JjNGQyNmRlMjUyMA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-06-11T09:19:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:19:46Z"}, "message": "[Ada] Suppress the expansion of ignored assertion pragmas\n\nThis patch suppresses the expansion of ignored assertion pragmas.\n\n2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* contracts.adb (Process_Body_Postconditions): Expand only checked\n\tpostconditions.\n\t(Process_Contract_Cases_For): Expand only checked contract cases.\n\t(Process_Inherited_Preconditions): Ignored class-wide preconditions are\n\tpartially expanded because some of their semantic checks are tied to\n\tthe expansion.\n\t(Process_Preconditions_For): Expand only checked preconditions.\n\t(Process_Spec_Postconditions): Expand only checked preconditions.\n\tIgnored class-wide preconditions are partially expanded because some of\n\ttheir semantic checks are tied to the expansion.\n\t* exp_prag.adb (Expand_N_Pragma): Suppress the expansion of ignored\n\tassertion pragmas.\n\t* exp_util.adb (Add_Inherited_Invariants): Code clean up.\n\t* sem_util.adb (Propagate_Invariant_Attributes): Code clean up.\n\ngcc/testsuite/\n\n\t* gnat.dg/assertion_policy1.adb, gnat.dg/assertion_policy1_pkg.adb,\n\tgnat.dg/assertion_policy1_pkg.ads: New testcase.\n\nFrom-SVN: r261430", "tree": {"sha": "9c6c5d72256d1973d7e7ef5c70b481980d23e9ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c6c5d72256d1973d7e7ef5c70b481980d23e9ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8531f7134a67d2c9dc74af667bcbc4d26de2520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8531f7134a67d2c9dc74af667bcbc4d26de2520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8531f7134a67d2c9dc74af667bcbc4d26de2520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8531f7134a67d2c9dc74af667bcbc4d26de2520/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1985767d6517bd8daa0625f3923e24f0861f68b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985767d6517bd8daa0625f3923e24f0861f68b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1985767d6517bd8daa0625f3923e24f0861f68b8"}], "stats": {"total": 182, "additions": 139, "deletions": 43}, "files": [{"sha": "7ccdb01a316d103d02d1dd2e886a7f0dfefb43e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -1,3 +1,20 @@\n+2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Process_Body_Postconditions): Expand only checked\n+\tpostconditions.\n+\t(Process_Contract_Cases_For): Expand only checked contract cases.\n+\t(Process_Inherited_Preconditions): Ignored class-wide preconditions are\n+\tpartially expanded because some of their semantic checks are tied to\n+\tthe expansion.\n+\t(Process_Preconditions_For): Expand only checked preconditions.\n+\t(Process_Spec_Postconditions): Expand only checked preconditions.\n+\tIgnored class-wide preconditions are partially expanded because some of\n+\ttheir semantic checks are tied to the expansion.\n+\t* exp_prag.adb (Expand_N_Pragma): Suppress the expansion of ignored\n+\tassertion pragmas.\n+\t* exp_util.adb (Add_Inherited_Invariants): Code clean up.\n+\t* sem_util.adb (Propagate_Invariant_Attributes): Code clean up.\n+\n 2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch9.adb, exp_unst.adb, inline.adb, libgnat/a-ciorma.adb,"}, {"sha": "104fd1645748362f9e8452ef586005abfda8ca21", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 66, "deletions": 35, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -2284,7 +2284,9 @@ package body Contracts is\n             if Present (Items) then\n                Prag := Contract_Test_Cases (Items);\n                while Present (Prag) loop\n-                  if Pragma_Name (Prag) = Name_Contract_Cases then\n+                  if Pragma_Name (Prag) = Name_Contract_Cases\n+                    and then Is_Checked (Prag)\n+                  then\n                      Expand_Pragma_Contract_Cases\n                        (CCs     => Prag,\n                         Subp_Id => Subp_Id,\n@@ -2342,7 +2344,9 @@ package body Contracts is\n             if Present (Items) then\n                Prag := Pre_Post_Conditions (Items);\n                while Present (Prag) loop\n-                  if Pragma_Name (Prag) = Post_Nam then\n+                  if Pragma_Name (Prag) = Post_Nam\n+                    and then Is_Checked (Prag)\n+                  then\n                      Append_Enabled_Item\n                        (Item => Build_Pragma_Check_Equivalent (Prag),\n                         List => Stmts);\n@@ -2364,7 +2368,9 @@ package body Contracts is\n                   --  Note that non-matching pragmas are skipped\n \n                   if Nkind (Decl) = N_Pragma then\n-                     if Pragma_Name (Decl) = Post_Nam then\n+                     if Pragma_Name (Decl) = Post_Nam\n+                       and then Is_Checked (Decl)\n+                     then\n                         Append_Enabled_Item\n                           (Item => Build_Pragma_Check_Equivalent (Decl),\n                            List => Stmts);\n@@ -2394,6 +2400,7 @@ package body Contracts is\n          procedure Process_Spec_Postconditions is\n             Subps   : constant Subprogram_List :=\n                         Inherited_Subprograms (Spec_Id);\n+            Item    : Node_Id;\n             Items   : Node_Id;\n             Prag    : Node_Id;\n             Subp_Id : Entity_Id;\n@@ -2406,7 +2413,9 @@ package body Contracts is\n             if Present (Items) then\n                Prag := Pre_Post_Conditions (Items);\n                while Present (Prag) loop\n-                  if Pragma_Name (Prag) = Name_Postcondition then\n+                  if Pragma_Name (Prag) = Name_Postcondition\n+                    and then Is_Checked (Prag)\n+                  then\n                      Append_Enabled_Item\n                        (Item => Build_Pragma_Check_Equivalent (Prag),\n                         List => Stmts);\n@@ -2429,13 +2438,20 @@ package body Contracts is\n                      if Pragma_Name (Prag) = Name_Postcondition\n                        and then Class_Present (Prag)\n                      then\n-                        Append_Enabled_Item\n-                          (Item =>\n-                             Build_Pragma_Check_Equivalent\n-                               (Prag     => Prag,\n-                                Subp_Id  => Spec_Id,\n-                                Inher_Id => Subp_Id),\n-                           List => Stmts);\n+                        Item :=\n+                          Build_Pragma_Check_Equivalent\n+                            (Prag     => Prag,\n+                             Subp_Id  => Spec_Id,\n+                             Inher_Id => Subp_Id);\n+\n+                        --  The pragma Check equivalent of the class-wide\n+                        --  postcondition is still created even though the\n+                        --  pragma may be ignored because the equivalent\n+                        --  performs semantic checks.\n+\n+                        if Is_Checked (Prag) then\n+                           Append_Enabled_Item (Item, Stmts);\n+                        end if;\n                      end if;\n \n                      Prag := Next_Pragma (Prag);\n@@ -2630,9 +2646,11 @@ package body Contracts is\n          ----------------------\n \n          procedure Prepend_To_Decls (Item : Node_Id) is\n-            Decls : List_Id := Declarations (Body_Decl);\n+            Decls : List_Id;\n \n          begin\n+            Decls := Declarations (Body_Decl);\n+\n             --  Ensure that the body has a declarative list\n \n             if No (Decls) then\n@@ -2680,12 +2698,13 @@ package body Contracts is\n          -------------------------------------\n \n          procedure Process_Inherited_Preconditions is\n-            Subps      : constant Subprogram_List :=\n-                           Inherited_Subprograms (Spec_Id);\n-            Check_Prag : Node_Id;\n-            Items      : Node_Id;\n-            Prag       : Node_Id;\n-            Subp_Id    : Entity_Id;\n+            Subps : constant Subprogram_List :=\n+                      Inherited_Subprograms (Spec_Id);\n+\n+            Item    : Node_Id;\n+            Items   : Node_Id;\n+            Prag    : Node_Id;\n+            Subp_Id : Entity_Id;\n \n          begin\n             --  Process the contracts of all inherited subprograms, looking for\n@@ -2701,20 +2720,29 @@ package body Contracts is\n                      if Pragma_Name (Prag) = Name_Precondition\n                        and then Class_Present (Prag)\n                      then\n-                        Check_Prag :=\n+                        Item :=\n                           Build_Pragma_Check_Equivalent\n                             (Prag     => Prag,\n                              Subp_Id  => Spec_Id,\n                              Inher_Id => Subp_Id);\n \n-                        --  The spec of an inherited subprogram already yielded\n-                        --  a class-wide precondition. Merge the existing\n-                        --  precondition with the current one using \"or else\".\n+                        --  The pragma Check equivalent of the class-wide\n+                        --  precondition is still created even though the\n+                        --  pragma may be ignored because the equivalent\n+                        --  performs semantic checks.\n \n-                        if Present (Class_Pre) then\n-                           Merge_Preconditions (Check_Prag, Class_Pre);\n-                        else\n-                           Class_Pre := Check_Prag;\n+                        if Is_Checked (Prag) then\n+\n+                           --  The spec of an inherited subprogram already\n+                           --  yielded a class-wide precondition. Merge the\n+                           --  existing precondition with the current one\n+                           --  using \"or else\".\n+\n+                           if Present (Class_Pre) then\n+                              Merge_Preconditions (Item, Class_Pre);\n+                           else\n+                              Class_Pre := Item;\n+                           end if;\n                         end if;\n                      end if;\n \n@@ -2736,7 +2764,8 @@ package body Contracts is\n          -------------------------------\n \n          procedure Process_Preconditions_For (Subp_Id : Entity_Id) is\n-            Items     : constant Node_Id := Contract (Subp_Id);\n+            Items : constant Node_Id := Contract (Subp_Id);\n+\n             Decl      : Node_Id;\n             Prag      : Node_Id;\n             Subp_Decl : Node_Id;\n@@ -2747,7 +2776,9 @@ package body Contracts is\n             if Present (Items) then\n                Prag := Pre_Post_Conditions (Items);\n                while Present (Prag) loop\n-                  if Pragma_Name (Prag) = Name_Precondition then\n+                  if Pragma_Name (Prag) = Name_Precondition\n+                    and then Is_Checked (Prag)\n+                  then\n                      Prepend_To_Decls_Or_Save (Prag);\n                   end if;\n \n@@ -2772,7 +2803,9 @@ package body Contracts is\n                   --  Note that non-matching pragmas are skipped\n \n                   if Nkind (Decl) = N_Pragma then\n-                     if Pragma_Name (Decl) = Name_Precondition then\n+                     if Pragma_Name (Decl) = Name_Precondition\n+                       and then Is_Checked (Decl)\n+                     then\n                         Prepend_To_Decls_Or_Save (Decl);\n                      end if;\n \n@@ -2908,20 +2941,18 @@ package body Contracts is\n \n       elsif Is_Ignored_Ghost_Entity (Subp_Id) then\n          return;\n-      end if;\n \n       --  Do not re-expand the same contract. This scenario occurs when a\n       --  construct is rewritten into something else during its analysis\n       --  (expression functions for instance).\n \n-      if Has_Expanded_Contract (Subp_Id) then\n+      elsif Has_Expanded_Contract (Subp_Id) then\n          return;\n+      end if;\n \n-      --  Otherwise mark the subprogram\n+      --  Prevent multiple expansion attempts of the same contract\n \n-      else\n-         Set_Has_Expanded_Contract (Subp_Id);\n-      end if;\n+      Set_Has_Expanded_Contract (Subp_Id);\n \n       --  Ensure that the formal parameters are visible when expanding all\n       --  contract items."}, {"sha": "65cfe1fe339e434c86719fee8270f98c0913a094", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -44,6 +44,7 @@ with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n@@ -167,11 +168,24 @@ package body Exp_Prag is\n       Prag_Id : constant Pragma_Id := Get_Pragma_Id (Pname);\n \n    begin\n-      --  Rewrite pragma ignored by Ignore_Pragma to null statement, so that\n-      --  the back end doesn't see it. The same goes for pragma\n-      --  Default_Scalar_Storage_Order if the -gnatI switch was given.\n+      --  Suppress the expansion of an ignored assertion pragma. Such a pragma\n+      --  should not be transformed into a null statment because:\n+      --\n+      --    * The pragma may be part of the rep item chain of a type, in which\n+      --      case rewriting it will destroy the chain.\n+      --\n+      --    * The analysis of the pragma may involve two parts (see routines\n+      --      Analyze_xxx_In_Decl_Part). The second part of the analysis will\n+      --      not happen if the pragma is rewritten.\n+\n+      if Assertion_Expression_Pragma (Prag_Id) and then Is_Ignored (N) then\n+         return;\n+\n+      --  Rewrite the pragma into a null statement when it is ignored using\n+      --  pragma Ignore_Pragma, or denotes Default_Scalar_Storage_Order and\n+      --  compilation switch -gnatI is in effect.\n \n-      if Should_Ignore_Pragma_Sem (N)\n+      elsif Should_Ignore_Pragma_Sem (N)\n         or else (Prag_Id = Pragma_Default_Scalar_Storage_Order\n                   and then Ignore_Rep_Clauses)\n       then"}, {"sha": "3bed5080ffc0002352eddc5fd44879733b7ecc78", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -2307,7 +2307,7 @@ package body Exp_Util is\n             Deriv_Typ := T;\n          end if;\n \n-               pragma Assert (Present (Deriv_Typ));\n+         pragma Assert (Present (Deriv_Typ));\n \n          --  Determine which rep item chain to use. Precedence is given to that\n          --  of the parent type's partial view since it usually carries all the"}, {"sha": "70c02da6ea1b39c067f25e82bd10e4211b3ec16c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -23193,19 +23193,19 @@ package body Sem_Util is\n          if Has_Inheritable_Invariants (From_Typ)\n            and then not Has_Inheritable_Invariants (Typ)\n          then\n-            Set_Has_Inheritable_Invariants (Typ, True);\n+            Set_Has_Inheritable_Invariants (Typ);\n          end if;\n \n          if Has_Inherited_Invariants (From_Typ)\n            and then not Has_Inherited_Invariants (Typ)\n          then\n-            Set_Has_Inherited_Invariants (Typ, True);\n+            Set_Has_Inherited_Invariants (Typ);\n          end if;\n \n          if Has_Own_Invariants (From_Typ)\n            and then not Has_Own_Invariants (Typ)\n          then\n-            Set_Has_Own_Invariants (Typ, True);\n+            Set_Has_Own_Invariants (Typ);\n          end if;\n \n          if Present (Full_IP) and then No (Invariant_Procedure (Typ)) then"}, {"sha": "b18759b389a1fe68f89d5913812766ec437ce0bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -1,3 +1,8 @@\n+2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/assertion_policy1.adb, gnat.dg/assertion_policy1_pkg.adb,\n+\tgnat.dg/assertion_policy1_pkg.ads: New testcase.\n+\n 2018-06-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/predicate1.adb: New testcase."}, {"sha": "1b773c4068716001a5480a6ead116f4bc8afc77d", "filename": "gcc/testsuite/gnat.dg/assertion_policy1.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnata\" }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+with Assertion_Policy1_Pkg; use Assertion_Policy1_Pkg;\n+\n+procedure Assertion_Policy1 is\n+begin\n+   Proc (2, 1);\n+\n+exception\n+   when others =>\n+      Put_Line (\"ERROR: unexpected exception\");\n+      raise;\n+end Assertion_Policy1;"}, {"sha": "90d31b50f284787f244dfd8bd77194902bbe2d74", "filename": "gcc/testsuite/gnat.dg/assertion_policy1_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.adb?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -0,0 +1,8 @@\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+package body Assertion_Policy1_Pkg is\n+   procedure Proc (Low : Integer; High : Integer) is\n+   begin\n+      Put_Line (\"Proc\");\n+   end Proc;\n+end Assertion_Policy1_Pkg;"}, {"sha": "88b0056cbe213b005d3b5c69475a7fd589fdfd2e", "filename": "gcc/testsuite/gnat.dg/assertion_policy1_pkg.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8531f7134a67d2c9dc74af667bcbc4d26de2520/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassertion_policy1_pkg.ads?ref=a8531f7134a67d2c9dc74af667bcbc4d26de2520", "patch": "@@ -0,0 +1,6 @@\n+package Assertion_Policy1_Pkg is\n+   pragma Assertion_Policy (Ignore);\n+\n+   procedure Proc (Low : Integer; High : Integer)\n+     with Pre => Low < High;\n+end Assertion_Policy1_Pkg;"}]}