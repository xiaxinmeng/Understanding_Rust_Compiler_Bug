{"sha": "26bca0ed48bcbd292d08bb2e83276658d6ea5434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiY2EwZWQ0OGJjYmQyOTJkMDhiYjJlODMyNzY2NThkNmVhNTQzNA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-07-24T16:50:22Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-07-24T16:50:22Z"}, "message": "rs6000-c.c: Add support for built-in functions vector float vec_extract_fp32_from_shorth...\n\ngcc/ChangeLog:\n\n2017-07-24  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n\tvector float vec_extract_fp32_from_shorth (vector unsigned short);\n\tvector float vec_extract_fp32_from_shortl (vector unsigned short);\n\t* config/rs6000/altivec.h (vec_extract_fp_from_shorth,\n\tvec_extract_fp_from_shortl): Add defines for the two builtins.\n\t* config/rs6000/rs6000-builtin.def (VEXTRACT_FP_FROM_SHORTH,\n\tVEXTRACT_FP_FROM_SHORTL): Add BU_P9V_OVERLOAD_1 and BU_P9V_VSX_1\n\tnew builtins.\n\t* config/rs6000/vsx.md vsx_xvcvhpsp): Add define_insn.\n\t(vextract_fp_from_shorth, vextract_fp_from_shortl): Add define_expands.\n\t* doc/extend.texi: Update the built-in documentation file for the\n\tnew built-in function.\n\ngcc/testsuite/ChangeLog:\n\n2017-07-24  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-3-p9-runnable.c: Add new test file for\n\tthe new built-ins.\n\nFrom-SVN: r250477", "tree": {"sha": "12164755d44c8c937412f89bd6d506d4776f73d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12164755d44c8c937412f89bd6d506d4776f73d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26bca0ed48bcbd292d08bb2e83276658d6ea5434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bca0ed48bcbd292d08bb2e83276658d6ea5434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bca0ed48bcbd292d08bb2e83276658d6ea5434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bca0ed48bcbd292d08bb2e83276658d6ea5434/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "570e228b5e0ca01cc433786df5c61aa583e22469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570e228b5e0ca01cc433786df5c61aa583e22469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570e228b5e0ca01cc433786df5c61aa583e22469"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "c77ba24254c186175a41663e7e0533d0e6ac919a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -1,3 +1,18 @@\n+2017-07-24  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n+\tvector float vec_extract_fp32_from_shorth (vector unsigned short);\n+\tvector float vec_extract_fp32_from_shortl (vector unsigned short);\n+\t* config/rs6000/altivec.h (vec_extract_fp_from_shorth,\n+\tvec_extract_fp_from_shortl): Add defines for the two builtins.\n+\t* config/rs6000/rs6000-builtin.def (VEXTRACT_FP_FROM_SHORTH,\n+\tVEXTRACT_FP_FROM_SHORTL): Add BU_P9V_OVERLOAD_1 and BU_P9V_VSX_1\n+\tnew builtins.\n+\t* config/rs6000/vsx.md vsx_xvcvhpsp): Add define_insn.\n+\t(vextract_fp_from_shorth, vextract_fp_from_shortl): Add define_expands.\n+\t* doc/extend.texi: Update the built-in documentation file for the\n+\tnew built-in function.\n+\n 2017-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/81521"}, {"sha": "4d34a97c9aec681fbee4a66722798370a529d5f8", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -449,6 +449,9 @@\n #define vec_insert_exp __builtin_vec_insert_exp\n #define vec_test_data_class __builtin_vec_test_data_class\n \n+#define vec_extract_fp_from_shorth __builtin_vec_vextract_fp_from_shorth\n+#define vec_extract_fp_from_shortl __builtin_vec_vextract_fp_from_shortl\n+\n #define scalar_extract_exp __builtin_vec_scalar_extract_exp\n #define scalar_extract_sig __builtin_vec_scalar_extract_sig\n #define scalar_insert_exp __builtin_vec_scalar_insert_exp"}, {"sha": "a043e70f93bde96be89ff9ae863ab57b63b39af5", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -2066,6 +2066,9 @@ BU_P9V_OVERLOAD_1 (VSTDCNSP,\t\"scalar_test_neg_sp\")\n \n BU_P9V_OVERLOAD_1 (REVB,\t\"revb\")\n \n+BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTH, \"vextract_fp_from_shorth\")\n+BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTL, \"vextract_fp_from_shortl\")\n+\n /* ISA 3.0 vector scalar overloaded 2 argument functions.  */\n BU_P9V_OVERLOAD_2 (VSIEDP,\t\"scalar_insert_exp\")\n \n@@ -2084,6 +2087,8 @@ BU_P9V_VSX_1 (VEEDP, \"extract_exp_dp\", CONST, xvxexpdp)\n BU_P9V_VSX_1 (VEESP, \"extract_exp_sp\", CONST, xvxexpsp)\n BU_P9V_VSX_1 (VESDP, \"extract_sig_dp\", CONST, xvxsigdp)\n BU_P9V_VSX_1 (VESSP, \"extract_sig_sp\", CONST, xvxsigsp)\n+BU_P9V_VSX_1 (VEXTRACT_FP_FROM_SHORTH, \"vextract_fp_from_shorth\", CONST, vextract_fp_from_shorth)\n+BU_P9V_VSX_1 (VEXTRACT_FP_FROM_SHORTL, \"vextract_fp_from_shortl\", CONST, vextract_fp_from_shortl)\n \n /* 2 argument vsx vector functions added in ISA 3.0 (power9).  */\n BU_P9V_VSX_2 (VIEDP, \"insert_exp_dp\", CONST, xviexpdp)"}, {"sha": "4fcd1513b5b9a3ba2f7f985edf38c0ef5b4d6588", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -5184,6 +5184,11 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VEXTRACT4B, P9V_BUILTIN_VEXTRACT4B,\n     RS6000_BTI_INTDI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI, 0 },\n \n+  { P9V_BUILTIN_VEC_VEXTRACT_FP_FROM_SHORTH, P9V_BUILTIN_VEXTRACT_FP_FROM_SHORTH,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VEXTRACT_FP_FROM_SHORTL, P9V_BUILTIN_VEXTRACT_FP_FROM_SHORTL,\n+    RS6000_BTI_V4SF, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+\n   { P9V_BUILTIN_VEC_VEXTULX, P9V_BUILTIN_VEXTUBLX,\n     RS6000_BTI_INTQI, RS6000_BTI_UINTSI,\n     RS6000_BTI_V16QI, 0 },"}, {"sha": "4e57340aa3b06a33a8ec516cbe6ebf2b0961eaa3", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -326,6 +326,7 @@\n    UNSPEC_VSX_CVDPSXWS\n    UNSPEC_VSX_CVDPUXWS\n    UNSPEC_VSX_CVSPDP\n+   UNSPEC_VSX_CVHPSP\n    UNSPEC_VSX_CVSPDPN\n    UNSPEC_VSX_CVDPSPN\n    UNSPEC_VSX_CVSXWDP\n@@ -348,6 +349,8 @@\n    UNSPEC_VSX_ROUND_I\n    UNSPEC_VSX_ROUND_IC\n    UNSPEC_VSX_SLDWI\n+   UNSPEC_VSX_XXPERM\n+\n    UNSPEC_VSX_XXSPLTW\n    UNSPEC_VSX_XXSPLTD\n    UNSPEC_VSX_DIVSD\n@@ -368,6 +371,8 @@\n    UNSPEC_VSX_SIEXPQP\n    UNSPEC_VSX_SCMPEXPDP\n    UNSPEC_VSX_STSTDC\n+   UNSPEC_VSX_VEXTRACT_FP_FROM_SHORTH\n+   UNSPEC_VSX_VEXTRACT_FP_FROM_SHORTL\n    UNSPEC_VSX_VXEXP\n    UNSPEC_VSX_VXSIG\n    UNSPEC_VSX_VIEXP\n@@ -1746,6 +1751,15 @@\n   \"xscvspdp %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n+;; Generate xvcvhpsp instruction\n+(define_insn \"vsx_xvcvhpsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand: V16QI 1 \"vsx_register_operand\" \"wa\")]\n+\t\t     UNSPEC_VSX_CVHPSP))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xvcvhpsp %x0,%x1\"\n+  [(set_attr \"type\" \"vecfloat\")])\n+\n ;; xscvdpsp used for splat'ing a scalar to V4SF, knowing that the internal SF\n ;; format of scalars is actually DF.\n (define_insn \"vsx_xscvdpsp_scalar\"\n@@ -4506,7 +4520,65 @@\n   \"xxinsertw %x0,%x1,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-\f\n+;; Generate vector extract four float 32 values from left four elements\n+;; of eight element vector of float 16 values.\n+(define_expand \"vextract_fp_from_shorth\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"wa\")]\n+   UNSPEC_VSX_VEXTRACT_FP_FROM_SHORTH))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int vals[16] = {15, 14, 0, 0, 13, 12, 0, 0, 11, 10, 0, 0, 9, 8, 0, 0};\n+  int i;\n+\n+  rtx rvals[16];\n+  rtx mask = gen_reg_rtx (V16QImode);\n+  rtx tmp = gen_reg_rtx (V16QImode);\n+  rtvec v;\n+\n+  for (i = 0; i < 16; i++)\n+    rvals[i] = GEN_INT (vals[i]);\n+\n+  /* xvcvhpsp - vector convert F16 to vector F32 requires the four F16\n+     inputs in half words 1,3,5,7 (IBM numbering).  Use xxperm to move\n+     src half words 0,1,2,3 for the conversion instruction.  */\n+  v = gen_rtvec_v (16, rvals);\n+  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (tmp, operands[1],\n+\t\t\t\t\t  operands[1], mask));\n+  emit_insn (gen_vsx_xvcvhpsp (operands[0], tmp));\n+  DONE;\n+})\n+\n+;; Generate vector extract four float 32 values from right four elements\n+;; of eight element vector of float 16 values.\n+(define_expand \"vextract_fp_from_shortl\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"wa\")]\n+\tUNSPEC_VSX_VEXTRACT_FP_FROM_SHORTL))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int vals[16] = {7, 6, 0, 0, 5, 4, 0, 0, 3, 2, 0, 0, 1, 0, 0, 0};\n+  int i;\n+  rtx rvals[16];\n+  rtx mask = gen_reg_rtx (V16QImode);\n+  rtx tmp = gen_reg_rtx (V16QImode);\n+  rtvec v;\n+\n+  for (i = 0; i < 16; i++)\n+    rvals[i] = GEN_INT (vals[i]);\n+\n+  /* xvcvhpsp - vector convert F16 to vector F32 requires the four F16\n+     inputs in half words 1,3,5,7 (IBM numbering).  Use xxperm to move\n+     src half words 4,5,6,7 for the conversion instruction.  */\n+  v = gen_rtvec_v (16, rvals);\n+  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (tmp, operands[1],\n+\t\t\t\t\t  operands[1], mask));\n+  emit_insn (gen_vsx_xvcvhpsp (operands[0], tmp));\n+  DONE;\n+})\n+\n ;; Support for ISA 3.0 vector byte reverse\n \n ;; Swap all bytes with in a vector"}, {"sha": "1dd53755128c08608dcb02e2a8f292b59370bf02", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -18306,6 +18306,9 @@ vector bool short vec_cmpne (vector bool short, vector bool short);\n vector bool int vec_cmpne (vector bool int, vector bool int);\n vector bool long long vec_cmpne (vector bool long long, vector bool long long);\n \n+vector float vec_extract_fp32_from_shorth (vector unsigned short);\n+vector float vec_extract_fp32_from_shortl (vector unsigned short);\n+\n vector long long vec_vctz (vector long long);\n vector unsigned long long vec_vctz (vector unsigned long long);\n vector int vec_vctz (vector int);"}, {"sha": "bb4302f0541af27a7f453cbb7d72aeff8c5bd18b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -1,3 +1,8 @@\n+2017-07-24  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3-p9-runnable.c: Add new test file for\n+\tthe new built-ins.\n+\n 2017-07-24  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \t* gcc.target/aarch64/simd/vmla_elem_1.c: New."}, {"sha": "24589b5563990c8ee34289a5879f6c734f09fd7e", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-p9-runnable.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bca0ed48bcbd292d08bb2e83276658d6ea5434/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-p9-runnable.c?ref=26bca0ed48bcbd292d08bb2e83276658d6ea5434", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { powerpc64*-*-* && { lp64 && p9vector_hw } } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2 -mupper-regs-di\" } */\n+\n+#include <altivec.h> // vector\n+\n+void abort (void);\n+\n+int main() {\n+   int i;\n+   vector float vfr, vfexpt;\n+   vector unsigned short vusha;\n+\n+   /* 1.0, -2.0, 0.0, 8.5, 1.5, 0.5, 1.25, -0.25 */\n+   vusha = (vector unsigned short){0B011110000000000, 0B1100000000000000,\n+                                   0B000000000000000, 0B0100100001000000,\n+                                   0B011111000000000, 0B0011100000000000,\n+                                   0B011110100000000, 0B1011010000000000};\n+   \n+   vfexpt = (vector float){1.0, -2.0, 0.0, 8.5};\n+   vfr = vec_extract_fp_from_shorth(vusha);\n+\n+   for (i=0; i<4; i++) {\n+      if (vfr[i] != vfexpt[i])\n+         abort();\n+   }\n+\n+   vfexpt = (vector float){1.5, 0.5, 1.25, -0.25};\n+   vfr = vec_extract_fp_from_shortl(vusha);\n+\n+   for (i=0; i<4; i++) {\n+      if (vfr[i] != vfexpt[i])\n+         abort();\n+   }\n+}"}]}