{"sha": "5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiODllMGEyODZkZGIzMzViMzQ0MWRjM2Y4YzJlMDkwYTUzYzZhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-05T22:58:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-05T22:58:22Z"}, "message": "PR libstdc++/89128 add deduction guides for container adaptors\n\n\tPR libstdc++/89128\n\t* include/bits/stl_queue.h (queue, priority_queue): Add deduction\n\tguides.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* testsuite/23_containers/priority_queue/deduction.cc: New test.\n\t* testsuite/23_containers/queue/deduction.cc: New test.\n\t* testsuite/23_containers/stack/deduction.cc: New test.\n\nFrom-SVN: r268566", "tree": {"sha": "005729a73d52e662ea45825bbfcd58be65a972b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005729a73d52e662ea45825bbfcd58be65a972b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d397e3948ec945c8c3b4dc695e1b0b5820365a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d397e3948ec945c8c3b4dc695e1b0b5820365a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d397e3948ec945c8c3b4dc695e1b0b5820365a39"}], "stats": {"total": 355, "additions": 355, "deletions": 0}, "files": [{"sha": "e08c08a0cf8486512cfa56fdb71384167d10a838", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -1,5 +1,13 @@\n 2019-02-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/89128\n+\t* include/bits/stl_queue.h (queue, priority_queue): Add deduction\n+\tguides.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* testsuite/23_containers/priority_queue/deduction.cc: New test.\n+\t* testsuite/23_containers/queue/deduction.cc: New test.\n+\t* testsuite/23_containers/stack/deduction.cc: New test.\n+\n \tPR libstdc++/89194\n \t* include/std/type_traits (__is_convertible_helper)\n \t(__is_convertible_helper<_From, _To, false>): Revert changes to"}, {"sha": "6d092c9bbfe33e9d2b4ea6c413913745f0f026c2", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -302,6 +302,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // __cplusplus >= 201103L\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Container,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+    queue(_Container) -> queue<typename _Container::value_type, _Container>;\n+\n+  template<typename _Container, typename _Allocator,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n+\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+    queue(_Container, _Allocator)\n+    -> queue<typename _Container::value_type, _Container>;\n+#endif\n+\n   /**\n    *  @brief  Queue equality comparison.\n    *  @param  __x  A %queue.\n@@ -653,6 +665,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // __cplusplus >= 201103L\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Compare, typename _Container,\n+\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+    priority_queue(_Compare, _Container)\n+    -> priority_queue<typename _Container::value_type, _Container, _Compare>;\n+\n+  template<typename _InputIterator, typename _ValT\n+\t   = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Compare = less<_ValT>,\n+\t   typename _Container = vector<_ValT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+    priority_queue(_InputIterator, _InputIterator, _Compare = _Compare(),\n+\t\t   _Container = _Container())\n+    -> priority_queue<_ValT, _Container, _Compare>;\n+\n+  template<typename _Compare, typename _Container, typename _Allocator,\n+\t   typename = enable_if_t<!__is_allocator<_Compare>::value>,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n+\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+    priority_queue(_Compare, _Container, _Allocator)\n+    -> priority_queue<typename _Container::value_type, _Container, _Compare>;\n+#endif\n+\n   // No equality/comparison operators are provided for priority_queue.\n \n #if __cplusplus >= 201103L"}, {"sha": "e8443a78a05a523f911fd1fe0a44bf476b2a30b8", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -276,6 +276,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // __cplusplus >= 201103L\n     };\n \n+#if __cpp_deduction_guides >= 201606\n+  template<typename _Container,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>>\n+    stack(_Container) -> stack<typename _Container::value_type, _Container>;\n+\n+  template<typename _Container, typename _Allocator,\n+\t   typename = enable_if_t<!__is_allocator<_Container>::value>,\n+\t   typename = enable_if_t<__is_allocator<_Allocator>::value>>\n+    stack(_Container, _Allocator)\n+    -> stack<typename _Container::value_type, _Container>;\n+#endif\n+\n   /**\n    *  @brief  Stack equality comparison.\n    *  @param  __x  A %stack."}, {"sha": "4630cbb101c460b43cd2e459badee3bf91a01aa7", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/deduction.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fdeduction.cc?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -0,0 +1,119 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <queue>\n+#include <deque>\n+#include <vector>\n+#include <testsuite_iterators.h>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::priority_queue<unsigned> s0;\n+\n+  std::priority_queue s1 = s0;\n+  check_type<std::priority_queue<unsigned>>(s1);\n+\n+  std::priority_queue s2 = std::move(s0);\n+  check_type<std::priority_queue<unsigned>>(s2);\n+\n+  const std::priority_queue s3 = s0;\n+  check_type<const std::priority_queue<unsigned>>(s3);\n+\n+  const std::priority_queue s4 = s3;\n+  check_type<const std::priority_queue<unsigned>>(s4);\n+\n+  std::allocator<unsigned> a;\n+  std::priority_queue s5(s0, a);\n+  check_type<std::priority_queue<unsigned>>(s5);\n+\n+  std::priority_queue s6(std::move(s0), a);\n+  check_type<std::priority_queue<unsigned>>(s6);\n+\n+  const std::priority_queue s7(s3, a);\n+  check_type<const std::priority_queue<unsigned>>(s7);\n+}\n+\n+template<typename T>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<T, __gnu_test::input_iterator_wrapper>;\n+\n+void\n+test02()\n+{\n+  using Deque = std::deque<int>;\n+  Deque d;\n+  using Vector = std::vector<short>;\n+  Vector v;\n+  using Cmp = std::greater<long>;\n+  Cmp cmp;\n+\n+  std::priority_queue s1(cmp, d);\n+  check_type<std::priority_queue<int, Deque, Cmp>>(s1);\n+\n+  std::priority_queue s2(cmp, d, d.get_allocator());\n+  check_type<std::priority_queue<int, Deque, Cmp>>(s2);\n+\n+  std::priority_queue s3(cmp, std::move(d));\n+  check_type<std::priority_queue<int, Deque, Cmp>>(s3);\n+\n+  std::priority_queue s4(cmp, std::move(d), d.get_allocator());\n+  check_type<std::priority_queue<int, Deque, Cmp>>(s4);\n+\n+  std::priority_queue s5(cmp, v);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s5);\n+\n+  std::priority_queue s6(cmp, v, v.get_allocator());\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s6);\n+\n+  std::priority_queue s7(cmp, std::move(v));\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s7);\n+\n+  std::priority_queue s8(cmp, std::move(v), v.get_allocator());\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s8);\n+\n+  short a[1] = {};\n+  input_iterator_seq<short> seq(a);\n+\n+  std::priority_queue s9(seq.begin(), seq.end());\n+  check_type<std::priority_queue<short>>(s9);\n+\n+  std::priority_queue s10(seq.begin(), seq.end(), {});\n+  check_type<std::priority_queue<short>>(s10);\n+\n+  std::priority_queue s11(seq.begin(), seq.end(), {}, {});\n+  check_type<std::priority_queue<short>>(s11);\n+\n+  std::priority_queue s12(seq.begin(), seq.end(), cmp);\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s12);\n+\n+  std::priority_queue s13(seq.begin(), seq.end(), cmp, {});\n+  check_type<std::priority_queue<short, Vector, Cmp>>(s13);\n+\n+  std::priority_queue s14(seq.begin(), seq.end(), cmp, std::deque<short>{});\n+  check_type<std::priority_queue<short, std::deque<short>, Cmp>>(s14);\n+}"}, {"sha": "c8f6aeebecdf753a235d171a41f741f409521dff", "filename": "libstdc++-v3/testsuite/23_containers/queue/deduction.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fdeduction.cc?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <queue>\n+#include <deque>\n+#include <list>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::queue<unsigned> s0;\n+\n+  std::queue s1 = s0;\n+  check_type<std::queue<unsigned>>(s1);\n+\n+  std::queue s2 = std::move(s0);\n+  check_type<std::queue<unsigned>>(s2);\n+\n+  const std::queue s3 = s0;\n+  check_type<const std::queue<unsigned>>(s3);\n+\n+  const std::queue s4 = s3;\n+  check_type<const std::queue<unsigned>>(s4);\n+\n+  std::allocator<unsigned> a;\n+  std::queue s5(s0, a);\n+  check_type<std::queue<unsigned>>(s5);\n+\n+  std::queue s6(std::move(s0), a);\n+  check_type<std::queue<unsigned>>(s6);\n+\n+  const std::queue s7(s3, a);\n+  check_type<const std::queue<unsigned>>(s7);\n+}\n+\n+void\n+test02()\n+{\n+  std::deque<unsigned> d;\n+  std::list<long> l;\n+\n+  std::queue s1(d);\n+  check_type<std::queue<unsigned>>(s1);\n+\n+  std::queue s2(d, d.get_allocator());\n+  check_type<std::queue<unsigned>>(s2);\n+\n+  std::queue s3(std::move(d));\n+  check_type<std::queue<unsigned>>(s3);\n+\n+  std::queue s4(std::move(d), d.get_allocator());\n+  check_type<std::queue<unsigned>>(s4);\n+\n+  std::queue s5(l);\n+  check_type<std::queue<long, std::list<long>>>(s5);\n+\n+  std::queue s6(l, l.get_allocator());\n+  check_type<std::queue<long, std::list<long>>>(s6);\n+\n+  std::queue s7(std::move(l));\n+  check_type<std::queue<long, std::list<long>>>(s7);\n+\n+  std::queue s8(std::move(l), l.get_allocator());\n+  check_type<std::queue<long, std::list<long>>>(s8);\n+}"}, {"sha": "3be443e1e8b5a3d2b1770bd282d8c7da9632af87", "filename": "libstdc++-v3/testsuite/23_containers/stack/deduction.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb89e0a286ddb335b3441dc3f8c2e090a53c6af/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Fdeduction.cc?ref=5bb89e0a286ddb335b3441dc3f8c2e090a53c6af", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <stack>\n+#include <deque>\n+#include <list>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::stack<unsigned> s0;\n+\n+  std::stack s1 = s0;\n+  check_type<std::stack<unsigned>>(s1);\n+\n+  std::stack s2 = std::move(s0);\n+  check_type<std::stack<unsigned>>(s2);\n+\n+  const std::stack s3 = s0;\n+  check_type<const std::stack<unsigned>>(s3);\n+\n+  const std::stack s4 = s3;\n+  check_type<const std::stack<unsigned>>(s4);\n+\n+  std::allocator<unsigned> a;\n+  std::stack s5(s0, a);\n+  check_type<std::stack<unsigned>>(s5);\n+\n+  std::stack s6(std::move(s0), a);\n+  check_type<std::stack<unsigned>>(s6);\n+\n+  const std::stack s7(s3, a);\n+  check_type<const std::stack<unsigned>>(s7);\n+}\n+\n+void\n+test02()\n+  {\n+  std::deque<unsigned> d;\n+  std::list<long> l;\n+\n+  std::stack s1(d);\n+  check_type<std::stack<unsigned>>(s1);\n+\n+  std::stack s2(d, d.get_allocator());\n+  check_type<std::stack<unsigned>>(s2);\n+\n+  std::stack s3(std::move(d));\n+  check_type<std::stack<unsigned>>(s3);\n+\n+  std::stack s4(std::move(d), d.get_allocator());\n+  check_type<std::stack<unsigned>>(s4);\n+\n+  std::stack s5(l);\n+  check_type<std::stack<long, std::list<long>>>(s5);\n+\n+  std::stack s6(l, l.get_allocator());\n+  check_type<std::stack<long, std::list<long>>>(s6);\n+\n+  std::stack s7(std::move(l));\n+  check_type<std::stack<long, std::list<long>>>(s7);\n+\n+  std::stack s8(std::move(l), l.get_allocator());\n+  check_type<std::stack<long, std::list<long>>>(s8);\n+}"}]}