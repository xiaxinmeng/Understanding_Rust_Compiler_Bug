{"sha": "27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4NDJlMmExZWIyNmE3ZWFlODBiOGVmZDk4ZmI4YzhiZDc0YTY4ZQ==", "commit": {"author": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T10:43:53Z"}, "committer": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T11:49:59Z"}, "message": "[3/3] [AArch64][vect] vec_widen_lshift pattern\n\nAdd aarch64 vec_widen_lshift_lo/hi patterns and fix bug it triggers in\nmid-end. This pattern takes one vector with N elements of size S, shifts\neach element left by the element width and stores the results as N\nelements of size 2*s (in 2 result vectors). The aarch64 backend\nimplements this with the shll,shll2 instruction pair.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md: Add vec_widen_lshift_hi/lo<mode>\n\tpatterns.\n\t* tree-vect-stmts.c (vectorizable_conversion): Fix for widen_lshift\n\tcase.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vect-widen-lshift.c: New test.", "tree": {"sha": "f1201421b53cb3c438e52f1dc132d35b0666b1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1201421b53cb3c438e52f1dc132d35b0666b1ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc9573f9a5e9432e53c7de93985cfbd267f0309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc9573f9a5e9432e53c7de93985cfbd267f0309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc9573f9a5e9432e53c7de93985cfbd267f0309"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "68baf416045178b0ebcfeb8de2d201f625f1c317", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "patch": "@@ -4664,8 +4664,74 @@\n   [(set_attr \"type\" \"neon_sat_shift_reg<q>\")]\n )\n \n+(define_expand \"vec_widen_<sur>shiftl_lo_<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(match_operand:VQW 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:SI 2\n+\t\t\t   \"aarch64_simd_shift_imm_bitsize_<ve_mode>\" \"i\")]\n+\t\t\t VSHLL))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n+    emit_insn (gen_aarch64_<sur>shll<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t\t     p, operands[2]));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"vec_widen_<sur>shiftl_hi_<mode>\"\n+   [(set (match_operand:<VWIDE> 0 \"register_operand\")\n+\t(unspec:<VWIDE> [(match_operand:VQW 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:SI 2\n+\t\t\t   \"immediate_operand\" \"i\")]\n+\t\t\t  VSHLL))]\n+   \"TARGET_SIMD\"\n+   {\n+    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+    emit_insn (gen_aarch64_<sur>shll2<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t\t      p, operands[2]));\n+    DONE;\n+   }\n+)\n+\n ;; vshll_n\n \n+(define_insn \"aarch64_<sur>shll<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(vec_select:<VHALF>\n+\t\t\t    (match_operand:VQW 1 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:VQW 2 \"vect_par_cnst_lo_half\" \"\"))\n+\t\t\t (match_operand:SI 3\n+\t\t\t   \"aarch64_simd_shift_imm_bitsize_<ve_mode>\" \"i\")]\n+\t\t\t VSHLL))]\n+  \"TARGET_SIMD\"\n+  {\n+    if (INTVAL (operands[3]) == GET_MODE_UNIT_BITSIZE (<MODE>mode))\n+      return \"shll\\\\t%0.<Vwtype>, %1.<Vhalftype>, %3\";\n+    else\n+      return \"<sur>shll\\\\t%0.<Vwtype>, %1.<Vhalftype>, %3\";\n+  }\n+  [(set_attr \"type\" \"neon_shift_imm_long\")]\n+)\n+\n+(define_insn \"aarch64_<sur>shll2<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(vec_select:<VHALF>\n+\t\t\t    (match_operand:VQW 1 \"register_operand\" \"w\")\n+\t\t\t    (match_operand:VQW 2 \"vect_par_cnst_hi_half\" \"\"))\n+\t\t\t (match_operand:SI 3\n+\t\t\t   \"aarch64_simd_shift_imm_bitsize_<ve_mode>\" \"i\")]\n+\t\t\t VSHLL))]\n+  \"TARGET_SIMD\"\n+  {\n+    if (INTVAL (operands[3]) == GET_MODE_UNIT_BITSIZE (<MODE>mode))\n+      return \"shll2\\\\t%0.<Vwtype>, %1.<Vtype>, %3\";\n+    else\n+      return \"<sur>shll2\\\\t%0.<Vwtype>, %1.<Vtype>, %3\";\n+  }\n+  [(set_attr \"type\" \"neon_shift_imm_long\")]\n+)\n+\n (define_insn \"aarch64_<sur>shll_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(unspec:<VWIDE> [(match_operand:VD_BHSI 1 \"register_operand\" \"w\")"}, {"sha": "48a3719d4baf17fcf1025e0871bae21ba47cc850", "filename": "gcc/testsuite/gcc.target/aarch64/vect-widen-lshift.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-lshift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-lshift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-lshift.c?ref=27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps\" } */\n+#include <stdint.h>\n+#include <string.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define ARR_SIZE 1024\n+\n+/* Should produce an shll,shll2 pair*/\n+void sshll_opt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   << 16;\n+        foo[i+1] = a[i+1] << 16;\n+        foo[i+2] = a[i+2] << 16;\n+        foo[i+3] = a[i+3] << 16;\n+    }\n+}\n+\n+__attribute__((optimize (0)))\n+void sshll_nonopt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   << 16;\n+        foo[i+1] = a[i+1] << 16;\n+        foo[i+2] = a[i+2] << 16;\n+        foo[i+3] = a[i+3] << 16;\n+    }\n+}\n+\n+\n+void __attribute__((optimize (0)))\n+init(uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE;i++)\n+    {\n+      a[i] = i;\n+      b[i] = 2*i;\n+    }\n+}\n+\n+int __attribute__((optimize (0)))\n+main()\n+{\n+    uint32_t foo_arr[ARR_SIZE];\n+    uint32_t bar_arr[ARR_SIZE];\n+    uint16_t a[ARR_SIZE];\n+    uint16_t b[ARR_SIZE];\n+\n+    init(a, b);\n+    sshll_opt(foo_arr, a, b);\n+    sshll_nonopt(bar_arr, a, b);\n+    if (memcmp(foo_arr, bar_arr, ARR_SIZE) != 0)\n+      return 1;\n+    return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tshll\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tshll2\\t} 1} } */"}, {"sha": "a4980a931a99047c0fba9397caa74b91efdf0611", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=27842e2a1eb26a7eae80b8efd98fb8c8bd74a68e", "patch": "@@ -4935,8 +4935,9 @@ vectorizable_conversion (vec_info *vinfo,\n \t\t\t &vec_oprnds1);\n       if (code == WIDEN_LSHIFT_EXPR)\n \t{\n-\t  vec_oprnds1.create (ncopies * ninputs);\n-\t  for (i = 0; i < ncopies * ninputs; ++i)\n+\t  int oprnds_size = vec_oprnds0.length ();\n+\t  vec_oprnds1.create (oprnds_size);\n+\t  for (i = 0; i < oprnds_size; ++i)\n \t    vec_oprnds1.quick_push (op1);\n \t}\n       /* Arguments are ready.  Create the new vector stmts.  */"}]}