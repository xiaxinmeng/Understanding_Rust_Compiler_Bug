{"sha": "82d46ad79e79394f374bc0ddb7591d166b0b61eb", "node_id": "C_kwDOANBUbNoAKDgyZDQ2YWQ3OWU3OTM5NGYzNzRiYzBkZGI3NTkxZDE2NmIwYjYxZWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-24T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-24T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "5f3637d17938017d4c4aa67411ea00f51de9a675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f3637d17938017d4c4aa67411ea00f51de9a675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d46ad79e79394f374bc0ddb7591d166b0b61eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d46ad79e79394f374bc0ddb7591d166b0b61eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d46ad79e79394f374bc0ddb7591d166b0b61eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d46ad79e79394f374bc0ddb7591d166b0b61eb/comments", "author": null, "committer": null, "parents": [{"sha": "8567d9491d06832ea34b564c6bace9f7d43099ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8567d9491d06832ea34b564c6bace9f7d43099ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8567d9491d06832ea34b564c6bace9f7d43099ae"}], "stats": {"total": 152, "additions": 151, "deletions": 1}, "files": [{"sha": "c07208a2e2fd770202cfcd8e171f608bf1e4fc36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1,3 +1,45 @@\n+2022-08-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/106714\n+\t* config/i386/amxtileintrin.h (_tile_loadd_internal): Cast to\n+\t__PTRDIFF_TYPE__.\n+\t(_tile_stream_loadd_internal): Likewise.\n+\t(_tile_stored_internal): Likewise.\n+\n+2022-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106722\n+\t* gimple-predicate-analysis.h (MAX_NUM_CHAINS, MAX_CHAIN_LEN,\n+\tMAX_POSTDOM_CHECK, MAX_SWITCH_CASES): Move ...\n+\t* gimple-predicate-analysis.cc: ... here and document.\n+\t(simple_control_dep_chain): New function, factored from\n+\tpredicate::use_cannot_happen.\n+\t(predicate::use_cannot_happen): Adjust.\n+\t(predicate::predicate): Use simple_control_dep_chain as fallback.\n+\n+2022-08-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_equal::op1_range): Set range to\n+\trange of op2.\n+\n+2022-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (is_loop_exit): Split out\n+\tfrom ...\n+\t(is_non_loop_exit_postdominating): ... here.  Remove after\n+\tinlining ...\n+\t(find_control_equiv_block): ... here.\n+\t(compute_control_dep_chain): ... and here.\n+\t(predicate::is_use_guarded): Do not excempt loop exits\n+\tfrom short-cutting the case of the use post-dominating the\n+\tPHI definition.\n+\n+2022-08-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106687\n+\t* range-op.cc (operator_minus::lhs_op1_relation): Return VREL_LE\n+\tfor the VREL_GT case as well.\n+\n 2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config/pru/pru.md (pru_<code>di3): New alternative for"}, {"sha": "a8087bc572d8c721585d1a5bba867fe9acc8d418", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1 +1 @@\n-20220823\n+20220824"}, {"sha": "083ead1a394eb86d806c6ebbbe619555defbc2fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1,3 +1,8 @@\n+2022-08-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* typeck.cc (maybe_warn_pessimizing_move): Don't warn about\n+\tredundant std::move when the expression was wrapped in { }.\n+\n 2022-08-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90428"}, {"sha": "76a8e17a9f2bd8128614f858a3a140e0510a7db0", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1,3 +1,9 @@\n+2022-08-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n 2022-06-25  Xi Ruoyao  <xry111@xry111.site>\n \n \t* exgettext: Remove unneeded fgrep command."}, {"sha": "8f3b3e592cd61bc9b60e2a5b0a0461bcdb5e0967", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1,3 +1,48 @@\n+2022-08-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/Wpessimizing-move10.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move12.C: New test.\n+\n+2022-08-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/x86_64/abi/bf16/asm-support.S: Replace vmovdqu with\n+\tmovdqu.\n+\n+2022-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106722\n+\t* g++.dg/uninit-pr106722-1.C: New testcase.\n+\n+2022-08-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/torture/phi-1.C: New test.\n+\n+2022-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/uninit-pred-10.c: New testcase.\n+\n+2022-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/depend-6.f90: Fix array index use for\n+\tdepobj var + update scan-tree-dump-times.\n+\n+2022-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/depend-4.f90: Fix array index use for\n+\tdepobj var + update scan-tree-dump-times.\n+\n+2022-08-23  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* gcc.target/x86_64/abi/bf16/bf16-helper.h:\n+\tAdd _m128bf16/m256bf16/_m512bf16.\n+\t* gcc.target/x86_64/abi/bf16/m512bf16/bf16-zmm-check.h:\n+\tInclude bf16-helper.h.\n+\n+2022-08-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106687\n+\t* g++.dg/pr106687.C: New.\n+\n 2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* gcc.target/pru/bitop-di.c: New test."}, {"sha": "d88ffec6a871ce60edd5ccf91ba1ae4ac9abec74", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d46ad79e79394f374bc0ddb7591d166b0b61eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d46ad79e79394f374bc0ddb7591d166b0b61eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82d46ad79e79394f374bc0ddb7591d166b0b61eb", "patch": "@@ -1,3 +1,55 @@\n+2022-08-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_bvector.h (_Bit_reference::operator=): Define\n+\tconst overload for C++23 as per P2321R2.\n+\t* include/bits/stl_pair.h (pair::swap): Likewise.\n+\t(pair::pair): Define additional converting constructors for\n+\tC++23 as per P2321R2.\n+\t(pair::operator=): Define const overloads for C++23 as per\n+\tP2321R2.\n+\t(swap): Define overload taking const pair& for C++23 as per\n+\tP2321R2.\n+\t(basic_common_reference): Define partial specialization for\n+\tpair for C++23 as per P2321R2.\n+\t(common_type): Likewise.\n+\t* include/bits/uses_allocator_args.h\n+\t(uses_allocator_construction_args): Define additional pair\n+\toverloads for C++23 as per P2321R2.\n+\t* include/std/tuple (_Tuple_impl::_Tuple_impl): Define\n+\tadditional converting constructors for C++23 as per P2321R2.\n+\t(_Tuple_impl::_M_assign): Define const overloads for C++23\n+\tas per P2321R2.\n+\t(_Tuple_impl::_M_swap): Likewise.\n+\t(tuple::__constructible): Define as a convenient renaming of\n+\t_TCC<true>::__constructible.\n+\t(tuple::__convertible): As above but for _TCC<true>::__convertible.\n+\t(tuple::tuple): Define additional converting constructors for\n+\tC++23 as per P2321R2.\n+\t(tuple::operator=): Define const overloads for C++23 as per\n+\tP2321R2.\n+\t(tuple::swap): Likewise.\n+\t(basic_common_reference): Define partial specialization for\n+\ttuple for C++23 as per P2321R2.\n+\t(common_type): Likewise.\n+\t* testsuite/20_util/pair/p2321r2.cc: New test.\n+\t* testsuite/20_util/tuple/p2321r2.cc: New test.\n+\t* testsuite/23_containers/vector/bool/element_access/1.cc: New test.\n+\n+2022-08-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/tuple (_TupleConstraints::__convertible): Define.\n+\t(_TupleConstraints::__constructible): Define.\n+\t(_TupleConstraints::__is_explicitly_constructible): Redefine this\n+\tin terms of __convertible and __constructible.\n+\t(_TupleConstraints::__is_implicitly_constructible): Likewise.\n+\n+2022-08-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106589\n+\t* include/std/variant (__do_visit): Handle is_void<R> for zero\n+\targument case.\n+\t* testsuite/20_util/variant/visit_r.cc: Check std::visit<void>(v).\n+\n 2022-08-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105678"}]}