{"sha": "8305d7868da2a057825734b31113455ef97d9a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwNWQ3ODY4ZGEyYTA1NzgyNTczNGIzMTExMzQ1NWVmOTdkOWE3Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-18T05:22:46Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-18T05:22:46Z"}, "message": "re PR rtl-optimization/25600 (unsigned>>31?-1:0  should be optimized to int>>31)\n\n\n\tPR middle-end/25600\n\t* fold-const.c (fold_binary): Fold (X >> C) != 0 into X < 0 when\n\tC is one less than the width of X (and related transformations).\n\t* simplify_rtx.c (simplify_unary_operation_1): Transform \n\t(neg (lt x 0)) into either (ashiftrt X C) or (lshiftrt X C)\n\tdepending on STORE_FLAG_VALUE, were C is one less then the\n\twidth of X.\n\nFrom-SVN: r111226", "tree": {"sha": "4d37d7702bbfbd33a364527a6c3b6ba57cad4e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d37d7702bbfbd33a364527a6c3b6ba57cad4e0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8305d7868da2a057825734b31113455ef97d9a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8305d7868da2a057825734b31113455ef97d9a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8305d7868da2a057825734b31113455ef97d9a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8305d7868da2a057825734b31113455ef97d9a76/comments", "author": null, "committer": null, "parents": [{"sha": "e097f8873d8389995b81b2794f7ec718064fb8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e097f8873d8389995b81b2794f7ec718064fb8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e097f8873d8389995b81b2794f7ec718064fb8b6"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "9acf0ac8b25a88fc13da97a6a6577d865091866b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8305d7868da2a057825734b31113455ef97d9a76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8305d7868da2a057825734b31113455ef97d9a76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8305d7868da2a057825734b31113455ef97d9a76", "patch": "@@ -1,3 +1,13 @@\n+2006-02-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/25600\n+\t* fold-const.c (fold_binary): Fold (X >> C) != 0 into X < 0 when\n+\tC is one less than the width of X (and related transformations).\n+\t* simplify_rtx.c (simplify_unary_operation_1): Transform \n+\t(neg (lt x 0)) into either (ashiftrt X C) or (lshiftrt X C)\n+\tdepending on STORE_FLAG_VALUE, were C is one less then the\n+\twidth of X.\n+\n 2006-02-17  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/26341"}, {"sha": "c77e7ba82eb8e1276be0f8deb8d0f7c272ceeae7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8305d7868da2a057825734b31113455ef97d9a76/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8305d7868da2a057825734b31113455ef97d9a76/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8305d7868da2a057825734b31113455ef97d9a76", "patch": "@@ -10042,6 +10042,30 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    return t1;\n \t}\n \n+      /* Fold (X >> C) != 0 into X < 0 if C is one less than the width\n+\t of X.  Similarly fold (X >> C) == 0 into X >= 0.  */\n+      if ((code == EQ_EXPR || code == NE_EXPR)\n+\t  && integer_zerop (arg1)\n+\t  && TREE_CODE (arg0) == RSHIFT_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\t{\n+\t  tree arg00 = TREE_OPERAND (arg0, 0);\n+\t  tree arg01 = TREE_OPERAND (arg0, 1);\n+\t  tree itype = TREE_TYPE (arg00);\n+\t  if (TREE_INT_CST_HIGH (arg01) == 0\n+\t      && TREE_INT_CST_LOW (arg01)\n+\t\t == (unsigned HOST_WIDE_INT) (TYPE_PRECISION (itype) - 1))\n+\t    {\n+\t      if (TYPE_UNSIGNED (itype))\n+\t\t{\n+\t\t  itype = lang_hooks.types.signed_type (itype);\n+\t\t  arg00 = fold_convert (itype, arg00);\n+\t\t}\n+\t      return fold_build2 (code == EQ_EXPR ? GE_EXPR : LT_EXPR,\n+\t\t\t\t  type, arg00, build_int_cst (itype, 0));\n+\t    }\n+\t}\n+\n       if ((code == EQ_EXPR || code == NE_EXPR)\n \t  && integer_zerop (arg1)\n \t  && tree_expr_nonzero_p (arg0))"}, {"sha": "8b1f6fd1b95bdde3c218ae920a03c1ea97b13cec", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8305d7868da2a057825734b31113455ef97d9a76/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8305d7868da2a057825734b31113455ef97d9a76/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=8305d7868da2a057825734b31113455ef97d9a76", "patch": "@@ -584,6 +584,19 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  && XEXP (op, 1) == const1_rtx\n \t  && nonzero_bits (XEXP (op, 0), mode) == 1)\n \treturn plus_constant (XEXP (op, 0), -1);\n+\n+      /* (neg (lt x 0)) is (ashiftrt X C) if STORE_FLAG_VALUE is 1.  */\n+      /* (neg (lt x 0)) is (lshiftrt X C) if STORE_FLAG_VALUE is -1.  */\n+      if (GET_CODE (op) == LT\n+\t  && XEXP (op, 1) == const0_rtx)\n+\t{\n+\t  if (STORE_FLAG_VALUE == 1)\n+\t    return simplify_gen_binary (ASHIFTRT, mode, XEXP (op, 0),\n+\t\t\t\t\tGEN_INT (GET_MODE_BITSIZE (mode) - 1));\n+\t  else if (STORE_FLAG_VALUE == -1)\n+\t    return simplify_gen_binary (LSHIFTRT, mode, XEXP (op, 0),\n+\t\t\t\t\tGEN_INT (GET_MODE_BITSIZE (mode) - 1));\n+\t}\n       break;\n \n     case TRUNCATE:"}]}