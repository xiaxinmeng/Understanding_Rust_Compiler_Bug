{"sha": "2f6bd5398ebc65d3f9607507223edabf81acc785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2YmQ1Mzk4ZWJjNjVkM2Y5NjA3NTA3MjIzZWRhYmY4MWFjYzc4NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-07-11T18:46:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-07-11T18:46:50Z"}, "message": "tree-ssa.texi (Cleanups): Improve description of TRY_FINALLY_EXPR.\n\n\t* doc/tree-ssa.texi (Cleanups): Improve description of\n\tTRY_FINALLY_EXPR.\n\t(GIMPLE Exception Handling): Clarify TRY_CATCH_EXPR cases.\n\nFrom-SVN: r101895", "tree": {"sha": "b1f1abba2a20de57df80170b5f1a730bcec50d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f1abba2a20de57df80170b5f1a730bcec50d27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f6bd5398ebc65d3f9607507223edabf81acc785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6bd5398ebc65d3f9607507223edabf81acc785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6bd5398ebc65d3f9607507223edabf81acc785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6bd5398ebc65d3f9607507223edabf81acc785/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "046a69e067eef6ec8722ee7334013a10ff34bb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046a69e067eef6ec8722ee7334013a10ff34bb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046a69e067eef6ec8722ee7334013a10ff34bb7d"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "e50b717a8026084c254894230f554081f0fd4787", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6bd5398ebc65d3f9607507223edabf81acc785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6bd5398ebc65d3f9607507223edabf81acc785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f6bd5398ebc65d3f9607507223edabf81acc785", "patch": "@@ -1,3 +1,9 @@\n+2005-07-11  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* doc/tree-ssa.texi (Cleanups): Improve description of\n+\tTRY_FINALLY_EXPR.\n+\t(GIMPLE Exception Handling): Clarify TRY_CATCH_EXPR cases.\n+\n 2005-07-11  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \t* print-tree.c (print_node): Use DECL_ARGUMENT_FLD."}, {"sha": "42d7c43505483878fc051235084462c56271f373", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6bd5398ebc65d3f9607507223edabf81acc785/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6bd5398ebc65d3f9607507223edabf81acc785/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=2f6bd5398ebc65d3f9607507223edabf81acc785", "patch": "@@ -406,31 +406,77 @@ still happen in the future, perhaps by moving most of that logic into\n @cindex Cleanups\n \n Destructors for local C++ objects and similar dynamic cleanups are\n-represented in GIMPLE by a @code{TRY_FINALLY_EXPR}.  When the controlled\n-block exits, the cleanup is run.\n+represented in GIMPLE by a @code{TRY_FINALLY_EXPR}.\n+@code{TRY_FINALLY_EXPR} has two operands, both of which are a sequence\n+of statements to execute.  The first sequence is executed.  When it\n+completes the second sequence is executed.\n+\n+The first sequence may complete in the following ways:\n+\n+@enumerate\n+\n+@item Execute the last statement in the sequence and fall off the\n+end.\n+\n+@item Execute a goto statement (@code{GOTO_EXPR}) to an ordinary\n+label outside the sequence.\n+\n+@item Execute a return statement (@code{RETURN_EXPR}).\n+\n+@item Throw an exception.  This is currently not explicitly represented in\n+GIMPLE.\n+\n+@end enumerate\n+\n+The second sequence is not executed if the first sequence completes by\n+calling @code{setjmp} or @code{exit} or any other function that does\n+not return.  The second sequence is also not executed if the first\n+sequence completes via a non-local goto or a computed goto (in general\n+the compiler does not know whether such a goto statement exits the\n+first sequence or not, so we assume that it doesn't).\n+\n+After the second sequence is executed, if it completes normally by\n+falling off the end, execution continues whereever the first sequence\n+would have continued, by falling off the end, or doing a goto, etc.\n \n @code{TRY_FINALLY_EXPR} complicates the flow graph, since the cleanup\n needs to appear on every edge out of the controlled block; this\n reduces the freedom to move code across these edges.  Therefore, the\n EH lowering pass which runs before most of the optimization passes\n eliminates these expressions by explicitly adding the cleanup to each\n-edge.\n+edge.  Rethrowing the exception is represented using @code{RESX_EXPR}.\n+\n \n @node GIMPLE Exception Handling\n @subsubsection Exception Handling\n @cindex GIMPLE Exception Handling\n \n Other exception handling constructs are represented using\n-@code{TRY_CATCH_EXPR}.  The handler operand of a @code{TRY_CATCH_EXPR}\n-can be a normal statement to be executed if the controlled block throws an\n-exception, or it can have one of two special forms:\n+@code{TRY_CATCH_EXPR}.  @code{TRY_CATCH_EXPR} has two operands.  The\n+first operand is a sequence of statements to execute.  If executing\n+these statements does not throw an exception, then the second operand\n+is ignored.  Otherwise, if an exception is thrown, then the second\n+operand of the @code{TRY_CATCH_EXPR} is checked.  The second operand\n+may have the following forms:\n \n @enumerate\n-@item A @code{CATCH_EXPR} executes its handler if the thrown exception\n-  matches one of the allowed types.  Multiple handlers can be\n-  expressed by a sequence of @code{CATCH_EXPR} statements.\n-@item An @code{EH_FILTER_EXPR} executes its handler if the thrown\n-  exception does not match one of the allowed types.\n+\n+@item A sequence of statements to execute.  When an exception occurs,\n+these statements are executed, and then the exception is rethrown.\n+\n+@item A sequence of @code{CATCH_EXPR} expressions.  Each @code{CATCH_EXPR}\n+has a list of applicable exception types and handler code.  If the\n+thrown exception matches one of the caught types, the associated\n+handler code is executed.  If the handler code falls off the bottom,\n+execution continues after the original @code{TRY_CATCH_EXPR}.\n+\n+@item An @code{EH_FILTER_EXPR} expression.  This has a list of\n+permitted exception types, and code to handle a match failure.  If the\n+thrown exception does not match one of the allowed types, the\n+associated match failure code is executed.  If the thrown exception\n+does match, it continues unwinding the stack looking for the next\n+handler.\n+\n @end enumerate\n \n Currently throwing an exception is not directly represented in GIMPLE,"}]}