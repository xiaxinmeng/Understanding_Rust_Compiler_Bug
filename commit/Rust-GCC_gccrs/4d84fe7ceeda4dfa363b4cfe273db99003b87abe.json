{"sha": "4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4NGZlN2NlZWRhNGRmYTM2M2I0Y2ZlMjczZGI5OTAwM2I4N2FiZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-08T14:11:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-08T14:11:46Z"}, "message": "re PR middle-end/39614 (Internal error compiling CSiBE)\n\n\tPR c/39614\n\tPR c/39673\n\t* c-common.h (C_MAYBE_CONST_EXPR_PRE, C_MAYBE_CONST_EXPR_EXPR,\n\tC_MAYBE_CONST_EXPR_INT_OPERANDS, C_MAYBE_CONST_EXPR_NON_CONST,\n\tEXPR_INT_CONST_OPERANDS): Remove duplicate definitions.\n\t* c-convert.c (convert): Do not call fold on results of conversion\n\tfunctions when the result is a C_MAYBE_CONST_EXPR.\n\t* c-parser.c (c_parser_postfix_expression): Do not fold condition\n\tof __builtin_choose_expr.\n\t* c-typeck.c (remove_c_maybe_const_expr): New.\n\t(build_unary_op, build_conditional_expr, build_compound_expr,\n\tbuild_binary_op, c_objc_common_truthvalue_conversion): Call\n\tremove_c_maybe_const_expr on any input C_MAYBE_CONST_EXPR with\n\tinteger operands.\n\ntestsuite:\n\t* gcc.c-torture/compile/pr39614-1.c,\n\tgcc.c-torture/compile/pr39614-2.c,\n\tgcc.c-torture/compile/pr39614-3.c,\n\tgcc.c-torture/compile/pr39614-4.c,\n\tgcc.c-torture/compile/pr39614-5.c,\n\tgcc.c-torture/compile/pr39673-1.c,\n\tgcc.c-torture/compile/pr39673-2.c: New tests.\n\t* gcc.dg/gnu89-const-expr-2.c, gcc.dg/gnu99-const-expr-2.c: Test\n\tmore cases.\n\t* gcc.dg/overflow-warn-1.c, gcc.dg/overflow-warn-2.c,\n\tgcc.dg/overflow-warn-3.c, gcc.dg/overflow-warn-4.c: Update\n\texpected errors.\n\nFrom-SVN: r145737", "tree": {"sha": "725240e973ffe286fcab43b5d65f6b5ee8e4b5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725240e973ffe286fcab43b5d65f6b5ee8e4b5c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db15b1d05e7c42b11a0a7cdff27266189187ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db15b1d05e7c42b11a0a7cdff27266189187ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db15b1d05e7c42b11a0a7cdff27266189187ea3"}], "stats": {"total": 248, "additions": 194, "deletions": 54}, "files": [{"sha": "c78d2129347f2cfd211b90ed4c23806bffa00034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -1,3 +1,20 @@\n+2009-04-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39614\n+\tPR c/39673\n+\t* c-common.h (C_MAYBE_CONST_EXPR_PRE, C_MAYBE_CONST_EXPR_EXPR,\n+\tC_MAYBE_CONST_EXPR_INT_OPERANDS, C_MAYBE_CONST_EXPR_NON_CONST,\n+\tEXPR_INT_CONST_OPERANDS): Remove duplicate definitions.\n+\t* c-convert.c (convert): Do not call fold on results of conversion\n+\tfunctions when the result is a C_MAYBE_CONST_EXPR.\n+\t* c-parser.c (c_parser_postfix_expression): Do not fold condition\n+\tof __builtin_choose_expr.\n+\t* c-typeck.c (remove_c_maybe_const_expr): New.\n+\t(build_unary_op, build_conditional_expr, build_compound_expr,\n+\tbuild_binary_op, c_objc_common_truthvalue_conversion): Call\n+\tremove_c_maybe_const_expr on any input C_MAYBE_CONST_EXPR with\n+\tinteger operands.\n+\n 2009-04-08 Bingfeng Mei <bmei@broadcom.com>\n \n \t* fold-const.c (const_binop): Combine two VECTOR_CST under operation "}, {"sha": "061cbe3ad0cafafd5a39bf1b0a983678aa8d48da", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -879,21 +879,6 @@ extern void finish_file\t(void);\n        || (TREE_CODE (EXPR) == C_MAYBE_CONST_EXPR\t\\\n \t   && C_MAYBE_CONST_EXPR_INT_OPERANDS (EXPR))))\n \n-/* C_MAYBE_CONST_EXPR accessors.  */\n-#define C_MAYBE_CONST_EXPR_PRE(NODE)\t\t\t\\\n-  TREE_OPERAND (C_MAYBE_CONST_EXPR_CHECK (NODE), 0)\n-#define C_MAYBE_CONST_EXPR_EXPR(NODE)\t\t\t\\\n-  TREE_OPERAND (C_MAYBE_CONST_EXPR_CHECK (NODE), 1)\n-#define C_MAYBE_CONST_EXPR_INT_OPERANDS(NODE)\t\t\\\n-  TREE_LANG_FLAG_0 (C_MAYBE_CONST_EXPR_CHECK (NODE))\n-#define C_MAYBE_CONST_EXPR_NON_CONST(NODE)\t\t\\\n-  TREE_LANG_FLAG_1 (C_MAYBE_CONST_EXPR_CHECK (NODE))\n-#define EXPR_INT_CONST_OPERANDS(EXPR)\t\t\t\\\n-  (INTEGRAL_TYPE_P (TREE_TYPE (EXPR))\t\t\t\\\n-   && (TREE_CODE (EXPR) == INTEGER_CST\t\t\t\\\n-       || (TREE_CODE (EXPR) == C_MAYBE_CONST_EXPR\t\\\n-\t   && C_MAYBE_CONST_EXPR_INT_OPERANDS (EXPR))))\n-\n /* In a FIELD_DECL, nonzero if the decl was originally a bitfield.  */\n #define DECL_C_BIT_FIELD(NODE) \\\n   (DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE)) == 1)"}, {"sha": "4fb680063ad52d5b753398c9ccc16029e64e11d6", "filename": "gcc/c-convert.c", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -70,6 +70,7 @@ convert (tree type, tree expr)\n   tree e = expr;\n   enum tree_code code = TREE_CODE (type);\n   const char *invalid_conv_diag;\n+  tree ret;\n \n   if (type == error_mark_node\n       || expr == error_mark_node\n@@ -97,26 +98,56 @@ convert (tree type, tree expr)\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n-  if (code == VOID_TYPE)\n-    return fold_convert (type, e);\n-  if (code == INTEGER_TYPE || code == ENUMERAL_TYPE)\n-    return fold (convert_to_integer (type, e));\n-  if (code == BOOLEAN_TYPE)\n-    return fold_convert \n-      (type, c_objc_common_truthvalue_conversion (input_location, expr));\n-  if (code == POINTER_TYPE || code == REFERENCE_TYPE)\n-    return fold (convert_to_pointer (type, e));\n-  if (code == REAL_TYPE)\n-    return fold (convert_to_real (type, e));\n-  if (code == FIXED_POINT_TYPE)\n-    return fold (convert_to_fixed (type, e));\n-  if (code == COMPLEX_TYPE)\n-    return fold (convert_to_complex (type, e));\n-  if (code == VECTOR_TYPE)\n-    return fold (convert_to_vector (type, e));\n-  if ((code == RECORD_TYPE || code == UNION_TYPE)\n-      && lang_hooks.types_compatible_p (type, TREE_TYPE (expr)))\n-      return e;\n+\n+  switch (code)\n+    {\n+    case VOID_TYPE:\n+      return fold_convert (type, e);\n+\n+    case INTEGER_TYPE:\n+    case ENUMERAL_TYPE:\n+      ret = convert_to_integer (type, e);\n+      goto maybe_fold;\n+\n+    case BOOLEAN_TYPE:\n+      return fold_convert \n+\t(type, c_objc_common_truthvalue_conversion (input_location, expr));\n+\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+      ret = convert_to_pointer (type, e);\n+      goto maybe_fold;\n+\n+    case REAL_TYPE:\n+      ret = convert_to_real (type, e);\n+      goto maybe_fold;\n+\n+    case FIXED_POINT_TYPE:\n+      ret = convert_to_fixed (type, e);\n+      goto maybe_fold;\n+\n+    case COMPLEX_TYPE:\n+      ret = convert_to_complex (type, e);\n+      goto maybe_fold;\n+\n+    case VECTOR_TYPE:\n+      ret = convert_to_vector (type, e);\n+      goto maybe_fold;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+      if (lang_hooks.types_compatible_p (type, TREE_TYPE (expr)))\n+\treturn e;\n+      break;\n+\n+    default:\n+      break;\n+\n+    maybe_fold:\n+      if (TREE_CODE (ret) != C_MAYBE_CONST_EXPR)\n+\tret = fold (ret);\n+      return ret;\n+    }\n \n   error (\"conversion to non-scalar type requested\");\n   return error_mark_node;"}, {"sha": "d0b0d77ba6258421c49d80640c42e07e70c2ae57", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -5403,7 +5403,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  {\n \t    tree c;\n \n-\t    c = fold (e1.value);\n+\t    c = e1.value;\n \t    if (TREE_CODE (c) != INTEGER_CST\n \t\t|| !INTEGRAL_TYPE_P (TREE_TYPE (c)))\n \t      error_at (loc,"}, {"sha": "b2bb74f6ac34b9876cef892b8a3f74365fe0c5d6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -151,6 +151,20 @@ note_integer_operands (tree expr)\n   return ret;\n }\n \n+/* Having checked whether EXPR may appear in an unevaluated part of an\n+   integer constant expression and found that it may, remove any\n+   C_MAYBE_CONST_EXPR noting this fact and return the resulting\n+   expression.  */\n+\n+static inline tree\n+remove_c_maybe_const_expr (tree expr)\n+{\n+  if (TREE_CODE (expr) == C_MAYBE_CONST_EXPR)\n+    return C_MAYBE_CONST_EXPR_EXPR (expr);\n+  else\n+    return expr;\n+}\n+\n \f/* This is a cache to hold if two types are compatible or not.  */\n \n struct tagged_tu_seen_cache {\n@@ -3013,6 +3027,8 @@ build_unary_op (location_t location,\n   bool int_operands;\n \n   int_operands = EXPR_INT_CONST_OPERANDS (xarg);\n+  if (int_operands)\n+    arg = remove_c_maybe_const_expr (arg);\n \n   if (code != ADDR_EXPR)\n     arg = require_complete_type (arg);\n@@ -3576,9 +3592,20 @@ build_conditional_expr (tree ifexp, bool ifexp_bcp, tree op1, tree op2)\n   tree ep_result_type = NULL;\n   tree orig_op1 = op1, orig_op2 = op2;\n   bool int_const, op1_int_operands, op2_int_operands, int_operands;\n+  bool ifexp_int_operands;\n   tree ret;\n   bool objc_ok;\n \n+  op1_int_operands = EXPR_INT_CONST_OPERANDS (orig_op1);\n+  if (op1_int_operands)\n+    op1 = remove_c_maybe_const_expr (op1);\n+  op2_int_operands = EXPR_INT_CONST_OPERANDS (orig_op2);\n+  if (op2_int_operands)\n+    op2 = remove_c_maybe_const_expr (op2);\n+  ifexp_int_operands = EXPR_INT_CONST_OPERANDS (ifexp);\n+  if (ifexp_int_operands)\n+    ifexp = remove_c_maybe_const_expr (ifexp);\n+\n   /* Promote both alternatives.  */\n \n   if (TREE_CODE (TREE_TYPE (op1)) != VOID_TYPE)\n@@ -3793,8 +3820,6 @@ build_conditional_expr (tree ifexp, bool ifexp_bcp, tree op1, tree op2)\n   if (result_type != TREE_TYPE (op2))\n     op2 = convert_and_check (result_type, op2);\n \n-  op1_int_operands = EXPR_INT_CONST_OPERANDS (orig_op1);\n-  op2_int_operands = EXPR_INT_CONST_OPERANDS (orig_op2);\n   if (ifexp_bcp && ifexp == truthvalue_true_node)\n     {\n       op2_int_operands = true;\n@@ -3805,7 +3830,7 @@ build_conditional_expr (tree ifexp, bool ifexp_bcp, tree op1, tree op2)\n       op1_int_operands = true;\n       op2 = c_fully_fold (op2, require_constant_value, NULL);\n     }\n-  int_const = int_operands = (EXPR_INT_CONST_OPERANDS (ifexp)\n+  int_const = int_operands = (ifexp_int_operands\n \t\t\t      && op1_int_operands\n \t\t\t      && op2_int_operands);\n   if (int_operands)\n@@ -3837,9 +3862,17 @@ build_conditional_expr (tree ifexp, bool ifexp_bcp, tree op1, tree op2)\n tree\n build_compound_expr (tree expr1, tree expr2)\n {\n+  bool expr1_int_operands, expr2_int_operands;\n   tree eptype = NULL_TREE;\n   tree ret;\n \n+  expr1_int_operands = EXPR_INT_CONST_OPERANDS (expr1);\n+  if (expr1_int_operands)\n+    expr1 = remove_c_maybe_const_expr (expr1);\n+  expr2_int_operands = EXPR_INT_CONST_OPERANDS (expr2);\n+  if (expr2_int_operands)\n+    expr2 = remove_c_maybe_const_expr (expr2);\n+\n   if (TREE_CODE (expr1) == EXCESS_PRECISION_EXPR)\n     expr1 = TREE_OPERAND (expr1, 0);\n   if (TREE_CODE (expr2) == EXCESS_PRECISION_EXPR)\n@@ -3881,8 +3914,8 @@ build_compound_expr (tree expr1, tree expr2)\n   ret = build2 (COMPOUND_EXPR, TREE_TYPE (expr2), expr1, expr2);\n \n   if (flag_isoc99\n-      && EXPR_INT_CONST_OPERANDS (expr1)\n-      && EXPR_INT_CONST_OPERANDS (expr2))\n+      && expr1_int_operands\n+      && expr2_int_operands)\n     ret = note_integer_operands (ret);\n \n   if (eptype)\n@@ -8440,6 +8473,7 @@ build_binary_op (location_t location, enum tree_code code,\n   tree op0, op1;\n   tree ret = error_mark_node;\n   const char *invalid_op_diag;\n+  bool op0_int_operands, op1_int_operands;\n   bool int_const, int_const_or_overflow, int_operands;\n \n   /* Expression code to give to the expression when it is built.\n@@ -8498,8 +8532,16 @@ build_binary_op (location_t location, enum tree_code code,\n   if (location == UNKNOWN_LOCATION)\n     location = input_location;\n \n-  int_operands = (EXPR_INT_CONST_OPERANDS (orig_op0)\n-\t\t  && EXPR_INT_CONST_OPERANDS (orig_op1));\n+  op0 = orig_op0;\n+  op1 = orig_op1;\n+\n+  op0_int_operands = EXPR_INT_CONST_OPERANDS (orig_op0);\n+  if (op0_int_operands)\n+    op0 = remove_c_maybe_const_expr (op0);\n+  op1_int_operands = EXPR_INT_CONST_OPERANDS (orig_op1);\n+  if (op1_int_operands)\n+    op1 = remove_c_maybe_const_expr (op1);\n+  int_operands = (op0_int_operands && op1_int_operands);\n   if (int_operands)\n     {\n       int_const_or_overflow = (TREE_CODE (orig_op0) == INTEGER_CST\n@@ -8513,13 +8555,8 @@ build_binary_op (location_t location, enum tree_code code,\n \n   if (convert_p)\n     {\n-      op0 = default_conversion (orig_op0);\n-      op1 = default_conversion (orig_op1);\n-    }\n-  else\n-    {\n-      op0 = orig_op0;\n-      op1 = orig_op1;\n+      op0 = default_conversion (op0);\n+      op1 = default_conversion (op1);\n     }\n \n   orig_type0 = type0 = TREE_TYPE (op0);\n@@ -9196,6 +9233,8 @@ c_objc_common_truthvalue_conversion (location_t location, tree expr)\n \n   int_const = (TREE_CODE (expr) == INTEGER_CST && !TREE_OVERFLOW (expr));\n   int_operands = EXPR_INT_CONST_OPERANDS (expr);\n+  if (int_operands)\n+    expr = remove_c_maybe_const_expr (expr);\n \n   /* ??? Should we also give an error for void and vectors rather than\n      leaving those to give errors later?  */"}, {"sha": "48269e9d7d930b8575a24ff55200d8766ba84045", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -1,3 +1,20 @@\n+2009-04-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39614\n+\tPR c/39673\n+\t* gcc.c-torture/compile/pr39614-1.c,\n+\tgcc.c-torture/compile/pr39614-2.c,\n+\tgcc.c-torture/compile/pr39614-3.c,\n+\tgcc.c-torture/compile/pr39614-4.c,\n+\tgcc.c-torture/compile/pr39614-5.c,\n+\tgcc.c-torture/compile/pr39673-1.c,\n+\tgcc.c-torture/compile/pr39673-2.c: New tests.\n+\t* gcc.dg/gnu89-const-expr-2.c, gcc.dg/gnu99-const-expr-2.c: Test\n+\tmore cases.\n+\t* gcc.dg/overflow-warn-1.c, gcc.dg/overflow-warn-2.c,\n+\tgcc.dg/overflow-warn-3.c, gcc.dg/overflow-warn-4.c: Update\n+\texpected errors.\n+\n 2009-04-08  Dodji Seketeli  <dodji@redhat.com>\n \n \tPRc++/39637"}, {"sha": "a9559c73ad3676ea337bc88833e9c4c8ad760516", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39614-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-1.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,7 @@\n+typedef struct page {\n+ unsigned long flags;\n+} mem_map_t;\n+static inline void set_page_zone(struct page *page, unsigned long zone_num)\n+{\n+ page->flags &= ~(~0UL << (64 - 8));\n+}"}, {"sha": "e3cefb7a9557ed899295a2100d7db1ba7fd12923", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39614-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-2.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,6 @@\n+int i;\n+void\n+f (void)\n+{\n+  i = (1 / 0) / 0;\n+}"}, {"sha": "f9fa3b9d4e9393b4e3ef7cdbc9115c902f1ed3f5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39614-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-3.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,6 @@\n+int i;\n+void\n+f (void)\n+{\n+  i = (1 ? 1 / 0 : 1 / 0);\n+}"}, {"sha": "2426ee28fc8070bc5309110de8204427aa5c0a45", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39614-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-4.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,6 @@\n+int i;\n+void\n+f (void)\n+{\n+  i = (1 / 0 ? 1 : 0);\n+}"}, {"sha": "0cae4de9479f5c86038d276794d68c676b814312", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39614-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39614-5.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -std=c99\" } */\n+int i;\n+void\n+f (void)\n+{\n+  i = (1 / 0, 1 / 0);\n+}"}, {"sha": "d2e0387768b1e1046c700abab88c4892516f921e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39673-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-1.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,6 @@\n+unsigned long f1();\n+int f2();\n+\n+int store_aff_word(int x) {\n+  return (int) (x ? f1() : f2());\n+}"}, {"sha": "68407a4375392ba905653447f3f01db63b768df8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39673-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39673-2.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -0,0 +1,6 @@\n+unsigned long long f1();\n+int f2();\n+\n+int store_aff_word(int x) {\n+  return (int) (x ? f1() : f2());\n+}"}, {"sha": "fd4d18ed908f1cbc13e4ecb92b8977718e81039d", "filename": "gcc/testsuite/gcc.dg/gnu89-const-expr-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-2.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -20,4 +20,7 @@ f (void)\n   a = __builtin_choose_expr ((void *)0, b, c); /* { dg-error \"constant\" } */\n   a = __builtin_choose_expr (0 * (INT_MAX + 1), b, c); /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  a = __builtin_choose_expr (1 / 0, 0, 0); /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"not a constant\" \"error\" { target *-*-* } 23 } */\n+  a = __builtin_choose_expr ((1 ? 1 : a), b, c); /* { dg-error \"constant\" } */\n }"}, {"sha": "f9acef81a949063c9935ce3d880afb18658cf2dd", "filename": "gcc/testsuite/gcc.dg/gnu99-const-expr-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-2.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -20,4 +20,7 @@ f (void)\n   a = __builtin_choose_expr ((void *)0, b, c); /* { dg-error \"constant\" } */\n   a = __builtin_choose_expr (0 * (INT_MAX + 1), b, c); /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 21 } */\n+  a = __builtin_choose_expr (1 / 0, 0, 0); /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"not a constant\" \"error\" { target *-*-* } 23 } */\n+  a = __builtin_choose_expr ((1 ? 1 : a), b, c); /* { dg-error \"constant\" } */\n }"}, {"sha": "0cf08a3e77f12b5c24ad9987e25120da074519d5", "filename": "gcc/testsuite/gcc.dg/overflow-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -49,7 +49,7 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 49 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } 51 } */\n+/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } 51 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 51 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "f6595d508c29e68d8a89b6a2075a9043a14d557d", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -49,7 +49,7 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 49 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } 51 } */\n+/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } 51 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 51 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "fae26d4101d145c5631a8ea78c62b4f0316e8690", "filename": "gcc/testsuite/gcc.dg/overflow-warn-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -55,7 +55,7 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } 54 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 54 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } 57 } */\n+/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } 57 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 57 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "464533a365d9084cac4bbcb57e9c81ba808f8d61", "filename": "gcc/testsuite/gcc.dg/overflow-warn-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d84fe7ceeda4dfa363b4cfe273db99003b87abe/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c?ref=4d84fe7ceeda4dfa363b4cfe273db99003b87abe", "patch": "@@ -55,7 +55,7 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } 54 } */\n /* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 54 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } 57 } */\n+/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } 57 } */\n /* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } 57 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}]}