{"sha": "5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "node_id": "C_kwDOANBUbNoAKDVhYjczMTczY2NhNDYxMGU1OWRmOGEzZmU5Y2I1YjMwZGVkNzVhZWM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-02T19:38:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-02T19:38:38Z"}, "message": "Add -fdiagnostics-format={json-stderr|json-file}\n\nThis commit adds -fdiagnostics-format=json-file, writing to\nDUMP_BASE_NAME.gcc.json, and adds -fdiagnostics-format=json-stderr,\na synonym for the existing -fdiagnostics-format=json.\n\ngcc/ChangeLog:\n\t* common.opt (fdiagnostics-format=): Add json-stderr and json-file\n\tto description.\n\t(DIAGNOSTICS_OUTPUT_FORMAT_JSON): Rename to...\n\t(DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR): ...this.\n\t(diagnostics_output_format): Add json-stderr and json-file.\n\t* diagnostic-format-json.cc (json_flush_to_file): New.\n\t(json_final_cb): Convert to...\n\t(json_flush_to_file): ...this, ...\n\t(json_stderr_final_cb): ...this, and...\n\t(json_file_final_cb): ...this.\n\t(diagnostic_output_format_init): Move to diagnostic.cc.\n\t(json_output_base_file_name): New.\n\t(diagnostic_output_format_init_json): New.\n\t(diagnostic_output_format_init_json_stderr): New.\n\t(diagnostic_output_format_init_json_file): New.\n\t* diagnostic.cc (diagnostic_output_format_init): Move here from\n\tdiagnostic-format-json.cc; update for changes to enum.\n\t* diagnostic.h (enum diagnostics_output_format): Rename\n\tDIAGNOSTICS_OUTPUT_FORMAT_JSON to\n\tDIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR, and add\n\tDIAGNOSTICS_OUTPUT_FORMAT_JSON_FILE.\n\t(diagnostic_output_format_init): Add base_file_name param.\n\t(diagnostic_output_format_init_json_stderr): New decl.\n\t(diagnostic_output_format_init_json_file): New dec.\n\t* doc/invoke.texi (-fdiagnostics-format=): Add \"json-stderr\" and\n\t\"json-file\".  Rewrite so that the existing \"json\" is a synonym of\n\t\"json-stderr\".\n\t* gcc.cc (driver_handle_option): Pass dump_base_name to\n\tdiagnostic_output_format_init.\n\t* opts.cc (common_handle_option): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/diagnostic-format-json-file-1.c: New test.\n\t* c-c++-common/diagnostic-format-json-stderr-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "4a87b670311228c8d5c16ad9af7d0c70fcd10061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a87b670311228c8d5c16ad9af7d0c70fcd10061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9ad0b4b0a8c780b85a06096b9926ca85d7a9a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9ad0b4b0a8c780b85a06096b9926ca85d7a9a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9ad0b4b0a8c780b85a06096b9926ca85d7a9a6"}], "stats": {"total": 225, "additions": 173, "deletions": 52}, "files": [{"sha": "3237ce9b5300b826b9f2daf299cb08cf5bb15d30", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -1390,7 +1390,7 @@ Common Joined RejectNegative UInteger\n \n fdiagnostics-format=\n Common Joined RejectNegative Enum(diagnostics_output_format)\n--fdiagnostics-format=[text|json]\tSelect output format.\n+-fdiagnostics-format=[text|json|json-stderr|json-file]\tSelect output format.\n \n fdiagnostics-escape-format=\n Common Joined RejectNegative Enum(diagnostics_escape_format)\n@@ -1425,7 +1425,13 @@ EnumValue\n Enum(diagnostics_output_format) String(text) Value(DIAGNOSTICS_OUTPUT_FORMAT_TEXT)\n \n EnumValue\n-Enum(diagnostics_output_format) String(json) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON)\n+Enum(diagnostics_output_format) String(json) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR)\n+\n+EnumValue\n+Enum(diagnostics_output_format) String(json-stderr) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR)\n+\n+EnumValue\n+Enum(diagnostics_output_format) String(json-file) Value(DIAGNOSTICS_OUTPUT_FORMAT_JSON_FILE)\n \n fdiagnostics-parseable-fixits\n Common Var(flag_diagnostics_parseable_fixits)"}, {"sha": "051fa6c2e487b482421017db442447b894bf5fe6", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 76, "deletions": 40, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -285,57 +285,93 @@ json_end_group (diagnostic_context *)\n   cur_children_array = NULL;\n }\n \n-/* Callback for final cleanup for JSON output.  */\n+/* Flush the top-level array to OUTF.  */\n \n static void\n-json_final_cb (diagnostic_context *)\n+json_flush_to_file (FILE *outf)\n {\n-  /* Flush the top-level array.  */\n-  toplevel_array->dump (stderr);\n-  fprintf (stderr, \"\\n\");\n+  toplevel_array->dump (outf);\n+  fprintf (outf, \"\\n\");\n   delete toplevel_array;\n   toplevel_array = NULL;\n }\n \n-/* Set the output format for CONTEXT to FORMAT.  */\n+/* Callback for final cleanup for JSON output to stderr.  */\n \n-void\n-diagnostic_output_format_init (diagnostic_context *context,\n-\t\t\t       enum diagnostics_output_format format)\n+static void\n+json_stderr_final_cb (diagnostic_context *)\n+{\n+  json_flush_to_file (stderr);\n+}\n+\n+static char *json_output_base_file_name;\n+\n+/* Callback for final cleanup for JSON output to a file.  */\n+\n+static void\n+json_file_final_cb (diagnostic_context *)\n {\n-  switch (format)\n+  char *filename = concat (json_output_base_file_name, \".gcc.json\", NULL);\n+  FILE *outf = fopen (filename, \"w\");\n+  if (!outf)\n     {\n-    default:\n-      gcc_unreachable ();\n-    case DIAGNOSTICS_OUTPUT_FORMAT_TEXT:\n-      /* The default; do nothing.  */\n-      break;\n-\n-    case DIAGNOSTICS_OUTPUT_FORMAT_JSON:\n-      {\n-\t/* Set up top-level JSON array.  */\n-\tif (toplevel_array == NULL)\n-\t  toplevel_array = new json::array ();\n-\n-\t/* Override callbacks.  */\n-\tcontext->begin_diagnostic = json_begin_diagnostic;\n-\tcontext->end_diagnostic = json_end_diagnostic;\n-\tcontext->begin_group_cb = json_begin_group;\n-\tcontext->end_group_cb =  json_end_group;\n-\tcontext->final_cb =  json_final_cb;\n-\tcontext->print_path = NULL; /* handled in json_end_diagnostic.  */\n-\n-\t/* The metadata is handled in JSON format, rather than as text.  */\n-\tcontext->show_cwe = false;\n-\n-\t/* The option is handled in JSON format, rather than as text.  */\n-\tcontext->show_option_requested = false;\n-\n-\t/* Don't colorize the text.  */\n-\tpp_show_color (context->printer) = false;\n-      }\n-      break;\n+      const char *errstr = xstrerror (errno);\n+      fnotice (stderr, \"error: unable to open '%s' for writing: %s\\n\",\n+\t       filename, errstr);\n+      free (filename);\n+      return;\n     }\n+  json_flush_to_file (outf);\n+  fclose (outf);\n+  free (filename);\n+}\n+\n+/* Populate CONTEXT in preparation for JSON output (either to stderr, or\n+   to a file).  */\n+\n+static void\n+diagnostic_output_format_init_json (diagnostic_context *context)\n+{\n+  /* Set up top-level JSON array.  */\n+  if (toplevel_array == NULL)\n+    toplevel_array = new json::array ();\n+\n+  /* Override callbacks.  */\n+  context->begin_diagnostic = json_begin_diagnostic;\n+  context->end_diagnostic = json_end_diagnostic;\n+  context->begin_group_cb = json_begin_group;\n+  context->end_group_cb =  json_end_group;\n+  context->print_path = NULL; /* handled in json_end_diagnostic.  */\n+\n+  /* The metadata is handled in JSON format, rather than as text.  */\n+  context->show_cwe = false;\n+\n+  /* The option is handled in JSON format, rather than as text.  */\n+  context->show_option_requested = false;\n+\n+  /* Don't colorize the text.  */\n+  pp_show_color (context->printer) = false;\n+}\n+\n+/* Populate CONTEXT in preparation for JSON output to stderr.  */\n+\n+void\n+diagnostic_output_format_init_json_stderr (diagnostic_context *context)\n+{\n+  diagnostic_output_format_init_json (context);\n+  context->final_cb = json_stderr_final_cb;\n+}\n+\n+/* Populate CONTEXT in preparation for JSON output to a file named\n+   BASE_FILE_NAME.gcc.json.  */\n+\n+void\n+diagnostic_output_format_init_json_file (diagnostic_context *context,\n+\t\t\t\t\t const char *base_file_name)\n+{\n+  diagnostic_output_format_init_json (context);\n+  context->final_cb = json_file_final_cb;\n+  json_output_base_file_name = xstrdup (base_file_name);\n }\n \n #if CHECKING_P"}, {"sha": "25504834484ff4f11656e7c4f9e196db67290999", "filename": "gcc/diagnostic.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.cc?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -2072,6 +2072,32 @@ auto_diagnostic_group::~auto_diagnostic_group ()\n     }\n }\n \n+/* Set the output format for CONTEXT to FORMAT, using BASE_FILE_NAME for\n+   file-based output formats.  */\n+\n+void\n+diagnostic_output_format_init (diagnostic_context *context,\n+\t\t\t       const char *base_file_name,\n+\t\t\t       enum diagnostics_output_format format)\n+{\n+  switch (format)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case DIAGNOSTICS_OUTPUT_FORMAT_TEXT:\n+      /* The default; do nothing.  */\n+      break;\n+\n+    case DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR:\n+      diagnostic_output_format_init_json_stderr (context);\n+      break;\n+\n+    case DIAGNOSTICS_OUTPUT_FORMAT_JSON_FILE:\n+      diagnostic_output_format_init_json_file (context, base_file_name);\n+      break;\n+    }\n+}\n+\n /* Implementation of diagnostic_path::num_events vfunc for\n    simple_diagnostic_path: simply get the number of events in the vec.  */\n "}, {"sha": "dd3af033ae4ac558430009d37f660e1becefb14d", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -59,8 +59,11 @@ enum diagnostics_output_format\n   /* The default: textual output.  */\n   DIAGNOSTICS_OUTPUT_FORMAT_TEXT,\n \n-  /* JSON-based output.  */\n-  DIAGNOSTICS_OUTPUT_FORMAT_JSON\n+  /* JSON-based output, to stderr.  */\n+  DIAGNOSTICS_OUTPUT_FORMAT_JSON_STDERR,\n+\n+  /* JSON-based output, to a file.  */\n+  DIAGNOSTICS_OUTPUT_FORMAT_JSON_FILE\n };\n \n /* An enum for controlling how diagnostic_paths should be printed.  */\n@@ -577,7 +580,11 @@ extern char *file_name_as_prefix (diagnostic_context *, const char *);\n extern char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n \n extern void diagnostic_output_format_init (diagnostic_context *,\n+\t\t\t\t\t   const char *base_file_name,\n \t\t\t\t\t   enum diagnostics_output_format);\n+extern void diagnostic_output_format_init_json_stderr (diagnostic_context *context);\n+extern void diagnostic_output_format_init_json_file (diagnostic_context *context,\n+\t\t\t\t\t\t     const char *base_file_name);\n \n /* Compute the number of digits in the decimal representation of an integer.  */\n extern int num_digits (int);"}, {"sha": "d85b66f60f03d81e7338c30cafa8a405f57fef5d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -301,7 +301,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fdiagnostics-urls=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n--fdiagnostics-format=@r{[}text@r{|}json@r{]}  @gol\n+-fdiagnostics-format=@r{[}text@r{|}json@r{|}json-stderr@r{|}json-file@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n -fno-diagnostics-show-labels  -fno-diagnostics-show-line-numbers @gol\n -fno-diagnostics-show-cwe  @gol\n@@ -5305,14 +5305,19 @@ Unicode characters.  For the example above, the following will be printed:\n @item -fdiagnostics-format=@var{FORMAT}\n @opindex fdiagnostics-format\n Select a different format for printing diagnostics.\n-@var{FORMAT} is @samp{text} or @samp{json}.\n+@var{FORMAT} is @samp{text}, @samp{json}, @samp{json-stderr},\n+or @samp{json-file}.\n+\n The default is @samp{text}.\n \n-The @samp{json} format consists of a top-level JSON array containing JSON\n-objects representing the diagnostics.\n+The @samp{json} format is a synonym for @samp{json-stderr}.\n+The @samp{json-stderr} and @samp{json-file} formats are identical, apart from\n+where the JSON is emitted to - with the former, the JSON is emitted to stderr,\n+whereas with @samp{json-file} it is written to @file{@var{source}.gcc.json}.\n \n-The JSON is emitted as one line, without formatting; the examples below\n-have been formatted for clarity.\n+The emitted JSON consists of a top-level JSON array containing JSON objects\n+representing the diagnostics.  The JSON is emitted as one line, without\n+formatting; the examples below have been formatted for clarity.\n \n Diagnostics can have child diagnostics.  For example, this error and note:\n "}, {"sha": "563f535d5640436c26404e1352b7ff841f27e677", "filename": "gcc/gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -4335,7 +4335,7 @@ driver_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdiagnostics_format_:\n-      diagnostic_output_format_init (dc,\n+      diagnostic_output_format_init (dc, opts->x_dump_base_name,\n \t\t\t\t     (enum diagnostics_output_format)value);\n       break;\n "}, {"sha": "bf06a55456ac5499f3066823a9cb3f84374346bc", "filename": "gcc/opts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -2800,7 +2800,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdiagnostics_format_:\n-      diagnostic_output_format_init (dc,\n+      diagnostic_output_format_init (dc, opts->x_dump_base_name,\n \t\t\t\t     (enum diagnostics_output_format)value);\n       break;\n "}, {"sha": "ddac780f07b1ee1114cff0fcee66fa4dcc099848", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-file-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-file-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-file-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-file-1.c?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -0,0 +1,8 @@\n+/* Check that -fdiagnostics-format=json-file works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json-file\" } */\n+\n+#warning message\n+\n+/* Verify that some JSON was written to a file with the expected name.  */\n+/* { dg-final { scan-file \"diagnostic-format-json-file-1.c.gcc.json\" \"\\\"message\\\": \\\"#warning message\\\"\" } } */"}, {"sha": "02f780bce103c8f928019cf8a4e0c7a56e0ec2a3", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-stderr-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab73173cca4610e59df8a3fe9cb5b30ded75aec/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c?ref=5ab73173cca4610e59df8a3fe9cb5b30ded75aec", "patch": "@@ -0,0 +1,33 @@\n+/* Check that \"json\" and \"json-stderr\" are synonymous when used as\n+   arguments to \"-fdiagnostics-format=\".  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-format=json-stderr\" } */\n+\n+#error message\n+\n+/* Use dg-regexp to consume the JSON output starting with\n+   the innermost values, and working outwards.\n+   We can't rely on any ordering of the keys.  */\n+\n+/* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n+/* { dg-regexp \"\\\"column-origin\\\": 1\" } */\n+/* { dg-regexp \"\\\"escape-source\\\": false\" } */\n+/* { dg-regexp \"\\\"message\\\": \\\"#error message\\\"\" } */\n+\n+/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-stderr-1.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 6\" } */\n+/* { dg-regexp \"\\\"column\\\": 2\" } */\n+/* { dg-regexp \"\\\"display-column\\\": 2\" } */\n+/* { dg-regexp \"\\\"byte-column\\\": 2\" } */\n+\n+/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n+/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-stderr-1.c\\\"\" } */\n+/* { dg-regexp \"\\\"line\\\": 6\" } */\n+/* { dg-regexp \"\\\"column\\\": 6\" } */\n+/* { dg-regexp \"\\\"display-column\\\": 6\" } */\n+/* { dg-regexp \"\\\"byte-column\\\": 6\" } */\n+\n+/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n+/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n+/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */"}]}