{"sha": "b84702c0572614a71e720e9f822d1c31c7cea5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0NzAyYzA1NzI2MTRhNzFlNzIwZTlmODIyZDFjMzFjN2NlYTViNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-13T19:31:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-13T19:31:14Z"}, "message": "re PR c++/79232 (error: invalid rhs for gimple memory store)\n\n\tPR c++/79232\n\t* typeck.c (cp_build_modify_expr): Handle properly COMPOUND_EXPRs\n\ton lhs that have {PRE{DEC,INC}REMENT,MODIFY,MIN,MAX,COND}_EXPR\n\tin the rightmost operand.\n\n\t* g++.dg/cpp1z/eval-order4.C: New test.\n\t* g++.dg/other/pr79232.C: New test.\n\nFrom-SVN: r245401", "tree": {"sha": "df43d3655d26975e5a4f7618be2d1f4f19b47b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df43d3655d26975e5a4f7618be2d1f4f19b47b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b84702c0572614a71e720e9f822d1c31c7cea5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84702c0572614a71e720e9f822d1c31c7cea5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84702c0572614a71e720e9f822d1c31c7cea5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84702c0572614a71e720e9f822d1c31c7cea5b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1cb14c91a56a5ee7aad50e67361bcbec7441ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cb14c91a56a5ee7aad50e67361bcbec7441ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cb14c91a56a5ee7aad50e67361bcbec7441ca0"}], "stats": {"total": 186, "additions": 171, "deletions": 15}, "files": [{"sha": "3fffb5b04b6ff60ab5612f4753af5873bb480162", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b84702c0572614a71e720e9f822d1c31c7cea5b7", "patch": "@@ -1,3 +1,10 @@\n+2017-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79232\n+\t* typeck.c (cp_build_modify_expr): Handle properly COMPOUND_EXPRs\n+\ton lhs that have {PRE{DEC,INC}REMENT,MODIFY,MIN,MAX,COND}_EXPR\n+\tin the rightmost operand.\n+\n 2017-02-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79296 - ICE mangling localized template instantiation"}, {"sha": "87e7cc0b02996b7e2bc15f5d6f598600f14301ae", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 66, "deletions": 15, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b84702c0572614a71e720e9f822d1c31c7cea5b7", "patch": "@@ -7571,37 +7571,68 @@ tree\n cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t\t      tree rhs, tsubst_flags_t complain)\n {\n-  tree result;\n+  tree result = NULL_TREE;\n   tree newrhs = rhs;\n   tree lhstype = TREE_TYPE (lhs);\n+  tree olhs = lhs;\n   tree olhstype = lhstype;\n   bool plain_assign = (modifycode == NOP_EXPR);\n+  bool compound_side_effects_p = false;\n+  tree preeval = NULL_TREE;\n \n   /* Avoid duplicate error messages from operands that had errors.  */\n   if (error_operand_p (lhs) || error_operand_p (rhs))\n     return error_mark_node;\n \n+  while (TREE_CODE (lhs) == COMPOUND_EXPR)\n+    {\n+      if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n+\tcompound_side_effects_p = true;\n+      lhs = TREE_OPERAND (lhs, 1);\n+    }\n+\n   /* Handle control structure constructs used as \"lvalues\".  Note that we\n      leave COMPOUND_EXPR on the LHS because it is sequenced after the RHS.  */\n   switch (TREE_CODE (lhs))\n     {\n       /* Handle --foo = 5; as these are valid constructs in C++.  */\n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n+      if (compound_side_effects_p)\n+\tnewrhs = rhs = stabilize_expr (rhs, &preeval);\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n \t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n+    maybe_add_compound:\n+      /* If we had (bar, --foo) = 5; or (bar, (baz, --foo)) = 5;\n+\t and looked through the COMPOUND_EXPRs, readd them now around\n+\t the resulting lhs.  */\n+      if (TREE_CODE (olhs) == COMPOUND_EXPR)\n+\t{\n+\t  lhs = build2 (COMPOUND_EXPR, lhstype, TREE_OPERAND (olhs, 0), lhs);\n+\t  tree *ptr = &TREE_OPERAND (lhs, 1);\n+\t  for (olhs = TREE_OPERAND (olhs, 1);\n+\t       TREE_CODE (olhs) == COMPOUND_EXPR;\n+\t       olhs = TREE_OPERAND (olhs, 1))\n+\t    {\n+\t      *ptr = build2 (COMPOUND_EXPR, lhstype,\n+\t\t\t     TREE_OPERAND (olhs, 0), *ptr);\n+\t      ptr = &TREE_OPERAND (*ptr, 1);\n+\t    }\n+\t}\n       break;\n \n     case MODIFY_EXPR:\n+      if (compound_side_effects_p)\n+\tnewrhs = rhs = stabilize_expr (rhs, &preeval);\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (lhs, 0)))\n \tlhs = build2 (TREE_CODE (lhs), TREE_TYPE (lhs),\n \t\t      cp_stabilize_reference (TREE_OPERAND (lhs, 0)),\n \t\t      TREE_OPERAND (lhs, 1));\n       lhs = build2 (COMPOUND_EXPR, lhstype, lhs, TREE_OPERAND (lhs, 0));\n-      break;\n+      goto maybe_add_compound;\n \n     case MIN_EXPR:\n     case MAX_EXPR:\n@@ -7629,7 +7660,6 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t   except that the RHS goes through a save-expr\n \t   so the code to compute it is only emitted once.  */\n \ttree cond;\n-\ttree preeval = NULL_TREE;\n \n \tif (VOID_TYPE_P (TREE_TYPE (rhs)))\n \t  {\n@@ -7655,14 +7685,31 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \n \tif (cond == error_mark_node)\n \t  return cond;\n+\t/* If we had (e, (a ? b : c)) = d; or (e, (f, (a ? b : c))) = d;\n+\t   and looked through the COMPOUND_EXPRs, readd them now around\n+\t   the resulting cond before adding the preevaluated rhs.  */\n+\tif (TREE_CODE (olhs) == COMPOUND_EXPR)\n+\t  {\n+\t    cond = build2 (COMPOUND_EXPR, TREE_TYPE (cond),\n+\t\t\t   TREE_OPERAND (olhs, 0), cond);\n+\t    tree *ptr = &TREE_OPERAND (cond, 1);\n+\t    for (olhs = TREE_OPERAND (olhs, 1);\n+\t\t TREE_CODE (olhs) == COMPOUND_EXPR;\n+\t\t olhs = TREE_OPERAND (olhs, 1))\n+\t      {\n+\t\t*ptr = build2 (COMPOUND_EXPR, TREE_TYPE (cond),\n+\t\t\t       TREE_OPERAND (olhs, 0), *ptr);\n+\t\tptr = &TREE_OPERAND (*ptr, 1);\n+\t      }\n+\t  }\n \t/* Make sure the code to compute the rhs comes out\n \t   before the split.  */\n-\tif (preeval)\n-\t  cond = build2 (COMPOUND_EXPR, TREE_TYPE (lhs), preeval, cond);\n-\treturn cond;\n+\tresult = cond;\n+\tgoto ret;\n       }\n \n     default:\n+      lhs = olhs;\n       break;\n     }\n \n@@ -7678,7 +7725,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t    rhs = convert (lhstype, rhs);\n \t  result = build2 (INIT_EXPR, lhstype, lhs, rhs);\n \t  TREE_SIDE_EFFECTS (result) = 1;\n-\t  return result;\n+\t  goto ret;\n \t}\n       else if (! MAYBE_CLASS_TYPE_P (lhstype))\n \t/* Do the default thing.  */;\n@@ -7691,7 +7738,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t  release_tree_vector (rhs_vec);\n \t  if (result == NULL_TREE)\n \t    return error_mark_node;\n-\t  return result;\n+\t  goto ret;\n \t}\n     }\n   else\n@@ -7706,7 +7753,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t    {\n \t      result = objc_maybe_build_modify_expr (lhs, rhs);\n \t      if (result)\n-\t\treturn result;\n+\t\tgoto ret;\n \t    }\n \n \t  /* `operator=' is not an inheritable operator.  */\n@@ -7720,7 +7767,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t\t\t\t     complain);\n \t      if (result == NULL_TREE)\n \t\treturn error_mark_node;\n-\t      return result;\n+\t      goto ret;\n \t    }\n \t  lhstype = olhstype;\n \t}\n@@ -7765,7 +7812,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t    {\n \t      result = objc_maybe_build_modify_expr (lhs, newrhs);\n \t      if (result)\n-\t\treturn result;\n+\t\tgoto ret;\n \t    }\n \t}\n       gcc_assert (TREE_CODE (lhstype) != REFERENCE_TYPE);\n@@ -7861,9 +7908,10 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \n       from_array = TREE_CODE (TREE_TYPE (newrhs)) == ARRAY_TYPE\n \t\t   ? 1 + (modifycode != INIT_EXPR): 0;\n-      return build_vec_init (lhs, NULL_TREE, newrhs,\n-\t\t\t     /*explicit_value_init_p=*/false,\n-\t\t\t     from_array, complain);\n+      result = build_vec_init (lhs, NULL_TREE, newrhs,\n+\t\t\t       /*explicit_value_init_p=*/false,\n+\t\t\t       from_array, complain);\n+      goto ret;\n     }\n \n   if (modifycode == INIT_EXPR)\n@@ -7902,7 +7950,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n       result = objc_generate_write_barrier (lhs, modifycode, newrhs);\n \n       if (result)\n-\treturn result;\n+\tgoto ret;\n     }\n \n   result = build2 (modifycode == NOP_EXPR ? MODIFY_EXPR : INIT_EXPR,\n@@ -7912,6 +7960,9 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n   if (!plain_assign)\n     TREE_NO_WARNING (result) = 1;\n \n+ ret:\n+  if (preeval)\n+    result = build2 (COMPOUND_EXPR, TREE_TYPE (result), preeval, result);\n   return result;\n }\n "}, {"sha": "281aca05594dcb05cb313064f34e2f4cd3f766e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b84702c0572614a71e720e9f822d1c31c7cea5b7", "patch": "@@ -1,3 +1,9 @@\n+2017-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/79232\n+\t* g++.dg/cpp1z/eval-order4.C: New test.\n+\t* g++.dg/other/pr79232.C: New test.\n+\n 2017-02-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79296"}, {"sha": "04da8ccc478ec6cc44eeea11f793970a60675746", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order4.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order4.C?ref=b84702c0572614a71e720e9f822d1c31c7cea5b7", "patch": "@@ -0,0 +1,80 @@\n+// PR c++/79232\n+// { dg-do run }\n+// { dg-options \"-fstrong-eval-order\" }\n+\n+int last = 0;\n+\n+int\n+foo (int i)\n+{\n+  if (i != last + 1)\n+    __builtin_abort ();\n+  last = i;\n+  return i;\n+}\n+\n+char a, b;\n+int c;\n+\n+char &\n+bar (int i, int j)\n+{\n+  foo (i);\n+  return j ? a : b;\n+}\n+\n+int\n+main ()\n+{\n+  (foo (2) ? bar (3, 0) : bar (3, 1)) = foo (1);\n+  if (last != 3)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), foo (3) ? bar (4, 0) : bar (4, 1)) = foo (1);\n+  if (last != 4)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), (foo (3) ? bar (4, 0) : bar (4, 1))) = foo (1);\n+  if (last != 4)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), foo (3), foo (4) ? bar (5, 0) : bar (5, 1)) = foo (1);\n+  if (last != 5)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), (foo (3), (foo (4) ? bar (5, 0) : bar (5, 1)))) = foo (1);\n+  if (last != 5)\n+    __builtin_abort ();\n+  last = 0;\n+  --c = foo (1);\n+  if (c != 1)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), --c) = foo (1);\n+  if (last != 2 || c != 1)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), foo (3), --c) = foo (1);\n+  if (last != 3 || c != 1)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), (foo (3), --c)) = foo (1);\n+  if (last != 3 || c != 1)\n+    __builtin_abort ();\n+  last = 0;\n+  bar (2, 0) = foo (1);\n+  if (last != 2)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), bar (3, 0)) = foo (1);\n+  if (last != 3)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), foo (3), bar (4, 0)) = foo (1);\n+  if (last != 4)\n+    __builtin_abort ();\n+  last = 0;\n+  (foo (2), (foo (3), bar (4, 0))) = foo (1);\n+  if (last != 4)\n+    __builtin_abort ();\n+}"}, {"sha": "1b5d18d9491fa730cd55048adcbd7a162c6394dd", "filename": "gcc/testsuite/g++.dg/other/pr79232.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr79232.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84702c0572614a71e720e9f822d1c31c7cea5b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr79232.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr79232.C?ref=b84702c0572614a71e720e9f822d1c31c7cea5b7", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/79232\n+// { dg-do compile }\n+\n+extern char a[];\n+int b;\n+char c, e;\n+\n+void\n+foo (long d)\n+{\n+  (0, b ? &c : a)[d] = e;\n+}"}]}