{"sha": "3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjYTYzYjBiNmZhZjZhMzBlZDczNWI4NmI4ZWI1OTk0NDcwMWZjMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-11T11:48:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-11T11:48:52Z"}, "message": "testsuite: Fix c-c++-common/auto-init-* tests\n\n> > 2021-08-20  qing zhao  <qing.zhao@oracle.com>\n> >\n> >        * c-c++-common/auto-init-1.c: New test.\n> >        * c-c++-common/auto-init-10.c: New test.\n> >        * c-c++-common/auto-init-11.c: New test.\n> >        * c-c++-common/auto-init-12.c: New test.\n> >        * c-c++-common/auto-init-13.c: New test.\n> >        * c-c++-common/auto-init-14.c: New test.\n> >        * c-c++-common/auto-init-15.c: New test.\n> >        * c-c++-common/auto-init-16.c: New test.\n> >        * c-c++-common/auto-init-2.c: New test.\n> >        * c-c++-common/auto-init-3.c: New test.\n> >        * c-c++-common/auto-init-4.c: New test.\n> >        * c-c++-common/auto-init-5.c: New test.\n> >        * c-c++-common/auto-init-6.c: New test.\n> >        * c-c++-common/auto-init-7.c: New test.\n> >        * c-c++-common/auto-init-8.c: New test.\n> >        * c-c++-common/auto-init-9.c: New test.\n> >        * c-c++-common/auto-init-esra.c: New test.\n> >        * c-c++-common/auto-init-padding-1.c: New test.\n> >        * c-c++-common/auto-init-padding-2.c: New test.\n> >        * c-c++-common/auto-init-padding-3.c: New test.\n\nThis fails on many targets, e.g. i686-linux or x86_64-linux with -m32.\n\nThe main problem is hardcoding type sizes and structure layout expectations\nthat are valid only on some lp64 targets.\nOn ilp32 long and pointer are 32-bit, and there are targets that are neither\nilp32 nor lp64 and there even other sizes can't be taken for granted.\nAlso, long double depending on target and options is either 8, 12 or 16 byte\n(the first one when it is the same as double, the second e.g. for ia32\nextended long double (which is under the hood 10 byte), the last either\nthe same hw type on x86_64 or IBM double double or IEEE quad).\nIn the last test, one problem is that unsigned long is on ilp32 32-bit\ninstead of 64-bit, but even just changing to long long is not enough,\nas long long in structures on ia32 is only 4 byte aligned instead of 8.\n\nTested on x86_64-linux -m32/-m64, ok for trunk?\n\nNote, the gcc.dg/i386/auto-init* tests fail also, just don't have time to\ndeal with that right now, just try\nmake check-gcc RUNTESTFLAGS='--target_board=unix\\{-m32,-m64\\} i386.exp=auto-init*'\nGuess some of those tests should be restricted to lp64 in there, others\nwhere it might be easier to check all of lp64, x32 and ia32 code generation\ncould have different matches.  Wonder also about the aarch64 tests, there is\nalso -mabi=ilp32...\n+FAIL: gcc.target/i386/auto-init-2.c scan-rtl-dump-times expand \"0xfefefefefefefefe\" 3\n+FAIL: gcc.target/i386/auto-init-2.c scan-rtl-dump-times expand \"0xfffffffffefefefe\" 2\n+FAIL: gcc.target/i386/auto-init-3.c scan-assembler-times pxor\\\\t\\\\\\\\%xmm0, \\\\\\\\%xmm0 3\n+FAIL: gcc.target/i386/auto-init-4.c scan-rtl-dump-times expand \"0xfffffffffefefefe\" 1\n+FAIL: gcc.target/i386/auto-init-4.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-4.c scan-rtl-dump-times expand \"\\\\\\\\[0xfefefefefefefefe\\\\\\\\]\" 1\n+FAIL: gcc.target/i386/auto-init-5.c scan-assembler-times \\\\\\\\.long\\\\t0 14\n+FAIL: gcc.target/i386/auto-init-6.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 2\n+FAIL: gcc.target/i386/auto-init-6.c scan-rtl-dump-times expand \"\\\\\\\\[0xfefefefefefefefe\\\\\\\\]\" 1\n+FAIL: gcc.target/i386/auto-init-7.c scan-rtl-dump-times expand \"const_int 0 \\\\\\\\[0\\\\\\\\]\\\\\\\\) repeated x16\" 2\n+FAIL: gcc.target/i386/auto-init-7.c scan-rtl-dump-times expand \"const_int 0 \\\\\\\\[0\\\\\\\\]\\\\\\\\)\\\\\\\\)\" 3\n+FAIL: gcc.target/i386/auto-init-8.c scan-rtl-dump-times expand \"0xfffffffffefefefe\" 1\n+FAIL: gcc.target/i386/auto-init-8.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 2\n+FAIL: gcc.target/i386/auto-init-8.c scan-rtl-dump-times expand \"\\\\\\\\[0xfefefefefefefefe\\\\\\\\]\" 2\n+FAIL: gcc.target/i386/auto-init-padding-1.c scan-rtl-dump-times expand \"const_int 0 \\\\\\\\[0\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-10.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-11.c scan-rtl-dump-times expand \"const_int 0 \\\\\\\\[0\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-12.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-2.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-3.c scan-assembler movl\\\\t\\\\\\\\\\$16,\n+FAIL: gcc.target/i386/auto-init-padding-3.c scan-assembler rep stosq\n+FAIL: gcc.target/i386/auto-init-padding-4.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-5.c scan-rtl-dump-times expand \"const_int 0 \\\\\\\\[0\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-6.c scan-rtl-dump-times expand \"0xfffffffffffffffe\\\\\\\\]\\\\\\\\) repeated x16\" 1\n+FAIL: gcc.target/i386/auto-init-padding-7.c scan-assembler-times movq\\\\t\\\\\\\\\\$0, 2\n+FAIL: gcc.target/i386/auto-init-padding-8.c scan-assembler-times movq\\\\t\\\\\\\\\\$0, 2\n+FAIL: gcc.target/i386/auto-init-padding-9.c scan-assembler rep stosq\n\n2021-09-11  Jakub Jelinek  <jakub@redhat.com>\n\n\t* c-c++-common/auto-init-1.c: Enable test only on ilp32 or lp64\n\ttargets, expect different long and pointer sizes between ilp32 and\n\tlp64.\n\t* c-c++-common/auto-init-2.c: Likewise.\n\t* c-c++-common/auto-init-3.c: Expect one of the common long double\n\tsizes (8/12/16 bytes) instead of hardcoding 16 bytes.\n\t* c-c++-common/auto-init-4.c: Likewise.\n\t* c-c++-common/auto-init-5.c: Expect one of the common\n\t_Complex long double sizes (16/24/32 bytes) instead of hardcoding 32\n\tbytes.\n\t* c-c++-common/auto-init-6.c: Likewise.\n\t* c-c++-common/auto-init-padding-1.c: Enable test only on ilp32 or lp64\n\ttargets.\n\t(struct test_small_hole): Change type of four to unsigned long long\n\tand add aligned attribute.", "tree": {"sha": "683f59ac9cd5b18000140fbfe45536385310456f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/683f59ac9cd5b18000140fbfe45536385310456f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a26206ec7b8f8c60747c25d009ea7f9b94184215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26206ec7b8f8c60747c25d009ea7f9b94184215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26206ec7b8f8c60747c25d009ea7f9b94184215"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "84ba0a90d45a2a98743bcdbf834ac9e421e9a11c", "filename": "gcc/testsuite/c-c++-common/auto-init-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-1.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -1,5 +1,5 @@\n /* Verify zero initialization for integer and pointer type automatic variables.  */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n /* { dg-options \"-ftrivial-auto-var-init=zero -fdump-tree-gimple\" } */\n \n #ifndef __cplusplus\n@@ -33,7 +33,9 @@ void foo()\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 2, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" { target lp64 } } } */\n /* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" { target lp64 } } } */\n /* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 2, 0\\\\)\" \"gimple\" } } */"}, {"sha": "69768d6451da239fe6377a1611aa931793851935", "filename": "gcc/testsuite/c-c++-common/auto-init-2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-2.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -1,5 +1,5 @@\n /* Verify pattern initialization for integer and pointer type automatic variables.  */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n /* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-tree-gimple\" } */\n \n #ifndef __cplusplus\n@@ -33,7 +33,9 @@ void foo()\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(2, 1, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp4 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp5 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" { target lp64 } } } */\n /* { dg-final { scan-tree-dump \"temp6 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" { target ilp32 } } } */\n+/* { dg-final { scan-tree-dump \"temp7 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" { target lp64 } } } */\n /* { dg-final { scan-tree-dump \"temp8 = .DEFERRED_INIT \\\\(1, 1, 0\\\\)\" \"gimple\" } } */"}, {"sha": "062d60c1631e40ad904c40899118299ec11fe620", "filename": "gcc/testsuite/c-c++-common/auto-init-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-3.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -16,4 +16,4 @@ long double foo()\n \n /* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 2, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(16, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 2, 0\\\\)\" \"gimple\" } } */"}, {"sha": "9d8f23ed4e333c33b7a88e40ad58e5b3fcdcd24a", "filename": "gcc/testsuite/c-c++-common/auto-init-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-4.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -16,4 +16,4 @@ long double foo()\n \n /* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(4, 1, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(16, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((8|12|16), 1, 0\\\\)\" \"gimple\" } } */"}, {"sha": "9c98a6e7ab2ac35bc72e21ffbef44c133c69306a", "filename": "gcc/testsuite/c-c++-common/auto-init-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-5.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -17,5 +17,5 @@ _Complex long double foo()\n \n /* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 2, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 2, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(32, 2, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 2, 0\\\\)\" \"gimple\" } } */\n "}, {"sha": "3fe24562ebb37e4f4c90f3fa1baf3c7e85220e71", "filename": "gcc/testsuite/c-c++-common/auto-init-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-6.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -17,5 +17,5 @@ _Complex long double foo()\n \n /* { dg-final { scan-tree-dump \"temp1 = .DEFERRED_INIT \\\\(8, 1, 0\\\\)\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"temp2 = .DEFERRED_INIT \\\\(16, 1, 0\\\\)\" \"gimple\" } } */\n-/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\(32, 1, 0\\\\)\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"temp3 = .DEFERRED_INIT \\\\((16|24|32), 1, 0\\\\)\" \"gimple\" } } */\n "}, {"sha": "83db8dde8324a0a705c7a9216fb7680dab017388", "filename": "gcc/testsuite/c-c++-common/auto-init-padding-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fca63b0b6faf6a30ed735b86b8eb59944701fc1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fauto-init-padding-1.c?ref=3fca63b0b6faf6a30ed735b86b8eb59944701fc1", "patch": "@@ -1,6 +1,6 @@\n /* Verify the padding initialization for pattern initialization, we always emit\n  * a call to __builtin_clear_padding to initialize the paddings to zero.  */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n /* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-tree-gimple\" } */\n \n \n@@ -9,7 +9,7 @@ struct test_small_hole {\n   char two;\n   /* 3 byte padding hole here. */\n   int three;\n-  unsigned long four;\n+  unsigned long long four __attribute__((aligned (8)));\n };\n \n extern void g (struct test_small_hole);"}]}