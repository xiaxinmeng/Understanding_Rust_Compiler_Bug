{"sha": "da4fdf2d3ff45366d9378882ad1646306ceee305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0ZmRmMmQzZmY0NTM2NmQ5Mzc4ODgyYWQxNjQ2MzA2Y2VlZTMwNQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-16T22:05:17Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-16T22:05:17Z"}, "message": "rtl.h (get_call_rtx_from): New prototype.\n\n\t* rtl.h (get_call_rtx_from): New prototype.\n\t* rtlanal.c (get_call_rtx_from): New function.\n\t* calls.c (emit_call_1): Use it.\n\t* dse.c (scan_insn): Likewise\n\t* dwarf2out.c (dwarf2out_var_location): Likewise.\n\t* sched-deps.c (call_may_noreturn_p): Likewise.\n\t* var-tracking.c (prepare_call_arguments): Likewise.\n\t* config/sh/sh.c (sh_adjust_cost): Likewise.\n\nFrom-SVN: r192516", "tree": {"sha": "eafbca96b0b0771fa77620d1cff5cfc0a8a8b8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eafbca96b0b0771fa77620d1cff5cfc0a8a8b8be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4fdf2d3ff45366d9378882ad1646306ceee305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4fdf2d3ff45366d9378882ad1646306ceee305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4fdf2d3ff45366d9378882ad1646306ceee305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4fdf2d3ff45366d9378882ad1646306ceee305/comments", "author": null, "committer": null, "parents": [{"sha": "f841b68397bb8b15ea570a7a86c5414f62cc9774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f841b68397bb8b15ea570a7a86c5414f62cc9774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f841b68397bb8b15ea570a7a86c5414f62cc9774"}], "stats": {"total": 92, "additions": 43, "deletions": 49}, "files": [{"sha": "c2e717ffc0b40ca9d32dca314b54c809149b6d5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -1,3 +1,14 @@\n+2012-10-16  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* rtl.h (get_call_rtx_from): New prototype.\n+\t* rtlanal.c (get_call_rtx_from): New function.\n+\t* calls.c (emit_call_1): Use it.\n+\t* dse.c (scan_insn): Likewise\n+\t* dwarf2out.c (dwarf2out_var_location): Likewise.\n+\t* sched-deps.c (call_may_noreturn_p): Likewise.\n+\t* var-tracking.c (prepare_call_arguments): Likewise.\n+\t* config/sh/sh.c (sh_adjust_cost): Likewise.\n+\n 2012-10-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* expr.c (move_by_pieces, move_by_pieces_ninsns, can_store_by_pieces)"}, {"sha": "d4ef639dc10d97a7f537201682d9b33ded9edb5f", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -384,13 +384,8 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \n   /* Some target create a fresh MEM instead of reusing the one provided\n      above.  Set its MEM_EXPR.  */\n-  call = PATTERN (call_insn);\n-  if (GET_CODE (call) == PARALLEL)\n-    call = XVECEXP (call, 0, 0);\n-  if (GET_CODE (call) == SET)\n-    call = SET_SRC (call);\n-  if (GET_CODE (call) == CALL\n-      && MEM_P (XEXP (call, 0))\n+  call = get_call_rtx_from (call_insn);\n+  if (call\n       && MEM_EXPR (XEXP (call, 0)) == NULL_TREE\n       && MEM_EXPR (funmem) != NULL_TREE)\n     set_mem_expr (XEXP (call, 0), MEM_EXPR (funmem));"}, {"sha": "b81c0c35fca9f488954c58a0c2ad5b4eb6262ba2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -10811,13 +10811,8 @@ sh_adjust_cost (rtx insn, rtx link ATTRIBUTE_UNUSED, rtx dep_insn, int cost)\n \t function's address.  */\n       if (CALL_P (insn))\n \t{\n-\t  rtx call = PATTERN (insn);\n-\n-\t  if (GET_CODE (call) == PARALLEL)\n-\t    call = XVECEXP (call, 0 ,0);\n-\t  if (GET_CODE (call) == SET)\n-\t    call = SET_SRC (call);\n-\t  if (GET_CODE (call) == CALL && MEM_P (XEXP (call, 0))\n+\t  rtx call = get_call_rtx_from (insn);\n+\t  if (call\n \t\t  /* sibcalli_thunk uses a symbol_ref in an unspec.  */\n \t      && (GET_CODE (XEXP (XEXP (call, 0), 0)) == UNSPEC\n \t\t  || ! reg_set_p (XEXP (XEXP (call, 0), 0), dep_insn)))"}, {"sha": "318bbc940c0ff276f0162f8100d3873ac2b1acbd", "filename": "gcc/dse.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -2518,14 +2518,8 @@ scan_insn (bb_info_t bb_info, rtx insn)\n       const_call = RTL_CONST_CALL_P (insn);\n       if (!const_call)\n \t{\n-\t  rtx call = PATTERN (insn);\n-\t  if (GET_CODE (call) == PARALLEL)\n-\t    call = XVECEXP (call, 0, 0);\n-\t  if (GET_CODE (call) == SET)\n-\t    call = SET_SRC (call);\n-\t  if (GET_CODE (call) == CALL\n-\t      && MEM_P (XEXP (call, 0))\n-\t      && GET_CODE (XEXP (XEXP (call, 0), 0)) == SYMBOL_REF)\n+\t  rtx call = get_call_rtx_from (insn);\n+\t  if (call && GET_CODE (XEXP (XEXP (call, 0), 0)) == SYMBOL_REF)\n \t    {\n \t      rtx symbol = XEXP (XEXP (call, 0), 0);\n \t      if (SYMBOL_REF_DECL (symbol)"}, {"sha": "fcdb1b119516071308392fa1c040ef8d455b54c4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -20100,12 +20100,8 @@ dwarf2out_var_location (rtx loc_note)\n       if (!CALL_P (prev))\n \tprev = XVECEXP (PATTERN (prev), 0, 0);\n       ca_loc->tail_call_p = SIBLING_CALL_P (prev);\n-      x = PATTERN (prev);\n-      if (GET_CODE (x) == PARALLEL)\n-\tx = XVECEXP (x, 0, 0);\n-      if (GET_CODE (x) == SET)\n-\tx = SET_SRC (x);\n-      if (GET_CODE (x) == CALL && MEM_P (XEXP (x, 0)))\n+      x = get_call_rtx_from (PATTERN (prev));\n+      if (x)\n \t{\n \t  x = XEXP (XEXP (x, 0), 0);\n \t  if (GET_CODE (x) == SYMBOL_REF"}, {"sha": "eeeb6ba4de0de328f3d497d6ec17c6fced3fcc0d", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -1930,6 +1930,7 @@ extern bool nonzero_address_p (const_rtx);\n extern int rtx_unstable_p (const_rtx);\n extern bool rtx_varies_p (const_rtx, bool);\n extern bool rtx_addr_varies_p (const_rtx, bool);\n+extern rtx get_call_rtx_from (rtx);\n extern HOST_WIDE_INT get_integer_term (const_rtx);\n extern rtx get_related_value (const_rtx);\n extern bool offset_within_block_p (const_rtx, HOST_WIDE_INT);"}, {"sha": "a19bdfdc0d1ad64680b7aad860af3563f77ac1b6", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -466,6 +466,22 @@ rtx_addr_varies_p (const_rtx x, bool for_alias)\n   return 0;\n }\n \f\n+/* Return the CALL in X if there is one.  */\n+\n+rtx\n+get_call_rtx_from (rtx x)\n+{\n+  if (INSN_P (x))\n+    x = PATTERN (x);\n+  if (GET_CODE (x) == PARALLEL)\n+    x = XVECEXP (x, 0, 0);\n+  if (GET_CODE (x) == SET)\n+    x = SET_SRC (x);\n+  if (GET_CODE (x) == CALL && MEM_P (XEXP (x, 0)))\n+    return x;\n+  return NULL_RTX;\n+}\n+\f\n /* Return the value of the integer term in X, if one is apparent;\n    otherwise return 0.\n    Only obvious integer terms are detected."}, {"sha": "b9ffb2d61189e84c0a7f64bc10448f4bede2a719", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -3425,14 +3425,8 @@ call_may_noreturn_p (rtx insn)\n       && !RTL_LOOPING_CONST_OR_PURE_CALL_P (insn))\n     return false;\n \n-  call = PATTERN (insn);\n-  if (GET_CODE (call) == PARALLEL)\n-    call = XVECEXP (call, 0, 0);\n-  if (GET_CODE (call) == SET)\n-    call = SET_SRC (call);\n-  if (GET_CODE (call) == CALL\n-      && MEM_P (XEXP (call, 0))\n-      && GET_CODE (XEXP (XEXP (call, 0), 0)) == SYMBOL_REF)\n+  call = get_call_rtx_from (insn);\n+  if (call && GET_CODE (XEXP (XEXP (call, 0), 0)) == SYMBOL_REF)\n     {\n       rtx symbol = XEXP (XEXP (call, 0), 0);\n       if (SYMBOL_REF_DECL (symbol)"}, {"sha": "25973a9776e9cce6644fddae8fb00b2bb5945e94", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4fdf2d3ff45366d9378882ad1646306ceee305/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=da4fdf2d3ff45366d9378882ad1646306ceee305", "patch": "@@ -5897,9 +5897,8 @@ static rtx call_arguments;\n static void\n prepare_call_arguments (basic_block bb, rtx insn)\n {\n-  rtx link, x;\n+  rtx link, x, call;\n   rtx prev, cur, next;\n-  rtx call = PATTERN (insn);\n   rtx this_arg = NULL_RTX;\n   tree type = NULL_TREE, t, fndecl = NULL_TREE;\n   tree obj_type_ref = NULL_TREE;\n@@ -5908,11 +5907,8 @@ prepare_call_arguments (basic_block bb, rtx insn)\n \n   memset (&args_so_far_v, 0, sizeof (args_so_far_v));\n   args_so_far = pack_cumulative_args (&args_so_far_v);\n-  if (GET_CODE (call) == PARALLEL)\n-    call = XVECEXP (call, 0, 0);\n-  if (GET_CODE (call) == SET)\n-    call = SET_SRC (call);\n-  if (GET_CODE (call) == CALL && MEM_P (XEXP (call, 0)))\n+  call = get_call_rtx_from (insn);\n+  if (call)\n     {\n       if (GET_CODE (XEXP (XEXP (call, 0), 0)) == SYMBOL_REF)\n \t{\n@@ -6186,12 +6182,8 @@ prepare_call_arguments (basic_block bb, rtx insn)\n     }\n   call_arguments = prev;\n \n-  x = PATTERN (insn);\n-  if (GET_CODE (x) == PARALLEL)\n-    x = XVECEXP (x, 0, 0);\n-  if (GET_CODE (x) == SET)\n-    x = SET_SRC (x);\n-  if (GET_CODE (x) == CALL && MEM_P (XEXP (x, 0)))\n+  x = get_call_rtx_from (insn);\n+  if (x)\n     {\n       x = XEXP (XEXP (x, 0), 0);\n       if (GET_CODE (x) == SYMBOL_REF)"}]}