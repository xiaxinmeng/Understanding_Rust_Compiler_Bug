{"sha": "5f37780372212a7245f0528e46dbeb741316bba1", "node_id": "C_kwDOANBUbNoAKDVmMzc3ODAzNzIyMTJhNzI0NWYwNTI4ZTQ2ZGJlYjc0MTMxNmJiYTE", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-05T22:32:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-11-05T22:32:55Z"}, "message": "Fix ice in insert_access\n\ngcc/ChangeLog:\n\n\tPR ipa/103073\n\t* ipa-modref-tree.h (modref_tree::insert): Do nothing for\n\tparadoxical and zero sized accesses.\n\ngcc/testsuite/ChangeLog:\n\n\tPR ipa/103073\n\t* g++.dg/torture/pr103073.C: New test.\n\t* gcc.dg/tree-ssa/modref-11.c: New test.", "tree": {"sha": "5fb5c7c4dc616ff39d25cf005d0b752b46e854d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb5c7c4dc616ff39d25cf005d0b752b46e854d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f37780372212a7245f0528e46dbeb741316bba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f37780372212a7245f0528e46dbeb741316bba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f37780372212a7245f0528e46dbeb741316bba1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f37780372212a7245f0528e46dbeb741316bba1/comments", "author": null, "committer": null, "parents": [{"sha": "9cc8ca8da90426f625481195a2127a5e86689bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc8ca8da90426f625481195a2127a5e86689bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc8ca8da90426f625481195a2127a5e86689bcd"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "54ae9e1df4e696bbb585d728f6084177c2821474", "filename": "gcc/ipa-modref-tree.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Fipa-modref-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Fipa-modref-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref-tree.h?ref=5f37780372212a7245f0528e46dbeb741316bba1", "patch": "@@ -818,6 +818,36 @@ struct GTY((user)) modref_tree\n \n     bool changed = false;\n \n+    /* We may end up with max_size being less than size for accesses past the\n+       end of array.  Those are undefined and safe to ignore.  */\n+    if (a.range_info_useful_p ()\n+\t&& known_size_p (a.size) && known_size_p (a.max_size)\n+\t&& known_lt (a.max_size, a.size))\n+      {\n+\tif (dump_file)\n+\t  fprintf (dump_file,\n+\t\t   \"   - Paradoxical range. Ignoring\\n\");\n+\treturn false;\n+      }\n+    if (known_size_p (a.size)\n+\t&& known_eq (a.size, 0))\n+      {\n+\tif (dump_file)\n+\t  fprintf (dump_file,\n+\t\t   \"   - Zero size. Ignoring\\n\");\n+\treturn false;\n+      }\n+    if (known_size_p (a.max_size)\n+\t&& known_eq (a.max_size, 0))\n+      {\n+\tif (dump_file)\n+\t  fprintf (dump_file,\n+\t\t   \"   - Zero max_size. Ignoring\\n\");\n+\treturn false;\n+      }\n+    gcc_checking_assert (!known_size_p (a.max_size)\n+\t\t\t || !known_le (a.max_size, 0));\n+\n     /* No useful information tracked; collapse everything.  */\n     if (!base && !ref && !a.useful_p ())\n       {"}, {"sha": "02b1eee064a3022a7b459ef2c4c5920208518616", "filename": "gcc/testsuite/g++.dg/torture/pr103073.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103073.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103073.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103073.C?ref=5f37780372212a7245f0528e46dbeb741316bba1", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+int a;\n+void b(bool c[], char d[], bool g[][55][21]) {\n+  for (signed e = 0; e < 11; e += 3)\n+    for (unsigned f = c[0] + 1; f < d[0]; f += 3)\n+      a = g[0][e][f + 2];\n+}\n+"}, {"sha": "de9ad16879fe653c18edaafb33fcacb75528b19c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/modref-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f37780372212a7245f0528e46dbeb741316bba1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmodref-11.c?ref=5f37780372212a7245f0528e46dbeb741316bba1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-modref1\"  } */\n+struct linkedlist {\n+  struct linkedlist *next;\n+};\n+struct linkedlist *\n+find_last (struct linkedlist *l)\n+{\n+  while (l->next)\n+   l = l->next;\n+  return l;\n+}\n+/* { dg-final { scan-tree-dump \"noclobber noescape nodirectescape\" \"modref1\"} } */"}]}