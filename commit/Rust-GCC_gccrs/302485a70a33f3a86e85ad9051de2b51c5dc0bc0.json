{"sha": "302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "node_id": "C_kwDOANBUbNoAKDMwMjQ4NWE3MGEzM2YzYTg2ZTg1YWQ5MDUxZGUyYjUxYzVkYzBiYzA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-02T03:58:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-21T02:01:44Z"}, "message": "c++: source position of lambda captures [PR84471]\n\nIf the DECL_VALUE_EXPR of a VAR_DECL has EXPR_LOCATION set, then any use of\nthat variable looks like it has that location, which leads to the debugger\njumping back and forth for both lambdas and structured bindings.\n\nRather than fix all the uses, it seems simplest to remove any EXPR_LOCATION\nwhen setting DECL_VALUE_EXPR.  So the cp/ hunks aren't necessary, but they\navoid the need to unshare to remove the location.\n\n\tPR c++/84471\n\tPR c++/107504\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (transform_local_var_uses): Don't\n\tspecify a location for DECL_VALUE_EXPR.\n\t* decl.cc (cp_finish_decomp): Likewise.\n\ngcc/ChangeLog:\n\n\t* fold-const.cc (protected_set_expr_location_unshare): Not static.\n\t* tree.h: Declare it.\n\t* tree.cc (decl_value_expr_insert): Use it.\n\ninclude/ChangeLog:\n\n\t* ansidecl.h (ATTRIBUTE_WARN_UNUSED_RESULT): Add __.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/value-expr1.C: New test.\n\t* g++.dg/tree-ssa/value-expr2.C: New test.\n\t* g++.dg/analyzer/pr93212.C: Move warning.", "tree": {"sha": "534f842bc26f4d4d286508c401f22d56b97abdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534f842bc26f4d4d286508c401f22d56b97abdab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a996888327c2248b59db7244333740c2b51578c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a996888327c2248b59db7244333740c2b51578c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a996888327c2248b59db7244333740c2b51578c9"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "77e2a90f0f98987412f0301acb02a3729fee34d5", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -2047,8 +2047,8 @@ transform_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t    = lookup_member (lvd->coro_frame_type, local_var.field_id,\n \t\t\t     /*protect=*/1, /*want_type=*/0,\n \t\t\t     tf_warning_or_error);\n-\t  tree fld_idx = build3_loc (lvd->loc, COMPONENT_REF, TREE_TYPE (lvar),\n-\t\t\t\t     lvd->actor_frame, fld_ref, NULL_TREE);\n+\t  tree fld_idx = build3 (COMPONENT_REF, TREE_TYPE (lvar),\n+\t\t\t\t lvd->actor_frame, fld_ref, NULL_TREE);\n \t  local_var.field_idx = fld_idx;\n \t  SET_DECL_VALUE_EXPR (lvar, fld_idx);\n \t  DECL_HAS_VALUE_EXPR_P (lvar) = true;"}, {"sha": "3c0355a1c395244752471c2b4bd45d52656c74a8", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -9137,9 +9137,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t  if (processing_template_decl)\n \t    continue;\n \t  tree t = unshare_expr (dexp);\n-\t  t = build4_loc (DECL_SOURCE_LOCATION (v[i]), ARRAY_REF,\n-\t\t\t  eltype, t, size_int (i), NULL_TREE,\n-\t\t\t  NULL_TREE);\n+\t  t = build4 (ARRAY_REF, eltype, t, size_int (i), NULL_TREE, NULL_TREE);\n \t  SET_DECL_VALUE_EXPR (v[i], t);\n \t  DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n \t}\n@@ -9158,9 +9156,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t  if (processing_template_decl)\n \t    continue;\n \t  tree t = unshare_expr (dexp);\n-\t  t = build1_loc (DECL_SOURCE_LOCATION (v[i]),\n-\t\t\t  i ? IMAGPART_EXPR : REALPART_EXPR, eltype,\n-\t\t\t  t);\n+\t  t = build1 (i ? IMAGPART_EXPR : REALPART_EXPR, eltype, t);\n \t  SET_DECL_VALUE_EXPR (v[i], t);\n \t  DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n \t}\n@@ -9184,9 +9180,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t  tree t = unshare_expr (dexp);\n \t  convert_vector_to_array_for_subscript (DECL_SOURCE_LOCATION (v[i]),\n \t\t\t\t\t\t &t, size_int (i));\n-\t  t = build4_loc (DECL_SOURCE_LOCATION (v[i]), ARRAY_REF,\n-\t\t\t  eltype, t, size_int (i), NULL_TREE,\n-\t\t\t  NULL_TREE);\n+\t  t = build4 (ARRAY_REF, eltype, t, size_int (i), NULL_TREE, NULL_TREE);\n \t  SET_DECL_VALUE_EXPR (v[i], t);\n \t  DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n \t}"}, {"sha": "42547f433ed9b093d0eab10bc9f33ea20fe79df7", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -164,7 +164,7 @@ expr_location_or (tree t, location_t loc)\n /* Similar to protected_set_expr_location, but never modify x in place,\n    if location can and needs to be set, unshare it.  */\n \n-static inline tree\n+tree\n protected_set_expr_location_unshare (tree x, location_t loc)\n {\n   if (CAN_HAVE_LOCATION_P (x)"}, {"sha": "1029e8d547ba8354373eb84fc695504c9007ed61", "filename": "gcc/testsuite/g++.dg/analyzer/pr93212.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93212.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93212.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93212.C?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -4,8 +4,8 @@\n auto lol()\n {\n     int aha = 3;\n-    return [&aha] { // { dg-warning \"dereferencing pointer '.*' to within stale stack frame\" }\n-        return aha;\n+    return [&aha] {\n+        return aha; // { dg-warning \"dereferencing pointer '.*' to within stale stack frame\" }\n     };\n     /* TODO: may be worth special-casing the reporting of dangling\n        references from lambdas, to highlight the declaration, and maybe fix"}, {"sha": "946ccc3bd97f292ecf467cd7550b6e7f0eca472b", "filename": "gcc/testsuite/g++.dg/tree-ssa/value-expr1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr1.C?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/84471\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fdump-tree-gimple-lineno }\n+// { dg-final { scan-tree-dump-not {value-expr: \\[} \"gimple\" } }\n+\n+int main(int argc, char**)\n+{\n+  int x = 1;\n+  auto f = [&x, &argc](const char* i) {\n+    i += x;\n+    i -= argc;\n+    i += argc - x;\n+    return i;\n+  };\n+  f(\"          \");\n+}"}, {"sha": "4d00498f214f6462ee3dafaae482cab363714edc", "filename": "gcc/testsuite/g++.dg/tree-ssa/value-expr2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fvalue-expr2.C?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/107504\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options -fdump-tree-gimple-lineno }\n+// { dg-final { scan-tree-dump-not {value-expr: \\[} \"gimple\" } }\n+\n+struct S\n+{\n+  void* i;\n+  int j;\n+};\n+\n+S f(char* p)\n+{\n+  return {p, 1};\n+}\n+\n+int main()\n+{\n+  char buf[1];\n+  auto [x, y] = f(buf);\n+  if (x != buf)\n+    throw 1;\n+  if (y != 1)\n+    throw 2;\n+  return 0;\n+}"}, {"sha": "581d4489438e6ed5ee91e38e5af7d7f3c73278ef", "filename": "gcc/tree.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -5862,6 +5862,9 @@ decl_value_expr_insert (tree from, tree to)\n {\n   struct tree_decl_map *h;\n \n+  /* Uses of FROM shouldn't look like they happen at the location of TO.  */\n+  to = protected_set_expr_location_unshare (to, UNKNOWN_LOCATION);\n+\n   h = ggc_alloc<tree_decl_map> ();\n   h->base.from = from;\n   h->to = to;"}, {"sha": "64a241f51e238458918e14805c48a23c7b640040", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -1289,6 +1289,8 @@ get_expr_source_range (tree expr)\n \n extern void protected_set_expr_location (tree, location_t);\n extern void protected_set_expr_location_if_unset (tree, location_t);\n+ATTRIBUTE_WARN_UNUSED_RESULT\n+extern tree protected_set_expr_location_unshare (tree, location_t);\n \n WARN_UNUSED_RESULT extern tree maybe_wrap_with_location (tree, location_t);\n "}, {"sha": "4da8069f17133a39af586f431c133ad6f636ec7c", "filename": "include/ansidecl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302485a70a33f3a86e85ad9051de2b51c5dc0bc0/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=302485a70a33f3a86e85ad9051de2b51c5dc0bc0", "patch": "@@ -279,7 +279,7 @@ So instead we use the macro below and test it against specific values.  */\n /* Attribute `warn_unused_result' was valid as of gcc 3.3.  */\n #ifndef ATTRIBUTE_WARN_UNUSED_RESULT\n # if GCC_VERSION >= 3003\n-#  define ATTRIBUTE_WARN_UNUSED_RESULT __attribute__ ((warn_unused_result))\n+#  define ATTRIBUTE_WARN_UNUSED_RESULT __attribute__ ((__warn_unused_result__))\n # else\n #  define ATTRIBUTE_WARN_UNUSED_RESULT\n # endif"}]}