{"sha": "87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkNzVhMTFhNWNiOTM2NjhhZTBiZjZkOTcwMzBlMDFiMmVhZTNmMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T08:54:00Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-14T08:54:00Z"}, "message": "Fix SCC discovery in ipa-modref\n\nthis patch fixes SCC discovery in ipa-modref which is causing misoptimization\nof gnat bootstrapped with LTO, PGO and -O3.\n\nI also improved debug info and spotted wrong parameter to ignore_stores_p\n(which is probably quite harmless since we only inline matching functions, but\nit is better to be consistent).\n\n\tPR bootstrap/97350\n\t* ipa-modref.c (ignore_edge): Do not ignore inlined edes.\n\t(ipa_merge_modref_summary_after_inlining): Improve debug output and\n\tfix parameter of ignore_stores_p.", "tree": {"sha": "a98e9a8995f487b732674643955fd899aa74797b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98e9a8995f487b732674643955fd899aa74797b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2/comments", "author": null, "committer": null, "parents": [{"sha": "2fa5f5c42b625143123850f13625996a0ceb69d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa5f5c42b625143123850f13625996a0ceb69d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa5f5c42b625143123850f13625996a0ceb69d8"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "771a0a88f9a8f1ef7d8932b61a526951f0831bf5", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d75a11a5cb93668ae0bf6d97030e01b2eae3f2/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=87d75a11a5cb93668ae0bf6d97030e01b2eae3f2", "patch": "@@ -1603,6 +1603,11 @@ make_pass_ipa_modref (gcc::context *ctxt)\n static bool\n ignore_edge (struct cgraph_edge *e)\n {\n+  /* We merge summaries of inline clones into summaries of functions they\n+     are inlined to.  For that reason the complete function bodies must\n+     act as unit.  */\n+  if (!e->inline_failed)\n+    return false;\n   enum availability avail;\n   cgraph_node *callee = e->callee->function_or_virtual_thunk_symbol\n \t\t\t  (&avail, e->caller);\n@@ -1723,7 +1728,7 @@ ipa_merge_modref_summary_after_inlining (cgraph_edge *edge)\n \n   if (!callee_info && to_info)\n     {\n-      if (ignore_stores_p (edge->callee->decl, flags))\n+      if (ignore_stores_p (edge->caller->decl, flags))\n \tto_info->loads->collapse ();\n       else\n \t{\n@@ -1733,7 +1738,7 @@ ipa_merge_modref_summary_after_inlining (cgraph_edge *edge)\n     }\n   if (!callee_info_lto && to_info_lto)\n     {\n-      if (ignore_stores_p (edge->callee->decl, flags))\n+      if (ignore_stores_p (edge->caller->decl, flags))\n \tto_info_lto->loads->collapse ();\n       else\n \t{\n@@ -1747,7 +1752,7 @@ ipa_merge_modref_summary_after_inlining (cgraph_edge *edge)\n \n       compute_parm_map (edge, &parm_map);\n \n-      if (!ignore_stores_p (edge->callee->decl, flags))\n+      if (!ignore_stores_p (edge->caller->decl, flags))\n \t{\n \t  if (to_info && callee_info)\n \t    to_info->stores->merge (callee_info->stores, &parm_map);\n@@ -1762,14 +1767,38 @@ ipa_merge_modref_summary_after_inlining (cgraph_edge *edge)\n   if (summaries)\n     {\n       if (to_info && !to_info->useful_p (flags))\n-\tsummaries->remove (to);\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Removed mod-ref summary for %s\\n\",\n+\t\t     to->dump_name ());\n+\t  summaries->remove (to);\n+\t}\n+      else if (to_info && dump_file)\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Updated mod-ref summary for %s\\n\",\n+\t\t     to->dump_name ());\n+\t  to_info->dump (dump_file);\n+\t}\n       if (callee_info)\n \tsummaries->remove (edge->callee);\n     }\n   if (summaries_lto)\n     {\n       if (to_info_lto && !to_info_lto->useful_p (flags))\n-\tsummaries_lto->remove (to);\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Removed mod-ref summary for %s\\n\",\n+\t\t     to->dump_name ());\n+\t  summaries_lto->remove (to);\n+\t}\n+      else if (to_info_lto && dump_file)\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Updated mod-ref summary for %s\\n\",\n+\t\t     to->dump_name ());\n+\t  to_info_lto->dump (dump_file);\n+\t}\n       if (callee_info_lto)\n \tsummaries_lto->remove (edge->callee);\n     }"}]}