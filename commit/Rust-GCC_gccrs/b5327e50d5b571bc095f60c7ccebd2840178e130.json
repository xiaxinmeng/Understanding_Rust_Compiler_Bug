{"sha": "b5327e50d5b571bc095f60c7ccebd2840178e130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzMjdlNTBkNWI1NzFiYzA5NWY2MGM3Y2NlYmQyODQwMTc4ZTEzMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2018-12-23T12:43:47Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2018-12-23T12:43:47Z"}, "message": "LTO-wrapper, don't pre-link early debug objects.\n\nPass them to the final link, the pre-link wasn't effective.\nMake the temp filenames easier to follow.\nAlso save them in the CWD when save-temps is given.\n\n2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* lto-wrapper.c (tool_cleanup): Don\u2019t report ficticious temp files.\n\t(debug_objcopy): Improve temp filenames.  Append the early\n\tdebug objects to the outfiles.  Remove the phase prelinking the\n\tearly debug. Emit the early debug filenames for ld.\n\nFrom-SVN: r267373", "tree": {"sha": "ce523563a63a29020ae6e940b82b8fb244ad4f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce523563a63a29020ae6e940b82b8fb244ad4f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5327e50d5b571bc095f60c7ccebd2840178e130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5327e50d5b571bc095f60c7ccebd2840178e130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5327e50d5b571bc095f60c7ccebd2840178e130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5327e50d5b571bc095f60c7ccebd2840178e130/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d590d99ac9fa34b503d31de6c3bb4ca780ad2afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d590d99ac9fa34b503d31de6c3bb4ca780ad2afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d590d99ac9fa34b503d31de6c3bb4ca780ad2afd"}], "stats": {"total": 142, "additions": 57, "deletions": 85}, "files": [{"sha": "9efea1713888de7e4945c74b88eb780674251f76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5327e50d5b571bc095f60c7ccebd2840178e130/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5327e50d5b571bc095f60c7ccebd2840178e130/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5327e50d5b571bc095f60c7ccebd2840178e130", "patch": "@@ -1,3 +1,10 @@\n+2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* lto-wrapper.c (tool_cleanup): Don\u2019t report ficticious temp files.\n+\t(debug_objcopy): Improve temp filenames.  Append the early\n+\tdebug objects to the outfiles.  Remove the phase prelinking the\n+\tearly debug. Emit the early debug filenames for ld.\n+\n 2018-12-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/i386/darwin.h (TARGET_ASM_OUTPUT_IDENT): New."}, {"sha": "15cf6edb5b7fc7c931eba07fd790fef75c39d269", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 50, "deletions": 85, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5327e50d5b571bc095f60c7ccebd2840178e130/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5327e50d5b571bc095f60c7ccebd2840178e130/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=b5327e50d5b571bc095f60c7ccebd2840178e130", "patch": "@@ -71,7 +71,8 @@ static char **output_names;\n static char **offload_names;\n static char *offload_objects_file_name;\n static char *makefile;\n-static char *debug_obj;\n+static unsigned int num_deb_objs;\n+static const char **early_debug_object_names;\n \n const char tool_name[] = \"lto-wrapper\";\n \n@@ -90,8 +91,10 @@ tool_cleanup (bool)\n     maybe_unlink (offload_objects_file_name);\n   if (makefile)\n     maybe_unlink (makefile);\n-  if (debug_obj)\n-    maybe_unlink (debug_obj);\n+  if (early_debug_object_names)\n+    for (i = 0; i < num_deb_objs; ++i)\n+      if (early_debug_object_names[i])\n+\tmaybe_unlink (early_debug_object_names[i]);\n   for (i = 0; i < nr; ++i)\n     {\n       maybe_unlink (input_names[i]);\n@@ -1036,7 +1039,7 @@ find_and_merge_options (int fd, off_t file_offset, const char *prefix,\n const char *\n debug_objcopy (const char *infile, bool rename)\n {\n-  const char *outfile;\n+  char *outfile;\n   const char *errmsg;\n   int err;\n \n@@ -1075,7 +1078,15 @@ debug_objcopy (const char *infile, bool rename)\n       return NULL;\n     }\n \n-  outfile = make_temp_file (\"debugobjtem\");\n+  if (save_temps)\n+    {\n+      outfile = (char *) xmalloc (strlen (infile)\n+\t\t\t\t  + sizeof (\".debug.temp.o\") + 1);\n+      strcpy (outfile, infile);\n+      strcat (outfile, \".debug.temp.o\");\n+    }\n+  else\n+    outfile = make_temp_file (\".debug.temp.o\");\n   errmsg = simple_object_copy_lto_debug_sections (inobj, outfile, &err, rename);\n   if (errmsg)\n     {\n@@ -1412,9 +1423,16 @@ run_gcc (unsigned argc, char *argv[])\n \n   if (lto_mode == LTO_MODE_LTO)\n     {\n-      flto_out = make_temp_file (\".lto.o\");\n       if (linker_output)\n-\tobstack_ptr_grow (&argv_obstack, linker_output);\n+\t{\n+\t  obstack_ptr_grow (&argv_obstack, linker_output);\n+\t  flto_out = (char *) xmalloc (strlen (linker_output)\n+\t\t\t\t       + sizeof (\".lto.o\") + 1);\n+\t  strcpy (flto_out, linker_output);\n+\t  strcat (flto_out, \".lto.o\");\n+\t}\n+      else\n+\tflto_out = make_temp_file (\".lto.o\");\n       obstack_ptr_grow (&argv_obstack, \"-o\");\n       obstack_ptr_grow (&argv_obstack, flto_out);\n     }\n@@ -1487,95 +1505,39 @@ run_gcc (unsigned argc, char *argv[])\n   argv_ptr = &new_argv[new_head_argc];\n   fork_execute (new_argv[0], CONST_CAST (char **, new_argv), true);\n \n-  /* Handle early generated debug information.  At compile-time\n-     we output early DWARF debug info into .gnu.debuglto_ prefixed\n-     sections.  LTRANS object DWARF debug info refers to that.\n-     So we need to transfer the .gnu.debuglto_ sections to the final\n-     link.  Ideally the linker plugin interface would allow us to\n-     not claim those sections and instruct the linker to keep\n-     them, renaming them in the process.  For now we extract and\n-     rename those sections via a simple-object interface to produce\n-     regular objects containing only the early debug info.  We\n-     then partially link those to a single early debug info object\n-     and pass that as additional output back to the linker plugin.  */\n-\n-  /* Prepare the partial link to gather the compile-time generated\n-     debug-info into a single input for the final link.  */\n-  debug_obj = make_temp_file (\"debugobj\");\n-  obstack_ptr_grow (&argv_obstack, collect_gcc);\n-  for (i = 1; i < decoded_options_count; ++i)\n-    {\n-      /* Retain linker choice and -B.  */\n-      if (decoded_options[i].opt_index == OPT_B\n-\t  || decoded_options[i].opt_index == OPT_fuse_ld_bfd\n-\t  || decoded_options[i].opt_index == OPT_fuse_ld_gold)\n-\tappend_linker_options (&argv_obstack, &decoded_options[i-1], 2);\n-      /* Retain all target options, this preserves -m32 for example.  */\n-      if (cl_options[decoded_options[i].opt_index].flags & CL_TARGET)\n-\tappend_linker_options (&argv_obstack, &decoded_options[i-1], 2);\n-      /* Recognize -g0.  */\n-      if (decoded_options[i].opt_index == OPT_g\n-\t  && strcmp (decoded_options[i].arg, \"0\") == 0)\n-\tskip_debug = true;\n-    }\n-  obstack_ptr_grow (&argv_obstack, \"-r\");\n-  obstack_ptr_grow (&argv_obstack, \"-nostdlib\");\n-  obstack_ptr_grow (&argv_obstack, \"-o\");\n-  obstack_ptr_grow (&argv_obstack, debug_obj);\n-\n   /* Copy the early generated debug info from the objects to temporary\n      files and append those to the partial link commandline.  */\n   n_debugobj = 0;\n+  early_debug_object_names = NULL;\n   if (! skip_debug)\n-    for (i = 0; i < ltoobj_argc; ++i)\n-      {\n-\tconst char *tem;\n-\tif ((tem = debug_objcopy (ltoobj_argv[i], !linker_output_rel)))\n-\t  {\n-\t    obstack_ptr_grow (&argv_obstack, tem);\n-\t    n_debugobj++;\n-\t  }\n-      }\n-\n-  /* Link them all into a single object.  Ideally this would reduce\n-     disk space usage mainly due to .debug_str merging but unfortunately\n-     GNU ld doesn't perform this with -r.  */\n-  if (n_debugobj)\n     {\n-      obstack_ptr_grow (&argv_obstack, NULL);\n-      const char **debug_link_argv = XOBFINISH (&argv_obstack, const char **);\n-      fork_execute (debug_link_argv[0],\n-\t\t    CONST_CAST (char **, debug_link_argv), false);\n-\n-      /* And dispose the temporaries.  */\n-      for (i = 0; debug_link_argv[i]; ++i)\n-\t;\n-      for (--i; i > 0; --i)\n+      early_debug_object_names = XCNEWVEC (const char *, ltoobj_argc+ 1);\n+      num_deb_objs = ltoobj_argc;\n+      for (i = 0; i < ltoobj_argc; ++i)\n \t{\n-\t  if (strcmp (debug_link_argv[i], debug_obj) == 0)\n-\t    break;\n-\t  maybe_unlink (debug_link_argv[i]);\n+\t  const char *tem;\n+\t  if ((tem = debug_objcopy (ltoobj_argv[i], !linker_output_rel)))\n+\t    {\n+\t      early_debug_object_names[i] = tem;\n+\t      n_debugobj++;\n+\t    }\n \t}\n     }\n-  else\n-    {\n-      unlink_if_ordinary (debug_obj);\n-      free (debug_obj);\n-      debug_obj = NULL;\n-      skip_debug = true;\n-    }\n \n   if (lto_mode == LTO_MODE_LTO)\n     {\n       printf (\"%s\\n\", flto_out);\n       if (!skip_debug)\n \t{\n-\t  printf (\"%s\\n\", debug_obj);\n-\t  free (debug_obj);\n-\t  debug_obj = NULL;\n+\t  for (i = 0; i < ltoobj_argc; ++i)\n+\t    if (early_debug_object_names[i] != NULL)\n+\t      printf (\"%s\\n\", early_debug_object_names[i]);\t      \n \t}\n+      /* These now belong to collect2.  */\n       free (flto_out);\n       flto_out = NULL;\n+      free (early_debug_object_names);\n+      early_debug_object_names = NULL;\n     }\n   else\n     {\n@@ -1739,21 +1701,24 @@ run_gcc (unsigned argc, char *argv[])\n \t  for (i = 0; i < nr; ++i)\n \t    maybe_unlink (input_names[i]);\n \t}\n-      if (!skip_debug)\n-\t{\n-\t  printf (\"%s\\n\", debug_obj);\n-\t  free (debug_obj);\n-\t  debug_obj = NULL;\n-\t}\n       for (i = 0; i < nr; ++i)\n \t{\n \t  fputs (output_names[i], stdout);\n \t  putc ('\\n', stdout);\n \t  free (input_names[i]);\n \t}\n+      if (!skip_debug)\n+\t{\n+\t  for (i = 0; i < ltoobj_argc; ++i)\n+\t    if (early_debug_object_names[i] != NULL)\n+\t      printf (\"%s\\n\", early_debug_object_names[i]);\t      \n+\t}\n       nr = 0;\n       free (ltrans_priorities);\n       free (output_names);\n+      output_names = NULL;\n+      free (early_debug_object_names);\n+      early_debug_object_names = NULL;\n       free (input_names);\n       free (list_option_full);\n       obstack_free (&env_obstack, NULL);"}]}