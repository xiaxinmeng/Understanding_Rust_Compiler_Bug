{"sha": "53c4ca47aefe9fe454964b4db1e007044132f550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjNGNhNDdhZWZlOWZlNDU0OTY0YjRkYjFlMDA3MDQ0MTMyZjU1MA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-09-17T20:17:54Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-09-17T20:17:54Z"}, "message": "re PR middle-end/22067 (Inconsistent multiply by immediate)\n\n        PR middle-end/22067\n        * expmed.c (expand_mult): Substitute simple register for op0 when\n        computing max_cost.\n\nFrom-SVN: r104373", "tree": {"sha": "85ccf25f29bce00a90b36b0428c3c68b74835ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85ccf25f29bce00a90b36b0428c3c68b74835ba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c4ca47aefe9fe454964b4db1e007044132f550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c4ca47aefe9fe454964b4db1e007044132f550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c4ca47aefe9fe454964b4db1e007044132f550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c4ca47aefe9fe454964b4db1e007044132f550/comments", "author": null, "committer": null, "parents": [{"sha": "31043f6cfc3612e0278f2dea1a8e3ce050b72798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31043f6cfc3612e0278f2dea1a8e3ce050b72798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31043f6cfc3612e0278f2dea1a8e3ce050b72798"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "0c41cf79930b33bccae94c9b44d55972a5852b1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c4ca47aefe9fe454964b4db1e007044132f550/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c4ca47aefe9fe454964b4db1e007044132f550/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53c4ca47aefe9fe454964b4db1e007044132f550", "patch": "@@ -1,3 +1,9 @@\n+2005-09-17  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR middle-end/22067\n+\t* expmed.c (expand_mult): Substitute simple register for op0 when\n+\tcomputing max_cost.\n+\n 2005-09-17  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (emit_move_via_integer): Add force argument, pass it on"}, {"sha": "292957cc3c85012eb5c6413baa527b2be08f0843", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c4ca47aefe9fe454964b4db1e007044132f550/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c4ca47aefe9fe454964b4db1e007044132f550/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=53c4ca47aefe9fe454964b4db1e007044132f550", "patch": "@@ -3022,6 +3022,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n       && (unsignedp || !flag_trapv))\n     {\n       HOST_WIDE_INT coeff = 0;\n+      rtx reg = gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1);\n \n       /* synth_mult does an `unsigned int' multiply.  As long as the mode is\n \t less than or equal in size to `unsigned int' this doesn't matter.\n@@ -3040,7 +3041,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t    {\n \t      /* Its safe to use -INTVAL (op1) even for INT_MIN, as the\n \t\t result is interpreted as an unsigned coefficient.  */\n-\t      max_cost = rtx_cost (gen_rtx_MULT (mode, op0, op1), SET)\n+\t      max_cost = rtx_cost (gen_rtx_MULT (mode, reg, op1), SET)\n \t\t\t - neg_cost[mode];\n \t      if (max_cost > 0\n \t\t  && choose_mult_variant (mode, -INTVAL (op1), &algorithm,\n@@ -3083,7 +3084,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t\t\t\t build_int_cst (NULL_TREE, floor_log2 (coeff)),\n \t\t\t\t target, unsignedp);\n \n-\t  max_cost = rtx_cost (gen_rtx_MULT (mode, op0, op1), SET);\n+\t  max_cost = rtx_cost (gen_rtx_MULT (mode, reg, op1), SET);\n \t  if (choose_mult_variant (mode, coeff, &algorithm, &variant,\n \t\t\t\t   max_cost))\n \t    return expand_mult_const (mode, op0, coeff, target,"}]}