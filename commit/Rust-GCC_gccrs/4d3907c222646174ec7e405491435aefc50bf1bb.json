{"sha": "4d3907c222646174ec7e405491435aefc50bf1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzOTA3YzIyMjY0NjE3NGVjN2U0MDU0OTE0MzVhZWZjNTBiZjFiYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-04T12:28:11Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-07T13:31:51Z"}, "message": "Reformat target.def for better parsing.\n\ngcc/c-family/ChangeLog:\n\n\t* c-target.def: Split long lines and replace them\n\twith '\\n\\'.\n\ngcc/ChangeLog:\n\n\t* common/common-target.def: Split long lines and replace them\n\twith '\\n\\'.\n\t* target.def: Likewise.\n\t* doc/tm.texi: Re-generated.", "tree": {"sha": "dc25e835e3429df5e49527091807bf7c09024c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc25e835e3429df5e49527091807bf7c09024c46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3907c222646174ec7e405491435aefc50bf1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3907c222646174ec7e405491435aefc50bf1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3907c222646174ec7e405491435aefc50bf1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3907c222646174ec7e405491435aefc50bf1bb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e00f8ddb729913831e494f87207b658292e6c2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e00f8ddb729913831e494f87207b658292e6c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e00f8ddb729913831e494f87207b658292e6c2b"}], "stats": {"total": 951, "additions": 612, "deletions": 339}, "files": [{"sha": "164f1b3169419c4d25716405d2ff428fb75febe9", "filename": "gcc/c-family/c-target.def", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=4d3907c222646174ec7e405491435aefc50bf1bb", "patch": "@@ -43,73 +43,73 @@ DEFHOOK\n \n DEFHOOK\n (objc_construct_string_object,\n- \"Targets may provide a string object type that can be used within\\\n- and between C, C++ and their respective Objective-C dialects.\\\n- A string object might, for example, embed encoding and length information.\\\n- These objects are considered opaque to the compiler and handled as references.\\\n- An ideal implementation makes the composition of the string object\\\n- match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\\\n- allowing efficient interworking between C-only and Objective-C code.\\\n- If a target implements string objects then this hook should return a\\\n- reference to such an object constructed from the normal `C' string\\\n- representation provided in @var{string}.\\\n- At present, the hook is used by Objective-C only, to obtain a\\\n+ \"Targets may provide a string object type that can be used within\\n\\\n+and between C, C++ and their respective Objective-C dialects.\\n\\\n+A string object might, for example, embed encoding and length information.\\n\\\n+These objects are considered opaque to the compiler and handled as references.\\n\\\n+An ideal implementation makes the composition of the string object\\n\\\n+match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\\n\\\n+allowing efficient interworking between C-only and Objective-C code.\\n\\\n+If a target implements string objects then this hook should return a\\n\\\n+reference to such an object constructed from the normal `C' string\\n\\\n+representation provided in @var{string}.\\n\\\n+At present, the hook is used by Objective-C only, to obtain a\\n\\\n  common-format string object when the target provides one.\",\n  tree, (tree string),\n  NULL)\n \n DEFHOOK\n (objc_declare_unresolved_class_reference,\n- \"Declare that Objective C class @var{classname} is referenced\\\n-  by the current TU.\",\n+ \"Declare that Objective C class @var{classname} is referenced\\n\\\n+by the current TU.\",\n  void, (const char *classname),\n  NULL)\n \n DEFHOOK\n (objc_declare_class_definition,\n- \"Declare that Objective C class @var{classname} is defined\\\n-  by the current TU.\",\n+ \"Declare that Objective C class @var{classname} is defined\\n\\\n+by the current TU.\",\n  void, (const char *classname),\n  NULL)\n \n DEFHOOK\n (string_object_ref_type_p,\n- \"If a target implements string objects then this hook should return\\\n- @code{true} if @var{stringref} is a valid reference to such an object.\",\n+ \"If a target implements string objects then this hook should return\\n\\\n+@code{true} if @var{stringref} is a valid reference to such an object.\",\n  bool, (const_tree stringref),\n  hook_bool_const_tree_false)\n \n DEFHOOK\n (check_string_object_format_arg,\n- \"If a target implements string objects then this hook should should\\\n-  provide a facility to check the function arguments in @var{args_list}\\\n-  against the format specifiers in @var{format_arg} where the type of\\\n-  @var{format_arg} is one recognized as a valid string reference type.\",\n+ \"If a target implements string objects then this hook should should\\n\\\n+provide a facility to check the function arguments in @var{args_list}\\n\\\n+against the format specifiers in @var{format_arg} where the type of\\n\\\n+@var{format_arg} is one recognized as a valid string reference type.\",\n  void, (tree format_arg, tree args_list),\n  NULL)\n \n DEFHOOK\n (c_preinclude,\n- \"Define this hook to return the name of a header file to be included at\\\n- the start of all compilations, as if it had been included with\\\n- @code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is\\\n- not defined, or the header is not found, or if the user specifies\\\n- @option{-ffreestanding} or @option{-nostdinc}, no header is included.\\n\\\n+ \"Define this hook to return the name of a header file to be included at\\n\\\n+the start of all compilations, as if it had been included with\\n\\\n+@code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is\\n\\\n+not defined, or the header is not found, or if the user specifies\\n\\\n+@option{-ffreestanding} or @option{-nostdinc}, no header is included.\\n\\\n \\n\\\n- This hook can be used together with a header provided by the system C\\\n- library to implement ISO C requirements for certain macros to be\\\n- predefined that describe properties of the whole implementation rather\\\n- than just the compiler.\",\n+This hook can be used together with a header provided by the system C\\n\\\n+library to implement ISO C requirements for certain macros to be\\n\\\n+predefined that describe properties of the whole implementation rather\\n\\\n+than just the compiler.\",\n  const char *, (void),\n  hook_constcharptr_void_null)\n \n DEFHOOK\n (cxx_implicit_extern_c,\n- \"Define this hook to add target-specific C++ implicit extern C functions.\\\n- If this function returns true for the name of a file-scope function, that\\\n- function implicitly gets extern \\\"C\\\" linkage rather than whatever language\\\n- linkage the declaration would normally have.  An example of such function\\\n- is WinMain on Win32 targets.\",\n+ \"Define this hook to add target-specific C++ implicit extern C functions.\\n\\\n+If this function returns true for the name of a file-scope function, that\\n\\\n+function implicitly gets extern \\\"C\\\" linkage rather than whatever language\\n\\\n+linkage the declaration would normally have.  An example of such function\\n\\\n+is WinMain on Win32 targets.\",\n  bool, (const char*),\n  NULL)\n  "}, {"sha": "f54590a2a547bd960b6f7ecfd62c8d316b396f15", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=4d3907c222646174ec7e405491435aefc50bf1bb", "patch": "@@ -64,23 +64,23 @@ DEFHOOK\n \n DEFHOOK\n (supports_split_stack,\n- \"Whether this target supports splitting the stack when the options\\\n- described in @var{opts} have been passed.  This is called\\\n- after options have been parsed, so the target may reject splitting\\\n- the stack in some configurations.  The default version of this hook\\\n- returns false.  If @var{report} is true, this function may issue a warning\\\n- or error; if @var{report} is false, it must simply return a value\",\n+ \"Whether this target supports splitting the stack when the options\\n\\\n+described in @var{opts} have been passed.  This is called\\n\\\n+after options have been parsed, so the target may reject splitting\\n\\\n+the stack in some configurations.  The default version of this hook\\n\\\n+returns false.  If @var{report} is true, this function may issue a warning\\n\\\n+or error; if @var{report} is false, it must simply return a value\",\n  bool, (bool report, struct gcc_options *opts),\n  hook_bool_bool_gcc_optionsp_false)\n \n DEFHOOK\n (get_valid_option_values,\n-\"The hook is used for options that have a non-trivial list of\\\n- possible option values.  OPTION_CODE is option code of opt_code\\\n- enum type.  PREFIX is used for bash completion and allows an implementation\\\n- to return more specific completion based on the prefix.  All string values\\\n- should be allocated from heap memory and consumers should release them. \\\n- The result will be pruned to cases with PREFIX if not NULL.\",\n+\"The hook is used for options that have a non-trivial list of\\n\\\n+possible option values.  OPTION_CODE is option code of opt_code\\n\\\n+enum type.  PREFIX is used for bash completion and allows an implementation\\n\\\n+to return more specific completion based on the prefix.  All string values\\n\\\n+should be allocated from heap memory and consumers should release them.\\n\\\n+The result will be pruned to cases with PREFIX if not NULL.\",\n  vec<const char *>, (int option_code, const char *prefix),\n  default_get_valid_option_values)\n \n@@ -100,10 +100,10 @@ DEFHOOKPOD\n \n DEFHOOKPOD\n (always_strip_dotdot,\n- \"True if @file{..} components should always be removed from directory names\\\n- computed relative to GCC's internal directories, false (default) if such\\\n- components should be preserved and directory names containing them passed\\\n- to other tools such as the linker.\",\n+ \"True if @file{..} components should always be removed from directory names\\n\\\n+computed relative to GCC's internal directories, false (default) if such\\n\\\n+components should be preserved and directory names containing them passed\\n\\\n+to other tools such as the linker.\",\n  bool, false)\n  \n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "0a6ae0b683e74a431abc4a83667df6e36bf7cc3b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 301, "deletions": 63, "changes": 364, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4d3907c222646174ec7e405491435aefc50bf1bb", "patch": "@@ -400,7 +400,10 @@ the effect you need.  Overriding this macro may be avoidable by overriding\n @end defmac\n \n @deftypevr {Common Target Hook} bool TARGET_ALWAYS_STRIP_DOTDOT\n-True if @file{..} components should always be removed from directory names computed relative to GCC's internal directories, false (default) if such components should be preserved and directory names containing them passed to other tools such as the linker.\n+True if @file{..} components should always be removed from directory names\n+computed relative to GCC's internal directories, false (default) if such\n+components should be preserved and directory names containing them passed\n+to other tools such as the linker.\n @end deftypevr\n \n @defmac MULTILIB_DEFAULTS\n@@ -703,23 +706,40 @@ should use @code{TARGET_HANDLE_C_OPTION} instead.\n @end deftypefn\n \n @deftypefn {C Target Hook} tree TARGET_OBJC_CONSTRUCT_STRING_OBJECT (tree @var{string})\n-Targets may provide a string object type that can be used within and between C, C++ and their respective Objective-C dialects. A string object might, for example, embed encoding and length information. These objects are considered opaque to the compiler and handled as references. An ideal implementation makes the composition of the string object match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep), allowing efficient interworking between C-only and Objective-C code. If a target implements string objects then this hook should return a reference to such an object constructed from the normal `C' string representation provided in @var{string}. At present, the hook is used by Objective-C only, to obtain a common-format string object when the target provides one.\n+Targets may provide a string object type that can be used within\n+and between C, C++ and their respective Objective-C dialects.\n+A string object might, for example, embed encoding and length information.\n+These objects are considered opaque to the compiler and handled as references.\n+An ideal implementation makes the composition of the string object\n+match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\n+allowing efficient interworking between C-only and Objective-C code.\n+If a target implements string objects then this hook should return a\n+reference to such an object constructed from the normal `C' string\n+representation provided in @var{string}.\n+At present, the hook is used by Objective-C only, to obtain a\n+ common-format string object when the target provides one.\n @end deftypefn\n \n @deftypefn {C Target Hook} void TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE (const char *@var{classname})\n-Declare that Objective C class @var{classname} is referenced  by the current TU.\n+Declare that Objective C class @var{classname} is referenced\n+by the current TU.\n @end deftypefn\n \n @deftypefn {C Target Hook} void TARGET_OBJC_DECLARE_CLASS_DEFINITION (const char *@var{classname})\n-Declare that Objective C class @var{classname} is defined  by the current TU.\n+Declare that Objective C class @var{classname} is defined\n+by the current TU.\n @end deftypefn\n \n @deftypefn {C Target Hook} bool TARGET_STRING_OBJECT_REF_TYPE_P (const_tree @var{stringref})\n-If a target implements string objects then this hook should return @code{true} if @var{stringref} is a valid reference to such an object.\n+If a target implements string objects then this hook should return\n+@code{true} if @var{stringref} is a valid reference to such an object.\n @end deftypefn\n \n @deftypefn {C Target Hook} void TARGET_CHECK_STRING_OBJECT_FORMAT_ARG (tree @var{format_arg}, tree @var{args_list})\n-If a target implements string objects then this hook should should  provide a facility to check the function arguments in @var{args_list}  against the format specifiers in @var{format_arg} where the type of  @var{format_arg} is one recognized as a valid string reference type.\n+If a target implements string objects then this hook should should\n+provide a facility to check the function arguments in @var{args_list}\n+against the format specifiers in @var{format_arg} where the type of\n+@var{format_arg} is one recognized as a valid string reference type.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE (void)\n@@ -778,7 +798,13 @@ is 0.\n @end defmac\n \n @deftypefn {Target Hook} bool TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P (void)\n-Returns true if the target supports IEEE 754 floating-point exceptions and rounding modes, false otherwise.  This is intended to relate to the @code{float} and @code{double} types, but not necessarily @code{long double}. By default, returns true if the @code{adddf3} instruction pattern is available and false otherwise, on the assumption that hardware floating point supports exceptions and rounding modes but software floating point does not.\n+Returns true if the target supports IEEE 754 floating-point exceptions\n+and rounding modes, false otherwise.  This is intended to relate to the\n+@code{float} and @code{double} types, but not necessarily @code{long double}.\n+By default, returns true if the @code{adddf3} instruction pattern is\n+available and false otherwise, on the assumption that hardware floating\n+point supports exceptions and rounding modes but software floating point\n+does not.\n @end deftypefn\n \n @node Per-Function Data\n@@ -953,7 +979,22 @@ Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n @deftypefn {Target Hook} {enum flt_eval_method} TARGET_C_EXCESS_PRECISION (enum excess_precision_type @var{type})\n-Return a value, with the same meaning as the C99 macro @code{FLT_EVAL_METHOD} that describes which excess precision should be applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT}, @code{EXCESS_PRECISION_TYPE_FAST}, or @code{EXCESS_PRECISION_TYPE_STANDARD}.  For @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which precision and range operations will be implictly evaluated in regardless of the excess precision explicitly added.  For @code{EXCESS_PRECISION_TYPE_STANDARD} and @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the explicit excess precision that should be added depending on the value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}. Note that unpredictable explicit excess precision does not make sense, so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE} when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or @code{EXCESS_PRECISION_TYPE_FAST}.\n+Return a value, with the same meaning as the C99 macro\n+@code{FLT_EVAL_METHOD} that describes which excess precision should be\n+applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\n+@code{EXCESS_PRECISION_TYPE_FAST}, or\n+@code{EXCESS_PRECISION_TYPE_STANDARD}.  For\n+@code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\n+precision and range operations will be implictly evaluated in regardless\n+of the excess precision explicitly added.  For\n+@code{EXCESS_PRECISION_TYPE_STANDARD} and\n+@code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\n+explicit excess precision that should be added depending on the\n+value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\n+Note that unpredictable explicit excess precision does not make sense,\n+so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\n+when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\n+@code{EXCESS_PRECISION_TYPE_FAST}.\n @end deftypefn\n \n @deftypefn {Target Hook} machine_mode TARGET_PROMOTE_FUNCTION_MODE (const_tree @var{type}, machine_mode @var{mode}, int *@var{punsignedp}, const_tree @var{funtype}, int @var{for_return})\n@@ -2538,7 +2579,16 @@ only if neither labeling works.\n @end defmac\n \n @deftypefn {Target Hook} reg_class_t TARGET_PREFERRED_RENAME_CLASS (reg_class_t @var{rclass})\n-A target hook that places additional preference on the register class to use when it is necessary to rename a register in class @var{rclass} to another class, or perhaps @var{NO_REGS}, if no preferred register class is found or hook @code{preferred_rename_class} is not implemented. Sometimes returning a more restrictive class makes better code.  For example, on ARM, thumb-2 instructions using @code{LO_REGS} may be smaller than instructions using @code{GENERIC_REGS}.  By returning @code{LO_REGS} from @code{preferred_rename_class}, code size can be reduced.\n+A target hook that places additional preference on the register\n+class to use when it is necessary to rename a register in class\n+@var{rclass} to another class, or perhaps @var{NO_REGS}, if no\n+preferred register class is found or hook @code{preferred_rename_class}\n+is not implemented.\n+Sometimes returning a more restrictive class makes better code.  For\n+example, on ARM, thumb-2 instructions using @code{LO_REGS} may be\n+smaller than instructions using @code{GENERIC_REGS}.  By returning\n+@code{LO_REGS} from @code{preferred_rename_class}, code size can\n+be reduced.\n @end deftypefn\n \n @deftypefn {Target Hook} reg_class_t TARGET_PREFERRED_RELOAD_CLASS (rtx @var{x}, reg_class_t @var{rclass})\n@@ -2922,19 +2972,44 @@ A target hook which can change allocno class for given pseudo from\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_LRA_P (void)\n-A target hook which returns true if we use LRA instead of reload pass.    The default version of this target hook returns true.  New ports  should use LRA, and existing ports are encouraged to convert.\n+A target hook which returns true if we use LRA instead of reload pass.\n+\n+The default version of this target hook returns true.  New ports\n+should use LRA, and existing ports are encouraged to convert.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_REGISTER_PRIORITY (int)\n-A target hook which returns the register priority number to which the  register @var{hard_regno} belongs to.  The bigger the number, the  more preferable the hard register usage (when all other conditions are  the same).  This hook can be used to prefer some hard register over  others in LRA.  For example, some x86-64 register usage needs  additional prefix which makes instructions longer.  The hook can  return lower priority number for such registers make them less favorable  and as result making the generated code smaller.    The default version of this target hook returns always zero.\n+A target hook which returns the register priority number to which the\n+register @var{hard_regno} belongs to.  The bigger the number, the\n+more preferable the hard register usage (when all other conditions are\n+the same).  This hook can be used to prefer some hard register over\n+others in LRA.  For example, some x86-64 register usage needs\n+additional prefix which makes instructions longer.  The hook can\n+return lower priority number for such registers make them less favorable\n+and as result making the generated code smaller.\n+\n+The default version of this target hook returns always zero.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_REGISTER_USAGE_LEVELING_P (void)\n-A target hook which returns true if we need register usage leveling.  That means if a few hard registers are equally good for the  assignment, we choose the least used hard register.  The register  usage leveling may be profitable for some targets.  Don't use the  usage leveling for targets with conditional execution or targets  with big register files as it hurts if-conversion and cross-jumping  optimizations.    The default version of this target hook returns always false.\n+A target hook which returns true if we need register usage leveling.\n+That means if a few hard registers are equally good for the\n+assignment, we choose the least used hard register.  The register\n+usage leveling may be profitable for some targets.  Don't use the\n+usage leveling for targets with conditional execution or targets\n+with big register files as it hurts if-conversion and cross-jumping\n+optimizations.\n+\n+The default version of this target hook returns always false.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_DIFFERENT_ADDR_DISPLACEMENT_P (void)\n-A target hook which returns true if an address with the same structure  can have different maximal legitimate displacement.  For example, the  displacement can depend on memory mode or on operand combinations in  the insn.    The default version of this target hook returns always false.\n+A target hook which returns true if an address with the same structure\n+can have different maximal legitimate displacement.  For example, the\n+displacement can depend on memory mode or on operand combinations in\n+the insn.\n+\n+The default version of this target hook returns always false.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P (rtx @var{subst})\n@@ -2960,19 +3035,34 @@ from the anchor in @var{offset2}.  The default implementation returns false.\n @end deftypefn\n \n @deftypefn {Target Hook} reg_class_t TARGET_SPILL_CLASS (reg_class_t, @var{machine_mode})\n-This hook defines a class of registers which could be used for spilling  pseudos of the given mode and class, or @code{NO_REGS} if only memory  should be used.  Not defining this hook is equivalent to returning  @code{NO_REGS} for all inputs.\n+This hook defines a class of registers which could be used for spilling\n+pseudos of the given mode and class, or @code{NO_REGS} if only memory\n+should be used.  Not defining this hook is equivalent to returning\n+@code{NO_REGS} for all inputs.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_ADDITIONAL_ALLOCNO_CLASS_P (reg_class_t)\n-This hook should return @code{true} if given class of registers should  be an allocno class in any way.  Usually RA uses only one register  class from all classes containing the same register set.  In some  complicated cases, you need to have two or more such classes as  allocno ones for RA correct work.  Not defining this hook is  equivalent to returning @code{false} for all inputs.\n+This hook should return @code{true} if given class of registers should\n+be an allocno class in any way.  Usually RA uses only one register\n+class from all classes containing the same register set.  In some\n+complicated cases, you need to have two or more such classes as\n+allocno ones for RA correct work.  Not defining this hook is\n+equivalent to returning @code{false} for all inputs.\n @end deftypefn\n \n @deftypefn {Target Hook} scalar_int_mode TARGET_CSTORE_MODE (enum insn_code @var{icode})\n-This hook defines the machine mode to use for the boolean result of  conditional store patterns.  The ICODE argument is the instruction code  for the cstore being performed.  Not definiting this hook is the same  as accepting the mode encoded into operand 0 of the cstore expander  patterns.\n+This hook defines the machine mode to use for the boolean result of\n+conditional store patterns.  The ICODE argument is the instruction code\n+for the cstore being performed.  Not definiting this hook is the same\n+as accepting the mode encoded into operand 0 of the cstore expander\n+patterns.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_COMPUTE_PRESSURE_CLASSES (enum reg_class *@var{pressure_classes})\n-A target hook which lets a backend compute the set of pressure classes to  be used by those optimization passes which take register pressure into  account, as opposed to letting IRA compute them.  It returns the number of  register classes stored in the array @var{pressure_classes}.\n+A target hook which lets a backend compute the set of pressure classes to\n+be used by those optimization passes which take register pressure into\n+account, as opposed to letting IRA compute them.  It returns the number of\n+register classes stored in the array @var{pressure_classes}.\n @end deftypefn\n \n @node Stack and Calling\n@@ -3505,9 +3595,12 @@ normally not need to override that default.\n \n @deftypefn {Target Hook} HOST_WIDE_INT TARGET_STACK_CLASH_PROTECTION_ALLOCA_PROBE_RANGE (void)\n Some targets have an ABI defined interval for which no probing needs to be done.\n-When a probe does need to be done this same interval is used as the probe distance up when doing stack clash protection for alloca.\n+When a probe does need to be done this same interval is used as the probe distance\n+up when doing stack clash protection for alloca.\n On such targets this value can be set to override the default probing up interval.\n-Define this variable to return nonzero if such a probe range is required or zero otherwise.  Defining this hook also requires your functions which make use of alloca to have at least 8 byesof outgoing arguments.  If this is not the case the stack will be corrupted.\n+Define this variable to return nonzero if such a probe range is required or zero otherwise.\n+Defining this hook also requires your functions which make use of alloca to have at least 8 byes\n+of outgoing arguments.  If this is not the case the stack will be corrupted.\n You need not define this macro if it would always have the value zero.\n @end deftypefn\n \n@@ -4300,7 +4393,11 @@ hook returns true for both @code{ptr_mode} and @code{Pmode}.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_REF_MAY_ALIAS_ERRNO (ao_ref *@var{ref})\n-Define this to return nonzero if the memory reference @var{ref}  may alias with the system C library errno location.  The default  version of this hook assumes the system C library errno location  is either a declaration of type int or accessed by dereferencing  a pointer to int.\n+Define this to return nonzero if the memory reference @var{ref}\n+may alias with the system C library errno location.  The default\n+version of this hook assumes the system C library errno location\n+is either a declaration of type int or accessed by dereferencing\n+a pointer to int.\n @end deftypefn\n \n @deftypefn {Target Hook} machine_mode TARGET_TRANSLATE_MODE_ATTRIBUTE (machine_mode @var{mode})\n@@ -4686,11 +4783,15 @@ nothing when you use @option{-freg-struct-return} mode.\n @end defmac\n \n @deftypefn {Target Hook} fixed_size_mode TARGET_GET_RAW_RESULT_MODE (int @var{regno})\n-This target hook returns the mode to be used when accessing raw return registers in @code{__builtin_return}.  Define this macro if the value in @var{reg_raw_mode} is not correct.\n+This target hook returns the mode to be used when accessing raw return\n+registers in @code{__builtin_return}.  Define this macro if the value\n+in @var{reg_raw_mode} is not correct.\n @end deftypefn\n \n @deftypefn {Target Hook} fixed_size_mode TARGET_GET_RAW_ARG_MODE (int @var{regno})\n-This target hook returns the mode to be used when accessing raw argument registers in @code{__builtin_apply_args}.  Define this macro if the value in @var{reg_raw_mode} is not correct.\n+This target hook returns the mode to be used when accessing raw argument\n+registers in @code{__builtin_apply_args}.  Define this macro if the value\n+in @var{reg_raw_mode} is not correct.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_EMPTY_RECORD_P (const_tree @var{type})\n@@ -4994,7 +5095,11 @@ the function prologue.  Normally, the profiling code comes after.\n @end defmac\n \n @deftypefn {Target Hook} bool TARGET_KEEP_LEAF_WHEN_PROFILED (void)\n-This target hook returns true if the target wants the leaf flag for the current function to stay true even if it calls mcount.  This might make sense for targets using the leaf flag only to determine whether a stack frame needs to be generated or not and for which the call to mcount is generated before the function prologue.\n+This target hook returns true if the target wants the leaf flag for\n+the current function to stay true even if it calls mcount.  This might\n+make sense for targets using the leaf flag only to determine whether a\n+stack frame needs to be generated or not and for which the call to\n+mcount is generated before the function prologue.\n @end deftypefn\n \n @node Tail Calls\n@@ -5024,11 +5129,14 @@ FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_SET_UP_BY_PROLOGUE (struct hard_reg_set_container *@var{})\n-This hook should add additional registers that are computed by the prologue to the hard regset for shrink-wrapping optimization purposes.\n+This hook should add additional registers that are computed by the prologue\n+to the hard regset for shrink-wrapping optimization purposes.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_WARN_FUNC_RETURN (tree)\n-True if a function's return statements should be checked for matching the function's return type.  This includes checking for falling off the end of a non-void function.  Return false if no such check should be made.\n+True if a function's return statements should be checked for matching\n+the function's return type.  This includes checking for falling off the end\n+of a non-void function.  Return false if no such check should be made.\n @end deftypefn\n \n @node Shrink-wrapping separate components\n@@ -5119,15 +5227,26 @@ normally defined in @file{libgcc2.c}.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_STACK_PROTECT_RUNTIME_ENABLED_P (void)\n-Returns true if the target wants GCC's default stack protect runtime support, otherwise return false.  The default implementation always returns true.\n+Returns true if the target wants GCC's default stack protect runtime support,\n+otherwise return false.  The default implementation always returns true.\n @end deftypefn\n \n @deftypefn {Common Target Hook} bool TARGET_SUPPORTS_SPLIT_STACK (bool @var{report}, struct gcc_options *@var{opts})\n-Whether this target supports splitting the stack when the options described in @var{opts} have been passed.  This is called after options have been parsed, so the target may reject splitting the stack in some configurations.  The default version of this hook returns false.  If @var{report} is true, this function may issue a warning or error; if @var{report} is false, it must simply return a value\n+Whether this target supports splitting the stack when the options\n+described in @var{opts} have been passed.  This is called\n+after options have been parsed, so the target may reject splitting\n+the stack in some configurations.  The default version of this hook\n+returns false.  If @var{report} is true, this function may issue a warning\n+or error; if @var{report} is false, it must simply return a value\n @end deftypefn\n \n @deftypefn {Common Target Hook} {vec<const char *>} TARGET_GET_VALID_OPTION_VALUES (int @var{option_code}, const char *@var{prefix})\n-The hook is used for options that have a non-trivial list of possible option values.  OPTION_CODE is option code of opt_code enum type.  PREFIX is used for bash completion and allows an implementation to return more specific completion based on the prefix.  All string values should be allocated from heap memory and consumers should release them.  The result will be pruned to cases with PREFIX if not NULL.\n+The hook is used for options that have a non-trivial list of\n+possible option values.  OPTION_CODE is option code of opt_code\n+enum type.  PREFIX is used for bash completion and allows an implementation\n+to return more specific completion based on the prefix.  All string values\n+should be allocated from heap memory and consumers should release them.\n+The result will be pruned to cases with PREFIX if not NULL.\n @end deftypefn\n \n @node Miscellaneous Register Hooks\n@@ -5987,7 +6106,9 @@ correct for most targets.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_VECTORIZE_VECTOR_ALIGNMENT_REACHABLE (const_tree @var{type}, bool @var{is_packed})\n-Return true if vector alignment is reachable (by peeling N iterations) for the given scalar type @var{type}.  @var{is_packed} is false if the scalar access using @var{type} is known to be naturally aligned.\n+Return true if vector alignment is reachable (by peeling N iterations)\n+for the given scalar type @var{type}.  @var{is_packed} is false if the scalar\n+access using @var{type} is known to be naturally aligned.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_VECTORIZE_VEC_PERM_CONST (machine_mode @var{mode}, rtx @var{output}, rtx @var{in0}, rtx @var{in1}, const vec_perm_indices @var{&sel})\n@@ -6121,19 +6242,37 @@ all zeros.  GCC can then try to branch around the instruction instead.\n @end deftypefn\n \n @deftypefn {Target Hook} {void *} TARGET_VECTORIZE_INIT_COST (class loop *@var{loop_info}, bool @var{costing_for_scalar})\n-This hook should initialize target-specific data structures in preparation for modeling the costs of vectorizing a loop or basic block.  The default allocates three unsigned integers for accumulating costs for the prologue, body, and epilogue of the loop or basic block.  If @var{loop_info} is non-NULL, it identifies the loop being vectorized; otherwise a single block is being vectorized.  If @var{costing_for_scalar} is true, it indicates the current cost model is for the scalar version of a loop or block; otherwise it is for the vector version.\n+This hook should initialize target-specific data structures in preparation\n+for modeling the costs of vectorizing a loop or basic block.  The default\n+allocates three unsigned integers for accumulating costs for the prologue,\n+body, and epilogue of the loop or basic block.  If @var{loop_info} is\n+non-NULL, it identifies the loop being vectorized; otherwise a single block\n+is being vectorized.  If @var{costing_for_scalar} is true, it indicates the\n+current cost model is for the scalar version of a loop or block; otherwise\n+it is for the vector version.\n @end deftypefn\n \n @deftypefn {Target Hook} unsigned TARGET_VECTORIZE_ADD_STMT_COST (class vec_info *@var{}, void *@var{data}, int @var{count}, enum vect_cost_for_stmt @var{kind}, class _stmt_vec_info *@var{stmt_info}, tree @var{vectype}, int @var{misalign}, enum vect_cost_model_location @var{where})\n-This hook should update the target-specific @var{data} in response to adding @var{count} copies of the given @var{kind} of statement to a loop or basic block.  The default adds the builtin vectorizer cost for the copies of the statement to the accumulator specified by @var{where}, (the prologue, body, or epilogue) and returns the amount added.  The return value should be viewed as a tentative cost that may later be revised.\n+This hook should update the target-specific @var{data} in response to\n+adding @var{count} copies of the given @var{kind} of statement to a\n+loop or basic block.  The default adds the builtin vectorizer cost for\n+the copies of the statement to the accumulator specified by @var{where},\n+(the prologue, body, or epilogue) and returns the amount added.  The\n+return value should be viewed as a tentative cost that may later be\n+revised.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_VECTORIZE_FINISH_COST (void *@var{data}, unsigned *@var{prologue_cost}, unsigned *@var{body_cost}, unsigned *@var{epilogue_cost})\n-This hook should complete calculations of the cost of vectorizing a loop or basic block based on @var{data}, and return the prologue, body, and epilogue costs as unsigned integers.  The default returns the value of the three accumulators.\n+This hook should complete calculations of the cost of vectorizing a loop\n+or basic block based on @var{data}, and return the prologue, body, and\n+epilogue costs as unsigned integers.  The default returns the value of\n+the three accumulators.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_VECTORIZE_DESTROY_COST_DATA (void *@var{data})\n-This hook should release @var{data} and any related data structures allocated by TARGET_VECTORIZE_INIT_COST.  The default releases the accumulator.\n+This hook should release @var{data} and any related data structures\n+allocated by TARGET_VECTORIZE_INIT_COST.  The default releases the\n+accumulator.\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_GATHER (const_tree @var{mem_vectype}, const_tree @var{index_type}, int @var{scale})\n@@ -7711,7 +7850,8 @@ the string if a different section name should be used.\n @end deftypevr\n \n @deftypefn {Target Hook} {section *} TARGET_ASM_TM_CLONE_TABLE_SECTION (void)\n-Return the section that should be used for transactional memory clone  tables.\n+Return the section that should be used for transactional memory clone\n+tables.\n @end deftypefn\n \n @deftypefn {Target Hook} {section *} TARGET_ASM_SELECT_RTX_SECTION (machine_mode @var{mode}, rtx @var{x}, unsigned HOST_WIDE_INT @var{align})\n@@ -7985,13 +8125,18 @@ for the file format in use is appropriate.\n @end defmac\n \n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_SOURCE_FILENAME (FILE *@var{file}, const char *@var{name})\n-Output DWARF debugging information which indicates that filename @var{name} is the current source file to the stdio stream @var{file}.\n- \n- This target hook need not be defined if the standard form of output for the file format in use is appropriate.\n+Output DWARF debugging information which indicates that filename\n+@var{name} is the current source file to the stdio stream @var{file}.\n+\n+This target hook need not be defined if the standard form of output\n+for the file format in use is appropriate.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_IDENT (const char *@var{name})\n-Output a string based on @var{name}, suitable for the @samp{#ident}  directive, or the equivalent directive or pragma in non-C-family languages.  If this hook is not defined, nothing is output for the @samp{#ident}  directive.\n+Output a string based on @var{name}, suitable for the @samp{#ident}\n+directive, or the equivalent directive or pragma in non-C-family languages.\n+If this hook is not defined, nothing is output for the @samp{#ident}\n+directive.\n @end deftypefn\n \n @defmac OUTPUT_QUOTED_STRING (@var{stream}, @var{string})\n@@ -8033,7 +8178,11 @@ Return NULL if function should go to default text section.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS (FILE *@var{file}, tree @var{decl}, bool @var{new_is_cold})\n-Used by the target to emit any assembler directives or additional  labels needed when a function is partitioned between different  sections.  Output should be written to @var{file}.  The function  decl is available as @var{decl} and the new section is `cold' if  @var{new_is_cold} is @code{true}.\n+Used by the target to emit any assembler directives or additional\n+labels needed when a function is partitioned between different\n+sections.  Output should be written to @var{file}.  The function\n+decl is available as @var{decl} and the new section is `cold' if\n+@var{new_is_cold} is @code{true}.\n @end deftypefn\n \n @deftypevr {Common Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n@@ -8735,7 +8884,11 @@ systems.  This macro is used in @code{assemble_name}.\n @end defmac\n \n @deftypefn {Target Hook} tree TARGET_MANGLE_ASSEMBLER_NAME (const char *@var{name})\n-Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s @code{assemble_name}, but in memory rather than to a file stream, returning result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and then prepends the @code{USER_LABEL_PREFIX}, if any.\n+Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s\n+@code{assemble_name}, but in memory rather than to a file stream, returning\n+result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The\n+default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and\n+then prepends the @code{USER_LABEL_PREFIX}, if any.\n @end deftypefn\n \n @defmac ASM_OUTPUT_SYMBOL_REF (@var{stream}, @var{sym})\n@@ -9501,7 +9654,9 @@ The default is that no label is emitted.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_ASM_EMIT_EXCEPT_PERSONALITY (rtx @var{personality})\n-If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be used to emit a directive to install a personality hook into the unwind info.  This hook should not be used if dwarf2 unwind info is used.\n+If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be\n+used to emit a directive to install a personality hook into the unwind\n+info.  This hook should not be used if dwarf2 unwind info is used.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_ASM_UNWIND_EMIT (FILE *@var{stream}, rtx_insn *@var{insn})\n@@ -9511,15 +9666,25 @@ returns @code{UI_TARGET}.\n @end deftypefn\n \n @deftypefn {Target Hook} rtx TARGET_ASM_MAKE_EH_SYMBOL_INDIRECT (rtx @var{origsymbol}, bool @var{pubvis})\n-If necessary, modify personality and LSDA references to handle indirection.  The original symbol is in @code{origsymbol} and if @code{pubvis} is true  the symbol is visible outside the TU.\n+If necessary, modify personality and LSDA references to handle indirection.\n+The original symbol is in @code{origsymbol} and if @code{pubvis} is true\n+the symbol is visible outside the TU.\n @end deftypefn\n \n @deftypevr {Target Hook} bool TARGET_ASM_UNWIND_EMIT_BEFORE_INSN\n-True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before the assembly for @var{insn} has been emitted, false if the hook should be called afterward.\n+True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before\n+the assembly for @var{insn} has been emitted, false if the hook should\n+be called afterward.\n @end deftypevr\n \n @deftypefn {Target Hook} bool TARGET_ASM_SHOULD_RESTORE_CFA_STATE (void)\n-For DWARF-based unwind frames, two CFI instructions provide for save and restore of register state.  GCC maintains the current frame address (CFA) separately from the register bank but the unwinder in libgcc preserves this state along with the registers (and this is expected by the code that writes the unwind frames).  This hook allows the target to specify that the CFA data is not saved/restored along with the registers by the target unwinder so that suitable additional instructions should be emitted to restore it.\n+For DWARF-based unwind frames, two CFI instructions provide for save and\n+restore of register state.  GCC maintains the current frame address (CFA)\n+separately from the register bank but the unwinder in libgcc preserves this\n+state along with the registers (and this is expected by the code that writes\n+the unwind frames).  This hook allows the target to specify that the CFA data\n+is not saved/restored along with the registers by the target unwinder so that\n+suitable additional instructions should be emitted to restore it.\n @end deftypefn\n \n @node Exception Region Output\n@@ -10124,7 +10289,9 @@ If insn length is to be regarded as reliable, set the hook to\n @end deftypefn\n \n @deftypevr {Target Hook} bool TARGET_WANT_DEBUG_PUB_SECTIONS\n-True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections should be emitted.  These sections are not used on most platforms, and in particular GDB does not use them.\n+True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections\n+should be emitted.  These sections are not used on most platforms, and\n+in particular GDB does not use them.\n @end deftypevr\n \n @deftypevr {Target Hook} bool TARGET_DELAY_SCHED2\n@@ -10307,27 +10474,52 @@ switch is needed / supplied.\n @end defmac\n \n @deftypefn {Target Hook} void TARGET_MODE_EMIT (int @var{entity}, int @var{mode}, int @var{prev_mode}, HARD_REG_SET @var{regs_live})\n-Generate one or more insns to set @var{entity} to @var{mode}. @var{hard_reg_live} is the set of hard registers live at the point where the insn(s) are to be inserted. @var{prev_moxde} indicates the mode to switch from. Sets of a lower numbered entity will be emitted before sets of a higher numbered entity to a mode of the same or lower priority.\n+Generate one or more insns to set @var{entity} to @var{mode}.\n+@var{hard_reg_live} is the set of hard registers live at the point where\n+the insn(s) are to be inserted. @var{prev_moxde} indicates the mode\n+to switch from. Sets of a lower numbered entity will be emitted before\n+sets of a higher numbered entity to a mode of the same or lower priority.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_NEEDED (int @var{entity}, rtx_insn *@var{insn})\n-@var{entity} is an integer specifying a mode-switched entity.  If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro to return an integer value not larger than the corresponding element in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity} must be switched into prior to the execution of @var{insn}.\n+@var{entity} is an integer specifying a mode-switched entity.\n+If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro\n+to return an integer value not larger than the corresponding element\n+in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity}\n+must be switched into prior to the execution of @var{insn}.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_AFTER (int @var{entity}, int @var{mode}, rtx_insn *@var{insn})\n-@var{entity} is an integer specifying a mode-switched entity.  If this macro is defined, it is evaluated for every @var{insn} during mode switching.  It determines the mode that an insn results in (if different from the incoming mode).\n+@var{entity} is an integer specifying a mode-switched entity.\n+If this macro is defined, it is evaluated for every @var{insn} during mode\n+switching.  It determines the mode that an insn results\n+in (if different from the incoming mode).\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_ENTRY (int @var{entity})\n-If this macro is defined, it is evaluated for every @var{entity} that needs mode switching.  It should evaluate to an integer, which is a mode that @var{entity} is assumed to be switched to at function entry.  If @code{TARGET_MODE_ENTRY} is defined then @code{TARGET_MODE_EXIT} must be defined.\n+If this macro is defined, it is evaluated for every @var{entity} that\n+needs mode switching.  It should evaluate to an integer, which is a mode\n+that @var{entity} is assumed to be switched to at function entry.\n+If @code{TARGET_MODE_ENTRY} is defined then @code{TARGET_MODE_EXIT}\n+must be defined.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_EXIT (int @var{entity})\n-If this macro is defined, it is evaluated for every @var{entity} that needs mode switching.  It should evaluate to an integer, which is a mode that @var{entity} is assumed to be switched to at function exit.  If @code{TARGET_MODE_EXIT} is defined then @code{TARGET_MODE_ENTRY} must be defined.\n+If this macro is defined, it is evaluated for every @var{entity} that\n+needs mode switching.  It should evaluate to an integer, which is a mode\n+that @var{entity} is assumed to be switched to at function exit.\n+If @code{TARGET_MODE_EXIT} is defined then @code{TARGET_MODE_ENTRY}\n+must be defined.\n @end deftypefn\n \n @deftypefn {Target Hook} int TARGET_MODE_PRIORITY (int @var{entity}, int @var{n})\n-This macro specifies the order in which modes for @var{entity} are processed. 0 is the highest priority, @code{NUM_MODES_FOR_MODE_SWITCHING[@var{entity}] - 1} the lowest.  The value of the macro should be an integer designating a mode for @var{entity}.  For any fixed @var{entity}, @code{mode_priority} (@var{entity}, @var{n}) shall be a bijection in 0 @dots{} @code{num_modes_for_mode_switching[@var{entity}] - 1}.\n+This macro specifies the order in which modes for @var{entity}\n+are processed. 0 is the highest priority,\n+@code{NUM_MODES_FOR_MODE_SWITCHING[@var{entity}] - 1} the lowest.\n+The value of the macro should be an integer designating a mode\n+for @var{entity}.  For any fixed @var{entity}, @code{mode_priority}\n+(@var{entity}, @var{n}) shall be a bijection in 0 @dots{}\n+@code{num_modes_for_mode_switching[@var{entity}] - 1}.\n @end deftypefn\n \n @node Target Attributes\n@@ -10401,7 +10593,9 @@ to perform initial processing of the @samp{dllimport} and\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_VALID_DLLIMPORT_ATTRIBUTE_P (const_tree @var{decl})\n-@var{decl} is a variable or function with @code{__attribute__((dllimport))} specified.  Use this hook if the target needs to add extra validation checks to @code{handle_dll_attribute}.\n+@var{decl} is a variable or function with @code{__attribute__((dllimport))}\n+specified.  Use this hook if the target needs to add extra validation\n+checks to @code{handle_dll_attribute}.\n @end deftypefn\n \n @defmac TARGET_DECLSPEC\n@@ -10516,7 +10710,9 @@ specific target options and the caller does not use the same options.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_RELAYOUT_FUNCTION (tree @var{fndecl})\n-This target hook fixes function @var{fndecl} after attributes are processed. Default does nothing. On ARM, the default function's alignment is updated with the attribute target.\n+This target hook fixes function @var{fndecl} after attributes are processed.\n+Default does nothing. On ARM, the default function's alignment is updated\n+with the attribute target.\n @end deftypefn\n \n @node Emulated TLS\n@@ -10720,7 +10916,12 @@ method.  The default is to return @code{true}.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY (tree @var{decl})\n-@var{decl} is a virtual table, virtual table table, typeinfo object, or other similar implicit class data object that will be emitted with external linkage in this translation unit.  No ELF visibility has been explicitly specified.  If the target needs to specify a visibility other than that of the containing class, use this hook to set @code{DECL_VISIBILITY} and @code{DECL_VISIBILITY_SPECIFIED}.\n+@var{decl} is a virtual table, virtual table table, typeinfo object,\n+or other similar implicit class data object that will be emitted with\n+external linkage in this translation unit.  No ELF visibility has been\n+explicitly specified.  If the target needs to specify a visibility\n+other than that of the containing class, use this hook to set\n+@code{DECL_VISIBILITY} and @code{DECL_VISIBILITY_SPECIFIED}.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT (void)\n@@ -10752,7 +10953,9 @@ unloaded. The default is to return false.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_CXX_ADJUST_CLASS_AT_DEFINITION (tree @var{type})\n-@var{type} is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that has just been defined.  Use this hook to make adjustments to the class (eg, tweak visibility or perform any other required target modifications).\n+@var{type} is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that has just\n+been defined.  Use this hook to make adjustments to the class (eg, tweak\n+visibility or perform any other required target modifications).\n @end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_CXX_DECL_MANGLING_CONTEXT (const_tree @var{decl})\n@@ -11359,13 +11562,24 @@ files @code{__STDC__} will always expand to 1.\n @end defmac\n \n @deftypefn {C Target Hook} {const char *} TARGET_C_PREINCLUDE (void)\n-Define this hook to return the name of a header file to be included at the start of all compilations, as if it had been included with @code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is not defined, or the header is not found, or if the user specifies @option{-ffreestanding} or @option{-nostdinc}, no header is included.\n+Define this hook to return the name of a header file to be included at\n+the start of all compilations, as if it had been included with\n+@code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is\n+not defined, or the header is not found, or if the user specifies\n+@option{-ffreestanding} or @option{-nostdinc}, no header is included.\n \n- This hook can be used together with a header provided by the system C library to implement ISO C requirements for certain macros to be predefined that describe properties of the whole implementation rather than just the compiler.\n+This hook can be used together with a header provided by the system C\n+library to implement ISO C requirements for certain macros to be\n+predefined that describe properties of the whole implementation rather\n+than just the compiler.\n @end deftypefn\n \n @deftypefn {C Target Hook} bool TARGET_CXX_IMPLICIT_EXTERN_C (const char*@var{})\n-Define this hook to add target-specific C++ implicit extern C functions. If this function returns true for the name of a file-scope function, that function implicitly gets extern \"C\" linkage rather than whatever language linkage the declaration would normally have.  An example of such function is WinMain on Win32 targets.\n+Define this hook to add target-specific C++ implicit extern C functions.\n+If this function returns true for the name of a file-scope function, that\n+function implicitly gets extern \"C\" linkage rather than whatever language\n+linkage the declaration would normally have.  An example of such function\n+is WinMain on Win32 targets.\n @end deftypefn\n \n @defmac SYSTEM_IMPLICIT_EXTERN_C\n@@ -11763,11 +11977,17 @@ loops containing function calls or branch on table instructions.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_LEGITIMATE_COMBINED_INSN (rtx_insn *@var{insn})\n-Take an instruction in @var{insn} and return @code{false} if the instruction is not appropriate as a combination of two or more instructions.  The default is to accept all instructions.\n+Take an instruction in @var{insn} and return @code{false} if the instruction\n+is not appropriate as a combination of two or more instructions.  The\n+default is to accept all instructions.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_CAN_FOLLOW_JUMP (const rtx_insn *@var{follower}, const rtx_insn *@var{followee})\n-FOLLOWER and FOLLOWEE are JUMP_INSN instructions;  return true if FOLLOWER may be modified to follow FOLLOWEE;  false, if it can't.  For example, on some targets, certain kinds of branches can't be made to  follow through a hot/cold partitioning.\n+FOLLOWER and FOLLOWEE are JUMP_INSN instructions;\n+return true if FOLLOWER may be modified to follow FOLLOWEE;\n+false, if it can't.\n+For example, on some targets, certain kinds of branches can't be made to\n+follow through a hot/cold partitioning.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_COMMUTATIVE_P (const_rtx @var{x}, int @var{outer_code})\n@@ -12107,7 +12327,9 @@ memory model bits are allowed.\n @end deftypefn\n \n @deftypevr {Target Hook} {unsigned char} TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n-This value should be set if the result written by @code{atomic_test_and_set} is not exactly 1, i.e.@: the @code{bool} @code{true}.\n+This value should be set if the result written by\n+@code{atomic_test_and_set} is not exactly 1, i.e.@: the\n+@code{bool} @code{true}.\n @end deftypevr\n \n @deftypefn {Target Hook} bool TARGET_HAS_IFUNC_P (void)\n@@ -12117,11 +12339,27 @@ The default value of this hook is based on target's libc.\n @end deftypefn\n \n @deftypefn {Target Hook} {unsigned int} TARGET_ATOMIC_ALIGN_FOR_MODE (machine_mode @var{mode})\n-If defined, this function returns an appropriate alignment in bits for an atomic object of machine_mode @var{mode}.  If 0 is returned then the default alignment for the specified mode is used. \n+If defined, this function returns an appropriate alignment in bits for an\n+atomic object of machine_mode @var{mode}.  If 0 is returned then the\n+default alignment for the specified mode is used.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_ATOMIC_ASSIGN_EXPAND_FENV (tree *@var{hold}, tree *@var{clear}, tree *@var{update})\n-ISO C11 requires atomic compound assignments that may raise floating-point exceptions to raise exceptions corresponding to the arithmetic operation whose result was successfully stored in a compare-and-exchange sequence.  This requires code equivalent to calls to @code{feholdexcept}, @code{feclearexcept} and @code{feupdateenv} to be generated at appropriate points in the compare-and-exchange sequence.  This hook should set @code{*@var{hold}} to an expression equivalent to the call to @code{feholdexcept}, @code{*@var{clear}} to an expression equivalent to the call to @code{feclearexcept} and @code{*@var{update}} to an expression equivalent to the call to @code{feupdateenv}.  The three expressions are @code{NULL_TREE} on entry to the hook and may be left as @code{NULL_TREE} if no code is required in a particular place.  The default implementation leaves all three expressions as @code{NULL_TREE}.  The @code{__atomic_feraiseexcept} function from @code{libatomic} may be of use as part of the code generated in @code{*@var{update}}.\n+ISO C11 requires atomic compound assignments that may raise floating-point\n+exceptions to raise exceptions corresponding to the arithmetic operation\n+whose result was successfully stored in a compare-and-exchange sequence.\n+This requires code equivalent to calls to @code{feholdexcept},\n+@code{feclearexcept} and @code{feupdateenv} to be generated at\n+appropriate points in the compare-and-exchange sequence.  This hook should\n+set @code{*@var{hold}} to an expression equivalent to the call to\n+@code{feholdexcept}, @code{*@var{clear}} to an expression equivalent to\n+the call to @code{feclearexcept} and @code{*@var{update}} to an expression\n+equivalent to the call to @code{feupdateenv}.  The three expressions are\n+@code{NULL_TREE} on entry to the hook and may be left as @code{NULL_TREE}\n+if no code is required in a particular place.  The default implementation\n+leaves all three expressions as @code{NULL_TREE}.  The\n+@code{__atomic_feraiseexcept} function from @code{libatomic} may be of use\n+as part of the code generated in @code{*@var{update}}.\n @end deftypefn\n \n @deftypefn {Target Hook} void TARGET_RECORD_OFFLOAD_SYMBOL (tree)"}, {"sha": "ebe5803109b586457506494329c906a8fb31e415", "filename": "gcc/target.def", "status": "modified", "additions": 260, "deletions": 225, "changes": 485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3907c222646174ec7e405491435aefc50bf1bb/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=4d3907c222646174ec7e405491435aefc50bf1bb", "patch": "@@ -179,19 +179,19 @@ The default is that no label is emitted.\",\n /* Emit a directive for setting the personality for the function.  */\n DEFHOOK\n (emit_except_personality,\n- \"If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be\\\n- used to emit a directive to install a personality hook into the unwind\\\n- info.  This hook should not be used if dwarf2 unwind info is used.\",\n+ \"If the target implements @code{TARGET_ASM_UNWIND_EMIT}, this hook may be\\n\\\n+used to emit a directive to install a personality hook into the unwind\\n\\\n+info.  This hook should not be used if dwarf2 unwind info is used.\",\n  void, (rtx personality),\n  NULL)\n \n /* If necessary, modify personality and LSDA references to handle\n    indirection.  This is used when the assembler supports CFI directives.  */\n DEFHOOK\n (make_eh_symbol_indirect,\n- \"If necessary, modify personality and LSDA references to handle indirection.\\\n-  The original symbol is in @code{origsymbol} and if @code{pubvis} is true\\\n-  the symbol is visible outside the TU.\",\n+ \"If necessary, modify personality and LSDA references to handle indirection.\\n\\\n+The original symbol is in @code{origsymbol} and if @code{pubvis} is true\\n\\\n+the symbol is visible outside the TU.\",\n  rtx, (rtx origsymbol, bool pubvis),\n  NULL)\n \n@@ -206,22 +206,22 @@ returns @code{UI_TARGET}.\",\n \n DEFHOOKPOD\n (unwind_emit_before_insn,\n- \"True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before\\\n- the assembly for @var{insn} has been emitted, false if the hook should\\\n- be called afterward.\",\n+ \"True if the @code{TARGET_ASM_UNWIND_EMIT} hook should be called before\\n\\\n+the assembly for @var{insn} has been emitted, false if the hook should\\n\\\n+be called afterward.\",\n  bool, true)\n \n /* Return true if the target needs extra instructions to restore the current\n    frame address after a DW_CFA_restore_state opcode.  */\n DEFHOOK\n (should_restore_cfa_state,\n- \"For DWARF-based unwind frames, two CFI instructions provide for save and\\\n- restore of register state.  GCC maintains the current frame address (CFA)\\\n- separately from the register bank but the unwinder in libgcc preserves this\\\n- state along with the registers (and this is expected by the code that writes\\\n- the unwind frames).  This hook allows the target to specify that the CFA data\\\n- is not saved/restored along with the registers by the target unwinder so that\\\n- suitable additional instructions should be emitted to restore it.\",\n+ \"For DWARF-based unwind frames, two CFI instructions provide for save and\\n\\\n+restore of register state.  GCC maintains the current frame address (CFA)\\n\\\n+separately from the register bank but the unwinder in libgcc preserves this\\n\\\n+state along with the registers (and this is expected by the code that writes\\n\\\n+the unwind frames).  This hook allows the target to specify that the CFA data\\n\\\n+is not saved/restored along with the registers by the target unwinder so that\\n\\\n+suitable additional instructions should be emitted to restore it.\",\n  bool, (void),\n  hook_bool_void_false)\n \n@@ -483,11 +483,11 @@ Return NULL if function should go to default text section.\",\n /* Output the assembler code for function exit.  */\n DEFHOOK\n (function_switched_text_sections,\n- \"Used by the target to emit any assembler directives or additional\\\n-  labels needed when a function is partitioned between different\\\n-  sections.  Output should be written to @var{file}.  The function\\\n-  decl is available as @var{decl} and the new section is `cold' if\\\n-  @var{new_is_cold} is @code{true}.\",\n+ \"Used by the target to emit any assembler directives or additional\\n\\\n+labels needed when a function is partitioned between different\\n\\\n+sections.  Output should be written to @var{file}.  The function\\n\\\n+decl is available as @var{decl} and the new section is `cold' if\\n\\\n+@var{new_is_cold} is @code{true}.\",\n  void, (FILE *file, tree decl, bool new_is_cold),\n  default_function_switched_text_sections)\n \n@@ -599,8 +599,8 @@ the string if a different section name should be used.\",\n /* Return the section to be used for transactional memory clone tables.  */\n DEFHOOK\n (tm_clone_table_section,\n- \"Return the section that should be used for transactional memory clone\\\n-  tables.\",\n+ \"Return the section that should be used for transactional memory clone\\n\\\n+tables.\",\n  section *, (void), default_clone_table_section)\n \n /* Output a constructor for a symbol with a given priority.  */\n@@ -810,10 +810,10 @@ is @code{NULL}, which disables the use of section anchors altogether.\",\n \n DEFHOOK\n (output_ident,\n- \"Output a string based on @var{name}, suitable for the @samp{#ident} \\\n- directive, or the equivalent directive or pragma in non-C-family languages. \\\n- If this hook is not defined, nothing is output for the @samp{#ident} \\\n- directive.\",\n+ \"Output a string based on @var{name}, suitable for the @samp{#ident}\\n\\\n+directive, or the equivalent directive or pragma in non-C-family languages.\\n\\\n+If this hook is not defined, nothing is output for the @samp{#ident}\\n\\\n+directive.\",\n  void, (const char *name),\n  hook_void_constcharptr)\n \n@@ -858,11 +858,11 @@ to generate it on the spot.\",\n \n DEFHOOK\n (output_source_filename,\n- \"Output DWARF debugging information which indicates that filename\\\n- @var{name} is the current source file to the stdio stream @var{file}.\\n\\\n- \\n\\\n- This target hook need not be defined if the standard form of output\\\n- for the file format in use is appropriate.\",\n+ \"Output DWARF debugging information which indicates that filename\\n\\\n+@var{name} is the current source file to the stdio stream @var{file}.\\n\\\n+\\n\\\n+This target hook need not be defined if the standard form of output\\n\\\n+for the file format in use is appropriate.\",\n  void ,(FILE *file, const char *name),\n  default_asm_output_source_filename)\n \n@@ -918,11 +918,11 @@ DEFHOOK_UNDOC\n    ASM_OUTPUT_LABELREF, returning result as an IDENTIFIER_NODE.  */\n DEFHOOK\n (mangle_assembler_name,\n- \"Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s\\\n- @code{assemble_name}, but in memory rather than to a file stream, returning\\\n- result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The\\\n- default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and\\\n- then prepends the @code{USER_LABEL_PREFIX}, if any.\",\n+ \"Given a symbol @var{name}, perform same mangling as @code{varasm.c}'s\\n\\\n+@code{assemble_name}, but in memory rather than to a file stream, returning\\n\\\n+result as an @code{IDENTIFIER_NODE}.  Required for correct LTO symtabs.  The\\n\\\n+default implementation calls the @code{TARGET_STRIP_NAME_ENCODING} hook and\\n\\\n+then prepends the @code{USER_LABEL_PREFIX}, if any.\",\n  tree, (const char *name),\n  default_mangle_assembler_name)\n \n@@ -1848,7 +1848,9 @@ correct for most targets.\",\n    iterations) for the given scalar type.  */\n DEFHOOK\n (vector_alignment_reachable,\n- \"Return true if vector alignment is reachable (by peeling N iterations) for the given scalar type @var{type}.  @var{is_packed} is false if the scalar access using @var{type} is known to be naturally aligned.\",\n+ \"Return true if vector alignment is reachable (by peeling N iterations)\\n\\\n+for the given scalar type @var{type}.  @var{is_packed} is false if the scalar\\n\\\n+access using @var{type} is known to be naturally aligned.\",\n  bool, (const_tree type, bool is_packed),\n  default_builtin_vector_alignment_reachable)\n \n@@ -2029,14 +2031,14 @@ stores.\",\n /* Target function to initialize the cost model for a loop or block.  */\n DEFHOOK\n (init_cost,\n- \"This hook should initialize target-specific data structures in preparation \"\n- \"for modeling the costs of vectorizing a loop or basic block.  The default \"\n- \"allocates three unsigned integers for accumulating costs for the prologue, \"\n- \"body, and epilogue of the loop or basic block.  If @var{loop_info} is \"\n- \"non-NULL, it identifies the loop being vectorized; otherwise a single block \"\n- \"is being vectorized.  If @var{costing_for_scalar} is true, it indicates the \"\n- \"current cost model is for the scalar version of a loop or block; otherwise \"\n- \"it is for the vector version.\",\n+ \"This hook should initialize target-specific data structures in preparation\\n\\\n+for modeling the costs of vectorizing a loop or basic block.  The default\\n\\\n+allocates three unsigned integers for accumulating costs for the prologue,\\n\\\n+body, and epilogue of the loop or basic block.  If @var{loop_info} is\\n\\\n+non-NULL, it identifies the loop being vectorized; otherwise a single block\\n\\\n+is being vectorized.  If @var{costing_for_scalar} is true, it indicates the\\n\\\n+current cost model is for the scalar version of a loop or block; otherwise\\n\\\n+it is for the vector version.\",\n  void *,\n  (class loop *loop_info, bool costing_for_scalar),\n  default_init_cost)\n@@ -2046,13 +2048,13 @@ DEFHOOK\n     block.  */\n DEFHOOK\n (add_stmt_cost,\n- \"This hook should update the target-specific @var{data} in response to \"\n- \"adding @var{count} copies of the given @var{kind} of statement to a \"\n- \"loop or basic block.  The default adds the builtin vectorizer cost for \"\n- \"the copies of the statement to the accumulator specified by @var{where}, \"\n- \"(the prologue, body, or epilogue) and returns the amount added.  The \"\n- \"return value should be viewed as a tentative cost that may later be \"\n- \"revised.\",\n+ \"This hook should update the target-specific @var{data} in response to\\n\\\n+adding @var{count} copies of the given @var{kind} of statement to a\\n\\\n+loop or basic block.  The default adds the builtin vectorizer cost for\\n\\\n+the copies of the statement to the accumulator specified by @var{where},\\n\\\n+(the prologue, body, or epilogue) and returns the amount added.  The\\n\\\n+return value should be viewed as a tentative cost that may later be\\n\\\n+revised.\",\n  unsigned,\n  (class vec_info *, void *data, int count, enum vect_cost_for_stmt kind,\n   class _stmt_vec_info *stmt_info, tree vectype, int misalign,\n@@ -2063,10 +2065,10 @@ DEFHOOK\n    loop or block.  */\n DEFHOOK\n (finish_cost,\n- \"This hook should complete calculations of the cost of vectorizing a loop \"\n- \"or basic block based on @var{data}, and return the prologue, body, and \"\n- \"epilogue costs as unsigned integers.  The default returns the value of \"\n- \"the three accumulators.\",\n+ \"This hook should complete calculations of the cost of vectorizing a loop\\n\\\n+or basic block based on @var{data}, and return the prologue, body, and\\n\\\n+epilogue costs as unsigned integers.  The default returns the value of\\n\\\n+the three accumulators.\",\n  void,\n  (void *data, unsigned *prologue_cost, unsigned *body_cost,\n   unsigned *epilogue_cost),\n@@ -2075,9 +2077,9 @@ DEFHOOK\n /* Function to delete target-specific cost modeling data.  */\n DEFHOOK\n (destroy_cost_data,\n- \"This hook should release @var{data} and any related data structures \"\n- \"allocated by TARGET_VECTORIZE_INIT_COST.  The default releases the \"\n- \"accumulator.\",\n+ \"This hook should release @var{data} and any related data structures\\n\\\n+allocated by TARGET_VECTORIZE_INIT_COST.  The default releases the\\n\\\n+accumulator.\",\n  void,\n  (void *data),\n  default_destroy_cost_data)\n@@ -2349,13 +2351,13 @@ DEFHOOK_UNDOC\n \n DEFHOOK\n (float_exceptions_rounding_supported_p,\n- \"Returns true if the target supports IEEE 754 floating-point exceptions\\\n- and rounding modes, false otherwise.  This is intended to relate to the\\\n- @code{float} and @code{double} types, but not necessarily @code{long double}.\\\n- By default, returns true if the @code{adddf3} instruction pattern is\\\n- available and false otherwise, on the assumption that hardware floating\\\n- point supports exceptions and rounding modes but software floating point\\\n- does not.\",\n+ \"Returns true if the target supports IEEE 754 floating-point exceptions\\n\\\n+and rounding modes, false otherwise.  This is intended to relate to the\\n\\\n+@code{float} and @code{double} types, but not necessarily @code{long double}.\\n\\\n+By default, returns true if the @code{adddf3} instruction pattern is\\n\\\n+available and false otherwise, on the assumption that hardware floating\\n\\\n+point supports exceptions and rounding modes but software floating point\\n\\\n+does not.\",\n  bool, (void),\n  default_float_exceptions_rounding_supported_p)\n \n@@ -2678,11 +2680,11 @@ cannot_modify_jumps_past_reload_p ()\\n\\\n /* True if FOLLOWER may be modified to follow FOLLOWEE.  */\n DEFHOOK\n (can_follow_jump,\n- \"FOLLOWER and FOLLOWEE are JUMP_INSN instructions;\\\n-  return true if FOLLOWER may be modified to follow FOLLOWEE;\\\n-  false, if it can't.\\\n-  For example, on some targets, certain kinds of branches can't be made to\\\n-  follow through a hot/cold partitioning.\",\n+ \"FOLLOWER and FOLLOWEE are JUMP_INSN instructions;\\n\\\n+return true if FOLLOWER may be modified to follow FOLLOWEE;\\n\\\n+false, if it can't.\\n\\\n+For example, on some targets, certain kinds of branches can't be made to\\n\\\n+follow through a hot/cold partitioning.\",\n  bool, (const rtx_insn *follower, const rtx_insn *followee),\n  hook_bool_const_rtx_insn_const_rtx_insn_true)\n \n@@ -3064,11 +3066,11 @@ The default version of this hook use the target macro\\n\\\n    enabled.  */\n DEFHOOK\n (keep_leaf_when_profiled,\n- \"This target hook returns true if the target wants the leaf flag for\\\n- the current function to stay true even if it calls mcount.  This might\\\n- make sense for targets using the leaf flag only to determine whether a\\\n- stack frame needs to be generated or not and for which the call to\\\n- mcount is generated before the function prologue.\",\n+ \"This target hook returns true if the target wants the leaf flag for\\n\\\n+the current function to stay true even if it calls mcount.  This might\\n\\\n+make sense for targets using the leaf flag only to determine whether a\\n\\\n+stack frame needs to be generated or not and for which the call to\\n\\\n+mcount is generated before the function prologue.\",\n  bool, (void),\n  default_keep_leaf_when_profiled)\n \n@@ -3232,7 +3234,7 @@ In order to enforce the representation of @code{mode},\\n\\\n  int, (scalar_int_mode mode, scalar_int_mode rep_mode),\n  default_mode_rep_extended)\n \n- DEFHOOK\n+DEFHOOK\n (setjmp_preserves_nonvolatile_regs_p,\n  \"On some targets, it is assumed that the compiler will spill all pseudos\\n\\\n   that are live across a call to @code{setjmp}, while other targets treat\\n\\\n@@ -3259,11 +3261,11 @@ hook returns true for both @code{ptr_mode} and @code{Pmode}.\",\n /* Disambiguate with errno.  */\n DEFHOOK\n (ref_may_alias_errno,\n- \"Define this to return nonzero if the memory reference @var{ref}\\\n-  may alias with the system C library errno location.  The default\\\n-  version of this hook assumes the system C library errno location\\\n-  is either a declaration of type int or accessed by dereferencing\\\n-  a pointer to int.\",\n+ \"Define this to return nonzero if the memory reference @var{ref}\\n\\\n+may alias with the system C library errno location.  The default\\n\\\n+version of this hook assumes the system C library errno location\\n\\\n+is either a declaration of type int or accessed by dereferencing\\n\\\n+a pointer to int.\",\n  bool, (ao_ref *ref),\n  default_ref_may_alias_errno)\n \n@@ -3936,7 +3938,8 @@ such as certain MIPS architectures possess both branches with and without\\n\\\n delay slots.  As the eager delay slot filler can decrease performance,\\n\\\n disabling it is beneficial when ordinary branches are available.  Use of\\n\\\n delay slot branches filled using the basic filler is often still desirable\\n\\\n-as the delay slot can hide a pipeline bubble.\", bool, (void),\n+as the delay slot can hide a pipeline bubble.\",\n+  bool, (void),\n   hook_bool_void_false)\n \n /* Return where to allocate pseudo for a given hard register initial value.  */\n@@ -4330,8 +4333,8 @@ normally defined in @file{libgcc2.c}.\",\n    protector runtime support.  */\n DEFHOOK\n (stack_protect_runtime_enabled_p,\n- \"Returns true if the target wants GCC's default stack protect runtime support,\\\n- otherwise return false.  The default implementation always returns true.\",\n+ \"Returns true if the target wants GCC's default stack protect runtime support,\\n\\\n+otherwise return false.  The default implementation always returns true.\",\n  bool, (void),\n  hook_bool_void_true)\n \n@@ -4454,17 +4457,17 @@ loops containing function calls or branch on table instructions.\",\n /* Returns true for a legitimate combined insn.  */\n DEFHOOK\n (legitimate_combined_insn,\n-\"Take an instruction in @var{insn} and return @code{false} if the instruction\\\n- is not appropriate as a combination of two or more instructions.  The\\\n- default is to accept all instructions.\",\n+\"Take an instruction in @var{insn} and return @code{false} if the instruction\\n\\\n+is not appropriate as a combination of two or more instructions.  The\\n\\\n+default is to accept all instructions.\",\n  bool, (rtx_insn *insn),\n  hook_bool_rtx_insn_true)\n \n DEFHOOK\n (valid_dllimport_attribute_p,\n-\"@var{decl} is a variable or function with @code{__attribute__((dllimport))}\\\n- specified.  Use this hook if the target needs to add extra validation\\\n- checks to @code{handle_dll_attribute}.\",\n+\"@var{decl} is a variable or function with @code{__attribute__((dllimport))}\\n\\\n+specified.  Use this hook if the target needs to add extra validation\\n\\\n+checks to @code{handle_dll_attribute}.\",\n  bool, (const_tree decl),\n  hook_bool_const_tree_true)\n \n@@ -5256,7 +5259,7 @@ HPPA or IA-64.\\n\\\n \\n\\\n Using descriptors for nested functions\\n\\\n eliminates the need for trampolines that reside on the stack and require\\n\\\n-it to be made executable.\",\\\n+it to be made executable.\",\n  int, -1)\n \n /* Return the number of bytes of its own arguments that a function\n@@ -5307,19 +5310,19 @@ number of arguments.\",\n    returned.  */\n DEFHOOK\n (get_raw_result_mode,\n- \"This target hook returns the mode to be used when accessing raw return\\\n- registers in @code{__builtin_return}.  Define this macro if the value\\\n- in @var{reg_raw_mode} is not correct.\",\n+ \"This target hook returns the mode to be used when accessing raw return\\n\\\n+registers in @code{__builtin_return}.  Define this macro if the value\\n\\\n+in @var{reg_raw_mode} is not correct.\",\n  fixed_size_mode, (int regno),\n  default_get_reg_raw_mode)\n \n /* Return a mode wide enough to copy any argument value that might be\n    passed.  */\n DEFHOOK\n (get_raw_arg_mode,\n- \"This target hook returns the mode to be used when accessing raw argument\\\n- registers in @code{__builtin_apply_args}.  Define this macro if the value\\\n- in @var{reg_raw_mode} is not correct.\",\n+ \"This target hook returns the mode to be used when accessing raw argument\\n\\\n+registers in @code{__builtin_apply_args}.  Define this macro if the value\\n\\\n+in @var{reg_raw_mode} is not correct.\",\n  fixed_size_mode, (int regno),\n  default_get_reg_raw_mode)\n \n@@ -5476,97 +5479,97 @@ DEFHOOK\n /* Return true if we use LRA instead of reload.  */\n DEFHOOK\n (lra_p,\n- \"A target hook which returns true if we use LRA instead of reload pass.\\\n-  \\\n-  The default version of this target hook returns true.  New ports\\\n-  should use LRA, and existing ports are encouraged to convert.\",\n+ \"A target hook which returns true if we use LRA instead of reload pass.\\n\\\n+\\n\\\n+The default version of this target hook returns true.  New ports\\n\\\n+should use LRA, and existing ports are encouraged to convert.\",\n  bool, (void),\n  default_lra_p)\n \n /* Return register priority of given hard regno for the current target.  */\n DEFHOOK\n (register_priority,\n- \"A target hook which returns the register priority number to which the\\\n-  register @var{hard_regno} belongs to.  The bigger the number, the\\\n-  more preferable the hard register usage (when all other conditions are\\\n-  the same).  This hook can be used to prefer some hard register over\\\n-  others in LRA.  For example, some x86-64 register usage needs\\\n-  additional prefix which makes instructions longer.  The hook can\\\n-  return lower priority number for such registers make them less favorable\\\n-  and as result making the generated code smaller.\\\n-  \\\n-  The default version of this target hook returns always zero.\",\n+ \"A target hook which returns the register priority number to which the\\n\\\n+register @var{hard_regno} belongs to.  The bigger the number, the\\n\\\n+more preferable the hard register usage (when all other conditions are\\n\\\n+the same).  This hook can be used to prefer some hard register over\\n\\\n+others in LRA.  For example, some x86-64 register usage needs\\n\\\n+additional prefix which makes instructions longer.  The hook can\\n\\\n+return lower priority number for such registers make them less favorable\\n\\\n+and as result making the generated code smaller.\\n\\\n+\\n\\\n+The default version of this target hook returns always zero.\",\n  int, (int),\n  default_register_priority)\n \n /* Return true if we need register usage leveling.  */\n DEFHOOK\n (register_usage_leveling_p,\n- \"A target hook which returns true if we need register usage leveling.\\\n-  That means if a few hard registers are equally good for the\\\n-  assignment, we choose the least used hard register.  The register\\\n-  usage leveling may be profitable for some targets.  Don't use the\\\n-  usage leveling for targets with conditional execution or targets\\\n-  with big register files as it hurts if-conversion and cross-jumping\\\n-  optimizations.\\\n-  \\\n-  The default version of this target hook returns always false.\",\n+ \"A target hook which returns true if we need register usage leveling.\\n\\\n+That means if a few hard registers are equally good for the\\n\\\n+assignment, we choose the least used hard register.  The register\\n\\\n+usage leveling may be profitable for some targets.  Don't use the\\n\\\n+usage leveling for targets with conditional execution or targets\\n\\\n+with big register files as it hurts if-conversion and cross-jumping\\n\\\n+optimizations.\\n\\\n+\\n\\\n+The default version of this target hook returns always false.\",\n  bool, (void),\n  default_register_usage_leveling_p)\n \n /* Return true if maximal address displacement can be different.  */\n DEFHOOK\n (different_addr_displacement_p,\n- \"A target hook which returns true if an address with the same structure\\\n-  can have different maximal legitimate displacement.  For example, the\\\n-  displacement can depend on memory mode or on operand combinations in\\\n-  the insn.\\\n-  \\\n-  The default version of this target hook returns always false.\",\n+ \"A target hook which returns true if an address with the same structure\\n\\\n+can have different maximal legitimate displacement.  For example, the\\n\\\n+displacement can depend on memory mode or on operand combinations in\\n\\\n+the insn.\\n\\\n+\\n\\\n+The default version of this target hook returns always false.\",\n  bool, (void),\n  default_different_addr_displacement_p)\n \n /* Determine class for spilling pseudos of given mode into registers\n    instead of memory.  */\n DEFHOOK\n (spill_class,\n- \"This hook defines a class of registers which could be used for spilling\\\n-  pseudos of the given mode and class, or @code{NO_REGS} if only memory\\\n-  should be used.  Not defining this hook is equivalent to returning\\\n-  @code{NO_REGS} for all inputs.\",\n+ \"This hook defines a class of registers which could be used for spilling\\n\\\n+pseudos of the given mode and class, or @code{NO_REGS} if only memory\\n\\\n+should be used.  Not defining this hook is equivalent to returning\\n\\\n+@code{NO_REGS} for all inputs.\",\n  reg_class_t, (reg_class_t, machine_mode),\n  NULL)\n \n /* Determine an additional allocno class.  */\n DEFHOOK\n (additional_allocno_class_p,\n- \"This hook should return @code{true} if given class of registers should\\\n-  be an allocno class in any way.  Usually RA uses only one register\\\n-  class from all classes containing the same register set.  In some\\\n-  complicated cases, you need to have two or more such classes as\\\n-  allocno ones for RA correct work.  Not defining this hook is\\\n-  equivalent to returning @code{false} for all inputs.\",\n+ \"This hook should return @code{true} if given class of registers should\\n\\\n+be an allocno class in any way.  Usually RA uses only one register\\n\\\n+class from all classes containing the same register set.  In some\\n\\\n+complicated cases, you need to have two or more such classes as\\n\\\n+allocno ones for RA correct work.  Not defining this hook is\\n\\\n+equivalent to returning @code{false} for all inputs.\",\n  bool, (reg_class_t),\n  hook_bool_reg_class_t_false)\n \n DEFHOOK\n (cstore_mode,\n- \"This hook defines the machine mode to use for the boolean result of\\\n-  conditional store patterns.  The ICODE argument is the instruction code\\\n-  for the cstore being performed.  Not definiting this hook is the same\\\n-  as accepting the mode encoded into operand 0 of the cstore expander\\\n-  patterns.\",\n+ \"This hook defines the machine mode to use for the boolean result of\\n\\\n+conditional store patterns.  The ICODE argument is the instruction code\\n\\\n+for the cstore being performed.  Not definiting this hook is the same\\n\\\n+as accepting the mode encoded into operand 0 of the cstore expander\\n\\\n+patterns.\",\n   scalar_int_mode, (enum insn_code icode),\n   default_cstore_mode)\n \n /* This target hook allows the backend to compute the register pressure\n    classes to use.  */\n DEFHOOK\n (compute_pressure_classes,\n- \"A target hook which lets a backend compute the set of pressure classes to\\\n-  be used by those optimization passes which take register pressure into\\\n-  account, as opposed to letting IRA compute them.  It returns the number of\\\n-  register classes stored in the array @var{pressure_classes}.\",\n+ \"A target hook which lets a backend compute the set of pressure classes to\\n\\\n+be used by those optimization passes which take register pressure into\\n\\\n+account, as opposed to letting IRA compute them.  It returns the number of\\n\\\n+register classes stored in the array @var{pressure_classes}.\",\n  int, (enum reg_class *pressure_classes), NULL)\n \n /* True if a structure, union or array with MODE containing FIELD should\n@@ -5590,7 +5593,7 @@ Normally, this is not needed.\",\n DEFHOOK\n (expand_divmod_libfunc,\n  \"Define this hook for enabling divmod transform if the port does not have\\n\\\n-hardware divmod insn but defines target-specific divmod libfuncs.\", \n+hardware divmod insn but defines target-specific divmod libfuncs.\",\n  void, (rtx libfunc, machine_mode mode, rtx op0, rtx op1, rtx *quot, rtx *rem),\n  NULL)\n \n@@ -5830,16 +5833,16 @@ in words.\",\n \n DEFHOOK\n (preferred_rename_class,\n- \"A target hook that places additional preference on the register\\\n- class to use when it is necessary to rename a register in class\\\n- @var{rclass} to another class, or perhaps @var{NO_REGS}, if no\\\n- preferred register class is found or hook @code{preferred_rename_class}\\\n- is not implemented.\\\n- Sometimes returning a more restrictive class makes better code.  For\\\n- example, on ARM, thumb-2 instructions using @code{LO_REGS} may be\\\n- smaller than instructions using @code{GENERIC_REGS}.  By returning\\\n- @code{LO_REGS} from @code{preferred_rename_class}, code size can\\\n- be reduced.\",\n+ \"A target hook that places additional preference on the register\\n\\\n+class to use when it is necessary to rename a register in class\\n\\\n+@var{rclass} to another class, or perhaps @var{NO_REGS}, if no\\n\\\n+preferred register class is found or hook @code{preferred_rename_class}\\n\\\n+is not implemented.\\n\\\n+Sometimes returning a more restrictive class makes better code.  For\\n\\\n+example, on ARM, thumb-2 instructions using @code{LO_REGS} may be\\n\\\n+smaller than instructions using @code{GENERIC_REGS}.  By returning\\n\\\n+@code{LO_REGS} from @code{preferred_rename_class}, code size can\\n\\\n+be reduced.\",\n  reg_class_t, (reg_class_t rclass),\n  default_preferred_rename_class)\n \n@@ -6145,11 +6148,11 @@ these registers when the target switches are opposed to them.)\",\n DEFHOOK\n (stack_clash_protection_alloca_probe_range,\n  \"Some targets have an ABI defined interval for which no probing needs to be done.\\n\\\n-When a probe does need to be done this same interval is used as the probe distance \\\n+When a probe does need to be done this same interval is used as the probe distance\\n\\\n up when doing stack clash protection for alloca.\\n\\\n On such targets this value can be set to override the default probing up interval.\\n\\\n-Define this variable to return nonzero if such a probe range is required or zero otherwise.  \\\n-Defining this hook also requires your functions which make use of alloca to have at least 8 byes\\\n+Define this variable to return nonzero if such a probe range is required or zero otherwise.\\n\\\n+Defining this hook also requires your functions which make use of alloca to have at least 8 byes\\n\\\n of outgoing arguments.  If this is not the case the stack will be corrupted.\\n\\\n You need not define this macro if it would always have the value zero.\",\n  HOST_WIDE_INT, (void),\n@@ -6171,22 +6174,22 @@ DEFHOOK_UNDOC\n \n DEFHOOK\n (excess_precision,\n- \"Return a value, with the same meaning as the C99 macro\\\n- @code{FLT_EVAL_METHOD} that describes which excess precision should be\\\n- applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\\n- @code{EXCESS_PRECISION_TYPE_FAST}, or\\\n- @code{EXCESS_PRECISION_TYPE_STANDARD}.  For\\\n- @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\\\n- precision and range operations will be implictly evaluated in regardless\\\n- of the excess precision explicitly added.  For\\\n- @code{EXCESS_PRECISION_TYPE_STANDARD} and\\\n- @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\\\n- explicit excess precision that should be added depending on the\\\n- value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\\\n- Note that unpredictable explicit excess precision does not make sense,\\\n- so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\\\n- when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\\\n- @code{EXCESS_PRECISION_TYPE_FAST}.\",\n+ \"Return a value, with the same meaning as the C99 macro\\n\\\n+@code{FLT_EVAL_METHOD} that describes which excess precision should be\\n\\\n+applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\n\\\n+@code{EXCESS_PRECISION_TYPE_FAST}, or\\n\\\n+@code{EXCESS_PRECISION_TYPE_STANDARD}.  For\\n\\\n+@code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\\n\\\n+precision and range operations will be implictly evaluated in regardless\\n\\\n+of the excess precision explicitly added.  For\\n\\\n+@code{EXCESS_PRECISION_TYPE_STANDARD} and\\n\\\n+@code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\\n\\\n+explicit excess precision that should be added depending on the\\n\\\n+value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\\n\\\n+Note that unpredictable explicit excess precision does not make sense,\\n\\\n+so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\\n\\\n+when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\\n\\\n+@code{EXCESS_PRECISION_TYPE_FAST}.\",\n  enum flt_eval_method, (enum excess_precision_type type),\n  default_excess_precision)\n \n@@ -6272,12 +6275,12 @@ method.  The default is to return @code{true}.\",\n \n DEFHOOK\n (determine_class_data_visibility,\n-\"@var{decl} is a virtual table, virtual table table, typeinfo object,\\\n- or other similar implicit class data object that will be emitted with\\\n- external linkage in this translation unit.  No ELF visibility has been\\\n- explicitly specified.  If the target needs to specify a visibility\\\n- other than that of the containing class, use this hook to set\\\n- @code{DECL_VISIBILITY} and @code{DECL_VISIBILITY_SPECIFIED}.\",\n+\"@var{decl} is a virtual table, virtual table table, typeinfo object,\\n\\\n+or other similar implicit class data object that will be emitted with\\n\\\n+external linkage in this translation unit.  No ELF visibility has been\\n\\\n+explicitly specified.  If the target needs to specify a visibility\\n\\\n+other than that of the containing class, use this hook to set\\n\\\n+@code{DECL_VISIBILITY} and @code{DECL_VISIBILITY_SPECIFIED}.\",\n  void, (tree decl),\n  hook_void_tree)\n \n@@ -6331,9 +6334,9 @@ unloaded. The default is to return false.\",\n \n DEFHOOK\n (adjust_class_at_definition,\n-\"@var{type} is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that has just\\\n- been defined.  Use this hook to make adjustments to the class (eg, tweak\\\n- visibility or perform any other required target modifications).\",\n+\"@var{type} is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that has just\\n\\\n+been defined.  Use this hook to make adjustments to the class (eg, tweak\\n\\\n+visibility or perform any other required target modifications).\",\n  void, (tree type),\n  hook_void_tree)\n \n@@ -6551,7 +6554,9 @@ specific target options and the caller does not use the same options.\",\n \n DEFHOOK\n (relayout_function,\n-\"This target hook fixes function @var{fndecl} after attributes are processed. Default does nothing. On ARM, the default function's alignment is updated with the attribute target.\",\n+\"This target hook fixes function @var{fndecl} after attributes are processed.\\n\\\n+Default does nothing. On ARM, the default function's alignment is updated\\n\\\n+with the attribute target.\",\n  void, (tree fndecl),\n  hook_void_tree)\n \n@@ -6590,8 +6595,8 @@ is to enable the fipa-ra optimization.\",\n /* Fill in additional registers set up by prologue into a regset.  */\n DEFHOOK\n (set_up_by_prologue,\n- \"This hook should add additional registers that are computed by the prologue\\\n- to the hard regset for shrink-wrapping optimization purposes.\",\n+ \"This hook should add additional registers that are computed by the prologue\\n\\\n+to the hard regset for shrink-wrapping optimization purposes.\",\n  void, (struct hard_reg_set_container *),\n  NULL)\n \n@@ -6600,7 +6605,9 @@ DEFHOOK\n    function attribute.  */\n DEFHOOK\n (warn_func_return,\n- \"True if a function's return statements should be checked for matching the function's return type.  This includes checking for falling off the end of a non-void function.  Return false if no such check should be made.\",\n+ \"True if a function's return statements should be checked for matching\\n\\\n+the function's return type.  This includes checking for falling off the end\\n\\\n+of a non-void function.  Return false if no such check should be made.\",\n  bool, (tree),\n  hook_bool_tree_true)\n \n@@ -6678,8 +6685,8 @@ This will suppress generation of the normal debug frame unwind information.\",\n  default_debug_unwind_info)\n \n DEFHOOK\n-(reset_location_view, \"\\\n-This hook, if defined, enables -ginternal-reset-location-views, and\\n\\\n+(reset_location_view,\n+ \"This hook, if defined, enables -ginternal-reset-location-views, and\\n\\\n uses its result to override cases in which the estimated min insn\\n\\\n length might be nonzero even when a PC advance (i.e., a view reset)\\n\\\n cannot be taken for granted.\\n\\\n@@ -6740,39 +6747,39 @@ defined to 1.\",\n \n DEFHOOKPOD\n (atomic_test_and_set_trueval,\n- \"This value should be set if the result written by\\\n- @code{atomic_test_and_set} is not exactly 1, i.e.@: the\\\n- @code{bool} @code{true}.\",\n+ \"This value should be set if the result written by\\n\\\n+@code{atomic_test_and_set} is not exactly 1, i.e.@: the\\n\\\n+@code{bool} @code{true}.\",\n  unsigned char, 1)\n \n /* Return an unsigned int representing the alignment (in bits) of the atomic\n    type which maps to machine MODE.  This allows alignment to be overridden\n    as needed.  */\n DEFHOOK\n (atomic_align_for_mode,\n-\"If defined, this function returns an appropriate alignment in bits for an\\\n- atomic object of machine_mode @var{mode}.  If 0 is returned then the\\\n- default alignment for the specified mode is used. \",\n+\"If defined, this function returns an appropriate alignment in bits for an\\n\\\n+atomic object of machine_mode @var{mode}.  If 0 is returned then the\\n\\\n+default alignment for the specified mode is used.\",\n  unsigned int, (machine_mode mode),\n  hook_uint_mode_0)\n \n DEFHOOK\n (atomic_assign_expand_fenv,\n-\"ISO C11 requires atomic compound assignments that may raise floating-point\\\n- exceptions to raise exceptions corresponding to the arithmetic operation\\\n- whose result was successfully stored in a compare-and-exchange sequence. \\\n- This requires code equivalent to calls to @code{feholdexcept},\\\n- @code{feclearexcept} and @code{feupdateenv} to be generated at\\\n- appropriate points in the compare-and-exchange sequence.  This hook should\\\n- set @code{*@var{hold}} to an expression equivalent to the call to\\\n- @code{feholdexcept}, @code{*@var{clear}} to an expression equivalent to\\\n- the call to @code{feclearexcept} and @code{*@var{update}} to an expression\\\n- equivalent to the call to @code{feupdateenv}.  The three expressions are\\\n- @code{NULL_TREE} on entry to the hook and may be left as @code{NULL_TREE}\\\n- if no code is required in a particular place.  The default implementation\\\n- leaves all three expressions as @code{NULL_TREE}.  The\\\n- @code{__atomic_feraiseexcept} function from @code{libatomic} may be of use\\\n- as part of the code generated in @code{*@var{update}}.\",\n+\"ISO C11 requires atomic compound assignments that may raise floating-point\\n\\\n+exceptions to raise exceptions corresponding to the arithmetic operation\\n\\\n+whose result was successfully stored in a compare-and-exchange sequence.\\n\\\n+This requires code equivalent to calls to @code{feholdexcept},\\n\\\n+@code{feclearexcept} and @code{feupdateenv} to be generated at\\n\\\n+appropriate points in the compare-and-exchange sequence.  This hook should\\n\\\n+set @code{*@var{hold}} to an expression equivalent to the call to\\n\\\n+@code{feholdexcept}, @code{*@var{clear}} to an expression equivalent to\\n\\\n+the call to @code{feclearexcept} and @code{*@var{update}} to an expression\\n\\\n+equivalent to the call to @code{feupdateenv}.  The three expressions are\\n\\\n+@code{NULL_TREE} on entry to the hook and may be left as @code{NULL_TREE}\\n\\\n+if no code is required in a particular place.  The default implementation\\n\\\n+leaves all three expressions as @code{NULL_TREE}.  The\\n\\\n+@code{__atomic_feraiseexcept} function from @code{libatomic} may be of use\\n\\\n+as part of the code generated in @code{*@var{update}}.\",\n  void, (tree *hold, tree *clear, tree *update),\n  default_atomic_assign_expand_fenv)\n \n@@ -6857,23 +6864,26 @@ running a cleanup.  The default is @code{false}.\",\n \n DEFHOOKPOD\n (want_debug_pub_sections,\n- \"True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections\\\n- should be emitted.  These sections are not used on most platforms, and\\\n- in particular GDB does not use them.\",\n+ \"True if the @code{.debug_pubtypes} and @code{.debug_pubnames} sections\\n\\\n+should be emitted.  These sections are not used on most platforms, and\\n\\\n+in particular GDB does not use them.\",\n  bool, false)\n \n DEFHOOKPOD\n-(delay_sched2, \"True if sched2 is not to be run at its normal place.\\n\\\n+(delay_sched2,\n+ \"True if sched2 is not to be run at its normal place.\\n\\\n This usually means it will be run as part of machine-specific reorg.\",\n bool, false)\n \n DEFHOOKPOD\n-(delay_vartrack, \"True if vartrack is not to be run at its normal place.\\n\\\n+(delay_vartrack,\n+ \"True if vartrack is not to be run at its normal place.\\n\\\n This usually means it will be run as part of machine-specific reorg.\",\n bool, false)\n \n DEFHOOKPOD\n-(no_register_allocation, \"True if register allocation and the passes\\n\\\n+(no_register_allocation,\n+ \"True if register allocation and the passes\\n\\\n following it should not be run.  Usually true only for virtual assembler\\n\\\n targets.\",\n bool, false)\n@@ -6887,32 +6897,57 @@ HOOK_VECTOR (TARGET_TOGGLE_, mode_switching)\n \n DEFHOOK\n (emit,\n- \"Generate one or more insns to set @var{entity} to @var{mode}. @var{hard_reg_live} is the set of hard registers live at the point where the insn(s) are to be inserted. @var{prev_moxde} indicates the mode to switch from. Sets of a lower numbered entity will be emitted before sets of a higher numbered entity to a mode of the same or lower priority.\",\n+ \"Generate one or more insns to set @var{entity} to @var{mode}.\\n\\\n+@var{hard_reg_live} is the set of hard registers live at the point where\\n\\\n+the insn(s) are to be inserted. @var{prev_moxde} indicates the mode\\n\\\n+to switch from. Sets of a lower numbered entity will be emitted before\\n\\\n+sets of a higher numbered entity to a mode of the same or lower priority.\",\n  void, (int entity, int mode, int prev_mode, HARD_REG_SET regs_live), NULL)\n \n DEFHOOK\n (needed,\n- \"@var{entity} is an integer specifying a mode-switched entity.  If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro to return an integer value not larger than the corresponding element in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity} must be switched into prior to the execution of @var{insn}.\",\n+ \"@var{entity} is an integer specifying a mode-switched entity.\\n\\\n+If @code{OPTIMIZE_MODE_SWITCHING} is defined, you must define this macro\\n\\\n+to return an integer value not larger than the corresponding element\\n\\\n+in @code{NUM_MODES_FOR_MODE_SWITCHING}, to denote the mode that @var{entity}\\n\\\n+must be switched into prior to the execution of @var{insn}.\",\n  int, (int entity, rtx_insn *insn), NULL)\n \n DEFHOOK\n (after,\n- \"@var{entity} is an integer specifying a mode-switched entity.  If this macro is defined, it is evaluated for every @var{insn} during mode switching.  It determines the mode that an insn results in (if different from the incoming mode).\",\n+ \"@var{entity} is an integer specifying a mode-switched entity.\\n\\\n+If this macro is defined, it is evaluated for every @var{insn} during mode\\n\\\n+switching.  It determines the mode that an insn results\\n\\\n+in (if different from the incoming mode).\",\n  int, (int entity, int mode, rtx_insn *insn), NULL)\n \n DEFHOOK\n (entry,\n- \"If this macro is defined, it is evaluated for every @var{entity} that needs mode switching.  It should evaluate to an integer, which is a mode that @var{entity} is assumed to be switched to at function entry.  If @code{TARGET_MODE_ENTRY} is defined then @code{TARGET_MODE_EXIT} must be defined.\",\n+ \"If this macro is defined, it is evaluated for every @var{entity} that\\n\\\n+needs mode switching.  It should evaluate to an integer, which is a mode\\n\\\n+that @var{entity} is assumed to be switched to at function entry.\\n\\\n+If @code{TARGET_MODE_ENTRY} is defined then @code{TARGET_MODE_EXIT}\\n\\\n+must be defined.\",\n  int, (int entity), NULL)\n \n DEFHOOK\n (exit,\n- \"If this macro is defined, it is evaluated for every @var{entity} that needs mode switching.  It should evaluate to an integer, which is a mode that @var{entity} is assumed to be switched to at function exit.  If @code{TARGET_MODE_EXIT} is defined then @code{TARGET_MODE_ENTRY} must be defined.\",\n+ \"If this macro is defined, it is evaluated for every @var{entity} that\\n\\\n+needs mode switching.  It should evaluate to an integer, which is a mode\\n\\\n+that @var{entity} is assumed to be switched to at function exit.\\n\\\n+If @code{TARGET_MODE_EXIT} is defined then @code{TARGET_MODE_ENTRY}\\n\\\n+must be defined.\",\n  int, (int entity), NULL)\n \n DEFHOOK\n (priority,\n- \"This macro specifies the order in which modes for @var{entity} are processed. 0 is the highest priority, @code{NUM_MODES_FOR_MODE_SWITCHING[@var{entity}] - 1} the lowest.  The value of the macro should be an integer designating a mode for @var{entity}.  For any fixed @var{entity}, @code{mode_priority} (@var{entity}, @var{n}) shall be a bijection in 0 @dots{} @code{num_modes_for_mode_switching[@var{entity}] - 1}.\",\n+ \"This macro specifies the order in which modes for @var{entity}\\n\\\n+are processed. 0 is the highest priority,\\n\\\n+@code{NUM_MODES_FOR_MODE_SWITCHING[@var{entity}] - 1} the lowest.\\n\\\n+The value of the macro should be an integer designating a mode\\n\\\n+for @var{entity}.  For any fixed @var{entity}, @code{mode_priority}\\n\\\n+(@var{entity}, @var{n}) shall be a bijection in 0 @dots{}\\n\\\n+@code{num_modes_for_mode_switching[@var{entity}] - 1}.\",\n  int, (int entity, int n), NULL)\n \n HOOK_VECTOR_END (mode_switching)"}]}