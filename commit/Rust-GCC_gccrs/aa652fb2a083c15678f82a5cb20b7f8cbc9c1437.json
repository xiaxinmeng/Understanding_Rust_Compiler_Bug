{"sha": "aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2NTJmYjJhMDgzYzE1Njc4ZjgyYTVjYjIwYjdmOGNiYzljMTQzNw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-03T17:01:53Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-04T13:57:36Z"}, "message": "aarch64: Use RTL builtins for [su]mull_high_lane[q] intrinsics\n\nRewrite [su]mull_high_lane[q] Neon intrinsics to use RTL builtins\nrather than inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add\n\t[su]mull_hi_lane[q] builtin generator macros.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<su>mull_hi_lane<mode>_insn): Define.\n\t(aarch64_<su>mull_hi_lane<mode>): Define.\n\t(aarch64_<su>mull_hi_laneq<mode>_insn): Define.\n\t(aarch64_<su>mull_hi_laneq<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmull_high_lane_s16): Use RTL\n\tbuiltin instead of inline asm.\n\t(vmull_high_lane_s32): Likewise.\n\t(vmull_high_lane_u16): Likewise.\n\t(vmull_high_lane_u32): Likewise.\n\t(vmull_high_laneq_s16): Likewise.\n\t(vmull_high_laneq_s32): Likewise.\n\t(vmull_high_laneq_u16): Likewise.\n\t(vmull_high_laneq_u32): Liekwise.", "tree": {"sha": "cd175a67072b1423bc89b86274ef553cd3cd7c8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd175a67072b1423bc89b86274ef553cd3cd7c8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6228454c4bca003c6ecedad67866515503b910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6228454c4bca003c6ecedad67866515503b910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6228454c4bca003c6ecedad67866515503b910"}], "stats": {"total": 214, "additions": 118, "deletions": 96}, "files": [{"sha": "29a7bbc24a7370fc077ab6c66f3de551f6926b7e", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "patch": "@@ -303,6 +303,11 @@\n   BUILTIN_VQ_HSI (BINOP, smull_hi_n, 0, NONE)\n   BUILTIN_VQ_HSI (BINOPU, umull_hi_n, 0, NONE)\n \n+  BUILTIN_VQ_HSI (TERNOP_LANE, smull_hi_lane, 0, NONE)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, smull_hi_laneq, 0, NONE)\n+  BUILTIN_VQ_HSI (TERNOPU_LANE, umull_hi_lane, 0, NONE)\n+  BUILTIN_VQ_HSI (TERNOPU_LANE, umull_hi_laneq, 0, NONE)\n+\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, NONE)\n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, NONE)\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0, NONE)"}, {"sha": "60eeddcc946daac87869e11cf138d837c7f0ea6f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "patch": "@@ -2253,6 +2253,70 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n )\n \n+(define_insn \"aarch64_<su>mull_hi_lane<mode>_insn\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(mult:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t    (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n+\t    (vec_select:<VEL>\n+\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n+    return \"<su>mull2\\\\t%0.<Vwtype>, %1.<Vtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_expand \"aarch64_<su>mull_hi_lane<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE>(match_operand:VQ_HSI 1 \"register_operand\"))\n+   (match_operand:<VCOND> 2 \"register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>mull_hi_lane<mode>_insn (operands[0],\n+\t     operands[1], p, operands[2], operands[3]));\n+  DONE;\n+}\n+)\n+\n+(define_insn \"aarch64_<su>mull_hi_laneq<mode>_insn\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(mult:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t    (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n+\t    (vec_select:<VEL>\n+\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n+\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n+    return \"<su>mull2\\\\t%0.<Vwtype>, %1.<Vtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_expand \"aarch64_<su>mull_hi_laneq<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE>(match_operand:VQ_HSI 1 \"register_operand\"))\n+   (match_operand:<VCONQ> 2 \"register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+  emit_insn (gen_aarch64_<su>mull_hi_laneq<mode>_insn (operands[0],\n+\t     operands[1], p, operands[2], operands[3]));\n+  DONE;\n+}\n+)\n+\n (define_insn \"aarch64_<su>mull_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (mult:<VWIDE>"}, {"sha": "2d776ef7ef4ed7fad166dd00c4b4eb8bcaf75fc8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 49, "deletions": 96, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa652fb2a083c15678f82a5cb20b7f8cbc9c1437/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=aa652fb2a083c15678f82a5cb20b7f8cbc9c1437", "patch": "@@ -8167,109 +8167,62 @@ vshrn_n_u64 (uint64x2_t __a, const int __b)\n {\n   return (uint32x2_t)__builtin_aarch64_shrnv2di ((int64x2_t)__a, __b);\n }\n-#define vmull_high_lane_s16(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x4_t b_ = (b);                                              \\\n-       int16x8_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n \n-#define vmull_high_lane_s32(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smull2 %0.2d, %1.4s, %2.s[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_lane_s16 (int16x8_t __a, int16x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_smull_hi_lanev8hi (__a, __v, __lane);\n+}\n \n-#define vmull_high_lane_u16(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint16x8_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_lane_s32 (int32x4_t __a, int32x2_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_smull_hi_lanev4si (__a, __v, __lane);\n+}\n \n-#define vmull_high_lane_u32(a, b, c)                                    \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umull2 %0.2d, %1.4s, %2.s[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_lane_u16 (uint16x8_t __a, uint16x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_umull_hi_lanev8hi_uuus (__a, __v, __lane);\n+}\n \n-#define vmull_high_laneq_s16(a, b, c)                                   \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int16x8_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_lane_u32 (uint32x4_t __a, uint32x2_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_umull_hi_lanev4si_uuus (__a, __v, __lane);\n+}\n \n-#define vmull_high_laneq_s32(a, b, c)                                   \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smull2 %0.2d, %1.4s, %2.s[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_laneq_s16 (int16x8_t __a, int16x8_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_smull_hi_laneqv8hi (__a, __v, __lane);\n+}\n \n-#define vmull_high_laneq_u16(a, b, c)                                   \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint16x8_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_laneq_s32 (int32x4_t __a, int32x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_smull_hi_laneqv4si (__a, __v, __lane);\n+}\n \n-#define vmull_high_laneq_u32(a, b, c)                                   \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umull2 %0.2d, %1.4s, %2.s[%3]\"                         \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_laneq_u16 (uint16x8_t __a, uint16x8_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_umull_hi_laneqv8hi_uuus (__a, __v, __lane);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_high_laneq_u32 (uint32x4_t __a, uint32x4_t __v, const int __lane)\n+{\n+  return __builtin_aarch64_umull_hi_laneqv4si_uuus (__a, __v, __lane);\n+}\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}]}