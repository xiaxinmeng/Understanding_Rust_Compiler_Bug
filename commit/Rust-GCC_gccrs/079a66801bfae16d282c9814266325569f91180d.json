{"sha": "079a66801bfae16d282c9814266325569f91180d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5YTY2ODAxYmZhZTE2ZDI4MmM5ODE0MjY2MzI1NTY5ZjkxMTgwZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-01-15T09:36:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-01-15T09:36:43Z"}, "message": "decl.c (start_decl): Improve error location.\n\n/cp\n2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (start_decl): Improve error location.\n\t* decl2.c (grokfield): Likewise.\n\n/testsuite\n2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/typedef-initialized.C: New.\n\n/cp\n2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Move further up the location_t loc\n\tdeclaration and use the location when building a TYPE_DECL for\n\ta typedef name.\n\t* decl2.c (grokbitfield): Use DECL_SOURCE_LOCATION in the error\n\tabout an ill-formed bit-field as typedef.\n\n/testsuite\n2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/bitfld3.C: New.\n\nFrom-SVN: r267932", "tree": {"sha": "3d7f4fc60e9207c6e391af734f1b77b06e0eafee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d7f4fc60e9207c6e391af734f1b77b06e0eafee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079a66801bfae16d282c9814266325569f91180d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079a66801bfae16d282c9814266325569f91180d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079a66801bfae16d282c9814266325569f91180d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079a66801bfae16d282c9814266325569f91180d/comments", "author": null, "committer": null, "parents": [{"sha": "93aa3c4aca3647645cd5bce724f9d2126de4b5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93aa3c4aca3647645cd5bce724f9d2126de4b5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93aa3c4aca3647645cd5bce724f9d2126de4b5ea"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "35eec34fca5c32294a9b33bf5ae90a9bbc6c0410", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -1,3 +1,16 @@\n+2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (start_decl): Improve error location.\n+\t* decl2.c (grokfield): Likewise.\n+\n+2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Move further up the location_t loc\n+\tdeclaration and use the location when building a TYPE_DECL for\n+\ta typedef name.\n+\t* decl2.c (grokbitfield): Use DECL_SOURCE_LOCATION in the error\n+\tabout an ill-formed bit-field as typedef.\n+\n 2019-01-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88830 - ICE with abstract class."}, {"sha": "8e1d12d8feb3f28fbaadc7f08858128cc615286b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -5059,7 +5059,8 @@ start_decl (const cp_declarator *declarator,\n   if (initialized\n       && TREE_CODE (decl) == TYPE_DECL)\n     {\n-      error (\"typedef %qD is initialized (use decltype instead)\", decl);\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"typedef %qD is initialized (use decltype instead)\", decl);\n       return error_mark_node;\n     }\n \n@@ -11935,6 +11936,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n     }\n \n+  location_t loc = declarator ? declarator->id_loc : input_location;\n+\n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n   if (typedef_p && decl_context != TYPENAME)\n     {\n@@ -11980,9 +11983,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n \n       if (decl_context == FIELD)\n-\tdecl = build_lang_decl (TYPE_DECL, unqualified_id, type);\n+\tdecl = build_lang_decl_loc (loc, TYPE_DECL, unqualified_id, type);\n       else\n-\tdecl = build_decl (input_location, TYPE_DECL, unqualified_id, type);\n+\tdecl = build_decl (loc, TYPE_DECL, unqualified_id, type);\n \n       if (decl_context != FIELD)\n \t{\n@@ -12223,7 +12226,6 @@ grokdeclarator (const cp_declarator *declarator,\n \n   {\n     tree decl = NULL_TREE;\n-    location_t loc = declarator ? declarator->id_loc : input_location;\n \n     if (decl_context == PARM)\n       {"}, {"sha": "5da5beb778424729dd9960116b853d89966dd1fc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -820,7 +820,8 @@ grokfield (const cp_declarator *declarator,\n \n   if (TREE_CODE (value) == TYPE_DECL && init)\n     {\n-      error (\"typedef %qD is initialized (use decltype instead)\", value);\n+      error_at (cp_expr_loc_or_loc (init, DECL_SOURCE_LOCATION (value)),\n+\t\t\"typedef %qD is initialized (use decltype instead)\", value);\n       init = NULL_TREE;\n     }\n \n@@ -1038,7 +1039,8 @@ grokbitfield (const cp_declarator *declarator,\n \n   if (TREE_CODE (value) == TYPE_DECL)\n     {\n-      error (\"cannot declare %qD to be a bit-field type\", value);\n+      error_at (DECL_SOURCE_LOCATION (value),\n+\t\t\"cannot declare %qD to be a bit-field type\", value);\n       return NULL_TREE;\n     }\n "}, {"sha": "999810a1c897ca31c6093d78fada0e3a2c81aa62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -1,3 +1,11 @@\n+2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/typedef-initialized.C: New.\n+\n+2019-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/bitfld3.C: New.\n+\n 2019-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88775"}, {"sha": "516e776d736018bdf250d9769d57e7b4572725d4", "filename": "gcc/testsuite/g++.dg/diagnostic/bitfld3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld3.C?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -0,0 +1,5 @@\n+struct S\n+{\n+  typedef int i : 3;  // { dg-error \"15:cannot declare .i.\" }\n+  typedef int : 3;  // { dg-error \"cannot declare\" }\n+};"}, {"sha": "143134bee7e2194d68d4c9799447fc9a0cbfd6a9", "filename": "gcc/testsuite/g++.dg/diagnostic/typedef-initialized.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftypedef-initialized.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a66801bfae16d282c9814266325569f91180d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftypedef-initialized.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftypedef-initialized.C?ref=079a66801bfae16d282c9814266325569f91180d", "patch": "@@ -0,0 +1,6 @@\n+struct S\n+{\n+  typedef int i __attribute__((unused)) = 1;  // { dg-error \"15:typedef .i. is initialized\" }\n+};\n+\n+typedef int i __attribute__((unused)) = 1;  // { dg-error \"13:typedef .i. is initialized\" }"}]}