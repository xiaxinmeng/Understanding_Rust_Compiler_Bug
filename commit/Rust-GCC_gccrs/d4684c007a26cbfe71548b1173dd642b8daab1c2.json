{"sha": "d4684c007a26cbfe71548b1173dd642b8daab1c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2ODRjMDA3YTI2Y2JmZTcxNTQ4YjExNzNkZDY0MmI4ZGFhYjFjMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-12-11T21:03:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-12-11T21:03:55Z"}, "message": "re PR c++/42219 (ICE with \"const void\" as parameter type)\n\n\tPR c++/42219\n\t* typeck.c (error_type_p): New.\n\t(ptr_reasonably_similar): Use it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r155177", "tree": {"sha": "4cacc86de671f112c5dd9cc8f03f7cb9d99b9504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cacc86de671f112c5dd9cc8f03f7cb9d99b9504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4684c007a26cbfe71548b1173dd642b8daab1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4684c007a26cbfe71548b1173dd642b8daab1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4684c007a26cbfe71548b1173dd642b8daab1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4684c007a26cbfe71548b1173dd642b8daab1c2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae2cac711f13fb778f5065b160e5b27b56c0f129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2cac711f13fb778f5065b160e5b27b56c0f129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2cac711f13fb778f5065b160e5b27b56c0f129"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "e51641b51a2ffc16daa1f8d6ec2a16d4c0d43a7c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4684c007a26cbfe71548b1173dd642b8daab1c2", "patch": "@@ -1,3 +1,10 @@\n+2009-12-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42219\n+\t* typeck.c (error_type_p): New.\n+\t(ptr_reasonably_similar): Use it.\n+\t* cp-tree.h: Declare it.\n+\n 2009-12-11  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/42225"}, {"sha": "eb7f06d33bb3a9137959bc1feada647524bbf05e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d4684c007a26cbfe71548b1173dd642b8daab1c2", "patch": "@@ -5336,6 +5336,7 @@ extern tree convert_for_initialization\t\t(tree, tree, tree, int,\n                                                  tsubst_flags_t);\n extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern bool comp_ptr_ttypes_const\t\t(tree, tree);\n+extern bool error_type_p\t\t\t(const_tree);\n extern int ptr_reasonably_similar\t\t(const_tree, const_tree);\n extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool);\n extern int cp_type_quals\t\t\t(const_tree);"}, {"sha": "782502d2734f8928f990010e0446cdedc593f8a8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d4684c007a26cbfe71548b1173dd642b8daab1c2", "patch": "@@ -7471,6 +7471,44 @@ comp_ptr_ttypes (tree to, tree from)\n   return comp_ptr_ttypes_real (to, from, 1);\n }\n \n+/* Returns true iff FNTYPE is a non-class type that involves\n+   error_mark_node.  We can get FUNCTION_TYPE with buried error_mark_node\n+   if a parameter type is ill-formed.  */\n+\n+bool\n+error_type_p (const_tree type)\n+{\n+  tree t;\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case ERROR_MARK:\n+      return true;\n+\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+    case OFFSET_TYPE:\n+      return error_type_p (TREE_TYPE (type));\n+\n+    case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      if (error_type_p (TREE_TYPE (type)))\n+\treturn true;\n+      for (t = TYPE_ARG_TYPES (type); t; t = TREE_CHAIN (t))\n+\tif (error_type_p (TREE_VALUE (t)))\n+\t  return true;\n+      return false;\n+\n+    case RECORD_TYPE:\n+      if (TYPE_PTRMEMFUNC_P (type))\n+\treturn error_type_p (TYPE_PTRMEMFUNC_FN_TYPE (type));\n+      return false;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Returns 1 if to and from are (possibly multi-level) pointers to the same\n    type or inheritance-related types, regardless of cv-quals.  */\n \n@@ -7480,9 +7518,10 @@ ptr_reasonably_similar (const_tree to, const_tree from)\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n       /* Any target type is similar enough to void.  */\n-      if (TREE_CODE (to) == VOID_TYPE\n-\t  || TREE_CODE (from) == VOID_TYPE)\n-\treturn 1;\n+      if (TREE_CODE (to) == VOID_TYPE)\n+\treturn !error_type_p (from);\n+      if (TREE_CODE (from) == VOID_TYPE)\n+\treturn !error_type_p (to);\n \n       if (TREE_CODE (to) != TREE_CODE (from))\n \treturn 0;\n@@ -7502,7 +7541,7 @@ ptr_reasonably_similar (const_tree to, const_tree from)\n \treturn 1;\n \n       if (TREE_CODE (to) == FUNCTION_TYPE)\n-\treturn 1;\n+\treturn !error_type_p (to) && !error_type_p (from);\n \n       if (TREE_CODE (to) != POINTER_TYPE)\n \treturn comptypes"}, {"sha": "92163b3200cf763cb5c41874546b5af6ee79a089", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4684c007a26cbfe71548b1173dd642b8daab1c2", "patch": "@@ -1,3 +1,8 @@\n+2009-12-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42219\n+\t* g++.dg/conversion/err-recover1.C: New.\n+\n 2009-12-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42335"}, {"sha": "97237893dc77c8e1919f17416a21226fe9951b1f", "filename": "gcc/testsuite/g++.dg/conversion/err-recover1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Ferr-recover1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4684c007a26cbfe71548b1173dd642b8daab1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Ferr-recover1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Ferr-recover1.C?ref=d4684c007a26cbfe71548b1173dd642b8daab1c2", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/42219\n+\n+void foo(const void);\t\t// { dg-error \"incomplete|const\" }\n+\n+void bar()\n+{\n+  void (*pf)() = foo;\t\t// { dg-error \"cannot convert\" }\n+}"}]}