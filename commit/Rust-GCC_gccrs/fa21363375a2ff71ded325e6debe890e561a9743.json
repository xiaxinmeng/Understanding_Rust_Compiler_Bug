{"sha": "fa21363375a2ff71ded325e6debe890e561a9743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyMTM2MzM3NWEyZmY3MWRlZDMyNWU2ZGViZTg5MGU1NjFhOTc0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-27T16:32:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-27T16:32:54Z"}, "message": "re PR rtl-optimization/92510 (ICE in native_encode_rtx, at simplify-rtx.c:6272)\n\n\tPR rtl-optimization/92510\n\t* combine.c (gen_lowpart_for_combine): Only transform lowpart subreg\n\tof comparison into a comparison with different mode if both imode and\n\tomode are scalar integral modes.\n\n\t* gcc.dg/pr92510.c: New test.\n\nFrom-SVN: r278777", "tree": {"sha": "fd7d0c88c381c8f4da3f8cf88cdd0394a775f8fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd7d0c88c381c8f4da3f8cf88cdd0394a775f8fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa21363375a2ff71ded325e6debe890e561a9743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa21363375a2ff71ded325e6debe890e561a9743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa21363375a2ff71ded325e6debe890e561a9743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa21363375a2ff71ded325e6debe890e561a9743/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "861d4af8d82819a857e360949545651adf33a264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d4af8d82819a857e360949545651adf33a264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861d4af8d82819a857e360949545651adf33a264"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "7dbf824938f2f0ce0b1900a2fd94599b1228b2db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa21363375a2ff71ded325e6debe890e561a9743", "patch": "@@ -1,3 +1,10 @@\n+2019-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/92510\n+\t* combine.c (gen_lowpart_for_combine): Only transform lowpart subreg\n+\tof comparison into a comparison with different mode if both imode and\n+\tomode are scalar integral modes.\n+\n 2019-11-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/90007"}, {"sha": "16e606d8a21ff424ff313d16a201055b2d3ce285", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fa21363375a2ff71ded325e6debe890e561a9743", "patch": "@@ -11812,7 +11812,9 @@ gen_lowpart_for_combine (machine_mode omode, rtx x)\n \n   /* If X is a comparison operator, rewrite it in a new mode.  This\n      probably won't match, but may allow further simplifications.  */\n-  else if (COMPARISON_P (x))\n+  else if (COMPARISON_P (x)\n+\t   && SCALAR_INT_MODE_P (imode)\n+\t   && SCALAR_INT_MODE_P (omode))\n     return gen_rtx_fmt_ee (GET_CODE (x), omode, XEXP (x, 0), XEXP (x, 1));\n \n   /* If we couldn't simplify X any other way, just enclose it in a"}, {"sha": "4f97f4cc58c57fde608d312e08f79e365f6bafb1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa21363375a2ff71ded325e6debe890e561a9743", "patch": "@@ -1,3 +1,8 @@\n+2019-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/92510\n+\t* gcc.dg/pr92510.c: New test.\n+\n 2019-11-27  Andrew Sutton  <asutton@lock3software.com>\n \n \tPR c++/92236"}, {"sha": "d468586c0f8b7fe1bf8858f6f6314b812e3e3374", "filename": "gcc/testsuite/gcc.dg/pr92510.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa21363375a2ff71ded325e6debe890e561a9743/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr92510.c?ref=fa21363375a2ff71ded325e6debe890e561a9743", "patch": "@@ -0,0 +1,16 @@\n+/* PR rtl-optimization/92510 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-loop-vectorize -fno-forward-propagate -fno-tree-scev-cprop\" } */\n+\n+int v;\n+\n+long int\n+foo (long int x)\n+{\n+  signed char i;\n+\n+  for (i = 0; i < 8; ++i)\n+    x |= !!v;\n+\n+  return x + i;\n+}"}]}