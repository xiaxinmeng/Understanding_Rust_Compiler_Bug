{"sha": "73865312272b9900466e8a3223e340d028550dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4NjUzMTIyNzJiOTkwMDQ2NmU4YTMyMjNlMzQwZDAyODU1MGRhYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-02-16T09:55:20Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-02-16T09:55:20Z"}, "message": "re PR fortran/30793 (Segfault on calling a function returning a pointer)\n\nfortran/\n2007-02-16  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/30793\n       * trans-decl.c (gfc_generate_function_code): Do not initialize\n         pointers to derived components.\n\ntestsuite/\n2007-02-16  Tobias Burnus  <burnus@net-b.de>\n\n       PR fortran/30793\n       * gfortran.dg/func_derived_4.f90: New test.\n\nFrom-SVN: r122037", "tree": {"sha": "ea50806dad77b21251fdc8d39691178743df9fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea50806dad77b21251fdc8d39691178743df9fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73865312272b9900466e8a3223e340d028550dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73865312272b9900466e8a3223e340d028550dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73865312272b9900466e8a3223e340d028550dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73865312272b9900466e8a3223e340d028550dab/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40b448ef3a8b5f8533de9c424a6843989ce99cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b448ef3a8b5f8533de9c424a6843989ce99cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b448ef3a8b5f8533de9c424a6843989ce99cbb"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "02ba34f881b0cd6bb450e9867daf8c569968ef3e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73865312272b9900466e8a3223e340d028550dab/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73865312272b9900466e8a3223e340d028550dab/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=73865312272b9900466e8a3223e340d028550dab", "patch": "@@ -1,3 +1,9 @@\n+2007-02-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30793\n+\t* trans-decl.c (gfc_generate_function_code): Do not initialize\n+\t  pointers to derived components.\n+\n 2007-02-15  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Brooks Moses  <brooks.moses@codesourcery.com>\n \t    Lee Millward  <lee.millward@codesourcery.com>"}, {"sha": "019fbd6bdc2b8472ef26341d9b73cba65dd1a620", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73865312272b9900466e8a3223e340d028550dab/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73865312272b9900466e8a3223e340d028550dab/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=73865312272b9900466e8a3223e340d028550dab", "patch": "@@ -3240,7 +3240,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n \n       if (result != NULL_TREE && sym->attr.function\n \t    && sym->ts.type == BT_DERIVED\n-\t    && sym->ts.derived->attr.alloc_comp)\n+\t    && sym->ts.derived->attr.alloc_comp\n+\t    && !sym->attr.pointer)\n \t{\n \t  rank = sym->as ? sym->as->rank : 0;\n \t  tmp2 = gfc_nullify_alloc_comp (sym->ts.derived, result, rank);"}, {"sha": "7db30065a9e4e31de575c8f6d94ceb0709aebae2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73865312272b9900466e8a3223e340d028550dab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73865312272b9900466e8a3223e340d028550dab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73865312272b9900466e8a3223e340d028550dab", "patch": "@@ -1,3 +1,8 @@\n+2007-02-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/30793\n+\t* gfortran.dg/func_derived_4.f90: New test.\n+\n 2007-02-15  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/30391"}, {"sha": "86be8d4ead2d81d985a8f08908a7cb79d0869385", "filename": "gcc/testsuite/gfortran.dg/func_derived_4.f90", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73865312272b9900466e8a3223e340d028550dab/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73865312272b9900466e8a3223e340d028550dab/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_derived_4.f90?ref=73865312272b9900466e8a3223e340d028550dab", "patch": "@@ -0,0 +1,105 @@\n+! { dg-do run }\n+! PR fortran/30793\n+! Check that pointer-returing functions\n+! work derived types.\n+!\n+! Contributed by Salvatore Filippone.\n+!\n+module class_mesh\n+  type mesh\n+    real(kind(1.d0)), allocatable :: area(:) \n+  end type mesh\n+contains \n+  subroutine create_mesh(msh)\n+    type(mesh), intent(out) :: msh\n+    allocate(msh%area(10))\n+    return\n+  end subroutine create_mesh\n+end module class_mesh\n+\n+module class_field\n+  use class_mesh\n+  implicit none\n+  private ! Default\n+  public :: create_field, field\n+  public :: msh_\n+\n+  type field\n+     private\n+     type(mesh),     pointer :: msh   => null()\n+     integer                 :: isize(2)\n+  end type field\n+\n+  interface msh_\n+    module procedure msh_\n+  end interface\n+  interface create_field\n+    module procedure create_field\n+  end interface\n+contains\n+  subroutine create_field(fld,msh)\n+    type(field),      intent(out)        :: fld\n+    type(mesh),       intent(in), target :: msh\n+    fld%msh => msh\n+    fld%isize = 1\n+  end subroutine create_field\n+\n+  function msh_(fld)\n+    type(mesh), pointer :: msh_\n+    type(field), intent(in) :: fld\n+    msh_ => fld%msh\n+  end function msh_\n+end module class_field\n+\n+module class_scalar_field\n+  use class_field\n+  implicit none\n+  private\n+  public :: create_field, scalar_field\n+  public :: msh_\n+\n+  type scalar_field\n+    private\n+    type(field) :: base\n+    real(kind(1.d0)), allocatable :: x(:)  \n+    real(kind(1.d0)), allocatable :: bx(:) \n+    real(kind(1.d0)), allocatable :: x_old(:) \n+  end type scalar_field\n+\n+  interface create_field\n+    module procedure create_scalar_field\n+  end interface\n+  interface msh_\n+    module procedure get_scalar_field_msh\n+  end interface\n+contains\n+  subroutine create_scalar_field(fld,msh)\n+    use class_mesh\n+    type(scalar_field), intent(out)          :: fld\n+    type(mesh),         intent(in), target   :: msh\n+    call create_field(fld%base,msh)\n+    allocate(fld%x(10),fld%bx(20))\n+  end subroutine create_scalar_field\n+\n+  function get_scalar_field_msh(fld)\n+    use class_mesh\n+    type(mesh), pointer :: get_scalar_field_msh\n+    type(scalar_field), intent(in), target  :: fld\n+\n+    get_scalar_field_msh => msh_(fld%base)\n+  end function get_scalar_field_msh\n+end module class_scalar_field\n+\n+program test_pnt\n+  use class_mesh\n+  use class_scalar_field\n+  implicit none\n+  type(mesh) :: msh\n+  type(mesh), pointer  :: mshp\n+  type(scalar_field) :: quality\n+  call create_mesh(msh)\n+  call create_field(quality,msh)\n+  mshp => msh_(quality)\n+end program test_pnt\n+\n+! { dg-final { cleanup-modules \"class_mesh class_scalar_field class_mesh\" } }"}]}