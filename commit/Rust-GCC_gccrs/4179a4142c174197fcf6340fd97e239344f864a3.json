{"sha": "4179a4142c174197fcf6340fd97e239344f864a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3OWE0MTQyYzE3NDE5N2ZjZjYzNDBmZDk3ZTIzOTM0NGY4NjRhMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-08-13T21:16:04Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-08-13T21:16:04Z"}, "message": "part of PR testsuite/23348\n\n2005-08-13  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        part of PR testsuite/23348\n        * lib/objc-torture.exp: Add -fgnu-runtime and/or -fnext-runtime to each\n        of the torture options.\n        * objc/compile/trivial.m: New test.\n\nFrom-SVN: r103061", "tree": {"sha": "3b902b44402f63ebc65b85cda5c256f4157fa1b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b902b44402f63ebc65b85cda5c256f4157fa1b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4179a4142c174197fcf6340fd97e239344f864a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4179a4142c174197fcf6340fd97e239344f864a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4179a4142c174197fcf6340fd97e239344f864a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4179a4142c174197fcf6340fd97e239344f864a3/comments", "author": null, "committer": null, "parents": [{"sha": "0ffb94cd681982d04226863a123d06cf4bdefab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ffb94cd681982d04226863a123d06cf4bdefab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ffb94cd681982d04226863a123d06cf4bdefab4"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "f98e13712243cd960a18700def5aa07740457b77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4179a4142c174197fcf6340fd97e239344f864a3", "patch": "@@ -1,3 +1,10 @@\n+2005-08-13  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tpart of PR testsuite/23348\n+\t* lib/objc-torture.exp: Add -fgnu-runtime and/or -fnext-runtime to each\n+\tof the torture options.\n+\t* objc/compile/trivial.m: New test.\n+\n 2005-08-12  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* gfortran.dg/eoshift.f90:  Correct format."}, {"sha": "09d0c7761ff1d13a583ec03a6988ffdafb136b75", "filename": "gcc/testsuite/lib/objc-torture.exp", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-torture.exp?ref=4179a4142c174197fcf6340fd97e239344f864a3", "patch": "@@ -21,6 +21,24 @@ load_lib file-format.exp\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n \n+if ![info exists OBJC_RUNTIME_OPTIONS] {\n+  set OBJC_RUNTIME_OPTIONS \"\"\n+  foreach type {-fgnu-runtime -fnext-runtime} {\n+    global srcdir subdir\n+\n+    set comp_output [objc_target_compile \\\n+    \"$srcdir/$subdir/trivial.m\" \"trivial.exe\" executable \"additional_flags=$type\"]\n+\n+    # If we get any error, then we failed\n+    if ![string match \"\" $comp_output] then {\n+      continue;\n+    }\n+    lappend OBJC_RUNTIME_OPTIONS $type\n+  }\n+}\n+verbose -log \"Using the following runtimes: $OBJC_RUNTIME_OPTIONS\"\n+\n+\n if ![info exists TORTURE_OPTIONS] {\n     # It is theoretically beneficial to group all of the O2/O3 options together,\n     # as in many cases the compiler will generate identical executables for\n@@ -30,28 +48,33 @@ if ![info exists TORTURE_OPTIONS] {\n     # items below, even though -O3 is also specified, because some ports may\n     # choose to disable inlining functions by default, even when optimizing.\n     set TORTURE_OPTIONS [list \\\n-\t{ -O0 } \\\n-\t{ -O1 } \\\n-\t{ -O2 } \\\n-\t{ -O3 -fomit-frame-pointer } \\\n-\t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n-\t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n-\t{ -O3 -g } \\\n-\t{ -Os } ]\n+\t\" -O0 \" \\\n+\t\" -O1 \" \\\n+\t\" -O2 \" \\\n+\t\" -O3 -fomit-frame-pointer \" \\\n+\t\" -O3 -fomit-frame-pointer -funroll-loops \" \\\n+\t\" -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions \" \\\n+\t\" -O3 -g \" \\\n+\t\" -Os \" ]\n }\n \n \n # Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n-# one for testcases without loops.\n+# one for testcases without loops. Add in the objc runtime options also.\n \n-set torture_with_loops $TORTURE_OPTIONS\n+set torture_with_loops \"\"\n set torture_without_loops \"\"\n-foreach option $TORTURE_OPTIONS {\n+foreach objc_option $OBJC_RUNTIME_OPTIONS {\n+  foreach option $TORTURE_OPTIONS {\n+  \n     if ![string match \"*loop*\" $option] {\n-\tlappend torture_without_loops $option\n+\tlappend torture_without_loops \"$option $objc_option\"\n     }\n+    lappend torture_with_loops \"$option $objc_option\"\n+  }\n }\n \n+\n #\n # objc-torture-compile -- runs the Tege OBJC-torture test\n #"}, {"sha": "c2560658ea416f7028ab59544c742d372be07c1f", "filename": "gcc/testsuite/objc/compile/trivial.m", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4179a4142c174197fcf6340fd97e239344f864a3/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fcompile%2Ftrivial.m?ref=4179a4142c174197fcf6340fd97e239344f864a3", "patch": "@@ -0,0 +1,6 @@\n+#import <objc/Object.h>\n+\n+int main(void)\n+{\n+  [Object class];\n+}"}]}