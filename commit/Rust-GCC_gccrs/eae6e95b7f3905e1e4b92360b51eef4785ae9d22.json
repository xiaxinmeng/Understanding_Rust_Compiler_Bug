{"sha": "eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlNmU5NWI3ZjM5MDVlMWU0YjkyMzYwYjUxZWVmNDc4NWFlOWQyMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-09-30T08:39:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-30T08:39:52Z"}, "message": "re PR libstdc++/23953 (using stringstreams causes crashes with some locales)\n\n2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/23953\n\t* include/bits/locale_facets.tcc (__numpunct_cache<>::_M_cache,\n\t__moneypunct_cache<>::_M_cache): Check that grouping()[0] > 0.\n\t(__verify_grouping): Do the last check only if __grouping[__min] > 0.\n\t(__add_grouping<>): End recursion if *__gbeg <= 0.\n\t* testsuite/22_locale/num_get/get/char/23953.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/23953.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/char/23953.cc: Likewise.\n\t* testsuite/22_locale/num_put/put/wchar_t/23953.cc: Likewise.\n\nFrom-SVN: r104814", "tree": {"sha": "2520c26bb1a85c62c5f72b63833eba53b4350b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2520c26bb1a85c62c5f72b63833eba53b4350b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/comments", "author": null, "committer": null, "parents": [{"sha": "7a6a7d975bd7643be654af588793d528ba70b57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6a7d975bd7643be654af588793d528ba70b57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6a7d975bd7643be654af588793d528ba70b57d"}], "stats": {"total": 347, "additions": 341, "deletions": 6}, "files": [{"sha": "87782611e6efe55ecf54336c588718363df53ab4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -1,3 +1,15 @@\n+2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/23953\n+\t* include/bits/locale_facets.tcc (__numpunct_cache<>::_M_cache,\n+\t__moneypunct_cache<>::_M_cache): Check that grouping()[0] > 0.\n+\t(__verify_grouping): Do the last check only if __grouping[__min] > 0.\n+\t(__add_grouping<>): End recursion if *__gbeg <= 0.\n+\t* testsuite/22_locale/num_get/get/char/23953.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/23953.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/char/23953.cc: Likewise.\n+\t* testsuite/22_locale/num_put/put/wchar_t/23953.cc: Likewise.\n+\n 2005-09-29  Chris Jefferson <chris@bubblescope.net>\n \n \tPR libstdc++/23978"}, {"sha": "eb4a3527c5c872739450b25cd6c611e767cabd63", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -193,7 +193,8 @@ namespace std\n       char* __grouping = new char[_M_grouping_size];\n       __np.grouping().copy(__grouping, _M_grouping_size);\n       _M_grouping = __grouping;\n-      _M_use_grouping = _M_grouping_size && __np.grouping()[0] != 0;\n+      _M_use_grouping = (_M_grouping_size\n+\t\t\t && static_cast<signed char>(__np.grouping()[0]) > 0);\n \n       _M_truename_size = __np.truename().size();\n       _CharT* __truename = new _CharT[_M_truename_size];\n@@ -228,7 +229,8 @@ namespace std\n       char* __grouping = new char[_M_grouping_size];\n       __mp.grouping().copy(__grouping, _M_grouping_size);\n       _M_grouping = __grouping;\n-      _M_use_grouping = _M_grouping_size && __mp.grouping()[0] != 0;\n+      _M_use_grouping = (_M_grouping_size\n+\t\t\t && static_cast<signed char>(__mp.grouping()[0]) > 0);\n       \n       _M_decimal_point = __mp.decimal_point();\n       _M_thousands_sep = __mp.thousands_sep();\n@@ -2471,9 +2473,11 @@ namespace std\n       __test = __grouping_tmp[__i] == __grouping[__j];\n     for (; __i && __test; --__i)\n       __test = __grouping_tmp[__i] == __grouping[__min];\n-    // ... but the last parsed grouping can be <= numpunct\n-    // grouping.\n-    __test &= __grouping_tmp[0] <= __grouping[__min];\n+    // ... but the first parsed grouping can be <= numpunct\n+    // grouping (only do the check if the numpunct char is > 0\n+    // because <= 0 means any size is ok).\n+    if (static_cast<signed char>(__grouping[__min]) > 0)\n+      __test &= __grouping_tmp[0] <= __grouping[__min];\n     return __test;\n   }\n \n@@ -2483,7 +2487,8 @@ namespace std\n \t\t   const char* __gbeg, size_t __gsize,\n \t\t   const _CharT* __first, const _CharT* __last)\n     {\n-      if (__last - __first > *__gbeg)\n+      if (__last - __first > *__gbeg\n+\t  && static_cast<signed char>(*__gbeg) > 0)\n \t{\n \t  const bool __bump = __gsize != 1;\n \t  __s = std::__add_grouping(__s,  __sep, __gbeg + __bump,"}, {"sha": "70f339045c06e6b6789c21bae8564605fdfe9875", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/23953.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F23953.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F23953.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F23953.cc?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -0,0 +1,83 @@\n+// 2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+struct Punct1: numpunct<char>\n+{ string do_grouping() const { return string(1, char(-1)); } };\n+\n+struct Punct2: numpunct<char>\n+{ string do_grouping() const { return string(\"\\002\") + char(-1); } };\n+\n+struct Punct3: numpunct<char>\n+{ string do_grouping() const { return string(\"\\001\\002\") + char(-1); } };\n+\n+// libstdc++/23953\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  istringstream iss1, iss2, iss3;\n+  iss1.imbue(locale(iss1.getloc(), new Punct1));\n+  iss2.imbue(locale(iss2.getloc(), new Punct2));\n+  iss3.imbue(locale(iss3.getloc(), new Punct3));\n+  const num_get<char>& ng1 = use_facet<num_get<char> >(iss1.getloc());\n+  const num_get<char>& ng2 = use_facet<num_get<char> >(iss2.getloc());\n+  const num_get<char>& ng3 = use_facet<num_get<char> >(iss3.getloc());\n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 12345l;\n+  long l2 = 12345678l;\n+  double d = 0.0;\n+  double d1 = 1234567.0;\n+\n+  iss1.str(\"12345\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l1 );\n+\n+  iss2.str(\"123456,78\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+\n+  iss3.str(\"1234,56,7.0\");\n+  err = ios_base::goodbit;\n+  end = ng3.get(iss3.rdbuf(), 0, iss3, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "efc9038e71ac63c94b2509c9f63f1ff5ba677a53", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/23953.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F23953.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F23953.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F23953.cc?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -0,0 +1,83 @@\n+// 2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+struct Punct1: numpunct<wchar_t>\n+{ string do_grouping() const { return string(1, char(-1)); } };\n+\n+struct Punct2: numpunct<wchar_t>\n+{ string do_grouping() const { return string(\"\\002\") + char(-1); } };\n+\n+struct Punct3: numpunct<wchar_t>\n+{ string do_grouping() const { return string(\"\\001\\002\") + char(-1); } };\n+\n+// libstdc++/23953\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  wistringstream iss1, iss2, iss3;\n+  iss1.imbue(locale(iss1.getloc(), new Punct1));\n+  iss2.imbue(locale(iss2.getloc(), new Punct2));\n+  iss3.imbue(locale(iss3.getloc(), new Punct3));\n+  const num_get<wchar_t>& ng1 = use_facet<num_get<wchar_t> >(iss1.getloc());\n+  const num_get<wchar_t>& ng2 = use_facet<num_get<wchar_t> >(iss2.getloc());\n+  const num_get<wchar_t>& ng3 = use_facet<num_get<wchar_t> >(iss3.getloc());\n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 12345l;\n+  long l2 = 12345678l;\n+  double d = 0.0;\n+  double d1 = 1234567.0;\n+\n+  iss1.str(L\"12345\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l1 );\n+\n+  iss2.str(L\"123456,78\");\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+\n+  iss3.str(L\"1234,56,7.0\");\n+  err = ios_base::goodbit;\n+  end = ng3.get(iss3.rdbuf(), 0, iss3, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "030b1cb87d3680123db7a835072921cd83c66056", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/23953.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F23953.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F23953.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F23953.cc?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -0,0 +1,76 @@\n+// 2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+struct Punct1: numpunct<char>\n+{ string do_grouping() const { return string(1, char(-1)); } };\n+\n+struct Punct2: numpunct<char>\n+{ string do_grouping() const { return string(\"\\002\") + char(-1); } };\n+\n+struct Punct3: numpunct<char>\n+{ string do_grouping() const { return string(\"\\001\\002\") + char(-1); } };\n+\n+// libstdc++/23953\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  ostringstream oss1, oss2, oss3;\n+  string result1, result2, result3;\n+\n+  oss1.imbue(locale(oss1.getloc(), new Punct1));\n+  oss2.imbue(locale(oss2.getloc(), new Punct2));\n+  oss3.imbue(locale(oss3.getloc(), new Punct3));\n+  const num_put<char>& ng1 = use_facet<num_put<char> >(oss1.getloc());\n+  const num_put<char>& ng2 = use_facet<num_put<char> >(oss2.getloc());\n+  const num_put<char>& ng3 = use_facet<num_put<char> >(oss3.getloc());\n+\n+  long l1 = 12345l;\n+  long l2 = 12345678l;\n+  double d1 = 1234567.0;\n+\n+  ng1.put(oss1.rdbuf(), oss1, '+', l1);\n+  result1 = oss1.str();\n+  VERIFY( result1 == \"12345\" );\n+\n+  ng2.put(oss2.rdbuf(), oss2, '+', l2);\n+  result2 = oss2.str();\n+  VERIFY( result2 == \"123456,78\" );\n+\n+  oss3.precision(1);\n+  oss3.setf(ios_base::fixed, ios_base::floatfield);\n+  ng3.put(oss3.rdbuf(), oss3, '+', d1);\n+  result3 = oss3.str();\n+  VERIFY( result3 == \"1234,56,7.0\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a947d55876b0cfdebecb2ed18b43f67c823b092e", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/23953.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F23953.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6e95b7f3905e1e4b92360b51eef4785ae9d22/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F23953.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F23953.cc?ref=eae6e95b7f3905e1e4b92360b51eef4785ae9d22", "patch": "@@ -0,0 +1,76 @@\n+// 2005-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+struct Punct1: numpunct<wchar_t>\n+{ string do_grouping() const { return string(1, char(-1)); } };\n+\n+struct Punct2: numpunct<wchar_t>\n+{ string do_grouping() const { return string(\"\\002\") + char(-1); } };\n+\n+struct Punct3: numpunct<wchar_t>\n+{ string do_grouping() const { return string(\"\\001\\002\") + char(-1); } };\n+\n+// libstdc++/23953\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  wostringstream oss1, oss2, oss3;\n+  wstring result1, result2, result3;\n+\n+  oss1.imbue(locale(oss1.getloc(), new Punct1));\n+  oss2.imbue(locale(oss2.getloc(), new Punct2));\n+  oss3.imbue(locale(oss3.getloc(), new Punct3));\n+  const num_put<wchar_t>& ng1 = use_facet<num_put<wchar_t> >(oss1.getloc());\n+  const num_put<wchar_t>& ng2 = use_facet<num_put<wchar_t> >(oss2.getloc());\n+  const num_put<wchar_t>& ng3 = use_facet<num_put<wchar_t> >(oss3.getloc());\n+\n+  long l1 = 12345l;\n+  long l2 = 12345678l;\n+  double d1 = 1234567.0;\n+\n+  ng1.put(oss1.rdbuf(), oss1, L'+', l1);\n+  result1 = oss1.str();\n+  VERIFY( result1 == L\"12345\" );\n+\n+  ng2.put(oss2.rdbuf(), oss2, L'+', l2);\n+  result2 = oss2.str();\n+  VERIFY( result2 == L\"123456,78\" );\n+\n+  oss3.precision(1);\n+  oss3.setf(ios_base::fixed, ios_base::floatfield);\n+  ng3.put(oss3.rdbuf(), oss3, L'+', d1);\n+  result3 = oss3.str();\n+  VERIFY( result3 == L\"1234,56,7.0\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}