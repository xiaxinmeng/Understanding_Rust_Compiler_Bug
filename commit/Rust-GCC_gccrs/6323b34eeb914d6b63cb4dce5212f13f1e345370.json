{"sha": "6323b34eeb914d6b63cb4dce5212f13f1e345370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyM2IzNGVlYjkxNGQ2YjYzY2I0ZGNlNTIxMmYxM2YxZTM0NTM3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-10T01:58:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-10T01:58:19Z"}, "message": "re PR libstdc++/18604 (Use of unqualified names conflict with names in global namespace)\n\n2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n\n\tPR libstdc++/18604\n\t* include/bits/deque.tcc: Fully qualify names from namespace std.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_map.h: Likewise.\n\t* include/bits/stl_multimap.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\t* include/std/std_bitset.h: Likewise.\n\t* testsuite/23_containers/bitset/18604.cc: New.\n\t* testsuite/23_containers/deque/18604.cc: Likewise.\n\t* testsuite/23_containers/list/18604.cc: Likewise.\n\t* testsuite/23_containers/map/18604.cc: Likewise.\n\t* testsuite/23_containers/set/18604.cc: Likewise.\n\t* testsuite/23_containers/vector/18604.cc: Likewise.\n\nCo-Authored-By: Giovanni Bajo <giovannibajo@gcc.gnu.org>\n\nFrom-SVN: r99499", "tree": {"sha": "63e8bdcd6392deec898c6dca5b1c3a8fd25e4ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63e8bdcd6392deec898c6dca5b1c3a8fd25e4ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6323b34eeb914d6b63cb4dce5212f13f1e345370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6323b34eeb914d6b63cb4dce5212f13f1e345370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6323b34eeb914d6b63cb4dce5212f13f1e345370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6323b34eeb914d6b63cb4dce5212f13f1e345370/comments", "author": null, "committer": null, "parents": [{"sha": "f4c767fdc22ab554ca04476d720c02513f7873a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c767fdc22ab554ca04476d720c02513f7873a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c767fdc22ab554ca04476d720c02513f7873a4"}], "stats": {"total": 528, "additions": 404, "deletions": 124}, "files": [{"sha": "89bfcbbee5c179a474770de21aeeef47d0d53995", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,3 +1,25 @@\n+2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\t    \n+\tPR libstdc++/18604\n+\t* include/bits/deque.tcc: Fully qualify names from namespace std.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_map.h: Likewise.\n+\t* include/bits/stl_multimap.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\t* include/std/std_bitset.h: Likewise.\n+\t* testsuite/23_containers/bitset/18604.cc: New.\n+\t* testsuite/23_containers/deque/18604.cc: Likewise.\n+\t* testsuite/23_containers/list/18604.cc: Likewise.\n+\t* testsuite/23_containers/map/18604.cc: Likewise.\n+\t* testsuite/23_containers/set/18604.cc: Likewise.\n+\t* testsuite/23_containers/vector/18604.cc: Likewise.\t\n+\n 2005-05-09  Mike Stump  <mrs@apple.com>\n \n \t* configure: Regenerate."}, {"sha": "c5440b22419e58fa991de6e2b78a9913787247fd", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Deque implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -203,7 +203,7 @@ namespace _GLIBCXX_STD\n       void\n       deque<_Tp, _Alloc>\n       ::_M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t      input_iterator_tag)\n+\t\t      std::input_iterator_tag)\n       {\n         iterator __cur = begin();\n         for (; __first != __last && __cur != end(); ++__cur, ++__first)\n@@ -287,7 +287,7 @@ namespace _GLIBCXX_STD\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_initialize(_InputIterator __first, _InputIterator __last,\n-                          input_iterator_tag)\n+                          std::input_iterator_tag)\n       {\n         this->_M_initialize_map(0);\n         try\n@@ -307,7 +307,7 @@ namespace _GLIBCXX_STD\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,\n-                          forward_iterator_tag)\n+                          std::forward_iterator_tag)\n       {\n         const size_type __n = std::distance(__first, __last);\n         this->_M_initialize_map(__n);\n@@ -417,7 +417,7 @@ namespace _GLIBCXX_STD\n       deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n                           _InputIterator __first, _InputIterator __last,\n-                          input_iterator_tag)\n+                          std::input_iterator_tag)\n       { std::copy(__first, __last, std::inserter(*this, __pos)); }\n \n   template <typename _Tp, typename _Alloc>\n@@ -426,7 +426,7 @@ namespace _GLIBCXX_STD\n       deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n                           _ForwardIterator __first, _ForwardIterator __last,\n-                          forward_iterator_tag)\n+                          std::forward_iterator_tag)\n       {\n         const size_type __n = std::distance(__first, __last);\n         if (__pos._M_cur == this->_M_impl._M_start._M_cur)"}, {"sha": "bdd21559fb94f7779362e0e696eef55b33487095", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -106,7 +106,8 @@ namespace _GLIBCXX_STD\n     { *_M_p ^= _M_mask; }\n   };\n \n-  struct _Bit_iterator_base : public iterator<random_access_iterator_tag, bool>\n+  struct _Bit_iterator_base\n+  : public std::iterator<std::random_access_iterator_tag, bool>\n   {\n     _Bit_type * _M_p;\n     unsigned int _M_offset;\n@@ -489,7 +490,7 @@ template<typename _Alloc>\n     template<class _InputIterator>\n       void\n       _M_initialize_range(_InputIterator __first, _InputIterator __last,\n-\t\t\t  input_iterator_tag)\n+\t\t\t  std::input_iterator_tag)\n       {\n \tthis->_M_impl._M_start = iterator();\n \tthis->_M_impl._M_finish = iterator();\n@@ -501,7 +502,7 @@ template<typename _Alloc>\n     template<class _ForwardIterator>\n       void\n       _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\t  forward_iterator_tag)\n+\t\t\t  std::forward_iterator_tag)\n       {\n \tconst size_type __n = std::distance(__first, __last);\n \t_M_initialize(__n);\n@@ -511,7 +512,7 @@ template<typename _Alloc>\n     template<class _InputIterator>\n       void\n       _M_insert_range(iterator __pos, _InputIterator __first, \n-\t\t      _InputIterator __last, input_iterator_tag)\n+\t\t      _InputIterator __last, std::input_iterator_tag)\n       {\n \tfor (; __first != __last; ++__first)\n \t  {\n@@ -523,7 +524,7 @@ template<typename _Alloc>\n     template<class _ForwardIterator>\n       void\n       _M_insert_range(iterator __position, _ForwardIterator __first, \n-\t\t      _ForwardIterator __last, forward_iterator_tag)\n+\t\t      _ForwardIterator __last, std::forward_iterator_tag)\n       {\n \tif (__first != __last)\n \t  {\n@@ -746,7 +747,7 @@ template<typename _Alloc>\n     template<class _InputIterator>\n       void\n       _M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t    input_iterator_tag)\n+\t\t    std::input_iterator_tag)\n       {\n \titerator __cur = begin();\n \tfor (; __first != __last && __cur != end(); ++__cur, ++__first)\n@@ -760,7 +761,7 @@ template<typename _Alloc>\n     template<class _ForwardIterator>\n       void\n       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t    forward_iterator_tag)\n+\t\t    std::forward_iterator_tag)\n       {\n \tconst size_type __len = std::distance(__first, __last);\n \tif (__len < size())"}, {"sha": "fdee3d5aedfd83d74172efd3e6b3f6de2fc44848", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -106,14 +106,14 @@ namespace _GLIBCXX_STD\n       static size_t _S_buffer_size()\n       { return __deque_buf_size(sizeof(_Tp)); }\n \n-      typedef random_access_iterator_tag iterator_category;\n-      typedef _Tp                        value_type;\n-      typedef _Ptr                       pointer;\n-      typedef _Ref                       reference;\n-      typedef size_t                     size_type;\n-      typedef ptrdiff_t                  difference_type;\n-      typedef _Tp**                      _Map_pointer;\n-      typedef _Deque_iterator            _Self;\n+      typedef std::random_access_iterator_tag iterator_category;\n+      typedef _Tp                             value_type;\n+      typedef _Ptr                            pointer;\n+      typedef _Ref                            reference;\n+      typedef size_t                          size_type;\n+      typedef ptrdiff_t                       difference_type;\n+      typedef _Tp**                           _Map_pointer;\n+      typedef _Deque_iterator                 _Self;\n \n       _Tp* _M_cur;\n       _Tp* _M_first;\n@@ -591,7 +591,7 @@ namespace _GLIBCXX_STD\n    *  and we can use other standard algorithms as well.\n    *  @endif\n   */\n-  template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n     class deque : protected _Deque_base<_Tp, _Alloc>\n     {\n       // concept requirements\n@@ -1214,8 +1214,8 @@ namespace _GLIBCXX_STD\n         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n \t  _M_range_initialize(__first, __last, _IterCategory());\n \t}\n \n@@ -1236,13 +1236,13 @@ namespace _GLIBCXX_STD\n       template<typename _InputIterator>\n         void\n         _M_range_initialize(_InputIterator __first, _InputIterator __last,\n-\t\t\t    input_iterator_tag);\n+\t\t\t    std::input_iterator_tag);\n \n       // called by the second initialize_dispatch above\n       template<typename _ForwardIterator>\n         void\n         _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\t    forward_iterator_tag);\n+\t\t\t    std::forward_iterator_tag);\n       //@}\n \n       /**\n@@ -1278,22 +1278,22 @@ namespace _GLIBCXX_STD\n         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n \t  _M_assign_aux(__first, __last, _IterCategory());\n \t}\n \n       // called by the second assign_dispatch above\n       template<typename _InputIterator>\n         void\n         _M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t      input_iterator_tag);\n+\t\t      std::input_iterator_tag);\n \n       // called by the second assign_dispatch above\n       template<typename _ForwardIterator>\n         void\n         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t      forward_iterator_tag)\n+\t\t      std::forward_iterator_tag)\n         {\n \t  const size_type __len = std::distance(__first, __last);\n \t  if (__len > size())\n@@ -1356,22 +1356,22 @@ namespace _GLIBCXX_STD\n \t\t\t   _InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n           _M_range_insert_aux(__pos, __first, __last, _IterCategory());\n \t}\n \n       // called by the second insert_dispatch above\n       template<typename _InputIterator>\n         void\n         _M_range_insert_aux(iterator __pos, _InputIterator __first,\n-\t\t\t    _InputIterator __last, input_iterator_tag);\n+\t\t\t    _InputIterator __last, std::input_iterator_tag);\n \n       // called by the second insert_dispatch above\n       template<typename _ForwardIterator>\n         void\n         _M_range_insert_aux(iterator __pos, _ForwardIterator __first,\n-\t\t\t    _ForwardIterator __last, forward_iterator_tag);\n+\t\t\t    _ForwardIterator __last, std::forward_iterator_tag);\n \n       // Called by insert(p,n,x), and the range insert when it turns out to be\n       // the same thing.  Can use fill functions in optimal situations,"}, {"sha": "ce167ef80e4897b37dc47318876451a00b0923a2", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -110,14 +110,14 @@ namespace _GLIBCXX_STD\n   template<typename _Tp>\n     struct _List_iterator\n     {\n-      typedef _List_iterator<_Tp>           _Self;\n-      typedef _List_node<_Tp>               _Node;\n+      typedef _List_iterator<_Tp>                _Self;\n+      typedef _List_node<_Tp>                    _Node;\n \n-      typedef ptrdiff_t                     difference_type;\n-      typedef bidirectional_iterator_tag    iterator_category;\n-      typedef _Tp                           value_type;\n-      typedef _Tp*                          pointer;\n-      typedef _Tp&                          reference;\n+      typedef ptrdiff_t                          difference_type;\n+      typedef std::bidirectional_iterator_tag    iterator_category;\n+      typedef _Tp                                value_type;\n+      typedef _Tp*                               pointer;\n+      typedef _Tp&                               reference;\n \n       _List_iterator()\n       : _M_node() { }\n@@ -186,15 +186,15 @@ namespace _GLIBCXX_STD\n   template<typename _Tp>\n     struct _List_const_iterator\n     {\n-      typedef _List_const_iterator<_Tp>     _Self;\n-      typedef const _List_node<_Tp>         _Node;\n-      typedef _List_iterator<_Tp>           iterator;\n+      typedef _List_const_iterator<_Tp>          _Self;\n+      typedef const _List_node<_Tp>              _Node;\n+      typedef _List_iterator<_Tp>                iterator;\n \n-      typedef ptrdiff_t                     difference_type;\n-      typedef bidirectional_iterator_tag    iterator_category;\n-      typedef _Tp                           value_type;\n-      typedef const _Tp*                    pointer;\n-      typedef const _Tp&                    reference;\n+      typedef ptrdiff_t                          difference_type;\n+      typedef std::bidirectional_iterator_tag    iterator_category;\n+      typedef _Tp                                value_type;\n+      typedef const _Tp*                         pointer;\n+      typedef const _Tp&                         reference;\n \n       _List_const_iterator()\n       : _M_node() { }\n@@ -387,7 +387,7 @@ namespace _GLIBCXX_STD\n    *  iterator's next/previous pointers refer to itself, the %list is\n    *  %empty.  @endif\n   */\n-  template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n     class list : protected _List_base<_Tp, _Alloc>\n     {\n       // concept requirements"}, {"sha": "a0834a763bc0158653de0316939acc65fbf3f04d", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Map implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -86,8 +86,8 @@ namespace _GLIBCXX_STD\n    *  called (*_unique versus *_equal, same as the standard).\n    *  @endif\n   */\n-  template <typename _Key, typename _Tp, typename _Compare = less<_Key>,\n-            typename _Alloc = allocator<pair<const _Key, _Tp> > >\n+  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n+            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n     class map\n     {\n       // concept requirements\n@@ -98,11 +98,11 @@ namespace _GLIBCXX_STD\n     public:\n       typedef _Key                                          key_type;\n       typedef _Tp                                           mapped_type;\n-      typedef pair<const _Key, _Tp>                         value_type;\n+      typedef std::pair<const _Key, _Tp>                    value_type;\n       typedef _Compare                                      key_compare;\n \n       class value_compare\n-      : public binary_function<value_type, value_type, bool>\n+      : public std::binary_function<value_type, value_type, bool>\n       {\n \tfriend class map<_Key,_Tp,_Compare,_Alloc>;\n       protected:\n@@ -355,7 +355,7 @@ namespace _GLIBCXX_STD\n        *\n        *  Insertion requires logarithmic time.\n        */\n-      pair<iterator,bool>\n+      std::pair<iterator,bool>\n       insert(const value_type& __x)\n       { return _M_t.insert_unique(__x); }\n \n@@ -589,7 +589,7 @@ namespace _GLIBCXX_STD\n        *\n        *  This function probably only makes sense for multimaps.\n        */\n-      pair<iterator,iterator>\n+      std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       { return _M_t.equal_range(__x); }\n \n@@ -608,7 +608,7 @@ namespace _GLIBCXX_STD\n        *\n        *  This function probably only makes sense for multimaps.\n        */\n-      pair<const_iterator,const_iterator>\n+      std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       { return _M_t.equal_range(__x); }\n "}, {"sha": "524b236681393bfb0f0d20ae86809e3e43b61e52", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,8 +68,8 @@ namespace _GLIBCXX_STD\n   // Forward declaration of operators < and ==, needed for friend declaration.\n \n   template <typename _Key, typename _Tp,\n-            typename _Compare = less<_Key>,\n-            typename _Alloc = allocator<pair<const _Key, _Tp> > >\n+            typename _Compare = std::less<_Key>,\n+            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >\n     class multimap;\n \n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n@@ -114,11 +114,11 @@ namespace _GLIBCXX_STD\n     public:\n       typedef _Key                                          key_type;\n       typedef _Tp                                           mapped_type;\n-      typedef pair<const _Key, _Tp>                         value_type;\n+      typedef std::pair<const _Key, _Tp>                    value_type;\n       typedef _Compare                                      key_compare;\n \n       class value_compare\n-      : public binary_function<value_type, value_type, bool>\n+      : public std::binary_function<value_type, value_type, bool>\n       {\n \tfriend class multimap<_Key,_Tp,_Compare,_Alloc>;\n       protected:\n@@ -573,7 +573,7 @@ namespace _GLIBCXX_STD\n        *  @endcode\n        *  (but is faster than making the calls separately).\n        */\n-      pair<iterator,iterator>\n+      std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       { return _M_t.equal_range(__x); }\n \n@@ -590,7 +590,7 @@ namespace _GLIBCXX_STD\n        *  @endcode\n        *  (but is faster than making the calls separately).\n        */\n-      pair<const_iterator,const_iterator>\n+      std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       { return _M_t.equal_range(__x); }\n "}, {"sha": "3f42ef4c38d30b83e3d7c01dac29f33e326f25b5", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Multiset implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -67,8 +67,8 @@ namespace _GLIBCXX_STD\n {\n \n   // Forward declaration of operators < and ==, needed for friend declaration.\n-  template <class _Key, class _Compare = less<_Key>,\n-\t    class _Alloc = allocator<_Key> >\n+  template <class _Key, class _Compare = std::less<_Key>,\n+\t    class _Alloc = std::allocator<_Key> >\n     class multiset;\n \n   template <class _Key, class _Compare, class _Alloc>\n@@ -492,11 +492,11 @@ namespace _GLIBCXX_STD\n        *\n        *  This function probably only makes sense for multisets.\n        */\n-      pair<iterator,iterator>\n+      std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       { return _M_t.equal_range(__x); }\n \n-      pair<const_iterator,const_iterator>\n+      std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       { return _M_t.equal_range(__x); }\n "}, {"sha": "1a15d1172c85a050a3573d0eaf4f6e8714895619", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Set implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,8 +66,8 @@\n namespace _GLIBCXX_STD\n {\n   // Forward declarations of operators < and ==, needed for friend declaration.\n-  template<class _Key, class _Compare = less<_Key>,\n-\t   class _Alloc = allocator<_Key> >\n+  template<class _Key, class _Compare = std::less<_Key>,\n+\t   class _Alloc = std::allocator<_Key> >\n     class set;\n \n   template<class _Key, class _Compare, class _Alloc>\n@@ -308,11 +308,12 @@ namespace _GLIBCXX_STD\n        *\n        *  Insertion requires logarithmic time.\n        */\n-      pair<iterator,bool>\n+      std::pair<iterator,bool>\n       insert(const value_type& __x)\n       {\n-\tpair<typename _Rep_type::iterator, bool> __p = _M_t.insert_unique(__x);\n-\treturn pair<iterator, bool>(__p.first, __p.second);\n+\tstd::pair<typename _Rep_type::iterator, bool> __p =\n+\t  _M_t.insert_unique(__x);\n+\treturn std::pair<iterator, bool>(__p.first, __p.second);\n       }\n \n       /**\n@@ -502,11 +503,11 @@ namespace _GLIBCXX_STD\n        *\n        *  This function probably only makes sense for multisets.\n        */\n-      pair<iterator,iterator>\n+      std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       { return _M_t.equal_range(__x); }\n \n-      pair<const_iterator,const_iterator>\n+      std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       { return _M_t.equal_range(__x); }\n       //@}"}, {"sha": "d532c2dc9107eed26678cc317f5efa6362fd5fc5", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -144,7 +144,7 @@ namespace _GLIBCXX_STD\n    *  memory and size allocation.  Subscripting ( @c [] ) access is\n    *  also provided as with C-style arrays.\n   */\n-  template<typename _Tp, typename _Alloc = allocator<_Tp> >\n+  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n     class vector : protected _Vector_base<_Tp, _Alloc>\n     {\n       // Concept requirements.\n@@ -795,16 +795,16 @@ namespace _GLIBCXX_STD\n         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n \t  _M_range_initialize(__first, __last, _IterCategory());\n \t}\n \n       // Called by the second initialize_dispatch above\n       template<typename _InputIterator>\n         void\n         _M_range_initialize(_InputIterator __first,\n-\t\t\t    _InputIterator __last, input_iterator_tag)\n+\t\t\t    _InputIterator __last, std::input_iterator_tag)\n         {\n \t  for (; __first != __last; ++__first)\n \t    push_back(*__first);\n@@ -814,7 +814,7 @@ namespace _GLIBCXX_STD\n       template<typename _ForwardIterator>\n         void\n         _M_range_initialize(_ForwardIterator __first,\n-\t\t\t    _ForwardIterator __last, forward_iterator_tag)\n+\t\t\t    _ForwardIterator __last, std::forward_iterator_tag)\n         {\n \t  const size_type __n = std::distance(__first, __last);\n \t  this->_M_impl._M_start = this->_M_allocate(__n);\n@@ -844,22 +844,22 @@ namespace _GLIBCXX_STD\n         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n \t  _M_assign_aux(__first, __last, _IterCategory());\n \t}\n \n       // Called by the second assign_dispatch above\n       template<typename _InputIterator>\n         void\n         _M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t      input_iterator_tag);\n+\t\t      std::input_iterator_tag);\n \n       // Called by the second assign_dispatch above\n       template<typename _ForwardIterator>\n         void\n         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t      forward_iterator_tag);\n+\t\t      std::forward_iterator_tag);\n \n       // Called by assign(n,t), and the range assign when it turns out\n       // to be the same thing.\n@@ -885,22 +885,22 @@ namespace _GLIBCXX_STD\n         _M_insert_dispatch(iterator __pos, _InputIterator __first,\n \t\t\t   _InputIterator __last, __false_type)\n         {\n-\t  typedef typename iterator_traits<_InputIterator>::iterator_category\n-\t    _IterCategory;\n+\t  typedef typename std::iterator_traits<_InputIterator>::\n+\t    iterator_category _IterCategory;\n \t  _M_range_insert(__pos, __first, __last, _IterCategory());\n \t}\n \n       // Called by the second insert_dispatch above\n       template<typename _InputIterator>\n         void\n         _M_range_insert(iterator __pos, _InputIterator __first,\n-\t\t\t_InputIterator __last, input_iterator_tag);\n+\t\t\t_InputIterator __last, std::input_iterator_tag);\n \n       // Called by the second insert_dispatch above\n       template<typename _ForwardIterator>\n         void\n         _M_range_insert(iterator __pos, _ForwardIterator __first,\n-\t\t\t_ForwardIterator __last, forward_iterator_tag);\n+\t\t\t_ForwardIterator __last, std::forward_iterator_tag);\n \n       // Called by insert(p,n,x), and the range insert when it turns out to be\n       // the same thing."}, {"sha": "f9f5e5ac8a70608db032522e6331c2612d4b5932", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -192,7 +192,7 @@ namespace _GLIBCXX_STD\n       void\n       vector<_Tp, _Alloc>::\n       _M_assign_aux(_InputIterator __first, _InputIterator __last,\n-\t\t    input_iterator_tag)\n+\t\t    std::input_iterator_tag)\n       {\n \titerator __cur(begin());\n \tfor (; __first != __last && __cur != end(); ++__cur, ++__first)\n@@ -208,7 +208,7 @@ namespace _GLIBCXX_STD\n       void\n       vector<_Tp, _Alloc>::\n       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t    forward_iterator_tag)\n+\t\t    std::forward_iterator_tag)\n       {\n \tconst size_type __len = std::distance(__first, __last);\n \n@@ -392,7 +392,7 @@ namespace _GLIBCXX_STD\n     void\n     vector<_Tp, _Alloc>::\n     _M_range_insert(iterator __pos, _InputIterator __first,\n-\t\t    _InputIterator __last, input_iterator_tag)\n+\t\t    _InputIterator __last, std::input_iterator_tag)\n     {\n       for (; __first != __last; ++__first)\n \t{\n@@ -406,7 +406,7 @@ namespace _GLIBCXX_STD\n       void\n       vector<_Tp, _Alloc>::\n       _M_range_insert(iterator __position, _ForwardIterator __first,\n-\t\t      _ForwardIterator __last, forward_iterator_tag)\n+\t\t      _ForwardIterator __last, std::forward_iterator_tag)\n       {\n \tif (__first != __last)\n \t  {"}, {"sha": "76be09d821a55962adc1ea3c0907341cae5f4202", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -1,6 +1,6 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -751,15 +751,15 @@ namespace _GLIBCXX_STD\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n \texplicit\n-\tbitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n+\tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t       size_t __position = 0)\n \t: _Base()\n \t{\n \t  if (__position > __s.size())\n \t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n \t\t\t\t     \"not valid\"));\n \t  _M_copy_from_string(__s, __position,\n-\t\t\t      basic_string<_CharT, _Traits, _Alloc>::npos);\n+\t\t\t      std::basic_string<_CharT, _Traits, _Alloc>::npos);\n \t}\n \n       /**\n@@ -772,7 +772,7 @@ namespace _GLIBCXX_STD\n        *                                 which is neither '0' nor '1'.\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n-\tbitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n+\tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n \t       size_t __position, size_t __n)\n \t: _Base()\n \t{\n@@ -1014,39 +1014,47 @@ namespace _GLIBCXX_STD\n        *  an example).\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n-\tbasic_string<_CharT, _Traits, _Alloc>\n+\tstd::basic_string<_CharT, _Traits, _Alloc>\n \tto_string() const\n \t{\n-\t  basic_string<_CharT, _Traits, _Alloc> __result;\n+\t  std::basic_string<_CharT, _Traits, _Alloc> __result;\n \t  _M_copy_to_string(__result);\n \t  return __result;\n \t}\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 434. bitset::to_string() hard to use.\n       template<class _CharT, class _Traits>\n-\tbasic_string<_CharT, _Traits, allocator<_CharT> >\n+\tstd::basic_string<_CharT, _Traits, std::allocator<_CharT> >\n \tto_string() const\n-\t{ return to_string<_CharT, _Traits, allocator<_CharT> >(); }\n+\t{ return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }\n \n       template<class _CharT>\n-\tbasic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >\n+\tstd::basic_string<_CharT, std::char_traits<_CharT>,\n+\t                  std::allocator<_CharT> >\n \tto_string() const\n-\t{ return to_string<_CharT, char_traits<_CharT>, allocator<_CharT> >(); }\n+\t{\n+\t  return to_string<_CharT, std::char_traits<_CharT>,\n+\t                   std::allocator<_CharT> >();\n+\t}\n \n-      basic_string<char, char_traits<char>, allocator<char> >\n+      std::basic_string<char, std::char_traits<char>, std::allocator<char> >\n       to_string() const\n-      { return to_string<char, char_traits<char>, allocator<char> >(); }\n+      {\n+\treturn to_string<char, std::char_traits<char>,\n+\t                 std::allocator<char> >();\n+      }\n \n       // Helper functions for string operations.\n       template<class _CharT, class _Traits, class _Alloc>\n \tvoid\n-\t_M_copy_from_string(const basic_string<_CharT, _Traits, _Alloc>& __s,\n+\t_M_copy_from_string(const std::basic_string<_CharT,\n+\t\t\t    _Traits, _Alloc>& __s,\n \t\t\t    size_t, size_t);\n \n       template<class _CharT, class _Traits, class _Alloc>\n \tvoid\n-\t_M_copy_to_string(basic_string<_CharT, _Traits, _Alloc>&) const;\n+\t_M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&) const;\n \n       /// Returns the number of bits which are set.\n       size_t\n@@ -1136,7 +1144,7 @@ namespace _GLIBCXX_STD\n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       void\n-      bitset<_Nb>::_M_copy_from_string(const basic_string<_CharT, _Traits,\n+      bitset<_Nb>::_M_copy_from_string(const std::basic_string<_CharT, _Traits,\n \t\t\t\t       _Alloc>& __s, size_t __pos, size_t __n)\n       {\n \treset();\n@@ -1159,7 +1167,7 @@ namespace _GLIBCXX_STD\n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       void\n-      bitset<_Nb>::_M_copy_to_string(basic_string<_CharT, _Traits,\n+      bitset<_Nb>::_M_copy_to_string(std::basic_string<_CharT, _Traits,\n \t\t\t\t     _Alloc>& __s) const\n       {\n \t__s.assign(_Nb, '0');\n@@ -1216,15 +1224,15 @@ namespace _GLIBCXX_STD\n    *  hold.\n   */\n   template<class _CharT, class _Traits, size_t _Nb>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)\n     {\n       typedef typename _Traits::char_type char_type;\n-      basic_string<_CharT, _Traits> __tmp;\n+      std::basic_string<_CharT, _Traits> __tmp;\n       __tmp.reserve(_Nb);\n \n-      ios_base::iostate __state = ios_base::goodbit;\n-      typename basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n+      std::ios_base::iostate __state = std::ios_base::goodbit;\n+      typename std::basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n       if (__sentry)\n \t{\n \t  try\n@@ -1241,7 +1249,7 @@ namespace _GLIBCXX_STD\n \t\t  typename _Traits::int_type __c1 = __buf->sbumpc();\n \t\t  if (_Traits::eq_int_type(__c1, __eof))\n \t\t    {\n-\t\t      __state |= ios_base::eofbit;\n+\t\t      __state |= std::ios_base::eofbit;\n \t\t      break;\n \t\t    }\n \t\t  else\n@@ -1254,18 +1262,18 @@ namespace _GLIBCXX_STD\n \t\t      else if (_Traits::eq_int_type(__buf->sputbackc(__c2),\n \t\t\t\t\t\t    __eof))\n \t\t\t{\n-\t\t\t  __state |= ios_base::failbit;\n+\t\t\t  __state |= std::ios_base::failbit;\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n \t\t}\n \t    }\n \t  catch(...)\n-\t    { __is._M_setstate(ios_base::badbit); }\n+\t    { __is._M_setstate(std::ios_base::badbit); }\n \t}\n \n       if (__tmp.empty() && _Nb)\n-\t__state |= ios_base::failbit;\n+\t__state |= std::ios_base::failbit;\n       else\n \t__x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n       if (__state)\n@@ -1274,10 +1282,11 @@ namespace _GLIBCXX_STD\n     }\n \n   template <class _CharT, class _Traits, size_t _Nb>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const bitset<_Nb>& __x)\n     {\n-      basic_string<_CharT, _Traits> __tmp;\n+      std::basic_string<_CharT, _Traits> __tmp;\n       __x._M_copy_to_string(__tmp);\n       return __os << __tmp;\n     }"}, {"sha": "bc3287a4a0e6a11b069214e9c373e5919a72d823", "filename": "libstdc++-v3/testsuite/23_containers/bitset/18604.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,41 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <bitset>"}, {"sha": "f9ff1f69890925980bfe7aa045b7b46de3d72f1d", "filename": "libstdc++-v3/testsuite/23_containers/deque/18604.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,41 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <deque>"}, {"sha": "66519e5a92d6fbc03155b813315509dbf8156204", "filename": "libstdc++-v3/testsuite/23_containers/list/18604.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,41 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <list>"}, {"sha": "fb1d3bdd23b50919df3136c2a793aaabb19c0fa6", "filename": "libstdc++-v3/testsuite/23_containers/map/18604.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,41 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <map>"}, {"sha": "57a96271bc1da89a25f82e73f1c828a6cde9393c", "filename": "libstdc++-v3/testsuite/23_containers/set/18604.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,42 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <set>\n+"}, {"sha": "d22ee6f7e43ee9f2265e28a54c3894ba6ba5c5aa", "filename": "libstdc++-v3/testsuite/23_containers/vector/18604.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F18604.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6323b34eeb914d6b63cb4dce5212f13f1e345370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F18604.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F18604.cc?ref=6323b34eeb914d6b63cb4dce5212f13f1e345370", "patch": "@@ -0,0 +1,41 @@\n+// 2005-05-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+// { dg-do compile }\n+\n+// libstdc++/18604\n+struct less;\n+struct allocator;\n+struct pair;\n+struct binary_function;\n+struct iterator;\n+struct iterator_traits;\n+struct bidirectional_iterator_tag;\n+struct forward_iterator_tag;\n+struct input_iterator_tag;\n+struct random_access_iterator_tag;\n+struct ios_base;\n+struct basic_string;\n+struct basic_istream;\n+struct basic_ostream;\n+struct char_traits;\n+\n+#include <vector>"}]}