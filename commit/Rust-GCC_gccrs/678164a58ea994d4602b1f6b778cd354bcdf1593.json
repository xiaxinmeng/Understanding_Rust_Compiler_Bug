{"sha": "678164a58ea994d4602b1f6b778cd354bcdf1593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4MTY0YTU4ZWE5OTRkNDYwMmIxZjZiNzc4Y2QzNTRiY2RmMTU5Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-05-22T20:47:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-05-22T20:47:40Z"}, "message": "optabs.c (can_extend_p): Allow unsignedp to have any nonzero value.\n\n\t* optabs.c (can_extend_p): Allow unsignedp to have any nonzero value.\n\t(gen_extend_insn, can_fix_p, can_float_p): Likewise.\n\nFrom-SVN: r34087", "tree": {"sha": "8d94656fe95d158621c4e607e6935a98b11634de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d94656fe95d158621c4e607e6935a98b11634de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/678164a58ea994d4602b1f6b778cd354bcdf1593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678164a58ea994d4602b1f6b778cd354bcdf1593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678164a58ea994d4602b1f6b778cd354bcdf1593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678164a58ea994d4602b1f6b778cd354bcdf1593/comments", "author": null, "committer": null, "parents": [{"sha": "1eccefcd18d72ed9b9b2cd09202717c452867333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eccefcd18d72ed9b9b2cd09202717c452867333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eccefcd18d72ed9b9b2cd09202717c452867333"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "9a561d6eb79363979a3345d299e276308131d659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678164a58ea994d4602b1f6b778cd354bcdf1593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678164a58ea994d4602b1f6b778cd354bcdf1593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=678164a58ea994d4602b1f6b778cd354bcdf1593", "patch": "@@ -4,6 +4,9 @@\n \n Mon May 22 13:14:03 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* optabs.c (can_extend_p): Allow unsignedp to have any nonzero value.\n+\t(gen_extend_insn, can_fix_p, can_float_p): Likewise.\n+\t\n \t* final.c (final_scan_insn, case NOTE_INSN_FUNCTION_BEG): Remove\n \tdangling \"else\" that causes \"break\" to be conditional.\n \tAlso remove unneeded code at start."}, {"sha": "8007da35a71b724ab3f93d4b8ed05ff8aee9d735", "filename": "gcc/optabs.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678164a58ea994d4602b1f6b778cd354bcdf1593/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678164a58ea994d4602b1f6b778cd354bcdf1593/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=678164a58ea994d4602b1f6b778cd354bcdf1593", "patch": "@@ -3807,7 +3807,7 @@ can_extend_p (to_mode, from_mode, unsignedp)\n      enum machine_mode to_mode, from_mode;\n      int unsignedp;\n {\n-  return extendtab[(int) to_mode][(int) from_mode][unsignedp];\n+  return extendtab[(int) to_mode][(int) from_mode][unsignedp != 0];\n }\n \n /* Generate the body of an insn to extend Y (with mode MFROM)\n@@ -3819,7 +3819,7 @@ gen_extend_insn (x, y, mto, mfrom, unsignedp)\n      enum machine_mode mto, mfrom;\n      int unsignedp;\n {\n-  return (GEN_FCN (extendtab[(int) mto][(int) mfrom][unsignedp]) (x, y));\n+  return (GEN_FCN (extendtab[(int) mto][(int) mfrom][unsignedp != 0]) (x, y));\n }\n \f\n /* can_fix_p and can_float_p say whether the target machine\n@@ -3838,13 +3838,14 @@ can_fix_p (fixmode, fltmode, unsignedp, truncp_ptr)\n      int *truncp_ptr;\n {\n   *truncp_ptr = 0;\n-  if (fixtrunctab[(int) fltmode][(int) fixmode][unsignedp] != CODE_FOR_nothing)\n-    return fixtrunctab[(int) fltmode][(int) fixmode][unsignedp];\n+  if (fixtrunctab[(int) fltmode][(int) fixmode][unsignedp != 0]\n+      != CODE_FOR_nothing)\n+    return fixtrunctab[(int) fltmode][(int) fixmode][unsignedp != 0];\n \n   if (ftrunc_optab->handlers[(int) fltmode].insn_code != CODE_FOR_nothing)\n     {\n       *truncp_ptr = 1;\n-      return fixtab[(int) fltmode][(int) fixmode][unsignedp];\n+      return fixtab[(int) fltmode][(int) fixmode][unsignedp != 0];\n     }\n   return CODE_FOR_nothing;\n }\n@@ -3854,7 +3855,7 @@ can_float_p (fltmode, fixmode, unsignedp)\n      enum machine_mode fixmode, fltmode;\n      int unsignedp;\n {\n-  return floattab[(int) fltmode][(int) fixmode][unsignedp];\n+  return floattab[(int) fltmode][(int) fixmode][unsignedp != 0];\n }\n \f\n /* Generate code to convert FROM to floating point"}]}