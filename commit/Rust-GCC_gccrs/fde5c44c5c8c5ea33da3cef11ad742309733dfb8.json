{"sha": "fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlNWM0NGM1YzhjNWVhMzNkYTNjZWYxMWFkNzQyMzA5NzMzZGZiOA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-10-01T13:57:29Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-10-01T13:57:29Z"}, "message": "re PR tree-optimization/23604 (wrong code due to VRP)\n\n\n\tPR 23604\n\t* tree-vrp.c (extract_range_from_assert): For !=\n\tassertions, only build an anti-range if LIMIT is a\n\tsingle-valued range.\n\ntestsuite/\n\n\tPR 23604\n\t* gcc.c-torture/execute/pr23604.c: New test.\n\nCo-Authored-By: Diego Novillo <dnovillo@redhat.com>\n\nFrom-SVN: r104858", "tree": {"sha": "fce09b35d76668782499f03fb6d4aa8ccc08b2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fce09b35d76668782499f03fb6d4aa8ccc08b2d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/comments", "author": null, "committer": null, "parents": [{"sha": "0355186042ac451a8c12efd5296cf0c637d3094c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0355186042ac451a8c12efd5296cf0c637d3094c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0355186042ac451a8c12efd5296cf0c637d3094c"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "95db709fc391b13642ce4cec219f59bc36545ce5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "patch": "@@ -1,3 +1,11 @@\n+2005-10-01  James A. Morrison  <phython@gcc.gnu.org>\n+\t    Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 23604\n+\t* tree-vrp.c (extract_range_from_assert): For !=\n+\tassertions, only build an anti-range if LIMIT is a\n+\tsingle-valued range.\n+\n 2005-09-30  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* arm.md (movqi): On thumb when optimizing, handle loading from "}, {"sha": "aff2b8d92cb3ab9461413fb4b9ed0678f9fecb19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "patch": "@@ -1,3 +1,9 @@\n+2005-10-01  James A. Morrison  <phython@gcc.gnu.org>\n+\t    Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 23604\n+\t* gcc.c-torture/execute/pr23604.c: New test.\n+\n 2005-10-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/16404"}, {"sha": "4c2b80d56ca8d51cd7f730df585463cf4311aa30", "filename": "gcc/testsuite/gcc.c-torture/execute/pr23604.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23604.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23604.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr23604.c?ref=fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "patch": "@@ -0,0 +1,22 @@\n+extern void abort (void);\n+\n+int g(int i, int j)\n+{\n+  if (i>-1)\n+    if (i<2)\n+     {\n+        if (i != j)\n+          {\n+            if (j != 0)\n+                return 0;\n+          }\n+     }\n+  return 1;\n+}\n+\n+int main(void)\n+{\n+  if (!g(1, 0))\n+   abort ();\n+  return 0;\n+}"}, {"sha": "21e6cf6d1006d495b39fc825be02597c61d01e78", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fde5c44c5c8c5ea33da3cef11ad742309733dfb8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fde5c44c5c8c5ea33da3cef11ad742309733dfb8", "patch": "@@ -774,17 +774,32 @@ extract_range_from_assert (value_range_t *vr_p, tree expr)\n \t LIMIT's range was ~[0, 0], the assertion 'VAR != LIMIT' does\n \t not imply that VAR's range is [0, 0].  So, in the case of\n \t anti-ranges, we just assert the inequality using LIMIT and\n-\t not its anti-range.  */\n-      if (limit_vr == NULL\n-\t  || limit_vr->type == VR_ANTI_RANGE)\n+\t not its anti-range.\n+\n+\t If LIMIT_VR is a range, we can only use it to build a new\n+\t anti-range if LIMIT_VR is a single-valued range.  For\n+\t instance, if LIMIT_VR is [0, 1], the predicate\n+\t VAR != [0, 1] does not mean that VAR's range is ~[0, 1].\n+\t Rather, it means that for value 0 VAR should be ~[0, 0]\n+\t and for value 1, VAR should be ~[1, 1].  We cannot\n+\t represent these ranges.\n+\n+\t The only situation in which we can build a valid\n+\t anti-range is when LIMIT_VR is a single-valued range\n+\t (i.e., LIMIT_VR->MIN == LIMIT_VR->MAX).  In that case, \n+\t build the anti-range ~[LIMIT_VR->MIN, LIMIT_VR->MAX].  */\n+      if (limit_vr\n+\t  && limit_vr->type == VR_RANGE\n+\t  && compare_values (limit_vr->min, limit_vr->max) == 0)\n \t{\n-\t  min = limit;\n-\t  max = limit;\n+\t  min = limit_vr->min;\n+\t  max = limit_vr->max;\n \t}\n       else\n \t{\n-\t  min = limit_vr->min;\n-\t  max = limit_vr->max;\n+\t  /* In any other case, we cannot use LIMIT's range to build a\n+\t     valid anti-range.  */\n+\t  min = max = limit;\n \t}\n \n       /* If MIN and MAX cover the whole range for their type, then"}]}