{"sha": "c5c523723149112d117a6d3b259dfd95b032a545", "node_id": "C_kwDOANBUbNoAKGM1YzUyMzcyMzE0OTExMmQxMTdhNmQzYjI1OWRmZDk1YjAzMmE1NDU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-16T08:36:49Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-24T11:26:47Z"}, "message": "Mitigate -Wmaybe-uninitialized in expmed.cc.\n\nIt's the warning I see every time I build GCC:\n\nIn file included from /home/marxin/Programming/gcc/gcc/coretypes.h:478,\n                 from /home/marxin/Programming/gcc/gcc/expmed.cc:26:\nIn function \u2018poly_uint16 mode_to_bytes(machine_mode)\u2019,\n    inlined from \u2018typename if_nonpoly<typename T::measurement_type>::type GET_MODE_SIZE(const T&) [with T = scalar_int_mode]\u2019 at /home/marxin/Programming/gcc/gcc/machmode.h:647:24,\n    inlined from \u2018rtx_def* emit_store_flag_1(rtx, rtx_code, rtx, rtx, machine_mode, int, int, machine_mode)\u2019 at /home/marxin/Programming/gcc/gcc/expmed.cc:5728:56:\n/home/marxin/Programming/gcc/gcc/machmode.h:550:49: warning: \u2018*(unsigned int*)((char*)&int_mode + offsetof(scalar_int_mode, scalar_int_mode::m_mode))\u2019 may be used uninitialized [-Wmaybe-uninitialized]\n  550 |           ? mode_size_inline (mode) : mode_size[mode]);\n      |                                                 ^~~~\n/home/marxin/Programming/gcc/gcc/expmed.cc: In function \u2018rtx_def* emit_store_flag_1(rtx, rtx_code, rtx, rtx, machine_mode, int, int, machine_mode)\u2019:\n/home/marxin/Programming/gcc/gcc/expmed.cc:5657:19: note: \u2018*(unsigned int*)((char*)&int_mode + offsetof(scalar_int_mode, scalar_int_mode::m_mode))\u2019 was declared here\n 5657 |   scalar_int_mode int_mode;\n      |                   ^~~~~~~~\n\nCan we please mitigate it?\n\ngcc/ChangeLog:\n\n\t* expmed.cc (emit_store_flag_1): Mitigate -Wmaybe-uninitialized\n\twarning.", "tree": {"sha": "afaca4f3b75924c720fbbe685b9b4a6ea9383e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afaca4f3b75924c720fbbe685b9b4a6ea9383e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c523723149112d117a6d3b259dfd95b032a545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c523723149112d117a6d3b259dfd95b032a545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c523723149112d117a6d3b259dfd95b032a545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c523723149112d117a6d3b259dfd95b032a545/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3677eb80b683cead7db972bc206fd2e75d997bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3677eb80b683cead7db972bc206fd2e75d997bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3677eb80b683cead7db972bc206fd2e75d997bd2"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c890823b064bfb6bf6036f916054e07562a75a76", "filename": "gcc/expmed.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c523723149112d117a6d3b259dfd95b032a545/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c523723149112d117a6d3b259dfd95b032a545/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=c5c523723149112d117a6d3b259dfd95b032a545", "patch": "@@ -5658,7 +5658,7 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n   /* If we are comparing a double-word integer with zero or -1, we can\n      convert the comparison into one involving a single word.  */\n-  scalar_int_mode int_mode;\n+  scalar_int_mode int_mode = {};\n   if (is_int_mode (mode, &int_mode)\n       && GET_MODE_BITSIZE (int_mode) == BITS_PER_WORD * 2\n       && (!MEM_P (op0) || ! MEM_VOLATILE_P (op0)))"}]}