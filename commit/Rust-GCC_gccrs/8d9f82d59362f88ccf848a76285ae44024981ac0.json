{"sha": "8d9f82d59362f88ccf848a76285ae44024981ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5ZjgyZDU5MzYyZjg4Y2NmODQ4YTc2Mjg1YWU0NDAyNDk4MWFjMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2006-08-13T20:16:46Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-08-13T20:16:46Z"}, "message": "re PR c/27184 (Wrong code with pointers to arrays and types and strict aliasing)\n\n2006-08-13  Alexandre Oliva  <aoliva@redhat.com>\n            Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c/27184\n        * tree.c (build_array_type): Unify array types with\n        unspecified index_type.\n        * c-decl.c (grokdeclarator): Make sure we do not modify a\n        unified incomplete array type.\n        * c-typeck.c (store_init_value): Create distinct type before\n        filling in the index type in an initializer from a compound\n        literal.\n\n        * c-decl.c (grokdeclarator): Remove code where we copy the\n        array type over.\n\n2006-08-13  Alexandre Oliva  <aoliva@redhat.com>\n\n        PR c/27184\n        * gcc.dg/torture/pr27184.c: New test\n\n\nCo-Authored-By: Andrew Pinski <pinskia@physics.uc.edu>\n\nFrom-SVN: r116116", "tree": {"sha": "872017de3d83c2f55ee00df495e2809bd786b19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/872017de3d83c2f55ee00df495e2809bd786b19c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d9f82d59362f88ccf848a76285ae44024981ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9f82d59362f88ccf848a76285ae44024981ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9f82d59362f88ccf848a76285ae44024981ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9f82d59362f88ccf848a76285ae44024981ac0/comments", "author": null, "committer": null, "parents": [{"sha": "0bff60e5b729caa36d6669be4a964b87a9b6081b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bff60e5b729caa36d6669be4a964b87a9b6081b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bff60e5b729caa36d6669be4a964b87a9b6081b"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "37fbac8519ccc811a23de7d5b4255c7fc6d3abc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -1,3 +1,18 @@\n+2006-08-13  Alexandre Oliva  <aoliva@redhat.com>\n+\t    Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/27184\n+\t* tree.c (build_array_type): Unify array types with\n+\tunspecified index_type.\n+\t* c-decl.c (grokdeclarator): Make sure we do not modify a\n+\tunified incomplete array type.\n+\t* c-typeck.c (store_init_value): Create distinct type before\n+\tfilling in the index type in an initializer from a compound\n+\tliteral.\n+\n+\t* c-decl.c (grokdeclarator): Remove code where we copy the\n+\tarray type over.\n+\n 2006-08-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* tree-pass.h (TODO_update_ssa): Fix which bit is used to take"}, {"sha": "21b10a60b43376be76ae1824127933d86ba46ec8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -4309,6 +4309,18 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    size_varies = 1;\n \t\t  }\n \t      }\n+\t    else if (decl_context == TYPENAME)\n+\t      {\n+\t\tif (array_parm_vla_unspec_p)\n+\t\t  {\n+\t\t    /* The error is printed elsewhere.  We use this to\n+\t\t       avoid messing up with incomplete array types of\n+\t\t       the same type, that would otherwise be modified\n+\t\t       below.  */\n+\t\t    itype = build_range_type (sizetype, size_zero_node,\n+\t\t\t\t\t      NULL_TREE);\n+\t\t  }\n+\t      }\n \n \t     /* Complain about arrays of incomplete types.  */\n \t    if (!COMPLETE_TYPE_P (type))\n@@ -4317,12 +4329,23 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\ttype = error_mark_node;\n \t      }\n \t    else\n+\t    /* When itype is NULL, a shared incomplete array type is\n+\t       returned for all array of a given type.  Elsewhere we\n+\t       make sure we don't complete that type before copying\n+\t       it, but here we want to make sure we don't ever\n+\t       modify the shared type, so we gcc_assert (itype)\n+\t       below.  */\n \t      type = build_array_type (type, itype);\n \n \t    if (type != error_mark_node)\n \t      {\n \t\tif (size_varies)\n \t\t  {\n+\t\t    /* It is ok to modify type here even if itype is\n+\t\t       NULL: if size_varies, we're in a\n+\t\t       multi-dimentional array and the inner type has\n+\t\t       variable size, so the enclosing shared array type\n+\t\t       must too.  */\n \t\t    if (size && TREE_CODE (size) == INTEGER_CST)\n \t\t      type\n \t\t\t= build_distinct_type_copy (TYPE_MAIN_VARIANT (type));\n@@ -4334,11 +4357,13 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t   zero.  */\n \t\tif (size && integer_zerop (size))\n \t\t  {\n+\t\t    gcc_assert (itype);\n \t\t    TYPE_SIZE (type) = bitsize_zero_node;\n \t\t    TYPE_SIZE_UNIT (type) = size_zero_node;\n \t\t  }\n \t\tif (array_parm_vla_unspec_p)\n \t\t  {\n+\t\t    gcc_assert (itype);\n \t\t    /* The type is complete.  C99 6.7.5.2p4  */\n \t\t    TYPE_SIZE (type) = bitsize_zero_node;\n \t\t    TYPE_SIZE_UNIT (type) = size_zero_node;\n@@ -4497,21 +4522,6 @@ grokdeclarator (const struct c_declarator *declarator,\n       return decl;\n     }\n \n-  /* Detect the case of an array type of unspecified size\n-     which came, as such, direct from a typedef name.\n-     We must copy the type, so that each identifier gets\n-     a distinct type, so that each identifier's size can be\n-     controlled separately by its own initializer.  */\n-\n-  if (type != 0 && typedef_type != 0\n-      && TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type) == 0\n-      && TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (typedef_type))\n-    {\n-      type = build_array_type (TREE_TYPE (type), 0);\n-      if (size_varies)\n-\tC_TYPE_VARIABLE_SIZE (type) = 1;\n-    }\n-\n   /* If this is a type name (such as, in a cast or sizeof),\n      compute the type and return it now.  */\n "}, {"sha": "506b60fb0fec9be9fed7de4fbed8e88b171faadf", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -4326,16 +4326,18 @@ store_init_value (tree decl, tree init)\n \n       if (TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n \t{\n-\t  tree decl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n+\t  tree cldecl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n \n-\t  if (TYPE_DOMAIN (TREE_TYPE (decl)))\n+\t  if (TYPE_DOMAIN (TREE_TYPE (cldecl)))\n \t    {\n \t      /* For int foo[] = (int [3]){1}; we need to set array size\n \t\t now since later on array initializer will be just the\n \t\t brace enclosed list of the compound literal.  */\n-\t      TYPE_DOMAIN (type) = TYPE_DOMAIN (TREE_TYPE (decl));\n+\t      type = build_distinct_type_copy (TYPE_MAIN_VARIANT (type));\n+\t      TREE_TYPE (decl) = type;\n+\t      TYPE_DOMAIN (type) = TYPE_DOMAIN (TREE_TYPE (cldecl));\n \t      layout_type (type);\n-\t      layout_decl (decl, 0);\n+\t      layout_decl (cldecl, 0);\n \t    }\n \t}\n     }"}, {"sha": "de4f9e6a789dc7442ad9d22415acc24e6847a2c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -1,3 +1,8 @@\n+2006-08-13  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c/27184\n+\t* gcc.dg/torture/pr27184.c: New test.\n+\n 2006-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/pr27827.c: Only compile on ilp32 target."}, {"sha": "cfb6ed2a8a6dc2c3f1878358053e505633f0703e", "filename": "gcc/testsuite/gcc.dg/torture/pr27184.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27184.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27184.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27184.c?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -0,0 +1,22 @@\n+/* Copyright 2006 Free Software Foundation */\n+\n+/* Make sure a and a1 alias each other.\n+   Incomplete array types used to not be unified, which broke aliasing.  */\n+\n+/* { dg-do run } */\n+\n+typedef long atype[];\n+typedef long atype1[];\n+int NumSift (atype *a, atype1 *a1)\n+{\n+  (*a)[0] = 0;\n+  (*a1)[0] = 1;\n+  return (*a)[0];\n+}\n+int main(void)\n+{\n+  long a[2];\n+  if (!NumSift(&a, &a))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "f4e53ef592ffbed8db16d4ada2771facfe3b9274", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9f82d59362f88ccf848a76285ae44024981ac0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8d9f82d59362f88ccf848a76285ae44024981ac0", "patch": "@@ -5158,7 +5158,11 @@ build_array_type (tree elt_type, tree index_type)\n   \n   if (index_type == 0)\n     {\n-      layout_type (t);\n+      tree save = t;\n+      hashcode = iterative_hash_object (TYPE_HASH (elt_type), hashcode);\n+      t = type_hash_canon (hashcode, t);\n+      if (save == t)\n+\tlayout_type (t);\n       return t;\n     }\n "}]}