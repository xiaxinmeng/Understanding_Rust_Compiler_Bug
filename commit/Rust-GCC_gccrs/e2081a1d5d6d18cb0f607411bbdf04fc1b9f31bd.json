{"sha": "e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwODFhMWQ1ZDZkMThjYjBmNjA3NDExYmJkZjA0ZmMxYjlmMzFiZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-20T12:59:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-20T12:59:10Z"}, "message": "passes.c (init_optimization_passes): Move the second forwprop pass before alias computation.\n\n2008-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* passes.c (init_optimization_passes): Move the second\n\tforwprop pass before alias computation.  Remove the second\n\tDCE pass.  Remove the first dominator and phi copy/const\n\tprop passes.\n\n\t* gcc.dg/tree-ssa/20030530-2.c: Scan dom2 dump.\n\t* gcc.dg/tree-ssa/20030611-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030703-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030703-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030708-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030709-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030710-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030711-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030711-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030711-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030714-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030714-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030729-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030730-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030730-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030731-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-11.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-5.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-8.c: Likewise.\n\t* gcc.dg/tree-ssa/20030807-9.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-4.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-5.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-6.c: Likewise.\n\t* gcc.dg/tree-ssa/20030814-7.c: Likewise.\n\t* gcc.dg/tree-ssa/20030922-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20040729-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20041122-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21417.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21829.c: Scan phicprop2 dump.\n\t* gcc.dg/tree-ssa/ssa-dce-1.c: Scan dce2 dump.\n\t* gcc.dg/tree-ssa/ssa-dce-2.c: Likewise.\n\t* g++.dg/tree-ssa/pr31146.C: Remove XFAIL, adjust pattern.\n\t* gfortran.dg/ldist-1.f90: Adjust.\n\nFrom-SVN: r139286", "tree": {"sha": "fb3973c6785c2ca0d94667dc07544bf2232214f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb3973c6785c2ca0d94667dc07544bf2232214f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34afead0f14aeef2be80e295a408f7fbe489df50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34afead0f14aeef2be80e295a408f7fbe489df50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34afead0f14aeef2be80e295a408f7fbe489df50"}], "stats": {"total": 337, "additions": 188, "deletions": 149}, "files": [{"sha": "55d7448e508461ee333a674dab0bf21ab7babfa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,3 +1,10 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* passes.c (init_optimization_passes): Move the second\n+\tforwprop pass before alias computation.  Remove the second\n+\tDCE pass.  Remove the first dominator and phi copy/const\n+\tprop passes.\n+\n 2008-08-20  Nick Clifton  <nickc@redhat.com>\n \n \t* configure.ac (HAVE_GAS_CFI_DIRECTIVE): Always test for assembler"}, {"sha": "f47c6ec5b64e207f4ffc2b65f9d47c9f5ad5e913", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -589,6 +589,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_ccp);\n+      NEXT_PASS (pass_forwprop);\n       /* Ideally the function call conditional\n \t dead code elimination phase can be delayed\n \t till later where potentially more opportunities\n@@ -605,20 +606,11 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_fre);\n-      NEXT_PASS (pass_dce);\n-      NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_merge_phi);\n       NEXT_PASS (pass_vrp);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_cselim);\n-      NEXT_PASS (pass_dominator);\n-      /* The only const/copy propagation opportunities left after\n-\t DOM should be due to degenerate PHI nodes.  So rather than\n-\t run the full propagators, run a specialized pass which\n-\t only examines PHIs to discover const/copy propagation\n-\t opportunities.  */\n-      NEXT_PASS (pass_phi_only_cprop);\n       NEXT_PASS (pass_tree_ifcombine);\n       NEXT_PASS (pass_phiopt);\n       NEXT_PASS (pass_tail_recursion);"}, {"sha": "42ec9c04b7747bba7c59c120a0e43213603a0fbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,3 +1,45 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/20030530-2.c: Scan dom2 dump.\n+\t* gcc.dg/tree-ssa/20030611-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030703-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030703-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030708-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030709-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030710-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030711-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030711-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030711-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030714-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030714-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030729-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030730-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030730-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030731-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030807-9.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030814-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030922-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040729-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20041122-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21417.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21829.c: Scan phicprop2 dump.\n+\t* gcc.dg/tree-ssa/ssa-dce-1.c: Scan dce2 dump.\n+\t* gcc.dg/tree-ssa/ssa-dce-2.c: Likewise.\n+\t* g++.dg/tree-ssa/pr31146.C: Remove XFAIL, adjust pattern.\n+\t* gfortran.dg/ldist-1.f90: Adjust.\n+\n 2008-08-20  Victor Kaplansky  <victork@il.ibm.com>\n \n         * gcc.dg/vect/vect-multitypes-15.c: Fix typo."}, {"sha": "96790239693a8b43dd128ec76c4ffa096966bb70", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr31146.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146.C?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -12,6 +12,5 @@ void foo (int j)\n   *q = 1;\n }\n \n-/* { dg-final { scan-tree-dump \"i\\\\\\[j.*\\\\\\] = 1;\" \"forwprop1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"i\\\\\\[j.*\\\\\\] = 1;\" \"forwprop2\" } } */\n+/* { dg-final { scan-tree-dump \"i\\\\\\[j.*\\\\\\] =.* 1;\" \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop?\" } } */"}, {"sha": "3d4ba4f9157edb512438d382107858faa7909457", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030530-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030530-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030530-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030530-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n  \n \n typedef struct rs6000_stack {\n@@ -16,12 +16,12 @@ rs6000_emit_prologue (int i, rs6000_stack_t *info)\n \n /* There should be precisely one load of first_gp_reg_save.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"first_gp_reg_save\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"first_gp_reg_save\" 1 \"dom2\"} } */\n \n /* There should be precisely one addition.  If there is more than one, then\n    the dominator optimizations failed, most likely due to not handling\n    commutative operands correctly.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\+\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+\" 1 \"dom2\"} } */\n  \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */\n "}, {"sha": "fac91be70c5d137fc6ca13bb20918cfaf8ae9f1e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030611-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030611-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030611-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030611-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n  \n extern int square (int) __attribute__ ((__const__));\n shit(int a)\n@@ -10,5 +10,5 @@ shit(int a)\n \n /* There should be precisely one call to square.   If there is more than one,\n    then the dominator optimizations failed to remove the redundant call.  */\n-/* { dg-final { scan-tree-dump-times \"square\" 1 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"square\" 1 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "fa599237246caf32b68af72fc6f1eafc31fe866b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030703-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n extern void abort (void);\n extern int blah[];\n@@ -14,9 +14,9 @@ foo(int index)\n \n /* There should be precisely one load of blah.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"blah\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"blah\" 1 \"dom2\"} } */\n  \n /* There should be exactly one IF conditional.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "4a64b90db1a89b17335dfb9ab7cc5e4e8b87a8e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030703-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030703-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n \n@@ -29,16 +29,16 @@ get_alias_set (t)\n \n /* There should be precisely one load of {t,__t}->code.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"->code\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"->code\" 1 \"dom2\"} } */\n                                                                                 \n /* There should be precisely one load of tree_code_type.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"tree_code_type\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"tree_code_type\" 1 \"dom2\"} } */\n \n /* There should be one IF conditional.  If 'tree_code_type[t->code]' is\n    zero, then the third if() conditional is unnecessary.  That should cause\n    the call to abort() to be removed, which in turn causes the whole second\n    if() to disappear.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "b3be8a9394e62ace4757f37123c1e6944775a26a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030708-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030708-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030708-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030708-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n extern void abort (void);\n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -35,9 +35,9 @@ nonlocal_mentioned_p (x)\n \n /* There should be no casts to a short unsigned int since the entire\n    set of conditionals should optimize away.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\(short unsigned int\\\\)\" 0 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(short unsigned int\\\\)\" 0 \"dom2\"} } */\n                                                                                 \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\"} } */\n                                                                                 \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "4f9847852bf768b9cf1b093d56076f79436a28b0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030709-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-3.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n extern void abort (void);\n \n@@ -36,13 +36,13 @@ record_component_aliases (type)\n \n /* There should be precisely one load of type.binfo.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"dom2\"} } */\n  \n /* There should be precisely one load of common.code.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"common\\\\.code\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"common\\\\.code\" 1 \"dom2\"} } */\n  \n /* There should be one IF conditional.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "c344d48e9198e6774be1dec3e6ce6bbb63fb77c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030710-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030710-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n union tree_node;\n@@ -41,15 +41,15 @@ record_component_aliases (type)\n /* The call to blah should have been eliminated.  If the call is not\n    eliminated, then dominator optimizations failed and it'll be\n    impossible to delete other unnecessary code.  */\n-/* { dg-final { scan-tree-dump-not \"blah \\\\(\\\\)\" \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-not \"blah \\\\(\\\\)\" \"dom2\" } } */\n   \n /* There should be two IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\"} } */\n                                                                                 \n /* There should be a single load of type.binfo.  */\n-/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 1 \"dom2\"} } */\n \n /* There should be two loads of vec.length.  */\n-/* { dg-final { scan-tree-dump-times \"vec.length\" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"vec.length\" 2 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "1855580d571d82480b2d9fbb64c425c681e3cf85", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030711-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n  \n extern void abort (void);\n \n@@ -41,15 +41,15 @@ record_component_aliases (type)\n }\n \n /* The call to blah can not be eliminated.  */\n-/* { dg-final { scan-tree-dump-times \"blah \\\\(\\\\)\" 1 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"blah \\\\(\\\\)\" 1 \"dom2\" } } */\n    \n /* There should be four IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 4 \"dom2\"} } */\n                                                                                 \n /* There should be two loads of type.binfo.  */\n-/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"type\\\\.binfo\" 2 \"dom2\"} } */\n  \n /* There should be four loads of vec.length.  */\n-/* { dg-final { scan-tree-dump-times \"vec.length\" 3 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"vec.length\" 4 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "44dd25355774c1e62e31e6e1501dbf7b8e0bf05b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030711-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n   \n \n struct rtx_def;\n@@ -49,21 +49,21 @@ get_alias_set (t,z)\n }\n \n /* The calls to make_decl_rtl should be eliminated\n-/* { dg-final { scan-tree-dump-not \"make_decl_rtl \\\\(\\\\)\" \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-not \"make_decl_rtl \\\\(\\\\)\" \"dom2\" } } */\n     \n /* There should be three IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom2\"} } */\n                                                                                 \n /* There should be one loads of decl.rtl.  */\n-/* { dg-final { scan-tree-dump-times \"decl\\\\.rtl\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"decl\\\\.rtl\" 1 \"dom2\"} } */\n   \n /* There should be one load of code.  */\n-/* { dg-final { scan-tree-dump-times \"code\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"code\" 1 \"dom2\"} } */\n \n /* There should be one load of rtmem.  */\n-/* { dg-final { scan-tree-dump-times \"rtmem\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"rtmem\" 1 \"dom2\"} } */\n \n /* There should be one load of alias.  */\n-/* { dg-final { scan-tree-dump-times \"->alias\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"->alias\" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "ec04e17541e45b4586dfb27001300b2a6bbb4106", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030711-3.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030711-3.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n \n struct rtx_def;\n@@ -44,18 +44,18 @@ get_alias_set (t)\n }\n \n /* The calls to make_decl_rtl should be eliminated.  */\n-/* { dg-final { scan-tree-dump-not \"make_decl_rtl \\\\(\\\\)\" \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-not \"make_decl_rtl \\\\(\\\\)\" \"dom2\" } } */\n     \n /* There should be two IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\"} } */\n                                                                                 \n /* There should be one load of decl.rtl.  */\n-/* { dg-final { scan-tree-dump-times \"decl\\\\.rtl\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"decl\\\\.rtl\" 1 \"dom2\"} } */\n   \n /* There should be two loads of rtmem.  */\n-/* { dg-final { scan-tree-dump-times \"rtmem\" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"rtmem\" 2 \"dom2\"} } */\n \n /* There should be one load of alias.  */\n-/* { dg-final { scan-tree-dump-times \"->alias\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"->alias\" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "397036f25b97a716d9387315688c98551f1cdd9f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030714-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n    \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -35,6 +35,6 @@ find_base_value (src)\n \n \n /* There should be no casts to short unsigned int.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\(short unsigned int\\\\)\" 0 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(short unsigned int\\\\)\" 0 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "cac6486872610ce0596bd8cb2eaa4ea1c2916d90", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030714-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030714-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n    \n \n union tree_node;\n@@ -34,6 +34,6 @@ get_alias_set (t)\n \n /* There should be exactly three IF conditionals if we thread jumps\n    properly.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom2\"} } */\n  \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "59b48397c4bafc1eff3520dffd64245f0c086ef1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030729-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030729-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030729-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030729-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n union tree_node;\n@@ -45,10 +45,10 @@ readonly_fields_p (type)\n /* A good optimizer would realize that the cast to (unsigned int) is\n    useless as the earlier cast of the same value of (unsigned char) will\n    always produce the same result.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 0 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 0 \"dom2\"} } */\n  \n /* There should be one load of ->common.code.  We currently fail this\n    because we load from ->common.code using different types.  */\n-/* { dg-final { scan-tree-dump-times \"common\\.code\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"common\\.code\" 1 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "bb474ff4b1bd1c48c9841c3250700afb14a507a8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n      \n extern void exit (int);\n extern void *ggc_alloc (__SIZE_TYPE__);\n@@ -19,7 +19,7 @@ foo (int attr_kind, unsigned long offset)\n }\n \n /* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump \"if \" \"dom3\" { target { keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump \"if \" \"dom2\" { target { keeps_null_pointer_checks } } } } */\n      \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "1768d4523d2cc2a3b1dc3f19a21aa2ded730aacb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n      \n extern void exit (int);\n extern void *ggc_alloc (__SIZE_TYPE__);\n@@ -19,7 +19,7 @@ foo (int attr_kind, unsigned long offset)\n }\n \n /* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump \"if \" \"dom3\" { target { keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump \"if \" \"dom2\" { target { keeps_null_pointer_checks } } } } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "a16f49dbb21e20f65782d4e4abf16888181b97d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030731-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n extern void abort (void);\n \n@@ -63,5 +63,5 @@ store_expr (exp, target, want_value)\n    (B) only looks at immediate dominators, and only queued_subexp_p\n    immediately dominates the comparison in question.  We need something\n    stronger.  */\n-/* { dg-final { scan-tree-dump-times \"target.*!= 0\" 0 \"dom3\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"target.*!= 0\" 0 \"dom2\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "84344e36cf9cb66a4976d84631c34e28450d3cf5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n     \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -41,5 +41,5 @@ bar (rtx r)\n    are threaded to the return 0.  Which in turn means the path\n    which combines the result of those two tests into a new test\n    must always be true and it is optimized appropriately.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "0711053bc37ed00fbba4c2a3863986c8031f24fb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-11.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n struct rtx_def;\n@@ -17,5 +17,5 @@ foo (reg)\n }\n                                                                                 \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "a12d718408b017b3fd510182636badba8a097dfc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -ftree-vrp -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -ftree-vrp -fdump-tree-dom2\" } */\n      \n extern void abort (void);\n \n@@ -24,5 +24,5 @@ foo(int n)\n \n                                                                                \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\" } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "9a3c23163f82f51365979cd8eff4bf75d2d58d21", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-3.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n                                                                                 \n typedef unsigned int cppchar_t;\n cppchar_t\n@@ -23,5 +23,5 @@ cpp_parse_escape (pstr, limit, wide)\n \n /* There should be precisely three IF statements.  If there is\n    more than two, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "424b5583bb8ee6c2a7de4614d532b2a2c38d4996", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-5.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n struct rtx_def;\n@@ -30,10 +30,10 @@ foo ()\n \n /* There should be precisely one load of ->code.  If there is\n    more than, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"->code\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"->code\" 1 \"dom2\"} } */\n \n /* There should be two IF statements.  One for 'current_sym_addr->code == 42'.\n    The other one for '(EXPR)->unchanging'.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\"} } */\n \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "77fd3e59a1fb2ea373e9fa2a44327e4c7dfcb951", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-8.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n                                                                                 \n struct die_struct;\n typedef struct die_struct *dw_die_ref;\n@@ -51,5 +51,5 @@ output_location_lists (die)\n }\n \n /* There should be exactly one IF conditional, in output_location_lists.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "4f0b7cbafe92df14ccf0d8d1fd4525ded163c825", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-9.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n static void\n bar ()\n@@ -16,5 +16,5 @@ ooof ()\n }\n \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "aad53c3390760d0b8b528fb07ea9075e914ee362", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n    \n extern void abort (void);\n \n@@ -16,6 +16,6 @@ com(int *blah)\n \n /* There should be precisely one load of blah.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\*blah\" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\*blah\" 1 \"dom2\"} } */\n   \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "7f60b27830d0519a123fb4dc7cc125530a120aa5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n     \n extern void abort (void);\n \n@@ -17,6 +17,6 @@ foo (int value)\n }\n \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\"} } */\n  \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "2746415e59b1df7901ae469b68701a580538c2bb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-3.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n     \n extern void abort (void);\n \n@@ -18,6 +18,6 @@ foo (int value)\n }\n \n /* There should be one IF conditional.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\"} } */\n  \n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "2c2142cbcaa51b87886c76c07077946d153c0c0e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-4.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2 -fdump-tree-optimized\" } */\n     \n extern void abort (void);\n union tree_node;\n@@ -34,8 +34,8 @@ blah (decl, set)\n \n /* There should be precisely one reference to pointer_alias_set.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"pointer_alias_set\" 1 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"pointer_alias_set\" 1 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */\n \n /* The assignment set = -1 in the ELSE clause of the last IF\n    statement should be removed by the final cleanup phase.  */"}, {"sha": "41aa1482d437925c4af122e48acf359147813ccf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-5.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2 -fdump-tree-optimized\" } */\n     \n extern void abort (void);\n union tree_node;\n@@ -34,8 +34,8 @@ blah (decl, set)\n \n /* There should be precisely one reference to pointer_alias_set.  If there is\n    more than one, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"pointer_alias_set\" 1 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"pointer_alias_set\" 1 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */\n \n /* The assignment set = -1 in the ELSE clause of the last IF\n    statement should be removed by the final cleanup phase.  */"}, {"sha": "170526547d2170fb0ffaf307f49d6d5f9bafc787", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-6.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n union tree_node;\n@@ -41,5 +41,5 @@ foo (t, set)\n    more than one, then the dominator optimizations failed.  */\n /* ??? Will fail until we properly distinguish member stores.  At\n    present the write to type.alias_set kills the previous load.  */\n-/* { dg-final { scan-tree-dump-times \"common.code\" 1 \"dom3\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"common.code\" 1 \"dom2\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "711bab25168c39eceac3228c62c202fe73670513", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030814-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030814-7.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n extern void abort (void);\n struct rtx_def;\n@@ -38,5 +38,5 @@ mark_constant_function (void)\n    and the temporary used as the argument to cgraph_rtl_info.\n    This if we find current_function_decl used as an argument, then\n    we have failed.  */\n-/* { dg-final { scan-tree-dump-times \"\\\\(current_function_decl\\\\)\" 0 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(current_function_decl\\\\)\" 0 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "96db1bd1d3addc25035c9dbd93f880364d98bac3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030922-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n extern void abort (void);\n \n@@ -30,5 +30,5 @@ voidify_wrapper_expr (tree wrapper)\n \n \n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "ef94096fa0d9e8534fe549d80a2cd3fd28826540", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040729-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dce3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dce2\" } */\n \n foo ()\n {\n@@ -15,5 +15,5 @@ foo ()\n    compiler was mistakenly thinking that the statement had volatile\n    operands.  But 'p' itself is not volatile and taking the address of\n    a volatile does not constitute a volatile operand.  */\n-/* { dg-final { scan-tree-dump-times \"&x\" 0 \"dce3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dce3\" } } */\n+/* { dg-final { scan-tree-dump-times \"&x\" 0 \"dce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dce2\" } } */"}, {"sha": "d5cabb0bd374ef088ad787ca3974cdc27e5e9520", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20041122-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n \n \n typedef unsigned int size_t;\n@@ -34,5 +34,5 @@ find_unreachable_blocks (int frobit)\n    able to determine that modifying e->dest->flags does not\n    modify e or e->dest.  The net result is that we only need one\n    load of e->dest.  */\n-/* { dg-final { scan-tree-dump-times \"->dest\" 1 \"dom3\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"->dest\" 1 \"dom2\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */"}, {"sha": "4a2c82143ec17cc80a9f81097f7e0bce00a3e711", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21417.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom3-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n \n struct tree_common \n { \n@@ -49,6 +49,6 @@ test (tree expr, int t, int D17630)\n /* We should thread the backedge to the top of the loop; ie we only\n    execute the if (expr->common.code != 142) test once per loop\n    iteration.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"dom3\" } } */\n-/* { dg-final { cleanup-tree-dump \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"dom2\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom2\" } } */\n "}, {"sha": "2f7078cf3a24c0ce95a107e9e5828ed9cd6cf704", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21829.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21829.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -16,6 +16,6 @@ int test(int v)\n   return x;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Original statement:.*% 2\\[ \\t\\n]*Updated statement.*=1\" 0 \"phicprop3\" } } */\n-/* { dg-final { cleanup-tree-dump \"phicprop\\[1-3\\]\" } } */\n+/* { dg-final { scan-tree-dump-times \"Original statement:.*% 2\\[ \\t\\n]*Updated statement.*=1\" 0 \"phicprop2\" } } */\n+/* { dg-final { cleanup-tree-dump \"phicprop\\[1-2\\]\" } } */\n "}, {"sha": "12d9826293f68ae33debe19dcc236dcbfee6a4f2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dce3\" } */\n+/* { dg-options \"-O1 -fdump-tree-dce2\" } */\n \n int t() __attribute__ ((const));\n q()\n@@ -9,5 +9,5 @@ q()\n     i = t();\n }\n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dce3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dce2\" } } */"}, {"sha": "5e5302486d01ba5361adaa0bd6fa81d2216d987e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dce3\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n \n /* We should notice constantness of this function. */\n static int __attribute__((noinline)) t(int a) \n@@ -13,5 +13,5 @@ void q(void)\n     i = t(1);\n }\n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce3\"} } */\n-/* { dg-final { cleanup-tree-dump \"dce3\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce2\"} } */\n+/* { dg-final { cleanup-tree-dump \"dce2\" } } */"}, {"sha": "dd1f02a176b14731d661a4f94d2b6521eff267c7", "filename": "gcc/testsuite/gfortran.dg/ldist-1.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-1.f90?ref=e2081a1d5d6d18cb0f607411bbdf04fc1b9f31bd", "patch": "@@ -29,6 +29,5 @@ Subroutine PADEC(DKS,DKDS,HVAR,WM,WG,FN,NS,AN,BN,CN,IT)\n   return\n end Subroutine PADEC\n \n-! { dg-final { scan-tree-dump-times \"distributed: split to 4 loops\" 1 \"ldist\" { target ilp32 } } }\n-! { dg-final { scan-tree-dump-times \"distributed: split to 5 loops\" 1 \"ldist\" { target lp64 } } }\n+! { dg-final { scan-tree-dump-times \"distributed: split to 4 loops\" 1 \"ldist\" } }\n ! { dg-final { cleanup-tree-dump \"ldist\" } }"}]}