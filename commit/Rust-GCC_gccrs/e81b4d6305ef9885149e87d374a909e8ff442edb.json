{"sha": "e81b4d6305ef9885149e87d374a909e8ff442edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxYjRkNjMwNWVmOTg4NTE0OWU4N2QzNzRhOTA5ZThmZjQ0MmVkYg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-07-18T08:40:32Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-07-18T08:40:32Z"}, "message": "diagnostic.h (report_diagnostic): Change prototype.\n\n2000-07-17  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * diagnostic.h (report_diagnostic): Change prototype.\n\n        * diagnostic.c (output_do_verbatim, diagnostic_for_asm,\n        diagnostic_for_decl):  Change prototype.\n        (error_with_decl, warning_with_decl, pedwarn_with_decl, warning,\n        error, warning, error_with_file_and_line,\n        warning_with_file_and_line, pedwarn_with_file_and_line, fatal):\n        Adjust call to report_diagnostic, diagnostic_for_decl.\n        (error_for_asm, warning_for_asm): Adjust call to diagnostic_for_asm.\n        (output_verbatim, verbatim): Adjust call to output_do_verbatim.\n\n        * c-errors.c (pedwarn_c99): Adjust call to report_diagnostic. End\n        varaible argument list.\n\nFrom-SVN: r35116", "tree": {"sha": "408c67b67b9b53588977593ecb6b22fdb4787f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408c67b67b9b53588977593ecb6b22fdb4787f2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81b4d6305ef9885149e87d374a909e8ff442edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81b4d6305ef9885149e87d374a909e8ff442edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81b4d6305ef9885149e87d374a909e8ff442edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81b4d6305ef9885149e87d374a909e8ff442edb/comments", "author": null, "committer": null, "parents": [{"sha": "485c3e11a009cf2f7859e74fec35531435a4a867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485c3e11a009cf2f7859e74fec35531435a4a867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485c3e11a009cf2f7859e74fec35531435a4a867"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "7260401d4d2920d968bd3748f1a067464e11fb29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e81b4d6305ef9885149e87d374a909e8ff442edb", "patch": "@@ -1,3 +1,19 @@\n+2000-07-17  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+        * diagnostic.h (report_diagnostic): Change prototype.\n+\n+        * diagnostic.c (output_do_verbatim, diagnostic_for_asm,\n+        diagnostic_for_decl):  Change prototype.\n+        (error_with_decl, warning_with_decl, pedwarn_with_decl, warning,\n+        error, warning, error_with_file_and_line,\n+        warning_with_file_and_line, pedwarn_with_file_and_line, fatal):\n+        Adjust call to report_diagnostic, diagnostic_for_decl.\n+        (error_for_asm, warning_for_asm): Adjust call to diagnostic_for_asm. \n+        (output_verbatim, verbatim): Adjust call to output_do_verbatim.\n+        \n+        * c-errors.c (pedwarn_c99): Adjust call to report_diagnostic. End\n+        varaible argument list.\n+\t\n 2000-02-17  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.c: Don't include hashtab.h.  Most macro-handling code"}, {"sha": "7c86be9211bbab45e824e34015cd61d0c198f86f", "filename": "gcc/c-errors.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=e81b4d6305ef9885149e87d374a909e8ff442edb", "patch": "@@ -43,6 +43,7 @@ pedwarn_c99 VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, input_filename, lineno,\n+  report_diagnostic (msgid, &ap, input_filename, lineno,\n                      !flag_isoc99 || !flag_pedantic_errors);\n+  va_end (ap);\n }"}, {"sha": "5ab326649001508a284edba6720c796835aa0ff6", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e81b4d6305ef9885149e87d374a909e8ff442edb", "patch": "@@ -64,7 +64,7 @@ Boston, MA 02111-1307, USA.  */\n /* Prototypes. */\n static void finish_diagnostic PARAMS ((void));\n static void output_do_verbatim PARAMS ((output_buffer *,\n-                                        const char *, va_list));\n+                                        const char *, va_list *));\n static void output_to_stream PARAMS ((output_buffer *, FILE *));\n static void output_format PARAMS ((output_buffer *));\n \n@@ -75,8 +75,8 @@ static char *context_as_prefix PARAMS ((const char *, int, int));\n static void output_do_printf PARAMS ((output_buffer *, const char *));\n static void format_with_decl PARAMS ((output_buffer *, tree));\n static void file_and_line_for_asm PARAMS ((rtx, const char **, int *));\n-static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list, int));\n-static void diagnostic_for_decl PARAMS ((tree, const char *, va_list, int));\n+static void diagnostic_for_asm PARAMS ((rtx, const char *, va_list *, int));\n+static void diagnostic_for_decl PARAMS ((tree, const char *, va_list *, int));\n static void vnotice PARAMS ((FILE *, const char *, va_list));\n static void set_real_maximum_length PARAMS ((output_buffer *));\n                                           \n@@ -875,27 +875,27 @@ file_and_line_for_asm (insn, pfile, pline)\n    of the insn INSN.  This is used only when INSN is an `asm' with operands,\n    and each ASM_OPERANDS records its own source file and line.  */\n static void\n-diagnostic_for_asm (insn, msg, args, warn)\n+diagnostic_for_asm (insn, msg, args_ptr, warn)\n      rtx insn;\n      const char *msg;\n-     va_list args;\n+     va_list *args_ptr;\n      int warn;\n {\n   const char *file;\n   int line;\n \n   file_and_line_for_asm (insn, &file, &line);\n-  report_diagnostic (msg, args, file, line, warn);\n+  report_diagnostic (msg, args_ptr, file, line, warn);\n }\n \n /* Report a diagnostic MESSAGE at the declaration DECL.\n    MSG is a format string which uses %s to substitute the declaration\n    name; subsequent substitutions are a la output_format.  */\n static void\n-diagnostic_for_decl (decl, msg, args, warn)\n+diagnostic_for_decl (decl, msg, args_ptr, warn)\n      tree decl;\n      const char *msg;\n-     va_list args;\n+     va_list *args_ptr;\n      int warn;\n {\n   output_state os;\n@@ -907,7 +907,7 @@ diagnostic_for_decl (decl, msg, args, warn)\n   output_set_prefix\n     (diagnostic_buffer, context_as_prefix\n      (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn));\n-  output_buffer_ptr_to_format_args (diagnostic_buffer) = &args;\n+  output_buffer_ptr_to_format_args (diagnostic_buffer) = args_ptr;\n   output_buffer_text_cursor (diagnostic_buffer) = msg;\n   format_with_decl (diagnostic_buffer, decl);\n   finish_diagnostic ();\n@@ -1000,7 +1000,8 @@ pedwarn VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, input_filename, lineno, !flag_pedantic_errors);\n+  report_diagnostic (msgid, &ap, input_filename, lineno,\n+                     !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1027,7 +1028,7 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n      or kernel uses the original layout).  There's no point in issuing a\n      warning either, it's just unnecessary noise.  */\n   if (!DECL_IN_SYSTEM_HEADER (decl))\n-    diagnostic_for_decl (decl, msgid, ap, !flag_pedantic_errors);\n+    diagnostic_for_decl (decl, msgid, &ap, !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1051,7 +1052,7 @@ pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, file, line, !flag_pedantic_errors);\n+  report_diagnostic (msgid, &ap, file, line, !flag_pedantic_errors);\n   va_end (ap);\n }\n \n@@ -1191,7 +1192,7 @@ error_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, file, line, /* warn = */ 0);\n+  report_diagnostic (msgid, &ap, file, line, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1211,7 +1212,7 @@ error_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  diagnostic_for_decl (decl, msgid, ap, /* warn = */ 0);\n+  diagnostic_for_decl (decl, msgid, &ap, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1231,7 +1232,7 @@ error_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  diagnostic_for_asm (insn, msgid, ap, /* warn = */ 0);\n+  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1249,7 +1250,7 @@ error VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, input_filename, lineno, /* warn = */ 0);\n+  report_diagnostic (msgid, &ap, input_filename, lineno, /* warn = */ 0);\n   va_end (ap);\n }\n \n@@ -1285,7 +1286,7 @@ fatal VPARAMS ((const char *msgid, ...))\n   if (fatal_function != NULL)\n     (*fatal_function) (_(msgid), args_for_fatal_msg);\n   va_end (args_for_fatal_msg);\n-  report_diagnostic (msgid, ap, input_filename, lineno, 0);\n+  report_diagnostic (msgid, &ap, input_filename, lineno, 0);\n   va_end (ap);\n   exit (FATAL_EXIT_CODE);\n }\n@@ -1336,7 +1337,7 @@ warning_with_file_and_line VPARAMS ((const char *file, int line,\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, file, line, /* warn = */ 1);\n+  report_diagnostic (msgid, &ap, file, line, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1356,7 +1357,7 @@ warning_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  diagnostic_for_decl (decl, msgid, ap, /* warn = */ 1);\n+  diagnostic_for_decl (decl, msgid, &ap, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1376,7 +1377,7 @@ warning_for_asm VPARAMS ((rtx insn, const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  diagnostic_for_asm (insn, msgid, ap, /* warn = */ 1);\n+  diagnostic_for_asm (insn, msgid, &ap, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1394,7 +1395,7 @@ warning VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n-  report_diagnostic (msgid, ap, input_filename, lineno, /* warn = */ 1);\n+  report_diagnostic (msgid, &ap, input_filename, lineno, /* warn = */ 1);\n   va_end (ap);\n }\n \n@@ -1411,18 +1412,18 @@ finish_diagnostic ()\n /* Helper subroutine of output_verbatim and verbatim. Do the approriate\n    settings needed by BUFFER for a verbatim formatting.  */\n static void\n-output_do_verbatim (buffer, msg, args)\n+output_do_verbatim (buffer, msg, args_ptr)\n      output_buffer *buffer;\n      const char *msg;\n-     va_list args;\n+     va_list *args_ptr;\n {\n   output_state os;\n \n   os = buffer->state;\n   output_prefix (buffer) = NULL;\n   prefixing_policy (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   output_buffer_text_cursor (buffer) = msg;\n-  output_buffer_ptr_to_format_args (buffer) = &args;\n+  output_buffer_ptr_to_format_args (buffer) = args_ptr;\n   output_set_maximum_length (buffer, 0);\n   output_format (buffer);\n   buffer->state = os;\n@@ -1443,7 +1444,7 @@ output_verbatim VPARAMS ((output_buffer *buffer, const char *msg, ...))\n   buffer = va_arg (ap, output_buffer *);\n   msg = va_arg (ap, const char *);\n #endif\n-  output_do_verbatim (buffer, msg, ap);\n+  output_do_verbatim (buffer, msg, &ap);\n   va_end (ap);\n }\n \n@@ -1460,7 +1461,7 @@ verbatim VPARAMS ((const char *msg, ...))\n #ifndef ANSI_PROTOTYPES\n   msg = va_arg (ap, const char *);\n #endif\n-  output_do_verbatim (diagnostic_buffer, msg, ap);\n+  output_do_verbatim (diagnostic_buffer, msg, &ap);\n   output_to_stream (diagnostic_buffer, stderr);\n   va_end (ap);\n }\n@@ -1472,9 +1473,9 @@ verbatim VPARAMS ((const char *msg, ...))\n    The front-end independent format specifiers are exactly those described\n    in the documentation of output_format.  */\n void\n-report_diagnostic (msg, args, file, line, warn)\n+report_diagnostic (msg, args_ptr, file, line, warn)\n      const char *msg;\n-     va_list args;\n+     va_list *args_ptr;\n      const char *file;\n      int line;\n      int warn;\n@@ -1485,7 +1486,7 @@ report_diagnostic (msg, args, file, line, warn)\n     return;\n   os = diagnostic_buffer->state;\n   diagnostic_msg = msg;\n-  diagnostic_args = &args;\n+  diagnostic_args = args_ptr;\n   report_error_function (file);\n   output_set_prefix\n     (diagnostic_buffer, context_as_prefix (file, line, warn));"}, {"sha": "6a392e38eb44b5da43cf01980f5e9063aed70d1a", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81b4d6305ef9885149e87d374a909e8ff442edb/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=e81b4d6305ef9885149e87d374a909e8ff442edb", "patch": "@@ -101,7 +101,7 @@ extern int diagnostic_message_length_per_line;\n extern output_buffer *diagnostic_buffer;\n \n /* Prototypes */\n-void report_diagnostic          PARAMS ((const char *, va_list,\n+void report_diagnostic          PARAMS ((const char *, va_list *,\n                                          const char *, int, int));\n void initialize_diagnostics     PARAMS ((void));\n void reshape_diagnostic_buffer  PARAMS ((void));"}]}