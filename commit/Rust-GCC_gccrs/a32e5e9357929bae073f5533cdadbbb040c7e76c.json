{"sha": "a32e5e9357929bae073f5533cdadbbb040c7e76c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyZTVlOTM1NzkyOWJhZTA3M2Y1NTMzY2RhZGJiYjA0MGM3ZTc2Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-01-05T21:36:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-01-05T21:36:35Z"}, "message": "libitm: PowerPC support.\n\n\t* configure.tgt: Support powerpc-linux and powerpc-darwin.\n\t* config/linux/powerpc/futex_bits.h: New file.\n\t* config/powerpc/cacheline.h: New file.\n\t* config/powerpc/sjlj.S: New file.\n\t* config/powerpc/target.h: New file.\n\t* config/generic/asmcfi.h (cfi_offset): New.\n\t(cfi_restore, cfi_undefined): New.\n\nFrom-SVN: r182930", "tree": {"sha": "c1ee3b684ebedf7a0bc9f6437940dce7f8b87d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ee3b684ebedf7a0bc9f6437940dce7f8b87d8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32e5e9357929bae073f5533cdadbbb040c7e76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32e5e9357929bae073f5533cdadbbb040c7e76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32e5e9357929bae073f5533cdadbbb040c7e76c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32e5e9357929bae073f5533cdadbbb040c7e76c/comments", "author": null, "committer": null, "parents": [{"sha": "003e0ad60130a4ba700a7b65e58ffcf0f051076c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003e0ad60130a4ba700a7b65e58ffcf0f051076c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003e0ad60130a4ba700a7b65e58ffcf0f051076c"}], "stats": {"total": 594, "additions": 590, "deletions": 4}, "files": [{"sha": "96ebbaa073512a86ab70b138c1290c81f7750545", "filename": "libitm/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -1,3 +1,13 @@\n+2012-01-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.tgt: Support powerpc-linux and powerpc-darwin.\n+\t* config/linux/powerpc/futex_bits.h: New file.\n+\t* config/powerpc/cacheline.h: New file.\n+\t* config/powerpc/sjlj.S: New file.\n+\t* config/powerpc/target.h: New file.\n+\t* config/generic/asmcfi.h (cfi_offset): New.\n+\t(cfi_restore, cfi_undefined): New.\n+\n 2012-01-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR other/51171"}, {"sha": "3a5634b37e6242f8ee70df4002be01d17894b3b2", "filename": "libitm/config/generic/asmcfi.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -1,5 +1,4 @@\n-\n-/* Copyright (C) 2011 Free Software Foundation, Inc.\n+/* Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU Transactional Memory Library (libitm).\n@@ -34,6 +33,9 @@\n #define cfi_def_cfa(r,n)\t\t.cfi_def_cfa r, n\n #define cfi_rel_offset(r,o)\t\t.cfi_rel_offset r, o\n #define cfi_register(o,n)\t\t.cfi_register o, n\n+#define cfi_offset(r,o)\t\t\t.cfi_offset r, o\n+#define cfi_restore(r)\t\t\t.cfi_restore r\n+#define cfi_undefined(r)\t\t.cfi_undefined r\n \n #else\n \n@@ -44,5 +46,8 @@\n #define cfi_def_cfa(r,n)\n #define cfi_rel_offset(r,o)\n #define cfi_register(o,n)\n+#define cfi_offset(r,o)\n+#define cfi_restore(r)\n+#define cfi_undefined(r)\n \n #endif /* HAVE_AS_CFI_PSEUDO_OP */"}, {"sha": "daf5c6fe27d9d9b9ca507da9713876af9cb210a7", "filename": "libitm/config/linux/powerpc/futex_bits.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Flinux%2Fpowerpc%2Ffutex_bits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Flinux%2Fpowerpc%2Ffutex_bits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Fpowerpc%2Ffutex_bits.h?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -0,0 +1,54 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <sys/syscall.h>\n+\n+static inline long\n+sys_futex0 (std::atomic<int> *addr, int op, int val)\n+{\n+  register long int r0  __asm__ (\"r0\");\n+  register long int r3  __asm__ (\"r3\");\n+  register long int r4  __asm__ (\"r4\");\n+  register long int r5  __asm__ (\"r5\");\n+  register long int r6  __asm__ (\"r6\");\n+\n+  r0 = SYS_futex;\n+  r3 = (long) addr;\n+  r4 = op;\n+  r5 = val;\n+  r6 = 0;\n+\n+  /* ??? The powerpc64 sysdep.h file clobbers ctr; the powerpc32 sysdep.h\n+     doesn't.  It doesn't much matter for us.  In the interest of unity,\n+     go ahead and clobber it always.  */\n+\n+  __asm volatile (\"sc; mfcr %0\"\n+\t\t  : \"=r\"(r0), \"=r\"(r3), \"=r\"(r4), \"=r\"(r5), \"=r\"(r6)\n+\t\t  : \"r\"(r0), \"r\"(r3), \"r\"(r4), \"r\"(r5), \"r\"(r6)\n+\t\t  : \"r7\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\",\n+\t\t    \"cr0\", \"ctr\", \"memory\");\n+  if (__builtin_expect (r0 & (1 << 28), 0))\n+    return r3;\n+  return 0;\n+}"}, {"sha": "8819569ff6191e1ef77b1b43356004284c15ed58", "filename": "libitm/config/powerpc/cacheline.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Fcacheline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Fcacheline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fpowerpc%2Fcacheline.h?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef LIBITM_POWERPC_CACHELINE_H\n+#define LIBITM_POWERPC_CACHELINE_H 1\n+\n+// A cacheline is the smallest unit with which locks are associated.\n+// The current implementation of the _ITM_[RW] barriers assumes that\n+// all data types can fit (aligned) within a cachline, which means\n+// in practice sizeof(complex long double) is the smallest cacheline size.\n+// It ought to be small enough for efficient manipulation of the\n+// modification mask, below.\n+#if defined (__powerpc64__) || defined (__ppc64__)\n+# define CACHELINE_SIZE 64\n+#else\n+# define CACHELINE_SIZE 32\n+#endif\n+\n+#include \"config/generic/cacheline.h\"\n+\n+#endif // LIBITM_POWERPC_CACHELINE_H"}, {"sha": "83dfdc8bc792521a78c4ae9909a184de5e876ab2", "filename": "libitm/config/powerpc/sjlj.S", "status": "added", "additions": 411, "deletions": 0, "changes": 411, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -0,0 +1,411 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\t.text\n+\n+#include \"asmcfi.h\"\n+\n+#if defined(__powerpc64__) && defined(__ELF__)\n+.macro FUNC name\n+        .globl  \\name, .\\name\n+        .section \".opd\",\"aw\"\n+        .align  3\n+\\name:\n+        .quad   .\\name, .TOC.@tocbase, 0\n+        .size   \\name, 24\n+        .type   .\\name, @function\n+        .text\n+.\\name:\n+.endm\n+.macro END name\n+\t.size\t.\\name, . - .\\name\n+.endm\n+.macro HIDDEN name\n+\t.hidden\t\\name, .\\name\n+.endm\n+.macro CALL name\n+\tbl\t\\name\n+\tnop\n+.endm\n+#elif defined(__ELF__)\n+.macro FUNC name\n+\t.globl\t\\name\n+\t.type\t\\name, @function\n+\\name:\n+.endm\n+.macro END name\n+\t.size\t\\name, . - \\name\n+.endm\n+.macro HIDDEN name\n+\t.hidden\t\\name\n+.endm\n+.macro CALL name\n+\tbl\t\\name\n+.endm\n+#elif defined(_CALL_DARWIN)\n+.macro FUNC name\n+\t.globl\t_$0\n+_$0:\n+.endmacro\n+.macro END name\n+.endmacro\n+.macro HIDDEN name\n+\t.private_extern _$0\n+.endmacro\n+.macro CALL name\n+\tbl\t_$0\n+.endmacro\n+# ifdef __ppc64__\n+\t.machine ppc64\n+# else\n+\t.machine ppc7400\n+# endif\n+#else\n+#error \"unsupported system\"\n+#endif\n+\n+/* Parameterize the naming of registers.  */\n+#if defined(__ELF__)\n+# define r(N)\t%r##N\n+# define f(N)\t%f##N\n+# define v(N)\t%v##N\n+#elif defined(__MACH__)\n+# define r(N)\tr##N\n+# define f(N)\tf##N\n+# define v(N)\tv##N\n+#else\n+# define r(N)\tN\n+# define f(N)\tN\n+# define v(N)\tN\n+#endif\n+\n+/* Parameterize the code for 32-bit vs 64-bit.  */\n+#if defined(__powerpc64__) || defined(__ppc64__)\n+#define ldreg\tld\n+#define\tstreg\tstd\n+#define\tstregu\tstdu\n+#define WS\t8\n+#else\n+#define ldreg\tlwz\n+#define streg\tstw\n+#define stregu\tstwu\n+#define WS\t4\n+#endif\n+\n+/* Parameterize the code for call frame constants.  */\n+#if defined(_CALL_AIXDESC)\n+# define BASE\t\t6*WS\n+# define LR_SAVE\t2*WS\n+#elif defined(_CALL_SYSV)\n+# define BASE\t\t2*WS\n+# define LR_SAVE\t1*WS\n+#elif defined(_CALL_DARWIN)\n+# define BASE\t\t(6*WS + 2*WS)\n+# define LR_SAVE\t2*WS\n+#else\n+# error \"unsupported system\"\n+#endif\n+\n+#if defined(__ALTIVEC__) || defined(__VSX__)\n+# define OFS_VR\t\t0\n+# define OFS_VSCR\t12*16\n+# define OFS_VR_END\tOFS_VSCR + 8\n+#else\n+# define OFS_VR_END\t0\n+#endif\n+#ifndef _SOFT_FLOAT\n+# define OFS_FR\t\tOFS_VR_END\n+# define OFS_FPSCR\tOFS_FR + 18*8\n+# define OFS_FR_END\tOFS_FPSCR + 8\n+#else\n+# define OFS_FR_END\tOFS_VR_END\n+#endif\n+#define OFS_GR\t\tOFS_FR_END\n+#define OFS_CFA\t\tOFS_GR + 18*WS\n+#define OFS_LR\t\tOFS_CFA + WS\n+#define OFS_TOC\t\tOFS_LR + WS\n+#define OFS_CR\t\tOFS_TOC + WS\n+#define OFS_END\t\t(((OFS_CR + WS + 15) / 16) * 16)\n+\n+#define FRAME\t\t(((BASE + OFS_END + 15) / 16) * 16)\n+#define VRSAVE\t\t256\n+\n+\t.align\t4\n+FUNC _ITM_beginTransaction\n+\tcfi_startproc\n+\tmflr\tr(0)\n+\tmfcr\tr(5)\n+\taddi\tr(4), r(1), -OFS_END\n+\tmr\tr(6), r(1)\n+\tstreg\tr(0), LR_SAVE(r(1))\n+\tstregu\tr(1), -FRAME(r(1))\n+\tcfi_def_cfa_offset(FRAME)\n+\tcfi_offset(65, LR_SAVE)\n+\tstreg\tr(6),  OFS_CFA(r(4))\n+\tstreg\tr(0),   OFS_LR(r(4))\n+#ifdef _CALL_DARWIN\n+\tstreg\tr(13),  OFS_TOC(r(4))\n+#else\n+\tstreg\tr(2),   OFS_TOC(r(4))\n+#endif\n+\tstreg\tr(5),   OFS_CR(r(4))\n+\tstreg\tr(14),  0*WS+OFS_GR(r(4))\n+\tstreg\tr(15),  1*WS+OFS_GR(r(4))\n+\tstreg\tr(16),  2*WS+OFS_GR(r(4))\n+\tstreg\tr(17),  3*WS+OFS_GR(r(4))\n+\tstreg\tr(18),  4*WS+OFS_GR(r(4))\n+\tstreg\tr(19),  5*WS+OFS_GR(r(4))\n+\tstreg\tr(20),  6*WS+OFS_GR(r(4))\n+\tstreg\tr(21),  7*WS+OFS_GR(r(4))\n+\tstreg\tr(22),  8*WS+OFS_GR(r(4))\n+\tstreg\tr(23),  9*WS+OFS_GR(r(4))\n+\tstreg\tr(24), 10*WS+OFS_GR(r(4))\n+\tstreg\tr(25), 11*WS+OFS_GR(r(4))\n+\tstreg\tr(26), 12*WS+OFS_GR(r(4))\n+\tstreg\tr(27), 13*WS+OFS_GR(r(4))\n+\tstreg\tr(28), 14*WS+OFS_GR(r(4))\n+\tstreg\tr(29), 15*WS+OFS_GR(r(4))\n+\tstreg\tr(30), 16*WS+OFS_GR(r(4))\n+\tstreg\tr(31), 17*WS+OFS_GR(r(4))\n+\n+#ifndef _SOFT_FLOAT\n+\t/* ??? Determine when FPRs not present.  */\n+\t/* ??? Test r(3) for pr_hasNoFloatUpdate and skip the fp save.\n+\t   This is not yet set by the compiler.  */\n+\tmffs\tf(0)\n+\tstfd\tf(14),  0+OFS_FR(r(4))\n+\tstfd\tf(15),  8+OFS_FR(r(4))\n+\tstfd\tf(16), 16+OFS_FR(r(4))\n+\tstfd\tf(17), 24+OFS_FR(r(4))\n+\tstfd\tf(18), 32+OFS_FR(r(4))\n+\tstfd\tf(19), 40+OFS_FR(r(4))\n+\tstfd\tf(20), 48+OFS_FR(r(4))\n+\tstfd\tf(21), 56+OFS_FR(r(4))\n+\tstfd\tf(22), 64+OFS_FR(r(4))\n+\tstfd\tf(23), 72+OFS_FR(r(4))\n+\tstfd\tf(24), 80+OFS_FR(r(4))\n+\tstfd\tf(25), 88+OFS_FR(r(4))\n+\tstfd\tf(26), 96+OFS_FR(r(4))\n+\tstfd\tf(27),104+OFS_FR(r(4))\n+\tstfd\tf(28),112+OFS_FR(r(4))\n+\tstfd\tf(29),120+OFS_FR(r(4))\n+\tstfd\tf(30),128+OFS_FR(r(4))\n+\tstfd\tf(31),136+OFS_FR(r(4))\n+\tstfd\tf(0), OFS_FPSCR(r(4))\n+#endif\n+\n+#if defined(__ALTIVEC__)\n+\t/* ??? Determine when VRs not present.  */\n+\t/* ??? Test r(3) for pr_hasNoVectorUpdate and skip the vr save.\n+\t   This is not yet set by the compiler.  */\n+\taddi\tr(5), r(4), OFS_VR\n+\taddi\tr(6), r(4), OFS_VR+16\n+\tmfspr\tr(0), VRSAVE\n+\tstvx\tv(20), 0, r(5)\n+\taddi\tr(5), r(5), 32\n+\tstvx\tv(21), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tstvx\tv(22), 0, r(5)\n+\taddi\tr(5), r(5), 32\n+\tstvx\tv(23), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tstvx\tv(25), 0, r(5)\n+\taddi\tr(5), r(5), 32\n+\tstvx\tv(26), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tstvx\tv(26), 0, r(5)\n+\taddi\tr(5), r(5), 32\n+\tstvx\tv(27), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tstvx\tv(28), 0, r(5)\n+\taddi\tr(5), r(5), 32\n+\tstvx\tv(29), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tstvx\tv(30), 0, r(5)\n+\tstvx\tv(31), 0, r(6)\n+\tstreg\tr(0), OFS_VSCR(r(4))\n+#endif\n+\n+\tCALL\tGTM_begin_transaction\n+\n+\tldreg\tr(0), LR_SAVE+FRAME(r(1))\n+\tmtlr\tr(0)\n+\taddi\tr(1), r(1), FRAME\n+\tcfi_def_cfa_offset(0)\n+\tcfi_restore(65)\n+\tblr\n+\tcfi_endproc\n+END _ITM_beginTransaction\n+\n+\t.align 4\n+\tHIDDEN\tGTM_longjmp\n+FUNC GTM_longjmp\n+\tcfi_startproc\n+#if defined(__ALTIVEC__) || defined(__VSX__)\n+\t/* ??? Determine when VRs not present.  */\n+\t/* ??? Test r(5) for pr_hasNoVectorUpdate and skip the vr restore.\n+\t   This is not yet set by the compiler.  */\n+\taddi\tr(6), r(4), OFS_VR\n+\taddi\tr(7), r(4), OFS_VR+16\n+\tldreg\tr(0), OFS_VSCR(r(4))\n+\tcfi_undefined(v(20))\n+\tcfi_undefined(v(21))\n+\tcfi_undefined(v(22))\n+\tcfi_undefined(v(23))\n+\tcfi_undefined(v(24))\n+\tcfi_undefined(v(25))\n+\tcfi_undefined(v(26))\n+\tcfi_undefined(v(27))\n+\tcfi_undefined(v(28))\n+\tcfi_undefined(v(29))\n+\tcfi_undefined(v(30))\n+\tcfi_undefined(v(31))\n+\tlvx\tv(20), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tlvx\tv(21), 0, r(7)\n+\taddi\tr(7), r(7), 32\n+\tlvx\tv(22), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tlvx\tv(23), 0, r(7)\n+\taddi\tr(7), r(7), 32\n+\tlvx\tv(24), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tlvx\tv(25), 0, r(7)\n+\taddi\tr(7), r(7), 32\n+\tlvx\tv(26), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tlvx\tv(27), 0, r(7)\n+\taddi\tr(7), r(7), 32\n+\tlvx\tv(28), 0, r(6)\n+\taddi\tr(6), r(6), 32\n+\tlvx\tv(29), 0, r(7)\n+\taddi\tr(7), r(7), 32\n+\tlvx\tv(30), 0, r(6)\n+\tlvx\tv(31), 0, r(7)\n+\tmtspr\tVRSAVE, r(0)\n+#endif\n+\n+#ifndef _SOFT_FLOAT\n+\t/* ??? Determine when FPRs not present.  */\n+\t/* ??? Test r(5) for pr_hasNoFloatUpdate and skip the fp load.\n+\t   This is not yet set by the compiler.  */\n+\tlfd\tf(0), OFS_FPSCR(r(4))\n+\tcfi_undefined(f(14))\n+\tcfi_undefined(f(15))\n+\tcfi_undefined(f(16))\n+\tcfi_undefined(f(17))\n+\tcfi_undefined(f(18))\n+\tcfi_undefined(f(19))\n+\tcfi_undefined(f(20))\n+\tcfi_undefined(f(21))\n+\tcfi_undefined(f(22))\n+\tcfi_undefined(f(23))\n+\tcfi_undefined(f(24))\n+\tcfi_undefined(f(25))\n+\tcfi_undefined(f(26))\n+\tcfi_undefined(f(27))\n+\tcfi_undefined(f(28))\n+\tcfi_undefined(f(29))\n+\tcfi_undefined(f(30))\n+\tcfi_undefined(f(31))\n+\tlfd\tf(14),  0+OFS_FR(r(4))\n+\tlfd\tf(15),  8+OFS_FR(r(4))\n+\tlfd\tf(16), 16+OFS_FR(r(4))\n+\tlfd\tf(17), 24+OFS_FR(r(4))\n+\tlfd\tf(18), 32+OFS_FR(r(4))\n+\tlfd\tf(19), 40+OFS_FR(r(4))\n+\tlfd\tf(20), 48+OFS_FR(r(4))\n+\tlfd\tf(21), 56+OFS_FR(r(4))\n+\tlfd\tf(22), 64+OFS_FR(r(4))\n+\tlfd\tf(23), 72+OFS_FR(r(4))\n+\tlfd\tf(24), 80+OFS_FR(r(4))\n+\tlfd\tf(25), 88+OFS_FR(r(4))\n+\tlfd\tf(26), 96+OFS_FR(r(4))\n+\tlfd\tf(27),104+OFS_FR(r(4))\n+\tlfd\tf(28),112+OFS_FR(r(4))\n+\tlfd\tf(29),120+OFS_FR(r(4))\n+\tlfd\tf(30),128+OFS_FR(r(4))\n+\tlfd\tf(31),136+OFS_FR(r(4))\n+\tmtfsf\t0xff, f(0)\n+#endif\n+\n+\tldreg\tr(6),   OFS_CFA(r(4))\n+\tldreg\tr(0),   OFS_LR(r(4))\n+#ifdef _CALL_DARWIN\n+\tldreg\tr(13),  OFS_TOC(r(4))\n+#else\n+\tldreg\tr(2),   OFS_TOC(r(4))\n+#endif\n+\tldreg\tr(7),   OFS_CR(r(4))\n+\t/* At the instant we restore the LR, the only coherent view of\n+\t   the world we have is into the new stack frame.  Define the\n+\t   CFA in terms of the not-yet-restored stack pointer.  This will\n+\t   last until the end of the function.  */\n+\tmtlr\tr(0)\n+\tcfi_def_cfa(r(6), 0)\n+\tcfi_undefined(r(14))\n+\tcfi_undefined(r(15))\n+\tcfi_undefined(r(16))\n+\tcfi_undefined(r(17))\n+\tcfi_undefined(r(18))\n+\tcfi_undefined(r(19))\n+\tcfi_undefined(r(20))\n+\tcfi_undefined(r(21))\n+\tcfi_undefined(r(22))\n+\tcfi_undefined(r(23))\n+\tcfi_undefined(r(24))\n+\tcfi_undefined(r(25))\n+\tcfi_undefined(r(26))\n+\tcfi_undefined(r(27))\n+\tcfi_undefined(r(28))\n+\tcfi_undefined(r(29))\n+\tcfi_undefined(r(30))\n+\tcfi_undefined(r(31))\n+\tmtcr\tr(7)\n+\tldreg\tr(14),  0*WS+OFS_GR(r(4))\n+\tldreg\tr(15),  1*WS+OFS_GR(r(4))\n+\tldreg\tr(16),  2*WS+OFS_GR(r(4))\n+\tldreg\tr(17),  3*WS+OFS_GR(r(4))\n+\tldreg\tr(18),  4*WS+OFS_GR(r(4))\n+\tldreg\tr(19),  5*WS+OFS_GR(r(4))\n+\tldreg\tr(20),  6*WS+OFS_GR(r(4))\n+\tldreg\tr(21),  7*WS+OFS_GR(r(4))\n+\tldreg\tr(22),  8*WS+OFS_GR(r(4))\n+\tldreg\tr(23),  9*WS+OFS_GR(r(4))\n+\tldreg\tr(24), 10*WS+OFS_GR(r(4))\n+\tldreg\tr(25), 11*WS+OFS_GR(r(4))\n+\tldreg\tr(26), 12*WS+OFS_GR(r(4))\n+\tldreg\tr(27), 13*WS+OFS_GR(r(4))\n+\tldreg\tr(28), 14*WS+OFS_GR(r(4))\n+\tldreg\tr(29), 15*WS+OFS_GR(r(4))\n+\tldreg\tr(30), 16*WS+OFS_GR(r(4))\n+\tldreg\tr(31), 17*WS+OFS_GR(r(4))\n+\tmr\tr(1), r(6)\n+\tblr\n+\tcfi_endproc\n+END GTM_longjmp\n+\n+#ifdef __linux__\n+.section .note.GNU-stack, \"\", @progbits\n+#endif"}, {"sha": "4ffd3d1fe496c6bfeab007112f70205ff7f30c40", "filename": "libitm/config/powerpc/target.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfig%2Fpowerpc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fpowerpc%2Ftarget.h?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+namespace GTM HIDDEN {\n+\n+typedef int v128 __attribute__((vector_size(16), may_alias, aligned(16)));\n+typedef struct gtm_jmpbuf\n+{\n+#if defined(__ALTIVEC__) || defined(__VSX__)\n+  v128 vr[12];\t\t\t/* vr20-vr31 */\n+  unsigned long long vscr;\t/* long long for padding only */\n+#endif\n+#ifndef _SOFT_FLOAT\n+  double fr[18];\t\t/* f14-f31 */\n+  double fpscr;\n+#endif\n+  unsigned long gr[18];\t\t/* r14-r31 */\n+  void *cfa;\n+  unsigned long pc;\n+  unsigned long toc;\t\t/* r2 on aix, r13 on darwin */\n+  unsigned long cr;\n+} gtm_jmpbuf;\n+\n+/* The size of one line in hardware caches (in bytes). */\n+#if defined (__powerpc64__) || defined (__ppc64__)\n+# define HW_CACHELINE_SIZE 128\n+#else\n+# define HW_CACHELINE_SIZE 32\n+#endif\n+\n+static inline void\n+cpu_relax (void)\n+{\n+  __asm volatile (\"\" : : : \"memory\");\n+}\n+\n+} // namespace GTM"}, {"sha": "e20349a1f8487aaf975e9216dfeea9ec36664894", "filename": "libitm/configure.tgt", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e5e9357929bae073f5533cdadbbb040c7e76c/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=a32e5e9357929bae073f5533cdadbbb040c7e76c", "patch": "@@ -1,5 +1,5 @@\n # -*- shell-script -*-\n-#   Copyright (C) 2011 Free Software Foundation, Inc.\n+#   Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -46,7 +46,8 @@ fi\n # Map the target cpu to an ARCH sub-directory.  At the same time,\n # work out any special compilation flags as necessary.\n case \"${target_cpu}\" in\n-  alpha*)\tARCH=alpha ;;\n+  alpha*)\t\tARCH=alpha ;;\n+  rs6000 | powerpc*)\tARCH=powerpc ;;\n \n   arm*)\t\tARCH=arm ;;\n \n@@ -94,6 +95,11 @@ case \"${target}\" in\n \tfi\n \t;;\n \n+  powerpc*-*-aix* | rs6000-*-aix*)\n+\t# The system ought to be supported, but sjlj.S has not been ported.\n+\tUNSUPPORTED=1\n+\t;;\n+\n   *-*-gnu* | *-*-k*bsd*-gnu \\\n   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* \\\n   | *-*-solaris2* | *-*-sysv4* | *-*-irix6* | *-*-osf* | *-*-hpux11* \\"}]}