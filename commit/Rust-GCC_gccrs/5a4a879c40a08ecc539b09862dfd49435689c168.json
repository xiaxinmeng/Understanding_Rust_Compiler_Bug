{"sha": "5a4a879c40a08ecc539b09862dfd49435689c168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0YTg3OWM0MGEwOGVjYzUzOWIwOTg2MmRmZDQ5NDM1Njg5YzE2OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-26T03:01:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-26T03:01:01Z"}, "message": "bastring.h: Enable exceptions.\n\n\t* std/bastring.h: Enable exceptions.\n \t(assign, append, insert, replace): Implement member template versions.\n\n\t* tstring.cc: Add some tests for the member templates.\n\nFrom-SVN: r15717", "tree": {"sha": "5b9f13fa5d449a4a794605f4bb44236e57e97433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b9f13fa5d449a4a794605f4bb44236e57e97433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4a879c40a08ecc539b09862dfd49435689c168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4a879c40a08ecc539b09862dfd49435689c168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4a879c40a08ecc539b09862dfd49435689c168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4a879c40a08ecc539b09862dfd49435689c168/comments", "author": null, "committer": null, "parents": [{"sha": "896470e737bc4e30d5f0487483fc3d2a000ca585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896470e737bc4e30d5f0487483fc3d2a000ca585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896470e737bc4e30d5f0487483fc3d2a000ca585"}], "stats": {"total": 106, "additions": 86, "deletions": 20}, "files": [{"sha": "b4bb2bb36bb6eb0a55a40bcb4bd84b3466716877", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=5a4a879c40a08ecc539b09862dfd49435689c168", "patch": "@@ -1,3 +1,8 @@\n+Thu Sep 25 19:55:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* std/bastring.h: Enable exceptions.\n+ \t(assign, append, insert, replace): Implement member template versions.\n+\n 1997-09-15 02:37  Ulrich Drepper  <drepper@cygnus.com>\n \n \t* config/linux.mt: New file.  Make sure _PTHREADS is defined"}, {"sha": "ba763a901c630b7b028feef7249a48541c1c2147", "filename": "libstdc++/std/bastring.h", "status": "modified", "additions": 64, "deletions": 19, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Fstd%2Fbastring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Fstd%2Fbastring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.h?ref=5a4a879c40a08ecc539b09862dfd49435689c168", "patch": "@@ -35,7 +35,7 @@\n #include <cstddef>\n #include <std/straits.h>\n \n-#if _G_USE_EXCEPTIONS\n+#ifdef __STL_USE_EXCEPTIONS\n \n #include <stdexcept>\n #define OUTOFRANGE(cond) \\\n@@ -149,14 +149,13 @@ class basic_string\n     : dat (nilRep.grab ()) { assign (s); }\n   basic_string (size_type n, charT c)\n     : dat (nilRep.grab ()) { assign (n, c); }\n-#if 0\n+#ifdef __STL_MEMBER_TEMPLATES\n   template<class InputIterator>\n-    basic_string(InputIterator begin, InputIterator end,\n-\t\t Allocator& = Allocator());\n+    basic_string(InputIterator begin, InputIterator end)\n #else\n   basic_string(const_iterator begin, const_iterator end)\n-    : dat (nilRep.grab ()) { assign (begin, end); }\n #endif\n+    : dat (nilRep.grab ()) { assign (begin, end); }\n \n   ~basic_string ()\n     { rep ()->release (); }\n@@ -172,13 +171,13 @@ class basic_string\n     { return append (s, traits::length (s)); }\n   basic_string& append (size_type n, charT c)\n     { return replace (length (), 0, n, c); }\n-#if 0\n+#ifdef __STL_MEMBER_TEMPLATES\n   template<class InputIterator>\n-    basic_string& append(InputIterator first, InputIterator last);\n+    basic_string& append(InputIterator first, InputIterator last)\n #else\n   basic_string& append(const_iterator first, const_iterator last)\n-    { return replace (length (), 0, first, last - first); }\n #endif\n+    { return replace (iend (), iend (), first, last); }\n \n   basic_string& assign (const basic_string& str, size_type pos = 0,\n \t\t\tsize_type n = npos)\n@@ -189,13 +188,13 @@ class basic_string\n     { return assign (s, traits::length (s)); }\n   basic_string& assign (size_type n, charT c)\n     { return replace (0, npos, n, c); }\n-#if 0\n+#ifdef __STL_MEMBER_TEMPLATES\n   template<class InputIterator>\n-    basic_string& assign(InputIterator first, InputIterator last);\n+    basic_string& assign(InputIterator first, InputIterator last)\n #else\n   basic_string& assign(const_iterator first, const_iterator last)\n-    { return replace (0, npos, first, last - first); }\n #endif\n+    { return replace (ibegin (), iend (), first, last); }\n \n   basic_string& operator= (const charT* s)\n     { return assign (s); }\n@@ -222,13 +221,13 @@ class basic_string\n     { size_type pos = p - begin (); insert (pos, 1, c); return pos +begin (); }\n   iterator insert(iterator p, size_type n, charT c)\n     { size_type pos = p - begin (); insert (pos, n, c); return pos +begin (); }\n-#if 0\n+#ifdef __STL_MEMBER_TEMPLATES\n   template<class InputIterator>\n-    void insert(iterator p, InputIterator first, InputIterator last);\n+    void insert(iterator p, InputIterator first, InputIterator last)\n #else\n   void insert(iterator p, const_iterator first, const_iterator last)\n-    { size_type pos = p - begin(); insert (pos, first, last - first); }\n #endif\n+    { replace (p, p, first, last); }\n \n   basic_string& remove (size_type pos = 0, size_type n = npos)\n     { return replace (pos, n, (size_type)0, (charT)0); }\n@@ -254,14 +253,13 @@ class basic_string\n     { return replace (i1 - begin (), i2 - i1, s); }\n   basic_string& replace (iterator i1, iterator i2, size_type n, charT c)\n     { return replace (i1 - begin (), i2 - i1, n, c); }\n-#if 0\n+#ifdef __STL_MEMBER_TEMPLATES\n   template<class InputIterator>\n     basic_string& replace(iterator i1, iterator i2,\n \t\t\t  InputIterator j1, InputIterator j2);\n #else\n   basic_string& replace(iterator i1, iterator i2,\n-\t\t\tconst_iterator j1, const_iterator j2)\n-    { return replace (i1, i2, j1, j2 - j1); }\n+\t\t\tconst_iterator j1, const_iterator j2);\n #endif\n \n private:\n@@ -360,8 +358,14 @@ class basic_string\n \n   iterator begin () { selfish (); return &(*this)[0]; }\n   iterator end () { selfish (); return &(*this)[length ()]; }\n-  const_iterator begin () const { return &(*rep ())[0]; }\n-  const_iterator end () const { return &(*rep ())[length ()]; }\n+\n+private:\n+  iterator ibegin () const { return &(*rep ())[0]; }\n+  iterator iend () const { return &(*rep ())[length ()]; }\n+\n+public:\n+  const_iterator begin () const { return ibegin (); }\n+  const_iterator end () const { return iend (); }\n \n   reverse_iterator       rbegin() { return reverse_iterator (end ()); }\n   const_reverse_iterator rbegin() const\n@@ -379,6 +383,47 @@ class basic_string\n   charT *dat;\n };\n \n+#ifdef __STL_MEMBER_TEMPLATES\n+template <class charT, class traits> template <class InputIterator>\n+basic_string <charT, traits>& basic_string <charT, traits>::\n+replace (iterator i1, iterator i2, InputIterator j1, InputIterator j2)\n+#else\n+template <class charT, class traits>\n+basic_string <charT, traits>& basic_string <charT, traits>::\n+replace (iterator i1, iterator i2, const_iterator j1, const_iterator j2)\n+#endif\n+{\n+  const size_type len = length ();\n+  size_type pos = i1 - ibegin ();\n+  size_type n1 = i2 - i1;\n+  size_type n2 = j2 - j1;\n+\n+  OUTOFRANGE (pos > len);\n+  if (n1 > len - pos)\n+    n1 = len - pos;\n+  LENGTHERROR (len - n1 > max_size () - n2);\n+  size_t newlen = len - n1 + n2;\n+\n+  if (check_realloc (newlen))\n+    {\n+      Rep *p = Rep::create (newlen);\n+      p->copy (0, data (), pos);\n+      p->copy (pos + n2, data () + pos + n1, len - (pos + n1));\n+      for (; j1 != j2; ++j1, ++pos)\n+\ttraits::assign ((*p)[pos], *j1);\n+      repup (p);\n+    }\n+  else\n+    {\n+      rep ()->move (pos + n2, data () + pos + n1, len - (pos + n1));\n+      for (; j1 != j2; ++j1, ++pos)\n+\ttraits::assign ((*rep ())[pos], *j1);\n+    }\n+  rep ()->len = newlen;\n+\n+  return *this;\n+}\n+\n template <class charT, class traits>\n inline basic_string <charT, traits>\n operator+ (const basic_string <charT, traits>& lhs,"}, {"sha": "ac76090276e91b7ab4ab9efdec3bf80950f77fff", "filename": "libstdc++/tests/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Ftests%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Ftests%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Ftests%2FChangeLog?ref=5a4a879c40a08ecc539b09862dfd49435689c168", "patch": "@@ -1,3 +1,7 @@\n+Thu Sep 25 19:48:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tstring.cc: Add some tests for the member templates.\n+\n Wed Jun 11 11:00:10 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tmap.cc: Explicitly instantiate allocator classes."}, {"sha": "954d77fd4e2347dc0687e43cd76ea7d71164c8ef", "filename": "libstdc++/tests/tstring.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Ftests%2Ftstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4a879c40a08ecc539b09862dfd49435689c168/libstdc%2B%2B%2Ftests%2Ftstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Ftests%2Ftstring.cc?ref=5a4a879c40a08ecc539b09862dfd49435689c168", "patch": "@@ -14,8 +14,9 @@\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING.  If not, write to the Free\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n- \n+\n #include <string>\n+#include <algorithm>\n #include <iostream.h>\n #include <stdlib.h>\n #include <assert.h>\n@@ -65,6 +66,10 @@ void decltest()\n   assert(i == 20);\n   assert(f == 20);\n \n+  int ar[] = { 'H', 'e', 'l', 'l', 'o' };\n+  string is (ar, ar+sizeof(ar)/sizeof(ar[0]));\n+  cout << \"is = \" << is << endl;\n+  assert (is == \"Hello\");\n }\n \n void cattest()\n@@ -142,6 +147,13 @@ void substrtest()\n   x.replace (0, 1, 'j');\n   cout << \"x.replace (0, 1, 'j'); x = \" << x << \"\\n\";\n   assert(x == \"jello\");\n+\n+  int ar[] = { 'H', 'e', 'l', 'l', 'o' };\n+  x.replace (find (x.begin (), x.end (), 'l'),\n+\t     find (x.rbegin (), x.rend (), 'l').base (),\n+\t     ar, ar+sizeof(ar)/sizeof(ar[0]));\n+  cout << \"x = \" << x << endl;\n+  assert (x == \"jeHelloo\");\n }\n \n void iotest()"}]}