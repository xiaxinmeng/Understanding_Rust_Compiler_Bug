{"sha": "1db02437806fb3155563914b496e26d7a8edfa65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiMDI0Mzc4MDZmYjMxNTU1NjM5MTRiNDk2ZTI2ZDdhOGVkZmE2NQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2002-03-31T22:12:27Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2002-03-31T22:12:27Z"}, "message": "rs6000.h (RS6000_PIC_OFFSET_TABLE_REGNUM): New.\n\n\t2002-03-31  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n\t* config/rs6000/rs6000.h (RS6000_PIC_OFFSET_TABLE_REGNUM): New.\n\t(PIC_OFFSET_TABLE_REGNUM): Use it and return INVALID_REGNUM if\n\t!flag_pic.\n\t(CONDITIONAL_REGISTER_USAGE): Adjust accordingly.\n\t* config/rs6000/rs6000.h: Use RS6000_PIC_OFFSET_TABLE_REGNUM instead\n\tof PIC_OFFSET_TABLE_REGNUM thruout.\n\t* config/rs6000/rs6000.md: Likewise.\n\t* config/rs6000/darwin.h: Likewise.\n\nFrom-SVN: r51671", "tree": {"sha": "8303a51dc5ff1927c8e350f95cf13b925fb7bd94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8303a51dc5ff1927c8e350f95cf13b925fb7bd94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db02437806fb3155563914b496e26d7a8edfa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db02437806fb3155563914b496e26d7a8edfa65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db02437806fb3155563914b496e26d7a8edfa65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db02437806fb3155563914b496e26d7a8edfa65/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3bf1e9845306fd08cab498b32efde5842a1daefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf1e9845306fd08cab498b32efde5842a1daefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf1e9845306fd08cab498b32efde5842a1daefb"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "f37442f18d2867736f030f840b2d4b371781bce3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1db02437806fb3155563914b496e26d7a8edfa65", "patch": "@@ -1,3 +1,14 @@\n+2002-03-31  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* config/rs6000/rs6000.h (RS6000_PIC_OFFSET_TABLE_REGNUM): New.\n+\t(PIC_OFFSET_TABLE_REGNUM): Use it and return INVALID_REGNUM if\n+\t!flag_pic.\n+\t(CONDITIONAL_REGISTER_USAGE): Adjust accordingly.\n+\t* config/rs6000/rs6000.h: Use RS6000_PIC_OFFSET_TABLE_REGNUM instead\n+\tof PIC_OFFSET_TABLE_REGNUM thruout.\n+\t* config/rs6000/rs6000.md: Likewise.\n+\t* config/rs6000/darwin.h: Likewise.\n+\n Sun Mar 31 14:43:24 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* emit-rtl.c (adjust_address_1, offset_address): Cast value to"}, {"sha": "31efaac0cacfc8425c59e2aeba2a44dad8b075d5", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=1db02437806fb3155563914b496e26d7a8edfa65", "patch": "@@ -60,8 +60,8 @@ Boston, MA 02111-1307, USA.  */\n #undef  FRAME_POINTER_REGNUM\n #define FRAME_POINTER_REGNUM 30\n \n-#undef  PIC_OFFSET_TABLE_REGNUM\n-#define PIC_OFFSET_TABLE_REGNUM 31\n+#undef  RS6000_PIC_OFFSET_TABLE_REGNUM\n+#define RS6000_PIC_OFFSET_TABLE_REGNUM 31\n \n /* Pad the outgoing args area to 16 bytes instead of the usual 8.  */\n "}, {"sha": "dd317b43210f18ab7b6429fe71075d6fe0e0ad7f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1db02437806fb3155563914b496e26d7a8edfa65", "patch": "@@ -6095,8 +6095,8 @@ rs6000_got_register (value)\n   /* The second flow pass currently (June 1999) can't update\n      regs_ever_live without disturbing other parts of the compiler, so\n      update it here to make the prolog/epilogue code happy.  */\n-  if (no_new_pseudos && ! regs_ever_live[PIC_OFFSET_TABLE_REGNUM])\n-    regs_ever_live[PIC_OFFSET_TABLE_REGNUM] = 1;\n+  if (no_new_pseudos && ! regs_ever_live[RS6000_PIC_OFFSET_TABLE_REGNUM])\n+    regs_ever_live[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\n \n   current_function_uses_pic_offset_table = 1;\n \n@@ -7400,7 +7400,7 @@ first_reg_to_save ()\n   for (first_reg = 13; first_reg <= 31; first_reg++)\n     if (regs_ever_live[first_reg] \n \t&& (! call_used_regs[first_reg]\n-\t    || (first_reg == PIC_OFFSET_TABLE_REGNUM\n+\t    || (first_reg == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t\t&& ((DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n \t\t    || (DEFAULT_ABI == ABI_DARWIN && flag_pic)))))\n       break;\n@@ -7454,8 +7454,8 @@ first_reg_to_save ()\n \n #if TARGET_MACHO\n   if (flag_pic && current_function_uses_pic_offset_table &&\n-      (first_reg > PIC_OFFSET_TABLE_REGNUM))\n-    return PIC_OFFSET_TABLE_REGNUM;\n+      (first_reg > RS6000_PIC_OFFSET_TABLE_REGNUM))\n+    return RS6000_PIC_OFFSET_TABLE_REGNUM;\n #endif\n \n   return first_reg;\n@@ -7667,13 +7667,13 @@ rs6000_stack_info ()\n \n   /* Calculate which registers need to be saved & save area size.  */\n   info_ptr->first_gp_reg_save = first_reg_to_save ();\n-  /* Assume that we will have to save PIC_OFFSET_TABLE_REGNUM, \n+  /* Assume that we will have to save RS6000_PIC_OFFSET_TABLE_REGNUM, \n      even if it currently looks like we won't.  */\n   if (((TARGET_TOC && TARGET_MINIMAL_TOC)\n        || (flag_pic == 1 && abi == ABI_V4)\n        || (flag_pic && abi == ABI_DARWIN))\n-      && info_ptr->first_gp_reg_save > PIC_OFFSET_TABLE_REGNUM)\n-    info_ptr->gp_size = reg_size * (32 - PIC_OFFSET_TABLE_REGNUM);\n+      && info_ptr->first_gp_reg_save > RS6000_PIC_OFFSET_TABLE_REGNUM)\n+    info_ptr->gp_size = reg_size * (32 - RS6000_PIC_OFFSET_TABLE_REGNUM);\n   else\n     info_ptr->gp_size = reg_size * (32 - info_ptr->first_gp_reg_save);\n \n@@ -8090,7 +8090,7 @@ rs6000_emit_load_toc_table (fromprolog)\n      int fromprolog;\n {\n   rtx dest;\n-  dest = gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n+  dest = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \n   if (TARGET_ELF && DEFAULT_ABI != ABI_AIX)\n     {\n@@ -8829,7 +8829,7 @@ rs6000_emit_prologue ()\n       for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n \tif ((regs_ever_live[info->first_gp_reg_save+i] \n \t     && ! call_used_regs[info->first_gp_reg_save+i])\n-\t    || (i+info->first_gp_reg_save == PIC_OFFSET_TABLE_REGNUM\n+\t    || (i+info->first_gp_reg_save == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t\t&& ((DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n \t\t    || (DEFAULT_ABI == ABI_DARWIN && flag_pic))))\n \t  {\n@@ -8931,10 +8931,10 @@ rs6000_emit_prologue ()\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n-  /* If we are using PIC_OFFSET_TABLE_REGNUM, we need to set it up.  */\n+  /* If we are using RS6000_PIC_OFFSET_TABLE_REGNUM, we need to set it up.  */\n   if ((TARGET_TOC && TARGET_MINIMAL_TOC && get_pool_size () != 0)\n       || (DEFAULT_ABI == ABI_V4 && flag_pic == 1\n-\t  && regs_ever_live[PIC_OFFSET_TABLE_REGNUM]))\n+\t  && regs_ever_live[RS6000_PIC_OFFSET_TABLE_REGNUM]))\n   {\n     /* If emit_load_toc_table will use the link register, we need to save\n        it.  We use R11 for this purpose because emit_load_toc_table\n@@ -8962,7 +8962,7 @@ rs6000_emit_prologue ()\n       rs6000_maybe_dead (emit_insn (gen_load_macho_picbase (dest)));\n \n       rs6000_maybe_dead (\n-\temit_move_insn (gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM),\n+\temit_move_insn (gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM),\n \t\t\tgen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)));\n     }\n }\n@@ -9204,7 +9204,7 @@ rs6000_emit_epilogue (sibcall)\n     for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n       if ((regs_ever_live[info->first_gp_reg_save+i] \n \t   && ! call_used_regs[info->first_gp_reg_save+i])\n-\t  || (i+info->first_gp_reg_save == PIC_OFFSET_TABLE_REGNUM\n+\t  || (i+info->first_gp_reg_save == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t      && ((DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n \t\t  || (DEFAULT_ABI == ABI_DARWIN && flag_pic))))\n \t{"}, {"sha": "54725c5598cf7d851b302365a753d064edf207fb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1db02437806fb3155563914b496e26d7a8edfa65", "patch": "@@ -940,15 +940,18 @@ extern int rs6000_altivec_abi;\n     for (i = 32; i < 64; i++)\t\t\t\t\t\t\\\n       fixed_regs[i] = call_used_regs[i]\t\t\t\t\t\\\n         = call_really_used_regs[i] = 1;\t\t\t\t\t\\\n-  if (DEFAULT_ABI == ABI_V4 && flag_pic == 1)\t\t\t\t\\\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\t\\\n-      = call_used_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = call_really_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-  if (DEFAULT_ABI == ABI_DARWIN && flag_pic)\t\t\t\t\\\n-    global_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = fixed_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = call_used_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n-      = call_really_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n+  if (DEFAULT_ABI == ABI_V4\t\t\t\t\t\t\\\n+      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\t\t\t\\\n+      && flag_pic == 1)\t\t\t\t\t\t\t\\\n+    fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n+      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n+  if (DEFAULT_ABI == ABI_DARWIN\t\t\t\t\t\t\\\n+      && PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\t\\\n+    global_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n+      = fixed_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n+      = call_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM]\t\t\t\\\n+      = call_really_used_regs[RS6000_PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n   if (! TARGET_ALTIVEC)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\t\\\n@@ -2080,7 +2083,8 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    this macro is not defined, it is up to the machine-dependent files\n    to allocate such a register (if necessary).  */\n \n-#define PIC_OFFSET_TABLE_REGNUM 30\n+#define RS6000_PIC_OFFSET_TABLE_REGNUM 30\n+#define PIC_OFFSET_TABLE_REGNUM (flag_pic ? RS6000_PIC_OFFSET_TABLE_REGNUM : INVALID_REGNUM)\n \n #define TOC_REGISTER (TARGET_MINIMAL_TOC ? 30 : 2)\n "}, {"sha": "12d8f3b0a579e6f6393607457a64812797dff2df", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db02437806fb3155563914b496e26d7a8edfa65/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1db02437806fb3155563914b496e26d7a8edfa65", "patch": "@@ -7606,7 +7606,7 @@\n \t  operands2[0] = operands[0];\n \t  operands2[1] = operands[1];\n \t  operands2[2] = operands[2];\n-\t  operands2[3] = gen_rtx_REG (SImode, PIC_OFFSET_TABLE_REGNUM);\n+\t  operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \t  output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n \t  /* We cannot rely on ha16(low half)==ha16(high half), alas,\n \t     although in practice it almost always is.  */"}]}