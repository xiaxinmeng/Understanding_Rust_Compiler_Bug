{"sha": "5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjOTlkOWFkY2Q5M2EyNzAwNmE2YWM4ZDliNzAwNmU2NWY3YWFhOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "1999-12-17T05:11:28Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "1999-12-17T05:11:28Z"}, "message": "Boolean.java (Boolean(String)): Set Value' to false on a null String constructor parameter.\n\n1999-12-16  Bryce McKinlay  <bryce@albatross.co.nz>\n\n        * java/lang/Boolean.java (Boolean(String)): Set Value' to false on a\n        null String constructor parameter.\n        * java/net/natPlainSocketImpl.cc: Remove unneccessary sprintf calls\n        for exception messages.\n        BooleanClass: declare.\n        (setOption): Use BooleanClass instead of Class.forName() for\n        instanceof test.\n        (bind): Cast 4th parameter of setsockopt to char *' for\n        compatibility with older Solaris headers.\n        * java/net/natPlainDatagramSocketImpl.cc: Remove unneccessary\n        sprintf calls for exception messages.\n        BooleanClass, IntegerClass: declare.\n        (setOption): Use BooleanClass and IntegerClass, not Class.forName()\n        for instanceof test.\n\nFrom-SVN: r30988", "tree": {"sha": "4fc7a8398de67d8cfc0814aca10631f124cfc663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc7a8398de67d8cfc0814aca10631f124cfc663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/comments", "author": null, "committer": null, "parents": [{"sha": "fe2e294c7e06d47227e0d08d8d401e84cc13e7ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2e294c7e06d47227e0d08d8d401e84cc13e7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2e294c7e06d47227e0d08d8d401e84cc13e7ab"}], "stats": {"total": 108, "additions": 47, "deletions": 61}, "files": [{"sha": "69fb018fd5551d37a343b3a894aeb0ef3246652c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "patch": "@@ -1,3 +1,20 @@\n+1999-12-16  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/lang/Boolean.java (Boolean(String)): Set `value' to false on a \n+\tnull String constructor parameter.\n+\t* java/net/natPlainSocketImpl.cc: Remove unneccessary sprintf calls\n+\tfor exception messages.\n+\tBooleanClass: declare.\n+\t(setOption): Use BooleanClass instead of Class.forName() for\n+\tinstanceof test.\n+\t(bind): Cast 4th parameter of setsockopt to `char *' for\n+\tcompatibility with older Solaris headers.\n+\t* java/net/natPlainDatagramSocketImpl.cc: Remove unneccessary\n+\tsprintf calls for exception messages.\n+\tBooleanClass, IntegerClass: declare.\n+\t(setOption): Use BooleanClass and IntegerClass, not Class.forName()\n+\tfor instanceof test.\n+\n 1999-12-15  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/natSystem.cc (init_properties): Don't set user.name or"}, {"sha": "b4c45001644e8f580f28a7b275639ca8d668ccc2", "filename": "libjava/java/lang/Boolean.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Flang%2FBoolean.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Flang%2FBoolean.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FBoolean.java?ref=5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "patch": "@@ -39,7 +39,7 @@ public Boolean(boolean boolVal)\n \n   public Boolean(String strVal)\n   {\n-    value = strVal.equalsIgnoreCase(\"true\");\n+    value = (strVal == null ? false : strVal.equalsIgnoreCase(\"true\"));\n   }\n \n   public boolean booleanValue()"}, {"sha": "c48b1bcf0e604e3e89db89bd19893bb0236d1625", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "patch": "@@ -25,7 +25,6 @@ details.  */\n #include <arpa/inet.h>\n #endif\n #include <errno.h>\n-#include <stdio.h>\n #include <string.h>\n \n #if HAVE_BSTRING_H\n@@ -47,6 +46,11 @@ details.  */\n #include <java/lang/Boolean.h>\n #include <java/lang/Integer.h>\n \n+#define BooleanClass _CL_Q34java4lang7Boolean\n+extern java::lang::Class BooleanClass;\n+#define IntegerClass _CL_Q34java4lang7Integer\n+extern java::lang::Class IntegerClass;\n+\n #ifdef DISABLE_JAVA_NET\n \n void\n@@ -152,10 +156,8 @@ java::net::PlainDatagramSocketImpl::create ()\n   int sock = ::socket (AF_INET, SOCK_DGRAM, 0);\n   if (sock < 0)\n     {\n-      char msg[80];\n       char* strerr = strerror (errno);\n-      sprintf (msg, \"%.*s\", 80, strerr);\n-      JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n+      JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n     }\n   fnum = sock;\n   fd = new java::io::FileDescriptor (sock);\n@@ -206,10 +208,8 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n       return;\n     }\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::BindException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::BindException (JvNewStringUTF (strerr)));\n }\n \n jint\n@@ -246,10 +246,8 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n   i->address = raddr;\n   return rport;\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -284,10 +282,8 @@ java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n   if (::sendto (fnum, (char *) dbytes, p->getLength(), 0, ptr, len) >= 0)\n     return;\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -344,10 +340,8 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n   p->setLength ((jint) retlen);\n   return;\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -359,10 +353,8 @@ java::net::PlainDatagramSocketImpl::setTimeToLive (jint ttl)\n   if (::setsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, val_len) == 0)\n     return;\n \n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n jint\n@@ -374,10 +366,8 @@ java::net::PlainDatagramSocketImpl::getTimeToLive ()\n   if (::getsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, &val_len) == 0)\n     return ((int) val) & 0xFF;\n \n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -423,10 +413,8 @@ java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *inetaddr,\n   if (::setsockopt (fnum, level, opname, ptr, len) == 0)\n     return;\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -436,15 +424,13 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n   int val;\n   socklen_t val_len = sizeof (val);\n \n-  if ( _Jv_IsInstanceOf(value,\n-    java::lang::Class::forName(JvNewStringUTF(\"java.lang.Boolean\"))))\n+  if (_Jv_IsInstanceOf (value, &BooleanClass))\n     {\n       java::lang::Boolean *boolobj = \n         static_cast<java::lang::Boolean *> (value);\n       val = boolobj->booleanValue() ? 1 : 0;\n     }\n-  else if ( _Jv_IsInstanceOf(value,\n-      java::lang::Class::forName(JvNewStringUTF(\"java.lang.Integer\"))))\n+  else if (_Jv_IsInstanceOf (value, &IntegerClass))\n     {\n       java::lang::Integer *intobj = \n         static_cast<java::lang::Integer *> (value);          \n@@ -530,10 +516,8 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n     }\n \n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n }\n \n java::lang::Object *\n@@ -632,10 +616,8 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n     }\n \n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n }\n \n #endif /* DISABLE_JAVA_NET */"}, {"sha": "885c3bdcabf4e3d7f0d07279b5a99849aefc6d68", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=5ac99d9adcd93a27006a6ac8d9b7006e65f7aaa8", "patch": "@@ -18,7 +18,6 @@ details.  */\n #include <netinet/in.h>\n #include <netinet/tcp.h>\n #include <errno.h>\n-#include <stdio.h>\n #include <string.h>\n #endif /* DISABLE_JAVA_NET */\n \n@@ -43,6 +42,9 @@ details.  */\n #include <java/lang/Class.h>\n #include <java/lang/Integer.h>\n \n+#define BooleanClass _CL_Q34java4lang7Boolean\n+extern java::lang::Class BooleanClass;\n+\n #ifdef DISABLE_JAVA_NET\n \n void\n@@ -107,10 +109,8 @@ java::net::PlainSocketImpl::create (jboolean stream)\n   int sock = ::socket (AF_INET, stream ? SOCK_STREAM : SOCK_DGRAM, 0);\n   if (sock < 0)\n     {\n-      char msg[100];\n       char* strerr = strerror (errno);\n-      sprintf (msg, \"SocketImpl.create: %.*s\", 80, strerr);\n-      JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+      JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n     }\n   fnum = sock;\n   fd = new java::io::FileDescriptor (sock);\n@@ -149,7 +149,7 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n     goto error;\n \n   // Enable SO_REUSEADDR, so that servers can reuse ports left in TIME_WAIT.\n-  ::setsockopt(fnum, SOL_SOCKET, SO_REUSEADDR, &i, sizeof(i));\n+  ::setsockopt(fnum, SOL_SOCKET, SO_REUSEADDR, (char *) &i, sizeof(i));\n   \n   if (::bind (fnum, ptr, len) == 0)\n     {\n@@ -164,10 +164,8 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n       return;\n     }\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::BindException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::BindException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -209,21 +207,17 @@ java::net::PlainSocketImpl::connect (java::net::InetAddress *host, jint rport)\n       goto error;\n   return;  \n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::ConnectException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::ConnectException (JvNewStringUTF (strerr)));\n }\n \n void\n java::net::PlainSocketImpl::listen (jint backlog)\n {\n   if (::listen (fnum, backlog) != 0)\n     {\n-      char msg[80];\n       char* strerr = strerror (errno);\n-      sprintf (msg, \"%.*s\", 80, strerr);\n-      JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+      JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n     }\n }\n \n@@ -279,10 +273,8 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n   s->fd = new java::io::FileDescriptor (new_socket);\n   return;\n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (msg)));\n+  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n }\n \n void\n@@ -291,8 +283,7 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n   int val;\n   socklen_t val_len = sizeof (val);\n \n-  if ( _Jv_IsInstanceOf(value,\n-    java::lang::Class::forName(JvNewStringUTF(\"java.lang.Boolean\"))))\n+  if (_Jv_IsInstanceOf (value, &BooleanClass))\n     {\n       java::lang::Boolean *boolobj = \n         static_cast<java::lang::Boolean *> (value);\n@@ -370,10 +361,8 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n     }\n \n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n }\n \n java::lang::Object *\n@@ -470,10 +459,8 @@ java::net::PlainSocketImpl::getOption (jint optID)\n     }\n \n  error:\n-  char msg[80];\n   char* strerr = strerror (errno);\n-  sprintf (msg, \"%.*s\", 80, strerr);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (msg)));\n+  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n }\n \n #endif /* DISABLE_JAVA_NET */"}]}