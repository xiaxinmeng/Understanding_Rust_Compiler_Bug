{"sha": "d27bba5e57e662ed56cea94edbe40d683f400bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3YmJhNWU1N2U2NjJlZDU2Y2VhOTRlZGJlNDBkNjgzZjQwMGJiNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-26T21:22:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-26T21:22:57Z"}, "message": "sbuf_iter.h: Change to..\n\n\n2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/sbuf_iter.h: Change to..\n\t* include/bits/streambuf_iterator.h: This.\n\t* include/bits/stl_iterator.h: Take out of here...\n\t* include/bits/stream_iterator.h: Add.\n\t* src/Makefile.am (base_headers): Add streambuf_iterator,\n\tstream_iterator.h\n\t* src/Makefile.in: Regenerate.\n\t* include/bits/std_string.h: Adjust includes.\n\t* include/bits/basic_ios.h: Same.\n\t* include/bits/locale_facets.tcc: Same.\n\t* include/bits/std_iosfwd.h: Same.\n\n\t* include/bits/std_iterator.h: Add istream, ostream includes.\n\t* include/bits/stl_iterator.h: Tweak.\n\t* testsuite/24_iterators/ostream_iterator.cc: Add test.\n\t* testsuite/24_iterators/istream_iterator.cc: Same.\n\t* testsuite/23_containers/multiset.cc: Add iterator include.\n\nFrom-SVN: r43592", "tree": {"sha": "204c9491c910234f41b85259eb37e094ec96c64a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204c9491c910234f41b85259eb37e094ec96c64a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27bba5e57e662ed56cea94edbe40d683f400bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27bba5e57e662ed56cea94edbe40d683f400bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27bba5e57e662ed56cea94edbe40d683f400bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27bba5e57e662ed56cea94edbe40d683f400bb5/comments", "author": null, "committer": null, "parents": [{"sha": "a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273"}], "stats": {"total": 2350, "additions": 1117, "deletions": 1233}, "files": [{"sha": "ead8ee3fcf4ba96ce08e22e8ed67befff0a01f53", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -1,3 +1,23 @@\n+2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/sbuf_iter.h: Change to..\n+\t* include/bits/streambuf_iterator.h: This.\n+\t* include/bits/stl_iterator.h: Take out of here...\n+\t* include/bits/stream_iterator.h: Add.\n+\t* src/Makefile.am (base_headers): Add streambuf_iterator,\n+\tstream_iterator.h\n+\t* src/Makefile.in: Regenerate.\n+\t* include/bits/std_string.h: Adjust includes.\n+\t* include/bits/basic_ios.h: Same.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* include/bits/std_iosfwd.h: Same.\t\n+\t\n+\t* include/bits/std_iterator.h: Add istream, ostream includes.\n+\t* include/bits/stl_iterator.h: Tweak.\n+\t* testsuite/24_iterators/ostream_iterator.cc: Add test.\n+\t* testsuite/24_iterators/istream_iterator.cc: Same.\n+\t* testsuite/23_containers/multiset.cc: Add iterator include.\n+\n 2001-06-26  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4:  Clean extraneous tabs, rewrap 'test' lines."}, {"sha": "f5182ae96957c75026d6ea5ce7d20989217b1503", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -138,44 +138,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "ff6c272ebab99d67e75036c85158aa80c85b3495", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 854, "deletions": 865, "changes": 1719, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5"}, {"sha": "883a4cace50ebba6ca634d4cb267e4996f683847", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -32,7 +32,7 @@\n \n #pragma GCC system_header\n \n-#include <bits/sbuf_iter.h>\n+#include <bits/streambuf_iterator.h>\n #include <bits/locale_facets.h>\n \n namespace std "}, {"sha": "192ec816177cccb8d349bf9848f46dd7ae8f58ee", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -37,7 +37,7 @@\n #include <bits/std_cstdlib.h>   // For strof, strtold\n #include <bits/std_limits.h>    // For numeric_limits\n #include <bits/std_memory.h>    // For auto_ptr\n-#include <bits/sbuf_iter.h>     // For streambuf_iterators\n+#include <bits/streambuf_iterator.h>     // For streambuf_iterators\n #include <bits/std_cctype.h>    // For isspace\n #include <typeinfo> \t\t// For bad_cast\n #include <bits/std_vector.h>\t"}, {"sha": "a378dc8f67f021d6d6a0d34f12f58710047ca2a1", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -100,7 +100,7 @@ namespace std\n   typedef basic_ios<char> \t\tios;\n   typedef basic_streambuf<char> \tstreambuf;\n   typedef basic_istream<char> \t\tistream;\n-  typedef basic_ostream<char> \t\tostream;\n+   typedef basic_ostream<char> \t\tostream;\n   typedef basic_iostream<char> \t\tiostream;\n   typedef basic_stringbuf<char> \tstringbuf;\n   typedef basic_istringstream<char> \tistringstream;"}, {"sha": "b5bd216d74a3a2fef166313ad8e605e6c5a8bffc", "filename": "libstdc++-v3/include/bits/std_iterator.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -30,14 +30,16 @@\n #pragma GCC system_header\n #include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n-#include <bits/std_iosfwd.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n+#include <bits/std_ostream.h>\n+#include <bits/std_istream.h>\n+#include <bits/stream_iterator.h>\n+#include <bits/streambuf_iterator.h>\n \n #endif /* _CPP_ITERATOR */\n \n // Local Variables:\n // mode:C++\n // End:\n-"}, {"sha": "7dd0013c4ede63ddf9c4e6121e87ef22562a9f8d", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -39,10 +39,10 @@\n #include <bits/c++config.h>\n #include <bits/stringfwd.h>\n #include <bits/char_traits.h>\n-#include <bits/std_iterator.h>\n #include <bits/std_memory.h> \t// For allocator.\n #include <bits/type_traits.h>\n #include <bits/std_iosfwd.h> \t// For operators >>, <<, and getline decls.\n+#include <bits/stl_iterator.h>\n #include <bits/basic_string.h>\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "eb136326302edeefdbaa86eb861761164701111c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 29, "deletions": 119, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -195,20 +195,20 @@ namespace std\n       explicit \n       back_insert_iterator(_Container& __x) : container(&__x) {}\n \n-      back_insert_iterator<_Container>&\n+      back_insert_iterator&\n       operator=(const typename _Container::value_type& __value) \n       { \n \tcontainer->push_back(__value);\n \treturn *this;\n       }\n \n-      back_insert_iterator<_Container>& \n+      back_insert_iterator& \n       operator*() { return *this; }\n \n-      back_insert_iterator<_Container>& \n+      back_insert_iterator& \n       operator++() { return *this; }\n \n-      back_insert_iterator<_Container>& \n+      back_insert_iterator\n       operator++(int) { return *this; }\n     };\n \n@@ -228,14 +228,22 @@ namespace std\n       typedef _Container          container_type;\n \n       explicit front_insert_iterator(_Container& __x) : container(&__x) {}\n-      front_insert_iterator<_Container>&\n-      operator=(const typename _Container::value_type& __value) { \n+\n+      front_insert_iterator&\n+      operator=(const typename _Container::value_type& __value) \n+      { \n \tcontainer->push_front(__value);\n \treturn *this;\n       }\n-      front_insert_iterator<_Container>& operator*() { return *this; }\n-      front_insert_iterator<_Container>& operator++() { return *this; }\n-      front_insert_iterator<_Container>& operator++(int) { return *this; }\n+\n+      front_insert_iterator& \n+      operator*() { return *this; }\n+\n+      front_insert_iterator& \n+      operator++() { return *this; }\n+\n+      front_insert_iterator \n+      operator++(int) { return *this; }\n     };\n \n   template<typename _Container>\n@@ -256,15 +264,22 @@ namespace std\n       insert_iterator(_Container& __x, typename _Container::iterator __i) \n \t: container(&__x), iter(__i) {}\n    \n-      insert_iterator<_Container>&\n-      operator=(const typename _Container::value_type& __value) { \n+      insert_iterator&\n+      operator=(const typename _Container::const_reference __value) \n+      { \n \titer = container->insert(iter, __value);\n \t++iter;\n \treturn *this;\n       }\n-      insert_iterator<_Container>& operator*() { return *this; }\n-      insert_iterator<_Container>& operator++() { return *this; }\n-      insert_iterator<_Container>& operator++(int) { return *this; }\n+\n+      insert_iterator& \n+      operator*() { return *this; }\n+\n+      insert_iterator& \n+      operator++() { return *this; }\n+\n+      insert_iterator& \n+      operator++(int) { return *this; }\n     };\n   \n   template<typename _Container, typename _Iterator>\n@@ -275,111 +290,6 @@ namespace std\n       return insert_iterator<_Container>(__x, __iter(__i));\n     }\n   \n-\n-  template<typename _Tp, typename _CharT = char, \n-           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t> \n-    class istream_iterator \n-      : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>\n-    {\n-    public:\n-      typedef _CharT                         char_type;\n-      typedef _Traits                        traits_type;\n-      typedef basic_istream<_CharT, _Traits> istream_type;\n-\n-    private:\n-      istream_type* \t_M_stream;\n-      _Tp \t\t_M_value;\n-      bool \t\t_M_ok;\n-\n-    public:      \n-      istream_iterator() : _M_stream(0), _M_ok(false) {}\n-      istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }\n-\n-      const _Tp&\n-      operator*() const { return _M_value; }\n-\n-      const _Tp*\n-      operator->() const { return &(operator*()); }\n-\n-      istream_iterator& \n-      operator++() \n-      { _M_read(); return *this; }\n-\n-      istream_iterator \n-      operator++(int)  \n-      {\n-\tistream_iterator __tmp = *this;\n-\t_M_read();\n-\treturn __tmp;\n-      }\n-\n-      bool \n-      _M_equal(const istream_iterator& __x) const\n-      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);}\n-\n-    private:      \n-      void _M_read() \n-      {\n-\t_M_ok = (_M_stream && *_M_stream) ? true : false;\n-\tif (_M_ok) \n-\t  {\n-\t    *_M_stream >> _M_value;\n-\t    _M_ok = *_M_stream ? true : false;\n-\t  }\n-      }\n-    };\n-  \n-  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>\n-    inline bool \n-    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-\t       const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n-    { return __x._M_equal(__y); }\n-\n-  template <class _Tp, class _CharT, class _Traits, class _Dist>\n-    inline bool \n-  operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-\t     const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n-  { return !__x._M_equal(__y); }\n-\n-\n-  template<typename _Tp, typename _CharT = char, \n-           typename _Traits = char_traits<_CharT> >\n-    class ostream_iterator \n-      : public iterator<output_iterator_tag, void, void, void, void>\n-    {\n-    public:\n-      typedef _CharT                         char_type;\n-      typedef _Traits                        traits_type;\n-      typedef basic_ostream<_CharT, _Traits> ostream_type;\n-\n-    private:\n-      ostream_type* \t_M_stream;\n-      const _CharT* \t_M_string;\n-\n-    public:\n-      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}\n-      ostream_iterator(ostream_type& __s, const _CharT* __c) \n-\t: _M_stream(&__s), _M_string(__c)  { }\n-\n-      ostream_iterator& \n-      operator=(const _Tp& __value) \n-      { \n-\t*_M_stream << __value;\n-\tif (_M_string) *_M_stream << _M_string;\n-\treturn *this;\n-      }\n-      \n-      ostream_iterator& \n-      operator*() { return *this; }\n-      \n-      ostream_iterator& \n-      operator++() { return *this; } \n-      \n-      ostream_iterator& \n-      operator++(int) { return *this; } \n-    };\n-  \n-  \n   // This iterator adapter is 'normal' in the sense that it does not\n   // change the semantics of any of the operators of its itererator\n   // parameter.  Its primary purpose is to convert an iterator that is"}, {"sha": "0ee8e384d57ef276319f2c9a5f62f08342a783f1", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -0,0 +1,141 @@\n+// Stream iterators\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_BITS_STREAM_ITERATOR_H\n+#define _CPP_BITS_STREAM_ITERATOR_H 1\n+\n+#pragma GCC system_header\n+\n+namespace std\n+{\n+  template<typename _Tp, typename _CharT = char, \n+           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t> \n+    class istream_iterator \n+      : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>\n+    {\n+    public:\n+      typedef _CharT                         char_type;\n+      typedef _Traits                        traits_type;\n+      typedef basic_istream<_CharT, _Traits> istream_type;\n+\n+    private:\n+      istream_type* \t_M_stream;\n+      _Tp \t\t_M_value;\n+      bool \t\t_M_ok;\n+\n+    public:      \n+      istream_iterator() : _M_stream(0), _M_ok(false) {}\n+      istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }\n+\n+      const _Tp&\n+      operator*() const { return _M_value; }\n+\n+      const _Tp*\n+      operator->() const { return &(operator*()); }\n+\n+      istream_iterator& \n+      operator++() \n+      { _M_read(); return *this; }\n+\n+      istream_iterator \n+      operator++(int)  \n+      {\n+\tistream_iterator __tmp = *this;\n+\t_M_read();\n+\treturn __tmp;\n+      }\n+\n+      bool \n+      _M_equal(const istream_iterator& __x) const\n+      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);}\n+\n+    private:      \n+      void \n+      _M_read() \n+      {\n+\t_M_ok = (_M_stream && *_M_stream) ? true : false;\n+\tif (_M_ok) \n+\t  {\n+\t    *_M_stream >> _M_value;\n+\t    _M_ok = *_M_stream ? true : false;\n+\t  }\n+      }\n+    };\n+  \n+  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>\n+    inline bool \n+    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n+\t       const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n+    { return __x._M_equal(__y); }\n+\n+  template <class _Tp, class _CharT, class _Traits, class _Dist>\n+    inline bool \n+  operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n+\t     const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y) \n+  { return !__x._M_equal(__y); }\n+\n+\n+  template<typename _Tp, typename _CharT = char, \n+           typename _Traits = char_traits<_CharT> >\n+    class ostream_iterator \n+      : public iterator<output_iterator_tag, void, void, void, void>\n+    {\n+    public:\n+      typedef _CharT                         char_type;\n+      typedef _Traits                        traits_type;\n+      typedef basic_ostream<_CharT, _Traits> ostream_type;\n+\n+    private:\n+      ostream_type* \t_M_stream;\n+      const _CharT* \t_M_string;\n+\n+    public:\n+      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}\n+      ostream_iterator(ostream_type& __s, const _CharT* __c) \n+\t: _M_stream(&__s), _M_string(__c)  { }\n+\n+      ostream_iterator& \n+      operator=(const _Tp& __value) \n+      { \n+\t*_M_stream << __value;\n+\tif (_M_string) *_M_stream << _M_string;\n+\treturn *this;\n+      }\n+      \n+      ostream_iterator& \n+      operator*() { return *this; }\n+      \n+      ostream_iterator& \n+      operator++() { return *this; } \n+      \n+      ostream_iterator& \n+      operator++(int) { return *this; } \n+    };\n+} // namespace std\n+#endif"}, {"sha": "96a6bbf0aab1d48bd7ceea9a21d2dbdcc4bb4b8b", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -29,8 +29,8 @@\n \n // XXX Should specialize copy, find algorithms for streambuf iterators.\n \n-#ifndef _CPP_BITS_SBUF_ITER_H\n-#define _CPP_BITS_SBUF_ITER_H 1\n+#ifndef _CPP_BITS_STREAMBUF_ITERATOR_H\n+#define _CPP_BITS_STREAMBUF_ITERATOR_H 1\n \n #pragma GCC system_header\n ", "previous_filename": "libstdc++-v3/include/bits/sbuf_iter.h"}, {"sha": "ac805d2bf42c216e318e080bd6781d8058a3f45e", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -114,7 +114,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -126,21 +126,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "d136282c1fb883db0b1e9c492ccffc31d5ac556c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -117,18 +117,13 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n@@ -146,9 +141,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "12b243cd4f1e85579ad2d4e8bce75b212ab71d9a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -132,13 +132,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -150,38 +148,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -197,12 +170,7 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -226,9 +194,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -237,9 +203,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "d17ffbca998f54bed368d292e61ae595c6e306ed", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.87 2001/06/08 03:53:32 ljrittle Exp $\n+## $Id: Makefile.am,v 1.88 2001/06/25 20:57:51 pme Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -76,7 +76,8 @@ base_headers = \\\n \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sstream.tcc \\\n+\tbits/stream_iterator.h bits/streambuf_iterator.h \\\n \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n \tbits/streambuf.tcc bits/basic_file.h \\\n \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\"}, {"sha": "a463ecc6e609e2cc62ad6120257e881bac611ba6", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 27, "deletions": 123, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -124,13 +124,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -142,132 +140,45 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h \\\n-\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n-\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n-\tbackward/iterator.h backward/list.h backward/map.h \\\n-\tbackward/multimap.h backward/new.h backward/multiset.h \\\n-\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n-\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n-\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n-\tbackward/strstream backward/backward_warning.h\n-\n-\n-ext_headers = \\\n-\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n-\text/slist ext/hash_map ext/hash_set \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sstream.tcc \tbits/stream_iterator.h bits/streambuf_iterator.h \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h \tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream backward/backward_warning.h\n+\n+\n+ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h \\\n-\tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \\\n-\tbits/basic_file_model.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h \tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n-\tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \\\n-\tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \\\n-\tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \\\n-\twstring-inst.cc\n+sources =  \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \tcomplex_io.cc functexcept.cc globals.cc ios.cc limitsMEMBERS.cc \tlocale.cc locale-inst.cc localename.cc misc-inst.cc stdexcept.cc \tstl-inst.cc string-inst.cc strstream.cc valarray-inst.cc \twstring-inst.cc\n \n \n VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -290,12 +201,7 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -316,8 +222,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -326,8 +231,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "b82612f5c7fffc1851578405209f31e8917bc094", "filename": "libstdc++-v3/testsuite/23_containers/multiset.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset.cc?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -21,10 +21,12 @@\n // 23.3.4 template class multiset\n \n #include <iostream>\n+#include <iterator>\n #include <set>\n #include <algorithm>\n \n-namespace std {\n+namespace std \n+{\n   std::ostream& \n   operator<<(std::ostream& os, std::pair<int, int> const& p) \n   { return os << p.first << ' ' << p.second; }"}, {"sha": "1a2c7fcbc013cde5a69bec142d4837f1b48ad50f", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator.cc?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -45,6 +45,9 @@ void test01()\n   typedef test_iterator::istream_type istream_type;\n }\n \n+// Instantiate\n+template class std::istream_iterator<char>;\n+\n int main() \n { \n   test01();"}, {"sha": "53fee23e1a1fee2fa99b73f03d62d8948f58dc3d", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator.cc?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -47,6 +47,9 @@ void test01()\n   typedef test_iterator::ostream_type ostream_type;\n }\n \n+// Instantiate\n+template class std::ostream_iterator<char>;\n+\n int main() \n { \n   test01();"}, {"sha": "ca5e1d506916466d8ffc650515520f1b49ff80b0", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27bba5e57e662ed56cea94edbe40d683f400bb5/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=d27bba5e57e662ed56cea94edbe40d683f400bb5", "patch": "@@ -121,14 +121,10 @@ AUTOMAKE_OPTIONS = foreign dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n-            echo @glibcpp_builddir@/../../expect/expect ; \\\n-          else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n-\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n \n \n RUNTESTFLAGS = "}]}