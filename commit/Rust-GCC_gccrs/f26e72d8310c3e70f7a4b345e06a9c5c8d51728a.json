{"sha": "f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2ZTcyZDgzMTBjM2U3MGY3YTRiMzQ1ZTA2YTljNWM4ZDUxNzI4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-20T23:59:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-20T23:59:55Z"}, "message": "libstdc++: Use 'using' for types in Networking TS headers\n\n\t* include/experimental/buffer: Replace typedefs with\n\talias-declarations.\n\t* include/experimental/executor: Likewise.\n\t* include/experimental/internet: Likewise.\n\t* include/experimental/socket: Likewise.\n\t* include/experimental/timer: Likewise.", "tree": {"sha": "43ff6ced2bdbd93b32b8b51a2972fbcf7fe8255f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43ff6ced2bdbd93b32b8b51a2972fbcf7fe8255f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7797f5ec58078523a452e5cf239596e13d77d885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7797f5ec58078523a452e5cf239596e13d77d885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7797f5ec58078523a452e5cf239596e13d77d885"}], "stats": {"total": 189, "additions": 99, "deletions": 90}, "files": [{"sha": "0ecfde4a9a6c5d92a9fdadedf2ce1797fc30e09b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -1,3 +1,12 @@\n+2020-05-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/buffer: Replace typedefs with\n+\talias-declarations.\n+\t* include/experimental/executor: Likewise.\n+\t* include/experimental/internet: Likewise.\n+\t* include/experimental/socket: Likewise.\n+\t* include/experimental/timer: Likewise.\n+\n 2020-05-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94087"}, {"sha": "8ccdb28cc5bae996cce3b52769694cdd92785f03", "filename": "libstdc++-v3/include/experimental/buffer", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbuffer?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -488,8 +488,8 @@ inline namespace v1\n     {\n     public:\n       // types:\n-      typedef const_buffer const_buffers_type;\n-      typedef mutable_buffer mutable_buffers_type;\n+      using const_buffers_type = const_buffer;\n+      using mutable_buffers_type = mutable_buffer;\n \n       // constructors:\n       explicit"}, {"sha": "f55414c9360e5ec004cd0345fb9927679972afa2", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -369,8 +369,8 @@ inline namespace v1\n     class async_result\n     {\n     public:\n-      typedef _CompletionToken completion_handler_type;\n-      typedef void return_type;\n+      using completion_handler_type = _CompletionToken;\n+      using return_type = void;\n \n       explicit async_result(completion_handler_type&) {}\n       async_result(const async_result&) = delete;\n@@ -660,8 +660,8 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef _Tp target_type;\n-      typedef _Executor executor_type;\n+      using target_type = _Tp;\n+      using executor_type = _Executor;\n \n       // construct / copy / destroy:\n \n@@ -766,7 +766,7 @@ inline namespace v1\n   template<typename _Tp, typename _Executor, typename _ProtoAlloc>\n     struct associated_allocator<executor_binder<_Tp, _Executor>, _ProtoAlloc>\n     {\n-      typedef associated_allocator_t<_Tp, _ProtoAlloc> type;\n+      using type = associated_allocator_t<_Tp, _ProtoAlloc>;\n \n       static type\n       get(const executor_binder<_Tp, _Executor>& __b,\n@@ -777,7 +777,7 @@ inline namespace v1\n   template<typename _Tp, typename _Executor, typename _Executor1>\n     struct associated_executor<executor_binder<_Tp, _Executor>, _Executor1>\n     {\n-      typedef _Executor type;\n+      using type = _Executor;\n \n       static type\n       get(const executor_binder<_Tp, _Executor>& __b,\n@@ -791,7 +791,7 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef _Executor executor_type;\n+      using executor_type = _Executor;\n \n       // construct / copy / destroy:\n \n@@ -845,7 +845,7 @@ inline namespace v1\n   public:\n     // types:\n \n-    typedef system_executor executor_type;\n+    using executor_type = system_executor;\n \n     // construct / copy / destroy:\n \n@@ -1446,7 +1446,7 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef _Executor inner_executor_type;\n+      using inner_executor_type = _Executor;\n \n       // construct / copy / destroy:\n "}, {"sha": "71e40d83a7e0eb4d40b846b1cadb8f0b8d65c978", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -110,8 +110,8 @@ namespace ip\n   /// @}\n #endif\n \n-  typedef uint_least16_t port_type;\t///< Type used for port numbers.\n-  typedef uint_least32_t scope_id_type;\t///< Type used for IPv6 scope IDs.\n+  using port_type = uint_least16_t;\t///< Type used for port numbers.\n+  using scope_id_type = uint_least32_t;\t///< Type used for IPv6 scope IDs.\n \n   /// Convenience alias for constraining allocators for strings.\n   template<typename _Alloc>\n@@ -133,7 +133,7 @@ namespace ip\n   {\n   public:\n     // types:\n-    typedef uint_least32_t uint_type;\n+    using uint_type = uint_least32_t;\n \n     struct bytes_type : array<unsigned char, 4>\n     {\n@@ -918,11 +918,11 @@ namespace ip\n   {\n   public:\n     // types:\n-    typedef address_v4 value_type;\n-    typedef ptrdiff_t difference_type;\n-    typedef const address_v4* pointer;\n-    typedef const address_v4& reference;\n-    typedef input_iterator_tag iterator_category;\n+    using value_type = address_v4;\n+    using difference_type = ptrdiff_t;\n+    using pointer = const address_v4*;\n+    using reference = const address_v4&;\n+    using iterator_category = input_iterator_tag;\n \n     // constructors:\n     basic_address_iterator(const address_v4& __a) noexcept\n@@ -972,17 +972,17 @@ namespace ip\n     address_v4 _M_address;\n   };\n \n-  typedef basic_address_iterator<address_v4> address_v4_iterator;\n+  using address_v4_iterator = basic_address_iterator<address_v4>;\n \n   template<> class basic_address_iterator<address_v6>\n   {\n   public:\n     // types:\n-    typedef address_v6 value_type;\n-    typedef ptrdiff_t difference_type;\n-    typedef const address_v6* pointer;\n-    typedef const address_v6& reference;\n-    typedef input_iterator_tag iterator_category;\n+    using value_type = address_v6;\n+    using difference_type = ptrdiff_t;\n+    using pointer = const address_v6*;\n+    using reference = const address_v6&;\n+    using iterator_category = input_iterator_tag;\n \n     // constructors:\n     basic_address_iterator(const address_v6& __a) noexcept\n@@ -1026,7 +1026,7 @@ namespace ip\n     address_v6 _M_address;\n   };\n \n-  typedef basic_address_iterator<address_v6> address_v6_iterator;\n+  using address_v6_iterator = basic_address_iterator<address_v6>;\n \n   template<typename> class basic_address_range; // not defined\n \n@@ -1039,7 +1039,7 @@ namespace ip\n   public:\n     // types:\n \n-    typedef basic_address_iterator<address_v4> iterator;\n+    using iterator = basic_address_iterator<address_v4>;\n \n     // constructors:\n \n@@ -1071,7 +1071,7 @@ namespace ip\n     iterator _M_end;\n   };\n \n-  typedef basic_address_range<address_v4> address_v4_range;\n+  using address_v4_range = basic_address_range<address_v4>;\n \n   // @}\n \n@@ -1084,7 +1084,7 @@ namespace ip\n   public:\n     // types:\n \n-    typedef basic_address_iterator<address_v6> iterator;\n+    using iterator = basic_address_iterator<address_v6>;\n \n     // constructors:\n \n@@ -1112,7 +1112,7 @@ namespace ip\n     iterator _M_end;\n   };\n \n-  typedef basic_address_range<address_v6> address_v6_range;\n+  using address_v6_range = basic_address_range<address_v6>;\n \n   // @}\n \n@@ -1384,7 +1384,7 @@ namespace ip\n     {\n     public:\n       // types:\n-      typedef _InternetProtocol protocol_type;\n+      using protocol_type = _InternetProtocol;\n \n       // constructors:\n \n@@ -1574,8 +1574,8 @@ namespace ip\n     {\n     public:\n       // types:\n-      typedef _InternetProtocol protocol_type;\n-      typedef typename _InternetProtocol::endpoint endpoint_type;\n+      using protocol_type = _InternetProtocol;\n+      using endpoint_type = typename _InternetProtocol::endpoint;\n \n       // constructors:\n       basic_resolver_entry() { }\n@@ -1697,15 +1697,15 @@ namespace ip\n     {\n     public:\n       // types:\n-      typedef _InternetProtocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n-      typedef basic_resolver_entry<protocol_type> value_type;\n-      typedef const value_type& const_reference;\n-      typedef value_type& reference;\n-      typedef typename forward_list<value_type>::const_iterator const_iterator;\n-      typedef const_iterator iterator;\n-      typedef ptrdiff_t difference_type;\n-      typedef size_t size_type;\n+      using protocol_type = _InternetProtocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n+      using value_type = basic_resolver_entry<protocol_type>;\n+      using const_reference = const value_type&;\n+      using reference = value_type&;\n+      using const_iterator = typename forward_list<value_type>::const_iterator;\n+      using iterator = const_iterator;\n+      using difference_type = ptrdiff_t;\n+      using size_type = size_t;\n \n       // construct / copy / destroy:\n \n@@ -1775,10 +1775,10 @@ namespace ip\n     public:\n       // types:\n \n-      typedef io_context::executor_type executor_type;\n-      typedef _InternetProtocol protocol_type;\n-      typedef typename _InternetProtocol::endpoint endpoint_type;\n-      typedef basic_resolver_results<_InternetProtocol> results_type;\n+      using executor_type = io_context::executor_type;\n+      using protocol_type = _InternetProtocol;\n+      using endpoint_type = typename _InternetProtocol::endpoint;\n+      using results_type = basic_resolver_results<_InternetProtocol>;\n \n       // construct / copy / destroy:\n \n@@ -2056,11 +2056,11 @@ namespace ip\n   {\n   public:\n     // types:\n-    typedef basic_endpoint<tcp> endpoint;\t ///< A TCP endpoint.\n-    typedef basic_resolver<tcp> resolver;\t ///< A TCP resolver.\n-    typedef basic_stream_socket<tcp> socket;\t ///< A TCP socket.\n-    typedef basic_socket_acceptor<tcp> acceptor; ///< A TCP acceptor.\n-    typedef basic_socket_iostream<tcp> iostream; /// A TCP iostream.\n+    using endpoint = basic_endpoint<tcp>;\t ///< A TCP endpoint.\n+    using resolver = basic_resolver<tcp>;\t ///< A TCP resolver.\n+    using socket = basic_stream_socket<tcp>;\t ///< A TCP socket.\n+    using acceptor = basic_socket_acceptor<tcp>; ///< A TCP acceptor.\n+    using iostream = basic_socket_iostream<tcp>; /// A TCP iostream.\n \n #ifdef _GLIBCXX_HAVE_NETINET_TCP_H\n     /// Disable coalescing of small segments (i.e. the Nagle algorithm).\n@@ -2111,9 +2111,9 @@ namespace ip\n   {\n   public:\n     // types:\n-    typedef basic_endpoint<udp> endpoint;\n-    typedef basic_resolver<udp> resolver;\n-    typedef basic_datagram_socket<udp> socket;\n+    using endpoint = basic_endpoint<udp>;\n+    using resolver = basic_resolver<udp>;\n+    using socket = basic_datagram_socket<udp>;\n \n     // static members:\n     static constexpr udp v4() noexcept { return udp(AF_INET); }"}, {"sha": "837965cb3c0ae232502821c83245fbd4320ea4ae", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -701,10 +701,10 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef io_context::executor_type executor_type;\n-      typedef int native_handle_type;\n-      typedef _Protocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n+      using executor_type = io_context::executor_type;\n+      using native_handle_type = int;\n+      using protocol_type = _Protocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n \n       // basic_socket operations:\n \n@@ -1067,9 +1067,9 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef int native_handle_type;\n-      typedef _Protocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n+      using native_handle_type = int;\n+      using protocol_type = _Protocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n \n       // construct / copy / destroy:\n \n@@ -1520,9 +1520,9 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef int native_handle_type;\n-      typedef _Protocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n+      using native_handle_type = int;\n+      using protocol_type = _Protocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n \n       // construct / copy / destroy:\n \n@@ -1833,11 +1833,11 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef io_context::executor_type executor_type;\n-      typedef int native_handle_type;\n-      typedef _AcceptableProtocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n-      typedef typename protocol_type::socket socket_type;\n+      using executor_type = io_context::executor_type;\n+      using native_handle_type = int;\n+      using protocol_type = _AcceptableProtocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n+      using socket_type = typename protocol_type::socket;\n \n       // construct / copy / destroy:\n \n@@ -2277,12 +2277,12 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef _Protocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n-      typedef _Clock clock_type;\n-      typedef typename clock_type::time_point time_point;\n-      typedef typename clock_type::duration duration;\n-      typedef _WaitTraits wait_traits_type;\n+      using protocol_type = _Protocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n+      using clock_type = _Clock;\n+      using time_point = typename clock_type::time_point;\n+      using duration = typename clock_type::duration;\n+      using wait_traits_type = _WaitTraits;\n \n       // construct / copy / destroy:\n \n@@ -2355,12 +2355,12 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef _Protocol protocol_type;\n-      typedef typename protocol_type::endpoint endpoint_type;\n-      typedef _Clock clock_type;\n-      typedef typename clock_type::time_point time_point;\n-      typedef typename clock_type::duration duration;\n-      typedef _WaitTraits wait_traits_type;\n+      using protocol_type = _Protocol;\n+      using endpoint_type = typename protocol_type::endpoint;\n+      using clock_type = _Clock;\n+      using time_point = typename clock_type::time_point;\n+      using duration = typename clock_type::duration;\n+      using wait_traits_type = _WaitTraits;\n \n       // construct / copy / destroy:\n "}, {"sha": "58249d0387dc878dcc5f9dc307e44cd723325217", "filename": "libstdc++-v3/include/experimental/timer", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftimer", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftimer", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftimer?ref=f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "patch": "@@ -81,11 +81,11 @@ inline namespace v1\n     public:\n       // types:\n \n-      typedef io_context::executor_type executor_type;\n-      typedef _Clock clock_type;\n-      typedef typename clock_type::duration duration;\n-      typedef typename clock_type::time_point time_point;\n-      typedef _WaitTraits traits_type;\n+      using executor_type = io_context::executor_type;\n+      using clock_type = _Clock;\n+      using duration = typename clock_type::duration;\n+      using time_point = typename clock_type::time_point;\n+      using traits_type = _WaitTraits;\n \n       // construct / copy / destroy:\n \n@@ -170,10 +170,10 @@ inline namespace v1\n       friend class io_context;\n     };\n \n-  typedef basic_waitable_timer<chrono::system_clock> system_timer;\n-  typedef basic_waitable_timer<chrono::steady_clock> steady_timer;\n-  typedef basic_waitable_timer<chrono::high_resolution_clock>\n-    high_resolution_timer;\n+  using system_timer = basic_waitable_timer<chrono::system_clock>;\n+  using steady_timer = basic_waitable_timer<chrono::steady_clock>;\n+  using high_resolution_timer\n+    = basic_waitable_timer<chrono::high_resolution_clock>;\n \n   template<typename _Clock, typename _WaitTraits>\n     void"}]}