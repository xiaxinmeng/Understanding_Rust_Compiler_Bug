{"sha": "9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQwNWJiY2ViMjlmNThiOTEyYjk1Y2VlMWU0M2IwYmNkODk5NGU1Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-16T00:06:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-16T00:06:36Z"}, "message": "flow.c (EXIT_IGNORE_STACK): Move to ...\n\n\t* flow.c (EXIT_IGNORE_STACK): Move to ...\n\t* defaults.h (EXIT_IGNORE_STACK): ... here.\n\t* dojump.c (clear_pending_stack_adjust): Don't use #ifdef\n\tEXIT_IGNORE_STACK.\n\t* function.c (expand_function_end): Likewise.\n\t* global.c (global_alloc): Likewise.\n\t* ra.c (init_ra): Likewise.\n\t* reload1.c (init_elim_table): Likewise.\n\t* reorg.c (fill_simple_delay_slots): Likewise.\n\t* resource.c (init_resource_info): Likewise.\n\t* doc/tm.texi (EXIT_IGNORE_STACK): Document that the default\n\tis 0.\n\nFrom-SVN: r74654", "tree": {"sha": "bb744203a591f3b6d08d264bc0f98c12bab6cdbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb744203a591f3b6d08d264bc0f98c12bab6cdbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/comments", "author": null, "committer": null, "parents": [{"sha": "cbc278f44087d8f2ca5d60f50e0291929a3be7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc278f44087d8f2ca5d60f50e0291929a3be7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc278f44087d8f2ca5d60f50e0291929a3be7a0"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "91088ab94de75bd9599fe1845ce826d9da81fe86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -1,3 +1,18 @@\n+2003-12-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* flow.c (EXIT_IGNORE_STACK): Move to ...\n+\t* defaults.h (EXIT_IGNORE_STACK): ... here.\n+\t* dojump.c (clear_pending_stack_adjust): Don't use #ifdef\n+\tEXIT_IGNORE_STACK.\n+\t* function.c (expand_function_end): Likewise.\n+\t* global.c (global_alloc): Likewise.\n+\t* ra.c (init_ra): Likewise.\n+\t* reload1.c (init_elim_table): Likewise.\n+\t* reorg.c (fill_simple_delay_slots): Likewise.\n+\t* resource.c (init_resource_info): Likewise.\n+\t* doc/tm.texi (EXIT_IGNORE_STACK): Document that the default\n+\tis 0.\n+\n 2003-12-15  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* reload.c (reg_overlap_mentioned_for_reload_p):"}, {"sha": "d540e2809ed1f902a2c7a3640a9ccf040bdb2579", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -689,4 +689,11 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define LOCAL_REGNO(REGNO)  0\n #endif\n \n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.  */\n+#ifndef EXIT_IGNORE_STACK\n+#define EXIT_IGNORE_STACK 0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "1b028f976be64a8accd2c2180f5b1b7592707e35", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -4196,7 +4196,8 @@ function.\n Define this macro as a C expression that is nonzero if the return\n instruction or the function epilogue ignores the value of the stack\n pointer; in other words, if it is safe to delete an instruction to\n-adjust the stack pointer before a return from the function.\n+adjust the stack pointer before a return from the function.  The\n+default is 0.\n \n Note that this macro's value is relevant only for functions for which\n frame pointers are maintained.  It is never safe to delete a final"}, {"sha": "1f938a8dfe706506085ed627783b76e926ce97c5", "filename": "gcc/dojump.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -57,7 +57,6 @@ init_pending_stack_adjust (void)\n void\n clear_pending_stack_adjust (void)\n {\n-#ifdef EXIT_IGNORE_STACK\n   if (optimize > 0\n       && (! flag_omit_frame_pointer || current_function_calls_alloca)\n       && EXIT_IGNORE_STACK\n@@ -67,7 +66,6 @@ clear_pending_stack_adjust (void)\n       stack_pointer_delta -= pending_stack_adjust,\n       pending_stack_adjust = 0;\n     }\n-#endif\n }\n \n /* Pop any previously-pushed arguments that have not been popped yet.  */"}, {"sha": "023fb1c83500e24467ff3d76b6a37592ffb1f3fe", "filename": "gcc/flow.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -141,14 +141,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"splay-tree.h\"\n \n-/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n-   the stack pointer does not matter.  The value is tested only in\n-   functions that have frame pointers.\n-   No definition is equivalent to always zero.  */\n-#ifndef EXIT_IGNORE_STACK\n-#define EXIT_IGNORE_STACK 0\n-#endif\n-\n #ifndef HAVE_epilogue\n #define HAVE_epilogue 0\n #endif"}, {"sha": "618447d5e3b22243c60a1e941314de4caedc63a2", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -7038,16 +7038,14 @@ expand_function_end (void)\n   /* If we had calls to alloca, and this machine needs\n      an accurate stack pointer to exit the function,\n      insert some code to save and restore the stack pointer.  */\n-#ifdef EXIT_IGNORE_STACK\n-  if (! EXIT_IGNORE_STACK)\n-#endif\n-    if (current_function_calls_alloca)\n-      {\n-\trtx tem = 0;\n+  if (! EXIT_IGNORE_STACK\n+      && current_function_calls_alloca)\n+    {\n+      rtx tem = 0;\n \n-\temit_stack_save (SAVE_FUNCTION, &tem, parm_birth_insn);\n-\temit_stack_restore (SAVE_FUNCTION, tem, NULL_RTX);\n-      }\n+      emit_stack_save (SAVE_FUNCTION, &tem, parm_birth_insn);\n+      emit_stack_restore (SAVE_FUNCTION, tem, NULL_RTX);\n+    }\n \n   /* If scalar return value was computed in a pseudo-reg, or was a named\n      return value that got dumped to the stack, copy that to the hard"}, {"sha": "d19e87e5ed99ab3faba5d32f01f5eeef033bd61c", "filename": "gcc/global.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -323,9 +323,7 @@ global_alloc (FILE *file)\n #endif\n   int need_fp\n     = (! flag_omit_frame_pointer\n-#ifdef EXIT_IGNORE_STACK\n        || (current_function_calls_alloca && EXIT_IGNORE_STACK)\n-#endif\n        || FRAME_POINTER_REQUIRED);\n \n   size_t i;"}, {"sha": "5884197dca235e95862267306f06797eab0ed7a5", "filename": "gcc/ra.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -455,9 +455,7 @@ init_ra (void)\n #endif\n   int need_fp\n     = (! flag_omit_frame_pointer\n-#ifdef EXIT_IGNORE_STACK\n        || (current_function_calls_alloca && EXIT_IGNORE_STACK)\n-#endif\n        || FRAME_POINTER_REQUIRED);\n \n   ra_colorize_init ();"}, {"sha": "a739da3f9a07c5cf7097d908f3241d05a407ac3a", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -3443,15 +3443,13 @@ init_elim_table (void)\n   /* Does this function require a frame pointer?  */\n \n   frame_pointer_needed = (! flag_omit_frame_pointer\n-#ifdef EXIT_IGNORE_STACK\n \t\t\t  /* ?? If EXIT_IGNORE_STACK is set, we will not save\n \t\t\t     and restore sp for alloca.  So we can't eliminate\n \t\t\t     the frame pointer in that case.  At some point,\n \t\t\t     we should improve this by emitting the\n \t\t\t     sp-adjusting insns for this case.  */\n \t\t\t  || (current_function_calls_alloca\n \t\t\t      && EXIT_IGNORE_STACK)\n-#endif\n \t\t\t  || FRAME_POINTER_REQUIRED);\n \n   num_eliminable = 0;"}, {"sha": "46b665779800ce69811694180f33c90a234717dd", "filename": "gcc/reorg.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -2427,10 +2427,8 @@ fill_simple_delay_slots (int non_jumps_p)\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n       SET_HARD_REG_BIT (needed.regs, HARD_FRAME_POINTER_REGNUM);\n #endif\n-#ifdef EXIT_IGNORE_STACK\n       if (! EXIT_IGNORE_STACK\n \t  || current_function_sp_is_unchanging)\n-#endif\n \tSET_HARD_REG_BIT (needed.regs, STACK_POINTER_REGNUM);\n     }\n   else"}, {"sha": "240cf2323344d79f932a1b02bf66fdf932842f05", "filename": "gcc/resource.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d05bbceb29f58b912b95cee1e43b0bcd8994e56/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=9d05bbceb29f58b912b95cee1e43b0bcd8994e56", "patch": "@@ -1167,10 +1167,8 @@ init_resource_info (rtx epilogue_insn)\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n       SET_HARD_REG_BIT (end_of_function_needs.regs, HARD_FRAME_POINTER_REGNUM);\n #endif\n-#ifdef EXIT_IGNORE_STACK\n       if (! EXIT_IGNORE_STACK\n \t  || current_function_sp_is_unchanging)\n-#endif\n \tSET_HARD_REG_BIT (end_of_function_needs.regs, STACK_POINTER_REGNUM);\n     }\n   else"}]}