{"sha": "5100d1143a92622de0f8ea021c7c744400000d6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwMGQxMTQzYTkyNjIyZGUwZjhlYTAyMWM3Yzc0NDQwMDAwMGQ2Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-26T17:19:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-26T17:19:39Z"}, "message": "stmt.c (expand_case): Put an assertion that index_expr is never INTEGER_CST.\n\n\t* stmt.c (expand_case): Put an assertion that index_expr is\n\tnever INTEGER_CST.  Don't special case for constant\n\tindex_expr.\n\nFrom-SVN: r89590", "tree": {"sha": "ae662a80910971dee123e9fd11ea09ac6d4224ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae662a80910971dee123e9fd11ea09ac6d4224ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5100d1143a92622de0f8ea021c7c744400000d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5100d1143a92622de0f8ea021c7c744400000d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5100d1143a92622de0f8ea021c7c744400000d6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5100d1143a92622de0f8ea021c7c744400000d6f/comments", "author": null, "committer": null, "parents": [{"sha": "a3f164bd03266dc9fb264aa3551c812c69deebe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f164bd03266dc9fb264aa3551c812c69deebe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f164bd03266dc9fb264aa3551c812c69deebe5"}], "stats": {"total": 73, "additions": 26, "deletions": 47}, "files": [{"sha": "7ac8e6ada3be03952952f179c0a41aaf7c3b932d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5100d1143a92622de0f8ea021c7c744400000d6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5100d1143a92622de0f8ea021c7c744400000d6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5100d1143a92622de0f8ea021c7c744400000d6f", "patch": "@@ -1,3 +1,9 @@\n+2004-10-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* stmt.c (expand_case): Put an assertion that index_expr is\n+\tnever INTEGER_CST.  Don't special case for constant\n+\tindex_expr.\n+\n 2004-10-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR 18162"}, {"sha": "3e866cde918582fc718d41795ff3d418f131b4c5", "filename": "gcc/stmt.c", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5100d1143a92622de0f8ea021c7c744400000d6f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5100d1143a92622de0f8ea021c7c744400000d6f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5100d1143a92622de0f8ea021c7c744400000d6f", "patch": "@@ -2355,6 +2355,10 @@ expand_case (tree exp)\n     {\n       tree elt;\n \n+      /* cleanup_tree_cfg removes all SWITCH_EXPR with their index\n+\t expressions being INTEGER_CST.  */\n+      gcc_assert (TREE_CODE (index_expr) != INTEGER_CST);\n+\n       /* The default case is at the end of TREE_VEC.  */\n       elt = TREE_VEC_ELT (vec, TREE_VEC_LENGTH (vec) - 1);\n       gcc_assert (!CASE_HIGH (elt));\n@@ -2494,58 +2498,27 @@ expand_case (tree exp)\n \n \t  if (MEM_P (index))\n \t    index = copy_to_reg (index);\n-\t  if (GET_CODE (index) == CONST_INT\n-\t      || TREE_CODE (index_expr) == INTEGER_CST)\n-\t    {\n-\t      /* Make a tree node with the proper constant value\n-\t\t if we don't already have one.  */\n-\t      if (TREE_CODE (index_expr) != INTEGER_CST)\n-\t\t{\n-\t\t  index_expr\n-\t\t    = build_int_cst_wide (NULL_TREE, INTVAL (index),\n-\t\t\t\t\t  unsignedp || INTVAL (index) >= 0\n-\t\t\t\t\t  ? 0 : -1);\n-\t\t  index_expr = convert (index_type, index_expr);\n-\t\t}\n \n-\t      /* For constant index expressions we need only\n-\t\t issue an unconditional branch to the appropriate\n-\t\t target code.  The job of removing any unreachable\n-\t\t code is left to the optimization phase if the\n-\t\t \"-O\" option is specified.  */\n-\t      for (n = case_list; n; n = n->right)\n-\t\tif (! tree_int_cst_lt (index_expr, n->low)\n-\t\t    && ! tree_int_cst_lt (n->high, index_expr))\n-\t\t  break;\n-\n-\t      if (n)\n-\t\temit_jump (label_rtx (n->code_label));\n-\t      else\n-\t\temit_jump (default_label);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* If the index expression is not constant we generate\n-\t\t a binary decision tree to select the appropriate\n-\t\t target code.  This is done as follows:\n+\t  /* If the index expression is not constant we generate\n+\t     a binary decision tree to select the appropriate\n+\t     target code.  This is done as follows:\n \n-\t\t The list of cases is rearranged into a binary tree,\n-\t\t nearly optimal assuming equal probability for each case.\n+\t     The list of cases is rearranged into a binary tree,\n+\t     nearly optimal assuming equal probability for each case.\n \n-\t\t The tree is transformed into RTL, eliminating\n-\t\t redundant test conditions at the same time.\n+\t     The tree is transformed into RTL, eliminating\n+\t     redundant test conditions at the same time.\n \n-\t\t If program flow could reach the end of the\n-\t\t decision tree an unconditional jump to the\n-\t\t default code is emitted.  */\n+\t     If program flow could reach the end of the\n+\t     decision tree an unconditional jump to the\n+\t     default code is emitted.  */\n \n-\t      use_cost_table\n-\t\t= (TREE_CODE (orig_type) != ENUMERAL_TYPE\n-\t\t   && estimate_case_costs (case_list));\n-\t      balance_case_nodes (&case_list, NULL);\n-\t      emit_case_nodes (index, case_list, default_label, index_type);\n-\t      emit_jump (default_label);\n-\t    }\n+\t  use_cost_table\n+\t    = (TREE_CODE (orig_type) != ENUMERAL_TYPE\n+\t       && estimate_case_costs (case_list));\n+\t  balance_case_nodes (&case_list, NULL);\n+\t  emit_case_nodes (index, case_list, default_label, index_type);\n+\t  emit_jump (default_label);\n \t}\n       else\n \t{"}]}