{"sha": "8d511b90979177c471d1b96aad76ec064bd3b517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1MTFiOTA5NzkxNzdjNDcxZDFiOTZhYWQ3NmVjMDY0YmQzYjUxNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-11-01T00:02:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-11-01T00:02:42Z"}, "message": "re PR tree-optimization/16728 (std::set tests for allocator/insert core in make check-performance)\n\n\n2004-10-31  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR c++/16728\n\t* testsuite/23_containers/set/modifiers/16728.cc: New.\n\nFrom-SVN: r89921", "tree": {"sha": "3a887326fe68bb189f9ecc84972a90f77d22f97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a887326fe68bb189f9ecc84972a90f77d22f97b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d511b90979177c471d1b96aad76ec064bd3b517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d511b90979177c471d1b96aad76ec064bd3b517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d511b90979177c471d1b96aad76ec064bd3b517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d511b90979177c471d1b96aad76ec064bd3b517/comments", "author": null, "committer": null, "parents": [{"sha": "7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6336aab47a0cfb2e1e771a9beafdef07abd86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6336aab47a0cfb2e1e771a9beafdef07abd86a"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "43745a49542e00453f36ad935a168245b3c094c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d511b90979177c471d1b96aad76ec064bd3b517/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d511b90979177c471d1b96aad76ec064bd3b517/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d511b90979177c471d1b96aad76ec064bd3b517", "patch": "@@ -1,3 +1,8 @@\n+2004-10-31  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR c++/16728\n+\t* testsuite/23_containers/set/modifiers/16728.cc: New.\n+\n 2004-10-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/bitmap_allocator.h (allocate(size_type)): Minor tweak."}, {"sha": "69487473f3de2c399e29d3b2da8e9efafe5dd639", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/16728.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d511b90979177c471d1b96aad76ec064bd3b517/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d511b90979177c471d1b96aad76ec064bd3b517/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc?ref=8d511b90979177c471d1b96aad76ec064bd3b517", "patch": "@@ -0,0 +1,96 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ * The goal with this application is to compare the performance\n+ * between different std::allocator implementations. The results are\n+ * influenced by the underlying allocator in the \"C\" library, malloc.\n+ */\n+\n+#include <set>\n+#include <sstream>\n+#include <testsuite_performance.h>\n+\n+using namespace std;\n+\n+typedef int test_type;\n+\n+// The number of iterations to be performed.\n+int iterations = 10000;\n+\n+// The number of values to insert in the container, 32 will cause 5\n+// (re)allocations to be performed (sizes 4, 8, 16, 32 and 64)\n+// This means that all allocations are within _MAX_BYTES = 128 as\n+// defined in stl_alloc.h for __pool_alloc.  Whether or not this\n+// value is relevant in \"the real world\" or not I don't know and\n+// should probably be investigated in more detail.\n+int insert_values = 128;\n+\n+template<typename TestType>\n+  struct value_type : public pair<TestType, TestType>\n+  {\n+    value_type() : pair<TestType, TestType>(0, 0) { }\n+\n+    inline value_type operator++() { return ++this->first, *this; }\n+    inline operator TestType() const { return this->first; }\n+  };\n+\n+template<typename Container>\n+  void\n+  do_loop()\n+  {\n+    Container obj;\n+    int test_iterations = 0;\n+    value_type<test_type> test_value;\n+    while (test_iterations < iterations)\n+      {\n+\tfor (int j = 0; j < insert_values; ++j)\n+\t  obj.insert(obj.end(), ++test_value);\n+\t++test_iterations;\n+      }\n+  }\n+\n+template<typename Container>\n+  void\n+  test_container(Container obj, bool run_threaded = false)\n+  {\n+    do_loop<Container>();\n+    std::ostringstream comment;\n+    if (run_threaded)\n+      comment << \"4-way threaded iterations: \" << iterations*4 << '\\t';\n+    else\n+      comment << \"iterations: \" << iterations << '\\t';\n+  }\n+\n+// http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\n+// http://gcc.gnu.org/ml/libstdc++/2003-05/msg00231.html\n+int main(void)\n+{\n+  typedef less<test_type> compare_type;\n+  test_container(set<test_type, compare_type>());\n+  return 0;\n+}"}]}