{"sha": "bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyZWU3OThkNWE1YTM5ZTE5YTNhYTkzNmU4ZmRmNDljN2U5MzNjNg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-16T20:34:08Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-16T20:34:08Z"}, "message": "2016-06-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/debug.h\n\t(__glibcxx_requires_non_empty_range, __glibcxx_requires_nonempty)\n\t(__glibcxx_requires_subscript): Move...\n\t* include/debug/assertions.h: ...here and add __builtin_expect.\n\t(_GLIBCXX_DEBUG_ONLY): Remove ; value.\n\t* include/bits/stl_deque.h\n\t(std::deque<>::operator[]): Add __glibcxx_requires_subscript check.\n\t(std::deque<>::front()): Add __glibcxx_requires_nonempty check.\n\t(std::deque<>::back()): Likewise.\n\t(std::deque<>::pop_front()): Likewise.\n\t(std::deque<>::pop_back()): Likewise.\n\t(std::deque<>::swap(deque&)): Add allocator check.\n\t* include/bits/stl_vector.h\n\t(std::vector<>::operator[]): Add __glibcxx_requires_subscript check.\n\t(std::vector<>::front()): Add __glibcxx_requires_nonempty check.\n\t(std::vector<>::back()): Likewise.\n\t(std::vector<>::pop_back()): Likewise.\n\t(std::vector<>::swap(vector&)): Add allocator check.\n\nFrom-SVN: r237541", "tree": {"sha": "5524490378923dae76e78665cbf1b9ed8ed18ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5524490378923dae76e78665cbf1b9ed8ed18ce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/comments", "author": null, "committer": null, "parents": [{"sha": "1ac4d38e30651463081ab3606e9a60a909f4f37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac4d38e30651463081ab3606e9a60a909f4f37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac4d38e30651463081ab3606e9a60a909f4f37f"}], "stats": {"total": 138, "additions": 103, "deletions": 35}, "files": [{"sha": "753fb9824b7e168799bdf756daa10e2355969cc8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -1,3 +1,24 @@\n+2016-06-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/debug.h\n+\t(__glibcxx_requires_non_empty_range, __glibcxx_requires_nonempty)\n+\t(__glibcxx_requires_subscript): Move...\n+\t* include/debug/assertions.h: ...here and add __builtin_expect.\n+\t(_GLIBCXX_DEBUG_ONLY): Remove ; value.\n+\t* include/bits/stl_deque.h\n+\t(std::deque<>::operator[]): Add __glibcxx_requires_subscript check.\n+\t(std::deque<>::front()): Add __glibcxx_requires_nonempty check.\n+\t(std::deque<>::back()): Likewise.\n+\t(std::deque<>::pop_front()): Likewise.\n+\t(std::deque<>::pop_back()): Likewise.\n+\t(std::deque<>::swap(deque&)): Add allocator check.\n+\t* include/bits/stl_vector.h\n+\t(std::vector<>::operator[]): Add __glibcxx_requires_subscript check.\n+\t(std::vector<>::front()): Add __glibcxx_requires_nonempty check.\n+\t(std::vector<>::back()): Likewise.\n+\t(std::vector<>::pop_back()): Likewise.\n+\t(std::vector<>::swap(vector&)): Add allocator check.\n+\n 2016-06-16  Daniel Kruegler  <daniel.kruegler@gmail.com>\n \n \tProvide swappable traits (p0185r1)"}, {"sha": "66b8da6a854ed3b4990efbc93bd4a409ebe381cf", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -63,6 +63,8 @@\n #include <initializer_list>\n #endif\n \n+#include <debug/assertions.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n@@ -1365,7 +1367,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n-      { return this->_M_impl._M_start[difference_type(__n)]; }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn this->_M_impl._M_start[difference_type(__n)];\n+      }\n \n       /**\n        *  @brief Subscript access to the data contained in the %deque.\n@@ -1380,7 +1385,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n-      { return this->_M_impl._M_start[difference_type(__n)]; }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn this->_M_impl._M_start[difference_type(__n)];\n+      }\n \n     protected:\n       /// Safety check used only from at().\n@@ -1437,15 +1445,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       reference\n       front() _GLIBCXX_NOEXCEPT\n-      { return *begin(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *begin();\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %deque.\n        */\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n-      { return *begin(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *begin();\n+      }\n \n       /**\n        *  Returns a read/write reference to the data at the last element of the\n@@ -1454,6 +1468,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n+\t__glibcxx_requires_nonempty();\n \titerator __tmp = end();\n \t--__tmp;\n \treturn *__tmp;\n@@ -1466,6 +1481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n+\t__glibcxx_requires_nonempty();\n \tconst_iterator __tmp = end();\n \t--__tmp;\n \treturn *__tmp;\n@@ -1549,6 +1565,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       pop_front() _GLIBCXX_NOEXCEPT\n       {\n+\t__glibcxx_requires_nonempty();\n \tif (this->_M_impl._M_start._M_cur\n \t    != this->_M_impl._M_start._M_last - 1)\n \t  {\n@@ -1571,6 +1588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       pop_back() _GLIBCXX_NOEXCEPT\n       {\n+\t__glibcxx_requires_nonempty();\n \tif (this->_M_impl._M_finish._M_cur\n \t    != this->_M_impl._M_finish._M_first)\n \t  {\n@@ -1789,6 +1807,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(deque& __x) _GLIBCXX_NOEXCEPT\n       {\n+#if __cplusplus >= 201103L\n+\t__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value\n+\t\t\t || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());\n+#endif\n \t_M_impl._M_swap_data(__x._M_impl);\n \t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n \t\t\t\t  __x._M_get_Tp_allocator());"}, {"sha": "eaafa223dbfd4c99495fe72dd967bddd945de1a0", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -63,6 +63,8 @@\n #include <initializer_list>\n #endif\n \n+#include <debug/assertions.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n@@ -784,7 +786,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n-      { return *(this->_M_impl._M_start + __n); }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn *(this->_M_impl._M_start + __n);\n+      }\n \n       /**\n        *  @brief  Subscript access to the data contained in the %vector.\n@@ -799,7 +804,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n-      { return *(this->_M_impl._M_start + __n); }\n+      {\n+\t__glibcxx_requires_subscript(__n);\n+\treturn *(this->_M_impl._M_start + __n);\n+      }\n \n     protected:\n       /// Safety check used only from at().\n@@ -856,31 +864,43 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       reference\n       front() _GLIBCXX_NOEXCEPT\n-      { return *begin(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *begin();\n+      }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %vector.\n        */\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n-      { return *begin(); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *begin();\n+      }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %vector.\n        */\n       reference\n       back() _GLIBCXX_NOEXCEPT\n-      { return *(end() - 1); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *(end() - 1);\n+      }\n       \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %vector.\n        */\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n-      { return *(end() - 1); }\n+      {\n+\t__glibcxx_requires_nonempty();\n+\treturn *(end() - 1);\n+      }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 464. Suggestion for new member functions in standard containers.\n@@ -955,6 +975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       pop_back() _GLIBCXX_NOEXCEPT\n       {\n+\t__glibcxx_requires_nonempty();\n \t--this->_M_impl._M_finish;\n \t_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);\n       }\n@@ -1205,6 +1226,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(vector& __x) _GLIBCXX_NOEXCEPT\n       {\n+#if __cplusplus >= 201103L\n+\t__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value\n+\t\t\t || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());\n+#endif\n \tthis->_M_impl._M_swap_data(__x._M_impl);\n \t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n \t\t\t\t  __x._M_get_Tp_allocator());"}, {"sha": "3708d1290318c119f157e88776bf051ed5997055", "filename": "libstdc++-v3/include/debug/assertions.h", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fassertions.h?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -33,20 +33,36 @@\n \n # define _GLIBCXX_DEBUG_ASSERT(_Condition)\n # define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-# define _GLIBCXX_DEBUG_ONLY(_Statement) ;\n+# define _GLIBCXX_DEBUG_ONLY(_Statement)\n \n-#else\n-\n-#define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n+#endif\n \n-#ifdef _GLIBCXX_DEBUG_PEDANTIC\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n+#ifndef _GLIBCXX_ASSERTIONS\n+# define __glibcxx_requires_non_empty_range(_First,_Last)\n+# define __glibcxx_requires_nonempty()\n+# define __glibcxx_requires_subscript(_N)\n #else\n-# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+\n+// Verify that [_First, _Last) forms a non-empty iterator range.\n+# define __glibcxx_requires_non_empty_range(_First,_Last)\t\\\n+  __glibcxx_assert(__builtin_expect(_First != _Last, true))\n+# define __glibcxx_requires_subscript(_N)\t\\\n+  __glibcxx_assert(__builtin_expect(_N < this->size(), true))\n+// Verify that the container is nonempty\n+# define __glibcxx_requires_nonempty()\t\t\\\n+  __glibcxx_assert(__builtin_expect(!this->empty(), true))\n #endif\n \n-# define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n+#ifdef _GLIBCXX_DEBUG\n+# define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n \n+# ifdef _GLIBCXX_DEBUG_PEDANTIC\n+#  define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n+# else\n+#  define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+# endif\n+\n+# define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n #endif\n \n #endif // _GLIBCXX_DEBUG_ASSERTIONS"}, {"sha": "79fe00d7c76b11eda34cc44a8db9388ab1d985aa", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -74,33 +74,18 @@ namespace __gnu_debug\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\n-# define __glibcxx_requires_subscript(_N)\n # define __glibcxx_requires_irreflexive(_First,_Last)\n # define __glibcxx_requires_irreflexive2(_First,_Last)\n # define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\n \n-#ifdef _GLIBCXX_ASSERTIONS\n-// Verify that [_First, _Last) forms a non-empty iterator range.\n-# define __glibcxx_requires_non_empty_range(_First,_Last) \\\n-  __glibcxx_assert(_First != _Last)\n-// Verify that the container is nonempty\n-# define __glibcxx_requires_nonempty() \\\n-  __glibcxx_assert(! this->empty())\n-#else\n-# define __glibcxx_requires_non_empty_range(_First,_Last)\n-# define __glibcxx_requires_nonempty()\n-#endif\n-\n #else\n \n # include <debug/macros.h>\n \n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\t\\\n   __glibcxx_check_valid_range(_First,_Last)\n-# define __glibcxx_requires_non_empty_range(_First,_Last)\t\\\n-  __glibcxx_check_non_empty_range(_First,_Last)\n # define __glibcxx_requires_sorted(_First,_Last)\t\\\n   __glibcxx_check_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\t\\\n@@ -121,11 +106,9 @@ namespace __gnu_debug\n   __glibcxx_check_heap(_First,_Last)\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\t\\\n   __glibcxx_check_heap_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_nonempty() __glibcxx_check_nonempty()\n # define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\t\\\n   __glibcxx_check_string_len(_String,_Len)\n-# define __glibcxx_requires_subscript(_N) __glibcxx_check_subscript(_N)\n # define __glibcxx_requires_irreflexive(_First,_Last)\t\\\n   __glibcxx_check_irreflexive(_First,_Last)\n # define __glibcxx_requires_irreflexive2(_First,_Last)\t\\"}, {"sha": "f1a74eb495a43cc74360e28fbde8ca4beeb8e59c", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=bd2ee798d5a5a39e19a3aa936e8fdf49c7e933c6", "patch": "@@ -138,6 +138,7 @@ namespace __gnu_debug\n \t  return __dist.first >= 0;\n \t}\n \n+      // Can't tell so assume it is fine.\n       return true;\n     }\n "}]}