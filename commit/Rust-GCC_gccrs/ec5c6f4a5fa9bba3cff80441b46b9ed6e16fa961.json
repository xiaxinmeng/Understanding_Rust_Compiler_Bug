{"sha": "ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1YzZmNGE1ZmE5YmJhM2NmZjgwNDQxYjQ2YjllZDZlMTZmYTk2MQ==", "commit": {"author": {"name": "Eli Zaretskii", "email": "eliz@gnu.org", "date": "2009-05-30T05:17:14Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2009-05-30T05:17:14Z"}, "message": "snprintf.c: Doc fix.\n\n* snprintf.c: Doc fix.\n\n* vsnprintf.c: Doc fix.\n\nFrom-SVN: r147998", "tree": {"sha": "7fa9026331aee4d137d546a906440eca5ea8ad78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa9026331aee4d137d546a906440eca5ea8ad78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/comments", "author": {"login": "Eli-Zaretskii", "id": 20908835, "node_id": "MDQ6VXNlcjIwOTA4ODM1", "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eli-Zaretskii", "html_url": "https://github.com/Eli-Zaretskii", "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers", "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}", "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions", "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs", "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos", "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}", "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acd262252cd2121bd1bb48ed8b28cf1ac6bc7aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd262252cd2121bd1bb48ed8b28cf1ac6bc7aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd262252cd2121bd1bb48ed8b28cf1ac6bc7aaf"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "69d3617d6e86f63deebacbb48f304b108a8bc647", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "patch": "@@ -1,3 +1,9 @@\n+2009-05-30  Eli Zaretskii  <eliz@gnu.org>\n+\n+\t* snprintf.c: Doc fix.\n+\n+\t* vsnprintf.c: Doc fix.\n+\n 2009-05-29  Kai Tietz  <kai.tietz@onevision.com>\n \n         * pex-win32.c (pex_win32_fdopenr): Set INHERIT to false."}, {"sha": "36c8e9b3430f21b92a31d45df05bd67493623d19", "filename": "libiberty/snprintf.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2Fsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2Fsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsnprintf.c?ref=ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "patch": "@@ -27,13 +27,15 @@ the executable file might be covered by the GNU General Public License. */\n \n @deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, ...)\n \n-This function is similar to sprintf, but it will print at most @var{n}\n-characters.  On error the return value is -1, otherwise it returns the\n-number of characters that would have been printed had @var{n} been\n-sufficiently large, regardless of the actual value of @var{n}.  Note\n-some pre-C99 system libraries do not implement this correctly so users\n-cannot generally rely on the return value if the system version of\n-this function is used.\n+This function is similar to @code{sprintf}, but it will write to\n+@var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n+terminating null byte, for a total of @var{n} bytes.\n+On error the return value is -1, otherwise it returns the number of\n+bytes, not including the terminating null byte, that would have been\n+written had @var{n} been sufficiently large, regardless of the actual\n+value of @var{n}.  Note some pre-C99 system libraries do not implement\n+this correctly so users cannot generally rely on the return value if\n+the system version of this function is used.\n \n @end deftypefn\n "}, {"sha": "5470df2223b8800372c57fe36787f94aceb0ca02", "filename": "libiberty/vsnprintf.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2Fvsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961/libiberty%2Fvsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsnprintf.c?ref=ec5c6f4a5fa9bba3cff80441b46b9ed6e16fa961", "patch": "@@ -27,13 +27,15 @@ the executable file might be covered by the GNU General Public License. */\n \n @deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, va_list @var{ap})\n \n-This function is similar to vsprintf, but it will print at most\n-@var{n} characters.  On error the return value is -1, otherwise it\n-returns the number of characters that would have been printed had\n-@var{n} been sufficiently large, regardless of the actual value of\n-@var{n}.  Note some pre-C99 system libraries do not implement this\n-correctly so users cannot generally rely on the return value if the\n-system version of this function is used.\n+This function is similar to @code{vsprintf}, but it will write to\n+@var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n+terminating null byte, for a total of @var{n} bytes.  On error the\n+return value is -1, otherwise it returns the number of characters that\n+would have been printed had @var{n} been sufficiently large,\n+regardless of the actual value of @var{n}.  Note some pre-C99 system\n+libraries do not implement this correctly so users cannot generally\n+rely on the return value if the system version of this function is\n+used.\n \n @end deftypefn\n "}]}