{"sha": "bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmOGMxY2MyOGQ1OTA0NmJjNmEyOTc3ODVkZDBhYTg5YTRhYjA3YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-09-16T14:25:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-09-16T14:25:27Z"}, "message": "s390-protos.h (s390_overlap_p): Prototype added.\n\n2005-09-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390-protos.h (s390_overlap_p): Prototype added.\n\t* config/s390/s390.c (s390_overlap_p): New function.\n\t* config/s390/s390.md (\"*mvc\" peephole2, \"*nc\" peephole2, \"*oc\"\n\tpeephole2, \"*xc\" peephole2): Added overlap check to the peephole2\n\tcondition.\n\nFrom-SVN: r104342", "tree": {"sha": "0e861ef7964bb222fa2059053cce6aca085bf386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e861ef7964bb222fa2059053cce6aca085bf386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/comments", "author": null, "committer": null, "parents": [{"sha": "f7acf1c26d083e143b4c90eb69b8fb9a5d0314ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7acf1c26d083e143b4c90eb69b8fb9a5d0314ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7acf1c26d083e143b4c90eb69b8fb9a5d0314ab"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "f7ccd52ea3965cb58a2ae65056bb3ffb3087669c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "patch": "@@ -1,3 +1,11 @@\n+2005-09-16  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_overlap_p): Prototype added.\n+\t* config/s390/s390.c (s390_overlap_p): New function.\n+\t* config/s390/s390.md (\"*mvc\" peephole2, \"*nc\" peephole2, \"*oc\"\n+\tpeephole2, \"*xc\" peephole2): Added overlap check to the peephole2\n+\tcondition.\n+\n 2005-09-16  Richard Guenther  <rguenther@suse.de>\n \n \t* ipa-pure-const.c (static_execute): Free auxiliar information."}, {"sha": "7bafcf3f404cb621ee4a9ed6f6bbcb571c0529d0", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "patch": "@@ -38,6 +38,7 @@ extern int s390_const_double_ok_for_constraint_p (rtx, int, const char *);\n extern int s390_single_part (rtx, enum machine_mode, enum machine_mode, int);\n extern unsigned HOST_WIDE_INT s390_extract_part (rtx, enum machine_mode, int);\n extern bool s390_split_ok_p (rtx, rtx, enum machine_mode, int);\n+extern bool s390_overlap_p (rtx, rtx, HOST_WIDE_INT);\n extern bool s390_offset_p (rtx, rtx, rtx);\n extern int tls_symbolic_operand (rtx);\n "}, {"sha": "a543e59126eb70a84e679d4adf86c51e079711bc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "patch": "@@ -1074,6 +1074,48 @@ s390_split_ok_p (rtx dst, rtx src, enum machine_mode mode, int first_subword)\n   return true;\n }\n \n+/* Return true if it can be proven that [MEM1, MEM1 + SIZE]\n+   and [MEM2, MEM2 + SIZE] do overlap and false\n+   otherwise.  */\n+\n+bool\n+s390_overlap_p (rtx mem1, rtx mem2, HOST_WIDE_INT size)\n+{\n+  rtx addr1, addr2, addr_delta;\n+  HOST_WIDE_INT delta;\n+\n+  if (GET_CODE (mem1) != MEM || GET_CODE (mem2) != MEM)\n+    return true;\n+\n+  if (size == 0)\n+    return false;\n+\n+  addr1 = XEXP (mem1, 0);\n+  addr2 = XEXP (mem2, 0);\n+\n+  addr_delta = simplify_binary_operation (MINUS, Pmode, addr2, addr1);\n+\n+  /* This overlapping check is used by peepholes merging memory block operations.\n+     Overlapping operations would otherwise be recognized by the S/390 hardware\n+     and would fall back to a slower implementation. Allowing overlapping \n+     operations would lead to slow code but not to wrong code. Therefore we are\n+     somewhat optimistict if we cannot prove that the memory blocks are \n+     overlapping.\n+     That's why we return false here although this may accept operations on\n+     overlapping memory areas.  */\n+  if (!addr_delta || GET_CODE (addr_delta) != CONST_INT)\n+    return false;\n+\n+  delta = INTVAL (addr_delta);\n+\n+  if (delta == 0\n+      || (delta > 0 && delta < size)\n+      || (delta < 0 && -delta < size))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Check whether the address of memory reference MEM2 equals exactly\n    the address of memory reference MEM1 plus DELTA.  Return true if\n    we can prove this to be the case, false otherwise.  */"}, {"sha": "3f119c9255a276cf98476f89cce0c08abb29ed2b", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=bcf8c1cc28d59046bc6a297785dd0aa89a4ab07a", "patch": "@@ -1650,6 +1650,8 @@\n      (use (match_operand 5 \"const_int_operand\" \"\"))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n+   && !s390_overlap_p (operands[0], operands[1], \n+                       INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n     [(set (match_dup 6) (match_dup 7))\n@@ -5124,6 +5126,8 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n+   && !s390_overlap_p (operands[0], operands[1], \n+                       INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n     [(set (match_dup 6) (and:BLK (match_dup 6) (match_dup 7)))\n@@ -5412,6 +5416,8 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n+   && !s390_overlap_p (operands[0], operands[1], \n+                       INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n     [(set (match_dup 6) (ior:BLK (match_dup 6) (match_dup 7)))\n@@ -5651,6 +5657,8 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n+   && !s390_overlap_p (operands[0], operands[1], \n+                       INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n     [(set (match_dup 6) (xor:BLK (match_dup 6) (match_dup 7)))"}]}