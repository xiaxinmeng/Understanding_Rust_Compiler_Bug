{"sha": "2d9d52359cf173f784d1649f0ae2e77b27e87b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ5ZDUyMzU5Y2YxNzNmNzg0ZDE2NDlmMGFlMmU3N2IyN2U4N2IzNg==", "commit": {"author": {"name": "Nathan Myers", "email": "ncm@cantrip.org", "date": "2003-04-27T17:20:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-04-27T17:20:42Z"}, "message": "Move some basic_string members out of line because they are too big to reasonably be inline.\n\n2003-04-27  Nathan Myers  <ncm@cantrip.org>\n\n\tMove some basic_string members out of line because\n\tthey are too big to reasonably be inline.\n\t* include/bits/basic_string.h\n\t(assign(const basic_string&, size_type, size_type),\n\tassign(const _CharT*, size_type),\n\tinsert(size_type, const basic_string&, size_type, size_type),\n\tinsert(size_type, const _CharT*, size_type),\n\treplace(size_type, size_type, const _CharT*, size_type)):\n\tMove from here to...\n\t* include/bits/basic_string.tcc: ...here.\n\nFrom-SVN: r66132", "tree": {"sha": "31ffd8002a41cc9db07f8d8567dde341fbfb0fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ffd8002a41cc9db07f8d8567dde341fbfb0fee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d9d52359cf173f784d1649f0ae2e77b27e87b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9d52359cf173f784d1649f0ae2e77b27e87b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9d52359cf173f784d1649f0ae2e77b27e87b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9d52359cf173f784d1649f0ae2e77b27e87b36/comments", "author": {"login": "ncm", "id": 215047, "node_id": "MDQ6VXNlcjIxNTA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/215047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncm", "html_url": "https://github.com/ncm", "followers_url": "https://api.github.com/users/ncm/followers", "following_url": "https://api.github.com/users/ncm/following{/other_user}", "gists_url": "https://api.github.com/users/ncm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncm/subscriptions", "organizations_url": "https://api.github.com/users/ncm/orgs", "repos_url": "https://api.github.com/users/ncm/repos", "events_url": "https://api.github.com/users/ncm/events{/privacy}", "received_events_url": "https://api.github.com/users/ncm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "293107d161b6bea57023ee55890b1ac589423ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/293107d161b6bea57023ee55890b1ac589423ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/293107d161b6bea57023ee55890b1ac589423ee7"}], "stats": {"total": 218, "additions": 129, "deletions": 89}, "files": [{"sha": "0642620f3b233ebc7dde4d7aad8df704ed79ad07", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2d9d52359cf173f784d1649f0ae2e77b27e87b36", "patch": "@@ -1,3 +1,16 @@\n+2003-04-27  Nathan Myers  <ncm@cantrip.org>\n+\n+\tMove some basic_string members out of line because\n+\tthey are too big to reasonably be inline.\n+\t* include/bits/basic_string.h\n+\t(assign(const basic_string&, size_type, size_type),\n+\tassign(const _CharT*, size_type),\n+\tinsert(size_type, const basic_string&, size_type, size_type),\n+\tinsert(size_type, const _CharT*, size_type),\n+\treplace(size_type, size_type, const _CharT*, size_type)):\n+\tMove from here to...\n+\t* include/bits/basic_string.tcc: ...here.\n+\t\n 2003-04-26  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/fstream.tcc (pbackfail): Shorten a bit (10 lines)"}, {"sha": "61ddee3d6f8a8b7ac94fe7261c3fd354e28b1b50", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 89, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2d9d52359cf173f784d1649f0ae2e77b27e87b36", "patch": "@@ -499,37 +499,10 @@ namespace std\n       assign(const basic_string& __str);\n \n       basic_string&\n-      assign(const basic_string& __str, size_type __pos, size_type __n)\n-      {\n-\tconst size_type __strsize = __str.size();\n-\tif (__pos > __strsize)\n-\t  __throw_out_of_range(\"basic_string::assign\");\n-\tconst bool __testn = __n < __strsize - __pos;\n-\tconst size_type __newsize = __testn ? __n : __strsize - __pos;\n-\treturn this->assign(__str._M_data() + __pos, __newsize);\n-      }\n+      assign(const basic_string& __str, size_type __pos, size_type __n);\n \n       basic_string&\n-      assign(const _CharT* __s, size_type __n)\n-      {\n-\tif (__n > this->max_size())\n-\t  __throw_length_error(\"basic_string::assign\");\n-\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-\t    || less<const _CharT*>()(_M_data() + this->size(), __s))\n-\t  return _M_replace_safe(_M_ibegin(), _M_iend(), __s, __s + __n);\n-\telse\n-\t  {\n-\t    // Work in-place\n-\t    const size_type __pos = __s - _M_data();\n-\t    if (__pos >= __n)\n-\t      traits_type::copy(_M_data(), __s, __n);\n-\t    else if (__pos)\n-\t      traits_type::move(_M_data(), __s, __n);\n-\t    _M_rep()->_M_length = __n;\n-\t    _M_data()[__n] = _Rep::_S_terminal;\n-\t    return *this;\n-\t  }\n-      }\n+      assign(const _CharT* __s, size_type __n);\n \n       basic_string&\n       assign(const _CharT* __s)\n@@ -558,49 +531,10 @@ namespace std\n \n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n-\t     size_type __pos2, size_type __n)\n-      {\n-\tconst size_type __strsize = __str.size();\n- \tif (__pos2 > __strsize)\n-\t  __throw_out_of_range(\"basic_string::insert\");\n-\tconst bool __testn = __n < __strsize - __pos2;\n-\tconst size_type __newsize = __testn ? __n : __strsize - __pos2;\n-\treturn this->insert(__pos1, __str._M_data() + __pos2, __newsize);\n-      }\n+\t     size_type __pos2, size_type __n);\n \n       basic_string&\n-      insert(size_type __pos, const _CharT* __s, size_type __n)\n-      {\n-\tconst size_type __size = this->size();\n- \tif (__pos > __size)\n-\t  __throw_out_of_range(\"basic_string::insert\");\n-\tif (__size > this->max_size() - __n)\n-\t  __throw_length_error(\"basic_string::insert\");\n-\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-\t    || less<const _CharT*>()(_M_data() + __size, __s))\n-\t  return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,\n-\t\t\t\t __s, __s + __n);\n-\telse\n-\t  {\n-\t    // Work in-place. If _M_mutate reallocates the string, __s\n-\t    // does not point anymore to valid data, therefore we save its\n-\t    // offset, then we restore it.\n-\t    const size_type __off = __s - _M_data();\n-\t    _M_mutate(__pos, 0, __n);\n-\t    __s = _M_data() + __off;\n-\t    _CharT* __p = _M_data() + __pos;\n-\t    if (__s  + __n <= __p)\n-\t      traits_type::copy(__p, __s, __n);\n-\t    else if (__s >= __p)\n-\t      traits_type::copy(__p, __s + __n, __n);\n-\t    else\n-\t      {\n-\t\ttraits_type::copy(__p, __s, __p - __s);\n-\t\ttraits_type::copy(__p + (__p - __s), __p + __n, __n - (__p - __s));\n-\t      }\n-\t    return *this;\n-\t  }\n-       }\n+      insert(size_type __pos, const _CharT* __s, size_type __n);\n \n       basic_string&\n       insert(size_type __pos, const _CharT* __s)\n@@ -657,25 +591,7 @@ namespace std\n \n       basic_string&\n       replace(size_type __pos, size_type __n1, const _CharT* __s,\n-\t      size_type __n2)\n-      {\n-\tconst size_type __size = this->size();\n- \tif (__pos > __size)\n-\t  __throw_out_of_range(\"basic_string::replace\");\n-\tconst bool __testn1 = __n1 < __size - __pos;\n-\tconst size_type __foldn1 = __testn1 ? __n1 : __size - __pos;\n-\tif (__size - __foldn1 > this->max_size() - __n2)\n-\t  __throw_length_error(\"basic_string::replace\");\n-\tif (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-\t    || less<const _CharT*>()(_M_data() + __size, __s))\n-\t  return _M_replace_safe(_M_ibegin() + __pos,\n-\t\t\t\t _M_ibegin() + __pos + __foldn1, __s, __s + __n2);\n-\t// Todo: optimized in-place replace.\n-\telse return\n-\t       _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,\n-\t\t\t  __s, __s + __n2,\n-\t\t\t  typename iterator_traits<const _CharT*>::iterator_category());\n-      }\n+\t      size_type __n2);\n \n       basic_string&\n       replace(size_type __pos, size_type __n1, const _CharT* __s)"}, {"sha": "657b997c7237aa9f2418f0fc183bd5b7889a8ef2", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d9d52359cf173f784d1649f0ae2e77b27e87b36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=2d9d52359cf173f784d1649f0ae2e77b27e87b36", "patch": "@@ -254,6 +254,117 @@ namespace std\n \t}\n       return *this;\n     }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     basic_string<_CharT, _Traits, _Alloc>&\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     assign(const basic_string& __str, size_type __pos, size_type __n)\n+     {\n+       const size_type __strsize = __str.size();\n+       if (__pos > __strsize)\n+\t __throw_out_of_range(\"basic_string::assign\");\n+       const bool __testn = __n < __strsize - __pos;\n+       const size_type __newsize = __testn ? __n : __strsize - __pos;\n+       return this->assign(__str._M_data() + __pos, __newsize);\n+     }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     basic_string<_CharT, _Traits, _Alloc>&\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     assign(const _CharT* __s, size_type __n)\n+     {\n+       if (__n > this->max_size())\n+\t __throw_length_error(\"basic_string::assign\");\n+       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+\t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n+\t return _M_replace_safe(_M_ibegin(), _M_iend(), __s, __s + __n);\n+       else\n+\t {\n+\t   // Work in-place\n+\t   const size_type __pos = __s - _M_data();\n+\t   if (__pos >= __n)\n+\t     traits_type::copy(_M_data(), __s, __n);\n+\t   else if (__pos)\n+\t     traits_type::move(_M_data(), __s, __n);\n+\t   _M_rep()->_M_length = __n;\n+\t   _M_data()[__n] = _Rep::_S_terminal;  // grr.\n+\t   return *this;\n+\t }\n+     }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     basic_string<_CharT, _Traits, _Alloc>&\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     insert(size_type __pos1, const basic_string& __str,\n+            size_type __pos2, size_type __n)\n+     {\n+       const size_type __strsize = __str.size();\n+       if (__pos2 > __strsize)\n+\t __throw_out_of_range(\"basic_string::insert\");\n+       const bool __testn = __n < __strsize - __pos2;\n+       const size_type __newsize = __testn ? __n : __strsize - __pos2;\n+       return this->insert(__pos1, __str._M_data() + __pos2, __newsize);\n+     }\n+\n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     basic_string<_CharT, _Traits, _Alloc>&\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     insert(size_type __pos, const _CharT* __s, size_type __n)\n+     {\n+       const size_type __size = this->size();\n+       if (__pos > __size)\n+         __throw_out_of_range(\"basic_string::insert\");\n+       if (__size > this->max_size() - __n)\n+         __throw_length_error(\"basic_string::insert\");\n+       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+           || less<const _CharT*>()(_M_data() + __size, __s))\n+         return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,\n+                                __s, __s + __n);\n+       else\n+         {\n+           // Work in-place. If _M_mutate reallocates the string, __s\n+           // does not point anymore to valid data, therefore we save its\n+           // offset, then we restore it.\n+           const size_type __off = __s - _M_data();\n+           _M_mutate(__pos, 0, __n);\n+           __s = _M_data() + __off;\n+           _CharT* __p = _M_data() + __pos;\n+           if (__s  + __n <= __p)\n+             traits_type::copy(__p, __s, __n);\n+           else if (__s >= __p)\n+             traits_type::copy(__p, __s + __n, __n);\n+           else\n+             {\n+               traits_type::copy(__p, __s, __p - __s);\n+               traits_type::copy(__p + (__p-__s), __p + __n, __n - (__p-__s));\n+             }\n+           return *this;\n+         }\n+     }\n+ \n+   template<typename _CharT, typename _Traits, typename _Alloc>\n+     basic_string<_CharT, _Traits, _Alloc>&\n+     basic_string<_CharT, _Traits, _Alloc>::\n+     replace(size_type __pos, size_type __n1, const _CharT* __s,\n+\t     size_type __n2)\n+     {\n+       const size_type __size = this->size();\n+       if (__pos > __size)\n+         __throw_out_of_range(\"basic_string::replace\");\n+       const bool __testn1 = __n1 < __size - __pos;\n+       const size_type __foldn1 = __testn1 ? __n1 : __size - __pos;\n+       if (__size - __foldn1 > this->max_size() - __n2)\n+         __throw_length_error(\"basic_string::replace\");\n+       if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n+           || less<const _CharT*>()(_M_data() + __size, __s))\n+         return _M_replace_safe(_M_ibegin() + __pos,\n+\t\t\t\t_M_ibegin() + __pos + __foldn1, __s, __s + __n2);\n+       // Todo: optimized in-place replace.\n+       else\n+\t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,\n+\t\t\t   __s, __s + __n2,\n+\t\t\t   typename iterator_traits<const _CharT*>::iterator_category());\n+     }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void"}]}