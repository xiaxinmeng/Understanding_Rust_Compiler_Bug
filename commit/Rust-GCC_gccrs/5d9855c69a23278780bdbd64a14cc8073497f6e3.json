{"sha": "5d9855c69a23278780bdbd64a14cc8073497f6e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ODU1YzY5YTIzMjc4NzgwYmRiZDY0YTE0Y2M4MDczNDk3ZjZlMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T17:30:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-29T17:32:15Z"}, "message": "Refactor to GenericParam to TypeParam in parameter mappings\n\nWhen we have Parameter mappings these _must_ be TypeParams this allows us\nto access the specified defaults if they exist.", "tree": {"sha": "08413a354ab59d8ad181bd662fb7037ca2ede929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08413a354ab59d8ad181bd662fb7037ca2ede929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9855c69a23278780bdbd64a14cc8073497f6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9855c69a23278780bdbd64a14cc8073497f6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9855c69a23278780bdbd64a14cc8073497f6e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9855c69a23278780bdbd64a14cc8073497f6e3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1296bc68e0b94285bbbab89a63ae44520d812ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1296bc68e0b94285bbbab89a63ae44520d812ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1296bc68e0b94285bbbab89a63ae44520d812ac"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "8ab20cf37cf7c747e511c10c03a1a15e5cc0117b", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=5d9855c69a23278780bdbd64a14cc8073497f6e3", "patch": "@@ -63,8 +63,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n \n@@ -115,8 +115,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n "}, {"sha": "1bfa7fb0e3e21745d6292756a2c95abbb6a4dfbe", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=5d9855c69a23278780bdbd64a14cc8073497f6e3", "patch": "@@ -59,8 +59,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n \n@@ -99,8 +99,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n \n@@ -156,8 +156,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n \n@@ -209,8 +209,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n \t    context->insert_type (generic_param->get_mappings (), param_type);\n \n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t      static_cast<HIR::TypeParam &> (*generic_param), param_type));\n \t  }\n       }\n "}, {"sha": "d8a3f299b95257058ab14386dd4ead82bc6c852f", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=5d9855c69a23278780bdbd64a14cc8073497f6e3", "patch": "@@ -209,8 +209,7 @@ class TypeCheckType : public TypeCheckBase\n       {\n \tstd::string sym = mapping.get_param_ty ()->get_symbol ();\n \tparam_tys.insert (sym);\n-\tparam_location_map[sym]\n-\t  = mapping.get_generic_param ()->get_locus_slow ();\n+\tparam_location_map[sym] = mapping.get_generic_param ().get_locus ();\n       }\n \n     std::set<std::string> args;"}, {"sha": "ee135322d6a95b563814e806441ed39860d7720b", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9855c69a23278780bdbd64a14cc8073497f6e3/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5d9855c69a23278780bdbd64a14cc8073497f6e3", "patch": "@@ -398,8 +398,7 @@ class TupleType : public BaseType\n class SubstitutionParamMapping\n {\n public:\n-  SubstitutionParamMapping (std::unique_ptr<HIR::GenericParam> &generic,\n-\t\t\t    ParamType *param)\n+  SubstitutionParamMapping (const HIR::TypeParam &generic, ParamType *param)\n \n     : generic (generic), param (param)\n   {}\n@@ -431,7 +430,7 @@ class SubstitutionParamMapping\n \n   const ParamType *get_param_ty () const { return param; }\n \n-  std::unique_ptr<HIR::GenericParam> &get_generic_param () { return generic; };\n+  const HIR::TypeParam &get_generic_param () { return generic; };\n \n   void override_context ();\n \n@@ -444,10 +443,12 @@ class SubstitutionParamMapping\n     return p->resolve ()->get_kind () == TypeKind::PARAM;\n   }\n \n-  Location get_param_locus () const { return generic->get_locus_slow (); }\n+  Location get_param_locus () const { return generic.get_locus (); }\n+\n+  bool param_has_default_ty () const { return generic.has_type (); }\n \n private:\n-  std::unique_ptr<HIR::GenericParam> &generic;\n+  const HIR::TypeParam &generic;\n   ParamType *param;\n };\n "}]}