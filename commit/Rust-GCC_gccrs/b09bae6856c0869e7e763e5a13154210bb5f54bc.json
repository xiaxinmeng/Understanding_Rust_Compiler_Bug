{"sha": "b09bae6856c0869e7e763e5a13154210bb5f54bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5YmFlNjg1NmMwODY5ZTdlNzYzZTVhMTMxNTQyMTBiYjVmNTRiYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-16T16:11:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-16T16:11:28Z"}, "message": "re PR middle-end/41043 (virtual memory exhausted: Cannot allocate memory)\n\n2010-02-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41043\n\t* tree-vrp.c  (vrp_var_may_overflow): Only ask SCEV for\n\treal loops.\n\t(vrp_visit_assignment_or_call): Do not ask SCEV for regular\n\tstatements ...\n\t(vrp_visit_phi_node): ... but only for loop PHI nodes.\n\n\t* gfortran.dg/pr41043.f90: New testcase.\n\t* gcc.dg/Wstrict-overflow-18.c: XFAIL.\n\nFrom-SVN: r156808", "tree": {"sha": "4620ddaac26a3bc34efc63a8e2cd6bb8afe8224c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4620ddaac26a3bc34efc63a8e2cd6bb8afe8224c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b09bae6856c0869e7e763e5a13154210bb5f54bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09bae6856c0869e7e763e5a13154210bb5f54bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09bae6856c0869e7e763e5a13154210bb5f54bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09bae6856c0869e7e763e5a13154210bb5f54bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d779a591998fee3b37d458c1f44af6cc882fd400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d779a591998fee3b37d458c1f44af6cc882fd400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d779a591998fee3b37d458c1f44af6cc882fd400"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "eaa030f49ebabf2fd696e96a0915a51054097988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b09bae6856c0869e7e763e5a13154210bb5f54bc", "patch": "@@ -1,3 +1,12 @@\n+2010-02-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41043\n+\t* tree-vrp.c  (vrp_var_may_overflow): Only ask SCEV for\n+\treal loops.\n+\t(vrp_visit_assignment_or_call): Do not ask SCEV for regular\n+\tstatements ...\n+\t(vrp_visit_phi_node): ... but only for loop PHI nodes.\n+\n 2010-02-16  Ira Rosen <irar@il.ibm.com>\n \n \tPR tree-optimization/43074"}, {"sha": "c70a97982486a06c3adbb37b616f59112719b736", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b09bae6856c0869e7e763e5a13154210bb5f54bc", "patch": "@@ -1,3 +1,9 @@\n+2010-02-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41043\n+\t* gfortran.dg/pr41043.f90: New testcase.\n+\t* gcc.dg/Wstrict-overflow-18.c: XFAIL.\n+\n 2010-02-16  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/initlist-opt.C: Declare max_val inline."}, {"sha": "2767c44fbf24af2f5e3dbb2c833fe1d0bc5caf02", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-18.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-18.c?ref=b09bae6856c0869e7e763e5a13154210bb5f54bc", "patch": "@@ -2,7 +2,10 @@\n /* { dg-options \"-fstrict-overflow -O2 -Wstrict-overflow\" } */\n \n /* Don't warn about an overflow when folding i > 0.  The loop analysis\n-   should determine that i does not wrap.  */\n+   should determine that i does not wrap.\n+\n+   The test is really bogus, p->a - p->b can be larger than INT_MAX\n+   and thus i can very well wrap.  */\n \n struct c { unsigned int a; unsigned int b; };\n extern void bar (struct c *);\n@@ -14,7 +17,7 @@ foo (struct c *p)\n \n   for (i = 0; i < p->a - p->b; ++i)\n     {\n-      if (i > 0)\n+      if (i > 0)  /* { dg-bogus \"warning\" \"\" { xfail *-*-* } } */\n \tsum += 2;\n       bar (p);\n     }"}, {"sha": "2f0f05965c1bb6688876ccecc0d5b886ede6e7b3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09bae6856c0869e7e763e5a13154210bb5f54bc/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b09bae6856c0869e7e763e5a13154210bb5f54bc", "patch": "@@ -3280,7 +3280,8 @@ vrp_var_may_overflow (tree var, gimple stmt)\n     return true;\n \n   l = loop_containing_stmt (stmt);\n-  if (l == NULL)\n+  if (l == NULL\n+      || !loop_outer (l))\n     return true;\n \n   chrec = instantiate_parameters (l, analyze_scalar_evolution (l, var));\n@@ -5342,20 +5343,13 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)\n \t   && TYPE_MAX_VALUE (TREE_TYPE (lhs)))\n \t  || POINTER_TYPE_P (TREE_TYPE (lhs))))\n     {\n-      struct loop *l;\n       value_range_t new_vr = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n \n       if (code == GIMPLE_CALL)\n \textract_range_basic (&new_vr, stmt);\n       else\n \textract_range_from_assignment (&new_vr, stmt);\n \n-      /* If STMT is inside a loop, we may be able to know something\n-\t else about the range of LHS by examining scalar evolution\n-\t information.  */\n-      if (current_loops && (l = loop_containing_stmt (stmt)))\n-\tadjust_range_with_scev (&new_vr, l, stmt, lhs);\n-\n       if (update_value_range (lhs, &new_vr))\n \t{\n \t  *output_p = lhs;\n@@ -6259,6 +6253,7 @@ vrp_visit_phi_node (gimple phi)\n   value_range_t *lhs_vr = get_value_range (lhs);\n   value_range_t vr_result = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n   int edges, old_edges;\n+  struct loop *l;\n \n   copy_value_range (&vr_result, lhs_vr);\n \n@@ -6322,6 +6317,14 @@ vrp_visit_phi_node (gimple phi)\n \t}\n     }\n \n+  /* If this is a loop PHI node SCEV may known more about its\n+     value-range.\n+     ???  Identify loop PHI nodes properly.   */\n+  if (current_loops\n+      && (l = loop_containing_stmt (phi))\n+      && loop_outer (l))\n+    adjust_range_with_scev (&vr_result, l, phi, lhs);\n+\n   if (vr_result.type == VR_VARYING)\n     goto varying;\n "}]}