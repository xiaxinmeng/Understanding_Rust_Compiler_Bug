{"sha": "3296aff4d653227566c2757edad27018940d6ea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5NmFmZjRkNjUzMjI3NTY2YzI3NTdlZGFkMjcwMTg5NDBkNmVhOQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-06T02:42:29Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-06T02:42:29Z"}, "message": "(RTX_COSTS): Add special cases for a plain 68000.\n\nFrom-SVN: r8869", "tree": {"sha": "9471be8710da9d7359a9854f2e9d664ddbc3addb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9471be8710da9d7359a9854f2e9d664ddbc3addb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3296aff4d653227566c2757edad27018940d6ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3296aff4d653227566c2757edad27018940d6ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3296aff4d653227566c2757edad27018940d6ea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3296aff4d653227566c2757edad27018940d6ea9/comments", "author": null, "committer": null, "parents": [{"sha": "71af73bb7f9d65a10c37ab6368e880b3b1774889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71af73bb7f9d65a10c37ab6368e880b3b1774889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71af73bb7f9d65a10c37ab6368e880b3b1774889"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "d7d45d1e564732b844f4769551eab3a4dcacc8b4", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3296aff4d653227566c2757edad27018940d6ea9/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3296aff4d653227566c2757edad27018940d6ea9/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=3296aff4d653227566c2757edad27018940d6ea9", "patch": "@@ -1371,8 +1371,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    work properly in synth_mult on the 68020,\n    relative to an average of the time for add and the time for shift,\n    taking away a little more because sometimes move insns are needed.  */\n+/* div?.w is relatively cheaper on 68000 counted in COSTS_N_INSNS terms.  */\n #define MULL_COST (TARGET_68040 ? 5 : 13)\n-#define MULW_COST (TARGET_68040 ? 3 : 8)\n+#define MULW_COST (TARGET_68040 ? 3 : TARGET_68020 ? 8 : 5)\n+#define DIVW_COST (TARGET_68020 ? 27 : 12)\n \n #define RTX_COSTS(X,CODE,OUTER_CODE)\t\t\t\t\\\n   case PLUS:\t\t\t\t\t\t\t\\\n@@ -1389,7 +1391,19 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n     break;\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\t\\\n   case ASHIFTRT:\t\t\t\t\t\t\\\n-  case LSHIFTRT:\t\t\t\t\t\t\\\n+  case LSHIFTRT:\t\t\t\t\t\t\t\\\n+    if (! TARGET_68020)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tif (GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    if (INTVAL (XEXP (X, 1)) < 16)\t\t\t\t\\\n+\t      return COSTS_N_INSNS (2) + INTVAL (XEXP (X, 1)) / 2;\t\\\n+\t    else\t\t\t\t\t\t\t\\\n+\t      /* We're using clrw + swap for these cases.  */\t\t\\\n+\t      return COSTS_N_INSNS (4) + (INTVAL (XEXP (X, 1)) - 16) / 2; \\\t\n+\t  }\t\t\t\t\t\t\t\t\\\n+\treturn COSTS_N_INSNS (10); /* worst case */\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n     /* A shift by a big integer takes an extra instruction.  */ \\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n \t&& (INTVAL (XEXP (X, 1)) == 16))\t\t\t\\\n@@ -1400,6 +1414,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n       return COSTS_N_INSNS (3);\t /* lsr #i,dn */\t\t\\\n     break;\t\t\t\t\t\t\t\\\n   case MULT:\t\t\t\t\t\t\t\\\n+    if ((GET_CODE (XEXP (X, 0)) == ZERO_EXTEND\t\t\t\\\n+\t || GET_CODE (XEXP (X, 0)) == SIGN_EXTEND)\t\t\\\n+\t&& GET_MODE (X) == SImode)\t\t\t\t\\\n+      return COSTS_N_INSNS (MULW_COST);\t\t\t\t\\\n     if (GET_MODE (X) == QImode || GET_MODE (X) == HImode)\t\\\n       return COSTS_N_INSNS (MULW_COST);\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n@@ -1409,7 +1427,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n   case MOD:\t\t\t\t\t\t\t\\\n   case UMOD:\t\t\t\t\t\t\t\\\n     if (GET_MODE (X) == QImode || GET_MODE (X) == HImode)\t\\\n-      return COSTS_N_INSNS (27); /* div.w */\t\t\t\\\n+      return COSTS_N_INSNS (DIVW_COST); /* div.w */\t\t\\\n     return COSTS_N_INSNS (43);\t /* div.l */\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */"}]}