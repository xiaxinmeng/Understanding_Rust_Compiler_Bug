{"sha": "ecd1908fc20a18631725087abe3c48383bdc992a", "node_id": "C_kwDOANBUbNoAKGVjZDE5MDhmYzIwYTE4NjMxNzI1MDg3YWJlM2M0ODM4M2JkYzk5MmE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-15T14:57:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-15T16:01:53Z"}, "message": "Add support for ast with generic traits\n\nThis allows AST dump of attributes on Traits this code needs to be applied\nfor all attribute dumps. Traits also have an implicit Self generic param\nthis ensure we ignore this during an AST dump.", "tree": {"sha": "abc34a99c7a9de38656d5be4b66bf86e72d5a043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abc34a99c7a9de38656d5be4b66bf86e72d5a043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd1908fc20a18631725087abe3c48383bdc992a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd1908fc20a18631725087abe3c48383bdc992a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd1908fc20a18631725087abe3c48383bdc992a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd1908fc20a18631725087abe3c48383bdc992a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f9b173b9061ceef0fd96413578b0e5ddcac061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f9b173b9061ceef0fd96413578b0e5ddcac061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f9b173b9061ceef0fd96413578b0e5ddcac061"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "ad9ad0b7de72f9ff7be1be4509c5b03962fa6330", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd1908fc20a18631725087abe3c48383bdc992a/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd1908fc20a18631725087abe3c48383bdc992a/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=ecd1908fc20a18631725087abe3c48383bdc992a", "patch": "@@ -69,6 +69,45 @@ Dump::format_function_param (FunctionParam &param)\n   param.get_type ()->accept_vis (*this);\n }\n \n+void\n+Dump::emit_attrib (const Attribute &attrib)\n+{\n+  stream << \"#\";\n+  stream << \"[\";\n+\n+  for (size_t i = 0; i < attrib.get_path ().get_segments ().size (); i++)\n+    {\n+      const auto &seg = attrib.get_path ().get_segments ().at (i);\n+      bool has_next = (i + 1) < attrib.get_path ().get_segments ().size ();\n+\n+      stream << seg.get_segment_name ();\n+      if (has_next)\n+\tstream << \"::\";\n+    }\n+\n+  if (attrib.has_attr_input ())\n+    {\n+      stream << \" = \";\n+\n+      bool is_literal = attrib.get_attr_input ().get_attr_input_type ()\n+\t\t\t== AST::AttrInput::AttrInputType::LITERAL;\n+      if (is_literal)\n+\t{\n+\t  auto &literal\n+\t    = static_cast<AST::AttrInputLiteral &> (attrib.get_attr_input ());\n+\t  const auto &value = literal.get_literal ().as_string ();\n+\n+\t  stream << \"\\\"\" << value << \"\\\"\";\n+\t}\n+      else\n+\t{\n+\t  stream << \"FIXME\";\n+\t}\n+    }\n+\n+  stream << \"]\";\n+}\n+\n void\n Dump::visit (Token &tok)\n {}\n@@ -440,7 +479,7 @@ Dump::visit (TypeParam &param)\n   stream << param.get_type_representation ();\n   if (param.has_type ())\n     {\n-      stream << \": \";\n+      stream << \" = \";\n       param.get_type ()->accept_vis (*this);\n     }\n }\n@@ -680,7 +719,33 @@ Dump::visit (TraitItemType &item)\n void\n Dump::visit (Trait &trait)\n {\n-  stream << \"trait \" << trait.get_identifier () << \" {\\n\";\n+  for (const auto &attr : trait.get_outer_attrs ())\n+    {\n+      emit_attrib (attr);\n+      stream << \"\\n\" << indentation;\n+    }\n+\n+  stream << \"trait \" << trait.get_identifier ();\n+\n+  // Traits actually have an implicit Self thrown at the start so we must expect\n+  // the number of generic params to be > 1\n+  if (trait.get_generic_params ().size () > 1)\n+    {\n+      stream << \"<\";\n+      for (size_t i = 1; i < trait.get_generic_params ().size (); i++)\n+\t{\n+\t  auto &param = trait.get_generic_params ().at (i);\n+\t  param->accept_vis (*this);\n+\n+\t  bool has_next = (i + 1) < trait.get_generic_params ().size ();\n+\t  if (has_next)\n+\t    stream << \", \";\n+\t}\n+      stream << \">\";\n+    }\n+\n+  stream << \" {\\n\";\n+\n   indentation.increment ();\n \n   for (auto &item : trait.get_trait_items ())"}, {"sha": "c3854e8287dbfaca0bdc699acea966fd44006fdc", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd1908fc20a18631725087abe3c48383bdc992a/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd1908fc20a18631725087abe3c48383bdc992a/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=ecd1908fc20a18631725087abe3c48383bdc992a", "patch": "@@ -64,6 +64,7 @@ class Dump : public ASTVisitor\n    * Format a function's definition parameter\n    */\n   void format_function_param (FunctionParam &param);\n+  void emit_attrib (const Attribute &attrib);\n \n   // rust-ast.h\n   void visit (Token &tok);"}]}