{"sha": "84bcefd5555af6d95e08cd980965098961289215", "node_id": "C_kwDOANBUbNoAKDg0YmNlZmQ1NTU1YWY2ZDk1ZTA4Y2Q5ODA5NjUwOTg5NjEyODkyMTU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-25T07:20:35Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-29T01:45:29Z"}, "message": "Enable vectorization for _Float16 floor/ceil/trunc/nearbyint/rint operations.\n\ngcc/ChangeLog:\n\n\tPR target/102464\n\t* config/i386/i386-builtin-types.def (V8HF_FTYPE_V8HF): New\n\tfunction type.\n\t(V16HF_FTYPE_V16HF): Ditto.\n\t(V32HF_FTYPE_V32HF): Ditto.\n\t(V8HF_FTYPE_V8HF_ROUND): Ditto.\n\t(V16HF_FTYPE_V16HF_ROUND): Ditto.\n\t(V32HF_FTYPE_V32HF_ROUND): Ditto.\n\t* config/i386/i386-builtin.def ( IX86_BUILTIN_FLOORPH,\n\tIX86_BUILTIN_CEILPH, IX86_BUILTIN_TRUNCPH,\n\tIX86_BUILTIN_FLOORPH256, IX86_BUILTIN_CEILPH256,\n\tIX86_BUILTIN_TRUNCPH256, IX86_BUILTIN_FLOORPH512,\n\tIX86_BUILTIN_CEILPH512, IX86_BUILTIN_TRUNCPH512): New builtin.\n\t* config/i386/i386-builtins.c\n\t(ix86_builtin_vectorized_function): Enable vectorization for\n\tHFmode FLOOR/CEIL/TRUNC operation.\n\t* config/i386/i386-expand.c (ix86_expand_args_builtin): Handle\n\tnew builtins.\n\t* config/i386/sse.md (rint<mode>2, nearbyint<mode>2): Extend\n\tto vector HFmodes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102464-vrndscaleph.c: New test.", "tree": {"sha": "df515785707d201789b83ff112559f268df0c449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df515785707d201789b83ff112559f268df0c449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84bcefd5555af6d95e08cd980965098961289215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bcefd5555af6d95e08cd980965098961289215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84bcefd5555af6d95e08cd980965098961289215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bcefd5555af6d95e08cd980965098961289215/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178"}], "stats": {"total": 190, "additions": 184, "deletions": 6}, "files": [{"sha": "e33f06ab30b97612ca65e20bb15c2e3012d3bddd", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -1380,3 +1380,10 @@ DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, UHI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, INT, V32HF, USI, INT)\n+\n+DEF_FUNCTION_TYPE (V8HF, V8HF)\n+DEF_FUNCTION_TYPE (V16HF, V16HF)\n+DEF_FUNCTION_TYPE (V32HF, V32HF)\n+DEF_FUNCTION_TYPE_ALIAS (V8HF_FTYPE_V8HF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V16HF_FTYPE_V16HF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V32HF_FTYPE_V32HF, ROUND)"}, {"sha": "d9eee3f373cc3a21362b67f64bf7d5caa37f60d0", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -958,6 +958,10 @@ BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_roundpd_vec_pack_sfix, \"__buil\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_roundv2df2, \"__builtin_ia32_roundpd_az\", IX86_BUILTIN_ROUNDPD_AZ, UNKNOWN, (int) V2DF_FTYPE_V2DF)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_roundv2df2_vec_pack_sfix, \"__builtin_ia32_roundpd_az_vec_pack_sfix\", IX86_BUILTIN_ROUNDPD_AZ_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF)\n \n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rndscalev8hf, \"__builtin_ia32_floorph\", IX86_BUILTIN_FLOORPH, (enum rtx_code) ROUND_FLOOR, (int) V8HF_FTYPE_V8HF_ROUND)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rndscalev8hf, \"__builtin_ia32_ceilph\", IX86_BUILTIN_CEILPH, (enum rtx_code) ROUND_CEIL, (int) V8HF_FTYPE_V8HF_ROUND)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rndscalev8hf, \"__builtin_ia32_truncph\", IX86_BUILTIN_TRUNCPH, (enum rtx_code) ROUND_TRUNC, (int) V8HF_FTYPE_V8HF_ROUND)\n+\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND)\n BDESC (OPTION_MASK_ISA_SSE4_1, 0, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND)\n@@ -1090,6 +1094,10 @@ BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_roundv4df2_vec_pack_sfix, \"__builtin_ia3\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_roundpd_vec_pack_sfix256, \"__builtin_ia32_floorpd_vec_pack_sfix256\", IX86_BUILTIN_FLOORPD_VEC_PACK_SFIX256, (enum rtx_code) ROUND_FLOOR, (int) V8SI_FTYPE_V4DF_V4DF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_roundpd_vec_pack_sfix256, \"__builtin_ia32_ceilpd_vec_pack_sfix256\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX256, (enum rtx_code) ROUND_CEIL, (int) V8SI_FTYPE_V4DF_V4DF_ROUND)\n \n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_rndscalev16hf, \"__builtin_ia32_floorph256\", IX86_BUILTIN_FLOORPH256, (enum rtx_code) ROUND_FLOOR, (int) V16HF_FTYPE_V16HF_ROUND)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_rndscalev16hf, \"__builtin_ia32_ceilph256\", IX86_BUILTIN_CEILPH256, (enum rtx_code) ROUND_CEIL, (int) V16HF_FTYPE_V16HF_ROUND)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_rndscalev16hf, \"__builtin_ia32_truncph256\", IX86_BUILTIN_TRUNCPH256, (enum rtx_code) ROUND_TRUNC, (int) V16HF_FTYPE_V16HF_ROUND)\n+\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_roundps256, \"__builtin_ia32_floorps256\", IX86_BUILTIN_FLOORPS256, (enum rtx_code) ROUND_FLOOR, (int) V8SF_FTYPE_V8SF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_roundps256, \"__builtin_ia32_ceilps256\", IX86_BUILTIN_CEILPS256, (enum rtx_code) ROUND_CEIL, (int) V8SF_FTYPE_V8SF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX, 0, CODE_FOR_avx_roundps256, \"__builtin_ia32_truncps256\", IX86_BUILTIN_TRUNCPS256, (enum rtx_code) ROUND_TRUNC, (int) V8SF_FTYPE_V8SF_ROUND)\n@@ -1528,6 +1536,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_copysignv8df3,  \"__builtin_ia32_copy\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_sqrtv8df2, \"__builtin_ia32_sqrtpd512\", IX86_BUILTIN_SQRTPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sqrtv16sf2, \"__builtin_ia32_sqrtps512\", IX86_BUILTIN_SQRTPS_NR512, UNKNOWN, (int) V16SF_FTYPE_V16SF)\n BDESC (OPTION_MASK_ISA_AVX512ER, 0, CODE_FOR_avx512er_exp2v16sf, \"__builtin_ia32_exp2ps\", IX86_BUILTIN_EXP2PS, UNKNOWN, (int) V16SF_FTYPE_V16SF)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_rndscalev32hf, \"__builtin_ia32_floorph512\", IX86_BUILTIN_FLOORPH512, (enum rtx_code) ROUND_FLOOR, (int) V32HF_FTYPE_V32HF_ROUND)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_rndscalev32hf, \"__builtin_ia32_ceilph512\", IX86_BUILTIN_CEILPH512, (enum rtx_code) ROUND_CEIL, (int) V32HF_FTYPE_V32HF_ROUND)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_rndscalev32hf, \"__builtin_ia32_truncph512\", IX86_BUILTIN_TRUNCPH512, (enum rtx_code) ROUND_TRUNC, (int) V32HF_FTYPE_V32HF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_floorps512\", IX86_BUILTIN_FLOORPS512, (enum rtx_code) ROUND_FLOOR, (int) V16SF_FTYPE_V16SF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_ceilps512\", IX86_BUILTIN_CEILPS512, (enum rtx_code) ROUND_CEIL, (int) V16SF_FTYPE_V16SF_ROUND)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_roundps512, \"__builtin_ia32_truncps512\", IX86_BUILTIN_TRUNCPS512, (enum rtx_code) ROUND_TRUNC, (int) V16SF_FTYPE_V16SF_ROUND)"}, {"sha": "0fb14b5571276034f846dc31fb73e7bb65e195ce", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -1652,6 +1652,20 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t  else if (out_n == 16 && in_n == 16)\n \t    return ix86_get_builtin (IX86_BUILTIN_FLOORPS512);\n \t}\n+      if (out_mode == HFmode && in_mode == HFmode)\n+\t{\n+\t  /* V8HF/V16HF is supported in ix86_vector_mode_supported_p\n+\t     under TARGET_AVX512FP16, TARGET_AVX512VL is needed here.  */\n+\t  if (out_n < 32 && !TARGET_AVX512VL)\n+\t    break;\n+\n+\t  if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPH);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPH256);\n+\t  else if (out_n == 32 && in_n == 32)\n+\t    return ix86_get_builtin (IX86_BUILTIN_FLOORPH512);\n+\t}\n       break;\n \n     CASE_CFN_CEIL:\n@@ -1677,6 +1691,20 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t  else if (out_n == 16 && in_n == 16)\n \t    return ix86_get_builtin (IX86_BUILTIN_CEILPS512);\n \t}\n+      if (out_mode == HFmode && in_mode == HFmode)\n+\t{\n+\t  /* V8HF/V16HF is supported in ix86_vector_mode_supported_p\n+\t     under TARGET_AVX512FP16, TARGET_AVX512VL is needed here.  */\n+\t  if (out_n < 32 && !TARGET_AVX512VL)\n+\t    break;\n+\n+\t  if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPH);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPH256);\n+\t  else if (out_n == 32 && in_n == 32)\n+\t    return ix86_get_builtin (IX86_BUILTIN_CEILPH512);\n+\t}\n       break;\n \n     CASE_CFN_TRUNC:\n@@ -1702,6 +1730,20 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n \t  else if (out_n == 16 && in_n == 16)\n \t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPS512);\n \t}\n+      if (out_mode == HFmode && in_mode == HFmode)\n+\t{\n+\t  /* V8HF/V16HF is supported in ix86_vector_mode_supported_p\n+\t     under TARGET_AVX512FP16, TARGET_AVX512VL is needed here.  */\n+\t  if (out_n < 32 && !TARGET_AVX512VL)\n+\t    break;\n+\n+\t  if (out_n == 8 && in_n == 8)\n+\t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPH);\n+\t  else if (out_n == 16 && in_n == 16)\n+\t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPH256);\n+\t  else if (out_n == 32 && in_n == 32)\n+\t    return ix86_get_builtin (IX86_BUILTIN_TRUNCPH512);\n+\t}\n       break;\n \n     CASE_CFN_FMA:"}, {"sha": "fa5cf77a87d522404420a7c693de5ef7c57e6a3b", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -9586,6 +9586,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4SF_FTYPE_V4SF_ROUND:\n     case V8SF_FTYPE_V8SF_ROUND:\n     case V16SF_FTYPE_V16SF_ROUND:\n+    case V8HF_FTYPE_V8HF_ROUND:\n+    case V16HF_FTYPE_V16HF_ROUND:\n+    case V32HF_FTYPE_V32HF_ROUND:\n     case V4SI_FTYPE_V4SF_ROUND:\n     case V8SI_FTYPE_V8SF_ROUND:\n     case V16SI_FTYPE_V16SF_ROUND:"}, {"sha": "0a7f5b178f97a853784ea0fb1c618c9c0c551046", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -21936,18 +21936,18 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"nearbyint<mode>2\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"vector_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(unspec:VFH\n+\t  [(match_operand:VFH 1 \"vector_operand\")\n \t   (match_dup 2)]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"operands[2] = GEN_INT (ROUND_MXCSR | ROUND_NO_EXC);\")\n \n (define_expand \"rint<mode>2\"\n-  [(set (match_operand:VF 0 \"register_operand\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"vector_operand\")\n+  [(set (match_operand:VFH 0 \"register_operand\")\n+\t(unspec:VFH\n+\t  [(match_operand:VFH 1 \"vector_operand\")\n \t   (match_dup 2)]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\""}, {"sha": "a76d9e7e376386b230ad98c68255f0f58a39fbf3", "filename": "gcc/testsuite/gcc.target/i386/pr102464-vrndscaleph.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84bcefd5555af6d95e08cd980965098961289215/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-vrndscaleph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84bcefd5555af6d95e08cd980965098961289215/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-vrndscaleph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-vrndscaleph.c?ref=84bcefd5555af6d95e08cd980965098961289215", "patch": "@@ -0,0 +1,115 @@\n+/* PR target/102464.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512fp16 -mavx512vl -mprefer-vector-width=512\" } */\n+#include<math.h>\n+void\n+foo (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 8; i++)\n+      a[i] = floor (b[i]);\n+}\n+\n+void\n+foo1 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 8; i++)\n+      a[i] = ceil (b[i]);\n+}\n+\n+void\n+foo2 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 8; i++)\n+      a[i] = trunc (b[i]);\n+}\n+\n+void\n+foo3 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 8; i++)\n+      a[i] = nearbyint (b[i]);\n+}\n+\n+void\n+foo4 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 8; i++)\n+      a[i] = rint (b[i]);\n+}\n+\n+void\n+foo5 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 16; i++)\n+      a[i] = floor (b[i]);\n+}\n+\n+void\n+foo6 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 16; i++)\n+      a[i] = ceil (b[i]);\n+}\n+\n+void\n+foo7 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 16; i++)\n+      a[i] = trunc (b[i]);\n+}\n+\n+void\n+foo8 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 16; i++)\n+      a[i] = nearbyint (b[i]);\n+}\n+\n+void\n+foo9 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 16; i++)\n+      a[i] = rint (b[i]);\n+}\n+\n+void\n+foo10 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 32; i++)\n+      a[i] = floor (b[i]);\n+}\n+\n+void\n+foo11 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 32; i++)\n+      a[i] = ceil (b[i]);\n+}\n+\n+void\n+foo12 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 32; i++)\n+      a[i] = trunc (b[i]);\n+}\n+\n+void\n+foo13 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 32; i++)\n+      a[i] = nearbyint (b[i]);\n+}\n+\n+void\n+foo14 (_Float16* __restrict a, _Float16* b)\n+{\n+    for (int i = 0; i != 32; i++)\n+      a[i] = rint (b[i]);\n+}\n+\n+/* { dg-final { scan-assembler-not \"vcvtsh2s\\[sd\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtph2p\\[sd\\]\" } } */\n+/* { dg-final { scan-assembler-not \"extendhfxf\" } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[^\\n\\r\\]*xmm\\[0-9\\]\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[^\\n\\r\\]*ymm\\[0-9\\]\" 5 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleph\\[^\\n\\r\\]*zmm\\[0-9\\]\" 5 } } */"}]}