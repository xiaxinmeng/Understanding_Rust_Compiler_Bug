{"sha": "be606483c9fc0c79ffb671238404203e01288b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2MDY0ODNjOWZjMGM3OWZmYjY3MTIzODQwNDIwM2UwMTI4OGIwMA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-01-24T11:27:10Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-01-24T11:27:10Z"}, "message": "[nvptx, PR81352] Add exit insn after noreturn call for neutered threads in warp\n\n2018-01-24  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/81352\n\t* config/nvptx/nvptx.c (nvptx_single): Add exit insn after noreturn call\n\tfor neutered threads in warp.\n\t* config/nvptx/nvptx.md (define_insn \"exit\"): New insn.\n\n\t* testsuite/libgomp.oacc-fortran/pr81352.f90: New test.\n\nFrom-SVN: r257014", "tree": {"sha": "3d9c63f4ff1840ebbb4488c1600f69f076b6afcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9c63f4ff1840ebbb4488c1600f69f076b6afcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be606483c9fc0c79ffb671238404203e01288b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be606483c9fc0c79ffb671238404203e01288b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be606483c9fc0c79ffb671238404203e01288b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be606483c9fc0c79ffb671238404203e01288b00/comments", "author": null, "committer": null, "parents": [{"sha": "6acfd18c395cca3d0c5acf9d62a3c1556ea58d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acfd18c395cca3d0c5acf9d62a3c1556ea58d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acfd18c395cca3d0c5acf9d62a3c1556ea58d90"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "e4eba86378efe2ac4e2b478a3d9d4efc68363172", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be606483c9fc0c79ffb671238404203e01288b00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be606483c9fc0c79ffb671238404203e01288b00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be606483c9fc0c79ffb671238404203e01288b00", "patch": "@@ -1,3 +1,10 @@\n+2018-01-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/81352\n+\t* config/nvptx/nvptx.c (nvptx_single): Add exit insn after noreturn call\n+\tfor neutered threads in warp.\n+\t* config/nvptx/nvptx.md (define_insn \"exit\"): New insn.\n+\n 2018-01-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83176"}, {"sha": "3516740bb194dcea192707621ae324b5f6468eb2", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be606483c9fc0c79ffb671238404203e01288b00/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be606483c9fc0c79ffb671238404203e01288b00/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=be606483c9fc0c79ffb671238404203e01288b00", "patch": "@@ -4062,7 +4062,12 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \tif (tail_branch)\n \t  before = emit_label_before (label, before);\n \telse\n-\t  emit_label_after (label, tail);\n+\t  {\n+\t    rtx_insn *label_insn = emit_label_after (label, tail);\n+\t    if (mode == GOMP_DIM_VECTOR && CALL_P (tail)\n+\t\t&& find_reg_note (tail, REG_NORETURN, NULL))\n+\t      emit_insn_after (gen_exit (), label_insn);\n+\t  }\n       }\n \n   /* Now deal with propagating the branch condition.  */"}, {"sha": "135479be1295157285ac98e8d130991f19f0d200", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be606483c9fc0c79ffb671238404203e01288b00/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be606483c9fc0c79ffb671238404203e01288b00/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=be606483c9fc0c79ffb671238404203e01288b00", "patch": "@@ -994,6 +994,11 @@\n   \"\"\n   \"\")\n \n+(define_insn \"exit\"\n+  [(const_int 1)]\n+  \"\"\n+  \"exit;\")\n+\n (define_insn \"return\"\n   [(return)]\n   \"\""}, {"sha": "11cda22e1c34696339a4933a81013933d2d882ae", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be606483c9fc0c79ffb671238404203e01288b00/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be606483c9fc0c79ffb671238404203e01288b00/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=be606483c9fc0c79ffb671238404203e01288b00", "patch": "@@ -1,3 +1,8 @@\n+2018-01-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/81352\n+\t* testsuite/libgomp.oacc-fortran/pr81352.f90: New test.\n+\n 2018-01-19  Tom de Vries  <tom@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n "}, {"sha": "f6969c8595d5ea131af2e43e7726138f108039a2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr81352.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be606483c9fc0c79ffb671238404203e01288b00/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr81352.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be606483c9fc0c79ffb671238404203e01288b00/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr81352.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr81352.f90?ref=be606483c9fc0c79ffb671238404203e01288b00", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+\n+program foo\n+  integer :: a(3,3), l, ll\n+  a = 0\n+\n+  !$acc parallel num_gangs (1) num_workers(1)\n+\n+  do l=1,3\n+     !$acc loop vector\n+     do ll=1,3\n+        a(l,ll) = 2\n+     enddo\n+  enddo\n+\n+  if (any(a(1:3,1:3).ne.2)) call abort\n+\n+  !$acc end parallel\n+\n+end program foo"}]}