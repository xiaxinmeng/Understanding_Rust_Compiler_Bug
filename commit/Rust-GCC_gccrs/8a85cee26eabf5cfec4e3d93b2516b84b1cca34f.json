{"sha": "8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4NWNlZTI2ZWFiZjVjZmVjNGUzZDkzYjI1MTZiODRiMWNjYTM0Zg==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-05-22T08:13:13Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-05-22T08:13:13Z"}, "message": "re PR tree-optimization/40921 (missed optimization: x + (-y * z * z) => x - y * z * z)\n\ngcc/testsuite/ChangeLog:\n\n2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/40921\n\t* gcc.dg/tree-ssa/pr40921.c: New test.\n\ngcc/ChangeLog:\n\n2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/40921\n        * tree-ssa-reassoc.c (try_special_add_to_ops): New.\n        (linearize_expr_tree): Call try_special_add_to_ops.\n        (reassociate_bb): Convert MULT_EXPR by (-1) to NEGATE_EXPR.\n\nFrom-SVN: r236564", "tree": {"sha": "a3b4034ab957a646e9f4478c69e4c8f6e434e2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3b4034ab957a646e9f4478c69e4c8f6e434e2b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/comments", "author": null, "committer": null, "parents": [{"sha": "a078110a89141ce42f2655933cd2c4f13fd022ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a078110a89141ce42f2655933cd2c4f13fd022ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a078110a89141ce42f2655933cd2c4f13fd022ba"}], "stats": {"total": 136, "additions": 110, "deletions": 26}, "files": [{"sha": "7bdecf0ca919a9624acdb22e5e16a568ed82053b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "patch": "@@ -1,3 +1,10 @@\n+2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/40921\n+        * tree-ssa-reassoc.c (try_special_add_to_ops): New.\n+        (linearize_expr_tree): Call try_special_add_to_ops.\n+        (reassociate_bb): Convert MULT_EXPR by (-1) to NEGATE_EXPR.\n+\n 2016-05-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* config/avr/avr.c (avr_expand_prologue): Add INCOMING_FRAME_SP_OFFSET"}, {"sha": "3ee60b1bf330b17caa555a6c34d9818e4fbb2ab6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "patch": "@@ -1,3 +1,8 @@\n+2016-05-22  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/40921\n+\t* gcc.dg/tree-ssa/pr40921.c: New test.\n+\n 2016-05-20  Pitchumani Sivanupandi  <pitchumani.s@atmel.com>\n \n \tPR target/71103"}, {"sha": "3a5a23a5e54d542b2b4f8dd934fe656066eca4d9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr40921.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr40921.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr40921.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr40921.c?ref=8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "patch": "@@ -0,0 +1,26 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2  -fdump-tree-optimized -ffast-math\" } */\n+\n+unsigned int foo (unsigned int x, unsigned int y, unsigned int z)\n+{\n+      return x + (-y * z * z);\n+}\n+\n+float bar (float x, float y, float z)\n+{\n+      return x + (-y * z * z);\n+}\n+\n+float bar2 (float x, float y, float z)\n+{\n+      return x + (-y * z * z * 5.0f);\n+}\n+\n+float bar3 (float x, float y, float z)\n+{\n+      return x + (-y * x * -z);\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"_* = -y_\" 0 \"optimized\" } } */"}, {"sha": "798931fee7a3909d04806228327cb9390022647b", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 72, "deletions": 26, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a85cee26eabf5cfec4e3d93b2516b84b1cca34f/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=8a85cee26eabf5cfec4e3d93b2516b84b1cca34f", "patch": "@@ -4329,6 +4329,45 @@ acceptable_pow_call (gimple *stmt, tree *base, HOST_WIDE_INT *exponent)\n   return true;\n }\n \n+/* Try to derive and add operand entry for OP to *OPS.  Return false if\n+   unsuccessful.  */\n+\n+static bool\n+try_special_add_to_ops (vec<operand_entry *> *ops,\n+\t\t\tenum tree_code code,\n+\t\t\ttree op, gimple* def_stmt)\n+{\n+  tree base = NULL_TREE;\n+  HOST_WIDE_INT exponent = 0;\n+\n+  if (TREE_CODE (op) != SSA_NAME)\n+    return false;\n+\n+  if (code == MULT_EXPR\n+      && acceptable_pow_call (def_stmt, &base, &exponent))\n+    {\n+      add_repeat_to_ops_vec (ops, base, exponent);\n+      gimple_set_visited (def_stmt, true);\n+      return true;\n+    }\n+  else if (code == MULT_EXPR\n+\t   && is_gimple_assign (def_stmt)\n+\t   && gimple_assign_rhs_code (def_stmt) == NEGATE_EXPR\n+\t   && !HONOR_SNANS (TREE_TYPE (op))\n+\t   && (!HONOR_SIGNED_ZEROS (TREE_TYPE (op))\n+\t       || !COMPLEX_FLOAT_TYPE_P (TREE_TYPE (op))))\n+    {\n+      tree rhs1 = gimple_assign_rhs1 (def_stmt);\n+      tree cst = build_minus_one_cst (TREE_TYPE (op));\n+      add_to_ops_vec (ops, rhs1);\n+      add_to_ops_vec (ops, cst);\n+      gimple_set_visited (def_stmt, true);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Recursively linearize a binary expression that is the RHS of STMT.\n    Place the operands of the expression tree in the vector named OPS.  */\n \n@@ -4343,8 +4382,6 @@ linearize_expr_tree (vec<operand_entry *> *ops, gimple *stmt,\n   bool binrhsisreassoc = false;\n   enum tree_code rhscode = gimple_assign_rhs_code (stmt);\n   struct loop *loop = loop_containing_stmt (stmt);\n-  tree base = NULL_TREE;\n-  HOST_WIDE_INT exponent = 0;\n \n   if (set_visited)\n     gimple_set_visited (stmt, true);\n@@ -4380,24 +4417,10 @@ linearize_expr_tree (vec<operand_entry *> *ops, gimple *stmt,\n \n       if (!binrhsisreassoc)\n \t{\n-\t  if (rhscode == MULT_EXPR\n-\t      && TREE_CODE (binrhs) == SSA_NAME\n-\t      && acceptable_pow_call (binrhsdef, &base, &exponent))\n-\t    {\n-\t      add_repeat_to_ops_vec (ops, base, exponent);\n-\t      gimple_set_visited (binrhsdef, true);\n-\t    }\n-\t  else\n+\t  if (!try_special_add_to_ops (ops, rhscode, binrhs, binrhsdef))\n \t    add_to_ops_vec (ops, binrhs);\n \n-\t  if (rhscode == MULT_EXPR\n-\t      && TREE_CODE (binlhs) == SSA_NAME\n-\t      && acceptable_pow_call (binlhsdef, &base, &exponent))\n-\t    {\n-\t      add_repeat_to_ops_vec (ops, base, exponent);\n-\t      gimple_set_visited (binlhsdef, true);\n-\t    }\n-\t  else\n+\t  if (!try_special_add_to_ops (ops, rhscode, binlhs, binlhsdef))\n \t    add_to_ops_vec (ops, binlhs);\n \n \t  return;\n@@ -4437,14 +4460,7 @@ linearize_expr_tree (vec<operand_entry *> *ops, gimple *stmt,\n   linearize_expr_tree (ops, SSA_NAME_DEF_STMT (binlhs),\n \t\t       is_associative, set_visited);\n \n-  if (rhscode == MULT_EXPR\n-      && TREE_CODE (binrhs) == SSA_NAME\n-      && acceptable_pow_call (SSA_NAME_DEF_STMT (binrhs), &base, &exponent))\n-    {\n-      add_repeat_to_ops_vec (ops, base, exponent);\n-      gimple_set_visited (SSA_NAME_DEF_STMT (binrhs), true);\n-    }\n-  else\n+  if (!try_special_add_to_ops (ops, rhscode, binrhs, binrhsdef))\n     add_to_ops_vec (ops, binrhs);\n }\n \n@@ -5208,6 +5224,24 @@ reassociate_bb (basic_block bb)\n \t\t    powi_result = attempt_builtin_powi (stmt, &ops);\n \t\t}\n \n+\t      operand_entry *last;\n+\t      bool negate_result = false;\n+\t      if (ops.length () > 1\n+\t\t  && rhs_code == MULT_EXPR)\n+\t\t{\n+\t\t  last = ops.last ();\n+\t\t  if (((TREE_CODE (last->op) == INTEGER_CST\n+\t\t\t&& integer_minus_onep (last->op))\n+\t\t       || real_minus_onep (last->op))\n+\t\t      && !HONOR_SNANS (TREE_TYPE (lhs))\n+\t\t      && (!HONOR_SIGNED_ZEROS (TREE_TYPE (lhs))\n+\t\t\t  || !COMPLEX_FLOAT_TYPE_P (TREE_TYPE (lhs))))\n+\t\t    {\n+\t\t      ops.pop ();\n+\t\t      negate_result = true;\n+\t\t    }\n+\t\t}\n+\n \t      /* If the operand vector is now empty, all operands were \n \t\t consumed by the __builtin_powi optimization.  */\n \t      if (ops.length () == 0)\n@@ -5270,6 +5304,18 @@ reassociate_bb (basic_block bb)\n \t\t      gsi_insert_after (&gsi, mul_stmt, GSI_NEW_STMT);\n \t\t    }\n \t\t}\n+\n+\t      if (negate_result)\n+\t\t{\n+\t\t  stmt = SSA_NAME_DEF_STMT (lhs);\n+\t\t  tree tmp = make_ssa_name (TREE_TYPE (lhs));\n+\t\t  gimple_set_lhs (stmt, tmp);\n+\t\t  gassign *neg_stmt = gimple_build_assign (lhs, NEGATE_EXPR,\n+\t\t\t\t\t\t\t   tmp);\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t\t  gsi_insert_after (&gsi, neg_stmt, GSI_NEW_STMT);\n+\t\t  update_stmt (stmt);\n+\t\t}\n \t    }\n \t}\n     }"}]}