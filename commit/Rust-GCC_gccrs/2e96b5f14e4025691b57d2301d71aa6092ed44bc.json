{"sha": "2e96b5f14e4025691b57d2301d71aa6092ed44bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5NmI1ZjE0ZTQwMjU2OTFiNTdkMjMwMWQ3MWFhNjA5MmVkNDRiYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-15T10:32:51Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-29T06:24:50Z"}, "message": "Backwards jump threader rewrite with ranger.\n\nThis is a rewrite of the backwards threader with a ranger based solver.\n\nThe code is divided into two parts: the path solver in\ngimple-range-path.*, and the path discovery bits in\ntree-ssa-threadbackward.c.\n\nThe legacy code is still available with --param=threader-mode=legacy,\nbut will be removed shortly after.\n\ngcc/ChangeLog:\n\n\t* Makefile.in (tree-ssa-loop-im.o-warn): New.\n\t* flag-types.h (enum threader_mode): New.\n\t* params.opt: Add entry for --param=threader-mode.\n\t* tree-ssa-threadbackward.c (THREADER_ITERATIVE_MODE): New.\n\t(class back_threader): New.\n\t(back_threader::back_threader): New.\n\t(back_threader::~back_threader): New.\n\t(back_threader::maybe_register_path): New.\n\t(back_threader::find_taken_edge): New.\n\t(back_threader::find_taken_edge_switch): New.\n\t(back_threader::find_taken_edge_cond): New.\n\t(back_threader::resolve_def): New.\n\t(back_threader::resolve_phi): New.\n\t(back_threader::find_paths_to_names): New.\n\t(back_threader::find_paths): New.\n\t(dump_path): New.\n\t(debug): New.\n\t(thread_jumps::find_jump_threads_backwards): Call ranger threader.\n\t(thread_jumps::find_jump_threads_backwards_with_ranger): New.\n\t(pass_thread_jumps::execute): Abstract out code...\n\t(try_thread_blocks): ...here.\n\t* tree-ssa-threadedge.c (jump_threader::thread_outgoing_edges):\n\tAbstract out threading candidate code to...\n\t(single_succ_to_potentially_threadable_block): ...here.\n\t* tree-ssa-threadedge.h (single_succ_to_potentially_threadable_block):\n\tNew.\n\t* tree-ssa-threadupdate.c (register_jump_thread): Return boolean.\n\t* tree-ssa-threadupdate.h (class jump_thread_path_registry):\n\tReturn bool from register_jump_thread.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.graphite/force-parallel-4.c: Adjust for\n\tthreader.\n\t* testsuite/libgomp.graphite/force-parallel-8.c: Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/debug/dwarf2/deallocator.C: Adjust for threader.\n\t* gcc.c-torture/compile/pr83510.c: Same.\n\t* dg.dg/analyzer/pr94851-2.c: Same.\n\t* gcc.dg/loop-unswitch-2.c: Same.\n\t* gcc.dg/old-style-asm-1.c: Same.\n\t* gcc.dg/pr68317.c: Same.\n\t* gcc.dg/pr97567-2.c: Same.\n\t* gcc.dg/predict-9.c: Same.\n\t* gcc.dg/shrink-wrap-loop.c: Same.\n\t* gcc.dg/sibcall-1.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-3.c: Same.\n\t* gcc.dg/tree-ssa/pr21001.c: Same.\n\t* gcc.dg/tree-ssa/pr21294.c: Same.\n\t* gcc.dg/tree-ssa/pr21417.c: Same.\n\t* gcc.dg/tree-ssa/pr21458-2.c: Same.\n\t* gcc.dg/tree-ssa/pr21563.c: Same.\n\t* gcc.dg/tree-ssa/pr49039.c: Same.\n\t* gcc.dg/tree-ssa/pr61839_1.c: Same.\n\t* gcc.dg/tree-ssa/pr61839_3.c: Same.\n\t* gcc.dg/tree-ssa/pr77445-2.c: Same.\n\t* gcc.dg/tree-ssa/split-path-4.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-12.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-14.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n\t* gcc.dg/tree-ssa/ssa-fre-48.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-11.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-12.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-14.c: Same.\n\t* gcc.dg/tree-ssa/vrp02.c: Same.\n\t* gcc.dg/tree-ssa/vrp03.c: Same.\n\t* gcc.dg/tree-ssa/vrp05.c: Same.\n\t* gcc.dg/tree-ssa/vrp06.c: Same.\n\t* gcc.dg/tree-ssa/vrp07.c: Same.\n\t* gcc.dg/tree-ssa/vrp09.c: Same.\n\t* gcc.dg/tree-ssa/vrp19.c: Same.\n\t* gcc.dg/tree-ssa/vrp20.c: Same.\n\t* gcc.dg/tree-ssa/vrp33.c: Same.\n\t* gcc.dg/uninit-pred-9_b.c: Same.\n\t* gcc.dg/uninit-pr61112.c: Same.\n\t* gcc.dg/vect/bb-slp-16.c: Same.\n\t* gcc.target/i386/avx2-vect-aggressive.c: Same.\n\t* gcc.dg/tree-ssa/ranger-threader-1.c: New test.\n\t* gcc.dg/tree-ssa/ranger-threader-2.c: New test.\n\t* gcc.dg/tree-ssa/ranger-threader-3.c: New test.\n\t* gcc.dg/tree-ssa/ranger-threader-4.c: New test.\n\t* gcc.dg/tree-ssa/ranger-threader-5.c: New test.", "tree": {"sha": "af5c127a07cf61c4c86e3e347f4545bd4332d227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af5c127a07cf61c4c86e3e347f4545bd4332d227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e96b5f14e4025691b57d2301d71aa6092ed44bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e96b5f14e4025691b57d2301d71aa6092ed44bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e96b5f14e4025691b57d2301d71aa6092ed44bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e96b5f14e4025691b57d2301d71aa6092ed44bc/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63d76234d18cac731c4f3610d513bd8b39b5520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63d76234d18cac731c4f3610d513bd8b39b5520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63d76234d18cac731c4f3610d513bd8b39b5520"}], "stats": {"total": 1019, "additions": 962, "deletions": 57}, "files": [{"sha": "e39673f6716aad0367633116617fb55f45ef0cac", "filename": "gcc/flag-types.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -454,6 +454,13 @@ enum evrp_mode\n   EVRP_MODE_RVRP_DEBUG = EVRP_MODE_RVRP_ONLY | EVRP_MODE_DEBUG\n };\n \n+/* Backwards threader mode.  */\n+enum threader_mode\n+{\n+  THREADER_MODE_LEGACY = 0,\n+  THREADER_MODE_RANGER = 1\n+};\n+\n /* Modes of OpenACC 'kernels' constructs handling.  */\n enum openacc_kernels\n {"}, {"sha": "f1f47b44215aabc75d0465dec8c03171e5ccf630", "filename": "gcc/params.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1010,6 +1010,23 @@ Maximum depth of DFS walk used by modref escape analysis.\n Common Joined UInteger Var(param_modref_max_escape_points) Init(256) Param Optimization\n Maximum number of escape points tracked by modref per SSA-name.\n \n+-param=threader-iterative=\n+Common Joined UInteger Var(param_threader_iterative) Init(0) Param Optimization\n+Run backwards threader in iterative mode.\n+\n+-param=threader-mode=\n+Common Joined Var(param_threader_mode) Enum(threader_mode) Init(THREADER_MODE_RANGER) Param Optimization\n+--param=threader-mode=[legacy|ranger] Specifies the mode the backwards threader should run in.\n+\n+Enum\n+Name(threader_mode) Type(enum threader_mode) UnknownError(unknown threader mode %qs)\n+\n+EnumValue\n+Enum(threader_mode) String(legacy) Value(THREADER_MODE_LEGACY)\n+\n+EnumValue\n+Enum(threader_mode) String(ranger) Value(THREADER_MODE_RANGER)\n+\n -param=tm-max-aggregate-size=\n Common Joined UInteger Var(param_tm_max_aggregate_size) Init(9) Param Optimization\n Size in bytes after which thread-local aggregates should be instrumented with the logging functions instead of save/restore pairs."}, {"sha": "c1d387922ba290d909d9b692f4a165d66f69392c", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/deallocator.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeallocator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeallocator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdeallocator.C?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -29,7 +29,7 @@ void foo(int i)\n \t  return;\n \t}\n     }\n-  if (i)\n+  if (i) // Threader makes everything after here disappear.\n     {\n       t test;\n       if (i == 10)\n@@ -42,5 +42,4 @@ void foo(int i)\n }\n // { dg-final { scan-assembler \"deallocator.C:29\" } }\n // { dg-final { scan-assembler \"deallocator.C:24\" } }\n-// { dg-final { scan-assembler \"deallocator.C:34\" } }\n // { dg-final { scan-assembler \"deallocator.C:21\" } }"}, {"sha": "fc932e57f3ae55ab31b8c3cdce9a2a06b21190b6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr83510.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83510.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -3,6 +3,39 @@\n    (PR tree-optimization/83510).  */\n \n /* { dg-options \"-Warray-bounds\" } */\n+/* { dg-xfail-if \"\" { \"*-*-*\" } { \"-Os\" } } */\n+\n+\n+/*  This test is XFAILed because thread1 threads a switch statement\n+    such that the various cases have been split into different\n+    independent blocks.  One of these blocks exposes an arr[i_27]\n+    which is later propagated by VRP to be arr[10].  This is an\n+    invalid access, but the array bounds code doesn't know it is an\n+    unreachable path.\n+\n+    However, it is not until dom2 that we \"know\" that the value of the\n+    switch index is such that the path to arr[10] is unreachable.  For\n+    that matter, it is not until dom3 that we remove the unreachable\n+    path.\n+\n+\n+    See:\n+    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83510\n+    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83312\n+\n+    It's not until here that ranger \"knows\" that the path is\n+    unreachable:\n+\n+    thread1\n+    vrp1\t\t<-- array bounds checking\n+    dce2\n+    stdarg\n+    cdce\n+    cselim\n+    copyprop\n+    ifcombine\n+    mergephi3\t\t<-- too late\n+*/\n \n extern int get_flag (void);\n "}, {"sha": "0acf48810c1f12eb0fcbf91fdf110cebe671c099", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94851-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -45,7 +45,7 @@ int pamark(void) {\n     if (curbp->b_amark == (AMARK *)NULL)\n       curbp->b_amark = p;\n     else\n-      last->m_next = p; /* { dg-warning \"dereference of NULL 'last'\" } */\n+      last->m_next = p; /* { dg-warning \"dereference of NULL 'last'\" \"deref\" { xfail *-*-* } } */\n   }\n \n   p->m_name = (char)c; /* { dg-bogus \"leak of 'p'\" \"bogus leak\" } */"}, {"sha": "0931f6e71c3629ea9fd520688977e45b6e694443", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fdisable-tree-thread2 -fdisable-tree-thread3\" } */\n \n void foo (float **a, float **b, float *c, int n, int m, int l)\n {"}, {"sha": "f9406ff0a261ca15ec6645f752dbc579c45b0394", "filename": "gcc/testsuite/gcc.dg/old-style-asm-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-asm-1.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,9 @@\n /* PR inline-asm/8832 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -dP\" } */\n+/* { dg-options \"-O2 -dP -fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2 -fdisable-tree-thread3 -fdisable-tree-thread4\" } */\n+\n+/* Note: Threader will duplicate BBs and replace one conditional branch by an\n+   unconditional one.  */\n \n /* Verify that GCC doesn't optimize\n    old style asm instructions.  */"}, {"sha": "bd053a7522bcbc7dc0ef2ae30d48f51566b5c1ae", "filename": "gcc/testsuite/gcc.dg/pr68317.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68317.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fdisable-tree-ethread\" } */\n+\n+/* Note: Threader will collapse loop.  */\n \n typedef int int32_t __attribute__((mode (__SI__)));\n "}, {"sha": "c3ead54eaa8eefa409adfa35e4268267f45720ef", "filename": "gcc/testsuite/gcc.dg/pr97567-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97567-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97567-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97567-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile} */\n-/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+/* { dg-options \"-O2 -fdump-tree-evrp -fdisable-tree-ethread\" } */\n \n char a[2];\n "}, {"sha": "cb68a218a931cd1b98c85bf25094f73f4668105f", "filename": "gcc/testsuite/gcc.dg/predict-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-9.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-profile_estimate -fno-finite-loops\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-profile_estimate -fno-finite-loops -fdisable-tree-ethread\" } */\n+\n+/* Note: Threader causes removal of for loop.  */\n \n extern int global;\n extern int global2;"}, {"sha": "ba872fa23f67b6d9c2def28ddb64ecaa86b78f92", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-loop.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,58 @@\n /* { dg-do compile { target { { { i?86-*-* x86_64-*-* } && lp64 } || { arm_thumb2 } } } } */\n /* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\"  } */\n+// { dg-additional-options \"-fdisable-tree-ethread\" }\n+\n+/*\n+Our new threader is threading things a bit too early, and causing the\n+testcase in gcc.dg/shrink-wrap-loop.c to fail.\n+\n+  The gist is this BB inside a loop:\n+\n+  <bb 6> :\n+  # p_2 = PHI <p2_6(D)(2), p_12(5)>\n+  if (p_2 != 0B)\n+    goto <bb 3>; [INV]\n+  else\n+    goto <bb 7>; [INV]\n+\n+Our threader can move this check outside of the loop (good).  This is\n+done before branch probabilities are calculated and causes the probs\n+to be calculated as:\n+\n+<bb 2> [local count: 216361238]:\n+  if (p2_6(D) != 0B)\n+    goto <bb 7>; [54.59%]\n+  else\n+    goto <bb 6>; [45.41%]\n+\n+Logically this seems correct to me.  A simple check outside of a loop\n+should slightly but not overwhelmingly favor a non-zero value.\n+\n+Interestingly however, the old threader couldn't get this, but the IL\n+ended up identical, albeit with different probabilities.  What happens\n+is that, because the old code could not thread this, the p2 != 0 check\n+would remain inside the loop and probs would be calculated thusly:\n+\n+  <bb 6> [local count: 1073741824]:\n+  # p_2 = PHI <p2_6(D)(2), p_12(5)>\n+  if (p_2 != 0B)\n+    goto <bb 3>; [94.50%]\n+  else\n+    goto <bb 7>; [5.50%]\n+\n+Then when the loop header copying pass (\"ch\") shuffled things around,\n+the IL would end up identical to my early threader code, but with the\n+probabilities would remain as 94.5/5.5.\n+\n+The above discrepancy causes the RTL ifcvt pass to generate different\n+code, and by the time we get to the shrink wrapping pass, things look\n+sufficiently different such that the legacy code can actually shrink\n+wrap, whereas our new code does not.\n+\n+IMO, if the loop-ch pass moves conditionals outside of a loop, the\n+probabilities should be adjusted, but that does mean the shrink wrap\n+won't happen for this contrived testcase.\n+ */\n \n int foo (int *p1, int *p2);\n "}, {"sha": "367ee4374e16e222ba0270bd20590e70d2028ae4", "filename": "gcc/testsuite/gcc.dg/sibcall-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-1.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -7,6 +7,9 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n \n+/* See note in recurser_void() as to why we disable threading.  */\n+/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n+\n /* The option -foptimize-sibling-calls is the default, but serves as\n    marker.  Self-recursion tail calls are optimized for all targets,\n    regardless of presence of sibcall patterns.  */\n@@ -26,6 +29,13 @@ int main ()\n void\n recurser_void (int n)\n {\n+  /* In some architectures like ppc64*, jump threading may thread\n+     paths such that there are two calls into track(), one for\n+     track(0) and one for track(7).  The track(7) call can be\n+     transformed into a jump instead of a call, which means that\n+     different calls into track() may end up with a different\n+     &stackpos.  This is the reason we disable jump threading for this\n+     test.  */\n   if (n == 0 || n == 7)\n     track (n);\n "}, {"sha": "ec55f2673184e09da425e4eed909c80223003374", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-3.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-3.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -15,21 +15,44 @@ extern void string_lt_0_fail ();\n extern void string_eq_0_fail ();\n extern void string_gt_0_fail ();\n \n-void test_string (char *d, const char *s)\n+void test_string_eq_min (char *d, const char *s)\n {\n   int n = __builtin_sprintf (d, \"%-s\", s);\n \n   /* Verify that the return value is NOT assumed NOT to be INT_MIN\n      or INT_MAX.  (This is a white box test based on knowing that\n      the optimization computes its own values of the two constants.)  */\n   if (n == INT_MIN) string_eq_min_fail ();\n+}\n+\n+void test_string_eq_max (char *d, const char *s)\n+{\n+  int n = __builtin_sprintf (d, \"%-s\", s);\n+\n   if (n == INT_MAX) string_eq_max_fail ();\n+}\n+\n+void test_string_lt_0 (char *d, const char *s)\n+{\n+  int n = __builtin_sprintf (d, \"%-s\", s);\n \n   /* The return value could be negative when strlen(s) is in excess\n      of 4095 (the maximum number of bytes a single directive is required\n      to handle).  */\n   if (n < 0) string_lt_0_fail ();\n+}\n+\n+void test_string_eq_0 (char *d, const char *s)\n+{\n+  int n = __builtin_sprintf (d, \"%-s\", s);\n+\n   if (n == 0) string_eq_0_fail ();\n+}\n+\n+void test_string_gt_0 (char *d, const char *s)\n+{\n+  int n = __builtin_sprintf (d, \"%-s\", s);\n+\n   if (n > 0) string_gt_0_fail ();\n }\n "}, {"sha": "4ea5f21addf35b31dfeada7ef1f75c20cab49268", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21001.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -6,6 +6,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n+/* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n int\n foo (int a)"}, {"sha": "b9edabc62347178830ab7b45b7563d93e72569a9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21294.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -5,6 +5,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n+/* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n struct f {\n   int i;"}, {"sha": "fc14af4e662a0d6aad77f9c45d7eb0474c0862cc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21417.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread4-details\" } */\n+/* { dg-options \"-O2 -fdisable-tree-thread3 -fdump-tree-thread4-details\" } */\n \n struct tree_common \n { "}, {"sha": "f8d7353fc0e0e108c41795077a1ed7ed8db9d8f1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21458-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21458-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-evrp-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-evrp-details -fdisable-tree-ethread\" } */\n \n extern void g (void);\n extern void bar (int);"}, {"sha": "72dce83ce37abd2331fa1a93a22bea1142532304", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21563.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21563.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -2,7 +2,7 @@\n    Make sure VRP folds the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdisable-tree-evrp -fdump-tree-vrp1-details -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n int\n foo (int a)"}, {"sha": "a2044d012cc69d5e60591f7a55b7d88e8caee996", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr49039.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr49039.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/49039 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n extern void bar (void);\n "}, {"sha": "ddc53fbfbcc0e7c892312715ac928fa816fda2ca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdisable-tree-evrp -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdisable-tree-evrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n /* { dg-require-effective-target int32plus } */\n \n __attribute__ ((noinline))"}, {"sha": "cc322d6e703ac6c2505175e00460d1f5c6af6782", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n __attribute__ ((noinline))\n int foo (int a, unsigned b)"}, {"sha": "f9fc212f49e86cdaa6be8499d034640d9e5e570c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -124,7 +124,7 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 1\\[1-9\\]\" \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Invalid sum\" 3 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum\" 4 \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread3\" { target { ! aarch64*-*-* } } } } */"}, {"sha": "c3ccb5d5b7e48de794c571f1e612298bb674debe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-1.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details --param logical-op-non-short-circuit=1\" } */\n+\n+// Copied from ssa-dom-thread-11.c\n+\n+static int *bb_ticks;\n+extern void frob (void);\n+void\n+mark_target_live_regs (int b, int block, int bb_tick)\n+{\n+  if (b == block && b != -1 && bb_tick == bb_ticks[b])\n+      return;\n+  if (b != -1)\n+    frob ();\n+}\n+\n+/* When the first two conditionals in the first IF are true, but\n+   the third conditional is false, then there's a jump threading\n+   opportunity to bypass the second IF statement.  */\n+/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"thread1\"} } */"}, {"sha": "d2689b6c788e94907d06a6f63cae6d2ed9eb0d88", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-2.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-thread2-details -w\" } */\n+\n+// Copied from ssa-dom-thread-12.c.\n+\n+typedef long unsigned int size_t;\n+union tree_node;\n+typedef union tree_node *tree;\n+typedef union gimple_statement_d *gimple;\n+typedef const union gimple_statement_d *const_gimple;\n+union gimple_statement_d\n+{\n+  unsigned num_ops;\n+  tree exp;\n+};\n+\n+unsigned int x;\n+static inline tree\n+gimple_op (const_gimple gs, unsigned i)\n+{\n+  if (!(i < gs->num_ops))\n+    abort ();\n+  return gs->exp;\n+}\n+\n+unsigned char\n+scan_function (gimple stmt)\n+{\n+  unsigned i;\n+  for (i = 0; i < stmt->num_ops - 3 ; i++)\n+    gimple_call_arg (stmt, i);\n+  gimple_op (stmt, 1);\n+}\n+\n+/* The test which bypasses the loop is simplified prior to DOM to check\n+   that stmt->num_ops - 3 != 0.  When that test is false, we can derive\n+   a value for stmt->num_ops.  That in turn allows us to thread the jump\n+   for the conditional at the start of the call to gimple_op.  */\n+/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"thread2\"} } */"}, {"sha": "79ec067e68ae808b0efed05cdce90602f8057ebe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-3.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ethread-details -w --param logical-op-non-short-circuit=1\" } */\n+\n+// Copied from ssa-dom-thread-14.c\n+\n+enum optab_methods\n+{\n+  OPTAB_DIRECT,\n+  OPTAB_LIB,\n+  OPTAB_WIDEN,\n+  OPTAB_LIB_WIDEN,\n+  OPTAB_MUST_WIDEN\n+};\n+struct optab_d { };\n+typedef struct optab_d *optab;\n+void\n+expand_shift_1 (int code, int unsignedp, int rotate,\n+\t\toptab lshift_optab, optab rshift_arith_optab)\n+{\n+  int left = (code == 42 || code == 0xde);\n+  int attempt;\n+  enum optab_methods methods;\n+  if (attempt == 0)\n+    methods = OPTAB_DIRECT;\n+  else if (attempt == 1)\n+    methods = OPTAB_WIDEN;\n+  if ((!unsignedp || (!left && methods == OPTAB_WIDEN)))\n+    {\n+      enum optab_methods methods1 = methods;\n+      if (unsignedp)\n+\tmethods1 = OPTAB_MUST_WIDEN;\n+      expand_binop (left ? lshift_optab : rshift_arith_optab,\n+\t\t\t   unsignedp, methods1);\n+    }\n+}\n+\n+/* When UNSIGNEDP is true, LEFT is false and METHOD == OPTAB_WIDEN\n+   we will enter the TRUE arm of the conditional and we can thread\n+   the test to compute the first first argument of the expand_binop\n+   call if we look backwards through the boolean logicals.  */\n+/* { dg-final { scan-tree-dump-times \"Registering.*jump thread\" 1 \"ethread\"} } */"}, {"sha": "e8d1cfc03ac71df0b30c34c3e3067ac5569776c5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-4.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-4.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -fdump-tree-vrp-details -fdump-tree-thread1-details --param logical-op-non-short-circuit=1\" }  */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM jump\" 8 \"thread1\" } }  */\n+\n+/* Copied from ssa-thread-14.  */\n+\n+void foo (void);\n+void bar (void);\n+void blah (void);\n+\n+/* One jump threaded here.  */\n+\n+void\n+baz_1 (int a, int b, int c)\n+{\n+  if (a && b)\n+    foo ();\n+  if (!b && c)\n+    bar ();\n+}\n+\n+/* One jump threaded here.  */\n+\n+void\n+baz_2 (int a, int b, int c)\n+{\n+  if (a && b)\n+    foo ();\n+  if (b || c)\n+    bar ();\n+}\n+\n+/* One jump threaded here.  */\n+\n+void\n+baz_3 (int a, int b, int c)\n+{\n+  if (a && b > 10)\n+    foo ();\n+  if (b < 5 && c)\n+    bar ();\n+}\n+\n+/* Two jumps threaded here.  */\n+\n+void\n+baz_4 (int a, int b, int c)\n+{\n+  if (a && b)\n+    {\n+      foo ();\n+      if (c)\n+        bar ();\n+    }\n+  if (b && c)\n+    blah ();\n+}\n+\n+/* Two jumps threaded here.  */\n+\n+void\n+baz_5 (int a, int b, int c)\n+{\n+  if (a && b)\n+    {\n+      foo ();\n+      if (c)\n+        bar ();\n+    }\n+  if (!b || !c)\n+    blah ();\n+}\n+\n+/* One jump threaded here.  */\n+\n+void\n+baz_6 (int a, int b, int c)\n+{\n+  if (a == 39 && b == 41)\n+    foo ();\n+  if (c == 12 || b == 41)\n+    bar ();\n+}"}, {"sha": "b7ca99a01528f7f151ef02e3587d0d8b93965440", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ranger-threader-5.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Franger-threader-5.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do compile }\n+// { dg-options \"-fgimple -O2 -fdump-tree-thread1-details\" }\n+\n+/* This tests that we can thread BB4->BB999 coming in through the\n+   following path:\n+\n+      latch   many insns\n+        |         |\n+        V         V\n+   6 -> 7 -> 3 -> 4 -> 999\n+\n+   The ranger based threader cannot thread this because BB4 has too\n+   many instructions so it gives up looking back.  However, if we were\n+   able to looking further, we would notice that a profitable path\n+   passing through the loop latch (BB7) exists.\n+\n+   That is, 3->4->N in isolation is not profitable, but 6->7->3->4->N is.\n+\n+   It is not clear whether handling this case in the backwards\n+   threader is profitable, as it would increase the search space\n+   considerably.  The test is being added to note a regression from\n+   the old backward threader code.\n+\n+   This test has been distilled from libphobos/src/std/net/isemail.d.\n+\n+   The ranger threader stops at the 3->4 subpath with: \"did not thread\n+   around loop and would copy too many statements\".  */\n+\n+\n+extern void bar();\n+extern int random();\n+\n+int __GIMPLE (ssa,startwith(\"thread1\"))\n+foo (int key)\n+{\n+  int context;\n+  int _1454;\n+\n+ __BB(2):\n+  goto __BB3;\n+\n+  // Loop header.\n+ __BB(3):\n+  context_448 = __PHI (__BB2: 0, __BB7: context_450);\n+  if (key_5(D) > 0)\n+    goto __BB999;\n+  else\n+    goto __BB4;\n+\n+ __BB(4):\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();  bar();\n+  switch (context_448) {default: L5; case 0: L999; }\n+\n+ __BB(5):\n+ L5:\n+  goto __BB6;\n+\n+ __BB(6):\n+  context_450 = __PHI (__BB5: 0);\n+  _1454 = random ();\n+  if (_1454 > 0)\n+    goto __BB999;\n+  else\n+    goto __BB7;\n+\n+  // Loop latch.\n+ __BB(7):\n+  goto __BB3;\n+\n+ __BB(999):\n+ L999:\n+  return 5;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"Registering.*jump thread.*incoming edge;  \\\\(6, 7\\\\)  \\\\(7, 3\\\\)  \\\\(3, 4\\\\)  \\\\(4, 999\\\\) nocopy\" 1 \"thread1\" { xfail *-*-* } } }"}, {"sha": "8ef7646282ce548369204e198a6017c610b42153", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-4.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fsplit-paths -fdump-tree-split-paths-details -w\" } */\n+/* { dg-options \"-O2 -fsplit-paths -fdump-tree-split-paths-details -w -fdisable-tree-thread1 -fdisable-tree-thread2\" } */\n+\n+/* Note: Threader causes the infinite loop in val & 1 sooner.  */\n \n powi_cost (long n)\n {"}, {"sha": "856ab389439b90cc7e0d8854a0d187a37542abe5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1 -fdisable-tree-thread1 -fdisable-tree-thread2\" } */\n \n static int *bb_ticks;\n extern void frob (void);"}, {"sha": "bad5e0a782d31b14979e9ff1cced1714888a99e8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-12.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w -fdisable-tree-thread2\" } */\n typedef long unsigned int size_t;\n union tree_node;\n typedef union tree_node *tree;"}, {"sha": "3bc4b3795cbee214c6acb0b3d2abd8eebd3c7d5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-14.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1\" } */\n+/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-ethread -fdisable-tree-thread2\" } */\n \n enum optab_methods\n {"}, {"sha": "03872e7a02fa71b70992c26760d14e609e93cfc8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-18.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-thread1-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n \n #include \"ssa-dom-thread-4.c\"\n \n@@ -21,4 +21,5 @@\n \t condition.\n \n    All the cases are picked up by VRP1 as jump threads.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM jump\" 6 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp1\" } } */"}, {"sha": "c7bf867b084408c2e0c6dec8003553624473b513", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -34,8 +34,8 @@\n      SWITCH_BB -> BBx -> BBy -> BBz -> PHI\n \n    We now know the value of the switch index at PHI.  */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 6 \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 1 \"thread2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM jump\" 6 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM jump\" 1 \"thread2\" } } */\n \n int sum0, sum1, sum2, sum3;\n int foo (char *s, char **ret)"}, {"sha": "1c2d12aa9ea99226160364a0555ff0f6885af173", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-dom2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats -fno-guess-branch-probability\" } */\n+/* { dg-additional-options \"--param=threader-mode=legacy\" } */\n \n /* Here we have the same issue as was commented in ssa-dom-thread-6.c.\n    The PHI coming into the threader has a lot more constants, so the"}, {"sha": "5e74c78e7b03943a362913185c2d0e9fa98227b2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-48.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-48.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fdump-tree-fre1-details -fdisable-tree-ethread\" } */\n \n int foo (int i)\n {"}, {"sha": "672a54e07dbfb263a145057402ecfb1409cf0d38", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-vrp2-details --param logical-op-non-short-circuit=1\" } */\n+/* { dg-additional-options \"-fdisable-tree-ethread -fdisable-tree-thread1 -fdisable-tree-thread2\" } */\n /* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"vrp2\" } } */\n \n void abort (void);"}, {"sha": "8f554641b284e97089031f9f6fcd53a2811c94f2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -fdump-tree-thread2-details -fdump-tree-thread3-details -fdump-tree-thread4-details -fno-finite-loops --param early-inlining-insns=14 -fno-inline-functions\" } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump \"FSM\" \"thread3\" } } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"thread4\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"thread4\" } } */\n \n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;"}, {"sha": "f9152b9358f88b94f19e21560c96ed351ae817ea", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-additional-options \"-O2 -fdump-tree-vrp-details --param logical-op-non-short-circuit=1\" }  */\n+/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n /* { dg-final { scan-tree-dump-times \"Threaded jump\" 8 \"vrp1\" } }  */\n \n void foo (void);"}, {"sha": "2285c55c7d2573edcfe0008868ca6c08e4e7c6a8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp02.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n struct A\n {"}, {"sha": "1d7ea4e8ffb251255e795e2f474e02e432c1a9ec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp03.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp03.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n struct A\n {"}, {"sha": "c17cd1b5738de5b709a3f75e81992adb587ad4e1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp05.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp05.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n \n inline int ten()"}, {"sha": "acb03c29aa42462d88012970d63298bde9c15812", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp06.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n int baz (void);\n "}, {"sha": "31a541522f56dafa950c8fff0bff6ef82910b8ec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1-details -fdelete-null-pointer-checks -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n int\n foo (int i, int *p)"}, {"sha": "fad0051cb095579096bfeac56bd22e71066c1a3e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp09.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1 -std=gnu89\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdisable-tree-evrp -fdump-tree-vrp1 -std=gnu89 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n foo (int *p)\n {"}, {"sha": "98a8da6d05e9f1ac4313f02b9286d4f500b17e53", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp19.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -O1 -ftree-vrp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-fwrapv -O1 -ftree-vrp -fdisable-tree-evrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n #include <limits.h>\n extern void abort ();"}, {"sha": "f9df67ffb055004b2f64149cf6712f9050021979", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -O1 -fno-tree-fre -fdisable-tree-evrp -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-fwrapv -O1 -fno-tree-fre -fdisable-tree-evrp -ftree-vrp -fdump-tree-vrp1 -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n extern void abort ();\n extern void exit (int);"}, {"sha": "88833eb701ea7cdcc3c38c1e5610af5800b14587", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp33.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre -fdisable-tree-evrp\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-tree-fre -fdisable-tree-evrp -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n /* This is from PR14052.  */\n "}, {"sha": "d8f9c80291a9642d3c6f471ac3df0ea032455b7f", "filename": "gcc/testsuite/gcc.dg/uninit-pr61112.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr61112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr61112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr61112.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -29,7 +29,7 @@ void foo_c5_1_1 (int x, int y, int z, int a)\n     w = __LINE__;\n \n   if (x || y || a)\n-    p = w;          // { dg-bogus \"-Wmaybe-uninitialized\" \"pr61112\" { xfail *-*-* } }\n+    p = w;\n }\n \n void foo_c5_1_2 (int x, int y, int z, int a)\n@@ -43,7 +43,7 @@ void foo_c5_1_2 (int x, int y, int z, int a)\n     w = __LINE__;\n \n   if (x || a || y)\n-    p = w;          // { dg-bogus \"-Wmaybe-uninitialized\" \"pr61112\" { xfail *-*-* } }\n+    p = w;\n }\n \n void foo_c5_1_3 (int x, int y, int z, int a)\n@@ -57,7 +57,7 @@ void foo_c5_1_3 (int x, int y, int z, int a)\n     w = __LINE__;\n \n   if (a || x || y)\n-    p = w;          // { dg-bogus \"-Wmaybe-uninitialized\" \"pr61112\" { xfail *-*-* } }\n+    p = w;\n }\n \n void foo_c5_2 (int x, int y, int z, int a)"}, {"sha": "d46d6659a616de618352e31874c0e998f05c95f9", "filename": "gcc/testsuite/gcc.dg/uninit-pred-9_b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pred-9_b.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-Wuninitialized -O2\" } */\n+/* { dg-xfail-if \"threading shuffles things around\" { ppc64*-*-* } } */\n \n int g;\n void bar();"}, {"sha": "664e93e9b606fefa9b646106a42bce972607c854", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-16.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,5 +1,8 @@\n /* { dg-require-effective-target vect_int } */\n \n+/* See note below as to why we disable threading.  */\n+/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n+\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n@@ -27,6 +30,10 @@ main1 (int dummy)\n       *pout++ = *pin++ + a;\n       *pout++ = *pin++ + a;\n       *pout++ = *pin++ + a;\n+      /* In some architectures like ppc64, jump threading may thread\n+\t the iteration where i==0 such that we no longer optimize the\n+\t BB.  Another alternative to disable jump threading would be\n+\t to wrap the read from `i' into a function returning i.  */\n       if (arr[i] = i)\n         a = i;\n       else"}, {"sha": "5719279185729b645db592a52825796896b2f050", "filename": "gcc/testsuite/gcc.target/i386/avx2-vect-aggressive.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-aggressive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-aggressive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-aggressive.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target avx2 } */\n-/* { dg-options \"-mavx2 -O3 -fopenmp-simd -fdump-tree-vect-details\" } */\n+/* { dg-options \"-mavx2 -O3 -fopenmp-simd -fdump-tree-vect-details -fdisable-tree-thread1\" } */\n \n #include \"avx2-check.h\"\n #define N 64"}, {"sha": "2c0e9751101ca745dcbc6dd70710c3fdbfa57dba", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 468, "deletions": 8, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -36,6 +36,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-phinodes.h\"\n #include \"tree-inline.h\"\n #include \"tree-vectorizer.h\"\n+#include \"value-range.h\"\n+#include \"gimple-range.h\"\n+#include \"tree-ssa-threadedge.h\"\n+#include \"gimple-range-path.h\"\n+#include \"ssa.h\"\n+#include \"tree-cfgcleanup.h\"\n \n // Path registry for the backwards threader.  After all paths have been\n // registered with register_path(), thread_through_all_blocks() is called\n@@ -71,13 +77,415 @@ class back_threader_profitability\n   const bool m_speed_p;\n };\n \n+// Ranger based backwards threader.\n+\n+class back_threader\n+{\n+  // Temporary until we remove old code.\n+  friend bool path_is_unreachable_p (const vec<jump_thread_edge *> &);\n+\n+public:\n+  back_threader (back_threader_profitability &, back_threader_registry &);\n+  ~back_threader ();\n+  void find_paths (basic_block bb, tree name);\n+\n+private:\n+  void maybe_register_path (edge taken_edge);\n+  bool find_paths_to_names (basic_block bb, bitmap imports);\n+  bool resolve_def (tree name, bitmap interesting, vec<tree> worklist);\n+  bool resolve_phi (gphi *phi, bitmap imports);\n+  edge find_taken_edge (const vec<basic_block> &path);\n+  edge find_taken_edge_cond (const vec<basic_block> &path, gcond *);\n+  edge find_taken_edge_switch (const vec<basic_block> &path, gswitch *);\n+\n+  back_threader_registry &m_registry;\n+  back_threader_profitability &m_profit;\n+  gimple_ranger m_ranger;\n+  path_range_query m_solver;\n+\n+  // Current path being analyzed.\n+  auto_vec<basic_block> m_path;\n+  // Hash to mark visited BBs while analyzing a path.\n+  hash_set<basic_block> m_visited_bbs;\n+  // The set of SSA names, any of which could potentially change the\n+  // value of the final conditional in a path.\n+  bitmap m_imports;\n+  // The last statement in the path.\n+  gimple *m_last_stmt;\n+  // This is a bit of a wart.  It's used to pass the LHS SSA name to\n+  // the profitability engine.\n+  tree m_name;\n+  // Marker to differentiate unreachable edges.\n+  static const edge UNREACHABLE_EDGE;\n+};\n+\n+// Used to differentiate unreachable edges, so we may stop the search\n+// in a the given direction.\n+const edge back_threader::UNREACHABLE_EDGE = (edge) -1;\n+\n+back_threader::back_threader (back_threader_profitability &profit,\n+\t\t\t      back_threader_registry &registry)\n+  : m_registry (registry),\n+    m_profit (profit),\n+    m_solver (m_ranger)\n+{\n+  m_last_stmt = NULL;\n+  m_imports = BITMAP_ALLOC (NULL);\n+}\n+\n+back_threader::~back_threader ()\n+{\n+  m_path.release ();\n+  BITMAP_FREE (m_imports);\n+}\n+\n+// Register the current path for jump threading if it's profitable to\n+// do so.  TAKEN_EDGE is the known edge out of the path.\n+\n+void\n+back_threader::maybe_register_path (edge taken_edge)\n+{\n+  bool irreducible = false;\n+  bool profitable\n+    = m_profit.profitable_path_p (m_path, m_name, taken_edge, &irreducible);\n+\n+  if (profitable)\n+    {\n+      m_registry.register_path (m_path, taken_edge);\n+\n+      if (irreducible)\n+\tvect_free_loop_info_assumptions (m_path[0]->loop_father);\n+    }\n+}\n+\n+// Return the known taken edge out of a path.  If the path can be\n+// determined to be unreachable, return UNREACHABLE_EDGE.  If no\n+// outgoing edge can be calculated, return NULL.\n+\n+edge\n+back_threader::find_taken_edge (const vec<basic_block> &path)\n+{\n+  gcc_checking_assert (path.length () > 1);\n+  switch (gimple_code (m_last_stmt))\n+    {\n+    case GIMPLE_COND:\n+      return find_taken_edge_cond (path, as_a<gcond *> (m_last_stmt));\n+\n+    case GIMPLE_SWITCH:\n+      return find_taken_edge_switch (path, as_a<gswitch *> (m_last_stmt));\n+\n+    default:\n+      return NULL;\n+    }\n+}\n+\n+// Same as find_taken_edge, but for paths ending in a switch.\n+\n+edge\n+back_threader::find_taken_edge_switch (const vec<basic_block> &path,\n+\t\t\t\t       gswitch *sw)\n+{\n+  tree name = gimple_switch_index (sw);\n+  int_range_max r;\n+\n+  m_solver.precompute_ranges (path, m_imports);\n+  m_solver.range_of_expr (r, name, sw);\n+\n+  if (r.undefined_p ())\n+    return UNREACHABLE_EDGE;\n+\n+  if (r.varying_p ())\n+    return NULL;\n+\n+  tree val;\n+  if (r.singleton_p (&val))\n+    return ::find_taken_edge (gimple_bb (sw), val);\n+\n+  return NULL;\n+}\n+\n+// Same as find_taken_edge, but for paths ending in a GIMPLE_COND.\n+\n+edge\n+back_threader::find_taken_edge_cond (const vec<basic_block> &path,\n+\t\t\t\t     gcond *cond)\n+{\n+  m_solver.precompute_ranges (path, m_imports);\n+\n+  // Check if either operand is unreachable since this knowledge could\n+  // help the caller cut down the search space.\n+  int_range_max r;\n+  m_solver.range_of_expr (r, gimple_cond_lhs (cond));\n+  if (r.undefined_p ())\n+    return UNREACHABLE_EDGE;\n+  m_solver.range_of_expr (r, gimple_cond_rhs (cond));\n+  if (r.undefined_p ())\n+    return UNREACHABLE_EDGE;\n+\n+  m_solver.range_of_stmt (r, cond);\n+\n+  int_range<2> true_range (boolean_true_node, boolean_true_node);\n+  int_range<2> false_range (boolean_false_node, boolean_false_node);\n+\n+  if (r == true_range || r == false_range)\n+    {\n+      edge e_true, e_false;\n+      basic_block bb = gimple_bb (cond);\n+      extract_true_false_edges_from_block (bb, &e_true, &e_false);\n+      return r == true_range ? e_true : e_false;\n+    }\n+  return NULL;\n+}\n+\n+// Populate a vector of trees from a bitmap.\n+\n+static inline void\n+populate_worklist (vec<tree> worklist, bitmap bits)\n+{\n+  bitmap_iterator bi;\n+  unsigned i;\n+\n+  EXECUTE_IF_SET_IN_BITMAP (bits, 0, i, bi)\n+    {\n+      tree name = ssa_name (i);\n+      worklist.quick_push (name);\n+    }\n+}\n+\n+// If taking any of the incoming edges to a PHI causes the final\n+// conditional of the current path to be constant, register the\n+// path(s), and return TRUE.\n+\n+bool\n+back_threader::resolve_phi (gphi *phi, bitmap interesting)\n+{\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_phi_result (phi)))\n+    return true;\n+\n+  bool done = false;\n+  for (size_t i = 0; i < gimple_phi_num_args (phi); ++i)\n+    {\n+      edge e = gimple_phi_arg_edge (phi, i);\n+\n+      // This is like path_crosses_loops in profitable_path_p but more\n+      // restrictive, since profitable_path_p allows threading the\n+      // first block because it would be redirected anyhow.\n+      //\n+      // If we loosened the restriction and used profitable_path_p()\n+      // here instead, we would peel off the first iterations of loops\n+      // in places like tree-ssa/pr14341.c.\n+      bool profitable_p = m_path[0]->loop_father == e->src->loop_father;\n+      if (!profitable_p)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file,\n+\t\t     \"  FAIL: path through PHI in bb%d (incoming bb:%d) crosses loop\\n\",\n+\t\t     e->dest->index, e->src->index);\n+\t  continue;\n+\t}\n+\n+      tree arg = gimple_phi_arg_def (phi, i);\n+      if (TREE_CODE (arg) == SSA_NAME)\n+\t{\n+\t  unsigned v = SSA_NAME_VERSION (arg);\n+\n+\t  // Avoid loops as in: x_5 = PHI <x_5(2), ...>.\n+\t  if (bitmap_bit_p (interesting, v))\n+\t    continue;\n+\n+\t  bitmap_set_bit (interesting, v);\n+\t  bitmap_set_bit (m_imports, v);\n+\t  done |= find_paths_to_names (e->src, interesting);\n+\t  bitmap_clear_bit (interesting, v);\n+\t}\n+      else if (TREE_CODE (arg) == INTEGER_CST)\n+\t{\n+\t  m_path.safe_push (e->src);\n+\t  edge taken_edge = find_taken_edge (m_path);\n+\t  if (taken_edge && taken_edge != UNREACHABLE_EDGE)\n+\t    {\n+\t      maybe_register_path (taken_edge);\n+\t      done = true;\n+\t    }\n+\t  m_path.pop ();\n+\t}\n+    }\n+  return done;\n+}\n+\n+// If the definition of NAME causes the final conditional of the\n+// current path to be constant, register the path, and return TRUE.\n+\n+bool\n+back_threader::resolve_def (tree name, bitmap interesting, vec<tree> worklist)\n+{\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n+\n+  // Handle PHIs.\n+  if (is_a<gphi *> (def_stmt)\n+      && resolve_phi (as_a<gphi *> (def_stmt), interesting))\n+    return true;\n+\n+  // Defer copies of SSAs by adding the source to the worklist.\n+  if (gimple_assign_single_p (def_stmt)\n+      && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME)\n+    {\n+      tree rhs = gimple_assign_rhs1 (def_stmt);\n+      bitmap_set_bit (m_imports, SSA_NAME_VERSION (rhs));\n+      bitmap_set_bit (interesting, SSA_NAME_VERSION (rhs));\n+      worklist.safe_push (rhs);\n+    }\n+  return false;\n+}\n+\n+// Find jump threading paths to any of the SSA names in the\n+// INTERESTING bitmap, and register any such paths.\n+//\n+// Return TRUE if no further processing past this block is necessary.\n+// This is because we've either registered a path, or because there is\n+// nothing of interesting beyond this block.\n+//\n+// BB is the current path being processed.\n+\n+bool\n+back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n+{\n+  if (m_visited_bbs.add (bb))\n+    return true;\n+\n+  m_path.safe_push (bb);\n+\n+  if (m_path.length () > 1\n+      && !m_profit.profitable_path_p (m_path, m_name, NULL))\n+    {\n+      m_path.pop ();\n+      m_visited_bbs.remove (bb);\n+      return false;\n+    }\n+\n+  auto_bitmap processed;\n+  unsigned i;\n+  bool done = false;\n+\n+  // We use a worklist instead of iterating through the bitmap,\n+  // because we may add new items in-flight.\n+  auto_vec<tree> worklist (bitmap_count_bits (interesting));\n+  populate_worklist (worklist, interesting);\n+  while (!worklist.is_empty ())\n+    {\n+      tree name = worklist.pop ();\n+      unsigned i = SSA_NAME_VERSION (name);\n+      basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (name));\n+\n+      // Process any names defined in this block.\n+      if (def_bb == bb)\n+\t{\n+\t  bitmap_set_bit (processed, i);\n+\n+\t  if (resolve_def (name, interesting, worklist))\n+\t    {\n+\t      done = true;\n+\t      goto leave_bb;\n+\t    }\n+\t}\n+      // Examine blocks that define or export an interesting SSA,\n+      // since they may compute a range which resolve this path.\n+      if ((def_bb == bb\n+\t   || bitmap_bit_p (m_ranger.gori ().exports (bb), i))\n+\t  && m_path.length () > 1)\n+\t{\n+\t  edge taken_edge = find_taken_edge (m_path);\n+\t  if (taken_edge)\n+\t    {\n+\t      if (taken_edge != UNREACHABLE_EDGE)\n+\t\tmaybe_register_path (taken_edge);\n+\n+\t      done = true;\n+\t      goto leave_bb;\n+\t    }\n+\t}\n+    }\n+\n+  // If there are interesting names not yet processed, keep looking.\n+  bitmap_and_compl_into (interesting, processed);\n+  if (!bitmap_empty_p (interesting))\n+    {\n+      edge_iterator iter;\n+      edge e;\n+      FOR_EACH_EDGE (e, iter, bb->preds)\n+\tif ((e->flags & EDGE_ABNORMAL) == 0)\n+\t  done |= find_paths_to_names (e->src, interesting);\n+    }\n+\n+ leave_bb:\n+  bitmap_iterator bi;\n+  EXECUTE_IF_SET_IN_BITMAP (processed, 0, i, bi)\n+    bitmap_set_bit (interesting, i);\n+\n+  m_path.pop ();\n+  m_visited_bbs.remove (bb);\n+  return done;\n+}\n+\n+// Search backwards from BB looking for paths where the final\n+// conditional out of BB can be determined.  NAME is the LHS of the\n+// final conditional.  Register such paths for jump threading.\n+\n+void\n+back_threader::find_paths (basic_block bb, tree name)\n+{\n+  gimple *stmt = last_stmt (bb);\n+  if (!stmt\n+      || (gimple_code (stmt) != GIMPLE_COND\n+\t  && gimple_code (stmt) != GIMPLE_SWITCH))\n+    return;\n+\n+  if (EDGE_COUNT (bb->succs) > 1\n+      || single_succ_to_potentially_threadable_block (bb))\n+    {\n+      m_last_stmt = stmt;\n+      m_visited_bbs.empty ();\n+      m_path.truncate (0);\n+      m_name = name;\n+      bitmap_clear (m_imports);\n+\n+      auto_bitmap interesting;\n+      bitmap_copy (m_imports, m_ranger.gori ().imports (bb));\n+      bitmap_copy (interesting, m_imports);\n+      find_paths_to_names (bb, interesting);\n+    }\n+}\n+\n+// Dump a sequence of BBs through the CFG.\n+\n+DEBUG_FUNCTION void\n+dump_path (FILE *dump_file, const vec<basic_block> &path)\n+{\n+  for (size_t i = 0; i < path.length (); ++i)\n+    {\n+      fprintf (dump_file, \"BB%d\", path[i]->index);\n+      if (i + 1 < path.length ())\n+\tfprintf (dump_file, \" <- \");\n+    }\n+  fprintf (dump_file, \"\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug (const vec <basic_block> &path)\n+{\n+  dump_path (stderr, path);\n+}\n+\n class thread_jumps\n {\n public:\n   thread_jumps (bool speed_p = true)\n-    : m_profit (speed_p), m_registry (param_max_fsm_thread_paths)\n+    : m_profit (speed_p),\n+      m_registry (param_max_fsm_thread_paths),\n+      m_back_threader (m_profit, m_registry)\n   { }\n   void find_jump_threads_backwards (basic_block bb);\n+  void find_jump_threads_backwards_with_ranger (basic_block bb);\n   bool thread_through_all_blocks ();\n \n private:\n@@ -102,6 +510,7 @@ class thread_jumps\n   tree m_name;\n   back_threader_profitability m_profit;\n   back_threader_registry m_registry;\n+  back_threader m_back_threader;\n };\n \n // Perform the actual jump threading for the all queued paths.\n@@ -548,8 +957,8 @@ back_threader_registry::register_path (const vec<basic_block> &m_path,\n \t\t\t\t\t\tEDGE_NO_COPY_SRC_BLOCK);\n   jump_thread_path->safe_push (x);\n \n-  m_lowlevel_registry.register_jump_thread (jump_thread_path);\n-  ++m_threaded_paths;\n+  if (m_lowlevel_registry.register_jump_thread (jump_thread_path))\n+    ++m_threaded_paths;\n   return true;\n }\n \n@@ -818,6 +1227,12 @@ thread_jumps::fsm_find_control_statement_thread_paths (tree name)\n void\n thread_jumps::find_jump_threads_backwards (basic_block bb)\n {\n+  if (param_threader_mode & THREADER_MODE_RANGER)\n+    {\n+      find_jump_threads_backwards_with_ranger (bb);\n+      return;\n+    }\n+\n   gimple *stmt = get_gimple_control_stmt (bb);\n   if (!stmt)\n     return;\n@@ -850,6 +1265,28 @@ thread_jumps::find_jump_threads_backwards (basic_block bb)\n   fsm_find_control_statement_thread_paths (name);\n }\n \n+// Like find_jump_threads_backwards(), but using ranger.\n+\n+void\n+thread_jumps::find_jump_threads_backwards_with_ranger (basic_block bb)\n+{\n+  gimple *stmt = get_gimple_control_stmt (bb);\n+  if (!stmt)\n+    return;\n+\n+  enum gimple_code code = gimple_code (stmt);\n+  tree name = NULL;\n+  if (code == GIMPLE_SWITCH)\n+    name = gimple_switch_index (as_a <gswitch *> (stmt));\n+  else if (code == GIMPLE_GOTO)\n+    name = gimple_goto_dest (stmt);\n+  else if (code == GIMPLE_COND)\n+    name = gimple_cond_lhs (stmt);\n+\n+  m_name = name;\n+  m_back_threader.find_paths (bb, name);\n+}\n+\n namespace {\n \n const pass_data pass_data_thread_jumps =\n@@ -883,12 +1320,12 @@ pass_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n   return flag_expensive_optimizations;\n }\n \n+// Try to thread blocks in FUN.  Return TRUE if any jump thread paths were\n+// registered.\n \n-unsigned int\n-pass_thread_jumps::execute (function *fun)\n+static bool\n+try_thread_blocks (function *fun)\n {\n-  loop_optimizer_init (LOOPS_HAVE_PREHEADERS | LOOPS_HAVE_SIMPLE_LATCHES);\n-\n   /* Try to thread each block with more than one successor.  */\n   thread_jumps threader;\n   basic_block bb;\n@@ -897,7 +1334,30 @@ pass_thread_jumps::execute (function *fun)\n       if (EDGE_COUNT (bb->succs) > 1)\n \tthreader.find_jump_threads_backwards (bb);\n     }\n-  bool changed = threader.thread_through_all_blocks ();\n+  return threader.thread_through_all_blocks ();\n+}\n+\n+unsigned int\n+pass_thread_jumps::execute (function *fun)\n+{\n+  loop_optimizer_init (LOOPS_HAVE_PREHEADERS | LOOPS_HAVE_SIMPLE_LATCHES);\n+\n+  // Iterative mode is a testing construct and is not meant for public\n+  // consumption.  It is OFF by default.\n+  bool iterative = param_threader_iterative;\n+\n+  bool changed = false;\n+  while (try_thread_blocks (fun))\n+    {\n+      changed = true;\n+\n+      if (!iterative)\n+\tbreak;\n+\n+      if ((param_threader_mode & THREADER_MODE_RANGER) == 0)\n+\tbreak;\n+      cleanup_tree_cfg (TODO_update_ssa);\n+    }\n \n   loop_optimizer_finalize ();\n   return changed ? TODO_cleanup_cfg : 0;"}, {"sha": "37ee5c11be373d7affe5a7e0a3f0fdbd3968a2bc", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1261,6 +1261,18 @@ jump_threader::thread_across_edge (edge e)\n   m_state->pop ();\n }\n \n+/* Return TRUE if BB has a single successor to a block with multiple\n+   incoming and outgoing edges.  */\n+\n+bool\n+single_succ_to_potentially_threadable_block (basic_block bb)\n+{\n+  int flags = (EDGE_IGNORE | EDGE_COMPLEX | EDGE_ABNORMAL);\n+  return (single_succ_p (bb)\n+\t  && (single_succ_edge (bb)->flags & flags) == 0\n+\t  && potentially_threadable_block (single_succ (bb)));\n+}\n+\n /* Examine the outgoing edges from BB and conditionally\n    try to thread them.  */\n \n@@ -1274,12 +1286,8 @@ jump_threader::thread_outgoing_edges (basic_block bb)\n      outgoing edges, then we may be able to thread the edge, i.e., we\n      may be able to statically determine which of the outgoing edges\n      will be traversed when the incoming edge from BB is traversed.  */\n-  if (single_succ_p (bb)\n-      && (single_succ_edge (bb)->flags & flags) == 0\n-      && potentially_threadable_block (single_succ (bb)))\n-    {\n-      thread_across_edge (single_succ_edge (bb));\n-    }\n+  if (single_succ_to_potentially_threadable_block (bb))\n+    thread_across_edge (single_succ_edge (bb));\n   else if ((last = last_stmt (bb))\n \t   && gimple_code (last) == GIMPLE_COND\n \t   && EDGE_COUNT (bb->succs) == 2"}, {"sha": "0002b200d8b6d61a022233f3142a11a5a35ac05e", "filename": "gcc/tree-ssa-threadedge.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadedge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadedge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.h?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -94,6 +94,7 @@ class jump_threader_simplifier\n };\n \n extern void propagate_threaded_block_debug_into (basic_block, basic_block);\n+extern bool single_succ_to_potentially_threadable_block (basic_block);\n \n // ?? All this ssa_name_values stuff is the store of values for\n // avail_exprs_stack and const_and_copies, so it really belongs in the"}, {"sha": "29cf010e9ca72d9bf858cf4a7f1989a41cec981d", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tree-cfg.h\"\n #include \"tree-vectorizer.h\"\n+#include \"tree-pass.h\"\n \n /* Given a block B, update the CFG and SSA graph to reflect redirecting\n    one or more in-edges to B to instead reach the destination of an\n@@ -2741,15 +2742,17 @@ jump_thread_path_registry::thread_through_all_blocks\n \n    E is the edge we can thread, E2 is the new target edge, i.e., we\n    are effectively recording that E->dest can be changed to E2->dest\n-   after fixing the SSA graph.  */\n+   after fixing the SSA graph.\n \n-void\n+   Return TRUE if PATH was successfully threaded.  */\n+\n+bool\n jump_thread_path_registry::register_jump_thread (vec<jump_thread_edge *> *path)\n {\n   if (!dbg_cnt (registered_jump_thread))\n     {\n       path->release ();\n-      return;\n+      return false;\n     }\n \n   /* First make sure there are no NULL outgoing edges on the jump threading\n@@ -2766,7 +2769,7 @@ jump_thread_path_registry::register_jump_thread (vec<jump_thread_edge *> *path)\n \t    }\n \n \t  path->release ();\n-\t  return;\n+\t  return false;\n \t}\n \n       /* Only the FSM threader is allowed to thread across\n@@ -2780,6 +2783,7 @@ jump_thread_path_registry::register_jump_thread (vec<jump_thread_edge *> *path)\n     dump_jump_thread_path (dump_file, *path, true);\n \n   m_paths.safe_push (path);\n+  return true;\n }\n \n /* Return how many uses of T there are within BB, as long as there"}, {"sha": "2030bda15af411f9bd7ac77c0d9c7d2aef41a613", "filename": "gcc/tree-ssa-threadupdate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadupdate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/gcc%2Ftree-ssa-threadupdate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.h?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -63,7 +63,7 @@ class jump_thread_path_registry\n public:\n   jump_thread_path_registry ();\n   ~jump_thread_path_registry ();\n-  void register_jump_thread (vec<jump_thread_edge *> *);\n+  bool register_jump_thread (vec<jump_thread_edge *> *);\n   void remove_jump_threads_including (edge);\n   bool thread_through_all_blocks (bool);\n   jump_thread_edge *allocate_thread_edge (edge e, jump_thread_edge_type t);"}, {"sha": "ef6f64d229be1b51c454aa85cb33c8bcb406daa8", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,4 +1,5 @@\n /* Autopar with IF conditions.  */\n+/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n \n void abort();\n "}, {"sha": "a97eb97acf6d7a4c9851c1d8351279af9e9d7b83", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e96b5f14e4025691b57d2301d71aa6092ed44bc/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e96b5f14e4025691b57d2301d71aa6092ed44bc/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c?ref=2e96b5f14e4025691b57d2301d71aa6092ed44bc", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n+\n #define N 1500\n \n int x[N][N], y[N];"}]}