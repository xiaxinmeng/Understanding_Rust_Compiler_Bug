{"sha": "aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhNDRkMmQwYmI1NmYxNWVmYzQwMGM2NjQxNWRjZTAzYThmMmRhMg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2014-07-04T07:26:10Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-07-04T07:26:10Z"}, "message": "Move builtin functions implementation to nds32-intrinsic.c module.\n\ngcc/\n\t* config/nds32/nds32.c\n\t(nds32_expand_builtin_null_ftype_reg): Move to ...\n\t(nds32_expand_builtin_reg_ftype_imm): Move to ...\n\t(nds32_expand_builtin_null_ftype_reg_imm): Move to ...\n\t(nds32_init_builtins): Move implementation to ...\n\t(nds32_expand_builtin): Move implementation to ...\n\t* config/nds32/nds32-intrinsic.c: ... here.\n\t* config/nds32/nds32-protos.h (nds32_init_builtins_impl): Declare.\n\t(nds32_expand_builtin_impl): Declare.\n\nCo-Authored-By: Kito Cheng <kito@0xlab.org>\nCo-Authored-By: Monk Chiang <sh.chiang04@gmail.com>\n\nFrom-SVN: r212282", "tree": {"sha": "a9f5b75bb1eb4286dedbef8e0443bd79afc28875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f5b75bb1eb4286dedbef8e0443bd79afc28875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c23a919b860940e2d0a77709ea8076ae59e036a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23a919b860940e2d0a77709ea8076ae59e036a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23a919b860940e2d0a77709ea8076ae59e036a3"}], "stats": {"total": 439, "additions": 258, "deletions": 181}, "files": [{"sha": "61899bf4dfa133c1740a6541e4e5215f8d749b05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "patch": "@@ -1,3 +1,17 @@\n+2014-07-04  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\t    Kito Cheng  <kito@0xlab.org>\n+\t    Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/nds32.c\n+\t(nds32_expand_builtin_null_ftype_reg): Move to ...\n+\t(nds32_expand_builtin_reg_ftype_imm): Move to ...\n+\t(nds32_expand_builtin_null_ftype_reg_imm): Move to ...\n+\t(nds32_init_builtins): Move implementation to ...\n+\t(nds32_expand_builtin): Move implementation to ...\n+\t* config/nds32/nds32-intrinsic.c: ... here.\n+\t* config/nds32/nds32-protos.h (nds32_init_builtins_impl): Declare.\n+\t(nds32_expand_builtin_impl): Declare.\n+\n 2014-07-04  Chung-Ju Wu  <jasonwucj@gmail.com>\n \t    Kito Cheng  <kito@0xlab.org>\n \t    Monk Chiang  <sh.chiang04@gmail.com>"}, {"sha": "0f1646c0892230e546de646c8c4ab33e0ad5c125", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "patch": "@@ -17,3 +17,236 @@\n    You should have received a copy of the GNU General Public License\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n+\n+/* ------------------------------------------------------------------------ */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"stor-layout.h\"\n+#include \"varasm.h\"\n+#include \"calls.h\"\n+#include \"rtl.h\"\n+#include \"regs.h\"\n+#include \"hard-reg-set.h\"\n+#include \"insn-config.h\"\t/* Required by recog.h.  */\n+#include \"conditions.h\"\n+#include \"output.h\"\n+#include \"insn-attr.h\"\t\t/* For DFA state_t.  */\n+#include \"insn-codes.h\"\t\t/* For CODE_FOR_xxx.  */\n+#include \"reload.h\"\t\t/* For push_reload().  */\n+#include \"flags.h\"\n+#include \"function.h\"\n+#include \"expr.h\"\n+#include \"recog.h\"\n+#include \"diagnostic-core.h\"\n+#include \"df.h\"\n+#include \"tm_p.h\"\n+#include \"tm-constrs.h\"\n+#include \"optabs.h\"\t\t/* For GEN_FCN.  */\n+#include \"target.h\"\n+#include \"target-def.h\"\n+#include \"langhooks.h\"\t\t/* For add_builtin_function().  */\n+#include \"ggc.h\"\n+#include \"builtins.h\"\n+\n+/* ------------------------------------------------------------------------ */\n+\n+/* Function to expand builtin function for\n+   '[(unspec_volatile [(reg)])]'.  */\n+static rtx\n+nds32_expand_builtin_null_ftype_reg (enum insn_code icode,\n+\t\t\t\t     tree exp, rtx target)\n+{\n+  /* Mapping:\n+       ops[0] <--> value0 <--> arg0 */\n+  struct expand_operand ops[1];\n+  tree arg0;\n+  rtx value0;\n+\n+  /* Grab the incoming arguments and extract its rtx.  */\n+  arg0 = CALL_EXPR_ARG (exp, 0);\n+  value0 = expand_normal (arg0);\n+\n+  /* Create operands.  */\n+  create_input_operand (&ops[0], value0, TYPE_MODE (TREE_TYPE (arg0)));\n+\n+  /* Emit new instruction.  */\n+  if (!maybe_expand_insn (icode, 1, ops))\n+    error (\"invalid argument to built-in function\");\n+\n+  return target;\n+}\n+\n+/* Function to expand builtin function for\n+   '[(set (reg) (unspec_volatile [(imm)]))]'.  */\n+static rtx\n+nds32_expand_builtin_reg_ftype_imm (enum insn_code icode,\n+\t\t\t\t    tree exp, rtx target)\n+{\n+  /* Mapping:\n+       ops[0] <--> target <--> exp\n+       ops[1] <--> value0 <--> arg0 */\n+  struct expand_operand ops[2];\n+  tree arg0;\n+  rtx value0;\n+\n+  /* Grab the incoming arguments and extract its rtx.  */\n+  arg0 = CALL_EXPR_ARG (exp, 0);\n+  value0 = expand_normal (arg0);\n+\n+  /* Create operands.  */\n+  create_output_operand (&ops[0], target, TYPE_MODE (TREE_TYPE (exp)));\n+  create_input_operand (&ops[1], value0, TYPE_MODE (TREE_TYPE (arg0)));\n+\n+  /* Emit new instruction.  */\n+  if (!maybe_expand_insn (icode, 2, ops))\n+    error (\"invalid argument to built-in function\");\n+\n+  return target;\n+}\n+\n+/* Function to expand builtin function for\n+   '[(unspec_volatile [(reg) (imm)])]' pattern.  */\n+static rtx\n+nds32_expand_builtin_null_ftype_reg_imm (enum insn_code icode,\n+\t\t\t\t\t tree exp, rtx target)\n+{\n+  /* Mapping:\n+       ops[0] <--> value0 <--> arg0\n+       ops[1] <--> value1 <--> arg1 */\n+  struct expand_operand ops[2];\n+  tree arg0, arg1;\n+  rtx value0, value1;\n+\n+  /* Grab the incoming arguments and extract its rtx.  */\n+  arg0 = CALL_EXPR_ARG (exp, 0);\n+  arg1 = CALL_EXPR_ARG (exp, 1);\n+  value0 = expand_normal (arg0);\n+  value1 = expand_normal (arg1);\n+\n+  /* Create operands.  */\n+  create_input_operand (&ops[0], value0, TYPE_MODE (TREE_TYPE (arg0)));\n+  create_input_operand (&ops[1], value1, TYPE_MODE (TREE_TYPE (arg1)));\n+\n+  /* Emit new instruction.  */\n+  if (!maybe_expand_insn (icode, 2, ops))\n+    error (\"invalid argument to built-in function\");\n+\n+  return target;\n+}\n+\n+/* ------------------------------------------------------------------------ */\n+\n+void\n+nds32_init_builtins_impl (void)\n+{\n+  tree pointer_type_node  = build_pointer_type (integer_type_node);\n+\n+  tree void_ftype_void    = build_function_type (void_type_node,\n+\t\t\t\t\t\t void_list_node);\n+\n+  tree void_ftype_pint    = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t      pointer_type_node,\n+\t\t\t\t\t\t      NULL_TREE);\n+\n+  tree int_ftype_int      = build_function_type_list (integer_type_node,\n+\t\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t\t      NULL_TREE);\n+\n+  tree void_ftype_int_int = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t\t      integer_type_node,\n+\t\t\t\t\t\t      NULL_TREE);\n+\n+  /* Cache.  */\n+  add_builtin_function (\"__builtin_nds32_isync\",  void_ftype_pint,\n+\t\t\tNDS32_BUILTIN_ISYNC,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_nds32_isb\",  void_ftype_void,\n+\t\t\tNDS32_BUILTIN_ISB,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+\n+  /* Register Transfer.  */\n+  add_builtin_function (\"__builtin_nds32_mfsr\",  int_ftype_int,\n+\t\t\tNDS32_BUILTIN_MFSR,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_nds32_mfusr\", int_ftype_int,\n+\t\t\tNDS32_BUILTIN_MFUSR,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_nds32_mtsr\",  void_ftype_int_int,\n+\t\t\tNDS32_BUILTIN_MTSR,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_nds32_mtusr\", void_ftype_int_int,\n+\t\t\tNDS32_BUILTIN_MTUSR,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+\n+  /* Interrupt.  */\n+  add_builtin_function (\"__builtin_nds32_setgie_en\",  void_ftype_void,\n+\t\t\tNDS32_BUILTIN_SETGIE_EN,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  add_builtin_function (\"__builtin_nds32_setgie_dis\", void_ftype_void,\n+\t\t\tNDS32_BUILTIN_SETGIE_DIS,\n+\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+}\n+\n+\n+rtx\n+nds32_expand_builtin_impl (tree exp,\n+\t\t\t   rtx target,\n+\t\t\t   rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t   int ignore ATTRIBUTE_UNUSED)\n+{\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+\n+  int fcode = DECL_FUNCTION_CODE (fndecl);\n+\n+  switch (fcode)\n+    {\n+    /* Cache.  */\n+    case NDS32_BUILTIN_ISYNC:\n+      return nds32_expand_builtin_null_ftype_reg\n+\t     (CODE_FOR_unspec_volatile_isync, exp, target);\n+    case NDS32_BUILTIN_ISB:\n+      /* Since there are no result and operands for isb instruciton,\n+         we can simply emit this rtx.  */\n+      emit_insn (gen_unspec_volatile_isb ());\n+      return target;\n+\n+    /* Register Transfer.  */\n+    case NDS32_BUILTIN_MFSR:\n+      return nds32_expand_builtin_reg_ftype_imm\n+\t     (CODE_FOR_unspec_volatile_mfsr, exp, target);\n+    case NDS32_BUILTIN_MFUSR:\n+      return nds32_expand_builtin_reg_ftype_imm\n+\t     (CODE_FOR_unspec_volatile_mfusr, exp, target);\n+    case NDS32_BUILTIN_MTSR:\n+      return nds32_expand_builtin_null_ftype_reg_imm\n+\t     (CODE_FOR_unspec_volatile_mtsr, exp, target);\n+    case NDS32_BUILTIN_MTUSR:\n+      return nds32_expand_builtin_null_ftype_reg_imm\n+\t     (CODE_FOR_unspec_volatile_mtusr, exp, target);\n+\n+    /* Interrupt.  */\n+    case NDS32_BUILTIN_SETGIE_EN:\n+      /* Since there are no result and operands for setgie.e instruciton,\n+         we can simply emit this rtx.  */\n+      emit_insn (gen_unspec_volatile_setgie_en ());\n+      return target;\n+    case NDS32_BUILTIN_SETGIE_DIS:\n+      /* Since there are no result and operands for setgie.d instruciton,\n+         we can simply emit this rtx.  */\n+      emit_insn (gen_unspec_volatile_setgie_dis ());\n+      return target;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return NULL_RTX;\n+}\n+\n+/* ------------------------------------------------------------------------ */"}, {"sha": "e40ce3fc2351514c38d1d55f2ada2d1f28bef0ef", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "patch": "@@ -125,6 +125,12 @@ extern const char *nds32_output_stack_pop (void);\n \n extern int nds32_target_alignment (rtx);\n \n+/* Auxiliary functions to expand builtin functions.  */\n+\n+extern void nds32_init_builtins_impl (void);\n+extern rtx nds32_expand_builtin_impl (tree, rtx, rtx,\n+\t\t\t\t      enum machine_mode, int);\n+\n /* Auxiliary functions for ISR implementation.  */\n \n extern void nds32_check_isr_attrs_conflict (tree, tree);"}, {"sha": "e4dd770c40dc3335c452a1b80ce3733a10d30ef1", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 5, "deletions": 181, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa44d2d0bb56f15efc400c66415dce03a8f2da2/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=aaa44d2d0bb56f15efc400c66415dce03a8f2da2", "patch": "@@ -1157,90 +1157,6 @@ nds32_legitimate_index_p (enum machine_mode outer_mode,\n     }\n }\n \n-/* Function to expand builtin function for\n-   '[(unspec_volatile [(reg)])]'.  */\n-static rtx\n-nds32_expand_builtin_null_ftype_reg (enum insn_code icode,\n-\t\t\t\t     tree exp, rtx target)\n-{\n-  /* Mapping:\n-       ops[0] <--> value0 <--> arg0 */\n-  struct expand_operand ops[1];\n-  tree arg0;\n-  rtx value0;\n-\n-  /* Grab the incoming arguments and extract its rtx.  */\n-  arg0 = CALL_EXPR_ARG (exp, 0);\n-  value0 = expand_normal (arg0);\n-\n-  /* Create operands.  */\n-  create_input_operand (&ops[0], value0, TYPE_MODE (TREE_TYPE (arg0)));\n-\n-  /* Emit new instruction.  */\n-  if (!maybe_expand_insn (icode, 1, ops))\n-    error (\"invalid argument to built-in function\");\n-\n-  return target;\n-}\n-\n-/* Function to expand builtin function for\n-   '[(set (reg) (unspec_volatile [(imm)]))]'.  */\n-static rtx\n-nds32_expand_builtin_reg_ftype_imm (enum insn_code icode,\n-\t\t\t\t    tree exp, rtx target)\n-{\n-  /* Mapping:\n-       ops[0] <--> target <--> exp\n-       ops[1] <--> value0 <--> arg0 */\n-  struct expand_operand ops[2];\n-  tree arg0;\n-  rtx value0;\n-\n-  /* Grab the incoming arguments and extract its rtx.  */\n-  arg0 = CALL_EXPR_ARG (exp, 0);\n-  value0 = expand_normal (arg0);\n-\n-  /* Create operands.  */\n-  create_output_operand (&ops[0], target, TYPE_MODE (TREE_TYPE (exp)));\n-  create_input_operand (&ops[1], value0, TYPE_MODE (TREE_TYPE (arg0)));\n-\n-  /* Emit new instruction.  */\n-  if (!maybe_expand_insn (icode, 2, ops))\n-    error (\"invalid argument to built-in function\");\n-\n-  return target;\n-}\n-\n-/* Function to expand builtin function for\n-   '[(unspec_volatile [(reg) (imm)])]' pattern.  */\n-static rtx\n-nds32_expand_builtin_null_ftype_reg_imm (enum insn_code icode,\n-\t\t\t\t\t tree exp, rtx target)\n-{\n-  /* Mapping:\n-       ops[0] <--> value0 <--> arg0\n-       ops[1] <--> value1 <--> arg1 */\n-  struct expand_operand ops[2];\n-  tree arg0, arg1;\n-  rtx value0, value1;\n-\n-  /* Grab the incoming arguments and extract its rtx.  */\n-  arg0 = CALL_EXPR_ARG (exp, 0);\n-  arg1 = CALL_EXPR_ARG (exp, 1);\n-  value0 = expand_normal (arg0);\n-  value1 = expand_normal (arg1);\n-\n-  /* Create operands.  */\n-  create_input_operand (&ops[0], value0, TYPE_MODE (TREE_TYPE (arg0)));\n-  create_input_operand (&ops[1], value1, TYPE_MODE (TREE_TYPE (arg1)));\n-\n-  /* Emit new instruction.  */\n-  if (!maybe_expand_insn (icode, 2, ops))\n-    error (\"invalid argument to built-in function\");\n-\n-  return target;\n-}\n-\n /* A helper function to return character based on byte size.  */\n static char\n nds32_byte_to_size (int byte)\n@@ -2787,109 +2703,17 @@ nds32_option_override (void)\n static void\n nds32_init_builtins (void)\n {\n-  tree pointer_type_node  = build_pointer_type (integer_type_node);\n-\n-  tree void_ftype_void    = build_function_type (void_type_node,\n-\t\t\t\t\t\t void_list_node);\n-\n-  tree void_ftype_pint    = build_function_type_list (void_type_node,\n-\t\t\t\t\t\t      pointer_type_node,\n-\t\t\t\t\t\t      NULL_TREE);\n-\n-  tree int_ftype_int      = build_function_type_list (integer_type_node,\n-\t\t\t\t\t\t      integer_type_node,\n-\t\t\t\t\t\t      NULL_TREE);\n-\n-  tree void_ftype_int_int = build_function_type_list (void_type_node,\n-\t\t\t\t\t\t      integer_type_node,\n-\t\t\t\t\t\t      integer_type_node,\n-\t\t\t\t\t\t      NULL_TREE);\n-\n-  /* Cache.  */\n-  add_builtin_function (\"__builtin_nds32_isync\",  void_ftype_pint,\n-\t\t\tNDS32_BUILTIN_ISYNC,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_nds32_isb\",  void_ftype_void,\n-\t\t\tNDS32_BUILTIN_ISB,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-\n-  /* Register Transfer.  */\n-  add_builtin_function (\"__builtin_nds32_mfsr\",  int_ftype_int,\n-\t\t\tNDS32_BUILTIN_MFSR,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_nds32_mfusr\", int_ftype_int,\n-\t\t\tNDS32_BUILTIN_MFUSR,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_nds32_mtsr\",  void_ftype_int_int,\n-\t\t\tNDS32_BUILTIN_MTSR,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_nds32_mtusr\", void_ftype_int_int,\n-\t\t\tNDS32_BUILTIN_MTUSR,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-\n-  /* Interrupt.  */\n-  add_builtin_function (\"__builtin_nds32_setgie_en\",  void_ftype_void,\n-\t\t\tNDS32_BUILTIN_SETGIE_EN,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n-  add_builtin_function (\"__builtin_nds32_setgie_dis\", void_ftype_void,\n-\t\t\tNDS32_BUILTIN_SETGIE_DIS,\n-\t\t\tBUILT_IN_MD, NULL, NULL_TREE);\n+  nds32_init_builtins_impl ();\n }\n \n static rtx\n nds32_expand_builtin (tree exp,\n \t\t      rtx target,\n-\t\t      rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t      int ignore ATTRIBUTE_UNUSED)\n+\t\t      rtx subtarget,\n+\t\t      enum machine_mode mode,\n+\t\t      int ignore)\n {\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  switch (fcode)\n-    {\n-    /* Cache.  */\n-    case NDS32_BUILTIN_ISYNC:\n-      return nds32_expand_builtin_null_ftype_reg\n-\t     (CODE_FOR_unspec_volatile_isync, exp, target);\n-    case NDS32_BUILTIN_ISB:\n-      /* Since there are no result and operands for isb instruciton,\n-         we can simply emit this rtx.  */\n-      emit_insn (gen_unspec_volatile_isb ());\n-      return target;\n-\n-    /* Register Transfer.  */\n-    case NDS32_BUILTIN_MFSR:\n-      return nds32_expand_builtin_reg_ftype_imm\n-\t     (CODE_FOR_unspec_volatile_mfsr, exp, target);\n-    case NDS32_BUILTIN_MFUSR:\n-      return nds32_expand_builtin_reg_ftype_imm\n-\t     (CODE_FOR_unspec_volatile_mfusr, exp, target);\n-    case NDS32_BUILTIN_MTSR:\n-      return nds32_expand_builtin_null_ftype_reg_imm\n-\t     (CODE_FOR_unspec_volatile_mtsr, exp, target);\n-    case NDS32_BUILTIN_MTUSR:\n-      return nds32_expand_builtin_null_ftype_reg_imm\n-\t     (CODE_FOR_unspec_volatile_mtusr, exp, target);\n-\n-    /* Interrupt.  */\n-    case NDS32_BUILTIN_SETGIE_EN:\n-      /* Since there are no result and operands for setgie.e instruciton,\n-         we can simply emit this rtx.  */\n-      emit_insn (gen_unspec_volatile_setgie_en ());\n-      return target;\n-    case NDS32_BUILTIN_SETGIE_DIS:\n-      /* Since there are no result and operands for setgie.d instruciton,\n-         we can simply emit this rtx.  */\n-      emit_insn (gen_unspec_volatile_setgie_dis ());\n-      return target;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return NULL_RTX;\n+  return nds32_expand_builtin_impl (exp, target, subtarget, mode, ignore);\n }\n \n "}]}