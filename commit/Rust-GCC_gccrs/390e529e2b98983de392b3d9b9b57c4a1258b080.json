{"sha": "390e529e2b98983de392b3d9b9b57c4a1258b080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwZTUyOWUyYjk4OTgzZGUzOTJiM2Q5YjliNTdjNGExMjU4YjA4MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-19T08:16:17Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-19T08:16:17Z"}, "message": "Strenghten assumption about function start and end line (PR gcov-profile/88045).\n\n2018-11-19  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/88045\n\t* coverage.c (coverage_begin_function): Add assert.\n2018-11-19  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/88045\n\t* g++.dg/gcov/pr88045.C: New test.\n\nFrom-SVN: r266262", "tree": {"sha": "82e44c5460111671c6f34fa52668334ee91c8496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e44c5460111671c6f34fa52668334ee91c8496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/390e529e2b98983de392b3d9b9b57c4a1258b080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390e529e2b98983de392b3d9b9b57c4a1258b080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/390e529e2b98983de392b3d9b9b57c4a1258b080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390e529e2b98983de392b3d9b9b57c4a1258b080/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca44d7f40afa39b40cfa2ac85521a65d1743ef7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca44d7f40afa39b40cfa2ac85521a65d1743ef7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca44d7f40afa39b40cfa2ac85521a65d1743ef7a"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "dbabb6c315021c42aeb3d9a7284316042476e408", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=390e529e2b98983de392b3d9b9b57c4a1258b080", "patch": "@@ -1,3 +1,8 @@\n+2018-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/88045\n+\t* coverage.c (coverage_begin_function): Add assert.\n+\n 2018-11-18  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/40498"}, {"sha": "f0cbc1e46efec05a6df4838446ad4428a53e074d", "filename": "gcc/coverage.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=390e529e2b98983de392b3d9b9b57c4a1258b080", "patch": "@@ -639,7 +639,9 @@ coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n   expanded_location endloc = expand_location (cfun->function_end_locus);\n \n   /* Function can start in a single file and end in another one.  */\n-  gcov_write_unsigned (endloc.file == xloc.file ? endloc.line : xloc.line);\n+  int end_line = endloc.file == xloc.file ? endloc.line : xloc.line;\n+  gcc_assert (xloc.line <= end_line);\n+  gcov_write_unsigned (end_line);\n   gcov_write_length (offset);\n \n   return !gcov_is_error ();"}, {"sha": "4db71445888504acd61bb293191a08abd963ee26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=390e529e2b98983de392b3d9b9b57c4a1258b080", "patch": "@@ -1,3 +1,8 @@\n+2018-11-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/88045\n+\t* g++.dg/gcov/pr88045.C: New test.\n+\n 2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/88073"}, {"sha": "1b077a5e61a263911f213d22618ca8814edc78d1", "filename": "gcc/testsuite/g++.dg/gcov/pr88045.C", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr88045.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390e529e2b98983de392b3d9b9b57c4a1258b080/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr88045.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr88045.C?ref=390e529e2b98983de392b3d9b9b57c4a1258b080", "patch": "@@ -0,0 +1,90 @@\n+// PR gcov-profile/88045\n+// { dg-options \"-fprofile-arcs -ftest-coverage -std=c++11\" }\n+// { dg-do run { target native } }\n+\n+#include <numeric>\n+#include <vector>\n+#include <stdlib.h>\n+\n+struct Foo {\n+    size_t size() const { return n; };\n+    const size_t n;\n+    explicit Foo(size_t a_n) : n{a_n} {};\n+};\n+\n+template<template<typename...> class C, typename Head, typename... Tail>\n+struct make_with_tail {\n+    using type = C<Tail...>;\n+};\n+\n+template<template<typename...> class C, typename T, typename Head, typename... Tail>\n+struct make_with_tail_1 {\n+using type = C<T, Tail...>;\n+};\n+\n+template<typename Head, typename... Tail>\n+struct head {\n+    using type = Head;\n+};\n+template<typename... Ts>\n+struct Tree {\n+    using root_type = typename head<Ts...>::type;\n+    using branch_type = typename make_with_tail<Tree, Ts...>::type;\n+    Tree(root_type a_root, std::vector<branch_type> a_branches) :\n+        root{std::move(a_root)},\n+        branches{std::move(a_branches)}\n+    {\n+    }\n+\n+    explicit Tree(root_type a_root) : root{std::move(a_root)}, branches{root.size()}\n+    {\n+    }\n+\n+    root_type                root;\n+    std::vector<branch_type> branches;\n+};\n+\n+template<>\n+struct Tree<> {\n+};\n+\n+template<typename... Axes>\n+size_t size(const Tree<Axes...>& tree)\n+{\n+    return std::accumulate(\n+        tree.branches.begin(),\n+        tree.branches.end(),\n+        0,\n+        [](const size_t& count, const typename make_with_tail<Tree, Axes...>::type& branch) {\n+            return count + size(branch);\n+        });\n+}\n+\n+template<>\n+inline size_t size(const Tree<>& /* empty tree */)\n+{\n+    return 1;\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    size(Tree<Foo, Foo, Foo>{Foo{4}, {Tree<Foo, Foo>{Foo{2}, {Tree<Foo>{Foo{205}},\n+                                                              Tree<Foo>{Foo{261}}}},\n+                                      Tree<Foo, Foo>{Foo{4}, {Tree<Foo>{Foo{875}},\n+                                                              Tree<Foo>{Foo{492}},\n+                                                              Tree<Foo>{Foo{398}},\n+                                                              Tree<Foo>{Foo{302}}}},\n+                                      Tree<Foo, Foo>{Foo{6}, {Tree<Foo>{Foo{111}},\n+                                                              Tree<Foo>{Foo{436}},\n+                                                              Tree<Foo>{Foo{388}},\n+                                                              Tree<Foo>{Foo{879}},\n+                                                              Tree<Foo>{Foo{783}},\n+                                                              Tree<Foo>{Foo{735}}}},\n+                                      Tree<Foo, Foo>{Foo{3}, {Tree<Foo>{Foo{791}},\n+                                                              Tree<Foo>{Foo{  5}},\n+                                                              Tree<Foo>{Foo{841}}}}}});\n+\n+    return 0;\n+}\n+\n+// { dg-final { run-gcov pr88045.C } }"}]}