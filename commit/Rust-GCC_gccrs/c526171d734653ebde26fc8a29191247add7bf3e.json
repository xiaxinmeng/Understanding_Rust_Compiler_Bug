{"sha": "c526171d734653ebde26fc8a29191247add7bf3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyNjE3MWQ3MzQ2NTNlYmRlMjZmYzhhMjkxOTEyNDdhZGQ3YmYzZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-28T20:24:48Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-28T20:24:48Z"}, "message": "PR c++/89612 - ICE with member friend template with noexcept.\n\n\t* pt.c (maybe_instantiate_noexcept): For function templates, use their\n\ttemplate result (function decl).  Don't set up local specializations.\n\tTemporarily turn on processing_template_decl.  Update the template type\n\ttoo.\n\n\t* g++.dg/cpp0x/noexcept38.C: New test.\n\t* g++.dg/cpp0x/noexcept39.C: New test.\n\t* g++.dg/cpp1z/noexcept-type21.C: New test.\n\nFrom-SVN: r270005", "tree": {"sha": "805536d2cc95687eeccf43591de8bbe41bb4972e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/805536d2cc95687eeccf43591de8bbe41bb4972e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c526171d734653ebde26fc8a29191247add7bf3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c526171d734653ebde26fc8a29191247add7bf3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c526171d734653ebde26fc8a29191247add7bf3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c526171d734653ebde26fc8a29191247add7bf3e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddfd99ac13bf63ba7cb9ca30cd9b16d41f5c664a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddfd99ac13bf63ba7cb9ca30cd9b16d41f5c664a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddfd99ac13bf63ba7cb9ca30cd9b16d41f5c664a"}], "stats": {"total": 142, "additions": 113, "deletions": 29}, "files": [{"sha": "eb35f9ec798ff530782354fc05faf42e4468510a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -1,5 +1,11 @@\n 2019-03-28  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/89612 - ICE with member friend template with noexcept.\n+\t* pt.c (maybe_instantiate_noexcept): For function templates, use their\n+\ttemplate result (function decl).  Don't set up local specializations.\n+\tTemporarily turn on processing_template_decl.  Update the template type\n+\ttoo.\n+\n \tPR c++/89836 - bool constant expression and explicit conversions.\n \t* call.c (build_converted_constant_expr_internal): New function,\n \trenamed from..."}, {"sha": "91c341589be5dddd6a953ccfc76066e55980bf65", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -24193,6 +24193,17 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \n   if (DECL_CLONED_FUNCTION_P (fn))\n     fn = DECL_CLONED_FUNCTION (fn);\n+\n+  tree orig_fn = NULL_TREE;\n+  /* For a member friend template we can get a TEMPLATE_DECL.  Let's use\n+     its FUNCTION_DECL for the rest of this function -- push_access_scope\n+     doesn't accept TEMPLATE_DECLs.  */\n+  if (DECL_FUNCTION_TEMPLATE_P (fn))\n+    {\n+      orig_fn = fn;\n+      fn = DECL_TEMPLATE_RESULT (fn);\n+    }\n+\n   fntype = TREE_TYPE (fn);\n   spec = TYPE_RAISES_EXCEPTIONS (fntype);\n \n@@ -24229,37 +24240,41 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t  push_deferring_access_checks (dk_no_deferred);\n \t  input_location = DECL_SOURCE_LOCATION (fn);\n \n-\t  /* A new stack interferes with pop_access_scope.  */\n-\t  {\n-\t    /* Set up the list of local specializations.  */\n-\t    local_specialization_stack lss (lss_copy);\n-\n-\t    tree save_ccp = current_class_ptr;\n-\t    tree save_ccr = current_class_ref;\n-\t    /* If needed, set current_class_ptr for the benefit of\n-\t       tsubst_copy/PARM_DECL.  */\n-\t    tree tdecl = DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (fn));\n-\t    if (DECL_NONSTATIC_MEMBER_FUNCTION_P (tdecl))\n-\t      {\n-\t\ttree this_parm = DECL_ARGUMENTS (tdecl);\n-\t\tcurrent_class_ptr = NULL_TREE;\n-\t\tcurrent_class_ref = cp_build_fold_indirect_ref (this_parm);\n-\t\tcurrent_class_ptr = this_parm;\n-\t      }\n+\t  tree save_ccp = current_class_ptr;\n+\t  tree save_ccr = current_class_ref;\n+\t  /* If needed, set current_class_ptr for the benefit of\n+\t     tsubst_copy/PARM_DECL.  */\n+\t  tree tdecl = DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (fn));\n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (tdecl))\n+\t    {\n+\t      tree this_parm = DECL_ARGUMENTS (tdecl);\n+\t      current_class_ptr = NULL_TREE;\n+\t      current_class_ref = cp_build_fold_indirect_ref (this_parm);\n+\t      current_class_ptr = this_parm;\n+\t    }\n \n-\t    /* Create substitution entries for the parameters.  */\n-\t    register_parameter_specializations (tdecl, fn);\n+\t  /* If this function is represented by a TEMPLATE_DECL, then\n+\t     the deferred noexcept-specification might still contain\n+\t     dependent types, even after substitution.  And we need the\n+\t     dependency check functions to work in build_noexcept_spec.  */\n+\t  if (orig_fn)\n+\t    ++processing_template_decl;\n \n-\t    /* Do deferred instantiation of the noexcept-specifier.  */\n-\t    noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n-\t\t\t\t\t  DEFERRED_NOEXCEPT_ARGS (noex),\n-\t\t\t\t\t  tf_warning_or_error, fn,\n-\t\t\t\t\t  /*function_p=*/false,\n-\t\t\t\t\t  /*i_c_e_p=*/true);\n-\t    current_class_ptr = save_ccp;\n-\t    current_class_ref = save_ccr;\n-\t    spec = build_noexcept_spec (noex, tf_warning_or_error);\n-\t  }\n+\t  /* Do deferred instantiation of the noexcept-specifier.  */\n+\t  noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n+\t\t\t\t\tDEFERRED_NOEXCEPT_ARGS (noex),\n+\t\t\t\t\ttf_warning_or_error, fn,\n+\t\t\t\t\t/*function_p=*/false,\n+\t\t\t\t\t/*i_c_e_p=*/true);\n+\n+\t  current_class_ptr = save_ccp;\n+\t  current_class_ref = save_ccr;\n+\n+\t  /* Build up the noexcept-specification.  */\n+\t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n+\n+\t  if (orig_fn)\n+\t    --processing_template_decl;\n \n \t  pop_deferring_access_checks ();\n \t  pop_access_scope (fn);\n@@ -24279,6 +24294,8 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t}\n \n       TREE_TYPE (fn) = build_exception_variant (fntype, spec);\n+      if (orig_fn)\n+\tTREE_TYPE (orig_fn) = TREE_TYPE (fn);\n     }\n \n   FOR_EACH_CLONE (clone, fn)"}, {"sha": "9a496ec58f4a8abd906c99ded74ef2f575c7c425", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -1,3 +1,10 @@\n+2019-03-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89612 - ICE with member friend template with noexcept.\n+\t* g++.dg/cpp0x/noexcept38.C: New test.\n+\t* g++.dg/cpp0x/noexcept39.C: New test.\n+\t* g++.dg/cpp1z/noexcept-type21.C: New test.\n+\n 2019-03-28  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89848"}, {"sha": "ecab59df694f007784bc45344449c77dc4bce662", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept38.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept38.C?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/89612\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> \n+struct C {\n+  template <int N>\n+  friend int foo() noexcept(N);\n+\n+  template <int N>\n+  friend int foo2() noexcept(N); // { dg-error \"different exception\" }\n+};\n+\n+template <int N>\n+int foo() noexcept(N);\n+\n+template <int N>\n+int foo2() noexcept(N + 1);\n+\n+C<int> c;"}, {"sha": "fbebbed5e4c78ce99ab5742f17f8ac11a450b9de", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept39.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept39.C?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/89612\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+struct C {\n+  template <int N>\n+  friend void foo(T t) noexcept(sizeof(decltype(t)) > 1);\n+\n+  template <int N>\n+  friend void foo2(T t) noexcept(sizeof(decltype(t)) < 1); // { dg-error \"different exception\" }\n+};\n+\n+template <int N>\n+void foo(int i) noexcept { }\n+\n+template <int N>\n+void foo2(int i) noexcept { }\n+\n+C<int> c;"}, {"sha": "d0a61d95e8757c9af3e29e60fabb820c34f1374d", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type21.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c526171d734653ebde26fc8a29191247add7bf3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type21.C?ref=c526171d734653ebde26fc8a29191247add7bf3e", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/89612\n+// { dg-do compile { target c++17 } }\n+\n+template <typename a> using b = typename a ::c;\n+template <typename> bool d;\n+template <typename, typename> struct e {\n+  template <typename f, typename g> e(f, g) {}\n+  template <typename h, typename i, typename j>\n+  friend auto k(h &&, const j &, i &&) noexcept(d<b<h>, h> &&d<b<i>, i>);\n+};\n+template <typename l, typename m> e(l, m)->e<l, m>;\n+template <typename l, typename m, typename j>\n+auto k(l &&, const j &, m &&) noexcept(d<b<l>, l> &&d<b<m>, m>);\n+int main() {\n+  e(0, [] {});\n+}"}]}