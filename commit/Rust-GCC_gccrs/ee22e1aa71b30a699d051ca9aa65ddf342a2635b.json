{"sha": "ee22e1aa71b30a699d051ca9aa65ddf342a2635b", "node_id": "C_kwDOANBUbNoAKGVlMjJlMWFhNzFiMzBhNjk5ZDA1MWNhOWFhNjVkZGYzNDJhMjYzNWI", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-01-05T14:36:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-11T13:24:48Z"}, "message": "[Ada] Adapt proof of System.Arith_Double\n\ngcc/ada/\n\n\t* libgnat/s-aridou.adb (Double_Divide): Adjust proof of lemma\n\tProve_Signs, call lemma for commutation of Big and\n\tmultiplication.\n\t(Multiply_With_Ovflo_Check): Adjust postcondition of\n\tProve_Pos_Int.\n\t(Scaled_Divide): Explicit commutation in the proof of lemma\n\tProve_Multiplication, add new lemma Prove_Shift_Progress for\n\tcongruence property that is not proved in a larger context, add\n\tassertions at the end of the loop to state loop invariant\n\tproperties.", "tree": {"sha": "0d134e7fd89f6dbd204f5966f1d58abe1bfff989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d134e7fd89f6dbd204f5966f1d58abe1bfff989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee22e1aa71b30a699d051ca9aa65ddf342a2635b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee22e1aa71b30a699d051ca9aa65ddf342a2635b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee22e1aa71b30a699d051ca9aa65ddf342a2635b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee22e1aa71b30a699d051ca9aa65ddf342a2635b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a9ed1187e5ba190828dff6c5d1e88ebe7dbb3a"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "0fefb6bd94504c4257b3e411107d4ebe662ddb93", "filename": "gcc/ada/libgnat/s-aridou.adb", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee22e1aa71b30a699d051ca9aa65ddf342a2635b/gcc%2Fada%2Flibgnat%2Fs-aridou.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee22e1aa71b30a699d051ca9aa65ddf342a2635b/gcc%2Fada%2Flibgnat%2Fs-aridou.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aridou.adb?ref=ee22e1aa71b30a699d051ca9aa65ddf342a2635b", "patch": "@@ -868,11 +868,14 @@ is\n          if (X >= 0) = Den_Pos then\n             pragma Assert (Quot >= 0);\n             pragma Assert (Big_Q >= 0);\n+            pragma Assert (Q >= 0);\n             pragma Assert (Big (Q) = Big_Q);\n          else\n             pragma Assert ((X >= 0) /= (Big (Y) * Big (Z) >= 0));\n             pragma Assert (Quot <= 0);\n             pragma Assert (Big_Q <= 0);\n+            pragma Assert (if X >= 0 then R >= 0);\n+            pragma Assert (if X < 0 then R <= 0);\n             pragma Assert (Big (R) = Big_R);\n          end if;\n       end Prove_Signs;\n@@ -893,6 +896,7 @@ is\n       else\n          Big_Q := Quot;\n       end if;\n+      Lemma_Abs_Mult_Commutation (Big (Y), Big (Z));\n       Lemma_Mult_Decomposition (Mult, Yu, Zu, Yhi, Ylo, Zhi, Zlo);\n \n       --  Compute Y * Z. Note that if the result overflows Double_Uns, then\n@@ -1417,7 +1421,8 @@ is\n         Pre  => In_Double_Int_Range (Big (X) * Big (Y))\n           and then Mult = Big (T2)\n           and then ((X >= 0 and then Y >= 0) or else (X < 0 and then Y < 0)),\n-        Post => To_Pos_Int (T2) = X * Y;\n+        Post => In_Double_Int_Range (Big (T2))\n+          and then To_Pos_Int (T2) = X * Y;\n \n       procedure Prove_Result_Too_Large\n       with\n@@ -1925,6 +1930,10 @@ is\n          Lemma_Hi_Lo (T1, Hi (T1), S3);\n          Lemma_Hi_Lo (T2, Hi (T2), Lo (T2));\n          Lemma_Hi_Lo (T3, Hi (T3), S2);\n+         Lemma_Mult_Commutation (Double_Uns (Q), Double_Uns (Lo (Zu)), T1);\n+         Lemma_Mult_Commutation (Double_Uns (Q), Double_Uns (Hi (Zu)), T2);\n+         pragma Assert (Big (Double_Uns (Q)) * Big (Zu) =\n+                          Big_2xxSingle * Big (T2) + Big (T1));\n          pragma Assert (Big (Double_Uns (Q)) * Big (Zu) =\n            Big_2xxSingle * Big_2xxSingle * Big (Double_Uns (Hi (T2)))\n          + Big_2xxSingle * Big_2xxSingle * Big (Double_Uns (Hi (T3)))\n@@ -2321,6 +2330,21 @@ is\n                  Post => Shift / 2 = 2 ** (Log_Single_Size - (Inter + 1))\n                    and then (Shift = 2 or (Shift / 2) mod 2 = 0);\n \n+               procedure Prove_Shift_Progress\n+               with\n+                 Ghost,\n+                 Pre  => Shift <= Single_Size / 2\n+                   and then Shift_Prev = 2 * Shift\n+                   and then Mask_Prev =\n+                     Shift_Left (Single_Uns'Last, Single_Size - Shift_Prev)\n+                   and then Mask =\n+                     Shift_Left (Single_Uns'Last,\n+                                 Single_Size - Shift_Prev + Shift),\n+                 Post => Mask_Prev =\n+                     Shift_Left (Single_Uns'Last, Single_Size - 2 * Shift)\n+                   and then Mask =\n+                     Shift_Left (Single_Uns'Last, Single_Size - Shift);\n+\n                procedure Prove_Shifting\n                with\n                  Ghost,\n@@ -2333,17 +2357,13 @@ is\n                    and then (Hi (Zu_Prev) and Mask_Prev and not Mask) /= 0,\n                  Post => (Hi (Zu) and Mask) /= 0;\n \n-               -----------------\n-               -- Prove_Power --\n-               -----------------\n+               -----------------------------\n+               -- Local lemma null bodies --\n+               -----------------------------\n \n                procedure Prove_Power is null;\n-\n-               --------------------\n-               -- Prove_Shifting --\n-               --------------------\n-\n                procedure Prove_Shifting is null;\n+               procedure Prove_Shift_Progress is null;\n \n             begin\n                Prove_Power;\n@@ -2357,6 +2377,7 @@ is\n \n                Lemma_Double_Shift\n                  (Single_Uns'Last, Single_Size - Shift_Prev, Shift);\n+               Prove_Shift_Progress;\n \n                if (Hi (Zu) and Mask) = 0 then\n                   Zu := Shift_Left (Zu, Shift);\n@@ -2378,9 +2399,13 @@ is\n \n                   Scale := Scale + Shift;\n \n+                  pragma Assert (Zu = Shift_Left (abs Z, Scale));\n                   pragma Assert\n                     (Big (Zu) = Big (Double_Uns'(abs Z)) * Big_2xx (Scale));\n                end if;\n+\n+               pragma Assert\n+                 (Big (Zu) = Big (Double_Uns'(abs Z)) * Big_2xx (Scale));\n             end;\n          end loop;\n "}]}