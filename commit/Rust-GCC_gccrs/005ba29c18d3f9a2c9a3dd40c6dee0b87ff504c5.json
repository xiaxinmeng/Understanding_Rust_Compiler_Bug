{"sha": "005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1YmEyOWMxOGQzZjlhMmM5YTNkZDQwYzZkZWUwYjg3ZmY1MDRjNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:20:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:20:40Z"}, "message": "[73/77] Pass scalar_mode to scalar_mode_supported_p\n\nThis patch makes the preferred_simd_mode target hook take a scalar_mode\nrather than a machine_mode.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (preferred_simd_mode): Take a scalar_mode\n\tinstead of a machine_mode.\n\t* targhooks.h (default_preferred_simd_mode): Likewise.\n\t* targhooks.c (default_preferred_simd_mode): Likewise.\n\t* config/arc/arc.c (arc_preferred_simd_mode): Likewise.\n\t* config/arm/arm.c (arm_preferred_simd_mode): Likewise.\n\t* config/c6x/c6x.c (c6x_preferred_simd_mode): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_preferred_simd_mode): Likewise.\n\t* config/i386/i386.c (ix86_preferred_simd_mode): Likewise.\n\t* config/mips/mips.c (mips_preferred_simd_mode): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_preferred_simd_mode): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_preferred_simd_mode):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_preferred_simd_mode): Likewise.\n\t* config/s390/s390.c (s390_preferred_simd_mode): Likewise.\n\t* config/sparc/sparc.c (sparc_preferred_simd_mode): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Likewise.\n\t(aarch64_simd_scalar_immediate_valid_for_move): Update accordingly.\n\t* doc/tm.texi: Regenerate.\n\t* optabs-query.c (can_vec_mask_load_store_p): Return false for\n\tnon-scalar modes.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251524", "tree": {"sha": "2bb4b6eb0704382bef075c7e480b31e339051d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb4b6eb0704382bef075c7e480b31e339051d1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/comments", "author": null, "committer": null, "parents": [{"sha": "18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "95e24a3c47d42c448a337a29e119b213fc6ef6f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -1,3 +1,29 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (preferred_simd_mode): Take a scalar_mode\n+\tinstead of a machine_mode.\n+\t* targhooks.h (default_preferred_simd_mode): Likewise.\n+\t* targhooks.c (default_preferred_simd_mode): Likewise.\n+\t* config/arc/arc.c (arc_preferred_simd_mode): Likewise.\n+\t* config/arm/arm.c (arm_preferred_simd_mode): Likewise.\n+\t* config/c6x/c6x.c (c6x_preferred_simd_mode): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_preferred_simd_mode): Likewise.\n+\t* config/i386/i386.c (ix86_preferred_simd_mode): Likewise.\n+\t* config/mips/mips.c (mips_preferred_simd_mode): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_preferred_simd_mode): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_preferred_simd_mode):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_preferred_simd_mode): Likewise.\n+\t* config/s390/s390.c (s390_preferred_simd_mode): Likewise.\n+\t* config/sparc/sparc.c (sparc_preferred_simd_mode): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Likewise.\n+\t(aarch64_simd_scalar_immediate_valid_for_move): Update accordingly.\n+\t* doc/tm.texi: Regenerate.\n+\t* optabs-query.c (can_vec_mask_load_store_p): Return false for\n+\tnon-scalar modes.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "aede22ceaf59a1c61ac386e03e0999cd08a03411", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -11263,7 +11263,7 @@ aarch64_simd_container_mode (machine_mode mode, unsigned width)\n \n /* Return 128-bit container as the preferred SIMD mode for MODE.  */\n static machine_mode\n-aarch64_preferred_simd_mode (machine_mode mode)\n+aarch64_preferred_simd_mode (scalar_mode mode)\n {\n   return aarch64_simd_container_mode (mode, 128);\n }\n@@ -11693,7 +11693,7 @@ aarch64_simd_scalar_immediate_valid_for_move (rtx op, machine_mode mode)\n   machine_mode vmode;\n \n   gcc_assert (!VECTOR_MODE_P (mode));\n-  vmode = aarch64_preferred_simd_mode (mode);\n+  vmode = aarch64_preferred_simd_mode (as_a <scalar_mode> (mode));\n   rtx op_v = aarch64_simd_gen_const_vector_dup (vmode, INTVAL (op));\n   return aarch64_simd_valid_immediate (op_v, vmode, false, NULL);\n }"}, {"sha": "9b83a46e60a6bdd891306d26b2b035553d0302bd", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -332,7 +332,7 @@ arc_vector_mode_supported_p (machine_mode mode)\n /* Implements target hook TARGET_VECTORIZE_PREFERRED_SIMD_MODE.  */\n \n static machine_mode\n-arc_preferred_simd_mode (machine_mode mode)\n+arc_preferred_simd_mode (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "14c8b8c62351a0bdedd2dde84018567e3914d473", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -269,7 +269,7 @@ static bool xscale_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n static bool fa726te_sched_adjust_cost (rtx_insn *, int, rtx_insn *, int *);\n static bool arm_array_mode_supported_p (machine_mode,\n \t\t\t\t\tunsigned HOST_WIDE_INT);\n-static machine_mode arm_preferred_simd_mode (machine_mode);\n+static machine_mode arm_preferred_simd_mode (scalar_mode);\n static bool arm_class_likely_spilled_p (reg_class_t);\n static HOST_WIDE_INT arm_vector_alignment (const_tree type);\n static bool arm_vector_alignment_reachable (const_tree type, bool is_packed);\n@@ -26950,7 +26950,7 @@ arm_array_mode_supported_p (machine_mode mode,\n    widths are supported properly by the middle-end.  */\n \n static machine_mode\n-arm_preferred_simd_mode (machine_mode mode)\n+arm_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_NEON)\n     switch (mode)"}, {"sha": "b4545aaa4d8e07f08def276c7c31cc44313ccefb", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -6239,7 +6239,7 @@ c6x_vector_mode_supported_p (machine_mode mode)\n \n /* Implements TARGET_VECTORIZE_PREFERRED_SIMD_MODE.  */\n static machine_mode\n-c6x_preferred_simd_mode (machine_mode mode)\n+c6x_preferred_simd_mode (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "d5d88d38f406a081a46c9d45c9f0b725f078ac79", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -2774,7 +2774,7 @@ epiphany_min_divisions_for_recip_mul (machine_mode mode)\n }\n \n static machine_mode\n-epiphany_preferred_simd_mode (machine_mode mode ATTRIBUTE_UNUSED)\n+epiphany_preferred_simd_mode (scalar_mode mode ATTRIBUTE_UNUSED)\n {\n   return TARGET_VECT_DOUBLE ? DImode : SImode;\n }"}, {"sha": "4eaf6e0262f3d73993ca8bc00a1fb18e8d02fdd8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -51515,7 +51515,7 @@ ix86_reassociation_width (unsigned int, machine_mode mode)\n    place emms and femms instructions.  */\n \n static machine_mode\n-ix86_preferred_simd_mode (machine_mode mode)\n+ix86_preferred_simd_mode (scalar_mode mode)\n {\n   if (!TARGET_SSE)\n     return word_mode;"}, {"sha": "c80686e31bf4e4c8291636d04e0fabe7cc835052", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -13324,7 +13324,7 @@ mips_scalar_mode_supported_p (scalar_mode mode)\n /* Implement TARGET_VECTORIZE_PREFERRED_SIMD_MODE.  */\n \n static machine_mode\n-mips_preferred_simd_mode (machine_mode mode)\n+mips_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_PAIRED_SINGLE_FLOAT\n       && mode == SFmode)"}, {"sha": "cd08e75c88d6b3096f1f6dc8b14e3a2d22b2accb", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -5486,7 +5486,7 @@ nvptx_vector_mode_supported (machine_mode mode)\n /* Return the preferred mode for vectorizing scalar MODE.  */\n \n static machine_mode\n-nvptx_preferred_simd_mode (machine_mode mode)\n+nvptx_preferred_simd_mode (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "b3c0a9eb496c8a690baaf51f77a2f367c76536fa", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -5877,7 +5877,7 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n /* Implement targetm.vectorize.preferred_simd_mode.  */\n \n static machine_mode\n-rs6000_preferred_simd_mode (machine_mode mode)\n+rs6000_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_VSX)\n     switch (mode)"}, {"sha": "5116da5adc9b5ca46b49e55681b7ef23ea8ceb9f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -5527,7 +5527,7 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n /* Implement targetm.vectorize.preferred_simd_mode.  */\n \n static machine_mode\n-rs6000_preferred_simd_mode (machine_mode mode)\n+rs6000_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_VSX)\n     switch (mode)"}, {"sha": "d1480f46776c29d7cb031a994fbbffd37fb6e998", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -15496,7 +15496,7 @@ s390_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n /* Return the vector mode to be used for inner mode MODE when doing\n    vectorization.  */\n static machine_mode\n-s390_preferred_simd_mode (machine_mode mode)\n+s390_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_VX)\n     switch (mode)"}, {"sha": "50882d062e717a60d7d16dc26ca498bb191ec7aa", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -662,7 +662,7 @@ static void sparc_conditional_register_usage (void);\n static const char *sparc_mangle_type (const_tree);\n #endif\n static void sparc_trampoline_init (rtx, tree, rtx);\n-static machine_mode sparc_preferred_simd_mode (machine_mode);\n+static machine_mode sparc_preferred_simd_mode (scalar_mode);\n static reg_class_t sparc_preferred_reload_class (rtx x, reg_class_t rclass);\n static bool sparc_lra_p (void);\n static bool sparc_print_operand_punct_valid_p (unsigned char);\n@@ -7694,7 +7694,7 @@ sparc_vector_mode_supported_p (machine_mode mode)\n /* Implement the TARGET_VECTORIZE_PREFERRED_SIMD_MODE target hook.  */\n \n static machine_mode\n-sparc_preferred_simd_mode (machine_mode mode)\n+sparc_preferred_simd_mode (scalar_mode mode)\n {\n   if (TARGET_VIS)\n     switch (mode)"}, {"sha": "ae51e75a5ea96ca843332bbae893a74faeddfec6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -5805,7 +5805,7 @@ the elements in the vectors should be of type @var{type}.  @var{is_packed}\n parameter is true if the memory access is defined in a packed struct.\n @end deftypefn\n \n-@deftypefn {Target Hook} machine_mode TARGET_VECTORIZE_PREFERRED_SIMD_MODE (machine_mode @var{mode})\n+@deftypefn {Target Hook} machine_mode TARGET_VECTORIZE_PREFERRED_SIMD_MODE (scalar_mode @var{mode})\n This hook should return the preferred mode for vectorizing scalar\n mode @var{mode}.  The default is\n equal to @code{word_mode}, because the vectorizer can do some"}, {"sha": "f6060731f9351301475f38bf4e8ea4eae3e3e58f", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -524,7 +524,11 @@ can_vec_mask_load_store_p (machine_mode mode,\n \n   /* See if there is any chance the mask load or store might be\n      vectorized.  If not, punt.  */\n-  vmode = targetm.vectorize.preferred_simd_mode (mode);\n+  scalar_mode smode;\n+  if (!is_a <scalar_mode> (mode, &smode))\n+    return false;\n+\n+  vmode = targetm.vectorize.preferred_simd_mode (smode);\n   if (!VECTOR_MODE_P (vmode))\n     return false;\n \n@@ -541,9 +545,9 @@ can_vec_mask_load_store_p (machine_mode mode,\n     {\n       unsigned int cur = 1 << floor_log2 (vector_sizes);\n       vector_sizes &= ~cur;\n-      if (cur <= GET_MODE_SIZE (mode))\n+      if (cur <= GET_MODE_SIZE (smode))\n \tcontinue;\n-      vmode = mode_for_vector (mode, cur / GET_MODE_SIZE (mode));\n+      vmode = mode_for_vector (smode, cur / GET_MODE_SIZE (smode));\n       mask_mode = targetm.vectorize.get_mask_mode (GET_MODE_NUNITS (vmode),\n \t\t\t\t\t\t   cur);\n       if (VECTOR_MODE_P (vmode)"}, {"sha": "83724b303bb49d41ceda0b1bac2ef11c7330977f", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -1859,7 +1859,7 @@ mode @var{mode}.  The default is\\n\\\n equal to @code{word_mode}, because the vectorizer can do some\\n\\\n transformations even in absence of specialized @acronym{SIMD} hardware.\",\n  machine_mode,\n- (machine_mode mode),\n+ (scalar_mode mode),\n  default_preferred_simd_mode)\n \n /* Returns a mask of vector sizes to iterate over when auto-vectorizing"}, {"sha": "51babfac3cf7cc62c4c6086b121301191daf91db", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -1159,7 +1159,7 @@ default_builtin_support_vector_misalignment (machine_mode mode,\n    possibly adds/subtracts using bit-twiddling.  */\n \n machine_mode\n-default_preferred_simd_mode (machine_mode mode ATTRIBUTE_UNUSED)\n+default_preferred_simd_mode (scalar_mode)\n {\n   return word_mode;\n }"}, {"sha": "fa3dfac69813e6ca372a617288bcecaa45a621fd", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=005ba29c18d3f9a2c9a3dd40c6dee0b87ff504c5", "patch": "@@ -100,7 +100,7 @@ extern bool\n default_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t     const_tree,\n \t\t\t\t\t     int, bool);\n-extern machine_mode default_preferred_simd_mode (machine_mode mode);\n+extern machine_mode default_preferred_simd_mode (scalar_mode mode);\n extern unsigned int default_autovectorize_vector_sizes (void);\n extern machine_mode default_get_mask_mode (unsigned, unsigned);\n extern void *default_init_cost (struct loop *);"}]}