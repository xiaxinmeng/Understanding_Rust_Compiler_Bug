{"sha": "ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0YzRmZTI4OWU3NjhkM2M2YjY2NTFjOGJmYTNmZGY0NTg5MzRmNA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-19T22:44:24Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-29T13:53:44Z"}, "message": "aarch64: Use RTL builtins for [su]mull_n intrinsics\n\nRewrite [su]mull_n Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-19  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mull_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>mull_n<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vmull_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmull_n_s32): Likewise.\n\t(vmull_n_u16): Likewise.\n\t(vmull_n_u32): Likewise.", "tree": {"sha": "7c808551f1a00f5f0807d78e4b93e6fa131c3ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c808551f1a00f5f0807d78e4b93e6fa131c3ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b588cfb4288ef41eb59edc6ab8cb83056b3b6a4"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "b82b6431d6f2a8d7d21023da589f3eecec7f0d65", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "patch": "@@ -271,6 +271,9 @@\n   BUILTIN_VQW (BINOP, vec_widen_smult_hi_, 10, NONE)\n   BUILTIN_VQW (BINOPU, vec_widen_umult_hi_, 10, NONE)\n \n+  BUILTIN_VD_HSI (BINOP, smull_n, 0, NONE)\n+  BUILTIN_VD_HSI (BINOPU, umull_n, 0, NONE)\n+\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, ALL)\n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, ALL)\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0, ALL)"}, {"sha": "bca2d8a3437fdcee77c7c357663c78c418b32a88", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "patch": "@@ -2074,6 +2074,19 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n )\n \n+(define_insn \"aarch64_<su>mull_n<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (mult:<VWIDE>\n+          (ANY_EXTEND:<VWIDE>\n+            (vec_duplicate:<VCOND>\n+\t      (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\")))\n+          (ANY_EXTEND:<VWIDE>\n+            (match_operand:VD_HSI 1 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mull\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n+)\n+\n ;; vmlal_lane_s16 intrinsics\n (define_insn \"aarch64_vec_<su>mlal_lane<Qlane>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")"}, {"sha": "ad0dfef80f39c1baf1e8c7c1bb95f325eff6ac7a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=ee4c4fe289e768d3c6b6651c8bfa3fdf458934f4", "patch": "@@ -8659,48 +8659,28 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_n_s16 (int16x4_t __a, int16_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smull %0.4s,%1.4h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smull_nv4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_n_s32 (int32x2_t __a, int32_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smull %0.2d,%1.2s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smull_nv2si (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_n_u16 (uint16x4_t __a, uint16_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umull %0.4s,%1.4h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umull_nv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_n_u32 (uint32x2_t __a, uint32_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umull %0.2d,%1.2s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umull_nv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline poly16x8_t"}]}