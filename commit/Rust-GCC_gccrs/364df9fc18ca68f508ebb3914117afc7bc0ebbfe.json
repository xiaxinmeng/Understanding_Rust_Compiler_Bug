{"sha": "364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0ZGY5ZmMxOGNhNjhmNTA4ZWJiMzkxNDExN2FmYzdiYzBlYmJmZQ==", "commit": {"author": {"name": "Stephen Crawley", "email": "crawley@dstc.edu.au", "date": "2003-02-07T21:05:12Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2003-02-07T21:05:12Z"}, "message": "BigDecimal (valueOf): fix DiagBigDecimal val008, val013 tests; see patch #1016 on Savannah.\n\n2003-02-07  Stephen Crawley  <crawley@dstc.edu.au>\n\n       * java/math/BigDecimal(valueOf): fix DiagBigDecimal val008, val013\n       tests; see patch #1016 on Savannah.\n\n2003-02-07  Stephen Crawley  <crawley@dstc.edu.au>\n\n       * java/math/BigDecimal.java (BigDecimal): enhance parsing of exponents\n       (toString): do not return Strings starting with . and - erroneously.\n       Improves Mauve results to 12 of 600 instead of 16 of 338 on\n       DiagBigDecimal.\n\nFrom-SVN: r62540", "tree": {"sha": "d90ea42a5781570d67ecd360422f94629c85e480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d90ea42a5781570d67ecd360422f94629c85e480"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364df9fc18ca68f508ebb3914117afc7bc0ebbfe/comments", "author": null, "committer": null, "parents": [{"sha": "b20fcd47a23ead8ed5ea9ce22c0b4b196380ce8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20fcd47a23ead8ed5ea9ce22c0b4b196380ce8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20fcd47a23ead8ed5ea9ce22c0b4b196380ce8e"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "493794200f71e14f34e4dcbefdf0753df0be34f8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364df9fc18ca68f508ebb3914117afc7bc0ebbfe/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364df9fc18ca68f508ebb3914117afc7bc0ebbfe/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "patch": "@@ -1,3 +1,15 @@\n+2003-02-07  Stephen Crawley  <crawley@dstc.edu.au>\n+\n+\t* java/math/BigDecimal(valueOf): fix DiagBigDecimal val008, val013\n+\ttests; see patch #1016 on Savannah.\n+\n+2003-02-07  Stephen Crawley  <crawley@dstc.edu.au>\n+\n+\t* java/math/BigDecimal.java (BigDecimal): enhance parsing of exponents\n+\t(toString): do not return Strings starting with . and - erroneously.\n+\tImproves Mauve results to 12 of 600 instead of 16 of 338 on\n+\tDiagBigDecimal.\n+\n 2003-02-07  Stephen Crawley  <crawley@dstc.edu.au>\n \n \t* java/beans/PropertyDescriptor.java"}, {"sha": "9c6e194a01601927d4c15228b18497ef86c9c3a9", "filename": "libjava/java/math/BigDecimal.java", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364df9fc18ca68f508ebb3914117afc7bc0ebbfe/libjava%2Fjava%2Fmath%2FBigDecimal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364df9fc18ca68f508ebb3914117afc7bc0ebbfe/libjava%2Fjava%2Fmath%2FBigDecimal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigDecimal.java?ref=364df9fc18ca68f508ebb3914117afc7bc0ebbfe", "patch": "@@ -178,15 +178,29 @@ else if (Character.digit (c, 10) < 0)\n     // Now parse exponent.\n     if (point < len)\n       {\n-\tint exp = Integer.parseInt (num.substring (point + 1));\n-\texp -= scale;\n-\tif (exp > 0)\n+        point++;\n+        if (num.charAt(point) == '+')\n+          point++;\n+\n+        if (point >= len )\n+          throw new NumberFormatException (\"no exponent following e or E\");\n+\t\n+        try \n \t  {\n-\t    intVal = intVal.multiply (BigInteger.valueOf (10).pow (exp));\n-\t    scale = 0;\n+\t    int exp = Integer.parseInt (num.substring (point));\n+\t    exp -= scale;\n+\t    if (exp > 0)\n+\t      {\n+\t\tintVal = intVal.multiply (BigInteger.valueOf (10).pow (exp));\n+\t\tscale = 0;\n+\t      }\n+\t    else\n+\t      scale = - exp;\n+\t  }\n+        catch (NumberFormatException ex) \n+\t  {\n+\t    throw new NumberFormatException (\"malformed exponent\");\n \t  }\n-\telse\n-\t  scale = - exp;\n       }\n   }\n \n@@ -198,7 +212,7 @@ public static BigDecimal valueOf (long val)\n   public static BigDecimal valueOf (long val, int scale) \n     throws NumberFormatException \n   {\n-    if (scale == 0)\n+    if ((scale == 0) && ((int)val == val))\n       switch ((int) val)\n \t{\n \tcase 0:\n@@ -431,19 +445,29 @@ public String toString ()\n     if (scale == 0) \n       return bigStr;\n \n-    int point = bigStr.length() - scale;\n     boolean negative = (bigStr.charAt(0) == '-');\n-    StringBuffer sb = new StringBuffer(bigStr.length() + 1 + \n-\t\t\t\t       (point <= 0 ? -point+1 : 0));\n-    if (negative)\n-      sb.append('-');\n-    while (point <= 0)\n+\n+    int point = bigStr.length() - scale - (negative ? 1 : 0);\n+\n+    StringBuffer sb = new StringBuffer(bigStr.length() + 2 +\n+\t\t\t\t       (point <= 0 ? (-point + 1) : 0));\n+    if (point <= 0)\n+      {\n+        if (negative)\n+          sb.append('-');\n+        sb.append('0').append('.');\n+        while (point < 0)\n+          {\n+            sb.append('0');\n+            point++;\n+          }\n+        sb.append(bigStr.substring(negative ? 1 : 0));\n+      }\n+    else\n       {\n-\tsb.append('0');\n-\tpoint++;\n+\tsb.append(bigStr);\n+\tsb.insert(point + (negative ? 1 : 0), '.');\n       }\n-    sb.append(bigStr.substring(negative ? 1 : 0));\n-    sb.insert(point, '.');\n     return sb.toString();\n   }\n "}]}