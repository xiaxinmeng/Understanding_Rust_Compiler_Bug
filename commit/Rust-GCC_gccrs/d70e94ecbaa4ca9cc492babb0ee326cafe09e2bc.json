{"sha": "d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwZTk0ZWNiYWE0Y2E5Y2M0OTJiYWJiMGVlMzI2Y2FmZTA5ZTJiYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-05-03T14:20:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-05-03T14:20:04Z"}, "message": "re PR target/6542 (Internal compiler error when building libgcc for sparc-elf)\n\n\tPR target/6542\n\t* config/sparc/sparc.h (leaf_reg_remap): Remove const.\n\t(CONDITIONAL_REGISTER_USAGE): For TARGET_FLAT make\n\tfill leaf_reg_remap with identity.\n\t* config/sparc/sparc.c (leaf_reg_remap): Remove const.\n\n\t* gcc.dg/20020503-1.c: New test.\n\nFrom-SVN: r53095", "tree": {"sha": "17fa126e5a39a24f2426b0c2746069acbf6d7f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17fa126e5a39a24f2426b0c2746069acbf6d7f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b70d6d4b66a1236ec5a904741abb2a0d0ce3922d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70d6d4b66a1236ec5a904741abb2a0d0ce3922d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70d6d4b66a1236ec5a904741abb2a0d0ce3922d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "132164c7adb675604b740f5b279ea66fc4323c6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "patch": "@@ -1,3 +1,11 @@\n+2002-05-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/6542\n+\t* config/sparc/sparc.h (leaf_reg_remap): Remove const.\n+\t(CONDITIONAL_REGISTER_USAGE): For TARGET_FLAT make\n+\tfill leaf_reg_remap with identity.\n+\t* config/sparc/sparc.c (leaf_reg_remap): Remove const.\n+\n 2002-05-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/crti.asm: Remove trailing spaces."}, {"sha": "30b6e8992da13ba2687201dfefa8524589d8b973", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "patch": "@@ -85,7 +85,7 @@ bool sparc_emitting_epilogue;\n /* Vector to say how input registers are mapped to output registers.\n    HARD_FRAME_POINTER_REGNUM cannot be remapped by this function to\n    eliminate it.  You must use -fomit-frame-pointer to get that.  */\n-const char leaf_reg_remap[] =\n+char leaf_reg_remap[] =\n { 0, 1, 2, 3, 4, 5, 6, 7,\n   -1, -1, -1, -1, -1, -1, 14, -1,\n   -1, -1, -1, -1, -1, -1, -1, -1,"}, {"sha": "f582b6a45ed3870205f788377c9fdf2223ee9e79", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "patch": "@@ -1014,12 +1014,16 @@ do\t\t\t\t\t\t\t\t\\\n       fixed_regs[4] = 0;\t\t\t\t\t\\\n     if (TARGET_FLAT)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n+\tint regno;\t\t\t\t\t\t\\\n \t/* Let the compiler believe the frame pointer is still\t\\\n \t   %fp, but output it as %i7.  */\t\t\t\\\n \tfixed_regs[31] = 1;\t\t\t\t\t\\\n \treg_names[HARD_FRAME_POINTER_REGNUM] = \"%i7\";\t\t\\\n \t/* Disable leaf functions */\t\t\t\t\\\n \tmemset (sparc_leaf_regs, 0, FIRST_PSEUDO_REGISTER);\t\\\n+\t/* Make LEAF_REG_REMAP a noop.  */\t\t\t\\\n+\tfor (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\t\\\n+\t  leaf_reg_remap [regno] = regno;\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n@@ -1316,7 +1320,7 @@ extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n extern char sparc_leaf_regs[];\n #define LEAF_REGISTERS sparc_leaf_regs\n \n-extern const char leaf_reg_remap[];\n+extern char leaf_reg_remap[];\n #define LEAF_REG_REMAP(REGNO) (leaf_reg_remap[REGNO])\n \n /* The class value for index registers, and the one for base regs.  */"}, {"sha": "1a533f3753f9f25fe59465580cfca7519ffb3c9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "patch": "@@ -1,3 +1,7 @@\n+2002-05-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020503-1.c: New test.\n+\n 2002-05-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/init/dtor1.C: Make it tougher."}, {"sha": "5f9168eb67d3a240e2d74d226577ac51d21e273c", "filename": "gcc/testsuite/gcc.dg/20020503-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Ftestsuite%2Fgcc.dg%2F20020503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc/gcc%2Ftestsuite%2Fgcc.dg%2F20020503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020503-1.c?ref=d70e94ecbaa4ca9cc492babb0ee326cafe09e2bc", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/6542\n+   This testcase caused ICE on SPARC because the function uses no registers\n+   after optimizing, so even if -mflat make all registers not permitted\n+   for leaf functions, the function was still leaf, but LEAF_REG_REMAP\n+   returned -1 for some registers (like %o0).  */\n+/* { dg-do compile } */\n+/* { do-options \"-O2 -g\" } */\n+/* { do-options \"-O2 -g -mflat\" { target sparc*-*-* } } */\n+\n+void foo (char *a, char *b, char *c, char *d)\n+{\n+}"}]}