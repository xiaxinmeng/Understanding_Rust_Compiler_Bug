{"sha": "ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4YjE4M2JiYmYzZGU0ZDQ0NDdiNWZmNTgyNTcxN2M1YjkyY2M4Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-01T13:39:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-01T13:39:42Z"}, "message": "re PR tree-optimization/37305 (ice in set_value_range, at tree-vrp.c:397)\n\n2008-09-01  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37305\n\t* tree-ssa-ccp.c (ccp_fold): Do not set TREE_OVERFLOW on\n\tthe result of constant conversions.\n\t(fold_gimple_assign): Likewise.\n\n\t* gcc.c-torture/compile/pr37305.c: New testcase.\n\nFrom-SVN: r139864", "tree": {"sha": "b6def91a807329a8ca74f2bc4a22570463460d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6def91a807329a8ca74f2bc4a22570463460d0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68ad446f149f501726ac386f64add454ac37e342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ad446f149f501726ac386f64add454ac37e342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ad446f149f501726ac386f64add454ac37e342"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "52c233c144010a289cdf42497785265f83ef74da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "patch": "@@ -1,3 +1,10 @@\n+2008-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37305\n+\t* tree-ssa-ccp.c (ccp_fold): Do not set TREE_OVERFLOW on\n+\tthe result of constant conversions.\n+\t(fold_gimple_assign): Likewise.\n+\n 2008-09-01  Andrey Belevantsev  <abel@ispras.ru>\n \n \t* sel-sched-ir.c (cmp_v_in_regset_pool): Surround with "}, {"sha": "07830c86a4f4344bf663305b1c03d623559103af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "patch": "@@ -1,3 +1,8 @@\n+2008-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37305\n+\t* gcc.c-torture/compile/pr37305.c: New testcase.\n+\n 2008-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36449"}, {"sha": "7c0673609df2f674cfd71eaf608eef873d9f8ec0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37305.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37305.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37305.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37305.c?ref=ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "patch": "@@ -0,0 +1,19 @@\n+typedef int int32_t;\n+typedef unsigned int uint32_t;\n+static inline int\n+safe_add_s_s (int si1, int si2)\n+{\n+  if ((si1 > 0) && (si2 > 0) && (si1 > (si2)) || (si1 < 0) && (si2 < 0)\n+      && (si1 < ((-__INT_MAX__ - 1) - si2)))\n+    return si1;\n+}\n+\n+uint32_t g_8;\n+uint32_t\n+func_24 (int32_t p_25)\n+{\n+  uint32_t l_30 = -1L;\n+  if ((safe_mod_u_u (1, 1)) | (safe_add_s_s (g_8, l_30)))\n+    return 1;\n+}\n+"}, {"sha": "9fe0753b1d94ef23e1b157e56f6c3b5ad8a56478", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b183bbbf3de4d4447b5ff5825717c5b92cc87/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ff8b183bbbf3de4d4447b5ff5825717c5b92cc87", "patch": "@@ -941,6 +941,7 @@ ccp_fold (gimple stmt)\n                  so this should almost always return a simplified RHS.  */\n               tree lhs = gimple_assign_lhs (stmt);\n               tree op0 = gimple_assign_rhs1 (stmt);\n+\t      tree res;\n \n               /* Simplify the operand down to a constant.  */\n               if (TREE_CODE (op0) == SSA_NAME)\n@@ -976,8 +977,21 @@ ccp_fold (gimple stmt)\n \t\t  return op0;\n \t\t}\n \n-              return fold_unary (subcode, gimple_expr_type (stmt), op0);\n-            }  \n+              res = fold_unary (subcode, gimple_expr_type (stmt), op0);\n+\n+\t      /* If the operation was a conversion do _not_ mark a\n+\t         resulting constant with TREE_OVERFLOW if the original\n+\t\t constant was not.  These conversions have implementation\n+\t\t defined behavior and retaining the TREE_OVERFLOW flag\n+\t\t here would confuse later passes such as VRP.  */\n+\t      if (res\n+\t\t  && TREE_CODE (res) == INTEGER_CST\n+\t\t  && TREE_CODE (op0) == INTEGER_CST\n+\t\t  && CONVERT_EXPR_CODE_P (subcode))\n+\t\tTREE_OVERFLOW (res) = TREE_OVERFLOW (op0);\n+\n+\t      return res;\n+            }\n \n           case GIMPLE_BINARY_RHS:\n             {\n@@ -2644,26 +2658,37 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n       break;\n \n     case GIMPLE_UNARY_RHS:\n-      result = fold_unary (subcode,\n-                           gimple_expr_type (stmt),\n-                           gimple_assign_rhs1 (stmt));\n+      {\n+\ttree rhs = gimple_assign_rhs1 (stmt);\n \n-      if (result)\n-        {\n-          STRIP_USELESS_TYPE_CONVERSION (result);\n-          if (valid_gimple_rhs_p (result))\n-\t    return result;\n-        }\n-      else if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n-\t       && POINTER_TYPE_P (gimple_expr_type (stmt))\n-\t       && POINTER_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n-\t{\n-\t  tree type = gimple_expr_type (stmt);\n-\t  tree t = maybe_fold_offset_to_address (gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t\t integer_zero_node, type);\n-\t  if (t)\n-\t    return t;\n-\t}\n+\tresult = fold_unary (subcode, gimple_expr_type (stmt), rhs);\n+\tif (result)\n+\t  {\n+\t    /* If the operation was a conversion do _not_ mark a\n+\t       resulting constant with TREE_OVERFLOW if the original\n+\t       constant was not.  These conversions have implementation\n+\t       defined behavior and retaining the TREE_OVERFLOW flag\n+\t       here would confuse later passes such as VRP.  */\n+\t    if (CONVERT_EXPR_CODE_P (subcode)\n+\t\t&& TREE_CODE (result) == INTEGER_CST\n+\t\t&& TREE_CODE (rhs) == INTEGER_CST)\n+\t      TREE_OVERFLOW (result) = TREE_OVERFLOW (rhs);\n+\n+\t    STRIP_USELESS_TYPE_CONVERSION (result);\n+\t    if (valid_gimple_rhs_p (result))\n+\t      return result;\n+\t  }\n+\telse if (CONVERT_EXPR_CODE_P (subcode)\n+\t\t && POINTER_TYPE_P (gimple_expr_type (stmt))\n+\t\t && POINTER_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n+\t  {\n+\t    tree type = gimple_expr_type (stmt);\n+\t    tree t = maybe_fold_offset_to_address (gimple_assign_rhs1 (stmt),\n+\t\t\t\t\t\t   integer_zero_node, type);\n+\t    if (t)\n+\t      return t;\n+\t  }\n+      }\n       break;\n \n     case GIMPLE_BINARY_RHS:"}]}