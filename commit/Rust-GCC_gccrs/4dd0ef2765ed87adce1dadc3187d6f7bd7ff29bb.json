{"sha": "4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRkMGVmMjc2NWVkODdhZGNlMWRhZGMzMTg3ZDZmN2JkN2ZmMjliYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-12-03T03:36:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-12-03T03:36:58Z"}, "message": "re PR tree-optimization/59322 (ICE with segfault on valid code at -O1, -O2, and -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/59322\n\t* tree-ssa-threadedge.c (create_edge_and_update_destination_phis):\n\tRemove code which copied jump threading paths.\n\n\tPR tree-optimization/59322\n\t* gcc.c-torture/compile/pr59322.c: New test\n\nFrom-SVN: r205617", "tree": {"sha": "c012f6dfb1604892c329a5bd69465aea214dc3f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c012f6dfb1604892c329a5bd69465aea214dc3f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/comments", "author": null, "committer": null, "parents": [{"sha": "80f1fd0dabb30f82a972b5eb114a7d47104263a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f1fd0dabb30f82a972b5eb114a7d47104263a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f1fd0dabb30f82a972b5eb114a7d47104263a3"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "a9202c7fc9165f8c0d54ad9ca0409a88695c9326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "patch": "@@ -1,3 +1,9 @@\n+2013-12-02  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59322\n+\t* tree-ssa-threadedge.c (create_edge_and_update_destination_phis):\n+\tRemove code which copied jump threading paths.\n+\n 2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/58944"}, {"sha": "80490ced7a0d8b6c04ff5d6eaea1e5bb110373e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "patch": "@@ -1,3 +1,8 @@\n+2013-12-02  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59322\n+\t* gcc.c-torture/compile/pr59322.c: New test\n+\n 2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/58944"}, {"sha": "918d6bdb18e31f6d0ad1cc6dd5c37fbec0c6916c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59322.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59322.c?ref=4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "patch": "@@ -0,0 +1,16 @@\n+\n+int a, b, d;\n+short c;\n+\n+int\n+foo ()\n+{\n+  for (b = 0; b; b = a)\n+    for (c = 18; c < 10; c++)\n+      {\n+\td = c;\n+\tif (d)\n+\t  return 0;\n+      }\n+  return 0;\n+}"}, {"sha": "ad727a1afec5249da9fb18d9b15656d4685d73fb", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=4dd0ef2765ed87adce1dadc3187d6f7bd7ff29bb", "patch": "@@ -421,27 +421,22 @@ create_edge_and_update_destination_phis (struct redirection_data *rd,\n   e->probability = REG_BR_PROB_BASE;\n   e->count = bb->count;\n \n-  /* We have to copy path -- which means creating a new vector as well\n-     as all the jump_thread_edge entries.  */\n-  if (rd->path->last ()->e->aux)\n-    {\n-      vec<jump_thread_edge *> *path = THREAD_PATH (rd->path->last ()->e);\n-      vec<jump_thread_edge *> *copy = new vec<jump_thread_edge *> ();\n+  /* We used to copy the thread path here.  That was added in 2007\n+     and dutifully updated through the representation changes in 2013.\n \n-      /* Sadly, the elements of the vector are pointers and need to\n-\t be copied as well.  */\n-      for (unsigned int i = 0; i < path->length (); i++)\n-\t{\n-\t  jump_thread_edge *x\n-\t    = new jump_thread_edge ((*path)[i]->e, (*path)[i]->type);\n-\t  copy->safe_push (x);\n-\t}\n-      e->aux = (void *)copy;\n-    }\n-  else\n-    {\n-      e->aux = NULL;\n-    }\n+     In 2013 we added code to thread from an interior node through\n+     the backedge to another interior node.  That runs after the code\n+     to thread through loop headers from outside the loop.\n+\n+     The latter may delete edges in the CFG, including those\n+     which appeared in the jump threading path we copied here.  Thus\n+     we'd end up using a dangling pointer.\n+\n+     After reviewing the 2007/2011 code, I can't see how anything\n+     depended on copying the AUX field and clearly copying the jump\n+     threading path is problematical due to embedded edge pointers.\n+     It has been removed.  */\n+  e->aux = NULL;\n \n   /* If there are any PHI nodes at the destination of the outgoing edge\n      from the duplicate block, then we will need to add a new argument"}]}