{"sha": "d9fbca261ef44d0d58573baff8719a6a01ed0bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmYmNhMjYxZWY0NGQwZDU4NTczYmFmZjg3MTlhNmEwMWVkMGJjYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-09-15T22:52:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-15T22:52:52Z"}, "message": "locale.cc (locale::locale(const char* __name)): Consolidate name setting.\n\n\n2000-09-15  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n        * src/locale.cc (locale::locale(const char* __name)): Consolidate\n        name setting. Add checks for NULL __name pointers. Remove calls to\n        _S_initialize() as initial locale initialization can either be\n        assumed, or needs to be made consistent throughout locale\n        constructors.\n        (locale::locale(const locale& __other, const char* __name,\n        category __cat): Add checks for NULL name. Add checks for\n        assignment to self.\n        * src/localename.cc (locale::_Impl:: _Impl(const _Impl& __other,\n        const string& __name, category __cat, size_t __refs)): Set correct\n        name, has_name values.\n        * testsuite/22_locale/ctor_copy_dtor.cc (test01): More tests.\n        * docs/22_locale/locale.html: New file, more unfinished docs...\n\nFrom-SVN: r36451", "tree": {"sha": "2f91e95f8c9e6370828344303e0c0129ce8d7ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f91e95f8c9e6370828344303e0c0129ce8d7ff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fbca261ef44d0d58573baff8719a6a01ed0bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbca261ef44d0d58573baff8719a6a01ed0bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fbca261ef44d0d58573baff8719a6a01ed0bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fbca261ef44d0d58573baff8719a6a01ed0bca/comments", "author": null, "committer": null, "parents": [{"sha": "04807c286441c25e0997b453f308ffee25e3524e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04807c286441c25e0997b453f308ffee25e3524e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04807c286441c25e0997b453f308ffee25e3524e"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "4de4ac33f46b36cae3ff88c8f7015bcfc1acd1cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9fbca261ef44d0d58573baff8719a6a01ed0bca", "patch": "@@ -1,3 +1,19 @@\n+2000-09-15  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/locale.cc (locale::locale(const char* __name)): Consolidate\n+\tname setting. Add checks for NULL __name pointers. Remove calls to\n+\t_S_initialize() as initial locale initialization can either be\n+\tassumed, or needs to be made consistent throughout locale\n+\tconstructors.\n+\t(locale::locale(const locale& __other, const char* __name,\n+\tcategory __cat): Add checks for NULL name. Add checks for\n+\tassignment to self.\n+\t* src/localename.cc (locale::_Impl:: _Impl(const _Impl& __other,\n+\tconst string& __name, category __cat, size_t __refs)): Set correct\n+\tname, has_name values.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): More tests.\n+\t* docs/22_locale/locale.html: New file, more unfinished docs...\n+\t\n 2000-09-14  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* src/locale.cc (locale::name()): Implement."}, {"sha": "f3966ab2497eed513876078b976903c60b390fe2", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=d9fbca261ef44d0d58573baff8719a6a01ed0bca", "patch": "@@ -554,20 +554,32 @@ namespace std {\n \n   locale::locale(const char* __name)\n   {\n-    _S_initialize();\n-    if (strcmp(__name, \"C\") == 0 || strcmp(__name, \"POSIX\") == 0)\n-      (_M_impl = _S_classic)->_M_add_reference();\n-    else\n+    if (__name)\n       {\n+\tif (strcmp(__name, \"C\") == 0 || strcmp(__name, \"POSIX\") == 0)\n+\t  (_M_impl = _S_classic)->_M_add_reference();\n \t// Might throw:\n-\t_M_impl = new _Impl(*_S_classic, __name, all, 1);\n-        _M_impl->_M_has_name = true;\n+\telse\n+\t  _M_impl = new _Impl(*_S_classic, __name, all, 1);\n       }\n+    else\n+      throw runtime_error(\"attempt to create named locale from NULL name\");\n   }\n \n   locale::locale(const locale& __other, const char* __name, category __cat)\n-  : _M_impl(new _Impl(*__other._M_impl, __name, _S_normalize_category(__cat), 1))\n-  { }\n+  { \n+    if (__name)\n+      {\n+\tif (__other.name() == __name)\n+\t  (_M_impl = __other._M_impl)->_M_add_reference();\n+\t// Might throw:\n+\telse\n+\t  _M_impl = new _Impl(*__other._M_impl, __name,\n+\t\t\t      _S_normalize_category(__cat), 1);\n+      }\n+    else\n+      throw runtime_error(\"attempt to create locale from NULL named locale\");\n+  }\n \n   bool\n   locale::operator==(const locale& __rhs) const throw()"}, {"sha": "51872d8a1549e79de297d2b7bab9594438fc2459", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=d9fbca261ef44d0d58573baff8719a6a01ed0bca", "patch": "@@ -92,7 +92,7 @@ namespace std {\n     : _M_references(__refs - 1)\n     //  , _M_facets(other._M_facets)\n     //  , _M_category_names(other._M_category_names)\n-    , _M_has_name(__other._M_has_name), _M_name(__other._M_name)\n+    , _M_has_name(__name != \"*\"), _M_name(__name)\n   {\n #if 1\n     typedef vector<facet*, allocator<facet*> > __vec_facet;"}, {"sha": "5a9a42acd02e4b3384868b9efc352a6839ffbbfd", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fbca261ef44d0d58573baff8719a6a01ed0bca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=d9fbca261ef44d0d58573baff8719a6a01ed0bca", "patch": "@@ -63,7 +63,7 @@ void test01()\n   locale loc07(\"\");\n   VERIFY (loc07 != loc01);  \n   VERIFY (loc07 != loc02);  \n-  VERIFY (loc06.name() == \"\");\n+  VERIFY (loc07.name() == \"\");\n   try\n     { locale loc08(static_cast<const char*>(NULL)); }\n   catch(runtime_error& obj)\n@@ -73,6 +73,29 @@ void test01()\n \n   // 4\n   // locale(const locale& other, const char* std_name, category)\n+  locale loc09(loc06, \"C\", locale::ctype);\n+  VERIFY (loc09.name() == \"fr_FR\");\n+  VERIFY (loc09 != loc01);  \n+  VERIFY (loc09 != loc06);  \n+  // XXX somehow check that the ctype, codecvt facets have \"C\" locale bits...\n+\n+  locale loc10(loc02, \"C\", locale::ctype);\n+  VERIFY (loc10.name() == \"*\");\n+  VERIFY (loc10 != loc01);   // As not named, even tho facets same...\n+  VERIFY (loc10 != loc02);  \n+  // XXX somehow check that the ctype, codecvt facets have \"C\" locale bits...\n+\n+  locale loc11(loc01, \"C\", locale::ctype);\n+  VERIFY (loc11.name() == \"C\");\n+  VERIFY (loc11 == loc01);  \n+  // XXX somehow check that the ctype, codecvt facets have \"C\" locale bits...\n+\n+  try\n+    { locale loc12(loc01, static_cast<const char*>(NULL), locale::ctype); }\n+  catch(runtime_error& obj)\n+    { VERIFY (true); }\n+  catch(...)\n+    { VERIFY (false); }\n   \n \n "}]}