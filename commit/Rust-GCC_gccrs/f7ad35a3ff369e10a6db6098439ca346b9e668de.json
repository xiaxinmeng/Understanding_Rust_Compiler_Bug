{"sha": "f7ad35a3ff369e10a6db6098439ca346b9e668de", "node_id": "C_kwDOANBUbNoAKGY3YWQzNWEzZmYzNjllMTBhNmRiNjA5ODQzOWNhMzQ2YjllNjY4ZGU", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-04-07T09:50:03Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-23T10:44:26Z"}, "message": "[PATCH 11/15] aarch64: Make bti pass generic so it can be used by the arm backend\n\nHi all,\n\nthis patch splits and restructures the aarch64 bti pass code in order\nto have it usable by the arm backend as well.  These changes have no\nfunctional impact.\n\nBest Regards\n\n  Andrea\n\ngcc/Changelog\n\n\t* config.gcc (aarch64*-*-*): Rename 'aarch64-bti-insert.o' into\n\t'aarch-bti-insert.o'.\n\t* config/aarch64/aarch64-protos.h: Remove 'aarch64_bti_enabled'\n\tproto.\n\t* config/aarch64/aarch64.cc (aarch_bti_enabled): Rename.\n\t(aarch_bti_j_insn_p, aarch_pac_insn_p): New functions.\n\t(aarch64_output_mi_thunk)\n\t(aarch64_print_patchable_function_entry)\n\t(aarch64_file_end_indicate_exec_stack): Update renamed function\n\tcalls to renamed functions.\n\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Likewise.\n\t* config/aarch64/t-aarch64 (aarch-bti-insert.o): Update\n\ttarget.\n\t* config/aarch64/aarch64-bti-insert.cc: Delete.\n\t* config/arm/aarch-bti-insert.cc: New file including and\n\tgeneralizing code from aarch64-bti-insert.cc.\n\t* config/arm/aarch-common-protos.h: Update.", "tree": {"sha": "e925ff4f661a428fd8de3cf8931f4d52105338fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e925ff4f661a428fd8de3cf8931f4d52105338fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7ad35a3ff369e10a6db6098439ca346b9e668de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ad35a3ff369e10a6db6098439ca346b9e668de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ad35a3ff369e10a6db6098439ca346b9e668de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ad35a3ff369e10a6db6098439ca346b9e668de/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "651460b452d752058e38620bf64541822e25c69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651460b452d752058e38620bf64541822e25c69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651460b452d752058e38620bf64541822e25c69c"}], "stats": {"total": 139, "additions": 77, "deletions": 62}, "files": [{"sha": "0d5a5ee381224237a1c738c8d03fb62661b7ad2d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -338,7 +338,7 @@ aarch64*-*-*)\n \tc_target_objs=\"aarch64-c.o\"\n \tcxx_target_objs=\"aarch64-c.o\"\n \td_target_objs=\"aarch64-d.o\"\n-\textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o aarch64-sve-builtins-sve2.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch64-bti-insert.o aarch64-cc-fusion.o\"\n+\textra_objs=\"aarch64-builtins.o aarch-common.o aarch64-sve-builtins.o aarch64-sve-builtins-shapes.o aarch64-sve-builtins-base.o aarch64-sve-builtins-sve2.o cortex-a57-fma-steering.o aarch64-speculation.o falkor-tag-collision-avoidance.o aarch-bti-insert.o aarch64-cc-fusion.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/aarch64/aarch64-builtins.cc \\$(srcdir)/config/aarch64/aarch64-sve-builtins.h \\$(srcdir)/config/aarch64/aarch64-sve-builtins.cc\"\n \ttarget_has_targetm_common=yes\n \t;;"}, {"sha": "578ec6f45b06347d90f951b37064006786baf10f", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -179,7 +179,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_RNG, \"__ARM_FEATURE_RNG\", pfile);\n   aarch64_def_or_undef (TARGET_MEMTAG, \"__ARM_FEATURE_MEMORY_TAGGING\", pfile);\n \n-  aarch64_def_or_undef (aarch64_bti_enabled (),\n+  aarch64_def_or_undef (aarch_bti_enabled (),\n \t\t\t\"__ARM_FEATURE_BTI_DEFAULT\", pfile);\n \n   cpp_undef (pfile, \"__ARM_FEATURE_PAC_DEFAULT\");"}, {"sha": "6ab6d49af3773b4a1b7cc4f5bd135dfb5ee48d1c", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -905,7 +905,6 @@ void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n bool aarch64_return_address_signing_enabled (void);\n-bool aarch64_bti_enabled (void);\n void aarch64_save_restore_target_globals (tree);\n void aarch64_addti_scratch_regs (rtx, rtx, rtx *,\n \t\t\t\t rtx *, rtx *,"}, {"sha": "3105eb0c7f2b5f97f90241b55b4983268330f7ae", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -8935,11 +8935,61 @@ aarch64_return_address_signing_enabled (void)\n \n /* Return TRUE if Branch Target Identification Mechanism is enabled.  */\n bool\n-aarch64_bti_enabled (void)\n+aarch_bti_enabled (void)\n {\n   return (aarch_enable_bti == 1);\n }\n \n+/* Check if INSN is a BTI J insn.  */\n+bool\n+aarch_bti_j_insn_p (rtx_insn *insn)\n+{\n+  if (!insn || !INSN_P (insn))\n+    return false;\n+\n+  rtx pat = PATTERN (insn);\n+  return GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == UNSPECV_BTI_J;\n+}\n+\n+/* Check if X (or any sub-rtx of X) is a PACIASP/PACIBSP instruction.  */\n+bool\n+aarch_pac_insn_p (rtx x)\n+{\n+  if (!INSN_P (x))\n+    return false;\n+\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, PATTERN (x), ALL)\n+    {\n+      rtx sub = *iter;\n+      if (sub && GET_CODE (sub) == UNSPEC)\n+\t{\n+\t  int unspec_val = XINT (sub, 1);\n+\t  switch (unspec_val)\n+\t    {\n+\t    case UNSPEC_PACIASP:\n+            case UNSPEC_PACIBSP:\n+\t      return true;\n+\n+\t    default:\n+\t      return false;\n+\t    }\n+\t  iter.skip_subrtxes ();\n+\t}\n+    }\n+  return false;\n+}\n+\n+rtx aarch_gen_bti_c (void)\n+{\n+  return gen_bti_c ();\n+}\n+\n+rtx aarch_gen_bti_j (void)\n+{\n+  return gen_bti_j ();\n+}\n+\n /* The caller is going to use ST1D or LD1D to save or restore an SVE\n    register in mode MODE at BASE_RTX + OFFSET, where OFFSET is in\n    the range [1, 16] * GET_MODE_SIZE (MODE).  Prepare for this by:\n@@ -10319,7 +10369,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   rtx_insn *insn;\n   const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n \n-  if (aarch64_bti_enabled ())\n+  if (aarch_bti_enabled ())\n     emit_insn (gen_bti_c());\n \n   reload_completed = 1;\n@@ -22636,7 +22686,7 @@ aarch64_print_patchable_function_entry (FILE *file,\n \t\t\t       GEN_INT (record_p));\n   basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n \n-  if (!aarch64_bti_enabled ()\n+  if (!aarch_bti_enabled ()\n       || cgraph_node::get (cfun->decl)->only_called_directly_p ())\n     {\n       /* Emit the patchable_area at the beginning of the function.  */\n@@ -27107,7 +27157,7 @@ aarch64_file_end_indicate_exec_stack ()\n   file_end_indicate_exec_stack ();\n \n   unsigned feature_1_and = 0;\n-  if (aarch64_bti_enabled ())\n+  if (aarch_bti_enabled ())\n     feature_1_and |= GNU_PROPERTY_AARCH64_FEATURE_1_BTI;\n \n   if (aarch_ra_sign_scope != AARCH_FUNCTION_NONE)"}, {"sha": "a9a244ab6d6dda8ab6feffae2af5636e9c650b1c", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -161,14 +161,14 @@ falkor-tag-collision-avoidance.o: \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/falkor-tag-collision-avoidance.cc\n \n-aarch64-bti-insert.o: $(srcdir)/config/aarch64/aarch64-bti-insert.cc \\\n+aarch-bti-insert.o: $(srcdir)/config/arm/aarch-bti-insert.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(TM_H) $(REGS_H) insn-config.h $(RTL_BASE_H) \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n     output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n     $(CONTEXT_H) $(TREE_PASS_H) regrename.h \\\n     $(srcdir)/config/aarch64/aarch64-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/config/aarch64/aarch64-bti-insert.cc\n+\t\t$(srcdir)/config/arm/aarch-bti-insert.cc\n \n aarch64-cc-fusion.o: $(srcdir)/config/aarch64/aarch64-cc-fusion.cc \\\n     $(CONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(BACKEND_H) $(RTL_H) $(DF_H) \\"}, {"sha": "880f0de7a62ba307774a552c1c6b256b200bf394", "filename": "gcc/config/arm/aarch-bti-insert.cc", "status": "renamed", "additions": 14, "deletions": 53, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-bti-insert.cc?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -42,18 +42,20 @@\n #include \"tree-pass.h\"\n #include \"cgraph.h\"\n \n-/* This pass enables the support for Branch Target Identification Mechanism\n-   for AArch64.  This is a new security feature introduced in ARMv8.5-A\n-   archtitecture.  A BTI instruction is used to guard against the execution\n-   of instructions which are not the intended target of an indirect branch.\n+/* This pass enables the support for Branch Target Identification Mechanism for\n+   Arm/AArch64.  This is a security feature introduced in ARMv8.5-A\n+   architecture and ARMv8.1-M.  A BTI instruction is used to guard against the\n+   execution of instructions which are not the intended target of an indirect\n+   branch.\n \n    Outside of a guarded memory region, a BTI instruction executes as a NOP.\n    Within a guarded memory region any target of an indirect branch must be\n    a compatible BTI or BRK, HLT, PACIASP, PACIBASP instruction (even if the\n    branch is triggered in a non-guarded memory region).  An incompatibility\n    generates a Branch Target Exception.\n \n-   The compatibility of the BTI instruction is as follows:\n+   The compatibility of the BTI instruction is as follows (AArch64\n+   examples):\n    BTI j : Can be a target of any indirect jump (BR Xn).\n    BTI c : Can be a target of any indirect call (BLR Xn and BR X16/X17).\n    BTI jc: Can be a target of any indirect call or indirect jump.\n@@ -90,47 +92,6 @@ const pass_data pass_data_insert_bti =\n   0, /* todo_flags_finish.  */\n };\n \n-/* Check if X (or any sub-rtx of X) is a PACIASP/PACIBSP instruction.  */\n-static bool\n-aarch64_pac_insn_p (rtx x)\n-{\n-  if (!INSN_P (x))\n-    return false;\n-\n-  subrtx_var_iterator::array_type array;\n-  FOR_EACH_SUBRTX_VAR (iter, array, PATTERN (x), ALL)\n-    {\n-      rtx sub = *iter;\n-      if (sub && GET_CODE (sub) == UNSPEC)\n-\t{\n-\t  int unspec_val = XINT (sub, 1);\n-\t  switch (unspec_val)\n-\t    {\n-\t    case UNSPEC_PACIASP:\n-            /* fall-through.  */\n-            case UNSPEC_PACIBSP:\n-\t      return true;\n-\n-\t    default:\n-\t      return false;\n-\t    }\n-\t  iter.skip_subrtxes ();\n-\t}\n-    }\n-  return false;\n-}\n-\n-/* Check if INSN is a BTI J insn.  */\n-static bool\n-aarch64_bti_j_insn_p (rtx_insn *insn)\n-{\n-  if (!insn || !INSN_P (insn))\n-    return false;\n-\n-  rtx pat = PATTERN (insn);\n-  return GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == UNSPECV_BTI_J;\n-}\n-\n /* Insert the BTI instruction.  */\n /* This is implemented as a late RTL pass that runs before branch\n    shortening and does the following.  */\n@@ -155,7 +116,7 @@ rest_of_insert_bti (void)\n \t       && (LABEL_PRESERVE_P (insn)\n \t\t   || bb->flags & BB_NON_LOCAL_GOTO_TARGET))\n \t    {\n-\t      bti_insn = gen_bti_j ();\n+\t      bti_insn = aarch_gen_bti_j ();\n \t      emit_insn_after (bti_insn, insn);\n \t      continue;\n \t    }\n@@ -177,10 +138,10 @@ rest_of_insert_bti (void)\n \t\t    {\n \t\t      label = as_a <rtx_insn *> (XEXP (RTVEC_ELT (vec, j), 0));\n \t\t      rtx_insn *next = next_nonnote_nondebug_insn (label);\n-\t\t      if (aarch64_bti_j_insn_p (next))\n+\t\t      if (aarch_bti_j_insn_p (next))\n \t\t\tcontinue;\n \n-\t\t      bti_insn = gen_bti_j ();\n+\t\t      bti_insn = aarch_gen_bti_j ();\n \t\t      emit_insn_after (bti_insn, label);\n \t\t    }\n \t\t}\n@@ -191,7 +152,7 @@ rest_of_insert_bti (void)\n \t     will return.  */\n \t  if (CALL_P (insn) && (find_reg_note (insn, REG_SETJMP, NULL)))\n \t    {\n-\t      bti_insn = gen_bti_j ();\n+\t      bti_insn = aarch_gen_bti_j ();\n \t      emit_insn_after (bti_insn, insn);\n \t      continue;\n \t    }\n@@ -207,9 +168,9 @@ rest_of_insert_bti (void)\n     {\n       bb = ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb;\n       insn = BB_HEAD (bb);\n-      if (!aarch64_pac_insn_p (get_first_nonnote_insn ()))\n+      if (!aarch_pac_insn_p (get_first_nonnote_insn ()))\n \t{\n-\t  bti_insn = gen_bti_c ();\n+\t  bti_insn = aarch_gen_bti_c ();\n \t  emit_insn_before (bti_insn, insn);\n \t}\n     }\n@@ -229,7 +190,7 @@ class pass_insert_bti : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return aarch64_bti_enabled ();\n+      return aarch_bti_enabled ();\n     }\n \n   virtual unsigned int execute (function *)", "previous_filename": "gcc/config/aarch64/aarch64-bti-insert.cc"}, {"sha": "15c8198048a0890caf47538df7909697c243eb05", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ad35a3ff369e10a6db6098439ca346b9e668de/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=f7ad35a3ff369e10a6db6098439ca346b9e668de", "patch": "@@ -42,6 +42,11 @@ extern int arm_no_early_alu_shift_value_dep (rtx, rtx);\n extern int arm_no_early_mul_dep (rtx, rtx);\n extern int arm_no_early_store_addr_dep (rtx, rtx);\n extern bool arm_rtx_shift_left_p (rtx);\n+extern bool aarch_bti_enabled (void);\n+extern bool aarch_bti_j_insn_p (rtx_insn *);\n+extern bool aarch_pac_insn_p (rtx);\n+extern rtx aarch_gen_bti_c (void);\n+extern rtx aarch_gen_bti_j (void);\n \n /* RTX cost table definitions.  These are used when tuning for speed rather\n    than for size and should reflect the _additional_ cost over the cost"}]}