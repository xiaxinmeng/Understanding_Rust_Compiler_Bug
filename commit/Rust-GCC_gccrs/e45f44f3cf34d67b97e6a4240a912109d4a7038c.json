{"sha": "e45f44f3cf34d67b97e6a4240a912109d4a7038c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1ZjQ0ZjNjZjM0ZDY3Yjk3ZTZhNDI0MGE5MTIxMDlkNGE3MDM4Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T21:35:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-28T21:35:46Z"}, "message": "Do not permit method expressions with pointers to interface types.\n\nFrom-SVN: r171633", "tree": {"sha": "9c21b711fcf667aa97dd32d19a1eb998c122b7ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c21b711fcf667aa97dd32d19a1eb998c122b7ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45f44f3cf34d67b97e6a4240a912109d4a7038c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45f44f3cf34d67b97e6a4240a912109d4a7038c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45f44f3cf34d67b97e6a4240a912109d4a7038c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45f44f3cf34d67b97e6a4240a912109d4a7038c/comments", "author": null, "committer": null, "parents": [{"sha": "8a445129177df896f4f78170750120eac9c90e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a445129177df896f4f78170750120eac9c90e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a445129177df896f4f78170750120eac9c90e12"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "d1de2037b9e400d09bde2f4743890791dc6f46d2", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45f44f3cf34d67b97e6a4240a912109d4a7038c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45f44f3cf34d67b97e6a4240a912109d4a7038c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e45f44f3cf34d67b97e6a4240a912109d4a7038c", "patch": "@@ -10263,7 +10263,7 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   bool is_ambiguous;\n   Method* method = nt->method_function(name, &is_ambiguous);\n   const Typed_identifier* imethod = NULL;\n-  if (method == NULL)\n+  if (method == NULL && !is_pointer)\n     {\n       Interface_type* it = nt->interface_type();\n       if (it != NULL)\n@@ -10273,12 +10273,14 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   if (method == NULL && imethod == NULL)\n     {\n       if (!is_ambiguous)\n-\terror_at(location, \"type %<%s%> has no method %<%s%>\",\n+\terror_at(location, \"type %<%s%s%> has no method %<%s%>\",\n+\t\t is_pointer ? \"*\" : \"\",\n \t\t nt->message_name().c_str(),\n \t\t Gogo::message_name(name).c_str());\n       else\n-\terror_at(location, \"method %<%s%> is ambiguous in type %<%s%>\",\n+\terror_at(location, \"method %<%s%s%> is ambiguous in type %<%s%>\",\n \t\t Gogo::message_name(name).c_str(),\n+\t\t is_pointer ? \"*\" : \"\",\n \t\t nt->message_name().c_str());\n       return Expression::make_error(location);\n     }"}]}