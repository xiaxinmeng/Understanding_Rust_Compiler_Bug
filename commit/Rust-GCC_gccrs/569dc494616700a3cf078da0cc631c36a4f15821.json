{"sha": "569dc494616700a3cf078da0cc631c36a4f15821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5ZGM0OTQ2MTY3MDBhM2NmMDc4ZGEwY2M2MzFjMzZhNGYxNTgyMQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-08-05T14:53:09Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-05T14:53:09Z"}, "message": "Makefile.in (FPBIT_FUNCS, [...]): Remove.\n\n\tgcc:\n\t* Makefile.in (FPBIT_FUNCS, DPBIT_FUNCS, TPBIT_FUNCS): Remove.\n\t(libgcc-support): Remove $(FPBIT), $(DPBIT), $(TPBIT)\n\tdependencies.\n\t(libgcc.mvars): Remove FPBIT, FPBIT_FUNCS, DPBIT, DPBIT_FUNCS,\n\tTPBIT, TPBIT_FUNCS.\n\t* config/fp-bit.c, config/fp-bit.h: Move to ../libgcc.\n\t* config/arm/t-strongarm-elf (FPBIT, DPBIT, dp-bit.c, fp-bit.c):\n\tRemove.\n\t* config/arm/t-vxworks: Likewise.\n\t* config/arm/t-wince-pe: Likewise.\n\t* config/avr/t-avr (fp-bit.c, FPBIT): Remove.\n\t* config/bfin/t-bfin (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/bfin/t-bfin-elf: Likewise.\n\t* config/bfin/t-bfin-linux: Likewise.\n\t* config/bfin/t-bfin-uclinux: Likewise.\n\t* config/cris/t-cris (FPBIT, DPBIT, dp-bit.c, tmplibgcc_fp_bit.c):\n\tRemove.\n\t* config/fr30/t-fr30: Likewise.\n\t* config/frv/t-frv: Likewise.\n\t* config/h8300/t-h8300 (FPBIT, fp-bit.c): Remove.\n\t* config/iq2000/t-iq2000 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/m32c/t-m32c: Likewise.\n\t* config/m32r/t-linux: (LIB2FUNCS_EXTRA, fp-bit.c, dp-bit.c): Remove.\n\t* config/m32r/t-m32r (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/mcore/t-mcore: Likewise.\n\t* config/mep/t-mep: Likewise.\n\t* config/microblaze/t-microblaze: Likewise.\n\t* config/mips/t-linux64 (TPBIT, tp-bit.c): Remove.\n\t* config/mips/t-mips (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/mips/t-sdemtk (FPBIT, DPBIT): Remove.\n\t* config/mips/t-sr71k (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/mn10300/t-linux: Remove.\n\t* config/mn10300/t-mn10300 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/pdp11/t-pdp11: Likewise.\n\t* config/picochip/t-picochip (FPBIT, fp-bit.c): Remove.\n\t* config/rs6000/ppc64-fp.c: Move to ../libgcc/config/rs6000.\n\t* config/rs6000/t-aix43 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t(LIB2FUNCS_EXTRA): Remove $(srcdir)/config/rs6000/ppc64-fp.c.\n\t* config/rs6000/t-aix52: Likewise.\n\t* config/rs6000/t-darwin (LIB2FUNCS_EXTRA): Remove\n\t$(srcdir)/config/rs6000/ppc64-fp.c.\n\t* config/rs6000/t-fprules-fpbit: Remove.\n\t* config/rs6000/t-linux64 (LIB2FUNCS_EXTRA): Remove.\n\t* config/rs6000/t-lynx (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/sh/t-netbsd (FPBIT, DPBIT): Remove.\n\t* config/sh/t-sh (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/sparc/t-elf: Likewise.\n\t* config/sparc/t-leon: Likewise.\n\t* config/sparc/t-leon3: Likewise.\n\t* config/spu/t-spu-elf: Likewise.\n\t(DPBIT_FUNCS): Remove.\n\t* config/stormy16/t-stormy16 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n\t* config/v850/t-v850: Likewise.\n\t* config.gcc (avr-*-rtems*): Add avr/avr-lib.h to libgcc_tm_file.\n\t(avr-*-*): Likewise.\n\t(h8300-*-rtems*): Set libgcc_tm_file.\n\t(h8300-*-elf*): Likewise.\n\t(powerpc-*-eabisimaltivec*): Remove rs6000/t-fprules-fpbit from\n\ttmake_file.\n\t(powerpc-*-eabisim*): Likewise.\n\t(powerpc-*-elf*): Likewise.\n\t(powerpc-*-eabialtivec*): Likewise.\n\t(powerpc-xilinx-eabi*): Likewise.\n\t(powerpc-*-eabi*): Likewise.\n\t(powerpc-*-rtems*): Likewise.\n\t(powerpc-wrs-vxworks, powerpc-wrs-vxworksae): Likewise.\n\t(powerpcle-*-elf*): Likewise.\n\t(powerpcle-*-eabisim*): Likewise.\n\t(powerpcle-*-eabi*): Likewise.\n\t(rx-*-elf*): Add rx/rx-lib.h to libgcc_tm_file.\n\t(am33_2.0-*-linux*): Remove mn10300/t-linux from tmake_file.\n\t* doc/fragments.texi (Target Fragment, Floating Point Emulation):\n\tRemove.\n\n\tgcc/po:\n\t* EXCLUDES (config/fp-bit.c, config/fp-bit.h): Remove.\n\n\tlibgcc:\n\t* Makefile.in (double_type_size, long_double_type_size): Set.\n\tRemove $(fpbit-in-libgcc) support.\n\t(FPBIT_FUNCS, DPBIT_FUNCS, TPBIT_FUNCS): New variables.\n\t(fpbit-src): New variable.\n\t($(fpbit-o), $(fpbit-s-o)): Use $(fpbit-src) instead of $(FPBIT).\n\tCompile with -DFLOAT $(FPBIT_CFLAGS).\n\tUse $<.\n\t($(dpbit-o), $(dpbit-s-o)): Use $(fpbit-src) instead of $(DPBIT).\n\tCompile with $(FPBIT_CFLAGS).\n\tUse $<.\n\t($(tpbit-o), $(tpbit-s-o): Use $(fpbit-src) instead of $(TPBIT).\n\tCompile with -DFLOAT $(TPBIT_CFLAGS).\n\tUse $<.\n\t* configure.ac (double_type_size, long_double_type_size):\n\tDetermine and substitute.\n\t* configure: Regenerate.\n\t* fp-bit.c, fp-bit.h: New files.\n\t* config/avr/avr-lib.h, config/h8300/h8300-lib.h: New files.\n\t* config/mips/t-irix6 (TPBIT, $(gcc_objdir)/tp-bit.c): Remove.\n\t* config/mips/t-mips: New file.\n\t* config/mips/t-sdemtk: New file.\n\t* config/rs6000/ppc64-fp.c: New file.\n\t* config/rs6000/t-darwin (LIB2ADD): Add\n\t$(srcdir)/config/rs6000/ppc64-fp.c.\n\t* config/rs6000/t-ppc64-fp: New file.\n\t* config/rx/rx-lib.h: New file.\n\t* config/rx/t-rx (FPBIT): Set to true.\n\t($(gcc_objdir)/fp-bit.c): Remove.\n\t(DPBIT): Set to true only with -m64bit-doubles.\n\t($(gcc_objdir)/dp-bit.c): Remove.\n\t* config/sparc/t-softfp: Remove.\n\t* config/spu/t-elf: New file.\n\t* config/t-fdpbit, config/t-fpbit: New files.\n\t* config.host (m32c*-*-*): Add t-fdpbit to tmake_file.\n\t(mips*-*-*): Likewise.\n\t(arm-wrs-vxworks): Likewise.\n\t(arm*-*-freebsd*): Likewise.\n\t(avr-*-rtems*): Add t-fpbit to tmake_file.\n\t(avr-*-*): Likewise.\n\t(bfin*-elf*): Add t-fdpbit to tmake_file.\n\t(bfin*-uclinux*): Likewise.\n\t(bfin*-linux-uclibc*): Likewise.\n\t(bfin*-rtems*): New case.\n\tAdd t-fdpbit to tmake_file.\n\t(bfin*-*): Add t-fdpbit to tmake_file.\n\t(crisv32-*-elf): Likewise.\n\t(cris-*-linux*): Likewise.\n\t(fr30-*-elf): Likewise.\n\t(frv-*-elf, frv-*-*linux*): Likewise.\n\t(h8300-*-rtems*, h8300-*-elf*): Add t-fpbit to tmake_file.\n\t(iq2000*-*-elf*): Add t-fdpbit to tmake_file.\n\t(m32r-*-elf*): Likewise.\n\t(m32rle-*-elf*): Likewise.\n\t(m32r-*-linux*): Likewise.\n\t(m32rle-*-linux*): Likewise.\n\t(mcore-*-elf): Add t-fdpbit to tmake_file.\n\t(microblaze*-*-*): Likewise.\n\t(mips-sgi-irix6.5*): Add t-tpbit to tmake_file.\n\t(mips*-*-netbsd*): Add mips/t-mips to tmake_file.\n\t(mips64*-*-linux*): Also handle mipsisa64*-*-linux*.\n\tFix typo.\n\tAdd mips/t-tpbit to tmake-file.\n\t(mips*-*-linux*): Fix typo.\n\t(mips*-sde-elf*): New case\n\tAdd mips/t-sdemtk unless using newlib.\n\t(mipsisa64sr71k-*-elf*): Add t-fdpbit to tmake_file.\n\t(mipsisa64sb1-*-elf*): Add mips/t-mips to tmake_file.\n\t(mn10300-*-*): Likewise.\n\t(pdp11-*-*): Likewise.\n\t(picochip-*-*): Add t-fpbit to tmake_file.\n\t(powerpc-*-eabisimaltivec*): Likewise.\n\t(powerpc-*-eabisim*): Likewise.\n\t(powerpc-*-elf*): Likewise.\n\t(powerpc-*-eabialtivec*): Likewise.\n\t(powerpc-xilinx-eabi*): New case.\n\tAdd t-fdpbit to tmake_file.\n\t(powerpc-*-eabi*):  Add t-fdpbit to tmake_file.\n\t(powerpc-*-rtems*): Likewise.\n\t(powerpc-*-linux*, powerpc64-*-linux*): Add rs6000/t-ppc64-fp to\n\ttmake_file.\n\t(powerpc-wrs-vxworks, powerpc-wrs-vxworksae): Add t-fdpbit to\n\ttmake_file.\n\t(powerpc-*-lynxos*): Likewise.\n\t(powerpcle-*-elf*): Likewise.\n\t(powerpcle-*-eabisim*): Likewise.\n\t(powerpcle-*-eabi*): Likewise.\n\t(rs6000-ibm-aix4.[3456789]*, powerpc-ibm-aix4.[3456789]*): Add\n\tt-fdpbit, rs6000/t-ppc64-fp to tmake_file.\n\t(rs6000-ibm-aix5.1.*, powerpc-ibm-aix5.1.*): Likewise.\n\t(rs6000-ibm-aix[56789].*, powerpc-ibm-aix[56789].*): Likewise.\n\t(rx-*-elf): Add t-fdpbit to tmake_file.\n\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*)\n\t(sh[2346lbe]*-*-linux*, sh-*-netbsdelf*, shl*-*-netbsdelf*)\n\t(sh5-*-netbsd*, sh5l*-*-netbsd*, sh64-*-netbsd*)\n\t(sh64l*-*-netbsd*): Add t-fdpbit to tmake_file except on\n\tsh*-*-netbsd*.\n\t(sh-*-rtems*): Add t-fdpbit to tmake_file.\n\t(sh-wrs-vxworks): Likewise.\n\t(sparc-*-elf*): Replace sparc/t-softfp by t-fdpbit in tmake_file.\n\t(sparc-*-linux*): Add t-fdpbit to tmake_file for *-leon*.\n\t(sparc-*-rtems*, sparc64-*-rtems*): Split off ...\n\t(sparc64-*-rtems*): ... new case.\n\t(sparc-*-rtems*): Add t-fdpbit to tmake_file.\n\t(spu-*-elf*): Likewise.\n\tAdd spu/t-elf to tmake_file.\n\t(v850*-*-*): Add t-fdpbit to tmake_file.\n\t(xstormy16-*-elf): Likewise.\n\t(am33_2.0-*-linux*): Add t-fdpbit to tmake_file.\n\t(mep*-*-*): Likewise.\n\nFrom-SVN: r177448", "tree": {"sha": "24104c84aafe6bb8ace23e951f7e0950cbc3d4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24104c84aafe6bb8ace23e951f7e0950cbc3d4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/569dc494616700a3cf078da0cc631c36a4f15821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569dc494616700a3cf078da0cc631c36a4f15821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569dc494616700a3cf078da0cc631c36a4f15821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569dc494616700a3cf078da0cc631c36a4f15821/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4"}], "stats": {"total": 1817, "additions": 1060, "deletions": 757}, "files": [{"sha": "e103ea0a52cf45f3bce9a4ac5e218764a13c8b8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,3 +1,79 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (FPBIT_FUNCS, DPBIT_FUNCS, TPBIT_FUNCS): Remove.\n+\t(libgcc-support): Remove $(FPBIT), $(DPBIT), $(TPBIT)\n+\tdependencies.\n+\t(libgcc.mvars): Remove FPBIT, FPBIT_FUNCS, DPBIT, DPBIT_FUNCS,\n+\tTPBIT, TPBIT_FUNCS.\n+\t* config/fp-bit.c, config/fp-bit.h: Move to ../libgcc.\n+\t* config/arm/t-strongarm-elf (FPBIT, DPBIT, dp-bit.c, fp-bit.c):\n+\tRemove.\n+\t* config/arm/t-vxworks: Likewise.\n+\t* config/arm/t-wince-pe: Likewise.\n+\t* config/avr/t-avr (fp-bit.c, FPBIT): Remove.\n+\t* config/bfin/t-bfin (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/bfin/t-bfin-elf: Likewise.\n+\t* config/bfin/t-bfin-linux: Likewise.\n+\t* config/bfin/t-bfin-uclinux: Likewise.\n+\t* config/cris/t-cris (FPBIT, DPBIT, dp-bit.c, tmplibgcc_fp_bit.c):\n+\tRemove.\n+\t* config/fr30/t-fr30: Likewise.\n+\t* config/frv/t-frv: Likewise.\n+\t* config/h8300/t-h8300 (FPBIT, fp-bit.c): Remove.\n+\t* config/iq2000/t-iq2000 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/m32c/t-m32c: Likewise.\n+\t* config/m32r/t-linux: (LIB2FUNCS_EXTRA, fp-bit.c, dp-bit.c): Remove.\n+\t* config/m32r/t-m32r (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/mcore/t-mcore: Likewise.\n+\t* config/mep/t-mep: Likewise.\n+\t* config/microblaze/t-microblaze: Likewise.\n+\t* config/mips/t-linux64 (TPBIT, tp-bit.c): Remove.\n+\t* config/mips/t-mips (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/mips/t-sdemtk (FPBIT, DPBIT): Remove.\n+\t* config/mips/t-sr71k (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/mn10300/t-linux: Remove.\n+\t* config/mn10300/t-mn10300 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/pdp11/t-pdp11: Likewise.\n+\t* config/picochip/t-picochip (FPBIT, fp-bit.c): Remove.\n+\t* config/rs6000/ppc64-fp.c: Move to ../libgcc/config/rs6000.\n+\t* config/rs6000/t-aix43 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t(LIB2FUNCS_EXTRA): Remove $(srcdir)/config/rs6000/ppc64-fp.c.\n+\t* config/rs6000/t-aix52: Likewise.\n+\t* config/rs6000/t-darwin (LIB2FUNCS_EXTRA): Remove\n+\t$(srcdir)/config/rs6000/ppc64-fp.c.\n+\t* config/rs6000/t-fprules-fpbit: Remove.\n+\t* config/rs6000/t-linux64 (LIB2FUNCS_EXTRA): Remove.\n+\t* config/rs6000/t-lynx (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/sh/t-netbsd (FPBIT, DPBIT): Remove.\n+\t* config/sh/t-sh (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/sparc/t-elf: Likewise.\n+\t* config/sparc/t-leon: Likewise.\n+\t* config/sparc/t-leon3: Likewise.\n+\t* config/spu/t-spu-elf: Likewise.\n+\t(DPBIT_FUNCS): Remove.\n+\t* config/stormy16/t-stormy16 (FPBIT, DPBIT, dp-bit.c, fp-bit.c): Remove.\n+\t* config/v850/t-v850: Likewise.\n+\t* config.gcc (avr-*-rtems*): Add avr/avr-lib.h to libgcc_tm_file.\n+\t(avr-*-*): Likewise.\n+\t(h8300-*-rtems*): Set libgcc_tm_file.\n+\t(h8300-*-elf*): Likewise.\n+\t(powerpc-*-eabisimaltivec*): Remove rs6000/t-fprules-fpbit from\n+\ttmake_file.\n+\t(powerpc-*-eabisim*): Likewise.\n+\t(powerpc-*-elf*): Likewise.\n+\t(powerpc-*-eabialtivec*): Likewise.\n+\t(powerpc-xilinx-eabi*): Likewise.\n+\t(powerpc-*-eabi*): Likewise.\n+\t(powerpc-*-rtems*): Likewise.\n+\t(powerpc-wrs-vxworks, powerpc-wrs-vxworksae): Likewise.\n+\t(powerpcle-*-elf*): Likewise.\n+\t(powerpcle-*-eabisim*): Likewise.\n+\t(powerpcle-*-eabi*): Likewise.\n+\t(rx-*-elf*): Add rx/rx-lib.h to libgcc_tm_file.\n+\t(am33_2.0-*-linux*): Remove mn10300/t-linux from tmake_file.\n+\t* doc/fragments.texi (Target Fragment, Floating Point Emulation):\n+\tRemove.\n+\n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (UNWIND_H): Remove."}, {"sha": "ff1dfc6931ad95732e173fb896c3a7cd1faad038", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1528,21 +1528,6 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n # Defined in libgcc2.c, included only in the static library.\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n \n-FPBIT_FUNCS = _pack_sf _unpack_sf _addsub_sf _mul_sf _div_sf \\\n-    _fpcmp_parts_sf _compare_sf _eq_sf _ne_sf _gt_sf _ge_sf \\\n-    _lt_sf _le_sf _unord_sf _si_to_sf _sf_to_si _negate_sf _make_sf \\\n-    _sf_to_df _sf_to_tf _thenan_sf _sf_to_usi _usi_to_sf\n-\n-DPBIT_FUNCS = _pack_df _unpack_df _addsub_df _mul_df _div_df \\\n-    _fpcmp_parts_df _compare_df _eq_df _ne_df _gt_df _ge_df \\\n-    _lt_df _le_df _unord_df _si_to_df _df_to_si _negate_df _make_df \\\n-    _df_to_sf _df_to_tf _thenan_df _df_to_usi _usi_to_df\n-\n-TPBIT_FUNCS = _pack_tf _unpack_tf _addsub_tf _mul_tf _div_tf \\\n-    _fpcmp_parts_tf _compare_tf _eq_tf _ne_tf _gt_tf _ge_tf \\\n-    _lt_tf _le_tf _unord_tf _si_to_tf _tf_to_si _negate_tf _make_tf \\\n-    _tf_to_df _tf_to_sf _thenan_tf _tf_to_usi _usi_to_tf\n-\n # These might cause a divide overflow trap and so are compiled with\n # unwinder info.\n LIB2_DIVMOD_FUNCS = _divdi3 _moddi3 _udivdi3 _umoddi3 _udiv_w_sdiv _udivmoddi4\n@@ -1883,8 +1868,7 @@ srcdirify = $(patsubst $$(libgcc_objdir)/%,%, \\\n GCC_EXTRA_PARTS := $(sort $(EXTRA_MULTILIB_PARTS) $(EXTRA_PARTS))\n \n libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \\\n-\t$(MACHMODE_H) $(FPBIT) $(DPBIT) $(TPBIT) $(LIB2ADD) \\\n-\t$(LIB2ADD_ST) gcov-iov.h $(SFP_MACHINE)\n+\t$(MACHMODE_H) $(LIB2ADD) $(LIB2ADD_ST) gcov-iov.h $(SFP_MACHINE)\n \n libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \t\txgcc$(exeext)\n@@ -1896,13 +1880,7 @@ libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \techo LIB2ADD = '$(call srcdirify,$(LIB2ADD))' >> tmp-libgcc.mvars\n \techo LIB2ADD_ST = '$(call srcdirify,$(LIB2ADD_ST))' >> tmp-libgcc.mvars\n \techo LIB2_SIDITI_CONV_FUNCS = '$(LIB2_SIDITI_CONV_FUNCS)' >> tmp-libgcc.mvars\n-\techo FPBIT = '$(FPBIT)' >> tmp-libgcc.mvars\n-\techo FPBIT_FUNCS = '$(FPBIT_FUNCS)' >> tmp-libgcc.mvars\n \techo LIB2_DIVMOD_FUNCS = '$(LIB2_DIVMOD_FUNCS)' >> tmp-libgcc.mvars\n-\techo DPBIT = '$(DPBIT)' >> tmp-libgcc.mvars\n-\techo DPBIT_FUNCS = '$(DPBIT_FUNCS)' >> tmp-libgcc.mvars\n-\techo TPBIT = '$(TPBIT)' >> tmp-libgcc.mvars\n-\techo TPBIT_FUNCS = '$(TPBIT_FUNCS)' >> tmp-libgcc.mvars\n \techo GCC_EXTRA_PARTS = '$(GCC_EXTRA_PARTS)' >> tmp-libgcc.mvars\n \techo SHLIB_LINK = '$(subst $(GCC_FOR_TARGET),$$(GCC_FOR_TARGET),$(SHLIB_LINK))' >> tmp-libgcc.mvars\n \techo SHLIB_INSTALL = '$(SHLIB_INSTALL)' >> tmp-libgcc.mvars"}, {"sha": "dcc5b4304d7c6ac8a5776e48492be083bf0c1662", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -937,12 +937,14 @@ arm*-wince-pe*)\n \t;;\n avr-*-rtems*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n+\tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o\"\n \t;;\n avr-*-*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h newlib-stdint.h\"\n+\tlibgcc_tm_file=\"$libgcc_tm_file avr/avr-lib.h\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o\"\n@@ -1039,10 +1041,12 @@ moxie-*-rtems*)\n h8300-*-rtems*)\n \ttmake_file=\"h8300/t-h8300 h8300/t-elf t-rtems h8300/t-rtems\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h newlib-stdint.h\"\n+\tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n h8300-*-elf*)\n \ttmake_file=\"h8300/t-h8300 h8300/t-elf\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h\"\n+\tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n hppa*64*-*-linux*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_PA_20\"\n@@ -2017,7 +2021,7 @@ picochip-*)\n         ;;\n # port not yet contributed\n #powerpc-*-openbsd*)\n-#\ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-fprules-fpbit \"\n+#\ttmake_file=\"${tmake_file} rs6000/t-fprules\"\n #\textra_headers=\n #\t;;\n powerpc-*-darwin*)\n@@ -2063,42 +2067,42 @@ powerpc-*-eabispe*)\n powerpc-*-eabisimaltivec*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h rs6000/eabialtivec.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcendian rs6000/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabisim*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \t;;\n powerpc-*-eabialtivec*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabialtivec.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcendian rs6000/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-xilinx-eabi*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h rs6000/xfpu.h rs6000/xilinx.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt rs6000/xilinx.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm rs6000/t-xilinx\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm rs6000/t-xilinx\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-eabi*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpc-*-rtems*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/rtems.h rtems.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-rtems t-rtems rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-rtems t-rtems rs6000/t-ppccomm\"\n \t;;\n powerpc-*-linux* | powerpc64-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h rs6000/sysv4.h\"\n@@ -2146,7 +2150,7 @@ powerpc-*-linux* | powerpc64-*-linux*)\n \t;;\n powerpc-wrs-vxworks|powerpc-wrs-vxworksae)\n \ttm_file=\"${tm_file} elfos.h freebsd-spec.h rs6000/sysv4.h\"\n-\ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppccomm rs6000/t-vxworks\"\n+\ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-ppccomm rs6000/t-vxworks\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \textra_headers=ppc-asm.h\n \tcase ${target} in\n@@ -2171,18 +2175,18 @@ powerpc-*-lynxos*)\n \t;;\n powerpcle-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \t;;\n powerpcle-*-eabisim*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h rs6000/eabisim.h\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \tuse_gcc_stdint=wrap\n \t;;\n powerpcle-*-eabi*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/sysv4le.h rs6000/eabi.h rs6000/e500.h\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+\ttmake_file=\"rs6000/t-fprules rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \tuse_gcc_stdint=wrap\n \t;;\n@@ -2233,7 +2237,7 @@ rs6000-ibm-aix[6789].* | powerpc-ibm-aix[6789].*)\n \t;;\n rx-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\tlibgcc_tm_file=\"${libgcc_tm_file} rx/rx-abi.h\"\n+\tlibgcc_tm_file=\"${libgcc_tm_file} rx/rx-abi.h rx/rx-lib.h\"\n \ttmake_file=\"${tmake_file} rx/t-rx\"\n \t;;\n s390-*-linux*)\n@@ -2643,7 +2647,6 @@ xtensa*-*-linux*)\n \t;;\n am33_2.0-*-linux*)\n \ttm_file=\"mn10300/mn10300.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h mn10300/linux.h\"\n-\ttmake_file=\"${tmake_file} mn10300/t-linux\"\n \tgas=yes gnu_ld=yes\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \tuse_collect2=no"}, {"sha": "4a4f4533ec191d0687fca1b833f763865223426e", "filename": "gcc/config/arm/t-strongarm-elf", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-elf?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -19,25 +19,6 @@\n \n LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _clzsi2 _clzdi2\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifndef __ARMEB__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifndef __ARMEB__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n MULTILIB_OPTIONS     = mlittle-endian/mbig-endian mfloat-abi=hard/mfloat-abi=soft\n MULTILIB_DIRNAMES    = le be fpu soft\n MULTILIB_EXCEPTIONS  ="}, {"sha": "8ac0d9bcec585c3bcfb302cf81c0608f4d15ddad", "filename": "gcc/config/arm/t-vxworks", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxworks?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2003, 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -18,24 +18,6 @@\n \n LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifndef __ARMEB__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifndef __ARMEB__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n MULTILIB_OPTIONS = \\\n   mrtp fPIC \\\n   t4/t4be/t4t/t4tbe/t5/t5be/t5t/t5tbe/tstrongarm/txscale/txscalebe"}, {"sha": "9ce1f313140a586d409a35765dacc07e53d44118", "filename": "gcc/config/arm/t-wince-pe", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-wince-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Farm%2Ft-wince-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-wince-pe?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -19,25 +19,6 @@\n \n LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifndef __ARMEB__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifndef __ARMEB__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n pe.o: $(srcdir)/config/arm/pe.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) output.h flags.h $(TREE_H) expr.h $(TM_P_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "85f374527b369bfed4d94d544b581e69866911ba", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -91,19 +91,6 @@ LIB2FUNCS_EXCLUDE = \\\n # so use -mcall-prologues for smaller code size.\n TARGET_LIBGCC2_CFLAGS = -DDF=SF -Dinhibit_libc -mcall-prologues -Os\n \n-fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/avr/t-avr\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#define FLOAT_ONLY' >> fp-bit.c\n-\techo '#define CMPtype QItype' >> fp-bit.c\n-\techo '#define DF SF' >> fp-bit.c\n-\techo '#define DI SI' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#define SMALL_MACHINE' >> fp-bit.c\n-\techo 'typedef int QItype __attribute__ ((mode (QI)));' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-FPBIT = fp-bit.c\n-\n MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr31/mmcu=avr35/mmcu=avr4/mmcu=avr5/mmcu=avr51/mmcu=avr6\n MULTILIB_DIRNAMES = avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51 avr6\n "}, {"sha": "730043e4b6353265d766305af7a27df23c68c794", "filename": "gcc/config/bfin/t-bfin", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+# Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -24,16 +24,6 @@ LIB1ASMFUNCS += _smulsi3_highpart\n \n EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Assemble startup files.\n $(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\"}, {"sha": "61797bfad2a46d98c10df187b94d4a74ed366c8d", "filename": "gcc/config/bfin/t-bfin-elf", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2005, 2006, 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,16 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n "}, {"sha": "e7e705ef1d42d421ca0141ba6b509410633bba30", "filename": "gcc/config/bfin/t-bfin-linux", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,16 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n "}, {"sha": "a46d7b3ac153245d40103f3f93c34c925f76eba5", "filename": "gcc/config/bfin/t-bfin-uclinux", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,16 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n "}, {"sha": "19d44ce832017412359642bba7b367bbb5cd1456", "filename": "gcc/config/cris/t-cris", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fcris%2Ft-cris", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fcris%2Ft-cris", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Ft-cris?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -3,7 +3,7 @@\n #\n # The Makefile fragment to include when compiling gcc et al for CRIS.\n #\n-# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -28,23 +28,6 @@\n LIB2FUNCS_EXTRA = _udivsi3.c _divsi3.c _umodsi3.c _modsi3.c\n CRIS_LIB1CSRC = $(srcdir)/config/cris/arit.c\n \n-FPBIT = tmplibgcc_fp_bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' > dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c           >> dp-bit.c\n-\n-# Use another name to avoid confusing SUN make, if support for\n-# it is reinstated elsewhere.  Prefixed with \"tmplibgcc\" means\n-# \"make clean\" will wipe it.  We define a few L_ thingies\n-# because we can't select them individually through FPBIT_FUNCS;\n-# see above.\n-tmplibgcc_fp_bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >  $@\n-\techo '#define FLOAT'\t\t\t>> $@\n-\tcat $(srcdir)/config/fp-bit.c\t\t>> $@\n-\n # The fixed-point arithmetic code is in one file, arit.c,\n # similar to libgcc2.c (or the old libgcc1.c).  We need to\n # \"split it up\" with one file per define."}, {"sha": "fa786d6e50a534cdcc1330fa7f2b3ca7aae62fe8", "filename": "gcc/config/fr30/t-fr30", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Ffr30%2Ft-fr30", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Ffr30%2Ft-fr30", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ft-fr30?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1999, 2001, 2007 Free Software Foundation, Inc.\n+# Copyright (C) 1999, 2001, 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -26,22 +26,10 @@ $(T)crti.o: $(srcdir)/config/fr30/crti.asm $(GCC_PASSES)\n $(T)crtn.o: $(srcdir)/config/fr30/crtn.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) -c -o $(T)crtn.o -x assembler $(srcdir)/config/fr30/crtn.asm\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n # If any special flags are necessary when building libgcc2 put them here.\n #\n # TARGET_LIBGCC2_CFLAGS\n \n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # Enable the following if multilibs are needed.\n # See gcc/genmultilib, gcc/gcc.texi and gcc/tm.texi for a\n # description of the options and their values."}, {"sha": "395a679747a2d5fde2a64161b994423dd79a0f7a", "filename": "gcc/config/frv/t-frv", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-frv?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -27,23 +27,9 @@ LIB1ASMSRC\t= frv/lib1funcs.asm\n LIB1ASMFUNCS\t= _cmpll _cmpf _cmpd _addll _subll _andll _orll _xorll _notll _cmov\n LIB2FUNCS_EXTRA\t= cmovh.c cmovw.c cmovd.c modi.c umodi.c uitof.c uitod.c ulltof.c ulltod.c\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n # If any special flags are necessary when building libgcc2 put them here.\n TARGET_LIBGCC2_CFLAGS =\n \n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#include \"config/frv/frv-abi.h\"' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#include \"config/frv/frv-abi.h\"' > dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n cmovh.c: $(srcdir)/config/frv/cmovh.c\n \t$(LN_S) $(srcdir)/config/frv/cmovh.c .\n "}, {"sha": "616849007b461afe8e4d64e13d4ca0bbd040f8a7", "filename": "gcc/config/h8300/t-h8300", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fh8300%2Ft-h8300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fh8300%2Ft-h8300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ft-h8300?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003,\n-# 2004 Free Software Foundation, Inc.\n+# 2004, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -31,21 +31,6 @@ LIB2FUNCS_EXTRA = \\\n # We do not have DF type, so fake out the libgcc2 compilation.\n TARGET_LIBGCC2_CFLAGS = -DDF=SF\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#define FLOAT_ONLY' >> fp-bit.c\n-\techo '#define SMALL_MACHINE' >> fp-bit.c\n-\techo '#ifdef __H8300__' >> fp-bit.c\n-\techo '#define CMPtype HItype' >> fp-bit.c\n-\techo '#else' >> fp-bit.c\n-\techo '#define CMPtype SItype' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n MULTILIB_OPTIONS = mh/ms/msx mn mint32\n MULTILIB_DIRNAMES = h8300h h8300s h8sx normal int32\n MULTILIB_EXCEPTIONS = mint32 mn mn/mint32"}, {"sha": "03d8c703f86a051bee10b915547bf6fb26c12d35", "filename": "gcc/config/iq2000/t-iq2000", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fiq2000%2Ft-iq2000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fiq2000%2Ft-iq2000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Ft-iq2000?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2003, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -23,18 +23,6 @@ CROSS_LIBGCC1 =\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/udivmod.c $(srcdir)/config/divmod.c $(srcdir)/config/udivmodsi4.c $(srcdir)/config/iq2000/lib2extra-funcs.c\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t\t\t\t> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c\t\t\t>> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # Enable the following if multilibs are needed.\n # See gcc/genmultilib, gcc/gcc.texi and gcc/tm.texi for a\n # description of the options and their values."}, {"sha": "e39fdf3a0aa22281818f2357956778403d05df8d", "filename": "gcc/config/m32c/t-m32c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32c%2Ft-m32c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32c%2Ft-m32c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Ft-m32c?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Target Makefile Fragment for R8C/M16C/M32C\n-# Copyright (C) 2005, 2006, 2007, 2008, 2009\n+# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2011\n # Free Software Foundation, Inc.\n # Contributed by Red Hat.\n #\n@@ -31,18 +31,6 @@ LIB1ASMFUNCS = \\\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/m32c/m32c-lib2.c $(srcdir)/config/m32c/m32c-lib2-trapv.c\n \n-# floating point emulation libraries\n-\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t\t\t\t> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c\t\t\t>> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # target-specific files\n \n md_file = md"}, {"sha": "6de9c781a670da29b278ef9641ea99600af748d3", "filename": "gcc/config/m32r/t-linux", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32r%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32r%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-linux?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2003, 2004, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2004, 2009, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -19,23 +19,11 @@\n # lib1funcs.asm is currently empty.\n CROSS_LIBGCC1 =\n \n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n-\n-LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n-\n # Turn off the SDA while compiling libgcc2.  There are no headers for it\n # and we want maximal upward compatibility here.\n \n TARGET_LIBGCC2_CFLAGS = -G 0 -fPIC\n \n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # We need to use -fpic when we are using gcc to compile the routines in\n # initfini.c.  This is only really needed when we are going to use gcc/g++\n # to produce a shared library, but since we don't know ahead of time when"}, {"sha": "4409065883840ba0e3b1df4f03dae60372160c66", "filename": "gcc/config/m32r/t-m32r", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32r%2Ft-m32r", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fm32r%2Ft-m32r", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-m32r?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 1997, 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+# Copyright (C) 1997, 1998, 1999, 2001, 2003, 2011\n+# Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,23 +17,11 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n # Turn off the SDA while compiling libgcc2.  There are no headers for it\n # and we want maximal upward compatibility here.\n \n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # We need to use -fpic when we are using gcc to compile the routines in\n # initfini.c.  This is only really needed when we are going to use gcc/g++\n # to produce a shared library, but since we don't know ahead of time when"}, {"sha": "5533211a5d29f2db42faf4b969fd21f721015cd3", "filename": "gcc/config/mcore/t-mcore", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmcore%2Ft-mcore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmcore%2Ft-mcore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2000, 2001, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2000, 2001, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -28,22 +28,6 @@ $(T)crtn.o: $(srcdir)/config/mcore/crtn.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mcore/crtn.asm\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/mcore/t-mcore\n-\trm -f dp-bit.c\n-\techo '' > dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/mcore/t-mcore\n-\trm -f fp-bit.c\n-\techo '' > fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # could use -msifilter to be safe from interrupt/jmp interactions and others.\n TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n "}, {"sha": "29c7545724165d4b7654b686e405fd2ccd2edb6c", "filename": "gcc/config/mep/t-mep", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmep%2Ft-mep", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmep%2Ft-mep", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Ft-mep?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,6 +1,6 @@\n # -*- makefile -*-\n # GCC makefile fragment for MeP\n-# Copyright (C) 2001, 2002, 2003, 2005, 2007, 2009, 2010\n+# Copyright (C) 2001, 2002, 2003, 2005, 2007, 2009, 2010, 2011\n # Free Software Foundation, Inc.\n # Contributed by Red Hat Inc\n #\n@@ -54,18 +54,6 @@ LIB2FUNCS_EXTRA = \\\n \t$(srcdir)/config/mep/mep-lib2.c \\\n \t$(srcdir)/config/mep/mep-tramp.c\n \n-# floating point emulation libraries\n-\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t\t\t\t> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c\t\t\t>> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n MULTILIB_OPTIONS = mel mall-opts mfar\n MULTILIB_DIRNAMES = el allopt far\n "}, {"sha": "8c8767f9baafe8c5734ef6ba53852c7a790aa02b", "filename": "gcc/config/microblaze/t-microblaze", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -14,17 +14,6 @@ microblaze-c.o: $(srcdir)/config/microblaze/microblaze-c.c \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/microblaze/microblaze-c.c\n \n-# Build soft FP routines. \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n # Assemble startup files\n $(T)crti$(objext): $(srcdir)/config/microblaze/crti.s\n \t$(GCC_FOR_TARGET) -c $(srcdir)/config/microblaze/crti.s -o $(T)crti$(objext)"}, {"sha": "e23743d3cb0a1f0bb47adb5297f552d7fc4b329e", "filename": "gcc/config/mips/t-linux64", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-linux64?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2004, 2005, 2006, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -25,15 +25,3 @@ endif\n MULTILIB_OSDIRNAMES = ../lib32 ../lib ../lib64\n \n EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n-\n-TPBIT = tp-bit.c\n-\n-tp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > tp-bit.c\n-\techo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c\n-\techo '#endif' >> tp-bit.c\n-\techo '#if __LDBL_MANT_DIG__ == 113' >> tp-bit.c\n-\techo '#define QUIET_NAN_NEGATED' >> tp-bit.c\n-\techo '# define TFLOAT' >> tp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> tp-bit.c\n-\techo '#endif' >> tp-bit.c"}, {"sha": "53993e9d3c09dc41a7caedfd74bbb57827da73ee", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -16,28 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\techo '#define QUIET_NAN_NEGATED' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\techo '#define QUIET_NAN_NEGATED' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n LIB2_SIDITI_CONV_FUNCS=yes\n \n $(srcdir)/config/mips/mips-tables.opt: $(srcdir)/config/mips/genopt.sh \\"}, {"sha": "decbcf3101ce14065ed769099524ae8deaa3fbd6", "filename": "gcc/config/mips/t-sdemtk", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-sdemtk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-sdemtk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sdemtk?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -38,7 +38,3 @@ stmp-sdefixinc: gsyslimits.h\n \tcp $(srcdir)/gsyslimits.h include/syslimits.h\n \tchmod a+r include/syslimits.h\n \t$(STAMP) stmp-sdefixinc\n-\n-# Don't build FPBIT and DPBIT; we'll be using the SDE soft-float library.\n-FPBIT =\n-DPBIT ="}, {"sha": "44b69402e624810432a0ee77b2115699dee96e0e", "filename": "gcc/config/mips/t-sr71k", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-sr71k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmips%2Ft-sr71k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sr71k?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -38,26 +38,6 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# fp-bit and dp-bit are really part of libgcc1, but this will cause\n-# them to be built correctly, so... [taken from t-sparclite]\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __MIPSEL__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for both hard and soft floating point\n \n MULTILIB_OPTIONS = EL/EB msoft-float mips2"}, {"sha": "61ed88e663e805e2c08b23498ab0ec66e46371e5", "filename": "gcc/config/mn10300/t-linux", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fmn10300%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Fmn10300%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Ft-linux?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,29 +0,0 @@\n-# Copyright (C) 2003 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c"}, {"sha": "c62c56f2013a83b00a5df80aa829eddb82c520d4", "filename": "gcc/config/mn10300/t-mn10300", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmn10300%2Ft-mn10300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fmn10300%2Ft-mn10300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Ft-mn10300?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001,\n-# 2003, 2010 Free Software Foundation, Inc.\n+# 2003, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,18 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n MULTILIB_OPTIONS = mam33/mam33-2/mam34\n MULTILIB_DIRNAMES = am33 am33-2 am34\n "}, {"sha": "032084b381b24fd634b308707ae16fb40e52cb1e", "filename": "gcc/config/pdp11/t-pdp11", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fpdp11%2Ft-pdp11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Ft-pdp11?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1995, 1997, 1998, 2001, 2002,\n-# 2004, 2010 Free Software Foundation, Inc.\n+# 2004, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -21,17 +21,6 @@ TARGET_LIBGCC2_CFLAGS = -O2 -mfloat32\n LIB2FUNCS_EXTRA = $(srcdir)/config/udivmod.c $(srcdir)/config/udivmodsi4.c \\\n     $(srcdir)/config/memcmp.c $(srcdir)/config/memcpy.c \\\n     $(srcdir)/config/memmove.c $(srcdir)/config/memset.c\n-# floating point emulation libraries\n-\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'                            > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c                   >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n \n MULTILIB_OPTIONS = msoft-float\n "}, {"sha": "222d7a646b93863fbdc234b0f17471062c09e74a", "filename": "gcc/config/picochip/t-picochip", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fpicochip%2Ft-picochip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fpicochip%2Ft-picochip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Ft-picochip?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -61,16 +61,3 @@ MULTILIB_OPTIONS = mmul-type=none/mmul-type=mac/mmul-type=mul mno-byte-access/mb\n \n # Using a mul unit (currently) implies that byte access is available.\n MULTILIB_EXCEPTIONS = mmul-type=mul/mno-byte-access\n-\n-# We want fine grained libraries, so use the new code\n-# to build the floating point emulation libraries.\n-FPBIT = fp-bit.c\n-\n-# Software floating point support. Floating point is not properly\n-# supported, but is existence can be useful for some types of testing.\n-fp-bit.c:\t$(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#define FLOAT_ONLY' >> fp-bit.c\n-\techo '#define SMALL_MACHINE' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-"}, {"sha": "4e38ece4678b020d97e8e5e23d4d40292b2242fd", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-# 2006 Free Software Foundation, Inc.\n+# 2006, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,18 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for pthread and all of the \n # different processor models\n \n@@ -86,8 +74,7 @@ SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n # GCC 128-bit long double support routines.\n-LIB2FUNCS_EXTRA =  $(srcdir)/config/rs6000/ppc64-fp.c \\\n-\t$(srcdir)/config/rs6000/darwin-ldouble.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-ldouble.c\n TARGET_LIBGCC2_CFLAGS = -mlong-double-128\n \n # Either 32-bit and 64-bit objects in archives."}, {"sha": "3ef61e9cf0f6ba94fa1da9d15390b252b11588d4", "filename": "gcc/config/rs6000/t-aix52", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix52?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2002, 2003, 2004, 2005, 2006,\n-# 2008 Free Software Foundation, Inc.\n+# 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,18 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build the libraries for pthread and all of the \n # different processor models\n \n@@ -67,8 +55,7 @@ SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n # GCC 128-bit long double support routines.\n-LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/ppc64-fp.c \\\n-\t$(srcdir)/config/rs6000/darwin-ldouble.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-ldouble.c\n TARGET_LIBGCC2_CFLAGS = -mlong-double-128\n \n # Either 32-bit and 64-bit objects in archives."}, {"sha": "4ba07a148672add5832e7ea12dbc1ffad77bc021", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -18,7 +18,6 @@\n # <http://www.gnu.org/licenses/>.\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm \\\n-\t$(srcdir)/config/rs6000/ppc64-fp.c \\\n \t$(srcdir)/config/darwin-64.c \\\n \t$(srcdir)/config/rs6000/darwin-ldouble.c \\\n \t$(srcdir)/config/rs6000/darwin-world.asm"}, {"sha": "a6c7246fa93abf8f3ec83e7665282c41f1b21592", "filename": "gcc/config/rs6000/t-fprules-fpbit", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Ft-fprules-fpbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/gcc%2Fconfig%2Frs6000%2Ft-fprules-fpbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-fprules-fpbit?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,29 +0,0 @@\n-# Copyright (C) 2006 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c"}, {"sha": "3ae05fdad7bc8d930dffa47f9c242aa6c59f8ed5", "filename": "gcc/config/rs6000/t-linux64", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-linux64?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,7 +1,7 @@\n #rs6000/t-linux64\n \n # Copyright (C) 2002, 2003, 2004, 2006, 2007,\n-# 2009 Free Software Foundation, Inc.\n+# 2009, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -19,9 +19,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB2FUNCS_EXTRA += $(srcdir)/config/rs6000/ppc64-fp.c\n-LIB2FUNCS_EXTRA := $(sort $(LIB2FUNCS_EXTRA))\n-\n TARGET_LIBGCC2_CFLAGS += -mno-minimal-toc\n \n # On Debian, Ubuntu and other derivative distributions, the 32bit libraries"}, {"sha": "768856e06eb6cabe0c544c8940928476c7e7a67f", "filename": "gcc/config/rs6000/t-lynx", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-lynx?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2004 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -21,16 +21,6 @@ LIB2FUNCS_EXTRA = tramp.S\n tramp.S: $(srcdir)/config/rs6000/tramp.asm\n \tcat $(srcdir)/config/rs6000/tramp.asm > tramp.S\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n "}, {"sha": "cbbac79f66148c45cdeb347cc456ec3e815beada", "filename": "gcc/config/rs6000/t-spe", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-spe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Frs6000%2Ft-spe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-spe?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -18,16 +18,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n "}, {"sha": "11bfe31458e34d12750b9bc64c43c37c1b090ecf", "filename": "gcc/config/sh/t-netbsd", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsh%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsh%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-netbsd?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2004, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2004, 2009, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,10 +22,3 @@ LIB1ASMFUNCS_CACHE = _ic_invalidate\n LIB2FUNCS_EXTRA=\n \n EXTRA_MULTILIB_PARTS=\n-\n-# NetBSD's C library includes a fast software FP library that\n-# has support for setting/setting the rounding mode, exception\n-# mask, etc.  Therefore, we don't want to include software FP\n-# in libgcc.\n-FPBIT =\n-DPBIT ="}, {"sha": "e63131a53488e2098d30c992c00bf8c9209d5f2a", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -31,24 +31,6 @@ LIB1ASMFUNCS_CACHE = _ic_invalidate _ic_invalidate_array\n \n TARGET_LIBGCC2_CFLAGS = -mieee\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __LITTLE_ENDIAN__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >>dp-bit.c\n-\techo '#endif' \t\t>> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __LITTLE_ENDIAN__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >>fp-bit.c\n-\techo '#endif' \t\t>> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n DEFAULT_ENDIAN = $(word 1,$(TM_ENDIAN_CONFIG))\n OTHER_ENDIAN = $(word 2,$(TM_ENDIAN_CONFIG))\n "}, {"sha": "7073bcb7721cb3562eba689636dfeba1d90f6110", "filename": "gcc/config/sparc/t-elf", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-elf?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -20,18 +20,6 @@\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n MULTILIB_OPTIONS = msoft-float mcpu=v8 mflat\n MULTILIB_DIRNAMES = soft v8 flat\n MULTILIB_MATCHES = msoft-float=mno-fpu"}, {"sha": "4f9d0a9e7974418ea4685469173313a86aa3044a", "filename": "gcc/config/sparc/t-leon", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-leon", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-leon", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-leon?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -19,18 +19,6 @@\n LIB1ASMSRC = sparc/lb1spc.asm\n LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Multilibs for LEON\n # LEON is a SPARC-V8, but the AT697 implementation has a bug in the\n # V8-specific instructions."}, {"sha": "0e7e45cc5946ca1020f1067b864374831fa5a334", "filename": "gcc/config/sparc/t-leon3", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-leon3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fsparc%2Ft-leon3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-leon3?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,18 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Multilibs for LEON3\n MULTILIB_OPTIONS = msoft-float\n MULTILIB_DIRNAMES = soft"}, {"sha": "3f9510112f7b0dca92f53476a68e66d281e39f38", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -30,10 +30,6 @@ TARGET_LIBGCC2_CFLAGS = -fPIC -mwarn-reloc -D__IN_LIBGCC2\n # own versions below and/or via direct expansion.\n LIB2FUNCS_EXCLUDE = _floatdisf _floatundisf _floattisf _floatunstisf\n \n-# We provide our own version of __divdf3 that performs better and has\n-# better support for non-default rounding modes.\n-DPBIT_FUNCS := $(filter-out _div_df, $(DPBIT_FUNCS))\n-\n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \\\n \t\t\t $(srcdir)/config/spu/float_unsdidf.c \\\n \t\t\t $(srcdir)/config/spu/float_unsdisf.c \\\n@@ -47,18 +43,6 @@ LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \\\n \t\t\t $(srcdir)/config/spu/divmodti4.c \\\n \t\t\t $(srcdir)/config/spu/divv2df3.c\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/spu/t-spu-elf\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/spu/t-spu-elf\n-\techo '#define FLOAT' > fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Build TImode conversion routines to support Fortran 128-bit\n # integer data types.\n LIB2_SIDITI_CONV_FUNCS=yes"}, {"sha": "c2b6c2a55737decca0dd70f93cad95222d749976", "filename": "gcc/config/stormy16/t-stormy16", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fstormy16%2Ft-stormy16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fstormy16%2Ft-stormy16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Ft-stormy16?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,6 +1,6 @@\n # -*- makefile -*-\n #\n-# Copyright (C) 2001, 2004, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2004, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -36,15 +36,4 @@ LIB2FUNCS_EXTRA = \\\n \t$(srcdir)/config/stormy16/stormy16-lib2-cmpsi2.c \\\n \t$(srcdir)/config/stormy16/stormy16-lib2-ucmpsi2.c\n \n-# Floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t\t\t\t> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c\t\t\t>> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n-\n TARGET_LIBGCC2_CFLAGS = -O2"}, {"sha": "fcd3b841e30df649dfe34fd289718dd19853b4f5", "filename": "gcc/config/v850/t-v850", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fv850%2Ft-v850", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fconfig%2Fv850%2Ft-v850", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Ft-v850?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n-# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2008, 2009, 2010\n-# Free Software Foundation, Inc.\n+# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2008, 2009, 2010,\n+# 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -78,24 +78,6 @@ LIB1ASMFUNCS\t= _mulsi3 \\\n \t\t  _ucmpdi2 \\\n \t\t  _muldi3\n \n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __LITTLE_ENDIAN__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >>dp-bit.c\n-\techo '#endif' \t\t>> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifdef __LITTLE_ENDIAN__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >>fp-bit.c\n-\techo '#endif' \t\t>> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n # Create target-specific versions of the libraries\n MULTILIB_OPTIONS  = mv850/mv850e/mv850e2/mv850e2v3\n MULTILIB_DIRNAMES = v850 v850e v850e2 v850e2v3"}, {"sha": "28edae98e67f2a0057e982692169c68e1bf99e87", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -49,29 +49,6 @@ Compiler flags to use when compiling @file{libgcc2.c}.\n A list of source file names to be compiled or assembled and inserted\n into @file{libgcc.a}.\n \n-@findex Floating Point Emulation\n-@item Floating Point Emulation\n-To have GCC include software floating point libraries in @file{libgcc.a}\n-define @code{FPBIT} and @code{DPBIT} along with a few rules as follows:\n-@smallexample\n-# We want fine grained libraries, so use the new code\n-# to build the floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-        echo '#define FLOAT' > fp-bit.c\n-        cat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-        cat $(srcdir)/config/fp-bit.c > dp-bit.c\n-@end smallexample\n-\n-You may need to provide additional #defines at the beginning of @file{fp-bit.c}\n-and @file{dp-bit.c} to control target endianness and other options.\n-\n-\n @findex CRTSTUFF_T_CFLAGS\n @item CRTSTUFF_T_CFLAGS\n Special flags used when compiling @file{crtstuff.c}."}, {"sha": "755812872e766f8b6e8055743a01162c60e8afee", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,3 +1,7 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* EXCLUDES (config/fp-bit.c, config/fp-bit.h): Remove.\n+\n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* EXCLUDES (unwind-c.c, unwind-dw2-fde-darwin.c)"}, {"sha": "5a4ad770973556582e17552168a98462b5306472", "filename": "gcc/po/EXCLUDES", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fpo%2FEXCLUDES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/gcc%2Fpo%2FEXCLUDES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FEXCLUDES?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -22,8 +22,6 @@\n # .def are examined to begin with.\n \n #   These files are part of libgcc, or target headers provided by gcc.\n-config/fp-bit.c\n-config/fp-bit.h\n config/vxlib.c\n crtstuff.c\n gbl-ctors.h"}, {"sha": "00c4fa63b7b841089d652eb219b13b4a7f229ec4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,3 +1,115 @@\n+2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.in (double_type_size, long_double_type_size): Set.\n+\tRemove $(fpbit-in-libgcc) support.\n+\t(FPBIT_FUNCS, DPBIT_FUNCS, TPBIT_FUNCS): New variables.\n+\t(fpbit-src): New variable.\n+\t($(fpbit-o), $(fpbit-s-o)): Use $(fpbit-src) instead of $(FPBIT).\n+\tCompile with -DFLOAT $(FPBIT_CFLAGS).\n+\tUse $<.\n+\t($(dpbit-o), $(dpbit-s-o)): Use $(fpbit-src) instead of $(DPBIT).\n+\tCompile with $(FPBIT_CFLAGS).\n+\tUse $<.\n+\t($(tpbit-o), $(tpbit-s-o): Use $(fpbit-src) instead of $(TPBIT).\n+\tCompile with -DFLOAT $(TPBIT_CFLAGS).\n+\tUse $<.\n+\t* configure.ac (double_type_size, long_double_type_size):\n+\tDetermine and substitute.\n+\t* configure: Regenerate.\n+\t* fp-bit.c, fp-bit.h: New files.\n+\t* config/avr/avr-lib.h, config/h8300/h8300-lib.h: New files.\n+\t* config/mips/t-irix6 (TPBIT, $(gcc_objdir)/tp-bit.c): Remove.\n+\t* config/mips/t-mips: New file.\n+\t* config/mips/t-sdemtk: New file.\n+\t* config/rs6000/ppc64-fp.c: New file.\n+\t* config/rs6000/t-darwin (LIB2ADD): Add\n+\t$(srcdir)/config/rs6000/ppc64-fp.c.\n+\t* config/rs6000/t-ppc64-fp: New file.\n+\t* config/rx/rx-lib.h: New file.\n+\t* config/rx/t-rx (FPBIT): Set to true.\n+\t($(gcc_objdir)/fp-bit.c): Remove.\n+\t(DPBIT): Set to true only with -m64bit-doubles.\n+\t($(gcc_objdir)/dp-bit.c): Remove.\n+\t* config/sparc/t-softfp: Remove.\n+\t* config/spu/t-elf: New file.\n+\t* config/t-fdpbit, config/t-fpbit: New files.\n+\t* config.host (m32c*-*-*): Add t-fdpbit to tmake_file.\n+\t(mips*-*-*): Likewise.\n+\t(arm-wrs-vxworks): Likewise.\n+\t(arm*-*-freebsd*): Likewise.\n+\t(avr-*-rtems*): Add t-fpbit to tmake_file.\n+\t(avr-*-*): Likewise.\n+\t(bfin*-elf*): Add t-fdpbit to tmake_file.\n+\t(bfin*-uclinux*): Likewise.\n+\t(bfin*-linux-uclibc*): Likewise.\n+\t(bfin*-rtems*): New case.\n+\tAdd t-fdpbit to tmake_file.\n+\t(bfin*-*): Add t-fdpbit to tmake_file.\n+\t(crisv32-*-elf): Likewise.\n+\t(cris-*-linux*): Likewise.\n+\t(fr30-*-elf): Likewise.\n+\t(frv-*-elf, frv-*-*linux*): Likewise.\n+\t(h8300-*-rtems*, h8300-*-elf*): Add t-fpbit to tmake_file.\n+\t(iq2000*-*-elf*): Add t-fdpbit to tmake_file.\n+\t(m32r-*-elf*): Likewise.\n+\t(m32rle-*-elf*): Likewise.\n+\t(m32r-*-linux*): Likewise.\n+\t(m32rle-*-linux*): Likewise.\n+\t(mcore-*-elf): Add t-fdpbit to tmake_file.\n+\t(microblaze*-*-*): Likewise.\n+\t(mips-sgi-irix6.5*): Add t-tpbit to tmake_file.\n+\t(mips*-*-netbsd*): Add mips/t-mips to tmake_file.\n+\t(mips64*-*-linux*): Also handle mipsisa64*-*-linux*.\n+\tFix typo.\n+\tAdd mips/t-tpbit to tmake-file.\n+\t(mips*-*-linux*): Fix typo.\n+\t(mips*-sde-elf*): New case\n+\tAdd mips/t-sdemtk unless using newlib.\n+\t(mipsisa64sr71k-*-elf*): Add t-fdpbit to tmake_file.\n+\t(mipsisa64sb1-*-elf*): Add mips/t-mips to tmake_file.\n+\t(mn10300-*-*): Likewise.\n+\t(pdp11-*-*): Likewise.\n+\t(picochip-*-*): Add t-fpbit to tmake_file.\n+\t(powerpc-*-eabisimaltivec*): Likewise.\n+\t(powerpc-*-eabisim*): Likewise.\n+\t(powerpc-*-elf*): Likewise.\n+\t(powerpc-*-eabialtivec*): Likewise.\n+\t(powerpc-xilinx-eabi*): New case.\n+\tAdd t-fdpbit to tmake_file.\n+\t(powerpc-*-eabi*):  Add t-fdpbit to tmake_file.\n+\t(powerpc-*-rtems*): Likewise.\n+\t(powerpc-*-linux*, powerpc64-*-linux*): Add rs6000/t-ppc64-fp to\n+\ttmake_file.\n+\t(powerpc-wrs-vxworks, powerpc-wrs-vxworksae): Add t-fdpbit to\n+\ttmake_file.\n+\t(powerpc-*-lynxos*): Likewise.\n+\t(powerpcle-*-elf*): Likewise.\n+\t(powerpcle-*-eabisim*): Likewise.\n+\t(powerpcle-*-eabi*): Likewise.\n+\t(rs6000-ibm-aix4.[3456789]*, powerpc-ibm-aix4.[3456789]*): Add\n+\tt-fdpbit, rs6000/t-ppc64-fp to tmake_file.\n+\t(rs6000-ibm-aix5.1.*, powerpc-ibm-aix5.1.*): Likewise.\n+\t(rs6000-ibm-aix[56789].*, powerpc-ibm-aix[56789].*): Likewise.\n+\t(rx-*-elf): Add t-fdpbit to tmake_file.\n+\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*)\n+\t(sh[2346lbe]*-*-linux*, sh-*-netbsdelf*, shl*-*-netbsdelf*)\n+\t(sh5-*-netbsd*, sh5l*-*-netbsd*, sh64-*-netbsd*)\n+\t(sh64l*-*-netbsd*): Add t-fdpbit to tmake_file except on\n+\tsh*-*-netbsd*.\n+\t(sh-*-rtems*): Add t-fdpbit to tmake_file.\n+\t(sh-wrs-vxworks): Likewise.\n+\t(sparc-*-elf*): Replace sparc/t-softfp by t-fdpbit in tmake_file.\n+\t(sparc-*-linux*): Add t-fdpbit to tmake_file for *-leon*.\n+\t(sparc-*-rtems*, sparc64-*-rtems*): Split off ...\n+\t(sparc64-*-rtems*): ... new case.\n+\t(sparc-*-rtems*): Add t-fdpbit to tmake_file.\n+\t(spu-*-elf*): Likewise.\n+\tAdd spu/t-elf to tmake_file.\n+\t(v850*-*-*): Add t-fdpbit to tmake_file.\n+\t(xstormy16-*-elf): Likewise.\n+\t(am33_2.0-*-linux*): Add t-fdpbit to tmake_file.\n+\t(mep*-*-*): Likewise.\n+\n 2011-08-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (LIB2ADDEH, LIB2ADDEHSTATIC, LIB2ADDEHSHARED): New"}, {"sha": "4a75a37048eb5f4884e4442a5b72c7df98e6812b", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -37,6 +37,8 @@ SHELL = @SHELL@\n \n cpu_type = @cpu_type@\n enable_shared = @enable_shared@\n+double_type_size = @double_type_size@\n+long_double_type_size = @long_double_type_size@\n decimal_float = @decimal_float@\n enable_decimal_float = @enable_decimal_float@\n fixed_point = @fixed_point@\n@@ -256,6 +258,21 @@ LIBGCC_VER_GNU_PREFIX = __\n LIBGCC_VER_FIXEDPOINT_GNU_PREFIX = __\n LIBGCC_VER_SYMBOLS_PREFIX =\n \n+FPBIT_FUNCS = _pack_sf _unpack_sf _addsub_sf _mul_sf _div_sf \\\n+    _fpcmp_parts_sf _compare_sf _eq_sf _ne_sf _gt_sf _ge_sf \\\n+    _lt_sf _le_sf _unord_sf _si_to_sf _sf_to_si _negate_sf _make_sf \\\n+    _sf_to_df _sf_to_tf _thenan_sf _sf_to_usi _usi_to_sf\n+\n+DPBIT_FUNCS = _pack_df _unpack_df _addsub_df _mul_df _div_df \\\n+    _fpcmp_parts_df _compare_df _eq_df _ne_df _gt_df _ge_df \\\n+    _lt_df _le_df _unord_df _si_to_df _df_to_si _negate_df _make_df \\\n+    _df_to_sf _df_to_tf _thenan_df _df_to_usi _usi_to_df\n+\n+TPBIT_FUNCS = _pack_tf _unpack_tf _addsub_tf _mul_tf _div_tf \\\n+    _fpcmp_parts_tf _compare_tf _eq_tf _ne_tf _gt_tf _ge_tf \\\n+    _lt_tf _le_tf _unord_tf _si_to_tf _tf_to_si _negate_tf _make_tf \\\n+    _tf_to_df _tf_to_sf _thenan_tf _tf_to_usi _usi_to_tf\n+\n # Additional sources to handle exceptions; overridden by targets as needed.\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n   $(srcdir)/unwind-sjlj.c $(srcdir)/unwind-c.c\n@@ -445,64 +462,55 @@ $(lib2-divmod-s-o): %_s$(objext): $(gcc_srcdir)/libgcc2.c\n libgcc-s-objects += $(lib2-divmod-s-o)\n endif\n \n-# $(FPBIT) et al. are pathnames relative to the GCC build\n-# directory; the supporting files are made by the GCC\n-# Makefile.\n-# FIXME: Soon we will be able to move this logic into this directory.\n-\n-ifneq ($(fpbit-in-libgcc),yes)\n-FPBIT:=$(if $(FPBIT),$(gcc_objdir)/$(FPBIT),)\n-DPBIT:=$(if $(DPBIT),$(gcc_objdir)/$(DPBIT),)\n-TPBIT:=$(if $(TPBIT),$(gcc_objdir)/$(TPBIT),)\n-endif\n-\n ifeq ($(TPBIT),)\n # _sf_to_tf and _df_to_tf require tp-bit.c being compiled in.\n FPBIT_FUNCS := $(filter-out _sf_to_tf,$(FPBIT_FUNCS))\n DPBIT_FUNCS := $(filter-out _df_to_tf,$(DPBIT_FUNCS))\n endif\n \n+fpbit-src := $(srcdir)/fp-bit.c\n+\n # Build FPBIT.\n ifneq ($(FPBIT),)\n fpbit-o = $(patsubst %,%$(objext),$(FPBIT_FUNCS))\n-$(fpbit-o): %$(objext): $(FPBIT)\n-\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(FPBIT) $(vis_hide)\n+$(fpbit-o): %$(objext): $(fpbit-src)\n+\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* -DFLOAT $(FPBIT_CFLAGS) -c $< $(vis_hide)\n libgcc-objects += $(fpbit-o)\n \n ifeq ($(enable_shared),yes)\n fpbit-s-o = $(patsubst %,%_s$(objext),$(FPBIT_FUNCS))\n-$(fpbit-s-o): %_s$(objext): $(FPBIT)\n-\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(FPBIT)\n+$(fpbit-s-o): %_s$(objext): $(fpbit-src)\n+\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* -DFLOAT $(FPBIT_CFLAGS)  -c $<\n libgcc-s-objects += $(fpbit-s-o)\n endif\n endif\n \n # Build DPBIT.\n ifneq ($(DPBIT),)\n dpbit-o = $(patsubst %,%$(objext),$(DPBIT_FUNCS))\n-$(dpbit-o): %$(objext): $(DPBIT)\n-\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(DPBIT) $(vis_hide)\n+$(dpbit-o): %$(objext): $(fpbit-src)\n+\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* $(DPBIT_CFLAGS) -c $< $(vis_hide)\n libgcc-objects += $(dpbit-o)\n \n ifeq ($(enable_shared),yes)\n dpbit-s-o = $(patsubst %,%_s$(objext),$(DPBIT_FUNCS))\n-$(dpbit-s-o): %_s$(objext): $(DPBIT)\n-\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(DPBIT)\n+$(dpbit-s-o): %_s$(objext): $(fpbit-src)\n+\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* $(DPBIT_CFLAGS) -c $<\n libgcc-s-objects += $(dpbit-s-o)\n endif\n endif\n \n # Build TPBIT.\n ifneq ($(TPBIT),)\n tpbit-o = $(patsubst %,%$(objext),$(TPBIT_FUNCS))\n-$(tpbit-o): %$(objext): $(TPBIT)\n-\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(TPBIT) $(vis_hide)\n+$(tpbit-o): %$(objext): $(fpbit-src)\n+\t$(gcc_compile) -DFINE_GRAINED_LIBRARIES -DL$* -DTFLOAT $(TPBIT_CFLAGS) -c $< $(vis_hide)\n libgcc-objects += $(tpbit-o)\n \n ifeq ($(enable_shared),yes)\n tpbit-s-o = $(patsubst %,%_s$(objext),$(TPBIT_FUNCS))\n-$(tpbit-s-o): %_s$(objext): $(TPBIT)\n-\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* -c $(TPBIT)\n+$(tpbit-s-o): %_s$(objext): $(fpbit-src)\n+\t$(gcc_s_compile) -DFINE_GRAINED_LIBRARIES -DL$* -DTFLOAT $(TPBIT_CFLAGS) -c $<\n libgcc-s-objects += $(tpbit-s-o)\n endif\n endif"}, {"sha": "cd4f054336b4875864fd51b419ffd1870b2c2bc0", "filename": "libgcc/config.host", "status": "modified", "additions": 96, "deletions": 15, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -72,6 +72,7 @@ cpu_type=`echo ${host} | sed 's/-.*$//'`\n case ${host} in\n m32c*-*-*)\n         cpu_type=m32c\n+\ttmake_file=t-fdpbit\n         ;;\n alpha*-*-*)\n \tcpu_type=alpha\n@@ -121,6 +122,7 @@ microblaze*-*-*)\n \t;;\n mips*-*-*)\n \tcpu_type=mips\n+\ttmake_file=mips/t-mips\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n@@ -265,8 +267,10 @@ alpha*-dec-*vms*)\n \tmd_unwind_header=alpha/vms-unwind.h\n \t;;\n arm-wrs-vxworks)\n+\ttmake_file=t-fdpbit\n \t;;\n arm*-*-freebsd*)\n+\ttmake_file=t-fdpbit\n \t;;\n arm*-*-netbsdelf*)\n \t;;\n@@ -309,40 +313,56 @@ arm*-*-elf)\n arm*-wince-pe*)\n \t;;\n avr-*-rtems*)\n+\ttmake_file=t-fpbit\n \t;;\n avr-*-*)\n-    # Make HImode functions for AVR\n-    tmake_file=${cpu_type}/t-avr\n+\t# Make HImode functions for AVR\n+\ttmake_file=\"${cpu_type}/t-avr t-fpbit\"\n+\n \t;;\n bfin*-elf*)\n+\ttmke_file=t-fdpbit\n         ;;\n bfin*-uclinux*)\n+\ttmake_file=t-fdpbit\n \tmd_unwind_header=bfin/linux-unwind.h\n         ;;\n bfin*-linux-uclibc*)\n+\ttmake_file=t-fdpbit\n \t# No need to build crtbeginT.o on uClibc systems.  Should probably\n \t# be moved to the OS specific section above.\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tmd_unwind_header=bfin/linux-unwind.h\n \t;;\n+bfin*-rtems*)\n+\ttmake_file=t-fdpbit\n+\t;;\n bfin*-*)\n+\ttmake_file=t-fdpbit\n         ;;\n crisv32-*-elf | crisv32-*-none | cris-*-elf | cris-*-none)\n+\ttmake_file=t-fdpbit\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n cris-*-linux* | crisv32-*-linux*)\n+\ttmake_file=t-fdpbit\n \t;;\n fido-*-elf)\n \t;;\n fr30-*-elf)\n+\ttmake_file=t-fdpbit\n \t;;\n frv-*-elf)\n+\ttmake_file=t-fdpbit\n \t;;\n frv-*-*linux*)\n+\ttmake_file=t-fdpbit\n \t;;\n h8300-*-rtems*)\n+\ttmake_file=t-fpbit\n \t;;\n h8300-*-elf*)\n+\ttmake_file=t-fpbit\n \t;;\n hppa*64*-*-linux*)\n \t;;\n@@ -458,6 +478,7 @@ ia64-hp-*vms*)\n \tmd_unwind_header=ia64/vms-unwind.h\n \t;;\n iq2000*-*-elf*)\n+\ttmake_file=t-fdpbit\n         ;;\n lm32-*-elf*|lm32-*-rtems*)\n         extra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n@@ -468,12 +489,16 @@ lm32-*-uclinux*)\n         tmake_file=\"lm32/t-lm32 lm32/t-uclinux t-softfp\"\n \t;;\t\n m32r-*-elf*|m32r-*-rtems*)\n+\ttmake_file=t-fdpbit\n  \t;;\n m32rle-*-elf*)\n+\ttmake_file=t-fdpbit\n \t;;\n m32r-*-linux*)\n+\ttmake_file=t-fdpbit\n  \t;;\n m32rle-*-linux*)\n+\ttmake_file=t-fdpbit\n \t;;\n m68k-*-elf*)\n \t;;\n@@ -492,29 +517,41 @@ m68k-*-linux*)\t\t\t# Motorola m68k's running GNU/Linux\n m68k-*-rtems*)\n \t;;\n mcore-*-elf)\n+\ttmake_file=t-fdpbit\n \t;;\n microblaze*-*-*)\n-        tmake_file=\"microblaze/t-microblaze\"\n+        tmake_file=\"microblaze/t-microblaze t-fdpbit\"\n \t;;\n mips-sgi-irix6.5*)\n-\ttmake_file=\"mips/t-irix6 t-crtfm t-slibgcc mips/t-slibgcc-irix\"\n+\ttmake_file=\"$tmake_file mips/t-irix6 t-crtfm mips/t-tpbit t-slibgcc mips/t-slibgcc-irix\"\n \textra_parts=\"crtbegin.o crtend.o crtfastmath.o irix-crti.o irix-crtn.o\"\n \tmd_unwind_header=mips/irix6-unwind.h\n \t;;\n mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \t;;\n-mips64*-*-linux*)\n+mips64*-*-linux* | mipsisa64*-*-linux*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n-\ttmake_file=\"{$tmake_file} t-crtfm\"\n+\ttmake_file=\"${tmake_file} t-crtfm mips/t-tpbit\"\n \tmd_unwind_header=mips/linux-unwind.h\n \t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n \textra_parts=\"$extra_parts crtfastmath.o\"\n-\ttmake_file=\"{$tmake_file} t-crtfm\"\n+\ttmake_file=\"${tmake_file} t-crtfm\"\n \tmd_unwind_header=mips/linux-unwind.h\n \t;;\n mips*-*-openbsd*)\n \t;;\n+mips*-sde-elf*)\n+\tcase \"${with_newlib}\" in\n+\t  yes)\n+\t    # newlib / libgloss.\n+\t    ;;\n+\t  *)\n+\t    # MIPS toolkit libraries.\n+\t    tmake_file=mips/t-sdemtk\n+\t    ;;\n+\tesac\n+\t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf*)\n \t;;\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf*)\n@@ -524,6 +561,7 @@ mipsisa64-*-elf* | mipsisa64el-*-elf*)\n mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n \t;;\n mipsisa64sr71k-*-elf*)\n+\ttmake_file=t-fdpbit\n         ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n \t;;\n@@ -546,15 +584,17 @@ mmix-knuth-mmixware)\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-${cpu_type}\"\n \t;;\n mn10300-*-*)\n+\ttmake_file=t-fdpbit\n \t;;\n moxie-*-*)\n \ttmake_file=\"moxie/t-moxie moxie/t-moxie-softfp\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \t;;\n pdp11-*-*)\n+\ttmake_file=t-fdpbit\n \t;;\n picochip-*-*)\n-\ttmake_file=picochip/t-picochip\n+\ttmake_file=\"picochip/t-picochip t-fpbit\"\n         ;;\n powerpc-*-darwin*)\n \tcase ${host} in\n@@ -580,44 +620,60 @@ powerpc-*-eabispe*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm\"\n \t;;\n powerpc-*-eabisimaltivec*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-eabisim*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-elf*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-eabialtivec*)\n+\ttmake_file=t-fdpbit\n+\t;;\n+powerpc-xilinx-eabi*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-eabi*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm t-fdpbit\"\n \t;;\n powerpc-*-rtems*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-linux* | powerpc64-*-linux*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ldbl128 t-softfp t-dfprules\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ldbl128 t-softfp t-dfprules rs6000/t-ppc64-fp\"\n \tmd_unwind_header=rs6000/linux-unwind.h\n \t;;\n powerpc-wrs-vxworks|powerpc-wrs-vxworksae)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpc-*-lynxos*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpcle-*-elf*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpcle-*-eabisim*)\n+\ttmake_file=t-fdpbit\n \t;;\n powerpcle-*-eabi*)\n+\ttmake_file=t-fdpbit\n \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n+\ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp\"\n \t;;\n rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n+\ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp\"\n \t;;\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n+\ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp\"\n \t;;\n rx-*-elf)\n \textra_parts=\"crtbegin.o crtend.o\"\n-\ttmake_file=\"rx/t-rx\"\n+\ttmake_file=\"rx/t-rx t-fdpbit\"\n \t;;\n s390-*-linux*)\n \ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-linux s390/32/t-floattodi\"\n@@ -639,14 +695,25 @@ sh-*-elf* | sh[12346l]*-*-elf* | \\\n    sh64-*-netbsd* | sh64l*-*-netbsd*)\n \tcase ${host} in\n \tsh*-*-linux*)\n-\t\ttmake_file=\"${tmake_file} sh/t-linux\"\n+\t\ttmake_file=\"${tmake_file} sh/t-linux t-fdpbit\"\n \t\tmd_unwind_header=sh/linux-unwind.h\n \t\t;;\n+\tsh*-*-netbsd*)\n+\t\t# NetBSD's C library includes a fast software FP library that\n+\t\t# has support for setting/setting the rounding mode, exception\n+\t\t# mask, etc.  Therefore, we don't want to include software FP\n+\t\t# in libgcc.\n+\t\t;;\n+\tsh*-*-*)\n+\t        tmake_file=t-fdpbit\n+\t\t;;\n \tesac\n \t;;\n sh-*-rtems*)\n+\ttmake_file=t-fdpbit\n \t;;\n sh-wrs-vxworks)\n+\ttmake_file=t-fdpbit\n \t;;\n sparc-*-netbsdelf*)\n \t;;\n@@ -660,16 +727,21 @@ sparc-*-elf*)\n \t  \ttmake_file=\"sparc/t-softmul\"\n \t  \t;;\n \tesac\n-\ttmake_file=\"${tmake_file} sparc/t-softfp t-crtin t-crtfm\"\n+\ttmake_file=\"${tmake_file} t-fdpbit t-crtin t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n+\tcase ${host} in\n+\t*-leon*)\n+\t\ttmake_file=t-fdpbit\n+\t\t;;\n+\tesac\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} t-crtfm\"\n \tmd_unwind_header=sparc/linux-unwind.h\n \t;;\n-sparc-*-rtems* | sparc64-*-rtems* )\n-\ttmake_file=\"sparc/t-elf t-crtin t-crtfm t-rtems\"\n+sparc-*-rtems*)\n+\ttmake_file=\"sparc/t-elf t-crtin t-crtfm t-rtems t-fdpbit\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc*-*-solaris2*)\n@@ -681,6 +753,10 @@ sparc64-*-elf*)\n \ttmake_file=\"${tmake_file} t-crtin t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n \t;;\n+sparc64-*-rtems*)\n+\ttmake_file=\"sparc/t-elf t-crtin t-crtfm t-rtems\"\n+\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n+\t;;\n sparc-wrs-vxworks)\n \t;;\n sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n@@ -695,11 +771,13 @@ sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n sparc64-*-netbsd*)\n \t;;\n spu-*-elf*)\n+\ttmake_file=\"t-fdpbit spu/t-elf\"\n \t;;\n tic6x-*-*)\n \ttmake_file=\"${tmake_file} t-gnu-prefix\"\n \t;;\n v850*-*-*)\n+\ttmake_file=t-fdpbit\n \t;;\n vax-*-linux*)\n \t;;\n@@ -708,6 +786,7 @@ vax-*-netbsdelf*)\n vax-*-openbsd*)\n \t;;\n xstormy16-*-elf)\n+\ttmake_file=t-fdpbit\n \t;;\n xtensa*-*-elf*)\n \ttmake_file=xtensa/t-xtensa\n@@ -718,10 +797,12 @@ xtensa*-*-linux*)\n \t;;\n am33_2.0-*-linux*)\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n+\ttmake_file=t-fdpbit\n \t;;\n m32c-*-elf*|m32c-*-rtems*)\n  \t;;\n mep*-*-*)\n+\ttmake_file=t-fdpbit\n \t;;\n *)\n \techo \"*** Configuration ${host} not supported\" 1>&2"}, {"sha": "daca4d81f9aeff057c3acc422bb9aa3f33ee30d6", "filename": "libgcc/config/avr/avr-lib.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Favr%2Favr-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Favr%2Favr-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Favr-lib.h?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,6 @@\n+#ifdef FLOAT\n+#define CMPtype QItype\n+#define DF SF\n+#define DI SI\n+typedef int QItype __attribute__ ((mode (QI)));\n+#endif"}, {"sha": "cff664a54ce7bf28de53afacba5cde33f0ba81c1", "filename": "libgcc/config/h8300/h8300-lib.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fh8300%2Fh8300-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fh8300%2Fh8300-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fh8300%2Fh8300-lib.h?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,7 @@\n+#ifdef FLOAT\n+#ifdef __H8300__\n+#define CMPtype HItype\n+#else\n+#define CMPtype SItype\n+#endif\n+#endif"}, {"sha": "c9bd3cdcb0a7c9f75caad623c41a1f9a054af44f", "filename": "libgcc/config/mips/t-irix6", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-irix6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-irix6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-irix6?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -22,15 +22,3 @@ irix-crti.o: $(srcdir)/config/mips/irix-crti.S\n \n irix-crtn.o: $(srcdir)/config/mips/irix-crtn.S\n \t$(crt_compile) -c $<\n-\n-TPBIT = tp-bit.c\n-\n-$(gcc_objdir)/tp-bit.c: $(gcc_srcdir)/config/fp-bit.c\n-\techo '#ifdef __MIPSEL__'\t\t > $@\n-\techo '# define FLOAT_BIT_ORDER_MISMATCH' >> $@\n-\techo '#endif'\t\t\t\t>> $@\n-\techo '#define QUIET_NAN_NEGATED'\t>> $@\n-\techo '#if __LDBL_MANT_DIG__ == 106'\t>> $@\n-\techo '# define TFLOAT'\t\t\t>> $@\n-\tcat $<\t\t\t\t\t>> $@\n-\techo '#endif'\t\t\t\t>> $@"}, {"sha": "b7d13b3ddb3dfa320dd4649183d02192cb686f19", "filename": "libgcc/config/mips/t-mips", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-mips?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,4 @@\n+FPBIT = true\n+FPBIT_CFLAGS = -DQUIET_NAN_NEGATED\n+DPBIT = true\n+DPBIT_CFLAGS = -DQUIET_NAN_NEGATED"}, {"sha": "a06e828b545a633f18f35867b0cffbce0f3315f9", "filename": "libgcc/config/mips/t-sdemtk", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-sdemtk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-sdemtk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-sdemtk?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,3 @@\n+# Don't build FPBIT and DPBIT; we'll be using the SDE soft-float library.\n+FPBIT =\n+DPBIT ="}, {"sha": "1670ef3ffd6e180d1b2a75885b8e780425318e2d", "filename": "libgcc/config/mips/t-tpbit", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-tpbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fmips%2Ft-tpbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-tpbit?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,4 @@\n+ifeq ($(long_double_type_size),128)\n+TPBIT = true\n+TPBIT_CFLAGS = -DQUIET_NAN_NEGATED\n+endif"}, {"sha": "ab18d2d94b5044237f4df8231512204490c6b1a6", "filename": "libgcc/config/rs6000/ppc64-fp.c", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fppc64-fp.c?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -2,8 +2,8 @@\n    libgcc2.c with macros expanded to force the use of specific types.\n  \n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2006, 2009  Free Software Foundation,\n-   Inc.\n+   2000, 2001, 2002, 2003, 2004, 2006, 2009, 2011\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -28,7 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #if defined(__powerpc64__) || defined (__64BIT__) || defined(__ppc64__)\n #define TMODES\n-#include \"config/fp-bit.h\"\n+#include \"fp-bit.h\"\n \n extern DItype __fixtfdi (TFtype);\n extern DItype __fixdfdi (DFtype);", "previous_filename": "gcc/config/rs6000/ppc64-fp.c"}, {"sha": "4464fd7d6e6ecdd8aeee23d16b6a536646a0914f", "filename": "libgcc/config/rs6000/t-darwin", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-darwin?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -3,6 +3,8 @@ DARWIN_EXTRA_CRT_BUILD_CFLAGS = -mlongcall -mmacosx-version-min=10.4\n crt2.o: $(srcdir)/config/rs6000/darwin-crt2.c\n \t$(crt_compile) $(DARWIN_EXTRA_CRT_BUILD_CFLAGS) -c $<\n \n+LIB2ADD += $(srcdir)/config/rs6000/ppc64-fp.c\n+\n LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n \n SHLIB_VERPFX = $(gcc_srcdir)/config/rs6000/darwin-libgcc"}, {"sha": "26d1730bcdb6a535a2d99fe4f07ea5f81b2dc44a", "filename": "libgcc/config/rs6000/t-ppc64-fp", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,2 @@\n+# Can be used unconditionally, wrapped in __powerpc64__ || __64BIT__ __ppc64__.\n+LIB2ADD += $(srcdir)/config/rs6000/ppc64-fp.c"}, {"sha": "fb1d14632a6df66fedbc839226034fbcd0987af8", "filename": "libgcc/config/rx/rx-lib.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frx%2Frx-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frx%2Frx-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frx%2Frx-lib.h?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,6 @@\n+#ifdef FLOAT\n+#ifndef __RX_64BIT_DOUBLES__\n+#define DF SF\n+#define FLOAT_ONLY\n+#endif\n+#endif"}, {"sha": "3ca7dc069fa8999016c3fd448ac339ed48230f77", "filename": "libgcc/config/rx/t-rx", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frx%2Ft-rx?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n # Makefile fragment for building LIBGCC for the Renesas RX target.\n-# Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2011 Free Software Foundation, Inc.\n # Contributed by Red Hat.\n #\n # This file is part of GCC.\n@@ -28,17 +28,7 @@ LIB2ADD = $(srcdir)/config/rx/rx-abi-functions.c\n # We need special handling of the floating point conversion\n # routines, to allow for the varying size of a double:\n \n-FPBIT = fp-bit.c\n-$(gcc_objdir)/fp-bit.c: $(gcc_srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t\t     > $@\n-\techo '#ifndef __RX_64BIT_DOUBLES__' >> $@\n-\techo '#define DF SF'\t\t    >> $@\n-\techo '#define FLOAT_ONLY'\t    >> $@\n-\techo '#endif' \t\t\t    >> $@\n-\tcat $(gcc_srcdir)/config/fp-bit.c   >> $@\n-\n-DPBIT = dp-bit.c\n-$(gcc_objdir)/dp-bit.c: $(gcc_srcdir)/config/fp-bit.c\n-\techo '#ifdef __RX_64BIT_DOUBLES__'   > $@\n-\tcat $(gcc_srcdir)/config/fp-bit.c   >> $@\n-\techo '#endif'\t\t      \t    >> $@\n+FPBIT = true\n+ifeq ($(double_type_size),64)\n+DPBIT = true\n+endif"}, {"sha": "94dfcfae0a17573aefb1e87feacfe1050425d247", "filename": "libgcc/config/sparc/t-softfp", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fsparc%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201cdb743879cbffd38c53d8ebf85fa9fff1e0e4/libgcc%2Fconfig%2Fsparc%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Ft-softfp?ref=201cdb743879cbffd38c53d8ebf85fa9fff1e0e4", "patch": "@@ -1,29 +0,0 @@\n-# Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-$(gcc_objdir)/dp-bit.c: $(gcc_srcdir)/config/fp-bit.c\n-\tcat $<\t\t\t> $@\n-\n-$(gcc_objdir)/fp-bit.c: $(gcc_srcdir)/config/fp-bit.c\n-\techo '#define FLOAT'\t> $@\n-\tcat $<\t\t\t>> $@"}, {"sha": "7094da526bbe8e516a00687b4986618b3f752af4", "filename": "libgcc/config/spu/t-elf", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fspu%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Fspu%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fspu%2Ft-elf?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,3 @@\n+# We provide our own version of __divdf3 that performs better and has\n+# better support for non-default rounding modes.\n+DPBIT_FUNCS := $(filter-out _div_df, $(DPBIT_FUNCS))"}, {"sha": "0e7119adeaf2055733bac38a964247b9789b7498", "filename": "libgcc/config/t-fdpbit", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Ft-fdpbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Ft-fdpbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-fdpbit?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,2 @@\n+FPBIT = true\n+DPBIT = true"}, {"sha": "e56e34d91c812b501f430880b7b84f4e86bb7927", "filename": "libgcc/config/t-fpbit", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Ft-fpbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfig%2Ft-fpbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-fpbit?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -0,0 +1,2 @@\n+FPBIT = true\n+FPBIT_CFLAGS = -DFLOAT_ONLY -DSMALL_MACHINE"}, {"sha": "0ead080691d522cff6ff66272eeb14d2687ba990", "filename": "libgcc/configure", "status": "modified", "additions": 624, "deletions": 2, "changes": 626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -168,7 +168,8 @@ test x\\$exitcode = x0 || exit 1\"\n   as_suggested=\"  as_lineno_1=\";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested\" as_lineno_1a=\\$LINENO\n   as_lineno_2=\";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested\" as_lineno_2a=\\$LINENO\n   eval 'test \\\"x\\$as_lineno_1'\\$as_run'\\\" != \\\"x\\$as_lineno_2'\\$as_run'\\\" &&\n-  test \\\"x\\`expr \\$as_lineno_1'\\$as_run' + 1\\`\\\" = \\\"x\\$as_lineno_2'\\$as_run'\\\"' || exit 1\"\n+  test \\\"x\\`expr \\$as_lineno_1'\\$as_run' + 1\\`\\\" = \\\"x\\$as_lineno_2'\\$as_run'\\\"' || exit 1\n+test \\$(( 1 + 1 )) = 2 || exit 1\"\n   if (eval \"$as_required\") 2>/dev/null; then :\n   as_have_required=yes\n else\n@@ -551,6 +552,42 @@ PACKAGE_BUGREPORT=''\n PACKAGE_URL='http://www.gnu.org/software/libgcc/'\n \n ac_unique_file=\"static-object.mk\"\n+# Factoring default headers for most tests.\n+ac_includes_default=\"\\\n+#include <stdio.h>\n+#ifdef HAVE_SYS_TYPES_H\n+# include <sys/types.h>\n+#endif\n+#ifdef HAVE_SYS_STAT_H\n+# include <sys/stat.h>\n+#endif\n+#ifdef STDC_HEADERS\n+# include <stdlib.h>\n+# include <stddef.h>\n+#else\n+# ifdef HAVE_STDLIB_H\n+#  include <stdlib.h>\n+# endif\n+#endif\n+#ifdef HAVE_STRING_H\n+# if !defined STDC_HEADERS && defined HAVE_MEMORY_H\n+#  include <memory.h>\n+# endif\n+# include <string.h>\n+#endif\n+#ifdef HAVE_STRINGS_H\n+# include <strings.h>\n+#endif\n+#ifdef HAVE_INTTYPES_H\n+# include <inttypes.h>\n+#endif\n+#ifdef HAVE_STDINT_H\n+# include <stdint.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\"\n+\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n asm_hidden_op\n@@ -563,6 +600,10 @@ vis_hide\n fixed_point\n enable_decimal_float\n decimal_float\n+long_double_type_size\n+double_type_size\n+EGREP\n+GREP\n CPP\n OBJEXT\n EXEEXT\n@@ -1464,6 +1505,255 @@ fi\n   return $ac_retval\n \n } # ac_fn_c_try_cpp\n+\n+# ac_fn_c_try_run LINENO\n+# ----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes\n+# that executables *can* be run.\n+ac_fn_c_try_run ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'\n+  { { case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_try\") 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: program exited with status $ac_status\" >&5\n+       $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+       ac_retval=$ac_status\n+fi\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+  return $ac_retval\n+\n+} # ac_fn_c_try_run\n+\n+# ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n+# --------------------------------------------\n+# Tries to find the compile-time value of EXPR in a program that includes\n+# INCLUDES, setting VAR accordingly. Returns whether the value could be\n+# computed\n+ac_fn_c_compute_int ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  if test \"$cross_compiling\" = yes; then\n+    # Depending upon the size, compute the lo and hi bounds.\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= 0)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=0 ac_mid=0\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid; break\n+else\n+  as_fn_arith $ac_mid + 1 && ac_lo=$as_val\n+\t\t\tif test $ac_lo -le $ac_mid; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid + 1 && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) < 0)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=-1 ac_mid=-1\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=$ac_mid; break\n+else\n+  as_fn_arith '(' $ac_mid ')' - 1 && ac_hi=$as_val\n+\t\t\tif test $ac_mid -le $ac_hi; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  ac_lo= ac_hi=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+# Binary search between lo and hi bounds.\n+while test \"x$ac_lo\" != \"x$ac_hi\"; do\n+  as_fn_arith '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo && ac_mid=$as_val\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid\n+else\n+  as_fn_arith '(' $ac_mid ')' + 1 && ac_lo=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+done\n+case $ac_lo in #((\n+?*) eval \"$3=\\$ac_lo\"; ac_retval=0 ;;\n+'') ac_retval=1 ;;\n+esac\n+  else\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+static long int longval () { return $2; }\n+static unsigned long int ulongval () { return $2; }\n+#include <stdio.h>\n+#include <stdlib.h>\n+int\n+main ()\n+{\n+\n+  FILE *f = fopen (\"conftest.val\", \"w\");\n+  if (! f)\n+    return 1;\n+  if (($2) < 0)\n+    {\n+      long int i = longval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%ld\", i);\n+    }\n+  else\n+    {\n+      unsigned long int i = ulongval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%lu\", i);\n+    }\n+  /* Do not output a trailing newline, as this causes \\r\\n confusion\n+     on some platforms.  */\n+  return ferror (f) || fclose (f) != 0;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  echo >>conftest.val; read $3 <conftest.val; ac_retval=0\n+else\n+  ac_retval=1\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+rm -f conftest.val\n+\n+  fi\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+  return $ac_retval\n+\n+} # ac_fn_c_compute_int\n+\n+# ac_fn_c_check_header_preproc LINENO HEADER VAR\n+# ----------------------------------------------\n+# Tests whether HEADER is present, setting the cache variable VAR accordingly.\n+ac_fn_c_check_header_preproc ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <$2>\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+\n+} # ac_fn_c_check_header_preproc\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -3649,8 +3939,340 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n ac_c_preproc_warn_flag=yes\n \n-# Check for decimal float support.\n \n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e\" >&5\n+$as_echo_n \"checking for grep that handles long lines and -e... \" >&6; }\n+if test \"${ac_cv_path_GREP+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test -z \"$GREP\"; then\n+  ac_path_GREP_found=false\n+  # Loop through the user's path and test for each of PROGNAME-LIST\n+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_prog in grep ggrep; do\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+      ac_path_GREP=\"$as_dir/$ac_prog$ac_exec_ext\"\n+      { test -f \"$ac_path_GREP\" && $as_test_x \"$ac_path_GREP\"; } || continue\n+# Check for GNU ac_path_GREP and select it if it is found.\n+  # Check for GNU $ac_path_GREP\n+case `\"$ac_path_GREP\" --version 2>&1` in\n+*GNU*)\n+  ac_cv_path_GREP=\"$ac_path_GREP\" ac_path_GREP_found=:;;\n+*)\n+  ac_count=0\n+  $as_echo_n 0123456789 >\"conftest.in\"\n+  while :\n+  do\n+    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n+    mv \"conftest.tmp\" \"conftest.in\"\n+    cp \"conftest.in\" \"conftest.nl\"\n+    $as_echo 'GREP' >> \"conftest.nl\"\n+    \"$ac_path_GREP\" -e 'GREP$' -e '-(cannot match)-' < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n+    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n+    as_fn_arith $ac_count + 1 && ac_count=$as_val\n+    if test $ac_count -gt ${ac_path_GREP_max-0}; then\n+      # Best one so far, save it but keep looking for a better one\n+      ac_cv_path_GREP=\"$ac_path_GREP\"\n+      ac_path_GREP_max=$ac_count\n+    fi\n+    # 10*(2^10) chars as input seems more than enough\n+    test $ac_count -gt 10 && break\n+  done\n+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\n+esac\n+\n+      $ac_path_GREP_found && break 3\n+    done\n+  done\n+  done\n+IFS=$as_save_IFS\n+  if test -z \"$ac_cv_path_GREP\"; then\n+    as_fn_error \"no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin\" \"$LINENO\" 5\n+  fi\n+else\n+  ac_cv_path_GREP=$GREP\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP\" >&5\n+$as_echo \"$ac_cv_path_GREP\" >&6; }\n+ GREP=\"$ac_cv_path_GREP\"\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for egrep\" >&5\n+$as_echo_n \"checking for egrep... \" >&6; }\n+if test \"${ac_cv_path_EGREP+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1\n+   then ac_cv_path_EGREP=\"$GREP -E\"\n+   else\n+     if test -z \"$EGREP\"; then\n+  ac_path_EGREP_found=false\n+  # Loop through the user's path and test for each of PROGNAME-LIST\n+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_prog in egrep; do\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+      ac_path_EGREP=\"$as_dir/$ac_prog$ac_exec_ext\"\n+      { test -f \"$ac_path_EGREP\" && $as_test_x \"$ac_path_EGREP\"; } || continue\n+# Check for GNU ac_path_EGREP and select it if it is found.\n+  # Check for GNU $ac_path_EGREP\n+case `\"$ac_path_EGREP\" --version 2>&1` in\n+*GNU*)\n+  ac_cv_path_EGREP=\"$ac_path_EGREP\" ac_path_EGREP_found=:;;\n+*)\n+  ac_count=0\n+  $as_echo_n 0123456789 >\"conftest.in\"\n+  while :\n+  do\n+    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n+    mv \"conftest.tmp\" \"conftest.in\"\n+    cp \"conftest.in\" \"conftest.nl\"\n+    $as_echo 'EGREP' >> \"conftest.nl\"\n+    \"$ac_path_EGREP\" 'EGREP$' < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n+    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n+    as_fn_arith $ac_count + 1 && ac_count=$as_val\n+    if test $ac_count -gt ${ac_path_EGREP_max-0}; then\n+      # Best one so far, save it but keep looking for a better one\n+      ac_cv_path_EGREP=\"$ac_path_EGREP\"\n+      ac_path_EGREP_max=$ac_count\n+    fi\n+    # 10*(2^10) chars as input seems more than enough\n+    test $ac_count -gt 10 && break\n+  done\n+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\n+esac\n+\n+      $ac_path_EGREP_found && break 3\n+    done\n+  done\n+  done\n+IFS=$as_save_IFS\n+  if test -z \"$ac_cv_path_EGREP\"; then\n+    as_fn_error \"no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin\" \"$LINENO\" 5\n+  fi\n+else\n+  ac_cv_path_EGREP=$EGREP\n+fi\n+\n+   fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP\" >&5\n+$as_echo \"$ac_cv_path_EGREP\" >&6; }\n+ EGREP=\"$ac_cv_path_EGREP\"\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ANSI C header files\" >&5\n+$as_echo_n \"checking for ANSI C header files... \" >&6; }\n+if test \"${ac_cv_header_stdc+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include <string.h>\n+#include <float.h>\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_header_stdc=yes\n+else\n+  ac_cv_header_stdc=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+if test $ac_cv_header_stdc = yes; then\n+  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <string.h>\n+\n+_ACEOF\n+if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n+  $EGREP \"memchr\" >/dev/null 2>&1; then :\n+\n+else\n+  ac_cv_header_stdc=no\n+fi\n+rm -f conftest*\n+\n+fi\n+\n+if test $ac_cv_header_stdc = yes; then\n+  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+\n+_ACEOF\n+if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n+  $EGREP \"free\" >/dev/null 2>&1; then :\n+\n+else\n+  ac_cv_header_stdc=no\n+fi\n+rm -f conftest*\n+\n+fi\n+\n+if test $ac_cv_header_stdc = yes; then\n+  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.\n+  if test \"$cross_compiling\" = yes; then :\n+  :\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <ctype.h>\n+#include <stdlib.h>\n+#if ((' ' & 0x0FF) == 0x020)\n+# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')\n+# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))\n+#else\n+# define ISLOWER(c) \\\n+\t\t   (('a' <= (c) && (c) <= 'i') \\\n+\t\t     || ('j' <= (c) && (c) <= 'r') \\\n+\t\t     || ('s' <= (c) && (c) <= 'z'))\n+# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))\n+#endif\n+\n+#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    if (XOR (islower (i), ISLOWER (i))\n+\t|| toupper (i) != TOUPPER (i))\n+      return 2;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+\n+else\n+  ac_cv_header_stdc=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc\" >&5\n+$as_echo \"$ac_cv_header_stdc\" >&6; }\n+if test $ac_cv_header_stdc = yes; then\n+\n+$as_echo \"#define STDC_HEADERS 1\" >>confdefs.h\n+\n+fi\n+\n+# On IRIX 5.3, sys/types and inttypes.h are conflicting.\n+for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \\\n+\t\t  inttypes.h stdint.h unistd.h\n+do :\n+  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+ac_fn_c_check_header_preproc \"$LINENO\" \"$ac_header\" \"$as_ac_Header\"\n+eval as_val=\\$$as_ac_Header\n+   if test \"x$as_val\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of double\" >&5\n+$as_echo_n \"checking size of double... \" >&6; }\n+if test \"${ac_cv_sizeof_double+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (double))\" \"ac_cv_sizeof_double\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_double\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+{ as_fn_set_status 77\n+as_fn_error \"cannot compute sizeof (double)\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }; }\n+   else\n+     ac_cv_sizeof_double=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_double\" >&5\n+$as_echo \"$ac_cv_sizeof_double\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_DOUBLE $ac_cv_sizeof_double\n+_ACEOF\n+\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of long double\" >&5\n+$as_echo_n \"checking size of long double... \" >&6; }\n+if test \"${ac_cv_sizeof_long_double+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (long double))\" \"ac_cv_sizeof_long_double\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_long_double\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+{ as_fn_set_status 77\n+as_fn_error \"cannot compute sizeof (long double)\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }; }\n+   else\n+     ac_cv_sizeof_long_double=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_long_double\" >&5\n+$as_echo \"$ac_cv_sizeof_long_double\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_LONG_DOUBLE $ac_cv_sizeof_long_double\n+_ACEOF\n+\n+\n+as_fn_arith $ac_cv_sizeof_double \\* 8 && double_type_size=$as_val\n+as_fn_arith $ac_cv_sizeof_long_double \\* 8 && long_double_type_size=$as_val\n+\n+\n+\n+# Check for decimal float support.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether decimal floating point is supported\" >&5\n $as_echo_n \"checking whether decimal floating point is supported... \" >&6; }\n if test \"${libgcc_cv_dfp+set}\" = set; then :"}, {"sha": "8e2d1accd9de35ed07ea7c64bbf3d0fa645be812", "filename": "libgcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -152,6 +152,13 @@ GCC_NO_EXECUTABLES\n AC_PROG_CC\n AC_PROG_CPP_WERROR\n \n+AC_CHECK_SIZEOF([double])\n+AC_CHECK_SIZEOF([long double])\n+AS_VAR_ARITH([double_type_size], [$ac_cv_sizeof_double \\* 8])\n+AS_VAR_ARITH([long_double_type_size], [$ac_cv_sizeof_long_double \\* 8])\n+AC_SUBST(double_type_size)\n+AC_SUBST(long_double_type_size)\n+\n # Check for decimal float support.\n AC_CACHE_CHECK([whether decimal floating point is supported], [libgcc_cv_dfp],\n \t       [AC_COMPILE_IFELSE([_Decimal32 x;], [libgcc_cv_dfp=yes],"}, {"sha": "de9b3ada5ecb904d10a793b2a53c582b82023601", "filename": "libgcc/fp-bit.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffp-bit.c?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,7 +1,7 @@\n /* This is a software floating point library which can be used\n    for targets without hardware floating point. \n    Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2004, 2005, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -37,7 +37,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"config/fp-bit.h\"\n+#include \"fp-bit.h\"\n \n /* The following macros can be defined to change the behavior of this file:\n    FLOAT: Implement a `float', aka SFmode, fp library.  If this is not", "previous_filename": "gcc/config/fp-bit.c"}, {"sha": "1ae0741d6af9969d2779941d04fbac6bd8bdc692", "filename": "libgcc/fp-bit.h", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Ffp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569dc494616700a3cf078da0cc631c36a4f15821/libgcc%2Ffp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffp-bit.h?ref=569dc494616700a3cf078da0cc631c36a4f15821", "patch": "@@ -1,5 +1,5 @@\n /* Header file for fp-bit.c.  */\n-/* Copyright (C) 2000, 2002, 2003, 2006, 2009, 2010\n+/* Copyright (C) 2000, 2002, 2003, 2006, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -129,6 +129,14 @@ typedef unsigned int UTItype __attribute__ ((mode (TI)));\n #define NO_DI_MODE\n #endif\n \n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define FLOAT_BIT_ORDER_MISMATCH\n+#endif\n+\n+#if __BYTE_ORDER__ != __FLOAT_WORD_ORDER__\n+#define FLOAT_WORD_ORDER_MISMATCH\n+#endif\n+\n #ifdef TFLOAT\n # ifndef TMODES\n #  error \"TFLOAT requires long double to have 113 bits of mantissa\"", "previous_filename": "gcc/config/fp-bit.h"}]}