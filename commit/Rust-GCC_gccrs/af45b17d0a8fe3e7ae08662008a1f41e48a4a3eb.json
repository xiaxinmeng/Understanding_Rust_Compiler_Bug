{"sha": "af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "node_id": "C_kwDOANBUbNoAKGFmNDViMTdkMGE4ZmUzZTdhZTA4NjYyMDA4YTFmNDFlNDhhNGEzZWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-28T15:49:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-28T15:49:23Z"}, "message": "c++: Allow translations of check_postcondition_result messages [PR109309]\n\nAs mentioned in the PR, constructing a message from two parts by\nconcatenating them prevents translations, unless one of the parts\nis a keyword which should be never translated.\n\nThe following patch fixes that.\n\n2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109309\n\t* contracts.cc: Include intl.h.\n\t(check_postcondition_result): Don't form diagnostics from two halves\n\tof an English message to allow translations.", "tree": {"sha": "ba1f03e6adddbeffabd7779f33a51fc2b6051ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba1f03e6adddbeffabd7779f33a51fc2b6051ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8fc610fb7112deb8c33c673a52983368dde9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8fc610fb7112deb8c33c673a52983368dde9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8fc610fb7112deb8c33c673a52983368dde9b7"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "9d1cb558f4f72ebe78c3420667e7d33e664be595", "filename": "gcc/cp/contracts.cc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb/gcc%2Fcp%2Fcontracts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb/gcc%2Fcp%2Fcontracts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcontracts.cc?ref=af45b17d0a8fe3e7ae08662008a1f41e48a4a3eb", "patch": "@@ -161,6 +161,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"print-tree.h\"\n #include \"stor-layout.h\"\n+#include \"intl.h\"\n \n const int max_custom_roles = 32;\n static contract_role contract_build_roles[max_custom_roles] = {\n@@ -636,17 +637,15 @@ bool\n check_postcondition_result (tree decl, tree type, location_t loc)\n {\n   if (VOID_TYPE_P (type))\n-  {\n-    const char* what;\n-    if (DECL_CONSTRUCTOR_P (decl))\n-      what = \"constructor\";\n-    else if (DECL_DESTRUCTOR_P (decl))\n-      what  = \"destructor\";\n-    else\n-      what = \"function\";\n-    error_at (loc, \"%s does not return a value to test\", what);\n-    return false;\n-  }\n+    {\n+      error_at (loc,\n+\t\tDECL_CONSTRUCTOR_P (decl)\n+\t\t? G_(\"constructor does not return a value to test\")\n+\t\t: DECL_DESTRUCTOR_P (decl)\n+\t\t? G_(\"destructor does not return a value to test\")\n+\t\t: G_(\"function does not return a value to test\"));\n+      return false;\n+    }\n \n   return true;\n }"}]}