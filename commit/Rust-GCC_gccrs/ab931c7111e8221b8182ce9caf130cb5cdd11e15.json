{"sha": "ab931c7111e8221b8182ce9caf130cb5cdd11e15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5MzFjNzExMWU4MjIxYjgxODJjZTljYWYxMzBjYjVjZGQxMWUxNQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-15T13:49:55Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-15T13:49:55Z"}, "message": "sse.md (unspec): Added UNSPEC_VPERMI2, UNSPEC_VPERMT2, UNSPEC_SCATTER.\n\n        * config/i386/sse.md (unspec): Added UNSPEC_VPERMI2, UNSPEC_VPERMT2,\n        UNSPEC_SCATTER.\n        (VI48F_512): New.\n        (avx512fmaskmode): Ditto.\n        (bcstscalarsuff): Ditto.\n        (avx512f_blendm<mode>): Ditto.\n        (cmp_imm_predicate): Ditto.\n        (avx512f_cmp<mode>3): Ditto.\n        (avx512f_vec_dup<mode>): Ditto.\n        (avx512f_vec_dup_mem<mode>): Ditto.\n        (avx512f_vpermi2var<mode>3): Ditto.\n        (avx512f_vpermt2var<mode>3): Ditto.\n        (vec_init<mode>): Ditto.\n        (avx512f_gathersi<mode>): Ditto.\n        (*avx512f_gathersi<mode>): Ditto.\n        (*avx512f_gathersi<mode>_2): Ditto.\n        (avx512f_gatherdi<mode>): Ditto.\n        (*avx512f_gatherdi<mode>): Ditto.\n        (*avx512f_gatherdi<mode>_2): Ditto.\n        (avx512f_scattersi<mode>): Ditto.\n        (*avx512f_scattersi<mode>): Ditto.\n        (avx512f_scatterdi<mode>): Ditto.\n        (*avx512f_scatterdi<mode>): Ditto.\n        (sseintprefix): Extened with wider modes.\n        (VEC_GATHER_IDXSI): Ditto.\n        (VEC_GATHER_IDXDI): Ditto.\n        (VEC_GATHER_SRCDI): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203604", "tree": {"sha": "a440fc86db23dc72f7a59ea66b958712844880f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a440fc86db23dc72f7a59ea66b958712844880f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab931c7111e8221b8182ce9caf130cb5cdd11e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab931c7111e8221b8182ce9caf130cb5cdd11e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab931c7111e8221b8182ce9caf130cb5cdd11e15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab931c7111e8221b8182ce9caf130cb5cdd11e15/comments", "author": null, "committer": null, "parents": [{"sha": "c9acb877bb8d3898aae1884950fda65ac40b2bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9acb877bb8d3898aae1884950fda65ac40b2bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9acb877bb8d3898aae1884950fda65ac40b2bd9"}], "stats": {"total": 370, "additions": 354, "deletions": 16}, "files": [{"sha": "7d3f63b877835fa6c8c1216294159578f2c33d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab931c7111e8221b8182ce9caf130cb5cdd11e15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab931c7111e8221b8182ce9caf130cb5cdd11e15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab931c7111e8221b8182ce9caf130cb5cdd11e15", "patch": "@@ -1,3 +1,41 @@\n+2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (unspec): Added UNSPEC_VPERMI2, UNSPEC_VPERMT2,\n+\tUNSPEC_SCATTER.\n+\t(VI48F_512): New.\n+\t(avx512fmaskmode): Ditto.\n+\t(bcstscalarsuff): Ditto.\n+\t(avx512f_blendm<mode>): Ditto.\n+\t(cmp_imm_predicate): Ditto.\n+\t(avx512f_cmp<mode>3): Ditto.\n+\t(avx512f_vec_dup<mode>): Ditto.\n+\t(avx512f_vec_dup_mem<mode>): Ditto.\n+\t(avx512f_vpermi2var<mode>3): Ditto.\n+\t(avx512f_vpermt2var<mode>3): Ditto.\n+\t(vec_init<mode>): Ditto.\n+\t(avx512f_gathersi<mode>): Ditto.\n+\t(*avx512f_gathersi<mode>): Ditto.\n+\t(*avx512f_gathersi<mode>_2): Ditto.\n+\t(avx512f_gatherdi<mode>): Ditto.\n+\t(*avx512f_gatherdi<mode>): Ditto.\n+\t(*avx512f_gatherdi<mode>_2): Ditto.\n+\t(avx512f_scattersi<mode>): Ditto.\n+\t(*avx512f_scattersi<mode>): Ditto.\n+\t(avx512f_scatterdi<mode>): Ditto.\n+\t(*avx512f_scatterdi<mode>): Ditto.\n+\t(sseintprefix): Extened with wider modes.\n+\t(VEC_GATHER_IDXSI): Ditto.\n+\t(VEC_GATHER_IDXDI): Ditto.\n+\t(VEC_GATHER_SRCDI): Ditto.\n+\n 2013-10-15  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "3ead386daec7f3e92b53fd3f1681c5fd42134cfb", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 316, "deletions": 16, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab931c7111e8221b8182ce9caf130cb5cdd11e15/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab931c7111e8221b8182ce9caf130cb5cdd11e15/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ab931c7111e8221b8182ce9caf130cb5cdd11e15", "patch": "@@ -83,6 +83,11 @@\n   UNSPEC_VPERMTI\n   UNSPEC_GATHER\n   UNSPEC_VSIBADDR\n+\n+  ;; For AVX512F support\n+  UNSPEC_VPERMI2\n+  UNSPEC_VPERMT2\n+  UNSPEC_SCATTER\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -371,6 +376,7 @@\n   [V8SI V8SF\n   (V16SI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n   (V8DI  \"TARGET_AVX512F\") (V8DF  \"TARGET_AVX512F\")])\n+(define_mode_iterator VI48F_512 [V16SI V16SF V8DI V8DF])\n \n ;; Mapping from float mode to required SSE level\n (define_mode_attr sse\n@@ -409,6 +415,15 @@\n    (V4SF \"V4SF\") (V2DF \"V2DF\")\n    (TI \"TI\")])\n \n+;; Mapping of vector modes to corresponding mask size\n+(define_mode_attr avx512fmaskmode\n+  [(V16QI \"HI\")\n+   (V16HI \"HI\") (V8HI  \"QI\")\n+   (V16SI \"HI\") (V8SI  \"QI\") (V4SI  \"QI\")\n+   (V8DI  \"QI\") (V4DI  \"QI\") (V2DI  \"QI\")\n+   (V16SF \"HI\") (V8SF  \"QI\") (V4SF  \"QI\")\n+   (V8DF  \"QI\") (V4DF  \"QI\") (V2DF  \"QI\")])\n+\n ;; Mapping of vector float modes to an integer mode of the same size\n (define_mode_attr sseintvecmode\n   [(V16SF \"V16SI\") (V8DF  \"V8DI\")\n@@ -501,10 +516,12 @@\n \n ;; SSE prefix for integer vector modes\n (define_mode_attr sseintprefix\n-  [(V2DI \"p\") (V2DF \"\")\n-   (V4DI \"p\") (V4DF \"\")\n-   (V4SI \"p\") (V4SF \"\")\n-   (V8SI \"p\") (V8SF \"\")])\n+  [(V2DI  \"p\") (V2DF  \"\")\n+   (V4DI  \"p\") (V4DF  \"\")\n+   (V8DI  \"p\") (V8DF  \"\")\n+   (V4SI  \"p\") (V4SF  \"\")\n+   (V8SI  \"p\") (V8SF  \"\")\n+   (V16SI \"p\") (V16SF \"\")])\n \n ;; SSE scalar suffix for vector modes\n (define_mode_attr ssescalarmodesuffix\n@@ -549,6 +566,10 @@\n (define_mode_attr blendbits\n   [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n \n+;; Mapping suffixes for broadcast\n+(define_mode_attr bcstscalarsuff\n+  [(V16SI \"d\") (V16SF \"ss\") (V8DI \"q\") (V8DF \"sd\")])\n+\n ;; Patterns whose name begins with \"sse{,2,3}_\" are invoked by intrinsics.\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -688,6 +709,18 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n+(define_insn \"avx512f_blendm<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI48F_512\n+\t  (match_operand:VI48F_512 2 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>blendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"sse2_movq128\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DI\n@@ -1826,6 +1859,24 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n+(define_mode_attr cmp_imm_predicate\n+  [(V16SF \"const_0_to_31_operand\") (V8DF \"const_0_to_31_operand\")\n+  (V16SI \"const_0_to_7_operand\") (V8DI \"const_0_to_7_operand\")])\n+\n+(define_insn \"avx512f_cmp<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48F_512 2 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n+\t  UNSPEC_PCMP))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>cmp<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<sse>_comi\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n@@ -10931,6 +10982,28 @@\n    (set_attr \"isa\" \"*,avx2,noavx2\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"avx512f_vec_dup<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI48F_512\n+\t  (vec_select:<ssescalarmode>\n+\t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_vec_dup_mem<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI48F_512\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx2_vbroadcasti128_<mode>\"\n   [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n \t(vec_concat:VI_256\n@@ -11121,6 +11194,31 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_vpermi2var<mode>3\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n+\t   (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n+\t   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPERMI2))]\n+  \"TARGET_AVX512F\"\n+  \"vpermi2<ssemodesuffix>\\t{%3, %1, %0|%0, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_vpermt2var<mode>3\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48F_512 2 \"register_operand\" \"0\")\n+\t   (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_VPERMT2))]\n+  \"TARGET_AVX512F\"\n+  \"vpermt2<ssemodesuffix>\\t{%3, %1, %0|%0, %1, %3}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"avx_vperm2f128<mode>3\"\n   [(set (match_operand:AVX256MODE2P 0 \"register_operand\")\n@@ -11454,6 +11552,15 @@\n   DONE;\n })\n \n+(define_expand \"vec_init<mode>\"\n+  [(match_operand:VI48F_512 0 \"register_operand\")\n+   (match_operand 1)]\n+  \"TARGET_AVX512F\"\n+{\n+  ix86_expand_vector_init (false, operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"avx2_extracti128\"\n   [(match_operand:V2DI 0 \"nonimmediate_operand\")\n    (match_operand:V4DI 1 \"register_operand\")\n@@ -11653,20 +11760,22 @@\n (define_mode_iterator VEC_GATHER_MODE\n \t\t      [V2DI V2DF V4DI V4DF V4SI V4SF V8SI V8SF])\n (define_mode_attr VEC_GATHER_IDXSI\n-\t\t      [(V2DI \"V4SI\") (V2DF \"V4SI\")\n-\t\t       (V4DI \"V4SI\") (V4DF \"V4SI\")\n-\t\t       (V4SI \"V4SI\") (V4SF \"V4SI\")\n-\t\t       (V8SI \"V8SI\") (V8SF \"V8SI\")])\n+\t\t      [(V2DI \"V4SI\") (V4DI \"V4SI\") (V8DI \"V8SI\")\n+\t\t       (V2DF \"V4SI\") (V4DF \"V4SI\") (V8DF \"V8SI\")\n+\t\t       (V4SI \"V4SI\") (V8SI \"V8SI\") (V16SI \"V16SI\")\n+\t\t       (V4SF \"V4SI\") (V8SF \"V8SI\") (V16SF \"V16SI\")])\n+\n (define_mode_attr VEC_GATHER_IDXDI\n-\t\t      [(V2DI \"V2DI\") (V2DF \"V2DI\")\n-\t\t       (V4DI \"V4DI\") (V4DF \"V4DI\")\n-\t\t       (V4SI \"V2DI\") (V4SF \"V2DI\")\n-\t\t       (V8SI \"V4DI\") (V8SF \"V4DI\")])\n+\t\t      [(V2DI \"V2DI\") (V4DI \"V4DI\") (V8DI \"V8DI\")\n+\t\t       (V2DF \"V2DI\") (V4DF \"V4DI\") (V8DF \"V8DI\")\n+\t\t       (V4SI \"V2DI\") (V8SI \"V4DI\") (V16SI \"V8DI\")\n+\t\t       (V4SF \"V2DI\") (V8SF \"V4DI\") (V16SF \"V8DI\")])\n+\n (define_mode_attr VEC_GATHER_SRCDI\n-\t\t      [(V2DI \"V2DI\") (V2DF \"V2DF\")\n-\t\t       (V4DI \"V4DI\") (V4DF \"V4DF\")\n-\t\t       (V4SI \"V4SI\") (V4SF \"V4SF\")\n-\t\t       (V8SI \"V4SI\") (V8SF \"V4SF\")])\n+\t\t      [(V2DI \"V2DI\") (V4DI \"V4DI\") (V8DI \"V8DI\")\n+\t\t       (V2DF \"V2DF\") (V4DF \"V4DF\") (V8DF \"V8DF\")\n+\t\t       (V4SI \"V4SI\") (V8SI \"V4SI\") (V16SI \"V8SI\")\n+\t\t       (V4SF \"V4SF\") (V8SF \"V4SF\") (V16SF \"V8SF\")])\n \n (define_expand \"avx2_gathersi<mode>\"\n   [(parallel [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\")\n@@ -11840,3 +11949,194 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512f_gathersi<mode>\"\n+  [(parallel [(set (match_operand:VI48F_512 0 \"register_operand\")\n+\t\t   (unspec:VI48F_512\n+\t\t     [(match_operand:VI48F_512 1 \"register_operand\")\n+\t\t      (match_operand:<avx512fmaskmode> 4 \"register_operand\")\n+\t\t      (mem:<ssescalarmode>\n+\t\t\t(match_par_dup 6\n+\t\t\t  [(match_operand 2 \"vsib_address_operand\")\n+\t\t\t   (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 5 \"const1248_operand\")]))]\n+\t\t     UNSPEC_GATHER))\n+\t      (clobber (match_scratch:<avx512fmaskmode> 7))])]\n+  \"TARGET_AVX512F\"\n+{\n+  operands[6]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],\n+\t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512f_gathersi<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=&v\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:VI48F_512 1 \"register_operand\" \"0\")\n+\t   (match_operand:<avx512fmaskmode> 7 \"register_operand\" \"2\")\n+\t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 4 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"v\")\n+\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:<avx512fmaskmode> 2 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %g6}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512f_gathersi<mode>_2\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=&v\")\n+\t(unspec:VI48F_512\n+\t  [(pc)\n+\t   (match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")\n+\t   (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n+\t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %g5}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+\n+(define_expand \"avx512f_gatherdi<mode>\"\n+  [(parallel [(set (match_operand:VI48F_512 0 \"register_operand\")\n+\t\t   (unspec:VI48F_512\n+\t\t     [(match_operand:<VEC_GATHER_SRCDI> 1 \"register_operand\")\n+\t\t      (match_operand:QI 4 \"register_operand\")\n+\t\t      (mem:<ssescalarmode>\n+\t\t\t(match_par_dup 6\n+\t\t\t  [(match_operand 2 \"vsib_address_operand\")\n+\t\t\t   (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 5 \"const1248_operand\")]))]\n+\t\t     UNSPEC_GATHER))\n+\t      (clobber (match_scratch:QI 7))])]\n+  \"TARGET_AVX512F\"\n+{\n+  operands[6]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[3],\n+\t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512f_gatherdi<mode>\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=&v\")\n+\t(unspec:VI48F_512\n+\t  [(match_operand:<VEC_GATHER_SRCDI> 1 \"register_operand\" \"0\")\n+\t   (match_operand:QI 7 \"register_operand\" \"2\")\n+\t   (match_operator:<ssescalarmode> 6 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 4 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"v\")\n+\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:QI 2 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %g6}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512f_gatherdi<mode>_2\"\n+  [(set (match_operand:VI48F_512 0 \"register_operand\" \"=&v\")\n+\t(unspec:VI48F_512\n+\t  [(pc)\n+\t   (match_operand:QI 6 \"register_operand\" \"1\")\n+\t   (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+\t     [(unspec:P\n+\t\t[(match_operand:P 3 \"vsib_address_operand\" \"p\")\n+\t\t (match_operand:<VEC_GATHER_IDXDI> 2 \"register_operand\" \"v\")\n+\t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t\tUNSPEC_VSIBADDR)])]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:QI 1 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+{\n+  if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n+    return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %g5}\";\n+  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %g5}\";\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512f_scattersi<mode>\"\n+  [(parallel [(set (mem:VI48F_512\n+\t\t     (match_par_dup 5\n+\t\t       [(match_operand 0 \"vsib_address_operand\")\n+\t\t\t(match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\")\n+\t\t\t(match_operand:SI 4 \"const1248_operand\")]))\n+\t\t   (unspec:VI48F_512\n+\t\t     [(match_operand:<avx512fmaskmode> 1 \"register_operand\")\n+\t\t      (match_operand:VI48F_512 3 \"register_operand\")]\n+\t\t     UNSPEC_SCATTER))\n+\t      (clobber (match_scratch:<avx512fmaskmode> 6))])]\n+  \"TARGET_AVX512F\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[0], operands[2],\n+\t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512f_scattersi<mode>\"\n+  [(set (match_operator:VI48F_512 5 \"vsib_mem_operator\"\n+\t  [(unspec:P\n+\t     [(match_operand:P 0 \"vsib_address_operand\" \"p\")\n+\t      (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n+\t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t     UNSPEC_VSIBADDR)])\n+\t(unspec:VI48F_512\n+\t  [(match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")\n+\t   (match_operand:VI48F_512 3 \"register_operand\" \"v\")]\n+\t  UNSPEC_SCATTER))\n+   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>scatterd<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512f_scatterdi<mode>\"\n+  [(parallel [(set (mem:VI48F_512\n+\t\t     (match_par_dup 5\n+\t\t       [(match_operand 0 \"vsib_address_operand\")\n+\t\t\t(match_operand:V8DI 2 \"register_operand\")\n+\t\t\t(match_operand:SI 4 \"const1248_operand\")]))\n+\t\t   (unspec:VI48F_512\n+\t\t     [(match_operand:QI 1 \"register_operand\")\n+\t\t      (match_operand:<VEC_GATHER_SRCDI> 3 \"register_operand\")]\n+\t\t     UNSPEC_SCATTER))\n+\t      (clobber (match_scratch:QI 6))])]\n+  \"TARGET_AVX512F\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[0], operands[2],\n+\t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512f_scatterdi<mode>\"\n+  [(set (match_operator:VI48F_512 5 \"vsib_mem_operator\"\n+\t  [(unspec:P\n+\t     [(match_operand:P 0 \"vsib_address_operand\" \"p\")\n+\t      (match_operand:V8DI 2 \"register_operand\" \"v\")\n+\t      (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t     UNSPEC_VSIBADDR)])\n+\t(unspec:VI48F_512\n+\t  [(match_operand:QI 6 \"register_operand\" \"1\")\n+\t   (match_operand:<VEC_GATHER_SRCDI> 3 \"register_operand\" \"v\")]\n+\t  UNSPEC_SCATTER))\n+   (clobber (match_scratch:QI 1 \"=&k\"))]\n+  \"TARGET_AVX512F\"\n+  \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}]}