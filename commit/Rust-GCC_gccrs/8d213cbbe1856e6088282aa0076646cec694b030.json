{"sha": "8d213cbbe1856e6088282aa0076646cec694b030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyMTNjYmJlMTg1NmU2MDg4MjgyYWEwMDc2NjQ2Y2VjNjk0YjAzMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-13T13:35:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-13T13:35:33Z"}, "message": "c++: lambdas with internal linkage are different to no-linkage [PR94426]\n\nMy fix for 94147 was confusing no-linkage with internal linkage, at\nthe language level.  That's wrong. (the std is confusing here, because\nit describes linkage of names (which is wrong), and lambdas have no\nnames)\n\nLambdas with extra-scope, have linkage.  However, at the\nimplementation-level that linkage is at least as restricted as the\nlinkage of the extra-scope decl.\n\nFurther, when instantiating a variable initialized by a lambda, we\nmust determine the visibility of the variable itself, before\ninstantiating its initializer.  If the template arguments are internal\n(or no-linkage), the variable will have internal linkage, regardless\nof the linkage of the template it is instantiated from.  We need to\nknow that before instantiating the lambda, so we can restrict its\nlinkage correctly.\n\n\t* decl2.c (determine_visibility): A lambda's visibility is\n\taffected by its extra scope.\n\t* pt.c (instantiate_decl): Determine var's visibility before\n\tinstantiating its initializer.\n\t* tree.c (no_linkage_check): Revert code looking at visibility of\n\tlambda's extra scope.\n`\tgcc/cp/\n\t* g++.dg/cpp0x/lambda/pr94426-[12].C: New.\n\t* g++.dg/abi/lambda-vis.C: Drop a warning.\n\t* g++.dg/cpp0x/lambda/lambda-mangle.C: Lambda visibility on\n\tvariable changes.\n\t* g++.dg/opt/dump1.C: Drop warnings of no import.", "tree": {"sha": "e97f39aaaecacbba02763175ae240943ebb6b5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97f39aaaecacbba02763175ae240943ebb6b5cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d213cbbe1856e6088282aa0076646cec694b030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d213cbbe1856e6088282aa0076646cec694b030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d213cbbe1856e6088282aa0076646cec694b030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d213cbbe1856e6088282aa0076646cec694b030/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc1f3577f38bb213b313661c025ac965baee953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc1f3577f38bb213b313661c025ac965baee953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc1f3577f38bb213b313661c025ac965baee953"}], "stats": {"total": 114, "additions": 93, "deletions": 21}, "files": [{"sha": "9de64c0f1ac5931843b9a1e5f184972bba427fb5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -1,3 +1,13 @@\n+2020-04-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/94426  lambdas with internal linkage are different to no-linkage\n+\t* decl2.c (determine_visibility): A lambda's visibility is\n+\taffected by its extra scope.\n+\t* pt.c (instantiate_decl): Determine var's visibility before\n+\tinstantiating its initializer.\n+\t* tree.c (no_linkage_check): Revert code looking at visibility of\n+\tlambda's extra scope.\n+`\n 2020-04-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94528"}, {"sha": "293df990435d5bdc67e7834b158b6149d32b8fc4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -2527,6 +2527,21 @@ determine_visibility (tree decl)\n   else if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n     template_decl = decl;\n \n+  if (TREE_CODE (decl) == TYPE_DECL\n+      && LAMBDA_TYPE_P (TREE_TYPE (decl))\n+      && CLASSTYPE_LAMBDA_EXPR (TREE_TYPE (decl)) != error_mark_node)\n+    if (tree extra = LAMBDA_TYPE_EXTRA_SCOPE (TREE_TYPE (decl)))\n+      {\n+\t/* The lambda's visibility is limited by that of its extra\n+\t   scope.  */\n+\tint vis = 0;\n+\tif (TYPE_P (extra))\n+\t  vis = type_visibility (extra);\n+\telse\n+\t  vis = expr_visibility (extra);\n+\tconstrain_visibility (decl, vis, false);\n+      }\n+\n   /* If DECL is a member of a class, visibility specifiers on the\n      class can influence the visibility of the DECL.  */\n   tree class_type = NULL_TREE;"}, {"sha": "0a8ec3198d2373fcd2f3ba22e9a064d7b665dd66", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -25541,6 +25541,14 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n       c_inhibit_evaluation_warnings = 0;\n     }\n \n+  if (VAR_P (d))\n+    {\n+      /* The variable might be a lambda's extra scope, and that\n+\t lambda's visibility depends on D's.  */\n+      maybe_commonize_var (d);\n+      determine_visibility (d);\n+    }\n+\n   /* Mark D as instantiated so that recursive calls to\n      instantiate_decl do not try to instantiate it again.  */\n   DECL_TEMPLATE_INSTANTIATED (d) = 1;"}, {"sha": "1d311b0fe61dc149772610e356fd81559ecdb438", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -2780,9 +2780,10 @@ verify_stmt_tree (tree t)\n   cp_walk_tree (&t, verify_stmt_tree_r, &statements, NULL);\n }\n \n-/* Check if the type T depends on a type with no linkage and if so, return\n-   it.  If RELAXED_P then do not consider a class type declared within\n-   a vague-linkage function to have no linkage.  */\n+/* Check if the type T depends on a type with no linkage and if so,\n+   return it.  If RELAXED_P then do not consider a class type declared\n+   within a vague-linkage function to have no linkage.  Remember:\n+   no-linkage is not the same as internal-linkage*/\n \n tree\n no_linkage_check (tree t, bool relaxed_p)\n@@ -2801,17 +2802,6 @@ no_linkage_check (tree t, bool relaxed_p)\n       tree extra = LAMBDA_TYPE_EXTRA_SCOPE (t);\n       if (!extra)\n \treturn t;\n-\n-      /* If the mangling scope is internal-linkage or not repeatable\n-\t elsewhere, the lambda effectively has no linkage.  (Sadly\n-\t we're not very careful with the linkages of types.)  */\n-      if (TREE_CODE (extra) == VAR_DECL\n-\t  && !(TREE_PUBLIC (extra)\n-\t       && (processing_template_decl\n-\t\t   || (DECL_LANG_SPECIFIC (extra) && DECL_USE_TEMPLATE (extra))\n-\t\t   /* DECL_COMDAT is set too late for us to check.  */\n-\t\t   || DECL_VAR_DECLARED_INLINE_P (extra))))\n-\treturn t;\n     }\n \n   /* Otherwise there's no point in checking linkage on template functions; we"}, {"sha": "9f64453130683b7a2dfc3eb0760d97bf69bb54aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -1,3 +1,12 @@\n+2020-04-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/94426\n+\t* g++.dg/cpp0x/lambda/pr94426-[12].C: New.\n+\t* g++.dg/abi/lambda-vis.C: Drop a warning.\n+\t* g++.dg/cpp0x/lambda/lambda-mangle.C: Lambda visibility on\n+\tvariable changes.\n+\t* g++.dg/opt/dump1.C: Drop warnings of no import.\n+\n 2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/operand-modifiers.c: New test."}, {"sha": "c1033f501a3cccf360c5079d832570f1a93c6eaf", "filename": "gcc/testsuite/g++.dg/abi/lambda-vis.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Flambda-vis.C?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-fno-inline\" }\n \n template<typename T> int sfoo (T); // { dg-warning \"used but never defined\" }\n-template<typename T> int gfoo (T); // { dg-warning \"used but never defined\" }\n+template<typename T> int gfoo (T); // OK, but not completable\n template<typename T> int ifoo (T); // OK\n template<typename T> struct Wrapper {};\n template<typename T> Wrapper<T> capture (T &&) {return Wrapper<T> ();}"}, {"sha": "ef4bad8698b12f2696f7376be2d67e1e8612ddc9", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle.C", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -54,9 +54,12 @@ void bar()\n   []{}();\n }\n \n-// lambdas used in non-template, non-class body initializers are internal.\n+// lambdas used in namespace-scope initializers have the linkage of\n+// the decl\n // { dg-final { scan-assembler-not \"weak\\[^\\n\\r\\]*_ZNKUlv\" } }\n-// { dg-final { scan-assembler-not \"weak\\[^\\n\\r\\]*variable\" } }\n+// { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*variableMUlvE_clEv\" { target c++14_down } } }\n+// in c++17 and up, this operator() become constexpr, no not emitted\n+// { dg-final { scan-assembler-not \"weak\\[^\\n\\r\\]*variableMUlvE_clEv\" { target c++17 } } }\n int variable = []{return 1;}();\n \n // And a template instantiated with such a lambda is also internal."}, {"sha": "ae7cbf030919b4554024d1eb21050664f05557d4", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/pr94426-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-1.C?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++14 } }\n+// PR 94426 ICE mangling lambda\n+// { dg-options {-flto -O2} }\n+\n+template <bool> using Void = void;\n+\n+template <typename U> bool Init (U) {return true;}\n+template <typename> bool VAR = Init ([] {});\n+\n+template <typename T>\n+Void<false && VAR<T>> Foo (T)\n+{}\n+\n+void q ()\n+{\n+  Foo ([] {});\n+}"}, {"sha": "3db864c604b825f80c76d3b930487336fdfc3bed", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/pr94426-2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Fpr94426-2.C?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++14 } }\n+// PR 94426 ICE mangling lambda\n+\n+template <bool> using Void = void;\n+\n+template <typename U> bool Init (U) {return true;}\n+template <typename> bool VAR = Init ([] {});\n+\n+template <typename T>\n+Void<false && VAR<T>> Foo (T)\n+{}\n+\n+void q ()\n+{\n+  Foo ([] {});\n+}\n+\n+// The instantiation of VAR becomes local\n+// { dg-final { scan-assembler {.local\t_Z3VARIZ1qvEUlvE_E} { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler {.comm\t_Z3VARIZ1qvEUlvE_E,1,1} { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "38ed055d5c651cd643a19e6b6807c290b4d67aee", "filename": "gcc/testsuite/g++.dg/opt/dump1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d213cbbe1856e6088282aa0076646cec694b030/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fdump1.C?ref=8d213cbbe1856e6088282aa0076646cec694b030", "patch": "@@ -312,7 +312,7 @@ namespace std __attribute__ ((__visibility__ (\"default\")))\n     typename __add_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n-    get(tuple<_Elements...>& __t) noexcept; // { dg-warning \"used but never defined\" }\n+    get(tuple<_Elements...>& __t) noexcept;\n   template<std::size_t... _Indexes>\n     struct _Index_tuple\n     {};\n@@ -387,7 +387,7 @@ namespace std __attribute__ ((__visibility__ (\"default\")))\n     };\n   template<typename _Callable, typename... _Args>\n     typename _Bind_simple_helper<_Callable, _Args...>::__type\n-    __bind_simple(_Callable&& __callable, _Args&&... __args)  // { dg-warning \"used but never defined\" }\n+    __bind_simple(_Callable&& __callable, _Args&&... __args) \n   ;\n   union _Any_data\n   ;\n@@ -404,7 +404,7 @@ namespace std __attribute__ ((__visibility__ (\"default\")))\n       {\n       protected:\n  static _Functor*\n- _M_get_pointer(const _Any_data& __source)  // { dg-warning \"used but never defined\" }\n+ _M_get_pointer(const _Any_data& __source)\n  ;\n       };\n   };\n@@ -511,7 +511,7 @@ namespace std __attribute__ ((__visibility__ (\"default\")))\n         _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\n  { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }\n       static pointer\n-      allocate(_Alloc& __a, size_type __n)  // { dg-warning \"used but never defined\" }\n+      allocate(_Alloc& __a, size_type __n) \n       ;\n       template<typename _Tp, typename... _Args>\n  static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)"}]}