{"sha": "7797f5ec58078523a452e5cf239596e13d77d885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5N2Y1ZWM1ODA3ODUyM2E0NTJlNWNmMjM5NTk2ZTEzZDc3ZDg4NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-20T23:53:09Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-20T23:53:09Z"}, "message": "i386: Do not use commutative operands with (use) RTX [PR95238]\n\n2020-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/95218\n\n\t* config/i386/mmx.md (*mmx_<code>v2sf): Do not mark\n\toperands 1 and 2 commutative.  Manually swap operands.\n\t(*mmx_nabsv2sf2): Ditto.\n\n\tPartially revert:\n\n\t* config/i386/i386.md (*<code>tf2_1):\n\tMark operands 1 and 2 commutative.\n\t(*nabstf2_1): Ditto.\n\t* config/i386/sse.md (*<code><mode>2): Mark operands 1 and 2\n\tcommutative.  Do not swap operands.\n\t(*nabs<mode>2): Ditto.", "tree": {"sha": "468c0426690d7f00efe660c9c38ba5670855bfe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/468c0426690d7f00efe660c9c38ba5670855bfe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7797f5ec58078523a452e5cf239596e13d77d885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7797f5ec58078523a452e5cf239596e13d77d885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7797f5ec58078523a452e5cf239596e13d77d885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7797f5ec58078523a452e5cf239596e13d77d885/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14984ea1645da45e59872d84401394a759c2659c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14984ea1645da45e59872d84401394a759c2659c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14984ea1645da45e59872d84401394a759c2659c"}], "stats": {"total": 146, "additions": 103, "deletions": 43}, "files": [{"sha": "b97e8ea51f7bb0934eda36b50afd28d364ad13b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7797f5ec58078523a452e5cf239596e13d77d885", "patch": "@@ -1,3 +1,21 @@\n+2020-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95218\n+\n+\t* config/i386/mmx.md (*mmx_<code>v2sf): Do not mark\n+\toperands 1 and 2 commutative.  Manually swap operands.\n+\t(*mmx_nabsv2sf2): Ditto.\n+\n+\tPartially revert:\n+\t2020-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*<code>tf2_1):\n+\tMark operands 1 and 2 commutative.\n+\t(*nabstf2_1): Ditto.\n+\t* config/i386/sse.md (*<code><mode>2): Mark operands 1 and 2\n+\tcommutative.  Do not swap operands.\n+\t(*nabs<mode>2): Ditto.\n+\n 2020-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95229"}, {"sha": "e81c737b7bc671c03e2c6c972ef68cfaa0f902dc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7797f5ec58078523a452e5cf239596e13d77d885", "patch": "@@ -10037,31 +10037,53 @@\n   \"ix86_expand_fp_absneg_operator (<CODE>, TFmode, operands); DONE;\")\n \n (define_insn_and_split \"*<code>tf2_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x,Yv\")\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x,Yv,Yv\")\n \t(absneg:TF\n-\t  (match_operand:TF 1 \"vector_operand\" \"%0,Yv\")))\n-   (use (match_operand:TF 2 \"vector_operand\" \"xBm,Yvm\"))]\n+\t  (match_operand:TF 1 \"vector_operand\" \"0,xBm,Yv,m\")))\n+   (use (match_operand:TF 2 \"vector_operand\" \"xBm,0,Yvm,Yv\"))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(<absneg_op>:TF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n (define_insn_and_split \"*nabstf2_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x,Yv\")\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x,Yv,Yv\")\n \t(neg:TF\n \t  (abs:TF\n-\t    (match_operand:TF 1 \"vector_operand\" \"%0,Yv\"))))\n-   (use (match_operand:TF 2 \"vector_operand\" \"xBm,Yvm\"))]\n+\t    (match_operand:TF 1 \"vector_operand\" \"0,xBm,Yv,m\"))))\n+   (use (match_operand:TF 2 \"vector_operand\" \"xBm,0,Yvm,Yv\"))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(ior:TF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n (define_expand \"<code><mode>2\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n@@ -10117,7 +10139,7 @@\n (define_split\n   [(set (match_operand:MODEF 0 \"sse_reg_operand\")\n \t(absneg:MODEF\n-\t  (match_operand:MODEF 1 \"vector_operand\")))\n+\t  (match_operand:MODEF 1 \"sse_reg_operand\")))\n    (use (match_operand:<ssevecmodef> 2 \"vector_operand\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n@@ -10152,24 +10174,15 @@\n   [(const_int 0)]\n   \"ix86_split_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*nabs<mode>2_1\"\n+(define_insn_and_split \"*nabs<mode>2_1\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,Yv\")\n \t(neg:MODEF\n \t  (abs:MODEF\n \t    (match_operand:MODEF 1 \"register_operand\" \"0,x,Yv\"))))\n    (use (match_operand:<ssevecmode> 2 \"vector_operand\" \"xBm,0,Yvm\"))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"#\"\n-  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n-\n-(define_split\n-  [(set (match_operand:MODEF 0 \"sse_reg_operand\")\n-\t(neg:MODEF\n-\t  (abs:MODEF\n-\t    (match_operand:MODEF 1 \"vector_operand\"))))\n-   (use (match_operand:<ssevecmodef> 2 \"vector_operand\"))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n-   && reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(ior:<ssevecmodef> (match_dup 1) (match_dup 2)))]\n {\n@@ -10181,7 +10194,8 @@\n \n   if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))\n     std::swap (operands[1], operands[2]);\n-})\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n ;; Conditionalize these after reload. If they match before reload, we\n ;; lose the clobber and ability to use integer instructions."}, {"sha": "5deef683b0bef64b2db41eab4b64fd26668fab9b", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=7797f5ec58078523a452e5cf239596e13d77d885", "patch": "@@ -246,31 +246,37 @@\n   \"ix86_expand_fp_absneg_operator (<CODE>, V2SFmode, operands); DONE;\")\n \n (define_insn_and_split \"*mmx_<code>v2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x,x\")\n \t(absneg:V2SF\n-\t  (match_operand:V2SF 1 \"register_operand\" \"%0,x\")))\n-   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,x\"))]\n+\t  (match_operand:V2SF 1 \"register_operand\" \"0,x,x\")))\n+   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,0,x\"))]\n   \"TARGET_MMX_WITH_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(<absneg_op>:V2SF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))\n+    std::swap (operands[1], operands[2]);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n (define_insn_and_split \"*mmx_nabsv2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x,x\")\n \t(neg:V2SF\n \t  (abs:V2SF\n-\t    (match_operand:V2SF 1 \"register_operand\" \"%0,x\"))))\n-   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,x\"))]\n+\t    (match_operand:V2SF 1 \"register_operand\" \"0,x,x\"))))\n+   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,0,x\"))]\n   \"TARGET_MMX_WITH_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(ior:V2SF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (!TARGET_AVX && operands_match_p (operands[0], operands[2]))\n+    std::swap (operands[1], operands[2]);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n (define_expand \"mmx_addv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")"}, {"sha": "5071fb2895ac078285c10ff21a320a6e8739d40b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797f5ec58078523a452e5cf239596e13d77d885/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7797f5ec58078523a452e5cf239596e13d77d885", "patch": "@@ -1638,31 +1638,53 @@\n   \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*<code><mode>2\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x,v,v\")\n \t(absneg:VF\n-\t  (match_operand:VF 1 \"vector_operand\" \"%0,v\")))\n-   (use (match_operand:VF 2 \"vector_operand\" \"xBm,vm\"))]\n+\t  (match_operand:VF 1 \"vector_operand\" \"0,xBm,v,m\")))\n+   (use (match_operand:VF 2 \"vector_operand\" \"xBm,0,vm,v\"))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(<absneg_op>:VF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n (define_insn_and_split \"*nabs<mode>2\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x,v,v\")\n \t(neg:VF\n \t  (abs:VF\n-\t    (match_operand:VF 1 \"vector_operand\" \"%0,v\"))))\n-   (use (match_operand:VF 2 \"vector_operand\" \"xBm,vm\"))]\n+\t    (match_operand:VF 1 \"vector_operand\" \"0,xBm,v,m\"))))\n+   (use (match_operand:VF 2 \"vector_operand\" \"xBm,0,vm,v\"))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(ior:VF (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"isa\" \"noavx,avx\")])\n+{\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n (define_expand \"<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")"}]}