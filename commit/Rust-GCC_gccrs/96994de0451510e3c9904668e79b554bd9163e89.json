{"sha": "96994de0451510e3c9904668e79b554bd9163e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5OTRkZTA0NTE1MTBlM2M5OTA0NjY4ZTc5YjU1NGJkOTE2M2U4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-13T08:53:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-13T08:53:23Z"}, "message": "match.pd: Implement conditional expression patterns.\n\n2014-11-13  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Implement conditional expression patterns.\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Remove\n\tthem here.\n\t(combine_cond_exprs): Remove.\n\t(pass_forwprop::execute): Do not call combine_cond_exprs.\n\t* fold-const.c (fold_ternary_loc): Remove patterns here.\n\t(pedantic_omit_one_operand_loc): Remove.\n\nFrom-SVN: r217465", "tree": {"sha": "21bf9c86267ebd593557ecab873e1b2f984da374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21bf9c86267ebd593557ecab873e1b2f984da374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96994de0451510e3c9904668e79b554bd9163e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96994de0451510e3c9904668e79b554bd9163e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96994de0451510e3c9904668e79b554bd9163e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96994de0451510e3c9904668e79b554bd9163e89/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83633539b751a8ef90378ccd26b73df03c3fe40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83633539b751a8ef90378ccd26b73df03c3fe40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83633539b751a8ef90378ccd26b73df03c3fe40f"}], "stats": {"total": 163, "additions": 60, "deletions": 103}, "files": [{"sha": "87dbc6e14a4b2aa79bfd35824101ce797ba72161", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96994de0451510e3c9904668e79b554bd9163e89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96994de0451510e3c9904668e79b554bd9163e89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96994de0451510e3c9904668e79b554bd9163e89", "patch": "@@ -1,3 +1,13 @@\n+2014-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Implement conditional expression patterns.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Remove\n+\tthem here.\n+\t(combine_cond_exprs): Remove.\n+\t(pass_forwprop::execute): Do not call combine_cond_exprs.\n+\t* fold-const.c (fold_ternary_loc): Remove patterns here.\n+\t(pedantic_omit_one_operand_loc): Remove.\n+\n 2014-12-13  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61559"}, {"sha": "2f32d3c99747f6c4090b3d5b735ac05b0abb8ec4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=96994de0451510e3c9904668e79b554bd9163e89", "patch": "@@ -121,7 +121,6 @@ static enum tree_code compcode_to_comparison (enum comparison_code);\n static int operand_equal_for_comparison_p (tree, tree, tree);\n static int twoval_comparison_p (tree, tree *, tree *, int *);\n static tree eval_subst (location_t, tree, tree, tree, tree, tree);\n-static tree pedantic_omit_one_operand_loc (location_t, tree, tree, tree);\n static tree distribute_bit_expr (location_t, enum tree_code, tree, tree, tree);\n static tree make_bit_field_ref (location_t, tree, tree,\n \t\t\t\tHOST_WIDE_INT, HOST_WIDE_INT, int);\n@@ -3074,27 +3073,6 @@ omit_one_operand_loc (location_t loc, tree type, tree result, tree omitted)\n   return non_lvalue_loc (loc, t);\n }\n \n-/* Similar, but call pedantic_non_lvalue instead of non_lvalue.  */\n-\n-static tree\n-pedantic_omit_one_operand_loc (location_t loc, tree type, tree result,\n-\t\t\t       tree omitted)\n-{\n-  tree t = fold_convert_loc (loc, type, result);\n-\n-  /* If the resulting operand is an empty statement, just return the omitted\n-     statement casted to void. */\n-  if (IS_EMPTY_STMT (t) && TREE_SIDE_EFFECTS (omitted))\n-    return build1_loc (loc, NOP_EXPR, void_type_node,\n-\t\t       fold_ignored_result (omitted));\n-\n-  if (TREE_SIDE_EFFECTS (omitted))\n-    return build2_loc (loc, COMPOUND_EXPR, type,\n-\t\t       fold_ignored_result (omitted), t);\n-\n-  return pedantic_non_lvalue_loc (loc, t);\n-}\n-\n /* Return a tree for the case when the result of an expression is RESULT\n    converted to TYPE and OMITTED1 and OMITTED2 were previously operands\n    of the expression but are now not needed.\n@@ -13553,11 +13531,6 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t}\n       else if (TREE_CODE (arg0) == VECTOR_CST)\n \t{\n-\t  if (integer_all_onesp (arg0))\n-\t    return pedantic_omit_one_operand_loc (loc, type, arg1, arg2);\n-\t  if (integer_zerop (arg0))\n-\t    return pedantic_omit_one_operand_loc (loc, type, arg2, arg1);\n-\n \t  if ((TREE_CODE (arg1) == VECTOR_CST\n \t       || TREE_CODE (arg1) == CONSTRUCTOR)\n \t      && (TREE_CODE (arg2) == VECTOR_CST\n@@ -13582,9 +13555,6 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t    }\n \t}\n \n-      if (operand_equal_p (arg1, op2, 0))\n-\treturn pedantic_omit_one_operand_loc (loc, type, arg1, arg0);\n-\n       /* If we have A op B ? A : C, we may be able to convert this to a\n \t simpler expression, depending on the operation and the values\n \t of B and C.  Signed zeros prevent all of these transformations,"}, {"sha": "25711b68c68d6113fbc6304963dfb48e42f93623", "filename": "gcc/match.pd", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=96994de0451510e3c9904668e79b554bd9163e89", "patch": "@@ -590,3 +590,51 @@ along with GCC; see the file COPYING3.  If not see\n   (simplify\n    (bswap (bitop:c (bswap @0) @1))\n    (bitop @0 (bswap @1)))))\n+\n+\n+/* Combine COND_EXPRs and VEC_COND_EXPRs.  */\n+\n+/* Simplify constant conditions.\n+   Only optimize constant conditions when the selected branch\n+   has the same type as the COND_EXPR.  This avoids optimizing\n+   away \"c ? x : throw\", where the throw has a void type.\n+   Note that we cannot throw away the fold-const.c variant nor\n+   this one as we depend on doing this transform before possibly\n+   A ? B : B -> B triggers and the fold-const.c one can optimize\n+   0 ? A : B to B even if A has side-effects.  Something\n+   genmatch cannot handle.  */\n+(simplify\n+ (cond INTEGER_CST@0 @1 @2)\n+ (if (integer_zerop (@0)\n+      && (!VOID_TYPE_P (TREE_TYPE (@2))\n+\t  || VOID_TYPE_P (type)))\n+  @2)\n+ (if (!integer_zerop (@0)\n+      && (!VOID_TYPE_P (TREE_TYPE (@1))\n+\t  || VOID_TYPE_P (type)))\n+  @1))\n+(simplify\n+ (vec_cond VECTOR_CST@0 @1 @2)\n+ (if (integer_all_onesp (@0))\n+  @1)\n+ (if (integer_zerop (@0))\n+  @2))\n+\n+(for cnd (cond vec_cond)\n+ /* A ? B : (A ? X : C) -> A ? B : C.  */\n+ (simplify\n+  (cnd @0 (cnd @0 @1 @2) @3)\n+  (cnd @0 @1 @3))\n+ (simplify\n+  (cnd @0 @1 (cnd @0 @2 @3))\n+  (cnd @0 @1 @3))\n+\n+ /* A ? B : B -> B.  */\n+ (simplify\n+  (cnd @0 @1 @1)\n+  @1))\n+\n+/* !A ? B : C -> A ? C : B.  */\n+(simplify\n+ (cond (logical_inverted_value truth_valued_p@0) @1 @2)\n+ (cond @0 @2 @1))"}, {"sha": "feb825394565324cf7112cf669fe4726ae623294", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 73, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96994de0451510e3c9904668e79b554bd9163e89/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=96994de0451510e3c9904668e79b554bd9163e89", "patch": "@@ -617,7 +617,6 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   tree tmp = NULL_TREE;\n   tree cond = gimple_assign_rhs1 (stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n-  bool swap = false;\n \n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n   if (COMPARISON_CLASS_P (cond))\n@@ -640,15 +639,6 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n \t\t\t       TREE_TYPE (cond),\n \t\t\t       gimple_assign_rhs1 (def_stmt),\n \t\t\t       gimple_assign_rhs2 (def_stmt));\n-      else if (code == COND_EXPR\n-\t       && ((def_code == BIT_NOT_EXPR\n-\t\t    && TYPE_PRECISION (TREE_TYPE (cond)) == 1)\n-\t\t   || (def_code == BIT_XOR_EXPR\n-\t\t       && integer_onep (gimple_assign_rhs2 (def_stmt)))))\n-\t{\n-\t  tmp = gimple_assign_rhs1 (def_stmt);\n-\t  swap = true;\n-\t}\n     }\n \n   if (tmp\n@@ -669,15 +659,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       else if (integer_zerop (tmp))\n \tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs3 (stmt));\n       else\n-\t{\n-\t  gimple_assign_set_rhs1 (stmt, unshare_expr (tmp));\n-\t  if (swap)\n-\t    {\n-\t      tree t = gimple_assign_rhs2 (stmt);\n-\t      gimple_assign_set_rhs2 (stmt, gimple_assign_rhs3 (stmt));\n-\t      gimple_assign_set_rhs3 (stmt, t);\n-\t    }\n-\t}\n+\tgimple_assign_set_rhs1 (stmt, unshare_expr (tmp));\n       stmt = gsi_stmt (*gsi_p);\n       update_stmt (stmt);\n \n@@ -687,58 +669,6 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   return 0;\n }\n \n-/* Propagate from the ssa name definition statements of COND_EXPR\n-   values in the rhs of statement STMT into the conditional arms\n-   if that simplifies it.\n-   Returns true if the stmt was changed.  */\n-\n-static bool\n-combine_cond_exprs (gimple_stmt_iterator *gsi_p)\n-{\n-  gimple stmt = gsi_stmt (*gsi_p);\n-  tree cond, val1, val2;\n-  bool changed = false;\n-\n-  cond = gimple_assign_rhs1 (stmt);\n-  val1 = gimple_assign_rhs2 (stmt);\n-  if (TREE_CODE (val1) == SSA_NAME)\n-    {\n-      gimple def_stmt = SSA_NAME_DEF_STMT (val1);\n-      if (is_gimple_assign (def_stmt)\n-\t  && gimple_assign_rhs_code (def_stmt) == gimple_assign_rhs_code (stmt)\n-\t  && operand_equal_p (gimple_assign_rhs1 (def_stmt), cond, 0))\n-\t{\n-\t  val1 = unshare_expr (gimple_assign_rhs2 (def_stmt));\n-\t  gimple_assign_set_rhs2 (stmt, val1);\n-\t  changed = true;\n-\t}\n-    }\n-  val2 = gimple_assign_rhs3 (stmt);\n-  if (TREE_CODE (val2) == SSA_NAME)\n-    {\n-      gimple def_stmt = SSA_NAME_DEF_STMT (val2);\n-      if (is_gimple_assign (def_stmt)\n-\t  && gimple_assign_rhs_code (def_stmt) == gimple_assign_rhs_code (stmt)\n-\t  && operand_equal_p (gimple_assign_rhs1 (def_stmt), cond, 0))\n-\t{\n-\t  val2 = unshare_expr (gimple_assign_rhs3 (def_stmt));\n-\t  gimple_assign_set_rhs3 (stmt, val2);\n-\t  changed = true;\n-\t}\n-    }\n-  if (operand_equal_p (val1, val2, 0))\n-    {\n-      gimple_assign_set_rhs_from_tree (gsi_p, val1);\n-      stmt = gsi_stmt (*gsi_p);\n-      changed = true;\n-    }\n-\n-  if (changed)\n-    update_stmt (stmt);\n-\n-  return changed;\n-}\n-\n /* We've just substituted an ADDR_EXPR into stmt.  Update all the\n    relevant data structures to match.  */\n \n@@ -2432,8 +2362,7 @@ pass_forwprop::execute (function *fun)\n \t\t    || code == VEC_COND_EXPR)\n \t\t  {\n \t\t    /* In this case the entire COND_EXPR is in rhs1. */\n-\t\t    if (forward_propagate_into_cond (&gsi)\n-\t\t\t|| combine_cond_exprs (&gsi))\n+\t\t    if (forward_propagate_into_cond (&gsi))\n \t\t      {\n \t\t\tchanged = true;\n \t\t\tstmt = gsi_stmt (gsi);"}]}