{"sha": "83a00410f54676140ee0aa3f057f99ea6086d8a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhMDA0MTBmNTQ2NzYxNDBlZTBhYTNmMDU3Zjk5ZWE2MDg2ZDhhMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-09-14T14:49:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-09-14T14:49:08Z"}, "message": "alias.c: Follow spelling conventions.\n\n\t* alias.c: Follow spelling conventions.\n\t* cpphash.h: Likewise.\n\t* fold-const.c: Likewise.\n\t* cp/ChangeLog: Likewise.\n\t* cp/parser.c: Likewise.\n\nFrom-SVN: r71382", "tree": {"sha": "7e5471c8657e7e2bc87146203f74ce01e6603b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e5471c8657e7e2bc87146203f74ce01e6603b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a00410f54676140ee0aa3f057f99ea6086d8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a00410f54676140ee0aa3f057f99ea6086d8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a00410f54676140ee0aa3f057f99ea6086d8a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a00410f54676140ee0aa3f057f99ea6086d8a2/comments", "author": null, "committer": null, "parents": [{"sha": "7b9a5a662b243ee413626bbc14a87bbea25e633c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9a5a662b243ee413626bbc14a87bbea25e633c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9a5a662b243ee413626bbc14a87bbea25e633c"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "887e10dfef934831af327efe5b9f2eca07899011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -1,3 +1,9 @@\n+2003-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alias.c: Follow spelling conventions.\n+\t* cpphash.h: Likewise.\n+\t* fold-const.c: Likewise.\n+\n 2003-09-14  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* c-ppoutput.c (cb_line_change): Revert 2003-08-04's change."}, {"sha": "c3bdf766cb2d95b56965e4273705998b20e94bf2", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -2202,7 +2202,7 @@ canon_true_dependence (rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n }\n \n /* Returns nonzero if a write to X might alias a previous read from\n-   (or, if WRITEP is nonzero, a write to) MEM.  If CONSTP is non-zero,\n+   (or, if WRITEP is nonzero, a write to) MEM.  If CONSTP is nonzero,\n    honor the RTX_UNCHANGING_P flags on X and MEM.  */\n \n static int"}, {"sha": "fe01dd4bffe94ec1537c959d4470f8caf3487082", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -1,3 +1,8 @@\n+2003-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* parser.c: Likewise.\n+\n 2003-09-13  Richard Henderson  <rth@redhat.com>\n \n \t* decl2.c (finish_file): Check cgraph_assemble_pending_functions\n@@ -785,7 +790,7 @@ Thu Aug 14 12:19:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-08-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (TMPL_ARGS_HAVE_MULTIPLE_LEVELS): non-NULL\n-\tNODE is always a TREE_VEC of non-zero size.\n+\tNODE is always a TREE_VEC of nonzero size.\n \t(NUM_TMPL_ARGS): NODE is always a TREE_VEC.\n \t* decl2.c (arg_assoc): Template args will be a vec.\n \t* error.c (dump_decl) <TEMPLATE_ID_EXPR case>: Call"}, {"sha": "73fc6c791cc1681a024af4b7cd9a3872b6add61e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -8112,7 +8112,7 @@ cp_parser_explicit_specialization (cp_parser* parser)\n \n    If DECLARES_CLASS_OR_ENUM is non-NULL, and the type-specifier is a\n    class-specifier, enum-specifier, or elaborated-type-specifier, then\n-   *DECLARES_CLASS_OR_ENUM is set to a non-zero value.  The value is 1\n+   *DECLARES_CLASS_OR_ENUM is set to a nonzero value.  The value is 1\n    if a type is declared; 2 if it is defined.  Otherwise, it is set to\n    zero.\n "}, {"sha": "765f6ed569bf9d5d0cef907c7e4692ae7379ebd2", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -371,7 +371,7 @@ struct cpp_reader\n      directory.  */\n   bool quote_ignores_source_dir;\n \n-  /* Non-zero if any file has contained #pragma once or #import has\n+  /* Nonzero if any file has contained #pragma once or #import has\n      been used.  */\n   bool seen_once_only;\n "}, {"sha": "65ea2d5e3ca2398db88a3f828d891eeb4b12e3f9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a00410f54676140ee0aa3f057f99ea6086d8a2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=83a00410f54676140ee0aa3f057f99ea6086d8a2", "patch": "@@ -1842,7 +1842,7 @@ truth_value_p (enum tree_code code)\n    same value in each operand/subexpression.  Hence a zero value for\n    ONLY_CONST assumes isochronic (or instantaneous) tree equivalence.\n    If comparing arbitrary expression trees, such as from different\n-   statements, ONLY_CONST must usually be non-zero.  */\n+   statements, ONLY_CONST must usually be nonzero.  */\n \n int\n operand_equal_p (tree arg0, tree arg1, int only_const)"}]}