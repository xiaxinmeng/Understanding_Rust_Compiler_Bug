{"sha": "ebaa4deaf9f3bec32443e60fe74fce14686b4706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhYTRkZWFmOWYzYmVjMzI0NDNlNjBmZTc0ZmNlMTQ2ODZiNDcwNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-07-04T03:01:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-07-04T03:01:33Z"}, "message": "i386: Add indirect_return function attribute\n\nOn x86, swapcontext may return via indirect branch when shadow stack\nis enabled.  To support code instrumentation of control-flow transfers\nwith -fcf-protection, add indirect_return function attribute to inform\ncompiler that a function may return via indirect branch.\n\nNote: Unlike setjmp, swapcontext only returns once.  Mark it return\ntwice will unnecessarily disable compiler optimization as shown in\nthe testcase here.\n\ngcc/\n\n\tPR target/85620\n\t* config/i386/i386.c (rest_of_insert_endbranch): Also generate\n\tENDBRANCH for non-tail call which may return via indirect branch.\n\t* doc/extend.texi: Document indirect_return attribute.\n\ngcc/testsuite/\n\n\tPR target/85620\n\t* gcc.target/i386/pr85620-1.c: New test.\n\t* gcc.target/i386/pr85620-2.c: Likewise.\n\t* gcc.target/i386/pr85620-3.c: Likewise.\n\t* gcc.target/i386/pr85620-4.c: Likewise.\n\nFrom-SVN: r262370", "tree": {"sha": "fb0135f43e72e4ffd528ad5806930aa0f186f804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0135f43e72e4ffd528ad5806930aa0f186f804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebaa4deaf9f3bec32443e60fe74fce14686b4706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaa4deaf9f3bec32443e60fe74fce14686b4706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebaa4deaf9f3bec32443e60fe74fce14686b4706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaa4deaf9f3bec32443e60fe74fce14686b4706/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7422f0ff39697b53ad599834647c56cb0cb3c3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7422f0ff39697b53ad599834647c56cb0cb3c3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7422f0ff39697b53ad599834647c56cb0cb3c3a3"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "05d1e05e9909df22986c4ea9ccc60bce2b2c36be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -1,3 +1,10 @@\n+2018-07-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85620\n+\t* config/i386/i386.c (rest_of_insert_endbranch): Also generate\n+\tENDBRANCH for non-tail call which may return via indirect branch.\n+\t* doc/extend.texi: Document indirect_return attribute.\n+\n 2018-07-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86274"}, {"sha": "41461d582a4ea16119d1cbdb41fac9610e612374", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -2621,7 +2621,26 @@ rest_of_insert_endbranch (void)\n \t{\n \t  if (CALL_P (insn))\n \t    {\n-\t      if (find_reg_note (insn, REG_SETJMP, NULL) == NULL)\n+\t      bool need_endbr;\n+\t      need_endbr = find_reg_note (insn, REG_SETJMP, NULL) != NULL;\n+\t      if (!need_endbr && !SIBLING_CALL_P (insn))\n+\t\t{\n+\t\t  rtx call = get_call_rtx_from (insn);\n+\t\t  rtx fnaddr = XEXP (call, 0);\n+\n+\t\t  /* Also generate ENDBRANCH for non-tail call which\n+\t\t     may return via indirect branch.  */\n+\t\t  if (MEM_P (fnaddr)\n+\t\t      && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n+\t\t    {\n+\t\t      tree fndecl = SYMBOL_REF_DECL (XEXP (fnaddr, 0));\n+\t\t      if (fndecl\n+\t\t\t  && lookup_attribute (\"indirect_return\",\n+\t\t\t\t\t       DECL_ATTRIBUTES (fndecl)))\n+\t\t\tneed_endbr = true;\n+\t\t    }\n+\t\t}\n+\t      if (!need_endbr)\n \t\tcontinue;\n \t      /* Generate ENDBRANCH after CALL, which can return more than\n \t\t twice, setjmp-like functions.  */\n@@ -45897,6 +45916,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fndecl_attribute, NULL },\n   { \"function_return\", 1, 1, true, false, false, false,\n     ix86_handle_fndecl_attribute, NULL },\n+  { \"indirect_return\", 0, 0, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n \n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }"}, {"sha": "071d0ffc4143652bd330a8b67f9e2c36eb45cfcb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -5886,6 +5886,12 @@ foo (void)\n @}\n @end smallexample\n \n+@item indirect_return\n+@cindex @code{indirect_return} function attribute, x86\n+\n+The @code{indirect_return} attribute on a function is used to inform\n+the compiler that the function may return via indirect branch.\n+\n @end table\n \n On the x86, the inliner does not inline a"}, {"sha": "a0e6ec2d77600dca18e32f81e98b7abf158995c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -1,3 +1,11 @@\n+2018-07-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85620\n+\t* gcc.target/i386/pr85620-1.c: New test.\n+\t* gcc.target/i386/pr85620-2.c: Likewise.\n+\t* gcc.target/i386/pr85620-3.c: Likewise.\n+\t* gcc.target/i386/pr85620-4.c: Likewise.\n+\n 2018-07-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86274"}, {"sha": "32efb08e59eda7b84b222f163b7c85f083cdd2c1", "filename": "gcc/testsuite/gcc.target/i386/pr85620-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-1.c?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+\n+struct ucontext;\n+\n+extern int bar (struct ucontext *) __attribute__((__indirect_return__));\n+\n+extern int res;\n+\n+void\n+foo (struct ucontext *oucp)\n+{\n+  res = bar (oucp);\n+}"}, {"sha": "b2e680fa1fef2f388a46e23552f2cf7f1c200637", "filename": "gcc/testsuite/gcc.target/i386/pr85620-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 1 } } */\n+\n+struct ucontext;\n+\n+extern int bar (struct ucontext *) __attribute__((__indirect_return__));\n+\n+int\n+foo (struct ucontext *oucp)\n+{\n+  return bar (oucp);\n+}"}, {"sha": "c70a5caf930647d49805f1c799efe05efb9d15e1", "filename": "gcc/testsuite/gcc.target/i386/pr85620-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-3.c?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-attributes\" } */\n+\n+struct ucontext;\n+\n+extern int bar (struct ucontext *) __attribute__((__indirect_return__));\n+\n+static int __attribute__ ((__always_inline__))\n+foo (struct ucontext *oucp)\n+{\n+  return bar (oucp);\n+}\n+\n+int\n+test (struct ucontext *oucp)\n+{\n+  return foo (oucp);\n+}"}, {"sha": "13056c46e49e83dfe97fc4eb901a1c49b7c6ddd6", "filename": "gcc/testsuite/gcc.target/i386/pr85620-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaa4deaf9f3bec32443e60fe74fce14686b4706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-4.c?ref=ebaa4deaf9f3bec32443e60fe74fce14686b4706", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-attributes\" } */\n+\n+struct ucontext;\n+\n+extern int bar (struct ucontext *) __attribute__((__returns_twice__));\n+\n+static int __attribute__ ((__always_inline__))\n+foo (struct ucontext *oucp) /* { dg-error \"setjmp\" } */\n+{\n+  return bar (oucp);\n+}\n+\n+int\n+test (struct ucontext *oucp)\n+{\n+  return foo (oucp);\n+}"}]}