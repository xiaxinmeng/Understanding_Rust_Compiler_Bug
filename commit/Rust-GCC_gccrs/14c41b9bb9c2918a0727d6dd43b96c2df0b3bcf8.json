{"sha": "14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjNDFiOWJiOWMyOTE4YTA3MjdkNmRkNDNiOTZjMmRmMGIzYmNmOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-07-01T12:27:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-07-01T12:27:33Z"}, "message": "re PR tree-optimization/19831 (Missing DSE/malloc/free optimization)\n\n2009-07-01  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/19831\n\t* tree-ssa-dce.c (propagate_necessity): Calls to functions\n\tthat only act as barriers do not make any previous stores\n\tnecessary.\n\t* tree-ssa-structalias.c (handle_lhs_call): Delay making\n\tHEAP variables global, do not add a constraint from nonlocal.\n\t(find_func_aliases): Handle escapes through return statements.\n\t(compute_points_to_sets): Make escaped HEAP variables global.\n\n\t* gcc.dg/tree-ssa/20041122-1.c: Enable TBAA, scan FRE dump,\n\tmake allocated memory escape.  Un-XFAIL.\n\t* gcc.dg/vect/pr21591.c: Make allocated memory escape.\n\t* gcc.dg/vect/pr31699.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dce-7.c: New testcase.\n\n\tlibmudflap/\n\t* testsuite/libmudflap.c/fail11-frag.c: Make allocated memory\n\tescape.\n\t* testsuite/libmudflap.c/fail12-frag.c: Likewise.\n\t* testsuite/libmudflap.c/fail16-frag.c: Likewise.\n\t* testsuite/libmudflap.c/fail31-frag.c: Likewise.\n\nFrom-SVN: r149140", "tree": {"sha": "1817c538d837f3cc63a2849dd1c687fef88ed18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1817c538d837f3cc63a2849dd1c687fef88ed18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6e0880aa00a47be074e875443587a7665f68071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e0880aa00a47be074e875443587a7665f68071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e0880aa00a47be074e875443587a7665f68071"}], "stats": {"total": 134, "additions": 116, "deletions": 18}, "files": [{"sha": "205ca44e1dc7be8f3a49f8568f106d4eb10209e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,3 +1,14 @@\n+2009-07-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/19831\n+\t* tree-ssa-dce.c (propagate_necessity): Calls to functions\n+\tthat only act as barriers do not make any previous stores\n+\tnecessary.\n+\t* tree-ssa-structalias.c (handle_lhs_call): Delay making\n+\tHEAP variables global, do not add a constraint from nonlocal.\n+\t(find_func_aliases): Handle escapes through return statements.\n+\t(compute_points_to_sets): Make escaped HEAP variables global.\n+\n 2009-07-01  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR bootstrap/40597"}, {"sha": "e929100fad19632aa4430ff17147cf11971c1749", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,3 +1,12 @@\n+2009-07-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/19831\n+\t* gcc.dg/tree-ssa/20041122-1.c: Enable TBAA, scan FRE dump,\n+\tmake allocated memory escape.  Un-XFAIL.\n+\t* gcc.dg/vect/pr21591.c: Make allocated memory escape.\n+\t* gcc.dg/vect/pr31699.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dce-7.c: New testcase.\n+\n 2009-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40566"}, {"sha": "6007949546e2235a8d833cc6122a134b37598c1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20041122-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041122-1.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n-\n+/* { dg-options \"-O1 -fstrict-aliasing -fdump-tree-fre\" } */\n \n __extension__ typedef __SIZE_TYPE__ size_t;\n extern void *xmalloc (size_t) __attribute__ ((__malloc__));\n@@ -17,22 +16,23 @@ struct basic_block_def\n typedef struct basic_block_def *basic_block;\n extern int n_basic_blocks;\n extern edge frob ();\n-void\n-find_unreachable_blocks (int frobit)\n+basic_block *\n+find_unreachable_blocks (void)\n {\n-  basic_block *tos, *worklist, bb;\n+  basic_block *tos, *worklist;\n   tos = worklist = xmalloc (sizeof (basic_block) * n_basic_blocks);\n   edge e = frob();\n   if (!(e->dest->flags & 4))\n     {\n       e->dest->flags |= 4;\n       *tos++ = e->dest;\n     }\n+  return worklist;\n }\n \n /* If the aliasing code does its job properly, then we should be\n    able to determine that modifying e->dest->flags does not\n-   modify e or e->dest.  The net result is that we only need one\n-   load of e->dest.  */\n-/* { dg-final { scan-tree-dump-times \"->dest\" 1 \"dom2\" { xfail *-*-* } } } */\n-/* { dg-final { cleanup-tree-dump \"dom2\" } } */\n+   modify e or e->dest if we can assert strict-aliasing rules.\n+   The net result is that we only need one load of e->dest.  */\n+/* { dg-final { scan-tree-dump-times \"->dest\" 1 \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "792dfb028af24bee29e443f9229315664f3a0867", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-7.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+extern void link_error (void);\n+void foo(int n)\n+{\n+  int * f = (int*) __builtin_malloc (n * sizeof (int));\n+  int * ff = (int*) __builtin_malloc (n * sizeof (int));\n+  int i;\n+\n+  for (i = 0; i < n; ++i)\n+    {\n+      f[i] = 1;\n+      ff[i] = 2;\n+      if (f[i] != 1)\n+\tlink_error ();\n+      if (ff[i] != 2)\n+\tlink_error ();\n+    }\n+\n+  __builtin_free (f);\n+  __builtin_free (ff);\n+}\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* We should have removed the calls to link_error () and all stores\n+   to the allocated memory.  */\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\*D\" 0 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "425777738c2c62e229b208944c7ef0e38c957851", "filename": "gcc/testsuite/gcc.dg/vect/pr21591.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr21591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr21591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr21591.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -10,6 +10,8 @@ struct a\n struct a *malloc1(__SIZE_TYPE__) __attribute__((malloc));\n void free(void*);\n \n+struct a *p, *q, *r;\n+\n void f(void)\n {\n    struct a *a = malloc1(sizeof(struct a));\n@@ -26,9 +28,9 @@ void f(void)\n    {\n       a->a1[i] = b->a1[i] + c->a1[i];\n    }\n-   free(a);\n-   free(b);\n-   free(c);\n+   p = a;\n+   q = b;\n+   r = c;\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "6015d5cd4e597cf3e2be7d0c8505c0406ebce40e", "filename": "gcc/testsuite/gcc.dg/vect/pr31699.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -7,13 +7,15 @@\n float x[256];\n \n __attribute__ ((noinline))\n-void foo(void)\n+double *foo(void)\n {\n  double *z = malloc (sizeof(double) * 256);\n \n  int i;\n  for (i=0; i<256; ++i)\n    z[i] = x[i] + 1.0f;\n+\n+ return z;\n }\n \n "}, {"sha": "6be298e414f7bb44c7b5e108264aeaaabacf6bcc", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -676,8 +676,19 @@ propagate_necessity (struct edge_list *el)\n \n \t  if (is_gimple_call (stmt))\n \t    {\n+\t      tree callee = gimple_call_fndecl (stmt);\n \t      unsigned i;\n \n+\t      /* Calls to functions that are merely acting as barriers\n+\t\t or that only store to memory do not make any previous\n+\t\t stores necessary.  */\n+\t      if (callee != NULL_TREE\n+\t\t  && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL\n+\t\t  && (DECL_FUNCTION_CODE (callee) == BUILT_IN_MEMSET\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MALLOC\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE))\n+\t\tcontinue;\n+\n \t      /* Calls implicitly load from memory, their arguments\n \t         in addition may explicitly perform memory loads.  */\n \t      mark_all_reaching_defs_necessary (stmt);"}, {"sha": "84edf00e2b265662c32e5cc0eee90944cc474af0", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -3473,7 +3473,9 @@ handle_lhs_call (tree lhs, int flags, VEC(ce_s, heap) *rhsc)\n     {\n       varinfo_t vi;\n       vi = make_constraint_from_heapvar (get_vi_for_tree (lhs), \"HEAP\");\n-      make_copy_constraint (vi, nonlocal_id);\n+      /* We delay marking allocated storage global until we know if\n+         it escapes.  */\n+      vi->is_global_var = 0;\n     }\n   else if (VEC_length (ce_s, rhsc) > 0)\n     {\n@@ -3910,6 +3912,13 @@ find_func_aliases (gimple origt)\n     {\n       make_escape_constraint (gimple_assign_rhs1 (t));\n     }\n+  /* Handle escapes through return.  */\n+  else if (gimple_code (t) == GIMPLE_RETURN\n+\t   && gimple_return_retval (t) != NULL_TREE\n+\t   && could_have_pointers (gimple_return_retval (t)))\n+    {\n+      make_escape_constraint (gimple_return_retval (t));\n+    }\n   /* Handle asms conservatively by adding escape constraints to everything.  */\n   else if (gimple_code (t) == GIMPLE_ASM)\n     {\n@@ -5350,6 +5359,7 @@ compute_points_to_sets (void)\n   struct scc_info *si;\n   basic_block bb;\n   unsigned i;\n+  varinfo_t vi;\n \n   timevar_push (TV_TREE_PTA);\n \n@@ -5447,6 +5457,13 @@ compute_points_to_sets (void)\n      points-to solution queries.  */\n   cfun->gimple_df->escaped.escaped = 0;\n \n+  /* Mark escaped HEAP variables as global.  */\n+  for (i = 0; VEC_iterate (varinfo_t, varmap, i, vi); ++i)\n+    if (vi->is_heap_var\n+\t&& !vi->is_global_var)\n+      vi->is_global_var = pt_solution_includes (&cfun->gimple_df->escaped,\n+\t\t\t\t\t\tvi->decl);\n+\n   /* Compute the points-to sets for pointer SSA_NAMEs.  */\n   for (i = 0; i < num_ssa_names; ++i)\n     {"}, {"sha": "75031657d06f077a297a7c3bf91f5e9e9e69dcfc", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,3 +1,12 @@\n+2009-07-01  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/19831\n+\t* testsuite/libmudflap.c/fail11-frag.c: Make allocated memory\n+\tescape.\n+\t* testsuite/libmudflap.c/fail12-frag.c: Likewise.\n+\t* testsuite/libmudflap.c/fail16-frag.c: Likewise.\n+\t* testsuite/libmudflap.c/fail31-frag.c: Likewise.\n+\n 2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* testsuite/lib/libmudflap.exp (libmudflap-init): Don't add \".\""}, {"sha": "ebd1db9671794ff210193c13db16053decc13813", "filename": "libmudflap/testsuite/libmudflap.c/fail11-frag.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail11-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail11-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail11-frag.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,11 +1,12 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+char *y;\n int main ()\n {\n int i = 10;\n char *x = (char *) malloc (i * sizeof (char));\n-\n+y = x;\n while (i--)\n {\n   ++x;"}, {"sha": "46dbdb23642575bf5d3b4a352fecf54c4d114bae", "filename": "libmudflap/testsuite/libmudflap.c/fail12-frag.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail12-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail12-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail12-frag.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,11 +1,12 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+int *y;\n int main ()\n {\n int i = 10;\n int *x = (int *) malloc (i * sizeof (int));\n-\n+y = x;\n while (i--)\n {\n   ++x;"}, {"sha": "6ac6187e2ad4919df1680f7bbc236625ed4edd05", "filename": "libmudflap/testsuite/libmudflap.c/fail16-frag.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail16-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail16-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail16-frag.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -1,6 +1,7 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n+void *p;\n int main ()\n {\n struct base {\n@@ -15,7 +16,7 @@ struct derived {\n struct base *bp;\n \n bp = (struct base *) malloc (sizeof (struct base));;\n-\n+p = bp;\n bp->basic = 10;\n ((struct derived *)bp)->extra = 'x';\n return 0;"}, {"sha": "bd9a903ccfd02e0be9464f2989e648099cbd249e", "filename": "libmudflap/testsuite/libmudflap.c/fail31-frag.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail31-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail31-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail31-frag.c?ref=14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "patch": "@@ -8,11 +8,12 @@ int main ()\n   int z = h (4, 10);\n   return 0;\n }\n-\n+int *p;\n int h (int i, int j)\n {\n   int k[i];\n   k[j] = i;\n+  p = k;\n   return j;\n }\n "}]}