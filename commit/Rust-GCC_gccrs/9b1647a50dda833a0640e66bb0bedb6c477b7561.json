{"sha": "9b1647a50dda833a0640e66bb0bedb6c477b7561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIxNjQ3YTUwZGRhODMzYTA2NDBlNjZiYjBiZWRiNmM0NzdiNzU2MQ==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-06-03T21:15:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:26Z"}, "message": "[Ada] Incremental patch for restriction No_Dynamic_Accessibility_Checks\n\ngcc/ada/\n\n\t* sem_util.ads (Type_Access_Level): Add new optional parameter\n\tAssoc_Ent.\n\t* sem_util.adb (Accessibility_Level): Treat access discriminants\n\tthe same as components when the restriction\n\tNo_Dynamic_Accessibility_Checks is enabled.\n\t(Deepest_Type_Access_Level): Remove exception for\n\tDebug_Flag_Underscore_B when returning the result of\n\tType_Access_Level in the case where\n\tNo_Dynamic_Accessibility_Checks is active.\n\t(Function_Call_Or_Allocator_Level): Correctly calculate the\n\tlevel of Expr based on its containing subprogram instead of\n\tusing Current_Subprogram.\n\t* sem_res.adb (Valid_Conversion): Add actual for new parameter\n\tAssoc_Ent in call to Type_Access_Level, and add test of\n\tNo_Dynamic_Accessibility_Checks_Enabled to ensure that static\n\taccessibility checks are performed for all anonymous access type\n\tconversions.", "tree": {"sha": "5ee5e2dae6d8d1b662e8b47d63606f47a66a78bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee5e2dae6d8d1b662e8b47d63606f47a66a78bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b1647a50dda833a0640e66bb0bedb6c477b7561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1647a50dda833a0640e66bb0bedb6c477b7561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1647a50dda833a0640e66bb0bedb6c477b7561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1647a50dda833a0640e66bb0bedb6c477b7561/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80c73318785edec642b04dfe00db2e61503bf20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80c73318785edec642b04dfe00db2e61503bf20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80c73318785edec642b04dfe00db2e61503bf20"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "03d747ef1abe9e7f0433e309ab049c265f61a2c3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9b1647a50dda833a0640e66bb0bedb6c477b7561", "patch": "@@ -13734,11 +13734,16 @@ package body Sem_Res is\n             --  the target type is anonymous access as well - see RM 3.10.2\n             --  (10.3/3).\n \n-            elsif Type_Access_Level (Opnd_Type) >\n-                    Deepest_Type_Access_Level (Target_Type)\n-              and then (Nkind (Associated_Node_For_Itype (Opnd_Type)) /=\n-                         N_Function_Specification\n-                        or else Ekind (Target_Type) in Anonymous_Access_Kind)\n+            --  Note that when the restriction No_Dynamic_Accessibility_Checks\n+            --  is in effect wei also want to proceed with the conversion check\n+            --  described above.\n+\n+            elsif Type_Access_Level (Opnd_Type, Assoc_Ent => Operand)\n+                    > Deepest_Type_Access_Level (Target_Type)\n+              and then (Nkind (Associated_Node_For_Itype (Opnd_Type))\n+                          /= N_Function_Specification\n+                        or else Ekind (Target_Type) in Anonymous_Access_Kind\n+                        or else No_Dynamic_Accessibility_Checks_Enabled (N))\n \n               --  Check we are not in a return value ???\n "}, {"sha": "5d0aa49a2db685bf7c13cde119702df4ce9e8de5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9b1647a50dda833a0640e66bb0bedb6c477b7561", "patch": "@@ -420,7 +420,7 @@ package body Sem_Util is\n \n                else\n                   return Make_Level_Literal\n-                           (Subprogram_Access_Level (Current_Subprogram));\n+                           (Subprogram_Access_Level (Entity (Name (N))));\n                end if;\n             end if;\n \n@@ -791,12 +791,22 @@ package body Sem_Util is\n             --  is an anonymous access type means that its associated\n             --  level is that of the containing type - see RM 3.10.2 (16).\n \n+            --  Note that when restriction No_Dynamic_Accessibility_Checks is\n+            --  in effect we treat discriminant components as regular\n+            --  components.\n+\n             elsif Nkind (E) = N_Selected_Component\n               and then Ekind (Etype (E))   =  E_Anonymous_Access_Type\n               and then Ekind (Etype (Pre)) /= E_Anonymous_Access_Type\n-              and then not (Nkind (Selector_Name (E)) in N_Has_Entity\n-                             and then Ekind (Entity (Selector_Name (E)))\n-                                        = E_Discriminant)\n+              and then (not (Nkind (Selector_Name (E)) in N_Has_Entity\n+                              and then Ekind (Entity (Selector_Name (E)))\n+                                         = E_Discriminant)\n+\n+                        --  The alternative accessibility models both treat\n+                        --  discriminants as regular components.\n+\n+                        or else (No_Dynamic_Accessibility_Checks_Enabled (E)\n+                                  and then Allow_Alt_Model))\n             then\n                --  When restriction No_Dynamic_Accessibility_Checks is active\n                --  and -gnatd_b set, the level is that of the designated type.\n@@ -7215,7 +7225,6 @@ package body Sem_Util is\n \n          if Allow_Alt_Model\n            and then No_Dynamic_Accessibility_Checks_Enabled (Typ)\n-           and then not Debug_Flag_Underscore_B\n          then\n             return Type_Access_Level (Typ, Allow_Alt_Model);\n          end if;\n@@ -29157,7 +29166,8 @@ package body Sem_Util is\n \n    function Type_Access_Level\n      (Typ             : Entity_Id;\n-      Allow_Alt_Model : Boolean := True) return Uint\n+      Allow_Alt_Model : Boolean   := True;\n+      Assoc_Ent       : Entity_Id := Empty) return Uint\n    is\n       Btyp    : Entity_Id := Base_Type (Typ);\n       Def_Ent : Entity_Id;\n@@ -29187,6 +29197,18 @@ package body Sem_Util is\n                            (Designated_Type (Btyp), Allow_Alt_Model);\n                end if;\n \n+               --  When an anonymous access type's Assoc_Ent is specifiedi,\n+               --  calculate the result based on the general accessibility\n+               --  level routine.\n+\n+               --  We would like to use Associated_Node_For_Itype here instead,\n+               --  but in some cases it is not fine grained enough ???\n+\n+               if Present (Assoc_Ent) then\n+                  return Static_Accessibility_Level\n+                           (Assoc_Ent, Object_Decl_Level);\n+               end if;\n+\n                --  Otherwise take the context of the anonymous access type into\n                --  account.\n "}, {"sha": "b0d6a2a2ef355b6a4c91a8b655ef1803c69c57d6", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b1647a50dda833a0640e66bb0bedb6c477b7561/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=9b1647a50dda833a0640e66bb0bedb6c477b7561", "patch": "@@ -3267,12 +3267,17 @@ package Sem_Util is\n \n    function Type_Access_Level\n      (Typ             : Entity_Id;\n-      Allow_Alt_Model : Boolean := True) return Uint;\n+      Allow_Alt_Model : Boolean   := True;\n+      Assoc_Ent       : Entity_Id := Empty) return Uint;\n    --  Return the accessibility level of Typ\n \n    --  The Allow_Alt_Model parameter allows the alternative level calculation\n    --  under the restriction No_Dynamic_Accessibility_Checks to be performed.\n \n+   --  Assoc_Ent allows for the optional specification of the entity associated\n+   --  with Typ. This gets utilized mostly for anonymous access type\n+   --  processing, where context matters in interpreting Typ's level.\n+\n    function Type_Without_Stream_Operation\n      (T  : Entity_Id;\n       Op : TSS_Name_Type := TSS_Null) return Entity_Id;"}]}