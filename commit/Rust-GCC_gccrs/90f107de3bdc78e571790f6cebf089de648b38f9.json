{"sha": "90f107de3bdc78e571790f6cebf089de648b38f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmMTA3ZGUzYmRjNzhlNTcxNzkwZjZjZWJmMDg5ZGU2NDhiMzhmOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-21T19:54:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-21T19:54:52Z"}, "message": "AttributeSetUtilities.java, [...]: New files.\n\n2003-12-21  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/AttributeSetUtilities.java,\n\tjavax/print/attribute/HashAttributeSet.java,\n\tjavax/print/attribute/HashDocAttributeSet.java,\n\tjavax/print/attribute/HashPrintJobAttributeSet.java,\n\tjavax/print/attribute/HashPrintRequestAttributeSet.java,\n\tjavax/print/attribute/HashPrintServiceAttributeSet.java: New files.\n\t* Makefile.am (ordinary_java_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r74914", "tree": {"sha": "f8e1e6196be43dc5bd109d0502fdb7cf77b3f008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e1e6196be43dc5bd109d0502fdb7cf77b3f008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f107de3bdc78e571790f6cebf089de648b38f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f107de3bdc78e571790f6cebf089de648b38f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f107de3bdc78e571790f6cebf089de648b38f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f107de3bdc78e571790f6cebf089de648b38f9/comments", "author": null, "committer": null, "parents": [{"sha": "cd413cab51288a1642069501742f8c174fb9b21d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd413cab51288a1642069501742f8c174fb9b21d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd413cab51288a1642069501742f8c174fb9b21d"}], "stats": {"total": 1191, "additions": 1191, "deletions": 0}, "files": [{"sha": "4b9ccbbddd03439ba39f74ce232ee617e2fcd171", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -1,3 +1,14 @@\n+2003-12-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/AttributeSetUtilities.java,\n+\tjavax/print/attribute/HashAttributeSet.java,\n+\tjavax/print/attribute/HashDocAttributeSet.java,\n+\tjavax/print/attribute/HashPrintJobAttributeSet.java,\n+\tjavax/print/attribute/HashPrintRequestAttributeSet.java,\n+\tjavax/print/attribute/HashPrintServiceAttributeSet.java: New files.\n+\t* Makefile.am (ordinary_java_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2003-12-21  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/print/attribute/EnumSyntax.java,"}, {"sha": "461ccd8728534fa11f6f6535e927aa0e82e7ce52", "filename": "libjava/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -1743,10 +1743,16 @@ javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n javax/print/attribute/Attribute.java \\\n javax/print/attribute/AttributeSet.java \\\n+javax/print/attribute/AttributeSetUtilities.java \\\n javax/print/attribute/DateTimeSyntax.java \\\n javax/print/attribute/DocAttribute.java \\\n javax/print/attribute/DocAttributeSet.java \\\n javax/print/attribute/EnumSyntax.java \\\n+javax/print/attribute/HashAttributeSet.java \\\n+javax/print/attribute/HashDocAttributeSet.java \\\n+javax/print/attribute/HashPrintJobAttributeSet.java \\\n+javax/print/attribute/HashPrintRequestAttributeSet.java \\\n+javax/print/attribute/HashPrintServiceAttributeSet.java \\\n javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintJobAttribute.java \\\n javax/print/attribute/PrintJobAttributeSet.java \\"}, {"sha": "278910fa2603ad3fe28ef5476f0778ec2fdc026a", "filename": "libjava/Makefile.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -1459,10 +1459,16 @@ javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n javax/print/attribute/Attribute.java \\\n javax/print/attribute/AttributeSet.java \\\n+javax/print/attribute/AttributeSetUtilities.java \\\n javax/print/attribute/DateTimeSyntax.java \\\n javax/print/attribute/DocAttribute.java \\\n javax/print/attribute/DocAttributeSet.java \\\n javax/print/attribute/EnumSyntax.java \\\n+javax/print/attribute/HashAttributeSet.java \\\n+javax/print/attribute/HashDocAttributeSet.java \\\n+javax/print/attribute/HashPrintJobAttributeSet.java \\\n+javax/print/attribute/HashPrintRequestAttributeSet.java \\\n+javax/print/attribute/HashPrintServiceAttributeSet.java \\\n javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintJobAttribute.java \\\n javax/print/attribute/PrintJobAttributeSet.java \\\n@@ -4068,10 +4074,16 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/naming/spi/Resolver.P .deps/javax/naming/spi/StateFactory.P \\\n .deps/javax/print/attribute/Attribute.P \\\n .deps/javax/print/attribute/AttributeSet.P \\\n+.deps/javax/print/attribute/AttributeSetUtilities.P \\\n .deps/javax/print/attribute/DateTimeSyntax.P \\\n .deps/javax/print/attribute/DocAttribute.P \\\n .deps/javax/print/attribute/DocAttributeSet.P \\\n .deps/javax/print/attribute/EnumSyntax.P \\\n+.deps/javax/print/attribute/HashAttributeSet.P \\\n+.deps/javax/print/attribute/HashDocAttributeSet.P \\\n+.deps/javax/print/attribute/HashPrintJobAttributeSet.P \\\n+.deps/javax/print/attribute/HashPrintRequestAttributeSet.P \\\n+.deps/javax/print/attribute/HashPrintServiceAttributeSet.P \\\n .deps/javax/print/attribute/IntegerSyntax.P \\\n .deps/javax/print/attribute/PrintJobAttribute.P \\\n .deps/javax/print/attribute/PrintJobAttributeSet.P \\"}, {"sha": "444b09746257b14ca98e28a5e7c24fb32f5a7ab7", "filename": "libjava/javax/print/attribute/AttributeSetUtilities.java", "status": "added", "additions": 445, "deletions": 0, "changes": 445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,445 @@\n+/* AttributeSetUtilities.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+public final class AttributeSetUtilities\n+{\n+  private static class UnmodifiableAttributeSet\n+    implements AttributeSet, Serializable\n+  {\n+    private AttributeSet set;\n+\n+    public UnmodifiableAttributeSet(AttributeSet attributeSet)\n+    {\n+      if (attributeSet == null)\n+        throw new NullPointerException(\"attributeSet may not be null\");\n+\n+      this.set = attributeSet;\n+    }\n+\n+    public boolean add(Attribute attribute)\n+    {\n+      throw new UnmodifiableSetException();\n+    }\n+\n+    public boolean addAll(AttributeSet attributes)\n+    {\n+      throw new UnmodifiableSetException();\n+    }\n+    \n+    public void clear()\n+    {\n+      throw new UnmodifiableSetException();\n+    }\n+\n+    public boolean containsKey(Class category)\n+    {\n+      return set.containsKey(category);\n+    }\n+\n+    public boolean containsValue(Attribute attribute)\n+    {\n+      return set.containsValue(attribute);\n+    }\n+\n+    public boolean equals(Object obj)\n+    {\n+      return set.equals(obj);\n+    }\n+    \n+    public Attribute get(Class interfaceName)\n+    {\n+      return set.get(interfaceName);\n+    }\n+\n+    public int hashCode()\n+    {\n+      return set.hashCode();\n+    }\n+    \n+    public boolean isEmpty()\n+    {\n+      return set.isEmpty();\n+    }\n+\n+    public boolean remove(Class category)\n+    {\n+      throw new UnmodifiableSetException();\n+    }\n+\n+    public boolean remove(Attribute attribute)\n+    {\n+      throw new UnmodifiableSetException();\n+    }\n+\n+    public int size()\n+    {\n+      return set.size();\n+    }\n+\n+    public Attribute[] toArray()\n+    {\n+      return set.toArray();\n+    }\n+  }\n+\n+  public static class UnmodifiableDocAttributeSet\n+    extends UnmodifiableAttributeSet\n+    implements DocAttributeSet, Serializable\n+  {\n+    public UnmodifiableDocAttributeSet(DocAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class UnmodifiablePrintJobAttributeSet\n+    extends UnmodifiableAttributeSet\n+    implements PrintJobAttributeSet, Serializable\n+  {\n+    public UnmodifiablePrintJobAttributeSet(PrintJobAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class UnmodifiablePrintRequestAttributeSet\n+    extends UnmodifiableAttributeSet\n+    implements PrintRequestAttributeSet, Serializable\n+  {\n+    public UnmodifiablePrintRequestAttributeSet(PrintRequestAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class UnmodifiablePrintServiceAttributeSet\n+    extends UnmodifiableAttributeSet\n+    implements PrintServiceAttributeSet, Serializable\n+  {\n+    public UnmodifiablePrintServiceAttributeSet(PrintServiceAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class SynchronizedAttributeSet\n+    implements AttributeSet, Serializable\n+  {\n+    private AttributeSet set;\n+\n+    public SynchronizedAttributeSet(AttributeSet attributeSet)\n+    {\n+      if (attributeSet == null)\n+        throw new NullPointerException(\"attributeSet may not be null\");\n+\n+      this.set = attributeSet;\n+    }\n+\n+    public synchronized boolean add(Attribute attribute)\n+    {\n+      return set.add(attribute);\n+    }\n+\n+    public synchronized boolean addAll(AttributeSet attributes)\n+    {\n+      return set.addAll(attributes);\n+    }\n+    \n+    public synchronized void clear()\n+    {\n+      set.clear();\n+    }\n+\n+    public synchronized boolean containsKey(Class category)\n+    {\n+      return set.containsKey(category);\n+    }\n+\n+    public synchronized boolean containsValue(Attribute attribute)\n+    {\n+      return set.containsValue(attribute);\n+    }\n+\n+    public synchronized boolean equals(Object obj)\n+    {\n+      return set.equals(obj);\n+    }\n+    \n+    public synchronized Attribute get(Class interfaceName)\n+    {\n+      return set.get(interfaceName);\n+    }\n+\n+    public synchronized int hashCode()\n+    {\n+      return set.hashCode();\n+    }\n+    \n+    public synchronized boolean isEmpty()\n+    {\n+      return set.isEmpty();\n+    }\n+\n+    public synchronized boolean remove(Class category)\n+    {\n+      return set.remove(category);\n+    }\n+\n+    public synchronized boolean remove(Attribute attribute)\n+    {\n+      return set.remove(attribute);\n+    }\n+\n+    public synchronized int size()\n+    {\n+      return set.size();\n+    }\n+\n+    public synchronized Attribute[] toArray()\n+    {\n+      return set.toArray();\n+    }\n+  }\n+\n+  public static class SynchronizedDocAttributeSet\n+    extends SynchronizedAttributeSet\n+    implements DocAttributeSet, Serializable\n+  {\n+    public SynchronizedDocAttributeSet(DocAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class SynchronizedPrintJobAttributeSet\n+    extends SynchronizedAttributeSet\n+    implements PrintJobAttributeSet, Serializable\n+  {\n+    public SynchronizedPrintJobAttributeSet(PrintJobAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class SynchronizedPrintRequestAttributeSet\n+    extends SynchronizedAttributeSet\n+    implements PrintRequestAttributeSet, Serializable\n+  {\n+    public SynchronizedPrintRequestAttributeSet(PrintRequestAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  public static class SynchronizedPrintServiceAttributeSet\n+    extends SynchronizedAttributeSet\n+    implements PrintServiceAttributeSet, Serializable\n+  {\n+    public SynchronizedPrintServiceAttributeSet(PrintServiceAttributeSet attributeSet)\n+    {\n+      super(attributeSet);\n+    }\n+  }\n+\n+  /**\n+   * Returns a synchronized view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static AttributeSet synchronizedView(AttributeSet attributeSet)\n+  {\n+    return new SynchronizedAttributeSet(attributeSet);\n+  }\n+\n+  /**\n+   * Returns a synchronized view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static DocAttributeSet synchronizedView(DocAttributeSet attributeSet)\n+  {\n+    return new SynchronizedDocAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns a synchronized view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintJobAttributeSet synchronizedView(PrintJobAttributeSet attributeSet)\n+  {\n+    return new SynchronizedPrintJobAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns a synchronized view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintRequestAttributeSet synchronizedView(PrintRequestAttributeSet attributeSet)\n+  {\n+    return new SynchronizedPrintRequestAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns a synchronized view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintServiceAttributeSet synchronizedView(PrintServiceAttributeSet attributeSet)\n+  {\n+    return new SynchronizedPrintServiceAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns an unmodifiable view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static AttributeSet unmodifiableView(AttributeSet attributeSet)\n+  {\n+    return new UnmodifiableAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns an unmodifiable view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static DocAttributeSet unmodifiableView(DocAttributeSet attributeSet)\n+  {\n+    return new UnmodifiableDocAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns an unmodifiable view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintJobAttributeSet unmodifiableView(PrintJobAttributeSet attributeSet)\n+  {\n+    return new UnmodifiablePrintJobAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns an unmodifiable view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintRequestAttributeSet unmodifiableView(PrintRequestAttributeSet attributeSet)\n+  {\n+    return new UnmodifiablePrintRequestAttributeSet(attributeSet);\n+  }\n+  \n+  /**\n+   * Returns an unmodifiable view of the given attribute set.\n+   *\n+   * @return the sychronized attribute set\n+   */\n+  public static PrintServiceAttributeSet unmodifiableView(PrintServiceAttributeSet attributeSet)\n+  {\n+    return new UnmodifiablePrintServiceAttributeSet(attributeSet);\n+  }\n+\n+  /**\n+   * Verifies that the given object is a <code>Class</code> that\n+   * implements the given interface name.\n+   *\n+   * @return object casted to <code>Class</code>\n+   *\n+   * @exception ClassCastException if object is not a <code>Class</code>\n+   * that implements interfaceName\n+   * @exception NullPointerException if object is null\n+   */\n+  public static Class verifyAttributeCategory(Object object,\n+                                              Class interfaceName)\n+  {\n+    if (object == null)\n+      throw new NullPointerException(\"object may not be null\");\n+\n+    Class clazz = (Class) object;\n+\n+    if (interfaceName.isAssignableFrom(clazz))\n+      return clazz;\n+\n+    throw new ClassCastException();\n+  }\n+  \n+  /**\n+   * Verifies that the given object is an attribute of the given interface.\n+   *\n+   * @return the object casted to <code>Attribute</code>\n+   *\n+   * @exception ClassCastException if object is no instance of interfaceName.\n+   * @exception NullPointerException if object is null\n+   */\n+  public static Attribute verifyAttributeValue(Object object,\n+                                               Class interfaceName)\n+  {\n+    if (object == null)\n+      throw new NullPointerException(\"object may not be null\");\n+\n+    if (interfaceName.isInstance(object))\n+      return (Attribute) object;\n+\n+    throw new ClassCastException();\n+  }\n+\n+  /**\n+   * Verifies that the category of attribute is equals to category.\n+   *\n+   * @param category the category the atteribute should be\n+   * @param attribtue the attribute to verify\n+   *\n+   * @exception IllegalArgumentException if the categories are not equal\n+   * @exception NullPointerException if category is null\n+   */\n+  public static void verifyCategoryForAttribute(Class category,\n+                                                Attribute attribute)\n+  {\n+    if (category == null)\n+      throw new NullPointerException(\"object may not be null\");\n+\n+    if (category.equals(attribute.getCategory()))\n+      throw new IllegalArgumentException\n+        (\"category of attribute not equal to category\");\n+  }\n+}"}, {"sha": "6adf37c617f69239fcf0cb8d849029f8deae8807", "filename": "libjava/javax/print/attribute/HashAttributeSet.java", "status": "added", "additions": 341, "deletions": 0, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,341 @@\n+/* HashAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+\n+public class HashAttributeSet implements AttributeSet, Serializable\n+{\n+  private static final long serialVersionUID = 5311560590283707917L;\n+  \n+  private Class interfaceName;\n+  private HashMap attributeMap = new HashMap();\n+\n+  /**\n+   * Creates an empty <code>HashAttributeSet</code> object.\n+   */\n+  public HashAttributeSet()\n+  {\n+    this(Attribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashAttributeSet</code> object with the given\n+   * attribute in it.\n+   *\n+   * @param attribute the attribute to put into the set\n+   *\n+   * @exception NullPointerException if attribute is null\n+   */\n+  public HashAttributeSet(Attribute attribute)\n+  {\n+    this(attribute, Attribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the set\n+   *\n+   * @exception NullPointerException If attributes is null\n+   */\n+  public HashAttributeSet(Attribute[] attributes)\n+  {\n+    this(attributes, Attribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the set\n+   *\n+   * @exception NullPointerException If attributes is null\n+   */\n+  public HashAttributeSet(AttributeSet attributes)\n+  {\n+    this(attributes, Attribute.class);\n+  }\n+\n+  /**\n+   * Creates an empty <code>HashAttributeSet</code> object.\n+   *\n+   * @param interfaceName the interface that all members must implement\n+   *\n+   * @exception NullPointerException if interfaceName is null\n+   */\n+  protected HashAttributeSet(Class interfaceName)\n+  {\n+    if (interfaceName == null)\n+      throw new NullPointerException(\"interfaceName may not be null\");\n+    \n+    this.interfaceName = interfaceName;\n+  }\n+  \n+  /**\n+   * Creates an empty <code>HashAttributeSet</code> object.\n+   *\n+   * @exception ClassCastException if attribute is not an interface of\n+   * interfaceName\n+   * @exception NullPointerException if attribute or interfaceName is null\n+   */\n+  protected HashAttributeSet(Attribute attribute, Class interfaceName)\n+  {\n+    this(interfaceName);\n+    \n+    if (attribute == null)\n+      throw new NullPointerException();\n+    \n+    add(attribute);\n+  }\n+\n+  /**\n+   * Creates an empty <code>HashAttributeSet</code> object.\n+   *\n+   * @exception ClassCastException if any element of attributes is not an\n+   * interface of interfaceName\n+   * @exception NullPointerException if attributes or interfaceName is null\n+   */\n+  protected HashAttributeSet(Attribute[] attributes, Class interfaceName)\n+  {\n+    this(interfaceName);\n+    \n+    if (attributes == null)\n+      throw new NullPointerException();\n+    \n+    for (int index = 0; index < attributes.length; index++)\n+      add(attributes[index]);\n+  }\n+\n+  /**\n+   * Creates an empty <code>HashAttributeSet</code> object.\n+   *\n+   * @exception ClassCastException if any element of attributes is not an\n+   * interface of interfaceName\n+   * @exception NullPointerException if attributes or interfaceName is null\n+   */\n+  public HashAttributeSet(AttributeSet attributes, Class interfaceName)\n+  {\n+    this(interfaceName);\n+    \n+    if (attributes != null)\n+      addAll(attributes);\n+  }\n+\n+  /**\n+   * Adds the given attribute to the set.\n+   *\n+   * @param attribute the attribute to add\n+   *\n+   * @return true if the attribute set has changed, false otherwise\n+   */\n+  public boolean add(Attribute attribute)\n+  {\n+    if (attribute == null)\n+      throw new NullPointerException(\"attribute may not be null\");\n+\n+    Object old = attributeMap.put\n+      (attribute.getCategory(), AttributeSetUtilities.verifyAttributeValue\n+                                  (attribute, interfaceName));\n+    return !attribute.equals(old);\n+  }\n+\n+  /**\n+   * Adds the given attributes to the set.\n+   *\n+   * @param attributes the attributes to add\n+   *\n+   * @return true if the attribute set has changed, false otherwise\n+   */\n+  public boolean addAll(AttributeSet attributes)\n+  {\n+    boolean modified = false;\n+    Attribute[] array = attributes.toArray();\n+\n+    for (int index = 0; index < array.length; index++)\n+      if (! add(array[index]))\n+        modified = true;\n+\n+    return modified;\n+  }\n+\n+  /**\n+   * Removes all attributes from this attribute set.\n+   */\n+  public void clear()\n+  {\n+    attributeMap.clear();\n+  }\n+\n+  /**\n+   * Checks if this attribute set contains an entry with the given category.\n+   *\n+   * @param category the category to test for\n+   *\n+   * @result true if the category exists in this attribute set, false otherwise.\n+   */\n+  public boolean containsKey(Class category)\n+  {\n+    return attributeMap.containsKey(category);\n+  }\n+\n+  /**\n+   * Checks if this attribute set contains an entry with the given attribute.\n+   *\n+   * @param attribute the attribute to test for\n+   *\n+   * @result true if the attribute exists in this attribute set,\n+   * false otherwise.\n+   */\n+  public boolean containsValue(Attribute attribute)\n+  {\n+    return attributeMap.containsValue(attribute);\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof HashAttributeSet))\n+      return false;\n+\n+    return attributeMap.equals(((HashAttributeSet) obj).attributeMap);\n+  }\n+\n+  /**\n+   * Returns the attribute value that is connected to the given attribute\n+   * category. If the attribute set does not contains the given category null\n+   * will be returned.\n+   *\n+   * @param category the attribute category to return the attribute value for\n+   *\n+   * @return the attribute associated to category, or null\n+   */\n+  public Attribute get(Class category)\n+  {\n+    return (Attribute) attributeMap.get(category);\n+  }\n+  \n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return attributeMap.hashCode() + interfaceName.hashCode();\n+  }\n+\n+  /**\n+   * Checks if the attribute set is empty.\n+   *\n+   * @return true if the attribute set is empty, false otherwise\n+   */\n+  public boolean isEmpty()\n+  {\n+    return attributeMap.isEmpty();\n+  }\n+\n+  /**\n+   * Removes the entry with the given attribute in it.\n+   *\n+   * @param attribute the attribute value of the entry to be removed\n+   *\n+   * @return true if the attribute set has changed, false otherwise.\n+   */\n+  public boolean remove(Attribute attribute)\n+  {\n+    if (attribute == null)\n+      return false;\n+\n+    return attributeMap.remove(attribute.getCategory()) != null;\n+  }\n+\n+  /**\n+   * Removes the entry with the given category in it.\n+   *\n+   * @param category the category value of the entry to be removed\n+   *\n+   * @return true if the attribute set has changed, false otherwise.\n+   */\n+  public boolean remove(Class category)\n+  {\n+    if (category == null)\n+      return false;\n+\n+    return attributeMap.remove(category) != null;\n+  }\n+\n+  /**\n+   * Returns the number of elements in this attribute set.\n+   *\n+   * @return the number of elements.\n+   */\n+  public int size()\n+  {\n+    return attributeMap.size();\n+  }\n+\n+  /**\n+   * Returns the content of the attribute set as an array\n+   *\n+   * @return an array of attributes\n+   */\n+  public Attribute[] toArray()\n+  {\n+    int index = 0;\n+    Iterator it = attributeMap.entrySet().iterator();\n+    Attribute[] array = new Attribute[size()];\n+\n+    while (it.hasNext())\n+      {\n+        array[index] = (Attribute) it.next();\n+        index++;\n+      }\n+    \n+    return array;\n+  }\n+}"}, {"sha": "a7eedbf54b60352ad68e477bc1734e8a9579cde4", "filename": "libjava/javax/print/attribute/HashDocAttributeSet.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashDocAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashDocAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashDocAttributeSet.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,94 @@\n+/* HashDocAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+public class HashDocAttributeSet extends HashAttributeSet\n+  implements DocAttributeSet, Serializable\n+{\n+  private static final long serialVersionUID = -1128534486061432528L;\n+  \n+  /**\n+   * Creates an empty <code>HashDocAttributeSet</code> object.\n+   */\n+  public HashDocAttributeSet()\n+  {\n+    super(DocAttribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashDocAttributeSet</code> object with the given\n+   * attribute in it.\n+   *\n+   * @param attribute the attriute tu put into the attribute set\n+   *\n+   * @exception NullPointerException if attribute is null\n+   */\n+  public HashDocAttributeSet(DocAttribute attribute)\n+  {\n+    super(attribute, DocAttribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashDocAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception NullPointerException if attributes is null\n+   */\n+  public HashDocAttributeSet(DocAttribute[] attributes)\n+  {\n+    super(attributes, DocAttribute.class);\n+  }\n+\n+  /**\n+   * Creates a <code>HashDocAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception ClassCastException if any element of attributes is not\n+   * an instance of <code>DocAttribute</code>\n+   */\n+  public HashDocAttributeSet(DocAttributeSet attributes)\n+  {\n+    super(attributes, DocAttribute.class);\n+  }\n+}"}, {"sha": "16b1beb34815c22ed5ba176be2a2c0867d13fac2", "filename": "libjava/javax/print/attribute/HashPrintJobAttributeSet.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintJobAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintJobAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintJobAttributeSet.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,94 @@\n+/* HashPrintJobAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+public class HashPrintJobAttributeSet extends HashAttributeSet\n+  implements Serializable, PrintJobAttributeSet\n+{\n+  private static final long serialVersionUID = -4204473656070350348L;\n+  \n+  /**\n+   * Creates an empty <code>HashPrintJobAttributeSet</code> object.\n+   */\n+  public HashPrintJobAttributeSet()\n+  {\n+    super(PrintJobAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintJobAttributeSet</code> object with the given\n+   * attribute in it.\n+   *\n+   * @param attribute the attriute tu put into the attribute set\n+   *\n+   * @exception NullPointerException if attribute is null\n+   */\n+  public HashPrintJobAttributeSet(PrintJobAttribute attribute)\n+  {\n+    super(attribute, PrintJobAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintJobAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception NullPointerException if attributes is null\n+   */\n+  public HashPrintJobAttributeSet(PrintJobAttribute[] attributes)\n+  {\n+    super(attributes, PrintJobAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintJobAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception ClassCastException if any element of attributes is not\n+   * an instance of <code>PrintJobAttribute</code>\n+   */\n+  public HashPrintJobAttributeSet(PrintJobAttributeSet attributes)\n+  {\n+    super(attributes, PrintJobAttribute.class);\n+  }\n+}"}, {"sha": "2d0cbbd3adc5c7a8fef5d016349a294d961ecdb0", "filename": "libjava/javax/print/attribute/HashPrintRequestAttributeSet.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintRequestAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintRequestAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintRequestAttributeSet.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,94 @@\n+/* HashPrintRequestAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+public class HashPrintRequestAttributeSet extends HashAttributeSet\n+  implements Serializable, PrintRequestAttributeSet\n+{\n+  private static final long serialVersionUID = 2364756266107751933L;\n+  \n+  /**\n+   * Creates an empty <code>HashPrintRequestAttributeSet</code> object.\n+   */\n+  public HashPrintRequestAttributeSet()\n+  {\n+    super(PrintRequestAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintRequestAttributeSet</code> object with the given\n+   * attribute in it.\n+   *\n+   * @param attribute the attriute tu put into the attribute set\n+   *\n+   * @exception NullPointerException if attribute is null\n+   */\n+  public HashPrintRequestAttributeSet(PrintRequestAttribute attribute)\n+  {\n+    super(attribute, PrintRequestAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintRequestAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception NullPointerException if attributes is null\n+   */\n+  public HashPrintRequestAttributeSet(PrintRequestAttribute[] attributes)\n+  {\n+    super(attributes, PrintRequestAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintRequestAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception ClassCastException if any element of attributes is not\n+   * an instance of <code>PrintRequestAttribute</code>\n+   */\n+  public HashPrintRequestAttributeSet(PrintRequestAttributeSet attributes)\n+  {\n+    super(attributes, PrintRequestAttribute.class);\n+  }\n+}"}, {"sha": "aa6793b382f12281d012b6ceca7cba6428132e30", "filename": "libjava/javax/print/attribute/HashPrintServiceAttributeSet.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintServiceAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f107de3bdc78e571790f6cebf089de648b38f9/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintServiceAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashPrintServiceAttributeSet.java?ref=90f107de3bdc78e571790f6cebf089de648b38f9", "patch": "@@ -0,0 +1,94 @@\n+/* HashPrintServiceAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+public class HashPrintServiceAttributeSet extends HashAttributeSet\n+  implements Serializable, PrintServiceAttributeSet\n+{\n+  private static final long serialVersionUID = 6642904616179203070L;\n+  \n+  /**\n+   * Creates an empty <code>HashPrintServiceAttributeSet</code> object.\n+   */\n+  public HashPrintServiceAttributeSet()\n+  {\n+    super(PrintServiceAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintServiceAttributeSet</code> object with the given\n+   * attribute in it.\n+   *\n+   * @param attribute the attriute tu put into the attribute set\n+   *\n+   * @exception NullPointerException if attribute is null\n+   */\n+  public HashPrintServiceAttributeSet(PrintServiceAttribute attribute)\n+  {\n+    super(attribute, PrintServiceAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintServiceAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception NullPointerException if attributes is null\n+   */\n+  public HashPrintServiceAttributeSet(PrintServiceAttribute[] attributes)\n+  {\n+    super(attributes, PrintServiceAttribute.class);\n+  }\n+  \n+  /**\n+   * Creates a <code>HashPrintServiceAttributeSet</code> object with the given\n+   * attributes in it.\n+   *\n+   * @param attributes the attributes to put into the attribute set\n+   *\n+   * @exception ClassCastException if any element of attributes is not\n+   * an instance of <code>PrintServiceAttribute</code>\n+   */\n+  public HashPrintServiceAttributeSet(PrintServiceAttributeSet attributes)\n+  {\n+    super(attributes, PrintServiceAttribute.class);\n+  }\n+}"}]}