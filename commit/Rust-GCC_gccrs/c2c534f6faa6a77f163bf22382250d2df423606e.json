{"sha": "c2c534f6faa6a77f163bf22382250d2df423606e", "node_id": "C_kwDOANBUbNoAKGMyYzUzNGY2ZmFhNmE3N2YxNjNiZjIyMzgyMjUwZDJkZjQyMzYwNmU", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-23T16:15:00Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-11-23T19:16:58Z"}, "message": "rs6000: Add [power6-64] stanza to new builtin support\n\n2021-11-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def: Add power6-64 stanza.  Move\n\tCMPB to power6-64 stanza.\n\t* config/rs6000/rs6000-call.c (rs6000_invalid_new_builtin): Handle\n\tENB_P6_64 case.\n\t(rs6000_new_builtin_is_supported): Likewise.\n\t(rs6000_expand_new_builtin): Likewise.  Clean up formatting.\n\t(rs6000_init_builtins): Handle ENB_P6_64 case.\n\t* config/rs6000/rs6000-gen-builtins.c (bif_stanza): Add\tBSTZ_P6_64.\n\t(stanza_map): Add entry mapping power6-64 to BSTZ_P6_64.\n\t(enable_string): Add \"ENB_P6_64\".\n\t(write_decls): Add ENB_P6_64 to bif_enable enum.", "tree": {"sha": "a41b34e699a28e8d69393c5f055169da4a97f0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a41b34e699a28e8d69393c5f055169da4a97f0f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2c534f6faa6a77f163bf22382250d2df423606e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c534f6faa6a77f163bf22382250d2df423606e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c534f6faa6a77f163bf22382250d2df423606e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c534f6faa6a77f163bf22382250d2df423606e/comments", "author": null, "committer": null, "parents": [{"sha": "e6a6569ce28958ae768acc1c2f6cc38643b55438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a6569ce28958ae768acc1c2f6cc38643b55438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a6569ce28958ae768acc1c2f6cc38643b55438"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "58dfce1ca37d07d0eac45c8e97937c1e740df63e", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=c2c534f6faa6a77f163bf22382250d2df423606e", "patch": "@@ -266,13 +266,16 @@\n \n ; Power6 builtins (ISA 2.05).\n [power6]\n-  const signed long __builtin_p6_cmpb (signed long, signed long);\n-    CMPB cmpbdi3 {}\n-\n   const signed int __builtin_p6_cmpb_32 (signed int, signed int);\n     CMPB_32 cmpbsi3 {}\n \n \n+; Power6 builtins requiring 64-bit GPRs (even with 32-bit addressing).\n+[power6-64]\n+  const signed long __builtin_p6_cmpb (signed long, signed long);\n+    CMPB cmpbdi3 {}\n+\n+\n ; AltiVec builtins.\n [altivec]\n   const vsc __builtin_altivec_abs_v16qi (vsc);"}, {"sha": "310bf13bbf1c15af46414b962191bff0fca692ec", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=c2c534f6faa6a77f163bf22382250d2df423606e", "patch": "@@ -11919,6 +11919,10 @@ rs6000_invalid_new_builtin (enum rs6000_gen_builtins fncode)\n     case ENB_P6:\n       error (\"%qs requires the %qs option\", name, \"-mcpu=power6\");\n       break;\n+    case ENB_P6_64:\n+      error (\"%qs requires the %qs option and either the %qs or %qs option\",\n+\t     name, \"-mcpu=power6\", \"-m64\", \"-mpowerpc64\");\n+      break;\n     case ENB_ALTIVEC:\n       error (\"%qs requires the %qs option\", name, \"-maltivec\");\n       break;\n@@ -13346,6 +13350,8 @@ rs6000_new_builtin_is_supported (enum rs6000_gen_builtins fncode)\n       return TARGET_POPCNTB;\n     case ENB_P6:\n       return TARGET_CMPB;\n+    case ENB_P6_64:\n+      return TARGET_CMPB && TARGET_POWERPC64;\n     case ENB_P7:\n       return TARGET_POPCNTD;\n     case ENB_P7_64:\n@@ -15695,29 +15701,26 @@ rs6000_expand_new_builtin (tree exp, rtx target,\n   bif_enable e = bifaddr->enable;\n \n   if (!(e == ENB_ALWAYS\n-\t|| (e == ENB_P5         && TARGET_POPCNTB)\n-\t|| (e == ENB_P6         && TARGET_CMPB)\n-\t|| (e == ENB_ALTIVEC    && TARGET_ALTIVEC)\n-\t|| (e == ENB_CELL       && TARGET_ALTIVEC\n-\t\t\t\t&& rs6000_cpu == PROCESSOR_CELL)\n-\t|| (e == ENB_VSX        && TARGET_VSX)\n-\t|| (e == ENB_P7         && TARGET_POPCNTD)\n-\t|| (e == ENB_P7_64      && TARGET_POPCNTD\n-\t\t\t\t&& TARGET_POWERPC64)\n-\t|| (e == ENB_P8         && TARGET_DIRECT_MOVE)\n-\t|| (e == ENB_P8V        && TARGET_P8_VECTOR)\n-\t|| (e == ENB_P9         && TARGET_MODULO)\n-\t|| (e == ENB_P9_64      && TARGET_MODULO\n-\t\t\t\t&& TARGET_POWERPC64)\n-\t|| (e == ENB_P9V        && TARGET_P9_VECTOR)\n+\t|| (e == ENB_P5 && TARGET_POPCNTB)\n+\t|| (e == ENB_P6 && TARGET_CMPB)\n+\t|| (e == ENB_P6_64 && TARGET_CMPB && TARGET_POWERPC64)\n+\t|| (e == ENB_ALTIVEC && TARGET_ALTIVEC)\n+\t|| (e == ENB_CELL && TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL)\n+\t|| (e == ENB_VSX && TARGET_VSX)\n+\t|| (e == ENB_P7 && TARGET_POPCNTD)\n+\t|| (e == ENB_P7_64 && TARGET_POPCNTD && TARGET_POWERPC64)\n+\t|| (e == ENB_P8 && TARGET_DIRECT_MOVE)\n+\t|| (e == ENB_P8V && TARGET_P8_VECTOR)\n+\t|| (e == ENB_P9 && TARGET_MODULO)\n+\t|| (e == ENB_P9_64 && TARGET_MODULO && TARGET_POWERPC64)\n+\t|| (e == ENB_P9V && TARGET_P9_VECTOR)\n \t|| (e == ENB_IEEE128_HW && TARGET_FLOAT128_HW)\n-\t|| (e == ENB_DFP        && TARGET_DFP)\n-\t|| (e == ENB_CRYPTO     && TARGET_CRYPTO)\n-\t|| (e == ENB_HTM        && TARGET_HTM)\n-\t|| (e == ENB_P10        && TARGET_POWER10)\n-\t|| (e == ENB_P10_64     && TARGET_POWER10\n-\t\t\t\t&& TARGET_POWERPC64)\n-\t|| (e == ENB_MMA        && TARGET_MMA)))\n+\t|| (e == ENB_DFP && TARGET_DFP)\n+\t|| (e == ENB_CRYPTO && TARGET_CRYPTO)\n+\t|| (e == ENB_HTM && TARGET_HTM)\n+\t|| (e == ENB_P10 && TARGET_POWER10)\n+\t|| (e == ENB_P10_64 && TARGET_POWER10 && TARGET_POWERPC64)\n+\t|| (e == ENB_MMA && TARGET_MMA)))\n     {\n       rs6000_invalid_new_builtin (fcode);\n       return expand_call (exp, target, ignore);\n@@ -16419,6 +16422,8 @@ rs6000_init_builtins (void)\n \t    continue;\n \t  if (e == ENB_P6 && !TARGET_CMPB)\n \t    continue;\n+\t  if (e == ENB_P6_64 && !(TARGET_CMPB && TARGET_POWERPC64))\n+\t    continue;\n \t  if (e == ENB_ALTIVEC && !TARGET_ALTIVEC)\n \t    continue;\n \t  if (e == ENB_VSX && !TARGET_VSX)"}, {"sha": "4ce83bd22901e2d7590b7ad698e6b7112e1c216f", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2c534f6faa6a77f163bf22382250d2df423606e/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=c2c534f6faa6a77f163bf22382250d2df423606e", "patch": "@@ -212,6 +212,7 @@ enum bif_stanza\n  BSTZ_ALWAYS,\n  BSTZ_P5,\n  BSTZ_P6,\n+ BSTZ_P6_64,\n  BSTZ_ALTIVEC,\n  BSTZ_CELL,\n  BSTZ_VSX,\n@@ -245,6 +246,7 @@ static stanza_entry stanza_map[NUMBIFSTANZAS] =\n     { \"always\",\t\tBSTZ_ALWAYS\t},\n     { \"power5\",\t\tBSTZ_P5\t\t},\n     { \"power6\",\t\tBSTZ_P6\t\t},\n+    { \"power6-64\",\tBSTZ_P6_64\t},\n     { \"altivec\",\tBSTZ_ALTIVEC\t},\n     { \"cell\",\t\tBSTZ_CELL\t},\n     { \"vsx\",\t\tBSTZ_VSX\t},\n@@ -269,6 +271,7 @@ static const char *enable_string[NUMBIFSTANZAS] =\n     \"ENB_ALWAYS\",\n     \"ENB_P5\",\n     \"ENB_P6\",\n+    \"ENB_P6_64\",\n     \"ENB_ALTIVEC\",\n     \"ENB_CELL\",\n     \"ENB_VSX\",\n@@ -2227,6 +2230,7 @@ write_decls (void)\n   fprintf (header_file, \"  ENB_ALWAYS,\\n\");\n   fprintf (header_file, \"  ENB_P5,\\n\");\n   fprintf (header_file, \"  ENB_P6,\\n\");\n+  fprintf (header_file, \"  ENB_P6_64,\\n\");\n   fprintf (header_file, \"  ENB_ALTIVEC,\\n\");\n   fprintf (header_file, \"  ENB_CELL,\\n\");\n   fprintf (header_file, \"  ENB_VSX,\\n\");"}]}