{"sha": "3138db588a46d445876c0358df55fa3995c6f221", "node_id": "C_kwDOANBUbNoAKDMxMzhkYjU4OGE0NmQ0NDU4NzZjMDM1OGRmNTVmYTM5OTVjNmYyMjE", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-11-16T01:25:14Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-11-23T03:05:50Z"}, "message": "LoongArch: Add prefetch instructions.\n\nEnable sw prefetching at -O3 and higher.\n\nCo-Authored-By: xujiahao <xujiahao@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* config/loongarch/constraints.md (ZD): New constraint.\n\t* config/loongarch/loongarch-def.c: Initial number of parallel prefetch.\n\t* config/loongarch/loongarch-tune.h (struct loongarch_cache):\n\tDefine number of parallel prefetch.\n\t* config/loongarch/loongarch.cc (loongarch_option_override_internal):\n\tSet up parameters to be used in prefetching algorithm.\n\t* config/loongarch/loongarch.md (prefetch): New template.", "tree": {"sha": "364ff091e86c314e8dc43f6029fbf615d711ba89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364ff091e86c314e8dc43f6029fbf615d711ba89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3138db588a46d445876c0358df55fa3995c6f221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3138db588a46d445876c0358df55fa3995c6f221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3138db588a46d445876c0358df55fa3995c6f221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3138db588a46d445876c0358df55fa3995c6f221/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04711f5189a72c2fcaeed520d65582704adca042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04711f5189a72c2fcaeed520d65582704adca042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04711f5189a72c2fcaeed520d65582704adca042"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "46f7f63ae31c8b3ffa4fc754213c95b0ac4b5e42", "filename": "gcc/config/loongarch/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fconstraints.md?ref=3138db588a46d445876c0358df55fa3995c6f221", "patch": "@@ -86,6 +86,10 @@\n ;;    \"ZB\"\n ;;      \"An address that is held in a general-purpose register.\n ;;      The offset is zero\"\n+;;    \"ZD\"\n+;;\t\"An address operand whose address is formed by a base register\n+;;\t and offset that is suitable for use in instructions with the same\n+;;\t addressing mode as @code{preld}.\"\n ;; \"<\" \"Matches a pre-dec or post-dec operand.\" (Global non-architectural)\n ;; \">\" \"Matches a pre-inc or post-inc operand.\" (Global non-architectural)\n \n@@ -190,3 +194,9 @@\n   The offset is zero\"\n   (and (match_code \"mem\")\n        (match_test \"REG_P (XEXP (op, 0))\")))\n+\n+(define_address_constraint \"ZD\"\n+  \"An address operand whose address is formed by a base register\n+   and offset that is suitable for use in instructions with the same\n+   addressing mode as @code{preld}.\"\n+   (match_test \"loongarch_12bit_offset_address_p (op, mode)\"))"}, {"sha": "80ab10a52a814a42f20b5b41707c22e2bb395872", "filename": "gcc/config/loongarch/loongarch-def.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-def.c?ref=3138db588a46d445876c0358df55fa3995c6f221", "patch": "@@ -62,11 +62,13 @@ loongarch_cpu_cache[N_TUNE_TYPES] = {\n       .l1d_line_size = 64,\n       .l1d_size = 64,\n       .l2d_size = 256,\n+      .simultaneous_prefetches = 4,\n   },\n   [CPU_LA464] = {\n       .l1d_line_size = 64,\n       .l1d_size = 64,\n       .l2d_size = 256,\n+      .simultaneous_prefetches = 4,\n   },\n };\n "}, {"sha": "8e3eb29472bcfc7c69bb786a22f51b6aa174565d", "filename": "gcc/config/loongarch/loongarch-tune.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch-tune.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch-tune.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-tune.h?ref=3138db588a46d445876c0358df55fa3995c6f221", "patch": "@@ -45,6 +45,7 @@ struct loongarch_cache {\n     int l1d_line_size;  /* bytes */\n     int l1d_size;       /* KiB */\n     int l2d_size;       /* kiB */\n+    int simultaneous_prefetches; /* number of parallel prefetch */\n };\n \n #endif /* LOONGARCH_TUNE_H */"}, {"sha": "8ee32c905730b74408873bc69735e1fa3aa0ea91", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=3138db588a46d445876c0358df55fa3995c6f221", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"opts.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -6100,6 +6101,33 @@ loongarch_option_override_internal (struct gcc_options *opts)\n   if (loongarch_branch_cost == 0)\n     loongarch_branch_cost = loongarch_cost->branch_cost;\n \n+  /* Set up parameters to be used in prefetching algorithm.  */\n+  int simultaneous_prefetches\n+    = loongarch_cpu_cache[LARCH_ACTUAL_TUNE].simultaneous_prefetches;\n+\n+  SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t       param_simultaneous_prefetches,\n+\t\t       simultaneous_prefetches);\n+\n+  SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t       param_l1_cache_line_size,\n+\t\t       loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l1d_line_size);\n+\n+  SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t       param_l1_cache_size,\n+\t\t       loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l1d_size);\n+\n+  SET_OPTION_IF_UNSET (opts, &global_options_set,\n+\t\t       param_l2_cache_size,\n+\t\t       loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l2d_size);\n+\n+\n+  /* Enable sw prefetching at -O3 and higher.  */\n+  if (opts->x_flag_prefetch_loop_arrays < 0\n+      && (opts->x_optimize >= 3 || opts->x_flag_profile_use)\n+      && !opts->x_optimize_size)\n+    opts->x_flag_prefetch_loop_arrays = 1;\n+\n   if (TARGET_DIRECT_EXTERN_ACCESS && flag_shlib)\n     error (\"%qs cannot be used for compiling a shared library\",\n \t   \"-mdirect-extern-access\");"}, {"sha": "2fda53819044a91d7fefc003db8fcc656a642da1", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3138db588a46d445876c0358df55fa3995c6f221/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=3138db588a46d445876c0358df55fa3995c6f221", "patch": "@@ -3282,6 +3282,20 @@\n ;;  ....................\n ;;\n \n+(define_insn \"prefetch\"\n+  [(prefetch (match_operand 0 \"address_operand\" \"ZD\")\n+\t     (match_operand 1 \"const_int_operand\" \"n\")\n+\t     (match_operand 2 \"const_int_operand\" \"n\"))]\n+  \"\"\n+{\n+  switch (INTVAL (operands[1]))\n+  {\n+    case 0: return \"preld\\t0,%a0\";\n+    case 1: return \"preld\\t8,%a0\";\n+    default: gcc_unreachable ();\n+  }\n+})\n+\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\""}]}