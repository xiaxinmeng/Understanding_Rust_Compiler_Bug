{"sha": "b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiYjI3MTBmM2UwZWViZGE4MmJkMzE1M2Q5ZmExYTMyYTk1MGU3YQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@lisa.cygnus.com", "date": "1997-11-01T19:50:18Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1997-11-01T19:50:18Z"}, "message": "lex.c (FILE_NAME_NONDIRECTORY): Delete macro.\n\n        * lex.c (FILE_NAME_NONDIRECTORY): Delete macro.\n        (file_name_nondirectory): New function, doing the same as the macro.\n        (set_typedecl_interface_info): Use it instead of the macro.\n        (check_newline): Likewise.\n        (handle_cp_pragma): Likewise.\n\n        * repo.c (get_base_filename): Cast result of rindex to char*.\n        (open_repo_file): Likewise.\n        * xref.c (open_xref_file): Likewise.\n        * error.c (dump_char): Make its arg int, not char.\n\nbring over the changes that went in yesterday to fix irix6 native cc\nbuild problems\n\nFrom-SVN: r16261", "tree": {"sha": "552c84754cf24106f6d18cba13ee2e7c7c0fa3c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/552c84754cf24106f6d18cba13ee2e7c7c0fa3c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/comments", "author": null, "committer": null, "parents": [{"sha": "5a0fa1de62991de26dd6819a0e67341cf23826c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0fa1de62991de26dd6819a0e67341cf23826c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0fa1de62991de26dd6819a0e67341cf23826c0"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "20ca7e1df91b26ed5b7e1520c04189f22755accf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "patch": "@@ -1,5 +1,16 @@\n 1997-11-01  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n+\t* lex.c (FILE_NAME_NONDIRECTORY): Delete macro.\n+\t(file_name_nondirectory): New function, doing the same as the macro.\n+\t(set_typedecl_interface_info): Use it instead of the macro.\n+\t(check_newline): Likewise.\n+\t(handle_cp_pragma): Likewise.\n+\n+\t* repo.c (get_base_filename): Cast result of rindex to char*.\n+\t(open_repo_file): Likewise.\n+\t* xref.c (open_xref_file): Likewise.\n+\t* error.c (dump_char): Make its arg int, not char.\n+\n \t* except.c (expand_builtin_throw) [!DWARF2_UNWIND_INFO]: Replace\n \tremaining use of saved_throw_type with a call to get_eh_type.\n "}, {"sha": "d6c6586b9ddccf7ad7fd8c16880e0fe35c8554b9", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "patch": "@@ -101,7 +101,7 @@ static void dump_function_name PROTO((tree));\n static void dump_expr_list PROTO((tree));\n static void dump_global_iord PROTO((tree));\n static void dump_readonly_or_volatile PROTO((tree, enum pad));\n-static void dump_char PROTO((char));\n+static void dump_char PROTO((int));\n static char *aggr_variety PROTO((tree));\n static tree ident_fndecl PROTO((tree));\n \n@@ -994,7 +994,7 @@ dump_function_name (t)\n \n static void\n dump_char (c)\n-     char c;\n+     int c;\n {\n   switch (c)\n     {"}, {"sha": "1f0e5e91a4e83c4ea8bdd10f08dcee217a6a995a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "patch": "@@ -93,10 +93,16 @@ static void reinit_parse_for_expr PROTO((struct obstack *));\n \n /* Given a file name X, return the nondirectory portion.\n    Keep in mind that X can be computed more than once.  */\n-#ifndef FILE_NAME_NONDIRECTORY\n-#define FILE_NAME_NONDIRECTORY(X)\t\t\\\n- (rindex (X, '/') != 0 ? rindex (X, '/') + 1 : X)\n-#endif\n+char *\n+file_name_nondirectory (x)\n+     char *x;\n+{\n+  char *tmp = (char *) rindex (x, '/');\n+  if (tmp)\n+    return (char *) (tmp + 1);\n+  else\n+    return x;\n+}\n \n /* This obstack is needed to hold text.  It is not safe to use\n    TOKEN_BUFFER because `check_newline' calls `yylex'.  */\n@@ -1133,7 +1139,7 @@ set_typedecl_interface_info (prev, vars)\n   tree type = TREE_TYPE (vars);\n \n   CLASSTYPE_INTERFACE_ONLY (type) = TREE_INT_CST_LOW (fileinfo)\n-    = interface_strcmp (FILE_NAME_NONDIRECTORY (DECL_SOURCE_FILE (vars)));\n+    = interface_strcmp (file_name_nondirectory (DECL_SOURCE_FILE (vars)));\n }\n \n static int\n@@ -1787,7 +1793,6 @@ snarf_defarg ()\n   int len;\n   char *buf;\n   tree arg;\n-  struct pending_inline *t;\n \n   reinit_parse_for_expr (&inline_text_obstack);\n   len = obstack_object_size (&inline_text_obstack);\n@@ -1873,8 +1878,6 @@ do_pending_defargs ()\n       tree defarg_fn = TREE_VALUE (defarg_fns);\n       if (defarg_parm == NULL_TREE)\n \t{\n-\t  tree p;\n-\n \t  push_nested_class (TREE_PURPOSE (defarg_fns), 1);\n \t  pushlevel (0);\n \t  if (is_member_template (defarg_fn))\n@@ -1883,6 +1886,7 @@ do_pending_defargs ()\n \t  if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n \t    {\n #if 0\n+\t      tree p;\n \t      for (p = DECL_ARGUMENTS (defarg_fn); p; p = TREE_CHAIN (p))\n \t\tpushdecl (copy_node (p));\n #endif\n@@ -2440,7 +2444,7 @@ check_newline ()\n \t    {\n \t      while (ifiles->next)\n \t\tifiles = ifiles->next;\n-\t      ifiles->filename = FILE_NAME_NONDIRECTORY (input_filename);\n+\t      ifiles->filename = file_name_nondirectory (input_filename);\n \t    }\n \n \t  main_input_filename = input_filename;\n@@ -4610,7 +4614,7 @@ handle_cp_pragma (pname)\n       tree fileinfo = IDENTIFIER_CLASS_VALUE (get_time_identifier (input_filename));\n       char *main_filename = input_filename;\n \n-      main_filename = FILE_NAME_NONDIRECTORY (main_filename);\n+      main_filename = file_name_nondirectory (main_filename);\n \n       token = real_yylex ();\n       \n@@ -4640,7 +4644,7 @@ handle_cp_pragma (pname)\n \t    main_input_filename = input_filename;\n \n #ifdef AUTO_IMPLEMENT\n-\t  filename = FILE_NAME_NONDIRECTORY (main_input_filename);\n+\t  filename = file_name_nondirectory (main_input_filename);\n \t  fi = get_time_identifier (filename);\n \t  fi = IDENTIFIER_CLASS_VALUE (fi);\n \t  TREE_INT_CST_LOW (fi) = 0;\n@@ -4665,7 +4669,7 @@ handle_cp_pragma (pname)\n       tree fileinfo = IDENTIFIER_CLASS_VALUE (get_time_identifier (input_filename));\n       char *main_filename = main_input_filename ? main_input_filename : input_filename;\n \n-      main_filename = FILE_NAME_NONDIRECTORY (main_filename);\n+      main_filename = file_name_nondirectory (main_filename);\n       token = real_yylex ();\n       if (token != END_OF_LINE)\n \t{"}, {"sha": "e029f90acea8d35aecab2a445a0f66fdc04d74d5", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "patch": "@@ -277,7 +277,7 @@ get_base_filename (filename)\n       return NULL;\n     }\n \n-  p = rindex (filename, '/');\n+  p = (char *) rindex (filename, '/');\n   if (p)\n     return p+1;\n   else\n@@ -294,10 +294,10 @@ open_repo_file (filename)\n   if (s == NULL)\n     return;\n \n-  p = rindex (s, '/');\n+  p = (char *) rindex (s, '/');\n   if (! p)\n     p = s;\n-  p = rindex (p, '.');\n+  p = (char *) rindex (p, '.');\n   if (! p)\n     p = s + strlen (s);\n "}, {"sha": "b579588a7ffeed9dbe8a1d8032acdab129f1c861", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=b2bb2710f3e0eebda82bd3153d9fa1a32a950e7a", "patch": "@@ -813,14 +813,14 @@ open_xref_file(file)\n #ifdef XREF_FILE_NAME\n   XREF_FILE_NAME (xref_name, file);\n #else\n-  s = rindex (file, '/');\n+  s = (char *) rindex (file, '/');\n   if (s == NULL)\n     sprintf (xref_name, \".%s.gxref\", file);\n   else\n     {\n       ++s;\n       strcpy (xref_name, file);\n-      t = rindex (xref_name, '/');\n+      t = (char *) rindex (xref_name, '/');\n       ++t;\n       *t++ = '.';\n       strcpy (t, s);"}]}