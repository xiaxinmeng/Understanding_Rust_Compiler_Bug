{"sha": "16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4NjVlYWFhODg5OGUwZWEwZTg3ZTg1MTZhMTdkNWY5NWFiNDcxYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-16T23:05:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-16T23:05:37Z"}, "message": "c-parse.in (if_stmt_locus): Remove.\n\n        * c-parse.in (if_stmt_locus): Remove.\n        (if_prefix): Increment stmt_count; pass it to c_finish_if_cond.\n        (select_or_iter_stmt): Move empty if warnings to c-typeck.c.\n        * c-typeck.c (if_elt): Sort by expected size.  Rename locus to\n        empty_locus.  Add stmt_count, saw_else.\n        (c_begin_if_stmt): Push if_stack here.\n        (c_finish_if_cond): Rename from c_expand_end_cond.  Record stmt_count.\n        (c_finish_then, c_finish_else): Record empty_locus.\n        (c_begin_else): Rename from c_expand_start_else.  Record stmt_count.\n        (c_finish_if_stmt): Rename from c_expand_end_cond.  Warn for empty\n        if or else body.\n        * c-tree.h: Update prototypes.\ntestsuite/\n        * gcc.dg/20001116-1.c: Move expected warning line.\n\nFrom-SVN: r83274", "tree": {"sha": "d2e24e13027b0a532fccf0e0efd510ee9f6110c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2e24e13027b0a532fccf0e0efd510ee9f6110c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/comments", "author": null, "committer": null, "parents": [{"sha": "17192884645f6c9e6135af2e691418734bdb6aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17192884645f6c9e6135af2e691418734bdb6aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17192884645f6c9e6135af2e691418734bdb6aac"}], "stats": {"total": 185, "additions": 96, "deletions": 89}, "files": [{"sha": "50bfa931162fc87367cd400ab95103b00a49c884", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -1,3 +1,18 @@\n+2004-06-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-parse.in (if_stmt_locus): Remove.\n+\t(if_prefix): Increment stmt_count; pass it to c_finish_if_cond.\n+\t(select_or_iter_stmt): Move empty if warnings to c-typeck.c.\n+\t* c-typeck.c (if_elt): Sort by expected size.  Rename locus to\n+\tempty_locus.  Add stmt_count, saw_else.\n+\t(c_begin_if_stmt): Push if_stack here.\n+\t(c_finish_if_cond): Rename from c_expand_end_cond.  Record stmt_count.\n+\t(c_finish_then, c_finish_else): Record empty_locus.\n+\t(c_begin_else): Rename from c_expand_start_else.  Record stmt_count.\n+\t(c_finish_if_stmt): Rename from c_expand_end_cond.  Warn for empty\n+\tif or else body.\n+\t* c-tree.h: Update prototypes.\n+\n 2004-06-16  Steven Bosscher  <stevenb@suse.de>\n \n \t* tree.h (PHI_CHAIN): New."}, {"sha": "8b8f6db86e398cbd6b3fe7087b0136685676c686", "filename": "gcc/c-parse.in", "status": "modified", "additions": 17, "deletions": 45, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -259,11 +259,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n static int stmt_count;\n static int compstmt_count;\n \n-/* Input location of the end of the body of last simple_if;\n-   used by the stmt-rule immediately after simple_if returns.  */\n-static location_t if_stmt_locus;\n-\n-\n /* List of types and structure classes of the current declaration.  */\n static GTY(()) tree current_declspecs;\n static GTY(()) tree prefix_attributes;\n@@ -2068,34 +2063,25 @@ compstmt: compstmt_start compstmt_nostart\n \t\t  $$ = NULL_TREE; }\n \t;\n \n-/* Value is number of statements counted as of the closeparen.  */\n-simple_if:\n-\t  if_prefix c99_block_lineno_labeled_stmt\n-                { c_finish_then ($2); }\n-/* Make sure c_expand_end_cond is run once\n-   for each call to c_expand_start_cond.\n-   Otherwise a crash is likely.  */\n-\t| if_prefix error\n-\t;\n-\n if_prefix:\n-\t  /* We must build the IF_STMT node before parsing its\n-\t     condition so that EXPR_LOCUS refers to the line\n-\t     containing the \"if\", and not the line containing\n-\t     the close-parenthesis.\n-\n-\t     c_begin_if_stmt returns the IF_STMT node, which\n-\t     we later pass to c_expand_start_cond to fill\n-\t     in the condition and other tidbits.  */\n+\t  /* We must build the if statement node before parsing its\n+\t     condition so that we get its location pointing to the\n+\t     line containing the \"if\", and not the line containing\n+\t     the close-parenthesis.  */\n           IF\n                 { $<ttype>$ = c_begin_if_stmt (); }\n             '(' expr ')'\n-\t\t{ c_expand_start_cond (lang_hooks.truthvalue_conversion ($4),\n-\t\t\t\t       compstmt_count,$<ttype>2);\n-\t\t  $<itype>$ = stmt_count;\n-\t\t  if_stmt_locus = $<location>-1; }\n+\t\t{ c_finish_if_cond ($4, compstmt_count, ++stmt_count); }\n         ;\n \n+simple_if:\n+\t  if_prefix c99_block_lineno_labeled_stmt\n+                { c_finish_then ($2); }\n+\t/* Make sure c_finish_if_stmt is run for each call to\n+\t   c_begin_if_stmt.  Otherwise a crash is likely.  */\n+\t| if_prefix error\n+\t;\n+\n /* This is a subroutine of stmt.\n    It is used twice, once for valid DO statements\n    and once for catching errors in parsing the end test.  */\n@@ -2172,27 +2158,13 @@ lineno_label:\n \n select_or_iter_stmt:\n \t  simple_if ELSE\n-\t\t{ c_expand_start_else ();\n-\t\t  $<itype>1 = stmt_count; }\n+\t\t{ c_begin_else (stmt_count); }\n \t  c99_block_lineno_labeled_stmt\n-                { c_finish_else ($4);\n-\t\t  c_expand_end_cond ();\n-\t\t  if (extra_warnings && stmt_count == $<itype>1)\n-\t\t    warning (\"empty body in an else-statement\"); }\n+                { c_finish_else ($4); c_finish_if_stmt (stmt_count); }\n \t| simple_if %prec IF\n-\t\t{ c_expand_end_cond ();\n-\t\t  /* This warning is here instead of in simple_if, because we\n-\t\t     do not want a warning if an empty if is followed by an\n-\t\t     else statement.  Increment stmt_count so we don't\n-\t\t     give a second error if this is a nested `if'.  */\n-\t\t  if (extra_warnings && stmt_count++ == $<itype>1)\n-\t\t    warning (\"%Hempty body in an if-statement\",\n-                             &if_stmt_locus); }\n-/* Make sure c_expand_end_cond is run once\n-   for each call to c_expand_start_cond.\n-   Otherwise a crash is likely.  */\n+\t\t{ c_finish_if_stmt (stmt_count); }\n \t| simple_if ELSE error\n-\t\t{ c_expand_end_cond (); }\n+\t\t{ c_finish_if_stmt (stmt_count + 1); }\n        /* We must build the WHILE_STMT node before parsing its\n \t  condition so that EXPR_LOCUS refers to the line\n \t  containing the \"while\", and not the line containing"}, {"sha": "031883e95fb6c7dbb1b9a0d16a2f572f604050d1", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -256,12 +256,12 @@ extern tree c_convert_parm_for_inlining (tree, tree, tree, int);\n extern int c_types_compatible_p (tree, tree);\n extern tree c_begin_compound_stmt (bool);\n extern tree c_end_compound_stmt (tree, bool);\n-extern void c_expand_start_cond (tree, int, tree);\n+extern tree c_begin_if_stmt (void);\n+extern void c_finish_if_cond (tree, int, int);\n extern void c_finish_then (tree);\n-extern void c_expand_start_else (void);\n+extern void c_begin_else (int);\n extern void c_finish_else (tree);\n-extern void c_expand_end_cond (void);\n-extern tree c_begin_if_stmt (void);\n+extern void c_finish_if_stmt (int);\n extern tree c_begin_while_stmt (void);\n extern void c_finish_while_stmt_cond (tree, tree);\n extern void c_finish_while_stmt (tree, tree);"}, {"sha": "7433c51a62ef63d6652ce48059b6b0bc325ca19b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -6467,10 +6467,12 @@ c_finish_case (tree body)\n    the enclosing if statement does not have an else branch.  */\n typedef struct\n {\n-  int compstmt_count;\n-  location_t locus;\n-  int needs_warning;\n   tree if_stmt;\n+  location_t empty_locus;\n+  int compstmt_count;\n+  int stmt_count;\n+  unsigned int needs_warning : 1;\n+  unsigned int saw_else : 1;\n } if_elt;\n \n static if_elt *if_stack;\n@@ -6488,22 +6490,8 @@ tree\n c_begin_if_stmt (void)\n {\n   tree r;\n-  r = add_stmt (build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE));\n-  return r;\n-}\n-\n-/* Record the start of an if-then, and record the start of it\n-   for ambiguous else detection.\n-\n-   COND is the condition for the if-then statement.\n+  if_elt *elt;\n \n-   IF_STMT is the statement node that has already been created for\n-   this if-then statement.  It is created before parsing the\n-   condition to keep line number information accurate.  */\n-\n-void\n-c_expand_start_cond (tree cond, int compstmt_count, tree if_stmt)\n-{\n   /* Make sure there is enough space on the stack.  */\n   if (if_stack_space == 0)\n     {\n@@ -6516,42 +6504,47 @@ c_expand_start_cond (tree cond, int compstmt_count, tree if_stmt)\n       if_stack = xrealloc (if_stack, if_stack_space * sizeof (if_elt));\n     }\n \n-  IF_COND (if_stmt) = cond;\n+  r = add_stmt (build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE));\n \n   /* Record this if statement.  */\n-  if_stack[if_stack_pointer].compstmt_count = compstmt_count;\n-  if_stack[if_stack_pointer].locus = input_location;\n-  if_stack[if_stack_pointer].needs_warning = 0;\n-  if_stack[if_stack_pointer].if_stmt = if_stmt;\n-  if_stack_pointer++;\n+  elt = &if_stack[if_stack_pointer++];\n+  memset (elt, 0, sizeof (*elt));\n+  elt->if_stmt = r;\n }\n \n-/* Called after the then-clause for an if-statement is processed.  */\n+/* Record the start of an if-then, and record the start of it\n+   for ambiguous else detection.\n+\n+   COND is the condition for the if-then statement.\n+\n+   IF_STMT is the statement node that has already been created for\n+   this if-then statement.  It is created before parsing the\n+   condition to keep line number information accurate.  */\n \n void\n-c_finish_then (tree then_stmt)\n+c_finish_if_cond (tree cond, int compstmt_count, int stmt_count)\n {\n-  tree if_stmt = if_stack[if_stack_pointer - 1].if_stmt;\n-  THEN_CLAUSE (if_stmt) = then_stmt;\n+  if_elt *elt = &if_stack[if_stack_pointer - 1];\n+  elt->compstmt_count = compstmt_count;\n+  elt->stmt_count = stmt_count;\n+  IF_COND (elt->if_stmt) = lang_hooks.truthvalue_conversion (cond);\n }\n \n-/* Record the end of an if-then.  Optionally warn if a nested\n-   if statement had an ambiguous else clause.  */\n+/* Called after the then-clause for an if-statement is processed.  */\n \n void\n-c_expand_end_cond (void)\n+c_finish_then (tree then_stmt)\n {\n-  if_stack_pointer--;\n-  if (if_stack[if_stack_pointer].needs_warning)\n-    warning (\"%Hsuggest explicit braces to avoid ambiguous `else'\",\n-\t     &if_stack[if_stack_pointer].locus);\n+  if_elt *elt = &if_stack[if_stack_pointer - 1];\n+  THEN_CLAUSE (elt->if_stmt) = then_stmt;\n+  elt->empty_locus = input_location;\n }\n \n /* Called between the then-clause and the else-clause\n    of an if-then-else.  */\n \n void\n-c_expand_start_else (void)\n+c_begin_else (int stmt_count)\n {\n   /* An ambiguous else warning must be generated for the enclosing if\n      statement, unless we see an else branch for that one, too.  */\n@@ -6566,15 +6559,38 @@ c_expand_start_else (void)\n      case.  Also don't warn for any if statements nested in this else.  */\n   if_stack[if_stack_pointer - 1].needs_warning = 0;\n   if_stack[if_stack_pointer - 1].compstmt_count--;\n+  if_stack[if_stack_pointer - 1].saw_else = 1;\n }\n \n /* Called after the else-clause for an if-statement is processed.  */\n \n void\n c_finish_else (tree else_stmt)\n {\n-  tree if_stmt = if_stack[if_stack_pointer - 1].if_stmt;\n-  ELSE_CLAUSE (if_stmt) = else_stmt;\n+  if_elt *elt = &if_stack[if_stack_pointer - 1];\n+  ELSE_CLAUSE (elt->if_stmt) = else_stmt;\n+  elt->empty_locus = input_location;\n+}\n+\n+/* Record the end of an if-then.  Optionally warn if a nested\n+   if statement had an ambiguous else clause.  */\n+\n+void\n+c_finish_if_stmt (int stmt_count)\n+{\n+  if_elt *elt = &if_stack[--if_stack_pointer];\n+\n+  if (elt->needs_warning)\n+    warning (\"%Hsuggest explicit braces to avoid ambiguous `else'\",\n+\t     EXPR_LOCUS (elt->if_stmt));\n+\n+  if (extra_warnings && stmt_count == elt->stmt_count)\n+    {\n+      if (elt->saw_else)\n+\twarning (\"%Hempty body in an else-statement\", &elt->empty_locus);\n+      else\n+\twarning (\"%Hempty body in an if-statement\", &elt->empty_locus);\n+    }\n }\n \f\n /* Begin a while statement.  Returns a newly created WHILE_STMT if"}, {"sha": "286cbb60575086f717cd8448d68830b03e3eed65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -1,3 +1,7 @@\n+2004-06-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/20001116-1.c: Move expected warning line.\n+\n 2004-06-15  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/i386-ssetype-1.c: Remove XFAIL."}, {"sha": "155cfe6396249d79c460e59e6214b2eeb6468d6d", "filename": "gcc/testsuite/gcc.dg/20001116-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16865eaaa8898e0ea0e87e8516a17d5f95ab471b/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001116-1.c?ref=16865eaaa8898e0ea0e87e8516a17d5f95ab471b", "patch": "@@ -6,6 +6,6 @@\n \n void foo (int x)\n {\n-  if (x)\t/* { dg-warning \"empty body in an if-statement\" } */\n-    ;\n+  if (x)\n+    ;\t/* { dg-warning \"empty body in an if-statement\" } */\n }"}]}