{"sha": "b85ba3c4b37ea60a81d4def8406caa868a881aa5", "node_id": "C_kwDOANBUbNoAKGI4NWJhM2M0YjM3ZWE2MGE4MWQ0ZGVmODQwNmNhYTg2OGE4ODFhYTU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:33:49Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vluxei64 C++ API intrinsic testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vluxei64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei64_tumu-3.C: New test.", "tree": {"sha": "c9a3d6053566b4b74208c77e125118963c8587ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9a3d6053566b4b74208c77e125118963c8587ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b85ba3c4b37ea60a81d4def8406caa868a881aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85ba3c4b37ea60a81d4def8406caa868a881aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85ba3c4b37ea60a81d4def8406caa868a881aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85ba3c4b37ea60a81d4def8406caa868a881aa5/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c019f34e1f55cb2ce32cb79369251413c4ab7f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c019f34e1f55cb2ce32cb79369251413c4ab7f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c019f34e1f55cb2ce32cb79369251413c4ab7f86"}], "stats": {"total": 4698, "additions": 4698, "deletions": 0}, "files": [{"sha": "a9715c02b02fb664a507bd1367de0bee2e5b4762", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64-1.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-1.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ad783a350df64bf28cf74ca47d9a7eb2b46d10ee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64-2.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-2.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7fd7963653113f9138c2d3b47f8f12e9a1e53466", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64-3.C", "status": "added", "additions": 518, "deletions": 0, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64-3.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,518 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei64(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7bf8ee8340e20667e49acc74f25e58975d03d276", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_mu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-1.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "6cd43ad19bf03470e278ca4603c1b33d47832f8f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_mu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-2.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "3f907d7297ed5f580f9b18f9a3ca576765038215", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_mu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_mu-3.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4a6573706af580d789ce18b2acf50970f9c6817e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-1.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "175b5723a1ae8bafd74d956fd3d0b74aa8c01cb6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-2.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "a8d69df822ed91444abb26dca4e5f639e9fa9615", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tu-3.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "652a9c746c226a2e8fd07690b4207b501682b62a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tum-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-1.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "3ad56e80754ff8bf0be52afd72c8451e952ae302", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tum-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-2.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8ccbb171043180eceb4c8b7d31a48e1c28588e45", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tum-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tum-3.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "62d11068694246074ba3fbdc3bc60ca0c10f4704", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tumu-1.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-1.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0b6af9758eb6bf7b1392a552a8e5967fd8ec9d43", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tumu-2.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-2.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a7226fb76d91b503ff7fb6ca1550aaefd65dfa6e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei64_tumu-3.C", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85ba3c4b37ea60a81d4def8406caa868a881aa5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_tumu-3.C?ref=b85ba3c4b37ea60a81d4def8406caa868a881aa5", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}