{"sha": "027e30414492d50feb2854aff38227b14300dc4b", "node_id": "C_kwDOANBUbNoAKDAyN2UzMDQxNDQ5MmQ1MGZlYjI4NTRhZmYzODIyN2IxNDMwMGRjNGI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-07T14:00:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-07T14:00:20Z"}, "message": "Fix up duplicated duplicated words in comments\n\nLike in r10-7215-g700d4cb08c88aec37c13e21e63dd61fd698baabc 2 years ago,\nI've run\ngrep -v 'long long\\|optab optab\\|template template\\|double double' *.{[chS],cc} */*.{[chS],cc} *.def config/*/* 2>/dev/null | grep ' \\([a-zA-Z]\\+\\) \\1 '\nand for the cases that looked clearly wrong changed them, mostly by removing\none of the duplicated words but in some cases with other changes.\n\n2022-03-07  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree-ssa-propagate.cc: Fix up duplicated word issue in a comment.\n\t* config/riscv/riscv.cc: Likewise.\n\t* config/darwin.h: Likewise.\n\t* config/i386/i386.cc: Likewise.\n\t* config/aarch64/thunderx3t110.md: Likewise.\n\t* config/aarch64/fractional-cost.h: Likewise.\n\t* config/vax/vax.cc: Likewise.\n\t* config/rs6000/pcrel-opt.md: Likewise.\n\t* config/rs6000/predicates.md: Likewise.\n\t* ctfc.h: Likewise.\n\t* tree-ssa-uninit.cc: Likewise.\n\t* value-relation.h: Likewise.\n\t* gimple-range-gori.cc: Likewise.\n\t* ipa-polymorphic-call.cc: Likewise.\n\t* pointer-query.cc: Likewise.\n\t* ipa-sra.cc: Likewise.\n\t* internal-fn.cc: Likewise.\n\t* varasm.cc: Likewise.\n\t* gimple-ssa-warn-access.cc: Likewise.\ngcc/analyzer/\n\t* store.cc: Fix up duplicated word issue in a comment.\n\t* analyzer.cc: Likewise.\n\t* engine.cc: Likewise.\n\t* sm-taint.cc: Likewise.\ngcc/c-family/\n\t* c-attribs.cc: Fix up duplicated word issue in a comment.\ngcc/cp/\n\t* cvt.cc: Fix up duplicated word issue in a comment.\n\t* pt.cc: Likewise.\n\t* module.cc: Likewise.\n\t* coroutines.cc: Likewise.\ngcc/fortran/\n\t* trans-expr.cc: Fix up duplicated word issue in a comment.\n\t* gfortran.h: Likewise.\n\t* scanner.cc: Likewise.\ngcc/jit/\n\t* libgccjit.h: Fix up duplicated word issue in a comment.", "tree": {"sha": "e71c4d30600403c7933a9ead48d9e3f3a4b71915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71c4d30600403c7933a9ead48d9e3f3a4b71915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/027e30414492d50feb2854aff38227b14300dc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027e30414492d50feb2854aff38227b14300dc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027e30414492d50feb2854aff38227b14300dc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027e30414492d50feb2854aff38227b14300dc4b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d8198e7df616ea80cb648a2c831e2c21f4319f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d8198e7df616ea80cb648a2c831e2c21f4319f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d8198e7df616ea80cb648a2c831e2c21f4319f"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "2c63a539fcbb4b540f7ea2d23f18fd162d94b04c", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -109,7 +109,7 @@ get_diagnostic_tree_for_gassign_1 (const gassign *assign_stmt,\n }\n \n /*  Subroutine of fixup_tree_for_diagnostic_1, called on SSA names.\n-    Attempt to reconstruct a a tree expression for SSA_NAME\n+    Attempt to reconstruct a tree expression for SSA_NAME\n     based on its def-stmt.\n     SSA_NAME must be non-NULL.\n     VISITED must be non-NULL; it is used to ensure termination."}, {"sha": "94c13d4e1cf12b90b749f8bb4ca1ac3d3439f4ef", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -3918,7 +3918,7 @@ exploded_graph::process_node (exploded_node *node)\n                         analysis of the current function.\n \n                         The analyzer handles calls to such functions while\n-                        analysing the stmt itself, so the the function call\n+                        analysing the stmt itself, so the function call\n                         must have been handled by the anlyzer till now.  */\n                      exploded_node *next\n                        = get_or_create_node (next_point,"}, {"sha": "c7b28329fca1e1dcefa20c6f287ba1ff28862d61", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -891,7 +891,7 @@ taint_state_machine::check_for_tainted_size_arg (sm_context *sm_ctxt,\n     return;\n \n   /* Initialize a map of attribute access specifications for arguments\n-     to the function function call.  */\n+     to the function call.  */\n   rdwr_map rdwr_idx;\n   init_attr_rdwr_indices (&rdwr_idx, TYPE_ATTRIBUTES (fntype));\n "}, {"sha": "58df7aab8a214103ea1453b8d84b66975e6096e1", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1204,7 +1204,7 @@ binding_cluster::validate () const\n /* Return a new json::object of the form\n    {\"escaped\": true/false,\n     \"touched\": true/false,\n-    \"map\" : object for the the binding_map.  */\n+    \"map\" : object for the binding_map.  */\n \n json::object *\n binding_cluster::to_json () const\n@@ -1892,7 +1892,7 @@ binding_cluster::redundant_p () const\n \t  && !m_touched);\n }\n \n-/* Add PV to OUT_PVS, casting it to TYPE if if is not already of that type.  */\n+/* Add PV to OUT_PVS, casting it to TYPE if it is not already of that type.  */\n \n static void\n append_pathvar_with_type (path_var pv,"}, {"sha": "c885d888a06e1c53201b8753f711424d36c3cf68", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -3421,7 +3421,7 @@ handle_malloc_attribute (tree *node, tree name, tree args, int flags,\n \t it with this one.  Ideally, the attribute would reference\n \t the DECL of the deallocator but since that changes for each\n \t redeclaration, use DECL_NAME instead.  (DECL_ASSEMBLER_NAME\n-\t need not be set set this point and setting it here is too early.  */\n+\t need not be set at this point and setting it here is too early.  */\n       tree attrs = build_tree_list (NULL_TREE, DECL_NAME (fndecl));\n       attrs = tree_cons (get_identifier (\"*dealloc\"), attrs, at_noinline);\n       decl_attributes (&dealloc, attrs, 0);\n@@ -5142,7 +5142,7 @@ handle_access_attribute (tree node[3], tree name, tree args, int flags,\n      value: \"+^2[*],$0$1^3[*],$1$1\"\n      list:  < <0, x> <1, y> >\n \n-   where the list has a single value which itself is is a list each\n+   where the list has a single value which itself is a list, each\n    of whose <node>s corresponds to one VLA bound for each of the two\n    parameters.  */\n "}, {"sha": "7e47cbf0503d913f274e3aea398288da27cc7d3f", "filename": "gcc/config/aarch64/fractional-cost.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Faarch64%2Ffractional-cost.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Faarch64%2Ffractional-cost.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ffractional-cost.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -61,7 +61,7 @@ class fractional_cost\n   constexpr fractional_cost (uint64_t value, raw) : m_value (value) {}\n \n   // A multiple of [1, 16] * 16.  This ensures that 1/N is representable\n-  // for every every possible SVE element count N, or for any \"X per cycle\"\n+  // for every possible SVE element count N, or for any \"X per cycle\"\n   // value N in the range [1, 16].\n   static const uint32_t SCALE = 11531520;\n "}, {"sha": "02ee3c22c17a484314b6757ed0136e2bf9cbffd6", "filename": "gcc/config/aarch64/thunderx3t110.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -138,7 +138,7 @@\n \t\t\tlogic_shift_imm,logics_shift_imm\"))\n   \"thunderx3t110_i01\")\n \n-; we are going for the the optimistic answer (13)\n+; we are going for the optimistic answer (13)\n ; for now, the worst case is 23\n (define_insn_reservation \"thunderx3t110_div\" 13\n   (and (eq_attr \"tune\" \"thunderx3t110\")"}, {"sha": "3682bd2b2c5303dd769b22644579d1138e42b152", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -340,7 +340,7 @@ extern GTY(()) int darwin_ms_struct;\n \" %:version-compare(>= 10.6 mmacosx-version-min= -no_compact_unwind) \"\n \n /* In Darwin linker specs we can put -lcrt0.o and ld will search the library\n-   path for crt0.o or -lcrtx.a and it will search for for libcrtx.a.  As for\n+   path for crt0.o or -lcrtx.a and it will search for libcrtx.a.  As for\n    other ports, we can also put xxx.{o,a}%s and get the appropriate complete\n    startfile absolute directory.  This latter point is important when we want\n    to override ld's rule of .dylib being found ahead of .a and the user wants"}, {"sha": "efa947f97954e9607891deba29fc56e056917fa2", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -20334,7 +20334,7 @@ ix86_division_cost (const struct processor_costs *cost,\n \n /* Return cost of shift in MODE.\n    If CONSTANT_OP1 is true, the op1 value is known and set in OP1_VAL.\n-   AND_IN_OP1 specify in op1 is result of and and SHIFT_AND_TRUNCATE\n+   AND_IN_OP1 specify in op1 is result of AND and SHIFT_AND_TRUNCATE\n    if op1 is a result of subreg.\n \n    SKIP_OP0/1 is set to true if cost of OP0/1 should be ignored.  */"}, {"sha": "7da9d377120150a02c2999c94d6b6c4f62aa2722", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -4984,7 +4984,7 @@ riscv_option_override (void)\n     target_flags |= MASK_FDIV;\n \n   /* Handle -mtune, use -mcpu if -mtune is not given, and use default -mtune\n-     if -mtune and -mcpu both not not given.  */\n+     if -mtune and -mcpu both not given.  */\n   cpu = riscv_parse_tune (riscv_tune_string ? riscv_tune_string :\n \t\t\t  (riscv_cpu_string ? riscv_cpu_string :\n \t\t\t   RISCV_TUNE_STRING_DEFAULT));"}, {"sha": "bd0533096da12df1465b8565d2bd744be78aa2e1", "filename": "gcc/config/rs6000/pcrel-opt.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Frs6000%2Fpcrel-opt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Frs6000%2Fpcrel-opt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpcrel-opt.md?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -60,7 +60,7 @@\n ;; that both registers may be set in the first insn, and will be used in the\n ;; second insn.\n ;;\n-;; Since we use UNSPEC's and link both the the register holding the external\n+;; Since we use UNSPEC's and link both the register holding the external\n ;; address and the value being loaded, it should prevent other passes from\n ;; modifying it.\n ;;"}, {"sha": "566b85bfb89cd30b2d6dfa9819cf05955042cb1a", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -496,7 +496,7 @@\n })\n \n ;; Return 1 if op is a constant integer valid for D field\n-;; or non-special register register.\n+;; or non-special register.\n (define_predicate \"reg_or_short_operand\"\n   (if_then_else (match_code \"const_int\")\n     (match_operand 0 \"short_cint_operand\")\n@@ -1109,7 +1109,7 @@\n \t\t    && (DEFAULT_ABI != ABI_AIX || SYMBOL_REF_FUNCTION_P (op))\")))\n \n ;; Return 1 if op is an operand that can be loaded via the GOT.\n-;; or non-special register register field no cr0\n+;; or non-special register field no cr0\n (define_predicate \"got_operand\"\n   (match_code \"symbol_ref,const,label_ref\"))\n "}, {"sha": "f44e23d1796a2e2261669392cb10c23f5612f7b5", "filename": "gcc/config/vax/vax.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fvax%2Fvax.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fconfig%2Fvax%2Fvax.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1124,7 +1124,7 @@ vax_select_cc_mode (enum rtx_code op,\n \n /* Return the narrowest CC mode that spans both modes offered.  If they\n    intersect, this will be the wider of the two, and if they do not then\n-   find find one that is a superset of both (i.e. CCNZmode for a pair\n+   find one that is a superset of both (i.e. CCNZmode for a pair\n    consisting of CCNmode and CCZmode).  A wider CC writer will satisfy\n    a narrower CC reader, e.g. a comparison operator that uses CCZmode\n    can use a CCNZmode output of a previous instruction.  */"}, {"sha": "23dc28271a493973b730f9d7a1d22f17270ae301", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1824,7 +1824,7 @@ expand_one_await_expression (tree *stmt, tree *await_expr, void *d)\n       cp_walk_tree (await_init, co_await_find_in_subtree, &aw_expr_ptr, NULL))\n     expand_one_await_expression (await_init, aw_expr_ptr, d);\n \n-  /* Expand any more await expressions in the the original statement.  */\n+  /* Expand any more await expressions in the original statement.  */\n   if (cp_walk_tree (revised, co_await_find_in_subtree, &aw_expr_ptr, NULL))\n     expand_one_await_expression (revised, aw_expr_ptr, d);\n "}, {"sha": "30a98061350ccf400f8e8f8fe7a776fcc77a81f9", "filename": "gcc/cp/cvt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fcvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fcvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -2092,7 +2092,7 @@ can_convert_tx_safety (tree to, tree from)\n }\n \n /* Return true iff FROM can convert to TO by dropping noexcept.\n-   This is just a subroutine of of fnptr_conv_p.  */\n+   This is just a subroutine of fnptr_conv_p.  */\n \n static bool\n noexcept_conv_p (tree to, tree from)"}, {"sha": "cebf9c35c1dea3de9ae17833ebf59e6f612e8af3", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -4617,7 +4617,7 @@ create_dirs (char *path)\n       }\n }\n \n-/* Given a CLASSTYPE_DECL_LIST VALUE get the the template friend decl,\n+/* Given a CLASSTYPE_DECL_LIST VALUE get the template friend decl,\n    if that's what this is.  */\n \n static tree"}, {"sha": "8b5faeed8ea659f5b80a475b520da434a8778171", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -30049,7 +30049,7 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \n    OUTER_TARGS is used during template argument deduction (context == adc_unify)\n    to properly substitute the result.  It's also used in the adc_unify and\n-   adc_requirement contexts to communicate the the necessary template arguments\n+   adc_requirement contexts to communicate the necessary template arguments\n    to satisfaction.  OUTER_TARGS is ignored in other contexts.\n \n    For partial-concept-ids, extra args may be appended to the list of deduced"}, {"sha": "18c93c802a067fc1d9e2ca2f9f7dabb185bb907f", "filename": "gcc/ctfc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fctfc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fctfc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -144,7 +144,7 @@ typedef struct GTY ((chain_next (\"%h.dmd_next\"))) ctf_dmdef\n typedef struct GTY (()) ctf_func_arg\n {\n   ctf_id_t farg_type;\t\t  /* Type identifier of the argument.  */\n-  const char * farg_name;\t  /* Name of the the argument.  */\n+  const char * farg_name;\t  /* Name of the argument.  */\n   uint32_t farg_name_offset;\t  /* Offset of the name in str table.  */\n   struct ctf_func_arg * farg_next;/* A list node.  */\n } ctf_func_arg_t;"}, {"sha": "7bf1d5a045263bc2774f87599e4bef5ecbdc2cfa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -2137,7 +2137,7 @@ typedef struct gfc_namespace\n   /* Linked list of !$omp declare variant constructs.  */\n   struct gfc_omp_declare_variant *omp_declare_variant;\n \n-  /* A hash set for the the gfc expressions that have already\n+  /* A hash set for the gfc expressions that have already\n      been finalized in this namespace.  */\n \n   gfc_was_finalized *was_finalized;"}, {"sha": "b52282b687b6bf93d430c00becc2ce5f9d8e7d60", "filename": "gcc/fortran/scanner.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Fscanner.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Fscanner.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1915,7 +1915,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \n       /* For truncation and tab warnings, set seen_comment to false if one has\n \t either an OpenMP or OpenACC directive - or a !GCC$ attribute.  If\n-\t OpenMP is enabled, use '!$' as as conditional compilation sentinel\n+\t OpenMP is enabled, use '!$' as conditional compilation sentinel\n \t and OpenMP directive ('!$omp').  */\n       if (seen_comment && first_comment && flag_openmp && comment_ix + 1 == i\n \t  && c == '$')"}, {"sha": "2549d32e5309849322477dff5cbad242daabf562", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -5678,7 +5678,7 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n      Note that allocatable implies 'len=:'.  */\n   if (e->ts.type != BT_ASSUMED && e->ts.type != BT_CHARACTER )\n     {\n-      /* Length is known at compile time; use use 'block' for it.  */\n+      /* Length is known at compile time; use 'block' for it.  */\n       tmp = size_in_bytes (gfc_typenode_for_spec (&e->ts));\n       tmp2 = gfc_get_cfi_desc_elem_len (cfi);\n       gfc_add_modify (&block, tmp2, fold_convert (TREE_TYPE (tmp2), tmp));"}, {"sha": "772ccb88d5518445635263c08ef55f7a68b15b8c", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -890,7 +890,7 @@ gori_compute::logical_combine (irange &r, enum tree_code code,\n       case BIT_AND_EXPR:\n         if (!lhs.zero_p ())\n \t  {\n-\t    // The TRUE side is the intersection of the the 2 true ranges.\n+\t    // The TRUE side is the intersection of the 2 true ranges.\n \t    r = op1_true;\n \t    r.intersect (op2_true);\n \t  }"}, {"sha": "75297ed7c9e6813f239df1e72d03990997099851", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -2642,7 +2642,7 @@ pass_waccess::check_strncmp (gcall *stmt)\n      a bound that's larger than the size of either array makes no sense\n      and is likely a bug.  When the length of neither of the two strings\n      is known but the sizes of both of the arrays they are stored in is,\n-     issue a warning if the bound is larger than than the size of\n+     issue a warning if the bound is larger than the size of\n      the larger of the two arrays.  */\n \n   c_strlen_data lendata1{ }, lendata2{ };"}, {"sha": "8b1733e20c4455e4e8c383c92fe859f4256cae69", "filename": "gcc/internal-fn.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Finternal-fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Finternal-fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1500,7 +1500,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t\t 0 and there will be no overflow, if the first argument is\n \t\t negative and the second argument positive, the result when\n \t\t treated as signed will be negative (minimum -0x7f80 or\n-\t\t -0x7f..f80..0) there there will be always overflow.  So, do\n+\t\t -0x7f..f80..0) there will be always overflow.  So, do\n \t\t res = (U) (s1 * u2)\n \t\t ovf = (S) res < 0  */\n \t      struct separate_ops ops;"}, {"sha": "22f28e990b220cb6e93240fb4c477d562d11ce35", "filename": "gcc/ipa-polymorphic-call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fipa-polymorphic-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fipa-polymorphic-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -1598,7 +1598,7 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n   if (!maybe_in_construction && !maybe_derived_type)\n     return false;\n \n-  /* If we are in fact not looking at any object object or the instance is\n+  /* If we are in fact not looking at any object or the instance is\n      some placement new into a random load, give up straight away.  */\n   if (TREE_CODE (instance) == MEM_REF)\n     return false;"}, {"sha": "261a720858f03d0e546b97774909578b89743d0a", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -2874,7 +2874,7 @@ struct caller_issues\n   bool thunk;\n   /* Call site with no available information.  */\n   bool unknown_callsite;\n-  /* Call from outside the the candidate's comdat group.  */\n+  /* Call from outside the candidate's comdat group.  */\n   bool call_from_outside_comdat;\n   /* There is a bit-aligned load into one of non-gimple-typed arguments. */\n   bool bit_aligned_aggregate_argument;"}, {"sha": "95d60f845db5f5a6fce1b23815bf1760d58c86b0", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -842,7 +842,7 @@ gcc_jit_context_new_global (gcc_jit_context *ctxt,\n    set to the corresponding value in `values`.  `fields` and `values`\n    are paired by index.\n \n-   Each value has to have have the same unqualified type as the field\n+   Each value has to have the same unqualified type as the field\n    it is applied to.\n \n    A NULL value element  in `values` is a shorthand for zero initialization\n@@ -892,7 +892,7 @@ gcc_jit_context_new_struct_constructor (gcc_jit_context *ctxt,\n    `value` specifies what value to set the corresponding field to.\n    If `value` is NULL, zero initialization will be used.\n \n-   Each value has to have have the same unqualified type as the field\n+   Each value has to have the same unqualified type as the field\n    it is applied to.\n \n    `field` need to be the same objects that were used"}, {"sha": "1c3b73292727fbae38af30feaf93fb56e44e762f", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -959,7 +959,7 @@ void access_ref::add_offset (const offset_int &min, const offset_int &max)\n \t (which may be greater than MAX_OBJECT_SIZE).\n \t The lower bound is either the sum of the current offset and\n \t MIN when abs(MAX) is greater than the former, or zero otherwise.\n-\t Zero because then then inverted range includes the negative of\n+\t Zero because then the inverted range includes the negative of\n \t the lower bound.  */\n       offset_int maxoff = wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node));\n       offrng[1] = maxoff;"}, {"sha": "7813e511379c3755f81ef76fffebb59cf778e7fd", "filename": "gcc/tree-ssa-propagate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ftree-ssa-propagate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ftree-ssa-propagate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -697,7 +697,7 @@ class substitute_and_fold_dom_walker : public dom_walker\n \t\t\t\t gimple_stmt_iterator new_gsi);\n };\n \n-/* Call post_new_stmt for each each new statement that has been added\n+/* Call post_new_stmt for each new statement that has been added\n    to the current BB.  OLD_GSI is the statement iterator before the BB\n    changes ocurred.  NEW_GSI is the iterator which may contain new\n    statements.  */"}, {"sha": "b48fcf1a8ba71a15cd893281678df9fb1359cfe7", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -403,7 +403,7 @@ maybe_warn_read_write_only (tree fndecl, gimple *stmt, tree arg, tree ptr)\n     return;\n \n   /* Initialize a map of attribute access specifications for arguments\n-     to the function function call.  */\n+     to the function call.  */\n   rdwr_map rdwr_idx;\n   init_attr_rdwr_indices (&rdwr_idx, TYPE_ATTRIBUTES (fntype));\n \n@@ -514,7 +514,7 @@ check_defs (ao_ref *ref, tree vdef, void *data_)\n   return true;\n }\n \n-/* Counters and limits controlling the the depth of analysis and\n+/* Counters and limits controlling the depth of analysis and\n    strictness of the warning.  */\n struct wlimits\n {\n@@ -785,7 +785,7 @@ maybe_warn_pass_by_reference (gcall *stmt, wlimits &wlims)\n   const bool save_always_executed = wlims.always_executed;\n \n   /* Initialize a map of attribute access specifications for arguments\n-     to the function function call.  */\n+     to the function call.  */\n   rdwr_map rdwr_idx;\n   init_attr_rdwr_indices (&rdwr_idx, TYPE_ATTRIBUTES (fntype));\n \n@@ -979,7 +979,7 @@ warn_uninit_phi_uses (basic_block bb)\n static void\n warn_uninitialized_vars (bool wmaybe_uninit)\n {\n-  /* Counters and limits controlling the the depth of the warning.  */\n+  /* Counters and limits controlling the depth of the warning.  */\n   wlimits wlims = { };\n   wlims.wmaybe_uninit = wmaybe_uninit;\n "}, {"sha": "36e4cf9e09eb6a5a7e6f0f928062dc3186b59fa3", "filename": "gcc/value-relation.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n // relation comes back EQ_EXPR, it is also possible to query the set of\n // equivlaencies.  These are basically bitmaps over ssa_names.\n //\n-// relations are maintained via the dominace trees, are are optimized assuming\n+// Relations are maintained via the dominace trees and are optimized assuming\n // they are registered in dominance order.   When a new relation is added, it\n // is intersected with whatever existing relation exists in the dominance tree\n // and registered at the specified block."}, {"sha": "c41f17d64f759f02781ab7d0714c33c9f33be3b1", "filename": "gcc/varasm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027e30414492d50feb2854aff38227b14300dc4b/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=027e30414492d50feb2854aff38227b14300dc4b", "patch": "@@ -283,7 +283,7 @@ get_noswitch_section (unsigned int flags, noswitch_section_callback callback)\n    a new section with the given fields if no such structure exists.\n    When NOT_EXISTING, then fail if the section already exists.  Return\n    the existing section if the SECTION_RETAIN bit doesn't match.  Set\n-   the SECTION_WRITE | SECTION_RELRO bits on the the existing section\n+   the SECTION_WRITE | SECTION_RELRO bits on the existing section\n    if one of the section flags is SECTION_WRITE | SECTION_RELRO and the\n    other has none of these flags in named sections and either the section\n    hasn't been declared yet or has been declared as writable.  */"}]}