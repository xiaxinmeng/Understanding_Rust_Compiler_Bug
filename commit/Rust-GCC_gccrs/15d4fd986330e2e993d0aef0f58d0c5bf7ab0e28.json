{"sha": "15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkNGZkOTg2MzMwZTJlOTkzZDBhZWYwZjU4ZDBjNWJmN2FiMGUyOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-04-14T20:16:58Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-04-14T20:16:58Z"}, "message": "fold-const.c (fold): Transform (c1 - x) cmp c2...\n\n\n\t* fold-const.c (fold):  Transform (c1 - x) cmp c2, where cmp is a\n\tcomparison operation and c1/c2 are floating point constants into\n\tx swap(cmp) (c1 - c2).\n\n\t* gcc.dg/20030414-2.c: New test case.\n\nFrom-SVN: r65584", "tree": {"sha": "a3d2d13cfa04d1656aee06fd96e6f08bdbc67e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d2d13cfa04d1656aee06fd96e6f08bdbc67e20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/comments", "author": null, "committer": null, "parents": [{"sha": "22fc0e9ffec42f27aff7062dad4a9759c5edb23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc0e9ffec42f27aff7062dad4a9759c5edb23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fc0e9ffec42f27aff7062dad4a9759c5edb23c"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "bf118416c75789a85d1e32432477f0688fee0007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "patch": "@@ -1,3 +1,9 @@\n+2003-04-14  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold):  Transform (c1 - x) cmp c2, where cmp is a\n+\tcomparison operation and c1/c2 are floating point constants into\n+\tx swap(cmp) (c1 - c2).\n+\n 2003-04-14  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* genautomata.c (output_translate_vect): Fix a typo in loop\n@@ -1376,7 +1382,7 @@ Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/9974\n-\t* gcse.c (reg_killed_on_egde): New function to test whether the\n+\t* gcse.c (reg_killed_on_edge): New function to test whether the\n \tgiven reg is overwritten by any instruction queued on an edge.\n \t(bypass_block): Ignore substitutions killed on incoming edges.\n \tDon't bypass outgoing edges that have queued instructions."}, {"sha": "95812a2e13c302079d2c3ef0625d69ea09288260", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "patch": "@@ -6484,6 +6484,19 @@ fold (expr)\n \t      && ! TREE_CONSTANT_OVERFLOW (tem))\n \t    return fold (build (code, type, TREE_OPERAND (arg0, 0), tem));\n \n+\t  /* Likewise, we can simplify a comparison of a real constant with\n+\t     a MINUS_EXPR whose first operand is also a real constant, i.e.\n+\t     (c1 - x) < c2 becomes x > c1-c2.  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && TREE_CODE (arg1) == REAL_CST\n+\t      && TREE_CODE (arg0) == MINUS_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (arg0, 0)) == REAL_CST\n+\t      && 0 != (tem = const_binop (MINUS_EXPR, TREE_OPERAND (arg0, 0),\n+\t\t\t\t\t  arg1, 0))\n+\t      && ! TREE_CONSTANT_OVERFLOW (tem))\n+\t    return fold (build (swap_tree_comparison (code), type,\n+\t\t\t\tTREE_OPERAND (arg0, 1), tem));\n+\n \t  /* Fold comparisons against built-in math functions.  */\n \t  if (TREE_CODE (arg1) == REAL_CST\n \t      && flag_unsafe_math_optimizations"}, {"sha": "1fc22eecce18fcccf37f584e0b279f0aad19be10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "patch": "@@ -1,3 +1,7 @@\n+2003-04-14  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/20030414-2.c: New test case.\n+\n 2003-04-14  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/10377"}, {"sha": "f4eb8bf36ec2b3d2bfdd6d824f284beb9c897d55", "filename": "gcc/testsuite/gcc.dg/20030414-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ftestsuite%2Fgcc.dg%2F20030414-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28/gcc%2Ftestsuite%2Fgcc.dg%2F20030414-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030414-2.c?ref=15d4fd986330e2e993d0aef0f58d0c5bf7ab0e28", "patch": "@@ -0,0 +1,38 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Check that constant folding (c1 - x) op c2 into x swap(op) c1-c2\n+   doesn't break anything.\n+\n+   Written by Roger Sayle, 27th March 2003.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void abort (void);\n+\n+int foo(double x)\n+{\n+  return (10.0 - x) > 3.0;\n+}\n+\n+int bar (double x)\n+{\n+  return (10.0 - x) == 5.0;\n+}\n+\n+int main()\n+{\n+  if (foo (8.0))\n+    abort ();\n+\n+  if (! foo (6.0))\n+    abort ();\n+\n+  if (bar (1.0))\n+    abort ();\n+\n+  if (! bar (5.0))\n+    abort ();\n+  return 0;\n+}\n+"}]}