{"sha": "eedc73a224df61694fe4802ddec8eb9ad1822f32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkYzczYTIyNGRmNjE2OTRmZTQ4MDJkZGVjOGViOWFkMTgyMmYzMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-28T12:42:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-28T12:42:50Z"}, "message": "Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work first\n\nGCC_CET_HOST_FLAGS uses -Wl,-z,ibt,-z,shstk to check if Linux/x86 host\nhas Intel CET enabled by introducing an Intel CET violation on purpose.\nTo avoid false positive, check whether -Wl,-z,ibt,-z,shstk works first.\n-fcf-protection=none is added to avoid false negative when -fcf-protection\nis enabled by default.\n\nconfig/\n\n\tPR bootstrap/94739\n\t* cet.m4 (GCC_CET_HOST_FLAGS): Add -fcf-protection=none to\n\t-Wl,-z,ibt,-z,shstk.  Check whether -fcf-protection=none\n\t-Wl,-z,ibt,-z,shstk works first.\n\nlibiberty/\n\n\tPR bootstrap/94739\n\t* configure: Regenerated.\n\nlto-plugin/\n\n\tPR bootstrap/94739\n\t* configure: Regenerated.", "tree": {"sha": "ec0322655b95f987b4cc5557775e4400d6a8a6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0322655b95f987b4cc5557775e4400d6a8a6dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eedc73a224df61694fe4802ddec8eb9ad1822f32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedc73a224df61694fe4802ddec8eb9ad1822f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedc73a224df61694fe4802ddec8eb9ad1822f32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedc73a224df61694fe4802ddec8eb9ad1822f32/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34f6b14ff33e0c64b3a4a1a2cd871df715d69151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f6b14ff33e0c64b3a4a1a2cd871df715d69151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f6b14ff33e0c64b3a4a1a2cd871df715d69151"}], "stats": {"total": 195, "additions": 138, "deletions": 57}, "files": [{"sha": "5ab14d97559e0692c1c94bd6f034561d6d84ba1c", "filename": "config/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -1,3 +1,10 @@\n+2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): Add -fcf-protection=none to\n+\t-Wl,-z,ibt,-z,shstk.  Check whether -fcf-protection=none\n+\t-Wl,-z,ibt,-z,shstk works first.\n+\n 2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94739"}, {"sha": "ea616b728a99095a08e4818e6f047d653e61e21f", "filename": "config/cet.m4", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -98,9 +98,19 @@ asm (\"setssbsy\");\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  AC_TRY_LINK(\n+    [],[return 0;],\n+    [may_have_cet=yes],\n+    [may_have_cet=no])\n+fi\n+\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n   AC_TRY_RUN([\n static void\n foo (void)\n@@ -130,7 +140,6 @@ main ()\n   ],\n   [have_cet=no],\n   [have_cet=yes])\n-  LDFLAGS=\"$save_LDFLAGS\"\n   if test x$enable_cet = xno -a x$have_cet = xyes; then\n     AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n   fi\n@@ -141,4 +150,6 @@ if test x$enable_cet = xyes; then\n else\n   AC_MSG_RESULT([no])\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n ])"}, {"sha": "a757715850999f44dc2e620db428ec6c66444bd2", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -1,3 +1,8 @@\n+2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* configure: Regenerated.\n+\n 2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR demangler/94797"}, {"sha": "bb76cf1b823c104314d1af4ea2d11304b9e212f8", "filename": "libiberty/configure", "status": "modified", "additions": 77, "deletions": 49, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -1674,6 +1674,52 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_header_compile\n \n+# ac_fn_c_try_link LINENO\n+# -----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_c_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_c_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_try_link\n+\n # ac_fn_c_check_header_preproc LINENO HEADER VAR\n # ----------------------------------------------\n # Tests whether HEADER is present, setting the cache variable VAR accordingly.\n@@ -1940,52 +1986,6 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_type\n \n-# ac_fn_c_try_link LINENO\n-# -----------------------\n-# Try to link conftest.$ac_ext, and return whether this succeeded.\n-ac_fn_c_try_link ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  rm -f conftest.$ac_objext conftest$ac_exeext\n-  if { { ac_try=\"$ac_link\"\n-case \"(($ac_try\" in\n-  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n-  *) ac_try_echo=$ac_try;;\n-esac\n-eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n-$as_echo \"$ac_try_echo\"; } >&5\n-  (eval \"$ac_link\") 2>conftest.err\n-  ac_status=$?\n-  if test -s conftest.err; then\n-    grep -v '^ *+' conftest.err >conftest.er1\n-    cat conftest.er1 >&5\n-    mv -f conftest.er1 conftest.err\n-  fi\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; } && {\n-\t test -z \"$ac_c_werror_flag\" ||\n-\t test ! -s conftest.err\n-       } && test -s conftest$ac_exeext && {\n-\t test \"$cross_compiling\" = yes ||\n-\t test -x conftest$ac_exeext\n-       }; then :\n-  ac_retval=0\n-else\n-  $as_echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-\tac_retval=1\n-fi\n-  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n-  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n-  # interfere with the next link command; also delete a directory that is\n-  # left behind by Apple's compiler.  We do this before executing the actions.\n-  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-  as_fn_set_status $ac_retval\n-\n-} # ac_fn_c_try_link\n-\n # ac_fn_c_check_func LINENO FUNC VAR\n # ----------------------------------\n # Tests whether FUNC exists, setting the cache variable VAR accordingly\n@@ -5345,9 +5345,36 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n   if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n@@ -5393,7 +5420,6 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n   if test x$enable_cet = xno -a x$have_cet = xyes; then\n     as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n   fi\n@@ -5406,6 +5432,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n \n "}, {"sha": "4ffbf122ebd0aa43117f2f8985989b30513d3d34", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -1,3 +1,8 @@\n+2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* configure: Regenerated.\n+\n 2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94739"}, {"sha": "1baf6cc70b852efbee76804d862daecf01a2b53e", "filename": "lto-plugin/configure", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedc73a224df61694fe4802ddec8eb9ad1822f32/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedc73a224df61694fe4802ddec8eb9ad1822f32/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=eedc73a224df61694fe4802ddec8eb9ad1822f32", "patch": "@@ -5741,9 +5741,33 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n   if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n@@ -5789,7 +5813,6 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n   if test x$enable_cet = xno -a x$have_cet = xyes; then\n     as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n   fi\n@@ -5802,6 +5825,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n \n \n@@ -11916,7 +11941,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11919 \"configure\"\n+#line 11944 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12022,7 +12047,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12025 \"configure\"\n+#line 12050 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}