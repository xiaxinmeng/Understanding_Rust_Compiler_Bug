{"sha": "255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1ZTViMDQ4MWEwNmY1ZmI3Y2Y0MWM4YjFkNTExY2Y1MDZiOTQzZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-11-13T14:43:23Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-11-13T14:43:23Z"}, "message": "decl.c (gnat_to_gnu_entity): Turn Ada Pure on subprograms back into GCC CONST when...\n\n        ada/\n        * gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Function>:\n        Turn Ada Pure on subprograms back into GCC CONST when eh constructs\n        are explicit to the middle-end.  Tidy.\n\n        testsuite/\n        * gnat.dg/test_raise_from_pure.adb: Adjust to match revised intent.\n        * gnat.dg/wrap_raise_from_pure.ad[bs]: Remove.\n        * gnat.dg/handle_raise_from_pure.adb: New test.\n\nFrom-SVN: r141821", "tree": {"sha": "e7e82ce0a77a9dc8a6c110f58e5e35cc64936166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e82ce0a77a9dc8a6c110f58e5e35cc64936166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cea094edca95e223af343aa597065bb255b5c772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea094edca95e223af343aa597065bb255b5c772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea094edca95e223af343aa597065bb255b5c772"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "3df2baf5850a14aa9d0dc13bf0d3d4ec74a64a5b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "patch": "@@ -1,3 +1,9 @@\n+2008-11-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Function>:\n+\tTurn Ada Pure on subprograms back into GCC CONST when eh constructs\n+\tare explicit to the middle-end.  Tidy.\n+\n 2008-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.def (PLUS_NOMOD_EXPR): New tree code."}, {"sha": "22ca3a51fa7e77a8d9a46007019a73d9fe3c05f8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "patch": "@@ -3739,7 +3739,19 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tbool public_flag = Is_Public (gnat_entity) || imported_p;\n \tbool extern_flag\n \t  = (Is_Public (gnat_entity) && !definition) || imported_p;\n-\tbool pure_flag = Is_Pure (gnat_entity);\n+\n+       /* The semantics of \"pure\" in Ada essentially matches that of \"const\"\n+          in the back-end.  In particular, both properties are orthogonal to\n+          the \"nothrow\" property if the EH circuitry is explicit in the\n+          internal representation of the back-end.  If we are to completely\n+          hide the EH circuitry from it, we need to declare that calls to pure\n+          Ada subprograms that can throw have side effects since they can\n+          trigger an \"abnormal\" transfer of control flow; thus they can be\n+          neither \"const\" nor \"pure\" in the back-end sense.  */\n+\tbool const_flag\n+\t  = (Exception_Mechanism == Back_End_Exceptions\n+\t     && Is_Pure (gnat_entity));\n+\n \tbool volatile_flag = No_Return (gnat_entity);\n \tbool returns_by_ref = false;\n \tbool returns_unconstrained = false;\n@@ -3972,12 +3984,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t\t/* If a parameter is a pointer, this function may modify\n \t\t   memory through it and thus shouldn't be considered\n-\t\t   a pure function.  Also, the memory may be modified\n+\t\t   a const function.  Also, the memory may be modified\n \t\t   between two calls, so they can't be CSE'ed.  The latter\n \t\t   case also handles by-ref parameters.  */\n \t\tif (POINTER_TYPE_P (gnu_param_type)\n \t\t    || TYPE_FAT_POINTER_P (gnu_param_type))\n-\t\t  pure_flag = false;\n+\t\t  const_flag = false;\n \t      }\n \n \t    if (copy_in_copy_out)\n@@ -4054,21 +4066,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t   returns_by_ref, returns_by_target_ptr);\n \n \t/* A subprogram (something that doesn't return anything) shouldn't\n-\t   be considered Pure since there would be no reason for such a\n+\t   be considered const since there would be no reason for such a\n \t   subprogram.  Note that procedures with Out (or In Out) parameters\n \t   have already been converted into a function with a return type. */\n \tif (TREE_CODE (gnu_return_type) == VOID_TYPE)\n-\t  pure_flag = false;\n-\n-\t/* The semantics of \"pure\" in Ada used to essentially match that of\n-\t   \"const\" in the middle-end.  In particular, both properties were\n-\t   orthogonal to the \"nothrow\" property.  This is not true in the\n-\t   middle-end any more and we have no choice but to ignore the hint\n-\t   at this stage.  */\n+\t  const_flag = false;\n \n \tgnu_type\n \t  = build_qualified_type (gnu_type,\n \t\t\t\t  TYPE_QUALS (gnu_type)\n+\t\t\t\t  | (TYPE_QUAL_CONST * const_flag)\n \t\t\t\t  | (TYPE_QUAL_VOLATILE * volatile_flag));\n \n \tSloc_to_locus (Sloc (gnat_entity), &input_location);\n@@ -4077,8 +4084,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  gnu_stub_type\n \t    = build_qualified_type (gnu_stub_type,\n \t\t\t\t    TYPE_QUALS (gnu_stub_type)\n-\t\t\t\t    | (Exception_Mechanism == Back_End_Exceptions\n-\t\t\t\t       ? TYPE_QUAL_CONST * pure_flag : 0)\n+\t\t\t\t    | (TYPE_QUAL_CONST * const_flag)\n \t\t\t\t    | (TYPE_QUAL_VOLATILE * volatile_flag));\n \n \t/* If we have a builtin decl for that function, check the signatures"}, {"sha": "a199f2b3149e99262d0e5384066ba75ad6df1e66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "patch": "@@ -1,3 +1,9 @@\n+2008-11-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/test_raise_from_pure.adb: Adjust to match revised intent.\n+\t* gnat.dg/wrap_raise_from_pure.adb: Remove.\n+\t* gnat.dg/handle_raise_from_pure.adb: New test.\n+\n 2008-11-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/38094"}, {"sha": "0248d350d712cef8c0d6c6aa076c84b632817ad0", "filename": "gcc/testsuite/gnat.dg/handle_raise_from_pure.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2Fgnat.dg%2Fhandle_raise_from_pure.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2Fgnat.dg%2Fhandle_raise_from_pure.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fhandle_raise_from_pure.adb?ref=255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "patch": "@@ -0,0 +1,11 @@\n+--  { dg-do run }\n+--  { dg-options \"-O2\" }\n+with Ada.Text_Io; use Ada.Text_IO;\n+with Raise_From_Pure; use Raise_From_Pure;\n+procedure handle_raise_from_pure is\n+   K : Integer;\n+begin\n+   K := Raise_CE_If_0 (0);\n+exception\n+   when others => Put_Line (\"exception caught\");\n+end;"}, {"sha": "a3a9c649659bb9183c72928741725434745e3173", "filename": "gcc/testsuite/gnat.dg/test_raise_from_pure.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_raise_from_pure.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255e5b0481a06f5fb7cf41c8b1d511cf506b943f/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_raise_from_pure.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftest_raise_from_pure.adb?ref=255e5b0481a06f5fb7cf41c8b1d511cf506b943f", "patch": "@@ -1,9 +1,8 @@\n --  { dg-do run }\n --  { dg-options \"-O2\" }\n-with Wrap_Raise_From_Pure; use Wrap_Raise_From_Pure;\n+with Raise_From_Pure; use Raise_From_Pure;\n procedure test_raise_from_pure is\n+   K : Integer;\n begin\n-   Wrap_Raise_From_Pure.Check;\n-exception\n-   when Constraint_Error => null;\n+   K := Raise_CE_If_0 (0);\n end;"}, {"sha": "ec8f342c6b593cec6ff02c1bfe48848c3c5bc66a", "filename": "gcc/testsuite/gnat.dg/wrap_raise_from_pure.adb", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea094edca95e223af343aa597065bb255b5c772/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea094edca95e223af343aa597065bb255b5c772/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.adb?ref=cea094edca95e223af343aa597065bb255b5c772", "patch": "@@ -1,10 +0,0 @@\n-with Ada.Text_Io; use Ada.Text_Io;\n-with Raise_From_Pure; use Raise_From_Pure;\n-package body Wrap_Raise_From_Pure is\n-   procedure Check is\n-      K : Integer;\n-   begin\n-      K := Raise_CE_If_0 (0);\n-      Put_Line (\"Should never reach here\");\n-   end;\n-end;"}, {"sha": "521c04a5fc9e19d486f08afd4de66cefb8c2f826", "filename": "gcc/testsuite/gnat.dg/wrap_raise_from_pure.ads", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea094edca95e223af343aa597065bb255b5c772/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea094edca95e223af343aa597065bb255b5c772/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwrap_raise_from_pure.ads?ref=cea094edca95e223af343aa597065bb255b5c772", "patch": "@@ -1,4 +0,0 @@\n-\n-package Wrap_Raise_From_Pure is\n-   procedure Check;\n-end;"}]}