{"sha": "b8076552689fa812fc189ce5e45904ee8f9061c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwNzY1NTI2ODlmYTgxMmZjMTg5Y2U1ZTQ1OTA0ZWU4ZjkwNjFjOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-15T21:29:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-15T21:29:37Z"}, "message": "(b_mode_operand): New function.\n\n(print_operand): Added code 'Q'.\n\nFrom-SVN: r10360", "tree": {"sha": "1948c05f5b1dce636bbdf3008ca901c258d8cad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1948c05f5b1dce636bbdf3008ca901c258d8cad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8076552689fa812fc189ce5e45904ee8f9061c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8076552689fa812fc189ce5e45904ee8f9061c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8076552689fa812fc189ce5e45904ee8f9061c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8076552689fa812fc189ce5e45904ee8f9061c8/comments", "author": null, "committer": null, "parents": [{"sha": "760607e80cc4a2308e90e328f9997b5018d8d493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760607e80cc4a2308e90e328f9997b5018d8d493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/760607e80cc4a2308e90e328f9997b5018d8d493"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "e7a98dd3a083c7b450559da65c5f6d189472c0fe", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8076552689fa812fc189ce5e45904ee8f9061c8/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8076552689fa812fc189ce5e45904ee8f9061c8/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=b8076552689fa812fc189ce5e45904ee8f9061c8", "patch": "@@ -291,6 +291,32 @@ small_nonneg_const (op, mode)\n   return 0;\n }\n \n+\n+/* predicate for 1750 `B' addressing mode (Base Register with Offset)\n+   memory operand */\n+int\n+b_mode_operand (op)\n+     rtx op;\n+{\n+  if (GET_CODE (op) == MEM)\n+    {\n+      rtx inner = XEXP (op, 0);\n+      if (GET_CODE (inner) == PLUS)\n+\t{\n+\t  rtx plus_op0 = XEXP (inner, 0);\n+\t  if (GET_CODE (plus_op0) == REG && REG_OK_FOR_INDEX_P (plus_op0))\n+\t    {\n+\t      rtx plus_op1 = XEXP (inner, 1);\n+\t      if (GET_CODE (plus_op1) == CONST_INT\n+\t\t  && INTVAL (plus_op1) >= 0\n+\t\t  && INTVAL (plus_op1) <= 255)\n+\t\treturn 1;\n+\t    }\n+\t}\n+    }\n+  return 0;\n+}\n+\n /* Decide whether to output a conditional jump as a \"Jump Conditional\"\n    or as a \"Branch Conditional\": */\n \n@@ -384,7 +410,12 @@ print_operand (file, x, kode)\n     case LABEL_REF:\n     case CONST:\n     case MEM:\n-      output_address (XEXP (x, 0));\n+      if (kode == 'Q')\n+\tfprintf (file, \"r%d,%d\",\n+\t\t REGNO (XEXP (XEXP (x, 0), 0)),\n+\t\t INTVAL (XEXP (XEXP (x, 0), 1)));\n+      else\n+        output_address (XEXP (x, 0));\n       break;\n     case CONST_DOUBLE:\n /*    {"}]}