{"sha": "b87974949f096925805aec63eac7c5a02f2bb483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3OTc0OTQ5ZjA5NjkyNTgwNWFlYzYzZWFjN2M1YTAyZjJiYjQ4Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-30T00:21:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-30T00:21:52Z"}, "message": "runtime: Copy runtime_panicstring from master library.\n\nFrom-SVN: r181830", "tree": {"sha": "365c588a8f44625a3f5aa828c39bd4189af0bb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/365c588a8f44625a3f5aa828c39bd4189af0bb46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b87974949f096925805aec63eac7c5a02f2bb483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87974949f096925805aec63eac7c5a02f2bb483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87974949f096925805aec63eac7c5a02f2bb483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87974949f096925805aec63eac7c5a02f2bb483/comments", "author": null, "committer": null, "parents": [{"sha": "a5922111851daf250abc704098c4cefdc4b629af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5922111851daf250abc704098c4cefdc4b629af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5922111851daf250abc704098c4cefdc4b629af"}], "stats": {"total": 175, "additions": 83, "deletions": 92}, "files": [{"sha": "3a0c77811262989e80e44e55c6c239d01376f6c6", "filename": "libgo/runtime/go-append.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-append.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-append.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-append.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -32,7 +32,7 @@ __go_append (struct __go_open_array a, void *bvalues, uintptr_t bcount,\n   ucount = (uintptr_t) a.__count + bcount;\n   count = (int) ucount;\n   if ((uintptr_t) count != ucount || count <= a.__count)\n-    __go_panic_msg (\"append: slice overflow\");\n+    runtime_panicstring (\"append: slice overflow\");\n \n   if (count > a.__capacity)\n     {"}, {"sha": "7e32286dae09f8366e7403093c35a4c9f9ace549", "filename": "libgo/runtime/go-close.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-close.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-close.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-close.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -18,7 +18,7 @@ __go_builtin_close (struct __go_channel *channel)\n   int i;\n \n   if (channel == NULL)\n-    __go_panic_msg (\"close of nil channel\");\n+    runtime_panicstring (\"close of nil channel\");\n \n   i = pthread_mutex_lock (&channel->lock);\n   __go_assert (i == 0);\n@@ -30,7 +30,7 @@ __go_builtin_close (struct __go_channel *channel)\n     {\n       i = pthread_mutex_unlock (&channel->lock);\n       __go_assert (i == 0);\n-      __go_panic_msg (\"close of closed channel\");\n+      runtime_panicstring (\"close of closed channel\");\n     }\n \n   channel->is_closed = 1;"}, {"sha": "d88d50569c24e7c3813bd9072d9052083fde9c80", "filename": "libgo/runtime/go-eface-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-compare.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,7 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-panic.h\"\n+#include \"runtime.h\"\n #include \"interface.h\"\n \n /* Compare two interface values.  Return 0 for equal, not zero for not\n@@ -20,7 +20,7 @@ __go_empty_interface_compare (struct __go_empty_interface left,\n \n   if (((uintptr_t) left_descriptor & reflectFlags) != 0\n       || ((uintptr_t) right.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   if (left_descriptor == NULL && right.__type_descriptor == NULL)\n     return 0;"}, {"sha": "fed3fdb4432a1e8c026eb5a9b9aab12e483a7c38", "filename": "libgo/runtime/go-eface-val-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-eface-val-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-eface-val-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-eface-val-compare.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,7 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-panic.h\"\n+#include \"runtime.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n \n@@ -21,7 +21,7 @@ __go_empty_interface_value_compare (\n \n   left_descriptor = left.__type_descriptor;\n   if (((uintptr_t) left_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n   if (left_descriptor == NULL)\n     return 1;\n   if (!__go_type_descriptors_equal (left_descriptor, right_descriptor))"}, {"sha": "db03b914c8443dad34d68454ce335595f8dd8423", "filename": "libgo/runtime/go-interface-eface-compare.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-eface-compare.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,7 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-panic.h\"\n+#include \"runtime.h\"\n #include \"interface.h\"\n \n /* Compare a non-empty interface value with an empty interface value.\n@@ -18,7 +18,7 @@ __go_interface_empty_compare (struct __go_interface left,\n   const struct __go_type_descriptor *left_descriptor;\n \n   if (((uintptr_t) right.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n   if (left.__methods == NULL && right.__type_descriptor == NULL)\n     return 0;\n   if (left.__methods == NULL || right.__type_descriptor == NULL)"}, {"sha": "765e7c021b7cdaaa3c0080b7319a1e6ec50983a6", "filename": "libgo/runtime/go-make-slice.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-make-slice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-make-slice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-make-slice.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -31,14 +31,14 @@ __go_make_slice2 (const struct __go_type_descriptor *td, uintptr_t len,\n \n   ilen = (int) len;\n   if (ilen < 0 || (uintptr_t) ilen != len)\n-    __go_panic_msg (\"makeslice: len out of range\");\n+    runtime_panicstring (\"makeslice: len out of range\");\n \n   icap = (int) cap;\n   if (cap < len\n       || (uintptr_t) icap != cap\n       || (std->__element_type->__size > 0\n \t  && cap > (uintptr_t) -1U / std->__element_type->__size))\n-    __go_panic_msg (\"makeslice: cap out of range\");\n+    runtime_panicstring (\"makeslice: cap out of range\");\n \n   ret.__count = ilen;\n   ret.__capacity = icap;"}, {"sha": "cb10d8dcdc0e45c5846453d3a3bafff9c705b6e2", "filename": "libgo/runtime/go-map-delete.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-map-delete.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-map-delete.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-delete.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -7,9 +7,9 @@\n #include <stddef.h>\n #include <stdlib.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n-#include \"go-panic.h\"\n #include \"map.h\"\n \n /* Delete the entry matching KEY from MAP.  */\n@@ -27,7 +27,7 @@ __go_map_delete (struct __go_map *map, const void *key)\n   void **pentry;\n \n   if (map == NULL)\n-    __go_panic_msg (\"deletion of entry in nil map\");\n+    runtime_panicstring (\"deletion of entry in nil map\");\n \n   descriptor = map->__descriptor;\n "}, {"sha": "ffb532bee88849fbe0f82be5eb9cc8d1118aac6b", "filename": "libgo/runtime/go-map-index.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-map-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-map-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-map-index.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -7,9 +7,9 @@\n #include <stddef.h>\n #include <stdlib.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n-#include \"go-panic.h\"\n #include \"map.h\"\n \n /* Rehash MAP to a larger size.  */\n@@ -89,7 +89,7 @@ __go_map_index (struct __go_map *map, const void *key, _Bool insert)\n   if (map == NULL)\n     {\n       if (insert)\n-\t__go_panic_msg (\"assignment to entry in nil map\");\n+\truntime_panicstring (\"assignment to entry in nil map\");\n       return NULL;\n     }\n "}, {"sha": "fe13c5efab62db8984462b50c919ab3776747081", "filename": "libgo/runtime/go-new-channel.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-new-channel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-new-channel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new-channel.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -7,9 +7,9 @@\n #include <stddef.h>\n #include <stdint.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n-#include \"go-panic.h\"\n #include \"channel.h\"\n \n struct __go_channel*\n@@ -34,7 +34,7 @@ __go_new_channel (const struct __go_type_descriptor *channel_type,\n   if (ientries < 0\n       || (uintptr_t) ientries != entries\n       || (element_size > 0 && entries > (uintptr_t) -1 / element_size))\n-    __go_panic_msg (\"chan size out of range\");\n+    runtime_panicstring (\"chan size out of range\");\n \n   alloc_size = (element_size + sizeof (uint64_t) - 1) / sizeof (uint64_t);\n "}, {"sha": "288e1883f9d4f0296e4bed72b5694699430bba54", "filename": "libgo/runtime/go-new-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-new-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-new-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new-map.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n #include \"map.h\"\n \n /* List of prime numbers, copied from libstdc++/src/hashtable.c.  */\n@@ -111,7 +111,7 @@ __go_new_map (const struct __go_map_descriptor *descriptor, uintptr_t entries)\n \n   ientries = (int) entries;\n   if (ientries < 0 || (uintptr_t) ientries != entries)\n-    __go_panic_msg (\"map size out of range\");\n+    runtime_panicstring (\"map size out of range\");\n \n   if (entries == 0)\n     entries = 5;"}, {"sha": "2e4a7883c181df8b34849c41718e0ff07f7f23a5", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -105,22 +105,3 @@ __go_panic (struct __go_empty_interface arg)\n   __printpanics (g->panic);\n   runtime_dopanic (0);\n }\n-\n-/* This is used by the runtime library.  */\n-\n-void\n-__go_panic_msg (const char* msg)\n-{\n-  size_t len;\n-  unsigned char *sdata;\n-  struct __go_string s;\n-  struct __go_empty_interface arg;\n-\n-  len = __builtin_strlen (msg);\n-  sdata = runtime_mallocgc (len, FlagNoPointers, 0, 0);\n-  __builtin_memcpy (sdata, msg, len);\n-  s.__data = sdata;\n-  s.__length = len;\n-  newErrorString(s, &arg);\n-  __go_panic (arg);\n-}"}, {"sha": "41996e43b5fca2ca42d775556234dc81f140d009", "filename": "libgo/runtime/go-panic.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-panic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-panic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.h?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -34,9 +34,6 @@ struct __go_panic_stack\n extern void __go_panic (struct __go_empty_interface)\n   __attribute__ ((noreturn));\n \n-extern void __go_panic_msg (const char* msg)\n-  __attribute__ ((noreturn));\n-\n extern void __go_print_string (struct __go_string);\n \n extern struct __go_empty_interface __go_recover (void);\n@@ -55,7 +52,8 @@ extern void newTypeAssertionError(const struct __go_type_descriptor *pt1,\n \t\t\t\t  struct __go_empty_interface *ret)\n   __asm__ (\"libgo_runtime.runtime.NewTypeAssertionError\");\n \n-extern void newErrorString(struct __go_string, struct __go_empty_interface *)\n+extern void runtime_newErrorString(struct __go_string,\n+\t\t\t\t   struct __go_empty_interface *)\n   __asm__ (\"libgo_runtime.runtime.NewErrorString\");\n \n extern void printany(struct __go_empty_interface)"}, {"sha": "c06aef17eed33f0735d28c397a658c0dd5812399", "filename": "libgo/runtime/go-reflect-map.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-reflect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-reflect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-map.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -7,9 +7,9 @@\n #include <stdlib.h>\n #include <stdint.h>\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n #include \"go-assert.h\"\n-#include \"go-panic.h\"\n #include \"go-type.h\"\n #include \"map.h\"\n \n@@ -90,7 +90,7 @@ mapassign (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i,\n   __go_assert (mt->__common.__code == GO_MAP);\n \n   if (map == NULL)\n-    __go_panic_msg (\"assignment to entry in nil map\");\n+    runtime_panicstring (\"assignment to entry in nil map\");\n \n   key_descriptor = mt->__key_type;\n   if (__go_is_pointer_type (key_descriptor))"}, {"sha": "d14a580554929e115ad23cf525ac69dd2674e1f5", "filename": "libgo/runtime/go-reflect.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-reflect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-reflect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -7,9 +7,9 @@\n #include <stdlib.h>\n #include <stdint.h>\n \n+#include \"runtime.h\"\n #include \"interface.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n #include \"go-string.h\"\n #include \"go-type.h\"\n \n@@ -122,7 +122,7 @@ Reflect (struct __go_empty_interface e)\n   struct reflect_ret ret;\n \n   if (((uintptr_t) e.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   if (e.__type_descriptor == NULL)\n     {\n@@ -170,7 +170,7 @@ Typeof (const struct __go_empty_interface e)\n   struct __go_empty_interface ret;\n \n   if (((uintptr_t) e.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   if (e.__type_descriptor == NULL)\n     {"}, {"sha": "f732e7f017fcc29063977a6c118dd8bbe257824c", "filename": "libgo/runtime/go-runtime-error.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-runtime-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-runtime-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-runtime-error.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,7 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n-#include \"go-panic.h\"\n+#include \"runtime.h\"\n \n /* The compiler generates calls to this function.  This enum values\n    are known to the compiler and used by compiled code.  Any change\n@@ -59,26 +59,26 @@ __go_runtime_error (int i)\n     case SLICE_INDEX_OUT_OF_BOUNDS:\n     case ARRAY_INDEX_OUT_OF_BOUNDS:\n     case STRING_INDEX_OUT_OF_BOUNDS:\n-      __go_panic_msg (\"index out of range\");\n+      runtime_panicstring (\"index out of range\");\n \n     case SLICE_SLICE_OUT_OF_BOUNDS:\n     case ARRAY_SLICE_OUT_OF_BOUNDS:\n     case STRING_SLICE_OUT_OF_BOUNDS:\n-      __go_panic_msg (\"slice bounds out of range\");\n+      runtime_panicstring (\"slice bounds out of range\");\n \n     case NIL_DEREFERENCE:\n-      __go_panic_msg (\"nil pointer dereference\");\n+      runtime_panicstring (\"nil pointer dereference\");\n \n     case MAKE_SLICE_OUT_OF_BOUNDS:\n-      __go_panic_msg (\"make slice len or cap out of range\");\n+      runtime_panicstring (\"make slice len or cap out of range\");\n \n     case MAKE_MAP_OUT_OF_BOUNDS:\n-      __go_panic_msg (\"make map len out of range\");\n+      runtime_panicstring (\"make map len out of range\");\n \n     case MAKE_CHAN_OUT_OF_BOUNDS:\n-      __go_panic_msg (\"make chan len out of range\");\n+      runtime_panicstring (\"make chan len out of range\");\n \n     default:\n-      __go_panic_msg (\"unknown runtime error\");\n+      runtime_panicstring (\"unknown runtime error\");\n     }\n }"}, {"sha": "c77ee9183e20b9814a2eb23d16287ee3a0040155", "filename": "libgo/runtime/go-send-nb-small.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-send-nb-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-send-nb-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-send-nb-small.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -31,7 +31,7 @@ __go_send_nonblocking_acquire (struct __go_channel *channel)\n     {\n       i = pthread_mutex_unlock (&channel->lock);\n       __go_assert (i == 0);\n-      __go_panic_msg (\"send on closed channel\");\n+      runtime_panicstring (\"send on closed channel\");\n     }\n \n   if (channel->num_entries > 0)"}, {"sha": "06bcb41b9add6613c9d0d2c39558241494be5c1a", "filename": "libgo/runtime/go-send-small.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-send-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-send-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-send-small.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -31,7 +31,7 @@ __go_send_acquire (struct __go_channel *channel, _Bool for_select)\n \t    channel->selected_for_send = 0;\n \t  i = pthread_mutex_unlock (&channel->lock);\n \t  __go_assert (i == 0);\n-\t  __go_panic_msg (\"send on closed channel\");\n+\t  runtime_panicstring (\"send on closed channel\");\n \t}\n \n       /* If somebody else has the channel locked for sending, we have"}, {"sha": "958b421c8716fe0d4a23edd353d8f3637fd93396", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -178,7 +178,7 @@ sighandler (int sig)\n       i = sigprocmask (SIG_UNBLOCK, &clear, NULL);\n       __go_assert (i == 0);\n \n-      __go_panic_msg (msg);\n+      runtime_panicstring (msg);\n     }\n \n   for (i = 0; signals[i].sig != -1; ++i)"}, {"sha": "8d916c460840f61f10d789ec12e8cee822924317", "filename": "libgo/runtime/go-strslice.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-strslice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-strslice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strslice.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -20,7 +20,7 @@ __go_string_slice (struct __go_string s, int start, int end)\n   if (end == -1)\n     end = len;\n   if (start > len || end < start || end > len)\n-    __go_panic_msg (\"string index out of bounds\");\n+    runtime_panicstring (\"string index out of bounds\");\n   ret.__data = s.__data + start;\n   ret.__length = end - start;\n   return ret;"}, {"sha": "5bf932fc8ba41a84c17b44eb1d13b6921f232853", "filename": "libgo/runtime/go-type-eface.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-type-eface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-type-eface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-eface.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"interface.h\"\n-#include \"go-panic.h\"\n #include \"go-type.h\"\n \n /* A hash function for an empty interface.  */\n@@ -46,7 +46,7 @@ __go_type_equal_empty_interface (const void *vv1, const void *vv2,\n   v2_descriptor = v2->__type_descriptor;\n   if (((uintptr_t) v1_descriptor & reflectFlags) != 0\n       || ((uintptr_t) v2_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n   if (v1_descriptor == NULL || v2_descriptor == NULL)\n     return v1_descriptor == v2_descriptor;\n   if (!__go_type_descriptors_equal (v1_descriptor, v2_descriptor))"}, {"sha": "ba3146e3ddaa22d202201cf33e6d6e7849ba0ccc", "filename": "libgo/runtime/go-type-error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-type-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-type-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-type-error.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-type.h\"\n-#include \"go-panic.h\"\n \n /* A hash function used for a type which does not support hash\n    functions.  */\n@@ -14,7 +14,7 @@ size_t\n __go_type_hash_error (const void *val __attribute__ ((unused)),\n \t\t      size_t key_size __attribute__ ((unused)))\n {\n-  __go_panic_msg (\"hash of unhashable type\");\n+  runtime_panicstring (\"hash of unhashable type\");\n }\n \n /* An equality function for an interface.  */\n@@ -24,5 +24,5 @@ __go_type_equal_error (const void *v1 __attribute__ ((unused)),\n \t\t       const void *v2 __attribute__ ((unused)),\n \t\t       size_t key_size __attribute__ ((unused)))\n {\n-  __go_panic_msg (\"comparing uncomparable types\");\n+  runtime_panicstring (\"comparing uncomparable types\");\n }"}, {"sha": "6f1ea732fa3f30d120e013272662794b47bf4266", "filename": "libgo/runtime/go-unreflect.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unreflect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unreflect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unreflect.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n \n@@ -21,7 +21,7 @@ Unreflect (struct __go_empty_interface type, void *object)\n   struct __go_empty_interface ret;\n \n   if (((uintptr_t) type.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   /* FIXME: We should check __type_descriptor to verify that this is\n      really a type descriptor.  */"}, {"sha": "c60e05b3bda5eed241ce30521766b6691a050abe", "filename": "libgo/runtime/go-unsafe-new.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unsafe-new.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unsafe-new.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-new.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n \n@@ -22,7 +22,7 @@ New (struct __go_empty_interface type)\n   const struct __go_type_descriptor *descriptor;\n \n   if (((uintptr_t) type.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   /* FIXME: We should check __type_descriptor to verify that this is\n      really a type descriptor.  */"}, {"sha": "470ed2d0c72a6e306fb6e235ae7be8e2a2b47476", "filename": "libgo/runtime/go-unsafe-newarray.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-newarray.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -4,8 +4,8 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include \"runtime.h\"\n #include \"go-alloc.h\"\n-#include \"go-panic.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n \n@@ -23,7 +23,7 @@ NewArray (struct __go_empty_interface type, int n)\n   const struct __go_type_descriptor *descriptor;\n \n   if (((uintptr_t) type.__type_descriptor & reflectFlags) != 0)\n-    __go_panic_msg (\"invalid interface value\");\n+    runtime_panicstring (\"invalid interface value\");\n \n   /* FIXME: We should check __type_descriptor to verify that this is\n      really a type descriptor.  */"}, {"sha": "7c74e80ac3abf65631527b54cb1b3d959e0a6143", "filename": "libgo/runtime/iface.goc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fiface.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fiface.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fiface.goc?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -3,12 +3,10 @@\n // license that can be found in the LICENSE file.\n \n package runtime\n-#include \"go-panic.h\"\n+#include \"runtime.h\"\n #include \"go-type.h\"\n #include \"interface.h\"\n-#define nil NULL\n \n-typedef _Bool bool;\n typedef struct __go_type_descriptor descriptor;\n typedef const struct __go_type_descriptor const_descriptor;\n typedef struct __go_interface interface;\n@@ -35,7 +33,7 @@ func ifacetype(i interface) (d *const_descriptor) {\n // Convert an empty interface to an empty interface.\n func ifaceE2E2(e empty_interface) (ret empty_interface, ok bool) {\n \tif(((uintptr_t)e.__type_descriptor&reflectFlags) != 0)\n-\t\t__go_panic_msg(\"invalid interface value\");\n+\t\truntime_panicstring(\"invalid interface value\");\n \tret = e;\n \tok = ret.__type_descriptor != nil;\n }\n@@ -56,7 +54,7 @@ func ifaceI2E2(i interface) (ret empty_interface, ok bool) {\n // Convert an empty interface to a non-empty interface.\n func ifaceE2I2(inter *descriptor, e empty_interface) (ret interface, ok bool) {\n \tif(((uintptr_t)e.__type_descriptor&reflectFlags) != 0)\n-\t\t__go_panic_msg(\"invalid interface value\");\n+\t\truntime_panicstring(\"invalid interface value\");\n \tif (e.__type_descriptor == nil) {\n \t\tret.__methods = nil;\n \t\tret.__object = nil;\n@@ -87,7 +85,7 @@ func ifaceI2I2(inter *descriptor, i interface) (ret interface, ok bool) {\n // Convert an empty interface to a pointer type.\n func ifaceE2T2P(inter *descriptor, e empty_interface) (ret *void, ok bool) {\n \tif(((uintptr_t)e.__type_descriptor&reflectFlags) != 0)\n-\t\t__go_panic_msg(\"invalid interface value\");\n+\t\truntime_panicstring(\"invalid interface value\");\n \tif (!__go_type_descriptors_equal(inter, e.__type_descriptor)) {\n \t\tret = nil;\n \t\tok = 0;\n@@ -112,7 +110,7 @@ func ifaceI2T2P(inter *descriptor, i interface) (ret *void, ok bool) {\n // Convert an empty interface to a non-pointer type.\n func ifaceE2T2(inter *descriptor, e empty_interface, ret *void) (ok bool) {\n \tif(((uintptr_t)e.__type_descriptor&reflectFlags) != 0)\n-\t\t__go_panic_msg(\"invalid interface value\");\n+\t\truntime_panicstring(\"invalid interface value\");\n \tif (!__go_type_descriptors_equal(inter, e.__type_descriptor)) {\n \t\t__builtin_memset(ret, 0, inter->__size);\n \t\tok = 0;"}, {"sha": "f5321856eacd947ea27f3e12ed9dfb302aa55578", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -17,9 +17,6 @@ package runtime\n #include \"go-string.h\"\n #include \"interface.h\"\n #include \"go-type.h\"\n-typedef struct __go_empty_interface Eface;\n-typedef struct __go_type_descriptor Type;\n-typedef struct __go_func_type FuncType;\n \n MHeap runtime_mheap;\n extern MStats mstats;\t// defined in extern.go"}, {"sha": "e4b8456dc363a69f163b12cd2733db743e7f13e3", "filename": "libgo/runtime/map.goc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fmap.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fmap.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmap.goc?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -3,13 +3,9 @@\n // license that can be found in the LICENSE file.\n \n package runtime\n+#include \"runtime.h\"\n #include \"map.h\"\n-#define nil NULL\n \n-typedef unsigned char byte;\n-typedef _Bool bool;\n-\n-typedef struct __go_map_type MapType;\n typedef struct __go_map Hmap;\n typedef struct __go_hash_iter hiter;\n "}, {"sha": "d3cde7c0e5b0672d3e8c27020219444b71289c21", "filename": "libgo/runtime/reflect.goc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Freflect.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Freflect.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Freflect.goc?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -8,10 +8,6 @@ package reflect\n #include \"runtime.h\"\n #include \"go-panic.h\"\n \n-typedef struct __go_type_descriptor Type;\n-typedef struct __go_interface Iface;\n-typedef struct __go_empty_interface Eface;\n-\n func ifaceE2I(inter *Type, e Eface, ret *Iface) {\n \tconst Type *t;\n \tEface err;"}, {"sha": "8e4433b0d6c911fd291e627566c3b5aeacc49150", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -70,6 +70,19 @@ runtime_throw(const char *s)\n \truntime_exit(1);\t// even more not reached\n }\n \n+void\n+runtime_panicstring(const char *s)\n+{\n+\tEface err;\n+\t\n+\tif(runtime_m()->gcing) {\n+\t\truntime_printf(\"panic: %s\\n\", s);\n+\t\truntime_throw(\"panic during gc\");\n+\t}\n+\truntime_newErrorString(runtime_gostringnocopy((const byte*)s), &err);\n+\truntime_panic(err);\n+}\n+\n static int32\targc;\n static byte**\targv;\n \n@@ -95,7 +108,7 @@ runtime_goargs(void)\n \n \ts = runtime_malloc(argc*sizeof s[0]);\n \tfor(i=0; i<argc; i++)\n-\t\ts[i] = runtime_gostringnocopy((byte*)argv[i]);\n+\t\ts[i] = runtime_gostringnocopy((const byte*)argv[i]);\n \tos_Args.__values = (void*)s;\n \tos_Args.__count = argc;\n \tos_Args.__capacity = argc;"}, {"sha": "9455ae88c5ac788a0ad84ca4a3c4f00550b1acba", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -57,10 +57,16 @@ typedef\tstruct\tMCache\t\tMCache;\n typedef struct\tFixAlloc\tFixAlloc;\n \n typedef\tstruct\t__go_defer_stack\tDefer;\n+typedef struct\t__go_interface\t\tIface;\n+typedef\tstruct\t__go_empty_interface\tEface;\n+typedef\tstruct\t__go_type_descriptor\tType;\n typedef\tstruct\t__go_panic_stack\tPanic;\n typedef\tstruct\t__go_open_array\t\tSlice;\n typedef\tstruct\t__go_string\t\tString;\n \n+typedef struct\t__go_func_type\t\tFuncType;\n+typedef struct\t__go_map_type\t\tMapType;\n+\n /*\n  * per-cpu declaration.\n  */\n@@ -211,10 +217,11 @@ void\truntime_osinit();\n void\truntime_goargs(void);\n void\truntime_goenvs(void);\n void\truntime_throw(const char*);\n+void\truntime_panicstring(const char*) __attribute__ ((noreturn));\n void*\truntime_mal(uintptr);\n void\truntime_schedinit(void);\n void\truntime_initsig(int32);\n-String\truntime_gostringnocopy(byte*);\n+String\truntime_gostringnocopy(const byte*);\n void*\truntime_mstart(void*);\n G*\truntime_malg(int32, byte**, size_t*);\n void\truntime_minit(void);\n@@ -274,8 +281,13 @@ void\truntime_semawakeup(M*);\n void\truntime_futexsleep(uint32*, uint32, int64);\n void\truntime_futexwakeup(uint32*, uint32);\n \n+/*\n+ * runtime go-called\n+ */\n+void\truntime_panic(Eface);\n \n /* Functions.  */\n+#define runtime_panic __go_panic\n #define runtime_printf printf\n #define runtime_malloc(s) __go_alloc(s)\n #define runtime_free(p) __go_free(p)"}, {"sha": "fbbe393bbeff0eb91bb2417ea0a04d495d61273a", "filename": "libgo/runtime/string.goc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fstring.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b87974949f096925805aec63eac7c5a02f2bb483/libgo%2Fruntime%2Fstring.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstring.goc?ref=b87974949f096925805aec63eac7c5a02f2bb483", "patch": "@@ -15,7 +15,7 @@ runtime_findnull(const byte *s)\n }\n \n String\n-runtime_gostringnocopy(byte *str)\n+runtime_gostringnocopy(const byte *str)\n {\n \tString s;\n \t"}]}