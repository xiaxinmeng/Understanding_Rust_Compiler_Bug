{"sha": "2098fe9ed59d4342ee62ae9f796242a0683d8643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5OGZlOWVkNTlkNDM0MmVlNjJhZTlmNzk2MjQyYTA2ODNkODY0Mw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-05-04T01:36:13Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-05-04T01:36:13Z"}, "message": "common.opt (fdiagnostics-show-option): No variable is needed.\n\n* common.opt (fdiagnostics-show-option): No variable is needed.\n* diagnostic.h (diagnostic_context): Add show_option_requested flag.\n* diagnostic.c (diagnostic_initialize): Initialize show_option_requested.\n(diagnostic_report_diagnostic): Test for enabled diagnostics here.\nSave and restore original message format.  Use flag in context\ninstead of global.\n(warning): Don't test for enabled warnings here.\n* opts.c (common_handle_option): Handle -fdiagnostics-show-option\nhere.\n\nFrom-SVN: r99204", "tree": {"sha": "02e58ad626b4c528bb00fa48493c8680b37ca246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e58ad626b4c528bb00fa48493c8680b37ca246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2098fe9ed59d4342ee62ae9f796242a0683d8643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098fe9ed59d4342ee62ae9f796242a0683d8643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2098fe9ed59d4342ee62ae9f796242a0683d8643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098fe9ed59d4342ee62ae9f796242a0683d8643/comments", "author": null, "committer": null, "parents": [{"sha": "9791c75c41eb16f99b6a3e9456e823777a36d061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9791c75c41eb16f99b6a3e9456e823777a36d061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9791c75c41eb16f99b6a3e9456e823777a36d061"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "5760eece241395bec8f43057bba11a87abebedcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2098fe9ed59d4342ee62ae9f796242a0683d8643", "patch": "@@ -1,3 +1,15 @@\n+2005-05-03  DJ Delorie  <dj@redhat.com>\n+\n+\t* common.opt (fdiagnostics-show-option): No variable is needed.\n+\t* diagnostic.h (diagnostic_context): Add show_option_requested flag.\n+\t* diagnostic.c (diagnostic_initialize): Initialize show_option_requested.\n+\t(diagnostic_report_diagnostic): Test for enabled diagnostics here.\n+\tSave and restore original message format.  Use flag in context\n+\tinstead of global.\n+\t(warning): Don't test for enabled warnings here.\n+\t* opts.c (common_handle_option): Handle -fdiagnostics-show-option\n+\there.\n+\n 2005-05-04  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* config/m32r/xm-m32r.h: Don't define HOST_WORDS_BIG_ENDIAN."}, {"sha": "ab0129fb3286afef16ecc8810de6eb898864f678", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2098fe9ed59d4342ee62ae9f796242a0683d8643", "patch": "@@ -337,7 +337,7 @@ Common Joined RejectNegative\n -fdiagnostics-show-location=[once|every-line]\tHow often to emit source location at the beginning of line-wrapped diagnostics\n \n fdiagnostics-show-option\n-Common Var(diagnostics_show_options)\n+Common\n Amend appropriate diagnostic messages with the command line option that controls them.\n \n fdump-"}, {"sha": "e48133299af734884a47a2a601f466c4c95342c6", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=2098fe9ed59d4342ee62ae9f796242a0683d8643", "patch": "@@ -102,6 +102,7 @@ diagnostic_initialize (diagnostic_context *context)\n   memset (context->diagnostic_count, 0, sizeof context->diagnostic_count);\n   context->issue_warnings_are_errors_message = true;\n   context->warning_as_error_requested = false;\n+  context->show_option_requested = false;\n   context->abort_on_error = false;\n   context->internal_error = NULL;\n   diagnostic_starter (context) = default_diagnostic_starter;\n@@ -331,11 +332,17 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \terror_recursion (context);\n     }\n \n+  if (diagnostic->option_index\n+      && ! option_enabled (diagnostic->option_index))\n+    return;\n+\n   context->lock++;\n \n   if (diagnostic_count_diagnostic (context, diagnostic))\n     {\n-      if (diagnostics_show_options && diagnostic->option_index)\n+      const char *saved_format_spec = diagnostic->message.format_spec;\n+\n+      if (context->show_option_requested && diagnostic->option_index)\n \tdiagnostic->message.format_spec\n \t  = ACONCAT ((diagnostic->message.format_spec,\n \t\t      \" [\", cl_options[diagnostic->option_index].opt_text, \"]\", NULL));\n@@ -347,6 +354,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       (*diagnostic_finalizer (context)) (context, diagnostic);\n       pp_flush (context->printer);\n       diagnostic_action_after_output (context, diagnostic);\n+      diagnostic->message.format_spec = saved_format_spec;\n     }\n \n   context->lock--;\n@@ -424,9 +432,6 @@ warning (int opt, const char *msgid, ...)\n   diagnostic_info diagnostic;\n   va_list ap;\n \n-  if (opt && ! option_enabled (opt))\n-    return;\n-\n   va_start (ap, msgid);\n   diagnostic_set_info (&diagnostic, msgid, &ap, input_location, DK_WARNING);\n   diagnostic.option_index = opt;"}, {"sha": "5bbb135ac34faa5c47cf86d6299723397571fcd2", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=2098fe9ed59d4342ee62ae9f796242a0683d8643", "patch": "@@ -73,6 +73,10 @@ struct diagnostic_context\n   /* True if it has been requested that warnings be treated as errors.  */\n   bool warning_as_error_requested;\n \n+  /* True if we should print the command line option which controls\n+     each diagnostic, if known.  */\n+  bool show_option_requested;\n+\n   /* True if we should raise a SIGABRT on errors.  */\n   bool abort_on_error;\n "}, {"sha": "97f89314fb1e2e37a11d90dedf71ef3b706f1516", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2098fe9ed59d4342ee62ae9f796242a0683d8643/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2098fe9ed59d4342ee62ae9f796242a0683d8643", "patch": "@@ -818,6 +818,10 @@ common_handle_option (size_t scode, const char *arg, int value)\n \treturn 0;\n       break;\n \n+    case OPT_fdiagnostics_show_option:\n+      global_dc->show_option_requested = true;\n+      break;\n+\n     case OPT_fdump_:\n       if (!dump_switch_p (arg))\n \treturn 0;"}]}