{"sha": "cddf01232d2ad3843c4f973ed93195be8fab6585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkZjAxMjMyZDJhZDM4NDNjNGY5NzNlZDkzMTk1YmU4ZmFiNjU4NQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-10-22T04:40:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-10-22T04:40:57Z"}, "message": "PR fortran 57893\n\n2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran 57893\n\t* class.c : Include target-memory.h.\n\t(gfc_find_intrinsic_vtab) Build a minimal expression so that\n\tgfc_element_size can be used to obtain the storage size, rather\n\tthat the kind value.\n\n2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran 57893\n\t* gfortran.dg/unlimited_polymorphic_13.f90 : New test.\n\nFrom-SVN: r203915", "tree": {"sha": "389abe357363e85a6283e38c11d31b71d1521bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/389abe357363e85a6283e38c11d31b71d1521bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cddf01232d2ad3843c4f973ed93195be8fab6585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddf01232d2ad3843c4f973ed93195be8fab6585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddf01232d2ad3843c4f973ed93195be8fab6585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddf01232d2ad3843c4f973ed93195be8fab6585/comments", "author": null, "committer": null, "parents": [{"sha": "8223bb782143a6b0317a4a9227b7ba78d1c8d9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8223bb782143a6b0317a4a9227b7ba78d1c8d9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8223bb782143a6b0317a4a9227b7ba78d1c8d9de"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "3539d2cbebdda15cb84169ded3de2cc49cd725b1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cddf01232d2ad3843c4f973ed93195be8fab6585", "patch": "@@ -1,3 +1,11 @@\n+2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran 57893\n+\t* class.c : Include target-memory.h.\n+\t(gfc_find_intrinsic_vtab) Build a minimal expression so that\n+\tgfc_element_size can be used to obtain the storage size, rather\n+\tthat the kind value.\n+\n 2013-10-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58803"}, {"sha": "52b9760b271738638d0427bd0244045415db261f", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=cddf01232d2ad3843c4f973ed93195be8fab6585", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"gfortran.h\"\n #include \"constructor.h\"\n+#include \"target-memory.h\"\n \n /* Inserts a derived type component reference in a data reference chain.\n     TS: base type of the ref chain so far, in which we will pick the component\n@@ -618,7 +619,7 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       if (!ts->u.derived->attr.unlimited_polymorphic)\n \tfclass->attr.abstract = ts->u.derived->attr.abstract;\n       fclass->f2k_derived = gfc_get_namespace (NULL, 0);\n-      if (!gfc_add_flavor (&fclass->attr, FL_DERIVED, NULL, \n+      if (!gfc_add_flavor (&fclass->attr, FL_DERIVED, NULL,\n \t\t\t   &gfc_current_locus))\n \treturn false;\n \n@@ -2135,7 +2136,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t{\n \t  gfc_get_symbol (name, ns, &vtab);\n \t  vtab->ts.type = BT_DERIVED;\n-\t  if (!gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL, \n+\t  if (!gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL,\n \t\t\t       &gfc_current_locus))\n \t    goto cleanup;\n \t  vtab->attr.target = 1;\n@@ -2152,7 +2153,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      gfc_symbol *parent = NULL, *parent_vtab = NULL;\n \n \t      gfc_get_symbol (name, ns, &vtype);\n-\t      if (!gfc_add_flavor (&vtype->attr, FL_DERIVED, NULL, \n+\t      if (!gfc_add_flavor (&vtype->attr, FL_DERIVED, NULL,\n \t\t\t\t   &gfc_current_locus))\n \t\tgoto cleanup;\n \t      vtype->attr.access = ACCESS_PUBLIC;\n@@ -2456,7 +2457,7 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n \t{\n \t  gfc_get_symbol (name, ns, &vtab);\n \t  vtab->ts.type = BT_DERIVED;\n-\t  if (!gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL, \n+\t  if (!gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL,\n \t\t\t       &gfc_current_locus))\n \t    goto cleanup;\n \t  vtab->attr.target = 1;\n@@ -2473,9 +2474,10 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n \t      int hash;\n \t      gfc_namespace *sub_ns;\n \t      gfc_namespace *contained;\n+\t      gfc_expr *e;\n \n \t      gfc_get_symbol (name, ns, &vtype);\n-\t      if (!gfc_add_flavor (&vtype->attr, FL_DERIVED, NULL, \n+\t      if (!gfc_add_flavor (&vtype->attr, FL_DERIVED, NULL,\n \t\t\t\t   &gfc_current_locus))\n \t\tgoto cleanup;\n \t      vtype->attr.access = ACCESS_PUBLIC;\n@@ -2498,12 +2500,16 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n \t      c->ts.type = BT_INTEGER;\n \t      c->ts.kind = 4;\n \t      c->attr.access = ACCESS_PRIVATE;\n-\t      if (ts->type == BT_CHARACTER)\n-\t\tc->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n-\t\t\t\t\t\t   NULL, charlen*ts->kind);\n-\t      else\n-\t\tc->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n-\t\t\t\t\t\t   NULL, ts->kind);\n+\n+\t      /* Build a minimal expression to make use of\n+\t\t target-memory.c/gfc_element_size for 'size'. */\n+\t      e = gfc_get_expr ();\n+\t      e->ts = *ts;\n+\t      e->expr_type = EXPR_VARIABLE;\n+\t      c->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t\t\t\t NULL,\n+\t\t\t\t\t\t (int)gfc_element_size (e));\n+\t      gfc_free_expr (e);\n \n \t      /* Add component _extends.  */\n \t      if (!gfc_add_component (vtype, \"_extends\", &c))"}, {"sha": "ff48a244cee55cbe7cc3d9cf0c905eb3a12edb5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cddf01232d2ad3843c4f973ed93195be8fab6585", "patch": "@@ -1,3 +1,8 @@\n+2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran 57893\n+\t* gfortran.dg/unlimited_polymorphic_13.f90 : New test.\n+\n 2013-10-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58803"}, {"sha": "8b764959c7eec3e1dc56ff4b1ee34f0d147ca96e", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_13.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddf01232d2ad3843c4f973ed93195be8fab6585/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_13.f90?ref=cddf01232d2ad3843c4f973ed93195be8fab6585", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do run }\n+!\n+! PR fortran/58793\n+!\n+! Contributed by  Vladimir Fuka\n+!\n+! Had the wrong value for the storage_size for complex\n+!\n+module m\n+  use iso_fortran_env\n+  implicit none\n+  integer, parameter :: c1 = real_kinds(1)\n+  integer, parameter :: c2 = real_kinds(2)\n+  integer, parameter :: c3 = real_kinds(size(real_kinds)-1)\n+  integer, parameter :: c4 = real_kinds(size(real_kinds))\n+contains\n+ subroutine s(o, k)\n+    class(*) :: o\n+    integer :: k\n+    integer :: sz\n+\n+    select case (k)\n+     case (4)\n+      sz = 32*2\n+     case (8)\n+      sz = 64*2\n+     case (10,16)\n+      sz = 128*2\n+     case default\n+       call abort()\n+    end select\n+\n+    if (storage_size(o) /= sz) call abort()\n+    select type (o)\n+      type is (complex(c1))\n+        if (storage_size(o) /= sz) call abort()\n+      type is (complex(c2))\n+        if (storage_size(o) /= sz) call abort()\n+    end select\n+    select type (o)\n+      type is (complex(c3))\n+        if (storage_size(o) /= sz) call abort()\n+      type is (complex(c4))\n+        if (storage_size(o) /= sz) call abort()\n+    end select\n+  end subroutine s\n+end module m\n+\n+program p\n+ use m\n+ call s((1._c1, 2._c1), c1)\n+ call s((1._c2, 2._c2), c2)\n+ call s((1._c3, 2._c3), c3)\n+ call s((1._c4, 2._c4), c4)\n+end program p"}]}