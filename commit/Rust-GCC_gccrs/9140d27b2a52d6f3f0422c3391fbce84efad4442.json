{"sha": "9140d27b2a52d6f3f0422c3391fbce84efad4442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0MGQyN2IyYTUyZDZmM2YwNDIyYzMzOTFmYmNlODRlZmFkNDQ0Mg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-14T01:55:02Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-14T01:55:02Z"}, "message": "ira-int.h (struct live_range): Rename allocno member to object and change type to ira_object_t.\n\n\t* ira-int.h (struct live_range): Rename allocno member to object and change\n\ttype to ira_object_t.\n\t(struct ira_object): New member live_ranges.\n\t(struct ira_allocno): Remove member live_ranges.\n\t(ALLOCNO_LIVE_RANGES): Remove.\n\t(OBJECT_LIVE_RANGES): New macro.\n\t(ira_create_live_range, ira_copy_live_range_list,\n\tira_merge_live_range_list, ira_live_ranges_intersect_p,\n\tira_finish_live_range, ira_finish_live_range_list): Adjust declarations.\n\t* ira-build.c (ira_create_object): Initialize live ranges here.\n\t(ira_create_allocno): Not here.\n\t(ira_create_live_range): Rename from ira_create_allocno_live_range, arg\n\tchanged to ira_object_t, all callers changed.\n\t(copy_live_range): Rename from copy_allocno_live_range, all callers\n\tchanged.\n\t(ira_copy_live_range_list): Rename from ira_copy_allocno_live_range_list,\n\tall callers changed.\n\t(ira_merge_live_ranges): Rename from ira_merge_allocno_live_range_list,\n\tall callers changed.\n\t(ira_live_ranges_intersect_p): Rename from\n\tira_allocno_live_ranges_intersect_p, all callers changed.\n\t(ira_finish_live_range): Rename from ira_finish_allocno_live_range, all\n\tcallers changed.\n\t(ira_finish_live_range_list): Rename from\n\tira_finish_allocno_live_range_list, all callers changed.\n\t(change_object_in_range_list): Rename from change_allocno_in_range_list,\n\tlast arg changed to ira_object_t, all callers changed.\n\t(finish_allocno): Changed to expect live ranges in the allocno's object.\n\t(move_allocno_live_ranges, copy_allocno_live_ranges,\n\tupdate_bad_spill_attribute, setup_min_max_allocno_live_range_point,\n\tira_flattening, ira_build): Likewise.\n\t* ira-color.c (allocnos_have_intersected_live_ranges_p,\n\tslot_coalesced_allocno_live_ranges_intersect,\n\tsetup_slot_coalesced_allocno_live_ranges, fast_allocation): Likewise.\n\t* ira-conflicts.c (build_conflict_bit_table): Likewise.\n\t* ira-emit.c (add_range_and_copies_from_move_list): Likewise.\n\t* ira-lives.c (make_allocno_born, update_allocno_pressure_excess_length,\n\tmake_allocno_dead, create_start_finish_chains,\n\tremove_some_program_points_and_update_live_ranges,\n\tira_debug_live_range_list): Likewise.\n\nFrom-SVN: r162167", "tree": {"sha": "9c749fb9aac24e8dcbb64a1d5159f2ff5c57e64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c749fb9aac24e8dcbb64a1d5159f2ff5c57e64f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9140d27b2a52d6f3f0422c3391fbce84efad4442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9140d27b2a52d6f3f0422c3391fbce84efad4442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9140d27b2a52d6f3f0422c3391fbce84efad4442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9140d27b2a52d6f3f0422c3391fbce84efad4442/comments", "author": null, "committer": null, "parents": [{"sha": "a49ae2179409cf9ed7e78e93643ec4891e9ae8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49ae2179409cf9ed7e78e93643ec4891e9ae8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49ae2179409cf9ed7e78e93643ec4891e9ae8fe"}], "stats": {"total": 301, "additions": 177, "deletions": 124}, "files": [{"sha": "d645304d16196c0ad1e142c5009de37100d84641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -85,6 +85,47 @@\n \tdealing with objects.\n \t* ira.c (ira_bad_reload_regno_1): Adjusted for dealing with objects.\n \n+\t* ira-int.h (struct live_range): Rename allocno member to object and change\n+\ttype to ira_object_t.\n+\t(struct ira_object): New member live_ranges.\n+\t(struct ira_allocno): Remove member live_ranges.\n+\t(ALLOCNO_LIVE_RANGES): Remove.\n+\t(OBJECT_LIVE_RANGES): New macro.\n+\t(ira_create_live_range, ira_copy_live_range_list,\n+\tira_merge_live_range_list, ira_live_ranges_intersect_p,\n+\tira_finish_live_range, ira_finish_live_range_list): Adjust declarations.\n+\t* ira-build.c (ira_create_object): Initialize live ranges here.\n+\t(ira_create_allocno): Not here.\n+\t(ira_create_live_range): Rename from ira_create_allocno_live_range, arg\n+\tchanged to ira_object_t, all callers changed.\n+\t(copy_live_range): Rename from copy_allocno_live_range, all callers\n+\tchanged.\n+\t(ira_copy_live_range_list): Rename from ira_copy_allocno_live_range_list,\n+\tall callers changed.\n+\t(ira_merge_live_ranges): Rename from ira_merge_allocno_live_range_list,\n+\tall callers changed.\n+\t(ira_live_ranges_intersect_p): Rename from\n+\tira_allocno_live_ranges_intersect_p, all callers changed.\n+\t(ira_finish_live_range): Rename from ira_finish_allocno_live_range, all\n+\tcallers changed.\n+\t(ira_finish_live_range_list): Rename from\n+\tira_finish_allocno_live_range_list, all callers changed.\n+\t(change_object_in_range_list): Rename from change_allocno_in_range_list,\n+\tlast arg changed to ira_object_t, all callers changed.\n+\t(finish_allocno): Changed to expect live ranges in the allocno's object.\n+\t(move_allocno_live_ranges, copy_allocno_live_ranges,\n+\tupdate_bad_spill_attribute, setup_min_max_allocno_live_range_point,\n+\tira_flattening, ira_build): Likewise.\n+\t* ira-color.c (allocnos_have_intersected_live_ranges_p,\n+\tslot_coalesced_allocno_live_ranges_intersect,\n+\tsetup_slot_coalesced_allocno_live_ranges, fast_allocation): Likewise.\n+\t* ira-conflicts.c (build_conflict_bit_table): Likewise.\n+\t* ira-emit.c (add_range_and_copies_from_move_list): Likewise.\n+\t* ira-lives.c (make_allocno_born, update_allocno_pressure_excess_length,\n+\tmake_allocno_dead, create_start_finish_chains,\n+\tremove_some_program_points_and_update_live_ranges,\n+\tira_debug_live_range_list): Likewise.\n+\n 2010-07-13  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR other/44874"}, {"sha": "89fb7eb3726c2f28af34d565826a5b08d09cadd1", "filename": "gcc/ira-build.c", "status": "modified", "additions": 63, "deletions": 57, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -440,6 +440,7 @@ ira_create_object (ira_allocno_t a)\n \t\t\t  reg_class_contents[cover_class]);\n   OBJECT_MIN (obj) = INT_MAX;\n   OBJECT_MAX (obj) = -1;\n+  OBJECT_LIVE_RANGES (obj) = NULL;\n \n   VEC_safe_push (ira_object_t, heap, ira_object_id_map_vec, obj);\n   ira_object_id_map\n@@ -509,7 +510,6 @@ ira_create_allocno (int regno, bool cap_p, ira_loop_tree_node_t loop_tree_node)\n   ALLOCNO_PREV_BUCKET_ALLOCNO (a) = NULL;\n   ALLOCNO_FIRST_COALESCED_ALLOCNO (a) = a;\n   ALLOCNO_NEXT_COALESCED_ALLOCNO (a) = a;\n-  ALLOCNO_LIVE_RANGES (a) = NULL;\n \n   VEC_safe_push (ira_allocno_t, heap, allocno_vec, a);\n   ira_allocnos = VEC_address (ira_allocno_t, allocno_vec);\n@@ -851,13 +851,13 @@ create_cap_allocno (ira_allocno_t a)\n \n /* Create and return allocno live range with given attributes.  */\n live_range_t\n-ira_create_allocno_live_range (ira_allocno_t a, int start, int finish,\n-\t\t\t       live_range_t next)\n+ira_create_live_range (ira_object_t obj, int start, int finish,\n+\t\t       live_range_t next)\n {\n   live_range_t p;\n \n   p = (live_range_t) pool_alloc (live_range_pool);\n-  p->allocno = a;\n+  p->object = obj;\n   p->start = start;\n   p->finish = finish;\n   p->next = next;\n@@ -866,7 +866,7 @@ ira_create_allocno_live_range (ira_allocno_t a, int start, int finish,\n \n /* Copy allocno live range R and return the result.  */\n static live_range_t\n-copy_allocno_live_range (live_range_t r)\n+copy_live_range (live_range_t r)\n {\n   live_range_t p;\n \n@@ -878,15 +878,15 @@ copy_allocno_live_range (live_range_t r)\n /* Copy allocno live range list given by its head R and return the\n    result.  */\n live_range_t\n-ira_copy_allocno_live_range_list (live_range_t r)\n+ira_copy_live_range_list (live_range_t r)\n {\n   live_range_t p, first, last;\n \n   if (r == NULL)\n     return NULL;\n   for (first = last = NULL; r != NULL; r = r->next)\n     {\n-      p = copy_allocno_live_range (r);\n+      p = copy_live_range (r);\n       if (first == NULL)\n \tfirst = p;\n       else\n@@ -900,7 +900,7 @@ ira_copy_allocno_live_range_list (live_range_t r)\n    maintains the order of ranges and tries to minimize number of the\n    result ranges.  */\n live_range_t\n-ira_merge_allocno_live_ranges (live_range_t r1, live_range_t r2)\n+ira_merge_live_ranges (live_range_t r1, live_range_t r2)\n {\n   live_range_t first, last, temp;\n \n@@ -924,7 +924,7 @@ ira_merge_allocno_live_ranges (live_range_t r1, live_range_t r2)\n \t    r1->finish = r2->finish;\n \t  temp = r2;\n \t  r2 = r2->next;\n-\t  ira_finish_allocno_live_range (temp);\n+\t  ira_finish_live_range (temp);\n \t  if (r2 == NULL)\n \t    {\n \t      /* To try to merge with subsequent ranges in r1.  */\n@@ -976,7 +976,7 @@ ira_merge_allocno_live_ranges (live_range_t r1, live_range_t r2)\n \n /* Return TRUE if live ranges R1 and R2 intersect.  */\n bool\n-ira_allocno_live_ranges_intersect_p (live_range_t r1, live_range_t r2)\n+ira_live_ranges_intersect_p (live_range_t r1, live_range_t r2)\n {\n   /* Remember the live ranges are always kept ordered.  */\n   while (r1 != NULL && r2 != NULL)\n@@ -993,21 +993,21 @@ ira_allocno_live_ranges_intersect_p (live_range_t r1, live_range_t r2)\n \n /* Free allocno live range R.  */\n void\n-ira_finish_allocno_live_range (live_range_t r)\n+ira_finish_live_range (live_range_t r)\n {\n   pool_free (live_range_pool, r);\n }\n \n /* Free list of allocno live ranges starting with R.  */\n void\n-ira_finish_allocno_live_range_list (live_range_t r)\n+ira_finish_live_range_list (live_range_t r)\n {\n   live_range_t next_r;\n \n   for (; r != NULL; r = next_r)\n     {\n       next_r = r->next;\n-      ira_finish_allocno_live_range (r);\n+      ira_finish_live_range (r);\n     }\n }\n \n@@ -1034,6 +1034,12 @@ finish_allocno (ira_allocno_t a)\n   enum reg_class cover_class = ALLOCNO_COVER_CLASS (a);\n   ira_object_t obj = ALLOCNO_OBJECT (a);\n \n+  ira_finish_live_range_list (OBJECT_LIVE_RANGES (obj));\n+  ira_object_id_map[OBJECT_CONFLICT_ID (obj)] = NULL;\n+  if (OBJECT_CONFLICT_ARRAY (obj) != NULL)\n+    ira_free (OBJECT_CONFLICT_ARRAY (obj));\n+  pool_free (object_pool, obj);\n+\n   ira_allocnos[ALLOCNO_NUM (a)] = NULL;\n   if (ALLOCNO_HARD_REG_COSTS (a) != NULL)\n     ira_free_cost_vector (ALLOCNO_HARD_REG_COSTS (a), cover_class);\n@@ -1044,13 +1050,7 @@ finish_allocno (ira_allocno_t a)\n   if (ALLOCNO_UPDATED_CONFLICT_HARD_REG_COSTS (a) != NULL)\n     ira_free_cost_vector (ALLOCNO_UPDATED_CONFLICT_HARD_REG_COSTS (a),\n \t\t\t  cover_class);\n-  ira_finish_allocno_live_range_list (ALLOCNO_LIVE_RANGES (a));\n   pool_free (allocno_pool, a);\n-\n-  ira_object_id_map[OBJECT_CONFLICT_ID (obj)] = NULL;\n-  if (OBJECT_CONFLICT_ARRAY (obj) != NULL)\n-    ira_free (OBJECT_CONFLICT_ARRAY (obj));\n-  pool_free (object_pool, obj);\n }\n \n /* Free the memory allocated for all allocnos.  */\n@@ -1696,19 +1696,21 @@ create_allocnos (void)\n    will hardly improve the result.  As a result we speed up regional\n    register allocation.  */\n \n-/* The function changes allocno in range list given by R onto A.  */\n+/* The function changes the object in range list given by R to OBJ.  */\n static void\n-change_allocno_in_range_list (live_range_t r, ira_allocno_t a)\n+change_object_in_range_list (live_range_t r, ira_object_t obj)\n {\n   for (; r != NULL; r = r->next)\n-    r->allocno = a;\n+    r->object = obj;\n }\n \n /* Move all live ranges associated with allocno FROM to allocno TO.  */\n static void\n move_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n {\n-  live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n+  ira_object_t from_obj = ALLOCNO_OBJECT (from);\n+  ira_object_t to_obj = ALLOCNO_OBJECT (to);\n+  live_range_t lr = OBJECT_LIVE_RANGES (from_obj);\n \n   if (internal_flag_ira_verbose > 4 && ira_dump_file != NULL)\n     {\n@@ -1718,17 +1720,19 @@ move_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n \t       ALLOCNO_NUM (to), ALLOCNO_REGNO (to));\n       ira_print_live_range_list (ira_dump_file, lr);\n     }\n-  change_allocno_in_range_list (lr, to);\n-  ALLOCNO_LIVE_RANGES (to)\n-    = ira_merge_allocno_live_ranges (lr, ALLOCNO_LIVE_RANGES (to));\n-  ALLOCNO_LIVE_RANGES (from) = NULL;\n+  change_object_in_range_list (lr, to_obj);\n+  OBJECT_LIVE_RANGES (to_obj)\n+    = ira_merge_live_ranges (lr, OBJECT_LIVE_RANGES (to_obj));\n+  OBJECT_LIVE_RANGES (from_obj) = NULL;\n }\n \n /* Copy all live ranges associated with allocno FROM to allocno TO.  */\n static void\n copy_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n {\n-  live_range_t lr = ALLOCNO_LIVE_RANGES (from);\n+  ira_object_t from_obj = ALLOCNO_OBJECT (from);\n+  ira_object_t to_obj = ALLOCNO_OBJECT (to);\n+  live_range_t lr = OBJECT_LIVE_RANGES (from_obj);\n \n   if (internal_flag_ira_verbose > 4 && ira_dump_file != NULL)\n     {\n@@ -1738,10 +1742,10 @@ copy_allocno_live_ranges (ira_allocno_t from, ira_allocno_t to)\n \t       ALLOCNO_NUM (to), ALLOCNO_REGNO (to));\n       ira_print_live_range_list (ira_dump_file, lr);\n     }\n-  lr = ira_copy_allocno_live_range_list (lr);\n-  change_allocno_in_range_list (lr, to);\n-  ALLOCNO_LIVE_RANGES (to)\n-    = ira_merge_allocno_live_ranges (lr, ALLOCNO_LIVE_RANGES (to));\n+  lr = ira_copy_live_range_list (lr);\n+  change_object_in_range_list (lr, to_obj);\n+  OBJECT_LIVE_RANGES (to_obj)\n+    = ira_merge_live_ranges (lr, OBJECT_LIVE_RANGES (to_obj));\n }\n \n /* Return TRUE if NODE represents a loop with low register\n@@ -2201,20 +2205,22 @@ update_bad_spill_attribute (void)\n     }\n   FOR_EACH_ALLOCNO (a, ai)\n     {\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n       cover_class = ALLOCNO_COVER_CLASS (a);\n       if (cover_class == NO_REGS)\n \tcontinue;\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+      for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n \tbitmap_set_bit (&dead_points[cover_class], r->finish);\n     }\n   FOR_EACH_ALLOCNO (a, ai)\n     {\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n       cover_class = ALLOCNO_COVER_CLASS (a);\n       if (cover_class == NO_REGS)\n \tcontinue;\n       if (! ALLOCNO_BAD_SPILL_P (a))\n \tcontinue;\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+      for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n \t{\n \t  for (i = r->start + 1; i < r->finish; i++)\n \t    if (bitmap_bit_p (&dead_points[cover_class], i))\n@@ -2247,7 +2253,7 @@ setup_min_max_allocno_live_range_point (void)\n   FOR_EACH_ALLOCNO (a, ai)\n     {\n       ira_object_t obj = ALLOCNO_OBJECT (a);\n-      r = ALLOCNO_LIVE_RANGES (a);\n+      r = OBJECT_LIVE_RANGES (obj);\n       if (r == NULL)\n \tcontinue;\n       OBJECT_MAX (obj) = r->finish;\n@@ -2556,7 +2562,7 @@ copy_info_to_removed_store_destinations (int regno)\n void\n ira_flattening (int max_regno_before_emit, int ira_max_point_before_emit)\n {\n-  int i, j, num;\n+  int i, j;\n   bool keep_p;\n   int hard_regs_num;\n   bool new_pseudos_p, merged_p, mem_dest_p;\n@@ -2568,7 +2574,6 @@ ira_flattening (int max_regno_before_emit, int ira_max_point_before_emit)\n   live_range_t r;\n   ira_allocno_iterator ai;\n   ira_copy_iterator ci;\n-  sparseset allocnos_live;\n \n   regno_top_level_allocno_map\n     = (ira_allocno_t *) ira_allocate (max_reg_num () * sizeof (ira_allocno_t));\n@@ -2664,48 +2669,48 @@ ira_flattening (int max_regno_before_emit, int ira_max_point_before_emit)\n     ira_rebuild_start_finish_chains ();\n   if (new_pseudos_p)\n     {\n+      sparseset objects_live;\n+\n       /* Rebuild conflicts.  */\n       FOR_EACH_ALLOCNO (a, ai)\n \t{\n+\t  ira_object_t obj = ALLOCNO_OBJECT (a);\n \t  if (a != regno_top_level_allocno_map[REGNO (ALLOCNO_REG (a))]\n \t      || ALLOCNO_CAP_MEMBER (a) != NULL)\n \t    continue;\n-\t  for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n-\t    ira_assert (r->allocno == a);\n-\t  clear_conflicts (ALLOCNO_OBJECT (a));\n+\t  for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n+\t    ira_assert (r->object == obj);\n+\t  clear_conflicts (obj);\n \t}\n-      allocnos_live = sparseset_alloc (ira_allocnos_num);\n+      objects_live = sparseset_alloc (ira_objects_num);\n       for (i = 0; i < ira_max_point; i++)\n \t{\n \t  for (r = ira_start_point_ranges[i]; r != NULL; r = r->start_next)\n \t    {\n-\t      a = r->allocno;\n+\t      ira_object_t obj = r->object;\n+\t      a = OBJECT_ALLOCNO (obj);\n \t      if (a != regno_top_level_allocno_map[REGNO (ALLOCNO_REG (a))]\n \t\t  || ALLOCNO_CAP_MEMBER (a) != NULL)\n \t\tcontinue;\n-\t      num = ALLOCNO_NUM (a);\n \t      cover_class = ALLOCNO_COVER_CLASS (a);\n-\t      sparseset_set_bit (allocnos_live, num);\n-\t      EXECUTE_IF_SET_IN_SPARSESET (allocnos_live, n)\n+\t      sparseset_set_bit (objects_live, OBJECT_CONFLICT_ID (obj));\n+\t      EXECUTE_IF_SET_IN_SPARSESET (objects_live, n)\n \t\t{\n-\t\t  ira_allocno_t live_a = ira_allocnos[n];\n+\t\t  ira_object_t live_obj = ira_object_id_map[n];\n+\t\t  ira_allocno_t live_a = OBJECT_ALLOCNO (live_obj);\n+\t\t  enum reg_class live_cover = ALLOCNO_COVER_CLASS (live_a);\n \n-\t\t  if (ira_reg_classes_intersect_p\n-\t\t      [cover_class][ALLOCNO_COVER_CLASS (live_a)]\n+\t\t  if (ira_reg_classes_intersect_p[cover_class][live_cover]\n \t\t      /* Don't set up conflict for the allocno with itself.  */\n-\t\t      && num != (int) n)\n-\t\t    {\n-\t\t      ira_object_t obj = ALLOCNO_OBJECT (a);\n-\t\t      ira_object_t live_obj = ALLOCNO_OBJECT (live_a);\n-\t\t      ira_add_conflict (obj, live_obj);\n-\t\t    }\n+\t\t      && live_a != a)\n+\t\t    ira_add_conflict (obj, live_obj);\n \t\t}\n \t    }\n \n \t  for (r = ira_finish_point_ranges[i]; r != NULL; r = r->finish_next)\n-\t    sparseset_clear_bit (allocnos_live, ALLOCNO_NUM (r->allocno));\n+\t    sparseset_clear_bit (objects_live, OBJECT_CONFLICT_ID (r->object));\n \t}\n-      sparseset_free (allocnos_live);\n+      sparseset_free (objects_live);\n       compress_conflict_vecs ();\n     }\n   /* Mark some copies for removing and change allocnos in the rest\n@@ -2951,7 +2956,8 @@ ira_build (bool loops_p)\n \t}\n       nr = 0;\n       FOR_EACH_ALLOCNO (a, ai)\n-\tfor (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+\tfor (r = OBJECT_LIVE_RANGES (ALLOCNO_OBJECT (a)); r != NULL;\n+\t     r = r->next)\n \t  nr++;\n       fprintf (ira_dump_file, \"  regions=%d, blocks=%d, points=%d\\n\",\n \t       VEC_length (loop_p, ira_loops.larray), n_basic_blocks,"}, {"sha": "bea396bba9f8a1a4591877a32b19bc1ddaaf40d3", "filename": "gcc/ira-color.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -94,14 +94,16 @@ static VEC(ira_allocno_t,heap) *removed_splay_allocno_vec;\n static bool\n allocnos_have_intersected_live_ranges_p (ira_allocno_t a1, ira_allocno_t a2)\n {\n+  ira_object_t obj1 = ALLOCNO_OBJECT (a1);\n+  ira_object_t obj2 = ALLOCNO_OBJECT (a2);\n   if (a1 == a2)\n     return false;\n   if (ALLOCNO_REG (a1) != NULL && ALLOCNO_REG (a2) != NULL\n       && (ORIGINAL_REGNO (ALLOCNO_REG (a1))\n \t  == ORIGINAL_REGNO (ALLOCNO_REG (a2))))\n     return false;\n-  return ira_allocno_live_ranges_intersect_p (ALLOCNO_LIVE_RANGES (a1),\n-\t\t\t\t\t      ALLOCNO_LIVE_RANGES (a2));\n+  return ira_live_ranges_intersect_p (OBJECT_LIVE_RANGES (obj1),\n+\t\t\t\t      OBJECT_LIVE_RANGES (obj2));\n }\n \n #ifdef ENABLE_IRA_CHECKING\n@@ -2511,8 +2513,9 @@ slot_coalesced_allocno_live_ranges_intersect_p (ira_allocno_t allocno, int n)\n   for (a = ALLOCNO_NEXT_COALESCED_ALLOCNO (allocno);;\n        a = ALLOCNO_NEXT_COALESCED_ALLOCNO (a))\n     {\n-      if (ira_allocno_live_ranges_intersect_p\n-\t  (slot_coalesced_allocnos_live_ranges[n], ALLOCNO_LIVE_RANGES (a)))\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n+      if (ira_live_ranges_intersect_p\n+\t  (slot_coalesced_allocnos_live_ranges[n], OBJECT_LIVE_RANGES (obj)))\n \treturn true;\n       if (a == allocno)\n \tbreak;\n@@ -2533,9 +2536,10 @@ setup_slot_coalesced_allocno_live_ranges (ira_allocno_t allocno)\n   for (a = ALLOCNO_NEXT_COALESCED_ALLOCNO (allocno);;\n        a = ALLOCNO_NEXT_COALESCED_ALLOCNO (a))\n     {\n-      r = ira_copy_allocno_live_range_list (ALLOCNO_LIVE_RANGES (a));\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n+      r = ira_copy_live_range_list (OBJECT_LIVE_RANGES (obj));\n       slot_coalesced_allocnos_live_ranges[n]\n-\t= ira_merge_allocno_live_ranges\n+\t= ira_merge_live_ranges\n \t  (slot_coalesced_allocnos_live_ranges[n], r);\n       if (a == allocno)\n \tbreak;\n@@ -2606,8 +2610,7 @@ coalesce_spill_slots (ira_allocno_t *spilled_coalesced_allocnos, int num)\n \t}\n     }\n   for (i = 0; i < ira_allocnos_num; i++)\n-    ira_finish_allocno_live_range_list\n-      (slot_coalesced_allocnos_live_ranges[i]);\n+    ira_finish_live_range_list (slot_coalesced_allocnos_live_ranges[i]);\n   ira_free (slot_coalesced_allocnos_live_ranges);\n   return merged_p;\n }\n@@ -3271,7 +3274,7 @@ fast_allocation (void)\n       a = sorted_allocnos[i];\n       obj = ALLOCNO_OBJECT (a);\n       COPY_HARD_REG_SET (conflict_hard_regs, OBJECT_CONFLICT_HARD_REGS (obj));\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+      for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n \tfor (j =  r->start; j <= r->finish; j++)\n \t  IOR_HARD_REG_SET (conflict_hard_regs, used_hard_regs[j]);\n       cover_class = ALLOCNO_COVER_CLASS (a);\n@@ -3298,7 +3301,7 @@ fast_allocation (void)\n \t\t  (prohibited_class_mode_regs[cover_class][mode], hard_regno)))\n \t    continue;\n \t  ALLOCNO_HARD_REGNO (a) = hard_regno;\n-\t  for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+\t  for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n \t    for (k = r->start; k <= r->finish; k++)\n \t      IOR_HARD_REG_SET (used_hard_regs[k],\n \t\t\t\tira_reg_mode_hard_regset[hard_regno][mode]);"}, {"sha": "fc2e842660836c1075cded263c046d6d8b0f5a26", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -133,8 +133,8 @@ build_conflict_bit_table (void)\n     {\n       for (r = ira_start_point_ranges[i]; r != NULL; r = r->start_next)\n \t{\n-\t  ira_allocno_t allocno = r->allocno;\n-\t  ira_object_t obj = ALLOCNO_OBJECT (allocno);\n+\t  ira_object_t obj = r->object;\n+\t  ira_allocno_t allocno = OBJECT_ALLOCNO (obj);\n \t  int id = OBJECT_CONFLICT_ID (obj);\n \n \t  cover_class = ALLOCNO_COVER_CLASS (allocno);\n@@ -161,8 +161,7 @@ build_conflict_bit_table (void)\n \n       for (r = ira_finish_point_ranges[i]; r != NULL; r = r->finish_next)\n \t{\n-\t  ira_allocno_t allocno = r->allocno;\n-\t  ira_object_t obj = ALLOCNO_OBJECT (allocno);\n+\t  ira_object_t obj = r->object;\n \t  sparseset_clear_bit (objects_live, OBJECT_CONFLICT_ID (obj));\n \t}\n     }"}, {"sha": "08d1c34c87c958910437d282470e68bf8603e6fd", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -960,11 +960,11 @@ add_range_and_copies_from_move_list (move_t list, ira_loop_tree_node_t node,\n \t\t cp->num, ALLOCNO_NUM (cp->first),\n \t\t REGNO (ALLOCNO_REG (cp->first)), ALLOCNO_NUM (cp->second),\n \t\t REGNO (ALLOCNO_REG (cp->second)));\n-      r = ALLOCNO_LIVE_RANGES (from);\n+      r = OBJECT_LIVE_RANGES (from_obj);\n       if (r == NULL || r->finish >= 0)\n \t{\n-\t  ALLOCNO_LIVE_RANGES (from)\n-\t    = ira_create_allocno_live_range (from, start, ira_max_point, r);\n+\t  OBJECT_LIVE_RANGES (from_obj)\n+\t    = ira_create_live_range (from_obj, start, ira_max_point, r);\n \t  if (internal_flag_ira_verbose > 2 && ira_dump_file != NULL)\n \t    fprintf (ira_dump_file,\n \t\t     \"    Adding range [%d..%d] to allocno a%dr%d\\n\",\n@@ -981,14 +981,15 @@ add_range_and_copies_from_move_list (move_t list, ira_loop_tree_node_t node,\n \t\t     REGNO (ALLOCNO_REG (from)));\n \t}\n       ira_max_point++;\n-      ALLOCNO_LIVE_RANGES (to)\n-\t= ira_create_allocno_live_range (to, ira_max_point, -1,\n-\t\t\t\t\t ALLOCNO_LIVE_RANGES (to));\n+      OBJECT_LIVE_RANGES (to_obj)\n+\t= ira_create_live_range (to_obj, ira_max_point, -1,\n+\t\t\t\t OBJECT_LIVE_RANGES (to_obj));\n       ira_max_point++;\n     }\n   for (move = list; move != NULL; move = move->next)\n     {\n-      r = ALLOCNO_LIVE_RANGES (move->to);\n+      ira_object_t to_obj = ALLOCNO_OBJECT (move->to);\n+      r = OBJECT_LIVE_RANGES (to_obj);\n       if (r->finish < 0)\n \t{\n \t  r->finish = ira_max_point - 1;\n@@ -1002,12 +1003,15 @@ add_range_and_copies_from_move_list (move_t list, ira_loop_tree_node_t node,\n   EXECUTE_IF_SET_IN_BITMAP (live_through, FIRST_PSEUDO_REGISTER, regno, bi)\n     {\n       ira_allocno_t to;\n+      ira_object_t obj;\n       a = node->regno_allocno_map[regno];\n-      if ((to = ALLOCNO_MEM_OPTIMIZED_DEST (a)) != NULL)\n+      to = ALLOCNO_MEM_OPTIMIZED_DEST (a);\n+      if (to != NULL)\n \ta = to;\n-      ALLOCNO_LIVE_RANGES (a)\n-\t= ira_create_allocno_live_range (a, start, ira_max_point - 1,\n-\t\t\t\t\t ALLOCNO_LIVE_RANGES (a));\n+      obj = ALLOCNO_OBJECT (a);\n+      OBJECT_LIVE_RANGES (obj)\n+\t= ira_create_live_range (obj, start, ira_max_point - 1,\n+\t\t\t\t OBJECT_LIVE_RANGES (obj));\n       if (internal_flag_ira_verbose > 2 && ira_dump_file != NULL)\n \tfprintf\n \t  (ira_dump_file,"}, {"sha": "0c9d1276db3ee94e38eae3f32821b33d7a8b055e", "filename": "gcc/ira-int.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -202,7 +202,7 @@ extern ira_loop_tree_node_t ira_loop_nodes;\n struct live_range\n {\n   /* Allocno whose live range is described by given structure.  */\n-  ira_allocno_t allocno;\n+  ira_object_t object;\n   /* Program point range.  */\n   int start, finish;\n   /* Next structure describing program points where the allocno\n@@ -236,7 +236,12 @@ struct ira_object\n      otherwise.  Only objects belonging to allocnos with the\n      same cover class are in the vector or in the bit vector.  */\n   void *conflicts_array;\n-  /* Allocated size of the previous array.  */\n+  /* Pointer to structures describing at what program point the\n+     object lives.  We always maintain the list in such way that *the\n+     ranges in the list are not intersected and ordered by decreasing\n+     their program points*.  */\n+  live_range_t live_ranges;\n+  /* Allocated size of the conflicts array.  */\n   unsigned int conflicts_array_size;\n   /* A unique number for every instance of this structure which is used\n      to represent it in conflict bit vectors.  */\n@@ -341,11 +346,6 @@ struct ira_allocno\n      list is chained by NEXT_COALESCED_ALLOCNO.  */\n   ira_allocno_t first_coalesced_allocno;\n   ira_allocno_t next_coalesced_allocno;\n-  /* Pointer to structures describing at what program point the\n-     allocno lives.  We always maintain the list in such way that *the\n-     ranges in the list are not intersected and ordered by decreasing\n-     their program points*.  */\n-  live_range_t live_ranges;\n   /* Pointer to a structure describing conflict information about this\n      allocno.  */\n   ira_object_t object;\n@@ -483,7 +483,6 @@ struct ira_allocno\n #define ALLOCNO_TEMP(A) ((A)->temp)\n #define ALLOCNO_FIRST_COALESCED_ALLOCNO(A) ((A)->first_coalesced_allocno)\n #define ALLOCNO_NEXT_COALESCED_ALLOCNO(A) ((A)->next_coalesced_allocno)\n-#define ALLOCNO_LIVE_RANGES(A) ((A)->live_ranges)\n #define ALLOCNO_OBJECT(A) ((A)->object)\n \n #define OBJECT_ALLOCNO(C) ((C)->allocno)\n@@ -498,6 +497,7 @@ struct ira_allocno\n #define OBJECT_MIN(C) ((C)->min)\n #define OBJECT_MAX(C) ((C)->max)\n #define OBJECT_CONFLICT_ID(C) ((C)->id)\n+#define OBJECT_LIVE_RANGES(C) ((C)->live_ranges)\n \n /* Map regno -> allocnos with given regno (see comments for\n    allocno member `next_regno_allocno').  */\n@@ -935,13 +935,13 @@ extern bool ira_conflict_vector_profitable_p (ira_object_t, int);\n extern void ira_allocate_conflict_vec (ira_object_t, int);\n extern void ira_allocate_object_conflicts (ira_object_t, int);\n extern void ira_print_expanded_allocno (ira_allocno_t);\n-extern live_range_t ira_create_allocno_live_range (ira_allocno_t, int, int,\n-\t\t\t\t\t\t   live_range_t);\n-extern live_range_t ira_copy_allocno_live_range_list (live_range_t);\n-extern live_range_t ira_merge_allocno_live_ranges (live_range_t, live_range_t);\n-extern bool ira_allocno_live_ranges_intersect_p (live_range_t, live_range_t);\n-extern void ira_finish_allocno_live_range (live_range_t);\n-extern void ira_finish_allocno_live_range_list (live_range_t);\n+extern live_range_t ira_create_live_range (ira_object_t, int, int,\n+\t\t\t\t\t   live_range_t);\n+extern live_range_t ira_copy_live_range_list (live_range_t);\n+extern live_range_t ira_merge_live_ranges (live_range_t, live_range_t);\n+extern bool ira_live_ranges_intersect_p (live_range_t, live_range_t);\n+extern void ira_finish_live_range (live_range_t);\n+extern void ira_finish_live_range_list (live_range_t);\n extern void ira_free_allocno_updated_costs (ira_allocno_t);\n extern ira_copy_t ira_create_copy (ira_allocno_t, ira_allocno_t,\n \t\t\t\t   int, bool, rtx, ira_loop_tree_node_t);"}, {"sha": "5f5fef52ab269d8c890644989ff5f3e5c19bc8b3", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9140d27b2a52d6f3f0422c3391fbce84efad4442/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=9140d27b2a52d6f3f0422c3391fbce84efad4442", "patch": "@@ -113,18 +113,17 @@ make_hard_regno_dead (int regno)\n static void\n make_allocno_born (ira_allocno_t a)\n {\n-  live_range_t p = ALLOCNO_LIVE_RANGES (a);\n   ira_object_t obj = ALLOCNO_OBJECT (a);\n+  live_range_t p = OBJECT_LIVE_RANGES (obj);\n \n   sparseset_set_bit (allocnos_live, ALLOCNO_NUM (a));\n   IOR_HARD_REG_SET (OBJECT_CONFLICT_HARD_REGS (obj), hard_regs_live);\n   IOR_HARD_REG_SET (OBJECT_TOTAL_CONFLICT_HARD_REGS (obj), hard_regs_live);\n \n   if (p == NULL\n       || (p->finish != curr_point && p->finish + 1 != curr_point))\n-    ALLOCNO_LIVE_RANGES (a)\n-      = ira_create_allocno_live_range (a, curr_point, -1,\n-\t\t\t\t       ALLOCNO_LIVE_RANGES (a));\n+    OBJECT_LIVE_RANGES (obj)\n+      = ira_create_live_range (obj, curr_point, -1, p);\n }\n \n /* Update ALLOCNO_EXCESS_PRESSURE_POINTS_NUM for allocno A.  */\n@@ -140,9 +139,10 @@ update_allocno_pressure_excess_length (ira_allocno_t a)\n        (cl = ira_reg_class_super_classes[cover_class][i]) != LIM_REG_CLASSES;\n        i++)\n     {\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n       if (high_pressure_start_point[cl] < 0)\n \tcontinue;\n-      p = ALLOCNO_LIVE_RANGES (a);\n+      p = OBJECT_LIVE_RANGES (obj);\n       ira_assert (p != NULL);\n       start = (high_pressure_start_point[cl] > p->start\n \t       ? high_pressure_start_point[cl] : p->start);\n@@ -155,9 +155,9 @@ update_allocno_pressure_excess_length (ira_allocno_t a)\n static void\n make_allocno_dead (ira_allocno_t a)\n {\n-  live_range_t p;\n+  ira_object_t obj = ALLOCNO_OBJECT (a);\n+  live_range_t p = OBJECT_LIVE_RANGES (obj);\n \n-  p = ALLOCNO_LIVE_RANGES (a);\n   ira_assert (p != NULL);\n   p->finish = curr_point;\n   update_allocno_pressure_excess_length (a);\n@@ -1160,7 +1160,8 @@ create_start_finish_chains (void)\n \t  ira_max_point * sizeof (live_range_t));\n   FOR_EACH_ALLOCNO (a, ai)\n     {\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n+      ira_object_t obj = ALLOCNO_OBJECT (a);\n+      for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n \t{\n \t  r->start_next = ira_start_point_ranges[r->start];\n \t  ira_start_point_ranges[r->start] = r;\n@@ -1189,22 +1190,21 @@ remove_some_program_points_and_update_live_ranges (void)\n   unsigned i;\n   int n;\n   int *map;\n-  ira_allocno_t a;\n-  ira_allocno_iterator ai;\n+  ira_object_t obj;\n+  ira_object_iterator oi;\n   live_range_t r;\n   bitmap born_or_died;\n   bitmap_iterator bi;\n \n   born_or_died = ira_allocate_bitmap ();\n-  FOR_EACH_ALLOCNO (a, ai)\n-    {\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n-\t{\n-\t  ira_assert (r->start <= r->finish);\n-\t  bitmap_set_bit (born_or_died, r->start);\n+  FOR_EACH_OBJECT (obj, oi)\n+    for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n+      {\n+\tira_assert (r->start <= r->finish);\n+\tbitmap_set_bit (born_or_died, r->start);\n \t  bitmap_set_bit (born_or_died, r->finish);\n-\t}\n-    }\n+      }\n+\n   map = (int *) ira_allocate (sizeof (int) * ira_max_point);\n   n = 0;\n   EXECUTE_IF_SET_IN_BITMAP(born_or_died, 0, i, bi)\n@@ -1216,14 +1216,13 @@ remove_some_program_points_and_update_live_ranges (void)\n     fprintf (ira_dump_file, \"Compressing live ranges: from %d to %d - %d%%\\n\",\n \t     ira_max_point, n, 100 * n / ira_max_point);\n   ira_max_point = n;\n-  FOR_EACH_ALLOCNO (a, ai)\n-    {\n-      for (r = ALLOCNO_LIVE_RANGES (a); r != NULL; r = r->next)\n-\t{\n-\t  r->start = map[r->start];\n-\t  r->finish = map[r->finish];\n-\t}\n-    }\n+\n+  FOR_EACH_OBJECT (obj, oi)\n+    for (r = OBJECT_LIVE_RANGES (obj); r != NULL; r = r->next)\n+      {\n+\tr->start = map[r->start];\n+\tr->finish = map[r->finish];\n+      }\n   ira_free (map);\n }\n \n@@ -1247,8 +1246,9 @@ ira_debug_live_range_list (live_range_t r)\n static void\n print_allocno_live_ranges (FILE *f, ira_allocno_t a)\n {\n+  ira_object_t obj = ALLOCNO_OBJECT (a);\n   fprintf (f, \" a%d(r%d):\", ALLOCNO_NUM (a), ALLOCNO_REGNO (a));\n-  ira_print_live_range_list (f, ALLOCNO_LIVE_RANGES (a));\n+  ira_print_live_range_list (f, OBJECT_LIVE_RANGES (obj));\n }\n \n /* Print live ranges of allocno A to stderr.  */"}]}