{"sha": "cd048831883f3b3acdd4dc315cc44df8aea04ed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwNDg4MzE4ODNmM2IzYWNkZDRkYzMxNWNjNDRkZjhhZWEwNGVkMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-08T10:49:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-02-08T10:49:27Z"}, "message": "(emit_push_insn): If REG is zero, don't set regs here.\n\nFrom-SVN: r3439", "tree": {"sha": "566b3fa5c3691dcc53d41783550df0c5ea1d9d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/566b3fa5c3691dcc53d41783550df0c5ea1d9d4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd048831883f3b3acdd4dc315cc44df8aea04ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd048831883f3b3acdd4dc315cc44df8aea04ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd048831883f3b3acdd4dc315cc44df8aea04ed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd048831883f3b3acdd4dc315cc44df8aea04ed0/comments", "author": null, "committer": null, "parents": [{"sha": "e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cf2d7e557f1bee5f121bb57c96070856f0a43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cf2d7e557f1bee5f121bb57c96070856f0a43f"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "dfc978a828b72cfa1a2d1f6b435f62f5181b1b74", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd048831883f3b3acdd4dc315cc44df8aea04ed0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd048831883f3b3acdd4dc315cc44df8aea04ed0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cd048831883f3b3acdd4dc315cc44df8aea04ed0", "patch": "@@ -1728,11 +1728,14 @@ gen_push_operand ()\n \n    ALIGN (in bytes) is maximum alignment we can assume.\n \n-   If PARTIAL is nonzero, then copy that many of the first words\n-   of X into registers starting with REG, and push the rest of X.\n+   If PARTIAL and REG are both nonzero, then copy that many of the first\n+   words of X into registers starting with REG, and push the rest of X.\n    The amount of space pushed is decreased by PARTIAL words,\n    rounded *down* to a multiple of PARM_BOUNDARY.\n    REG must be a hard register in this case.\n+   If REG is zero but PARTIAL is not, take any all others actions for an\n+   argument partially in registers, but do not actually load any\n+   registers.\n \n    EXTRA is the amount in bytes of extra space to leave next to this arg.\n    This is ignored if an argument block has already been allocated.\n@@ -2042,7 +2045,7 @@ emit_push_insn (x, mode, type, size, align, partial, reg, extra,\n   /* If part should go in registers, copy that part\n      into the appropriate registers.  Do this now, at the end,\n      since mem-to-mem copies above may do function calls.  */\n-  if (partial > 0)\n+  if (partial > 0 && reg != 0)\n     move_block_to_reg (REGNO (reg), x, partial, mode);\n \n   if (extra && args_addr == 0 && where_pad == stack_direction)"}]}