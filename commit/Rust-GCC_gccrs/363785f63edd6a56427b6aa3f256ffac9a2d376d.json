{"sha": "363785f63edd6a56427b6aa3f256ffac9a2d376d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzNzg1ZjYzZWRkNmE1NjQyN2I2YWEzZjI1NmZmYWM5YTJkMzc2ZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-08-15T14:16:56Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-08-15T14:16:56Z"}, "message": "rs6000.c (rs6000_emit_move): Use SDmode for load/store from/to non-floating class pseudo.\n\n2014-08-15  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Use SDmode for\n\tload/store from/to non-floating class pseudo.\n\nFrom-SVN: r214023", "tree": {"sha": "d886728242b3aebd8e545464fab6b08a692d885a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d886728242b3aebd8e545464fab6b08a692d885a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/363785f63edd6a56427b6aa3f256ffac9a2d376d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363785f63edd6a56427b6aa3f256ffac9a2d376d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363785f63edd6a56427b6aa3f256ffac9a2d376d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363785f63edd6a56427b6aa3f256ffac9a2d376d/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "592f32fa9bda0f9d685e1221ff7576712af1b73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592f32fa9bda0f9d685e1221ff7576712af1b73b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592f32fa9bda0f9d685e1221ff7576712af1b73b"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "2b68ebb4b9a51ee429d1de5b6aca833c0d37d6e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363785f63edd6a56427b6aa3f256ffac9a2d376d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363785f63edd6a56427b6aa3f256ffac9a2d376d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=363785f63edd6a56427b6aa3f256ffac9a2d376d", "patch": "@@ -1,3 +1,8 @@\n+2014-08-15  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Use SDmode for\n+\tload/store from/to non-floating class pseudo.\n+\n 2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* input.c (diagnostic_file_cache_fini): Fix typo in comment."}, {"sha": "897bb922d2d6acfd93c4e3290a83bc4ec1da86e6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363785f63edd6a56427b6aa3f256ffac9a2d376d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363785f63edd6a56427b6aa3f256ffac9a2d376d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=363785f63edd6a56427b6aa3f256ffac9a2d376d", "patch": "@@ -8308,6 +8308,30 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       eliminate_regs (cfun->machine->sdmode_stack_slot, VOIDmode, NULL_RTX);\n \n \n+  /* Transform (p0:DD, (SUBREG:DD p1:SD)) to ((SUBREG:SD p0:DD),\n+     p1:SD) if p1 is not of floating point class and p0 is spilled as\n+     we can have no analogous movsd_store for this.  */\n+  if (lra_in_progress && mode == DDmode\n+      && REG_P (operands[0]) && REGNO (operands[0]) >= FIRST_PSEUDO_REGISTER\n+      && reg_preferred_class (REGNO (operands[0])) == NO_REGS\n+      && GET_CODE (operands[1]) == SUBREG && REG_P (SUBREG_REG (operands[1]))\n+      && GET_MODE (SUBREG_REG (operands[1])) == SDmode)\n+    {\n+      enum reg_class cl;\n+      int regno = REGNO (SUBREG_REG (operands[1]));\n+\n+      if (regno >= FIRST_PSEUDO_REGISTER)\n+\t{\n+\t  cl = reg_preferred_class (regno);\n+\t  regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][1];\n+\t}\n+      if (regno >= 0 && ! FP_REGNO_P (regno))\n+\t{\n+\t  mode = SDmode;\n+\t  operands[0] = gen_lowpart_SUBREG (SDmode, operands[0]);\n+\t  operands[1] = SUBREG_REG (operands[1]);\n+\t}\n+    }\n   if (lra_in_progress\n       && mode == SDmode\n       && REG_P (operands[0]) && REGNO (operands[0]) >= FIRST_PSEUDO_REGISTER\n@@ -8338,6 +8362,30 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \tgcc_unreachable();\n       return;\n     }\n+  /* Transform ((SUBREG:DD p0:SD), p1:DD) to (p0:SD, (SUBREG:SD\n+     p:DD)) if p0 is not of floating point class and p1 is spilled as\n+     we can have no analogous movsd_load for this.  */\n+  if (lra_in_progress && mode == DDmode\n+      && GET_CODE (operands[0]) == SUBREG && REG_P (SUBREG_REG (operands[0]))\n+      && GET_MODE (SUBREG_REG (operands[0])) == SDmode\n+      && REG_P (operands[1]) && REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER\n+      && reg_preferred_class (REGNO (operands[1])) == NO_REGS)\n+    {\n+      enum reg_class cl;\n+      int regno = REGNO (SUBREG_REG (operands[0]));\n+\n+      if (regno >= FIRST_PSEUDO_REGISTER)\n+\t{\n+\t  cl = reg_preferred_class (regno);\n+\t  regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][0];\n+\t}\n+      if (regno >= 0 && ! FP_REGNO_P (regno))\n+\t{\n+\t  mode = SDmode;\n+\t  operands[0] = SUBREG_REG (operands[0]);\n+\t  operands[1] = gen_lowpart_SUBREG (SDmode, operands[1]);\n+\t}\n+    }\n   if (lra_in_progress\n       && mode == SDmode\n       && (REG_P (operands[0])"}]}