{"sha": "b55eb41058252a2775fad91b3f77beec6fcc1b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1ZWI0MTA1ODI1MmEyNzc1ZmFkOTFiM2Y3N2JlZWM2ZmNjMWI1Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-06T11:41:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-06T11:41:00Z"}, "message": "re PR tree-optimization/51245 (ICE in vn_reference_insert_pieces, at tree-ssa-sccvn.c:1983)\n\n2011-12-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51245\n\t* tree-ssa-sccvn.c (vn_reference_lookup_or_insert_constant_for_pieces):\n\tNew function.\n\t(vn_reference_lookup_3): Use it.  Properly valueize all refs\n\twe create.\n\n\t* gcc.dg/torture/pr51245.c: New testcase.\n\nFrom-SVN: r182044", "tree": {"sha": "1e6df1ddf0481659cd905e499433b41246809813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6df1ddf0481659cd905e499433b41246809813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55eb41058252a2775fad91b3f77beec6fcc1b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55eb41058252a2775fad91b3f77beec6fcc1b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55eb41058252a2775fad91b3f77beec6fcc1b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55eb41058252a2775fad91b3f77beec6fcc1b5b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "230f834641d980c3a31aeebb7971719721d26831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/230f834641d980c3a31aeebb7971719721d26831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/230f834641d980c3a31aeebb7971719721d26831"}], "stats": {"total": 93, "additions": 69, "deletions": 24}, "files": [{"sha": "1268439d763dab8b216fc4c5d834a7b012971fa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b55eb41058252a2775fad91b3f77beec6fcc1b5b", "patch": "@@ -1,3 +1,11 @@\n+2011-12-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51245\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_or_insert_constant_for_pieces):\n+\tNew function.\n+\t(vn_reference_lookup_3): Use it.  Properly valueize all refs\n+\twe create.\n+\n 2011-12-06  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.c (darwin_rs6000_override_options): Initialize"}, {"sha": "248b284efa7cadbd87b43a071d8745ab18b60c87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b55eb41058252a2775fad91b3f77beec6fcc1b5b", "patch": "@@ -1,3 +1,8 @@\n+2011-12-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51245\n+\t* gcc.dg/torture/pr51245.c: New testcase.\n+\n 2011-12-06  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/51427"}, {"sha": "e5e2ded1308ea6e79bd922694397b5b2390c212e", "filename": "gcc/testsuite/gcc.dg/torture/pr51245.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51245.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51245.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51245.c?ref=b55eb41058252a2775fad91b3f77beec6fcc1b5b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+struct S { int s; } a, *b, **c;\n+int d;\n+\n+struct S\n+foo (void)\n+{\n+  struct S s = { 0 }, *e = &a;\n+  if (d)\n+    **c = *b;\n+  while (1)\n+    {\n+      *b = s;\n+      *e = *b;\n+      if (a.s)\n+\tbreak;\n+    }\n+  return **c;\n+}"}, {"sha": "9adf3ecc1ea243a129fd07820e9f8c7df75a51d6", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55eb41058252a2775fad91b3f77beec6fcc1b5b/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b55eb41058252a2775fad91b3f77beec6fcc1b5b", "patch": "@@ -1337,6 +1337,33 @@ vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *vr_)\n   return NULL;\n }\n \n+/* Lookup an existing or insert a new vn_reference entry into the\n+   value table for the VUSE, SET, TYPE, OPERANDS reference which\n+   has the constant value CST.  */\n+\n+static vn_reference_t\n+vn_reference_lookup_or_insert_constant_for_pieces (tree vuse,\n+\t\t\t\t\t\t   alias_set_type set,\n+\t\t\t\t\t\t   tree type,\n+\t\t\t\t\t\t   VEC (vn_reference_op_s,\n+\t\t\t\t\t\t\theap) *operands,\n+\t\t\t\t\t\t   tree cst)\n+{\n+  struct vn_reference_s vr1;\n+  vn_reference_t result;\n+  vr1.vuse = vuse;\n+  vr1.operands = operands;\n+  vr1.type = type;\n+  vr1.set = set;\n+  vr1.hashcode = vn_reference_compute_hash (&vr1);\n+  if (vn_reference_lookup_1 (&vr1, &result))\n+    return result;\n+  return vn_reference_insert_pieces (vuse, set, type,\n+\t\t\t\t     VEC_copy (vn_reference_op_s, heap,\n+\t\t\t\t\t       operands), cst,\n+\t\t\t\t     get_or_alloc_constant_value_id (cst));\n+}\n+\n /* Callback for walk_non_aliased_vuses.  Tries to perform a lookup\n    from the statement defining VUSE and if not successful tries to\n    translate *REFP and VR_ through an aggregate copy at the defintion\n@@ -1416,11 +1443,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  && offset2 + size2 >= offset + maxsize)\n \t{\n \t  tree val = build_zero_cst (vr->type);\n-\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n-\t  return vn_reference_insert_pieces (vuse, vr->set, vr->type,\n-\t\t\t\t\t     VEC_copy (vn_reference_op_s,\n-\t\t\t\t\t\t       heap, vr->operands),\n-\t\t\t\t\t     val, value_id);\n+\t  return vn_reference_lookup_or_insert_constant_for_pieces\n+\t           (vuse, vr->set, vr->type, vr->operands, val);\n \t}\n     }\n \n@@ -1440,11 +1464,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  && offset2 + size2 >= offset + maxsize)\n \t{\n \t  tree val = build_zero_cst (vr->type);\n-\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n-\t  return vn_reference_insert_pieces (vuse, vr->set, vr->type,\n-\t\t\t\t\t     VEC_copy (vn_reference_op_s,\n-\t\t\t\t\t\t       heap, vr->operands),\n-\t\t\t\t\t     val, value_id);\n+\t  return vn_reference_lookup_or_insert_constant_for_pieces\n+\t           (vuse, vr->set, vr->type, vr->operands, val);\n \t}\n     }\n \n@@ -1484,13 +1505,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t\t\t\t\t\t   / BITS_PER_UNIT),\n \t\t\t\t\t\tref->size / BITS_PER_UNIT);\n \t      if (val)\n-\t\t{\n-\t\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n-\t\t  return vn_reference_insert_pieces\n-\t\t           (vuse, vr->set, vr->type,\n-\t\t\t    VEC_copy (vn_reference_op_s, heap, vr->operands),\n-\t\t\t    val, value_id);\n-\t\t}\n+\t\treturn vn_reference_lookup_or_insert_constant_for_pieces\n+\t\t         (vuse, vr->set, vr->type, vr->operands, val);\n \t    }\n \t}\n     }\n@@ -1543,13 +1559,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t\t    }\n \t\t}\n \t      if (val)\n-\t\t{\n-\t\t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n-\t\t  return vn_reference_insert_pieces\n-\t\t           (vuse, vr->set, vr->type,\n-\t\t\t    VEC_copy (vn_reference_op_s, heap, vr->operands),\n-\t\t\t    val, value_id);\n-\t\t}\n+\t\treturn vn_reference_lookup_or_insert_constant_for_pieces\n+\t\t         (vuse, vr->set, vr->type, vr->operands, val);\n \t    }\n \t}\n     }\n@@ -1635,6 +1646,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       FOR_EACH_VEC_ELT (vn_reference_op_s, rhs, j, vro)\n \tVEC_replace (vn_reference_op_s, vr->operands, i + 1 + j, vro);\n       VEC_free (vn_reference_op_s, heap, rhs);\n+      vr->operands = valueize_refs (vr->operands);\n       vr->hashcode = vn_reference_compute_hash (vr);\n \n       /* Adjust *ref from the new operands.  */"}]}