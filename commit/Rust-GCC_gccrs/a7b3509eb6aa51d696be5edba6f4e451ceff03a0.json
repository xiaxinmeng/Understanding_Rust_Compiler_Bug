{"sha": "a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdiMzUwOWViNmFhNTFkNjk2YmU1ZWRiYTZmNGU0NTFjZWZmMDNhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-03T08:25:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-03T08:25:22Z"}, "message": "re PR tree-optimization/91033 (ICE in vect_analyze_loop, at tree-vect-loop.c:2416)\n\n\tPR tree-optimization/91033\n\t* tree-vectorizer.h (vect_mark_stmts_to_be_vectorized,\n\tvect_analyze_data_refs): Add bool * arguments.\n\t* tree-vect-data-refs.c (vect_analyze_data_refs): Add fatal argument,\n\tif failure is due to scatter/gather, set *fatal to false if non-NULL.\n\t* tree-vect-stmts.c (vect_mark_stmts_to_be_vectorized): Likewise.\n\t* tree-vect-loop.c (vect_analyze_loop_2): Adjust\n\tvect_mark_stmts_to_be_vectorized and vect_analyze_data_refs callers.\n\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Adjust\n\tvect_analyze_data_refs caller.\n\n\t* gcc.target/i386/pr91033.c: New test.\n\nFrom-SVN: r272989", "tree": {"sha": "18fdfea0a32e9d6ffd8e5b7473c2100bf0e930ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18fdfea0a32e9d6ffd8e5b7473c2100bf0e930ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49d0d5fc6f893804061894202596933e0c396705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d0d5fc6f893804061894202596933e0c396705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d0d5fc6f893804061894202596933e0c396705"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "743b85d85bdfb3668b359bf10614624adcda8402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -1,5 +1,16 @@\n 2019-07-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/91033\n+\t* tree-vectorizer.h (vect_mark_stmts_to_be_vectorized,\n+\tvect_analyze_data_refs): Add bool * arguments.\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Add fatal argument,\n+\tif failure is due to scatter/gather, set *fatal to false if non-NULL.\n+\t* tree-vect-stmts.c (vect_mark_stmts_to_be_vectorized): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Adjust\n+\tvect_mark_stmts_to_be_vectorized and vect_analyze_data_refs callers.\n+\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Adjust\n+\tvect_analyze_data_refs caller.\n+\n \t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE__SCANTEMP_\n \tclause.\n \t* tree.h (OMP_CLAUSE_DECL): Use OMP_CLAUSE__SCANTEMP_ instead of"}, {"sha": "fc960bb7e1fde42f09699b1637ff8dc2e348de30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -1,3 +1,8 @@\n+2019-07-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/91033\n+\t* gcc.target/i386/pr91033.c: New test.\n+\t\n 2019-07-03  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/task2.adb, gnat.dg/task2_pkg.adb,"}, {"sha": "43d99d5a7dce9d0f58b180312c72071b15e72b9d", "filename": "gcc/testsuite/gcc.target/i386/pr91033.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91033.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91033.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91033.c?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/91033 */\n+/* { dg-do compile { target pthread } } */\n+/* { dg-options \"-march=knl -O2 -fopenmp-simd -ftree-parallelize-loops=2\" } */\n+\n+#define N 1024\n+int a[N];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (4)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}"}, {"sha": "cf9cee5deb8b33a8f22b6e297cc8dd02ec095516", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -4160,7 +4160,7 @@ vect_find_stmt_data_reference (loop_p loop, gimple *stmt,\n */\n \n opt_result\n-vect_analyze_data_refs (vec_info *vinfo, poly_uint64 *min_vf)\n+vect_analyze_data_refs (vec_info *vinfo, poly_uint64 *min_vf, bool *fatal)\n {\n   struct loop *loop = NULL;\n   unsigned int i;\n@@ -4386,12 +4386,16 @@ vect_analyze_data_refs (vec_info *vinfo, poly_uint64 *min_vf)\n \t\t\t\t\t  as_a <loop_vec_info> (vinfo),\n \t\t\t\t\t  &gs_info)\n \t      || !get_vectype_for_scalar_type (TREE_TYPE (gs_info.offset)))\n-\t    return opt_result::failure_at\n-\t      (stmt_info->stmt,\n-\t       (gatherscatter == GATHER) ?\n-\t       \"not vectorized: not suitable for gather load %G\" :\n-\t       \"not vectorized: not suitable for scatter store %G\",\n-\t       stmt_info->stmt);\n+\t    {\n+\t      if (fatal)\n+\t\t*fatal = false;\n+\t      return opt_result::failure_at\n+\t\t\t(stmt_info->stmt,\n+\t\t\t (gatherscatter == GATHER)\n+\t\t\t ? \"not vectorized: not suitable for gather load %G\"\n+\t\t\t : \"not vectorized: not suitable for scatter store %G\",\n+\t\t\t stmt_info->stmt);\n+\t    }\n \t  STMT_VINFO_GATHER_SCATTER_P (stmt_info) = gatherscatter;\n \t}\n     }"}, {"sha": "c46cd9d56f68208d3380dd1295a24c965fe1be83", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -1901,7 +1901,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n   /* Analyze the data references and also adjust the minimal\n      vectorization factor according to the loads and stores.  */\n \n-  ok = vect_analyze_data_refs (loop_vinfo, &min_vf);\n+  ok = vect_analyze_data_refs (loop_vinfo, &min_vf, &fatal);\n   if (!ok)\n     {\n       if (dump_enabled_p ())\n@@ -1932,7 +1932,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal, unsigned *n_stmts)\n \n   /* Data-flow analysis to detect stmts that do not need to be vectorized.  */\n \n-  ok = vect_mark_stmts_to_be_vectorized (loop_vinfo);\n+  ok = vect_mark_stmts_to_be_vectorized (loop_vinfo, &fatal);\n   if (!ok)\n     {\n       if (dump_enabled_p ())"}, {"sha": "1aaf10eee2c4c2d330b75d880fb98402f1c7393c", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -2861,7 +2861,7 @@ vect_slp_analyze_bb_1 (gimple_stmt_iterator region_begin,\n \n   /* Analyze the data references.  */\n \n-  if (!vect_analyze_data_refs (bb_vinfo, &min_vf))\n+  if (!vect_analyze_data_refs (bb_vinfo, &min_vf, NULL))\n     {\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}, {"sha": "313b1b91a6d4df77be7c405e5510092983684aa3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -608,7 +608,7 @@ process_use (stmt_vec_info stmt_vinfo, tree use, loop_vec_info loop_vinfo,\n    This pass detects such stmts.  */\n \n opt_result\n-vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n+vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo, bool *fatal)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n@@ -778,7 +778,11 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t    = process_use (stmt_vinfo, gs_info.offset, loop_vinfo, relevant,\n \t\t\t   &worklist, true);\n \t  if (!res)\n-\t    return res;\n+\t    {\n+\t      if (fatal)\n+\t\t*fatal = false;\n+\t      return res;\n+\t    }\n \t}\n     } /* while worklist */\n "}, {"sha": "0dd29f851207439eb0d476fbbbd3c5ce1e5ca90e", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7b3509eb6aa51d696be5edba6f4e451ceff03a0/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a7b3509eb6aa51d696be5edba6f4e451ceff03a0", "patch": "@@ -1501,7 +1501,7 @@ extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n extern stmt_vec_info vect_finish_replace_stmt (stmt_vec_info, gimple *);\n extern stmt_vec_info vect_finish_stmt_generation (stmt_vec_info, gimple *,\n \t\t\t\t\t\t  gimple_stmt_iterator *);\n-extern opt_result vect_mark_stmts_to_be_vectorized (loop_vec_info);\n+extern opt_result vect_mark_stmts_to_be_vectorized (loop_vec_info, bool *);\n extern tree vect_get_store_rhs (stmt_vec_info);\n extern tree vect_get_vec_def_for_operand_1 (stmt_vec_info, enum vect_def_type);\n extern tree vect_get_vec_def_for_operand (tree, stmt_vec_info, tree = NULL);\n@@ -1559,7 +1559,7 @@ extern bool vect_check_gather_scatter (stmt_vec_info, loop_vec_info,\n \t\t\t\t       gather_scatter_info *);\n extern opt_result vect_find_stmt_data_reference (loop_p, gimple *,\n \t\t\t\t\t\t vec<data_reference_p> *);\n-extern opt_result vect_analyze_data_refs (vec_info *, poly_uint64 *);\n+extern opt_result vect_analyze_data_refs (vec_info *, poly_uint64 *, bool *);\n extern void vect_record_base_alignments (vec_info *);\n extern tree vect_create_data_ref_ptr (stmt_vec_info, tree, struct loop *, tree,\n \t\t\t\t      tree *, gimple_stmt_iterator *,"}]}