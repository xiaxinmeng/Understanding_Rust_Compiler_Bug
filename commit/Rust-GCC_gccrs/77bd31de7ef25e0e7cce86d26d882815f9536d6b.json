{"sha": "77bd31de7ef25e0e7cce86d26d882815f9536d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiZDMxZGU3ZWYyNWUwZTdjY2U4NmQyNmQ4ODI4MTVmOTUzNmQ2Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-10-28T14:57:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-10-28T14:57:50Z"}, "message": "re PR tree-optimization/33920 (Segfault in combine_blocks/tree-if-conv.c)\n\n        PR tree-optimization/33920\n        * tree-if-conv.c (tree_if_conversion): Force predicate of single\n        successor bb to true when predecessor bb has NULL predicate.\n        (find_phi_replacement_condition): Assert that tmp_cond is non-null.\n\ntestsuite/ChangeLog:\n\n        PR tree-optimization/33920\n        * gcc.dg/tree-ssa/pr33290.c: New test.\n\nFrom-SVN: r129696", "tree": {"sha": "67b12a9a6f98f99e2f991cab8fa948036244dbdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67b12a9a6f98f99e2f991cab8fa948036244dbdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77bd31de7ef25e0e7cce86d26d882815f9536d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bd31de7ef25e0e7cce86d26d882815f9536d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bd31de7ef25e0e7cce86d26d882815f9536d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bd31de7ef25e0e7cce86d26d882815f9536d6b/comments", "author": null, "committer": null, "parents": [{"sha": "c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "7ec6c5710e3ee65b0808c3d1e082f79c71f073c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77bd31de7ef25e0e7cce86d26d882815f9536d6b", "patch": "@@ -1,3 +1,10 @@\n+2007-10-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/33920\n+\t* tree-if-conv.c (tree_if_conversion): Force predicate of single\n+\tsuccessor bb to true when predecessor bb has NULL predicate.\n+\t(find_phi_replacement_condition): Assert that tmp_cond is non-null.\n+\n 2007-10-28  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.md: Add combiner patterns for DImode extensions"}, {"sha": "2988c0c378d364467c19324b57dadf96d5d5a16e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77bd31de7ef25e0e7cce86d26d882815f9536d6b", "patch": "@@ -1,3 +1,9 @@\n+2007-10-28  Martin Michlmayr  <tbm@cyrius.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/33920\n+\t* gcc.dg/tree-ssa/pr33290.c: New test.\n+\n 2007-10-27 Jerry DeLisle <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31306"}, {"sha": "1cece8163d2332f937ba3fee124884330dbf81c4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33920.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33920.c?ref=77bd31de7ef25e0e7cce86d26d882815f9536d6b", "patch": "@@ -0,0 +1,51 @@\n+/* Testcase by Martin Michlmayr <tbm@cyrius.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef union lispunion *object;\n+struct character\n+{\n+  long e;\n+};\n+extern struct symbol Cnil_body;\n+extern struct symbol Ct_body;\n+struct vector\n+{\n+  object *v_self;\n+};\n+union lispunion\n+{\n+  struct vector v;\n+};\n+void init_code ()\n+{\n+  object V659;\n+  object _x, _y;\n+  object V643;\n+  long V648;\n+  unsigned char V653;\n+  object V651;\n+  object V654;\n+  object V658;\n+\n+T1240:\n+  if (V648 >= (long)V651)\n+    goto T1243;\n+  V653 = ((char *) V654->v.v_self)[V648];\n+  V659 = (object) V654 + V653;\n+T1261:\n+  V658 =\n+    (object)\n+     V659 ? (object) & Ct_body : (object) & Cnil_body;\n+  if (V658 == (object) & Cnil_body)\n+    goto T1249;\n+  goto T1224;\n+T1249:\n+ V648 = (long) V648 + 1;\n+  goto T1240;\n+T1243:\n+  V643 = (object) & Cnil_body;\n+T1224:\n+  _y = V643;\n+  number_plus (_x, _y);\n+}"}, {"sha": "9d2fe2657912572d1925d1c8ec0b977f17f4c6ea", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77bd31de7ef25e0e7cce86d26d882815f9536d6b/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=77bd31de7ef25e0e7cce86d26d882815f9536d6b", "patch": "@@ -189,8 +189,14 @@ tree_if_conversion (struct loop *loop, bool for_vectorizer)\n       if (single_succ_p (bb))\n \t{\n \t  basic_block bb_n = single_succ (bb);\n-\t  if (cond != NULL_TREE)\n-\t    add_to_predicate_list (bb_n, cond);\n+\n+\t  /* Successor bb inherits predicate of its predecessor. If there\n+\t     is no predicate in predecessor bb, then consider successor bb\n+\t     as always executed.  */\n+\t  if (cond == NULL_TREE)\n+\t    cond = boolean_true_node;\n+\n+\t  add_to_predicate_list (bb_n, cond);\n \t}\n     }\n \n@@ -724,6 +730,8 @@ find_phi_replacement_condition (struct loop *loop,\n \n   /* Select condition that is not TRUTH_NOT_EXPR.  */\n   tmp_cond = (first_edge->src)->aux;\n+  gcc_assert (tmp_cond);\n+\n   if (TREE_CODE (tmp_cond) == TRUTH_NOT_EXPR)\n     {\n       edge tmp_edge;"}]}