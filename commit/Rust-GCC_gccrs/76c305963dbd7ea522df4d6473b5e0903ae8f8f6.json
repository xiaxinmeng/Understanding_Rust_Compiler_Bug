{"sha": "76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZjMzA1OTYzZGJkN2VhNTIyZGY0ZDY0NzNiNWUwOTAzYWU4ZjhmNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-22T13:29:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-22T13:29:19Z"}, "message": "(INIT_CUMULATIVE_ARGS): Pass just the return value type to aggregate_value_p.\n\nFrom-SVN: r5385", "tree": {"sha": "337d93fbb9aca148674190d35038dbfd28f221a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337d93fbb9aca148674190d35038dbfd28f221a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/comments", "author": null, "committer": null, "parents": [{"sha": "3d0a83e8708b3350abdab2cbefb151842d5115c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0a83e8708b3350abdab2cbefb151842d5115c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0a83e8708b3350abdab2cbefb151842d5115c6"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "ad12ecbcdecda7ab21810606465ac2e81d5fd383", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -462,7 +462,7 @@ enum reg_class\n    For a library call, FNTYPE is 0.\n    On the ARM, the offset starts at 0.  */\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME)  \\\n-  ((CUM) = (((FNTYPE) && aggregate_value_p (FNTYPE)) ? 4 : 0))\n+  ((CUM) = (((FNTYPE) && aggregate_value_p (TREE_TYPE ((FNTYPE))) ? 4 : 0))\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "054660f2908fdb27d28dcd358a06545e42b4edda", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -468,7 +468,7 @@ struct _clipper_cum_args { int num; int size; };\n    clipper passes the address of a struct in r0, set num = 1 in this case */\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n-  ((CUM).num = ((FNTYPE) != 0 && aggregate_value_p (FNTYPE)), \\\n+  ((CUM).num = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE (FNTYPE))), \\\n    (CUM).size = 0)\n \n /* internal helper : size of an argument */"}, {"sha": "8d4682c72ce9fff50ea76009114fdbdf25cdd2b5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -612,7 +612,7 @@ extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n       && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n \t  || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n \t      == void_type_node))) ? (SIZE)\t\t\t\\\n-   : (aggregate_value_p (FUNTYPE)) ? GET_MODE_SIZE (Pmode) : 0)\n+   : (aggregate_value_p (TREE_TYPE (FUNTYPE))) ? GET_MODE_SIZE (Pmode) : 0)\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree)."}, {"sha": "5f546f04bda0884f41949090f5652801c22cb776", "filename": "gcc/config/i386/isc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi386%2Fisc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi386%2Fisc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fisc.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -39,7 +39,7 @@\n \t      == void_type_node))) ? (SIZE)\t\t\t\\\n    : 0)\n /* On other 386 systems, the last line looks like this:\n-   : (aggregate_value_p (FUNTYPE)) ? GET_MODE_SIZE (Pmode) : 0)  */\n+   : (aggregate_value_p (TREE_TYPE (FUNTYPE))) ? GET_MODE_SIZE (Pmode) : 0)  */\n #endif\n \n /* Handle #pragma pack and #pragma weak.  */"}, {"sha": "f0fa2a314d37e6be01c147eedca09c5753bb549d", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -474,7 +474,7 @@ struct cumulative_args { int ints, floats; };\n    invisible first argument.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n- ((CUM).ints = ((FNTYPE) != 0 && aggregate_value_p ((FNTYPE)) \\\n+ ((CUM).ints = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE ((FNTYPE))) \\\n \t\t? 4 : 0),\t\t\t\\\n   (CUM).floats = 0)\n "}, {"sha": "cce7d65d1b48be8ff1e612a442fb14246a5be6e6", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -627,8 +627,9 @@ extern int inner_param_safe_helper();\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.   */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME) \\\n-  ((CUM) = (FNTYPE && !flag_pcc_struct_return && aggregate_value_p (FNTYPE)))\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+  ((CUM) = (FNTYPE && !flag_pcc_struct_return\t\t\\\n+\t    && aggregate_value_p (TREE_TYPE (FNTYPE))))\n \n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,"}, {"sha": "fedfba23c6fd51dd79814703f500feb258f678a8", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76c305963dbd7ea522df4d6473b5e0903ae8f8f6/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=76c305963dbd7ea522df4d6473b5e0903ae8f8f6", "patch": "@@ -414,7 +414,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    invisible first argument.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n- ((CUM) = ((FNTYPE) != 0 && aggregate_value_p ((FNTYPE))))\n+ ((CUM) = ((FNTYPE) != 0 && aggregate_value_p (TREE_TYPE ((FNTYPE)))))\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}]}