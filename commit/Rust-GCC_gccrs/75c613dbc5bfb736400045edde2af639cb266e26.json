{"sha": "75c613dbc5bfb736400045edde2af639cb266e26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNjEzZGJjNWJmYjczNjQwMDA0NWVkZGUyYWY2MzljYjI2NmUyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-06-16T10:38:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-06-16T10:38:45Z"}, "message": "dwarfout.c (add_incomplete_type): New fn.\n\n\t* dwarfout.c (add_incomplete_type): New fn.\n\t(output_type): Call it.\n\t(retry_incomplete_types): New fn.\n\t(dwarfout_finish): Call it.\n\tFrom Eric Raskin <ehr@listworks.com>:\n\t(output_type): Output types for bases.\n\nFrom-SVN: r27546", "tree": {"sha": "fdf7690b35163a1cfcd0c37ab2b00464398a5052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf7690b35163a1cfcd0c37ab2b00464398a5052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c613dbc5bfb736400045edde2af639cb266e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c613dbc5bfb736400045edde2af639cb266e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c613dbc5bfb736400045edde2af639cb266e26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c613dbc5bfb736400045edde2af639cb266e26/comments", "author": null, "committer": null, "parents": [{"sha": "f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33e32a8ccd4963e4f5b0616f6f08502c2a7df72"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "56ff7e7c72940b2f864a0f277012badb09bdfad4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c613dbc5bfb736400045edde2af639cb266e26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c613dbc5bfb736400045edde2af639cb266e26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c613dbc5bfb736400045edde2af639cb266e26", "patch": "@@ -1,6 +1,16 @@\n+Wed Jun 16 10:33:02 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* dwarfout.c (add_incomplete_type): New fn.\n+\t(output_type): Call it.\n+\t(retry_incomplete_types): New fn.\n+\t(dwarfout_finish): Call it.\n+\n+\tFrom Eric Raskin <ehr@listworks.com>:\n+\t(output_type): Output types for bases.\n+\n Tue Jun 15 12:51:23 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n-\t* config/mips/mips.c (mips_output_conditional_branch): Add `break' \n+\t* mips.c (mips_output_conditional_branch): Add `break' \n \tbetween `default' label and `close braces'.\n \n Tue Jun 15 01:55:20 1999  David O'Brien <obrien@FreeBSD.org>"}, {"sha": "2a1b482f8f8e774f6a44b7bdb95b7ce3c059cd61", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c613dbc5bfb736400045edde2af639cb266e26/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c613dbc5bfb736400045edde2af639cb266e26/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=75c613dbc5bfb736400045edde2af639cb266e26", "patch": "@@ -270,6 +270,22 @@ static unsigned pending_types;\n \n #define PENDING_TYPES_INCREMENT 64\n \n+/* A pointer to the base of a list of incomplete types which might be\n+   completed at some later time.  */\n+\n+static tree *incomplete_types_list;\n+\n+/* Number of elements currently allocated for the incomplete_types_list.  */\n+static unsigned incomplete_types_allocated;\n+\n+/* Number of elements of incomplete_types_list currently in use.  */\n+static unsigned incomplete_types;\n+\n+/* Size (in elements) of increments by which we may expand the incomplete\n+   types list.  Actually, a single hunk of space of this size should\n+   be enough for most typical programs.\t */\n+#define INCOMPLETE_TYPES_INCREMENT 64\n+\n /* Pointer to an artificial RECORD_TYPE which we create in dwarfout_init.\n    This is used in a hack to help us get the DIEs describing types of\n    formal parameters to come *after* all of the DIEs describing the formal\n@@ -4216,6 +4232,40 @@ output_pending_types_for_scope (containing_scope)\n     }\n }\n \n+/* Remember a type in the incomplete_types_list.  */\n+\n+static void\n+add_incomplete_type (type)\n+     tree type;\n+{\n+  if (incomplete_types == incomplete_types_allocated)\n+    {\n+      incomplete_types_allocated += INCOMPLETE_TYPES_INCREMENT;\n+      incomplete_types_list\n+\t= (tree *) xrealloc (incomplete_types_list,\n+\t\t\t     sizeof (tree) * incomplete_types_allocated);\n+    }\n+\n+  incomplete_types_list[incomplete_types++] = type;\n+}\n+\n+/* Walk through the list of incomplete types again, trying once more to\n+   emit full debugging info for them.  */\n+\n+static void\n+retry_incomplete_types ()\n+{\n+  register tree type;\n+\n+  finalizing = 1;\n+  while (incomplete_types)\n+    {\n+      --incomplete_types;\n+      type = incomplete_types_list[incomplete_types];\n+      output_type (type, NULL_TREE);\n+    }\n+}\n+\n static void\n output_type (type, containing_scope)\n      register tree type;\n@@ -4380,7 +4430,10 @@ output_type (type, containing_scope)\n \t\t    && TREE_CODE (TYPE_CONTEXT (type)) != FUNCTION_TYPE\n \t\t    && TREE_CODE (TYPE_CONTEXT (type)) != METHOD_TYPE))\n \t    && !finalizing)\n-\t  return;\t/* EARLY EXIT!  Avoid setting TREE_ASM_WRITTEN.  */\n+\t  {\n+\t    add_incomplete_type (type);\n+\t    return;\t/* EARLY EXIT!  Avoid setting TREE_ASM_WRITTEN.  */\n+\t  }\n \n \t/* Prevent infinite recursion in cases where the type of some\n \t   member of this type is expressed in terms of this type itself.  */\n@@ -4435,7 +4488,11 @@ output_type (type, containing_scope)\n \t\tregister int i;\n \n \t\tfor (i = 0; i < n_bases; i++)\n-\t\t  output_die (output_inheritance_die, TREE_VEC_ELT (bases, i));\n+\t\t  {\n+\t\t    tree binfo = TREE_VEC_ELT (bases, i);\n+\t\t    output_type (BINFO_TYPE (binfo), containing_scope);\n+\t\t    output_die (output_inheritance_die, binfo);\n+\t\t  }\n \t      }\n \n \t    ++in_class;\n@@ -5844,6 +5901,8 @@ dwarfout_finish ()\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n+  retry_incomplete_types ();\n+\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_SECTION);\n "}]}