{"sha": "058f9bb58602e8703949104ff75f86af9a4f354f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ZjliYjU4NjAyZTg3MDM5NDkxMDRmZjc1Zjg2YWY5YTRmMzU0Zg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-21T01:19:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-21T01:19:03Z"}, "message": "(FAST_BIT, CONSTLEN_2_BIT, CONSTLEN_3_BIT, CONSTLEN_0_BIT,\n\nTARGET_FASTCODE, TARGET_CLEN3, TARGET_CLEN0, TARGET_OPTIONS): Delete.\n(TARGET_SWITCHES): Delete -mclen3 and -mclen0 options.\n(TARGET_DEFAULT): Is zero.\n(OVERRIDE_OPTIONS): Delete code to set max_count_si and max_count_hi.\n(SPECIAL_REG): New macro.\n(HARD_REGNO_MODE_OK): Allow any mode in any general register.\n(GO_IF_LEGITIMATE_ADDRESS): Delete constant + reg address case.\n(MOVE_RATIO): Define to 2 when TARGET_SMALLCODE.\n(max_si, max_hi, max_count_si, max_count_hi): Delete.\n\nFrom-SVN: r9422", "tree": {"sha": "6e5f0232817aca84fb1f160e3bcc1a61842cfe52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e5f0232817aca84fb1f160e3bcc1a61842cfe52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058f9bb58602e8703949104ff75f86af9a4f354f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058f9bb58602e8703949104ff75f86af9a4f354f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058f9bb58602e8703949104ff75f86af9a4f354f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058f9bb58602e8703949104ff75f86af9a4f354f/comments", "author": null, "committer": null, "parents": [{"sha": "51aea58dad34cc85008ac7ddd2a919b5387ce8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51aea58dad34cc85008ac7ddd2a919b5387ce8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51aea58dad34cc85008ac7ddd2a919b5387ce8be"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "bf0b58baa9c27b6e522aafe7351dc3eb7f3fdc18", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058f9bb58602e8703949104ff75f86af9a4f354f/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058f9bb58602e8703949104ff75f86af9a4f354f/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=058f9bb58602e8703949104ff75f86af9a4f354f", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler for Hitachi Super-H.\n    Copyright (C) 1993, 1994, 1995 Free Software Foundation, Inc.\n-   Contributed by Steve Chamberlain (sac@cygnus.com)\n+   Contributed by Steve Chamberlain (sac@cygnus.com).\n+   Improved by Jim Wilson (wilson@cygnus.com).\n \n This file is part of GNU CC.\n \n@@ -63,7 +64,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n extern int target_flags;\n #define ISIZE_BIT      \t(1<<1)\n-#define FAST_BIT       \t(1<<2)\n #define RTL_BIT        \t(1<<4)\n #define DT_BIT         \t(1<<5)\n #define DALIGN_BIT     \t(1<<6)\n@@ -75,10 +75,7 @@ extern int target_flags;\n #define R_BIT     \t(1<<12)\n #define SPACE_BIT \t(1<<13)\n #define BIGTABLE_BIT  \t(1<<14)\n-#define CONSTLEN_2_BIT  (1<<20)\n-#define CONSTLEN_3_BIT  (1<<21)\n #define HITACHI_BIT     (1<<22)\n-#define CONSTLEN_0_BIT  (1<<25)\n #define PADSTRUCT_BIT  (1<<28)\n #define LITTLE_ENDIAN_BIT (1<<29)\n \n@@ -94,9 +91,6 @@ extern int target_flags;\n /* Nonzero if we should generate code using type 3 insns.  */\n #define TARGET_SH3 (target_flags & SH3_BIT)\n \n-/* Nonzero if we should generate faster code rather than smaller code.  */\n-#define TARGET_FASTCODE   (target_flags & FAST_BIT)\n-\n /* Nonzero if we should generate smaller code rather than faster code.  */\n #define TARGET_SMALLCODE   (target_flags & SPACE_BIT)\n \n@@ -118,13 +112,6 @@ extern int target_flags;\n /* Nonzero if combine dumping wanted.  */\n #define TARGET_CDUMP (target_flags & C_BIT)\n \n-/* Select max size of computed constant code sequences to be 3 insns.  */\n-#define TARGET_CLEN3 (target_flags & CONSTLEN_3_BIT)\n-\n-/* Select max size of computed constant code sequences to be 0 insns -\n-   i.e. don't do it.  */\n-#define TARGET_CLEN0 (target_flags & CONSTLEN_0_BIT)\n-\n /* Nonzero if using Hitachi's calling convention.  */\n #define TARGET_HITACHI \t\t(target_flags & HITACHI_BIT)\n \n@@ -147,8 +134,6 @@ extern int target_flags;\n   {\"b\",\t\t(-LITTLE_ENDIAN_BIT) },  \t\\\n   {\"bigtable\", \t(BIGTABLE_BIT)},\t\t\\\n   {\"c\",  \t(C_BIT) },\t\t\t\\\n-  {\"clen0\",     (CONSTLEN_0_BIT) },    \t\t\\\n-  {\"clen3\",     (CONSTLEN_3_BIT) },    \t\t\\\n   {\"dalign\",  \t(DALIGN_BIT) },\t\t\t\\\n   {\"hitachi\",\t(HITACHI_BIT) },\t\t\\\n   {\"isize\", \t(ISIZE_BIT) },\t\t\t\\\n@@ -159,15 +144,7 @@ extern int target_flags;\n   {\"\",   \tTARGET_DEFAULT} \t\t\\\n }\n \n-\n-#define TARGET_DEFAULT  (FAST_BIT)\n-\n-\n-/* Macro to define table for command options with values.  */\n-#define TARGET_OPTIONS \\\n-\t{ { \"maxsi-\", &max_si}, \\\n-\t  { \"maxhi-\", &max_hi} }\n-\n+#define TARGET_DEFAULT  (0)\n \n #define OVERRIDE_OPTIONS \t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n@@ -188,14 +165,6 @@ do {\t\t\t\t\t\t\t\t\\\n      break global alloc, and generates slower code anyway due   \\\n      to the pressure on R0.  */                                 \\\n   flag_schedule_insns = 0;            \t\t\t\t\\\n-  if (max_si)\t\t\t\t\t\t\t\\\n-    max_count_si = atoi (max_si);\t\t\t\t\\\n-  else                                                          \\\n-    max_count_si = 1010;                                        \\\n-  if (max_hi)\t\t\t\t\t\t\t\\\n-    max_count_hi = atoi (max_hi);\t\t\t\t\\\n-  else      \t\t\t\t\t\t\t\\\n-    max_count_hi = 500;\t\t\t\t                \\\n } while (0)\n \f\n /* Target machine storage Layout.  */\n@@ -312,6 +281,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define GBR_REG  19\n #define MACH_REG 20\n #define MACL_REG 21\n+#define SPECIAL_REG(REGNO) ((REGNO) >= 18 && (REGNO) <= 21)\n \n #define FIRST_PSEUDO_REGISTER 22\n \n@@ -370,11 +340,13 @@ do {\t\t\t\t\t\t\t\t\\\n    (((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n-   We may keep double values in even registers.  */\n+   We can allow any mode in any general register.  The special registers\n+   only allow SImode.  Don't allow any mode in the PR.  */\n \n-extern int hard_regno_mode_ok[];\n-#define HARD_REGNO_MODE_OK(REGNO, MODE)  \\\n-  (hard_regno_mode_ok[REGNO] & (1<<(int)MODE))\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n+  (SPECIAL_REG (REGNO) ? (MODE) == SImode\t\\\n+   : (REGNO) == PR_REG ? 0\t\t\t\\\n+   : 1)\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -841,6 +813,10 @@ extern int current_function_anonymous_args;\n \n /* Nonzero if the constant value X is a legitimate general operand.  */\n \n+/* ??? Should modify this to accept CONST_DOUBLE, and then modify the\n+   constant pool table code to fix loads of CONST_DOUBLEs.  If that doesn't\n+   work well, then we can at least handle 'G' constraint CONST_DOUBLEs\n+   here.  */\n #define LEGITIMATE_CONSTANT_P(X) \\\n   (GET_CODE(X) != CONST_DOUBLE /*&& GET_CODE(X) != LABEL_REF*/)\n \n@@ -957,8 +933,6 @@ extern int current_function_anonymous_args;\n       rtx xop1 = XEXP(X,1);\t\t\t\t\t  \\\n       if (GET_MODE_SIZE(MODE) <= 8 && BASE_REGISTER_RTX_P (xop0)) \\\n \tGO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop0), xop1, LABEL); \\\n-      if (GET_MODE_SIZE(MODE) <= 8 && BASE_REGISTER_RTX_P (xop1)) \\\n-\tGO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop1), xop0, LABEL); \\\n       if (GET_MODE_SIZE(MODE)<= 4) {\t\t\t\t  \\\n \tif(BASE_REGISTER_RTX_P(xop1) &&\t\t\t \t  \\\n \t   INDEX_REGISTER_RTX_P(xop0)) goto LABEL;\t\t  \\\n@@ -1446,12 +1420,8 @@ extern char *output_far_jump();\n /* Set when processing a function with pragma interrupt turned on.  */\n \n extern int pragma_interrupt;\n-#define MOVE_RATIO (TARGET_SMALLCODE ? 4 : 16)\n \n-extern char *max_si;\n-extern char *max_hi;\n-extern int max_count_si;\n-extern int max_count_hi;\n+#define MOVE_RATIO (TARGET_SMALLCODE ? 2 : 16)\n \f\n /* Instructions with unfilled delay slots take up an extra two bytes for\n    the nop in the delay slot.  */\n@@ -1470,3 +1440,9 @@ extern int max_count_hi;\n \n /* Enable a bug fix for the shorten_branches pass.  */\n #define SHORTEN_WITH_ADJUST_INSN_LENGTH\n+\n+/* ??? Define CANONICALIZE_COMPARISON?  */\n+\n+/* ??? Define PREDICATE_CODES.  */\n+\n+/* ??? Define PROMOTE_MDOES?  */"}]}