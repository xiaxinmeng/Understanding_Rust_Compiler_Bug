{"sha": "9e9bd45dd934c75a7f0601ebd193388adca001f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5YmQ0NWRkOTM0Yzc1YTdmMDYwMWViZDE5MzM4OGFkY2EwMDFmNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-05T02:01:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-05T02:01:30Z"}, "message": "(constant_expression_warning): Check INTEGER_CST for TREE_CONSTANT_OVERFLOW.\n\nFrom-SVN: r2052", "tree": {"sha": "069c4cdd86e6139317f534fdca40bbd3433dd79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/069c4cdd86e6139317f534fdca40bbd3433dd79a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e9bd45dd934c75a7f0601ebd193388adca001f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9bd45dd934c75a7f0601ebd193388adca001f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9bd45dd934c75a7f0601ebd193388adca001f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9bd45dd934c75a7f0601ebd193388adca001f4/comments", "author": null, "committer": null, "parents": [{"sha": "9682683d886a6af57ad62fee36a74c6a22cdf939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9682683d886a6af57ad62fee36a74c6a22cdf939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9682683d886a6af57ad62fee36a74c6a22cdf939"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6a0247aa0c5a8a59d1628d1a834c867092f813c0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9bd45dd934c75a7f0601ebd193388adca001f4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9bd45dd934c75a7f0601ebd193388adca001f4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9e9bd45dd934c75a7f0601ebd193388adca001f4", "patch": "@@ -786,21 +786,21 @@ c_alignof (type)\n   return size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n }\n \n-/* Print a warning if a constant expression had overflow in folding.\n-   This doesn't really work--it is waiting for changes in fold.  */\n+/* Print a warning if a constant expression had overflow in folding.  */\n \n void\n constant_expression_warning (value)\n      tree value;\n {\n-  if (TREE_CODE (value) == NON_LVALUE_EXPR && TREE_CONSTANT_OVERFLOW (value))\n+  if (TREE_CODE (value) == INTEGER_CST && TREE_CONSTANT_OVERFLOW (value))\n     pedwarn (\"overflow in constant expression\");\n }\n \f\n /* Implement the __alignof keyword: Return the minimum required\n    alignment of EXPR, measured in bytes.  For VAR_DECL's and\n    FIELD_DECL's return DECL_ALIGN (which can be set from an\n    \"aligned\" __attribute__ specification).  */\n+\n tree\n c_alignof_expr (expr)\n      tree expr;"}]}