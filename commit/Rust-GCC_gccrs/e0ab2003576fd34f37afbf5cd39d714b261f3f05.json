{"sha": "e0ab2003576fd34f37afbf5cd39d714b261f3f05", "node_id": "C_kwDOANBUbNoAKGUwYWIyMDAzNTc2ZmQzNGYzN2FmYmY1Y2QzOWQ3MTRiMjYxZjNmMDU", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2021-08-06T11:54:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:36Z"}, "message": "[Ada] Support gmem.out longer than 2G on 32 bit platforms\n\ngcc/ada/\n\n\t* libgnat/memtrack.adb (Putc): New routine wrapped around fputc\n\twith error check.\n\t(Write): New routine wrapped around fwrite with error check.\n\tRemove bound functions fopen, fwrite, fputs, fclose, OS_Exit.\n\tUse the similar routines from System.CRTL and System.OS_Lib.", "tree": {"sha": "7db1327258bda64e11ad71fe2abc233b0f5e247d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db1327258bda64e11ad71fe2abc233b0f5e247d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ab2003576fd34f37afbf5cd39d714b261f3f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ab2003576fd34f37afbf5cd39d714b261f3f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ab2003576fd34f37afbf5cd39d714b261f3f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ab2003576fd34f37afbf5cd39d714b261f3f05/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6732c4035d54dbc543e067aa1886c88939b0fed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6732c4035d54dbc543e067aa1886c88939b0fed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6732c4035d54dbc543e067aa1886c88939b0fed5"}], "stats": {"total": 127, "additions": 67, "deletions": 60}, "files": [{"sha": "b34ac042a174a9f7035a0d676c8fdcdb12b4a21c", "filename": "gcc/ada/libgnat/memtrack.adb", "status": "modified", "additions": 67, "deletions": 60, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ab2003576fd34f37afbf5cd39d714b261f3f05/gcc%2Fada%2Flibgnat%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ab2003576fd34f37afbf5cd39d714b261f3f05/gcc%2Fada%2Flibgnat%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fmemtrack.adb?ref=e0ab2003576fd34f37afbf5cd39d714b261f3f05", "patch": "@@ -69,10 +69,13 @@\n pragma Source_File_Name (System.Memory, Body_File_Name => \"memtrack.adb\");\n \n with Ada.Exceptions;\n+with GNAT.IO;\n+\n with System.Soft_Links;\n with System.Traceback;\n with System.Traceback_Entries;\n-with GNAT.IO;\n+with System.CRTL;\n+with System.OS_Lib;\n with System.OS_Primitives;\n \n package body System.Memory is\n@@ -93,30 +96,14 @@ package body System.Memory is\n      (Ptr : System.Address; Size : size_t) return System.Address;\n    pragma Import (C, c_realloc, \"realloc\");\n \n-   subtype File_Ptr is System.Address;\n-\n-   function fopen (Path : String; Mode : String) return File_Ptr;\n-   pragma Import (C, fopen);\n-\n-   procedure OS_Exit (Status : Integer);\n-   pragma Import (C, OS_Exit, \"__gnat_os_exit\");\n-   pragma No_Return (OS_Exit);\n-\n    In_Child_After_Fork : Integer;\n    pragma Import (C, In_Child_After_Fork, \"__gnat_in_child_after_fork\");\n \n-   procedure fwrite\n-     (Ptr    : System.Address;\n-      Size   : size_t;\n-      Nmemb  : size_t;\n-      Stream : File_Ptr);\n-   pragma Import (C, fwrite);\n+   subtype File_Ptr is CRTL.FILEs;\n \n-   procedure fputc (C : Integer; Stream : File_Ptr);\n-   pragma Import (C, fputc);\n+   procedure Write (Ptr : System.Address; Size : size_t);\n \n-   procedure fclose (Stream : File_Ptr);\n-   pragma Import (C, fclose);\n+   procedure Putc (Char : Character);\n \n    procedure Finalize;\n    pragma Export (C, Finalize, \"__gnat_finalize\");\n@@ -210,20 +197,17 @@ package body System.Memory is\n          Timestamp := System.OS_Primitives.Clock;\n          Call_Chain\n            (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n-         fputc (Character'Pos ('A'), Gmemfile);\n-         fwrite (Result'Address, Address_Size, 1, Gmemfile);\n-         fwrite (Actual_Size'Address, size_t'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Timestamp'Address, Duration'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n+         Putc ('A');\n+         Write (Result'Address, Address_Size);\n+         Write (Actual_Size'Address, size_t'Max_Size_In_Storage_Elements);\n+         Write (Timestamp'Address, Duration'Max_Size_In_Storage_Elements);\n+         Write (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements);\n \n          for J in Tracebk'First .. Tracebk'First + Num_Calls - 1 loop\n             declare\n                Ptr : System.Address := PC_For (Tracebk (J));\n             begin\n-               fwrite (Ptr'Address, Address_Size, 1, Gmemfile);\n+               Write (Ptr'Address, Address_Size);\n             end;\n          end loop;\n \n@@ -246,8 +230,8 @@ package body System.Memory is\n \n    procedure Finalize is\n    begin\n-      if not Needs_Init then\n-         fclose (Gmemfile);\n+      if not Needs_Init and then CRTL.fclose (Gmemfile) /= 0 then\n+         Put_Line (\"gmem close error: \" & OS_Lib.Errno_Message);\n       end if;\n    end Finalize;\n \n@@ -275,18 +259,16 @@ package body System.Memory is\n          Call_Chain\n            (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n-         fputc (Character'Pos ('D'), Gmemfile);\n-         fwrite (Addr'Address, Address_Size, 1, Gmemfile);\n-         fwrite (Timestamp'Address, Duration'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n+         Putc ('D');\n+         Write (Addr'Address, Address_Size);\n+         Write (Timestamp'Address, Duration'Max_Size_In_Storage_Elements);\n+         Write (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements);\n \n          for J in Tracebk'First .. Tracebk'First + Num_Calls - 1 loop\n             declare\n                Ptr : System.Address := PC_For (Tracebk (J));\n             begin\n-               fwrite (Ptr'Address, Address_Size, 1, Gmemfile);\n+               Write (Ptr'Address, Address_Size);\n             end;\n          end loop;\n \n@@ -304,29 +286,41 @@ package body System.Memory is\n \n    procedure Gmem_Initialize is\n       Timestamp : aliased Duration;\n-\n+      File_Mode : constant String := \"wb\" & ASCII.NUL;\n    begin\n       if Needs_Init then\n          Needs_Init := False;\n          System.OS_Primitives.Initialize;\n          Timestamp := System.OS_Primitives.Clock;\n-         Gmemfile := fopen (Gmemfname, \"wb\" & ASCII.NUL);\n+         Gmemfile := CRTL.fopen (Gmemfname'Address, File_Mode'Address);\n \n          if Gmemfile = System.Null_Address then\n             Put_Line (\"Couldn't open gnatmem log file for writing\");\n-            OS_Exit (255);\n+            OS_Lib.OS_Exit (255);\n          end if;\n \n          declare\n             S : constant String := \"GMEM DUMP\" & ASCII.LF;\n          begin\n-            fwrite (S'Address, S'Length, 1, Gmemfile);\n-            fwrite (Timestamp'Address, Duration'Max_Size_In_Storage_Elements,\n-                    1, Gmemfile);\n+            Write (S'Address, S'Length);\n+            Write (Timestamp'Address, Duration'Max_Size_In_Storage_Elements);\n          end;\n       end if;\n    end Gmem_Initialize;\n \n+   ----------\n+   -- Putc --\n+   ----------\n+\n+   procedure Putc (Char : Character) is\n+      C : constant Integer := Character'Pos (Char);\n+\n+   begin\n+      if CRTL.fputc (C, Gmemfile) /= C then\n+         Put_Line (\"gmem fputc error: \" & OS_Lib.Errno_Message);\n+      end if;\n+   end Putc;\n+\n    -------------\n    -- Realloc --\n    -------------\n@@ -360,18 +354,16 @@ package body System.Memory is\n          Call_Chain\n            (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n-         fputc (Character'Pos ('D'), Gmemfile);\n-         fwrite (Addr'Address, Address_Size, 1, Gmemfile);\n-         fwrite (Timestamp'Address, Duration'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n+         Putc ('D');\n+         Write (Addr'Address, Address_Size);\n+         Write (Timestamp'Address, Duration'Max_Size_In_Storage_Elements);\n+         Write (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements);\n \n          for J in Tracebk'First .. Tracebk'First + Num_Calls - 1 loop\n             declare\n                Ptr : System.Address := PC_For (Tracebk (J));\n             begin\n-               fwrite (Ptr'Address, Address_Size, 1, Gmemfile);\n+               Write (Ptr'Address, Address_Size);\n             end;\n          end loop;\n \n@@ -381,20 +373,17 @@ package body System.Memory is\n \n          --   Log allocation call using the same backtrace\n \n-         fputc (Character'Pos ('A'), Gmemfile);\n-         fwrite (Result'Address, Address_Size, 1, Gmemfile);\n-         fwrite (Size'Address, size_t'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Timestamp'Address, Duration'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n-         fwrite (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements, 1,\n-                 Gmemfile);\n+         Putc ('A');\n+         Write (Result'Address, Address_Size);\n+         Write (Size'Address, size_t'Max_Size_In_Storage_Elements);\n+         Write (Timestamp'Address, Duration'Max_Size_In_Storage_Elements);\n+         Write (Num_Calls'Address, Integer'Max_Size_In_Storage_Elements);\n \n          for J in Tracebk'First .. Tracebk'First + Num_Calls - 1 loop\n             declare\n                Ptr : System.Address := PC_For (Tracebk (J));\n             begin\n-               fwrite (Ptr'Address, Address_Size, 1, Gmemfile);\n+               Write (Ptr'Address, Address_Size);\n             end;\n          end loop;\n \n@@ -411,4 +400,22 @@ package body System.Memory is\n       return Result;\n    end Realloc;\n \n+   -----------\n+   -- Write --\n+   -----------\n+\n+   procedure Write (Ptr : System.Address; Size : size_t) is\n+      function fwrite\n+        (buffer : System.Address;\n+         size   : size_t;\n+         count  : size_t;\n+         stream : File_Ptr) return size_t;\n+      pragma Import (C, fwrite);\n+\n+   begin\n+      if fwrite (Ptr, Size, 1, Gmemfile) /= 1 then\n+         Put_Line (\"gmem fwrite error: \" & OS_Lib.Errno_Message);\n+      end if;\n+   end Write;\n+\n end System.Memory;"}]}