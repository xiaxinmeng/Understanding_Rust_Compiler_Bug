{"sha": "e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1YmI1YzY5MmZiMTdkNWM1NmEwYjBjOWM2MDAyMjE4NmY2YTUzOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-13T17:30:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-13T17:30:53Z"}, "message": "builtins.c: Fix comment typos.\n\n\t* builtins.c: Fix comment typos.\n\t* fold-const.c: Likewise.\n\nFrom-SVN: r67907", "tree": {"sha": "bd8e420c0c72d978b855451ad6da05e43e9cbc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8e420c0c72d978b855451ad6da05e43e9cbc05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/comments", "author": null, "committer": null, "parents": [{"sha": "d88e80e622609f3c4be7b852222d5daa7afca7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e80e622609f3c4be7b852222d5daa7afca7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88e80e622609f3c4be7b852222d5daa7afca7c9"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "1badeea04711d63850d43f5c5c28b4d0569e84ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "patch": "@@ -1,3 +1,8 @@\n+2003-06-13  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c: Fix comment typos.\n+\t* fold-const.c: Likewise.\n+\n 2003-06-13  Doug Evans  <dje@sebabeach.org>\n \t    Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n "}, {"sha": "365f1e1556f46da07c6f1c9620854ec3feede423", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "patch": "@@ -180,7 +180,7 @@ static void init_builtin_dconsts\tPARAMS ((void));\n static tree fold_builtin_cabs\t\tPARAMS ((tree, tree, tree));\n \n /* Initialize mathematical constants for constant folding builtins.\n-   These constants need to be given to atleast 160 bits precision.  */\n+   These constants need to be given to at least 160 bits precision.  */\n \n static void\n init_builtin_dconsts ()"}, {"sha": "bdc84de96f2821f6e7b5e4fea328f2f32d27989a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15bb5c692fb17d5c56a0b0c9c60022186f6a539/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e15bb5c692fb17d5c56a0b0c9c60022186f6a539", "patch": "@@ -8026,7 +8026,7 @@ tree_expr_nonnegative_p (t)\n \treturn tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n \t       && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n \n-      /* zero_extend(x) + zero_extend(y) is non-negative is x and y are\n+      /* zero_extend(x) + zero_extend(y) is non-negative if x and y are\n \t both unsigned and at least 2 bits shorter than the result.  */\n       if (TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE\n \t  && TREE_CODE (TREE_OPERAND (t, 0)) == NOP_EXPR\n@@ -8054,7 +8054,7 @@ tree_expr_nonnegative_p (t)\n \t\t && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n \t}\n \n-      /* zero_extend(x) * zero_extend(y) is non-negative is x and y are\n+      /* zero_extend(x) * zero_extend(y) is non-negative if x and y are\n \t both unsigned and their total bits is shorter than the result.  */\n       if (TREE_CODE (TREE_TYPE (t)) == INTEGER_TYPE\n \t  && TREE_CODE (TREE_OPERAND (t, 0)) == NOP_EXPR"}]}