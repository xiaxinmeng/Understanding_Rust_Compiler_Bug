{"sha": "ef3751295c3062d9084ab72b681d53a911af2cc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzNzUxMjk1YzMwNjJkOTA4NGFiNzJiNjgxZDUzYTkxMWFmMmNjMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-10-19T23:21:14Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-10-19T23:21:14Z"}, "message": "Fix ICE on lex output file reported by Andreas Schwab.\n\n\t* haifa-sched.c (compute_trg_info): Add explanatory comments.\n\tNew local update_blocks.  Use update_blocks to remove duplicates\n\twhen computing update blocks.  Check for bblst_table overflow.\n\t(schedule_block): Add explanatory comment.  Reduce bblst_size by\n\tfactor of 2.\n\t* config/ia64/ia64.md (movdi_symbolic): Document loss of REG_LABEL\n\tnotes.\n\nFrom-SVN: r36954", "tree": {"sha": "39b46b6378ac91d0a2228607e448f436fe7fd7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b46b6378ac91d0a2228607e448f436fe7fd7ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3751295c3062d9084ab72b681d53a911af2cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3751295c3062d9084ab72b681d53a911af2cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3751295c3062d9084ab72b681d53a911af2cc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3751295c3062d9084ab72b681d53a911af2cc2/comments", "author": null, "committer": null, "parents": [{"sha": "97ba1e3c395151689c93f4353f8eff1ce416b174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ba1e3c395151689c93f4353f8eff1ce416b174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ba1e3c395151689c93f4353f8eff1ce416b174"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "5fa663e4111376f6406e39641220229021e08c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef3751295c3062d9084ab72b681d53a911af2cc2", "patch": "@@ -1,3 +1,13 @@\n+2000-10-19  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* haifa-sched.c (compute_trg_info): Add explanatory comments.\n+\tNew local update_blocks.  Use update_blocks to remove duplicates\n+\twhen computing update blocks.  Check for bblst_table overflow.\n+\t(schedule_block): Add explanatory comment.  Reduce bblst_size by\n+\tfactor of 2.\n+\t* config/ia64/ia64.md (movdi_symbolic): Document loss of REG_LABEL\n+\tnotes.\n+\t\n 2000-10-19  Chandrakala Chavva   <cchavva@redhat.com>\n \n \t* libgcc2.c (_mulvsi3): Change variables u and v to a and b."}, {"sha": "022161b8654185a5e7165ad69f159588320a0f3d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=ef3751295c3062d9084ab72b681d53a911af2cc2", "patch": "@@ -488,6 +488,9 @@\n ;; deferred functions, since we may acquire additional information\n ;; on the variables used in the meantime.\n \n+;; ??? This causes us to lose REG_LABEL notes, because the insn splitter\n+;; does not attempt to preserve any REG_NOTES on the input instruction.\n+\n (define_insn_and_split \"movdi_symbolic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"symbolic_operand\" \"s\"))"}, {"sha": "e85cd200ce6e4eedf63e0595a869fd1f96a1a679", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3751295c3062d9084ab72b681d53a911af2cc2/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ef3751295c3062d9084ab72b681d53a911af2cc2", "patch": "@@ -2036,27 +2036,45 @@ compute_trg_info (trg)\n \n       if (sp->is_valid)\n \t{\n+\t  char *update_blocks;\n+\n+\t  /* Compute split blocks and store them in bblst_table.\n+\t     The TO block of every split edge is a split block.  */\n \t  sp->split_bbs.first_member = &bblst_table[bblst_last];\n \t  sp->split_bbs.nr_members = el.nr_members;\n \t  for (j = 0; j < el.nr_members; bblst_last++, j++)\n \t    bblst_table[bblst_last] =\n \t      TO_BLOCK (rgn_edges[el.first_member[j]]);\n \t  sp->update_bbs.first_member = &bblst_table[bblst_last];\n+\n+\t  /* Compute update blocks and store them in bblst_table.\n+\t     For every split edge, look at the FROM block, and check\n+\t     all out edges.  For each out edge that is not a split edge,\n+\t     add the TO block to the update block list.  This list can end\n+\t     up with a lot of duplicates.  We need to weed them out to avoid\n+\t     overrunning the end of the bblst_table.  */\n+\t  update_blocks = (char *) alloca (n_basic_blocks);\n+\t  bzero (update_blocks, n_basic_blocks);\n+\n \t  update_idx = 0;\n \t  for (j = 0; j < el.nr_members; j++)\n \t    {\n \t      check_block = FROM_BLOCK (rgn_edges[el.first_member[j]]);\n \t      fst_edge = nxt_edge = OUT_EDGES (check_block);\n \t      do\n \t\t{\n-\t\t  for (k = 0; k < el.nr_members; k++)\n-\t\t    if (EDGE_TO_BIT (nxt_edge) == el.first_member[k])\n-\t\t      break;\n-\n-\t\t  if (k >= el.nr_members)\n+\t\t  if (! update_blocks[TO_BLOCK (nxt_edge)])\n \t\t    {\n-\t\t      bblst_table[bblst_last++] = TO_BLOCK (nxt_edge);\n-\t\t      update_idx++;\n+\t\t      for (k = 0; k < el.nr_members; k++)\n+\t\t\tif (EDGE_TO_BIT (nxt_edge) == el.first_member[k])\n+\t\t\t  break;\n+\n+\t\t      if (k >= el.nr_members)\n+\t\t\t{\n+\t\t\t  bblst_table[bblst_last++] = TO_BLOCK (nxt_edge);\n+\t\t\t  update_blocks[TO_BLOCK (nxt_edge)] = 1;\n+\t\t\t  update_idx++;\n+\t\t\t}\n \t\t    }\n \n \t\t  nxt_edge = NEXT_OUT (nxt_edge);\n@@ -2065,6 +2083,9 @@ compute_trg_info (trg)\n \t    }\n \t  sp->update_bbs.nr_members = update_idx;\n \n+\t  /* Make sure we didn't overrun the end of bblst_table.  */\n+\t  if (bblst_last > bblst_size)\n+\t    abort ();\n \t}\n       else\n \t{\n@@ -5903,12 +5924,11 @@ schedule_block (bb, rgn_n_insns)\n \t\t\t\t\t       * sizeof (candidate));\n \n       bblst_last = 0;\n-      /* ??? It is not clear why bblst_size is computed this way.  The original\n-\t number was clearly too small as it resulted in compiler failures.\n-\t Multiplying by the original number by 2 (to account for update_bbs\n-\t members) seems to be a reasonable solution.  */\n-      /* ??? Or perhaps there is a bug somewhere else in this file?  */\n-      bblst_size = (current_nr_blocks - bb) * rgn_nr_edges * 2;\n+      /* bblst_table holds split blocks and update blocks for each block after\n+\t the current one in the region.  split blocks and update blocks are\n+\t the TO blocks of region edges, so there can be at most rgn_nr_edges\n+\t of them.  */\n+      bblst_size = (current_nr_blocks - bb) * rgn_nr_edges;\n       bblst_table = (int *) xmalloc (bblst_size * sizeof (int));\n \n       bitlst_table_last = 0;"}]}