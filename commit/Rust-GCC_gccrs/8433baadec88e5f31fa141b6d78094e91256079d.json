{"sha": "8433baadec88e5f31fa141b6d78094e91256079d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzM2JhYWRlYzg4ZTVmMzFmYTE0MWI2ZDc4MDk0ZTkxMjU2MDc5ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-08T09:04:07Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-01T14:09:38Z"}, "message": "C-family: Add attribute 'unavailable'.\n\nIf an interface is marked 'deprecated' then, presumably, at some point it\nwill be withdrawn and no longer available.  The 'unavailable' attribute\nmakes it possible to mark up interfaces to indicate this status.  It is used\nquite extensively in some codebases where a single set of headers can be used\nto permit code generation for multiple system versions.\n\nFrom a configuration perspective, it also allows a compile test to determine\nthat an interface is missing - rather than requiring a link test.\n\nThe implementation follows the pattern of attribute deprecated, but produces\nan error (where deprecation produces a warning).\n\nThis attribute has been implemented in clang for some years.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/c-family/ChangeLog:\n\n\t* c-attribs.c (handle_unavailable_attribute): New.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (enum deprecated_states): Add unavailable state.\n\t(merge_decls): Copy unavailability.\n\t(quals_from_declspecs): Handle unavailable case.\n\t(start_decl): Amend the logic handling suppression of nested\n\tdeprecation states to include unavailability.\n\t(smallest_type_quals_location): Amend comment.\n\t(grokdeclarator): Handle the unavailable deprecation state.\n\t(declspecs_add_type): Set TREE_UNAVAILABLE from the decl specs.\n\t* c-tree.h (struct c_declspecs): Add unavailable_p.\n\t* c-typeck.c (build_component_ref): Handle unavailability.\n\t(build_external_ref): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_over_call): Handle unavailable state in addition to\n\tdeprecation.\n\t* class.c (type_build_ctor_call): Likewise.\n\t(type_build_dtor_call): Likewise.\n\t* cp-tree.h: Rename cp_warn_deprecated_use to\n\tcp_handle_deprecated_or_unavailable.\n\t* decl.c (duplicate_decls): Merge unavailability.\n\t(grokdeclarator): Handle unavailability in addition to deprecation.\n\t(type_is_unavailable): New.\n\t(grokparms): Handle unavailability in addition to deprecation.\n\t* decl.h (enum deprecated_states): Add\n\tUNAVAILABLE_DEPRECATED_SUPPRESS.\n\t* decl2.c (cplus_decl_attributes): Propagate unavailability to\n\ttemplates.\n\t(cp_warn_deprecated_use): Rename to ...\n\t(cp_handle_deprecated_or_unavailable): ... this and amend to handle\n\tthe unavailable case. It remains a warning in the case of deprecation\n\tbut becomes an error in the case of unavailability.\n\t(cp_warn_deprecated_use_scopes): Handle unavailability.\n\t(mark_used): Likewise.\n\t* parser.c (cp_parser_template_name): Likewise.\n\t(cp_parser_template_argument): Likewise.\n\t(cp_parser_parameter_declaration_list): Likewise.\n\t* typeck.c (build_class_member_access_expr): Likewise.\n\t(finish_class_member_access_expr): Likewise.\n\t* typeck2.c (build_functional_cast_1): Likewise.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Document unavailable attribute.\n\t* print-tree.c (print_node): Handle unavailable attribute.\n\t* tree-core.h (struct tree_base): Add a bit to carry unavailability.\n\t* tree.c (error_unavailable_use): New.\n\t* tree.h (TREE_UNAVAILABLE): New.\n\t(error_unavailable_use): New.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_add_property_declaration): Register unavailable\n\tattribute.\n\t(maybe_make_artificial_property_decl): Set available.\n\t(objc_maybe_build_component_ref): Generalise to the method prototype\n\tto count availability.\n\t(objc_build_class_component_ref): Likewise.\n\t(build_private_template): Likewise.\n\t(objc_decl_method_attributes): Handle unavailable attribute.\n\t(lookup_method_in_hash_lists): Amend comments.\n\t(objc_finish_message_expr): Handle unavailability in addition to\n\tdeprecation.\n\t(start_class): Likewise.\n\t(finish_class): Likewise.\n\t(lookup_protocol): Likewise.\n\t(objc_declare_protocol): Likewise.\n\t(start_protocol): Register unavailable attribute.\n\t(really_start_method): Likewise.\n\t(objc_gimplify_property_ref): Emit error on encountering an\n\tunavailable entity (and a warning for a deprecated one).\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/attr-unavailable-1.C: New test.\n\t* g++.dg/ext/attr-unavailable-2.C: New test.\n\t* g++.dg/ext/attr-unavailable-3.C: New test.\n\t* g++.dg/ext/attr-unavailable-4.C: New test.\n\t* g++.dg/ext/attr-unavailable-5.C: New test.\n\t* g++.dg/ext/attr-unavailable-6.C: New test.\n\t* g++.dg/ext/attr-unavailable-7.C: New test.\n\t* g++.dg/ext/attr-unavailable-8.C: New test.\n\t* g++.dg/ext/attr-unavailable-9.C: New test.\n\t* gcc.dg/attr-unavailable-1.c: New test.\n\t* gcc.dg/attr-unavailable-2.c: New test.\n\t* gcc.dg/attr-unavailable-3.c: New test.\n\t* gcc.dg/attr-unavailable-4.c: New test.\n\t* gcc.dg/attr-unavailable-5.c: New test.\n\t* gcc.dg/attr-unavailable-6.c: New test.\n\t* obj-c++.dg/attributes/method-unavailable-1.mm: New test.\n\t* obj-c++.dg/attributes/method-unavailable-2.mm: New test.\n\t* obj-c++.dg/attributes/method-unavailable-3.mm: New test.\n\t* obj-c++.dg/property/at-property-unavailable-1.mm: New test.\n\t* obj-c++.dg/property/at-property-unavailable-2.mm: New test.\n\t* obj-c++.dg/property/dotsyntax-unavailable-1.mm: New test.\n\t* objc.dg/attributes/method-unavailable-1.m: New test.\n\t* objc.dg/attributes/method-unavailable-2.m: New test.\n\t* objc.dg/attributes/method-unavailable-3.m: New test.\n\t* objc.dg/property/at-property-unavailable-1.m: New test.\n\t* objc.dg/property/at-property-unavailable-2.m: New test.\n\t* objc.dg/property/dotsyntax-unavailable-1.m: New test.", "tree": {"sha": "bbe8d1332389ecdee6c6849b903c0aa5d12c978d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe8d1332389ecdee6c6849b903c0aa5d12c978d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8433baadec88e5f31fa141b6d78094e91256079d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433baadec88e5f31fa141b6d78094e91256079d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8433baadec88e5f31fa141b6d78094e91256079d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433baadec88e5f31fa141b6d78094e91256079d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b4d0ef543d68187d258415b51d0d6676af89fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b4d0ef543d68187d258415b51d0d6676af89fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b4d0ef543d68187d258415b51d0d6676af89fd"}], "stats": {"total": 1412, "additions": 1348, "deletions": 64}, "files": [{"sha": "d14e9c441b39b0c534c8ecbadb9eda281db30704", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -123,6 +123,8 @@ static tree handle_pure_attribute (tree *, tree, tree, int, bool *);\n static tree handle_tm_attribute (tree *, tree, tree, int, bool *);\n static tree handle_tm_wrap_attribute (tree *, tree, tree, int, bool *);\n static tree handle_novops_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_unavailable_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t  bool *);\n static tree handle_vector_size_attribute (tree *, tree, tree, int,\n \t\t\t\t\t  bool *) ATTRIBUTE_NONNULL(3);\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n@@ -406,6 +408,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_novops_attribute, NULL },\n   { \"deprecated\",             0, 1, false, false, false, false,\n \t\t\t      handle_deprecated_attribute, NULL },\n+  { \"unavailable\",            0, 1, false, false, false, false,\n+\t\t\t      handle_unavailable_attribute, NULL },\n   { \"vector_size\",\t      1, 1, false, true, false, true,\n \t\t\t      handle_vector_size_attribute, NULL },\n   { \"visibility\",\t      1, 1, false, false, false, false,\n@@ -4122,6 +4126,71 @@ handle_deprecated_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"unavailable\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_unavailable_attribute (tree *node, tree name,\n+\t\t\t     tree args, int flags,\n+\t\t\t     bool *no_add_attrs)\n+{\n+  tree type = NULL_TREE;\n+  int warn = 0;\n+  tree what = NULL_TREE;\n+\n+  if (!args)\n+    *no_add_attrs = true;\n+  else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n+    {\n+      error (\"the message attached to %<unavailable%> is not a string\");\n+      *no_add_attrs = true;\n+    }\n+\n+  if (DECL_P (*node))\n+    {\n+      tree decl = *node;\n+      type = TREE_TYPE (decl);\n+\n+      if (TREE_CODE (decl) == TYPE_DECL\n+\t  || TREE_CODE (decl) == PARM_DECL\n+\t  || VAR_OR_FUNCTION_DECL_P (decl)\n+\t  || TREE_CODE (decl) == FIELD_DECL\n+\t  || TREE_CODE (decl) == CONST_DECL\n+\t  || objc_method_decl (TREE_CODE (decl)))\n+\tTREE_UNAVAILABLE (decl) = 1;\n+      else\n+\twarn = 1;\n+    }\n+  else if (TYPE_P (*node))\n+    {\n+      if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n+\t*node = build_variant_type_copy (*node);\n+      TREE_UNAVAILABLE (*node) = 1;\n+      type = *node;\n+    }\n+  else\n+    warn = 1;\n+\n+  if (warn)\n+    {\n+      *no_add_attrs = true;\n+      if (type && TYPE_NAME (type))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n+\t    what = TYPE_NAME (*node);\n+\t  else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (type)))\n+\t    what = DECL_NAME (TYPE_NAME (type));\n+\t}\n+      if (what)\n+\twarning (OPT_Wattributes, \"%qE attribute ignored for %qE\", name, what);\n+      else\n+\twarning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Return the \"base\" type from TYPE that is suitable to apply attribute\n    vector_size to by stripping arrays, function types, etc.  */\n static tree"}, {"sha": "771efa3eadfdcb512166f26377e8c1d25a30514f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -73,13 +73,16 @@ enum decl_context\n   TYPENAME};\t\t\t/* Typename (inside cast or sizeof)  */\n \n /* States indicating how grokdeclarator() should handle declspecs marked\n-   with __attribute__((deprecated)).  An object declared as\n-   __attribute__((deprecated)) suppresses warnings of uses of other\n-   deprecated items.  */\n+   with __attribute__((deprecated)) or __attribute__((unavailable)).\n+   An object declared as __attribute__((unavailable)) should suppress\n+   any reports of being declared  with unavailable or deprecated items.\n+   An object declared as __attribute__((deprecated)) should suppress\n+   warnings of uses of other deprecated items.  */\n \n enum deprecated_states {\n   DEPRECATED_NORMAL,\n-  DEPRECATED_SUPPRESS\n+  DEPRECATED_SUPPRESS,\n+  UNAVAILABLE_DEPRECATED_SUPPRESS\n };\n \n \f\n@@ -2644,6 +2647,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n   if (TREE_DEPRECATED (newdecl))\n     TREE_DEPRECATED (olddecl) = 1;\n \n+  /* Merge unavailability.  */\n+  if (TREE_UNAVAILABLE (newdecl))\n+    TREE_UNAVAILABLE (olddecl) = 1;\n+\n   /* If a decl is in a system header and the other isn't, keep the one on the\n      system header. Otherwise, keep source location of definition rather than\n      declaration and of prototype rather than non-prototype unless that\n@@ -4892,6 +4899,7 @@ quals_from_declspecs (const struct c_declspecs *specs)\n \t      && !specs->typedef_p\n \t      && !specs->explicit_signed_p\n \t      && !specs->deprecated_p\n+\t      && !specs->unavailable_p\n \t      && !specs->long_p\n \t      && !specs->long_long_p\n \t      && !specs->short_p\n@@ -5094,9 +5102,14 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   tree expr = NULL_TREE;\n   enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n \n-  /* An object declared as __attribute__((deprecated)) suppresses\n+  /* An object declared as __attribute__((unavailable)) suppresses\n+     warnings and errors from __attribute__((deprecated/unavailable))\n+     components.\n+     An object declared as __attribute__((deprecated)) suppresses\n      warnings of uses of other deprecated items.  */\n-  if (lookup_attribute (\"deprecated\", attributes))\n+  if (lookup_attribute (\"unavailable\", attributes))\n+    deprecated_state = UNAVAILABLE_DEPRECATED_SUPPRESS;\n+  else if (lookup_attribute (\"deprecated\", attributes))\n     deprecated_state = DEPRECATED_SUPPRESS;\n \n   decl = grokdeclarator (declarator, declspecs,\n@@ -6233,7 +6246,7 @@ smallest_type_quals_location (const location_t *locations,\n      set to indicate whether operands in *EXPR can be used in constant\n      expressions.\n    DEPRECATED_STATE is a deprecated_states value indicating whether\n-   deprecation warnings should be suppressed.\n+   deprecation/unavailability warnings should be suppressed.\n \n    In the TYPENAME case, DECLARATOR is really an absolute declarator.\n    It may also be so in the PARM case, for a prototype where the\n@@ -6363,8 +6376,14 @@ grokdeclarator (const struct c_declarator *declarator,\n   if (decl_context == NORMAL && !funcdef_flag && current_scope->parm_flag)\n     decl_context = PARM;\n \n-  if (declspecs->deprecated_p && deprecated_state != DEPRECATED_SUPPRESS)\n-    warn_deprecated_use (declspecs->type, declspecs->decl_attr);\n+  if (deprecated_state != UNAVAILABLE_DEPRECATED_SUPPRESS)\n+    {\n+      if (declspecs->unavailable_p)\n+\terror_unavailable_use (declspecs->type, declspecs->decl_attr);\n+      else if (declspecs->deprecated_p\n+\t\t&& deprecated_state != DEPRECATED_SUPPRESS)\n+\twarn_deprecated_use (declspecs->type, declspecs->decl_attr);\n+    }\n \n   if ((decl_context == NORMAL || decl_context == FIELD)\n       && current_scope == file_scope\n@@ -10814,6 +10833,8 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n   specs->typespec_kind = spec.kind;\n   if (TREE_DEPRECATED (type))\n     specs->deprecated_p = true;\n+  if (TREE_UNAVAILABLE (type))\n+    specs->unavailable_p = true;\n \n   /* Handle type specifier keywords.  */\n   if (TREE_CODE (type) == IDENTIFIER_NODE"}, {"sha": "d50d0cb7f2df5684bd2d199824db1aae124cc945", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -370,6 +370,8 @@ struct c_declspecs {\n   BOOL_BITFIELD explicit_signed_p : 1;\n   /* Whether the specifiers include a deprecated typedef.  */\n   BOOL_BITFIELD deprecated_p : 1;\n+  /* Whether the specifiers include an unavailable typedef.  */\n+  BOOL_BITFIELD unavailable_p : 1;\n   /* Whether the type defaulted to \"int\" because there were no type\n      specifiers.  */\n   BOOL_BITFIELD default_int_p : 1;"}, {"sha": "5849c5ab23d321a065fb3cdf4085a1a14d1beaa3", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -2558,7 +2558,9 @@ build_component_ref (location_t loc, tree datum, tree component,\n \t      || (use_datum_quals && TREE_THIS_VOLATILE (datum)))\n \t    TREE_THIS_VOLATILE (ref) = 1;\n \n-\t  if (TREE_DEPRECATED (subdatum))\n+\t  if (TREE_UNAVAILABLE (subdatum))\n+\t    error_unavailable_use (subdatum, NULL_TREE);\n+\t  else if (TREE_DEPRECATED (subdatum))\n \t    warn_deprecated_use (subdatum, NULL_TREE);\n \n \t  datum = ref;\n@@ -2843,7 +2845,9 @@ build_external_ref (location_t loc, tree id, bool fun, tree *type)\n   if (TREE_TYPE (ref) == error_mark_node)\n     return error_mark_node;\n \n-  if (TREE_DEPRECATED (ref))\n+  if (TREE_UNAVAILABLE (ref))\n+    error_unavailable_use (ref, NULL_TREE);\n+  else if (TREE_DEPRECATED (ref))\n     warn_deprecated_use (ref, NULL_TREE);\n \n   /* Recursive call does not count as usage.  */"}, {"sha": "7bbf1342ef89b7bc546d7d765ab25b49c8f2c1ae", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -9506,7 +9506,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  already_used = true;\n \t}\n       else\n-\tcp_warn_deprecated_use (fn, complain);\n+\tcp_handle_deprecated_or_unavailable (fn, complain);\n \n       if (eliding_temp && DECL_BASE_CONSTRUCTOR_P (fn)\n \t  && !make_base_init_ok (arg))\n@@ -9580,7 +9580,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n           suppress_warning (val, OPT_Wunused);\n \t}\n \n-      cp_warn_deprecated_use (fn, complain);\n+      cp_handle_deprecated_or_unavailable (fn, complain);\n \n       return val;\n     }"}, {"sha": "17876c724ab5938c4d8803fed35ca6250cf5e409", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -5719,6 +5719,7 @@ type_build_ctor_call (tree t)\n       tree fn = *iter;\n       if (!DECL_ARTIFICIAL (fn)\n \t  || TREE_DEPRECATED (fn)\n+\t  || TREE_UNAVAILABLE (fn)\n \t  || DECL_DELETED_FN (fn))\n \treturn true;\n     }\n@@ -5747,6 +5748,7 @@ type_build_dtor_call (tree t)\n       tree fn = *iter;\n       if (!DECL_ARTIFICIAL (fn)\n \t  || TREE_DEPRECATED (fn)\n+\t  || TREE_UNAVAILABLE (fn)\n \t  || DECL_DELETED_FN (fn))\n \treturn true;\n     }"}, {"sha": "435f32bf90914c4455752283890fa54a3c28f7bd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -6549,7 +6549,7 @@ extern void validate_conversion_obstack\t\t(void);\n extern void mark_versions_used\t\t\t(tree);\n extern int unsafe_return_slot_p\t\t\t(tree);\n extern bool make_safe_copy_elision\t\t(tree, tree);\n-extern bool cp_warn_deprecated_use\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n+extern bool cp_handle_deprecated_or_unavailable (tree, tsubst_flags_t = tf_warning_or_error);\n extern void cp_warn_deprecated_use_scopes\t(tree);\n extern tree get_function_version_dispatcher\t(tree);\n "}, {"sha": "146979ba96b336a8c7ea87081604b474731bf1f7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -2418,6 +2418,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n       if (TREE_DEPRECATED (newdecl))\n \tTREE_DEPRECATED (olddecl) = 1;\n \n+      /* Merge unavailability.  */\n+      if (TREE_UNAVAILABLE (newdecl))\n+\tTREE_UNAVAILABLE (olddecl) = 1;\n+\n       /* Preserve function specific target and optimization options */\n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n@@ -11757,20 +11761,24 @@ grokdeclarator (const cp_declarator *declarator,\n   if (attrlist && *attrlist == error_mark_node)\n     *attrlist = NULL_TREE;\n \n-  /* An object declared as __attribute__((deprecated)) suppresses\n-     warnings of uses of other deprecated items.  */\n+  /* An object declared as __attribute__((unavailable)) suppresses\n+     any reports of being declared with unavailable or deprecated\n+     items.  An object declared as __attribute__((deprecated))\n+     suppresses warnings of uses of other deprecated items.  */\n   auto ds = make_temp_override (deprecated_state);\n-  if (attrlist && lookup_attribute (\"deprecated\", *attrlist))\n+  if (attrlist && lookup_attribute (\"unavailable\", *attrlist))\n+    deprecated_state = UNAVAILABLE_DEPRECATED_SUPPRESS;\n+  else if (attrlist && lookup_attribute (\"deprecated\", *attrlist))\n     deprecated_state = DEPRECATED_SUPPRESS;\n \n-  cp_warn_deprecated_use (type);\n+  cp_handle_deprecated_or_unavailable (type);\n   if (type && TREE_CODE (type) == TYPE_DECL)\n     {\n       cp_warn_deprecated_use_scopes (CP_DECL_CONTEXT (type));\n       typedef_decl = type;\n       type = TREE_TYPE (typedef_decl);\n       if (DECL_ARTIFICIAL (typedef_decl))\n-\tcp_warn_deprecated_use (type);\n+\tcp_handle_deprecated_or_unavailable (type);\n     }\n   /* No type at all: default to `int', and set DEFAULTED_INT\n      because it was not a user-defined typedef.  */\n@@ -14417,6 +14425,43 @@ type_is_deprecated (tree type)\n   return NULL_TREE;\n }\n \n+/* Returns an unavailable type used within TYPE, or NULL_TREE if none.  */\n+\n+static tree\n+type_is_unavailable (tree type)\n+{\n+  enum tree_code code;\n+  if (TREE_UNAVAILABLE (type))\n+    return type;\n+  if (TYPE_NAME (type))\n+    {\n+      if (TREE_UNAVAILABLE (TYPE_NAME (type)))\n+\treturn type;\n+      else\n+\t{\n+\t  cp_warn_deprecated_use_scopes (CP_DECL_CONTEXT (TYPE_NAME (type)));\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n+  /* Do warn about using typedefs to a deprecated class.  */\n+  if (OVERLOAD_TYPE_P (type) && type != TYPE_MAIN_VARIANT (type))\n+    return type_is_deprecated (TYPE_MAIN_VARIANT (type));\n+\n+  code = TREE_CODE (type);\n+\n+  if (code == POINTER_TYPE || code == REFERENCE_TYPE\n+      || code == OFFSET_TYPE || code == FUNCTION_TYPE\n+      || code == METHOD_TYPE || code == ARRAY_TYPE)\n+    return type_is_unavailable (TREE_TYPE (type));\n+\n+  if (TYPE_PTRMEMFUNC_P (type))\n+    return type_is_unavailable\n+      (TREE_TYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type))));\n+\n+  return NULL_TREE;\n+}\n+\n /* Decode the list of parameter types for a function type.\n    Given the list of things declared inside the parens,\n    return a list of types.\n@@ -14476,11 +14521,18 @@ grokparms (tree parmlist, tree *parms)\n \n       if (type != error_mark_node)\n \t{\n-\t  if (deprecated_state != DEPRECATED_SUPPRESS)\n+\t  if (deprecated_state != UNAVAILABLE_DEPRECATED_SUPPRESS)\n+\t    {\n+\t      tree unavailtype = type_is_unavailable (type);\n+\t      if (unavailtype)\n+\t\tcp_handle_deprecated_or_unavailable (unavailtype);\n+\t    }\n+\t  if (deprecated_state != DEPRECATED_SUPPRESS\n+\t      && deprecated_state != UNAVAILABLE_DEPRECATED_SUPPRESS)\n \t    {\n \t      tree deptype = type_is_deprecated (type);\n \t      if (deptype)\n-\t\tcp_warn_deprecated_use (deptype);\n+\t\tcp_handle_deprecated_or_unavailable (deptype);\n \t    }\n \n \t  /* [dcl.fct] \"A parameter with volatile-qualified type is"}, {"sha": "4a9b399730a9c8d85479224ddd5fb3bd6c3ffb60", "filename": "gcc/cp/decl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.h?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -44,7 +44,8 @@ extern void name_unnamed_type (tree, tree);\n \n enum deprecated_states {\n   DEPRECATED_NORMAL,\n-  DEPRECATED_SUPPRESS\n+  DEPRECATED_SUPPRESS,\n+  UNAVAILABLE_DEPRECATED_SUPPRESS\n };\n \n extern enum deprecated_states deprecated_state;"}, {"sha": "107edcaaccfcaf7bf1fce830eb6a526ea06aedf0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -1635,6 +1635,17 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n \tif (*decl == pattern)\n \t  TREE_DEPRECATED (tmpl) = true;\n       }\n+\n+  /* Likewise, propagate unavailability out to the template.  */\n+  if (TREE_UNAVAILABLE (*decl))\n+    if (tree ti = get_template_info (*decl))\n+      {\n+\ttree tmpl = TI_TEMPLATE (ti);\n+\ttree pattern = (TYPE_P (*decl) ? TREE_TYPE (tmpl)\n+\t\t\t: DECL_TEMPLATE_RESULT (tmpl));\n+\tif (*decl == pattern)\n+\t  TREE_UNAVAILABLE (tmpl) = true;\n+      }\n }\n \f\n /* Walks through the namespace- or function-scope anonymous union\n@@ -5498,14 +5509,47 @@ maybe_instantiate_decl (tree decl)\n     }\n }\n \n-/* Maybe warn if DECL is deprecated, subject to COMPLAIN.  Returns whether or\n-   not a warning was emitted.  */\n+/* Error if the DECL is unavailable (unless this is currently suppressed).\n+   Maybe warn if DECL is deprecated, subject to COMPLAIN.  Returns true if\n+   an error or warning was emitted.  */\n \n bool\n-cp_warn_deprecated_use (tree decl, tsubst_flags_t complain)\n+cp_handle_deprecated_or_unavailable (tree decl, tsubst_flags_t complain)\n {\n-  if (!(complain & tf_warning) || !decl\n-      || deprecated_state == DEPRECATED_SUPPRESS)\n+  if (!decl)\n+    return false;\n+\n+  if ((complain & tf_error)\n+      && deprecated_state != UNAVAILABLE_DEPRECATED_SUPPRESS)\n+    {\n+      if (TREE_UNAVAILABLE (decl))\n+\t{\n+\t  error_unavailable_use (decl, NULL_TREE);\n+\t  return true;\n+\t}\n+      else\n+\t{\n+\t  /* Perhaps this is an unavailable typedef.  */\n+\t  if (TYPE_P (decl)\n+\t      && TYPE_NAME (decl)\n+\t      && TREE_UNAVAILABLE (TYPE_NAME (decl)))\n+\t    {\n+\t      decl = TYPE_NAME (decl);\n+\t      /* Don't error within members of a unavailable type.  */\n+\t      if (TYPE_P (decl)\n+\t\t  && currently_open_class (decl))\n+\t\treturn false;\n+\n+\t      error_unavailable_use (decl, NULL_TREE);\n+\t      return true;\n+\t    }\n+\t}\n+      /* Carry on to consider deprecatedness.  */\n+    }\n+\n+  if (!(complain & tf_warning)\n+      || deprecated_state == DEPRECATED_SUPPRESS\n+      || deprecated_state == UNAVAILABLE_DEPRECATED_SUPPRESS)\n     return false;\n \n   if (!TREE_DEPRECATED (decl))\n@@ -5565,7 +5609,7 @@ cp_warn_deprecated_use_scopes (tree scope)\n \t && scope != global_namespace)\n     {\n       if ((TREE_CODE (scope) == NAMESPACE_DECL || OVERLOAD_TYPE_P (scope))\n-\t  && cp_warn_deprecated_use (scope))\n+\t  && cp_handle_deprecated_or_unavailable (scope))\n \treturn;\n       if (TYPE_P (scope))\n \tscope = CP_TYPE_CONTEXT (scope);\n@@ -5677,7 +5721,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n       TREE_USED (decl) = true;\n     }\n \n-  cp_warn_deprecated_use (decl, complain);\n+  cp_handle_deprecated_or_unavailable (decl, complain);\n \n   /* We can only check DECL_ODR_USED on variables or functions with\n      DECL_LANG_SPECIFIC set, and these are also the only decls that we"}, {"sha": "ea71f9ca91a61d1e28420658d83272dd75ce6f33", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -18428,18 +18428,26 @@ cp_parser_template_name (cp_parser* parser,\n   /* If DECL is a template, then the name was a template-name.  */\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     {\n-      if (TREE_DEPRECATED (decl)\n-\t  && deprecated_state != DEPRECATED_SUPPRESS)\n+      if ((TREE_DEPRECATED (decl) || TREE_UNAVAILABLE (decl))\n+\t  && deprecated_state != UNAVAILABLE_DEPRECATED_SUPPRESS)\n \t{\n \t  tree d = DECL_TEMPLATE_RESULT (decl);\n \t  tree attr;\n \t  if (TREE_CODE (d) == TYPE_DECL)\n-\t    attr = lookup_attribute (\"deprecated\",\n-\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (d)));\n+\t    attr = TYPE_ATTRIBUTES (TREE_TYPE (d));\n \t  else\n-\t    attr = lookup_attribute (\"deprecated\",\n-\t\t\t\t     DECL_ATTRIBUTES (d));\n-\t  warn_deprecated_use (decl, attr);\n+\t    attr = DECL_ATTRIBUTES (d);\n+\t  if (TREE_UNAVAILABLE (decl))\n+\t    {\n+\t      attr = lookup_attribute (\"unavailable\", attr);\n+\t      error_unavailable_use (decl, attr);\n+\t    }\n+\t  else if (TREE_DEPRECATED (decl)\n+\t\t   && deprecated_state != DEPRECATED_SUPPRESS)\n+\t    {\n+\t      attr = lookup_attribute (\"deprecated\", attr);\n+\t      warn_deprecated_use (decl, attr);\n+\t    }\n \t}\n     }\n   else\n@@ -18690,7 +18698,9 @@ cp_parser_template_argument (cp_parser* parser)\n     }\n   if (cp_parser_parse_definitely (parser))\n     {\n-      if (TREE_DEPRECATED (argument))\n+      if (TREE_UNAVAILABLE (argument))\n+\terror_unavailable_use (argument, NULL_TREE);\n+      else if (TREE_DEPRECATED (argument))\n \twarn_deprecated_use (argument, NULL_TREE);\n       return argument;\n     }\n@@ -24351,9 +24361,9 @@ cp_parser_parameter_declaration_list (cp_parser* parser, cp_parser_flags flags)\n \t\t\t\t\t   /*template_parm_p=*/false,\n \t\t\t\t\t   &parenthesized_p);\n \n-      /* We don't know yet if the enclosing context is deprecated, so wait\n-\t and warn in grokparms if appropriate.  */\n-      deprecated_state = DEPRECATED_SUPPRESS;\n+      /* We don't know yet if the enclosing context is unavailable or deprecated,\n+\t so wait and deal with it in grokparms if appropriate.  */\n+      deprecated_state = UNAVAILABLE_DEPRECATED_SUPPRESS;\n \n       if (parameter && !cp_parser_error_occurred (parser))\n \t{"}, {"sha": "cc61b509f8a5552b5c88a29675dd88c37713708b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -2709,7 +2709,10 @@ build_class_member_access_expr (cp_expr object, tree member,\n       member_scope = DECL_CLASS_CONTEXT (member);\n       if (!mark_used (member, complain) && !(complain & tf_error))\n \treturn error_mark_node;\n-      if (TREE_DEPRECATED (member))\n+\n+      if (TREE_UNAVAILABLE (member))\n+\terror_unavailable_use (member, NULL_TREE);\n+      else if (TREE_DEPRECATED (member))\n \twarn_deprecated_use (member, NULL_TREE);\n     }\n   else\n@@ -3424,7 +3427,9 @@ finish_class_member_access_expr (cp_expr object, tree name, bool template_p,\n \t}\n     }\n \n-  if (TREE_DEPRECATED (member))\n+  if (TREE_UNAVAILABLE (member))\n+    error_unavailable_use (member, NULL_TREE);\n+  else if (TREE_DEPRECATED (member))\n     warn_deprecated_use (member, NULL_TREE);\n \n   if (template_p)"}, {"sha": "f78dbf238afcbb4b10533bd5768e8b9e7517ac8e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -2163,7 +2163,7 @@ build_functional_cast_1 (location_t loc, tree exp, tree parms,\n       type = TREE_TYPE (exp);\n \n       if (DECL_ARTIFICIAL (exp))\n-\tcp_warn_deprecated_use (type);\n+\tcp_handle_deprecated_or_unavailable (type);\n     }\n   else\n     type = exp;"}, {"sha": "e9ca48cecb62c23c28e54af9ac2a8f038ab19ae8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -2865,6 +2865,19 @@ types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n The message attached to the attribute is affected by the setting of\n the @option{-fmessage-length} option.\n \n+@item unavailable\n+@itemx unavailable (@var{msg})\n+@cindex @code{unavailable} function attribute\n+The @code{unavailable} attribute results in an error if the function\n+is used anywhere in the source file.  This is useful when identifying\n+functions that have been removed from a particular variation of an\n+interface.  Other than emitting an error rather than a warning, the\n+@code{unavailable} attribute behaves in the same manner as\n+@code{deprecated}.\n+\n+The @code{unavailable} attribute can also be used for variables and\n+types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n+\n @item error (\"@var{message}\")\n @itemx warning (\"@var{message}\")\n @cindex @code{error} function attribute\n@@ -7402,6 +7415,22 @@ types (@pxref{Common Function Attributes},\n The message attached to the attribute is affected by the setting of\n the @option{-fmessage-length} option.\n \n+@item unavailable\n+@itemx unavailable (@var{msg})\n+@cindex @code{unavailable} variable attribute\n+The @code{unavailable} attribute indicates that the variable so marked\n+is not available, if it is used anywhere in the source file.  It behaves\n+in the same manner as the @code{deprecated} attribute except that the\n+compiler will emit an error rather than a warning.\n+\n+It is expected that items marked as @code{deprecated} will eventually be\n+withdrawn from interfaces, and then become unavailable.  This attribute\n+allows for marking them appropriately.\n+\n+The @code{unavailable} attribute can also be used for functions and\n+types (@pxref{Common Function Attributes},\n+@pxref{Common Type Attributes}).\n+\n @item mode (@var{mode})\n @cindex @code{mode} variable attribute\n This attribute specifies the data type for the declaration---whichever\n@@ -8461,6 +8490,17 @@ variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n The message attached to the attribute is affected by the setting of\n the @option{-fmessage-length} option.\n \n+@item unavailable\n+@itemx unavailable (@var{msg})\n+@cindex @code{unavailable} type attribute\n+The @code{unavailable} attribute behaves in the same manner as the\n+@code{deprecated} one, but emits an error rather than a warning.  It is\n+used to indicate that a (perhaps previously @code{deprecated}) type is\n+no longer usable.\n+\n+The @code{unavailable} attribute can also be used for functions and\n+variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n+\n @item designated_init\n @cindex @code{designated_init} type attribute\n This attribute may only be applied to structure types.  It indicates\n@@ -8938,6 +8978,12 @@ of the deprecated enumerator, to enable users to easily find further\n information about why the enumerator is deprecated, or what they should\n do instead.  Note that the warnings only occurs for uses.\n \n+@item unavailable\n+@cindex @code{unavailable} enumerator attribute\n+The @code{unavailable} attribute results in an error if the enumerator\n+is used anywhere in the source file.  In other respects it behaves in the\n+same manner as the @code{deprecated} attribute.\n+\n @end table\n \n @node Statement Attributes"}, {"sha": "9baa46d2243af6d3c682b94499944893c728041d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -1302,6 +1302,7 @@ objc_add_property_declaration (location_t location, tree decl,\n   TREE_TYPE (property_decl) = p_type;\n   DECL_SOURCE_LOCATION (property_decl) = DECL_SOURCE_LOCATION (decl);\n   TREE_DEPRECATED (property_decl) = TREE_DEPRECATED (decl);\n+  TREE_UNAVAILABLE (property_decl) = TREE_UNAVAILABLE (decl);\n \n   /* Add property-specific information.  */\n   PROPERTY_NAME (property_decl) = DECL_NAME (decl);\n@@ -1439,6 +1440,7 @@ maybe_make_artificial_property_decl (tree interface, tree implementation,\n       TREE_TYPE (property_decl) = type;\n       DECL_SOURCE_LOCATION (property_decl) = input_location;\n       TREE_DEPRECATED (property_decl) = 0;\n+      TREE_UNAVAILABLE (property_decl) = 0;\n       DECL_ARTIFICIAL (property_decl) = 1;\n \n       /* Add property-specific information.  Note that one of\n@@ -1717,7 +1719,7 @@ objc_maybe_build_component_ref (tree object, tree property_ident)\n     {\n       tree expression;\n       tree getter_call;\n-      tree deprecated_method_prototype = NULL_TREE;\n+      tree method_prototype_avail = NULL_TREE;\n \n       /* We have an additional nasty problem here; if this\n \t PROPERTY_REF needs to become a 'getter', then the conversion\n@@ -1751,10 +1753,10 @@ objc_maybe_build_component_ref (tree object, tree property_ident)\n \t      is deprecated, but record the fact that the getter is\n \t      deprecated by setting PROPERTY_REF_DEPRECATED_GETTER to\n \t      the method prototype.  */\n-\t   &deprecated_method_prototype);\n+\t   &method_prototype_avail);\n \n       expression = build4 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call,\n-\t\t\t   deprecated_method_prototype);\n+\t\t\t   method_prototype_avail);\n       SET_EXPR_LOCATION (expression, input_location);\n       TREE_SIDE_EFFECTS (expression) = 1;\n \n@@ -1804,7 +1806,9 @@ objc_build_class_component_ref (tree class_name, tree property_ident)\n     }\n   else\n     {\n-      if (TREE_DEPRECATED (rtype))\n+      if (TREE_UNAVAILABLE (rtype))\n+\terror (\"class %qE is unavailable\", class_name);\n+      else if (TREE_DEPRECATED (rtype))\n \twarning (OPT_Wdeprecated_declarations, \"class %qE is deprecated\", class_name);\n     }\n \n@@ -1816,17 +1820,17 @@ objc_build_class_component_ref (tree class_name, tree property_ident)\n     {\n       tree expression;\n       tree getter_call;\n-      tree deprecated_method_prototype = NULL_TREE;\n+      tree method_prototype_avail = NULL_TREE;\n \n       if (PROPERTY_HAS_NO_GETTER (x))\n \tgetter_call = NULL_TREE;\n       else\n \tgetter_call = objc_finish_message_expr\n \t  (object, PROPERTY_GETTER_NAME (x), NULL_TREE,\n-\t   &deprecated_method_prototype);\n+\t   &method_prototype_avail);\n \n       expression = build4 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call,\n-\t\t\t   deprecated_method_prototype);\n+\t\t\t   method_prototype_avail);\n       SET_EXPR_LOCATION (expression, input_location);\n       TREE_SIDE_EFFECTS (expression) = 1;\n \n@@ -4598,6 +4602,8 @@ build_private_template (tree klass)\n       /* Copy the attributes from the class to the type.  */\n       if (TREE_DEPRECATED (klass))\n \tTREE_DEPRECATED (record) = 1;\n+      if (TREE_UNAVAILABLE (klass))\n+\tTREE_UNAVAILABLE (record) = 1;\n     }\n }\n \n@@ -5023,6 +5029,7 @@ objc_decl_method_attributes (tree *node, tree attributes, int flags)\n \t  tree name = TREE_PURPOSE (attribute);\n \n \t  if (is_attribute_p  (\"deprecated\", name)\n+\t      || is_attribute_p (\"unavailable\", name)\n \t      || is_attribute_p (\"sentinel\", name)\n \t      || is_attribute_p (\"noreturn\", name))\n \t    {\n@@ -5488,9 +5495,9 @@ lookup_method_in_hash_lists (tree sel_name, int is_class)\n    C++ template functions, it is called from 'build_expr_from_tree'\n    (in decl2.c) after RECEIVER and METHOD_PARAMS have been expanded.\n \n-   If the DEPRECATED_METHOD_PROTOTYPE argument is NULL, then we warn\n+   If the method_prototype_avail argument is NULL, then we warn\n    if the method being used is deprecated.  If it is not NULL, instead\n-   of deprecating, we set *DEPRECATED_METHOD_PROTOTYPE to the method\n+   of deprecating, we set *method_prototype_avail to the method\n    prototype that was used and is deprecated.  This is useful for\n    getter calls that are always generated when compiling dot-syntax\n    expressions, even if they may not be used.  In that case, we don't\n@@ -5499,7 +5506,7 @@ lookup_method_in_hash_lists (tree sel_name, int is_class)\n    used.  */\n tree\n objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n-\t\t\t  tree *deprecated_method_prototype)\n+\t\t\t  tree *method_prototype_avail)\n {\n   tree method_prototype = NULL_TREE, rprotos = NULL_TREE, rtype;\n   tree retval, class_tree;\n@@ -5811,10 +5818,17 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t In practice this makes sense since casting an object to 'id'\n \t is often used precisely to turn off warnings associated with\n \t the object being of a particular class.  */\n-      if (TREE_DEPRECATED (method_prototype) && rtype != NULL_TREE)\n+      if (TREE_UNAVAILABLE (method_prototype) && rtype != NULL_TREE)\n \t{\n-\t  if (deprecated_method_prototype)\n-\t    *deprecated_method_prototype = method_prototype;\n+\t  if (method_prototype_avail)\n+\t    *method_prototype_avail = method_prototype;\n+\t  else\n+\t    error_unavailable_use (method_prototype, NULL_TREE);\n+\t}\n+      else if (TREE_DEPRECATED (method_prototype) && rtype != NULL_TREE)\n+\t{\n+\t  if (method_prototype_avail)\n+\t    *method_prototype_avail = method_prototype;\n \t  else\n \t    warn_deprecated_use (method_prototype, NULL_TREE);\n \t}\n@@ -6986,7 +7000,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t}\n       else\n \t{\n-\t  if (TREE_DEPRECATED (super_interface))\n+\t  if (TREE_UNAVAILABLE (super_interface))\n+\t    error (\"class %qE is not available\", super);\n+\t  else if (TREE_DEPRECATED (super_interface))\n \t    warning (OPT_Wdeprecated_declarations, \"class %qE is deprecated\",\n \t\t     super);\n \t  super_name = super;\n@@ -7096,7 +7112,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t      /* TODO: Document what the objc_exception attribute is/does.  */\n \t      /* We handle the 'deprecated', 'visibility' and (undocumented)\n \t\t 'objc_exception' attributes.  */\n-\t      if (is_attribute_p  (\"deprecated\", name))\n+\t      if (is_attribute_p  (\"unavailable\", name))\n+\t\tTREE_UNAVAILABLE (klass) = 1;\n+\t      else if (is_attribute_p  (\"deprecated\", name))\n \t\tTREE_DEPRECATED (klass) = 1;\n \t      else if (is_attribute_p  (\"objc_exception\", name))\n \t\tCLASS_HAS_EXCEPTION_ATTR (klass) = 1;\n@@ -7127,7 +7145,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t  }\n \telse\n \t  {\n-\t    if (TREE_DEPRECATED (class_category_is_assoc_with))\n+\t    if (TREE_UNAVAILABLE (class_category_is_assoc_with))\n+\t      error (\"class %qE is unavailable\", class_name);\n+\t    else if (TREE_DEPRECATED (class_category_is_assoc_with))\n \t      warning (OPT_Wdeprecated_declarations, \"class %qE is deprecated\",\n \t\t       class_name);\n \n@@ -8154,6 +8174,7 @@ finish_class (tree klass)\n \t\telse\n \t\t  objc_add_method (objc_interface_context, getter_decl, false, false);\n \t\tTREE_DEPRECATED (getter_decl) = TREE_DEPRECATED (x);\n+\t\tTREE_UNAVAILABLE (getter_decl) = TREE_UNAVAILABLE (x);\n \t\tMETHOD_PROPERTY_CONTEXT (getter_decl) = x;\n \t      }\n \n@@ -8198,6 +8219,7 @@ finish_class (tree klass)\n \t\t    else\n \t\t      objc_add_method (objc_interface_context, setter_decl, false, false);\n \t\t    TREE_DEPRECATED (setter_decl) = TREE_DEPRECATED (x);\n+\t\t    TREE_UNAVAILABLE (setter_decl) = TREE_UNAVAILABLE (x);\n \t\t    METHOD_PROPERTY_CONTEXT (setter_decl) = x;\n \t\t  }\n \t      }\n@@ -8251,7 +8273,9 @@ lookup_protocol (tree ident, bool warn_if_deprecated, bool definition_required)\n   for (chain = protocol_chain; chain; chain = TREE_CHAIN (chain))\n     if (ident == PROTOCOL_NAME (chain))\n       {\n-\tif (warn_if_deprecated && TREE_DEPRECATED (chain))\n+\tif (TREE_UNAVAILABLE (chain))\n+\t  error (\"protocol %qE is unavailable\", PROTOCOL_NAME (chain));\n+\telse if (warn_if_deprecated && TREE_DEPRECATED (chain))\n \t  {\n \t    /* It would be nice to use warn_deprecated_use() here, but\n \t       we are using TREE_CHAIN (which is supposed to be the\n@@ -8276,6 +8300,7 @@ void\n objc_declare_protocol (tree name, tree attributes)\n {\n   bool deprecated = false;\n+  bool unavailable = false;\n \n #ifdef OBJCPLUS\n   if (current_namespace != global_namespace) {\n@@ -8294,6 +8319,8 @@ objc_declare_protocol (tree name, tree attributes)\n \n \t  if (is_attribute_p  (\"deprecated\", name))\n \t    deprecated = true;\n+\t  else if (is_attribute_p  (\"unavailable\", name))\n+\t    unavailable = true;\n \t  else\n \t    warning (OPT_Wattributes, \"%qE attribute directive ignored\", name);\n \t}\n@@ -8318,6 +8345,8 @@ objc_declare_protocol (tree name, tree attributes)\n \t  TYPE_ATTRIBUTES (protocol) = attributes;\n \t  if (deprecated)\n \t    TREE_DEPRECATED (protocol) = 1;\n+\t  if (unavailable)\n+\t    TREE_UNAVAILABLE (protocol) = 1;\n \t}\n     }\n }\n@@ -8327,6 +8356,7 @@ start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n {\n   tree protocol;\n   bool deprecated = false;\n+  bool unavailable = false;\n \n #ifdef OBJCPLUS\n   if (current_namespace != global_namespace) {\n@@ -8345,6 +8375,8 @@ start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n \n \t  if (is_attribute_p  (\"deprecated\", name))\n \t    deprecated = true;\n+\t  else if (is_attribute_p  (\"unavailable\", name))\n+\t    unavailable = true;\n \t  else\n \t    warning (OPT_Wattributes, \"%qE attribute directive ignored\", name);\n \t}\n@@ -8384,6 +8416,8 @@ start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n       TYPE_ATTRIBUTES (protocol) = attributes;\n       if (deprecated)\n \tTREE_DEPRECATED (protocol) = 1;\n+      if (unavailable)\n+\tTREE_UNAVAILABLE (protocol) = 1;\n     }\n \n   return protocol;\n@@ -8913,6 +8947,8 @@ really_start_method (tree method,\n \t\t warnings are produced), but just in case.  */\n \t      if (TREE_DEPRECATED (proto))\n \t\tTREE_DEPRECATED (method) = 1;\n+\t      if (TREE_UNAVAILABLE (proto))\n+\t\tTREE_UNAVAILABLE (method) = 1;\n \n \t      /* If the method in the @interface was marked as\n \t\t 'noreturn', mark the function implementing the method\n@@ -9644,12 +9680,17 @@ objc_gimplify_property_ref (tree *expr_p)\n       return;\n     }\n \n+  /* FIXME, this should be a label indicating availability in general.  */\n   if (PROPERTY_REF_DEPRECATED_GETTER (*expr_p))\n     {\n-      /* PROPERTY_REF_DEPRECATED_GETTER contains the method prototype\n+      if (TREE_UNAVAILABLE (PROPERTY_REF_DEPRECATED_GETTER (*expr_p)))\n+\terror_unavailable_use (PROPERTY_REF_DEPRECATED_GETTER (*expr_p),\n+\t\t\t       NULL_TREE);\n+      else\n+\t/* PROPERTY_REF_DEPRECATED_GETTER contains the method prototype\n \t that is deprecated.  */\n-      warn_deprecated_use (PROPERTY_REF_DEPRECATED_GETTER (*expr_p),\n-\t\t\t   NULL_TREE);\n+\twarn_deprecated_use (PROPERTY_REF_DEPRECATED_GETTER (*expr_p),\n+\t\t\t     NULL_TREE);\n     }\n \n   call_exp = getter;"}, {"sha": "d1fbd044c27bc245f35c29fd62e8caf5d9de0316", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -364,6 +364,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n     fputs (code == CALL_EXPR ? \" must-tail-call\" : \" static\", file);\n   if (TREE_DEPRECATED (node))\n     fputs (\" deprecated\", file);\n+  if (TREE_UNAVAILABLE (node))\n+    fputs (\" unavailable\", file);\n   if (TREE_VISITED (node))\n     fputs (\" visited\", file);\n "}, {"sha": "862651f6cbf6358ed1203ac855c2725314f46d6c", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-1.C", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-1.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,113 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int INT1 __attribute__((unavailable));\n+typedef INT1 INT2 __attribute__ ((__unavailable__));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+typedef INT1 INT1b __attribute__ ((unavailable));\n+\n+INT1 should_be_unavailable; \t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+INT1a should_not_be_unavailable;\n+\n+INT1 f1(void) __attribute__ ((unavailable));\n+INT1 f2(void) { return 0; }\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__unavailable__));\n+INT2 f4(void) { return 0; }\t\t/* { dg-error \"'INT2' is unavailable\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-error \"'INT2' is unavailable\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__unavailable__));\n+\n+typedef enum Color {red, green, blue} Color __attribute__((unavailable));\n+\n+int g1;\n+int g2 __attribute__ ((unavailable));\n+int g3 __attribute__ ((__unavailable__));\n+Color k;\t\t\t\t/* { dg-error \"'Color' is unavailable\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((unavailable));\n+  int field3;\n+  int field4 __attribute__ ((__unavailable__));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((unavailable));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((unavailable));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((unavailable));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+   int x __attribute__ ((unavailable));\n+   int y __attribute__ ((__unavailable__));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-error \"'x' is unavailable\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'y' is unavailable\" \"y\" { target *-*-* } .-1 } */\n+\t\t\t\t\t/* { dg-error \"'g2' is unavailable\" \"g2\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-error \"'g3' is unavailable\" \"g3\" { target *-*-* } .-3 } */\n+   return f1(); \t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable\" \"f1\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+\n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-error \"'S1::field2' is unavailable\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-error \"'S1::field4' is unavailable\" \"\" } */\n+     return p->field3;\n+\n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-error \"'S1::u2' is unavailable\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-error \"'S1::<unnamed union>::field6' is unavailable\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'S1::field8' is unavailable\" \"field8\" { target *-*-* } .-1 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+} __attribute__ ((unavailable));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-error \"'SS1' is unavailable\" \"\" } */\n+\n+struct __attribute__ ((__unavailable__)) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-error \"'SS2' is unavailable\" \"\" } */\n+\n+#ifdef __cplusplus\n+class T {\n+  public:\n+    void member1(int) __attribute__ ((unavailable));\n+    void member2(INT1) __attribute__ ((__unavailable__));\n+    int member3(T *);\n+    int x;\n+} __attribute__ ((unavailable));\n+\n+T *p3;\t\t\t\t// { dg-error \"'T' is unavailable\" }\n+\n+inline void T::member1(int) {}\n+\n+int T::member3(T *p)\t\t// { dg-error \"'T' is unavailable\" }\n+{\n+  p->member1(1);\t\t\t/* { dg-error \"'void T::member1\\\\(int\\\\)' is unavailable\" \"\" } */\n+  (*p).member1(2);\t\t\t/* { dg-error \"'void T::member1\\\\(int\\\\)' is unavailable\" \"\" } */\n+  p->member2(1);\t\t\t/* { dg-error \"'void T::member2\\\\(INT1\\\\)' is unavailable\" \"\" } */\n+  (*p).member2(2);\t\t\t/* { dg-error \"'void T::member2\\\\(INT1\\\\)' is unavailable\" \"\" } */\n+  p->member3(p);\n+  (*p).member3(p);\n+  return f1(); \t\t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable\" \"\" } */\n+}\n+#endif"}, {"sha": "3de5532817e1aedefae163db57be5b3c9231dbfd", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-2.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,10 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void func(void);\n+void func(void) __attribute__((unavailable));\n+\n+void f(void) {\n+  func(); /* { dg-error \"'void func\\\\(\\\\)' is unavailable\" } */\n+}"}, {"sha": "1f267ea78c4b54192f2d203ee1bf71ff5ba24297", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-3.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,14 @@\n+/* Check operator with __attribute__((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct Foo\n+{\n+  operator int() __attribute__((unavailable));\n+};\n+\n+void g(void)\n+{\n+  Foo f;\n+  (int)f; // { dg-error \"'Foo::operator int\\\\(\\\\)' is unavailable\" }\n+}"}, {"sha": "b7f352ee3bd285b12db032a4c4ac10762f629668", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-4.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,11 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct B {\n+    virtual int foo() __attribute__((unavailable));\n+};\n+\n+int main(void) {\n+  ((B*)0)->foo(); \t\t// { dg-error \"unavailable\" }\n+}"}, {"sha": "3beea5d22c5ec872d942eede91a001069b1a7f52", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-5.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,6 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct Foo { int i; } __attribute__ ((unavailable));\n+void foo() { Foo f; }\t\t// { dg-error \"unavailable\" }"}, {"sha": "8a57ea0d88c438e1d7a511a3656e322f8bf09f70", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-6.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-6.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,110 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int INT1 __attribute__((unavailable(\"You can't use INT1\")));\n+typedef INT1 INT2 __attribute__ ((__unavailable__(\"You can't use INT2\")));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+\n+INT1 should_be_unavailable; \t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+INT1a should_not_be_unavailable;\n+\n+INT1 f1(void) __attribute__ ((unavailable(\"You can't use f1\")));\n+INT1 f2(void) { return 0; }\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__unavailable__(\"You can't use f3\")));\n+INT2 f4(void) { return 0; }\t\t/* { dg-error \"'INT2' is unavailable: You can't use INT2\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-error \"'INT2' is unavailable\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__unavailable__(\"You can't use f6\")));\n+\n+typedef enum Color {red, green, blue} Color __attribute__((unavailable(\"You can't use Color\")));\n+\n+int g1;\n+int g2 __attribute__ ((unavailable(\"You can't use g2\")));\n+int g3 __attribute__ ((__unavailable__(\"You can't use g3\")));\n+Color k;\t\t\t\t/* { dg-error \"'Color' is unavailable: You can't use Color\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((unavailable(\"You can't use field2\")));\n+  int field3;\n+  int field4 __attribute__ ((__unavailable__(\"You can't use field4\")));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((unavailable(\"You can't use field6\")));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((unavailable(\"You can't use field8\")));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((unavailable(\"You can't use u2\")));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+   int x __attribute__ ((unavailable(\"You can't use x\")));\n+   int y __attribute__ ((__unavailable__(\"You can't use y\")));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable: You can't use f1\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-error \"'x' is unavailable: You can't use x\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'y' is unavailable: You can't use y\" \"y\" { target *-*-* } .-1 } */\n+\t\t\t\t\t/* { dg-error \"'g2' is unavailable: You can't use g2\" \"g2\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-error \"'g3' is unavailable: You can't use g3\" \"g3\" { target *-*-* } .-3 } */\n+   return f1(); \t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable: You can't use f1\" \"f1\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+\n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-error \"'S1::field2' is unavailable: You can't use field2\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-error \"'S1::field4' is unavailable: You can't use field4\" \"\" } */\n+     return p->field3;\n+\n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-error \"'S1::u2' is unavailable: You can't use u2\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-error \"'S1::<unnamed union>::field6' is unavailable: You can't use field6\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'S1::field8' is unavailable: You can't use field8\" \"field8\" { target *-*-* } .-1 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+} __attribute__ ((unavailable(\"You can't use SS1\")));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-error \"'SS1' is unavailable: You can't use SS1\" \"\" } */\n+\n+struct __attribute__ ((__unavailable__(\"You can't use SS2\"))) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-error \"'SS2' is unavailable: You can't use SS2\" \"\" } */\n+\n+class T {\n+  public:\n+    void member1(int) __attribute__ ((unavailable(\"You can't use member1\")));\n+    void member2(INT1) __attribute__ ((__unavailable__(\"You can't use member2\")));\n+    int member3(T *);\n+    int x;\n+} __attribute__ ((unavailable(\"You can't use T\")));\n+\n+T *p3;\t\t\t\t// { dg-error \"'T' is unavailable: You can't use T\" }\n+\n+inline void T::member1(int) {}\n+\n+int T::member3(T *p)\t\t// { dg-error \"'T' is unavailable: You can't use T\" }\n+{\n+  p->member1(1);\t\t\t/* { dg-error \"'void T::member1\\\\(int\\\\)' is unavailable: You can't use member1\" \"\" } */\n+  (*p).member1(2);\t\t\t/* { dg-error \"'void T::member1\\\\(int\\\\)' is unavailable: You can't use member1\" \"\" } */\n+  p->member2(1);\t\t\t/* { dg-error \"'void T::member2\\\\(INT1\\\\)' is unavailable: You can't use member2\" \"\" } */\n+  (*p).member2(2);\t\t\t/* { dg-error \"'void T::member2\\\\(INT1\\\\)' is unavailable: You can't use member2\" \"\" } */\n+  p->member3(p);\n+  (*p).member3(p);\n+  return f1(); \t\t\t\t/* { dg-error \"'INT1 f1\\\\(\\\\)' is unavailable: You can't use f1\" \"\" } */\n+}"}, {"sha": "c061aa3b6a2e73a0db75fce7663cc79ba254bf33", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-7.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,19 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int g_nn;\n+int& g_n __attribute__((unavailable)) = g_nn;\n+\n+void f()\n+{\n+  int f_nn;\n+  int& f_n __attribute__((unavailable)) = f_nn;\n+  f_n = 1;    // { dg-error \"'f_n' is unavailable\" }\n+}\n+\n+int main()\n+{\n+  g_n = 1;    // { dg-error \"'g_n' is unavailable\" }\n+  f();\n+}"}, {"sha": "334a2cf72862c51d97cad3da88329fa59869ab54", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-8.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,17 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+class ToBeunavailable {\n+} __attribute__ ((unavailable (\"unavailable!\")));\n+\n+typedef ToBeunavailable NotToBeunavailable; // { dg-error \"'ToBeunavailable' is unavailable\" }\n+\n+int main() {\n+\n+  ToBeunavailable();    // { dg-error \"'ToBeunavailable' is unavailable\" }\n+  ToBeunavailable x;    // { dg-error \"'ToBeunavailable' is unavailable\" }\n+\n+  NotToBeunavailable();\n+  NotToBeunavailable y;\n+}"}, {"sha": "44161336e78156fb8d6be68acd08ec1e8ab11a22", "filename": "gcc/testsuite/g++.dg/ext/attr-unavailable-9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-unavailable-9.C?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,17 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+template<typename T> struct __attribute__ ((unavailable)) S {};\n+S<int> s;\n+\n+template <template <class> class T> struct A { };\n+A<S> a;\n+\n+template <class T> void f() __attribute__ ((unavailable));\n+\n+int main()\n+{\n+  f<int>();\t\t\t// { dg-error \"unavailable\" }\n+  void (*p)() = f<char>;\t// { dg-error \"unavailable\" }\n+}"}, {"sha": "768214fcd3ac84c82a338e57add2fb3e1cfcd70b", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-1.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-1.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,88 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int INT1 __attribute__((unavailable));\n+typedef INT1 INT2 __attribute__ ((__unavailable__));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+typedef INT1 INT1b __attribute__ ((unavailable));\n+\n+INT1 should_be_unavailable; \t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+INT1a should_not_be_unavailable;\n+\n+INT1 f1(void) __attribute__ ((unavailable));\n+INT1 f2(void) { return 0; }\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__unavailable__));\n+INT2 f4(void) { return 0; }\t\t/* { dg-error \"'INT2' is unavailable\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-error \"'INT2' is unavailable\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__unavailable__)); /* { dg-error \"'INT2' is unavailable\" \"\" } */\n+\n+typedef enum {red, green, blue} Color __attribute__((unavailable));\n+\n+int g1;\n+int g2 __attribute__ ((unavailable));\n+int g3 __attribute__ ((__unavailable__));\n+Color k;\t\t\t\t/* { dg-error \"'Color' is unavailable\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((unavailable));\n+  int field3;\n+  int field4 __attribute__ ((__unavailable__));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((unavailable));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((unavailable));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((unavailable));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+   int x __attribute__ ((unavailable));\n+   int y __attribute__ ((__unavailable__));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-error \"'f1' is unavailable\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-error \"'x' is unavailable\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'y' is unavailable\" \"y\" { target *-*-* } .-1 } */\n+\t\t\t\t\t/* { dg-error \"'g2' is unavailable\" \"g2\" { target *-*-* } .-2 } */\n+\t\t\t\t\t/* { dg-error \"'g3' is unavailable\" \"g3\" { target *-*-* } .-3 } */\n+   return f1(); \t\t\t/* { dg-error \"'f1' is unavailable\" \"f1\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+\n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-error \"'field2' is unavailable\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-error \"'field4' is unavailable\" \"\" } */\n+     return p->field3;\n+\n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-error \"'u2' is unavailable\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-error \"'field6' is unavailable\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'field8' is unavailable\" \"field8\" { target *-*-* } .-1 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+} __attribute__ ((unavailable));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-error \"'SS1' is unavailable\" \"\" } */\n+\n+struct __attribute__ ((__unavailable__)) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-error \"'SS2' is unavailable\" \"\" } */"}, {"sha": "303f973d5db02b9f8325d506e291f8025b8aa560", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-2.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,6 @@\n+/* Test __attribute__((unavailable)).  Test types without names.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct { int a; } __attribute__((unavailable)) x; /* { dg-error \"type is unavailable\" } */\n+typeof(x) y; /* { dg-error \"type is unavailable\" } */"}, {"sha": "7274c193f3fb9b1d31a8ab3bf549b9e148a5de7f", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-3.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,10 @@\n+/* Test __attribute__((unavailable)). */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void func(void);\n+void func(void) __attribute__((unavailable));\n+\n+void f(void) {\n+  func(); /* { dg-error \"'func' is unavailable\" } */\n+}"}, {"sha": "9e39c50fec6ea497cb2bd96679aede02f712ca08", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-4.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-4.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,88 @@\n+/* Test __attribute__ ((unavailable(\"message\"))) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int INT1 __attribute__((unavailable(\"You can't use INT1\")));\n+typedef INT1 INT2 __attribute__ ((__unavailable__(\"You can't use INT2\")));\n+\n+typedef INT1 INT1a; \t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+typedef INT1 INT1b __attribute__ ((unavailable(\"You can't use INT1b\")));\n+\n+INT1 should_be_unavailable; \t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+INT1a should_not_be_unavailable;\n+\n+INT1 f1(void) __attribute__ ((unavailable(\"You can't use f1\")));\n+INT1 f2(void) { return 0; }\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+\n+INT2 f3(void) __attribute__ ((__unavailable__(\"You can't use f3\")));\n+INT2 f4(void) { return 0; }\t\t/* { dg-error \"'INT2' is unavailable: You can't use INT2\" \"\" } */\n+int f5(INT2 x);\t\t\t\t/* { dg-error \"'INT2' is unavailable: You can't use INT2\" \"\" } */\n+int f6(INT2 x) __attribute__ ((__unavailable__(\"You can't use f6\"))); /* { dg-error \"'INT2' is unavailable: You can't use INT2\" \"\" } */\n+\n+typedef enum {red, green, blue} Color __attribute__((unavailable(\"You can't use Color\")));\n+\n+int g1;\n+int g2 __attribute__ ((unavailable(\"You can't use g2\")));\n+int g3 __attribute__ ((__unavailable__(\"You can't use g3\")));\n+Color k;\t\t\t\t/* { dg-error \"'Color' is unavailable: You can't use Color\" \"\" } */\n+\n+typedef struct {\n+  int field1;\n+  int field2 __attribute__ ((unavailable(\"You can't use field2\")));\n+  int field3;\n+  int field4 __attribute__ ((__unavailable__(\"You can't use field4\")));\n+  union {\n+    int field5;\n+    int field6 __attribute__ ((unavailable(\"You can't use field6\")));\n+  } u1;\n+  int field7:1;\n+  int field8:1 __attribute__ ((unavailable(\"You can't use field8\")));\n+  union {\n+    int field9;\n+    int field10;\n+  } u2 __attribute__ ((unavailable(\"You can't use u2\")));\n+} S1;\n+\n+int func1()\n+{\n+   INT1 w;\t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+   int x __attribute__ ((unavailable(\"Avoid x\")));\n+   int y __attribute__ ((__unavailable__(\"Bad y\")));\n+   int z;\n+   int (*pf)() = f1;\t\t\t/* { dg-error \"'f1' is unavailable: You can't use f1\" \"\" } */\n+\n+   z = w + x + y + g1 + g2 + g3;\t/* { dg-error \"'x' is unavailable: Avoid x\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'y' is unavailable: Bad y\" \"y\" { target *-*-* } .-1  } */\n+\t\t\t\t\t/* { dg-error \"'g2' is unavailable: You can't use g2\" \"g2\" { target *-*-* } .-2  }  */\n+\t\t\t\t\t/* { dg-error \"'g3' is unavailable: You can't use g3\" \"g3\" { target *-*-* } .-3  } */\n+   return f1(); \t\t\t/* { dg-error \"'f1' is unavailable: You can't use f1\" \"\" } */\n+}\n+\n+int func2(S1 *p)\n+{\n+  S1 lp;\n+\n+  if (p->field1)\n+     return p->field2;\t\t\t/* { dg-error \"'field2' is unavailable: You can't use field2\" \"\" } */\n+  else if (lp.field4)\t\t\t/* { dg-error \"'field4' is unavailable: You can't use field4\" \"\" } */\n+     return p->field3;\n+\n+  p->u1.field5 = g1 + p->field7;\n+  p->u2.field9;\t\t\t\t/* { dg-error \"'u2' is unavailable: You can't use u2\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-error \"'field6' is unavailable: You can't use field6\" \"\" } */\n+\t\t\t\t\t/* { dg-error \"'field8' is unavailable: You can't use field8\" \"field8\" { target *-*-* } .-1 } */\n+}\n+\n+struct SS1 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+} __attribute__ ((unavailable(\"You can't use SS1\")));\n+\n+struct SS1 *p1;\t\t\t\t/* { dg-error \"'SS1' is unavailable: You can't use SS1\" \"\" } */\n+\n+struct __attribute__ ((__unavailable__(\"You can't use SS2\"))) SS2 {\n+  int x;\n+  INT1 y; \t\t\t\t/* { dg-error \"'INT1' is unavailable: You can't use INT1\" \"\" } */\n+};\n+\n+struct SS2 *p2;\t\t\t\t/* { dg-error \"'SS2' is unavailable: You can't use SS2\" \"\" } */"}, {"sha": "051f960c5cf93d234e0abb272da7b09e2f6016a1", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-5.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,6 @@\n+/* Test __attribute__((unavailable)).  Test types without names.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct { int a; } __attribute__((unavailable (\"Do not use\"))) x; /* { dg-error \"type is unavailable\" } */\n+typeof(x) y; /* { dg-error \"type is unavailable: Do not use\" } */"}, {"sha": "f5f4560c73507c1d9a39b6fb66faf0d98f1fa655", "filename": "gcc/testsuite/gcc.dg/attr-unavailable-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-unavailable-6.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,11 @@\n+/* Test __attribute__((unavailable)).  Test merging with multiple\n+   declarations. */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void func(void);\n+void func(void) __attribute__((unavailable (\"Do not use\")));\n+\n+void f(void) {\n+  func(); /* { dg-error \"'func' is unavailable: Do not use\" } */\n+}"}, {"sha": "e5708c202c07668d6ce120d36e9b23fe569b44a0", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-unavailable-1.mm", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-1.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,34 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) method;\n+- (int) method;\n++ (int) unavailableClassMethod __attribute__((unavailable));\n+- (int) unavailableInstanceMethod __attribute__((unavailable));\n+@end\n+\n+/* Test that deprecation warnings are produced, but not if the\n+   receiver is of type 'id'.  */\n+void foo (void)\n+{\n+  Class c;\n+  id object;\n+  MyClass *another_object;\n+\n+  [c method];\n+  [object method];\n+  [c unavailableClassMethod];\n+  [object unavailableInstanceMethod];\n+\n+  [object method];\n+  [another_object method];\n+  [MyClass unavailableClassMethod];           /* { dg-error \"is unavailable\" } */\n+  [another_object unavailableInstanceMethod]; /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "68ea46d254309cdecff081daa9357a74e6d3f5ff", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-unavailable-2.mm", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-2.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,24 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) unavailableClassMethod: (id)firstObject, ...    __attribute__((sentinel)) __attribute__((unavailable));\n+- (int) unavailableInstanceMethod: (id)firstobject, ... __attribute__((sentinel)) __attribute__((unavailable));\n+@end\n+\n+/* Test that unavailability errors are produced even if the method is\n+   also marked with another attribute too (this is to test the\n+   processing of multiple attributes).  */\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass unavailableClassMethod: object, nil];           /* { dg-error \"is unavailable\" } */\n+  [object unavailableInstanceMethod: object, nil];         /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "9e55ae11e1fd10ea9a699a7456d2c6f928bdc85c", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-unavailable-3.mm", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-unavailable-3.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,22 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that __attribute__ ((__unavailable__)) works as well as __attribute__ ((unavailable)).  */\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) unavailableClassMethod: (id)firstObject, ...    __attribute__((__unavailable__));\n+- (int) unavailableInstanceMethod: (id)firstobject, ... __attribute__((__unavailable__));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass unavailableClassMethod: object, nil];           /* { dg-error \"is unavailable\" } */\n+  [object unavailableInstanceMethod: object, nil];         /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "6bb4755220d41f23c5c67265786e2a36c9afe184", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-unavailable-1.mm", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-1.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,38 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Test that properties can be unavailable.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int a;\n+}\n+@property int a __attribute__((unavailable));\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize a;\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+\n+  object.a = 40;      /* { dg-error \"is unavailable\" } */\n+  if (object.a != 40) /* { dg-error \"is unavailable\" } */\n+    abort ();\n+\n+  return (0);\n+}"}, {"sha": "5edc1626c89790d2e0e6c5328faf0d1da7f2055d", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-unavailable-2.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-unavailable-2.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,26 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Test that unavailability errors are produced when a setter/getter of\n+   a @property is used directly.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+  int variable;\n+}\n+@property (assign, nonatomic) int property __attribute__ ((unavailable));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  if ([object property] > 0)  /* { dg-error \"is unavailable\" } */\n+    {\n+      [object setProperty: 43]; /* { dg-error \"is unavailable\" } */\n+    }\n+}"}, {"sha": "e2ef2a5b23b36b04941ffb8ee0f49f08a1cf8091", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-unavailable-1.mm", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-unavailable-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-unavailable-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-unavailable-1.mm?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,42 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Test the 'dot syntax' with unavailable methods.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) classCount __attribute__ ((unavailable));\n++ (void) setClassCount: (int)value __attribute__ ((unavailable));\n+\n+- (int) count __attribute__ ((unavailable));\n+- (void) setCount: (int)value __attribute__ ((unavailable));\n+\n+- (int) classCount2;\n+- (void) setClassCount2: (int)value;\n+\n+- (int) count2;\n+- (void) setCount2: (int)value;\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+\n+  if (object.count > 0)  /* { dg-error \"is unavailable\" } */\n+    object.count = 20;  /* { dg-error \"is unavailable\" } */\n+\n+  if (MyClass.classCount < -7)   /* { dg-error \"is unavailable\" } */\n+    MyClass.classCount = 11;  /* { dg-error \"is unavailable\" } */\n+\n+  if (object.classCount2 > 0)\n+    object.classCount2 = 19;\n+\n+  if (object.count2 < -7)\n+    object.count2 = 74;\n+}"}, {"sha": "7a3de6b245dc013c68472ea1476ace4e64b062a4", "filename": "gcc/testsuite/objc.dg/attributes/method-unavailable-1.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-1.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,34 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) method;\n+- (int) method;\n++ (int) unavailableClassMethod __attribute__((unavailable));\n+- (int) unavailableInstanceMethod __attribute__((unavailable));\n+@end\n+\n+/* Test that unavailability errors are produced, but not if the\n+   receiver is of type 'id'.  */\n+void foo (void)\n+{\n+  Class c;\n+  id object;\n+  MyClass *another_object;\n+\n+  [c method];\n+  [object method];\n+  [c unavailableClassMethod];\n+  [object unavailableInstanceMethod];\n+\n+  [object method];\n+  [another_object method];\n+  [MyClass unavailableClassMethod];           /* { dg-error \"is unavailable\" } */\n+  [another_object unavailableInstanceMethod]; /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "68ea46d254309cdecff081daa9357a74e6d3f5ff", "filename": "gcc/testsuite/objc.dg/attributes/method-unavailable-2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-2.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,24 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) unavailableClassMethod: (id)firstObject, ...    __attribute__((sentinel)) __attribute__((unavailable));\n+- (int) unavailableInstanceMethod: (id)firstobject, ... __attribute__((sentinel)) __attribute__((unavailable));\n+@end\n+\n+/* Test that unavailability errors are produced even if the method is\n+   also marked with another attribute too (this is to test the\n+   processing of multiple attributes).  */\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass unavailableClassMethod: object, nil];           /* { dg-error \"is unavailable\" } */\n+  [object unavailableInstanceMethod: object, nil];         /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "9e55ae11e1fd10ea9a699a7456d2c6f928bdc85c", "filename": "gcc/testsuite/objc.dg/attributes/method-unavailable-3.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-unavailable-3.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,22 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that __attribute__ ((__unavailable__)) works as well as __attribute__ ((unavailable)).  */\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) unavailableClassMethod: (id)firstObject, ...    __attribute__((__unavailable__));\n+- (int) unavailableInstanceMethod: (id)firstobject, ... __attribute__((__unavailable__));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  [MyClass unavailableClassMethod: object, nil];           /* { dg-error \"is unavailable\" } */\n+  [object unavailableInstanceMethod: object, nil];         /* { dg-error \"is unavailable\" } */\n+}"}, {"sha": "c33e1b6f4660904f1882ed9f71e6214466a9f957", "filename": "gcc/testsuite/objc.dg/property/at-property-unavailable-1.m", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-1.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,39 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-additional-options \"-Wno-objc-root-class\" } */\n+\n+/* Test that properties can be unavailable.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int a;\n+}\n+@property int a __attribute__((unavailable));\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize a;\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+\n+  object.a = 40;      /* { dg-error \"is unavailable\" } */\n+  if (object.a != 40) /* { dg-error \"is unavailable\" } */\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "5edc1626c89790d2e0e6c5328faf0d1da7f2055d", "filename": "gcc/testsuite/objc.dg/property/at-property-unavailable-2.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-unavailable-2.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,26 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Test that unavailability errors are produced when a setter/getter of\n+   a @property is used directly.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+  int variable;\n+}\n+@property (assign, nonatomic) int property __attribute__ ((unavailable));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  if ([object property] > 0)  /* { dg-error \"is unavailable\" } */\n+    {\n+      [object setProperty: 43]; /* { dg-error \"is unavailable\" } */\n+    }\n+}"}, {"sha": "e2ef2a5b23b36b04941ffb8ee0f49f08a1cf8091", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-unavailable-1.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-unavailable-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-unavailable-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-unavailable-1.m?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -0,0 +1,42 @@\n+/* Test __attribute__ ((unavailable)) */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Test the 'dot syntax' with unavailable methods.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+}\n++ (int) classCount __attribute__ ((unavailable));\n++ (void) setClassCount: (int)value __attribute__ ((unavailable));\n+\n+- (int) count __attribute__ ((unavailable));\n+- (void) setCount: (int)value __attribute__ ((unavailable));\n+\n+- (int) classCount2;\n+- (void) setClassCount2: (int)value;\n+\n+- (int) count2;\n+- (void) setCount2: (int)value;\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+\n+  if (object.count > 0)  /* { dg-error \"is unavailable\" } */\n+    object.count = 20;  /* { dg-error \"is unavailable\" } */\n+\n+  if (MyClass.classCount < -7)   /* { dg-error \"is unavailable\" } */\n+    MyClass.classCount = 11;  /* { dg-error \"is unavailable\" } */\n+\n+  if (object.classCount2 > 0)\n+    object.classCount2 = 19;\n+\n+  if (object.count2 < -7)\n+    object.count2 = 74;\n+}"}, {"sha": "445a09f93fb997cadf2cd6746e83f60b9dc94541", "filename": "gcc/tree-core.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -1038,7 +1038,8 @@ struct GTY(()) tree_base {\n       unsigned user_align : 1;\n       unsigned nameless_flag : 1;\n       unsigned atomic_flag : 1;\n-      unsigned spare0 : 3;\n+      unsigned unavailable_flag : 1;\n+      unsigned spare0 : 2;\n \n       unsigned spare1 : 8;\n \n@@ -1360,6 +1361,12 @@ struct GTY(()) tree_base {\n        SSA_NAME_POINTS_TO_READONLY_MEMORY in\n \t   SSA_NAME\n \n+   unavailable_flag:\n+\n+       TREE_UNAVAILABLE in\n+\t   all decls\n+\t   all types\n+\n    visited:\n \n        TREE_VISITED in\n@@ -1407,6 +1414,7 @@ struct GTY(()) tree_base {\n \n        CALL_EXPR_BY_DESCRIPTOR in\n            CALL_EXPR\n+\n */\n \n struct GTY(()) tree_typed {"}, {"sha": "03a424a663a4406703fd4ebd01a92f15d3344751", "filename": "gcc/tree.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -12154,6 +12154,78 @@ warn_deprecated_use (tree node, tree attr)\n   return w;\n }\n \n+/* Error out with an identifier which was marked 'unavailable'. */\n+void\n+error_unavailable_use (tree node, tree attr)\n+{\n+  escaped_string msg;\n+\n+  if (node == 0)\n+    return;\n+\n+  if (!attr)\n+    {\n+      if (DECL_P (node))\n+\tattr = DECL_ATTRIBUTES (node);\n+      else if (TYPE_P (node))\n+\t{\n+\t  tree decl = TYPE_STUB_DECL (node);\n+\t  if (decl)\n+\t    attr = lookup_attribute (\"unavailable\",\n+\t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)));\n+\t}\n+    }\n+\n+  if (attr)\n+    attr = lookup_attribute (\"unavailable\", attr);\n+\n+  if (attr)\n+    msg.escape (TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\n+  if (DECL_P (node))\n+    {\n+      auto_diagnostic_group d;\n+      if (msg)\n+\terror (\"%qD is unavailable: %s\", node, (const char *) msg);\n+      else\n+\terror (\"%qD is unavailable\", node);\n+      inform (DECL_SOURCE_LOCATION (node), \"declared here\");\n+    }\n+  else if (TYPE_P (node))\n+    {\n+      tree what = NULL_TREE;\n+      tree decl = TYPE_STUB_DECL (node);\n+\n+      if (TYPE_NAME (node))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n+\t    what = TYPE_NAME (node);\n+\t  else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (node)))\n+\t    what = DECL_NAME (TYPE_NAME (node));\n+\t}\n+\n+      auto_diagnostic_group d;\n+      if (what)\n+\t{\n+\t  if (msg)\n+\t    error (\"%qE is unavailable: %s\", what, (const char *) msg);\n+\t  else\n+\t    error (\"%qE is unavailable\", what);\n+\t}\n+      else\n+\t{\n+\t  if (msg)\n+\t    error (\"type is unavailable: %s\", (const char *) msg);\n+\t  else\n+\t    error (\"type is unavailable\");\n+\t}\n+\n+      if (decl)\n+\tinform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+    }\n+}\n+\n /* Return true if REF has a COMPONENT_REF with a bit-field field declaration\n    somewhere in it.  */\n "}, {"sha": "2c8973f34e22de2ff87e5fae1284f00503a89653", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433baadec88e5f31fa141b6d78094e91256079d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8433baadec88e5f31fa141b6d78094e91256079d", "patch": "@@ -956,6 +956,11 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define TREE_DEPRECATED(NODE) \\\n   ((NODE)->base.deprecated_flag)\n \n+/* Nonzero in a _DECL if the use of the name is defined as an\n+   unavailable feature by __attribute__((unavailable)).  */\n+#define TREE_UNAVAILABLE(NODE) \\\n+  ((NODE)->base.u.bits.unavailable_flag)\n+\n /* Nonzero indicates an IDENTIFIER_NODE that names an anonymous\n    aggregate, (as created by anon_aggr_name_format).  */\n #define IDENTIFIER_ANON_P(NODE) \\\n@@ -5207,6 +5212,7 @@ extern const_tree strip_invariant_refs (const_tree);\n extern tree lhd_gcc_personality (void);\n extern void assign_assembler_name_if_needed (tree);\n extern bool warn_deprecated_use (tree, tree);\n+extern void error_unavailable_use (tree, tree);\n extern tree cache_integer_cst (tree, bool might_duplicate = false);\n extern const char *combined_fn_name (combined_fn);\n "}]}