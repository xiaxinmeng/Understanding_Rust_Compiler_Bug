{"sha": "4eeaee5d0744aa39b340be11d3ff4589d1e37082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlYWVlNWQwNzQ0YWEzOWIzNDBiZTExZDNmZjQ1ODlkMWUzNzA4Mg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2000-07-23T17:17:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2000-07-23T17:17:37Z"}, "message": "unuglyfying code\n\nFrom-SVN: r35206", "tree": {"sha": "7f739c578525de33f6befba2b5036ac64875f77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f739c578525de33f6befba2b5036ac64875f77d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eeaee5d0744aa39b340be11d3ff4589d1e37082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eeaee5d0744aa39b340be11d3ff4589d1e37082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eeaee5d0744aa39b340be11d3ff4589d1e37082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eeaee5d0744aa39b340be11d3ff4589d1e37082/comments", "author": null, "committer": null, "parents": [{"sha": "fe3439b066a146a75b52b3589279e6926dc3ce1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe3439b066a146a75b52b3589279e6926dc3ce1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe3439b066a146a75b52b3589279e6926dc3ce1e"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "a8d06bb59812a9ef1f3286ebaf509b85a919620c", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eeaee5d0744aa39b340be11d3ff4589d1e37082/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eeaee5d0744aa39b340be11d3ff4589d1e37082/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=4eeaee5d0744aa39b340be11d3ff4589d1e37082", "patch": "@@ -934,10 +934,13 @@ general_operand (op, mode)\n   if (code == MEM)\n     {\n       register rtx y = XEXP (op, 0);\n+\n       if (! volatile_ok && MEM_VOLATILE_P (op))\n \treturn 0;\n+\n       if (GET_CODE (y) == ADDRESSOF)\n \treturn 1;\n+\n       /* Use the mem's mode, since it will be reloaded thus.  */\n       mode = GET_MODE (op);\n       GO_IF_LEGITIMATE_ADDRESS (mode, y, win);"}]}