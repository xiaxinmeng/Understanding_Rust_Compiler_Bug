{"sha": "306ae32b68b216a739941505e45656524cec5347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2YWUzMmI2OGIyMTZhNzM5OTQxNTA1ZTQ1NjU2NTI0Y2VjNTM0Nw==", "commit": {"author": {"name": "Frank Ch. Eigler", "email": "fche@redhat.com", "date": "2004-10-28T21:21:59Z"}, "committer": {"name": "Frank Ch. Eigler", "email": "fche@gcc.gnu.org", "date": "2004-10-28T21:21:59Z"}, "message": "fail35-,pass53-,pass54-frag.c: New tests.\n\n2004-10-28  Frank Ch. Eigler  <fche@redhat.com>\n\n\t* testsuite/libmudflap.c/fail35-,pass53-,pass54-frag.c: New tests.\n\t* testsuite/libmudflap.c/pass35-frag.c: Correct embedded warning\n\tmessage.\n\nFrom-SVN: r89783", "tree": {"sha": "05f8dd75d157d8ee718e6ed7ac4ee5022718a104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f8dd75d157d8ee718e6ed7ac4ee5022718a104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/306ae32b68b216a739941505e45656524cec5347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306ae32b68b216a739941505e45656524cec5347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306ae32b68b216a739941505e45656524cec5347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306ae32b68b216a739941505e45656524cec5347/comments", "author": {"login": "fche", "id": 588885, "node_id": "MDQ6VXNlcjU4ODg4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/588885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fche", "html_url": "https://github.com/fche", "followers_url": "https://api.github.com/users/fche/followers", "following_url": "https://api.github.com/users/fche/following{/other_user}", "gists_url": "https://api.github.com/users/fche/gists{/gist_id}", "starred_url": "https://api.github.com/users/fche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fche/subscriptions", "organizations_url": "https://api.github.com/users/fche/orgs", "repos_url": "https://api.github.com/users/fche/repos", "events_url": "https://api.github.com/users/fche/events{/privacy}", "received_events_url": "https://api.github.com/users/fche/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30036b2fd8f51d498fa85f4b0ba954ad6a0dbb8"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "b437bc46faf5ed22d426b21c5268eb590803c9d6", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306ae32b68b216a739941505e45656524cec5347/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306ae32b68b216a739941505e45656524cec5347/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=306ae32b68b216a739941505e45656524cec5347", "patch": "@@ -1,3 +1,9 @@\n+2004-10-28  Frank Ch. Eigler  <fche@redhat.com>\n+\n+\t* testsuite/libmudflap.c/fail35-,pass53-,pass54-frag.c: New tests.\n+\t* testsuite/libmudflap.c/pass35-frag.c: Correct embedded warning\n+\tmessage.\n+\n 2004-10-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR other/18138"}, {"sha": "101fe293b2bc6df5c3efde4d4295c30b664cec9f", "filename": "libmudflap/testsuite/libmudflap.c/fail35-frag.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail35-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail35-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail35-frag.c?ref=306ae32b68b216a739941505e45656524cec5347", "patch": "@@ -0,0 +1,23 @@\n+#include <stdlib.h>\n+\n+struct k\n+{\n+  int p;\n+  struct {\n+    int m;\n+  } q;\n+};\n+\n+int\n+main ()\n+{\n+  volatile struct k *l = malloc (sizeof (int)); /* make it only big enough for k.p */\n+  /* Confirm that we instrument this nested construct\n+     COMPONENT_REF(COMPONENT_REF(INDIRECT_REF)). */\n+  l->q.m = 5;\n+  return 0;\n+}\n+/* { dg-output \"mudflap violation 1.*\" } */\n+/* { dg-output \"Nearby object.*\" } */\n+/* { dg-output \"mudflap object.*\" } */\n+/* { dg-do run { xfail *-*-* } } */"}, {"sha": "14d2c94a9bb5a6519a1e41a1a7f33fce07e6698e", "filename": "libmudflap/testsuite/libmudflap.c/pass35-frag.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass35-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass35-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass35-frag.c?ref=306ae32b68b216a739941505e45656524cec5347", "patch": "@@ -3,7 +3,7 @@\n #include <string.h>\n \n extern char end [];   /* Any old symbol we're sure will be defined. */\n-/* { dg-warning \"cannot track unknown size extern 'end'\" \"cannot track unknown size extern\" { target *-*-* } 0 } */\n+/* { dg-warning \"cannot track unknown size extern\" \"cannot track unknown size extern\" { target *-*-* } 0 } */\n \n int main ()\n {"}, {"sha": "6afb2931e349343e142bedde0ee4604fc84b7b46", "filename": "libmudflap/testsuite/libmudflap.c/pass53-frag.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass53-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass53-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass53-frag.c?ref=306ae32b68b216a739941505e45656524cec5347", "patch": "@@ -0,0 +1,41 @@\n+int foo1 ()\n+{\n+  union { int l; char c[sizeof (int)]; } k1;\n+  char *m;\n+  k1.l = 0;\n+  /* This test variant triggers ADDR_EXPR of k explicitly in order to\n+     ensure it's registered with the runtime.  */\n+  m = k1.c;\n+  k1.c [sizeof (int)-1] = m[sizeof (int)-2];\n+}\n+\n+int foo2 ()\n+{\n+  union { int l; char c[sizeof (int)]; } k2;\n+  k2.l = 0;\n+  /* Since this access is known-in-range, k need not be registered\n+     with the runtime, but then this access better not be instrumented\n+     either.  */\n+  k2.c [sizeof (int)-1] ++;\n+  return k2.l;\n+}\n+\n+int foo3idx = sizeof (int)-1;\n+\n+int foo3 ()\n+{\n+  union { int l; char c[sizeof (int)]; } k3;\n+  k3.l = 0;\n+  /* NB this test uses foo3idx, an extern variable, to defeat mudflap\n+     known-in-range-index optimizations.  */\n+  k3.c [foo3idx] ++;\n+  return k3.l;\n+}\n+\n+int main ()\n+{\n+  foo1 ();\n+  foo2 ();\n+  foo3 ();\n+  return 0;\n+}"}, {"sha": "59cf2fa6258cda32153ee4674e94af344db4821f", "filename": "libmudflap/testsuite/libmudflap.c/pass54-frag.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass54-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306ae32b68b216a739941505e45656524cec5347/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass54-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Fpass54-frag.c?ref=306ae32b68b216a739941505e45656524cec5347", "patch": "@@ -0,0 +1,33 @@\n+struct k \n+{\n+  struct {\n+    int b;\n+    int c;\n+  } a;\n+};\n+\n+static struct k l;\n+static struct k m;\n+\n+void foo ()\n+{\n+  /* This should not be instrumented. */ \n+  l.a.b = 5;\n+}\n+\n+void bar ()\n+{\n+  /* This should not be instrumented. */ \n+  m.a.b = 5;\n+}\n+\n+int main ()\n+{\n+  /* Force TREE_ADDRESSABLE on \"l\" only.  */\n+  volatile int *k = & l.a.c;\n+  *k = 8;\n+  __mf_set_options (\"-mode-violate\");\n+  foo ();\n+  bar ();\n+  __mf_set_options (\"-mode-check\");\n+}"}]}