{"sha": "1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI1Zjc0ZThiZTRkZDdhYmU1NjI0ZmY2MGFkY2VmZjE5Y2E3MWJkYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-31T18:34:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-31T18:34:00Z"}, "message": "Handle CONST_POLY_INTs in CONST_VECTORs [PR97141, PR98726]\n\nThis PR is caused by POLY_INT_CSTs being (necessarily) valid\nin tree-level VECTOR_CSTs but CONST_POLY_INTs not being valid\nin RTL CONST_VECTORs.  I can't tell/remember how deliberate\nthat was, but I'm guessing not very.  In particular,\nvalid_for_const_vector_p was added to guard against symbolic\nconstants rather than CONST_POLY_INTs.\n\nI did briefly consider whether we should maintain the current\nstatus anyway.  However, that would then require a way of\nconstructing variable-length vectors from individiual elements\nif, say, we have:\n\n   { [2, 2], [3, 2], [4, 2], \u2026 }\n\nSo I'm chalking this up to an oversight.  I think the intention\n(and certainly the natural thing) is to have the same rules for\nboth trees and RTL.\n\nThe SVE CONST_VECTOR code should already be set up to handle\nCONST_POLY_INTs.  However, we need to add support for Advanced SIMD\nCONST_VECTORs that happen to contain SVE-based values.  The patch does\nthat by expanding such CONST_VECTORs in the same way as variable vectors.\n\ngcc/\n\tPR rtl-optimization/97141\n\tPR rtl-optimization/98726\n\t* emit-rtl.c (valid_for_const_vector_p): Return true for\n\tCONST_POLY_INT_P.\n\t* rtx-vector-builder.h (rtx_vector_builder::step): Return a\n\tpoly_wide_int instead of a wide_int.\n\t(rtx_vector_builder::apply_set): Take a poly_wide_int instead\n\tof a wide_int.\n\t* rtx-vector-builder.c (rtx_vector_builder::apply_set): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_legitimate_constant_p): Return\n\tfalse for CONST_VECTORs that cannot be forced to memory.\n\t* config/aarch64/aarch64-simd.md (mov<mode>): If a CONST_VECTOR\n\tis too complex to force to memory, build it up from individual\n\telements instead.\n\ngcc/testsuite/\n\tPR rtl-optimization/97141\n\tPR rtl-optimization/98726\n\t* gcc.c-torture/compile/pr97141.c: New test.\n\t* gcc.c-torture/compile/pr98726.c: Likewise.\n\t* gcc.target/aarch64/sve/pr97141.c: Likewise.\n\t* gcc.target/aarch64/sve/pr98726.c: Likewise.", "tree": {"sha": "c6cebdef7424890265fa503a1d391050d1541021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cebdef7424890265fa503a1d391050d1541021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ce9945d5efa77c96161443f68e03664705ada3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ce9945d5efa77c96161443f68e03664705ada3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ce9945d5efa77c96161443f68e03664705ada3"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "4edee99051c4e2112b546becca47da32aae21df2", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -35,6 +35,17 @@\n \t\t&& aarch64_mem_pair_operand (operands[0], DImode))\n \t       || known_eq (GET_MODE_SIZE (<MODE>mode), 8))))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n+\n+  /* If a constant is too complex to force to memory (e.g. because it\n+     contains CONST_POLY_INTs), build it up from individual elements instead.\n+     We should only need to do this before RA; aarch64_legitimate_constant_p\n+     should ensure that we don't try to rematerialize the constant later.  */\n+  if (GET_CODE (operands[1]) == CONST_VECTOR\n+      && targetm.cannot_force_const_mem (<MODE>mode, operands[1]))\n+    {\n+      aarch64_expand_vector_init (operands[0], operands[1]);\n+      DONE;\n+    }\n   \"\n )\n "}, {"sha": "994fafc2dc857ca5c7f345e49b47cc7e7dcf5900", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -17925,25 +17925,29 @@ aarch64_legitimate_constant_p (machine_mode mode, rtx x)\n {\n   /* Support CSE and rematerialization of common constants.  */\n   if (CONST_INT_P (x)\n-      || (CONST_DOUBLE_P (x) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n-      || GET_CODE (x) == CONST_VECTOR)\n+      || (CONST_DOUBLE_P (x) && GET_MODE_CLASS (mode) == MODE_FLOAT))\n     return true;\n \n+  /* Only accept variable-length vector constants if they can be\n+     handled directly.\n+\n+     ??? It would be possible (but complex) to handle rematerialization\n+     of other constants via secondary reloads.  */\n+  if (!GET_MODE_SIZE (mode).is_constant ())\n+    return aarch64_simd_valid_immediate (x, NULL);\n+\n+  /* Otherwise, accept any CONST_VECTOR that, if all else fails, can at\n+     least be forced to memory and loaded from there.  */\n+  if (GET_CODE (x) == CONST_VECTOR)\n+    return !targetm.cannot_force_const_mem (mode, x);\n+\n   /* Do not allow vector struct mode constants for Advanced SIMD.\n      We could support 0 and -1 easily, but they need support in\n      aarch64-simd.md.  */\n   unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n   if (vec_flags == (VEC_ADVSIMD | VEC_STRUCT))\n     return false;\n \n-  /* Only accept variable-length vector constants if they can be\n-     handled directly.\n-\n-     ??? It would be possible to handle rematerialization of other\n-     constants via secondary reloads.  */\n-  if (vec_flags & VEC_ANY_SVE)\n-    return aarch64_simd_valid_immediate (x, NULL);\n-\n   if (GET_CODE (x) == HIGH)\n     x = XEXP (x, 0);\n "}, {"sha": "1113c58c49eb7e93db71f83583928092d284642d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -5949,6 +5949,7 @@ bool\n valid_for_const_vector_p (machine_mode, rtx x)\n {\n   return (CONST_SCALAR_INT_P (x)\n+\t  || CONST_POLY_INT_P (x)\n \t  || CONST_DOUBLE_AS_FLOAT_P (x)\n \t  || CONST_FIXED_P (x));\n }"}, {"sha": "cf9b3dd1af9d613be66655b7851e7bf77fbd1f6c", "filename": "gcc/rtx-vector-builder.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Frtx-vector-builder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Frtx-vector-builder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtx-vector-builder.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -46,11 +46,11 @@ rtx_vector_builder::build (rtvec v)\n \n rtx\n rtx_vector_builder::apply_step (rtx base, unsigned int factor,\n-\t\t\t\tconst wide_int &step) const\n+\t\t\t\tconst poly_wide_int &step) const\n {\n   scalar_int_mode int_mode = as_a <scalar_int_mode> (GET_MODE_INNER (m_mode));\n-  return immed_wide_int_const (wi::add (rtx_mode_t (base, int_mode),\n-\t\t\t\t\tfactor * step),\n+  return immed_wide_int_const (wi::to_poly_wide (base, int_mode)\n+\t\t\t       + factor * step,\n \t\t\t       int_mode);\n }\n "}, {"sha": "30a91e80b4072dff8f3e3ffea88d66f9a4bb6dd8", "filename": "gcc/rtx-vector-builder.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Frtx-vector-builder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Frtx-vector-builder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtx-vector-builder.h?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -44,8 +44,8 @@ class rtx_vector_builder : public vector_builder<rtx, machine_mode,\n   bool equal_p (rtx, rtx) const;\n   bool allow_steps_p () const;\n   bool integral_p (rtx) const;\n-  wide_int step (rtx, rtx) const;\n-  rtx apply_step (rtx, unsigned int, const wide_int &) const;\n+  poly_wide_int step (rtx, rtx) const;\n+  rtx apply_step (rtx, unsigned int, const poly_wide_int &) const;\n   bool can_elide_p (rtx) const { return true; }\n   void note_representative (rtx *, rtx) {}\n \n@@ -115,11 +115,11 @@ rtx_vector_builder::integral_p (rtx elt) const\n /* Return the value of element ELT2 minus the value of element ELT1.\n    Both elements are known to be CONST_SCALAR_INT_Ps.  */\n \n-inline wide_int\n+inline poly_wide_int\n rtx_vector_builder::step (rtx elt1, rtx elt2) const\n {\n-  return wi::sub (rtx_mode_t (elt2, GET_MODE_INNER (m_mode)),\n-\t\t  rtx_mode_t (elt1, GET_MODE_INNER (m_mode)));\n+  return (wi::to_poly_wide (elt2, GET_MODE_INNER (m_mode))\n+\t  - wi::to_poly_wide (elt1, GET_MODE_INNER (m_mode)));\n }\n \n #endif"}, {"sha": "1a9ff830a2204516fab5850efe940bf53892420d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr97141.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr97141.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -0,0 +1,8 @@\n+int a;\n+short b, c;\n+short d(short e, short f) { return e + f; }\n+void g(void) {\n+  a = -9;\n+  for (; a != 51; a = d(a, 5))\n+    b |= c;\n+}"}, {"sha": "ce24b18ce55ba5b0ee0d02fc9152a77cf99cd912", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98726.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98726.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -0,0 +1,7 @@\n+int a, c;\n+char b;\n+int d() {\n+  a = 0;\n+  for (; a <= 21; a = (short)a + 1)\n+    b &= c;\n+}"}, {"sha": "942e4a48d91812e9d6af35b385c3dffd24431ed6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr97141.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr97141.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-O3\" } */\n+\n+int a;\n+short b, c;\n+short d(short e, short f) { return e + f; }\n+void g(void) {\n+  a = -9;\n+  for (; a != 51; a = d(a, 5))\n+    b |= c;\n+}"}, {"sha": "2395cab57e54becadf7cdee12dcf875eb0eaa1b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr98726.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b5f74e8be4dd7abe5624ff60adceff19ca71bda/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98726.c?ref=1b5f74e8be4dd7abe5624ff60adceff19ca71bda", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-O3\" } */\n+\n+int a, c;\n+char b;\n+int d() {\n+  a = 0;\n+  for (; a <= 21; a = (short)a + 1)\n+    b &= c;\n+}"}]}