{"sha": "cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxYjNkNmI2NDJkMGJhZjQyNGE5ZmNhMWFkN2Q5NGUxZjM0MmIwMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-14T06:37:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-14T06:37:59Z"}, "message": "2003-05-14  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileLockImpl.java\n\t(released): New member variable.\n\t(FileLockImpl): Initialize released.\n\t(releaseImpl): New native method.\n\t(release): Implemented.\n\t* gnu/java/nio/SelectorImpl.java: Reformatted.\n\t* gnu/java/nio/SelectionKeyImpl.java: Reformatted.\n\t* gnu/java/nio/ServerSocketChannelImpl.java: Reformatted.\n\t(accept): Throws IOException.\n\t* gnu/java/nio/SocketChannelImpl.java: Reformatted.\n\t(implConfigureBlocking): Throws IOException.\n\t(connect): Likewise.\n\t(read): Likewise.\n\t(write): Likewise.\n\t* gnu/java/nio/natFileLockImpl.cc: New file.\n\t* java/nio/channels/FileLock.java: Reformatted.\n\t* Makefile.am:\n\t(ordinary_java_source_files): Added gnu/java/nio/FileLockImpl.java.\n\t(nat_source_files): Added gnu/java/nio/natFileLockImpl.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r66799", "tree": {"sha": "24fccf7ef3db6564bf6419c09974cfbc9fba0c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24fccf7ef3db6564bf6419c09974cfbc9fba0c84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/comments", "author": null, "committer": null, "parents": [{"sha": "2306d91c5cc44948ef69842cda73c3def11381f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2306d91c5cc44948ef69842cda73c3def11381f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2306d91c5cc44948ef69842cda73c3def11381f7"}], "stats": {"total": 165, "additions": 116, "deletions": 49}, "files": [{"sha": "30479ae3e51cb205ead1275779dd8096206572d1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -1,3 +1,26 @@\n+2003-05-14  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileLockImpl.java\n+\t(released): New member variable.\n+\t(FileLockImpl): Initialize released.\n+\t(releaseImpl): New native method.\n+\t(release): Implemented.\n+\t* gnu/java/nio/SelectorImpl.java: Reformatted.\n+\t* gnu/java/nio/SelectionKeyImpl.java: Reformatted.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java: Reformatted.\n+\t(accept): Throws IOException.\n+\t* gnu/java/nio/SocketChannelImpl.java: Reformatted.\n+\t(implConfigureBlocking): Throws IOException.\n+\t(connect): Likewise.\n+\t(read): Likewise.\n+\t(write): Likewise.\n+\t* gnu/java/nio/natFileLockImpl.cc: New file.\n+\t* java/nio/channels/FileLock.java: Reformatted.\n+\t* Makefile.am:\n+\t(ordinary_java_source_files): Added gnu/java/nio/FileLockImpl.java.\n+\t(nat_source_files): Added gnu/java/nio/natFileLockImpl.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-05-13  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/CharViewBufferImpl.java"}, {"sha": "ff60cba7ec4c4d92e89970cc44c6073dd5a269c7", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -2104,6 +2104,7 @@ gnu/java/nio/DirectByteBufferImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n gnu/java/nio/DoubleViewBufferImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n+gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/FloatBufferImpl.java \\\n gnu/java/nio/FloatViewBufferImpl.java \\\n gnu/java/nio/IntBufferImpl.java \\\n@@ -2564,6 +2565,7 @@ gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natDirectByteBufferImpl.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n+gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natSocketChannelImpl.cc \\"}, {"sha": "9fb912d79233b7ba681b12d62eb189ed51531805", "filename": "libjava/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -1866,6 +1866,7 @@ gnu/java/nio/DirectByteBufferImpl.java \\\n gnu/java/nio/DoubleBufferImpl.java \\\n gnu/java/nio/DoubleViewBufferImpl.java \\\n gnu/java/nio/FileChannelImpl.java \\\n+gnu/java/nio/FileLockImpl.java \\\n gnu/java/nio/FloatBufferImpl.java \\\n gnu/java/nio/FloatViewBufferImpl.java \\\n gnu/java/nio/IntBufferImpl.java \\\n@@ -2325,6 +2326,7 @@ gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n gnu/java/nio/natDirectByteBufferImpl.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n+gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natMappedByteFileBuffer.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natSocketChannelImpl.cc \\\n@@ -2500,7 +2502,7 @@ gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n gnu/gcj/runtime/natVMClassLoader.lo \\\n gnu/java/nio/natDirectByteBufferImpl.lo \\\n-gnu/java/nio/natFileChannelImpl.lo \\\n+gnu/java/nio/natFileChannelImpl.lo gnu/java/nio/natFileLockImpl.lo \\\n gnu/java/nio/natMappedByteFileBuffer.lo gnu/java/nio/natSelectorImpl.lo \\\n gnu/java/nio/natSocketChannelImpl.lo java/io/natFile.lo \\\n java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n@@ -2970,7 +2972,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/DirectByteBufferImpl.P \\\n .deps/gnu/java/nio/DoubleBufferImpl.P \\\n .deps/gnu/java/nio/DoubleViewBufferImpl.P \\\n-.deps/gnu/java/nio/FileChannelImpl.P \\\n+.deps/gnu/java/nio/FileChannelImpl.P .deps/gnu/java/nio/FileLockImpl.P \\\n .deps/gnu/java/nio/FloatBufferImpl.P \\\n .deps/gnu/java/nio/FloatViewBufferImpl.P \\\n .deps/gnu/java/nio/IntBufferImpl.P \\\n@@ -2995,6 +2997,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/charset/UTF_8.P \\\n .deps/gnu/java/nio/natDirectByteBufferImpl.P \\\n .deps/gnu/java/nio/natFileChannelImpl.P \\\n+.deps/gnu/java/nio/natFileLockImpl.P \\\n .deps/gnu/java/nio/natMappedByteFileBuffer.P \\\n .deps/gnu/java/nio/natSelectorImpl.P \\\n .deps/gnu/java/nio/natSocketChannelImpl.P \\"}, {"sha": "088e552bea26992bbc6cc64d7694c4f3e68cc38f", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -35,29 +35,41 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n+import java.io.FileDescriptor;\n+import java.io.IOException;\n import java.nio.channels.FileChannel;\n import java.nio.channels.FileLock;\n \n /**\n  * @author Michael Koch\n+ * @since 1.4\n  */\n public class FileLockImpl extends FileLock\n {\n-  public FileLockImpl (FileChannel channel, long position, long size,\n-                       boolean shared)\n+  private FileDescriptor fd;\n+  private boolean released;\n+  \n+  public FileLockImpl (FileDescriptor fd, FileChannel channel, long position,\n+                       long size, boolean shared)\n   {\n     super (channel, position, size, shared);\n+    this.fd = fd;\n+    this.released = false;\n   }\n   \n   public boolean isValid ()\n   {\n-    throw new Error (\"Not implemented\");\n+    return (released || !channel.isOpen ());\n   }\n \n-  public void release ()\n+  private native void releaseImpl () throws IOException;\n+\n+  public synchronized void release () throws IOException\n   {\n-    throw new Error (\"Not implemented\");\n+    releaseImpl ();\n+    released = true;\n   }\n }"}, {"sha": "72dc20b15b8292d1ee2558844af6d4dc77243806", "filename": "libjava/gnu/java/nio/SelectionKeyImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectionKeyImpl.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -50,7 +50,7 @@ public class SelectionKeyImpl extends AbstractSelectionKey\n   SelectorImpl impl;\n   SelectableChannel ch;\n \n-  public SelectionKeyImpl(SelectableChannel ch, SelectorImpl impl, int fd)\n+  public SelectionKeyImpl (SelectableChannel ch, SelectorImpl impl, int fd)\n   {\n     this.ch  = ch;\n     this.impl = impl;"}, {"sha": "e3eed255501afd1d2d105a8dd2439d9e48207226", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -261,16 +261,16 @@ protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n //         return impl;\n //       }\n //     else\n-\t\n+\n     if (ch instanceof SocketChannelImpl)\n-\t    {\n+      {\n         SocketChannelImpl sc = (SocketChannelImpl) ch;\n         SelectionKeyImpl impl = new SelectionKeyImpl (ch, this, sc.fd);\n         add (impl);\n         impl.interestOps (ops);\n         impl.attach (att);\n         return impl;\n-\t    }\n+      }\n     else if (ch instanceof DatagramChannelImpl)\n       {\n         DatagramChannelImpl dc = (DatagramChannelImpl) ch;\n@@ -290,9 +290,9 @@ else if (ch instanceof ServerSocketChannelImpl)\n         return impl;\n       }\n     else\n-\t    {\n+      {\n         System.err.println (\"INTERNAL ERROR, no known channel type\");\n-\t    }\n+      }\n \n     return null;\n   }"}, {"sha": "0b3fc66e9812da37c79457d5e55f08798ea5b9ae", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -73,15 +73,15 @@ protected ServerSocketChannelImpl (SelectorProvider provider)\n   public void finalizer()\n   {\n     if (connected)\n-\t    {\n+      {\n         try\n           {\n-            close();\n+            close ();\n           }\n         catch (Exception e)\n           {\n           }\n-\t    }\n+      }\n   }\n \n   protected void implCloseSelectableChannel () throws IOException\n@@ -91,12 +91,12 @@ protected void implCloseSelectableChannel () throws IOException\n     fd = SocketChannelImpl.SocketCreate ();\n   }\n \n-  protected void implConfigureBlocking (boolean block) throws IOException\n+  protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n-    blocking = block;\n+    this.blocking = blocking;\n   }\n \n-  public SocketChannel accept ()\n+  public SocketChannel accept () throws IOException\n   {\n     SocketChannelImpl result = new SocketChannelImpl (provider ());\n     result.sa = new InetSocketAddress (0);"}, {"sha": "65ca62341aeaffecb85bad262c33e3a5b3933cc2", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -80,37 +80,36 @@ public SocketChannelImpl(SelectorProvider provider)\n   public void finalizer()\n   {\n     if (connected)\n-\t    {\n+      {\n         try\n           {\n-            close();\n+            close ();\n           }\n         catch (Exception e)\n           {\n           }\n-\t    }\n+      }\n   }\n \n-  protected void implCloseSelectableChannel()\n+  protected void implCloseSelectableChannel () throws IOException\n   {\n     connected = false;\n     SocketClose(fd);\n     fd = SocketCreate();\n   }\n \n-  protected void implConfigureBlocking(boolean  block)\n+  protected void implConfigureBlocking (boolean blocking) throws IOException\n   {\n-    if (blocking == block)\n-\t    return;\n+    if (this.blocking == blocking)\n+      return;\n   }   \n \n-  public boolean connect(SocketAddress remote)\n-    throws IOException\n+  public boolean connect (SocketAddress remote) throws IOException\n   {\n     if (connected)\n-\t    {\n-        throw new AlreadyConnectedException();\n-\t    }\n+      {\n+        throw new AlreadyConnectedException ();\n+      }\n \n     // ok, lets connect !\n \t\n@@ -130,25 +129,25 @@ public boolean connect(SocketAddress remote)\n     return blocking;\n   }\n     \n-  public boolean finishConnect()\n+  public boolean finishConnect ()\n   {\n     return false;\n   }\n \n-  public boolean isConnected()\n+  public boolean isConnected ()\n   {\n     return connected;\n   }\n     \n-  public boolean isConnectionPending()\n+  public boolean isConnectionPending ()\n   {\n     if (blocking)\n \t    return true;\n \n     return false;\n   }\n     \n-  public Socket socket()\n+  public Socket socket ()\n   {\n     if (sock_object != null)\n \t    {\n@@ -158,7 +157,7 @@ public Socket socket()\n     return sock_object;\n   }\n \n-  public int read(ByteBuffer dst)\n+  public int read (ByteBuffer dst) throws IOException\n   {\n     int bytes = 0;\n     int len = 1024;\n@@ -168,27 +167,29 @@ public int read(ByteBuffer dst)\n     dst.put(b, 0, bytes);\n \n     if (bytes == 0)\n-\t    {\n+      {\n         // we've hit eof ?\n         return -1;\n-\t    }\n+      }\n \n     return bytes;\n   }\n     \n-  public long read(ByteBuffer[] dsts, int offset, int length)\n+  public long read (ByteBuffer[] dsts, int offset, int length)\n+    throws IOException\n   {\n     long bytes = 0;\n \n-    for (int i=offset; i<length; i++)\n-\t    {\n-        bytes += read(dsts[i]);\n-\t    }\n+    for (int i = offset; i < length; i++)\n+      {\n+        bytes += read (dsts [i]);\n+      }\n \n     return bytes;\n   }\n      \n-  public int write(ByteBuffer src)\n+  public int write (ByteBuffer src)\n+    throws IOException\n   {\n     int bytes = 0;\n     int len = src.position();\n@@ -210,13 +211,14 @@ public int write(ByteBuffer src)\n   }\n \n   public long write (ByteBuffer[] srcs, int offset, int length)\n+    throws IOException\n   {\n     long bytes = 0;\n \n-    for (int i=offset; i<length; i++)\n-\t    {\n-        bytes += write(srcs[i]);\n-\t    }\n+    for (int i = offset; i < length; i++)\n+      {\n+        bytes += write (srcs [i]);\n+      }\n \n     return bytes;\n   }"}, {"sha": "19a3b83fde75b78a875c4c74da5a82e3b3898c54", "filename": "libjava/gnu/java/nio/natFileLockImpl.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileLockImpl.cc?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -0,0 +1,25 @@\n+// natFileLockImpl.cc\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <jvm.h>\n+#include <errno.h>\n+\n+#include <gnu/java/nio/FileLockImpl.h>\n+#include <java/io/FileDescriptor.h>\n+#include <java/io/IOException.h>\n+\n+void\n+gnu::java::nio::FileLockImpl::releaseImpl ()\n+{\n+  throw new ::java::io::IOException\n+    (JvNewStringUTF (\"releaseImpl not implemented\"));\n+}"}, {"sha": "866ed3997d188de8bf10cdb7e68a1e1324742d0e", "filename": "libjava/java/nio/channels/FileLock.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileLock.java?ref=cc1b3d6b642d0baf424a9fca1ad7d94e1f342b02", "patch": "@@ -101,7 +101,7 @@ public final boolean isShared ()\n    */\n   public final boolean overlaps (long position, long size)\n   {\n-    if (position > this.position +this.size)\n+    if (position > this.position + this.size)\n       return false;\n \n     if (position + size < this.position)"}]}