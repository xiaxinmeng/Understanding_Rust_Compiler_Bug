{"sha": "25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViNDVjN2M2Y2VhMjRmODVkMmY4N2MxMWMwZTNjOTllZjIwYjY1NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-26T20:03:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-26T20:03:12Z"}, "message": "function.c (gimplify_parameters): Use build_clobber function.\n\n\t* function.c (gimplify_parameters): Use build_clobber function.\n\t* tree-ssa.c (execute_update_addresses_taken): Likewise.\n\t* tree-inline.c (expand_call_inline): Likewise.\n\t* tree-sra.c (clobber_subtree): Likewise.\n\t* tree-ssa-ccp.c (insert_clobber_before_stack_restore): Likewise.\n\t* omp-low.c (lower_rec_simd_input_clauses, lower_rec_input_clauses,\n\tlower_omp_single, lower_depend_clauses, lower_omp_taskreg,\n\tlower_omp_target): Likewise.\n\t* omp-expand.c (expand_omp_for_generic): Likewise.\n\t* omp-offload.c (ompdevlow_adjust_simt_enter): Likewise.\n\nFrom-SVN: r276165", "tree": {"sha": "6a6457bad795d6c011223b09e05d6ff4ee931a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6457bad795d6c011223b09e05d6ff4ee931a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c78d3425209f3c4ad529906bb43e7947f13311db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78d3425209f3c4ad529906bb43e7947f13311db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c78d3425209f3c4ad529906bb43e7947f13311db"}], "stats": {"total": 67, "additions": 30, "deletions": 37}, "files": [{"sha": "416bf6386b78d4361413f79f96c7d100117c8c29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -1,3 +1,16 @@\n+2019-09-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* function.c (gimplify_parameters): Use build_clobber function.\n+\t* tree-ssa.c (execute_update_addresses_taken): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\t* tree-sra.c (clobber_subtree): Likewise.\n+\t* tree-ssa-ccp.c (insert_clobber_before_stack_restore): Likewise.\n+\t* omp-low.c (lower_rec_simd_input_clauses, lower_rec_input_clauses,\n+\tlower_omp_single, lower_depend_clauses, lower_omp_taskreg,\n+\tlower_omp_target): Likewise.\n+\t* omp-expand.c (expand_omp_for_generic): Likewise.\n+\t* omp-offload.c (ompdevlow_adjust_simt_enter): Likewise.\n+\n 2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def: (LVSL, LVSR, LVEBX, LVEHX,"}, {"sha": "9c158cec1211683ecb621f3245d809ce10921527", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -3892,9 +3892,8 @@ gimplify_parameters (gimple_seq *cleanup)\n \t\t  if (!is_gimple_reg (local)\n \t\t      && flag_stack_reuse != SR_NONE)\n \t\t    {\n-\t\t      tree clobber = build_constructor (type, NULL);\n+\t\t      tree clobber = build_clobber (type);\n \t\t      gimple *clobber_stmt;\n-\t\t      TREE_THIS_VOLATILE (clobber) = 1;\n \t\t      clobber_stmt = gimple_build_assign (local, clobber);\n \t\t      gimple_seq_add_stmt (cleanup, clobber_stmt);\n \t\t    }"}, {"sha": "0f703bede4713f69df8f6aad3361f73072e3faae", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -2988,8 +2988,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t\t\t\ttrue, GSI_SAME_STMT);\n   if (arr && !TREE_STATIC (arr))\n     {\n-      tree clobber = build_constructor (TREE_TYPE (arr), NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (TREE_TYPE (arr));\n       gsi_insert_before (&gsi, gimple_build_assign (arr, clobber),\n \t\t\t GSI_SAME_STMT);\n     }\n@@ -3356,8 +3355,7 @@ expand_omp_for_generic (struct omp_region *region,\n   if (fd->ordered)\n     {\n       tree arr = counts[fd->ordered];\n-      tree clobber = build_constructor (TREE_TYPE (arr), NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (TREE_TYPE (arr));\n       gsi_insert_after (&gsi, gimple_build_assign (arr, clobber),\n \t\t\tGSI_SAME_STMT);\n     }"}, {"sha": "5db182c6841e20ca555d00c63eed1b2b30a97eba", "filename": "gcc/omp-low.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -4044,8 +4044,7 @@ lower_rec_simd_input_clauses (tree new_var, omp_context *ctx,\n       DECL_ATTRIBUTES (ivar) = tree_cons (get_identifier (\"omp simt private\"),\n \t\t\t\t\t  NULL, DECL_ATTRIBUTES (ivar));\n       sctx->simt_eargs.safe_push (build1 (ADDR_EXPR, ptype, ivar));\n-      tree clobber = build_constructor (type, NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (type);\n       gimple *g = gimple_build_assign (ivar, clobber);\n       gimple_seq_add_stmt (&sctx->simt_dlist, g);\n     }\n@@ -5939,8 +5938,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n     }\n   if (tskred_avar)\n     {\n-      tree clobber = build_constructor (TREE_TYPE (tskred_avar), NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (TREE_TYPE (tskred_avar));\n       gimple_seq_add_stmt (ilist, gimple_build_assign (tskred_avar, clobber));\n     }\n \n@@ -7896,8 +7894,7 @@ lower_omp_single (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   if (ctx->record_type)\n     {\n       gimple_stmt_iterator gsi = gsi_start (bind_body_tail);\n-      tree clobber = build_constructor (ctx->record_type, NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (ctx->record_type);\n       gsi_insert_after (&gsi, gimple_build_assign (ctx->sender_decl,\n \t\t\t\t\t\t   clobber), GSI_SAME_STMT);\n     }\n@@ -11029,8 +11026,7 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n   OMP_CLAUSE_DECL (c) = build_fold_addr_expr (array);\n   OMP_CLAUSE_CHAIN (c) = *pclauses;\n   *pclauses = c;\n-  tree clobber = build_constructor (type, NULL);\n-  TREE_THIS_VOLATILE (clobber) = 1;\n+  tree clobber = build_clobber (type);\n   g = gimple_build_assign (array, clobber);\n   gimple_seq_add_stmt (oseq, g);\n }\n@@ -11165,8 +11161,7 @@ lower_omp_taskreg (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n   if (ctx->record_type)\n     {\n-      tree clobber = build_constructor (TREE_TYPE (ctx->sender_decl), NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (TREE_TYPE (ctx->sender_decl));\n       gimple_seq_add_stmt (&olist, gimple_build_assign (ctx->sender_decl,\n \t\t\t\t\t\t\tclobber));\n     }\n@@ -11911,16 +11906,13 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t\t\t  &initlist, true, NULL_TREE);\n \t    gimple_seq_add_seq (&ilist, initlist);\n \n-\t    tree clobber = build_constructor (TREE_TYPE (TREE_VEC_ELT (t, i)),\n-\t\t\t\t\t      NULL);\n-\t    TREE_THIS_VOLATILE (clobber) = 1;\n+\t    tree clobber = build_clobber (TREE_TYPE (TREE_VEC_ELT (t, i)));\n \t    gimple_seq_add_stmt (&olist,\n \t\t\t\t gimple_build_assign (TREE_VEC_ELT (t, i),\n \t\t\t\t\t\t      clobber));\n \t  }\n \n-      tree clobber = build_constructor (ctx->record_type, NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (ctx->record_type);\n       gimple_seq_add_stmt (&olist, gimple_build_assign (ctx->sender_decl,\n \t\t\t\t\t\t\tclobber));\n     }"}, {"sha": "32eacf7863eaee82f9f8c0b55ee40d089dd3a184", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -1855,8 +1855,7 @@ ompdevlow_adjust_simt_enter (gimple_stmt_iterator *gsi, bool *regimplify)\n     {\n       gcc_assert (gimple_call_internal_p (exit_stmt, IFN_GOMP_SIMT_EXIT));\n       gimple_stmt_iterator exit_gsi = gsi_for_stmt (exit_stmt);\n-      tree clobber = build_constructor (rectype, NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (rectype);\n       exit_stmt = gimple_build_assign (build_simple_mem_ref (simtrec), clobber);\n       gsi_insert_before (&exit_gsi, exit_stmt, GSI_SAME_STMT);\n     }"}, {"sha": "500037c9f3f3023b620ca645bc49366af7a4e91e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -5016,9 +5016,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t  tree *varp = id->decl_map->get (p);\n \t  if (varp && VAR_P (*varp) && !is_gimple_reg (*varp))\n \t    {\n-\t      tree clobber = build_constructor (TREE_TYPE (*varp), NULL);\n+\t      tree clobber = build_clobber (TREE_TYPE (*varp));\n \t      gimple *clobber_stmt;\n-\t      TREE_THIS_VOLATILE (clobber) = 1;\n \t      clobber_stmt = gimple_build_assign (*varp, clobber);\n \t      gimple_set_location (clobber_stmt, gimple_location (stmt));\n \t      gsi_insert_before (&stmt_gsi, clobber_stmt, GSI_SAME_STMT);\n@@ -5086,9 +5085,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t  && !is_gimple_reg (id->retvar)\n \t  && !stmt_ends_bb_p (stmt))\n \t{\n-\t  tree clobber = build_constructor (TREE_TYPE (id->retvar), NULL);\n+\t  tree clobber = build_clobber (TREE_TYPE (id->retvar));\n \t  gimple *clobber_stmt;\n-\t  TREE_THIS_VOLATILE (clobber) = 1;\n \t  clobber_stmt = gimple_build_assign (id->retvar, clobber);\n \t  gimple_set_location (clobber_stmt, gimple_location (old_stmt));\n \t  gsi_insert_after (&stmt_gsi, clobber_stmt, GSI_SAME_STMT);\n@@ -5134,9 +5132,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \t       && !TREE_THIS_VOLATILE (id->retvar)\n \t       && !is_gimple_reg (id->retvar))\n \t{\n-\t  tree clobber = build_constructor (TREE_TYPE (id->retvar), NULL);\n+\t  tree clobber = build_clobber (TREE_TYPE (id->retvar));\n \t  gimple *clobber_stmt;\n-\t  TREE_THIS_VOLATILE (clobber) = 1;\n \t  clobber_stmt = gimple_build_assign (id->retvar, clobber);\n \t  gimple_set_location (clobber_stmt, gimple_location (stmt));\n \t  gsi_replace (&stmt_gsi, clobber_stmt, false);"}, {"sha": "c462ca46e7d50b32663adfa8cdf90696bf0eea33", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -3028,8 +3028,7 @@ clobber_subtree (struct access *access, gimple_stmt_iterator *gsi,\n   if (access->grp_to_be_replaced)\n     {\n       tree rep = get_access_replacement (access);\n-      tree clobber = build_constructor (access->type, NULL);\n-      TREE_THIS_VOLATILE (clobber) = 1;\n+      tree clobber = build_clobber (access->type);\n       gimple *stmt = gimple_build_assign (rep, clobber);\n \n       if (insert_after)"}, {"sha": "a8d0738fbb0e706ff3d819a7b4325037d8eb27ab", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -2093,9 +2093,7 @@ insert_clobber_before_stack_restore (tree saved_val, tree var,\n   FOR_EACH_IMM_USE_STMT (stmt, iter, saved_val)\n     if (gimple_call_builtin_p (stmt, BUILT_IN_STACK_RESTORE))\n       {\n-\tclobber = build_constructor (TREE_TYPE (var),\n-\t\t\t\t     NULL);\n-\tTREE_THIS_VOLATILE (clobber) = 1;\n+\tclobber = build_clobber (TREE_TYPE (var));\n \tclobber_stmt = gimple_build_assign (var, clobber);\n \n \ti = gsi_for_stmt (stmt);"}, {"sha": "24dd8b32f7edd0abb299b7566d8e91808625ba16", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25b45c7c6cea24f85d2f87c11c0e3c99ef20b655/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=25b45c7c6cea24f85d2f87c11c0e3c99ef20b655", "patch": "@@ -2016,9 +2016,7 @@ execute_update_addresses_taken (void)\n \t\t\t    /* In ASAN_MARK (UNPOISON, &b, ...) the variable\n \t\t\t       is uninitialized.  Avoid dependencies on\n \t\t\t       previous out of scope value.  */\n-\t\t\t    tree clobber\n-\t\t\t      = build_constructor (TREE_TYPE (var), NULL);\n-\t\t\t    TREE_THIS_VOLATILE (clobber) = 1;\n+\t\t\t    tree clobber = build_clobber (TREE_TYPE (var));\n \t\t\t    gimple *g = gimple_build_assign (var, clobber);\n \t\t\t    gsi_replace (&gsi, g, GSI_SAME_STMT);\n \t\t\t  }"}]}