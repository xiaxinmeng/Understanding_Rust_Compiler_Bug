{"sha": "99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "node_id": "C_kwDOANBUbNoAKDk5ZjNhZDJlNWIxMTdlZTc5YTZkY2Y5NzI4ODI2MWUyZmEzMmFiNGM", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-02-06T18:07:01Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-02-10T14:46:33Z"}, "message": "Add function context for querying global ranges.\n\nWhen processing arguments for assume functions, call get_global_range\ndirectly and utilize a function context pointer to avoid any assumptions\nabout using cfun.\n\n\tPR tree-optimization/108520\n\tgcc/\n\t* gimple-range-infer.cc (check_assume_func): Invoke\n\tgimple_range_global directly instead using global_range_query.\n\t* value-query.cc (get_range_global): Add function context and\n\tavoid calling nonnull_arg_p if not cfun.\n\t(gimple_range_global): Add function context pointer.\n\t* value-query.h (imple_range_global): Add function context.\n\n\tgcc/testsuite/\n\t* g++.dg/pr108520.C: New.", "tree": {"sha": "831646b70330811f9ed4355be0e3316c7eab73fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/831646b70330811f9ed4355be0e3316c7eab73fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/comments", "author": null, "committer": null, "parents": [{"sha": "edfc4402504fd512ba469219e2ed637f2921a1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfc4402504fd512ba469219e2ed637f2921a1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfc4402504fd512ba469219e2ed637f2921a1c2"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "c765e07273187c5240c41508752d320c0877cc62", "filename": "gcc/gimple-range-infer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fgimple-range-infer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fgimple-range-infer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-infer.cc?ref=99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "patch": "@@ -84,7 +84,7 @@ gimple_infer_range::check_assume_func (gcall *call)\n \t    continue;\n \t  // Query the global range of the default def in the assume function.\n \t  Value_Range assume_range (type);\n-\t  global_ranges.range_of_expr (assume_range, default_def);\n+\t  gimple_range_global (assume_range, default_def, fun);\n \t  // If there is a non-varying result, add it as an inferred range.\n \t  if (!assume_range.varying_p ())\n \t    {"}, {"sha": "6cd677a852d481817c750efd517646c7fe9fed45", "filename": "gcc/testsuite/g++.dg/pr108520.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr108520.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr108520.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr108520.C?ref=99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++23 } }\n+// { dg-options \"-O2\" }\n+\n+static void foo () {}\n+struct S { void (*f) (); };\n+\n+[[gnu::nonnull (1)]]\n+void\n+bar (void *x)\n+{\n+  struct S a[3] = { { foo }, { foo }, { foo } };\n+  for (struct S *i = a, *e = a + 3; i != e; i++)\n+    {\n+      [[assume (i->f)]];\n+      i->f ();\n+    }\n+}"}, {"sha": "f936e878080c38c6b4e124dc085a3d1db29a7545", "filename": "gcc/value-query.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "patch": "@@ -312,7 +312,7 @@ get_ssa_name_ptr_info_nonnull (const_tree name)\n // return VARYING.\n \n static void\n-get_range_global (vrange &r, tree name)\n+get_range_global (vrange &r, tree name, struct function *fun = cfun)\n {\n   tree type = TREE_TYPE (name);\n \n@@ -327,7 +327,7 @@ get_range_global (vrange &r, tree name)\n \t  // anti-ranges for pointers.  Note that this is only valid with\n \t  // default definitions of PARM_DECLs.\n \t  if (POINTER_TYPE_P (type)\n-\t      && ((cfun && nonnull_arg_p (sym))\n+\t      && ((cfun && fun == cfun && nonnull_arg_p (sym))\n \t\t  || get_ssa_name_ptr_info_nonnull (name)))\n \t    r.set_nonzero (type);\n \t  else if (!POINTER_TYPE_P (type))\n@@ -378,15 +378,15 @@ get_range_global (vrange &r, tree name)\n // https://gcc.gnu.org/pipermail/gcc-patches/2021-June/571709.html\n \n void\n-gimple_range_global (vrange &r, tree name)\n+gimple_range_global (vrange &r, tree name, struct function *fun)\n {\n   tree type = TREE_TYPE (name);\n   gcc_checking_assert (TREE_CODE (name) == SSA_NAME);\n \n-  if (SSA_NAME_IS_DEFAULT_DEF (name) || (cfun && cfun->after_inlining)\n+  if (SSA_NAME_IS_DEFAULT_DEF (name) || (fun && fun->after_inlining)\n       || is_a<gphi *> (SSA_NAME_DEF_STMT (name)))\n     {\n-      get_range_global (r, name);\n+      get_range_global (r, name, fun);\n       return;\n     }\n   r.set_varying (type);"}, {"sha": "63878968118cc17e89dd349b24381e52b67801fc", "filename": "gcc/value-query.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fvalue-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c/gcc%2Fvalue-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.h?ref=99f3ad2e5b117ee79a6dcf97288261e2fa32ab4c", "patch": "@@ -143,6 +143,8 @@ get_range_query (const struct function *fun)\n   return fun->x_range_query ? fun->x_range_query : &global_ranges;\n }\n \n-extern void gimple_range_global (vrange &v, tree name);\n+// Query the global range of NAME in function F.  Default to cfun.\n+extern void gimple_range_global (vrange &v, tree name,\n+\t\t\t\t struct function *f = cfun);\n \n #endif // GCC_QUERY_H"}]}