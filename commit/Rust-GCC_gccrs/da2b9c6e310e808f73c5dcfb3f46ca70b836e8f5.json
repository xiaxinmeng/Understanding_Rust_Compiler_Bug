{"sha": "da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "node_id": "C_kwDOANBUbNoAKGRhMmI5YzZlMzEwZTgwOGY3M2M1ZGNmYjNmNDZjYTcwYjgzNmU4ZjU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-10T00:17:15Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-10T00:17:15Z"}, "message": "Daily bump.", "tree": {"sha": "d3e87096f8c3bdb290289736f952a0abaeffeec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3e87096f8c3bdb290289736f952a0abaeffeec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/comments", "author": null, "committer": null, "parents": [{"sha": "e0324e2629e25a90c13c68b4eef1e47b091970c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0324e2629e25a90c13c68b4eef1e47b091970c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0324e2629e25a90c13c68b4eef1e47b091970c3"}], "stats": {"total": 228, "additions": 227, "deletions": 1}, "files": [{"sha": "045acf56ccce3a419fdd2d2e199199120f977a57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1,3 +1,62 @@\n+2023-03-09  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* passes.cc (emergency_dump_function): Finish graph generation.\n+\n+2023-03-09  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.md (tbranch_<code><mode>3): Restrict to SHORT\n+\tand bottom bit only.\n+\n+2023-03-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/108980\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref):\n+\tReorgnize the call to warning for not strict flexible arrays\n+\tto be before the check of warned.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* doc/extend.texi: Comment out __is_deducible docs.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105841\n+\t* doc/extend.texi (Type Traits):: Document __is_deducible.\n+\n+2023-03-09  Costas Argyris  <costas.argyris@gmail.com>\n+\n+\tPR driver/108865\n+\t* config.host: add object for x86_64-*-mingw*.\n+\t* config/i386/sym-mingw32.cc: dummy file to attach\n+\tsymbol.\n+\t* config/i386/utf8-mingw32.rc: windres resource file.\n+\t* config/i386/winnt-utf8.manifest: XML manifest to\n+\tenable UTF-8.\n+\t* config/i386/x-mingw32: reference to x-mingw32-utf8.\n+\t* config/i386/x-mingw32-utf8: Makefile fragment to\n+\tembed UTF-8 manifest.\n+\n+2023-03-09  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* lra-constraints.cc (process_alt_operands): Use operand modes for\n+\tclobbered regs instead of the biggest access mode.\n+\n+2023-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108995\n+\t* fold-const.cc (extract_muldiv_1): Avoid folding\n+\t(CST * b) / CST2 when sanitizing overflow and we rely on\n+\toverflow being undefined.\n+\n+2023-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109008\n+\t* range-op-float.cc (float_widen_lhs_range): New function.\n+\t(foperator_plus::op1_range, foperator_minus::op1_range,\n+\tfoperator_minus::op2_range, foperator_mult::op1_range,\n+\tfoperator_div::op1_range, foperator_div::op2_range): Use it.\n+\n 2023-03-07  Jonathan Grant  <jg@jguk.org>\n \n \tPR sanitizer/81649"}, {"sha": "cca5b336d189034cca7e7e73da5204b3ffaa482b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1 +1 @@\n-20230309\n+20230310"}, {"sha": "adbe792b5523c0b9e2425657864c80631ec817c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1,3 +1,47 @@\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108773\n+\t* init.cc (find_allocator_temps_r): New.\n+\t(combine_allocator_temps): Replace find_allocator_temp.\n+\t(build_vec_init): Adjust.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 2664\n+\tPR c++/102529\n+\t* pt.cc (alias_ctad_tweaks): Continue after deduction failure.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\t    Michael Spertus  <mike@spertus.com>\n+\n+\tPR c++/105841\n+\t* pt.cc\t(corresponding_template_parameter_list): Split out...\n+\t(corresponding_template_parameter): ...from here.\n+\t(find_template_parameters): Factor out...\n+\t(find_template_parameter_info::find_in): ...this function.\n+\t(find_template_parameter_info::find_in_recursive): New.\n+\t(find_template_parameter_info::found): New.\n+\t(alias_ctad_tweaks): Only add parms used in the deduced args.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-trait.def (IS_DEDUCIBLE): Add space to name.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105841\n+\t* cp-trait.def (IS_DEDUCIBLE): New.\n+\t* cxx-pretty-print.cc (pp_cxx_trait): Handle non-type.\n+\t* parser.cc (cp_parser_trait): Likewise.\n+\t* tree.cc (cp_tree_equal): Likewise.\n+\t* pt.cc (tsubst_copy_and_build): Likewise.\n+\t(type_targs_deducible_from): New.\n+\t(alias_ctad_tweaks): Use it.\n+\t* semantics.cc (trait_expr_value): Handle CPTK_IS_DEDUCIBLE.\n+\t(finish_trait_expr): Likewise.\n+\t* constraint.cc (diagnose_trait_expr): Likewise.\n+\t* cp-tree.h (type_targs_deducible_from): Declare.\n+\n 2023-03-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/108526"}, {"sha": "7c4d10d1f194d8546289d34cf80870605d88bcdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1,3 +1,69 @@\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108773\n+\t* g++.dg/cpp0x/initlist-array18.C: New test.\n+\t* g++.dg/cpp0x/initlist-array19.C: New test.\n+\n+2023-03-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102671\n+\tPR analyzer/105755\n+\tPR analyzer/108251\n+\tPR analyzer/108400\n+\t* gcc.dg/analyzer/null-deref-pr102671-1.c: New test, reduced\n+\tfrom Emacs.\n+\t* gcc.dg/analyzer/null-deref-pr102671-2.c: Likewise.\n+\t* gcc.dg/analyzer/null-deref-pr105755.c: Likewise.\n+\t* gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early-O2.c:\n+\tNew test, reduced from haproxy's src/ssl_sample.c.\n+\t* gcc.dg/analyzer/null-deref-pr108251-smp_fetch_ssl_fc_has_early.c:\n+\tLikewise.\n+\t* gcc.dg/analyzer/null-deref-pr108400-SoftEtherVPN-WebUi.c: New\n+\ttest, reduced from SoftEtherVPN's src/Cedar/WebUI.c.\n+\n+2023-03-09  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/tbz_2.c: New test.\n+\t* gcc.target/aarch64/tbz_3.c: New test.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 2664\n+\tPR c++/102529\n+\t* g++.dg/DRs/dr2664.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-alias15.C: New test.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\t    Michael Spertus  <mike@spertus.com>\n+\n+\tPR c++/105841\n+\t* g++.dg/cpp2a/class-deduction-alias14.C: New test.\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/is_deducible1.C: Guard with\n+\t__has_builtin (__is_deducible).\n+\n+2023-03-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105841\n+\t* g++.dg/ext/is_deducible1.C: New test.\n+\n+2023-03-09  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\t* gcc.target/aarch64/pr108999.c: New.\n+\n+2023-03-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108995\n+\t* gcc.dg/ubsan/pr108995.c: New testcase.\n+\n+2023-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109008\n+\t* gcc.c-torture/execute/ieee/pr109008.c: New test.\n+\n 2023-03-08  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fortran/ppc-fortran.exp: Override"}, {"sha": "6b5cc8cfd2d41aef8d55850e9b9b668a65e8c6ae", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1,3 +1,10 @@\n+2023-03-09  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR libgomp/109062\n+\t* env.c (wait_policy): Initialize to -1.\n+\t(initialize_icvs): Initialize icvs->wait_policy to -1.\n+\t* testsuite/libgomp.c-c++-common/pr109062.c: New test.\n+\n 2023-03-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (Offload-Target Specifics): Mention GCN_STACK_SIZE."}, {"sha": "80417e471795e7851c9d6a567a3b9f94db704ea4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da2b9c6e310e808f73c5dcfb3f46ca70b836e8f5", "patch": "@@ -1,3 +1,53 @@\n+2023-03-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges\n+\t(cartesian_product_view::_Iterator::_Iterator): Remove\n+\tconstraint on default constructor as per LWG 3849.\n+\t(cartesian_product_view::_Iterator::_M_prev): Adjust position\n+\tof _Nm > 0 test as per LWG 3820.\n+\t(cartesian_product_view::_Iterator::_M_advance): Perform bounds\n+\tchecking only on sized cartesian products.\n+\t* testsuite/std/ranges/cartesian_product/1.cc (test08): New test.\n+\n+2023-03-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/109024\n+\t* include/std/ranges (chunk_by_view::_M_pred): Remove DMI as per\n+\tLWG 3796.\n+\t(repeat_view::_M_pred): Likewise.\n+\t* testsuite/std/ranges/adaptors/chunk_by/1.cc (test03): New test.\n+\t* testsuite/std/ranges/repeat/1.cc (test05): New test.\n+\n+2023-03-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/108362\n+\t* include/std/ranges (__detail::__can_single_view): New concept.\n+\t(_Single::operator()): Constrain it.  Move [[nodiscard]] to the\n+\tend of the function declarator.\n+\t(__detail::__can_iota_view): New concept.\n+\t(_Iota::operator()): Constrain it.  Move [[nodiscard]] to the\n+\tend of the function declarator.\n+\t(__detail::__can_istream_view): New concept.\n+\t(_Istream::operator()): Constrain it.  Move [[nodiscard]] to the\n+\tend of the function declarator.\n+\t* testsuite/std/ranges/iota/iota_view.cc (test07): New test.\n+\t* testsuite/std/ranges/istream_view.cc (test08): New test.\n+\t* testsuite/std/ranges/single_view.cc (test07): New test.\n+\n+2023-03-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/107572\n+\t* include/std/ranges (cartesian_product_view::end): When\n+\tbuilding the tuple of iterators, avoid calling ranges::begin on\n+\tthe first range if __empty_tail is false.\n+\t* testsuite/std/ranges/cartesian_product/1.cc (test07): New test.\n+\n+2023-03-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108882\n+\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: Fix incorrect\n+\tpatterns.\n+\n 2023-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update."}]}