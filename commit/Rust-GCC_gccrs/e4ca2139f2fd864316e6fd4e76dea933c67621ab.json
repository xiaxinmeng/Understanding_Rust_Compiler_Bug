{"sha": "e4ca2139f2fd864316e6fd4e76dea933c67621ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjYTIxMzlmMmZkODY0MzE2ZTZmZDRlNzZkZWE5MzNjNjc2MjFhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-09-05T13:04:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-09-05T13:04:40Z"}, "message": "cfgloop.c (mark_loop_for_removal): Record former header when ENABLE_CHECKING.\n\n2014-09-05  Richard Biener  <rguenther@suse.de>\n\n\t* cfgloop.c (mark_loop_for_removal): Record former header\n\twhen ENABLE_CHECKING.\n\t* cfgloop.h (strut loop): Add former_header member when\n\tENABLE_CHECKING.\n\t* loop-init.c (fix_loop_structure): Sanity check loops\n\tmarked for removal if they re-appeared.\n\nFrom-SVN: r214957", "tree": {"sha": "90b86e5c02c302902763114e914e357c26422e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b86e5c02c302902763114e914e357c26422e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ca2139f2fd864316e6fd4e76dea933c67621ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ca2139f2fd864316e6fd4e76dea933c67621ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ca2139f2fd864316e6fd4e76dea933c67621ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ca2139f2fd864316e6fd4e76dea933c67621ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3212d53df65a17e11cdd9917e433f5b94b37174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3212d53df65a17e11cdd9917e433f5b94b37174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3212d53df65a17e11cdd9917e433f5b94b37174"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "5af9fd485db4a1b39b25f529ed0dca1e93aa53e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4ca2139f2fd864316e6fd4e76dea933c67621ab", "patch": "@@ -1,3 +1,12 @@\n+2014-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloop.c (mark_loop_for_removal): Record former header\n+\twhen ENABLE_CHECKING.\n+\t* cfgloop.h (strut loop): Add former_header member when\n+\tENABLE_CHECKING.\n+\t* loop-init.c (fix_loop_structure): Sanity check loops\n+\tmarked for removal if they re-appeared.\n+\n 2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/arm_neon.h (int32x1_t, int16x1_t, int8x1_t,"}, {"sha": "399420ddbde330dc3f5c75e017a654743dd77aca", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=e4ca2139f2fd864316e6fd4e76dea933c67621ab", "patch": "@@ -1927,7 +1927,11 @@ bb_loop_depth (const_basic_block bb)\n void\n mark_loop_for_removal (loop_p loop)\n {\n+#ifdef ENABLE_CHECKING\n+  loop->former_header = loop->header;\n+#endif\n   loop->header = NULL;\n   loop->latch = NULL;\n   loops_state_set (LOOPS_NEED_FIXUP);\n }\n+"}, {"sha": "d62a4151cb03de720ff1b1cc25756794421430fa", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=e4ca2139f2fd864316e6fd4e76dea933c67621ab", "patch": "@@ -193,6 +193,14 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n \n   /* Number of iteration analysis data for RTL.  */\n   struct niter_desc *simple_loop_desc;\n+\n+#ifdef ENABLE_CHECKING\n+  /* For sanity checking during loop fixup we record here the former\n+     loop header for loops marked for removal.  Note that this prevents\n+     the basic-block from being collected but its index can still be\n+     reused.  */\n+  basic_block former_header;\n+#endif\n };\n \n /* Flags for state of loop structure.  */"}, {"sha": "e3734abadcea94742c6a7ab97fd6d4ad6a8a94f7", "filename": "gcc/loop-init.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ca2139f2fd864316e6fd4e76dea933c67621ab/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=e4ca2139f2fd864316e6fd4e76dea933c67621ab", "patch": "@@ -245,6 +245,12 @@ fix_loop_structure (bitmap changed_bbs)\n \t}\n \n       /* Remove the loop.  */\n+#ifdef ENABLE_CHECKING\n+      if (loop->header)\n+\tloop->former_header = loop->header;\n+      else\n+\tgcc_assert (loop->former_header != NULL);\n+#endif\n       loop->header = NULL;\n       flow_loop_tree_node_remove (loop);\n     }\n@@ -272,6 +278,35 @@ fix_loop_structure (bitmap changed_bbs)\n   FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n     if (loop && loop->header == NULL)\n       {\n+#ifdef ENABLE_CHECKING\n+\tif (dump_file\n+\t    && ((unsigned) loop->former_header->index\n+\t\t< basic_block_info_for_fn (cfun)->length ()))\n+\t  {\n+\t    basic_block former_header\n+\t      = BASIC_BLOCK_FOR_FN (cfun, loop->former_header->index);\n+\t    /* If the old header still exists we want to check if the\n+\t       original loop is re-discovered or the old header is now\n+\t       part of a newly discovered loop.\n+\t       In both cases we should have avoided removing the loop.  */\n+\t    if (former_header == loop->former_header)\n+\t      {\n+\t\tif (former_header->loop_father->header == former_header)\n+\t\t  fprintf (dump_file, \"fix_loop_structure: rediscovered \"\n+\t\t\t   \"removed loop %d as loop %d with old header %d\\n\",\n+\t\t\t   loop->num, former_header->loop_father->num,\n+\t\t\t   former_header->index);\n+\t\telse if ((unsigned) former_header->loop_father->num\n+\t\t\t >= old_nloops)\n+\t\t  fprintf (dump_file, \"fix_loop_structure: header %d of \"\n+\t\t\t   \"removed loop %d is part of the newly \"\n+\t\t\t   \"discovered loop %d with header %d\\n\",\n+\t\t\t   former_header->index, loop->num,\n+\t\t\t   former_header->loop_father->num,\n+\t\t\t   former_header->loop_father->header->index);\n+\t      }\n+\t  }\n+#endif\n \t(*get_loops (cfun))[i] = NULL;\n \tflow_loop_free (loop);\n       }"}]}