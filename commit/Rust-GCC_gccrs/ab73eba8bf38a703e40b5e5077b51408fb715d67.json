{"sha": "ab73eba8bf38a703e40b5e5077b51408fb715d67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3M2ViYThiZjM4YTcwM2U0MGI1ZTUwNzdiNTE0MDhmYjcxNWQ2Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-19T14:50:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-19T14:50:52Z"}, "message": "re PR c++/44969 ([C++0x] <type_traits> std::is_constructible broken for fundamental types.)\n\n\tPR c++/44969\n\t* tree.c (cp_tree_equal): Compare type of *CAST_EXPR.\n\t* pt.c (iterative_hash_template_arg): Hash type of *CAST_EXPR.\n\nFrom-SVN: r162307", "tree": {"sha": "a050dcefcbee61a4d668171c611cf81d4716c07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a050dcefcbee61a4d668171c611cf81d4716c07b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab73eba8bf38a703e40b5e5077b51408fb715d67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab73eba8bf38a703e40b5e5077b51408fb715d67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab73eba8bf38a703e40b5e5077b51408fb715d67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab73eba8bf38a703e40b5e5077b51408fb715d67/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157be8f67b0ff8906b93ca4b7ee178f2e44fa725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157be8f67b0ff8906b93ca4b7ee178f2e44fa725"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "9a7c1a4871355a25d37d23a78d3a6d1071020aa3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab73eba8bf38a703e40b5e5077b51408fb715d67", "patch": "@@ -1,3 +1,9 @@\n+2010-07-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44969\n+\t* tree.c (cp_tree_equal): Compare type of *CAST_EXPR.\n+\t* pt.c (iterative_hash_template_arg): Hash type of *CAST_EXPR.\n+\n 2010-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44969"}, {"sha": "0ccd8d9df5d5e7dd113126045aba4df5788177dc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ab73eba8bf38a703e40b5e5077b51408fb715d67", "patch": "@@ -1566,31 +1566,43 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       gcc_assert (seen_error ());\n       return val;\n \n+    case CAST_EXPR:\n+    case STATIC_CAST_EXPR:\n+    case REINTERPRET_CAST_EXPR:\n+    case CONST_CAST_EXPR:\n+    case DYNAMIC_CAST_EXPR:\n+    case NEW_EXPR:\n+      val = iterative_hash_template_arg (TREE_TYPE (arg), val);\n+      /* Now hash operands as usual.  */\n+      break;\n+\n     default:\n-      switch (tclass)\n-\t{\n-\tcase tcc_type:\n-\t  if (TYPE_CANONICAL (arg))\n-\t    return iterative_hash_object (TYPE_HASH (TYPE_CANONICAL (arg)),\n-\t\t\t\t\t  val);\n-\t  else if (TREE_CODE (arg) == DECLTYPE_TYPE)\n-\t    return iterative_hash_template_arg (DECLTYPE_TYPE_EXPR (arg), val);\n-\t  /* Otherwise just compare the types during lookup.  */\n-\t  return val;\n+      break;\n+    }\n \n-\tcase tcc_declaration:\n-\tcase tcc_constant:\n-\t  return iterative_hash_expr (arg, val);\n+  switch (tclass)\n+    {\n+    case tcc_type:\n+      if (TYPE_CANONICAL (arg))\n+\treturn iterative_hash_object (TYPE_HASH (TYPE_CANONICAL (arg)),\n+\t\t\t\t      val);\n+      else if (TREE_CODE (arg) == DECLTYPE_TYPE)\n+\treturn iterative_hash_template_arg (DECLTYPE_TYPE_EXPR (arg), val);\n+      /* Otherwise just compare the types during lookup.  */\n+      return val;\n \n-\tdefault:\n-\t  gcc_assert (IS_EXPR_CODE_CLASS (tclass));\n-\t  {\n-\t    unsigned n = TREE_OPERAND_LENGTH (arg);\n-\t    for (i = 0; i < n; ++i)\n-\t      val = iterative_hash_template_arg (TREE_OPERAND (arg, i), val);\n-\t    return val;\n-\t  }\n-\t}\n+    case tcc_declaration:\n+    case tcc_constant:\n+      return iterative_hash_expr (arg, val);\n+\n+    default:\n+      gcc_assert (IS_EXPR_CODE_CLASS (tclass));\n+      {\n+\tunsigned n = TREE_OPERAND_LENGTH (arg);\n+\tfor (i = 0; i < n; ++i)\n+\t  val = iterative_hash_template_arg (TREE_OPERAND (arg, i), val);\n+\treturn val;\n+      }\n     }\n   gcc_unreachable ();\n   return 0;"}, {"sha": "2abd8dd1a2c12669bf473f3da8350f40726d78c5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ab73eba8bf38a703e40b5e5077b51408fb715d67", "patch": "@@ -2191,6 +2191,17 @@ cp_tree_equal (tree t1, tree t2)\n       return same_type_p (TRAIT_EXPR_TYPE1 (t1), TRAIT_EXPR_TYPE1 (t2))\n \t&& same_type_p (TRAIT_EXPR_TYPE2 (t1), TRAIT_EXPR_TYPE2 (t2));\n \n+    case CAST_EXPR:\n+    case STATIC_CAST_EXPR:\n+    case REINTERPRET_CAST_EXPR:\n+    case CONST_CAST_EXPR:\n+    case DYNAMIC_CAST_EXPR:\n+    case NEW_EXPR:\n+      if (!same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+\treturn false;\n+      /* Now compare operands as usual.  */\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "fbe239847bdaee56c99dd88a92c2792447492946", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab73eba8bf38a703e40b5e5077b51408fb715d67", "patch": "@@ -1,3 +1,8 @@\n+2010-07-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44969\n+\t* g++.dg/template/sfinae24.C: New.\n+\n 2010-07-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR fortran/44353"}, {"sha": "7138c96e66fc861dfb2da8eba5a745f8956d01b0", "filename": "gcc/testsuite/g++.dg/template/sfinae24.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab73eba8bf38a703e40b5e5077b51408fb715d67/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae24.C?ref=ab73eba8bf38a703e40b5e5077b51408fb715d67", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/44969\n+\n+template<bool, typename T = void> struct enable_if { typedef T type; };\n+template<typename T> struct enable_if<false, T> { };\n+\n+template<typename Tp, typename Arg1, typename Arg2>\n+  class mini_is_constructible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename Tp1, typename Arg1_, typename Arg2_>\n+      static typename\n+      enable_if<(sizeof(Tp1(Arg1_(), Arg2_()), 1) > 0), one>::type\n+      test(int);\n+\n+    template<typename, typename, typename>\n+      static two test(...);\n+\n+  public:\n+    static const bool value = sizeof(test<Tp, Arg1, Arg2>(0)) == 1;\n+  };\n+\n+class A { };\n+\n+int Test[mini_is_constructible<int, A, A>::value ? -1 : 1];"}]}