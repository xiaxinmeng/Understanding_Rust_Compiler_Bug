{"sha": "e0139b2a912585496f23c352f0e2c56895f78fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxMzliMmE5MTI1ODU0OTZmMjNjMzUyZjBlMmM1Njg5NWY3OGZiZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-17T15:37:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-17T15:37:16Z"}, "message": "analyzer: fix false leak involving params [PR98969]\n\nThis patch updates the svalue liveness code so that the initial value\nof parameters at top-level functions to the analysis are treated as\nlive (since the values are presumably still live within the\noutside-of-the-analysis calling code).\n\nThis fixes the false leak in PR analyzer/98969 seen on:\n\nvoid\ntest (long int i)\n{\n  struct foo *f = (struct foo *)i;\n  f->expr = __builtin_malloc (1024);\n}\n\nsince the calling code can presumably still access the allocated\nbuffer via:\n  ((struct foo *)i)->expr\n\nThe patch also removes the expected leak warnings from\ng++.dg/analyzer/pr99064.C and gcc.dg/analyzer/pr96841.c, which now\nappear to me to be false positives.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/98969\n\t* constraint-manager.cc (dead_svalue_purger::should_purge_p):\n\tUpdate for change to svalue::live_p.\n\t* program-state.cc (sm_state_map::on_liveness_change): Likewise.\n\t(program_state::detect_leaks): Likewise.\n\t* region-model-reachability.cc (reachable_regions::init_cluster):\n\tWhen dealing with a symbolic region, if the underlying pointer is\n\timplicitly live, add the region to the reachable regions.\n\t* region-model.cc (region_model::compare_initial_and_pointer):\n\tMove logic for detecting initial values of params to\n\tinitial_svalue::initial_value_of_param_p.\n\t* svalue.cc (svalue::live_p): Convert \"live_svalues\" from a\n\treference to a pointer; support it being NULL.\n\t(svalue::implicitly_live_p): Convert first param from a\n\trefererence to a pointer.\n\t(region_svalue::implicitly_live_p): Likewise.\n\t(constant_svalue::implicitly_live_p): Likewise.\n\t(initial_svalue::implicitly_live_p): Likewise.  Treat the initial\n\tvalues of params for the top level frame as still live.\n\t(initial_svalue::initial_value_of_param_p): New function, taken\n\tfrom a test in region_model::compare_initial_and_pointer.\n\t(unaryop_svalue::implicitly_live_p): Convert first param from a\n\trefererence to a pointer.\n\t(binop_svalue::implicitly_live_p): Likewise.\n\t(sub_svalue::implicitly_live_p): Likewise.\n\t(unmergeable_svalue::implicitly_live_p): Likewise.\n\t* svalue.h (svalue::live_p): Likewise.\n\t(svalue::implicitly_live_p): Likewise.\n\t(region_svalue::implicitly_live_p): Likewise.\n\t(constant_svalue::implicitly_live_p): Likewise.\n\t(initial_svalue::implicitly_live_p): Likewise.\n\t(initial_svalue::initial_value_of_param_p): New decl.\n\t(unaryop_svalue::implicitly_live_p): Convert first param from a\n\trefererence to a pointer.\n\t(binop_svalue::implicitly_live_p): Likewise.\n\t(sub_svalue::implicitly_live_p): Likewise.\n\t(unmergeable_svalue::implicitly_live_p): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98969\n\t* g++.dg/analyzer/pr99064.C: Convert dg-bogus to dg-warning.\n\t* gcc.dg/analyzer/pr96841.c: Add -Wno-analyzer-too-complex to\n\toptions.  Remove false leak directive.\n\t* gcc.dg/analyzer/pr98969.c (test_1): Remove xfail from leak\n\tfalse positive.\n\t(test_3): New.", "tree": {"sha": "3f185403a60a6a3581ea0fa2131e842013925587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f185403a60a6a3581ea0fa2131e842013925587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0139b2a912585496f23c352f0e2c56895f78fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0139b2a912585496f23c352f0e2c56895f78fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0139b2a912585496f23c352f0e2c56895f78fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0139b2a912585496f23c352f0e2c56895f78fbf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366cf1127a547ff77024a551abb01bb1a6e963cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366cf1127a547ff77024a551abb01bb1a6e963cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366cf1127a547ff77024a551abb01bb1a6e963cd"}], "stats": {"total": 109, "additions": 69, "deletions": 40}, "files": [{"sha": "4dadd200beeb63f13c28efad69c7cc2d8edfb333", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -1643,7 +1643,7 @@ class dead_svalue_purger\n \n   bool should_purge_p (const svalue *sval) const\n   {\n-    return !sval->live_p (m_live_svalues, m_model);\n+    return !sval->live_p (&m_live_svalues, m_model);\n   }\n \n private:"}, {"sha": "e427fff59d677de110e65878e94950fed265bbc3", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -523,7 +523,7 @@ sm_state_map::on_liveness_change (const svalue_set &live_svalues,\n        ++iter)\n     {\n       const svalue *iter_sval = (*iter).first;\n-      if (!iter_sval->live_p (live_svalues, model))\n+      if (!iter_sval->live_p (&live_svalues, model))\n \t{\n \t  svals_to_unset.add (iter_sval);\n \t  entry_t e = (*iter).second;\n@@ -1201,7 +1201,7 @@ program_state::detect_leaks (const program_state &src_state,\n \t live in DEST_STATE: either explicitly reachable, or implicitly\n \t live based on the set of explicitly reachable svalues.\n \t Record those that have ceased to be live.  */\n-      if (!sval->live_p (dest_svalues, dest_state.m_region_model))\n+      if (!sval->live_p (&dest_svalues, dest_state.m_region_model))\n \tdead_svals.quick_push (sval);\n     }\n "}, {"sha": "087185b4e45002648c21078a22a88c4b8c8682e5", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -91,6 +91,8 @@ reachable_regions::init_cluster (const region *base_reg)\n   if (const symbolic_region *sym_reg = base_reg->dyn_cast_symbolic_region ())\n     {\n       const svalue *ptr = sym_reg->get_pointer ();\n+      if (ptr->implicitly_live_p (NULL, m_model))\n+\tadd (base_reg, true);\n       switch (ptr->get_kind ())\n \t{\n \tdefault:"}, {"sha": "159b0f18654c04cd43bdf6265e5fc4fb38ea9e9d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -1980,18 +1980,8 @@ region_model::compare_initial_and_pointer (const initial_svalue *init,\n   /* If we have a pointer to something within a stack frame, it can't be the\n      initial value of a param.  */\n   if (pointee->maybe_get_frame_region ())\n-    {\n-      const region *reg = init->get_region ();\n-      if (tree reg_decl = reg->maybe_get_decl ())\n-\tif (TREE_CODE (reg_decl) == SSA_NAME)\n-\t  {\n-\t    tree ssa_name = reg_decl;\n-\t    if (SSA_NAME_IS_DEFAULT_DEF (ssa_name)\n-\t\t&& SSA_NAME_VAR (ssa_name)\n-\t\t&& TREE_CODE (SSA_NAME_VAR (ssa_name)) == PARM_DECL)\n-\t      return tristate::TS_FALSE;\n-\t  }\n-    }\n+    if (init->initial_value_of_param_p ())\n+      return tristate::TS_FALSE;\n \n   return tristate::TS_UNKNOWN;\n }"}, {"sha": "d6305a37b9a6ee2602f830d2a8cbadbd5f07254b", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -246,15 +246,18 @@ svalue::can_merge_p (const svalue *other,\n }\n \n /* Determine if this svalue is either within LIVE_SVALUES, or is implicitly\n-   live with respect to LIVE_SVALUES and MODEL.  */\n+   live with respect to LIVE_SVALUES and MODEL.\n+   LIVE_SVALUES can be NULL, in which case determine if this svalue is\n+   intrinsically live.  */\n \n bool\n-svalue::live_p (const svalue_set &live_svalues,\n+svalue::live_p (const svalue_set *live_svalues,\n \t\tconst region_model *model) const\n {\n   /* Determine if SVAL is explicitly live.  */\n-  if (const_cast<svalue_set &> (live_svalues).contains (this))\n-    return true;\n+  if (live_svalues)\n+    if (const_cast<svalue_set *> (live_svalues)->contains (this))\n+      return true;\n \n   /* Otherwise, determine if SVAL is implicitly live due to being made of\n      other live svalues.  */\n@@ -264,7 +267,7 @@ svalue::live_p (const svalue_set &live_svalues,\n /* Base implementation of svalue::implicitly_live_p.  */\n \n bool\n-svalue::implicitly_live_p (const svalue_set &, const region_model *) const\n+svalue::implicitly_live_p (const svalue_set *, const region_model *) const\n {\n   return false;\n }\n@@ -512,7 +515,7 @@ region_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for region_svalue.  */\n \n bool\n-region_svalue::implicitly_live_p (const svalue_set &,\n+region_svalue::implicitly_live_p (const svalue_set *,\n \t\t\t\t  const region_model *model) const\n {\n   /* Pointers into clusters that have escaped should be treated as live.  */\n@@ -609,7 +612,7 @@ constant_svalue::accept (visitor *v) const\n    Constants are implicitly live.  */\n \n bool\n-constant_svalue::implicitly_live_p (const svalue_set &,\n+constant_svalue::implicitly_live_p (const svalue_set *,\n \t\t\t\t    const region_model *) const\n {\n   return true;\n@@ -749,7 +752,7 @@ initial_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for initial_svalue.  */\n \n bool\n-initial_svalue::implicitly_live_p (const svalue_set &,\n+initial_svalue::implicitly_live_p (const svalue_set *,\n \t\t\t\t   const region_model *model) const\n {\n   /* This svalue may be implicitly live if the region still implicitly\n@@ -765,6 +768,31 @@ initial_svalue::implicitly_live_p (const svalue_set &,\n \treturn true;\n     }\n \n+  /* Assume that the initial values of params for the top level frame\n+     are still live, because (presumably) they're still\n+     live in the external caller.  */\n+  if (initial_value_of_param_p ())\n+    if (const frame_region *frame_reg = m_reg->maybe_get_frame_region ())\n+      if (frame_reg->get_calling_frame () == NULL)\n+\treturn true;\n+\n+  return false;\n+}\n+\n+/* Return true if this is the initial value of a function parameter.  */\n+\n+bool\n+initial_svalue::initial_value_of_param_p () const\n+{\n+  if (tree reg_decl = m_reg->maybe_get_decl ())\n+    if (TREE_CODE (reg_decl) == SSA_NAME)\n+      {\n+\ttree ssa_name = reg_decl;\n+\tif (SSA_NAME_IS_DEFAULT_DEF (ssa_name)\n+\t    && SSA_NAME_VAR (ssa_name)\n+\t    && TREE_CODE (SSA_NAME_VAR (ssa_name)) == PARM_DECL)\n+\t  return true;\n+      }\n   return false;\n }\n \n@@ -816,7 +844,7 @@ unaryop_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for unaryop_svalue.  */\n \n bool\n-unaryop_svalue::implicitly_live_p (const svalue_set &live_svalues,\n+unaryop_svalue::implicitly_live_p (const svalue_set *live_svalues,\n \t\t\t\t   const region_model *model) const\n {\n   return get_arg ()->live_p (live_svalues, model);\n@@ -862,7 +890,7 @@ binop_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for binop_svalue.  */\n \n bool\n-binop_svalue::implicitly_live_p (const svalue_set &live_svalues,\n+binop_svalue::implicitly_live_p (const svalue_set *live_svalues,\n \t\t\t\t const region_model *model) const\n {\n   return (get_arg0 ()->live_p (live_svalues, model)\n@@ -919,7 +947,7 @@ sub_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for sub_svalue.  */\n \n bool\n-sub_svalue::implicitly_live_p (const svalue_set &live_svalues,\n+sub_svalue::implicitly_live_p (const svalue_set *live_svalues,\n \t\t\t       const region_model *model) const\n {\n   return get_parent ()->live_p (live_svalues, model);\n@@ -1136,7 +1164,7 @@ unmergeable_svalue::accept (visitor *v) const\n /* Implementation of svalue::implicitly_live_p vfunc for unmergeable_svalue.  */\n \n bool\n-unmergeable_svalue::implicitly_live_p (const svalue_set &live_svalues,\n+unmergeable_svalue::implicitly_live_p (const svalue_set *live_svalues,\n \t\t\t\t       const region_model *model) const\n {\n   return get_arg ()->live_p (live_svalues, model);"}, {"sha": "672a89cccff75ccab7b0fa6afc0e547052d56d4f", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -128,9 +128,9 @@ class svalue\n \n   virtual void accept (visitor *v) const  = 0;\n \n-  bool live_p (const svalue_set &live_svalues,\n+  bool live_p (const svalue_set *live_svalues,\n \t       const region_model *model) const;\n-  virtual bool implicitly_live_p (const svalue_set &live_svalues,\n+  virtual bool implicitly_live_p (const svalue_set *live_svalues,\n \t\t\t\t  const region_model *model) const;\n \n   static int cmp_ptr (const svalue *, const svalue *);\n@@ -194,7 +194,7 @@ class region_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   const region * get_pointee () const { return m_reg; }\n@@ -243,7 +243,7 @@ class constant_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   tree get_constant () const { return m_cst_expr; }\n@@ -493,9 +493,11 @@ class initial_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n+  bool initial_value_of_param_p () const;\n+\n   const region *get_region () const { return m_reg; }\n \n  private:\n@@ -564,7 +566,7 @@ class unaryop_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   enum tree_code get_op () const { return m_op; }\n@@ -653,7 +655,7 @@ class binop_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   enum tree_code get_op () const { return m_op; }\n@@ -734,7 +736,7 @@ class sub_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   const svalue *get_parent () const { return m_parent_svalue; }\n@@ -788,7 +790,7 @@ class unmergeable_svalue : public svalue\n \n   void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n   void accept (visitor *v) const FINAL OVERRIDE;\n-  bool implicitly_live_p (const svalue_set &,\n+  bool implicitly_live_p (const svalue_set *,\n \t\t\t  const region_model *) const FINAL OVERRIDE;\n \n   const svalue *get_arg () const { return m_arg; }"}, {"sha": "9fa54f57814ca49f32c49a5bf3ed993c2a3e22c8", "filename": "gcc/testsuite/g++.dg/analyzer/pr99064.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr99064.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr99064.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr99064.C?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -34,6 +34,6 @@ struct TPkcs11Token {\n void list_tokens() {\n   for (__normal_iterator base = list_tokens_token_list.begin();;) {\n     int *add_info = new int;\n-    (*base).add_info = add_info; // { dg-bogus \"leak\" \"PR analyzer/98969\" { xfail *-*-* } }\n+    (*base).add_info = add_info; // { dg-warning \"leak\" }\n   }\n }"}, {"sha": "854666170541712cfcc36a10009243cdd2b3cb56", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96841.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96841.c?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-O1 -Wno-builtin-declaration-mismatch\" } */\n+/* { dg-additional-options \"-Wno-analyzer-too-complex -O1 -Wno-builtin-declaration-mismatch\" } */\n \n int\n l8 (void);\n@@ -18,6 +18,6 @@ bv (__SIZE_TYPE__ ny)\n     {\n       *mf = 0;\n       (*mf)[ny] = (int *) malloc (sizeof (int));\n-      th ((*mf)[ny]); /* { dg-warning \"leak\" } */\n+      th ((*mf)[ny]);\n     }\n }"}, {"sha": "7e1587d7094d5bb3d30837ee003d9225ebeb25f7", "filename": "gcc/testsuite/gcc.dg/analyzer/pr98969.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98969.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0139b2a912585496f23c352f0e2c56895f78fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98969.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98969.c?ref=e0139b2a912585496f23c352f0e2c56895f78fbf", "patch": "@@ -8,11 +8,18 @@ test_1 (long int i)\n {\n   struct foo *f = (struct foo *)i;\n   f->expr = __builtin_malloc (1024);\n-} /* { dg-bogus \"leak\" \"PR analyzer/98969\" { xfail *-*-* } } */\n+} /* { dg-bogus \"leak\" } */\n \n void\n test_2 (long int i)\n {\n   __builtin_free (((struct foo *)i)->expr);\n   __builtin_free (((struct foo *)i)->expr); /* { dg-warning \"double-'free' of '\\\\*\\\\(\\\\(struct foo \\\\*\\\\)i\\\\)\\\\.expr'\" } */\n }\n+\n+void\n+test_3 (void *p)\n+{\n+  void **q = (void **)p;\n+  *q = __builtin_malloc (1024);  \n+}"}]}