{"sha": "db7fe2273ca407746cf50cb0c5e83b76ae65a256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3ZmUyMjczY2E0MDc3NDZjZjUwY2IwYzVlODNiNzZhZTY1YTI1Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-16T22:51:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-16T22:51:15Z"}, "message": "Updates from craig.\n\nFrom-SVN: r21233", "tree": {"sha": "ec5ad05118f769bf547c6328f64919da8926bcf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec5ad05118f769bf547c6328f64919da8926bcf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7fe2273ca407746cf50cb0c5e83b76ae65a256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7fe2273ca407746cf50cb0c5e83b76ae65a256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7fe2273ca407746cf50cb0c5e83b76ae65a256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7fe2273ca407746cf50cb0c5e83b76ae65a256/comments", "author": null, "committer": null, "parents": [{"sha": "1ccb8f57d5258a26d493e9658edc0acae3bb545d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccb8f57d5258a26d493e9658edc0acae3bb545d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccb8f57d5258a26d493e9658edc0acae3bb545d"}], "stats": {"total": 179, "additions": 159, "deletions": 20}, "files": [{"sha": "436caa49b94978646aa29052083d77b2d5489be3", "filename": "gcc/f/bugs.texi", "status": "modified", "additions": 153, "deletions": 20, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7fe2273ca407746cf50cb0c5e83b76ae65a256/gcc%2Ff%2Fbugs.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7fe2273ca407746cf50cb0c5e83b76ae65a256/gcc%2Ff%2Fbugs.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbugs.texi?ref=db7fe2273ca407746cf50cb0c5e83b76ae65a256", "patch": "@@ -5,7 +5,7 @@\n @c The text of this file appears in the file BUGS\n @c in the G77 distribution, as well as in the G77 manual.\n \n-@c 1998-05-17\n+@c 1998-07-15\n \n @ifclear BUGSONLY\n @node Actual Bugs\n@@ -25,14 +25,68 @@ configure, port, build, and install @code{g77},\n @ref{Problems Installing}.\n \n @itemize @bullet\n+@item\n+@code{g77} sometimes crashes when compiling code\n+containing the construct @samp{CMPLX(0.)} or similar.\n+This is a @code{gcc} back-end bug.\n+It can be worked around using @samp{-fno-emulate-complex},\n+though that might trigger other, older bugs.\n+Compiling without optimization is another work-around.\n+\n+Fixed in @code{egcs} 1.1.\n+\n+@item\n+@c Tim Prince discovered this.\n+Automatic arrays aren't working on HP-UX systems,\n+at least in HP-UX version 10.20.\n+Writing into them apparently causes over-writing\n+of statically declared data in the main program.\n+This probably means the arrays themselves are being under-allocated,\n+or pointers to them being improperly handled,\n+e.g. not passed to other procedures as they should be.\n+\n+@item\n+@c Toon Moene discovered these.\n+Some Fortran code has been found to be miscompiled\n+by @code{g77} built on @code{gcc} version 2.8.1\n+on m68k-next-nextstep3 configurations\n+when using the @samp{-O2} option.\n+Even a C function is known to miscompile\n+on that configuration\n+when using the @samp{-O2 -funroll-loops} options.\n+\n+Fixed in @code{egcs}.\n+\n+@cindex DNRM2\n+@cindex stack, 387 coprocessor\n+@cindex ix86\n+@cindex -O2\n+@item\n+A code-generation bug afflicts\n+Intel x86 targets when @samp{-O2} is specified\n+compiling, for example, an old version of\n+the @samp{DNRM2} routine.\n+The x87 coprocessor stack is being\n+mismanaged in cases where assigned @code{GOTO}\n+and @code{ASSIGN} are involved.\n+\n+Fixed in @code{egcs} version 1.1.\n+\n+@item\n+A compiler crash, or apparently infinite run time,\n+can result when compiling complicated expressions\n+involving @code{COMPLEX} arithmetic\n+(especially multiplication).\n+\n+Fixed in @code{egcs} version 1.1.\n+\n @item\n Something about @code{g77}'s straightforward handling of\n label references and definitions sometimes prevents the GBE\n from unrolling loops.\n Until this is solved, try inserting or removing @code{CONTINUE}\n statements as the terminal statement, using the @code{END DO}\n form instead, and so on.\n-(Probably improved, but not wholly fixed, in 0.5.21.)\n \n @item\n Some confusion in diagnostics concerning failing @code{INCLUDE}\n@@ -145,25 +199,15 @@ is definitely welcome.\n Such information might even lead to all relevant products\n working together properly sooner.\n \n-@cindex padding\n-@cindex structures\n-@cindex common blocks\n-@cindex equivalence areas\n+@cindex Alpha, support\n+@cindex support, Alpha\n @item\n-@code{g77} currently inserts needless padding for things like\n-@samp{COMMON A,IPAD} where @samp{A} is @code{CHARACTER*1} and @samp{IPAD}\n-is @code{INTEGER(KIND=1)} on machines like x86, because\n-the back end insists that @samp{IPAD} be aligned to a 4-byte boundary, but\n-the processor has no such requirement (though it's good for\n-performance).\n-\n-It is possible that this is not a real bug, and could be considered\n-a performance feature, but it might be important to provide\n-the ability to Fortran code to specify minimum padding for\n-aggregate areas such as common blocks---and, certainly, there\n-is the potential, with the current setup, for interface differences\n-in the way such areas are laid out between @code{g77} and other\n-compilers.\n+@code{g77} doesn't work perfectly on 64-bit configurations\n+such as the Digital Semiconductor (``DEC'') Alpha.\n+\n+This problem is largely resolved as of version 0.5.23.\n+Version 0.6 should solve most or all remaining problems\n+(such as cross-compiling involving 64-bit machines).\n \n @cindex COMPLEX support\n @cindex support, COMPLEX\n@@ -181,4 +225,93 @@ problem by not using the back end's support for @code{COMPLEX}.\n The new option @samp{-fno-emulate-complex} avoids the work-around,\n reverting to using the same ``broken'' mechanism as that used\n by versions of @code{g77} prior to 0.5.20.\n+\n+@cindex ELF support\n+@cindex support, ELF\n+@cindex -fPIC option\n+@cindex options, -fPIC\n+@item\n+There seem to be some problems with passing constants, and perhaps\n+general expressions (other than simple variables/arrays), to procedures\n+when compiling on some systems (such as i386) with @samp{-fPIC}, as in\n+when compiling for ELF targets.\n+The symptom is that the assembler complains about invalid opcodes.\n+This bug is in the gcc back end,\n+and it apparently occurs only when\n+compiling sufficiently complicated functions @emph{without} the\n+@samp{-O} option.\n+\n+Fixed in @code{egcs} version 1.1.\n+\n+@cindex padding\n+@cindex structures\n+@cindex common blocks\n+@cindex equivalence areas\n+@item\n+@code{g77} currently inserts needless padding for things like\n+@samp{COMMON A,IPAD} where @samp{A} is @code{CHARACTER*1} and @samp{IPAD}\n+is @code{INTEGER(KIND=1)} on machines like x86,\n+because the back end insists that @samp{IPAD}\n+be aligned to a 4-byte boundary,\n+but the processor has no such requirement\n+(though it is usually good for performance).\n+\n+The @code{gcc} back end needs to provide a wider array\n+of specifications of alignment requirements and preferences for targets,\n+and front ends like @code{g77} should take advantage of this\n+when it becomes available.\n+\n+@cindex alignment\n+@cindex double-precision performance\n+@cindex -malign-double\n+@item\n+The x86 target's @samp{-malign-double} option\n+no longer reliably aligns double-precision variables and arrays\n+when they are placed in the stack frame.\n+\n+This can significantly reduce the performance of some applications,\n+even on a run-to-run basis\n+(that is, performance measurements can vary fairly widely\n+depending on whether frequently used variables are properly aligned,\n+and that can change from one program run to the next,\n+even from one procedure call to the next).\n+\n+Versions 0.5.22 and earlier of @code{g77}\n+included a patch to @code{gcc} that enabled this,\n+but that patch has been deemed an improper (probably buggy) one\n+for version 2.8 of @code{gcc} and for @code{egcs}.\n+\n+Note that version 1.1 of @code{egcs}\n+aligns double-precision variables and arrays\n+when they are in static storage\n+even if @samp{-malign-double} is not specified.\n+\n+There is ongoing investigation into\n+how to make @samp{-malign-double} work properly,\n+also into how to make it unnecessary to get\n+all double-precision variables and arrays aligned\n+when such alignment would not violate\n+the relevant specifications for processor\n+and inter-procedural interfaces.\n+\n+For a suite of programs to test double-precision alignment,\n+see @uref{ftp://alpha.gnu.org/gnu/g77/align/}.\n+\n+@cindex complex performance\n+@cindex aliasing\n+@item\n+The @code{libf2c} routines that perform some run-time\n+arithmetic on @code{COMPLEX} operands\n+were modified circa version 0.5.20 of @code{g77}\n+to work properly even in the presence of aliased operands.\n+\n+While the @code{g77} and @code{netlib} versions of @code{libf2c}\n+differ on how this is accomplished,\n+the main differences are that we believe\n+the @code{g77} version works properly\n+even in the presence of @emph{partially} aliased operands.\n+\n+However, these modifications have reduced performance\n+on targets such as x86,\n+due to the extra copies of operands involved.\n @end itemize"}, {"sha": "8ad697c5d5cad7e74ae872fa421b6161a5d5bc11", "filename": "libf2c/readme.netlib", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7fe2273ca407746cf50cb0c5e83b76ae65a256/libf2c%2Freadme.netlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7fe2273ca407746cf50cb0c5e83b76ae65a256/libf2c%2Freadme.netlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2Freadme.netlib?ref=db7fe2273ca407746cf50cb0c5e83b76ae65a256", "patch": "@@ -613,6 +613,12 @@ identify the I/O unit involved.\n   libf2c.zip: above, plus tweaks to PC makefiles: for some purposes,\n it's still best to compile with -DMSDOS (even for use with NT).\n \n+Thu Jun 18 01:22:52 EDT 1998\n+  libi77: lread.c: modified so floating-point numbers (containing\n+either a decimal point or an exponent field) are treated as errors\n+when they appear as list input for integer data.  Compile lread.c with\n+-DALLOW_FLOAT_IN_INTEGER_LIST_INPUT to restore the old behavior.\n+\n Current timestamps of files in \"all from f2c/src\", sorted by time,\n appear below (mm/dd/year hh:mm:ss).  To bring your source up to date,\n obtain source files with a timestamp later than the time shown in your"}]}