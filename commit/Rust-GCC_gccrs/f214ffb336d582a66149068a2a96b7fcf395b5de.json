{"sha": "f214ffb336d582a66149068a2a96b7fcf395b5de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxNGZmYjMzNmQ1ODJhNjYxNDkwNjhhMmE5NmI3ZmNmMzk1YjVkZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-29T13:56:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-29T13:56:49Z"}, "message": "libstdc++: Simplify constraints on std::compare_three_way\n\nThe __3way_builtin_ptr_cmp concept can use three_way_comparable_with to\ncheck whether <=> is valid. Doing that makes it obvious that the\ndisjunction on compare_three_way::operator() is redundant, because\nthe second constraint subsumes the first.\n\nThe workaround for PR c++/91073 can also be removed as that bug is fixed\nnow.\n\n\t* libsupc++/compare (__detail::__3way_builtin_ptr_cmp): Use\n\tthree_way_comparable_with.\n\t(__detail::__3way_cmp_with): Remove workaround for fixed bug.\n\t(compare_three_way::operator()): Remove redundant constraint from\n\trequires-clause.\n\t(__detail::_Synth3way::operator()): Use three_way_comparable_with\n\tinstead of workaround.\n\t* testsuite/18_support/comparisons/object/93479.cc: Prune extra\n\toutput due to simplified constraints on compare_three_way::operator().", "tree": {"sha": "1cf499bba1c63de4edf244c2387cb30777eceaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf499bba1c63de4edf244c2387cb30777eceaf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f214ffb336d582a66149068a2a96b7fcf395b5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214ffb336d582a66149068a2a96b7fcf395b5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f214ffb336d582a66149068a2a96b7fcf395b5de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f214ffb336d582a66149068a2a96b7fcf395b5de/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b0201035cfdc1d4d80153f4e19ec98cf059941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b0201035cfdc1d4d80153f4e19ec98cf059941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b0201035cfdc1d4d80153f4e19ec98cf059941"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "e9a8a677e4cf4b7a2a97b744948e32dc54ecf1e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f214ffb336d582a66149068a2a96b7fcf395b5de", "patch": "@@ -1,5 +1,15 @@\n 2020-01-29  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* libsupc++/compare (__detail::__3way_builtin_ptr_cmp): Use\n+\tthree_way_comparable_with.\n+\t(__detail::__3way_cmp_with): Remove workaround for fixed bug.\n+\t(compare_three_way::operator()): Remove redundant constraint from\n+\trequires-clause.\n+\t(__detail::_Synth3way::operator()): Use three_way_comparable_with\n+\tinstead of workaround.\n+\t* testsuite/18_support/comparisons/object/93479.cc: Prune extra\n+\toutput due to simplified constraints on compare_three_way::operator().\n+\n \tPR libstdc++/93479\n \t* libsupc++/compare (__3way_builtin_ptr_cmp): Require <=> to be valid.\n \t* testsuite/18_support/comparisons/object/93479.cc: New test."}, {"sha": "a7a29ef0440fa7226e8f899824a60ba3db7222fe", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=f214ffb336d582a66149068a2a96b7fcf395b5de", "patch": "@@ -525,26 +525,20 @@ namespace std\n     // BUILTIN-PTR-THREE-WAY(T, U)\n     template<typename _Tp, typename _Up>\n       concept __3way_builtin_ptr_cmp\n-\t= requires(_Tp&& __t, _Up&& __u)\n-\t    { static_cast<_Tp&&>(__t) <=> static_cast<_Up&&>(__u); }\n+\t= three_way_comparable_with<_Tp, _Up>\n \t  && convertible_to<_Tp, const volatile void*>\n \t  && convertible_to<_Up, const volatile void*>\n \t  && ! requires(_Tp&& __t, _Up&& __u)\n \t     { operator<=>(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u)); }\n \t  && ! requires(_Tp&& __t, _Up&& __u)\n \t     { static_cast<_Tp&&>(__t).operator<=>(static_cast<_Up&&>(__u)); };\n-\n-    // FIXME: workaround for PR c++/91073\n-    template<typename _Tp, typename _Up>\n-      concept __3way_cmp_with = three_way_comparable_with<_Tp, _Up>;\n   } // namespace __detail\n \n   // [cmp.object], typename compare_three_way\n   struct compare_three_way\n   {\n     template<typename _Tp, typename _Up>\n-      requires (__detail::__3way_cmp_with<_Tp, _Up>\n-\t  || __detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n+      requires three_way_comparable_with<_Tp, _Up>\n       constexpr auto\n       operator()(_Tp&& __t, _Up&& __u) const noexcept\n       {\n@@ -919,7 +913,7 @@ namespace std\n \t  { __u < __t } -> convertible_to<bool>;\n \t}\n \t{\n-\t  if constexpr (__3way_cmp_with<_Tp, _Up>)\n+\t  if constexpr (three_way_comparable_with<_Tp, _Up>)\n \t    return __t <=> __u;\n \t  else\n \t    {"}, {"sha": "f4f0a36685b5253a92b42598139ae52652b47f49", "filename": "libstdc++-v3/testsuite/18_support/comparisons/object/93479.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2F93479.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f214ffb336d582a66149068a2a96b7fcf395b5de/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2F93479.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fobject%2F93479.cc?ref=f214ffb336d582a66149068a2a96b7fcf395b5de", "patch": "@@ -42,3 +42,5 @@ test02()\n   std::compare_three_way{}(x, \"\"); // { dg-error \"no match\" }\n   std::compare_three_way{}(\"\", x); // { dg-error \"no match\" }\n }\n+\n+// { dg-prune-output \"in requirements with\" }"}]}