{"sha": "03a0866432efadc888d6a65651943b89e2ae6eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhMDg2NjQzMmVmYWRjODg4ZDZhNjU2NTE5NDNiODllMmFlNmViMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-17T21:27:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-17T21:27:47Z"}, "message": "c-common.def (SIZEOF_EXPR, [...]): Remove.\n\n./\t* c-common.def (SIZEOF_EXPR, ARROW_EXPR, ALIGNOF_EXPR): Remove.\n\t* c-common.c (c_sizeof_or_alignof_type): Change second parameter\n\tfrom enum tree_code op to bool is_sizeof.\n\t* c-common.h (c_sizeof_or_alignof_type): Update declaration.\n\t(c_sizeof, c_alignof): Update calls to c_sizeof_or_alignof_type.\n\t* c-pretty-print.c (pp_c_postfix_expression): Remove ARROW_EXPR\n\tcase.\n\t(pp_c_unary_expression): Remove SIZEOF_EXPR and ALIGNOF_EXPR\n\tcases.\n\t(pp_c_expression): Remove ARROW_EXPR, SIZEOF_EXPR, and\n\tALIGNOF_EXPR cases.\ncp/\n\t* cp-tree.def: Add SIZEOF_EXPR, ARROW_EXPR and ALIGNOF_EXPR.\n\t* cxx-pretty-print.c (pp_cxx_postfix_expression): Handle\n\tARROW_EXPR.\n\t(pp_cxx_unary_expression): Handle SIZEOF_EXPR and ALIGNOF_EXPR.\n\t(pp_cxx_expression): Handle ARROW_EXPR, SIZEOF_EXPR, and\n\tALIGNOF_EXPR.\n\t* typeck.c (cxx_sizeof_or_alignof_type): Update call to\n\tc_sizeof_or_alignof_type for change in parameter type.\n\nFrom-SVN: r98297", "tree": {"sha": "8d0efbde4233e83950ce2bef9c8a5c3377334df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0efbde4233e83950ce2bef9c8a5c3377334df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a0866432efadc888d6a65651943b89e2ae6eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a0866432efadc888d6a65651943b89e2ae6eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a0866432efadc888d6a65651943b89e2ae6eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a0866432efadc888d6a65651943b89e2ae6eb0/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81a60083ea5e7aa3ccd994dd6fefc3d4099303af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a60083ea5e7aa3ccd994dd6fefc3d4099303af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a60083ea5e7aa3ccd994dd6fefc3d4099303af"}], "stats": {"total": 102, "additions": 71, "deletions": 31}, "files": [{"sha": "64c39f9ece06cce988d9cc4daf2d22ca02e86006", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -1,3 +1,17 @@\n+2005-04-17  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-common.def (SIZEOF_EXPR, ARROW_EXPR, ALIGNOF_EXPR): Remove.\n+\t* c-common.c (c_sizeof_or_alignof_type): Change second parameter\n+\tfrom enum tree_code op to bool is_sizeof.\n+\t* c-common.h (c_sizeof_or_alignof_type): Update declaration.\n+\t(c_sizeof, c_alignof): Update calls to c_sizeof_or_alignof_type.\n+\t* c-pretty-print.c (pp_c_postfix_expression): Remove ARROW_EXPR\n+\tcase.\n+\t(pp_c_unary_expression): Remove SIZEOF_EXPR and ALIGNOF_EXPR\n+\tcases.\n+\t(pp_c_expression): Remove ARROW_EXPR, SIZEOF_EXPR, and\n+\tALIGNOF_EXPR cases.\n+\n 2005-04-17  Ian Lance Taylor  <ian@airs.com>\n \n \t* system.h: Poison DONT_ACCESS_GBLS_AFTER_EPILOGUE."}, {"sha": "7f1ac51eba01d930dce636638dd972368e9af62b", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -2786,19 +2786,19 @@ c_common_get_alias_set (tree t)\n    second parameter indicates which OPERATOR is being applied.  The COMPLAIN\n    flag controls whether we should diagnose possibly ill-formed\n    constructs or not.  */\n+\n tree\n-c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n+c_sizeof_or_alignof_type (tree type, bool is_sizeof, int complain)\n {\n   const char *op_name;\n   tree value = NULL;\n   enum tree_code type_code = TREE_CODE (type);\n \n-  gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n-  op_name = op == SIZEOF_EXPR ? \"sizeof\" : \"__alignof__\";\n+  op_name = is_sizeof ? \"sizeof\" : \"__alignof__\";\n \n   if (type_code == FUNCTION_TYPE)\n     {\n-      if (op == SIZEOF_EXPR)\n+      if (is_sizeof)\n \t{\n \t  if (complain && (pedantic || warn_pointer_arith))\n \t    pedwarn (\"invalid application of %<sizeof%> to a function type\");\n@@ -2823,7 +2823,7 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n     }\n   else\n     {\n-      if (op == (enum tree_code) SIZEOF_EXPR)\n+      if (is_sizeof)\n \t/* Convert in case a char is more than one unit.  */\n \tvalue = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n \t\t\t    size_int (TYPE_PRECISION (char_type_node)"}, {"sha": "b352364e95aae173d34dfcc7174e6c05ecdd626c", "filename": "gcc/c-common.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -25,10 +25,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Tree nodes relevant to both C and C++. These were originally in\n cp-tree.def in the cp subdir.  */\n \n-DEFTREECODE (SIZEOF_EXPR, \"sizeof_expr\", tcc_unary, 1)\n-DEFTREECODE (ARROW_EXPR, \"arrow_expr\", tcc_expression, 1)\n-DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", tcc_unary, 1)\n-\n /* Used to represent an expression statement.  Use `EXPR_STMT_EXPR' to\n    obtain the expression.  */\n DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)"}, {"sha": "9d98ffb65d1cf3c54ae268a938acc3697694130d", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -636,7 +636,7 @@ extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern tree c_common_truthvalue_conversion (tree);\n extern void c_apply_type_quals_to_decl (int, tree);\n-extern tree c_sizeof_or_alignof_type (tree, enum tree_code, int);\n+extern tree c_sizeof_or_alignof_type (tree, bool, int);\n extern tree c_alignof_expr (tree);\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n@@ -649,8 +649,8 @@ extern void overflow_warning (tree);\n extern void unsigned_conversion_warning (tree, tree);\n extern bool c_determine_visibility (tree);\n \n-#define c_sizeof(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR, 1)\n-#define c_alignof(T) c_sizeof_or_alignof_type (T, ALIGNOF_EXPR, 1)\n+#define c_sizeof(T)  c_sizeof_or_alignof_type (T, true, 1)\n+#define c_alignof(T) c_sizeof_or_alignof_type (T, false, 1)\n \n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types"}, {"sha": "24220ce6241057704253f39e9ec7dba13d1ffb46", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -1223,11 +1223,6 @@ pp_c_postfix_expression (c_pretty_printer *pp, tree e)\n       pp_identifier (pp, code == POSTINCREMENT_EXPR ? \"++\" : \"--\");\n       break;\n \n-    case ARROW_EXPR:\n-      pp_postfix_expression (pp, TREE_OPERAND (e, 0));\n-      pp_c_arrow (pp);\n-      break;\n-\n     case ARRAY_REF:\n       pp_postfix_expression (pp, TREE_OPERAND (e, 0));\n       pp_c_left_bracket (pp);\n@@ -1430,16 +1425,6 @@ pp_c_unary_expression (c_pretty_printer *pp, tree e)\n       pp_c_cast_expression (pp, TREE_OPERAND (e, 0));\n       break;\n \n-    case SIZEOF_EXPR:\n-    case ALIGNOF_EXPR:\n-      pp_c_identifier (pp, code == SIZEOF_EXPR ? \"sizeof\" : \"__alignof__\");\n-      pp_c_whitespace (pp);\n-      if (TYPE_P (TREE_OPERAND (e, 0)))\n-        pp_c_type_cast (pp, TREE_OPERAND (e, 0));\n-      else\n-\tpp_unary_expression (pp, TREE_OPERAND (e, 0));\n-      break;\n-\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       pp_c_identifier (pp, code == REALPART_EXPR ? \"__real__\" : \"__imag__\");\n@@ -1807,7 +1792,6 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n \n     case POSTINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n-    case ARROW_EXPR:\n     case ARRAY_REF:\n     case CALL_EXPR:\n     case COMPONENT_REF:\n@@ -1837,8 +1821,6 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n     case TRUTH_NOT_EXPR:\n     case PREINCREMENT_EXPR:\n     case PREDECREMENT_EXPR:\n-    case SIZEOF_EXPR:\n-    case ALIGNOF_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       pp_c_unary_expression (pp, e);"}, {"sha": "e26a97936711fd813d7784246587a3080987c2d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -1,3 +1,14 @@\n+2005-04-17  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* cp-tree.def: Add SIZEOF_EXPR, ARROW_EXPR and ALIGNOF_EXPR.\n+\t* cxx-pretty-print.c (pp_cxx_postfix_expression): Handle\n+\tARROW_EXPR.\n+\t(pp_cxx_unary_expression): Handle SIZEOF_EXPR and ALIGNOF_EXPR.\n+\t(pp_cxx_expression): Handle ARROW_EXPR, SIZEOF_EXPR, and\n+\tALIGNOF_EXPR.\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Update call to\n+\tc_sizeof_or_alignof_type for change in parameter type.\n+\n 2005-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21025"}, {"sha": "ffcc9a51622e6be469245e0de5c58c079a700b23", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -321,6 +321,16 @@ DEFTREECODE (TINST_LEVEL, \"TINST_LEVEL\", tcc_exceptional, 0)\n /* Represents an 'offsetof' expression during template expansion.  */\n DEFTREECODE (OFFSETOF_EXPR, \"offsetof_expr\", tcc_expression, 1)\n \n+/* Represents a 'sizeof' expression during template expansion.  */\n+DEFTREECODE (SIZEOF_EXPR, \"sizeof_expr\", tcc_unary, 1)\n+\n+/* Represents the -> operator during template expansion.  */\n+DEFTREECODE (ARROW_EXPR, \"arrow_expr\", tcc_expression, 1)\n+\n+/* Represents an '__alignof__' expression during template\n+   expansion.  */\n+DEFTREECODE (ALIGNOF_EXPR, \"alignof_expr\", tcc_unary, 1)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "854efeccd361c757500268ad4ccf0e92a53399c8", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -490,6 +490,11 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_unqualified_id (pp, TREE_OPERAND (t, 2));\n       break;\n \n+    case ARROW_EXPR:\n+      pp_cxx_postfix_expression (pp, TREE_OPERAND (t, 0));\n+      pp_cxx_arrow (pp);\n+      break;\n+\n     default:\n       pp_c_postfix_expression (pp_c_base (pp), t);\n       break;\n@@ -615,6 +620,20 @@ pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_delete_expression (pp, t);\n       break;\n       \n+    case SIZEOF_EXPR:\n+    case ALIGNOF_EXPR:\n+      pp_cxx_identifier (pp, code == SIZEOF_EXPR ? \"sizeof\" : \"__alignof__\");\n+      pp_cxx_whitespace (pp);\n+      if (TYPE_P (TREE_OPERAND (t, 0)))\n+\t{\n+\t  pp_cxx_left_paren (pp);\n+\t  pp_cxx_type_id (pp, TREE_OPERAND (t, 0));\n+\t  pp_cxx_right_paren (pp);\n+\t}\n+      else\n+\tpp_unary_expression (pp, TREE_OPERAND (t, 0));\n+      break;\n+\n     default:\n       pp_c_unary_expression (pp_c_base (pp), t);\n       break;\n@@ -859,6 +878,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case TYPEID_EXPR:\n     case PSEUDO_DTOR_EXPR:\n     case AGGR_INIT_EXPR:\n+    case ARROW_EXPR:\n       pp_cxx_postfix_expression (pp, t);\n       break;\n \n@@ -872,6 +892,11 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_delete_expression (pp, t);\n       break;\n \n+    case SIZEOF_EXPR:\n+    case ALIGNOF_EXPR:\n+      pp_cxx_unary_expression (pp, t);\n+      break;\n+\n     case CAST_EXPR:\n       pp_cxx_cast_expression (pp, t);\n       break;"}, {"sha": "28295767df6639cad07e6bce7b3eb9b10f428fbc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a0866432efadc888d6a65651943b89e2ae6eb0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=03a0866432efadc888d6a65651943b89e2ae6eb0", "patch": "@@ -1240,7 +1240,9 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n       value = size_one_node;\n     }\n   else\n-    value = c_sizeof_or_alignof_type (complete_type (type), op, complain);\n+    value = c_sizeof_or_alignof_type (complete_type (type),\n+\t\t\t\t      op == SIZEOF_EXPR,\n+\t\t\t\t      complain);\n \n   return value;\n }"}]}