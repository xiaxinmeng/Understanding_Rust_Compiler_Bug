{"sha": "ec08cf0a394af90602849cd0688b3093ead8e6b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwOGNmMGEzOTRhZjkwNjAyODQ5Y2QwNjg4YjMwOTNlYWQ4ZTZiMA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-26T03:24:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-26T03:24:03Z"}, "message": "(float*, fix*): Rewrite to match hardware...\n\n(float*, fix*): Rewrite to match hardware; take/put\ninteger input/output from/to fp register instead of memory or\ngeneral register.  Delete 6 now obsolete combiner patterns.\n\nFrom-SVN: r1957", "tree": {"sha": "08ce128bd1beff8863923b88989e7399f2c09fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ce128bd1beff8863923b88989e7399f2c09fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec08cf0a394af90602849cd0688b3093ead8e6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec08cf0a394af90602849cd0688b3093ead8e6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec08cf0a394af90602849cd0688b3093ead8e6b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec08cf0a394af90602849cd0688b3093ead8e6b0/comments", "author": null, "committer": null, "parents": [{"sha": "5655f8855e23e1adf4a0e9cf61aee511e6936dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5655f8855e23e1adf4a0e9cf61aee511e6936dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5655f8855e23e1adf4a0e9cf61aee511e6936dd0"}], "stats": {"total": 231, "additions": 24, "deletions": 207}, "files": [{"sha": "8119a87429a8e7fa3344a624a0b611f836d00e5b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 24, "deletions": 207, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec08cf0a394af90602849cd0688b3093ead8e6b0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec08cf0a394af90602849cd0688b3093ead8e6b0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ec08cf0a394af90602849cd0688b3093ead8e6b0", "patch": "@@ -1517,232 +1517,49 @@\n ;; Conversion between fixed point and floating point.\n \n (define_insn \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"rfm\")))]\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"f\")))]\n   \"\"\n-  \"* return output_floatsisf2 (operands);\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fitos %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatsidf2\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n-\t(float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"rfm\")))]\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"f\")))]\n   \"\"\n-  \"* return output_floatsidf2 (operands);\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fitod %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatsitf2\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"=f\")\n-\t(float:TF (match_operand:SI 1 \"nonimmediate_operand\" \"rfm\")))]\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(float:TF (match_operand:SI 1 \"register_operand\" \"f\")))]\n   \"\"\n-  \"* return output_floatsitf2 (operands);\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fitox %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n ;; Convert a float to an actual integer.\n ;; Truncation is performed as part of the conversion.\n \n (define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\"))))\n-   (clobber (match_scratch:SF 2 \"=&f\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n   \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fstoi %1,%2\\\", operands);\n-  else\n-    output_asm_insn (\\\"ld %1,%2\\;fstoi %2,%2\\\", operands);\n-  if (GET_CODE (operands[0]) == MEM)\n-    return \\\"st %2,%0\\\";\n-  else\n-    return \\\"st %2,[%%fp-4]\\;ld [%%fp-4],%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fstoi %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"general_operand\" \"fm\"))))\n-   (clobber (match_scratch:DF 2 \"=&f\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n+\t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n   \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fdtoi %1,%2\\\", operands);\n-  else\n-    {\n-      rtx xoperands[3];\n-      xoperands[0] = operands[2];\n-      xoperands[1] = operands[1];\n-      output_asm_insn (output_fp_move_double (xoperands), xoperands);\n-      output_asm_insn (\\\"fdtoi %2,%2\\\", operands);\n-    }\n-  if (GET_CODE (operands[0]) == MEM)\n-    return \\\"st %2,%0\\\";\n-  else\n-    return \\\"st %2,[%%fp-4]\\;ld [%%fp-4],%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fdtoi %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_trunctfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:TF (match_operand:TF 1 \"general_operand\" \"fm\"))))\n-   (clobber (match_scratch:DF 2 \"=&f\"))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fqtoi %1,%2\\\", operands);\n-  else\n-    {\n-      rtx xoperands[3];\n-      xoperands[0] = operands[2];\n-      xoperands[1] = operands[1];\n-      output_asm_insn (output_fp_move_quad (xoperands), xoperands);\n-      output_asm_insn (\\\"fqtoi %2,%2\\\", operands);\n-    }\n-  if (GET_CODE (operands[0]) == MEM)\n-    return \\\"st %2,%0\\\";\n-  else\n-    return \\\"st %2,[%%fp-4]\\;ld [%%fp-4],%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n-\n-;; Allow combiner to combine a fix_trunctfsi2 with a floatsitf2\n-;; This eliminates 2 useless instructions.\n-;; The first one matches if the fixed result is needed.  The second one\n-;; matches if the fixed result is not needed.\n-\n-(define_insn \"\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"=f\")\n-\t(float:TF (fix:SI (fix:TF (match_operand:TF 1 \"general_operand\" \"fm\")))))\n-   (set (match_operand:SI 2 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:TF (match_dup 1))))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fqtoi %1,%0\\\", operands);\n-  else\n-    {\n-      output_asm_insn (output_fp_move_quad (operands), operands);\n-      output_asm_insn (\\\"fqtoi %0,%0\\\", operands);\n-    }\n-  if (GET_CODE (operands[2]) == MEM)\n-    return \\\"st %0,%2\\;fitoq %0,%0\\\";\n-  else\n-    return \\\"st %0,[%%fp-4]\\;fitoq %0,%0\\;ld [%%fp-4],%2\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"5\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:TF 0 \"general_operand\" \"=f\")\n-\t(float:TF (fix:SI (fix:TF (match_operand:TF 1 \"general_operand\" \"fm\")))))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fqtoi %1,%0\\\", operands);\n-  else\n-    {\n-      output_asm_insn (output_fp_move_quad (operands), operands);\n-      output_asm_insn (\\\"fqtoi %0,%0\\\", operands);\n-    }\n-  return \\\"fitoq %0,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n-\n-;; Allow combiner to combine a fix_truncdfsi2 with a floatsidf2\n-;; This eliminates 2 useless instructions.\n-;; The first one matches if the fixed result is needed.  The second one\n-;; matches if the fixed result is not needed.\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n-\t(float:DF (fix:SI (fix:DF (match_operand:DF 1 \"general_operand\" \"fm\")))))\n-   (set (match_operand:SI 2 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:DF (match_dup 1))))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fdtoi %1,%0\\\", operands);\n-  else\n-    {\n-      output_asm_insn (output_fp_move_double (operands), operands);\n-      output_asm_insn (\\\"fdtoi %0,%0\\\", operands);\n-    }\n-  if (GET_CODE (operands[2]) == MEM)\n-    return \\\"st %0,%2\\;fitod %0,%0\\\";\n-  else\n-    return \\\"st %0,[%%fp-4]\\;fitod %0,%0\\;ld [%%fp-4],%2\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"5\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=f\")\n-\t(float:DF (fix:SI (fix:DF (match_operand:DF 1 \"general_operand\" \"fm\")))))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fdtoi %1,%0\\\", operands);\n-  else\n-    {\n-      output_asm_insn (output_fp_move_double (operands), operands);\n-      output_asm_insn (\\\"fdtoi %0,%0\\\", operands);\n-    }\n-  return \\\"fitod %0,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n-\n-;; Allow combiner to combine a fix_truncsfsi2 with a floatsisf2\n-;; This eliminates 2 useless instructions.\n-;; The first one matches if the fixed result is needed.  The second one\n-;; matches if the fixed result is not needed.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n-\t(float:SF (fix:SI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\")))))\n-   (set (match_operand:SI 2 \"general_operand\" \"=rm\")\n-\t(fix:SI (fix:SF (match_dup 1))))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n+\t(fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n   \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fstoi %1,%0\\\", operands);\n-  else\n-    output_asm_insn (\\\"ld %1,%0\\;fstoi %0,%0\\\", operands);\n-  if (GET_CODE (operands[2]) == MEM)\n-    return \\\"st %0,%2\\;fitos %0,%0\\\";\n-  else\n-    return \\\"st %0,[%%fp-4]\\;fitos %0,%0\\;ld [%%fp-4],%2\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"5\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n-\t(float:SF (fix:SI (fix:SF (match_operand:SF 1 \"general_operand\" \"fm\")))))]\n-  \"\"\n-  \"*\n-{\n-  if (FP_REG_P (operands[1]))\n-    output_asm_insn (\\\"fstoi %1,%0\\\", operands);\n-  else\n-    output_asm_insn (\\\"ld %1,%0\\;fstoi %0,%0\\\", operands);\n-  return \\\"fitos %0,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"length\" \"3\")])\n+  \"fqtoi %1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \f\n ;;- arithmetic instructions\n "}]}