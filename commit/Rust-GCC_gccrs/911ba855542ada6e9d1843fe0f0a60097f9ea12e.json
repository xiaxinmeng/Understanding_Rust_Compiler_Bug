{"sha": "911ba855542ada6e9d1843fe0f0a60097f9ea12e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExYmE4NTU1NDJhZGE2ZTlkMTg0M2ZlMGYwYTYwMDk3ZjllYTEyZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-28T09:13:41Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-28T09:13:41Z"}, "message": "re PR target/52692 ([avr]: Add support for avr-specific built-ins + LTO)\n\ngcc/\n\tPR target/52692\n\t* config/avr/avr.c (TARGET_BUILTIN_DECL): New define.\n\t(avr_builtin_decl): New static function.\n\t(struct avr_builtin_description, avr_bdesc): Move up.\n\tAdd GTY marker. Add field fndecl. Remove redundant field id.\n\t(avr_init_builtins): Initialize avr_bdesc[ID].fndecl.\n\t(avr_expand_builtin): Code cleanup because .id is removed.\n\t\ntestsuite/\n\tPR target/52692\n\t* gcc.target/avr/torture/builtins-2.c: New test.\n\nFrom-SVN: r185910", "tree": {"sha": "eca9f84c5da970bc783eda77d194a8f203b22d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca9f84c5da970bc783eda77d194a8f203b22d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/911ba855542ada6e9d1843fe0f0a60097f9ea12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911ba855542ada6e9d1843fe0f0a60097f9ea12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911ba855542ada6e9d1843fe0f0a60097f9ea12e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911ba855542ada6e9d1843fe0f0a60097f9ea12e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fd6378ef41d6b6dd820036b5a100d99368060aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd6378ef41d6b6dd820036b5a100d99368060aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd6378ef41d6b6dd820036b5a100d99368060aa"}], "stats": {"total": 166, "additions": 122, "deletions": 44}, "files": [{"sha": "2491a8cdf16d0b019235f1cda946325d48eebf48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=911ba855542ada6e9d1843fe0f0a60097f9ea12e", "patch": "@@ -1,3 +1,13 @@\n+2012-03-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52692\n+\t* config/avr/avr.c (TARGET_BUILTIN_DECL): New define.\n+\t(avr_builtin_decl): New static function.\n+\t(struct avr_builtin_description, avr_bdesc): Move up.\n+\tAdd GTY marker. Add field fndecl. Remove redundant field id.\n+\t(avr_init_builtins): Initialize avr_bdesc[ID].fndecl.\n+\t(avr_expand_builtin): Code cleanup because .id is removed.\n+\n 2012-03-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/52737"}, {"sha": "c25f8983a79002887df64e65d605e691ce147496", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 61, "deletions": 44, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=911ba855542ada6e9d1843fe0f0a60097f9ea12e", "patch": "@@ -10285,6 +10285,42 @@ enum avr_builtin_id\n     AVR_BUILTIN_COUNT\n   };\n \n+struct GTY(()) avr_builtin_description\n+{\n+  enum insn_code icode;\n+  const char *name;\n+  int n_args;\n+  tree fndecl;\n+};\n+\n+\n+/* Notice that avr_bdesc[] and avr_builtin_id are initialized in such a way\n+   that a built-in's ID can be used to access the built-in by means of\n+   avr_bdesc[ID]  */\n+\n+static GTY(()) struct avr_builtin_description\n+avr_bdesc[AVR_BUILTIN_COUNT] =\n+  {\n+\n+#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)      \\\n+    { ICODE, NAME, N_ARGS, NULL_TREE },\n+#include \"builtins.def\"  \n+#undef DEF_BUILTIN\n+  };\n+\n+\n+/* Implement `TARGET_BUILTIN_DECL'.  */\n+\n+static tree\n+avr_builtin_decl (unsigned id, bool initialize_p ATTRIBUTE_UNUSED)\n+{\n+  if (id < AVR_BUILTIN_COUNT)\n+    return avr_bdesc[id].fndecl;\n+\n+  return error_mark_node;\n+}\n+\n+\n static void\n avr_init_builtin_int24 (void)\n {\n@@ -10295,6 +10331,7 @@ avr_init_builtin_int24 (void)\n   (*lang_hooks.types.register_builtin_type) (uint24_type, \"__uint24\");\n }\n \n+\n /* Implement `TARGET_INIT_BUILTINS' */\n /* Set up all builtin functions for this target.  */\n \n@@ -10348,35 +10385,16 @@ avr_init_builtins (void)\n                                   NULL);\n \n #define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE)                       \\\n-  add_builtin_function (NAME, TYPE, ID, BUILT_IN_MD, NULL, NULL_TREE);\n+  gcc_assert (ID < AVR_BUILTIN_COUNT);                                  \\\n+  avr_bdesc[ID].fndecl                                                  \\\n+    = add_builtin_function (NAME, TYPE, ID, BUILT_IN_MD, NULL, NULL_TREE);\n #include \"builtins.def\"  \n #undef DEF_BUILTIN\n   \n   avr_init_builtin_int24 ();\n }\n \n \n-struct avr_builtin_description\n-{\n-  enum insn_code icode;\n-  const char *name;\n-  enum avr_builtin_id id;\n-  int n_args;\n-};\n-\n-static const struct avr_builtin_description\n-avr_bdesc[] =\n-  {\n-\n-#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)      \\\n-    { ICODE, NAME, ID, N_ARGS },\n-#include \"builtins.def\"  \n-#undef DEF_BUILTIN\n-\n-    { CODE_FOR_nothing, NULL, 0, -1 }\n-  };\n-\n-\n /* Subroutine of avr_expand_builtin to take care of unop insns.  */\n \n static rtx\n@@ -10545,6 +10563,7 @@ avr_expand_triop_builtin (enum insn_code icode, tree exp, rtx target)\n }\n \n \n+/* Implement `TARGET_EXPAND_BUILTIN'.  */\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -10557,13 +10576,15 @@ avr_expand_builtin (tree exp, rtx target,\n                     enum machine_mode mode ATTRIBUTE_UNUSED,\n                     int ignore ATTRIBUTE_UNUSED)\n {\n-  size_t i;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   const char* bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n   unsigned int id = DECL_FUNCTION_CODE (fndecl);\n+  const struct avr_builtin_description *d = &avr_bdesc[id];\n   tree arg0;\n   rtx op0;\n \n+  gcc_assert (id < AVR_BUILTIN_COUNT);\n+\n   switch (id)\n     {\n     case AVR_BUILTIN_NOP:\n@@ -10597,29 +10618,22 @@ avr_expand_builtin (tree exp, rtx target,\n       }\n     }\n \n-  for (i = 0; avr_bdesc[i].name; i++)\n+  /* No special treatment needed: vanilla expand.  */\n+  \n+  switch (d->n_args)\n     {\n-      const struct avr_builtin_description *d = &avr_bdesc[i];\n+    case 0:\n+      emit_insn ((GEN_FCN (d->icode)) (target));\n+      return 0;\n       \n-      if (d->id == id)\n-        switch (d->n_args)\n-          {\n-          case 0:\n-            emit_insn ((GEN_FCN (d->icode)) (target));\n-            return 0;\n-            \n-          case 1:\n-            return avr_expand_unop_builtin (d->icode, exp, target);\n-            \n-          case 2:\n-            return avr_expand_binop_builtin (d->icode, exp, target);\n-            \n-          case 3:\n-            return avr_expand_triop_builtin (d->icode, exp, target);\n-            \n-          default:\n-            gcc_unreachable();\n-        }\n+    case 1:\n+      return avr_expand_unop_builtin (d->icode, exp, target);\n+      \n+    case 2:\n+      return avr_expand_binop_builtin (d->icode, exp, target);\n+      \n+    case 3:\n+      return avr_expand_triop_builtin (d->icode, exp, target);\n     }\n   \n   gcc_unreachable ();\n@@ -10878,6 +10892,9 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS avr_init_builtins\n \n+#undef  TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL avr_builtin_decl\n+\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN avr_expand_builtin\n "}, {"sha": "d4d2bc170e88eb1cad5563645bbf5fa41c954d00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=911ba855542ada6e9d1843fe0f0a60097f9ea12e", "patch": "@@ -1,3 +1,8 @@\n+2012-03-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52692\n+\t* gcc.target/avr/torture/builtins-2.c: New test.\n+\n 2012-03-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52736"}, {"sha": "ae207d9a939d0b4add4b93286ca63d9bb496421f", "filename": "gcc/testsuite/gcc.target/avr/torture/builtins-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911ba855542ada6e9d1843fe0f0a60097f9ea12e/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-2.c?ref=911ba855542ada6e9d1843fe0f0a60097f9ea12e", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-options \"-std=gnu99 -Tavr51-flash1.x\" } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include \"../progmem.h\"\n+\n+int volatile a;\n+\n+void f1 (void) \n+{\n+  __builtin_avr_sei (); \n+  __builtin_avr_cli (); \n+  __builtin_avr_wdr (); \n+  __builtin_avr_sleep (); \n+  __builtin_avr_nop ();\n+  a = __builtin_avr_swap (a);\n+  a = __builtin_avr_fmul (1,a);\n+  a = __builtin_avr_fmuls (1,a);\n+  a = __builtin_avr_fmulsu (1,a);\n+  a = __builtin_avr_insert_bits (0x1f2f5364, a, a);\n+}\n+\n+const __flash char c0 = 1;\n+const __flash1 char c1 = 1;\n+\n+int main (void) \n+{\n+  const __memx void *p;\n+\n+  f1();\n+  __builtin_avr_delay_cycles (1000);\n+\n+  p = &c0;\n+  if (__builtin_avr_flash_segment (p) != 0)\n+    abort();\n+\n+  p = &c1;\n+  if (__builtin_avr_flash_segment (p) != 1)\n+    abort();\n+\n+  if (__builtin_avr_flash_segment (\"p\") != -1)\n+    abort();\n+\n+  exit (0);\n+  return 0; \n+}"}]}