{"sha": "6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE2NWNmNmI5YjRkZmI2ZjllZjU0OWM1YTY5ZTIwMWViNWZhOTY1Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-24T10:29:28Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-30T09:28:51Z"}, "message": "Replace evrp use in loop versioning with ranger.\n\nThis patch replaces the evrp_range_analyzer in the loop versioning code\nwith an on-demand ranger.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-loop-versioning.cc (lv_dom_walker::lv_dom_walker): Remove\n\tuse of m_range_analyzer.\n\t(loop_versioning::lv_dom_walker::before_dom_children): Same.\n\t(loop_versioning::lv_dom_walker::after_dom_children): Remove.\n\t(loop_versioning::prune_loop_conditions): Replace vr_values use\n\twith range_query interface.\n\t(pass_loop_versioning::execute): Use ranger.", "tree": {"sha": "bf9e62945d71e1e96b2efe465e441133b40b276c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9e62945d71e1e96b2efe465e441133b40b276c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ab4e3be2d92b1ff671d58418d852195f10dd20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ab4e3be2d92b1ff671d58418d852195f10dd20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ab4e3be2d92b1ff671d58418d852195f10dd20"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "15e0803dc299bbe1cbf38d3c0da96bfabbb6f34f", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=6165cf6b9b4dfb6f9ef549c5a69e201eb5fa965f", "patch": "@@ -30,19 +30,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop.h\"\n #include \"ssa.h\"\n #include \"tree-scalar-evolution.h\"\n-#include \"tree-chrec.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"fold-const.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-inline.h\"\n #include \"domwalk.h\"\n-#include \"alloc-pool.h\"\n-#include \"vr-values.h\"\n-#include \"gimple-ssa-evrp-analyze.h\"\n #include \"tree-vectorizer.h\"\n #include \"omp-general.h\"\n #include \"predict.h\"\n #include \"tree-into-ssa.h\"\n+#include \"gimple-range.h\"\n+#include \"tree-cfg.h\"\n \n namespace {\n \n@@ -261,14 +259,10 @@ class loop_versioning\n     lv_dom_walker (loop_versioning &);\n \n     edge before_dom_children (basic_block) FINAL OVERRIDE;\n-    void after_dom_children (basic_block) FINAL OVERRIDE;\n \n   private:\n     /* The parent pass.  */\n     loop_versioning &m_lv;\n-\n-    /* Used to build context-dependent range information.  */\n-    evrp_range_analyzer m_range_analyzer;\n   };\n \n   /* Used to simplify statements based on conditions that are established\n@@ -308,7 +302,7 @@ class loop_versioning\n   bool analyze_block (basic_block);\n   bool analyze_blocks ();\n \n-  void prune_loop_conditions (class loop *, vr_values *);\n+  void prune_loop_conditions (class loop *);\n   bool prune_conditions ();\n \n   void merge_loop_info (class loop *, class loop *);\n@@ -500,7 +494,7 @@ loop_info::worth_versioning_p () const\n }\n \n loop_versioning::lv_dom_walker::lv_dom_walker (loop_versioning &lv)\n-  : dom_walker (CDI_DOMINATORS), m_lv (lv), m_range_analyzer (false)\n+  : dom_walker (CDI_DOMINATORS), m_lv (lv)\n {\n }\n \n@@ -509,26 +503,12 @@ loop_versioning::lv_dom_walker::lv_dom_walker (loop_versioning &lv)\n edge\n loop_versioning::lv_dom_walker::before_dom_children (basic_block bb)\n {\n-  m_range_analyzer.enter (bb);\n-\n   if (bb == bb->loop_father->header)\n-    m_lv.prune_loop_conditions (bb->loop_father, &m_range_analyzer);\n-\n-  for (gimple_stmt_iterator si = gsi_start_bb (bb); !gsi_end_p (si);\n-       gsi_next (&si))\n-    m_range_analyzer.record_ranges_from_stmt (gsi_stmt (si), false);\n+    m_lv.prune_loop_conditions (bb->loop_father);\n \n   return NULL;\n }\n \n-/* Process BB after processing the blocks it dominates.  */\n-\n-void\n-loop_versioning::lv_dom_walker::after_dom_children (basic_block bb)\n-{\n-  m_range_analyzer.leave (bb);\n-}\n-\n /* Decide whether to replace VAL with a new value in a versioned loop.\n    Return the new value if so, otherwise return null.  */\n \n@@ -1482,18 +1462,21 @@ loop_versioning::analyze_blocks ()\n    LOOP.  */\n \n void\n-loop_versioning::prune_loop_conditions (class loop *loop, vr_values *vrs)\n+loop_versioning::prune_loop_conditions (class loop *loop)\n {\n   loop_info &li = get_loop_info (loop);\n \n   int to_remove = -1;\n   bitmap_iterator bi;\n   unsigned int i;\n+  int_range_max r;\n   EXECUTE_IF_SET_IN_BITMAP (&li.unity_names, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n-      const value_range_equiv *vr = vrs->get_value_range (name);\n-      if (vr && !vr->may_contain_p (build_one_cst (TREE_TYPE (name))))\n+      gimple *stmt = first_stmt (loop->header);\n+\n+      if (get_range_query (cfun)->range_of_expr (r, name, stmt)\n+\t  && !r.contains_p (build_one_cst (TREE_TYPE (name))))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, find_loop_location (loop),\n@@ -1808,7 +1791,10 @@ pass_loop_versioning::execute (function *fn)\n   if (number_of_loops (fn) <= 1)\n     return 0;\n \n-  return loop_versioning (fn).run ();\n+  enable_ranger (fn);\n+  unsigned int ret = loop_versioning (fn).run ();\n+  disable_ranger (fn);\n+  return ret;\n }\n \n } // anon namespace"}]}