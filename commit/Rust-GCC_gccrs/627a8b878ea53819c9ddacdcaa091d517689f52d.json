{"sha": "627a8b878ea53819c9ddacdcaa091d517689f52d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3YThiODc4ZWE1MzgxOWM5ZGRhY2RjYWEwOTFkNTE3Njg5ZjUyZA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-02T20:59:31Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-02T20:59:31Z"}, "message": "Makefile.am: Add new classes\n\n\t* Makefile.am: Add new classes\n\t(core_java_source_files): CharSequence\n\t(ordinary_java_source_files): Authenticator, PasswordAuthentication\n\t* Makefile.in: regenerate\n\t* gcj/javaprims.h: ditto\n\t* java/lang/CharSequence: new class from Classpath\n\t* java/lang/String.java: implements CharSequence\n\t(subSequence (int,int)): new method\n\t* java/lang/SubString.java: implements CharSequence\n\t(subSequence (int,int)): new method\n\tremerge comments with Classpath\n\t* java/net/Authenticator.java: new class from Classpath\n\t* java/net/PasswordAuthentication.java: ditto\n\nFrom-SVN: r45969", "tree": {"sha": "3ef0582a181a049f71a29b6428f4483b678b7089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef0582a181a049f71a29b6428f4483b678b7089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/627a8b878ea53819c9ddacdcaa091d517689f52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627a8b878ea53819c9ddacdcaa091d517689f52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627a8b878ea53819c9ddacdcaa091d517689f52d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627a8b878ea53819c9ddacdcaa091d517689f52d/comments", "author": null, "committer": null, "parents": [{"sha": "da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5c0f6ef50f0a1a511191c9e2052bd63aee12c4"}], "stats": {"total": 632, "additions": 575, "deletions": 57}, "files": [{"sha": "8c1ce8707616fdcacf4cbaa2e5113e3ed9d473a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -1,3 +1,19 @@\n+2001-10-01  Mark Wielaard  <mark@klomp.org>\n+\n+\t* Makefile.am: Add new classes\n+\t(core_java_source_files): CharSequence\n+\t(ordinary_java_source_files): Authenticator, PasswordAuthentication\n+\t* Makefile.in: regenerate\n+\t* gcj/javaprims.h: ditto\n+\t* java/lang/CharSequence: new class from Classpath\n+\t* java/lang/String.java: implements CharSequence\n+\t(subSequence (int,int)): new method\n+\t* java/lang/SubString.java: implements CharSequence\n+\t(subSequence (int,int)): new method\n+\tremerge comments with Classpath\n+\t* java/net/Authenticator.java: new class from Classpath\n+\t* java/net/PasswordAuthentication.java: ditto\n+\n 2001-10-01  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj/javaprims.h: Rebuilt class list."}, {"sha": "7eeb6d299f698528b518b87f5028814f43f335e3", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -914,6 +914,7 @@ java/lang/ArrayStoreException.java \\\n java/lang/Boolean.java \\\n java/lang/Byte.java \\\n java/lang/Character.java \\\n+java/lang/CharSequence.java \\\n java/lang/ClassCastException.java \\\n java/lang/ClassCircularityError.java \\\n java/lang/ClassFormatError.java\t\\\n@@ -1179,6 +1180,7 @@ java/lang/reflect/Modifier.java\t\\\n java/lang/reflect/ReflectPermission.java \\\n java/math/BigDecimal.java \\\n java/math/BigInteger.java \\\n+java/net/Authenticator.java \\\n java/net/BindException.java \\\n java/net/ConnectException.java \\\n java/net/ContentHandler.java \\\n@@ -1194,6 +1196,7 @@ java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n java/net/NetPermission.java \\\n java/net/NoRouteToHostException.java \\\n+java/net/PasswordAuthentication.java \\\n java/net/PlainDatagramSocketImpl.java \\\n java/net/PlainSocketImpl.java \\\n java/net/ProtocolException.java\t\\"}, {"sha": "1b8b9b32e466cd7b70e31bab6e9fe5439d39d05e", "filename": "libjava/Makefile.in", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -123,38 +123,26 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -174,10 +162,8 @@ AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -246,8 +232,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -660,6 +645,7 @@ java/lang/ArrayStoreException.java \\\n java/lang/Boolean.java \\\n java/lang/Byte.java \\\n java/lang/Character.java \\\n+java/lang/CharSequence.java \\\n java/lang/ClassCastException.java \\\n java/lang/ClassCircularityError.java \\\n java/lang/ClassFormatError.java\t\\\n@@ -920,6 +906,7 @@ java/lang/reflect/Modifier.java\t\\\n java/lang/reflect/ReflectPermission.java \\\n java/math/BigDecimal.java \\\n java/math/BigInteger.java \\\n+java/net/Authenticator.java \\\n java/net/BindException.java \\\n java/net/ConnectException.java \\\n java/net/ContentHandler.java \\\n@@ -935,6 +922,7 @@ java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n java/net/NetPermission.java \\\n java/net/NoRouteToHostException.java \\\n+java/net/PasswordAuthentication.java \\\n java/net/PlainDatagramSocketImpl.java \\\n java/net/PlainSocketImpl.java \\\n java/net/ProtocolException.java\t\\\n@@ -1785,8 +1773,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/ArithmeticException.P \\\n .deps/java/lang/ArrayIndexOutOfBoundsException.P \\\n .deps/java/lang/ArrayStoreException.P .deps/java/lang/Boolean.P \\\n-.deps/java/lang/Byte.P .deps/java/lang/Character.P \\\n-.deps/java/lang/Class.P .deps/java/lang/ClassCastException.P \\\n+.deps/java/lang/Byte.P .deps/java/lang/CharSequence.P \\\n+.deps/java/lang/Character.P .deps/java/lang/Class.P \\\n+.deps/java/lang/ClassCastException.P \\\n .deps/java/lang/ClassCircularityError.P \\\n .deps/java/lang/ClassFormatError.P .deps/java/lang/ClassLoader.P \\\n .deps/java/lang/ClassNotFoundException.P \\\n@@ -1873,14 +1862,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/w_log.P .deps/java/lang/w_pow.P \\\n .deps/java/lang/w_remainder.P .deps/java/lang/w_sqrt.P \\\n .deps/java/math/BigDecimal.P .deps/java/math/BigInteger.P \\\n-.deps/java/net/BindException.P .deps/java/net/ConnectException.P \\\n-.deps/java/net/ContentHandler.P .deps/java/net/ContentHandlerFactory.P \\\n-.deps/java/net/DatagramPacket.P .deps/java/net/DatagramSocket.P \\\n-.deps/java/net/DatagramSocketImpl.P .deps/java/net/FileNameMap.P \\\n-.deps/java/net/HttpURLConnection.P .deps/java/net/InetAddress.P \\\n-.deps/java/net/JarURLConnection.P \\\n+.deps/java/net/Authenticator.P .deps/java/net/BindException.P \\\n+.deps/java/net/ConnectException.P .deps/java/net/ContentHandler.P \\\n+.deps/java/net/ContentHandlerFactory.P .deps/java/net/DatagramPacket.P \\\n+.deps/java/net/DatagramSocket.P .deps/java/net/DatagramSocketImpl.P \\\n+.deps/java/net/FileNameMap.P .deps/java/net/HttpURLConnection.P \\\n+.deps/java/net/InetAddress.P .deps/java/net/JarURLConnection.P \\\n .deps/java/net/MalformedURLException.P .deps/java/net/MulticastSocket.P \\\n .deps/java/net/NetPermission.P .deps/java/net/NoRouteToHostException.P \\\n+.deps/java/net/PasswordAuthentication.P \\\n .deps/java/net/PlainDatagramSocketImpl.P \\\n .deps/java/net/PlainSocketImpl.P .deps/java/net/ProtocolException.P \\\n .deps/java/net/ServerSocket.P .deps/java/net/Socket.P \\\n@@ -2493,7 +2483,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "aa7c51e8e02497b4f6b223585b2f0caaf752a098", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -134,6 +134,7 @@ extern \"Java\"\n       class Boolean;\n       class Byte;\n       class CPlusPlusDemangler;\n+      class CharSequence;\n       class Character;\n       class Character$Subset;\n       class Character$UnicodeBlock;"}, {"sha": "8ba677e063a432f32cecac9aa297bc932147ba5c", "filename": "libjava/java/lang/CharSequence.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FCharSequence.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FCharSequence.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharSequence.java?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -0,0 +1,80 @@\n+/* java.lang.CharSequence -- Anything that has an indexed sequence of chars\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.lang;\n+\n+/**\n+ * General functions on a sequence of chars. This interface is implemented\n+ * by <code>String</code>, <code>StringBuffer</code> and\n+ * <code>CharBuffer</code> to give a uniform way to get chars at a certain\n+ * index, the number of characters in the sequence and a subrange of the\n+ * chars. Indexes start at 0 and the last index is <code>length()-1</code>.\n+ * <p>\n+ * Even when classes implement this interface they are not always\n+ * exchangeble because they might implement their compare, equals or hash\n+ * function differently. This means that in general one should not use a\n+ * <code>CharSequence</code> as keys in collections since two sequences\n+ * with the same chars at the same indexes with the same length might not\n+ * have the same hash code, be equal or be comparable since the are\n+ * represented by different classes.\n+ *\n+ * @author Mark Wielaard (mark@klomp.org)\n+ *\n+ * @since 1.4\n+ */\n+\n+public interface CharSequence {\n+\n+    /**\n+     * Returns the character at the given index.\n+     *\n+     * @exception IndexOutOfBoundsException when <code>i &lt; 0</code> or\n+     * <code>i &gt; length()-1</code>.\n+     */\n+    char charAt(int i);\n+\n+    /**\n+     * Returns the length of the sequence.\n+     */\n+    int length();\n+\n+    /**\n+     * Returns a new <code>CharSequence</char> of the indicated range.\n+     *\n+     * @exception IndexOutOfBoundsException when <code>begin &lt; 0</code>,\n+     *         <code>end &lt; 0</code>, <code>end &gt; length()</code> or\n+     *         <code>begin &gt; end</code>\n+     */\n+    CharSequence subSequence(int begin, int end);\n+\n+    /**\n+     * Returns the complete <code>CharSequence</code> as a <code>String</code>.\n+     * Classes that implement this interface should return a <code>String</code>\n+     * which contains only the characters in the sequence in the correct order.\n+     */\n+    String toString();\n+}"}, {"sha": "8dadfb59cc0d04fd1b2c7d021851ab7f3a047255", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -22,7 +22,7 @@\n  * Status:  Complete to 1.3.\n  */\n \n-public final class String implements Serializable, Comparable\n+public final class String implements Serializable, Comparable, CharSequence\n {\n   private Object data;\n   private int boffset; // Note this is a byte offset - don't use in Java code!\n@@ -297,6 +297,28 @@ public int lastIndexOf (String str, int fromIndex)\n       }\n   }\n \n+  /**\n+   * Creates a substring of this String, starting at a specified index\n+   * and ending at one character before a specified index.\n+   * <p>\n+   * To implement <code>CharSequence</code>.\n+   * Calls <code>substring(beginIndex, endIndex)</code>.\n+   *\n+   * @param beginIndex index to start substring (base 0)\n+   * @param endIndex index after the last character to be \n+   *   copied into the substring\n+   * \n+   * @return new String which is a substring of this String\n+   *\n+   * @exception StringIndexOutOfBoundsException \n+   *   if (beginIndex < 0 || endIndex > this.length() || beginIndex > endIndex)\n+   */\n+  public CharSequence subSequence(int beginIndex, int endIndex)\n+    throws IndexOutOfBoundsException\n+  {\n+    return substring(beginIndex, endIndex);\n+  }\n+\n   public String substring (int beginIndex)\n   {\n     return substring (beginIndex, count);"}, {"sha": "38978b1d9bd01ead009fbc43755994beca83996a", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -1,21 +1,32 @@\n-// StringBuffer.java - Growable strings.\n-\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+/* StringBuffer.java -- Growable strings\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.lang;\n import java.io.Serializable;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 23, 1998.  \n- */\n-\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * Updated using online JDK 1.2 docs.\n  * Believed complete and correct to JDK 1.2.\n@@ -57,7 +68,7 @@\n  * @author Tom Tromey\n  * @see java.lang.String\n  */\n-public final class StringBuffer implements Serializable\n+public final class StringBuffer implements Serializable, CharSequence\n {\n   /** Append the <code>String</code> value of the argument to this <code>StringBuffer</code>.\n    *  Uses <code>String.valueOf()</code> to convert to\n@@ -198,7 +209,7 @@ public int capacity ()\n    *  @param index the index of the character to get, starting at 0.\n    *  @return the character at the specified index.\n    *  @exception IndexOutOfBoundsException if the desired character index\n-   *             is not between 0 and length() - 1 (inclusive).\n+   *             is negative or greater then length() - 1.\n    */\n   public synchronized char charAt (int index)\n   {\n@@ -653,6 +664,28 @@ public synchronized String substring (int beginIndex, int endIndex)\n     return new String (value, beginIndex, endIndex - beginIndex);\n   }\n \n+  /**\n+   * Creates a substring of this StringBuffer, starting at a specified index\n+   * and ending at one character before a specified index.\n+   * <p>\n+   * To implement <code>CharSequence</code>.\n+   * Calls <code>substring(beginIndex, endIndex)</code>.\n+   *\n+   * @param beginIndex index to start substring (base 0)\n+   * @param endIndex index after the last character to be \n+   *   copied into the substring\n+   * \n+   * @return new String which is a substring of this StringBuffer\n+   *\n+   * @exception StringIndexOutOfBoundsException \n+   *   if (beginIndex < 0 || endIndex > this.length() || beginIndex > endIndex)\n+   */\n+  public CharSequence subSequence (int beginIndex, int endIndex) \n+  {\n+    return substring(beginIndex, endIndex);\n+  }\n+\n+\n   /** Convert this <code>StringBuffer</code> to a <code>String</code>.\n    *  @return the characters in this StringBuffer\n    */"}, {"sha": "315bfb0398155721a7d6ab49abedc865c74d0d6b", "filename": "libjava/java/net/Authenticator.java", "status": "added", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Fnet%2FAuthenticator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Fnet%2FAuthenticator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FAuthenticator.java?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -0,0 +1,269 @@\n+/* Authenticator.java -- Abstract class for obtaining authentication info\n+   Copyright (C) 1998,2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.net;\n+\n+/**\n+  * Sometimes a network operation (such as hitting a password protected\n+  * web site) will require authentication information in the form of a\n+  * username and password.  This abstract class provides a model for \n+  * obtaining that information.\n+  * <p>\n+  * To make use of this feature, a programmer must create a subclass of\n+  * Authenticator that knows how to obtain the necessary info.  An example\n+  * would be a class that popped up a dialog box to prompt the user.  \n+  * After creating an instance of that subclass, the static setDefault\n+  * method of this class is called to set up that instance as the object\n+  * to use on subsequent calls to obtain authorization.\n+  *\n+  * @since 1.2\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public abstract class Authenticator\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Class Variables\n+ */\n+\n+/**\n+  * This is the default Authenticator object to use for password requests\n+  */\n+private static Authenticator default_authenticator;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * InternetAddress of the site requesting authentication\n+  */\n+private InetAddress addr;\n+\n+/**\n+  * The port number of the site requesting authentication\n+  */\n+private int port;\n+\n+/**\n+  * The protocol name of the site requesting authentication\n+  */\n+private String protocol;\n+\n+/**\n+  * The prompt to display to the user when requesting authentication info\n+  */\n+private String prompt;\n+\n+/**\n+  * The authentication scheme in use\n+  */\n+private String scheme;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Class Methods\n+ */\n+\n+/**\n+  * This method sets the default <code>Authenticator</code> object (an \n+  * instance of a\n+  * subclass of <code>Authenticator</code>) to use when prompting the user for\n+  * information.  Note that this method checks to see if the caller is\n+  * allowed to set this value (the \"setDefaultAuthenticator\" permission)\n+  * and throws a <code>SecurityException</code> if it is not.\n+  *\n+  * @param def_auth The new default <code>Authenticator</code> object to use\n+  *\n+  * @exception SecurityException If the caller does not have permission \n+  * to perform this operation\n+  */ \n+public static void\n+setDefault(Authenticator def_auth)\n+{\n+  SecurityManager sm = System.getSecurityManager();\n+  if (sm != null)\n+    sm.checkPermission(new NetPermission(\"setDefaultAuthenticator\"));\n+\n+  default_authenticator = def_auth;\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * This method is called whenever a username and password for a given\n+  * network operation is required.  First, a security check is made to see\n+  * if the caller has the \"requestPasswordAuthentication\"\n+  * permission.  If not, the method thows an exception.  If there is no\n+  * default <code>Authenticator</code> object, the method then returns \n+  * <code>null</code>.  Otherwise, the default authenticators's instance \n+  * variables are initialized and it's <code>getPasswordAuthentication</code>\n+  *  method is called to get the actual authentication information to return.\n+  *\n+  * @param addr The address requesting authentication\n+  * @param port The port requesting authentication\n+  * @param protocol The protocol requesting authentication\n+  * @param prompt The prompt to display to the user when requesting \n+           authentication info\n+  * @param scheme The authentication scheme in use\n+  * \n+  * @return A <code>PasswordAuthentication</code> object with the user's \n+  *         authentication info.\n+  *\n+  * @exception SecurityException If the caller does not have permission to \n+  *         perform this operation\n+  */ \n+public static PasswordAuthentication\n+requestPasswordAuthentication(InetAddress addr, int port, String protocol,\n+                              String prompt, String scheme) \n+{\n+  SecurityManager sm = System.getSecurityManager();\n+  if (sm != null)\n+    sm.checkPermission(new NetPermission(\"requestPasswordAuthentication\"));\n+\n+  if (default_authenticator == null)\n+    return(null);\n+\n+  default_authenticator.addr = addr;\n+  default_authenticator.port = port;\n+  default_authenticator.protocol = protocol;\n+  default_authenticator.prompt = prompt;\n+  default_authenticator.scheme = scheme;\n+\n+  return(default_authenticator.getPasswordAuthentication());\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Default, no-argument constructor for subclasses to call.\n+  */\n+public\n+Authenticator()\n+{\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the address of the site that is requesting\n+  * authentication.\n+  *\n+  * @return The requesting site\n+  */\n+protected final InetAddress\n+getRequestingSite()\n+{\n+  return(addr);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the port of the site that is requesting \n+  * authentication.\n+  *\n+  * @return The requesting port\n+  */\n+protected final int\n+getRequestingPort()\n+{\n+  return(port);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the requesting protocol of the operation that is\n+  * requesting authentication\n+  *\n+  * @return The requesting protocol\n+  */\n+protected final String\n+getRequestingProtocol()\n+{\n+  return(protocol);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the prompt that should be used when requesting authentication \n+  * information from the user\n+  * \n+  * @return The user prompt\n+  */\n+protected final String\n+getRequestingPrompt()\n+{\n+  return(prompt);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the authentication scheme in use\n+  *\n+  * @return The authentication scheme\n+  */\n+protected final String\n+getRequestingScheme()\n+{\n+  return(scheme);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method is called whenever a request for authentication is made.  It\n+  * can call the other getXXX methods to determine the information relevant\n+  * to this request.  Subclasses should override this method, which returns\n+  * <code>null</code> by default.\n+  *\n+  * @return The PasswordAuthentication information\n+  */\n+protected PasswordAuthentication\n+getPasswordAuthentication()\n+{\n+  return(null);\n+}\n+\n+} // class Authenticator\n+"}, {"sha": "08ef6fad1ed9d2214c5d9824bc5312ed4df040fe", "filename": "libjava/java/net/PasswordAuthentication.java", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/627a8b878ea53819c9ddacdcaa091d517689f52d/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java?ref=627a8b878ea53819c9ddacdcaa091d517689f52d", "patch": "@@ -0,0 +1,104 @@\n+/* PasswordAuthentication.java -- Container class for username/password pairs\n+   Copyright (C) 1998,2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.net;\n+\n+/**\n+  * This class serves a container for username/password pairs.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public final class PasswordAuthentication\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * The username \n+  */\n+private String username;\n+\n+/**\n+  * The password\n+  */\n+private char[] password;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Creates a new PasswordAuthentication object from the specified username\n+  * and password.\n+  *\n+  * @param username The username for this object\n+  * @param password The password for this object\n+  */\n+public\n+PasswordAuthentication(String username, char[] password)\n+{\n+  this.username = username;\n+  this.password = password;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the username associated with this object\n+  *\n+  * @return The username\n+  */\n+public String\n+getUserName()\n+{\n+  return(username);\n+}\n+ \n+/*************************************************************************/\n+\n+/**\n+  * Returns the password associated with this object\n+  *\n+  * @return The password\n+  */\n+public char[]\n+getPassword()\n+{\n+  return(password);\n+}\n+\n+} // class PasswordAuthentication\n+"}]}