{"sha": "c1cca8d4eb0613a59efae32be160a5d907a9f757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjY2E4ZDRlYjA2MTNhNTllZmFlMzJiZTE2MGE1ZDkwN2E5Zjc1Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-05-28T22:35:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-05-28T22:35:50Z"}, "message": "re PR c++/15083 (spurious \"statement has no effect\" warning)\n\n\tPR c++/15083\n\t* decl2.c (delete_sanity): Set TREE_SIDE_EFFECTS on a DELETE_EXPR,\n\teven in a templat.e\n\t* init.c (build_new): Likewise.\n\n\tPR c++/15640\n\t* name-lookup.c (arg_assoc): Robustify.\n\n\tPR c++/15471\n\t* typeck.c (unary_complex_lvalue): Use context_for_name_lookup\n\twhen determining the scope to use for a pointer to member.\n\n\tPR c++/15083\n\t* g++.dg/warn/noeffect5.C: New test.\n\n\tPR c++/15471\n\t* g++.dg/expr/ptrmem4.C: New test.\n\n\tPR c++/15640\n\t* g++.dg/template/operator3.C: New test.\n\nFrom-SVN: r82391", "tree": {"sha": "d7752dce6835b6a0c7641ac819b1894315e25a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7752dce6835b6a0c7641ac819b1894315e25a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1cca8d4eb0613a59efae32be160a5d907a9f757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cca8d4eb0613a59efae32be160a5d907a9f757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cca8d4eb0613a59efae32be160a5d907a9f757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cca8d4eb0613a59efae32be160a5d907a9f757/comments", "author": null, "committer": null, "parents": [{"sha": "763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763ee179ed8e563ffb863f8977d9c5a31cdbf0a9"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "6fe851774a5cce90eebeda04c88a0c2f6ffa32e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -3,6 +3,20 @@\n \t* decl.c (cp_make_fname_decl): Free return value from\n \tfname_as_string.\n \n+2004-05-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15083\n+\t* decl2.c (delete_sanity): Set TREE_SIDE_EFFECTS on a DELETE_EXPR,\n+\teven in a templat.e\n+\t* init.c (build_new): Likewise.\n+\n+\tPR c++/15640\n+\t* name-lookup.c (arg_assoc): Robustify.\n+\n+\tPR c++/15471\n+\t* typeck.c (unary_complex_lvalue): Use context_for_name_lookup\n+\twhen determining the scope to use for a pointer to member.\n+\n 2004-05-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14668"}, {"sha": "296bf23b1f9d5f629c674da185e9af0a4a00deee", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -451,6 +451,7 @@ delete_sanity (tree exp, tree size, bool doing_vec, int use_global_delete)\n       t = build_min (DELETE_EXPR, void_type_node, exp, size);\n       DELETE_EXPR_USE_GLOBAL (t) = use_global_delete;\n       DELETE_EXPR_USE_VEC (t) = doing_vec;\n+      TREE_SIDE_EFFECTS (t) = 1;\n       return t;\n     }\n "}, {"sha": "1c003566108f05570478a0f08b264b0b0a4021c9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -1788,6 +1788,7 @@ build_new (tree placement, tree decl, tree init, int use_global_new)\n       rval = build_min (NEW_EXPR, build_pointer_type (type), \n \t\t\tplacement, t, init);\n       NEW_EXPR_USE_GLOBAL (rval) = use_global_new;\n+      TREE_SIDE_EFFECTS (rval) = 1;\n       return rval;\n     }\n "}, {"sha": "30a4d7efba8e3a5c417d9fe0c29e1f58607bbd04", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -4464,10 +4464,8 @@ arg_assoc (struct arg_lookup *k, tree n)\n \tif (arg_assoc_template_arg (k, TREE_VEC_ELT (args, ix)) == 1)\n \t  return true;\n     }\n-  else\n+  else if (TREE_CODE (n) == OVERLOAD)\n     {\n-      my_friendly_assert (TREE_CODE (n) == OVERLOAD, 980715);\n-      \n       for (; n; n = OVL_CHAIN (n))\n \tif (arg_assoc_type (k, TREE_TYPE (OVL_FUNCTION (n))))\n \t  return true;"}, {"sha": "2570868f56c99b12e73e4cad476f42f316c6c8bf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -4209,7 +4209,8 @@ unary_complex_lvalue (enum tree_code code, tree arg)\n \t      return error_mark_node;\n \t    }\n \n-\t  type = build_ptrmem_type (DECL_FIELD_CONTEXT (t), TREE_TYPE (t));\n+\t  type = build_ptrmem_type (context_for_name_lookup (t), \n+\t\t\t\t    TREE_TYPE (t));\n \t  t = make_ptrmem_cst (type, TREE_OPERAND (arg, 1));\n \t  return t;\n \t}"}, {"sha": "8c3e963f6ade4d725c7f59250d56ffc2cdeeb7ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -11,6 +11,17 @@\n \n \t* gcc.dg/altivec-15.c: New test.\n \n+2004-05-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15083\n+\t* g++.dg/warn/noeffect6.C: New test.\n+\n+\tPR c++/15471\n+\t* g++.dg/expr/ptrmem4.C: New test.\n+\n+\tPR c++/15640\n+\t* g++.dg/template/operator3.C: New test.\n+\n 2004-05-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14668"}, {"sha": "0803c9e632b1a2dd24cf07a3066d5bbb9326efdc", "filename": "gcc/testsuite/g++.dg/expr/ptrmem4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptrmem4.C?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/15471\n+// { dg-do run }\n+\n+struct myclass { \n+  unsigned a; \n+  union { \n+    unsigned x; \n+  }; \n+}; \n+ \n+int main () {\n+  myclass foo;\n+  unsigned myclass::* member = &myclass::x; \n+  if (&(foo.*member) != &foo.x)\n+    return 1;\n+}"}, {"sha": "45292cd954f6e83f520a1df5f918f711390c25f1", "filename": "gcc/testsuite/g++.dg/template/operator3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator3.C?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/15640\n+\n+struct A {\n+  void foo(void);\n+};\n+\n+template <int> void bar() {\n+  A a;\n+  a + a.foo; // { dg-error \"\" }\n+}"}, {"sha": "ca6baba812212e0da9e53ec9a8b23250544697df", "filename": "gcc/testsuite/g++.dg/warn/noeffect6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1cca8d4eb0613a59efae32be160a5d907a9f757/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoeffect6.C?ref=c1cca8d4eb0613a59efae32be160a5d907a9f757", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-Wall\" }\n+// PR c++/15083\n+\n+extern \"C\" int printf(const char*,...);\n+struct Counter {\n+  Counter(){printf(\"Hello World.\\n\");}\n+};\n+template< typename T >\n+void resetData() {\n+  new Counter();\n+}\n+int main() {\n+  resetData<int>();\n+} "}]}