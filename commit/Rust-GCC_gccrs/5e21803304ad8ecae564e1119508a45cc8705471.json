{"sha": "5e21803304ad8ecae564e1119508a45cc8705471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyMTgwMzMwNGFkOGVjYWU1NjRlMTExOTUwOGE0NWNjODcwNTQ3MQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-06-08T03:53:35Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-06-08T03:53:35Z"}, "message": "threads-no.h: Remove file.\n\n\t* config/threads-no.h: Remove file.\n\t* config/threads-posix.h: Remove file.\n\n\t* acconfig.h (_GLIBCPP_USE_THREADS): Remove.\n\t(_GLIBCPP_SUPPORTS_WEAK): Add (required by namespace-clean gthr*.h).\n\t(_GLIBCPP_HAVE_GTHR_DEFAULT): Likewise.\n\t* config.h.in: Regenerate.\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Completely rework to\n\tsetup and use gthr*.h files.  In particular, make gthr.h files\n\tnamespace-clean in the staging area (they don't have to be for\n\tlibgcc.a).\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\n\t* src/Makefile.am (build_headers): Remove bits/c++threads.h\n\tand add bits/gthr.h bits/gthr-single.h bits/gthr-default.h.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/bits/c++config: Cleanup threading configuration macros.\n\tIn particular, define __STL_GTHREADS macro which controls...\n\t* include/bits/stl_threads.h: ...a brand new gthr.h-based\n        configuration here.\n\n\t* config/c_io_stdio.h: Include staged gthr.h instead of local\n\tthread configuration file.  Always use __gthread_mutex_t\n\tinstead of __mutext_type (or int).\n\t* include/bits/std_fstream.h: Likewise.\n\n\t* docs/html/17_intro/howto.html: Remove placeholder comment in\n\tcase this configuration patch didn't make it.  Add advice that\n\tsection only applies if configured with --enable-threads.\n\t* docs/html/23_containers/howto.html: Reword to make clear\n\tthat _PTHREADS is no longer required for any port to be\n\tcorrectly using STL with threads.  Add advice that section\n\tonly applies if configured with --enable-threads.\n\nCo-Authored-By: John David Anglin <dave@hiauly1.hia.nrc.ca>\n\nFrom-SVN: r42998", "tree": {"sha": "b2cbfba3edc6eab1c6b67a4c3000514516e6ca14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cbfba3edc6eab1c6b67a4c3000514516e6ca14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e21803304ad8ecae564e1119508a45cc8705471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21803304ad8ecae564e1119508a45cc8705471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e21803304ad8ecae564e1119508a45cc8705471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21803304ad8ecae564e1119508a45cc8705471/comments", "author": null, "committer": null, "parents": [{"sha": "e9a8af10673c70eb43135b6d0366909f147744b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a8af10673c70eb43135b6d0366909f147744b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a8af10673c70eb43135b6d0366909f147744b1"}], "stats": {"total": 1945, "additions": 941, "deletions": 1004}, "files": [{"sha": "5b8293a3f5d4385e00ec73443b129f612c5795a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -1,3 +1,43 @@\n+2001-06-07  Loren J. Rittle  <ljrittle@acm.org>\n+\t    John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* config/threads-no.h: Remove file.\n+\t* config/threads-posix.h: Remove file.\n+\n+\t* acconfig.h (_GLIBCPP_USE_THREADS): Remove.\n+\t(_GLIBCPP_SUPPORTS_WEAK): Add (required by namespace-clean gthr*.h).\n+\t(_GLIBCPP_HAVE_GTHR_DEFAULT): Likewise.\n+\t* config.h.in: Regenerate.\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_THREADS): Completely rework to\n+\tsetup and use gthr*.h files.  In particular, make gthr.h files\n+\tnamespace-clean in the staging area (they don't have to be for\n+\tlibgcc.a).\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n+\t* src/Makefile.am (build_headers): Remove bits/c++threads.h\n+\tand add bits/gthr.h bits/gthr-single.h bits/gthr-default.h.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* include/bits/c++config: Cleanup threading configuration macros.\n+\tIn particular, define __STL_GTHREADS macro which controls...\n+\t* include/bits/stl_threads.h: ...a brand new gthr.h-based\n+        configuration here.\n+\n+\t* config/c_io_stdio.h: Include staged gthr.h instead of local\n+\tthread configuration file.  Always use __gthread_mutex_t\n+\tinstead of __mutext_type (or int).\n+\t* include/bits/std_fstream.h: Likewise.\n+\n+\t* docs/html/17_intro/howto.html: Remove placeholder comment in\n+\tcase this configuration patch didn't make it.  Add advice that\n+\tsection only applies if configured with --enable-threads.\n+\t* docs/html/23_containers/howto.html: Reword to make clear\n+\tthat _PTHREADS is no longer required for any port to be\n+\tcorrectly using STL with threads.  Add advice that section\n+\tonly applies if configured with --enable-threads.\n+\n 2001-06-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/string-inst.cc (_Rep::_S_max_size): Add instantiation."}, {"sha": "b6ef40973c91e751e76514dad1a6f86f03760906", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -1,7 +1,10 @@\n // acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n \n-// Include support for multiple threads, e.g., in the I/O package.\n-#undef _GLIBCPP_USE_THREADS\n+// Define if GCC supports weak symbols\n+#undef _GLIBCPP_SUPPORTS_WEAK\n+\n+// Define if gthr-default.h exists (meaning that threading support is enabled)\n+#undef HAVE_GTHR_DEFAULT\n \n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG"}, {"sha": "6baffe384e7fec51c6b4ada24a1e5f3897115485", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -1118,41 +1118,37 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n \n dnl\n-dnl Check for which threading library to use.\n-dnl\n-dnl GLIBCPP_ENABLE_THREADS\n-dnl --enable-threads=posix sets config/threads-posix.h et. al.\n-dnl \n-dnl Default is no threads, which also disables _IO_MTSAFE_IO in\n-dnl libio.  Any actual thread package will enable it.\n+dnl Setup to use the gcc gthr.h thread-specific memory and mutex model.\n+dnl We must stage the required headers so that they will be installed\n+dnl with the library (unlike libgcc, the STL implementation is provided\n+dnl solely within headers).  Since we must not inject random user-space\n+dnl macro names into user-provided C++ code, we first stage into <file>-in\n+dnl and process to <file> with an output command.  The reason for a two-\n+dnl stage process here is to correctly handle $srcdir!=$objdir without\n+dnl having to write complex code (the sed commands to clean the macro\n+dnl namespace are complex and fragile enough as it is).\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n-  dnl Check for thread package actually supported in libstdc++ \n-  THREADH=\n-  case \"$target_thread_file\" in\n-    no | none | single)\n-      THREADH=threads-no.h\n-      ;;\n-    posix | pthreads)\n-      THREADH=threads-posix.h\n-      ;;\n-    decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n-      AC_MSG_WARN(disabling unsupported thread package $target_thread_file)\n-      THREADH=threads-no.h\n-      ;;\n-    *)\n-      AC_MSG_ERROR($target_thread_file: unsupported/unknown thread package)\n-      ;;\n-  esac\n-\n-  AC_LINK_FILES(config/$THREADH, include/bits/c++threads.h)\n-  if test $THREADH != threads-no.h; then\n-    AC_DEFINE(_GLIBCPP_USE_THREADS)\n+  AC_LINK_FILES(../gcc/gthr.h, include/bits/gthr.h-in)\n+  AC_LINK_FILES(../gcc/gthr-single.h, include/bits/gthr-single.h-in)\n+  AC_LINK_FILES(../gcc/gthr-$target_thread_file.h,\n+\t\tinclude/bits/gthr-default.h-in)\n+  if test $target_thread_file != single; then\n+    AC_DEFINE(HAVE_GTHR_DEFAULT)\n+    AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n+  AC_OUTPUT_COMMANDS([d=include/bits\n+    rm -f $d/gthr.h $d/gthr-single.h $d/gthr-default.h\n+    sed '/^#/s/\\([A-Z_][A-Z_]*\\)/_GLIBCPP_\\1/g' <$d/gthr.h-in >$d/gthr.h\n+    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-single.h-in \\\n+      | sed 's/\\(GCC[A-Z_]*_H\\)/_GLIBCPP_\\1/g' >$d/gthr-single.h\n+    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-default.h-in \\\n+      | sed 's/\\(GCC[A-Z_]*_H\\)/_GLIBCPP_\\1/g' \\\n+      | sed 's/\\([A-Z_]*WEAK\\)/_GLIBCPP_\\1/g' >$d/gthr-default.h])\n ])\n \n "}, {"sha": "d020a142919b653da410af3b8a9639af9ca02ace", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -1130,41 +1130,37 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n \n dnl\n-dnl Check for which threading library to use.\n-dnl\n-dnl GLIBCPP_ENABLE_THREADS\n-dnl --enable-threads=posix sets config/threads-posix.h et. al.\n-dnl \n-dnl Default is no threads, which also disables _IO_MTSAFE_IO in\n-dnl libio.  Any actual thread package will enable it.\n+dnl Setup to use the gcc gthr.h thread-specific memory and mutex model.\n+dnl We must stage the required headers so that they will be installed\n+dnl with the library (unlike libgcc, the STL implementation is provided\n+dnl solely within headers).  Since we must not inject random user-space\n+dnl macro names into user-provided C++ code, we first stage into <file>-in\n+dnl and process to <file> with an output command.  The reason for a two-\n+dnl stage process here is to correctly handle $srcdir!=$objdir without\n+dnl having to write complex code (the sed commands to clean the macro\n+dnl namespace are complex and fragile enough as it is).\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_CHECKING([for thread model used by GCC])\n   target_thread_file=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n   AC_MSG_RESULT([$target_thread_file])\n \n-  dnl Check for thread package actually supported in libstdc++ \n-  THREADH=\n-  case \"$target_thread_file\" in\n-    no | none | single)\n-      THREADH=threads-no.h\n-      ;;\n-    posix | pthreads)\n-      THREADH=threads-posix.h\n-      ;;\n-    decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n-      AC_MSG_WARN(disabling unsupported thread package $target_thread_file)\n-      THREADH=threads-no.h\n-      ;;\n-    *)\n-      AC_MSG_ERROR($target_thread_file: unsupported/unknown thread package)\n-      ;;\n-  esac\n-\n-  AC_LINK_FILES(config/$THREADH, include/bits/c++threads.h)\n-  if test $THREADH != threads-no.h; then\n-    AC_DEFINE(_GLIBCPP_USE_THREADS)\n+  AC_LINK_FILES(../gcc/gthr.h, include/bits/gthr.h-in)\n+  AC_LINK_FILES(../gcc/gthr-single.h, include/bits/gthr-single.h-in)\n+  AC_LINK_FILES(../gcc/gthr-$target_thread_file.h,\n+\t\tinclude/bits/gthr-default.h-in)\n+  if test $target_thread_file != single; then\n+    AC_DEFINE(HAVE_GTHR_DEFAULT)\n+    AC_DEFINE(_GLIBCPP_SUPPORTS_WEAK, __GXX_WEAK__)\n   fi\n+  AC_OUTPUT_COMMANDS([d=include/bits\n+    rm -f $d/gthr.h $d/gthr-single.h $d/gthr-default.h\n+    sed '/^#/s/\\([A-Z_][A-Z_]*\\)/_GLIBCPP_\\1/g' <$d/gthr.h-in >$d/gthr.h\n+    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-single.h-in \\\n+      | sed 's/\\(GCC[A-Z_]*_H\\)/_GLIBCPP_\\1/g' >$d/gthr-single.h\n+    sed 's/\\(UNUSED\\)/_GLIBCPP_\\1/g' <$d/gthr-default.h-in \\\n+      | sed 's/\\(GCC[A-Z_]*_H\\)/_GLIBCPP_\\1/g' \\\n+      | sed 's/\\([A-Z_]*WEAK\\)/_GLIBCPP_\\1/g' >$d/gthr-default.h])\n ])\n \n "}, {"sha": "f9b9ed76b908f6af9af2554fab27790327dd4580", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -3,8 +3,11 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n-// Include support for multiple threads, e.g., in the I/O package.\n-#undef _GLIBCPP_USE_THREADS\n+// Define if GCC supports weak symbols\n+#undef _GLIBCPP_SUPPORTS_WEAK\n+\n+// Define if gthr-default.h exists (meaning that threading support is enabled)\n+#undef HAVE_GTHR_DEFAULT\n \n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG"}, {"sha": "264e705d13010ab36996197484b60bcd2b7fec4e", "filename": "libstdc++-v3/config/c_io_stdio.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_stdio.h?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -34,7 +34,7 @@\n \n #include <stdio.h>\n #include <stddef.h>\n-#include <bits/c++threads.h>\n+#include <bits/gthr.h>\n \n namespace std \n {\n@@ -46,12 +46,7 @@ namespace std\n #endif\n   typedef fpos_t  \t__c_streampos;\n \n-#ifdef _GLIBCPP_USE_THREADS\n-  typedef __mutext_type __c_lock;\n-#else\n-  typedef int          \t__c_lock;\n-\n-#endif\n+  typedef __gthread_mutex_t __c_lock;\n \n // from basic_file.h\n #define _GLIBCPP_BASIC_FILE_ENCAPSULATION 1"}, {"sha": "c2de0f1ef4c817f2231beecdb56bb6502f0d143b", "filename": "libstdc++-v3/config/threads-no.h", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8af10673c70eb43135b6d0366909f147744b1/libstdc%2B%2B-v3%2Fconfig%2Fthreads-no.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8af10673c70eb43135b6d0366909f147744b1/libstdc%2B%2B-v3%2Fconfig%2Fthreads-no.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fthreads-no.h?ref=e9a8af10673c70eb43135b6d0366909f147744b1", "patch": "@@ -1,78 +0,0 @@\n-// thread support (null case)  -*- C++ -*-\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// threads-no.h - Defines for using no threads.\n-\n-#ifndef _CPP_THREADS_NO\n-#define _CPP_THREADS_NO\n-\n-//\n-// Includes\n-//\n-\n-\n-//\n-// Defines\n-//\n-\n-\n-//\n-// Typedefs.\n-//\n-namespace std {\n-\n-  struct __null_mutext { };\n-  typedef  __null_mutext        __mutext_type;\n-\n-} // std\n-\n-\n-//\n-// Condition variables.\n-//\n-\n-\n-//\n-// Mutexes.\n-//\n-\n-\n-//\n-// Thread creation and manipulation.\n-//\n-\n-#endif // _CPP_THREADS_NO\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "46d53f4ecc2885778e9480a6037c8a3a3536875b", "filename": "libstdc++-v3/config/threads-posix.h", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a8af10673c70eb43135b6d0366909f147744b1/libstdc%2B%2B-v3%2Fconfig%2Fthreads-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a8af10673c70eb43135b6d0366909f147744b1/libstdc%2B%2B-v3%2Fconfig%2Fthreads-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fthreads-posix.h?ref=e9a8af10673c70eb43135b6d0366909f147744b1", "patch": "@@ -1,91 +0,0 @@\n-// thread support (posix case)  -*- C++ -*-\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// threads-posix.h - Defines for using posix threads.\n-\n-// People trying to implement this should look at\n-// libjava/include/posix-threads.h for more info on the interface that\n-// java is using. It's one worth looking at.\n-\n-#ifndef _CPP_THREADS_POSIX\n-#define _CPP_THREADS_POSIX\n-\n-#include <bits/c++config.h>\n-\n-//\n-// Includes\n-//\n-#include <pthread.h>\n-\n-\n-//\n-// Defines\n-//\n-\n-// Currently needed for stl/bits/stl_config.h\n-# define _PTHREADS\n-\n-// Currently libio expects this macro\n-#define _IO_MTSAFE_IO\n-\n-// May be needed on solaris.\n-//#define PTHREAD_MUTEX_INITIALIZER {{{0},0},{{{0}}},{0}}\n-\n-\n-//\n-// Typedefs.\n-//\n-namespace std {\n-  typedef  pthread_mutex_t\t__mutext_type;\n-} // std\n-\n-\n-//\n-// Condition variables.\n-//\n-\n-\n-//\n-// Mutexes.\n-//\n-\n-\n-//\n-// Thread creation and manipulation.\n-//\n-\n-#endif // _CPP_THREADS_POSIX\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "290e0bc6262cd31edf80235a8a881f3f5542b5cc", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 722, "deletions": 723, "changes": 1445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5e21803304ad8ecae564e1119508a45cc8705471"}, {"sha": "34779e40fa8eaeee6fec1fbc38e2a1406cfe3bb8", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 17</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/05/30 21:54:57 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.5 2001/05/31 02:45:03 ljrittle Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -57,7 +57,8 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       This entry will mention a very little bit about the general MT\n       issues with libstdc++.  The latest status and quick notes will be\n       in FAQ 5.6.  Some discussion about thread-safe containers will be\n-      in section 6.8 (the HOWTOs on containers).\n+      in section 6.8 (the HOWTOs on containers).  This section only applies\n+      when gcc and libstdc++-v3 were configured with --enable-threads.\n    </P>\n    <P>The libstdc++ code (all of it, not just the containers) has been\n       designed so that thread-safety will be easily possible.  The first\n@@ -79,19 +80,7 @@ <H2><A NAME=\"3\">Thread-safety</A></H2>\n       in include/bits/c++config and the HOWTOs on containers.  Be\n       fully aware that you may change the external or internal ABI of\n       libstdc++-v3 when you provide -D__USE_MALLOC on the command line\n-      or make a change to that configuration file. [Placeholder in\n-      case other patches don't make it before the 3.0 release: That\n-      memory allocator can appear buggy in multithreaded C++ programs\n-      (and has been reported to leak memory), if STL is misconfigured\n-      for your platform.  You may need to provide -D_PTHREADS on the\n-      command line in this case to ensure the memory allocator for\n-      containers is really protected by a mutex.  Also, be aware that\n-      you just changed the ABI of libstdc++-v3 when you did that thus\n-      your entire application and all libraries must be compiled with\n-      compatible flags.  The STL implementation doesn't currently\n-      protect you from changing the mutex locking implementation to\n-      one that doesn't really play together with the implementation\n-      you may have compiled other application code with.]\n+      or make a change to that configuration file.\n    </P>\n    <P>\n       If you don't like caches of objects being retained inside the\n@@ -192,7 +181,7 @@ <H2><A NAME=\"4\"><TT>&lt;foo&gt;</TT> vs <TT>&lt;foo.h&gt;</TT></A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/05/30 21:54:57 pme Exp $\n+<BR> $Id: howto.html,v 1.5 2001/05/31 02:45:03 ljrittle Exp $\n </EM></P>\n \n "}, {"sha": "6f20c9b1d8a2b12824fe0c2621e1974ba1a6c115", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 23</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/05/30 21:55:01 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.5 2001/05/31 02:45:02 ljrittle Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -185,7 +185,8 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n    <P>This section will mention some of the problems in designing MT\n       programs that use Standard containers.  For information on other\n       aspects of multithreading (e.g., the library as a whole), see\n-      the Received Wisdom on Chapter 17.\n+      the Received Wisdom on Chapter 17.  This section only applies\n+      when gcc and libstdc++-v3 were configured with --enable-threads.\n    </P>\n    <P>Two excellent pages to read when working with templatized containers\n       and threads are\n@@ -207,7 +208,7 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n       the mutex lock as is best for your platform.  In particular,\n       past advice was for people using g++ to explicitly define\n       _PTHREADS on the command line to get a thread-safe STL.  This\n-      may or may not be required for your port.  It may or may not be\n+      is no longer required for your port.  It may or may not be\n       a good idea for your port.  Extremely big caution: if you\n       compile some of your application code against the STL with one\n       set of threading flags and macros and another portion of the\n@@ -258,7 +259,7 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/05/30 21:55:01 pme Exp $\n+<BR> $Id: howto.html,v 1.5 2001/05/31 02:45:02 ljrittle Exp $\n </EM></P>\n \n "}, {"sha": "763c917b8efcafa184bc3d0e6f255863a89a5b14", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -62,26 +62,17 @@\n // Enable concept checking code from the boost libraries.\n //#define _GLIBCPP_CONCEPT_CHECKS 1\n \n-// From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS).\n-#ifdef _REENTRANT\n-# define __STL_THREADS\n-#endif\n-\n-#if defined(_PTHREADS) && !defined(_NOTHREADS)\n-# define __STL_PTHREADS\n-#endif\n-\n-#if defined(_UITHREADS) && !defined(_PTHREADS) && !defined(_NOTHREADS)\n-# define __STL_UITHREADS\n-#endif\n-\n-#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \\\n-    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)\n-# define __STL_THREADS\n-# define __STL_VOLATILE volatile\n-#else\n-# define __STL_VOLATILE\n-#endif\n+// Map gthr.h abstraction to that required for STL.  Do not key off of\n+// __GTHREADS at this point since we haven't seen the correct symbol\n+// yet, instead setup so that include/bits/stl_threads.h will know to\n+// include gthr.h instead of any other type of thread support.  Note:\n+// that gthr.h may well map to gthr-single.h which is a correct way to\n+// express no threads support in gcc.  As a user, do not define\n+// _NOTHREADS without consideration of the consequences (e.g. it is an\n+// internal ABI change).\n+#define __STL_GTHREADS\n+#define __STL_THREADS\n+#define __STL_VOLATILE volatile\n \n // This is also a user hook, but via -f[no-]exceptions, not direct #defines.\n #ifdef __EXCEPTIONS"}, {"sha": "a0604abbe0dbbe56c32f5761a4af6571e42a1231", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -40,7 +40,7 @@\n #include <bits/std_ostream.h>\n #include <bits/basic_file.h>\n #include <bits/std_locale.h>\t// For codecvt\n-#include <bits/c++threads.h>\t// For __mutext_type\n+#include <bits/gthr.h>\n \n namespace std \n {"}, {"sha": "21f47225320c040190d81ded50cf67b7823420d4", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -24,6 +24,15 @@\n // threads standard), and Win32 threads.  Uithread support by Jochen\n // Schlick, 1999.\n \n+// GCC extension begin\n+// In order to present a stable threading configuration, in all cases,\n+// gcc looks for it's own abstraction layer before all others.  All\n+// modifications to this file are marked to allow easier importation of\n+// STL upgrades.\n+#if defined(__STL_GTHREADS)\n+#include \"bits/gthr.h\"\n+#else\n+// GCC extension end\n #if defined(__STL_SGI_THREADS)\n #include <mutex.h>\n #include <time.h>\n@@ -35,6 +44,9 @@\n #elif defined(__STL_WIN32THREADS)\n #include <windows.h>\n #endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n \n namespace std\n {\n@@ -64,6 +76,22 @@ struct _Refcount_Base\n    volatile _RC_t _M_ref_count;\n \n   // Constructor\n+// GCC extension begin\n+#ifdef __STL_GTHREADS\n+  __gthread_mutex_t _M_ref_count_lock;\n+  _Refcount_Base(_RC_t __n) : _M_ref_count(__n)\n+    {\n+#ifdef __GTHREAD_MUTEX_INIT\n+      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n+      _M_ref_count_lock = __tmp;\n+#elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n+      __GTHREAD_MUTEX_INIT_FUNCTION (&_M_ref_count_lock);\n+#else\n+#error __GTHREAD_MUTEX_INIT or __GTHREAD_MUTEX_INIT_FUNCTION should be defined by gthr.h abstraction layer, report problem to libstdc++@gcc.gnu.org.\n+#endif\n+    }\n+#else\n+// GCC extension end\n # ifdef __STL_PTHREADS\n   pthread_mutex_t _M_ref_count_lock;\n   _Refcount_Base(_RC_t __n) : _M_ref_count(__n)\n@@ -75,7 +103,25 @@ struct _Refcount_Base\n # else\n   _Refcount_Base(_RC_t __n) : _M_ref_count(__n) {}\n # endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n \n+// GCC extension begin\n+#ifdef __STL_GTHREADS\n+  void _M_incr() {\n+    __gthread_mutex_lock(&_M_ref_count_lock);\n+    ++_M_ref_count;\n+    __gthread_mutex_unlock(&_M_ref_count_lock);\n+  }\n+  _RC_t _M_decr() {\n+    __gthread_mutex_lock(&_M_ref_count_lock);\n+    volatile _RC_t __tmp = --_M_ref_count;\n+    __gthread_mutex_unlock(&_M_ref_count_lock);\n+    return __tmp;\n+  }\n+#else\n+// GCC extension end\n   // _M_incr and _M_decr\n # ifdef __STL_SGI_THREADS\n   void _M_incr() {  __add_and_fetch(&_M_ref_count, 1); }\n@@ -111,12 +157,24 @@ struct _Refcount_Base\n   void _M_incr() { ++_M_ref_count; }\n   _RC_t _M_decr() { return --_M_ref_count; }\n # endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n };\n \n // Atomic swap on unsigned long\n // This is guaranteed to behave as though it were atomic only if all\n // possibly concurrent updates use _Atomic_swap.\n // In some cases the operation is emulated with a lock.\n+// GCC extension begin\n+#ifdef __STL_GTHREADS\n+// We don't provide an _Atomic_swap in this configuration.  This only\n+// affects the use of ext/rope with threads.  Someone could add this\n+// later, if required.  You can start by cloning the __STL_PTHREADS\n+// path while making the obvious changes.  Later it could be optimized\n+// to use the atomicity.h abstraction layer from libstdc++-v3.\n+#else\n+// GCC extension end\n # ifdef __STL_SGI_THREADS\n     inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {\n #       if __mips < 3 || !(defined (_ABIN32) || defined(_ABI64))\n@@ -205,6 +263,9 @@ struct _Refcount_Base\n         return __result;\n     }\n # endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n \n // Locking class.  Note that this class *does not have a constructor*.\n // It must be initialized either statically, with __STL_MUTEX_INITIALIZER,\n@@ -237,6 +298,21 @@ unsigned _STL_mutex_spin<__inst>::__last = 0;\n \n struct _STL_mutex_lock\n {\n+// GCC extension begin\n+#if defined(__STL_GTHREADS)\n+  __gthread_mutex_t _M_lock;\n+  void _M_initialize()\n+  {\n+#ifdef __GTHREAD_MUTEX_INIT\n+  // There should be no code in this path given the usage rules above.\n+#elif defined(__GTHREAD_MUTEX_INIT_FUNCTION)\n+    __GTHREAD_MUTEX_INIT_FUNCTION (&_M_lock);\n+#endif\n+  }\n+  void _M_acquire_lock() { __gthread_mutex_lock(&_M_lock); }\n+  void _M_release_lock() { __gthread_mutex_unlock(&_M_lock); }\n+#else\n+// GCC extension end\n #if defined(__STL_SGI_THREADS) || defined(__STL_WIN32THREADS)\n   // It should be relatively easy to get this to work on any modern Unix.\n   volatile unsigned long _M_lock;\n@@ -330,8 +406,20 @@ struct _STL_mutex_lock\n   void _M_acquire_lock() {}\n   void _M_release_lock() {}\n #endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n };\n \n+// GCC extension begin\n+#if defined(__STL_GTHREADS)\n+#ifdef __GTHREAD_MUTEX_INIT\n+#define __STL_MUTEX_INITIALIZER = { __GTHREAD_MUTEX_INIT }\n+#else\n+#define __STL_MUTEX_INITIALIZER\n+#endif\n+#else\n+// GCC extension end\n #ifdef __STL_PTHREADS\n // Pthreads locks must be statically initialized to something other than\n // the default value of zero.\n@@ -345,6 +433,9 @@ struct _STL_mutex_lock\n #else\n #   define __STL_MUTEX_INITIALIZER\n #endif\n+// GCC extension begin\n+#endif\n+// GCC extension end\n \n \n // A locking class that uses _STL_mutex_lock.  The constructor takes a"}, {"sha": "8ca4176d9f300d77c0f0eb67b75b8215d22803a7", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.85 2001/05/19 03:42:53 bkoz Exp $\n+## $Id: Makefile.am,v 1.86 2001/06/01 09:22:05 hp Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -158,7 +158,8 @@ endif\n \n build_headers = \\\n \tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n+\tbits/c++config.h bits/c++io.h bits/c++locale.h \\\n+\tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \\\n \tbits/basic_file_model.h \\\n \tbits/atomicity.h bits/os_defines.h \\\n \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h "}, {"sha": "572c9b3444be782312474500d8e43493078837ab", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21803304ad8ecae564e1119508a45cc8705471/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=5e21803304ad8ecae564e1119508a45cc8705471", "patch": "@@ -162,12 +162,13 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n @GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h \tbits/gthr.h bits/gthr-single.h bits/gthr-default.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc \tglobals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n \n-VPATH =  $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n+\n+VPATH = $(top_srcdir):$(top_srcdir)/src:$(GLIBCPP_INCLUDE_DIR):$(GLIBCPP_INCLUDE_DIR)/std:$(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n "}]}