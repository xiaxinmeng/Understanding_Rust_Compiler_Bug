{"sha": "d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiMTQwMWQwN2ZmNDg3NDk2NGE4YjUzNGRmZDhjZDk0ZGM5NzhhZQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2008-08-20T12:35:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T12:35:11Z"}, "message": "2008-08-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-fileio.adb (Open) Use C helper function to determine whether a\n\tgiven errno value corresponds to a \"file not found\" error.\n\n\t* sysdep.c (__gnat_is_file_not_found_error): New C helper function.\n\nFrom-SVN: r139283", "tree": {"sha": "d22b7988ca725589e64a5a1327e1a9cd93db79a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22b7988ca725589e64a5a1327e1a9cd93db79a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b1401d07ff4874964a8b534dfd8cd94dc978ae/comments", "author": null, "committer": null, "parents": [{"sha": "d045b07645aa858dfd6be481fcc17921d924b7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d045b07645aa858dfd6be481fcc17921d924b7b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d045b07645aa858dfd6be481fcc17921d924b7b0"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "1109b2295af42d856abb7e72c7dfdb35bc93f626", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b1401d07ff4874964a8b534dfd8cd94dc978ae/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b1401d07ff4874964a8b534dfd8cd94dc978ae/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "patch": "@@ -38,7 +38,6 @@ with Interfaces.C_Streams;        use Interfaces.C_Streams;\n \n with System.CRTL;\n with System.Case_Util;            use System.Case_Util;\n-with System.OS_Constants;\n with System.OS_Lib;\n with System.Soft_Links;\n \n@@ -994,11 +993,25 @@ package body System.File_IO is\n \n                --  Should we raise Device_Error for ENOSPC???\n \n-               if System.OS_Lib.Errno = System.OS_Constants.ENOENT then\n-                  raise Name_Error;\n-               else\n-                  raise Use_Error;\n-               end if;\n+               declare\n+                  subtype Cint is Interfaces.C.int;\n+\n+                  function Is_File_Not_Found_Error\n+                    (Errno_Value : Cint) return Cint;\n+                  --  Non-zero when the given errno value indicates a non-\n+                  --  existing file.\n+\n+                  pragma Import (C, Is_File_Not_Found_Error,\n+                    \"__gnat_is_file_not_found_error\");\n+               begin\n+                  if Is_File_Not_Found_Error (Cint (System.OS_Lib.Errno))\n+                       /= 0\n+                  then\n+                     raise Name_Error;\n+                  else\n+                     raise Use_Error;\n+                  end if;\n+               end;\n             end if;\n          end if;\n       end if;"}, {"sha": "9028fb58589088440a7762f88b24e45ce5c58953", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b1401d07ff4874964a8b534dfd8cd94dc978ae/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b1401d07ff4874964a8b534dfd8cd94dc978ae/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=d3b1401d07ff4874964a8b534dfd8cd94dc978ae", "patch": "@@ -35,9 +35,14 @@\n \n #ifdef __vxworks\n #include \"ioLib.h\"\n+#include \"dosFsLib.h\"\n+#ifndef __RTP__\n+# include \"nfsLib.h\"\n+#endif\n #include \"selectLib.h\"\n #include \"vxWorks.h\"\n #endif\n+\n #ifdef IN_RTS\n #define POSIX\n #include \"tconfig.h\"\n@@ -53,6 +58,7 @@\n #endif\n \n #include <time.h>\n+#include <errno.h>\n \n #if defined (sun) && defined (__SVR4) && !defined (__vxworks)\n /* The declaration is present in <time.h> but conditionalized\n@@ -893,3 +899,23 @@ __gnat_get_task_options (void)\n }\n \n #endif\n+\n+int\n+__gnat_is_file_not_found_error (int errno_val) {\n+   switch (errno_val) {\n+      case ENOENT:\n+#ifdef __vxworks\n+      /* In the case of VxWorks, we also have to take into account various\n+       * filesystem-specific variants of this error.\n+       */\n+      case S_dosFsLib_FILE_NOT_FOUND:\n+#ifndef __RTP__\n+      case S_nfsLib_NFSERR_NOENT:\n+#endif\n+#endif\n+         return 1;\n+\n+      default:\n+         return 0;\n+   }\n+}"}]}