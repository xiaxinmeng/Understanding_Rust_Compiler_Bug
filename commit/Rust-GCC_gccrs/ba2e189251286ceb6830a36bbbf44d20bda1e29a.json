{"sha": "ba2e189251286ceb6830a36bbbf44d20bda1e29a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyZTE4OTI1MTI4NmNlYjY4MzBhMzZiYmJmNDRkMjBiZGExZTI5YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-17T09:09:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-17T09:09:31Z"}, "message": "tree-vn.c (expressions_equal_p): Do not check type equality or compatibility before calling operand_equal_p.\n\n2008-04-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vn.c (expressions_equal_p): Do not check type\n\tequality or compatibility before calling operand_equal_p.\n\t* fold-const.c (operand_equal_p): Check equivalence of\n\tinteger constants before bailing out due to signedness or\n\tprecision differences.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Ignore\n\tspurious differences in type qualification.  Ignore types\n\tfor COMPONENT_REFs at all.\n\n\t* gcc.dg/tree-ssa/ssa-fre-17.c: New testcase.\n\nFrom-SVN: r134384", "tree": {"sha": "f8f7712b31bdddfc402983df7bb2949ee076e2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f7712b31bdddfc402983df7bb2949ee076e2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba2e189251286ceb6830a36bbbf44d20bda1e29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e189251286ceb6830a36bbbf44d20bda1e29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2e189251286ceb6830a36bbbf44d20bda1e29a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e189251286ceb6830a36bbbf44d20bda1e29a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "499928c1545bc0ff97231760e8552cb66873640b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499928c1545bc0ff97231760e8552cb66873640b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499928c1545bc0ff97231760e8552cb66873640b"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "4a3a4d0bd5303283b7053a63e682d988dceea98a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -1,3 +1,14 @@\n+2008-04-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vn.c (expressions_equal_p): Do not check type\n+\tequality or compatibility before calling operand_equal_p.\n+\t* fold-const.c (operand_equal_p): Check equivalence of\n+\tinteger constants before bailing out due to signedness or\n+\tprecision differences.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Ignore\n+\tspurious differences in type qualification.  Ignore types\n+\tfor COMPONENT_REFs at all.\n+\n 2008-04-17  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh.c (expand_cbranchdi4): Use original operands for"}, {"sha": "4e467615dd12940a2db1a42e1af4dc421dc22882", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -3026,6 +3026,11 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n   if (TREE_CODE (arg0) == ERROR_MARK || TREE_CODE (arg1) == ERROR_MARK)\n     return 0;\n \n+  /* Check equality of integer constants before bailing out due to\n+     precision differences.  */\n+  if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n+    return tree_int_cst_equal (arg0, arg1);\n+\n   /* If both types don't have the same signedness, then we can't consider\n      them equal.  We must check this before the STRIP_NOPS calls\n      because they may change the signedness of the arguments.  */"}, {"sha": "3723bcf7392aefae29d7b153bddb7b4fa33742f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -1,3 +1,7 @@\n+2008-04-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-17.c: New testcase.\n+\n 2008-04-17  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.dg/long-long-compare-1.c: New testcase. "}, {"sha": "aced64977eaf76b3cbb5c2b871a498d0a8a4af9e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-17.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-17.c?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details -fno-tree-sra\" } */\n+\n+struct Bar {\n+  int dom;\n+};\n+struct Foo {\n+  struct Bar doms[3];\n+};\n+\n+int foo(int i, int j, int k)\n+{\n+  struct Foo f;\n+\n+  f.doms[0].dom = i;\n+  f.doms[1].dom = j;\n+  f.doms[2].dom = k;\n+  return f.doms[0LL].dom;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced f.doms\\\\\\[0\\\\\\].dom with i_\" \"fre\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */\n+"}, {"sha": "6fc0840150f8077fe19b2d335e8f21f9982a1b2a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -511,7 +511,8 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n       vn_reference_op_s temp;\n \n       memset (&temp, 0, sizeof (temp));\n-      temp.type = TREE_TYPE (ref);\n+      /* We do not care for spurious type qualifications.  */\n+      temp.type = TYPE_MAIN_VARIANT (TREE_TYPE (ref));\n       temp.opcode = TREE_CODE (ref);\n \n       switch (temp.opcode)\n@@ -528,6 +529,10 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \t  temp.op1 = TREE_OPERAND (ref, 2);\n \t  break;\n \tcase COMPONENT_REF:\n+\t  /* The field decl is enough to unambiguously specify the field,\n+\t     a matching type is not necessary and a mismatching type\n+\t     is always a spurious difference.  */\n+\t  temp.type = NULL_TREE;\n \t  /* If this is a reference to a union member, record the union\n \t     member size as operand.  Do so only if we are doing\n \t     expression insertion (during FRE), as PRE currently gets\n@@ -536,10 +541,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \t      && TREE_CODE (DECL_CONTEXT (TREE_OPERAND (ref, 1))) == UNION_TYPE\n \t      && integer_zerop (DECL_FIELD_OFFSET (TREE_OPERAND (ref, 1)))\n \t      && integer_zerop (DECL_FIELD_BIT_OFFSET (TREE_OPERAND (ref, 1))))\n-\t    {\n-\t      temp.type = NULL_TREE;\n-\t      temp.op0 = TYPE_SIZE (TREE_TYPE (TREE_OPERAND (ref, 1)));\n-\t    }\n+\t    temp.op0 = TYPE_SIZE (TREE_TYPE (TREE_OPERAND (ref, 1)));\n \t  else\n \t    /* Record field as operand.  */\n \t    temp.op0 = TREE_OPERAND (ref, 1);"}, {"sha": "40efea6f8f7222eb73dd062f05ef8eecd3baa46c", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2e189251286ceb6830a36bbbf44d20bda1e29a/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=ba2e189251286ceb6830a36bbbf44d20bda1e29a", "patch": "@@ -83,8 +83,6 @@ expressions_equal_p (tree e1, tree e2)\n \n     }\n   else if (TREE_CODE (e1) == TREE_CODE (e2)\n-\t   && (te1 == te2\n-\t       || types_compatible_p (te1, te2))\n \t   && operand_equal_p (e1, e2, OEP_PURE_SAME))\n     return true;\n "}]}