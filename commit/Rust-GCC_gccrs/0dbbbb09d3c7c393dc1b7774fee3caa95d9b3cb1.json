{"sha": "0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiYmJiMDlkM2M3YzM5M2RjMWI3Nzc0ZmVlM2NhYTk1ZDliM2NiMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-15T19:56:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1991-12-15T19:56:55Z"}, "message": "Initial revision\n\nFrom-SVN: r119", "tree": {"sha": "68f0b9cf3aa48e6fc0140296571bb4f0b67e67da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f0b9cf3aa48e6fc0140296571bb4f0b67e67da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1/comments", "author": null, "committer": null, "parents": [{"sha": "df2632b0c5812a9cc45d9a1030e82e1ba68f36cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2632b0c5812a9cc45d9a1030e82e1ba68f36cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2632b0c5812a9cc45d9a1030e82e1ba68f36cd"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "0ea8d9287b08bc06b4abe0236b8149e0bc5a867a", "filename": "gcc/ginclude/stdarg.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=0dbbbb09d3c7c393dc1b7774fee3caa95d9b3cb1", "patch": "@@ -0,0 +1,46 @@\n+/* stdarg.h for GNU.\n+   Note that the type used in va_arg is supposed to match the\n+   actual type **after default promotions**.\n+   Thus, va_arg (..., short) is not valid.  */\n+\n+#ifndef _STDARG_H\n+#define _STDARG_H\n+\n+#ifdef __m88k__\n+#include \"va-m88k.h\"\n+#else\n+#ifdef __i860__\n+#include \"va-i860.h\"\n+#else\n+\n+/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.  */\n+#ifndef _VA_LIST_\n+#define _VA_LIST_\n+typedef char *va_list;\n+#endif /* _VA_LIST_ */\n+\n+/* Amount of space required in an argument list for an arg of type TYPE.\n+   TYPE may alternatively be an expression whose type is used.  */\n+\n+#define __va_rounded_size(TYPE)  \\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+\n+#ifndef __sparc__\n+#define va_start(AP, LASTARG) \t\t\t\t\t\t\\\n+ (AP = ((char *) __builtin_next_arg ()))\n+#else\n+#define va_start(AP, LASTARG) \t\t\t\t\t\t\\\n+ (__builtin_saveregs (),\t\t\t\t\t\t\\\n+  AP = ((char *) __builtin_next_arg ()))\n+#endif\n+\n+void va_end (va_list);\t\t/* Defined in gnulib */\n+#define va_end(AP)\n+\n+#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n+ (AP += __va_rounded_size (TYPE),\t\t\t\t\t\\\n+  *((TYPE *) (AP - __va_rounded_size (TYPE))))\n+\n+#endif /* not i860 */\n+#endif /* not m88k */\n+#endif /* _STDARG_H */"}]}