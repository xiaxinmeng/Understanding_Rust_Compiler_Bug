{"sha": "a9a81e7d6a50fc249f22af07504e9620f93d6037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhODFlN2Q2YTUwZmMyNDlmMjJhZjA3NTA0ZTk2MjBmOTNkNjAzNw==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2007-10-12T18:43:33Z"}, "committer": {"name": "Simon Martin", "email": "simartin@gcc.gnu.org", "date": "2007-10-12T18:43:33Z"}, "message": "re PR c++/26698 (g++ accepts const-incorrect code due to conversion function)\n\ngcc/cp/\n\n2007-10-12  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/26698\n\t* call.c (build_user_type_conversion_1): Do not consider conversion\n\tfunctions to convert a (possibly cv-qualified) object to the (possibly\n\tcv-qualified) same object type (or a reference to it), to a (possibly\n\tcv-qualified) base class of that type (or a reference to it).\n\ngcc/testsuite/\n\n2007-10-12  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/26698\n\t* g++.dg/conversion/op4.C: New test.\n\nFrom-SVN: r129274", "tree": {"sha": "eabcc4bcf303645f96501855cd21ddaeac0d8c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eabcc4bcf303645f96501855cd21ddaeac0d8c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9a81e7d6a50fc249f22af07504e9620f93d6037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a81e7d6a50fc249f22af07504e9620f93d6037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a81e7d6a50fc249f22af07504e9620f93d6037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a81e7d6a50fc249f22af07504e9620f93d6037/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d9597e148163a10bad52f7206a223bb236a20d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9597e148163a10bad52f7206a223bb236a20d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9597e148163a10bad52f7206a223bb236a20d7"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "bc25402a0e9d50159bed1f29e5dd6fa55848d8f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9a81e7d6a50fc249f22af07504e9620f93d6037", "patch": "@@ -1,3 +1,11 @@\n+2007-10-12  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/26698\n+\t* call.c (build_user_type_conversion_1): Do not consider conversion\n+\tfunctions to convert a (possibly cv-qualified) object to the (possibly\n+\tcv-qualified) same object type (or a reference to it), to a (possibly\n+\tcv-qualified) base class of that type (or a reference to it).\n+\n 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n \n \t* pt.c (tsubst): Use template_parm_level_and_index."}, {"sha": "6ca0a957f425f61e50ced3947f3f8be524627cf9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a9a81e7d6a50fc249f22af07504e9620f93d6037", "patch": "@@ -2601,7 +2601,21 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n     ctors = lookup_fnfields (totype, complete_ctor_identifier, 0);\n \n   if (IS_AGGR_TYPE (fromtype))\n-    conv_fns = lookup_conversions (fromtype);\n+    {\n+      tree to_nonref = non_reference (totype);\n+      if (same_type_ignoring_top_level_qualifiers_p (to_nonref, fromtype) ||\n+\t  (CLASS_TYPE_P (to_nonref) && CLASS_TYPE_P (fromtype)\n+\t   && DERIVED_FROM_P (to_nonref, fromtype)))\n+\t{\n+\t  /* [class.conv.fct] A conversion function is never used to\n+\t     convert a (possibly cv-qualified) object to the (possibly\n+\t     cv-qualified) same object type (or a reference to it), to a\n+\t     (possibly cv-qualified) base class of that type (or a\n+\t     reference to it)...  */\n+\t}\n+      else\n+\tconv_fns = lookup_conversions (fromtype);\n+    }\n \n   candidates = 0;\n   flags |= LOOKUP_NO_CONVERSION;"}, {"sha": "6b0c2f82c34e485d3d07ad3fd342f7c9f3ba06fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9a81e7d6a50fc249f22af07504e9620f93d6037", "patch": "@@ -1,3 +1,8 @@\n+2007-10-12  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/26698\n+\t* g++.dg/conversion/op4.C: New test.\n+\n 2007-10-12  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* g++.dg/torture/pr33572.C (main): Allow argc to be zero."}, {"sha": "164bbcdc4131a01b4021079458257c248db1fcf5", "filename": "gcc/testsuite/g++.dg/conversion/op4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a81e7d6a50fc249f22af07504e9620f93d6037/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C?ref=a9a81e7d6a50fc249f22af07504e9620f93d6037", "patch": "@@ -0,0 +1,19 @@\n+/* PR c++/26698 */\n+/* { dg-do \"compile\" } */\n+\n+struct X {\n+  int x;\n+  X (int i = 0) : x (i) {}\n+  operator X& (void) const {\n+    return *(new X);\n+  }\n+};\n+\n+void add_one (X & ref) { /* { dg-error \"in passing argument\" } */\n+  ++ ref.x;\n+}\n+\n+void foo() {\n+  X const a (2);\n+  add_one(a); /* { dg-error \"invalid initialization of reference of type\" } */\n+}"}]}