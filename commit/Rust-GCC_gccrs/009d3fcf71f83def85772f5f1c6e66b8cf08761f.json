{"sha": "009d3fcf71f83def85772f5f1c6e66b8cf08761f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5ZDNmY2Y3MWY4M2RlZjg1NzcyZjVmMWM2ZTY2YjhjZjA4NzYxZg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-03-22T12:55:47Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-03-22T12:55:47Z"}, "message": "tree.c (build_call_1): New function.\n\n\t* tree.c (build_call_1): New function.\n\t(build_call_valist, build_call_array_loc, build_call_vec): Call it.\n\nFrom-SVN: r171288", "tree": {"sha": "303624cebce8af17ea56035db780c126c83ccb42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303624cebce8af17ea56035db780c126c83ccb42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009d3fcf71f83def85772f5f1c6e66b8cf08761f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009d3fcf71f83def85772f5f1c6e66b8cf08761f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009d3fcf71f83def85772f5f1c6e66b8cf08761f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009d3fcf71f83def85772f5f1c6e66b8cf08761f/comments", "author": null, "committer": null, "parents": [{"sha": "7bec30e1097eacc991e358cc7a97b6b22f611a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bec30e1097eacc991e358cc7a97b6b22f611a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bec30e1097eacc991e358cc7a97b6b22f611a31"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "4413aa625aa1606947428967de2542b92ad9bb43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009d3fcf71f83def85772f5f1c6e66b8cf08761f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009d3fcf71f83def85772f5f1c6e66b8cf08761f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=009d3fcf71f83def85772f5f1c6e66b8cf08761f", "patch": "@@ -1,3 +1,8 @@\n+2011-03-22  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.c (build_call_1): New function.\n+\t(build_call_valist, build_call_array_loc, build_call_vec): Call it.\n+\n 2011-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/48228"}, {"sha": "efa51bde3b1ac6b11582d379812fd6db35a2c786", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009d3fcf71f83def85772f5f1c6e66b8cf08761f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009d3fcf71f83def85772f5f1c6e66b8cf08761f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=009d3fcf71f83def85772f5f1c6e66b8cf08761f", "patch": "@@ -9694,6 +9694,23 @@ build_vl_exp_stat (enum tree_code code, int len MEM_STAT_DECL)\n   return t;\n }\n \n+/* Helper function for build_call_* functions; build a CALL_EXPR with\n+   indicated RETURN_TYPE, FN, and NARGS, but do not initialize any of\n+   the argument slots.  */\n+\n+static tree\n+build_call_1 (tree return_type, tree fn, int nargs)\n+{\n+  tree t;\n+\n+  t = build_vl_exp (CALL_EXPR, nargs + 3);\n+  TREE_TYPE (t) = return_type;\n+  CALL_EXPR_FN (t) = fn;\n+  CALL_EXPR_STATIC_CHAIN (t) = NULL;\n+\n+  return t;\n+}\n+\n /* Build a CALL_EXPR of class tcc_vl_exp with the indicated RETURN_TYPE and\n    FN and a null static chain slot.  NARGS is the number of call arguments\n    which are specified as \"...\" arguments.  */\n@@ -9719,10 +9736,7 @@ build_call_valist (tree return_type, tree fn, int nargs, va_list args)\n   tree t;\n   int i;\n \n-  t = build_vl_exp (CALL_EXPR, nargs + 3);\n-  TREE_TYPE (t) = return_type;\n-  CALL_EXPR_FN (t) = fn;\n-  CALL_EXPR_STATIC_CHAIN (t) = NULL_TREE;\n+  t = build_call_1 (return_type, fn, nargs);\n   for (i = 0; i < nargs; i++)\n     CALL_EXPR_ARG (t, i) = va_arg (args, tree);\n   process_call_operands (t);\n@@ -9740,10 +9754,7 @@ build_call_array_loc (location_t loc, tree return_type, tree fn,\n   tree t;\n   int i;\n \n-  t = build_vl_exp (CALL_EXPR, nargs + 3);\n-  TREE_TYPE (t) = return_type;\n-  CALL_EXPR_FN (t) = fn;\n-  CALL_EXPR_STATIC_CHAIN (t) = NULL_TREE;\n+  t = build_call_1 (return_type, fn, nargs);\n   for (i = 0; i < nargs; i++)\n     CALL_EXPR_ARG (t, i) = args[i];\n   process_call_operands (t);\n@@ -9759,10 +9770,7 @@ build_call_vec (tree return_type, tree fn, VEC(tree,gc) *args)\n   tree ret, t;\n   unsigned int ix;\n \n-  ret = build_vl_exp (CALL_EXPR, VEC_length (tree, args) + 3);\n-  TREE_TYPE (ret) = return_type;\n-  CALL_EXPR_FN (ret) = fn;\n-  CALL_EXPR_STATIC_CHAIN (ret) = NULL_TREE;\n+  ret = build_call_1 (return_type, fn, VEC_length (tree, args));\n   FOR_EACH_VEC_ELT (tree, args, ix, t)\n     CALL_EXPR_ARG (ret, ix) = t;\n   process_call_operands (ret);"}]}