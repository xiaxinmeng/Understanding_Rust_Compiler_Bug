{"sha": "128dc8e23075f70721ff1cbe3294021e7dd82834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4ZGM4ZTIzMDc1ZjcwNzIxZmYxY2JlMzI5NDAyMWU3ZGQ4MjgzNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-11T12:28:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-11T12:28:40Z"}, "message": "params.c (set_param_value_internal): New.\n\n\t* params.c (set_param_value_internal): New.\n\t(set_param_value): Use set_param_value_internal.\n\t(maybe_set_param_value, set_default_param_value): New.\n\t* params.h (PARAM_VALUE, PARAM_SET_P): Make into rvalues.\n\t(maybe_set_param_value, set_default_param_value): Declare.\n\t* config/arm/arm.c (arm_option_override): Use\n\tmaybe_set_param_value.\n\t* config/i386/i386.c (ix86_option_override_internal): Use\n\tmaybe_set_param_value.\n\t* config/ia64/ia64.c (ia64_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): New.\n\t(ia64_option_optimization): Move some code to\n\tia64_option_default_params.\n\t* config/picochip/picochip.c (picochip_option_override): Use\n\tmaybe_set_param_value.\n\t* config/rs6000/rs6000.c (rs6000_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): New.\n\t(rs6000_option_override_internal): Use maybe_set_param_value.\n\t(rs6000_option_optimization): Move some code to\n\trs6000_option_default_params.\n\t* config/s390/s390.c (s390_option_override): Use\n\tmaybe_set_param_value.\n\t* config/sh/sh.c (sh_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): New.\n\t(sh_option_optimization): Move some code to\n\tsh_option_default_params.\n\t* config/sparc/sparc.c (sparc_option_override): Use\n\tmaybe_set_param_value.\n\t* config/spu/spu.c (spu_option_default_params,\n\tTARGET_OPTION_DEFAULT_PARAMS): New.\n\t(spu_option_optimization): Move some code to\n\tspu_option_default_params.\n\t(spu_option_override): Use maybe_set_param_value.\n\t* doc/tm.texi.in (TARGET_OPTION_DEFAULT_PARAMS): New @hook.\n\t* doc/tm.texi: Regenerate.\n\t* ggc-common.c (init_ggc_heuristics): Use set_default_param_value.\n\t* opts.c (init_options_once): Use PARAM_VALUE not direct access to\n\tcompiler_params.\n\t(default_options_optimization): Use maybe_set_param_value.\n\t(finish_options): Use maybe_set_param_value.\n\t* target.def (target_option.default_params): New hook.\n\t* toplev.c (general_init): Call\n\ttargetm.target_option.default_params.\n\nFrom-SVN: r165303", "tree": {"sha": "10941206f59ba4ef8b1a814126f81d1e02f511d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10941206f59ba4ef8b1a814126f81d1e02f511d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/128dc8e23075f70721ff1cbe3294021e7dd82834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128dc8e23075f70721ff1cbe3294021e7dd82834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128dc8e23075f70721ff1cbe3294021e7dd82834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128dc8e23075f70721ff1cbe3294021e7dd82834/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4907769827b246d80145601c6fa5caf84f04f941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4907769827b246d80145601c6fa5caf84f04f941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4907769827b246d80145601c6fa5caf84f04f941"}], "stats": {"total": 310, "additions": 214, "deletions": 96}, "files": [{"sha": "19312f39d359704418619a918ae71d6883d7ba66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1,3 +1,49 @@\n+2010-10-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* params.c (set_param_value_internal): New.\n+\t(set_param_value): Use set_param_value_internal.\n+\t(maybe_set_param_value, set_default_param_value): New.\n+\t* params.h (PARAM_VALUE, PARAM_SET_P): Make into rvalues.\n+\t(maybe_set_param_value, set_default_param_value): Declare.\n+\t* config/arm/arm.c (arm_option_override): Use\n+\tmaybe_set_param_value.\n+\t* config/i386/i386.c (ix86_option_override_internal): Use\n+\tmaybe_set_param_value.\n+\t* config/ia64/ia64.c (ia64_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): New.\n+\t(ia64_option_optimization): Move some code to\n+\tia64_option_default_params.\n+\t* config/picochip/picochip.c (picochip_option_override): Use\n+\tmaybe_set_param_value.\n+\t* config/rs6000/rs6000.c (rs6000_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): New.\n+\t(rs6000_option_override_internal): Use maybe_set_param_value.\n+\t(rs6000_option_optimization): Move some code to\n+\trs6000_option_default_params.\n+\t* config/s390/s390.c (s390_option_override): Use\n+\tmaybe_set_param_value.\n+\t* config/sh/sh.c (sh_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): New.\n+\t(sh_option_optimization): Move some code to\n+\tsh_option_default_params.\n+\t* config/sparc/sparc.c (sparc_option_override): Use\n+\tmaybe_set_param_value.\n+\t* config/spu/spu.c (spu_option_default_params,\n+\tTARGET_OPTION_DEFAULT_PARAMS): New.\n+\t(spu_option_optimization): Move some code to\n+\tspu_option_default_params.\n+\t(spu_option_override): Use maybe_set_param_value.\n+\t* doc/tm.texi.in (TARGET_OPTION_DEFAULT_PARAMS): New @hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* ggc-common.c (init_ggc_heuristics): Use set_default_param_value.\n+\t* opts.c (init_options_once): Use PARAM_VALUE not direct access to\n+\tcompiler_params.\n+\t(default_options_optimization): Use maybe_set_param_value.\n+\t(finish_options): Use maybe_set_param_value.\n+\t* target.def (target_option.default_params): New hook.\n+\t* toplev.c (general_init): Call\n+\ttargetm.target_option.default_params.\n+\n 2010-10-11  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/45902"}, {"sha": "855f39e38585fb08dccffa74958e0cab3948be7d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1953,13 +1953,12 @@ arm_option_override (void)\n       flag_reorder_blocks = 1;\n     }\n \n-  if (!PARAM_SET_P (PARAM_GCSE_UNRESTRICTED_COST)\n-      && flag_pic)\n+  if (flag_pic)\n     /* Hoisting PIC address calculations more aggressively provides a small,\n        but measurable, size reduction for PIC code.  Therefore, we decrease\n        the bar for unrestricted expression hoisting to the cost of PIC address\n        calculation, which is 2 instructions.  */\n-    set_param_value (\"gcse-unrestricted-cost\", 2);\n+    maybe_set_param_value (PARAM_GCSE_UNRESTRICTED_COST, 2);\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();"}, {"sha": "4db819e069136ba766231b40f7793b656539368a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -3632,15 +3632,11 @@ ix86_option_override_internal (bool main_args_p)\n   if (!TARGET_SCHEDULE)\n     flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n \n-  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n-    set_param_value (\"simultaneous-prefetches\",\n-\t\t     ix86_cost->simultaneous_prefetches);\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n-    set_param_value (\"l1-cache-line-size\", ix86_cost->prefetch_block);\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_SIZE))\n-    set_param_value (\"l1-cache-size\", ix86_cost->l1_cache_size);\n-  if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n-    set_param_value (\"l2-cache-size\", ix86_cost->l2_cache_size);\n+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n+\t\t\t ix86_cost->simultaneous_prefetches);\n+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE, ix86_cost->prefetch_block);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, ix86_cost->l1_cache_size);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, ix86_cost->l2_cache_size);\n \n   /* Enable sw prefetching at -O3 for CPUS that prefetching is helpful.  */\n   if (flag_prefetch_loop_arrays < 0"}, {"sha": "f7489f9704a8f3ffacaa13b4f80323844f17d1b2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -203,6 +203,7 @@ static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n static void ia64_option_override (void);\n static void ia64_option_optimization (int, int);\n+static void ia64_option_default_params (void);\n static bool ia64_can_eliminate (const int, const int);\n static enum machine_mode hfa_element_mode (const_tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -372,6 +373,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_OPTION_OVERRIDE ia64_option_override\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION ia64_option_optimization\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS ia64_option_default_params\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE ia64_output_function_prologue\n@@ -10839,15 +10842,20 @@ ia64_option_optimization (int level ATTRIBUTE_UNUSED,\n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n   SUBTARGET_OPTIMIZATION_OPTIONS;\n #endif\n+}\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+static void\n+ia64_option_default_params (void)\n+{\n   /* Let the scheduler form additional regions.  */\n-  set_param_value (\"max-sched-extend-regions-iters\", 2);\n+  set_default_param_value (PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS, 2);\n \n   /* Set the default values for cache-related parameters.  */\n-  set_param_value (\"simultaneous-prefetches\", 6);\n-  set_param_value (\"l1-cache-line-size\", 32);\n+  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6);\n+  set_default_param_value (PARAM_L1_CACHE_LINE_SIZE, 32);\n \n-  set_param_value(\"sched-mem-true-dep-cost\", 4);\n+  set_default_param_value (PARAM_SCHED_MEM_TRUE_DEP_COST, 4);\n }\n \n /* HP-UX version_id attribute."}, {"sha": "b3b3e3bff8480e3e751c92841ddcc26097a853d7", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -342,10 +342,10 @@ picochip_option_override (void)\n   /* If we are optimizing for stack, dont let inliner to inline functions\n      that could potentially increase stack size.*/\n    if (flag_conserve_stack)\n-   {\n-     PARAM_VALUE (PARAM_LARGE_STACK_FRAME) = 0;\n-     PARAM_VALUE (PARAM_STACK_FRAME_GROWTH) = 0;\n-   }\n+     {\n+       maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 0);\n+       maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 0);\n+     }\n \n   /* Turn off the elimination of unused types. The elaborator\n      generates various interesting types to represent constants,"}, {"sha": "cd1c8cc21944d604f994fbaeab154fc96e20d4b9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1137,6 +1137,7 @@ static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n static void rs6000_option_optimization (int, int);\n+static void rs6000_option_default_params (void);\n static bool rs6000_handle_option (size_t, const char *, int);\n static void rs6000_parse_tls_size_option (void);\n static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n@@ -1604,6 +1605,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION rs6000_option_optimization\n \n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n@@ -3154,15 +3158,12 @@ rs6000_option_override_internal (const char *default_cpu)\n \tgcc_unreachable ();\n       }\n \n-  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n-    set_param_value (\"simultaneous-prefetches\",\n-\t\t     rs6000_cost->simultaneous_prefetches);\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_SIZE))\n-    set_param_value (\"l1-cache-size\", rs6000_cost->l1_cache_size);\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n-    set_param_value (\"l1-cache-line-size\", rs6000_cost->cache_line_size);\n-  if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n-    set_param_value (\"l2-cache-size\", rs6000_cost->l2_cache_size);\n+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n+\t\t\t rs6000_cost->simultaneous_prefetches);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, rs6000_cost->l1_cache_size);\n+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n+\t\t\t rs6000_cost->cache_line_size);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, rs6000_cost->l2_cache_size);\n \n   /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n      can be optimized to ap = __builtin_next_arg (0).  */\n@@ -3681,16 +3682,22 @@ rs6000_option_optimization (int level ATTRIBUTE_UNUSED,\n        avoid calling them when that's the only reason we would.  */\n     flag_errno_math = 0;\n \n-  /* Double growth factor to counter reduced min jump length.  */\n-  set_param_value (\"max-grow-copy-bb-insns\", 16);\n-\n   /* Enable section anchors by default.\n      Skip section anchors for Objective C and Objective C++\n      until front-ends fixed.  */\n   if (!TARGET_MACHO && lang_hooks.name[4] != 'O')\n     flag_section_anchors = 2;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+rs6000_option_default_params (void)\n+{\n+  /* Double growth factor to counter reduced min jump length.  */\n+  set_default_param_value (PARAM_MAX_GROW_COPY_BB_INSNS, 16);\n+}\n+\n static enum fpu_type_t\n rs6000_parse_fpu_option (const char *option)\n {"}, {"sha": "04fcee2071e8c72b7c522e667d9c6b25c1638032", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1687,30 +1687,22 @@ s390_option_override (void)\n   if (s390_tune == PROCESSOR_2097_Z10\n       || s390_tune == PROCESSOR_2817_Z196)\n     {\n-      if (!PARAM_SET_P (PARAM_MAX_UNROLLED_INSNS))\n-\tset_param_value (\"max-unrolled-insns\", 100);\n-      if (!PARAM_SET_P (PARAM_MAX_UNROLL_TIMES))\n-\tset_param_value (\"max-unroll-times\", 32);\n-      if (!PARAM_SET_P (PARAM_MAX_COMPLETELY_PEELED_INSNS))\n-\tset_param_value (\"max-completely-peeled-insns\", 2000);\n-      if (!PARAM_SET_P (PARAM_MAX_COMPLETELY_PEEL_TIMES))\n-\tset_param_value (\"max-completely-peel-times\", 64);\n+      maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100);\n+      maybe_set_param_value (PARAM_MAX_UNROLL_TIMES, 32);\n+      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEELED_INSNS, 2000);\n+      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 64);\n     }\n \n   set_param_value (\"max-pending-list-length\", 256);\n   /* values for loop prefetching */\n   set_param_value (\"l1-cache-line-size\", 256);\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_SIZE))\n-    set_param_value (\"l1-cache-size\", 128);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, 128);\n   /* s390 has more than 2 levels and the size is much larger.  Since\n      we are always running virtualized assume that we only get a small\n      part of the caches above l1.  */\n-  if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n-    set_param_value (\"l2-cache-size\", 1500);\n-  if (!PARAM_SET_P (PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO))\n-    set_param_value (\"prefetch-min-insn-to-mem-ratio\", 2);\n-  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n-    set_param_value (\"simultaneous-prefetches\", 6);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, 1500);\n+  maybe_set_param_value (PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO, 2);\n+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6);\n \n   /* This cannot reside in s390_option_optimization since HAVE_prefetch\n      requires the arch flags to be evaluated already.  Since prefetching"}, {"sha": "53b70ec83e8b8f007dfcb6f3f834d07783cc55f2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -184,6 +184,7 @@ static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n static void sh_option_optimization (int, int);\n+static void sh_option_default_params (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n static rtx push (int);\n@@ -342,6 +343,8 @@ static const struct attribute_spec sh_attribute_table[] =\n #define TARGET_OPTION_OVERRIDE sh_option_override\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION sh_option_optimization\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n \n #undef TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND sh_print_operand\n@@ -731,8 +734,13 @@ sh_option_optimization (int level, int size)\n      the user explicitly requested this to be on or off.  */\n   if (flag_schedule_insns > 0)\n     flag_schedule_insns = 2;\n+}\n \n-  set_param_value (\"simultaneous-prefetches\", 2);\n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+static void\n+sh_option_default_params (void)\n+{\n+  set_default_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 2);\n }\n \n /* Implement TARGET_OPTION_OVERRIDE macro.  Validate and override "}, {"sha": "68073017845ab92ec6ede7c1f8504ff363af8902", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -916,21 +916,19 @@ sparc_option_override (void)\n     target_flags |= MASK_LONG_DOUBLE_128;\n #endif\n \n-  if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n-    set_param_value (\"simultaneous-prefetches\",\n-\t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA2)\n-\t\t      ? 2\n-\t\t      : (sparc_cpu == PROCESSOR_ULTRASPARC3\n-\t\t\t ? 8 : 3)));\n-  if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n-    set_param_value (\"l1-cache-line-size\",\n-\t\t     ((sparc_cpu == PROCESSOR_ULTRASPARC\n-\t\t       || sparc_cpu == PROCESSOR_ULTRASPARC3\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA\n-\t\t       || sparc_cpu == PROCESSOR_NIAGARA2)\n-\t\t      ? 64 : 32));\n+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n+\t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n+\t\t\t  ? 2\n+\t\t\t  : (sparc_cpu == PROCESSOR_ULTRASPARC3\n+\t\t\t     ? 8 : 3)));\n+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n+\t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n+\t\t\t   || sparc_cpu == PROCESSOR_ULTRASPARC3\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA\n+\t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n+\t\t\t  ? 64 : 32));\n }\n \f\n /* Miscellaneous utilities.  */"}, {"sha": "9bc78e801b8b478bfe19925812a7b12d2da2a1a6", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -151,6 +151,7 @@ char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n /*  Prototypes and external defs.  */\n static void spu_option_override (void);\n static void spu_option_optimization (int, int);\n+static void spu_option_default_params (void);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n static bool spu_scalar_mode_supported_p (enum machine_mode mode);\n@@ -482,6 +483,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION spu_option_optimization\n \n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS spu_option_default_params\n+\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n \n@@ -490,23 +494,27 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n static void\n spu_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n {\n-  /* Override some of the default param values.  With so many registers\n-     larger values are better for these params.  */\n-  MAX_PENDING_LIST_LENGTH = 128;\n-\n   /* With so many registers this is better on by default. */\n   flag_rename_registers = 1;\n }\n \n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+static void\n+spu_option_default_params (void)\n+{\n+  /* Override some of the default param values.  With so many registers\n+     larger values are better for these params.  */\n+  set_default_param_value (PARAM_MAX_PENDING_LIST_LENGTH, 128);\n+}\n+\n /* Implement TARGET_OPTION_OVERRIDE.  */\n static void\n spu_option_override (void)\n {\n   /* Small loops will be unpeeled at -O3.  For SPU it is more important\n      to keep code small by default.  */\n-  if (!flag_unroll_loops && !flag_peel_loops\n-      && !PARAM_SET_P (PARAM_MAX_COMPLETELY_PEEL_TIMES))\n-    PARAM_VALUE (PARAM_MAX_COMPLETELY_PEEL_TIMES) = 1;\n+  if (!flag_unroll_loops && !flag_peel_loops)\n+    maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 1);\n \n   flag_omit_frame_pointer = 1;\n "}, {"sha": "f98176a132efe5de66a62365c6c8137dc3df2562", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -812,6 +812,10 @@ this hook!}  The debugging options are not supposed to alter the\n generated code.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_OPTION_DEFAULT_PARAMS (void)\n+Set target-dependent default values for @option{--param} settings, using calls to @code{set_default_param_value}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_HELP (void)\n This hook is called in response to the user invoking\n @option{--target-help} on the command line.  It gives the target a"}, {"sha": "41d5aee1b0182b1b3b590b6df4cabf5d6f303636", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -812,6 +812,8 @@ this hook!}  The debugging options are not supposed to alter the\n generated code.\n @end deftypefn\n \n+@hook TARGET_OPTION_DEFAULT_PARAMS\n+\n @hook TARGET_HELP\n This hook is called in response to the user invoking\n @option{--target-help} on the command line.  It gives the target a"}, {"sha": "cf3893373915252ebf471df2833e685c23878984", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -857,8 +857,8 @@ void\n init_ggc_heuristics (void)\n {\n #if !defined ENABLE_GC_CHECKING && !defined ENABLE_GC_ALWAYS_COLLECT\n-  set_param_value (\"ggc-min-expand\", ggc_min_expand_heuristic ());\n-  set_param_value (\"ggc-min-heapsize\", ggc_min_heapsize_heuristic ());\n+  set_default_param_value (GGC_MIN_EXPAND, ggc_min_expand_heuristic ());\n+  set_default_param_value (GGC_MIN_HEAPSIZE, ggc_min_heapsize_heuristic ());\n #endif\n }\n "}, {"sha": "38f2faa6b5106113801afae2a2410030ec3aaca2", "filename": "gcc/opts.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -669,11 +669,11 @@ init_options_once (void)\n \n   /* Save initial values of parameters we reset.  */\n   initial_min_crossjump_insns\n-    = compiler_params[PARAM_MIN_CROSSJUMP_INSNS].value;\n+    = PARAM_VALUE (PARAM_MIN_CROSSJUMP_INSNS);\n   initial_max_fields_for_field_sensitive\n-    = compiler_params[PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE].value;\n+    = PARAM_VALUE (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE);\n   initial_loop_invariant_max_bbs_in_loop\n-    = compiler_params[PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP].value;\n+    = PARAM_VALUE (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP);\n }\n \n /* Initialize OPTS and OPTS_SET before using them in parsing options.  */\n@@ -853,12 +853,12 @@ default_options_optimization (struct gcc_options *opts,\n   flag_ipa_sra = opt2;\n \n   /* Track fields in field-sensitive alias analysis.  */\n-  set_param_value (\"max-fields-for-field-sensitive\",\n-\t\t   (opt2) ? 100 : initial_max_fields_for_field_sensitive);\n+  maybe_set_param_value (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE,\n+\t\t\t opt2 ? 100 : initial_max_fields_for_field_sensitive);\n \n   /* For -O1 only do loop invariant motion for very small loops.  */\n-  set_param_value (\"loop-invariant-max-bbs-in-loop\",\n-\t\t   (opt2) ? initial_loop_invariant_max_bbs_in_loop : 1000);\n+  maybe_set_param_value (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP,\n+\t\t\t opt2 ? initial_loop_invariant_max_bbs_in_loop : 1000);\n \n   /* -O3 optimizations.  */\n   opt3 = (optimize >= 3);\n@@ -891,10 +891,11 @@ default_options_optimization (struct gcc_options *opts,\n \toptimize = 2;\n \n       /* We want to crossjump as much as possible.  */\n-      set_param_value (\"min-crossjump-insns\", 1);\n+      maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1);\n     }\n   else\n-    set_param_value (\"min-crossjump-insns\", initial_min_crossjump_insns);\n+    maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS,\n+\t\t\t   initial_min_crossjump_insns);\n \n   /* -Ofast adds optimizations to -O3.  */\n   if (ofast)\n@@ -1114,10 +1115,8 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n \n   if (flag_conserve_stack)\n     {\n-      if (!PARAM_SET_P (PARAM_LARGE_STACK_FRAME))\n-        PARAM_VALUE (PARAM_LARGE_STACK_FRAME) = 100;\n-      if (!PARAM_SET_P (PARAM_STACK_FRAME_GROWTH))\n-        PARAM_VALUE (PARAM_STACK_FRAME_GROWTH) = 40;\n+      maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 100);\n+      maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 40);\n     }\n   if (flag_wpa || flag_ltrans)\n     {"}, {"sha": "666913a7b2572768ff5acccec3ef8df25b203336", "filename": "gcc/params.c", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1,5 +1,5 @@\n /* params.c - Run-time parameters.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n@@ -51,6 +51,21 @@ add_params (const param_info params[], size_t n)\n   num_compiler_params += n;\n }\n \n+/* Set the value of the parameter given by NUM to VALUE.  If\n+   EXPLICIT_P, this is being set by the user; otherwise it is being\n+   set implicitly by the compiler.  */\n+\n+static void\n+set_param_value_internal (compiler_param num, int value,\n+\t\t\t  bool explicit_p)\n+{\n+  size_t i = (size_t) num;\n+\n+  compiler_params[i].value = value;\n+  if (explicit_p)\n+    compiler_params[i].set = true;\n+}\n+\n /* Set the VALUE associated with the parameter given by NAME.  */\n \n void\n@@ -75,17 +90,34 @@ set_param_value (const char *name, int value)\n \t\t compiler_params[i].option,\n \t\t compiler_params[i].max_value);\n \telse\n-\t  {\n-\t    compiler_params[i].value = value;\n-\t    compiler_params[i].set = true;\n-\t  }\n+\t  set_param_value_internal ((compiler_param) i, value, true);\n \treturn;\n       }\n \n   /* If we didn't find this parameter, issue an error message.  */\n   error (\"invalid parameter %qs\", name);\n }\n \n+/* Set the value of the parameter given by NUM to VALUE, implicitly,\n+   if it has not been set explicitly by the user.  */\n+\n+void\n+maybe_set_param_value (compiler_param num, int value)\n+{\n+  if (!PARAM_SET_P (num))\n+    set_param_value_internal (num, value, false);\n+}\n+\n+/* Set the default value of a parameter given by NUM to VALUE, before\n+   option processing.  */\n+\n+void\n+set_default_param_value (compiler_param num, int value)\n+{\n+  gcc_assert (!PARAM_SET_P (num));\n+  set_param_value_internal (num, value, false);\n+}\n+\n /* Return the current value of num_compiler_params, for the benefit of\n    plugins that use parameters as features.  */\n "}, {"sha": "b924e781a1e4001130caf706ecce5d4d96d5221c", "filename": "gcc/params.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1,5 +1,5 @@\n /* params.h - Run-time parameters.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Written by Mark Mitchell <mark@codesourcery.com>.\n \n@@ -88,13 +88,24 @@ typedef enum compiler_param\n   LAST_PARAM\n } compiler_param;\n \n-/* The value of the parameter given by ENUM.  */\n+/* The value of the parameter given by ENUM.  Not an lvalue.  */\n #define PARAM_VALUE(ENUM) \\\n-  (compiler_params[(int) ENUM].value)\n+  ((int) compiler_params[(int) ENUM].value)\n \n-/* True if the value of the parameter was explicitly changed.  */\n+/* Set the value of the parameter given by NUM to VALUE, implicitly,\n+   if it has not been set explicitly by the user.  */\n+\n+extern void maybe_set_param_value (compiler_param num, int value);\n+\n+/* Set the default value of a parameter given by NUM to VALUE, before\n+   option processing.  */\n+\n+extern void set_default_param_value (compiler_param num, int value);\n+\n+/* True if the value of the parameter was explicitly changed.  Not an\n+   lvalue.  */\n #define PARAM_SET_P(ENUM) \\\n-  (compiler_params[(int) ENUM].set)\n+  ((bool) compiler_params[(int) ENUM].set)\n \n /* Macros for the various parameters.  */\n #define STRUCT_REORG_COLD_STRUCT_RATIO \\"}, {"sha": "9d5fe32122387e98120f4068951f5fa07a0f80b9", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -2340,6 +2340,13 @@ DEFHOOK\n  void, (int level, int size),\n  hook_void_int_int)\n \n+DEFHOOK\n+(default_params,\n+\"Set target-dependent default values for @option{--param} settings, using\\\n+ calls to @code{set_default_param_value}.\",\n+ void, (void),\n+ hook_void_void)\n+\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}, {"sha": "21d23fd0f64ebc8a1ba8acbfa5d88810606f3e50", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128dc8e23075f70721ff1cbe3294021e7dd82834/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=128dc8e23075f70721ff1cbe3294021e7dd82834", "patch": "@@ -1692,6 +1692,7 @@ general_init (const char *argv0)\n \n   /* Register the language-independent parameters.  */\n   add_params (lang_independent_params, LAST_PARAM);\n+  targetm.target_option.default_params ();\n \n   /* This must be done after add_params but before argument processing.  */\n   init_ggc_heuristics();"}]}