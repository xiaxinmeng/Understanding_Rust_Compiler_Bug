{"sha": "ce3649d27ace666b7be74481a0ec6f612cbb779a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzNjQ5ZDI3YWNlNjY2YjdiZTc0NDgxYTBlYzZmNjEyY2JiNzc5YQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-06-11T07:26:38Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-06-11T07:26:38Z"}, "message": "tm.texi (Run-time Target): Add comment about flag_iso and strict ANSI.\n\n2002-06-11  Eric Christopher  <echristo@redhat.com>\n\n\t* doc/tm.texi (Run-time Target): Add comment about flag_iso\n\tand strict ANSI.\n\t* config/mips/ecoff.h (CPP_PREDEFINES): Remove.\n\t* config/mips/ecoffl.h: Ditto.\n\t* config/mips/elf64.h (SUBTARGET_CPP_SPEC): Remove.\n\t(CPP_PREDEFINES): Ditto.\n\t* config/mips/elfl64.h: Ditto.\n\t* config/mips/elfl.h: Ditto.\n\t* config/mips/iris3.h (CPP_PREDEFINES, SUBTARGET_CPP_SPEC): #if 0\n\tout until irix header consolidation.\n\t* config/mips/iris5.h (CPP_PREDEFINES, SUBTARGET_CPP_SPEC): Replace\n\twith SUBTARGET_OS_CPP_BUILTINS.\n\t* config/mips/iris6.h: Ditto.\n\t(CPLUSPLUS_CPP_SPEC): Remove.\n\t* config/mips/linux.h: Ditto.\n\t* config/mips/netbsd.h: Ditto.\n\t* config/mips/openbsd.h: Ditto.\n\t* config/mips/rtems.h: Ditto.\n\t* config/mips/rtems64.h: Ditto.\n\t* config/mips/sni-svr4.h: Ditto.\n\t* config/mips/mips.h (ISA_MIPS1, ISA_MIPS2, ISA_MIPS3, ISA_MIPS4,\n\tISA_MIPS32, ISA_MIPS64): New defines.\n\t(GENERATE_MULT3_SI, HAVE_SQRT_P, ISA_HAS_64BIT_REGS,\n\tISA_HAS_BRANCHLIKELY, ISA_HAS_CONDMOVE, ISA_HAS_8CC, ISA_HAS_FP4,\n\tISA_HAS_COND_TRAP, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB,\n\tISA_HAS_CLZ_CLO, ISA_HAS_DCLZ_DCLO): Use.\n\t(TARGET_CPU_CPP_BUILTINS): Define.\n\t(CPP_PREDEFINES, LONG_MAX_SPEC, CPP_FPR_SPEC, CPP_SPEC): Remove.\n\t* config/mips/mips.md (mulsi3_mult3): Use ISA_MIPS32/64.\n\t(movdicc): Remove check for ISA_MIPS32.\n\t (bunordered, bordered, bungt, bunlt, buneq, bunge, bunle,\n\tsunordered_df, sunordered_sf, sordered_df, sordered_sf,\n\tsunlt_df, sunlt_sf, sungt_df, sungt_sf, suneq_df, suneq_sf, sunge_df,\n\tsunge_sf, sunle_df, sunle_sf): New patterns.\n\nFrom-SVN: r54493", "tree": {"sha": "2ea040c9b17cac66a710dc8a6cb3d1dc506ef59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ea040c9b17cac66a710dc8a6cb3d1dc506ef59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce3649d27ace666b7be74481a0ec6f612cbb779a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3649d27ace666b7be74481a0ec6f612cbb779a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3649d27ace666b7be74481a0ec6f612cbb779a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3649d27ace666b7be74481a0ec6f612cbb779a/comments", "author": null, "committer": null, "parents": [{"sha": "f5f35f6a37d247c35f83662537b4a495af7248d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f35f6a37d247c35f83662537b4a495af7248d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f35f6a37d247c35f83662537b4a495af7248d8"}], "stats": {"total": 1038, "additions": 673, "deletions": 365}, "files": [{"sha": "d1bad13ddcbfc930d101f85eca8685011cc7f336", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -1,3 +1,40 @@\n+2002-06-11  Eric Christopher  <echristo@redhat.com>\n+\n+\t* doc/tm.texi (Run-time Target): Add comment about flag_iso\n+\tand strict ANSI.\n+\t* config/mips/ecoff.h (CPP_PREDEFINES): Remove.\n+\t* config/mips/ecoffl.h: Ditto.\n+\t* config/mips/elf64.h (SUBTARGET_CPP_SPEC): Remove.\n+\t(CPP_PREDEFINES): Ditto.\n+\t* config/mips/elfl64.h: Ditto.\n+\t* config/mips/elfl.h: Ditto.\n+\t* config/mips/iris3.h (CPP_PREDEFINES, SUBTARGET_CPP_SPEC): #if 0\n+\tout until irix header consolidation.\n+\t* config/mips/iris5.h (CPP_PREDEFINES, SUBTARGET_CPP_SPEC): Replace\n+\twith SUBTARGET_OS_CPP_BUILTINS.\n+\t* config/mips/iris6.h: Ditto.\n+\t(CPLUSPLUS_CPP_SPEC): Remove.\n+\t* config/mips/linux.h: Ditto.\n+\t* config/mips/netbsd.h: Ditto.\n+\t* config/mips/openbsd.h: Ditto.\n+\t* config/mips/rtems.h: Ditto.\n+\t* config/mips/rtems64.h: Ditto.\n+\t* config/mips/sni-svr4.h: Ditto.\n+\t* config/mips/mips.h (ISA_MIPS1, ISA_MIPS2, ISA_MIPS3, ISA_MIPS4,\n+\tISA_MIPS32, ISA_MIPS64): New defines.\n+\t(GENERATE_MULT3_SI, HAVE_SQRT_P, ISA_HAS_64BIT_REGS,\n+\tISA_HAS_BRANCHLIKELY, ISA_HAS_CONDMOVE, ISA_HAS_8CC, ISA_HAS_FP4,\n+\tISA_HAS_COND_TRAP, ISA_HAS_MADD_MSUB, ISA_HAS_NMADD_NMSUB,\n+\tISA_HAS_CLZ_CLO, ISA_HAS_DCLZ_DCLO): Use.\n+\t(TARGET_CPU_CPP_BUILTINS): Define.\n+\t(CPP_PREDEFINES, LONG_MAX_SPEC, CPP_FPR_SPEC, CPP_SPEC): Remove.\n+\t* config/mips/mips.md (mulsi3_mult3): Use ISA_MIPS32/64.\n+\t(movdicc): Remove check for ISA_MIPS32.\n+\t (bunordered, bordered, bungt, bunlt, buneq, bunge, bunle,\n+\tsunordered_df, sunordered_sf, sordered_df, sordered_sf,\n+\tsunlt_df, sunlt_sf, sungt_df, sungt_sf, suneq_df, suneq_sf, sunge_df,\n+\tsunge_sf, sunle_df, sunle_sf): New patterns.\n+\n 2002-06-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in: Update cppmain.o.\n@@ -51,7 +88,7 @@\n \t__gthr_win32_* extern implementations if #defined\n \t__GTHREAD_HIDE_WIN32API.\n \t* config/i386/t-mingw32 (LIB2FUNCS_EXTRA): Set to\n-\t$(srcdir)/config/i386/gthr-win32.c \n+\t$(srcdir)/config/i386/gthr-win32.c\n \t* config/i386/gthr-win32.c: New implementation file.\n \t(__gthr_win32_once, __gthr_win32_key_create,\n \t__gthr_win32_key_delete, __gthr_win32_getspecific,\n@@ -72,7 +109,7 @@\n 2002-06-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (MACHMODE_H): Add @extra_modes_file@.\n-\t* configure.in: If $srcdir/config/${cpu_type}/${cpu_type}-modes.def \n+\t* configure.in: If $srcdir/config/${cpu_type}/${cpu_type}-modes.def\n \texists, substitute its pathname as @extra_modes_file@, define\n \tEXTRA_MODES_FILE to be an appropriate string to #include it\n \twith, and define EXTRA_CC_MODES to 1."}, {"sha": "0db9bc743274f9c79fbfee1aeceda6dc07053e3f", "filename": "gcc/config/mips/ecoff.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fecoff.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -24,9 +24,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"mips/mips.h\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEB -DR3000 -D_mips -D_MIPSEB -D_R3000\"\n-\n /* Use memcpy, et. al., rather than bcopy.  */\n #define TARGET_MEM_FUNCTIONS\n "}, {"sha": "3eef471b4703ac59a93c1d77910763fc1b540619", "filename": "gcc/config/mips/ecoffl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fecoffl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fecoffl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fecoffl.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -25,6 +25,3 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"gofast.h\"\n #include \"mips/ecoff.h\"\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEL -DR3000 -D_mips -D_MIPSEL -D_R3000\""}, {"sha": "7aea6684a766386b437f672ecb3c5d68a50e1afb", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -48,15 +48,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"mips/mips.h\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEB -DR4000 -D_mips -D_MIPSEB -D_R4000\"\n-\n-/* I would rather put this in CPP_PREDEFINES, but the gcc driver\n-   doesn't handle -U options in CPP_PREDEFINES.  */\n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n-%{!mips1:%{!mips2:-U__mips -D__mips=3 -D__mips64}}\"\n-\n /* Use memcpy, et. al., rather than bcopy.  */\n #define TARGET_MEM_FUNCTIONS\n "}, {"sha": "2ad3c984b6f5a8b08e1c0171966aa89be7f92d2b", "filename": "gcc/config/mips/elfl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felfl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felfl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felfl.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -24,6 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_ENDIAN_DEFAULT 0\n \n #include \"mips/elf.h\"\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEL -DR3000 -D_mips -D_MIPSEL -D_R3000\""}, {"sha": "6dafe507c11dc6c1e895d632225cb365eb645c6d", "filename": "gcc/config/mips/elfl64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felfl64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Felfl64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felfl64.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -24,6 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_ENDIAN_DEFAULT 0\n \n #include \"mips/elf64.h\"\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEL -DR4000 -D_mips -D_MIPSEL -D_R4000\""}, {"sha": "2119f3c72d94979efac259fc8ba60afabd9f92f4", "filename": "gcc/config/mips/iris3.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis3.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -21,16 +21,16 @@ Boston, MA 02111-1307, USA.  */\n #define SGI_TARGET 1\t\t/* inform other mips files this is SGI */\n \n /* Names to predefine in the preprocessor for this target machine.  */\n-\n+/* Temporarily #if 0'd until Irix header consolidation.  */\n+#if 0\n #define CPP_PREDEFINES\t\"\\\n -Dunix -Dmips -Dsgi -DSVR3 -Dhost_mips -DMIPSEB -DSYSTYPE_SYSV \\\n -Asystem=unix -Asystem=svr3 -Acpu=mips -Amachine=mips\"\n-\n-#define STARTFILE_SPEC\t\"%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}\"\n-\n #define SUBTARGET_CPP_SPEC \"\\\n %{!ansi:-D__EXTENSIONS__} -D_MIPSEB -D_SYSTYPE_SYSV\"\n+#endif\n \n+#define STARTFILE_SPEC\t\"%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}\"\n #define LIB_SPEC\t\\\n \t\"%{!p:%{!pg:%{!static:%{!g*:-lc_s}} -lc}}%{p:-lc_p}%{pg:-lc_p} crtn.o%s\"\n "}, {"sha": "cb7753b27b8e81821c8a15a12923d4141fc63b23", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -62,30 +62,46 @@ Boston, MA 02111-1307, USA.  */\n  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\t\t\t\\\n   || !strcmp (STR, \"rpath\"))\n \n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"host_mips\");\t\t\\\n+\tbuiltin_define_std (\"sgi\");\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\\\n+\tbuiltin_define_std (\"SYSTYPE_SVR4\");\t\t\\\n+\tbuiltin_define (\"_MODERN_C\");\t\t\t\\\n+\tbuiltin_define (\"_SVR4_SOURCE\");\t\t\\\n+\tbuiltin_define (\"__DSO__\");\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SIM=_MIPS_SIM_ABI32\");\t\\\n+\tbuiltin_define (\"_MIPS_SZPTR=32\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"system=svr4\");\t\t\t\\\n+\tbuiltin_assert (\"machine=sgi\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!TARGET_FLOAT64)                               \\\n+        builtin_define (\"_MIPS_FPSET=16\");              \\\n+     else                                               \\\n+        builtin_define (\"_MIPS_FPSET=32\");              \\\n+\t\t\t\t\t\t\t\\\n+     if (!TARGET_INT64)                                 \\\n+        builtin_define (\"_MIPS_SZINT=32\");              \\\n+     else                                               \\\n+        builtin_define (\"_MIPS_SZINT=64\");              \\\n+\t\t\t\t\t\t\t\\\n+     if (!TARGET_LONG64)\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SZLONG=32\");\t\t\\\n+     else\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SZLONG=64\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!flag_iso)\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\\\n+\t builtin_define (\"__EXTENSIONS__\");\t\t\\\n+\t builtin_define (\"_SGI_SOURCE\");\t\t\\\n+       }\t\t\t\t\t\t\\\n+} while (0);\n+\n #undef SUBTARGET_CC1_SPEC\n #define SUBTARGET_CC1_SPEC \"%{static: -mno-abicalls}\"\n \n-/* ??? _MIPS_SIM and _MIPS_SZPTR should eventually depend on options when\n-   options for them exist.  */\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n- \"-Dunix -Dmips -Dsgi -Dhost_mips -DMIPSEB -D_MIPSEB -DSYSTYPE_SVR4 \\\n-  -D_SVR4_SOURCE -D_MODERN_C -D__DSO__ \\\n-  -D_MIPS_SIM=_MIPS_SIM_ABI32 -D_MIPS_SZPTR=32 \\\n-  -Asystem=unix -Asystem=svr4 -Acpu=mips -Amachine=sgi\"\n-\n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n-%{!ansi:-D__EXTENSIONS__ -D_SGI_SOURCE -D_LONGLONG} \\\n-%{!mfp64: -D_MIPS_FPSET=16}%{mfp64: -D_MIPS_FPSET=32} \\\n-%{mips1: -D_MIPS_ISA=_MIPS_ISA_MIPS1} \\\n-%{mips2: -D_MIPS_ISA=_MIPS_ISA_MIPS2} \\\n-%{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n-%{!mips1: %{!mips2: %{!mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS1}}} \\\n-%{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n-%{!mlong64: -D_MIPS_SZLONG=32}%{mlong64: -D_MIPS_SZLONG=64}\"\n-\n #undef LINK_SPEC\n #define LINK_SPEC \"\\\n %{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} \\"}, {"sha": "c451bc021de604e5f0c20419cbef582cb7eaf84d", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 69, "deletions": 46, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -69,59 +69,82 @@ Boston, MA 02111-1307, USA.  */\n    system header files require it.  This is OK, because gcc never warns\n    when long long is used in system header files.  Alternatively, we can\n    add support for the SGI builtin type __long_long.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n- \"-Dunix -Dmips -Dsgi -Dhost_mips -DMIPSEB -D_MIPSEB -DSYSTYPE_SVR4 \\\n-  -D_LONGLONG -D_SVR4_SOURCE -D_MODERN_C -D__DSO__ \\\n-  -Asystem=unix -Asystem=svr4 -Acpu=mips -Amachine=sgi\"\n-\n-/* We must make -mips3 do what -mlong64 used to do.  */\n-/* ??? If no mipsX option given, but a mabi=X option is, then should set\n-   _MIPS_ISA based on the mabi=X option.  */\n-/* ??? If no mabi=X option give, but a mipsX option is, then should set\n-   _MIPS_SIM based on the mipsX option.  */\n-/* ??? Same for _MIPS_SZINT.  */\n-/* ??? Same for _MIPS_SZPTR.  */\n-#undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n-%{!ansi:-D__EXTENSIONS__ -D_SGI_SOURCE} \\\n-%{mfp32: -D_MIPS_FPSET=16}%{!mfp32: -D_MIPS_FPSET=32} \\\n-%{mips1: -D_MIPS_ISA=_MIPS_ISA_MIPS1} \\\n-%{mips2: -D_MIPS_ISA=_MIPS_ISA_MIPS2} \\\n-%{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n-%{mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4} \\\n-%{!mips*: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n-%{mabi=32: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{mabi=n32: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n-%{mabi=64: -D_ABI64=3 -D_MIPS_SIM=_ABI64} \\\n-%{!mabi*: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n-%{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n-%{mabi=32: -D_MIPS_SZLONG=32} \\\n-%{mabi=n32: -D_MIPS_SZLONG=32} \\\n-%{mabi=64: -D_MIPS_SZLONG=64} \\\n-%{!mabi*: -D_MIPS_SZLONG=32} \\\n-%{mabi=32: -D_MIPS_SZPTR=32} \\\n-%{mabi=n32: -D_MIPS_SZPTR=32} \\\n-%{mabi=64: -D_MIPS_SZPTR=64} \\\n-%{!mabi*: -D_MIPS_SZPTR=32} \\\n-%{!mips1:%{!mips2: -D_COMPILER_VERSION=601}}\t\t\\\n-%{!mips*: -U__mips -D__mips=3} \\\n-%{mabi=32: -U__mips64} \\\n-%{mabi=n32: -D__mips64} \\\n-%{mabi=64: -D__mips64} \\\n-%{!mabi*: -D__mips64}\"\n+\n+/* The GNU C++ standard library requires that __EXTENSIONS__ and\n+   _SGI_SOURCE be defined on at least irix6.2 and probably all IRIX 6\n+   prior to 6.5.  They normally get defined if !ansi, for g++ we want\n+   them regardless.  We don't need this on IRIX 6.5 itself, but it\n+   shouldn't hurt other than the namespace pollution.  */\n+\n+/* Undefine because this includes iris5.h.  */\n+#undef  TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"host_mips\");\t\t\\\n+\tbuiltin_define (\"_LONGLONG\");\t\t\t\\\n+\tbuiltin_define (\"_MODERN_C\");\t\t\t\\\n+\tbuiltin_define (\"_SVR4_SOURCE\");\t\t\\\n+\tbuiltin_define_std (\"SYSTYPE_SVR4\");\t\t\\\n+\tbuiltin_define (\"__DSO__\");\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\\\n+\tbuiltin_define_std (\"sgi\");\t\t\t\\\n+\tbuiltin_assert (\"system=svr4\");\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"machine=sgi\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (mips_abi == ABI_32)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SIM=_MIPS_SIM_ABI32\");\t\\\n+\tbuiltin_define (\"_MIPS_SZLONG=32\");\t\t\\\n+\tbuiltin_define (\"_MIPS_SZPTR=32\");\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+     else if (mips_abi == ABI_64)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_ABI64=3\");\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SIM=_ABI64\");\t\t\\\n+\tbuiltin_define (\"_MIPS_SZLONG=64\");\t\t\\\n+\tbuiltin_define (\"_MIPS_SZPTR=64\");\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_ABIN32=2\");\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SIM=_ABIN32\");\t\t\\\n+\tbuiltin_define (\"_MIPS_SZLONG=32\");\t\t\\\n+\tbuiltin_define (\"_MIPS_SZPTR=32\");\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!TARGET_FLOAT64)\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_FPSET=16\");\t\t\\\n+     else\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_FPSET=32\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!TARGET_INT64)\t\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SZINT=32\");\t\t\\\n+     else\t\t\t\t\t\t\\\n+\tbuiltin_define (\"_MIPS_SZINT=64\");\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\\\n+\tbuiltin_define (\"_COMPILER_VERSION=601\");\t\\\n+\t\t\t\t\t\t\t\\\n+     if (c_language == clk_cplusplus)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__EXTENSIONS__\");\t\t\\\n+\tbuiltin_define (\"_SGI_SOURCE\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+     if (!flag_iso)\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\\\n+\t builtin_define (\"__EXTENSIONS__\");\t\t\\\n+\t builtin_define (\"_SGI_SOURCE\");\t\t\\\n+       }\t\t\t\t\t\t\\\n+} while (0)\n \n /* The GNU C++ standard library requires that __EXTENSIONS__ and\n    _SGI_SOURCE be defined on at least irix6.2 and probably all irix6\n    prior to 6.5.  They normally get defined in SUBTARGET_CPP_SPEC if\n    !ansi, for g++ we want them regardless.  We don't need this on\n    irix6.5 itself, but it shouldn't hurt other than the namespace\n    pollution.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"\\\n--D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS \\\n-%{ansi:-D__EXTENSIONS__ -D_SGI_SOURCE} %(cpp) \\\n-\"\n \n /* Irix 6 uses DWARF-2.  */\n #define DWARF2_DEBUGGING_INFO"}, {"sha": "1c0a9963fdf0f5d5cf56366167e46cd7763306d0", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 43, "deletions": 55, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -127,67 +127,55 @@ void FN ()\t\t\t\t\t\t\t\\\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_ABICALLS|MASK_GAS)\n \n-/* Specify predefined symbols in preprocessor.  */\n-#undef CPP_PREDEFINES\n-#if TARGET_ENDIAN_DEFAULT == 0\n-#define CPP_PREDEFINES \"-DMIPSEL -D_MIPSEL -Dunix -Dmips -D_mips \\\n--DR3000 -D_R3000 -D__gnu_linux__ -Dlinux -Asystem=posix -Acpu=mips \\\n--Amachine=mips -D__ELF__ -D__PIC__ -D__pic__\"\n-#else\n-#define CPP_PREDEFINES \"-DMIPSEB -D_MIPSEB -Dunix -Dmips -D_mips \\\n--DR3000 -D_R3000 -D__gnu_linux__ -Dlinux -Asystem=posix -Acpu=mips \\\n--Amachine=mips -D__ELF__ -D__PIC__ -D__pic__\"\n-#endif\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__gnu_linux__\");\t\t\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\t\t\\\n+\tbuiltin_define (\"__PIC__\");\t\t\t\t\\\n+\tbuiltin_define (\"__pic__\");\t\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\t\\\n+\tbuiltin_define_std (\"linux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=linux\");\t\t\t\\\n+\t/* The GNU C++ standard library requires this.  */\t\\\n+\tif (c_language = clk_cplusplus)\t\t\t\t\\\n+\t  builtin_define (\"_GNU_SOURCE\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (mips_abi == ABI_N32)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        builtin_define (\"_ABIN32=2\");\t\t\t\t\\\n+        builtin_define (\"_MIPS_SIM=_ABIN32\");\t\t\t\\\n+        builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n+        builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+     else if (mips_abi == ABI_64)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        builtin_define (\"_ABI64=3\");\t\t\t\t\\\n+        builtin_define (\"_MIPS_SIM=_ABI64\");\t\t\t\\\n+        builtin_define (\"_MIPS_SZLONG=64\");\t\t\t\\\n+        builtin_define (\"_MIPS_SZPTR=64\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        builtin_define (\"_MIPS_SIM=_MIPS_SIM_ABI32\");\t\t\\\n+        builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n+        builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+     if (TARGET_FLOAT64)\t\t\t\t\t\\\n+        builtin_define (\"_MIPS_FPSET=32\");\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+        builtin_define (\"_MIPS_FPSET=16\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+     if (TARGET_INT64)\t\t\t\t\t\t\\\n+        builtin_define (\"_MIPS_SZINT=64\");\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+        builtin_define (\"_MIPS_SZINT=32\");\t\t\t\\\n+} while (0)\n \n-/* We must make -mips3 do what -mlong64 used to do.  */\n-/* ??? If no mipsX option given, but a mabi=X option is, then should set\n-   _MIPS_ISA based on the mabi=X option.  */\n-/* ??? If no mabi=X option give, but a mipsX option is, then should set\n-   _MIPS_SIM based on the mipsX option.  */\n-/* ??? Same for _MIPS_SZINT.  */\n-/* ??? Same for _MIPS_SZPTR.  */\n-#undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n-%{mfp32: -D_MIPS_FPSET=16} \\\n-%{mfp64: -D_MIPS_FPSET=32} \\\n-%{!mfp*: -D_MIPS_FPSET=32} \\\n-%{mips1: -D_MIPS_ISA=_MIPS_ISA_MIPS1} \\\n-%{mips2: -D_MIPS_ISA=_MIPS_ISA_MIPS2} \\\n-%{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n-%{mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4} \\\n-%{mips5: -D_MIPS_ISA=_MIPS_ISA_MIPS5} \\\n-%{mips32: -D_MIPS_ISA=_MIPS_ISA_MIPS32} \\\n-%{mips64: -D_MIPS_ISA=_MIPS_ISA_MIPS64} \\\n-%{!mips*: -D_MIPS_ISA=_MIPS_ISA_MIPS1} \\\n-%{mabi=32: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{mabi=n32: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n-%{mabi=64: -D_ABI64=3 -D_MIPS_SIM=_ABI64} \\\n-%{!mabi*: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n-%{mabi=32: -D_MIPS_SZLONG=32} \\\n-%{mabi=n32: -D_MIPS_SZLONG=32} \\\n-%{mabi=64: -D_MIPS_SZLONG=64} \\\n-%{!mabi*: -D_MIPS_SZLONG=32} \\\n-%{mabi=32: -D_MIPS_SZPTR=32} \\\n-%{mabi=n32: -D_MIPS_SZPTR=32} \\\n-%{mabi=64: -D_MIPS_SZPTR=64} \\\n-%{!mabi*: -D_MIPS_SZPTR=32} \\\n-%{!mips*: -U__mips -D__mips} \\\n-%{mabi=32: -U__mips64} \\\n-%{mabi=n32: -D__mips64} \\\n-%{mabi=64: -U__mips64} \\\n-%{!mabi*: -U__mips64} \\\n %{fno-PIC:-U__PIC__ -U__pic__} %{fno-pic:-U__PIC__ -U__pic__} \\\n %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} \\\n %{pthread:-D_REENTRANT}\"\n \n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"\\\n--D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS \\\n--D_GNU_SOURCE %(cpp) \\\n-\"\n-\n /* From iris5.h */\n /* -G is incompatible with -KPIC which is the default, so only allow objects\n    in the small data section if the user explicitly asks for it.  */"}, {"sha": "8242992b11d17f60b34891d305a6432c303970a0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 159, "deletions": 147, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -321,6 +321,14 @@ extern void\t\tsbss_section PARAMS ((void));\n \t\t\t\t\t/* Generate mips16 code */\n #define TARGET_MIPS16\t\t(target_flags & MASK_MIPS16)\n \n+/* Generic ISA defines.  */\n+#define ISA_MIPS1\t\t    (mips_isa == 1)\n+#define ISA_MIPS2\t\t    (mips_isa == 2)\n+#define ISA_MIPS3                   (mips_isa == 3)\n+#define ISA_MIPS4\t\t    (mips_isa == 4)\n+#define ISA_MIPS32\t\t    (mips_isa == 32)\n+#define ISA_MIPS64                  (mips_isa == 64)\n+\n /* Architecture target defines.  */\n #define TARGET_MIPS3900             (mips_arch == PROCESSOR_R3900)\n #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)\n@@ -336,6 +344,126 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TUNE_MIPS5000               (mips_tune == PROCESSOR_R5000)\n #define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)\n \n+/* Target CPU builtins.  */\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_assert (\"cpu=mips\");\t\t\t\t\\\n+      builtin_define (\"__mips__\");     \t\t\t\t\\\n+      builtin_define (\"_mips\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* We do this here because __mips is defined below\t\\\n+\t and so we can't use builtin_define_std.  */\t\t\\\n+      if (!flag_iso)\t\t\t\t\t\t\\\n+\t  builtin_define (\"mips\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips64\");     \t\t\t\\\n+\t  /* Silly, but will do until processor defines.  */\t\\\n+\t  builtin_define_std (\"R4000\");\t\t\t\t\\\n+\t  builtin_define (\"_R4000\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  /* Ditto.  */\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"R3000\");\t\t\t\t\\\n+\t  builtin_define (\"_R3000\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      if (TARGET_FLOAT64)\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_fpr=64\");\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_fpr=32\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_MIPS16)\t\t\t\t\t\\\n+\t  builtin_define (\"__mips16\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (ISA_MIPS1)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=1\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS1\");\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS2)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=2\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS2\");\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS3)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=3\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS3\");\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS4)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=4\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS4\");\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS32)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS64)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=64\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_HARD_FLOAT)\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_hard_float\");\t\t\t\\\n+      else if (TARGET_SOFT_FLOAT)\t\t\t\t\\\n+\t  builtin_define (\"__mips_soft_float\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_single_float\");\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_LONG64)\t\t\t\t\t\\\n+\t  builtin_define (\"__LONG_MAX__=9223372036854775807L\"); \\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"MIPSEB\");\t\t\t\\\n+\t  builtin_define (\"_MIPSEB\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"MIPSEL\");\t\t\t\\\n+\t  builtin_define (\"_MIPSEL\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+        /* Macros dependent on the C dialect.  */\t\t\\\n+      if (preprocessing_asm_p ())\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+          builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\t\\\n+\t  builtin_define (\"_LANGUAGE_ASSEMBLY\");\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (c_language == clk_c)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+          builtin_define_std (\"LANGUAGE_C\");\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (c_language == clk_cplusplus)\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C_PLUS_PLUS\");\t\t\\\n+          builtin_define (\"__LANGUAGE_C_PLUS_PLUS\");\t\t\\\n+          builtin_define (\"__LANGUAGE_C_PLUS_PLUS__\");\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      else if (c_language == clk_objective_c)\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_OBJECTIVE_C\");\t\t\\\n+          builtin_define (\"__LANGUAGE_OBJECTIVE_C\");\t\t\\\n+\t  /* Bizzare, but needed at least for Irix.  */\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_C\");\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (mips_abi == ABI_EABI)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_eabi\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -581,12 +709,12 @@ extern void\t\tsbss_section PARAMS ((void));\n /* This is meant to be redefined in the host dependent files.  */\n #define SUBTARGET_TARGET_OPTIONS\n \n-#define GENERATE_BRANCHLIKELY  (!TARGET_MIPS16 && ISA_HAS_BRANCHLIKELY)\n+#define GENERATE_BRANCHLIKELY   (!TARGET_MIPS16 && ISA_HAS_BRANCHLIKELY)\n \n /* Generate three-operand multiply instructions for SImode.  */\n #define GENERATE_MULT3_SI       ((TARGET_MIPS3900                       \\\n-                                  || mips_isa == 32                     \\\n-                                  || mips_isa == 64)                    \\\n+                                  || ISA_MIPS32\t                        \\\n+                                  || ISA_MIPS64)                        \\\n                                  && !TARGET_MIPS16)\n \n /* Generate three-operand multiply instructions for DImode.  */\n@@ -597,62 +725,62 @@ extern void\t\tsbss_section PARAMS ((void));\n    depending on the instruction set architecture level.  */\n \n #define BRANCH_LIKELY_P()\tGENERATE_BRANCHLIKELY\n-#define HAVE_SQRT_P()\t\t(mips_isa != 1)\n+#define HAVE_SQRT_P()\t\t(!ISA_MIPS1)\n \n /* ISA has instructions for managing 64 bit fp and gp regs (eg. mips3).  */\n-#define ISA_HAS_64BIT_REGS\t(mips_isa == 3          \\\n-\t\t\t\t || mips_isa == 4 \t\\\n-                                 || mips_isa == 64)\n+#define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t        \\\n+\t\t\t\t || ISA_MIPS4\t\t\\\n+                                 || ISA_MIPS64)\n \n /* ISA has branch likely instructions (eg. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n-#define ISA_HAS_BRANCHLIKELY\t(mips_isa != 1                          \\\n-\t\t\t\t && ! TARGET_MIPS16)\n+#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1                          \\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has the conditional move instructions introduced in mips4.  */\n-#define ISA_HAS_CONDMOVE        ((mips_isa == 4\t\t\t\t\\\n-\t\t\t\t  || mips_isa == 32                     \\\n-\t\t\t\t  || mips_isa == 64)\t\t\t\\\n-\t\t\t\t && ! TARGET_MIPS16)\n+#define ISA_HAS_CONDMOVE        ((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32\t                        \\\n+\t\t\t\t  || ISA_MIPS64)\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has just the integer condition move instructions (movn,movz) */\n #define ISA_HAS_INT_CONDMOVE     0\n \n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n-#define ISA_HAS_8CC\t\t(mips_isa == 4\t\t\t\t\\\n-                         \t || mips_isa == 32                      \\\n-\t\t\t\t || mips_isa == 64)\n+#define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\\n+                         \t || ISA_MIPS32\t                        \\\n+\t\t\t\t || ISA_MIPS64)\n \n /* This is a catch all for the other new mips4 instructions: indexed load and\n    indexed prefetch instructions, the FP madd,msub,nmadd, and nmsub instructions,\n    and the FP recip and recip sqrt instructions */\n-#define ISA_HAS_FP4             (mips_isa == 4\t\t\t\t\\\n- \t\t\t\t && ! TARGET_MIPS16)\n+#define ISA_HAS_FP4             (ISA_MIPS4\t\t\t\t\\\n+ \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has conditional trap instructions.  */\n-#define ISA_HAS_COND_TRAP\t(mips_isa >= 2\t\t\t\t\\\n-\t\t\t\t && ! TARGET_MIPS16)\n+#define ISA_HAS_COND_TRAP\t(!ISA_MIPS1\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB       ((mips_isa == 32\t\t\t\\\n-\t\t\t\t  || mips_isa == 64\t\t\t\\\n-\t\t\t\t  ) && ! TARGET_MIPS16)\n+#define ISA_HAS_MADD_MSUB       ((ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n+\t\t\t\t  ) && !TARGET_MIPS16)\n \n /* ISA has nmadd and nmsub instructions.  */\n-#define ISA_HAS_NMADD_NMSUB\t(mips_isa == 4\t\t\t\t\\\n+#define ISA_HAS_NMADD_NMSUB\t(ISA_MIPS4\t\t\t\t\\\n \t\t\t\t && ! TARGET_MIPS16)\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n-#define ISA_HAS_CLZ_CLO         ((mips_isa == 32\t\t\t\\\n-                                  || mips_isa == 64\t\t\t\\\n-                                 ) && ! TARGET_MIPS16)\n+#define ISA_HAS_CLZ_CLO         ((ISA_MIPS32\t\t\t\t\\\n+                                  || ISA_MIPS64\t\t\t\t\\\n+                                 ) && !TARGET_MIPS16)\n \n /* ISA has double-word count leading zeroes/ones instruction (not\n    implemented).  */\n-#define ISA_HAS_DCLZ_DCLO       (mips_isa == 64\t\t\t\t\\\n-\t\t\t\t && ! TARGET_MIPS16)\n+#define ISA_HAS_DCLZ_DCLO       (ISA_MIPS64\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n \n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n    -mips2 sets -mfp32 and -mgp32.  This can be overridden by an explicit\n@@ -761,14 +889,6 @@ while (0)\n #endif\n \n \f\n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_BSD43 \\\n--D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_BSD43 \\\n--Asystem=unix -Asystem=bsd -Acpu=mips -Amachine=mips\"\n-#endif\n-\n /* Assembler specs.  */\n \n /* MIPS_AS_ASM_SPEC is passed when using the MIPS assembler rather\n@@ -954,119 +1074,13 @@ extern int mips_abi;\n \n /* Preprocessor specs.  */\n \n-/* Rules for SIZE_TYPE and PTRDIFF_TYPE are:\n-\n-   both gp64 and long64 (not the options, but the corresponding flags,\n-   so defaults came into play) are required in order to have `long' in\n-   SIZE_TYPE and PTRDIFF_TYPE.\n-\n-   on eabi, -mips1, -mips2 and -mips32 disable gp64, whereas mips3,\n-   -mips4, -mips5 and -mips64 enable it.\n-\n-   on other ABIs, -mips* options do not affect gp32/64, but the\n-   default ISA affects the default gp size.\n-\n-   -mgp32 disables gp64, whereas -mgp64 enables it.\n-\n-   on eabi, gp64 implies long64.\n-\n-   -mlong64, and -mabi=64 are the only other ways to enable long64.\n-\n-*/\n-\n-#if MIPS_ISA_DEFAULT != 3 && MIPS_ISA_DEFAULT != 4 && MIPS_ISA_DEFAULT != 5 && MIPS_ISA_DEFAULT != 64\n-\n-/* 32-bit cases first.  */\n-\n-#if MIPS_ABI_DEFAULT == ABI_EABI\n-#define LONG_MAX_SPEC \"\\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n-%{!mlong64:\\\n- %{mabi=eabi|!mabi=*:\\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__LONG_MAX__=9223372036854775807L}}}}}}}} \\\n-\"\n-#else /* ABI_DEFAULT != ABI_EABI */\n-#define LONG_MAX_SPEC \"\\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n-%{!mlong64:\\\n- %{mabi=eabi:\\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__LONG_MAX__=9223372036854775807L}}}}}}}} \\\n-\"\n-#endif\n-\n-#else\n-\n-/* 64-bit default ISA.  */\n-#if MIPS_ABI_DEFAULT == ABI_EABI\n-#define LONG_MAX_SPEC \"\\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n-%{!mlong64:\\\n- %{mabi=eabi|!mabi=*:\\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__LONG_MAX__=9223372036854775807L}}}}}}}\\\n-\"\n-#else /* ABI_DEFAULT != ABI_EABI */\n-#define LONG_MAX_SPEC \"\\\n-%{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n-%{!mlong64:\\\n- %{mabi=eabi:\\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__LONG_MAX__=9223372036854775807L}}}}}}}\\\n-\"\n-#endif\n-\n-#endif\n-\n /* SUBTARGET_CPP_SPEC is passed to the preprocessor.  It may be\n    overridden by subtargets.  */\n #ifndef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\"\n #endif\n \n-/* Define appropriate macros for fpr register size.  */\n-#ifndef CPP_FPR_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_FLOAT64)\n-#define CPP_FPR_SPEC \"-D__mips_fpr=64\"\n-#else\n-#define CPP_FPR_SPEC \"-D__mips_fpr=32\"\n-#endif\n-#endif\n-\n-/* For C++ we need to ensure that _LANGUAGE_C_PLUS_PLUS is defined independent\n-   of the source file extension.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"\\\n--D__LANGUAGE_C_PLUS_PLUS -D_LANGUAGE_C_PLUS_PLUS \\\n-%(cpp) \\\n-\"\n-/* CPP_SPEC is the set of arguments to pass to the preprocessor.  */\n-\n-#ifndef CPP_SPEC\n-#define CPP_SPEC \"\\\n-%{.m:\t-D__LANGUAGE_OBJECTIVE_C -D_LANGUAGE_OBJECTIVE_C -D__LANGUAGE_C -D_LANGUAGE_C} \\\n-%{.S|.s: -D__LANGUAGE_ASSEMBLY -D_LANGUAGE_ASSEMBLY %{!ansi:-DLANGUAGE_ASSEMBLY}} \\\n-%{!.S: %{!.s: %{!.cc: %{!.cxx: %{!.cpp: %{!.cp: %{!.c++: %{!.C: %{!.m: -D__LANGUAGE_C -D_LANGUAGE_C %{!ansi:-DLANGUAGE_C}}}}}}}}}} \\\n-%(subtarget_cpp_size_spec) \\\n-%{mips3:-U__mips -D__mips=3 -D__mips64} \\\n-%{mips4:-U__mips -D__mips=4 -D__mips64} \\\n-%{mips32:-U__mips -D__mips=32} \\\n-%{mips64:-U__mips -D__mips=64 -D__mips64} \\\n-%{mgp32:-U__mips64} %{mgp64:-D__mips64} \\\n-%{mfp32:-D__mips_fpr=32} %{mfp64:-D__mips_fpr=64} %{!mfp32: %{!mfp64: %{mgp32:-D__mips_fpr=32} %{!mgp32: %(cpp_fpr_spec)}}} \\\n-%{msingle-float:%{!msoft-float:-D__mips_single_float}} \\\n-%{m4650:%{!msoft-float:-D__mips_single_float}} \\\n-%{msoft-float:-D__mips_soft_float} \\\n-%{mabi=eabi:-D__mips_eabi} \\\n-%{mips16:%{!mno-mips16:-D__mips16}} \\\n-%{EB:-UMIPSEL -U_MIPSEL -U__MIPSEL -U__MIPSEL__ -D_MIPSEB -D__MIPSEB -D__MIPSEB__ %{!ansi:-DMIPSEB}} \\\n-%{EL:-UMIPSEB -U_MIPSEB -U__MIPSEB -U__MIPSEB__ -D_MIPSEL -D__MIPSEL -D__MIPSEL__ %{!ansi:-DMIPSEL}} \\\n-%(long_max_spec) \\\n-%(subtarget_cpp_spec) \"\n-#endif\n+#define CPP_SPEC \"%(subtarget_cpp_spec)\"\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -1082,8 +1096,6 @@ extern int mips_abi;\n   { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC },\t\t\t\t\\\n   { \"cc1_cpu_spec\", CC1_CPU_SPEC},                                      \\\n   { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\t\\\n-  { \"long_max_spec\", LONG_MAX_SPEC },\t\t\t\t\t\\\n-  { \"cpp_fpr_spec\", CPP_FPR_SPEC },\t\t\t\t\t\\\n   { \"mips_as_asm_spec\", MIPS_AS_ASM_SPEC },\t\t\t\t\\\n   { \"gas_asm_spec\", GAS_ASM_SPEC },\t\t\t\t\t\\\n   { \"abi_gas_asm_spec\", ABI_GAS_ASM_SPEC },                             \\\n@@ -2302,7 +2314,7 @@ extern enum reg_class mips_char_to_class[256];\n \t: current_function_outgoing_args_size)\n #endif\n \n-/* The return address for the current frame is in r31 is this is a leaf\n+/* The return address for the current frame is in r31 if this is a leaf\n    function.  Otherwise, it is on the stack.  It is at a variable offset\n    from sp/fp/ap, so we define a fake hard register rap which is a\n    poiner to the return address on the stack.  This always gets eliminated"}, {"sha": "a691dbf37a151d48b8ae1b8426d1ba75161d5b33", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 282, "deletions": 4, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -1793,8 +1793,8 @@\n   if (which_alternative == 1)\n     return \\\"mult\\\\t%1,%2\\\";\n   if (TARGET_MAD\n-      || mips_isa == 32\n-      || mips_isa == 64)\n+      || ISA_MIPS32\n+      || ISA_MIPS64)\n     return \\\"mul\\\\t%0,%1,%2\\\";\n   return \\\"mult\\\\t%0,%1,%2\\\";\n }\"\n@@ -8055,6 +8055,118 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"8\")])\n \n+(define_expand \"bunordered\"\n+  [(set (pc)\n+\t(if_then_else (unordered:CC (cc0)\n+\t\t\t\t    (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+    {\n+      gen_conditional_branch (operands, UNORDERED);\n+      DONE;\n+    }\n+}\")\n+\n+(define_expand \"bordered\"\n+  [(set (pc)\n+\t(if_then_else (ordered:CC (cc0)\n+\t\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, ORDERED);\n+\tDONE;\n+     }\n+}\")\n+\n+(define_expand \"bungt\"\n+  [(set (pc)\n+\t(if_then_else (ungt:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, UNGT);\n+\tDONE;\n+     }\n+}\")\n+\n+(define_expand \"bunlt\"\n+  [(set (pc)\n+\t(if_then_else (unlt:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, UNLT);\n+\tDONE;\n+     }\n+}\")\n+\n+(define_expand \"buneq\"\n+  [(set (pc)\n+\t(if_then_else (uneq:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, UNEQ);\n+\tDONE;\n+     }\n+}\")\n+\n+(define_expand \"bunge\"\n+  [(set (pc)\n+\t(if_then_else (unge:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, UNGE);\n+\tDONE;\n+     }\n+}\")\n+\n+(define_expand \"bunle\"\n+  [(set (pc)\n+\t(if_then_else (unle:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  if (operands[0])\t\t/* avoid unused code warning */\n+     {\n+\tgen_conditional_branch (operands, UNLE);\n+\tDONE;\n+     }\n+}\")\n+\n (define_expand \"beq\"\n   [(set (pc)\n \t(if_then_else (eq:CC (cc0)\n@@ -9111,6 +9223,90 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;\n ;;  ....................\n \n+(define_insn \"sunordered_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unordered:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.un.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sordered_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(ordered:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.or.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sungt_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(ungt:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ugt.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunlt_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unlt:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ult.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"suneq_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(uneq:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ueq.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunge_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unge:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.uge.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunle_df\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unle:CC (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ule.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n (define_insn \"seq_df\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n \t(eq:CC (match_operand:DF 1 \"register_operand\" \"f\")\n@@ -9171,6 +9367,90 @@ move\\\\t%0,%z4\\\\n\\\\\n  [(set_attr \"type\"\t\"fcmp\")\n   (set_attr \"mode\"\t\"FPSW\")])\n \n+(define_insn \"sunordered_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unordered:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.un.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"\t\"fcmp\")\n+  (set_attr \"mode\"\t\"FPSW\")])\n+\n+(define_insn \"sordered_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(ordered:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.or.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"\t\"fcmp\")\n+  (set_attr \"mode\"\t\"FPSW\")])\n+\n+(define_insn \"sungt_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(ungt:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ugt.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunlt_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unlt:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ult.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"suneq_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(uneq:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ueq.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunge_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unge:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.uge.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n+(define_insn \"sunle_sf\"\n+  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n+\t(unle:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n+  \"*\n+{\n+ return mips_fill_delay_slot (\\\"c.ule.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n+}\"\n+ [(set_attr \"type\"      \"fcmp\")\n+  (set_attr \"mode\"      \"FPSW\")])\n+\n (define_insn \"seq_sf\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n \t(eq:CC (match_operand:SF 1 \"register_operand\" \"f\")\n@@ -10529,8 +10809,6 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\\\n\\\\t%*j\\\\t%2\"\n   \"(ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE) && TARGET_64BIT\"\n   \"\n {\n-  if (mips_isa == 32)\n-    FAIL;\n   gen_conditional_move (operands);\n   DONE;\n }\")"}, {"sha": "e661b003a6c1e2364b7e9ebb10b55c4f18da0893", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -41,7 +41,6 @@ Boston, MA 02111-1307, USA.  */\n     {\t\t\t\t\t\t\t\\\n       NETBSD_OS_CPP_BUILTINS_ELF();\t\t\t\\\n       builtin_define (\"__NO_LEADING_UNDERSCORES__\");\t\\\n-      builtin_define (\"__mips__\");\t\t\t\\\n       builtin_define (\"__GP_SUPPORT__\");\t\t\\\n       builtin_assert (\"machine=mips\");\t\t\t\\\n       if (TARGET_LONG64)\t\t\t\t\\\n@@ -67,7 +66,6 @@ Boston, MA 02111-1307, USA.  */\n #undef US_SOFTWARE_GOFAST\n #undef INIT_SUBTARGET_OPTABS\n #define INIT_SUBTARGET_OPTABS\n-#undef CPP_PREDEFINES\n \n \n /* Get generic NetBSD definitions.  */\n@@ -78,42 +76,6 @@ Boston, MA 02111-1307, USA.  */\n #include <netbsd-elf.h>\n \n \n-/* Provide a CPP_SPEC appropriate for NetBSD.  This is a simplified\n-   CPP_SPEC from <mips/mips.h>.  We (mostly) use the SUBTARGET_CPP_SPEC\n-   to deal with NetBSD-specific CPP options.\n-\n-   We default to MIPS-I at the very beginning of the spec, and let the\n-   value get overridden later, as necessary.  We also set up a default\n-   endian spec.\n-\n-   This will get cleaned up once the MIPS target uses\n-   TARGET_CPU_CPP_BUILTINS().  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC\t\t\t\t\t\t\t\\\n-  \"-D__mips=1\t\t\t\t\t\t\t\t\\\n-   %(subtarget_cpp_size_spec)\t\t\t\t\t\t\\\n-   %{mips3:-U__mips -D__mips=3 -D__mips64}\t\t\t\t\\\n-   %{mips4:-U__mips -D__mips=4 -D__mips64}\t\t\t\t\\\n-   %{mips32:-U__mips -D__mips=32}\t\t\t\t\t\\\n-   %{mips64:-U__mips -D__mips=64 -D__mips64}\t\t\t\t\\\n-   %{mgp32:-U__mips64} %{mgp64:-D__mips64}\t\t\t\t\\\n-   %{mfp32:-D__mips_fpr=32} %{mfp64:-D__mips_fpr=64}\t\t\t\\\n-   %{!mfp32:\t\t\t\t\t\t\t\t\\\n-     %{!mfp64:\t\t\t\t\t\t\t\t\\\n-       %{mgp32:-D__mips_fpr=32}\t\t\t\t\t\t\\\n-       %{!mgp32: %(cpp_fpr_spec)}}}\t\t\t\t\t\\\n-   %{msingle-float:\t\t\t\t\t\t\t\\\n-     %{!msoft-float:-D__mips_single_float}}\t\t\t\t\\\n-   %{m4650:\t\t\t\t\t\t\t\t\\\n-     %{!msoft-float:-D__mips_single_float}}\t\t\t\t\\\n-   %{msoft-float:-D__mips_soft_float}\t\t\t\t\t\\\n-   %{mabi=eabi:-D__mips_eabi}\t\t\t\t\t\t\\\n-   %{mips16:%{!mno-mips16:-D__mips16}}\t\t\t\t\t\\\n-   %{EB:-D__MIPSEB__} %{EL:-D__MIPSEL__}\t\t\t\t\\\n-   %{!EB:%{!EL:%(subtarget_endian_default)}}\t\t\t\t\\\n-   %(subtarget_cpp_spec) \"\n-\n /* Extra specs we need.  */\n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n@@ -156,8 +118,8 @@ Boston, MA 02111-1307, USA.  */\n /* -G is incompatible with -KPIC which is the default, so only allow objects\n    in the small data section if the user explicitly asks for it.  */\n \n-#undef MIPS_DEFAULT_GVALUE \n-#define MIPS_DEFAULT_GVALUE 0 \n+#undef MIPS_DEFAULT_GVALUE\n+#define MIPS_DEFAULT_GVALUE 0\n \n \n /* This defines which switch letters take arguments.  -G is a MIPS"}, {"sha": "02a8f224e57a3c7adeba7f684f99182f173b7667", "filename": "gcc/config/mips/openbsd.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fopenbsd.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -53,16 +53,17 @@ Boston, MA 02111-1307, USA.  */\n \tsupport.  */\n #undef SET_ASM_OP\n \n-/* Run-time target specifications.  */\n-#if TARGET_ENDIAN_DEFAULT != 0\n-#define CPP_PREDEFINES \"-D__SYSTYPE_BSD__ -D__NO_LEADING_UNDERSCORES__ \\\n--D__GP_SUPPORT__ -D__MIPSEB__ -D__unix__  -D__OpenBSD__ -D__mips__ \\\n--Asystem=unix -Asystem=OpenBSD -Acpu=mips -Amachine=mips -Aendian=big\"\n-#else\n-#define CPP_PREDEFINES \"-D__SYSTYPE_BSD__ -D__NO_LEADING_UNDERSCORES__ \\\n--D__GP_SUPPORT__ -D__MIPSEL__ -D__unix__  -D__OpenBSD__ -D__mips__ \\\n--Asystem=unix -Asystem=OpenBSD -Acpu=mips -Amachine=mips -Aendian=little\"\n-#endif\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\\\n+\tbuiltin_define (\"__SYSTYPE_BSD__\");\t\t\\\n+\tbuiltin_define (\"__NO_LEADING_UNDERSCORES__\");\t\\\n+\tbuiltin_define (\"__GP_SUPPORT__\");\t\t\\\n+\tbuiltin_define (\"__OpenBSD__\");\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"system=OpenBSD\");\t\t\\\n+\tbuiltin_assert (\"machine=mips\");\t\t\t\\\n+} while (0)\n \n /* Layout of source language data types.  */\n "}, {"sha": "ae27293e8ad93d03a0cb85deb1d5773e385791dc", "filename": "gcc/config/mips/rtems.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -21,6 +21,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Specify predefined symbols in preprocessor.  */\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEB -D_mips -D_MIPSEB \\\n-   -D__rtems__ -Asystem=rtems\"\n+#define TARGET_OS_CPP_BUILTINS()\t\\\n+do {\t\t\t\t\t\\\n+  builtin_define (\"__rtems__\");\t\t\\\n+  builtin_assert (\"system=rtems\");\t\\\n+} while (0)"}, {"sha": "bd9535658d1e0039153ce0c9a75c3e4df0480981", "filename": "gcc/config/mips/rtems64.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Frtems64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Frtems64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems64.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -20,10 +20,11 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Specify predefined symbols in preprocessor.  */\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -DMIPSEB -DR4000 -D_mips -D_MIPSEB -D_R4000 \\\n-   -D__rtems__ -Asystem=rtems\"\n+#define TARGET_OS_CPP_BUILTINS()\t\\\n+do {\t\t\t\t\t\\\n+  builtin_define (\"__rtems__\");\t\t\\\n+  builtin_assert (\"system=rtems\");\t\\\n+} while (0)\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata"}, {"sha": "1e5b14be434a968dcc0997b80d9f4b9d46bbb168", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  SNI SINIX version.\n-   Copyright (C) 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1999, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Marco Walther (Marco.Walther@mch.sni.de).\n \n This file is part of GNU CC.\n@@ -21,16 +21,24 @@ Boston, MA 02111-1307, USA.  */\n \n #define MIPS_SVR4\n \n-#define CPP_PREDEFINES \"\\\n--Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SVR4 -Dsinix -DSNI \\\n--D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_SVR4 \\\n--Asystem=unix -Asystem=svr4 -Acpu=mips -Amachine=mips\"\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n+    do {\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"host_mips\");\t\t\\\n+\tbuiltin_define_std (\"SYSTYPE_SVR4\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\\\n+\tbuiltin_define_std (\"mips\");\t\t\t\\\n+\tbuiltin_define_std (\"sinix\");\t\t\t\\\n+\tbuiltin_define_std (\"SNI\");\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\\\n+\tbuiltin_assert (\"system=svr4\");\t\t\t\\\n+\tbuiltin_assert (\"machine=mips\");\t\t\\\n+} while (0)\n \n #define LINK_SPEC \"\\\n %{G*} \\\n %{!mgas: \\\n \t%{dy} %{dn}}\"\n-\t\t    \n+\n #define LIB_SPEC \"\\\n \t%{p:-lprof1} \\\n \t%{!p:%{pg:-lprof1} \\"}, {"sha": "547c09a247f5f25ff61bb25423b9ef6e17ea39d1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3649d27ace666b7be74481a0ec6f612cbb779a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ce3649d27ace666b7be74481a0ec6f612cbb779a", "patch": "@@ -614,7 +614,8 @@ You can also test for the C dialect being compiled.  The variable\n or @code{clk_objective_c}.  Note that if we are preprocessing\n assembler, this variable will be @code{clk_c} but the function-like\n macro @code{preprocessing_asm_p()} will return true, so you might want\n-to check for that first.\n+to check for that first.  If you need to check for strict ANSI, the\n+variable @code{flag_iso} can be used.\n \n With @code{TARGET_OS_CPP_BUILTINS} this macro obsoletes the\n @code{CPP_PREDEFINES} target macro.\n@@ -7982,7 +7983,7 @@ defined by the C language for both.\n @end deftypefn\n \n @deftypefn Macro int REAL_VALUE_NEGATIVE (REAL_VALUE_TYPE @var{x})\n-Returns 1 if @var{x} is negative (including negative zero), 0 otherwise.  \n+Returns 1 if @var{x} is negative (including negative zero), 0 otherwise.\n @end deftypefn\n \n @deftypefn Macro int REAL_VALUE_ISINF (REAL_VALUE_TYPE @var{x})"}]}