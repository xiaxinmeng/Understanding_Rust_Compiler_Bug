{"sha": "f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "node_id": "C_kwDOANBUbNoAKGY0NTZlYWYyZTBmYjNjZWI1MWM2NDFmZDM0ODQyOWJmNTlkMjE1YTk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-22T10:23:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-22T11:18:08Z"}, "message": "tree-optimization/103351 - avoid compare-debug issue wrt CD-DCE change\n\nThis avoids differences in the split edge of a cluster due to different\norder of same key PHI args when sorting by sorting after the edge\ndestination index as second key.\n\n2021-11-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103351\n\t* tree-ssa-dce.c (sort_phi_args): Sort after e->dest_idx as\n\tsecond key.\n\n\t* g++.dg/torture/pr103351.C: New testcase.", "tree": {"sha": "ed74f113f3f0e543b3e6260e10310be8e324736b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed74f113f3f0e543b3e6260e10310be8e324736b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f456eaf2e0fb3ceb51c641fd348429bf59d215a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1e14346a08554dc33f71fca980578a7a3e38a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1e14346a08554dc33f71fca980578a7a3e38a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1e14346a08554dc33f71fca980578a7a3e38a2"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "d0bf7216ffc5325ccbe2eac8e4401bff9f1b20dc", "filename": "gcc/testsuite/g++.dg/torture/pr103351.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f456eaf2e0fb3ceb51c641fd348429bf59d215a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103351.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f456eaf2e0fb3ceb51c641fd348429bf59d215a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103351.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr103351.C?ref=f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fcompare-debug\" }\n+\n+template <int> struct __conditional;\n+template <bool _Cond, typename, typename>\n+using __conditional_t = typename __conditional<_Cond>::type;\n+template <typename> struct __is_void_helper {};\n+template <typename _Tp> _Tp *__addressof(_Tp &__r) {\n+  return __builtin_addressof(__r);\n+}\n+template <typename _Tp> _Tp *addressof(_Tp &__r) { return __addressof(__r); }\n+template <typename _Tp>\n+using __make_not_void = __conditional_t<_Tp ::value, int, _Tp>;\n+template <typename> struct pointer_traits;\n+template <typename _Tp> struct pointer_traits<_Tp *> {\n+  typedef _Tp *pointer;\n+  typedef _Tp element_type;\n+  static pointer pointer_to(element_type &__r) { return addressof(__r); }\n+};\n+namespace {\n+template <typename> struct new_allocator;\n+}\n+template <typename> struct allocator_traits;\n+template <typename> struct allocator;\n+template <typename _Tp> struct allocator_traits<allocator<_Tp>> {\n+  using pointer = _Tp *;\n+  using const_pointer = _Tp *;\n+};\n+namespace __gnu_cxx {\n+template <typename = char>\n+struct __alloc_traits : allocator_traits<allocator<char>> {};\n+} // namespace __gnu_cxx\n+template <class> struct char_traits;\n+template <typename _CharT, typename = _CharT>\n+class Trans_NS___cxx11_basic_string;\n+template <> struct char_traits<char> {\n+  typedef char char_type;\n+  static void assign(char_type, char_type);\n+};\n+template <typename, typename> struct Trans_NS___cxx11_basic_string {\n+  typedef __gnu_cxx::__alloc_traits<> _Alloc_traits;\n+  typedef char_traits<char> traits_type;\n+  typedef _Alloc_traits::pointer pointer;\n+  typedef _Alloc_traits::const_pointer const_pointer;\n+  struct {\n+    pointer _M_p;\n+  } _M_dataplus;\n+  char _M_local_buf[];\n+  void _M_data(pointer __p) { _M_dataplus._M_p = __p; }\n+  bool _M_is_local() {\n+    const_pointer __trans_tmp_5 =\n+        pointer_traits<const_pointer>::pointer_to(*_M_local_buf);\n+    return _M_dataplus._M_p == __trans_tmp_5;\n+  }\n+  void operator=(Trans_NS___cxx11_basic_string __str) {\n+    bool __trans_tmp_2;\n+    if (__str._M_is_local()) {\n+      Trans_NS___cxx11_basic_string *__trans_tmp_1;\n+      if (__builtin_expect(__trans_tmp_1 != this, true))\n+        size();\n+    } else if (__trans_tmp_2)\n+      __str._M_data(__str._M_local_buf);\n+    __str.clear();\n+  }\n+  void size();\n+  void clear() { traits_type::assign(_M_dataplus._M_p[0], char()); }\n+};\n+template <class, typename, int> struct Pool {\n+  template <class T> struct PoolIterator {\n+    bool operator!=(PoolIterator);\n+    T *operator*();\n+    void operator++();\n+  };\n+  template <class T> struct IterateWrapper {\n+    PoolIterator<T> begin();\n+    PoolIterator<T> end();\n+  };\n+};\n+struct BaseConsist {\n+  Trans_NS___cxx11_basic_string<char> name;\n+};\n+struct Vehicle : BaseConsist {};\n+Pool<int, int, true>::IterateWrapper<Vehicle> __trans_tmp_4;\n+Trans_NS___cxx11_basic_string<char> __trans_tmp_6;\n+void FixOldVehicles() {\n+  for (Vehicle *v : __trans_tmp_4)\n+    v->name = __trans_tmp_6;\n+}"}, {"sha": "e3e6f0955b7d15d3afbeb6898f53ad21741ef591", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f456eaf2e0fb3ceb51c641fd348429bf59d215a9/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f456eaf2e0fb3ceb51c641fd348429bf59d215a9/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=f456eaf2e0fb3ceb51c641fd348429bf59d215a9", "patch": "@@ -1626,6 +1626,10 @@ sort_phi_args (const void *a_, const void *b_)\n     return -1;\n   else if (ha > hb)\n     return 1;\n+  else if (a->first->dest_idx < b->first->dest_idx)\n+    return -1;\n+  else if (a->first->dest_idx > b->first->dest_idx)\n+    return 1;\n   else\n     return 0;\n }"}]}