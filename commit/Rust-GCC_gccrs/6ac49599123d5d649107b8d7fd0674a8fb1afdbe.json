{"sha": "6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjNDk1OTkxMjNkNWQ2NDkxMDdiOGQ3ZmQwNjc0YThmYjFhZmRiZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-21T07:35:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-21T07:35:09Z"}, "message": "config.gcc (*-*-darwin*): Add darwin.opt to $extra_options.\n\n\t* config.gcc (*-*-darwin*): Add darwin.opt to $extra_options.\n\t(i[34567]86-pc-msdosdjgpp*): Likewise i386/djgpp.opt.\n\t(i[34567]86-*-lynxos*, powerpc-*-lynxos*): Likewise lynx.opt.\n\t(i[34567]86-*-sco3.2v5*): Likewise i386/sco5.opt.\n\t(i[34567]86-*-pe, i[34567]86-*-cygwin*, i[34567]86-*-mingw32*)\n\t(i[34567]86-*-uwin*): Likewise i386/cygming.opt.\n\t* config/darwin.h (darwin_one_byte_bool, darwin_fix_and_continue)\n\t(darwin_fix_and_continue_switch, SUBTARGET_OPTIONS): Delete.\n\t* config/darwin.c (darwin_one_byte_bool, darwin_fix_and_continue)\n\t(darwin_fix_and_continue_switch): Delete.\n\t* config/lynx.h (SUBTARGET_OS_LYNX_SWITCHES): Delete.\n\t(SUBTARGET_SWITCHES): Delete.\n\t* config/i386/i386.h (target_flags, MASK_80387, MASK_RTD)\n\t(MASK_ALIGN_DOUBLE, MASK_SVR3_SHLIB, MASK_IEEE_FP, MASK_FLOAT_RETURNS)\n\t(MASK_NO_FANCY_MATH_387, MASK_OMIT_LEAF_FRAME_POINTER)\n\t(MASK_STACK_PROBE, MASK_NO_ALIGN_STROPS, MASK_INLINE_ALL_STROPS)\n\t(MASK_NO_PUSH_ARGS, MASK_ACCUMULATE_OUTGOING_ARGS, MASK_MMX)\n\t(MASK_SSE, MASK_SSE2, MASK_SSE3, MASK_3DNOW, MASK_3DNOW_A)\n\t(MASK_128BIT_LONG_DOUBLE, MASK_64BIT, MASK_MS_BITFIELD_LAYOUT)\n\t(MASK_TLS_DIRECT_SEG_REFS, MASK_NO_RED_ZONE, TARGET_80387)\n\t(TARGET_RTD, TARGET_ALIGN_DOUBLE, TARGET_PUSH_ARGS)\n\t(TARGET_ACCUMULATE_OUTGOING_ARGS, TARGET_SVR3_SHLIB, TARGET_IEEE_FP)\n\t(TARGET_128BIT_LONG_DOUBLE, TARGET_NO_FANCY_MATH_387)\n\t(TARGET_USE_FANCY_MATH_387, TARGET_OMIT_LEAF_FRAME_POINTER)\n\t(TARGET_DEBUG_ADDR, TARGET_DEBUG_ARG): Delete.\n\t(TARGET_FLOAT_RETURNS_IN_80387): Make an alias of TARGET_FLOAT_RETURNS.\n\t(TARGET_64BIT): Undef before redefining.\n\t(TARGET_TLS_DIRECT_SEG_REFS, TARGET_STACK_PROBE)\n\t(TARGET_ALIGN_STRINGOPS, TARGET_INLINE_ALL_STRINGOPS, TARGET_SSE)\n\t(TARGET_SSE2, TARGET_SSE3, TARGET_MMX, TARGET_3DNOW, TARGET_3DNOW_A)\n\t(TARGET_RED_ZONE, TARGET_USE_MS_BITFIELD_LAYOUT, TARGET_SWITCHES)\n\t(TARGET_OPTIONS, SUBTARGET_SWITCHES, SUBTARGET_OPTIONS)\n\t(ix86_fpmath_string, ix86_tls_dialect_string, ix86_cmodel_string)\n\t(ix86_asm_string, ix86_regparm, ix86_regparm_string)\n\t(ix86_preferred_stack_boundary_string, ix86_branch_cost_string)\n\t(ix86_debug_arg_string, ix86_debug_addr_string)\n\t(ix86_align_loops_string, ix86_align_jumps_string)\n\t(ix86_align_funcs_string): Delete.\n\t* config/i386/cygming.h (MASK_NOP_FUN_DLLIMPORT)\n\t(TARGET_NOP_FUN_DLLIMPORT, SUBTARGET_SWITCHES): Delete.\n\t* config/i386/djgpp.h (MASK_BNU210, SUBTARGET_SWITCHES): Delete.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Check TARGET_BNU210.\n\t* config/i386/lynx.h (SUBTARGET_SWITCHES): Delete.\n\t* config/i386/sco5.h (MASK_COFF, TARGET_ELF)\n\t(SUBTARGET_SWITCHES): Delete.\n\t* config/i386/i386.c (ix86_debug_arg_string): Delete.\n\t(ix86_debug_addr_string): Delete.\n\t(ix86_cmodel_string, ix86_asm_string, ix86_tls_dialect_string)\n\t(ix86_fpmath_string, ix86_regparm_string, ix86_regparm)\n\t(ix86_align_loops_string, ix86_align_jumps_string)\n\t(ix86_preferred_stack_boundary_string, ix86_branch_cost_string)\n\t(ix86_align_funcs_string): Make static.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(ix86_handle_option): New function.\n\t(TARGET_USE_MS_BITFIELD_LAYOUT): Delete.\n\t(ix86_ms_bitfield_layout_p): Check TARGET_MS_BITFIELD_LAYOUT.\n\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Remove handling\n\tof darwin_fix_and_continue_switch.\n\t(darwin_one_byte_bool): Delete.\n\t* config/rs6000/lynx.h (EXTRA_SUBTARGET_SWITCHES): Delete.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Update assignment\n\tto darwin_one_byte_bool.\n\t* config/darwin.opt, config/lynx.opt, config/i386/cygming.opt,\n\t* config/i386/djgpp.opt, config/i386/i386.opt,\n\t* config/i386/sco5.opt: New files.\n\nFrom-SVN: r98495", "tree": {"sha": "eea7c93a52348b51966d6c18c972a8f0e44878b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea7c93a52348b51966d6c18c972a8f0e44878b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/comments", "author": null, "committer": null, "parents": [{"sha": "0e5d569cd56e49dd5be9a67d553f0c007ff5436c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5d569cd56e49dd5be9a67d553f0c007ff5436c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5d569cd56e49dd5be9a67d553f0c007ff5436c"}], "stats": {"total": 983, "additions": 573, "deletions": 410}, "files": [{"sha": "7b9589a09e15da0f15b9439259b02f610348b812", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -1,3 +1,71 @@\n+2005-04-21  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (*-*-darwin*): Add darwin.opt to $extra_options.\n+\t(i[34567]86-pc-msdosdjgpp*): Likewise i386/djgpp.opt.\n+\t(i[34567]86-*-lynxos*, powerpc-*-lynxos*): Likewise lynx.opt.\n+\t(i[34567]86-*-sco3.2v5*): Likewise i386/sco5.opt.\n+\t(i[34567]86-*-pe, i[34567]86-*-cygwin*, i[34567]86-*-mingw32*)\n+\t(i[34567]86-*-uwin*): Likewise i386/cygming.opt.\n+\t* config/darwin.h (darwin_one_byte_bool, darwin_fix_and_continue)\n+\t(darwin_fix_and_continue_switch, SUBTARGET_OPTIONS): Delete.\n+\t* config/darwin.c (darwin_one_byte_bool, darwin_fix_and_continue)\n+\t(darwin_fix_and_continue_switch): Delete.\n+\t* config/lynx.h (SUBTARGET_OS_LYNX_SWITCHES): Delete.\n+\t(SUBTARGET_SWITCHES): Delete.\n+\t* config/i386/i386.h (target_flags, MASK_80387, MASK_RTD)\n+\t(MASK_ALIGN_DOUBLE, MASK_SVR3_SHLIB, MASK_IEEE_FP, MASK_FLOAT_RETURNS)\n+\t(MASK_NO_FANCY_MATH_387, MASK_OMIT_LEAF_FRAME_POINTER)\n+\t(MASK_STACK_PROBE, MASK_NO_ALIGN_STROPS, MASK_INLINE_ALL_STROPS)\n+\t(MASK_NO_PUSH_ARGS, MASK_ACCUMULATE_OUTGOING_ARGS, MASK_MMX)\n+\t(MASK_SSE, MASK_SSE2, MASK_SSE3, MASK_3DNOW, MASK_3DNOW_A)\n+\t(MASK_128BIT_LONG_DOUBLE, MASK_64BIT, MASK_MS_BITFIELD_LAYOUT)\n+\t(MASK_TLS_DIRECT_SEG_REFS, MASK_NO_RED_ZONE, TARGET_80387)\n+\t(TARGET_RTD, TARGET_ALIGN_DOUBLE, TARGET_PUSH_ARGS)\n+\t(TARGET_ACCUMULATE_OUTGOING_ARGS, TARGET_SVR3_SHLIB, TARGET_IEEE_FP)\n+\t(TARGET_128BIT_LONG_DOUBLE, TARGET_NO_FANCY_MATH_387)\n+\t(TARGET_USE_FANCY_MATH_387, TARGET_OMIT_LEAF_FRAME_POINTER)\n+\t(TARGET_DEBUG_ADDR, TARGET_DEBUG_ARG): Delete.\n+\t(TARGET_FLOAT_RETURNS_IN_80387): Make an alias of TARGET_FLOAT_RETURNS.\n+\t(TARGET_64BIT): Undef before redefining.\n+\t(TARGET_TLS_DIRECT_SEG_REFS, TARGET_STACK_PROBE)\n+\t(TARGET_ALIGN_STRINGOPS, TARGET_INLINE_ALL_STRINGOPS, TARGET_SSE)\n+\t(TARGET_SSE2, TARGET_SSE3, TARGET_MMX, TARGET_3DNOW, TARGET_3DNOW_A)\n+\t(TARGET_RED_ZONE, TARGET_USE_MS_BITFIELD_LAYOUT, TARGET_SWITCHES)\n+\t(TARGET_OPTIONS, SUBTARGET_SWITCHES, SUBTARGET_OPTIONS)\n+\t(ix86_fpmath_string, ix86_tls_dialect_string, ix86_cmodel_string)\n+\t(ix86_asm_string, ix86_regparm, ix86_regparm_string)\n+\t(ix86_preferred_stack_boundary_string, ix86_branch_cost_string)\n+\t(ix86_debug_arg_string, ix86_debug_addr_string)\n+\t(ix86_align_loops_string, ix86_align_jumps_string)\n+\t(ix86_align_funcs_string): Delete.\n+\t* config/i386/cygming.h (MASK_NOP_FUN_DLLIMPORT)\n+\t(TARGET_NOP_FUN_DLLIMPORT, SUBTARGET_SWITCHES): Delete.\n+\t* config/i386/djgpp.h (MASK_BNU210, SUBTARGET_SWITCHES): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Check TARGET_BNU210.\n+\t* config/i386/lynx.h (SUBTARGET_SWITCHES): Delete.\n+\t* config/i386/sco5.h (MASK_COFF, TARGET_ELF)\n+\t(SUBTARGET_SWITCHES): Delete.\n+\t* config/i386/i386.c (ix86_debug_arg_string): Delete.\n+\t(ix86_debug_addr_string): Delete.\n+\t(ix86_cmodel_string, ix86_asm_string, ix86_tls_dialect_string)\n+\t(ix86_fpmath_string, ix86_regparm_string, ix86_regparm)\n+\t(ix86_align_loops_string, ix86_align_jumps_string)\n+\t(ix86_preferred_stack_boundary_string, ix86_branch_cost_string)\n+\t(ix86_align_funcs_string): Make static.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(ix86_handle_option): New function.\n+\t(TARGET_USE_MS_BITFIELD_LAYOUT): Delete.\n+\t(ix86_ms_bitfield_layout_p): Check TARGET_MS_BITFIELD_LAYOUT.\n+\t* config/rs6000/darwin.h (SUBTARGET_OVERRIDE_OPTIONS): Remove handling\n+\tof darwin_fix_and_continue_switch.\n+\t(darwin_one_byte_bool): Delete.\n+\t* config/rs6000/lynx.h (EXTRA_SUBTARGET_SWITCHES): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Update assignment\n+\tto darwin_one_byte_bool.\n+\t* config/darwin.opt, config/lynx.opt, config/i386/cygming.opt,\n+\t* config/i386/djgpp.opt, config/i386/i386.opt,\n+\t* config/i386/sco5.opt: New files.\n+\n 2005-04-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (reg_or_0_operand, const1_operand,"}, {"sha": "d86801a8e16c2c7cd3d943bba06aeef8c97746ea", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -363,6 +363,7 @@ case ${target} in\n   tm_p_file=\"${tm_p_file} darwin-protos.h\"\n   tmake_file=\"t-darwin t-slibgcc-darwin\"\n   target_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n+  extra_options=\"${extra_options} darwin.opt\"\n   c_target_objs=\"darwin-c.o\"\n   cxx_target_objs=\"darwin-c.o\"\n   extra_parts=\"crt2.o\"\n@@ -1010,6 +1011,7 @@ i[34567]86-pc-msdosdjgpp*)\n \txm_file=i386/xm-djgpp.h\n \ttm_file=\"dbxcoff.h ${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/djgpp.h\"\n \ttmake_file=i386/t-djgpp\n+\textra_options=\"${extra_options} i386/djgpp.opt\"\n \tgnu_ld=yes\n \tgas=yes\n \t;;\n@@ -1018,6 +1020,7 @@ i[34567]86-*-lynxos*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/lynx.h lynx.h\"\n \ttmake_file=\"i386/t-crtstuff t-lynx\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_options=\"${extra_options} lynx.opt\"\n \tthread_file=lynx\n \tgnu_ld=yes\n \tgas=yes\n@@ -1060,6 +1063,7 @@ i[34567]86-*-sco3.2v5*)\t# 80386 running SCO Open Server 5\n \tfi\n \ttmake_file=i386/t-sco5\n \textra_parts=\"crtbegin.o crtend.o\"\n+\textra_options=\"${extra_options} i386/sco5.opt\"\n \tuse_fixproto=yes\n \t;;\n i[34567]86-*-solaris2*)\n@@ -1149,6 +1153,7 @@ i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \txm_file=i386/xm-cygwin.h\n \ttmake_file=\"i386/t-cygwin i386/t-cygming\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n+\textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=winnt.o\n \tc_target_objs=cygwin2.o\n \tcxx_target_objs=cygwin2.o\n@@ -1162,6 +1167,7 @@ i[34567]86-*-mingw32*)\n \txm_file=i386/xm-mingw32.h\n \ttmake_file=\"i386/t-cygming i386/t-mingw32\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n+\textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=winnt.o\n \tcase ${enable_threads} in\n \t  \"\" | yes | win32) thread_file='win32' ;;\n@@ -1178,6 +1184,7 @@ i[34567]86-*-uwin*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygwin.h i386/uwin.h\"\n \ttmake_file=\"i386/t-cygwin i386/t-uwin\"\n \textra_objs=winnt.o\n+\textra_options=\"${extra_options} i386/cygming.opt\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='win32'\n@@ -1689,6 +1696,7 @@ powerpc-*-lynxos*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h rs6000/sysv4.h rs6000/lynx.h lynx.h\"\n \ttmake_file=\"t-lynx rs6000/t-lynx\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\textra_options=\"${extra_options} lynx.opt\"\n \tthread_file=lynx\n \tgnu_ld=yes\n \tgas=yes"}, {"sha": "c20bc0e137cac4e17a73150567e64082e2d77015", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -77,10 +77,6 @@ Boston, MA 02111-1307, USA.  */\n    the code that handles @code{static} data indirection.  */\n \n \n-/* Nonzero if the user passes the -mone-byte-bool switch, which forces\n-   sizeof(bool) to be 1. */\n-const char *darwin_one_byte_bool = 0;\n-\n int\n name_needs_quotes (const char *name)\n {\n@@ -1397,13 +1393,4 @@ darwin_file_end (void)\n   fprintf (asm_out_file, \"\\t.subsections_via_symbols\\n\");\n }\n \n-/* True, iff we're generating fast turn around debugging code.  When\n-   true, we arrange for function prologues to start with 4 nops so\n-   that gdb may insert code to redirect them, and for data to accessed\n-   indirectly.  The runtime uses this indirection to forward\n-   references for data to the original instance of that data.  */\n-\n-int darwin_fix_and_continue;\n-const char *darwin_fix_and_continue_switch;\n-\n #include \"gt-darwin.h\""}, {"sha": "ea7e520013144a6912dae5f1ee78d29ef42adcff", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -140,24 +140,6 @@ Boston, MA 02111-1307, USA.  */\n   { \"-unexported_symbols_list\", \"-Zunexported_symbols_list\" }, \\\n   SUBTARGET_OPTION_TRANSLATE_TABLE\n \n-/* Nonzero if the user has chosen to force sizeof(bool) to be 1\n-   by providing the -mone-byte-bool switch.  It would be better\n-   to use SUBTARGET_SWITCHES for this instead of SUBTARGET_OPTIONS,\n-   but there are no more bits in rs6000 TARGET_SWITCHES.  Note\n-   that this switch has no \"no-\" variant. */\n-extern const char *darwin_one_byte_bool;\n-  \n-extern int darwin_fix_and_continue;\n-extern const char *darwin_fix_and_continue_switch;\n-\n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS \\\n-  {\"one-byte-bool\", &darwin_one_byte_bool, N_(\"Set sizeof(bool) to 1\"), 0 }, \\\n-  {\"fix-and-continue\", &darwin_fix_and_continue_switch,\t\t\t\\\n-   N_(\"Generate code suitable for fast turn around debugging\"), 0},\t\\\n-  {\"no-fix-and-continue\", &darwin_fix_and_continue_switch,\t\t\\\n-   N_(\"Don't generate code suitable for fast turn around debugging\"), 0}\n-\n /* These compiler options take n arguments.  */\n \n #undef  WORD_SWITCH_TAKES_ARG"}, {"sha": "8e4aeecc56adcda78f7ece99c8618a177bb2552b", "filename": "gcc/config/darwin.opt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,28 @@\n+; Processor-independent options for Darwin.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mone-byte-bool\n+Target RejectNegative Report Var(darwin_one_byte_bool)\n+Set sizeof(bool) to 1\n+\n+mfix-and-continue\n+Target Report Var(darwin_fix_and_continue)\n+Generate code suitable for fast turn around debugging"}, {"sha": "03e7aa90ce6524a77e0ccdf85982f98636377ef1", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -50,26 +50,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include <stdio.h>\n \n-/* Masks for subtarget switches used by other files.  */\n-#define MASK_NOP_FUN_DLLIMPORT 0x08000000 /* Ignore dllimport for functions */\n-\n-/* Used in winnt.c.  */\n-#define TARGET_NOP_FUN_DLLIMPORT (target_flags & MASK_NOP_FUN_DLLIMPORT)\n-\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{ \"cygwin\",\t\t  0, N_(\"Use the Cygwin interface\") },\t\\\n-{ \"no-cygwin\",\t\t  0, N_(\"Use the Mingw32 interface\") },\t\\\n-{ \"windows\",\t\t  0, N_(\"Create GUI application\") },\t\\\n-{ \"no-win32\",\t\t  0, N_(\"Don't set Windows defines\") },\t\\\n-{ \"win32\",\t\t  0, N_(\"Set Windows defines\") },\t\\\n-{ \"console\",\t\t  0, N_(\"Create console application\") },\\\n-{ \"dll\",\t\t  0, N_(\"Generate code for a DLL\") },\t\\\n-{ \"nop-fun-dllimport\",\t  MASK_NOP_FUN_DLLIMPORT,\t\t\\\n-  N_(\"Ignore dllimport for functions\") },\t\t\t\\\n-{ \"no-nop-fun-dllimport\", -MASK_NOP_FUN_DLLIMPORT, \"\" },\t\\\n-{ \"threads\",\t\t  0, N_(\"Use Mingw-specific thread support\") },\n-\n #define MAYBE_UWIN_CPP_BUILTINS() /* Nothing.  */\n \n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\"}, {"sha": "d61df2bb3ebe0abc9bf381a68de7feae1e8d9f16", "filename": "gcc/config/i386/cygming.opt", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,48 @@\n+; Cygwin- and MinGW-specific options.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mconsole\n+Target RejectNegative\n+Create console application\n+\n+mcygwin\n+Target\n+Use the Cygwin interface\n+\n+mdll\n+Target RejectNegative\n+Generate code for a DLL\n+\n+mnop-fun-dllimport\n+Target Report Var(TARGET_NOP_FUN_DLLIMPORT)\n+Ignore dllimport for functions\n+\n+mthreads\n+Target RejectNegative\n+Use Mingw-specific thread support\n+\n+mwin32\n+Target\n+Set Windows defines\n+\n+mwindows\n+Target\n+Create GUI application"}, {"sha": "abb6e5dbbabde28d997ce39a01176dff37f729d0", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -169,24 +169,14 @@ Boston, MA 02111-1307, USA.  */\n /* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n #define LIBSTDCXX \"-lstdcxx\"\n \n-/* -mbnu210 is now ignored and obsolete. It was used to enable support for\n-   weak symbols, and .gnu.linkonce support.  */\n-#undef MASK_BNU210\n-#define MASK_BNU210 (0x40000000)\n-\n #define TARGET_VERSION fprintf (stderr, \" (80386, MS-DOS DJGPP)\"); \n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-  { \"no-bnu210\", -MASK_BNU210, \"Ignored (obsolete)\" }, \\\n-  { \"bnu210\", MASK_BNU210, \"Ignored (obsolete)\" },\n-\n /* Warn that -mbnu210 is now obsolete.  */\n #undef  SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS \\\n do \\\n   { \\\n-    if (target_flags & MASK_BNU210) \\\n+    if (TARGET_BNU210) \\\n       {\t\\\n         warning (\"-mbnu210 is ignored (option is obsolete)\"); \\\n       }\t\\"}, {"sha": "31c26882e3e62b8e7e6f7a95bd9195ee9f657e8e", "filename": "gcc/config/i386/djgpp.opt", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fdjgpp.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fdjgpp.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,26 @@\n+; DJGPP-specific options.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+;; -mbnu210 is now ignored and obsolete.  It was used to enable support for\n+;; weak symbols, and .gnu.linkonce support.\n+mbnu210\n+Target Var(TARGET_BNU210)\n+Ignored (obsolete)"}, {"sha": "2ca4012f5afa880b824588d6efaadb4111e68d2e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 115, "deletions": 18, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -787,17 +787,15 @@ struct ix86_frame\n   bool save_regs_using_mov;\n };\n \n-/* Used to enable/disable debugging features.  */\n-const char *ix86_debug_arg_string, *ix86_debug_addr_string;\n /* Code model option as passed by user.  */\n-const char *ix86_cmodel_string;\n+static const char *ix86_cmodel_string;\n /* Parsed value.  */\n enum cmodel ix86_cmodel;\n /* Asm dialect.  */\n-const char *ix86_asm_string;\n+static const char *ix86_asm_string;\n enum asm_dialect ix86_asm_dialect = ASM_ATT;\n /* TLS dialext.  */\n-const char *ix86_tls_dialect_string;\n+static const char *ix86_tls_dialect_string;\n enum tls_dialect ix86_tls_dialect = TLS_DIALECT_GNU;\n \n /* Which unit we are generating floating point math for.  */\n@@ -811,42 +809,43 @@ enum processor_type ix86_arch;\n /* Strings to hold which cpu and instruction set architecture  to use.  */\n const char *ix86_tune_string;\t\t/* for -mtune=<xxx> */\n const char *ix86_arch_string;\t\t/* for -march=<xxx> */\n-const char *ix86_fpmath_string;\t\t/* for -mfpmath=<xxx> */\n+static const char *ix86_fpmath_string;\t/* for -mfpmath=<xxx> */\n \n /* # of registers to use to pass arguments.  */\n-const char *ix86_regparm_string;\n+static const char *ix86_regparm_string;\n \n /* true if sse prefetch instruction is not NOOP.  */\n int x86_prefetch_sse;\n \n /* ix86_regparm_string as a number */\n-int ix86_regparm;\n+static int ix86_regparm;\n \n /* Alignment to use for loops and jumps:  */\n \n /* Power of two alignment for loops.  */\n-const char *ix86_align_loops_string;\n+static const char *ix86_align_loops_string;\n \n /* Power of two alignment for non-loop jumps.  */\n-const char *ix86_align_jumps_string;\n+static const char *ix86_align_jumps_string;\n \n /* Power of two alignment for stack boundary in bytes.  */\n-const char *ix86_preferred_stack_boundary_string;\n+static const char *ix86_preferred_stack_boundary_string;\n \n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n \n /* Values 1-5: see jump.c */\n int ix86_branch_cost;\n-const char *ix86_branch_cost_string;\n+static const char *ix86_branch_cost_string;\n \n /* Power of two alignment for functions.  */\n-const char *ix86_align_funcs_string;\n+static const char *ix86_align_funcs_string;\n \n /* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n char internal_label_prefix[16];\n int internal_label_prefix_len;\n \f\n+static bool ix86_handle_option (size_t, const char *, int);\n static void output_pic_addr_const (FILE *, rtx, int);\n static void put_condition_code (enum rtx_code, enum machine_mode,\n \t\t\t\tint, int, FILE *);\n@@ -1045,6 +1044,16 @@ static void init_ext_80387_constants (void);\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START x86_file_start\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\\\n+  (TARGET_DEFAULT\t\t\t\\\n+   | TARGET_64BIT_DEFAULT\t\t\\\n+   | TARGET_SUBTARGET_DEFAULT\t\t\\\n+   | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT)\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION ix86_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ix86_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -1095,6 +1104,98 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n #define DEFAULT_PCC_STRUCT_RETURN 1\n #endif\n \n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+ix86_handle_option (size_t code, const char *arg, int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_m3dnow:\n+      if (!value)\n+\t{\n+\t  target_flags &= ~MASK_3DNOW_A;\n+\t  target_flags_explicit |= MASK_3DNOW_A;\n+\t}\n+      return true;\n+\n+    case OPT_malign_functions_:\n+      ix86_align_funcs_string = arg;\n+      return true;\n+\n+    case OPT_malign_jumps_:\n+      ix86_align_jumps_string = arg;\n+      return true;\n+\n+    case OPT_malign_loops_:\n+      ix86_align_loops_string = arg;\n+      return true;\n+\n+    case OPT_march_:\n+      ix86_arch_string = arg;\n+      return true;\n+\n+    case OPT_masm_:\n+      ix86_asm_string = arg;\n+      return true;\n+\n+    case OPT_mbranch_cost_:\n+      ix86_branch_cost_string = arg;\n+      return true;\n+\n+    case OPT_mcmodel_:\n+      ix86_cmodel_string = arg;\n+      return true;\n+\n+    case OPT_mfpmath_:\n+      ix86_fpmath_string = arg;\n+      return true;\n+\n+    case OPT_mmmx:\n+      if (!value)\n+\t{\n+\t  target_flags &= ~(MASK_3DNOW | MASK_3DNOW_A);\n+\t  target_flags_explicit |= MASK_3DNOW | MASK_3DNOW_A;\n+\t}\n+      return true;\n+\n+    case OPT_mpreferred_stack_boundary_:\n+      ix86_preferred_stack_boundary_string = arg;\n+      return true;\n+\n+    case OPT_mregparm_:\n+      ix86_regparm_string = arg;\n+      return true;\n+\n+    case OPT_msse:\n+      if (!value)\n+\t{\n+\t  target_flags &= ~(MASK_SSE2 | MASK_SSE3);\n+\t  target_flags_explicit |= MASK_SSE2 | MASK_SSE3;\n+\t}\n+      return true;\n+\n+    case OPT_msse2:\n+      if (!value)\n+\t{\n+\t  target_flags &= ~MASK_SSE3;\n+\t  target_flags_explicit |= MASK_SSE3;\n+\t}\n+      return true;\n+\n+    case OPT_mtls_dialect_:\n+      ix86_tls_dialect_string = arg;\n+      return true;\n+\n+    case OPT_mtune_:\n+      ix86_tune_string = arg;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -15908,10 +16009,6 @@ x86_order_regs_for_local_alloc (void)\n      reg_alloc_order [pos++] = 0;\n }\n \n-#ifndef TARGET_USE_MS_BITFIELD_LAYOUT\n-#define TARGET_USE_MS_BITFIELD_LAYOUT 0\n-#endif\n-\n /* Handle a \"ms_struct\" or \"gcc_struct\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n static tree\n@@ -15951,7 +16048,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n static bool\n ix86_ms_bitfield_layout_p (tree record_type)\n {\n-  return (TARGET_USE_MS_BITFIELD_LAYOUT &&\n+  return (TARGET_MS_BITFIELD_LAYOUT &&\n \t  !lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (record_type)))\n     || lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (record_type));\n }"}, {"sha": "b58373ff88402b0792a49af44e7aa8dcdaaf30b4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 285, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -88,10 +88,6 @@ struct processor_costs {\n \n extern const struct processor_costs *ix86_cost;\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n /* Macros used in the machine description to test the flags.  */\n \n /* configure can arrange to make this 2, to force a 486.  */\n@@ -109,104 +105,20 @@ extern int target_flags;\n   (TARGET_64BIT && TARGET_SSE ? FPMATH_SSE : FPMATH_387)\n #endif\n \n-/* Masks for the -m switches */\n-#define MASK_80387\t\t0x00000001\t/* Hardware floating point */\n-#define MASK_RTD\t\t0x00000002\t/* Use ret that pops args */\n-#define MASK_ALIGN_DOUBLE\t0x00000004\t/* align doubles to 2 word boundary */\n-#define MASK_SVR3_SHLIB\t\t0x00000008\t/* Uninit locals into bss */\n-#define MASK_IEEE_FP\t\t0x00000010\t/* IEEE fp comparisons */\n-#define MASK_FLOAT_RETURNS\t0x00000020\t/* Return float in st(0) */\n-#define MASK_NO_FANCY_MATH_387\t0x00000040\t/* Disable sin, cos, sqrt */\n-#define MASK_OMIT_LEAF_FRAME_POINTER 0x080      /* omit leaf frame pointers */\n-#define MASK_STACK_PROBE\t0x00000100\t/* Enable stack probing */\n-#define MASK_NO_ALIGN_STROPS\t0x00000200\t/* Enable aligning of string ops.  */\n-#define MASK_INLINE_ALL_STROPS\t0x00000400\t/* Inline stringops in all cases */\n-#define MASK_NO_PUSH_ARGS\t0x00000800\t/* Use push instructions */\n-#define MASK_ACCUMULATE_OUTGOING_ARGS 0x00001000/* Accumulate outgoing args */\n-#define MASK_MMX\t\t0x00002000\t/* Support MMX regs/builtins */\n-#define MASK_SSE\t\t0x00004000\t/* Support SSE regs/builtins */\n-#define MASK_SSE2\t\t0x00008000\t/* Support SSE2 regs/builtins */\n-#define MASK_SSE3\t\t0x00010000\t/* Support SSE3 regs/builtins */\n-#define MASK_3DNOW\t\t0x00020000\t/* Support 3Dnow builtins */\n-#define MASK_3DNOW_A\t\t0x00040000\t/* Support Athlon 3Dnow builtins */\n-#define MASK_128BIT_LONG_DOUBLE 0x00080000\t/* long double size is 128bit */\n-#define MASK_64BIT\t\t0x00100000\t/* Produce 64bit code */\n-#define MASK_MS_BITFIELD_LAYOUT 0x00200000\t/* Use native (MS) bitfield layout */\n-#define MASK_TLS_DIRECT_SEG_REFS 0x00400000\t/* Avoid adding %gs:0  */\n-\n-/* Unused:\t\t\t0x03e0000\t*/\n-\n-/* ... overlap with subtarget options starts by 0x04000000.  */\n-#define MASK_NO_RED_ZONE\t0x04000000\t/* Do not use red zone */\n-\n-/* Use the floating point instructions */\n-#define TARGET_80387 (target_flags & MASK_80387)\n-\n-/* Compile using ret insn that pops args.\n-   This will not work unless you use prototypes at least\n-   for all functions that can take varying numbers of args.  */\n-#define TARGET_RTD (target_flags & MASK_RTD)\n-\n-/* Align doubles to a two word boundary.  This breaks compatibility with\n-   the published ABI's for structures containing doubles, but produces\n-   faster code on the pentium.  */\n-#define TARGET_ALIGN_DOUBLE (target_flags & MASK_ALIGN_DOUBLE)\n-\n-/* Use push instructions to save outgoing args.  */\n-#define TARGET_PUSH_ARGS (!(target_flags & MASK_NO_PUSH_ARGS))\n-\n-/* Accumulate stack adjustments to prologue/epilogue.  */\n-#define TARGET_ACCUMULATE_OUTGOING_ARGS \\\n- (target_flags & MASK_ACCUMULATE_OUTGOING_ARGS)\n-\n-/* Put uninitialized locals into bss, not data.\n-   Meaningful only on svr3.  */\n-#define TARGET_SVR3_SHLIB (target_flags & MASK_SVR3_SHLIB)\n-\n-/* Use IEEE floating point comparisons.  These handle correctly the cases\n-   where the result of a comparison is unordered.  Normally SIGFPE is\n-   generated in such cases, in which case this isn't needed.  */\n-#define TARGET_IEEE_FP (target_flags & MASK_IEEE_FP)\n-\n-/* Functions that return a floating point value may return that value\n-   in the 387 FPU or in 386 integer registers.  If set, this flag causes\n-   the 387 to be used, which is compatible with most calling conventions.  */\n-#define TARGET_FLOAT_RETURNS_IN_80387 (target_flags & MASK_FLOAT_RETURNS)\n-\n-/* Long double is 128bit instead of 96bit, even when only 80bits are used.\n-   This mode wastes cache, but avoid misaligned data accesses and simplifies\n-   address calculations.  */\n-#define TARGET_128BIT_LONG_DOUBLE (target_flags & MASK_128BIT_LONG_DOUBLE)\n-\n-/* Disable generation of FP sin, cos and sqrt operations for 387.\n-   This is because FreeBSD lacks these in the math-emulator-code */\n-#define TARGET_NO_FANCY_MATH_387 (target_flags & MASK_NO_FANCY_MATH_387)\n-\n-/* Generate 387 floating point intrinsics for the current target.  */\n-#define TARGET_USE_FANCY_MATH_387 (! TARGET_NO_FANCY_MATH_387)\n-\n-/* Don't create frame pointers for leaf functions */\n-#define TARGET_OMIT_LEAF_FRAME_POINTER \\\n-  (target_flags & MASK_OMIT_LEAF_FRAME_POINTER)\n-\n-/* Debug GO_IF_LEGITIMATE_ADDRESS */\n-#define TARGET_DEBUG_ADDR (ix86_debug_addr_string != 0)\n-\n-/* Debug FUNCTION_ARG macros */\n-#define TARGET_DEBUG_ARG (ix86_debug_arg_string != 0)\n+#define TARGET_FLOAT_RETURNS_IN_80387 TARGET_FLOAT_RETURNS\n \n /* 64bit Sledgehammer mode.  For libgcc2 we make sure this is a\n    compile-time constant.  */\n #ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n #ifdef __x86_64__\n #define TARGET_64BIT 1\n #else\n #define TARGET_64BIT 0\n #endif\n #else\n-#ifdef TARGET_BI_ARCH\n-#define TARGET_64BIT (target_flags & MASK_64BIT)\n-#else\n+#ifndef TARGET_BI_ARCH\n+#undef TARGET_64BIT\n #if TARGET_64BIT_DEFAULT\n #define TARGET_64BIT 1\n #else\n@@ -218,9 +130,6 @@ extern int target_flags;\n #define HAS_LONG_COND_BRANCH 1\n #define HAS_LONG_UNCOND_BRANCH 1\n \n-/* Avoid adding %gs:0 in TLS references; use %gs:address directly.  */\n-#define TARGET_TLS_DIRECT_SEG_REFS (target_flags & MASK_TLS_DIRECT_SEG_REFS)\n-\n #define TARGET_386 (ix86_tune == PROCESSOR_I386)\n #define TARGET_486 (ix86_tune == PROCESSOR_I486)\n #define TARGET_PENTIUM (ix86_tune == PROCESSOR_PENTIUM)\n@@ -310,143 +219,18 @@ extern int x86_prefetch_sse;\n #define TARGET_SCHEDULE (x86_schedule & TUNEMASK)\n #define TARGET_USE_BT (x86_use_bt & TUNEMASK)\n \n-#define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n-\n-#define TARGET_ALIGN_STRINGOPS (!(target_flags & MASK_NO_ALIGN_STROPS))\n-#define TARGET_INLINE_ALL_STRINGOPS (target_flags & MASK_INLINE_ALL_STROPS)\n-\n #define ASSEMBLER_DIALECT (ix86_asm_dialect)\n \n-#define TARGET_SSE ((target_flags & MASK_SSE) != 0)\n-#define TARGET_SSE2 ((target_flags & MASK_SSE2) != 0)\n-#define TARGET_SSE3 ((target_flags & MASK_SSE3) != 0)\n #define TARGET_SSE_MATH ((ix86_fpmath & FPMATH_SSE) != 0)\n #define TARGET_MIX_SSE_I387 ((ix86_fpmath & FPMATH_SSE) \\\n \t\t\t     && (ix86_fpmath & FPMATH_387))\n-#define TARGET_MMX ((target_flags & MASK_MMX) != 0)\n-#define TARGET_3DNOW ((target_flags & MASK_3DNOW) != 0)\n-#define TARGET_3DNOW_A ((target_flags & MASK_3DNOW_A) != 0)\n-\n-#define TARGET_RED_ZONE (!(target_flags & MASK_NO_RED_ZONE))\n-\n-#define TARGET_USE_MS_BITFIELD_LAYOUT  (target_flags & MASK_MS_BITFIELD_LAYOUT)\n \n #define TARGET_GNU_TLS (ix86_tls_dialect == TLS_DIALECT_GNU)\n #define TARGET_SUN_TLS (ix86_tls_dialect == TLS_DIALECT_SUN)\n \n #define TARGET_CMPXCHG (x86_cmpxchg & (1 << ix86_arch))\n #define TARGET_XADD (x86_xadd & (1 << ix86_arch))\n \n-/* WARNING: Do not mark empty strings for translation, as calling\n-            gettext on an empty string does NOT return an empty\n-            string.  */\n-\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t      \\\n-{ { \"80387\",\t\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n-  { \"no-80387\",\t\t\t-MASK_80387, N_(\"Do not use hardware fp\") },  \\\n-  { \"hard-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n-  { \"soft-float\",\t\t-MASK_80387, N_(\"Do not use hardware fp\") },  \\\n-  { \"no-soft-float\",\t\t MASK_80387, N_(\"Use hardware fp\") },\t      \\\n-  { \"386\",\t\t\t 0, \"\" /*Deprecated.*/},\t\t      \\\n-  { \"486\",\t\t\t 0, \"\" /*Deprecated.*/},\t\t      \\\n-  { \"pentium\",\t\t\t 0, \"\" /*Deprecated.*/},\t\t      \\\n-  { \"pentiumpro\",\t\t 0, \"\" /*Deprecated.*/},\t\t      \\\n-  { \"intel-syntax\",\t\t 0, \"\" /*Deprecated.*/},\t \t      \\\n-  { \"no-intel-syntax\",\t\t 0, \"\" /*Deprecated.*/},\t \t      \\\n-  { \"rtd\",\t\t\t MASK_RTD,\t\t\t\t      \\\n-    N_(\"Alternate calling convention\") },\t\t\t\t      \\\n-  { \"no-rtd\",\t\t\t-MASK_RTD,\t\t\t\t      \\\n-    N_(\"Use normal calling convention\") },\t\t\t\t      \\\n-  { \"align-double\",\t\t MASK_ALIGN_DOUBLE,\t\t\t      \\\n-    N_(\"Align some doubles on dword boundary\") },\t\t\t      \\\n-  { \"no-align-double\",\t\t-MASK_ALIGN_DOUBLE,\t\t\t      \\\n-    N_(\"Align doubles on word boundary\") },\t\t\t\t      \\\n-  { \"svr3-shlib\",\t\t MASK_SVR3_SHLIB,\t\t\t      \\\n-    N_(\"Uninitialized locals in .bss\")  },\t\t\t\t      \\\n-  { \"no-svr3-shlib\",\t\t-MASK_SVR3_SHLIB,\t\t\t      \\\n-    N_(\"Uninitialized locals in .data\") },\t\t\t\t      \\\n-  { \"ieee-fp\",\t\t\t MASK_IEEE_FP,\t\t\t\t      \\\n-    N_(\"Use IEEE math for fp comparisons\") },\t\t\t\t      \\\n-  { \"no-ieee-fp\",\t\t-MASK_IEEE_FP,\t\t\t\t      \\\n-    N_(\"Do not use IEEE math for fp comparisons\") },\t\t\t      \\\n-  { \"fp-ret-in-387\",\t\t MASK_FLOAT_RETURNS,\t\t\t      \\\n-    N_(\"Return values of functions in FPU registers\") },\t\t      \\\n-  { \"no-fp-ret-in-387\",\t\t-MASK_FLOAT_RETURNS ,\t\t\t      \\\n-    N_(\"Do not return values of functions in FPU registers\")},\t\t      \\\n-  { \"no-fancy-math-387\",\t MASK_NO_FANCY_MATH_387,\t\t      \\\n-    N_(\"Do not generate sin, cos, sqrt for FPU\") },\t\t\t      \\\n-  { \"fancy-math-387\",\t\t-MASK_NO_FANCY_MATH_387,\t\t      \\\n-     N_(\"Generate sin, cos, sqrt for FPU\")},\t\t\t\t      \\\n-  { \"omit-leaf-frame-pointer\",\t MASK_OMIT_LEAF_FRAME_POINTER,\t\t      \\\n-    N_(\"Omit the frame pointer in leaf functions\") },\t\t\t      \\\n-  { \"no-omit-leaf-frame-pointer\",-MASK_OMIT_LEAF_FRAME_POINTER, \"\" },\t      \\\n-  { \"stack-arg-probe\",\t\t MASK_STACK_PROBE,\t\t\t      \\\n-    N_(\"Enable stack probing\") },\t\t\t\t\t      \\\n-  { \"no-stack-arg-probe\",\t-MASK_STACK_PROBE, \"\" },\t\t      \\\n-  { \"windows\",\t\t\t0, 0 /* undocumented */ },\t\t      \\\n-  { \"dll\",\t\t\t0,  0 /* undocumented */ },\t\t      \\\n-  { \"align-stringops\",\t\t-MASK_NO_ALIGN_STROPS,\t\t\t      \\\n-    N_(\"Align destination of the string operations\") },\t\t\t      \\\n-  { \"no-align-stringops\",\t MASK_NO_ALIGN_STROPS,\t\t\t      \\\n-    N_(\"Do not align destination of the string operations\") },\t\t      \\\n-  { \"inline-all-stringops\",\t MASK_INLINE_ALL_STROPS,\t\t      \\\n-    N_(\"Inline all known string operations\") },\t\t\t\t      \\\n-  { \"no-inline-all-stringops\",\t-MASK_INLINE_ALL_STROPS,\t\t      \\\n-    N_(\"Do not inline all known string operations\") },\t\t\t      \\\n-  { \"push-args\",\t\t-MASK_NO_PUSH_ARGS,\t\t\t      \\\n-    N_(\"Use push instructions to save outgoing arguments\") },\t\t      \\\n-  { \"no-push-args\",\t\tMASK_NO_PUSH_ARGS,\t\t\t      \\\n-    N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n-  { \"accumulate-outgoing-args\",\tMASK_ACCUMULATE_OUTGOING_ARGS,\t\t      \\\n-    N_(\"Use push instructions to save outgoing arguments\") },\t\t      \\\n-  { \"no-accumulate-outgoing-args\",-MASK_ACCUMULATE_OUTGOING_ARGS,\t      \\\n-    N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n-  { \"mmx\",\t\t\t MASK_MMX,\t\t\t\t      \\\n-    N_(\"Support MMX built-in functions\") },\t\t\t\t      \\\n-  { \"no-mmx\",\t\t\t -(MASK_MMX|MASK_3DNOW|MASK_3DNOW_A),\t      \\\n-    N_(\"Do not support MMX built-in functions\") },\t\t\t      \\\n-  { \"3dnow\",                     MASK_3DNOW,\t\t\t\t      \\\n-    N_(\"Support 3DNow! built-in functions\") },\t\t\t\t      \\\n-  { \"no-3dnow\",                  -(MASK_3DNOW|MASK_3DNOW_A),\t\t      \\\n-    N_(\"Do not support 3DNow! built-in functions\") },\t\t\t      \\\n-  { \"sse\",\t\t\t MASK_SSE,\t\t\t\t      \\\n-    N_(\"Support MMX and SSE built-in functions and code generation\") },\t      \\\n-  { \"no-sse\",\t\t\t -(MASK_SSE|MASK_SSE2|MASK_SSE3),\t      \\\n-    N_(\"Do not support MMX and SSE built-in functions and code generation\") },\\\n-  { \"sse2\",\t\t\t MASK_SSE2,\t\t\t\t      \\\n-    N_(\"Support MMX, SSE and SSE2 built-in functions and code generation\") }, \\\n-  { \"no-sse2\",\t\t\t -(MASK_SSE2|MASK_SSE3),\t\t      \\\n-    N_(\"Do not support MMX, SSE and SSE2 built-in functions and code generation\") },    \\\n-  { \"sse3\",\t\t\t MASK_SSE3,\t\t\t\t      \\\n-    N_(\"Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\") },\\\n-  { \"no-sse3\",\t\t\t -MASK_SSE3,\t\t\t\t      \\\n-    N_(\"Do not support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\") },\\\n-  { \"128bit-long-double\",\t MASK_128BIT_LONG_DOUBLE,\t\t      \\\n-    N_(\"sizeof(long double) is 16\") },\t\t\t\t\t      \\\n-  { \"96bit-long-double\",\t-MASK_128BIT_LONG_DOUBLE,\t\t      \\\n-    N_(\"sizeof(long double) is 12\") },\t\t\t\t\t      \\\n-  { \"64\",\t\t\tMASK_64BIT,\t\t\t\t      \\\n-    N_(\"Generate 64bit x86-64 code\") },\t\t\t\t\t      \\\n-  { \"32\",\t\t\t-MASK_64BIT,\t\t\t\t      \\\n-    N_(\"Generate 32bit i386 code\") },\t\t\t\t\t      \\\n-  { \"ms-bitfields\",\t\tMASK_MS_BITFIELD_LAYOUT,\t\t      \\\n-    N_(\"Use native (MS) bitfield layout\") },\t\t\t\t      \\\n-  { \"no-ms-bitfields\",\t\t-MASK_MS_BITFIELD_LAYOUT,\t\t      \\\n-    N_(\"Use gcc default bitfield layout\") },\t\t\t\t      \\\n-  { \"red-zone\",\t\t\t-MASK_NO_RED_ZONE,\t\t\t      \\\n-    N_(\"Use red-zone in the x86-64 code\") },\t\t\t\t      \\\n-  { \"no-red-zone\",\t\tMASK_NO_RED_ZONE,\t\t\t      \\\n-    N_(\"Do not use red-zone in the x86-64 code\") },\t\t\t      \\\n-  { \"tls-direct-seg-refs\",\tMASK_TLS_DIRECT_SEG_REFS,\t\t      \\\n-    N_(\"Use direct references against %gs when accessing tls data\") },\t      \\\n-  { \"no-tls-direct-seg-refs\",\t-MASK_TLS_DIRECT_SEG_REFS,\t\t      \\\n-    N_(\"Do not use direct references against %gs when accessing tls data\") }, \\\n-  SUBTARGET_SWITCHES\t\t\t\t\t\t\t      \\\n-  { \"\",\t\t\t\t\t\t\t\t\t      \\\n-    TARGET_DEFAULT | TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_DEFAULT\t      \\\n-    | TARGET_TLS_DIRECT_SEG_REFS_DEFAULT, 0 }}\n-\n #ifndef TARGET_64BIT_DEFAULT\n #define TARGET_64BIT_DEFAULT 0\n #endif\n@@ -468,48 +252,6 @@ extern int x86_prefetch_sse;\n    with the rounding mode forced to 53 bits.  */\n #define TARGET_96_ROUND_53_LONG_DOUBLE 0\n \n-/* This macro is similar to `TARGET_SWITCHES' but defines names of\n-   command options that have values.  Its definition is an\n-   initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   fixed part of the option name, and the address of a variable.  The\n-   variable, type `char *', is set to the variable part of the given\n-   option if the fixed part matches.  The actual option name is made\n-   by appending `-m' to the specified name.  */\n-#define TARGET_OPTIONS\t\t\t\t\t\t\\\n-{ { \"tune=\",\t\t&ix86_tune_string,\t\t\t\\\n-    N_(\"Schedule code for given CPU\"), 0},\t\t\t\\\n-  { \"fpmath=\",\t\t&ix86_fpmath_string,\t\t\t\\\n-    N_(\"Generate floating point mathematics using given instruction set\"), 0},\\\n-  { \"arch=\",\t\t&ix86_arch_string,\t\t\t\\\n-    N_(\"Generate code for given CPU\"), 0},\t\t\t\\\n-  { \"regparm=\",\t\t&ix86_regparm_string,\t\t\t\\\n-    N_(\"Number of registers used to pass integer arguments\"), 0},\\\n-  { \"align-loops=\",\t&ix86_align_loops_string,\t\t\\\n-    N_(\"Loop code aligned to this power of 2\"), 0},\t\t\\\n-  { \"align-jumps=\",\t&ix86_align_jumps_string,\t\t\\\n-    N_(\"Jump targets are aligned to this power of 2\"), 0},\t\\\n-  { \"align-functions=\",\t&ix86_align_funcs_string,\t\t\\\n-    N_(\"Function starts are aligned to this power of 2\"), 0},\t\\\n-  { \"preferred-stack-boundary=\",\t\t\t\t\\\n-    &ix86_preferred_stack_boundary_string,\t\t\t\\\n-    N_(\"Attempt to keep stack aligned to this power of 2\"), 0},\t\\\n-  { \"branch-cost=\",\t&ix86_branch_cost_string,\t\t\\\n-    N_(\"Branches are this expensive (1-5, arbitrary units)\"), 0},\\\n-  { \"cmodel=\", &ix86_cmodel_string,\t\t\t\t\\\n-    N_(\"Use given x86-64 code model\"), 0},\t\t\t\\\n-  { \"debug-arg\", &ix86_debug_arg_string,\t\t\t\\\n-    \"\" /* Undocumented.  */, 0},\t\t\t\t\\\n-  { \"debug-addr\", &ix86_debug_addr_string,\t\t\t\\\n-    \"\" /* Undocumented.  */, 0},\t\t\t\t\\\n-  { \"asm=\", &ix86_asm_string,\t\t\t\t\t\\\n-    N_(\"Use given assembler dialect\"), 0},\t\t\t\\\n-  { \"tls-dialect=\", &ix86_tls_dialect_string,\t\t\t\\\n-    N_(\"Use given thread-local storage dialect\"), 0},\t\t\\\n-  SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-}\n-\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n@@ -521,10 +263,6 @@ extern int x86_prefetch_sse;\n \n #define OVERRIDE_OPTIONS override_options ()\n \n-/* These are meant to be redefined in the host dependent files */\n-#define SUBTARGET_SWITCHES\n-#define SUBTARGET_OPTIONS\n-\n /* Define this to change the optimizations performed by default.  */\n #define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n   optimization_options ((LEVEL), (SIZE))\n@@ -2409,7 +2147,6 @@ enum fpmath_unit\n };\n \n extern enum fpmath_unit ix86_fpmath;\n-extern const char *ix86_fpmath_string;\n \n enum tls_dialect\n {\n@@ -2418,7 +2155,6 @@ enum tls_dialect\n };\n \n extern enum tls_dialect ix86_tls_dialect;\n-extern const char *ix86_tls_dialect_string;\n \n enum cmodel {\n   CM_32,\t/* The traditional 32-bit ABI.  */\n@@ -2430,7 +2166,6 @@ enum cmodel {\n };\n \n extern enum cmodel ix86_cmodel;\n-extern const char *ix86_cmodel_string;\n \n /* Size of the RED_ZONE area.  */\n #define RED_ZONE_SIZE 128\n@@ -2442,25 +2177,9 @@ enum asm_dialect {\n   ASM_INTEL\n };\n \n-extern const char *ix86_asm_string;\n extern enum asm_dialect ix86_asm_dialect;\n-\n-extern int ix86_regparm;\n-extern const char *ix86_regparm_string;\n-\n extern unsigned int ix86_preferred_stack_boundary;\n-extern const char *ix86_preferred_stack_boundary_string;\n-\n extern int ix86_branch_cost;\n-extern const char *ix86_branch_cost_string;\n-\n-extern const char *ix86_debug_arg_string;\n-extern const char *ix86_debug_addr_string;\n-\n-/* Obsoleted by -f options.  Remove before 3.2 ships.  */\n-extern const char *ix86_align_loops_string;\n-extern const char *ix86_align_jumps_string;\n-extern const char *ix86_align_funcs_string;\n \n /* Smallest class containing REGNO.  */\n extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER];"}, {"sha": "5571deebe4e76aabb49d60c323a3ec8496248d5b", "filename": "gcc/config/i386/i386.opt", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,217 @@\n+; Options for the IA-32 and AMD64 ports of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m128bit-long-double\n+Target RejectNegative Report Mask(128BIT_LONG_DOUBLE)\n+sizeof(long double) is 16\n+\n+m32\n+Target RejectNegative Report InverseMask(64BIT)\n+Generate 32bit i386 code\n+\n+m386\n+Target RejectNegative Undocumented\n+;; Deprecated\n+\n+m3dnow\n+Target Report Mask(3DNOW)\n+Support 3DNow! built-in functions\n+\n+m486\n+Target RejectNegative Undocumented\n+;; Deprecated\n+\n+m64\n+Target RejectNegative Report Mask(64BIT)\n+Generate 64bit x86-64 code\n+\n+m80387\n+Target Report Mask(80387)\n+Use hardware fp\n+\n+m96bit-long-double\n+Target RejectNegative Report InverseMask(128BIT_LONG_DOUBLE)\n+sizeof(long double) is 12\n+\n+maccumulate-outgoing-args\n+Target Report Mask(ACCUMULATE_OUTGOING_ARGS)\n+Reserve space for outgoing arguments in the function prologue\n+\n+malign-double\n+Target Report Mask(ALIGN_DOUBLE)\n+Align some doubles on dword boundary\n+\n+malign-functions=\n+Target RejectNegative Joined\n+Function starts are aligned to this power of 2\n+\n+malign-jumps=\n+Target RejectNegative Joined\n+Jump targets are aligned to this power of 2\n+\n+malign-loops=\n+Target RejectNegative Joined\n+Loop code aligned to this power of 2\n+\n+malign-stringops\n+Target RejectNegative Report InverseMask(NO_ALIGN_STRINGOPS, ALIGN_STRINGOPS)\n+Align destination of the string operations\n+\n+march=\n+Target RejectNegative Joined\n+Generate code for given CPU\n+\n+masm=\n+Target RejectNegative Joined\n+Use given assembler dialect\n+\n+mbranch-cost=\n+Target RejectNegative Joined\n+Branches are this expensive (1-5, arbitrary units)\n+\n+mcmodel=\n+Target RejectNegative Joined\n+Use given x86-64 code model\n+\n+mdebug-addr\n+Target RejectNegative Var(TARGET_DEBUG_ADDR) Undocumented\n+\n+mdebug-arg\n+Target RejectNegative Var(TARGET_DEBUG_ARG) Undocumented\n+\n+mfancy-math-387\n+Target RejectNegative Report InverseMask(NO_FANCY_MATH_387, USE_FANCY_MATH_387)\n+Generate sin, cos, sqrt for FPU\n+\n+mfp-ret-in-387\n+Target Report Mask(FLOAT_RETURNS)\n+Return values of functions in FPU registers\n+\n+mfpmath=\n+Target RejectNegative Joined\n+Generate floating point mathematics using given instruction set\n+\n+mhard-float\n+Target RejectNegative Mask(80387) MaskExists\n+Use hardware fp\n+\n+mieee-fp\n+Target Report Mask(IEEE_FP)\n+Use IEEE math for fp comparisons\n+\n+minline-all-stringops\n+Target Report Mask(INLINE_ALL_STRINGOPS)\n+Inline all known string operations\n+\n+mintel-syntax\n+Target Undocumented\n+;; Deprecated\n+\n+mmmx\n+Target Report Mask(MMX)\n+Support MMX built-in functions\n+\n+mms-bitfields\n+Target Report Mask(MS_BITFIELD_LAYOUT)\n+Use native (MS) bitfield layout\n+\n+mno-align-stringops\n+Target RejectNegative Report Mask(NO_ALIGN_STRINGOPS) Undocumented\n+\n+mno-fancy-math-387\n+Target RejectNegative Report Mask(NO_FANCY_MATH_387) Undocumented\n+\n+mno-push-args\n+Target RejectNegative Report Mask(NO_PUSH_ARGS) Undocumented\n+\n+mno-red-zone\n+Target RejectNegative Report Mask(NO_RED_ZONE) Undocumented\n+\n+momit-leaf-frame-pointer\n+Target Report Mask(OMIT_LEAF_FRAME_POINTER)\n+Omit the frame pointer in leaf functions\n+\n+mpentium\n+Target RejectNegative Undocumented\n+;; Deprecated\n+\n+mpentiumpro\n+Target RejectNegative Undocumented\n+;; Deprecated\n+\n+mpreferred-stack-boundary=\n+Target RejectNegative Joined\n+Attempt to keep stack aligned to this power of 2\n+\n+mpush-args\n+Target Report InverseMask(NO_PUSH_ARGS, PUSH_ARGS)\n+Use push instructions to save outgoing arguments\n+\n+mred-zone\n+Target RejectNegative Report InverseMask(NO_RED_ZONE, RED_ZONE)\n+Use red-zone in the x86-64 code\n+\n+mregparm=\n+Target RejectNegative Joined\n+Number of registers used to pass integer arguments\n+\n+mrtd\n+Target Report Mask(RTD)\n+Alternate calling convention\n+\n+msoft-float\n+Target InverseMask(80387)\n+Do not use hardware fp\n+\n+msse\n+Target Report Mask(SSE)\n+Support MMX and SSE built-in functions and code generation\n+\n+msse2\n+Target Report Mask(SSE2)\n+Support MMX, SSE and SSE2 built-in functions and code generation\n+\n+msse3\n+Target Report Mask(SSE3)\n+Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\n+\n+msvr3-shlib\n+Target Report Mask(SVR3_SHLIB)\n+Uninitialized locals in .bss\n+\n+mstack-arg-probe\n+Target Report Mask(STACK_PROBE)\n+Enable stack probing\n+\n+mtls-dialect=\n+Target RejectNegative Joined\n+Use given thread-local storage dialect\n+\n+mtls-direct-seg-refs\n+Target Report Mask(TLS_DIRECT_SEG_REFS)\n+Use direct references against %gs when accessing tls data\n+\n+mtune=\n+Target RejectNegative Joined\n+Schedule code for given CPU\n+\n+;; Support Athlon 3Dnow builtins\n+Mask(3DNOW_A)"}, {"sha": "e5cd7ff079441c4baeab189c86a64dc491cdaa46", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -71,12 +71,6 @@ Boston, MA 02111-1307, USA.  */\n   } while (0)\n #endif\n \n-/* Since i386.h defines an empty SUBTARGET_SWITCHES the definition in\n-   config/lynx.h is omitted.  */\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n-\n /* Undefine SUBTARGET_EXTRA_SPECS it is empty anyway.  We define it in\n    config/lynx.h.  */\n "}, {"sha": "4ce5e8fbbeb955b56b0015318561d1e793c251d9", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -281,14 +281,6 @@ Boston, MA 02111-1307, USA.  */\n #define LIBGCC_SPEC \\\n  \"%{!shared:%{!G:-lgcc}}\"\n \n-/* Here for legacy support only so we still accept -melf flag */\n-#define MASK_COFF     \t\t010000000000\t/* Mask for COFF generation */\n-#define TARGET_ELF              (1)\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \t\t\t\t\t\\\n-\t{ \"elf\", -MASK_COFF, N_(\"Generate ELF output\")  },\n-\n /* Handle special EH pointer encodings.  Absolute, pc-relative, and\n    indirect are handled automatically.  */\n #define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\"}, {"sha": "9bafcf56978e3f082be2ccd3eef75389a495cb10", "filename": "gcc/config/i386/sco5.opt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fsco5.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Fi386%2Fsco5.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,25 @@\n+; SCO Unix-specific options.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+;; Legacy option\n+melf\n+Target RejectNegative\n+Generate ELF output"}, {"sha": "c06a65d2983dd5c7dd192531a1619fabb00118b9", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -129,20 +129,6 @@ Boston, MA 02111-1307, USA.  */\n  %{mthreads: thread/crtn.o%s} %{!mthreads: crtn.o%s}\"\n #endif\n \n-/* Because of the %{m*} in cc1_options these options get substituted\n-   for cc1.  We ignore them here.  */\n-\n-#ifndef SUBTARGET_OS_LYNX_SWITCHES\n-# define SUBTARGET_OS_LYNX_SWITCHES\t\t\t\t\\\n-  { \"shared\",\t\t0, N_(\"Use shared libraries\") },\t\\\n-  { \"threads\", \t\t0, N_(\"Support multi-threading\") },\t\\\n-  { \"legacy-threads\",\t0, N_(\"Support legacy multi-threading\") },\n-#endif\n-\n-#ifndef SUBTARGET_SWITCHES\n-# define SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n-#endif\n-\n /* Define the actual types of some ANSI-mandated types.  */\n \n #ifndef SIZE_TYPE"}, {"sha": "059a3d20b7401ad2f6dc1839e213909e81677538", "filename": "gcc/config/lynx.opt", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Flynx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Flynx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.opt?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -0,0 +1,32 @@\n+; Processor-independent options for LynxOS.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mlegacy-threads\n+Target RejectNegative\n+Support legacy multi-threading\n+\n+mshared\n+Target RejectNegative\n+Use shared libraries\n+\n+mthreads\n+Target RejectNegative\n+Support multi-threading"}, {"sha": "25f320a1c4a183b76681c6c6956d513ec4cd1650", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -94,17 +94,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n         /* Darwin doesn't support -fpic.  */\t\t\t\t\\\n         warning (\"-fpic is not supported; -fPIC assumed\");\t\t\\\n         flag_pic = 2;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    /* Handle -mfix-and-continue.  */\t\t\t\t\t\\\n-    if (darwin_fix_and_continue_switch)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tconst char *base = darwin_fix_and_continue_switch;\t\t\\\n-\twhile (base[-1] != 'm') base--;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (*darwin_fix_and_continue_switch != '\\0')\t\t\t\\\n-\t  error (\"invalid option %qs\", base);\t\t\t\t\\\n-\tdarwin_fix_and_continue = (base[0] != 'n');\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n@@ -391,7 +380,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* For binary compatibility with 2.95; Darwin C APIs use bool from\n    stdbool.h, which was an int-sized enum in 2.95.  Users can explicitly\n    choose to have sizeof(bool)==1 with the -mone-byte-bool switch. */\n-extern const char *darwin_one_byte_bool;\n #define BOOL_TYPE_SIZE (darwin_one_byte_bool ? CHAR_TYPE_SIZE : INT_TYPE_SIZE)\n \n #undef REGISTER_TARGET_PRAGMAS"}, {"sha": "fa4cc773f5c54c7f785161c6f495478262ea267b", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -89,9 +89,6 @@\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef EXTRA_SUBTARGET_SWITCHES\n-#define EXTRA_SUBTARGET_SWITCHES SUBTARGET_OS_LYNX_SWITCHES\n-\n /* LynxOS does not do anything with .fixup plus let's not create\n    writable section for linkonce.r and linkonce.t.  */\n "}, {"sha": "d2d44c7997b6b1eebd5afb332b88c0ae37139b4d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac49599123d5d649107b8d7fd0674a8fb1afdbe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6ac49599123d5d649107b8d7fd0674a8fb1afdbe", "patch": "@@ -1311,9 +1311,8 @@ rs6000_override_options (const char *default_cpu)\n   if (DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT)\n     {\n       rs6000_darwin64_abi = 1;\n-      /* Setting to empty string is same as \"-mone-byte-bool\".  */\n #if TARGET_MACHO\n-      darwin_one_byte_bool = \"\";\n+      darwin_one_byte_bool = 1;\n #endif\n       /* Default to natural alignment, for better performance.  */\n       rs6000_alignment_flags = MASK_ALIGN_NATURAL;"}]}