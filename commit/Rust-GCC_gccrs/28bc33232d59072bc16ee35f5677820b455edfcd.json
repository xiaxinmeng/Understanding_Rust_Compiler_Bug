{"sha": "28bc33232d59072bc16ee35f5677820b455edfcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiYzMzMjMyZDU5MDcyYmMxNmVlMzVmNTY3NzgyMGI0NTVlZGZjZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:38:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:38:29Z"}, "message": "[multiple changes]\n\n2014-06-13  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb (Make_Id): New function.\n\t(Make_SC): New function.\n\t(Set_RND): New procedure.\n\t* back_end.ads (Make_Id): New function.\n\t(Make_SC): New function.\n\t(Set_RND): New procedure.\n\t* einfo.ads: Minor comment updates.\n\t* frontend.adb: Move Atree.Initialize call to Gnat1drv.\n\t* gnat1drv.adb (Gnat1drv): New calling sequence for\n\tGet_Target_Parameters.\n\t(Gnat1drv): Move Atree.Initialize here from Frontend.\n\t* targparm.adb (Get_Target_Parameters): New calling\n\tsequence (Get_Target_Parameters): Handle pragma Restriction\n\t(No_Dependence,..)\n\t* targparm.ads (Get_Target_Parameters): New calling sequence.\n\n2014-06-13  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_prag.adb (Process_Import_Or_Interface): Exit the homonym\n\tloop if the pragma does not come from source, so that an implicit\n\tpragma Import only applies to the first declaration, avoiding\n\tpossible conflicts with earlier explicit and implicit declarations\n\tdue to multiple Provide_Shift_Operators pragmas.\n\t(Set_Imported): Remove previous fix that bypassed pragma duplication\n\terror.\n\t* gnat_rm.texi: Change 'equivalent' to 'similar' in description\n\tof Provide_Shift_Operators.\n\nFrom-SVN: r211610", "tree": {"sha": "d434ad3c8743b3c579c8f5ce36984de47a3e600f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d434ad3c8743b3c579c8f5ce36984de47a3e600f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28bc33232d59072bc16ee35f5677820b455edfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bc33232d59072bc16ee35f5677820b455edfcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28bc33232d59072bc16ee35f5677820b455edfcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bc33232d59072bc16ee35f5677820b455edfcd/comments", "author": null, "committer": null, "parents": [{"sha": "ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7"}], "stats": {"total": 375, "additions": 283, "deletions": 92}, "files": [{"sha": "b2cdbc578b8b5363f942f637da7dc5925b973baa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -1,3 +1,33 @@\n+2014-06-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb (Make_Id): New function.\n+\t(Make_SC): New function.\n+\t(Set_RND): New procedure.\n+\t* back_end.ads (Make_Id): New function.\n+\t(Make_SC): New function.\n+\t(Set_RND): New procedure.\n+\t* einfo.ads: Minor comment updates.\n+\t* frontend.adb: Move Atree.Initialize call to Gnat1drv.\n+\t* gnat1drv.adb (Gnat1drv): New calling sequence for\n+\tGet_Target_Parameters.\n+\t(Gnat1drv): Move Atree.Initialize here from Frontend.\n+\t* targparm.adb (Get_Target_Parameters): New calling\n+\tsequence (Get_Target_Parameters): Handle pragma Restriction\n+\t(No_Dependence,..)\n+\t* targparm.ads (Get_Target_Parameters): New calling sequence.\n+\n+2014-06-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): Exit the homonym\n+\tloop if the pragma does not come from source, so that an implicit\n+\tpragma Import only applies to the first declaration, avoiding\n+\tpossible conflicts with earlier explicit and implicit declarations\n+\tdue to multiple Provide_Shift_Operators pragmas.\n+\t(Set_Imported): Remove previous fix that bypassed pragma duplication\n+\terror.\n+\t* gnat_rm.texi: Change 'equivalent' to 'similar' in description\n+\tof Provide_Shift_Operators.\n+\n 2014-06-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc-interface/utils.c (process_attributes) <ATTR_LINK_SECTION>: Pass"}, {"sha": "6c763ced348edbf97f6588c6e75b04785a294199", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;     use Atree;\n+with Csets;     use Csets;\n with Debug;     use Debug;\n with Elists;    use Elists;\n with Errout;    use Errout;\n@@ -33,13 +34,14 @@ with Opt;       use Opt;\n with Osint.C;   use Osint.C;\n with Namet;     use Namet;\n with Nlists;    use Nlists;\n+with Nmake;     use Nmake;\n+with Restrict;  use Restrict;\n with Stand;     use Stand;\n with Sinput;    use Sinput;\n with Stringt;   use Stringt;\n with Switch;    use Switch;\n with Switch.C;  use Switch.C;\n with System;    use System;\n-with Types;     use Types;\n \n with System.OS_Lib; use System.OS_Lib;\n \n@@ -163,6 +165,15 @@ package body Back_End is\n          gigi_operating_mode           => Mode);\n    end Call_Back_End;\n \n+   -------------------------------\n+   -- Gen_Or_Update_Object_File --\n+   -------------------------------\n+\n+   procedure Gen_Or_Update_Object_File is\n+   begin\n+      null;\n+   end Gen_Or_Update_Object_File;\n+\n    -------------\n    -- Len_Arg --\n    -------------\n@@ -178,6 +189,36 @@ package body Back_End is\n       raise Program_Error;\n    end Len_Arg;\n \n+   -------------\n+   -- Make_Id --\n+   -------------\n+\n+   function Make_Id (Str : Text_Buffer) return Node_Id is\n+   begin\n+      Name_Len := 0;\n+\n+      for J in Str'Range loop\n+         Name_Len := Name_Len + 1;\n+         Name_Buffer (Name_Len) := Fold_Lower (Str (J));\n+      end loop;\n+\n+      return\n+        Make_Identifier (System_Location,\n+          Chars => Name_Find);\n+   end Make_Id;\n+\n+   -------------\n+   -- Make_SC --\n+   -------------\n+\n+   function  Make_SC (Pre, Sel : Node_Id) return Node_Id is\n+   begin\n+      return\n+        Make_Selected_Component (System_Location,\n+          Prefix        => Pre,\n+          Selector_Name => Sel);\n+   end Make_SC;\n+\n    -----------------------------\n    -- Scan_Compiler_Arguments --\n    -----------------------------\n@@ -342,13 +383,13 @@ package body Back_End is\n       end loop;\n    end Scan_Compiler_Arguments;\n \n-   -------------------------------\n-   -- Gen_Or_Update_Object_File --\n-   -------------------------------\n+   -------------\n+   -- Set_RND --\n+   -------------\n \n-   procedure Gen_Or_Update_Object_File is\n+   procedure Set_RND (Unit : Node_Id) is\n    begin\n-      null;\n-   end Gen_Or_Update_Object_File;\n+      Restrict.Set_Restriction_No_Dependence (Unit, Warn => False);\n+   end Set_RND;\n \n end Back_End;"}, {"sha": "d301791fee2543d1048947a3e34c015c950aa210", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,6 +24,10 @@\n ------------------------------------------------------------------------------\n \n --  Call the back end with all the information needed\n+--  Note: there are multiple bodies/variants of this package, so do not\n+--  modify this spec without coordination.\n+\n+with Types; use Types;\n \n package Back_End is\n \n@@ -82,4 +86,13 @@ package Back_End is\n    --  object file's timestamp is correct when compared with the corresponding\n    --  ali file by gnatmake.\n \n+   function  Make_Id (Str : Text_Buffer) return Node_Id;\n+   function  Make_SC (Pre, Sel : Node_Id) return Node_Id;\n+   procedure Set_RND (Unit : Node_Id);\n+   --  Subprograms for call to Get_Target_Parameters, see spec of package\n+   --  Targparm for full description of these three subprograms. These are\n+   --  parked in this package because they are have to be at the top level\n+   --  because of accessibility issues, and Gnat1drv, which is where they\n+   --  are used, is a subprogram.\n+\n end Back_End;"}, {"sha": "6a62e2e7810f1c93ccc3224a6f1a825ce5c88720", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -101,9 +101,9 @@ package Einfo is\n --     pragma Inline declarations\n \n --  This order must be observed. There are no restrictions on the procedures,\n---  since the C header file only includes functions (Gigi is not allowed to\n---  modify the generated tree). However, functions are required to have headers\n---  that fit on a single line.\n+--  since the C header file only includes functions (The back end is not\n+--  allowed to modify the generated tree). However, functions are required to\n+--  have headers that fit on a single line.\n \n --  XEINFO reads and processes the function specs and the pragma Inlines. For\n --  functions that are declared as inlined, XEINFO reads the corresponding body\n@@ -121,7 +121,7 @@ package Einfo is\n \n --  For functions that are not inlined, there is no restriction on the body,\n --  and XEINFO generates a direct reference in the C header file which allows\n---  the C code in Gigi to directly call the corresponding Ada body.\n+--  the C code in the  backend to directly call the corresponding Ada body.\n \n ----------------------------------\n -- Handling of Type'Size Values --\n@@ -378,16 +378,16 @@ package Einfo is\n --       the N_Attribute_Definition_Clause node. Empty if no Address clause.\n --       The expression in the address clause is always a constant that is\n --       defined before the entity to which the address clause applies.\n---       Note: Gigi references this field in E_Task_Type entities???\n+--       Note: The backend references this field in E_Task_Type entities???\n \n --    Address_Taken (Flag104)\n --       Defined in all entities. Set if the Address or Unrestricted_Access\n --       attribute is applied directly to the entity, i.e. the entity is the\n --       entity of the prefix of the attribute reference. Also set if the\n --       entity is the second argument of an Asm_Input or Asm_Output attribute,\n---       as the construct may entail taking its address. Used by Gigi to make\n---       sure that the address can be meaningfully taken, and also in the case\n---       of subprograms to control output of certain warnings.\n+--       as the construct may entail taking its address. Used by the backend to\n+--       make sure that the address can be meaningfully taken, and also in the\n+--       case of subprograms to control output of certain warnings.\n \n --    Aft_Value (synthesized)\n --       Applies to fixed and decimal types. Computes a universal integer\n@@ -415,7 +415,7 @@ package Einfo is\n --       object. A value of zero (Uint_0) indicates that the alignment has not\n --       been set yet. The alignment can be set by an explicit alignment\n --       clause, or set by the front-end in package Layout, or set by the\n---       back-end as part of the back end back-annotation process. The\n+--       back-end as part of the back-end back-annotation process. The\n --       alignment field is also defined in E_Exception entities, but there it\n --       is used only by the back-end for back annotation.\n \n@@ -534,13 +534,13 @@ package Einfo is\n \n --    Can_Use_Internal_Rep (Flag229) [base type only]\n --       Defined in Access_Subprogram_Kind nodes. This flag is set by the\n---       front end and used by the back end. False means that the back end\n+--       front end and used by the backend. False means that the backend\n --       must represent the type in the same way as Convention-C types (and\n --       other foreign-convention types). On many targets, this means that\n---       the back end will use dynamically generated trampolines for nested\n---       subprograms. True means that the back end can represent the type in\n+--       the backend will use dynamically generated trampolines for nested\n+--       subprograms. True means that the backend can represent the type in\n --       some internal way. On the aforementioned targets, this means that the\n---       back end will not use dynamically generated trampolines. This flag\n+--       backend will not use dynamically generated trampolines. This flag\n --       must be False if Has_Foreign_Convention is True; otherwise, the front\n --       end is free to set the policy.\n --\n@@ -568,11 +568,11 @@ package Einfo is\n --       table that has the character string of the identifier, character\n --       literal or operator symbol. See Namet for further details. Note that\n --       throughout the processing of the front end, this name is the simple\n---       unqualified name. However, just before gigi is called, a call is made\n---       to Qualify_All_Entity_Names. This causes entity names to be qualified\n---       using the encoding described in exp_dbug.ads, and from that point on\n---       (including post gigi steps such as cross-reference generation), the\n---       entities will contain the encoded qualified names.\n+--       unqualified name. However, just before the backend is called, a call\n+--       is made to Qualify_All_Entity_Names. This causes entity names to be\n+--       qualified using the encoding described in exp_dbug.ads, and from that\n+--       point (including post backend steps, e.g. cross-reference generation),\n+--       the entities will contain the encoded qualified names.\n \n --    Checks_May_Be_Suppressed (Flag31)\n --       Defined in all entities. Set if a pragma Suppress or Unsuppress\n@@ -639,7 +639,7 @@ package Einfo is\n --       Note: Component_Bit_Offset is redundant with respect to the fields\n --       Normalized_First_Bit and Normalized_Position, and could in principle\n --       be eliminated, but it is convenient in several situations, including\n---       use in Gigi, to have this redundant field.\n+--       use in the backend, to have this redundant field.\n \n --    Component_Clause (Node13)\n --       Defined in record components and discriminants. If a record\n@@ -733,7 +733,7 @@ package Einfo is\n --       to the entity, or if internal processing in the compiler determines\n --       that suppression of debug information is desirable. Note that this\n --       flag is only for use by the front end as part of the processing for\n---       determining if Needs_Debug_Info should be set. The back end should\n+--       determining if Needs_Debug_Info should be set. The backend should\n --       always test Needs_Debug_Info, it should never test Debug_Info_Off.\n \n --    Debug_Renaming_Link (Node25)\n@@ -1088,7 +1088,7 @@ package Einfo is\n --       Defined in class wide types and subtypes, access to protected\n --       subprogram types, and in exception types. For a classwide type, it\n --       is always Empty. For a class wide subtype, it points to an entity\n---       created by the expander which gives Gigi an easily understandable\n+--       created by the expander which gives the backend an understandable\n --       equivalent of the class subtype with a known size (given by an\n --       initial value). See Exp_Util.Expand_Class_Wide_Subtype for further\n --       details. For E_Exception_Type, this points to the record containing\n@@ -1111,8 +1111,8 @@ package Einfo is\n --       of a component to be set without a component clause defined, which\n --       means that the component size is specified, but not the position.\n --       See also RM_Size and the section on \"Handling of Type'Size Values\".\n---       During gigi processing, the value is back annotated for all zero\n---       values, so that after the call to gigi, the value is properly set.\n+--       During backend processing, the value is back annotated for all zero\n+--       values, so that after the call to the backend, the value is set.\n \n --    Etype (Node5)\n --       Defined in all entities. Represents the type of the entity, which\n@@ -1309,7 +1309,7 @@ package Einfo is\n --          Thread_Local_Storage pragma\n --\n --       If any of these items are present, then the flag Has_Gigi_Rep_Item is\n---       set, indicating that Gigi should search the chain.\n+--       set, indicating that the backend should search the chain.\n --\n --       Other representation items are included in the chain so that error\n --       messages can easily locate the relevant nodes for posting errors.\n@@ -1558,8 +1558,8 @@ package Einfo is\n --    Has_Gigi_Rep_Item (Flag82)\n --       Defined in all entities. Set if the rep item chain (referenced by\n --       First_Rep_Item and linked through the Next_Rep_Item chain) contains a\n---       representation item that needs to be specially processed by Gigi, i.e.\n---       one of the following items:\n+--       representation item that needs to be specially processed by the back\n+--       end, i.e. one of the following items:\n --\n --          Machine_Attribute pragma\n --          Linker_Alias pragma\n@@ -1568,13 +1568,13 @@ package Einfo is\n --          Weak_External pragma\n --          Thread_Local_Storage pragma\n --\n---       If this flag is set, then Gigi should scan the rep item chain to\n---       process any of these items that appear. At least one such item will\n+--       If this flag is set, then the backend should scan the rep item chain\n+--       to process any of these items that appear. At least one such item will\n --       be present.\n --\n --    Has_Homonym (Flag56)\n --       Defined in all entities. Set if an entity has a homonym in the same\n---       scope. Used by Gigi to generate unique names for such entities.\n+--       scope. Used by the backend to generate unique names for all entities.\n \n --    Has_Implicit_Dereference (Flag251)\n --       Defined in types and discriminants. Set if the type has an aspect\n@@ -1646,7 +1646,7 @@ package Einfo is\n --       scope that has an exception handler and the two scopes are in the\n --       same procedure. This is used by the backend for controlling certain\n --       optimizations to ensure that they are consistent with exceptions.\n---       See documentation in Gigi for further details.\n+--       See documentation in backend for further details.\n \n --    Has_Non_Null_Refinement (synth)\n --       Defined in E_Abstract_State entities. True if the state has at least\n@@ -2185,9 +2185,9 @@ package Einfo is\n --       by the expander to represent a task or protected type. For every\n --       concurrent type, such as record type is constructed, and task and\n --       protected objects are instances of this record type at runtime\n---       (Gigi will replace declarations of the concurrent type using the\n---       declarations of the corresponding record type). See package Exp_Ch9\n---       for further details.\n+--       (The backend will replace declarations of the concurrent type using\n+--       the declarations of the corresponding record type). See Exp_Ch9 for\n+--       further details.\n \n --    Is_Concurrent_Type (synthesized)\n --       Applies to all entities, true for task types and subtypes and for\n@@ -2212,7 +2212,7 @@ package Einfo is\n --       Defined in all types and subtypes. This flag can be set only if\n --       Is_Constr_Subt_For_U_Nominal is also set. It indicates that in\n --       addition the object concerned is aliased. This flag is used by\n---       Gigi to determine whether a template must be constructed.\n+--       the backend to determine whether a template must be constructed.\n \n --    Is_Constructor (Flag76)\n --       Defined in function and procedure entities. Set if a pragma\n@@ -2497,9 +2497,9 @@ package Einfo is\n --    Is_Itype (Flag91)\n --       Defined in all entities. Set to indicate that a type is an Itype,\n --       which means that the declaration for the type does not appear\n---       explicitly in the tree. Instead gigi will elaborate the type when it\n---       is first used. Has_Delayed_Freeze can be set for Itypes, and the\n---       meaning is that the first use (the one which causes the type to be\n+--       explicitly in the tree. Instead the backend will elaborate the type\n+--       when it is first used. Has_Delayed_Freeze can be set for Itypes, and\n+--       the meaning is that the first use (the one which causes the type to be\n --       defined) will be the freeze node. Note that an important restriction\n --       on Itypes is that the first use of such a type (the one that causes it\n --       to be defined) must be in the same scope as the type.\n@@ -2523,7 +2523,7 @@ package Einfo is\n --       The flag is dynamically set and reset as semantic analysis and\n --       expansion proceeds. Its value is meaningless once the tree is\n --       fully constructed, since it simply indicates the last state.\n---       Thus this flag has no meaning to the back end.\n+--       Thus this flag has no meaning to the backend.\n \n --    Is_Known_Null (Flag204)\n --       Defined in all entities. Relevant (and can be set ) only for\n@@ -2552,7 +2552,7 @@ package Einfo is\n --\n --       For objects, the flag indicates the state of knowledge about the\n --       current value of the object. This may be modified during expansion,\n---       and thus the final value is not relevant to gigi.\n+--       and thus the final value is not relevant to the backend.\n --\n --       For types and subtypes, the flag is set if all possible bit patterns\n --       of length Object_Size (i.e. Esize of the type) represent valid values\n@@ -2567,7 +2567,7 @@ package Einfo is\n --       The flag is dynamically set and reset as semantic analysis and\n --       expansion proceeds. Its value is meaningless once the tree is\n --       fully constructed, since it simply indicates the last state.\n---       Thus this flag has no meaning to the back end.\n+--       Thus this flag has no meaning to the backend.\n \n --    Is_Limited_Composite (Flag106)\n --       Defined in all entities. Set for composite types that have a limited\n@@ -2709,11 +2709,11 @@ package Einfo is\n --       used to implement a packed array (either a modular type, or a subtype\n --       of Packed_Bytes{1,2,4} as appropriate). The flag is set if and only\n --       if the type appears in the Packed_Array_Type field of some other type\n---       entity. It is used by Gigi to activate the special processing for such\n---       types (unchecked conversions that would not otherwise be allowed are\n---       allowed for such types). If the Is_Packed_Array_Type flag is set in\n---       an entity, then the Original_Array_Type field of this entity points\n---       to the original array type for which this is the packed array type.\n+--       entity. It is used by the backend to activate the special processing\n+--       for such types (unchecked conversions that would not otherwise be\n+--       allowed are allowed for such types). If the Is_Packed_Array_Type flag\n+--       is set in an entity, then the Original_Array_Type field of this entity\n+--       points to the array type for which this is the packed array type.\n \n --    Is_Potentially_Use_Visible (Flag9)\n --       Defined in all entities. Set if entity is potentially use visible,\n@@ -2797,8 +2797,8 @@ package Einfo is\n --       Defined in all entities. Set to indicate that an entity defined in\n --       one compilation unit can be referenced from other compilation units.\n --       If this reference causes a reference in the generated variable, for\n---       example in the case of a variable name, then Gigi will generate an\n---       appropriate external name for use by the linker.\n+--       example in the case of a variable name, then the backend will generate\n+--       an appropriate external name for use by the linker.\n \n --    Is_Protected_Record_Type (synthesized)\n --       Applies to all entities, true if Is_Concurrent_Record_Type is true and\n@@ -3011,7 +3011,7 @@ package Einfo is\n --       and full view. The flag is not set reliably on private subtypes,\n --       and is always retrieved from the base type (but this is not a base-\n --       type-only attribute because it applies to other entities). Note that\n---       the back end should use Treat_As_Volatile, rather than Is_Volatile\n+--       the backend should use Treat_As_Volatile, rather than Is_Volatile\n --       to indicate code generation requirements for volatile variables.\n --       Similarly, any front end test which is concerned with suppressing\n --       optimizations on volatile objects should test Treat_As_Volatile\n@@ -3158,7 +3158,7 @@ package Einfo is\n --       Defined in entities for types and subtypes. Set if objects of the type\n --       must always be allocated on a byte boundary (more accurately a storage\n --       unit boundary). The front end checks that component clauses respect\n---       this rule, and the back end ensures that record packing does not\n+--       this rule, and the backend ensures that record packing does not\n --       violate this rule. Currently the flag is set only for packed arrays\n --       longer than 64 bits where the component size is not a power of 2.\n \n@@ -3175,7 +3175,7 @@ package Einfo is\n --       Comes_From_Source set, and also transitively for entities associated\n --       with such components (e.g. their types). It is true for all entities\n --       in Debug_Generated_Code mode (-gnatD switch). This is the flag that\n---       the back end should check to determine whether or not to generate\n+--       the backend should check to determine whether or not to generate\n --       debugging information for an entity. Note that callers should always\n --       use Sem_Util.Set_Debug_Info_Needed, rather than Set_Needs_Debug_Info,\n --       so that the flag is set properly on subsidiary entities.\n@@ -3283,7 +3283,7 @@ package Einfo is\n --    Next_Inlined_Subprogram (Node12)\n --       Defined in subprograms. Used to chain inlined subprograms used in\n --       the current compilation, in the order in which they must be compiled\n---       by Gigi to insure that all inlinings are performed.\n+--       by the backend to insure that all inlinings are performed.\n \n --    Next_Literal (synthesized)\n --       Applies to enumeration literals, returns the next literal, or\n@@ -3339,10 +3339,10 @@ package Einfo is\n --       there are default discriminants, and also for the 'Size value).\n \n --    No_Strict_Aliasing (Flag136) [base type only]\n---       Defined in access types. Set to direct the back end to avoid any\n+--       Defined in access types. Set to direct the backend to avoid any\n --       optimizations based on an assumption about the aliasing status of\n --       objects designated by the access type. For the case of the gcc\n---       back end, the effect is as though all references to objects of\n+--       backend, the effect is as though all references to objects of\n --       the type were compiled with -fno-strict-aliasing. This flag is\n --       set if an unchecked conversion with the access type as a target\n --       type occurs in the same source unit as the declaration of the\n@@ -3372,7 +3372,7 @@ package Einfo is\n --       types, it is cheaper to do the copy.\n \n --    OK_To_Reorder_Components (Flag239) [base type only]\n---       Defined in record types. Set if the back end is permitted to reorder\n+--       Defined in record types. Set if the backend is permitted to reorder\n --       the components. If not set, the record must be layed out in the order\n --       in which the components are declared textually. Currently this flag\n --       can only be set by debug switches.\n@@ -3413,9 +3413,9 @@ package Einfo is\n --       In base tagged types:\n --         When the component is inherited in a record extension, it points\n --         to the original component (the entity of the ancestor component\n---         which is not itself inherited) otherwise it points to itself.\n---         Gigi uses this attribute to implement the automatic dereference in\n---         the extension and to apply the transformation:\n+--         which is not itself inherited) otherwise it points to itself. The\n+--         backend uses this attribute to implement the automatic dereference\n+--         in the extension and to apply the transformation:\n --\n --            Rec_Ext.Comp -> Rec_Ext.Parent. ... .Parent.Comp\n --\n@@ -3999,7 +3999,7 @@ package Einfo is\n --       be set as a result of situations (such as address overlays) where\n --       the front end wishes to force volatile handling to inhibit aliasing\n --       optimization which might be legally ok, but is undesirable. Note\n---       that the back end always tests this flag rather than Is_Volatile.\n+--       that the backend always tests this flag rather than Is_Volatile.\n --       The front end tests Is_Volatile if it is concerned with legality\n --       checks associated with declared volatile variables, but if the test\n --       is for the purposes of suppressing optimizations, then the front\n@@ -4029,7 +4029,7 @@ package Einfo is\n --       the full view of a private type T is derived from another private type\n --       with discriminants Td, the full view of T is also private, and there\n --       is no way to attach to it a further full view that would convey the\n---       structure of T to the back end. The Underlying_Full_ View is an\n+--       structure of T to the backend. The Underlying_Full_ View is an\n --       attribute of the full view that is a subtype of Td with the same\n --       constraint as the declaration for T. The declaration for this subtype\n --       is built at the point of the declaration of T, either as completion,\n@@ -4222,7 +4222,7 @@ package Einfo is\n --  In addition, we define the kind E_Allocator_Type to label allocators.\n --  This is because special resolution rules apply to this construct.\n --  Eventually the constructs are labeled with the access type imposed by\n---  the context. Gigi should never see types with this Ekind.\n+--  the context. The backend should never see types with this Ekind.\n \n --  Similarly, the type E_Access_Attribute_Type is used as the initial kind\n --  associated with an access attribute. After resolution a specific access\n@@ -4409,8 +4409,8 @@ package Einfo is\n       --  objects using 'Reference. This is needed because special resolution\n       --  rules apply to these constructs. On the resolution pass, this type\n       --  is almost always replaced by the actual access type, but if the\n-      --  context does not provide one Gigi can handle the Allocator_Type\n-      --  itself as long as it has been frozen.\n+      --  context does not provide one, the backend will see Allocator_Type\n+      --  itself (which will already have been frozen).\n \n       E_General_Access_Type,\n       --  An access type created by an access type declaration with the all"}, {"sha": "24b33cfe2096f7ef29b53cb8f7d0d0bba794c526", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -80,7 +80,6 @@ begin\n    --  since it uses names table entries.\n \n    Rtsfind.Initialize;\n-   Atree.Initialize;\n    Nlists.Initialize;\n    Elists.Initialize;\n    Lib.Load.Initialize;"}, {"sha": "3a390dcb3323f22626687d259bc113ed9423ce82", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -81,6 +81,10 @@ with Validsw;  use Validsw;\n \n with System.Assertions;\n \n+--------------\n+-- Gnat1drv --\n+--------------\n+\n procedure Gnat1drv is\n    Main_Unit_Node : Node_Id;\n    --  Compilation unit node for main unit\n@@ -763,6 +767,7 @@ begin\n       Scan_Compiler_Arguments;\n       Osint.Add_Default_Search_Dirs;\n \n+      Atree.Initialize;\n       Nlists.Initialize;\n       Sinput.Initialize;\n       Sem.Initialize;\n@@ -785,7 +790,7 @@ begin\n \n       --  Acquire target parameters from system.ads (source of package System)\n \n-      declare\n+      Targparm_Acquire : declare\n          use Sinput;\n \n          S : Source_File_Index;\n@@ -812,12 +817,17 @@ begin\n          Targparm.Get_Target_Parameters\n            (System_Text  => Source_Text  (S),\n             Source_First => Source_First (S),\n-            Source_Last  => Source_Last  (S));\n+            Source_Last  => Source_Last  (S),\n+            Make_Id      => Back_End.Make_Id'Unrestricted_Access,\n+            Make_SC      => Back_End.Make_SC'Unrestricted_Access,\n+            Set_RND      => Back_End.Set_RND'Unrestricted_Access);\n \n          --  Acquire configuration pragma information from Targparm\n \n          Restrict.Restrictions := Targparm.Restrictions_On_Target;\n-      end;\n+      end Targparm_Acquire;\n+\n+      --  Perform various adjustments and settings of global switches\n \n       Adjust_Global_Switches;\n "}, {"sha": "0d86a40ccc287230db6bef67d07244ad62b92f6f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -5852,7 +5852,7 @@ pragma Provide_Shift_Operators (integer_first_subtype_LOCAL_NAME);\n This pragma can be applied to a first subtype local name that specifies\n either an unsigned or signed type. It has the effect of providing the\n five shift operators (Shift_Left, Shift_Right, Shift_Right_Arithmetic,\n-Rotate_Left and Rotate_Right) for the given type. It is equivalent to\n+Rotate_Left and Rotate_Right) for the given type. It is similar to\n including the function declarations for these five operators, together\n with the pragma Import (Intrinsic, ...) statements.\n "}, {"sha": "0aca6646b72a43b245f44265d8e2f2335e618068", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -8066,7 +8066,8 @@ package body Sem_Prag is\n          then\n             --  If the name is overloaded, pragma applies to all of the denoted\n             --  entities in the same declarative part, unless the pragma comes\n-            --  from an aspect specification.\n+            --  from an aspect specification or was generated by the compiler\n+            --  (such as for pragma Provide_Shift_Operators).\n \n             Hom_Id := Def_Id;\n             while Present (Hom_Id) loop\n@@ -8178,6 +8179,19 @@ package body Sem_Prag is\n                elsif From_Aspect_Specification (N) then\n                   exit;\n \n+               --  If the pragma was created by the compiler, then we don't\n+               --  want it to apply to other homonyms. This kind of case can\n+               --  occur when using pragma Provide_Shift_Operators, which\n+               --  generates implicit shift and rotate operators with Import\n+               --  pragmas that might apply to earlier explicit or implicit\n+               --  declarations marked with Import (for example, coming from\n+               --  an earlier pragma Provide_Shift_Operators for another type),\n+               --  and we don't generally want other homonyms being treated\n+               --  as imported or the pragma flagged as an illegal duplicate.\n+\n+               elsif not Comes_From_Source (N) then\n+                  exit;\n+\n                else\n                   Hom_Id := Homonym (Hom_Id);\n                end if;\n@@ -9576,12 +9590,6 @@ package body Sem_Prag is\n             elsif Import_Interface_Present (N) then\n                goto OK;\n \n-            --  OK if the pragma was expanded by the compiler. Can occur when\n-            --  using pragma Provide_Shift_Operators on multiple types.\n-\n-            elsif not Comes_From_Source (N) then\n-               goto OK;\n-\n             --  Error if being set Imported twice\n \n             else"}, {"sha": "0f93344ef378c32abd53d3330878019099b8af0a", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 69, "deletions": 4, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -160,7 +160,11 @@ package body Targparm is\n \n    --  Version which reads in system.ads\n \n-   procedure Get_Target_Parameters is\n+   procedure Get_Target_Parameters\n+     (Make_Id : Make_Id_Type := null;\n+      Make_SC : Make_SC_Type := null;\n+      Set_RND : Set_RND_Type := null)\n+   is\n       Text : Source_Buffer_Ptr;\n       Hi   : Source_Ptr;\n \n@@ -183,15 +187,21 @@ package body Targparm is\n       Get_Target_Parameters\n         (System_Text  => Text,\n          Source_First => 0,\n-         Source_Last  => Hi);\n+         Source_Last  => Hi,\n+         Make_Id      => Make_Id,\n+         Make_SC      => Make_SC,\n+         Set_RND      => Set_RND);\n    end Get_Target_Parameters;\n \n    --  Version where caller supplies system.ads text\n \n    procedure Get_Target_Parameters\n      (System_Text  : Source_Buffer_Ptr;\n       Source_First : Source_Ptr;\n-      Source_Last  : Source_Ptr)\n+      Source_Last  : Source_Ptr;\n+      Make_Id      : Make_Id_Type := null;\n+      Make_SC      : Make_SC_Type := null;\n+      Set_RND      : Set_RND_Type := null)\n    is\n       P : Source_Ptr;\n       --  Scans source buffer containing source of system.ads\n@@ -341,6 +351,61 @@ package body Targparm is\n                null;\n             end loop Ploop;\n \n+            --  No_Dependence case\n+\n+            if System_Text (P .. P + 16) = \"No_Dependence => \" then\n+               P := P + 17;\n+\n+               --  Skip this processing (and simply ignore No_Dependence lines)\n+               --  if caller did not supply the three subprograms we need to\n+               --  process these lines.\n+\n+               if Make_Id = null then\n+                  goto Line_Loop_Continue;\n+               end if;\n+\n+               --  We have scanned out \"pragma Restrictions (No_Dependence =>\"\n+\n+               declare\n+                  Unit  : Node_Id;\n+                  Id    : Node_Id;\n+                  Start : Source_Ptr;\n+\n+               begin\n+                  Unit := Empty;\n+\n+                  --  Loop through components of name, building up Unit\n+\n+                  loop\n+                     Start := P;\n+                     while System_Text (P) /= '.'\n+                             and then\n+                           System_Text (P) /= ')'\n+                     loop\n+                        P := P + 1;\n+                     end loop;\n+\n+                     Id := Make_Id (System_Text (Start .. P - 1));\n+\n+                     --  If first name, just capture the identifier\n+\n+                     if Unit = Empty then\n+                        Unit := Id;\n+                     else\n+                        Unit := Make_SC (Unit, Id);\n+                     end if;\n+\n+                     exit when System_Text (P) = ')';\n+                     P := P + 1;\n+                  end loop;\n+\n+                  Set_RND (Unit);\n+                  goto Line_Loop_Continue;\n+               end;\n+            end if;\n+\n+            --  Here if unrecognizable restrictions pragma form\n+\n             Set_Standard_Error;\n             Write_Line\n                (\"fatal error: system.ads is incorrectly formatted\");"}, {"sha": "21f2d6db4161a1d4a194bfbef4d951f7b138bc8f", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bc33232d59072bc16ee35f5677820b455edfcd/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=28bc33232d59072bc16ee35f5677820b455edfcd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -612,17 +612,42 @@ package Targparm is\n    --  These subprograms are used to initialize the target parameter values\n    --  from the system.ads file. Note that this is only done once, so if more\n    --  than one call is made to either routine, the second and subsequent\n-   --  calls are ignored.\n+   --  calls are ignored. It also reads restriction pragmas from system.ads\n+   --  and records them, though as further detailed below, the caller has some\n+   --  control over the handling of No_Dependence restrictions.\n+\n+   type Make_Id_Type is access function (Str : Text_Buffer) return Node_Id;\n+   --  Parameter type for Get_Target_Parameters for function that creates an\n+   --  identifier node with Sloc value System_Location and given string as the\n+   --  Chars value.\n+\n+   type Make_SC_Type is access function (Pre, Sel : Node_Id) return Node_Id;\n+   --  Parameter type for Get_Target_Parameters for function that creates a\n+   --  selected component with Sloc value System_Location and given Prefix\n+   --  (Pre) and Selector (Sel) values.\n+\n+   type Set_RND_Type is access procedure (Unit : Node_Id);\n+   --  Parameter type for Get_Target_Parameters that records a Restriction\n+   --  No_Dependence for the given unit (identifier or selected component).\n \n    procedure Get_Target_Parameters\n      (System_Text  : Source_Buffer_Ptr;\n       Source_First : Source_Ptr;\n-      Source_Last  : Source_Ptr);\n+      Source_Last  : Source_Ptr;\n+      Make_Id      : Make_Id_Type := null;\n+      Make_SC      : Make_SC_Type := null;\n+      Set_RND      : Set_RND_Type := null);\n    --  Called at the start of execution to obtain target parameters from\n    --  the source of package System. The parameters provide the source\n    --  text to be scanned (in System_Text (Source_First .. Source_Last)).\n+   --  if the three subprograms are left at their default value of null,\n+   --  Get_Target_Parameters will ignore pragma Restrictions No_Dependence\n+   --  lines, otherwise it will use these three subprograms to record them.\n \n-   procedure Get_Target_Parameters;\n+   procedure Get_Target_Parameters\n+     (Make_Id : Make_Id_Type := null;\n+      Make_SC : Make_SC_Type := null;\n+      Set_RND : Set_RND_Type := null);\n    --  This version reads in system.ads using Osint. The idea is that the\n    --  caller uses the first version if they have to read system.ads anyway\n    --  (e.g. the compiler) and uses this simpler interface if system.ads is"}]}