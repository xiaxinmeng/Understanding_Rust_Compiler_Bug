{"sha": "7c20a9b738a2257bed4e2b0593275336d1e2047a", "node_id": "C_kwDOANBUbNoAKDdjMjBhOWI3MzhhMjI1N2JlZDRlMmIwNTkzMjc1MzM2ZDFlMjA0N2E", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-10-19T01:35:30Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-10-25T08:01:14Z"}, "message": "Combine the FADD(A, FMA(B, C, 0)) to FMA(B, C, A) and combine FADD(A, FMUL(B, C)) to FMA(B, C, A).\n\nThis patch is to support transform in fast-math something like\n_mm512_add_ph(x1, _mm512_fmadd_pch(a, b, _mm512_setzero_ph())) to\n _mm512_fmadd_pch(a, b, x1).\n\nAnd support transform _mm512_add_ph(x1, _mm512_fmul_pch(a, b))\nto _mm512_fmadd_pch(a, b, x1).\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (fma_<mode>_fadd_fmul): Add new\n\tdefine_insn_and_split.\n\t(fma_<mode>_fadd_fcmul):Likewise\n\t(fma_<complexopname>_<mode>_fma_zero):Likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-complex-fma.c: New test.", "tree": {"sha": "13410731f65a613f153592262c34da0b14053640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13410731f65a613f153592262c34da0b14053640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c20a9b738a2257bed4e2b0593275336d1e2047a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c20a9b738a2257bed4e2b0593275336d1e2047a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c20a9b738a2257bed4e2b0593275336d1e2047a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c20a9b738a2257bed4e2b0593275336d1e2047a/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37935c01841ce47e989bbdeb567277b206d4ac76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37935c01841ce47e989bbdeb567277b206d4ac76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37935c01841ce47e989bbdeb567277b206d4ac76"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "431236ab3a43326b7bc542f69017cc08c433ba38", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c20a9b738a2257bed4e2b0593275336d1e2047a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c20a9b738a2257bed4e2b0593275336d1e2047a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7c20a9b738a2257bed4e2b0593275336d1e2047a", "patch": "@@ -5958,6 +5958,58 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"fma_<mode>_fadd_fmul\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(plus:VF_AVX512FP16VL\n+\t  (unspec:VF_AVX512FP16VL\n+\t\t[(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")\n+\t\t (match_operand:VF_AVX512FP16VL 2 \"vector_operand\")]\n+\t\t UNSPEC_COMPLEX_FMUL)\n+\t  (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && flag_unsafe_math_optimizations\n+  && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t   UNSPEC_COMPLEX_FMA))])\n+\n+(define_insn_and_split \"fma_<mode>_fadd_fcmul\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(plus:VF_AVX512FP16VL\n+\t  (unspec:VF_AVX512FP16VL\n+\t\t[(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")\n+\t\t (match_operand:VF_AVX512FP16VL 2 \"vector_operand\")]\n+\t\t UNSPEC_COMPLEX_FCMUL)\n+\t  (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && flag_unsafe_math_optimizations\n+  && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t   UNSPEC_COMPLEX_FCMA))])\n+\n+(define_insn_and_split \"fma_<complexopname>_<mode>_fma_zero\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(plus:VF_AVX512FP16VL\n+\t  (unspec:VF_AVX512FP16VL\n+\t\t[(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")\n+\t\t (match_operand:VF_AVX512FP16VL 2 \"vector_operand\")\n+\t\t (match_operand:VF_AVX512FP16VL 3 \"const0_operand\")]\n+\t\t UNSPEC_COMPLEX_F_C_MA)\n+\t  (match_operand:VF_AVX512FP16VL 4 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && flag_unsafe_math_optimizations\n+  && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_dup 1) (match_dup 2) (match_dup 4)]\n+\t   UNSPEC_COMPLEX_F_C_MA))])\n+\n (define_insn \"<avx512>_<complexopname>_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=&v\")\n \t(vec_merge:VF_AVX512FP16VL"}, {"sha": "2dfd369e78527c56ffe8a47028486e64c1e47b07", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-complex-fma.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c20a9b738a2257bed4e2b0593275336d1e2047a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-fma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c20a9b738a2257bed4e2b0593275336d1e2047a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-fma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-fma.c?ref=7c20a9b738a2257bed4e2b0593275336d1e2047a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2 -Ofast\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-not \"vaddph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"} } */\n+/* { dg-final { scan-assembler-not \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"} } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+volatile __m512h x1, x2, res, a, b;\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm512_add_ph (x1, _mm512_fmadd_pch (a, b, _mm512_setzero_ph()));\n+  res = _mm512_add_ph (x1, _mm512_fcmadd_pch (a, b, _mm512_setzero_ph()));\n+\n+  res = _mm512_add_ph (x1, _mm512_fmul_pch (a, b));\n+  res = _mm512_add_ph (x1, _mm512_fcmul_pch (a, b));\n+}"}]}