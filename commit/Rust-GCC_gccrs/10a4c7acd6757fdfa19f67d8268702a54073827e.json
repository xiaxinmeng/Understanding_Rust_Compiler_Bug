{"sha": "10a4c7acd6757fdfa19f67d8268702a54073827e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhNGM3YWNkNjc1N2ZkZmExOWY2N2Q4MjY4NzAyYTU0MDczODI3ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-09T22:51:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-09T22:51:05Z"}, "message": "c-common.c (enum format_type): Add format_type_error.\n\n\t* c-common.c (enum format_type): Add format_type_error.\n\t(decode_format_type): New function.\n\t(decl_attributes): Use it.\n\t(format_kind_info): Adjust comment.\n\nFrom-SVN: r38843", "tree": {"sha": "4b08eb3215fc11e19296cf26a4b8ae6270535611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b08eb3215fc11e19296cf26a4b8ae6270535611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a4c7acd6757fdfa19f67d8268702a54073827e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a4c7acd6757fdfa19f67d8268702a54073827e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a4c7acd6757fdfa19f67d8268702a54073827e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a4c7acd6757fdfa19f67d8268702a54073827e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e0c56ca228330504fce807b06e40c5033af260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e0c56ca228330504fce807b06e40c5033af260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e0c56ca228330504fce807b06e40c5033af260"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "3a8aea6051384885c187cbae455fb599d1b3e91a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a4c7acd6757fdfa19f67d8268702a54073827e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a4c7acd6757fdfa19f67d8268702a54073827e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10a4c7acd6757fdfa19f67d8268702a54073827e", "patch": "@@ -1,3 +1,10 @@\n+2001-01-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (enum format_type): Add format_type_error.\n+\t(decode_format_type): New function.\n+\t(decl_attributes): Use it.\n+\t(format_kind_info): Adjust comment.\n+\n 2001-01-09  David O'Brien  <obrien@BSDi.com>\n \n \t* config.gcc (*-*-gnu*, i[34567]86-*-elf*, i[34567]86-*-linux*libc1,"}, {"sha": "e8108f3ecec7d90c32ce31b7de2f1cf11d4c9295", "filename": "gcc/c-common.c", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a4c7acd6757fdfa19f67d8268702a54073827e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a4c7acd6757fdfa19f67d8268702a54073827e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=10a4c7acd6757fdfa19f67d8268702a54073827e", "patch": "@@ -251,12 +251,16 @@ enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS, A_MALLOC,\n \t    A_NO_LIMIT_STACK, A_PURE};\n \n+/* This must be in the same order as format_types, with format_type_error\n+   last.  */\n enum format_type { printf_format_type, scanf_format_type,\n-\t\t   strftime_format_type, strfmon_format_type };\n+\t\t   strftime_format_type, strfmon_format_type,\n+\t\t   format_type_error };\n \n static void add_attribute\t\tPARAMS ((enum attrs, const char *,\n \t\t\t\t\t\t int, int, int));\n static void init_attributes\t\tPARAMS ((void));\n+static enum format_type decode_format_type\tPARAMS ((const char *));\n static void record_function_format\tPARAMS ((tree, tree, enum format_type,\n \t\t\t\t\t\t int, int));\n static void record_international_format\tPARAMS ((tree, tree, int));\n@@ -970,17 +974,9 @@ decl_attributes (node, attributes, prefix_attributes)\n \t      {\n \t\tconst char *p = IDENTIFIER_POINTER (format_type_id);\n \n-\t\tif (!strcmp (p, \"printf\") || !strcmp (p, \"__printf__\"))\n-\t\t  format_type = printf_format_type;\n-\t\telse if (!strcmp (p, \"scanf\") || !strcmp (p, \"__scanf__\"))\n-\t\t  format_type = scanf_format_type;\n-\t\telse if (!strcmp (p, \"strftime\")\n-\t\t\t || !strcmp (p, \"__strftime__\"))\n-\t\t  format_type = strftime_format_type;\n-\t\telse if (!strcmp (p, \"strfmon\")\n-\t\t\t || !strcmp (p, \"__strfmon__\"))\n-\t\t  format_type = strfmon_format_type;\n-\t\telse\n+\t\tformat_type = decode_format_type (p);\n+\n+\t\tif (format_type == format_type_error)\n \t\t  {\n \t\t    warning (\"`%s' is an unrecognized format function type\", p);\n \t\t    continue;\n@@ -1512,7 +1508,8 @@ typedef struct\n /* Structure describing a particular kind of format processed by GCC.  */\n typedef struct\n {\n-  /* The name of this kind of format, for use in diagnostics.  */\n+  /* The name of this kind of format, for use in diagnostics.  Also\n+     the name of the attribute (without preceding and following __).  */\n   const char *name;\n   /* Specifications of the length modifiers accepted; possibly NULL.  */\n   const format_length_info *length_char_specs;\n@@ -2025,6 +2022,30 @@ init_function_format_info ()\n     }\n }\n \n+/* Decode a format type from a string, returning the type, or\n+   format_type_error if not valid, in which case the caller should print an\n+   error message.  */\n+static enum format_type\n+decode_format_type (s)\n+     const char *s;\n+{\n+  int i;\n+  int slen;\n+  slen = strlen (s);\n+  for (i = 0; i < (int) format_type_error; i++)\n+    {\n+      int alen;\n+      if (!strcmp (s, format_types[i].name))\n+\tbreak;\n+      alen = strlen (format_types[i].name);\n+      if (slen == alen + 4 && s[0] == '_' && s[1] == '_'\n+\t  && s[slen - 1] == '_' && s[slen - 2] == '_'\n+\t  && !strncmp (s + 2, format_types[i].name, alen))\n+\tbreak;\n+    }\n+  return ((enum format_type) i);\n+}\n+\n /* Record information for argument format checking.  FUNCTION_IDENT is\n    the identifier node for the name of the function to check (its decl\n    need not exist yet)."}]}