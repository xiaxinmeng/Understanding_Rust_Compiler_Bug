{"sha": "5e839bc82015c2659f230cf1141ec868cf5d449c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4MzliYzgyMDE1YzI2NTlmMjMwY2YxMTQxZWM4NjhjZjVkNDQ5Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-09-17T23:08:03Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-09-17T23:08:03Z"}, "message": "Add comment to expand_mult max_cost change.\n\nFrom-SVN: r104379", "tree": {"sha": "898f8154cbfe2d48f72ba1369c93c01ae87fc413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898f8154cbfe2d48f72ba1369c93c01ae87fc413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e839bc82015c2659f230cf1141ec868cf5d449c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e839bc82015c2659f230cf1141ec868cf5d449c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e839bc82015c2659f230cf1141ec868cf5d449c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e839bc82015c2659f230cf1141ec868cf5d449c/comments", "author": null, "committer": null, "parents": [{"sha": "579ad6bf4260bb249b507a50aa5ac9226442c2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579ad6bf4260bb249b507a50aa5ac9226442c2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579ad6bf4260bb249b507a50aa5ac9226442c2a1"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "8f71b8b6437a5d45f46e9abe62cfc9672721b957", "filename": "gcc/expmed.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e839bc82015c2659f230cf1141ec868cf5d449c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e839bc82015c2659f230cf1141ec868cf5d449c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=5e839bc82015c2659f230cf1141ec868cf5d449c", "patch": "@@ -3022,7 +3022,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n       && (unsignedp || !flag_trapv))\n     {\n       HOST_WIDE_INT coeff = 0;\n-      rtx reg = gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1);\n+      rtx fake_reg = gen_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1);\n \n       /* synth_mult does an `unsigned int' multiply.  As long as the mode is\n \t less than or equal in size to `unsigned int' this doesn't matter.\n@@ -3040,8 +3040,10 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t      && GET_MODE_BITSIZE (mode) > HOST_BITS_PER_WIDE_INT)\n \t    {\n \t      /* Its safe to use -INTVAL (op1) even for INT_MIN, as the\n-\t\t result is interpreted as an unsigned coefficient.  */\n-\t      max_cost = rtx_cost (gen_rtx_MULT (mode, reg, op1), SET)\n+\t\t result is interpreted as an unsigned coefficient.\n+\t\t Exclude cost of op0 from max_cost to match the cost\n+\t\t calculation of the synth_mult.  */\n+\t      max_cost = rtx_cost (gen_rtx_MULT (mode, fake_reg, op1), SET)\n \t\t\t - neg_cost[mode];\n \t      if (max_cost > 0\n \t\t  && choose_mult_variant (mode, -INTVAL (op1), &algorithm,\n@@ -3084,7 +3086,9 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t\t\t\t build_int_cst (NULL_TREE, floor_log2 (coeff)),\n \t\t\t\t target, unsignedp);\n \n-\t  max_cost = rtx_cost (gen_rtx_MULT (mode, reg, op1), SET);\n+\t  /* Exclude cost of op0 from max_cost to match the cost\n+\t     calculation of the synth_mult.  */\n+\t  max_cost = rtx_cost (gen_rtx_MULT (mode, fake_reg, op1), SET);\n \t  if (choose_mult_variant (mode, coeff, &algorithm, &variant,\n \t\t\t\t   max_cost))\n \t    return expand_mult_const (mode, op0, coeff, target,"}]}