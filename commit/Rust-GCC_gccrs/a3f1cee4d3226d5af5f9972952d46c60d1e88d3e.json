{"sha": "a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmMWNlZTRkMzIyNmQ1YWY1Zjk5NzI5NTJkNDZjNjBkMWU4OGQzZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-04-14T15:08:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-14T15:08:54Z"}, "message": "df-core.c (df_ref_debug): Change format string placeholder from 0x%x to %#x.\n\n\t* df-core.c (df_ref_debug): Change format string placeholder\n\tfrom 0x%x to %#x.\n\t* dwarf2asm.c (dw2_asm_output_data_raw,\n\tdw2_asm_output_data_uleb128_raw, dw2_asm_output_data_uleb128,\n\tdw2_asm_output_data_sleb128_raw, dw2_asm_output_data_sleb128): Ditto.\n\t* dwarf2out.c (output_cfi, output_cfi_directive,\n\tdwarf2out_do_cfi_startproc, output_loc_sequence_raw,\n\toutput_cfa_loc_raw, output_die, output_ranges, output_file_names):\n\tDitto.\n\t* genattrtab.c (write_test_expr, write_attr_valueq): Ditto.\n\t* print-rtl.c (print_rtx): Ditto.\n\nFrom-SVN: r158347", "tree": {"sha": "4a23181587a98bf3a8e7e61b92798d6319bf2660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a23181587a98bf3a8e7e61b92798d6319bf2660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eb4dbe35b1fa733f71d778ed742d915897ad430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb4dbe35b1fa733f71d778ed742d915897ad430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb4dbe35b1fa733f71d778ed742d915897ad430"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "311d5d1ad90c4d82c24e922470ebea94f3277402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -1,3 +1,17 @@\n+2010-04-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* df-core.c (df_ref_debug): Change format string placeholder\n+\tfrom 0x%x to %#x.\n+\t* dwarf2asm.c (dw2_asm_output_data_raw,\n+\tdw2_asm_output_data_uleb128_raw, dw2_asm_output_data_uleb128,\n+\tdw2_asm_output_data_sleb128_raw, dw2_asm_output_data_sleb128): Ditto.\n+\t* dwarf2out.c (output_cfi, output_cfi_directive,\n+\tdwarf2out_do_cfi_startproc, output_loc_sequence_raw,\n+\toutput_cfa_loc_raw, output_die, output_ranges, output_file_names):\n+\tDitto.\n+\t* genattrtab.c (write_test_expr, write_attr_valueq): Ditto.\n+\t* print-rtl.c (print_rtx): Ditto.\n+\n 2010-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR middle-end/42694"}, {"sha": "758e40e8eb74bc43578f0f587d37c90973e12645", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -2137,7 +2137,7 @@ df_ref_debug (df_ref ref, FILE *file)\n   fprintf (file, \"%c%d \",\n \t   DF_REF_REG_DEF_P (ref) ? 'd' : 'u',\n \t   DF_REF_ID (ref));\n-  fprintf (file, \"reg %d bb %d insn %d flag 0x%x type 0x%x \",\n+  fprintf (file, \"reg %d bb %d insn %d flag %#x type %#x \",\n \t   DF_REF_REGNO (ref),\n \t   DF_REF_BBNO (ref),\n \t   DF_REF_IS_ARTIFICIAL (ref) ? -1 : DF_REF_INSN_UID (ref),"}, {"sha": "0770607c61558c5c4d2ed712b5146b42b49aea0d", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -80,14 +80,14 @@ dw2_asm_output_data_raw (int size, unsigned HOST_WIDE_INT value)\n   if (BYTES_BIG_ENDIAN)\n     {\n       for (i = size - 1; i > 0; --i)\n-\tfprintf (asm_out_file, \"0x%x,\", bytes[i]);\n-      fprintf (asm_out_file, \"0x%x\", bytes[0]);\n+\tfprintf (asm_out_file, \"%#x,\", bytes[i]);\n+      fprintf (asm_out_file, \"%#x\", bytes[0]);\n     }\n   else\n     {\n       for (i = 0; i < size - 1; ++i)\n-\tfprintf (asm_out_file, \"0x%x,\", bytes[i]);\n-      fprintf (asm_out_file, \"0x%x\", bytes[i]);\n+\tfprintf (asm_out_file, \"%#x,\", bytes[i]);\n+      fprintf (asm_out_file, \"%#x\", bytes[i]);\n     }\n }\n \n@@ -549,7 +549,7 @@ dw2_asm_output_data_uleb128_raw (unsigned HOST_WIDE_INT value)\n \t/* More bytes to follow.  */\n \tbyte |= 0x80;\n \n-      fprintf (asm_out_file, \"0x%x\", byte);\n+      fprintf (asm_out_file, \"%#x\", byte);\n       if (value == 0)\n \tbreak;\n       fputc (',', asm_out_file);\n@@ -591,7 +591,7 @@ dw2_asm_output_data_uleb128 (unsigned HOST_WIDE_INT value,\n \n \tif (byte_op)\n \t  {\n-\t    fprintf (asm_out_file, \"0x%x\", byte);\n+\t    fprintf (asm_out_file, \"%#x\", byte);\n \t    if (work != 0)\n \t      fputc (',', asm_out_file);\n \t  }\n@@ -633,7 +633,7 @@ dw2_asm_output_data_sleb128_raw (HOST_WIDE_INT value)\n       if (more)\n \tbyte |= 0x80;\n \n-      fprintf (asm_out_file, \"0x%x\", byte);\n+      fprintf (asm_out_file, \"%#x\", byte);\n       if (!more)\n \tbreak;\n       fputc (',', asm_out_file);\n@@ -678,7 +678,7 @@ dw2_asm_output_data_sleb128 (HOST_WIDE_INT value,\n \n \tif (byte_op)\n \t  {\n-\t    fprintf (asm_out_file, \"0x%x\", byte);\n+\t    fprintf (asm_out_file, \"%#x\", byte);\n \t    if (more)\n \t      fputc (',', asm_out_file);\n \t  }"}, {"sha": "2ca448e2037673554db620a589829cad8793c001", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -3051,15 +3051,15 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n     {\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n       dw2_asm_output_data (1, (cfi->dw_cfi_opc | (r & 0x3f)),\n-\t\t\t   \"DW_CFA_offset, column 0x%lx\", r);\n+\t\t\t   \"DW_CFA_offset, column %#lx\", r);\n       off = div_data_align (cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       dw2_asm_output_data_uleb128 (off, NULL);\n     }\n   else if (cfi->dw_cfi_opc == DW_CFA_restore)\n     {\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n       dw2_asm_output_data (1, (cfi->dw_cfi_opc | (r & 0x3f)),\n-\t\t\t   \"DW_CFA_restore, column 0x%lx\", r);\n+\t\t\t   \"DW_CFA_restore, column %#lx\", r);\n     }\n   else\n     {\n@@ -3251,7 +3251,7 @@ output_cfi_directive (dw_cfi_ref cfi)\n       break;\n \n     case DW_CFA_GNU_args_size:\n-      fprintf (asm_out_file, \"\\t.cfi_escape 0x%x,\", DW_CFA_GNU_args_size);\n+      fprintf (asm_out_file, \"\\t.cfi_escape %#x,\", DW_CFA_GNU_args_size);\n       dw2_asm_output_data_uleb128_raw (cfi->dw_cfi_oprnd1.dw_cfi_offset);\n       if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s args_size \"HOST_WIDE_INT_PRINT_DEC,\n@@ -3265,7 +3265,7 @@ output_cfi_directive (dw_cfi_ref cfi)\n \n     case DW_CFA_def_cfa_expression:\n     case DW_CFA_expression:\n-      fprintf (asm_out_file, \"\\t.cfi_escape 0x%x,\", cfi->dw_cfi_opc);\n+      fprintf (asm_out_file, \"\\t.cfi_escape %#x,\", cfi->dw_cfi_opc);\n       output_cfa_loc_raw (cfi);\n       fputc ('\\n', asm_out_file);\n       break;\n@@ -3863,7 +3863,7 @@ dwarf2out_do_cfi_startproc (bool second)\n       if (enc & DW_EH_PE_indirect)\n \tref = dw2_force_const_mem (ref, true);\n \n-      fprintf (asm_out_file, \"\\t.cfi_personality 0x%x,\", enc);\n+      fprintf (asm_out_file, \"\\t.cfi_personality %#x,\", enc);\n       output_addr_const (asm_out_file, ref);\n       fputc ('\\n', asm_out_file);\n     }\n@@ -3881,7 +3881,7 @@ dwarf2out_do_cfi_startproc (bool second)\n       if (enc & DW_EH_PE_indirect)\n \tref = dw2_force_const_mem (ref, true);\n \n-      fprintf (asm_out_file, \"\\t.cfi_lsda 0x%x,\", enc);\n+      fprintf (asm_out_file, \"\\t.cfi_lsda %#x,\", enc);\n       output_addr_const (asm_out_file, ref);\n       fputc ('\\n', asm_out_file);\n     }\n@@ -5175,7 +5175,7 @@ output_loc_sequence_raw (dw_loc_descr_ref loc)\n   while (1)\n     {\n       /* Output the opcode.  */\n-      fprintf (asm_out_file, \"0x%x\", loc->dw_loc_opc);\n+      fprintf (asm_out_file, \"%#x\", loc->dw_loc_opc);\n       output_loc_operands_raw (loc);\n \n       if (!loc->dw_loc_next)\n@@ -5221,7 +5221,7 @@ output_cfa_loc_raw (dw_cfi_ref cfi)\n \n   if (cfi->dw_cfi_opc == DW_CFA_expression)\n     {\n-      fprintf (asm_out_file, \"0x%x,\", cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n+      fprintf (asm_out_file, \"%#x,\", cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n       loc = cfi->dw_cfi_oprnd2.dw_cfi_loc;\n     }\n   else\n@@ -10424,7 +10424,7 @@ output_die (dw_die_ref die)\n   if (dwarf_version < 4 && die->die_id.die_symbol)\n     output_die_symbol (die);\n \n-  dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (0x%lx) %s)\",\n+  dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (%#lx) %s)\",\n \t\t\t       (unsigned long)die->die_offset,\n \t\t\t       dwarf_tag_name (die->die_tag));\n \n@@ -10656,7 +10656,7 @@ output_die (dw_die_ref die)\n \n   /* Add null byte to terminate sibling list.  */\n   if (die->die_child != NULL)\n-    dw2_asm_output_data (1, 0, \"end of children of DIE 0x%lx\",\n+    dw2_asm_output_data (1, 0, \"end of children of DIE %#lx\",\n \t\t\t (unsigned long) die->die_offset);\n }\n \n@@ -11082,7 +11082,7 @@ static void\n output_ranges (void)\n {\n   unsigned i;\n-  static const char *const start_fmt = \"Offset 0x%x\";\n+  static const char *const start_fmt = \"Offset %#x\";\n   const char *fmt = start_fmt;\n \n   for (i = 0; i < ranges_table_in_use; i++)\n@@ -11424,7 +11424,7 @@ output_file_names (void)\n     dw2_asm_output_nstring (dirs[i].path,\n \t\t\t    dirs[i].length\n \t\t\t     - !DWARF2_DIR_SHOULD_END_WITH_SEPARATOR,\n-\t\t\t    \"Directory Entry: 0x%x\", i + idx_offset);\n+\t\t\t    \"Directory Entry: %#x\", i + idx_offset);\n \n   dw2_asm_output_data (1, 0, \"End directory table\");\n \n@@ -11460,7 +11460,7 @@ output_file_names (void)\n \t        files[file_idx].path + dirs[dir_idx].length, ver);\n \n       dw2_asm_output_nstring\n-\t(filebuf, -1, \"File Entry: 0x%x\", (unsigned) i + 1);\n+\t(filebuf, -1, \"File Entry: %#x\", (unsigned) i + 1);\n \n       /* Include directory index.  */\n       dw2_asm_output_data_uleb128 (dir_idx + idx_offset, NULL);\n@@ -11478,7 +11478,7 @@ output_file_names (void)\n \t NULL);\n #else\n       dw2_asm_output_nstring (files[file_idx].path + dirs[dir_idx].length, -1,\n-\t\t\t      \"File Entry: 0x%x\", (unsigned) i + 1);\n+\t\t\t      \"File Entry: %#x\", (unsigned) i + 1);\n \n       /* Include directory index.  */\n       dw2_asm_output_data_uleb128 (dir_idx + idx_offset, NULL);\n@@ -11569,7 +11569,7 @@ output_line_info (void)\n \t  break;\n \t}\n \n-      dw2_asm_output_data (1, n_op_args, \"opcode: 0x%x has %d args\",\n+      dw2_asm_output_data (1, n_op_args, \"opcode: %#x has %d args\",\n \t\t\t   opc, n_op_args);\n     }\n "}, {"sha": "08f92a0497927d056e1b438b2f57b56fc06270f9", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -3323,7 +3323,7 @@ write_test_expr (rtx exp, int flags)\n \t    }\n \t  else\n \t    {\n-\t      printf (\"%s((1 << which_alternative) & 0x%x)\",\n+\t      printf (\"%s((1 << which_alternative) & %#x)\",\n \t\t      XINT (exp, 1) ? \"!\" : \"\", set);\n \t    }\n \t}\n@@ -3894,7 +3894,7 @@ write_attr_valueq (struct attr_desc *attr, const char *s)\n       printf (\"%d\", num);\n \n       if (num > 9 || num < 0)\n-\tprintf (\" /* 0x%x */\", num);\n+\tprintf (\" /* %#x */\", num);\n     }\n   else\n     {"}, {"sha": "82a35008a623d4d0e66891f4f2d39b6278225adf", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f1cee4d3226d5af5f9972952d46c60d1e88d3e/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=a3f1cee4d3226d5af5f9972952d46c60d1e88d3e", "patch": "@@ -236,7 +236,7 @@ print_rtx (const_rtx in_rtx)\n \t  {\n \t    int flags = SYMBOL_REF_FLAGS (in_rtx);\n \t    if (flags)\n-\t      fprintf (outfile, \" [flags 0x%x]\", flags);\n+\t      fprintf (outfile, \" [flags %#x]\", flags);\n \t  }\n \telse if (i == 2 && GET_CODE (in_rtx) == SYMBOL_REF)\n \t  {"}]}