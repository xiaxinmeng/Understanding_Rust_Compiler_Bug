{"sha": "a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3MmU5ZDRlNmQxMmFlN2Y3ZWZmMDM0ZDg4MjYxZDRjMmY0NzdlNw==", "commit": {"author": {"name": "Kazuhiro Inaoka", "email": "inaoka.kazuhiro@renesas.com", "date": "2004-10-13T17:20:24Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-10-13T17:20:24Z"}, "message": "Makefile.am: Add m32r support.\n\n* Makefile.am: Add m32r support.\n* configure.ac: Likewise.\n* Makefile.in: Regenerate.\n* confiugre: Regenerate.\n* src/types.c: Add m32r port to FFI_INTERNAL_TYPEDEF\n (uint64, sint64, double, longdouble)\n* src/m32r: New directory.\n* src/m32r/ffi.c: New file.\n* src/m32r/sysv.S: Likewise.\n* src/m32r/ffitarget.h: Likewise.\n\nFrom-SVN: r88993", "tree": {"sha": "3576ed3b489940f5b378fafbd25ec3a8d2f7c4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3576ed3b489940f5b378fafbd25ec3a8d2f7c4d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/comments", "author": null, "committer": null, "parents": [{"sha": "bcd46a7c659cd5e4883a54f491ba09e04934fefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd46a7c659cd5e4883a54f491ba09e04934fefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd46a7c659cd5e4883a54f491ba09e04934fefa"}], "stats": {"total": 572, "additions": 533, "deletions": 39}, "files": [{"sha": "e5044bdbff0a00390eccd4d39ad3cd239c8d4002", "filename": "libffi/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -1,3 +1,16 @@\n+2004-10-13  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n+\n+\t* Makefile.am: Add m32r support.\n+\t* configure.ac: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* confiugre: Regenerate.\n+\t* src/types.c: Add m32r port to FFI_INTERNAL_TYPEDEF\n+\t(uint64, sint64, double, longdouble)\n+\t* src/m32r: New directory.\n+\t* src/m32r/ffi.c: New file.\n+\t* src/m32r/sysv.S: Likewise.\n+\t* src/m32r/ffitarget.h: Likewise.\n+\n 2004-10-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* testsuite/libffi.call/negint.c: New test case."}, {"sha": "225fa5458f0ae22cb26b3d2a48cdae52a7f6ad6c", "filename": "libffi/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.am?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -9,6 +9,7 @@ EXTRA_DIST = LICENSE ChangeLog.v1 \\\n \tsrc/arm/ffi.c src/arm/sysv.S src/arm/ffitarget.h \\\n \tsrc/mips/ffi.c src/mips/n32.S src/mips/o32.S \\\n \tsrc/mips/ffitarget.h \\\n+\tsrc/m32r/ffi.c src/m32r/sysv.S src/m32r/ffitarget.h \\\n \tsrc/m68k/ffi.c src/m68k/sysv.S src/m68k/ffitarget.h \\\n \tsrc/powerpc/ffi.c src/powerpc/sysv.S \\\n \tsrc/powerpc/linux64.S src/powerpc/linux64_closure.S \\\n@@ -101,6 +102,9 @@ endif\n if IA64\n nodist_libffi_la_SOURCES += src/ia64/ffi.c src/ia64/unix.S\n endif\n+if M32R\n+nodist_libffi_la_SOURCES += src/m32r/sysv.S src/m32r/ffi.c\n+endif\n if M68K\n nodist_libffi_la_SOURCES += src/m68k/ffi.c src/m68k/sysv.S\n endif"}, {"sha": "49c701e1a0ff049e57f27cd3a0250e343e3571ad", "filename": "libffi/Makefile.in", "status": "modified", "additions": 66, "deletions": 31, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FMakefile.in?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -46,17 +46,18 @@ target_triplet = @target@\n @SPARC_TRUE@am__append_5 = src/sparc/ffi.c src/sparc/v8.S src/sparc/v9.S\n @ALPHA_TRUE@am__append_6 = src/alpha/ffi.c src/alpha/osf.S\n @IA64_TRUE@am__append_7 = src/ia64/ffi.c src/ia64/unix.S\n-@M68K_TRUE@am__append_8 = src/m68k/ffi.c src/m68k/sysv.S\n-@POWERPC_TRUE@am__append_9 = src/powerpc/ffi.c src/powerpc/sysv.S src/powerpc/ppc_closure.S src/powerpc/linux64.S src/powerpc/linux64_closure.S\n-@POWERPC_AIX_TRUE@am__append_10 = src/powerpc/ffi_darwin.c src/powerpc/aix.S src/powerpc/aix_closure.S\n-@POWERPC_DARWIN_TRUE@am__append_11 = src/powerpc/ffi_darwin.c src/powerpc/darwin.S src/powerpc/darwin_closure.S\n-@ARM_TRUE@am__append_12 = src/arm/sysv.S src/arm/ffi.c\n-@FRV_TRUE@am__append_13 = src/frv/eabi.S src/frv/ffi.c\n-@S390_TRUE@am__append_14 = src/s390/sysv.S src/s390/ffi.c\n-@X86_64_TRUE@am__append_15 = src/x86/ffi64.c src/x86/unix64.S src/x86/ffi.c src/x86/sysv.S\n-@SH_TRUE@am__append_16 = src/sh/sysv.S src/sh/ffi.c\n-@SH64_TRUE@am__append_17 = src/sh64/sysv.S src/sh64/ffi.c\n-@PA_TRUE@am__append_18 = src/pa/linux.S src/pa/ffi.c\n+@M32R_TRUE@am__append_8 = src/m32r/sysv.S src/m32r/ffi.c\n+@M68K_TRUE@am__append_9 = src/m68k/ffi.c src/m68k/sysv.S\n+@POWERPC_TRUE@am__append_10 = src/powerpc/ffi.c src/powerpc/sysv.S src/powerpc/ppc_closure.S src/powerpc/linux64.S src/powerpc/linux64_closure.S\n+@POWERPC_AIX_TRUE@am__append_11 = src/powerpc/ffi_darwin.c src/powerpc/aix.S src/powerpc/aix_closure.S\n+@POWERPC_DARWIN_TRUE@am__append_12 = src/powerpc/ffi_darwin.c src/powerpc/darwin.S src/powerpc/darwin_closure.S\n+@ARM_TRUE@am__append_13 = src/arm/sysv.S src/arm/ffi.c\n+@FRV_TRUE@am__append_14 = src/frv/eabi.S src/frv/ffi.c\n+@S390_TRUE@am__append_15 = src/s390/sysv.S src/s390/ffi.c\n+@X86_64_TRUE@am__append_16 = src/x86/ffi64.c src/x86/unix64.S src/x86/ffi.c src/x86/sysv.S\n+@SH_TRUE@am__append_17 = src/sh/sysv.S src/sh/ffi.c\n+@SH64_TRUE@am__append_18 = src/sh64/sysv.S src/sh64/ffi.c\n+@PA_TRUE@am__append_19 = src/pa/linux.S src/pa/ffi.c\n DIST_COMMON = README $(am__configure_deps) $(srcdir)/../compile \\\n \t$(srcdir)/../config.guess $(srcdir)/../config.sub \\\n \t$(srcdir)/../install-sh $(srcdir)/../ltmain.sh \\\n@@ -91,45 +92,47 @@ am_libffi_la_OBJECTS = src/debug.lo src/prep_cif.lo src/types.lo \\\n @SPARC_TRUE@\tsrc/sparc/v9.lo\n @ALPHA_TRUE@am__objects_6 = src/alpha/ffi.lo src/alpha/osf.lo\n @IA64_TRUE@am__objects_7 = src/ia64/ffi.lo src/ia64/unix.lo\n-@M68K_TRUE@am__objects_8 = src/m68k/ffi.lo src/m68k/sysv.lo\n-@POWERPC_TRUE@am__objects_9 = src/powerpc/ffi.lo src/powerpc/sysv.lo \\\n+@M32R_TRUE@am__objects_8 = src/m32r/sysv.lo src/m32r/ffi.lo\n+@M68K_TRUE@am__objects_9 = src/m68k/ffi.lo src/m68k/sysv.lo\n+@POWERPC_TRUE@am__objects_10 = src/powerpc/ffi.lo src/powerpc/sysv.lo \\\n @POWERPC_TRUE@\tsrc/powerpc/ppc_closure.lo \\\n @POWERPC_TRUE@\tsrc/powerpc/linux64.lo \\\n @POWERPC_TRUE@\tsrc/powerpc/linux64_closure.lo\n-@POWERPC_AIX_TRUE@am__objects_10 = src/powerpc/ffi_darwin.lo \\\n+@POWERPC_AIX_TRUE@am__objects_11 = src/powerpc/ffi_darwin.lo \\\n @POWERPC_AIX_TRUE@\tsrc/powerpc/aix.lo \\\n @POWERPC_AIX_TRUE@\tsrc/powerpc/aix_closure.lo\n-@POWERPC_DARWIN_TRUE@am__objects_11 = src/powerpc/ffi_darwin.lo \\\n+@POWERPC_DARWIN_TRUE@am__objects_12 = src/powerpc/ffi_darwin.lo \\\n @POWERPC_DARWIN_TRUE@\tsrc/powerpc/darwin.lo \\\n @POWERPC_DARWIN_TRUE@\tsrc/powerpc/darwin_closure.lo\n-@ARM_TRUE@am__objects_12 = src/arm/sysv.lo src/arm/ffi.lo\n-@FRV_TRUE@am__objects_13 = src/frv/eabi.lo src/frv/ffi.lo\n-@S390_TRUE@am__objects_14 = src/s390/sysv.lo src/s390/ffi.lo\n-@X86_64_TRUE@am__objects_15 = src/x86/ffi64.lo src/x86/unix64.lo \\\n+@ARM_TRUE@am__objects_13 = src/arm/sysv.lo src/arm/ffi.lo\n+@FRV_TRUE@am__objects_14 = src/frv/eabi.lo src/frv/ffi.lo\n+@S390_TRUE@am__objects_15 = src/s390/sysv.lo src/s390/ffi.lo\n+@X86_64_TRUE@am__objects_16 = src/x86/ffi64.lo src/x86/unix64.lo \\\n @X86_64_TRUE@\tsrc/x86/ffi.lo src/x86/sysv.lo\n-@SH_TRUE@am__objects_16 = src/sh/sysv.lo src/sh/ffi.lo\n-@SH64_TRUE@am__objects_17 = src/sh64/sysv.lo src/sh64/ffi.lo\n-@PA_TRUE@am__objects_18 = src/pa/linux.lo src/pa/ffi.lo\n+@SH_TRUE@am__objects_17 = src/sh/sysv.lo src/sh/ffi.lo\n+@SH64_TRUE@am__objects_18 = src/sh64/sysv.lo src/sh64/ffi.lo\n+@PA_TRUE@am__objects_19 = src/pa/linux.lo src/pa/ffi.lo\n nodist_libffi_la_OBJECTS = $(am__objects_1) $(am__objects_2) \\\n \t$(am__objects_3) $(am__objects_4) $(am__objects_5) \\\n \t$(am__objects_6) $(am__objects_7) $(am__objects_8) \\\n \t$(am__objects_9) $(am__objects_10) $(am__objects_11) \\\n \t$(am__objects_12) $(am__objects_13) $(am__objects_14) \\\n \t$(am__objects_15) $(am__objects_16) $(am__objects_17) \\\n-\t$(am__objects_18)\n+\t$(am__objects_18) $(am__objects_19)\n libffi_la_OBJECTS = $(am_libffi_la_OBJECTS) \\\n \t$(nodist_libffi_la_OBJECTS)\n libffi_convenience_la_LIBADD =\n-am__objects_19 = src/debug.lo src/prep_cif.lo src/types.lo \\\n+am__objects_20 = src/debug.lo src/prep_cif.lo src/types.lo \\\n \tsrc/raw_api.lo src/java_raw_api.lo\n-am_libffi_convenience_la_OBJECTS = $(am__objects_19)\n-am__objects_20 = $(am__objects_1) $(am__objects_2) $(am__objects_3) \\\n+am_libffi_convenience_la_OBJECTS = $(am__objects_20)\n+am__objects_21 = $(am__objects_1) $(am__objects_2) $(am__objects_3) \\\n \t$(am__objects_4) $(am__objects_5) $(am__objects_6) \\\n \t$(am__objects_7) $(am__objects_8) $(am__objects_9) \\\n \t$(am__objects_10) $(am__objects_11) $(am__objects_12) \\\n \t$(am__objects_13) $(am__objects_14) $(am__objects_15) \\\n-\t$(am__objects_16) $(am__objects_17) $(am__objects_18)\n-nodist_libffi_convenience_la_OBJECTS = $(am__objects_20)\n+\t$(am__objects_16) $(am__objects_17) $(am__objects_18) \\\n+\t$(am__objects_19)\n+nodist_libffi_convenience_la_OBJECTS = $(am__objects_21)\n libffi_convenience_la_OBJECTS = $(am_libffi_convenience_la_OBJECTS) \\\n \t$(nodist_libffi_convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I.\n@@ -219,6 +222,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n+M32R_FALSE = @M32R_FALSE@\n+M32R_TRUE = @M32R_TRUE@\n M68K_FALSE = @M68K_FALSE@\n M68K_TRUE = @M68K_TRUE@\n MAINT = @MAINT@\n@@ -320,6 +325,7 @@ EXTRA_DIST = LICENSE ChangeLog.v1 \\\n \tsrc/arm/ffi.c src/arm/sysv.S src/arm/ffitarget.h \\\n \tsrc/mips/ffi.c src/mips/n32.S src/mips/o32.S \\\n \tsrc/mips/ffitarget.h \\\n+\tsrc/m32r/ffi.c src/m32r/sysv.S src/m32r/ffitarget.h \\\n \tsrc/m68k/ffi.c src/m68k/sysv.S src/m68k/ffitarget.h \\\n \tsrc/powerpc/ffi.c src/powerpc/sysv.S \\\n \tsrc/powerpc/linux64.S src/powerpc/linux64_closure.S \\\n@@ -382,7 +388,7 @@ noinst_LTLIBRARIES = libffi_convenience.la\n libffi_la_SOURCES = src/debug.c src/prep_cif.c src/types.c \\\n \t\tsrc/raw_api.c src/java_raw_api.c\n \n-nodist_libffi_la_SOURCES = $(am__append_1) $(am__append_2) $(am__append_3) $(am__append_4) $(am__append_5) $(am__append_6) $(am__append_7) $(am__append_8) $(am__append_9) $(am__append_10) $(am__append_11) $(am__append_12) $(am__append_13) $(am__append_14) $(am__append_15) $(am__append_16) $(am__append_17) $(am__append_18)\n+nodist_libffi_la_SOURCES = $(am__append_1) $(am__append_2) $(am__append_3) $(am__append_4) $(am__append_5) $(am__append_6) $(am__append_7) $(am__append_8) $(am__append_9) $(am__append_10) $(am__append_11) $(am__append_12) $(am__append_13) $(am__append_14) $(am__append_15) $(am__append_16) $(am__append_17) $(am__append_18) $(am__append_19)\n libffi_convenience_la_SOURCES = $(libffi_la_SOURCES)\n nodist_libffi_convenience_la_SOURCES = $(nodist_libffi_la_SOURCES)\n AM_CFLAGS = -Wall -g -fexceptions\n@@ -516,6 +522,11 @@ src/ia64/$(am__dirstamp):\n \t@: > src/ia64/$(am__dirstamp)\n src/ia64/ffi.lo: src/ia64/$(am__dirstamp)\n src/ia64/unix.lo: src/ia64/$(am__dirstamp)\n+src/m32r/$(am__dirstamp):\n+\t@$(mkdir_p) src/m32r\n+\t@: > src/m32r/$(am__dirstamp)\n+src/m32r/sysv.lo: src/m32r/$(am__dirstamp)\n+src/m32r/ffi.lo: src/m32r/$(am__dirstamp)\n src/m68k/$(am__dirstamp):\n \t@$(mkdir_p) src/m68k\n \t@: > src/m68k/$(am__dirstamp)\n@@ -593,6 +604,10 @@ mostlyclean-compile:\n \t-rm -f src/ia64/unix.lo\n \t-rm -f src/java_raw_api.$(OBJEXT)\n \t-rm -f src/java_raw_api.lo\n+\t-rm -f src/m32r/ffi.$(OBJEXT)\n+\t-rm -f src/m32r/ffi.lo\n+\t-rm -f src/m32r/sysv.$(OBJEXT)\n+\t-rm -f src/m32r/sysv.lo\n \t-rm -f src/m68k/ffi.$(OBJEXT)\n \t-rm -f src/m68k/ffi.lo\n \t-rm -f src/m68k/sysv.$(OBJEXT)\n@@ -746,6 +761,15 @@ src/ia64/unix.obj: src/ia64/unix.S\n src/ia64/unix.lo: src/ia64/unix.S\n \t$(LIBTOOL) --mode=compile $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o src/ia64/unix.lo `test -f 'src/ia64/unix.S' || echo '$(srcdir)/'`src/ia64/unix.S\n \n+src/m32r/sysv.o: src/m32r/sysv.S\n+\t$(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o src/m32r/sysv.o `test -f 'src/m32r/sysv.S' || echo '$(srcdir)/'`src/m32r/sysv.S\n+\n+src/m32r/sysv.obj: src/m32r/sysv.S\n+\t$(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o src/m32r/sysv.obj `if test -f 'src/m32r/sysv.S'; then $(CYGPATH_W) 'src/m32r/sysv.S'; else $(CYGPATH_W) '$(srcdir)/src/m32r/sysv.S'; fi`\n+\n+src/m32r/sysv.lo: src/m32r/sysv.S\n+\t$(LIBTOOL) --mode=compile $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o src/m32r/sysv.lo `test -f 'src/m32r/sysv.S' || echo '$(srcdir)/'`src/m32r/sysv.S\n+\n src/m68k/sysv.o: src/m68k/sysv.S\n \t$(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o src/m68k/sysv.o `test -f 'src/m68k/sysv.S' || echo '$(srcdir)/'`src/m68k/sysv.S\n \n@@ -989,6 +1013,15 @@ src/ia64/ffi.obj: src/ia64/ffi.c\n src/ia64/ffi.lo: src/ia64/ffi.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/ia64/ffi.lo `test -f 'src/ia64/ffi.c' || echo '$(srcdir)/'`src/ia64/ffi.c\n \n+src/m32r/ffi.o: src/m32r/ffi.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/m32r/ffi.o `test -f 'src/m32r/ffi.c' || echo '$(srcdir)/'`src/m32r/ffi.c\n+\n+src/m32r/ffi.obj: src/m32r/ffi.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/m32r/ffi.obj `if test -f 'src/m32r/ffi.c'; then $(CYGPATH_W) 'src/m32r/ffi.c'; else $(CYGPATH_W) '$(srcdir)/src/m32r/ffi.c'; fi`\n+\n+src/m32r/ffi.lo: src/m32r/ffi.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/m32r/ffi.lo `test -f 'src/m32r/ffi.c' || echo '$(srcdir)/'`src/m32r/ffi.c\n+\n src/m68k/ffi.o: src/m68k/ffi.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/m68k/ffi.o `test -f 'src/m68k/ffi.c' || echo '$(srcdir)/'`src/m68k/ffi.c\n \n@@ -1089,6 +1122,7 @@ clean-libtool:\n \t-rm -rf src/arm/.libs src/arm/_libs\n \t-rm -rf src/frv/.libs src/frv/_libs\n \t-rm -rf src/ia64/.libs src/ia64/_libs\n+\t-rm -rf src/m32r/.libs src/m32r/_libs\n \t-rm -rf src/m68k/.libs src/m68k/_libs\n \t-rm -rf src/mips/.libs src/mips/_libs\n \t-rm -rf src/pa/.libs src/pa/_libs\n@@ -1236,7 +1270,7 @@ distclean-tags:\n distdir: $(DISTFILES)\n \t$(am__remove_distdir)\n \tmkdir $(distdir)\n-\t$(mkdir_p) $(distdir)/.. $(distdir)/../config $(distdir)/include $(distdir)/src/alpha $(distdir)/src/arm $(distdir)/src/frv $(distdir)/src/m68k $(distdir)/src/mips $(distdir)/src/pa $(distdir)/src/powerpc $(distdir)/src/s390 $(distdir)/src/sh $(distdir)/src/sh64 $(distdir)/src/sparc $(distdir)/src/x86\n+\t$(mkdir_p) $(distdir)/.. $(distdir)/../config $(distdir)/include $(distdir)/src/alpha $(distdir)/src/arm $(distdir)/src/frv $(distdir)/src/m32r $(distdir)/src/m68k $(distdir)/src/mips $(distdir)/src/pa $(distdir)/src/powerpc $(distdir)/src/s390 $(distdir)/src/sh $(distdir)/src/sh64 $(distdir)/src/sparc $(distdir)/src/x86\n \t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n \ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n \tlist='$(DISTFILES)'; for file in $$list; do \\\n@@ -1406,15 +1440,16 @@ distclean-generic:\n \t-rm -f src/mips/$(am__dirstamp)\n \t-rm -f src/frv/$(am__dirstamp)\n \t-rm -f src/powerpc/$(am__dirstamp)\n+\t-rm -f src/m32r/$(am__dirstamp)\n \t-rm -f src/sh/$(am__dirstamp)\n \t-rm -f src/m68k/$(am__dirstamp)\n \t-rm -f src/sparc/$(am__dirstamp)\n \t-rm -f src/pa/$(am__dirstamp)\n \t-rm -f src/$(am__dirstamp)\n \t-rm -f src/ia64/$(am__dirstamp)\n \t-rm -f src/alpha/$(am__dirstamp)\n-\t-rm -f src/sh64/$(am__dirstamp)\n \t-rm -f src/x86/$(am__dirstamp)\n+\t-rm -f src/sh64/$(am__dirstamp)\n \n maintainer-clean-generic:\n \t@echo \"This command is intended for maintainers to use\""}, {"sha": "df27631d32ebf7eabaf25850fcaf148ce4a6fae2", "filename": "libffi/configure", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -310,7 +310,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot CC ac_ct_CC EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CFLAGS CCAS CCASFLAGS LN_S RANLIB ac_ct_RANLIB LIBTOOL MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT CPP CPPFLAGS EGREP TESTSUBDIR_TRUE TESTSUBDIR_FALSE AM_RUNTESTFLAGS MIPS_IRIX_TRUE MIPS_IRIX_FALSE MIPS_LINUX_TRUE MIPS_LINUX_FALSE SPARC_TRUE SPARC_FALSE X86_TRUE X86_FALSE X86_WIN32_TRUE X86_WIN32_FALSE ALPHA_TRUE ALPHA_FALSE IA64_TRUE IA64_FALSE M68K_TRUE M68K_FALSE POWERPC_TRUE POWERPC_FALSE POWERPC_AIX_TRUE POWERPC_AIX_FALSE POWERPC_DARWIN_TRUE POWERPC_DARWIN_FALSE ARM_TRUE ARM_FALSE FRV_TRUE FRV_FALSE S390_TRUE S390_FALSE X86_64_TRUE X86_64_FALSE SH_TRUE SH_FALSE SH64_TRUE SH64_FALSE PA_TRUE PA_FALSE ALLOCA HAVE_LONG_DOUBLE TARGET TARGETDIR toolexecdir toolexeclibdir tool_include_dir gcc_version LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot CC ac_ct_CC EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CFLAGS CCAS CCASFLAGS LN_S RANLIB ac_ct_RANLIB LIBTOOL MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT CPP CPPFLAGS EGREP TESTSUBDIR_TRUE TESTSUBDIR_FALSE AM_RUNTESTFLAGS MIPS_IRIX_TRUE MIPS_IRIX_FALSE MIPS_LINUX_TRUE MIPS_LINUX_FALSE SPARC_TRUE SPARC_FALSE X86_TRUE X86_FALSE X86_WIN32_TRUE X86_WIN32_FALSE ALPHA_TRUE ALPHA_FALSE IA64_TRUE IA64_FALSE M32R_TRUE M32R_FALSE M68K_TRUE M68K_FALSE POWERPC_TRUE POWERPC_FALSE POWERPC_AIX_TRUE POWERPC_AIX_FALSE POWERPC_DARWIN_TRUE POWERPC_DARWIN_FALSE ARM_TRUE ARM_FALSE FRV_TRUE FRV_FALSE S390_TRUE S390_FALSE X86_64_TRUE X86_64_FALSE SH_TRUE SH_FALSE SH64_TRUE SH64_FALSE PA_TRUE PA_FALSE ALLOCA HAVE_LONG_DOUBLE TARGET TARGETDIR toolexecdir toolexeclibdir tool_include_dir gcc_version LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -5320,6 +5320,7 @@ sparc-*-linux* | sparc-*-netbsdelf* | sparc-*-knetbsd*-gnu) TARGET=SPARC; TARGET\n sparc64-*-linux* | sparc64-*-netbsd* | sparc64-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n alpha*-*-linux* | alpha*-*-osf* | alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu | alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu) TARGET=ALPHA; TARGETDIR=alpha;;\n ia64*-*-*) TARGET=IA64; TARGETDIR=ia64;;\n+m32r*-*-linux* ) TARGET=M32R; TARGETDIR=m32r;;\n m68k-*-linux*) TARGET=M68K; TARGETDIR=m68k;;\n mips64*-*);;\n mips-sgi-irix5.* | mips-sgi-irix6.*) TARGET=MIPS_IRIX; TARGETDIR=mips;;\n@@ -5419,6 +5420,16 @@ fi\n \n \n \n+if test x$TARGET = xM32R; then\n+  M32R_TRUE=\n+  M32R_FALSE='#'\n+else\n+  M32R_TRUE='#'\n+  M32R_FALSE=\n+fi\n+\n+\n+\n if test x$TARGET = xM68K; then\n   M68K_TRUE=\n   M68K_FALSE='#'\n@@ -6968,6 +6979,13 @@ echo \"$as_me: error: conditional \\\"IA64\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${M32R_TRUE}\" && test -z \"${M32R_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"M32R\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"M32R\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${M68K_TRUE}\" && test -z \"${M68K_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"M68K\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -7676,6 +7694,8 @@ s,@ALPHA_TRUE@,$ALPHA_TRUE,;t t\n s,@ALPHA_FALSE@,$ALPHA_FALSE,;t t\n s,@IA64_TRUE@,$IA64_TRUE,;t t\n s,@IA64_FALSE@,$IA64_FALSE,;t t\n+s,@M32R_TRUE@,$M32R_TRUE,;t t\n+s,@M32R_FALSE@,$M32R_FALSE,;t t\n s,@M68K_TRUE@,$M68K_TRUE,;t t\n s,@M68K_FALSE@,$M68K_FALSE,;t t\n s,@POWERPC_TRUE@,$POWERPC_TRUE,;t t"}, {"sha": "0eb3b962de478fbc1779966345a3749b32b0e4eb", "filename": "libffi/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -56,6 +56,7 @@ sparc-*-linux* | sparc-*-netbsdelf* | sparc-*-knetbsd*-gnu) TARGET=SPARC; TARGET\n sparc64-*-linux* | sparc64-*-netbsd* | sparc64-*-knetbsd*-gnu) TARGET=SPARC; TARGETDIR=sparc;;\n alpha*-*-linux* | alpha*-*-osf* | alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu | alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu) TARGET=ALPHA; TARGETDIR=alpha;;\n ia64*-*-*) TARGET=IA64; TARGETDIR=ia64;;\n+m32r*-*-linux* ) TARGET=M32R; TARGETDIR=m32r;;\n m68k-*-linux*) TARGET=M68K; TARGETDIR=m68k;;\n mips64*-*);;\n mips-sgi-irix5.* | mips-sgi-irix6.*) TARGET=MIPS_IRIX; TARGETDIR=mips;;\n@@ -88,6 +89,7 @@ AM_CONDITIONAL(X86, test x$TARGET = xX86)\n AM_CONDITIONAL(X86_WIN32, test x$TARGET = xX86_WIN32)\n AM_CONDITIONAL(ALPHA, test x$TARGET = xALPHA)\n AM_CONDITIONAL(IA64, test x$TARGET = xIA64)\n+AM_CONDITIONAL(M32R, test x$TARGET = xM32R)\n AM_CONDITIONAL(M68K, test x$TARGET = xM68K)\n AM_CONDITIONAL(POWERPC, test x$TARGET = xPOWERPC)\n AM_CONDITIONAL(POWERPC_AIX, test x$TARGET = xPOWERPC_AIX)"}, {"sha": "9185e906426bd1fd41a95e3ab8c6cb184e09755c", "filename": "libffi/include/Makefile.in", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2FMakefile.in?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.8.5 from Makefile.am.\n+# Makefile.in generated by automake 1.8.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n@@ -89,6 +89,8 @@ ECHO_N = @ECHO_N@\n ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n+FRV_FALSE = @FRV_FALSE@\n+FRV_TRUE = @FRV_TRUE@\n HAVE_LONG_DOUBLE = @HAVE_LONG_DOUBLE@\n IA64_FALSE = @IA64_FALSE@\n IA64_TRUE = @IA64_TRUE@\n@@ -101,6 +103,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n+M32R_FALSE = @M32R_FALSE@\n+M32R_TRUE = @M32R_TRUE@\n M68K_FALSE = @M68K_FALSE@\n M68K_TRUE = @M68K_TRUE@\n MAINT = @MAINT@\n@@ -301,11 +305,9 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\\n \t  done | \\\n \t  $(AWK) '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n-\tif test -z \"$(ETAGS_ARGS)$$tags$$unique\"; then :; else \\\n-\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n-\t  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n-\t    $$tags $$unique; \\\n-\tfi\n+\ttest -z \"$(ETAGS_ARGS)$$tags$$unique\" \\\n+\t  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n+\t     $$tags $$unique\n ctags: CTAGS\n CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\\n \t\t$(TAGS_FILES) $(LISP)"}, {"sha": "9a3b5509539251e17288fc4bcf5a357cedc3865f", "filename": "libffi/src/m32r/ffi.c", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm32r%2Fffi.c?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -0,0 +1,247 @@\n+/* -----------------------------------------------------------------------\n+   ffi.c - Copyright (c) 2004  Renesas Technology\n+   \n+   M32R Foreign Function Interface \n+\n+   Permission is hereby granted, free of charge, to any person obtaining\n+   a copy of this software and associated documentation files (the\n+   ``Software''), to deal in the Software without restriction, including\n+   without limitation the rights to use, copy, modify, merge, publish,\n+   distribute, sublicense, and/or sell copies of the Software, and to\n+   permit persons to whom the Software is furnished to do so, subject to\n+   the following conditions:\n+\n+   The above copyright notice and this permission notice shall be included\n+   in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+   IN NO EVENT SHALL RENESAS TECHNOLOGY BE LIABLE FOR ANY CLAIM, DAMAGES OR\n+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+   OTHER DEALINGS IN THE SOFTWARE.\n+   ----------------------------------------------------------------------- */\n+\n+#include <ffi.h>\n+#include <ffi_common.h>\n+\n+#include <stdlib.h>\n+\n+/* ffi_prep_args is called by the assembly routine once stack\n+   space has been allocated for the function's arguments.  */\n+\n+/*@-exportheader@*/\n+void ffi_prep_args(char *stack, extended_cif *ecif)\n+/*@=exportheader@*/\n+{\n+  unsigned int i;\n+  int tmp;\n+  unsigned int avn;\n+  void **p_argv;\n+  char *argp;\n+  ffi_type **p_arg;\n+\n+  tmp = 0;\n+  argp = stack;\n+\n+  if (ecif->cif->rtype->type == FFI_TYPE_STRUCT && ecif->cif->rtype->size > 8)\n+    {\n+      *(void **) argp = ecif->rvalue;\n+      argp += 4;\n+    }\n+\n+  avn = ecif->cif->nargs;\n+  p_argv = ecif->avalue;\n+\n+  for (i = ecif->cif->nargs, p_arg = ecif->cif->arg_types;\n+       (i != 0) && (avn != 0);\n+       i--, p_arg++)\n+    {\n+      size_t z;\n+\n+      /* Align if necessary.  */\n+      if (((*p_arg)->alignment - 1) & (unsigned) argp)\n+\targp = (char *) ALIGN (argp, (*p_arg)->alignment);\n+\n+      if (avn != 0) \n+\t{\n+\t  avn--;\n+\t  z = (*p_arg)->size;\n+\t  if (z < sizeof (int))\n+\t    {\n+\t      z = sizeof (int);\n+\n+\t      switch ((*p_arg)->type)\n+\t\t{\n+\t\tcase FFI_TYPE_SINT8:\n+\t\t  *(signed int *) argp = (signed int)*(SINT8 *)(* p_argv);\n+\t\t  break;\n+\t\t  \n+\t\tcase FFI_TYPE_UINT8:\n+\t\t  *(unsigned int *) argp = (unsigned int)*(UINT8 *)(* p_argv);\n+\t\t  break;\n+\t\t  \n+\t\tcase FFI_TYPE_SINT16:\n+\t\t  *(signed int *) argp = (signed int)*(SINT16 *)(* p_argv);\n+\t\t  break;\n+\t\t  \n+\t\tcase FFI_TYPE_UINT16:\n+\t\t  *(unsigned int *) argp = (unsigned int)*(UINT16 *)(* p_argv);\n+\t\t  break;\n+\t\t  \n+\t\tcase FFI_TYPE_STRUCT:\n+\t  \t  z = (*p_arg)->size;\n+\t  \t  if ((*p_arg)->alignment != 1)\n+\t\t    memcpy (argp, *p_argv, z);\n+\t\t  else\n+\t\t    memcpy (argp + 4 - z, *p_argv, z);\n+\t  \t  z = sizeof (int);\n+\t\t  break;\n+\n+\t\tdefault:\n+\t\t  FFI_ASSERT(0);\n+\t\t}\n+\t    }\n+\t  else if (z == sizeof (int))\n+\t    {\n+\t       *(unsigned int *) argp = (unsigned int)*(UINT32 *)(* p_argv);\n+\t    }\n+\t  else\n+\t    {\n+\t      if ((*p_arg)->type == FFI_TYPE_STRUCT)\n+\t        {\n+\t\t  if (z > 8)\n+\t\t    {\n+\t\t      *(unsigned int *) argp = (unsigned int)(void *)(* p_argv);\n+\t\t      z = sizeof(void *);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t              memcpy(argp, *p_argv, z);\n+\t\t      z = 8;\n+\t\t    }\n+\t        }\n+\t      else\n+\t        {\n+\t\t  /* Double or long long 64bit.  */\n+\t          memcpy (argp, *p_argv, z);\n+\t        }\n+\t    }\n+\t  p_argv++;\n+\t  argp += z;\n+\t}\n+    }\n+  \n+  return;\n+}\n+\n+/* Perform machine dependent cif processing.  */\n+ffi_status\n+ffi_prep_cif_machdep(ffi_cif *cif)\n+{\n+  /* Set the return type flag.  */\n+  switch (cif->rtype->type)\n+    {\n+    case FFI_TYPE_VOID:\n+      cif->flags = (unsigned) cif->rtype->type;\n+      break;\n+\n+    case FFI_TYPE_STRUCT:\n+      if (cif->rtype->size <= 4)\n+\tcif->flags = FFI_TYPE_INT;\n+\n+      else if (cif->rtype->size <= 8)\n+\tcif->flags = FFI_TYPE_DOUBLE;\n+\n+      else\n+\tcif->flags = (unsigned) cif->rtype->type;\n+      break;\n+\n+    case FFI_TYPE_SINT64:\n+    case FFI_TYPE_UINT64:\n+    case FFI_TYPE_DOUBLE:\n+      cif->flags = FFI_TYPE_DOUBLE;\n+      break;\n+\n+    case FFI_TYPE_FLOAT:\n+    default:\n+      cif->flags = FFI_TYPE_INT;\n+      break;\n+    }\n+\n+  return FFI_OK;\n+}\n+\n+/*@-declundef@*/\n+/*@-exportheader@*/\n+extern void ffi_call_SYSV(void (*)(char *, extended_cif *), \n+\t\t\t  /*@out@*/ extended_cif *, \n+\t\t\t  unsigned, unsigned, \n+\t\t\t  /*@out@*/ unsigned *, \n+\t\t\t  void (*fn)());\n+/*@=declundef@*/\n+/*@=exportheader@*/\n+\n+void ffi_call(/*@dependent@*/ ffi_cif *cif, \n+\t      void (*fn)(), \n+\t      /*@out@*/ void *rvalue, \n+\t      /*@dependent@*/ void **avalue)\n+{\n+  extended_cif ecif;\n+\n+  ecif.cif = cif;\n+  ecif.avalue = avalue;\n+  \n+  /* If the return value is a struct and we don't have\n+     a return value address then we need to make one.  */\n+  if ((rvalue == NULL) && \n+      (cif->rtype->type == FFI_TYPE_STRUCT))\n+    {\n+      /*@-sysunrecog@*/\n+      ecif.rvalue = alloca (cif->rtype->size);\n+      /*@=sysunrecog@*/\n+    }\n+  else\n+    ecif.rvalue = rvalue;    \n+  \n+  switch (cif->abi) \n+    {\n+    case FFI_SYSV:\n+      /*@-usedef@*/\n+      ffi_call_SYSV(ffi_prep_args, &ecif, cif->bytes, \n+\t\t    cif->flags, ecif.rvalue, fn);\n+      if (cif->rtype->type == FFI_TYPE_STRUCT)\n+\t{\n+\t  int size = cif->rtype->size;\n+\t  int align = cif->rtype->alignment;\n+\n+\t  if (size < 4)\n+\t    {\n+\t      if (align == 1)\n+\t        *(unsigned long *)(ecif.rvalue) <<= (4 - size) * 8;\n+\t    }\n+\t  else if (4 < size && size < 8)\n+\t    {\n+\t      if (align == 1)\n+\t\t{\n+\t\t  memcpy (ecif.rvalue, ecif.rvalue + 8-size, size);\n+\t\t}\n+\t      else if (align == 2)\n+\t\t{\n+\t\t  if (size & 1)\n+\t\t    size += 1;\n+\n+\t\t  if (size != 8)\n+\t\t    memcpy (ecif.rvalue, ecif.rvalue + 8-size, size);\n+\t\t}\n+\t    }\n+\t}\n+      /*@=usedef@*/\n+      break;\n+\n+    default:\n+      FFI_ASSERT(0);\n+      break;\n+    }\n+}"}, {"sha": "478a8db69a6b0143d0279060c49f43240eb7354d", "filename": "libffi/src/m32r/ffitarget.h", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm32r%2Fffitarget.h?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -0,0 +1,48 @@\n+/* -----------------------------------------------------------------*-C-*-\n+   ffitarget.h - Copyright (c) 2004  Renesas Technology.\n+   Target configuration macros for M32R.\n+\n+   Permission is hereby granted, free of charge, to any person obtaining\n+   a copy of this software and associated documentation files (the\n+   ``Software''), to deal in the Software without restriction, including\n+   without limitation the rights to use, copy, modify, merge, publish,\n+   distribute, sublicense, and/or sell copies of the Software, and to\n+   permit persons to whom the Software is furnished to do so, subject to\n+   the following conditions:\n+\n+   The above copyright notice and this permission notice shall be included\n+   in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+   IN NO EVENT SHALL RENESAS TECHNOLOGY BE LIABLE FOR ANY CLAIM, DAMAGES OR\n+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+   OTHER DEALINGS IN THE SOFTWARE.\n+\n+   ----------------------------------------------------------------------- */\n+\n+#ifndef LIBFFI_TARGET_H\n+#define LIBFFI_TARGET_H\n+\n+/* ---- Generic type definitions ----------------------------------------- */\n+\n+#ifndef LIBFFI_ASM\n+typedef unsigned long          ffi_arg;\n+typedef signed long            ffi_sarg;\n+\n+typedef enum ffi_abi\n+  {\n+    FFI_FIRST_ABI = 0,\n+    FFI_SYSV,\n+    FFI_DEFAULT_ABI = FFI_SYSV,\n+    FFI_LAST_ABI = FFI_DEFAULT_ABI + 1\n+  } ffi_abi;\n+#endif\n+\n+#define FFI_CLOSURES \t\t1\n+#define FFI_TRAMPOLINE_SIZE\t24\n+#define FFI_NATIVE_RAW_API \t0\n+\n+#endif"}, {"sha": "06b75c22634a6722a6b3c9669455f98061e2288f", "filename": "libffi/src/m32r/sysv.S", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Fm32r%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm32r%2Fsysv.S?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -0,0 +1,121 @@\n+/* -----------------------------------------------------------------------\n+   sysv.S - Copyright (c) 2004 Renesas Technology\n+   \n+   M32R Foreign Function Interface \n+\n+   Permission is hereby granted, free of charge, to any person obtaining\n+   a copy of this software and associated documentation files (the\n+   ``Software''), to deal in the Software without restriction, including\n+   without limitation the rights to use, copy, modify, merge, publish,\n+   distribute, sublicense, and/or sell copies of the Software, and to\n+   permit persons to whom the Software is furnished to do so, subject to\n+   the following conditions:\n+\n+   The above copyright notice and this permission notice shall be included\n+   in all copies or substantial portions of the Software.\n+\n+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+   IN NO EVENT SHALL RENESAS TECHNOLOGY BE LIABLE FOR ANY CLAIM, DAMAGES OR\n+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n+   OTHER DEALINGS IN THE SOFTWARE.\n+   ----------------------------------------------------------------------- */\n+\n+#define LIBFFI_ASM\n+#include <fficonfig.h>\n+#include <ffi.h>\n+#ifdef HAVE_MACHINE_ASM_H\n+#include <machine/asm.h>\n+#else\n+/* XXX these lose for some platforms, I'm sure.  */\n+#define CNAME(x) x\n+#define ENTRY(x) .globl CNAME(x)! .type CNAME(x),%function! CNAME(x):\n+#endif\n+\n+.text\n+\n+\t/* R0:   ffi_prep_args */\n+\t/* R1:   &ecif */\n+\t/* R2:   cif->bytes */\n+\t/* R3:   fig->flags */\n+\t/* sp+0: ecif.rvalue */\n+\t/* sp+4: fn */\n+\n+\t/* This assumes we are using gas.  */\n+ENTRY(ffi_call_SYSV)\n+\t/* Save registers.  */\n+\tpush\tfp\n+\tpush\tlr\n+\tpush\tr3\n+\tpush\tr2\n+\tpush\tr1\n+\tpush\tr0\n+\tmv\tfp, sp\n+\n+\t/* Make room for all of the new args.  */\n+\tsub\tsp, r2\n+\n+\t/* Place all of the ffi_prep_args in position.  */\n+\tmv\tlr, r0\t\n+\tmv\tr0, sp\n+\t/* R1 already set.  */\n+\n+\t/* And call.  */\n+\tjl\tlr\n+\n+\t/* Move first 4 parameters in registers...  */\n+\tld\tr0, @(0,sp)\n+\tld\tr1, @(4,sp)\n+\tld\tr2, @(8,sp)\n+        ld\tr3, @(12,sp)\n+\n+\t/* ...and adjust the stack.  */\n+\tld\tlr, @(8,fp)\n+        cmpi\tlr, #16\n+\tbc\tadjust_stack\n+\tldi\tlr, #16\n+adjust_stack:\n+        add\tsp, lr\n+\n+\t/* Call the function.  */\n+\tld\tlr, @(28,fp)\n+\tjl\tlr\t\n+\n+\t/* Remove the space we pushed for the args.  */\n+\tmv\tsp, fp\t\n+\n+\t/* Load R2 with the pointer to storage for the return value.  */\n+\tld\tr2, @(24,sp)\n+\n+\t/* Load R3 with the return type code.  */\n+\tld\tr3, @(12,sp)\n+\n+\t/* If the return value pointer is NULL, assume no return value.  */\n+\tbeqz\tr2, epilogue\n+\n+\t/* Return INT.  */\n+\tldi\tr4, #FFI_TYPE_INT\n+\tbne\tr3, r4, return_double\n+\tst\tr0, @r2\t\n+\tbra\tepilogue\n+\n+return_double:\n+\t/* Return DOUBLE or LONGDOUBLE.  */\n+\tldi\tr4, #FFI_TYPE_DOUBLE\n+\tbne\tr3, r4, epilogue\n+\tst\tr0, @r2\t\n+\tst\tr1, @(4,r2)\n+\n+epilogue:\n+\tpop\tr0\n+\tpop\tr1\n+\tpop\tr2\n+\tpop\tr3\n+\tpop\tlr\n+\tpop\tfp\n+        jmp lr\n+\n+.ffi_call_SYSV_end:\n+        .size    CNAME(ffi_call_SYSV),.ffi_call_SYSV_end-CNAME(ffi_call_SYSV)"}, {"sha": "47ee65637e65ed57943a20eff8ac91a2b7a574e8", "filename": "libffi/src/types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Fsrc%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Ftypes.c?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -80,7 +80,7 @@ FFI_INTEGRAL_TYPEDEF(double, 8, 4, FFI_TYPE_DOUBLE);\n #endif\n FFI_INTEGRAL_TYPEDEF(longdouble, 12, 4, FFI_TYPE_LONGDOUBLE);\n \n-#elif defined ARM || defined SH || defined POWERPC_AIX\n+#elif defined ARM || defined SH || defined POWERPC_AIX || defined M32R\n \n FFI_INTEGRAL_TYPEDEF(double, 8, 4, FFI_TYPE_DOUBLE);\n FFI_INTEGRAL_TYPEDEF(longdouble, 8, 4, FFI_TYPE_LONGDOUBLE);"}, {"sha": "bc9d4206b7a23510a89c5110f9a55af83555a8ca", "filename": "libffi/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a472e9d4e6d12ae7f7eff034d88261d4c2f477e7/libffi%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2FMakefile.in?ref=a472e9d4e6d12ae7f7eff034d88261d4c2f477e7", "patch": "@@ -95,6 +95,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n+M32R_FALSE = @M32R_FALSE@\n+M32R_TRUE = @M32R_TRUE@\n M68K_FALSE = @M68K_FALSE@\n M68K_TRUE = @M68K_TRUE@\n MAINT = @MAINT@"}]}