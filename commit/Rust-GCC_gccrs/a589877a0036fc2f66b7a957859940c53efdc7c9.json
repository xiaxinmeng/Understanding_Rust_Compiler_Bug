{"sha": "a589877a0036fc2f66b7a957859940c53efdc7c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4OTg3N2EwMDM2ZmMyZjY2YjdhOTU3ODU5OTQwYzUzZWZkYzdjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-06T09:37:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-06-06T09:41:30Z"}, "message": "Fix thinko in new warning on type punning for storage order purposes\n\nIn C, unlike in Ada, the storage order of arrays is that of their component\ntype, so you need to look at it when deciding to warn.  And the PR complains\nabout a bogus warning on the assignment of a pointer returned by alloca or\nmalloc, so this also fixes that.\n\ngcc/c\n\tPR c/100920\n\t* c-decl.c (finish_struct): Fix thinko in previous change.\n\t* c-typeck.c (convert_for_assignment): Do not warn on pointer\n\tassignment and initialization for storage order purposes if the\n\tRHS is a call to a DECL_IS_MALLOC function.\ngcc/testsuite/\n\t* gcc.dg/sso-14.c: New test.", "tree": {"sha": "a6bc26893ec860b9b4411e2ef71520937c894b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6bc26893ec860b9b4411e2ef71520937c894b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a589877a0036fc2f66b7a957859940c53efdc7c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a589877a0036fc2f66b7a957859940c53efdc7c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a589877a0036fc2f66b7a957859940c53efdc7c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a589877a0036fc2f66b7a957859940c53efdc7c9/comments", "author": null, "committer": null, "parents": [{"sha": "28c62475050d2ac6c243580e1130a87308e1e907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c62475050d2ac6c243580e1130a87308e1e907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c62475050d2ac6c243580e1130a87308e1e907"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "a86792bbe06534dce40338302a99965ff7740be0", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=a589877a0036fc2f66b7a957859940c53efdc7c9", "patch": "@@ -8854,12 +8854,21 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t    }\n \t}\n \n+      /* Warn on problematic type punning for storage order purposes.  */\n       if (TREE_CODE (t) == UNION_TYPE\n-\t  && AGGREGATE_TYPE_P (TREE_TYPE (field))\n-\t  && TYPE_REVERSE_STORAGE_ORDER (t)\n-\t     != TYPE_REVERSE_STORAGE_ORDER (TREE_TYPE (field)))\n-\twarning_at (DECL_SOURCE_LOCATION (field), OPT_Wscalar_storage_order,\n-\t\t    \"type punning toggles scalar storage order\");\n+\t  && TREE_CODE (field) == FIELD_DECL\n+\t  && AGGREGATE_TYPE_P (TREE_TYPE (field)))\n+\t{\n+\t  tree ftype = TREE_TYPE (field);\n+\t  if (TREE_CODE (ftype) == ARRAY_TYPE)\n+\t    ftype = strip_array_types (ftype);\n+\t  if (RECORD_OR_UNION_TYPE_P (ftype)\n+\t      && TYPE_REVERSE_STORAGE_ORDER (ftype)\n+\t\t != TYPE_REVERSE_STORAGE_ORDER (t))\n+\t    warning_at (DECL_SOURCE_LOCATION (field),\n+\t\t\tOPT_Wscalar_storage_order,\n+\t\t\t\"type punning toggles scalar storage order\");\n+\t}\n     }\n \n   /* Now we have the truly final field list."}, {"sha": "daa2e12a25ff5ebb2375ae471c662d0468f13a98", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a589877a0036fc2f66b7a957859940c53efdc7c9", "patch": "@@ -7295,6 +7295,8 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  && (AGGREGATE_TYPE_P (ttl) && TYPE_REVERSE_STORAGE_ORDER (ttl))\n \t     != (AGGREGATE_TYPE_P (ttr) && TYPE_REVERSE_STORAGE_ORDER (ttr)))\n \t{\n+\t  tree t;\n+\n \t  switch (errtype)\n \t  {\n \t  case ic_argpass:\n@@ -7307,14 +7309,23 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t  \"scalar storage order\", parmnum, rname);\n \t    break;\n \t  case ic_assign:\n-\t    warning_at (location, OPT_Wscalar_storage_order,\n-\t\t\t\"assignment to %qT from pointer type %qT with \"\n-\t\t\t\"incompatible scalar storage order\", type, rhstype);\n+\t    /* Do not warn if the RHS is a call to a function that returns a\n+\t       pointer that is not an alias.  */\n+\t    if (TREE_CODE (rhs) != CALL_EXPR\n+\t\t|| (t = get_callee_fndecl (rhs)) == NULL_TREE\n+\t\t|| !DECL_IS_MALLOC (t))\n+\t      warning_at (location, OPT_Wscalar_storage_order,\n+\t\t\t  \"assignment to %qT from pointer type %qT with \"\n+\t\t\t  \"incompatible scalar storage order\", type, rhstype);\n \t    break;\n \t  case ic_init:\n-\t    warning_at (location, OPT_Wscalar_storage_order,\n-\t\t\t\"initialization of %qT from pointer type %qT with \"\n-\t\t\t\"incompatible scalar storage order\", type, rhstype);\n+\t    /* Likewise.  */\n+\t    if (TREE_CODE (rhs) != CALL_EXPR\n+\t\t|| (t = get_callee_fndecl (rhs)) == NULL_TREE\n+\t\t|| !DECL_IS_MALLOC (t))\n+\t      warning_at (location, OPT_Wscalar_storage_order,\n+\t\t\t  \"initialization of %qT from pointer type %qT with \"\n+\t\t\t  \"incompatible scalar storage order\", type, rhstype);\n \t    break;\n \t  case ic_return:\n \t    warning_at (location, OPT_Wscalar_storage_order,"}, {"sha": "af98145569e02607f750702d0a608ae313710505", "filename": "gcc/testsuite/gcc.dg/sso-14.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a589877a0036fc2f66b7a957859940c53efdc7c9/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-14.c?ref=a589877a0036fc2f66b7a957859940c53efdc7c9", "patch": "@@ -0,0 +1,53 @@\n+/* PR c/100920 */\n+/* Testcase by George Thopas <george.thopas@gmail.com> */\n+\n+/* { dg-do compile } */\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"big-endian\")))\n+#else\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"little-endian\")))\n+#endif\n+\n+struct s_1 {\n+    int val;\n+} REV_ENDIANNESS;\n+\n+typedef struct s_1 t_1;\n+\n+struct s_2 {\n+    char val;\n+} REV_ENDIANNESS;\n+\n+typedef struct s_2 t_2;\n+\n+struct s12 {\n+    t_1 a[1];\n+    t_2 b[1]; \n+} REV_ENDIANNESS;\n+\n+typedef struct s12 t_s12;\n+\n+union u12 {\n+    t_1 a[1];\n+    t_2 b[1];\n+} REV_ENDIANNESS;\n+\n+typedef union u12 t_u12;\n+\n+int main(void)\n+{\n+  t_s12 *msg1 = __builtin_alloca(10);\n+  t_u12 *msg2 = __builtin_alloca(10);\n+\n+  msg1 = malloc (sizeof (t_s12));\n+  msg2 = malloc (sizeof (t_u12));\n+\n+  msg1->a[0].val = 0;\n+  msg2->a[0].val = 0;\n+\n+  return 0;\n+}"}]}