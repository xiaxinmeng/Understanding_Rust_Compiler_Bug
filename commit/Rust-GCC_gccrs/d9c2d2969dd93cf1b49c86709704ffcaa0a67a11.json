{"sha": "d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljMmQyOTY5ZGQ5M2NmMWI0OWM4NjcwOTcwNGZmY2FhMGE2N2ExMQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-01-03T23:00:40Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-01-03T23:00:40Z"}, "message": "re PR target/20353 (uclibc does not provide C99 math functions)\n\n2007-01-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/20353\n        * gimplify.c (gimplify_modify_expr_complex_part): Move below\n        tree_to_gimple_tuple.  Call tree_to_gimple_tuple when we need\n        the value.\n\n2007-01-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/30353\n        * gcc.c-torture/compile/complex-4.c: New test.\n\nFrom-SVN: r120404", "tree": {"sha": "b053fdcdb1a176efa4edf13451e8d6b696ccaeb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b053fdcdb1a176efa4edf13451e8d6b696ccaeb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/comments", "author": null, "committer": null, "parents": [{"sha": "096be9866655b51c2939103906b200b728b3f6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096be9866655b51c2939103906b200b728b3f6de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096be9866655b51c2939103906b200b728b3f6de"}], "stats": {"total": 102, "additions": 62, "deletions": 40}, "files": [{"sha": "891c37c3f84fc7973c5c70b9a35d3d32fe55cffb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "patch": "@@ -1,3 +1,10 @@\n+2007-01-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/20353\n+\t* gimplify.c (gimplify_modify_expr_complex_part): Move below\n+\ttree_to_gimple_tuple.  Call tree_to_gimple_tuple when we need\n+\tthe value.\n+\n 2007-01-03  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/i386/i386.h (NON_STACK_REG_P, REGNO_OK_FOR_SIREG_P,"}, {"sha": "d14e01e8202b5a043db393fac92fbfc101e1af09", "filename": "gcc/gimplify.c", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "patch": "@@ -3467,46 +3467,6 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n   return ret;\n }\n \n-/* Promote partial stores to COMPLEX variables to total stores.  *EXPR_P is\n-   a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a variable with\n-   DECL_GIMPLE_REG_P set.  */\n-\n-static enum gimplify_status\n-gimplify_modify_expr_complex_part (tree *expr_p, tree *pre_p, bool want_value)\n-{\n-  enum tree_code code, ocode;\n-  tree lhs, rhs, new_rhs, other, realpart, imagpart;\n-\n-  lhs = GENERIC_TREE_OPERAND (*expr_p, 0);\n-  rhs = GENERIC_TREE_OPERAND (*expr_p, 1);\n-  code = TREE_CODE (lhs);\n-  lhs = TREE_OPERAND (lhs, 0);\n-\n-  ocode = code == REALPART_EXPR ? IMAGPART_EXPR : REALPART_EXPR;\n-  other = build1 (ocode, TREE_TYPE (rhs), lhs);\n-  other = get_formal_tmp_var (other, pre_p);\n-\n-  realpart = code == REALPART_EXPR ? rhs : other;\n-  imagpart = code == REALPART_EXPR ? other : rhs;\n-\n-  if (TREE_CONSTANT (realpart) && TREE_CONSTANT (imagpart))\n-    new_rhs = build_complex (TREE_TYPE (lhs), realpart, imagpart);\n-  else\n-    new_rhs = build2 (COMPLEX_EXPR, TREE_TYPE (lhs), realpart, imagpart);\n-\n-  GENERIC_TREE_OPERAND (*expr_p, 0) = lhs;\n-  GENERIC_TREE_OPERAND (*expr_p, 1) = new_rhs;\n-\n-  if (want_value)\n-    {\n-      append_to_statement_list (*expr_p, pre_p);\n-      *expr_p = rhs;\n-    }\n-\n-  return GS_ALL_DONE;\n-}\n-\n-\n /* Destructively convert the TREE pointer in TP into a gimple tuple if\n    appropriate.  */\n \n@@ -3553,6 +3513,47 @@ tree_to_gimple_tuple (tree *tp)\n     }\n }\n \n+/* Promote partial stores to COMPLEX variables to total stores.  *EXPR_P is\n+   a MODIFY_EXPR with a lhs of a REAL/IMAGPART_EXPR of a variable with\n+   DECL_GIMPLE_REG_P set.  */\n+\n+static enum gimplify_status\n+gimplify_modify_expr_complex_part (tree *expr_p, tree *pre_p, bool want_value)\n+{\n+  enum tree_code code, ocode;\n+  tree lhs, rhs, new_rhs, other, realpart, imagpart;\n+\n+  lhs = GENERIC_TREE_OPERAND (*expr_p, 0);\n+  rhs = GENERIC_TREE_OPERAND (*expr_p, 1);\n+  code = TREE_CODE (lhs);\n+  lhs = TREE_OPERAND (lhs, 0);\n+\n+  ocode = code == REALPART_EXPR ? IMAGPART_EXPR : REALPART_EXPR;\n+  other = build1 (ocode, TREE_TYPE (rhs), lhs);\n+  other = get_formal_tmp_var (other, pre_p);\n+\n+  realpart = code == REALPART_EXPR ? rhs : other;\n+  imagpart = code == REALPART_EXPR ? other : rhs;\n+\n+  if (TREE_CONSTANT (realpart) && TREE_CONSTANT (imagpart))\n+    new_rhs = build_complex (TREE_TYPE (lhs), realpart, imagpart);\n+  else\n+    new_rhs = build2 (COMPLEX_EXPR, TREE_TYPE (lhs), realpart, imagpart);\n+\n+  GENERIC_TREE_OPERAND (*expr_p, 0) = lhs;\n+  GENERIC_TREE_OPERAND (*expr_p, 1) = new_rhs;\n+\n+  if (want_value)\n+    {\n+      tree_to_gimple_tuple (expr_p);\n+\n+      append_to_statement_list (*expr_p, pre_p);\n+      *expr_p = rhs;\n+    }\n+\n+  return GS_ALL_DONE;\n+}\n+\n /* Gimplify the MODIFY_EXPR node pointed to by EXPR_P.\n \n       modify_expr"}, {"sha": "954e876a73026952e203bbfb797d8253ad2ecba5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "patch": "@@ -1,3 +1,8 @@\n+2007-01-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/30353\n+\t* gcc.c-torture/compile/complex-4.c: New test.\n+\n 2007-01-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/vect/vect.exp: Skip PowerPC targets not supporting"}, {"sha": "cf10029031338c0c598f20bfa877ac6f4214544e", "filename": "gcc/testsuite/gcc.c-torture/compile/complex-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c2d2969dd93cf1b49c86709704ffcaa0a67a11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fcomplex-4.c?ref=d9c2d2969dd93cf1b49c86709704ffcaa0a67a11", "patch": "@@ -0,0 +1,9 @@\n+/* This used to ICE because gimplify_modify_expr_complex_part was not\n+   updated for the GIMPLE_MODIFY_EXPR changes in that calling\n+   tree_to_gimple_tuple was needed.  */\n+\n+void f(void)\n+{\n+  double _Complex Res;\n+  __real__ Res = __imag__ Res = 0.0;\n+}"}]}