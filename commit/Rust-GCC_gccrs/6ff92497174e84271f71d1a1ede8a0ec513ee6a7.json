{"sha": "6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmOTI0OTcxNzRlODQyNzFmNzFkMWExZWRlOGEwZWM1MTNlZTZhNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-01-05T09:16:50Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-05T09:16:50Z"}, "message": "Do not sanitize in an abnormal context (PR sanitizer/78815).\n\n2017-01-05  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitizer/78815\n\t* gimplify.c (gimplify_decl_expr): Compare to\n\tasan_poisoned_variables instread of checking flags.\n\t(gimplify_target_expr): Likewise.\n\t(gimplify_expr): Likewise.\n\t(gimplify_function_tree): Conditionally initialize\n\tasan_poisoned_variables.\n\nFrom-SVN: r244095", "tree": {"sha": "35d4b9263534521db1a3b4659dbab8a4d9d370df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d4b9263534521db1a3b4659dbab8a4d9d370df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff92497174e84271f71d1a1ede8a0ec513ee6a7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6438c2f40fb3c678fb37e7e57f8c93aad2ecaae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6438c2f40fb3c678fb37e7e57f8c93aad2ecaae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6438c2f40fb3c678fb37e7e57f8c93aad2ecaae1"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "b9d6cb4d0ff5523948b4a00ff5ce9ce9c7861453", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff92497174e84271f71d1a1ede8a0ec513ee6a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff92497174e84271f71d1a1ede8a0ec513ee6a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "patch": "@@ -1,3 +1,13 @@\n+2017-01-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/78815\n+\t* gimplify.c (gimplify_decl_expr): Compare to\n+\tasan_poisoned_variables instread of checking flags.\n+\t(gimplify_target_expr): Likewise.\n+\t(gimplify_expr): Likewise.\n+\t(gimplify_function_tree): Conditionally initialize\n+\tasan_poisoned_variables.\n+\n 2017-01-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimizatin/78812"}, {"sha": "e1e9ce9e903049b8fdcfda453455000a4e0c7610", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff92497174e84271f71d1a1ede8a0ec513ee6a7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff92497174e84271f71d1a1ede8a0ec513ee6a7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6ff92497174e84271f71d1a1ede8a0ec513ee6a7", "patch": "@@ -1620,8 +1620,7 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t  is_vla = true;\n \t}\n \n-      if (asan_sanitize_use_after_scope ()\n-\t  && !asan_no_sanitize_address_p ()\n+      if (asan_poisoned_variables\n \t  && !is_vla\n \t  && TREE_ADDRESSABLE (decl)\n \t  && !TREE_STATIC (decl)\n@@ -6413,8 +6412,7 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t      else\n \t\tcleanup = clobber;\n \t    }\n-\t  if (asan_sanitize_use_after_scope ()\n-\t      && dbg_cnt (asan_use_after_scope))\n+\t  if (asan_poisoned_variables && dbg_cnt (asan_use_after_scope))\n \t    {\n \t      tree asan_cleanup = build_asan_poison_call_expr (temp);\n \t      if (asan_cleanup)\n@@ -11426,7 +11424,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  /* If the label is used in a goto statement, or address of the label\n \t     is taken, we need to unpoison all variables that were seen so far.\n \t     Doing so would prevent us from reporting a false positives.  */\n-\t  if (asan_sanitize_use_after_scope ()\n+\t  if (asan_poisoned_variables\n \t      && asan_used_labels != NULL\n \t      && asan_used_labels->contains (label))\n \t    asan_poison_variables (asan_poisoned_variables, false, pre_p);\n@@ -12531,10 +12529,14 @@ gimplify_function_tree (tree fndecl)\n       && !needs_to_live_in_memory (ret))\n     DECL_GIMPLE_REG_P (ret) = 1;\n \n-  asan_poisoned_variables = new hash_set<tree> ();\n+  if (asan_sanitize_use_after_scope () && !asan_no_sanitize_address_p ())\n+    asan_poisoned_variables = new hash_set<tree> ();\n   bind = gimplify_body (fndecl, true);\n-  delete asan_poisoned_variables;\n-  asan_poisoned_variables = NULL;\n+  if (asan_poisoned_variables)\n+    {\n+      delete asan_poisoned_variables;\n+      asan_poisoned_variables = NULL;\n+    }\n \n   /* The tree body of the function is no longer needed, replace it\n      with the new GIMPLE body.  */"}]}