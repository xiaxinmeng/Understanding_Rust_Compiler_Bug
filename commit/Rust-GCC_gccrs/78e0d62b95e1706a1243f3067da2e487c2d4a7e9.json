{"sha": "78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlMGQ2MmI5NWUxNzA2YTEyNDNmMzA2N2RhMmU0ODdjMmQ0YTdlOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-01T01:43:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-01T01:43:12Z"}, "message": "re PR middle-end/17799 (Non-optimizing compile loses 'this')\n\n        PR middle-end/17799\n        * function.c (use_register_for_decl): Check DECL_IGNORED_P instead\n        of DECL_ARTIFICIAL.\n        (assign_parms_augmented_arg_list): Set DECL_IGNORED_P.\n        * c-decl.c (build_compound_literal): Likewise.\n        * dwarf2asm.c (dw2_force_const_mem): Likewise.\n        * gimplify.c (create_artificial_label): Likewise.\n        * tree-inline.c (expand_call_inline): Likewise.\n        * var-tracking.c (vt_initialize): Likewise.\n        * tree-outof-ssa.c (create_temp): Copy DECL_IGNORED_P.\ncp/\n        * call.c (make_temporary_var_for_ref_to_temp): Set DECL_IGNORED_P.\n        * class.c (build_vtable): Don't conditionallize setting it\n        based on DWARF2_DEBUG.\n        (layout_class_type): Set DECL_IGNORED_P.\n        * decl2.c (get_guard): Likewise.\n        * rtti.c (get_tinfo_decl, build_lang_decl): Likewise.\n        * tree.c (build_local_temp): Likewise.\n\nFrom-SVN: r92781", "tree": {"sha": "af4745888545dece3278b75f28dd04b661c44e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4745888545dece3278b75f28dd04b661c44e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/comments", "author": null, "committer": null, "parents": [{"sha": "8bcccf30f11402a06d0a9abda915f97c0798ef4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcccf30f11402a06d0a9abda915f97c0798ef4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcccf30f11402a06d0a9abda915f97c0798ef4f"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "ebe2b7d7a296aff6bf31c17cbec58ae0e8d3c79b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -1,3 +1,16 @@\n+2004-12-31  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/17799\n+\t* function.c (use_register_for_decl): Check DECL_IGNORED_P instead\n+\tof DECL_ARTIFICIAL.\n+\t(assign_parms_augmented_arg_list): Set DECL_IGNORED_P.\n+\t* c-decl.c (build_compound_literal): Likewise.\n+\t* dwarf2asm.c (dw2_force_const_mem): Likewise.\n+\t* gimplify.c (create_artificial_label): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\t* var-tracking.c (vt_initialize): Likewise.\n+\t* tree-outof-ssa.c (create_temp): Copy DECL_IGNORED_P.\n+\n 2004-12-31  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/19211"}, {"sha": "2ff015ec7dc15be5605ab8012329a6f9c96a9397", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -3479,6 +3479,7 @@ build_compound_literal (tree type, tree init)\n       DECL_DEFER_OUTPUT (decl) = 1;\n       DECL_COMDAT (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n       pushdecl (decl);\n       rest_of_decl_compilation (decl, 1, 0);\n     }"}, {"sha": "ccc975afa84a502acf2f702f0be571088053c7a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -1,3 +1,14 @@\n+2004-12-31  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/17799\n+\t* call.c (make_temporary_var_for_ref_to_temp): Set DECL_IGNORED_P.\n+\t* class.c (build_vtable): Don't conditionallize setting it\n+\tbased on DWARF2_DEBUG.\n+\t(layout_class_type): Set DECL_IGNORED_P.\n+\t* decl2.c (get_guard): Likewise.\n+\t* rtti.c (get_tinfo_decl, build_lang_decl): Likewise.\n+\t* tree.c (build_local_temp): Likewise.\n+\n 2004-12-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (cp_declarator): Split \"name\" field into"}, {"sha": "831d30b48a5f2e1eecd2092d8dc88d2be6b994c2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -6373,6 +6373,7 @@ make_temporary_var_for_ref_to_temp (tree decl, tree type)\n   /* Create the variable.  */\n   var = build_decl (VAR_DECL, NULL_TREE, type);\n   DECL_ARTIFICIAL (var) = 1;\n+  DECL_IGNORED_P (var) = 1;\n   TREE_USED (var) = 1;\n \n   /* Register the variable.  */"}, {"sha": "597ec92e78f88c713f02242840a9aedd6e409c26", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -659,28 +659,27 @@ build_vtable (tree class_type, tree name, tree vtable_type)\n   DECL_EXTERNAL (decl) = 1;\n   DECL_NOT_REALLY_EXTERN (decl) = 1;\n \n-  if (write_symbols == DWARF2_DEBUG)\n-    /* Mark the VAR_DECL node representing the vtable itself as a\n-       \"gratuitous\" one, thereby forcing dwarfout.c to ignore it.  It\n-       is rather important that such things be ignored because any\n-       effort to actually generate DWARF for them will run into\n-       trouble when/if we encounter code like:\n+  /* Mark the VAR_DECL node representing the vtable itself as a\n+     \"gratuitous\" one, thereby forcing dwarfout.c to ignore it.  It\n+     is rather important that such things be ignored because any\n+     effort to actually generate DWARF for them will run into\n+     trouble when/if we encounter code like:\n        \n-         #pragma interface\n-\t struct S { virtual void member (); };\n+     #pragma interface\n+     struct S { virtual void member (); };\n \t   \n-       because the artificial declaration of the vtable itself (as\n-       manufactured by the g++ front end) will say that the vtable is\n-       a static member of `S' but only *after* the debug output for\n-       the definition of `S' has already been output.  This causes\n-       grief because the DWARF entry for the definition of the vtable\n-       will try to refer back to an earlier *declaration* of the\n-       vtable as a static member of `S' and there won't be one.  We\n-       might be able to arrange to have the \"vtable static member\"\n-       attached to the member list for `S' before the debug info for\n-       `S' get written (which would solve the problem) but that would\n-       require more intrusive changes to the g++ front end.  */\n-    DECL_IGNORED_P (decl) = 1;\n+     because the artificial declaration of the vtable itself (as\n+     manufactured by the g++ front end) will say that the vtable is\n+     a static member of `S' but only *after* the debug output for\n+     the definition of `S' has already been output.  This causes\n+     grief because the DWARF entry for the definition of the vtable\n+     will try to refer back to an earlier *declaration* of the\n+     vtable as a static member of `S' and there won't be one.  We\n+     might be able to arrange to have the \"vtable static member\"\n+     attached to the member list for `S' before the debug info for\n+     `S' get written (which would solve the problem) but that would\n+     require more intrusive changes to the g++ front end.  */\n+  DECL_IGNORED_P (decl) = 1;\n \n   return decl;\n }\n@@ -3529,13 +3528,13 @@ build_base_field (record_layout_info rli, tree binfo,\n       /* Create the FIELD_DECL.  */\n       decl = build_decl (FIELD_DECL, NULL_TREE, CLASSTYPE_AS_BASE (basetype));\n       DECL_ARTIFICIAL (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n       DECL_FIELD_CONTEXT (decl) = t;\n       DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n       DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n       DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n       DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n       DECL_MODE (decl) = TYPE_MODE (basetype);\n-      DECL_IGNORED_P (decl) = 1;\n       DECL_FIELD_IS_BASE (decl) = 1;\n \n       /* Try to place the field.  It may take more than one try if we\n@@ -4697,6 +4696,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  DECL_SIZE (padding_field) = padding;\n \t  DECL_CONTEXT (padding_field) = t;\n \t  DECL_ARTIFICIAL (padding_field) = 1;\n+\t  DECL_IGNORED_P (padding_field) = 1;\n \t  layout_nonempty_base_or_field (rli, padding_field,\n \t\t\t\t\t NULL_TREE, \n \t\t\t\t\t empty_base_offsets);"}, {"sha": "9572a267a512db1766ae50a93bb39ee0964ac748", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -1998,6 +1998,7 @@ get_guard (tree decl)\n         DECL_WEAK (guard) = DECL_WEAK (decl);\n       \n       DECL_ARTIFICIAL (guard) = 1;\n+      DECL_IGNORED_P (guard) = 1;\n       TREE_USED (guard) = 1;\n       pushdecl_top_level_and_finish (guard, NULL_TREE);\n     }"}, {"sha": "70a7802e6dd9de0f83d2d39fb0c6acdbff4c153b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -2341,8 +2341,8 @@ create_temporary_var (tree type)\n   decl = build_decl (VAR_DECL, NULL_TREE, type);\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n-  DECL_SOURCE_LOCATION (decl) = input_location;\n   DECL_IGNORED_P (decl) = 1;\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n   DECL_CONTEXT (decl) = current_function_decl;\n \n   return decl;"}, {"sha": "b683dad4d476397741dd213423840fbef07c3d1b", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -350,6 +350,7 @@ get_tinfo_decl (tree type)\n       TREE_TYPE (name) = type;\n       DECL_TINFO_P (d) = 1;\n       DECL_ARTIFICIAL (d) = 1;\n+      DECL_IGNORED_P (d) = 1;\n       TREE_READONLY (d) = 1;\n       TREE_STATIC (d) = 1;\n       /* Mark the variable as undefined -- but remember that we can\n@@ -778,6 +779,7 @@ tinfo_base_init (tree desc, tree target)\n     name_decl = build_lang_decl (VAR_DECL, name_name, name_type);\n     SET_DECL_ASSEMBLER_NAME (name_decl, name_name);\n     DECL_ARTIFICIAL (name_decl) = 1;\n+    DECL_IGNORED_P (name_decl) = 1;\n     TREE_READONLY (name_decl) = 1;\n     TREE_STATIC (name_decl) = 1;\n     DECL_EXTERNAL (name_decl) = 0;"}, {"sha": "b9a7a250039182e74b04ded76693751cb2485411", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -241,6 +241,7 @@ build_local_temp (tree type)\n {\n   tree slot = build_decl (VAR_DECL, NULL_TREE, type);\n   DECL_ARTIFICIAL (slot) = 1;\n+  DECL_IGNORED_P (slot) = 1;\n   DECL_CONTEXT (slot) = current_function_decl;\n   layout_decl (slot, 0);\n   return slot;"}, {"sha": "ae8af709ede2af5d4bac5c63f1cb0c5839ab40e1", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -729,6 +729,7 @@ dw2_force_const_mem (rtx x)\n \t  id = get_identifier (ref_name);\n \t  decl = build_decl (VAR_DECL, id, ptr_type_node);\n \t  DECL_ARTIFICIAL (decl) = 1;\n+\t  DECL_IGNORED_P (decl) = 1;\n \t  TREE_PUBLIC (decl) = 1;\n \t  DECL_INITIAL (decl) = decl;\n \t  make_decl_one_only (decl);\n@@ -742,6 +743,7 @@ dw2_force_const_mem (rtx x)\n \t  id = get_identifier (label);\n \t  decl = build_decl (VAR_DECL, id, ptr_type_node);\n \t  DECL_ARTIFICIAL (decl) = 1;\n+\t  DECL_IGNORED_P (decl) = 1;\n \t  TREE_STATIC (decl) = 1;\n \t  DECL_INITIAL (decl) = decl;\n \t}"}, {"sha": "e878dc13e1d4eb796a551e1ba56c5ab9270f5ad7", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -1922,8 +1922,9 @@ use_register_for_decl (tree decl)\n   if (flag_float_store && FLOAT_TYPE_P (TREE_TYPE (decl)))\n     return false;\n \n-  /* Compiler-generated temporaries can always go in registers.  */\n-  if (DECL_ARTIFICIAL (decl))\n+  /* If we're not interested in tracking debugging information for\n+     this decl, then we can certainly put it in a register.  */\n+  if (DECL_IGNORED_P (decl))\n     return true;\n \n   return (optimize || DECL_REGISTER (decl));\n@@ -2105,6 +2106,7 @@ assign_parms_augmented_arg_list (struct assign_parm_data_all *all)\n       decl = build_decl (PARM_DECL, NULL_TREE, type);\n       DECL_ARG_TYPE (decl) = type;\n       DECL_ARTIFICIAL (decl) = 1;\n+      DECL_IGNORED_P (decl) = 1;\n \n       TREE_CHAIN (decl) = fnargs;\n       fnargs = decl;"}, {"sha": "0c8cc95179b34ad0e9d6c08395a146be3daf6f20", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -293,6 +293,7 @@ create_artificial_label (void)\n   tree lab = build_decl (LABEL_DECL, NULL_TREE, void_type_node);\n \n   DECL_ARTIFICIAL (lab) = 1;\n+  DECL_IGNORED_P (lab) = 1;\n   DECL_CONTEXT (lab) = current_function_decl;\n   return lab;\n }"}, {"sha": "8f3e161d292211bf0ce03e076dd52847688414f5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -1569,6 +1569,7 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      to the RET_LABEL.  */\n   id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n   DECL_ARTIFICIAL (id->ret_label) = 1;\n+  DECL_IGNORED_P (id->ret_label) = 1;\n   DECL_CONTEXT (id->ret_label) = VARRAY_TREE (id->fns, 0);\n   insert_decl_map (id, id->ret_label, id->ret_label);\n "}, {"sha": "7342a20523b252686d5eab9c394ac5978950b46b", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -162,6 +162,7 @@ create_temp (tree t)\n   else if (!DECL_IGNORED_P (t))\n     DECL_DEBUG_ALIAS_OF (tmp) = t;\n   DECL_ARTIFICIAL (tmp) = DECL_ARTIFICIAL (t);\n+  DECL_IGNORED_P (tmp) = DECL_IGNORED_P (t);\n   add_referenced_tmp_var (tmp);\n \n   /* add_referenced_tmp_var will create the annotation and set up some"}, {"sha": "f1f36614509f85f55b3047143514a9391edb8520", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0d62b95e1706a1243f3067da2e487c2d4a7e9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=78e0d62b95e1706a1243f3067da2e487c2d4a7e9", "patch": "@@ -2705,6 +2705,7 @@ vt_initialize (void)\n       DECL_NAME (frame_base_decl) = get_identifier (\"___frame_base_decl\");\n       TREE_TYPE (frame_base_decl) = char_type_node;\n       DECL_ARTIFICIAL (frame_base_decl) = 1;\n+      DECL_IGNORED_P (frame_base_decl) = 1;\n \n       /* Set its initial \"location\".  */\n       frame_stack_adjust = -prologue_stack_adjust ();"}]}