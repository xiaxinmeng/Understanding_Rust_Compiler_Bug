{"sha": "0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxOTI5MzdiOGU4NWViN2NmOGQzZTdlYmJjMzcxZWE5YTVkMGI3OA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2014-03-24T16:17:51Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2014-03-24T16:17:51Z"}, "message": "avxintrin.h (_mm256_undefined_si256): Define.\n\n2014-03-24  Ulrich Drepper  <drepper@gmail.com>\n\n        * config/i386/avxintrin.h (_mm256_undefined_si256): Define.\n        (_mm256_undefined_ps): Define.\n        (_mm256_undefined_pd): Define.\n        * config/i386/emmintrin.h (_mm_undefined_si128): Define.\n        (_mm_undefined_pd): Define.\n        * config/i386/xmmintrin.h (_mm_undefined_ps): Define.\n        * config/i386/avx512fintrin.h (_mm512_undefined_si512): Define.\n        (_mm512_undefined_ps): Define.\n        (_mm512_undefined_pd): Define.\n        Use _mm*_undefined_*.\n        * config/i386/avx2intrin.h: Use _mm*_undefined_*.\n\nFrom-SVN: r208793", "tree": {"sha": "8c7b3002d4ea5306af73f7d224897181ee8197af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c7b3002d4ea5306af73f7d224897181ee8197af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0f27fb6b3759484cb51088ee362aeb04df68fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f27fb6b3759484cb51088ee362aeb04df68fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f27fb6b3759484cb51088ee362aeb04df68fde"}], "stats": {"total": 777, "additions": 448, "deletions": 329}, "files": [{"sha": "4f094ae87adb82174f2fa16c57cec5648599cc47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "patch": "@@ -1,3 +1,17 @@\n+2014-03-24  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* config/i386/avxintrin.h (_mm256_undefined_si256): Define.\n+\t(_mm256_undefined_ps): Define.\n+\t(_mm256_undefined_pd): Define.\n+\t* config/i386/emmintrin.h (_mm_undefined_si128): Define.\n+\t(_mm_undefined_pd): Define.\n+\t* config/i386/xmmintrin.h (_mm_undefined_ps): Define.\n+\t* config/i386/avx512fintrin.h (_mm512_undefined_si512): Define.\n+\t(_mm512_undefined_ps): Define.\n+\t(_mm512_undefined_pd): Define.\n+\tUse _mm*_undefined_*.\n+\t* config/i386/avx2intrin.h: Use _mm*_undefined_*.\n+\n 2014-03-24  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (lshr): DI mode excluded."}, {"sha": "d04c972ed8963a895878be16b982129170f55500", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "patch": "@@ -1233,10 +1233,10 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_i32gather_pd (double const *base, __m128i index, const int scale)\n {\n-  __v2df src = _mm_setzero_pd ();\n-  __v2df mask = _mm_cmpeq_pd (src, src);\n+  __v2df zero = _mm_setzero_pd ();\n+  __v2df mask = _mm_cmpeq_pd (zero, zero);\n \n-  return (__m128d) __builtin_ia32_gathersiv2df (src,\n+  return (__m128d) __builtin_ia32_gathersiv2df (_mm_undefined_pd (),\n \t\t\t\t\t\tbase,\n \t\t\t\t\t\t(__v4si)index,\n \t\t\t\t\t\tmask,\n@@ -1259,10 +1259,10 @@ extern __inline __m256d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_i32gather_pd (double const *base, __m128i index, const int scale)\n {\n-  __v4df src = _mm256_setzero_pd ();\n-  __v4df mask = _mm256_cmp_pd (src, src, _CMP_EQ_OQ);\n+  __v4df zero = _mm256_setzero_pd ();\n+  __v4df mask = _mm256_cmp_pd (zero, zero, _CMP_EQ_OQ);\n \n-  return (__m256d) __builtin_ia32_gathersiv4df (src,\n+  return (__m256d) __builtin_ia32_gathersiv4df (_mm256_undefined_pd (),\n \t\t\t\t\t\tbase,\n \t\t\t\t\t\t(__v4si)index,\n \t\t\t\t\t\tmask,"}, {"sha": "20b3baf9e87ea629027f81d6c94ef916c0693141", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 383, "deletions": 323, "changes": 706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78"}, {"sha": "2ea327c5a1b6c11e25ab50a74fb1c884363bfc83", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "patch": "@@ -1167,6 +1167,27 @@ _mm256_movemask_ps (__m256 __A)\n   return __builtin_ia32_movmskps256 ((__v8sf)__A);\n }\n \n+extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_undefined_pd (void)\n+{\n+  __m256d __Y = __Y;\n+  return __Y;\n+}\n+\n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_undefined_ps (void)\n+{\n+  __m256 __Y = __Y;\n+  return __Y;\n+}\n+\n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_undefined_si256 (void)\n+{\n+  __m256i __Y = __Y;\n+  return __Y;\n+}\n+\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_setzero_pd (void)\n {"}, {"sha": "a2bdf0edade1e3fe8bf852a8b1796ac73338cdcb", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "patch": "@@ -86,6 +86,14 @@ _mm_setr_pd (double __W, double __X)\n   return __extension__ (__m128d){ __W, __X };\n }\n \n+/* Create an undefined vector.  */\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_undefined_pd (void)\n+{\n+  __m128d __Y = __Y;\n+  return __Y;\n+}\n+\n /* Create a vector of zeros.  */\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_setzero_pd (void)\n@@ -728,6 +736,14 @@ _mm_move_epi64 (__m128i __A)\n   return (__m128i)__builtin_ia32_movq128 ((__v2di) __A);\n }\n \n+/* Create an undefined vector.  */\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_undefined_si128 (void)\n+{\n+  __m128i __Y = __Y;\n+  return __Y;\n+}\n+\n /* Create a vector of zeros.  */\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_setzero_si128 (void)"}, {"sha": "a3824e73fc22c9337f24aa675ee577505d384ac7", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=0b192937b8e85eb7cf8d3e7ebbc371ea9a5d0b78", "patch": "@@ -102,6 +102,14 @@ typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n #define _MM_FLUSH_ZERO_ON     0x8000\n #define _MM_FLUSH_ZERO_OFF    0x0000\n \n+/* Create an undefined vector.  */\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_undefined_ps (void)\n+{\n+  __m128 __Y = __Y;\n+  return __Y;\n+}\n+\n /* Create a vector of zeros.  */\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_setzero_ps (void)"}]}