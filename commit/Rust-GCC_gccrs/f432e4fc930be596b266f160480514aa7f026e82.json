{"sha": "f432e4fc930be596b266f160480514aa7f026e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzMmU0ZmM5MzBiZTU5NmIyNjZmMTYwNDgwNTE0YWE3ZjAyNmU4Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-11-17T16:25:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-11-17T16:25:22Z"}, "message": "vr-values.h (get_output_for_vrp): Prototype.\n\n\t* vr-values.h (get_output_for_vrp): Prototype.\n\t* vr-values.c (get_output_for_vrp): New function extracted from\n\tvrp_visit_assignment_or_call and extract_range_from_stmt.\n\t(vrp_visit_assignment_or_call): Use get_output_for_vrp.  Simplify.\n\nFrom-SVN: r254880", "tree": {"sha": "0280065703b6104143b2dbc2f7c4f4be71636ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0280065703b6104143b2dbc2f7c4f4be71636ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f432e4fc930be596b266f160480514aa7f026e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f432e4fc930be596b266f160480514aa7f026e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f432e4fc930be596b266f160480514aa7f026e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f432e4fc930be596b266f160480514aa7f026e82/comments", "author": null, "committer": null, "parents": [{"sha": "4f2a94e68ebd12c85a98c4cf3e840c61094aad34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2a94e68ebd12c85a98c4cf3e840c61094aad34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2a94e68ebd12c85a98c4cf3e840c61094aad34"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "82111ba9c2f29df53dd51ca1ca201dbddcb5c43f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432e4fc930be596b266f160480514aa7f026e82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432e4fc930be596b266f160480514aa7f026e82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f432e4fc930be596b266f160480514aa7f026e82", "patch": "@@ -1,3 +1,10 @@\n+2017-11-17  Jeff Law  <law@redhat.com>\n+\n+\t* vr-values.h (get_output_for_vrp): Prototype.\n+\t* vr-values.c (get_output_for_vrp): New function extracted from\n+\tvrp_visit_assignment_or_call and extract_range_from_stmt.\n+\t(vrp_visit_assignment_or_call): Use get_output_for_vrp.  Simplify.\n+\n 2017-11-17  Luis Machado  <luis.machado@linaro.org>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "3e760a378fcd77676e9fa75e0682c0e63bc4ac1e", "filename": "gcc/vr-values.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432e4fc930be596b266f160480514aa7f026e82/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432e4fc930be596b266f160480514aa7f026e82/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=f432e4fc930be596b266f160480514aa7f026e82", "patch": "@@ -1955,28 +1955,44 @@ vrp_valueize_1 (tree name)\n     }\n   return name;\n }\n-/* Visit assignment STMT.  If it produces an interesting range, record\n-   the range in VR and set LHS to OUTPUT_P.  */\n \n-void\n-vr_values::vrp_visit_assignment_or_call (gimple *stmt, tree *output_p,\n-\t\t\t\t\t value_range *vr)\n+/* Given STMT, an assignment or call, return its LHS if the type\n+   of the LHS is suitable for VRP analysis, else return NULL_TREE.  */\n+\n+tree\n+get_output_for_vrp (gimple *stmt)\n {\n-  tree lhs;\n-  enum gimple_code code = gimple_code (stmt);\n-  lhs = gimple_get_lhs (stmt);\n-  *output_p = NULL_TREE;\n+  if (!is_gimple_assign (stmt) && !is_gimple_call (stmt))\n+    return NULL_TREE;\n \n   /* We only keep track of ranges in integral and pointer types.  */\n+  tree lhs = gimple_get_lhs (stmt);\n   if (TREE_CODE (lhs) == SSA_NAME\n       && ((INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n \t   /* It is valid to have NULL MIN/MAX values on a type.  See\n \t      build_range_type.  */\n \t   && TYPE_MIN_VALUE (TREE_TYPE (lhs))\n \t   && TYPE_MAX_VALUE (TREE_TYPE (lhs)))\n \t  || POINTER_TYPE_P (TREE_TYPE (lhs))))\n+    return lhs;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Visit assignment STMT.  If it produces an interesting range, record\n+   the range in VR and set LHS to OUTPUT_P.  */\n+\n+void\n+vr_values::vrp_visit_assignment_or_call (gimple *stmt, tree *output_p,\n+\t\t\t\t\t value_range *vr)\n+{\n+  tree lhs = get_output_for_vrp (stmt);\n+  *output_p = lhs;\n+\n+  /* We only keep track of ranges in integral and pointer types.  */\n+  if (lhs)\n     {\n-      *output_p = lhs;\n+      enum gimple_code code = gimple_code (stmt);\n \n       /* Try folding the statement to a constant first.  */\n       x_vr_values = this;"}, {"sha": "24f013a940258d9e50c94e59dd227475c78d65c9", "filename": "gcc/vr-values.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432e4fc930be596b266f160480514aa7f026e82/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432e4fc930be596b266f160480514aa7f026e82/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=f432e4fc930be596b266f160480514aa7f026e82", "patch": "@@ -118,4 +118,5 @@ class vr_values\n \n #define VR_INITIALIZER { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL }\n \n+extern tree get_output_for_vrp (gimple *);\n #endif /* GCC_VR_VALUES_H */"}]}