{"sha": "2023bba815a1d056a3f64aea988f0c24c3e4c15a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyM2JiYTgxNWExZDA1NmEzZjY0YWVhOTg4ZjBjMjRjM2U0YzE1YQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-08T21:03:51Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-08T21:03:51Z"}, "message": "throw-nil.m: New test.\n\n\t* objc/execute/exceptions/throw-nil.m: New test.\n\t* objc/execute/exceptions/handler-1.m: Updated to use the new\n\tobjc_set_uncaught_exception_handler() function.\n\t* objc/execute/exceptions/matcher-1.m: New test.\n\nFrom-SVN: r164024", "tree": {"sha": "3994ea47b1c04b5f4eedb31f041cb25fb0984022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3994ea47b1c04b5f4eedb31f041cb25fb0984022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2023bba815a1d056a3f64aea988f0c24c3e4c15a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2023bba815a1d056a3f64aea988f0c24c3e4c15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2023bba815a1d056a3f64aea988f0c24c3e4c15a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2023bba815a1d056a3f64aea988f0c24c3e4c15a/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e30511ed4b4e31f800fa1ff212006df2740bd410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30511ed4b4e31f800fa1ff212006df2740bd410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30511ed4b4e31f800fa1ff212006df2740bd410"}], "stats": {"total": 121, "additions": 118, "deletions": 3}, "files": [{"sha": "5e014b18f9b15532ae06ba570351d5958b6f563e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2023bba815a1d056a3f64aea988f0c24c3e4c15a", "patch": "@@ -1,3 +1,10 @@\n+2010-09-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/execute/exceptions/throw-nil.m: New test.\n+\t* objc/execute/exceptions/handler-1.m: Updated to use the new\n+\tobjc_set_uncaught_exception_handler() function.\n+\t* objc/execute/exceptions/matcher-1.m: New test.\n+\t\n 2010-09-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/38282"}, {"sha": "ab2fe8c533ecf7a6dc58ceba9ec102ddf9017185", "filename": "gcc/testsuite/objc/execute/exceptions/handler-1.m", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fhandler-1.m?ref=2023bba815a1d056a3f64aea988f0c24c3e4c15a", "patch": "@@ -2,7 +2,9 @@\n /* Author: David Ayers */\n \n #ifdef __NEXT_RUNTIME__\n-/* This test only runs for the GNU runtime. */\n+/* This test only runs for the GNU runtime.  TODO: It should work on\n+   the NEXT runtime as well (needs testing).\n+ */\n \n int main(void)\n {\n@@ -12,8 +14,8 @@ int main(void)\n #else\n \n #include <objc/objc-api.h>\n+#include <objc/objc-exception.h>\n #include <objc/Object.h>\n-#include <stdio.h>\n #include <stdlib.h>\n \n static unsigned int handlerExpected = 0;\n@@ -31,7 +33,7 @@ int main(void)\n int \n main(int argc, char *argv[])\n {\n-  _objc_unexpected_exception = my_exception_handler;\n+  objc_setUncaughtExceptionHandler (my_exception_handler);\n \n   @try\n     {"}, {"sha": "ef0b627dab49b6fedf472a4c231c430c8383f7bd", "filename": "gcc/testsuite/objc/execute/exceptions/matcher-1.m", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fmatcher-1.m?ref=2023bba815a1d056a3f64aea988f0c24c3e4c15a", "patch": "@@ -0,0 +1,68 @@\n+/* Test custom exception matchers  */\n+/* Author: Nicola Pero */\n+\n+#ifdef __NEXT_RUNTIME__\n+/* This test only runs for the GNU runtime.  TODO: It should work on\n+   the NEXT runtime as well (needs testing).\n+ */\n+\n+int main(void)\n+{\n+  return 0;\n+}\n+\n+#else\n+\n+#include <objc/objc-api.h>\n+#include <objc/objc-exception.h>\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+static unsigned int handlerExpected = 0;\n+\n+void\n+my_exception_matcher(Class match_class, id exception)\n+{\n+  /* Always matches.  */\n+  return 1;\n+}\n+\n+@interface A : Object\n+@end\n+\n+@implementation A\n+@end\n+\n+@interface B : Object\n+@end\n+\n+@implementation B\n+@end\n+\n+int \n+main(int argc, char *argv[])\n+{\n+  objc_setExceptionMatcher (my_exception_matcher);\n+\n+  @try\n+    {\n+      @throw [A new];\n+    }\n+  @catch (B *exception)\n+    {\n+      /* Since we installed an exception matcher that always matches,\n+\t the exception should be sent here even if it's of class A and\n+\t this is looking for exceptions of class B.\n+       */\n+      return 0;\n+    }\n+  @catch (id exception)\n+    {\n+      abort ();\n+    }\n+\n+  abort ();\n+}\n+\n+\n+#endif"}, {"sha": "3092d145170b45c7ee9ca5c44abd5502afbb7dd0", "filename": "gcc/testsuite/objc/execute/exceptions/throw-nil.m", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2023bba815a1d056a3f64aea988f0c24c3e4c15a/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fexceptions%2Fthrow-nil.m?ref=2023bba815a1d056a3f64aea988f0c24c3e4c15a", "patch": "@@ -0,0 +1,38 @@\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test throwing a nil exception.  A 'nil' exception can only be\n+ * caugth by a generic exception handler.\n+ */\n+\n+int main (void)\n+{\n+  int exception_catched = 0;\n+  int finally_called = 0;\n+\n+  @try\n+    {\n+      @throw nil;\n+    }\n+  @catch (Object *exc)\n+    {\n+      abort ();\n+    }\n+  @catch (id exc)\n+    {\n+      exception_catched = 1;\n+    }\n+  @finally\n+    {\n+      finally_called = 1;\n+    }\n+\n+\n+  if (exception_catched != 1\n+      || finally_called != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}]}