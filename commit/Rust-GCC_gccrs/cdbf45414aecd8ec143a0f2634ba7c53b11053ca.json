{"sha": "cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RiZjQ1NDE0YWVjZDhlYzE0M2EwZjI2MzRiYTdjNTNiMTEwNTNjYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-05-25T12:11:42Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-05-25T12:11:42Z"}, "message": "libgcc2.h (__NW, __NDW): Define using a __gnu_ prefix if LIBGCC2_GNU_PREFIX is defined.\n\n\tgcc/\n\t* libgcc2.h (__NW, __NDW): Define using a __gnu_ prefix if\n\tLIBGCC2_GNU_PREFIX is defined.\n\t(__N): New macro.\n\t(__powisf2, __powidf2, __powitf2, __powixf2, __bswapsi2, __bswapdi2,\n\t__mulsc3, __muldc3, __mulxc3, __multc3, __divsc3, __divdc3, __divxc3,\n\t__divtc3, __udiv_w_sdiv, __clear_cache, __enable_execute_stack,\n\t__clz_tab): Define using __N.\n\t(__absvsi2, __negvsi2, __addvsi3, __subvsi3, __mulvsi3): Likewise if\n\tCOMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t* target.def (libfunc_gnu_prefix): New hook.\n\t* doc/tm.texi.in (LIBGCC2_GNU_PREFIX): Document.\n\t(TARGET_LIBFUNC_GNU_PREFIX): Add hook.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (LIBGCC2_GNU_PREFIX): Poison.\n\t* optabs.c (gen_libfunc): Take the libfunc_gnu_prefix hook into\n\taccount.\n\t(gen_interclass_conv_libfunc, gen_intraclass_conv_libfunc): Likewise.\n\t(init_optabs): Likewise for the bswap libfuncs.\n\t* tree.c (build_common_builtin_nodes): Likewise for complex multiply\n\tand divide.\n\t* config/t-slibgcc-elf-ver (SHLIB_MAPFILES): Use $$(libgcc_objdir).\n\t* config/t-slibgcc-sld (SHLIB_MAPFILES): Likewise.\n\t* libgcc-std.ver: Remove.\n\t* Makefile.in (srcdirify): Handle $$(libgcc_objdir).\n\t* config/frv/t-linux (SHLIB_MAPFILES): Use $$(libgcc_objdir) for\n\tlibgcc-std.ver.\n\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n\t* config/mips/t-slibgcc-irix (SHLIB_MAPFILES): Likewise.\n\t* config/rs6000/t-aix43 (SHLIB_MAPFILES): Likewise.\n\t* config/rs6000/t-aix52 (SHLIB_MAPFILES): Likewise.\n\t* config/sparc/t-linux (SHLIB_MAPFILES): Likewise.\n\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n\t* config/fixed-bit.h (FIXED_OP): Define differently depending on\n\tLIBGCC2_GNU_PREFIX. All uses changed not to pass leading underscores.\n\t(FIXED_CONVERT_OP, FIXED_CONVERT_OP2): Likewise.\n\n\tlibgcc/\n\t* libgcc-std.ver.in: New file.\n\t* Makefile.in (LIBGCC_VER_GNU_PREFIX, LIBGCC_VER_SYMBOLS_PREFIX): New\n\tvariables.\n\t(libgcc-std.ver): New rule.\n\t* config/t-gnu-prefix: New file.\n\nFrom-SVN: r174187", "tree": {"sha": "76324632de5089be2fc6b436d8ac4682fc89b374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76324632de5089be2fc6b436d8ac4682fc89b374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/comments", "author": null, "committer": null, "parents": [{"sha": "f242c0a5c0415bda56f33a13ef65e962ac995797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f242c0a5c0415bda56f33a13ef65e962ac995797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f242c0a5c0415bda56f33a13ef65e962ac995797"}], "stats": {"total": 2243, "additions": 2182, "deletions": 61}, "files": [{"sha": "03f6792099c5b98aff69b3b1ec405cb9af1bac10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1,3 +1,42 @@\n+2011-05-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* libgcc2.h (__NW, __NDW): Define using a __gnu_ prefix if\n+\tLIBGCC2_GNU_PREFIX is defined.\n+\t(__N): New macro.\n+\t(__powisf2, __powidf2, __powitf2, __powixf2, __bswapsi2, __bswapdi2,\n+\t__mulsc3, __muldc3, __mulxc3, __multc3, __divsc3, __divdc3, __divxc3,\n+\t__divtc3, __udiv_w_sdiv, __clear_cache, __enable_execute_stack,\n+\t__clz_tab): Define using __N.\n+\t(__absvsi2, __negvsi2, __addvsi3, __subvsi3, __mulvsi3): Likewise if\n+\tCOMPAT_SIMODE_TRAPPING_ARITHMETIC.\n+\t* target.def (libfunc_gnu_prefix): New hook.\n+\t* doc/tm.texi.in (LIBGCC2_GNU_PREFIX): Document.\n+\t(TARGET_LIBFUNC_GNU_PREFIX): Add hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (LIBGCC2_GNU_PREFIX): Poison.\n+\t* optabs.c (gen_libfunc): Take the libfunc_gnu_prefix hook into\n+\taccount.\n+\t(gen_interclass_conv_libfunc, gen_intraclass_conv_libfunc): Likewise.\n+\t(init_optabs): Likewise for the bswap libfuncs.\n+\t* tree.c (build_common_builtin_nodes): Likewise for complex multiply\n+\tand divide.\n+\t* config/t-slibgcc-elf-ver (SHLIB_MAPFILES): Use $$(libgcc_objdir).\n+\t* config/t-slibgcc-sld (SHLIB_MAPFILES): Likewise.\n+\t* libgcc-std.ver: Remove.\n+\t* Makefile.in (srcdirify): Handle $$(libgcc_objdir).\n+\t* config/frv/t-linux (SHLIB_MAPFILES): Use $$(libgcc_objdir) for\n+\tlibgcc-std.ver.\n+\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n+\t* config/mips/t-slibgcc-irix (SHLIB_MAPFILES): Likewise.\n+\t* config/rs6000/t-aix43 (SHLIB_MAPFILES): Likewise.\n+\t* config/rs6000/t-aix52 (SHLIB_MAPFILES): Likewise.\n+\t* config/sparc/t-linux (SHLIB_MAPFILES): Likewise.\n+\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n+\t* config/i386/t-linux (SHLIB_MAPFILES): Likewise.\n+\t* config/fixed-bit.h (FIXED_OP): Define differently depending on\n+\tLIBGCC2_GNU_PREFIX. All uses changed not to pass leading underscores.\n+\t(FIXED_CONVERT_OP, FIXED_CONVERT_OP2): Likewise.\n+\n 2011-05-25  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (output_record_start): Use lto_output_enum"}, {"sha": "06a4ebce576a7c872feb1a67ec6763ee6b4ecf63", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1898,7 +1898,10 @@ LIB2ADD_ST = $(LIB2FUNCS_STATIC_EXTRA)\n # which case they will start with $(srcdir)), or generated into the build\n # directory (in which case they will be relative paths).\n srcdirify = $(patsubst $(srcdir)%,$$(gcc_srcdir)%,$(filter $(srcdir)%,$(1))) \\\n-            $(patsubst %,$$(gcc_objdir)/%,$(filter-out $(srcdir)%,$(1)))\n+            $(patsubst $$(libgcc_objdir)/%,%, \\\n+\t\t$(filter $$(libgcc_objdir)%,$(1))) \\\n+            $(patsubst %,$$(gcc_objdir)/%, \\\n+\t\t$(filter-out $(srcdir)% $$(libgcc_objdir)%,$(1)))\n \n # The distinction between these two variables is no longer relevant,\n # so we combine them.  Sort removes duplicates."}, {"sha": "620742c34b6505d46f94c8c8dcf14985187bbf4a", "filename": "gcc/config/fixed-bit.h", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ffixed-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ffixed-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffixed-bit.h?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -445,35 +445,39 @@ typedef union\n #define IBITS\t\tIBITS2(MODE_NAME)\n #define I_F_BITS\t(FBITS + IBITS)\n \n-#define FIXED_OP(OP,MODE,NUM)\tOP ## MODE ## NUM\n-\n-#define FIXED_SATURATE1_TEMP(NAME)\tFIXED_OP(__saturate1,NAME,)\n-#define FIXED_SATURATE2_TEMP(NAME)\tFIXED_OP(__saturate2,NAME,)\n-#define FIXED_MULHELPER_TEMP(NAME)\tFIXED_OP(__mulhelper,NAME,)\n-#define FIXED_DIVHELPER_TEMP(NAME)\tFIXED_OP(__divhelper,NAME,)\n-#define FIXED_ASHLHELPER_TEMP(NAME)\tFIXED_OP(__ashlhelper,NAME,)\n-#define FIXED_ADD_TEMP(NAME)\tFIXED_OP(__add,NAME,3)\n-#define FIXED_SSADD_TEMP(NAME)\tFIXED_OP(__ssadd,NAME,3)\n-#define FIXED_USADD_TEMP(NAME)\tFIXED_OP(__usadd,NAME,3)\n-#define FIXED_SUB_TEMP(NAME)\tFIXED_OP(__sub,NAME,3)\n-#define FIXED_SSSUB_TEMP(NAME)\tFIXED_OP(__sssub,NAME,3)\n-#define FIXED_USSUB_TEMP(NAME)\tFIXED_OP(__ussub,NAME,3)\n-#define FIXED_MUL_TEMP(NAME)\tFIXED_OP(__mul,NAME,3)\n-#define FIXED_SSMUL_TEMP(NAME)\tFIXED_OP(__ssmul,NAME,3)\n-#define FIXED_USMUL_TEMP(NAME)\tFIXED_OP(__usmul,NAME,3)\n-#define FIXED_DIV_TEMP(NAME)\tFIXED_OP(__div,NAME,3)\n-#define FIXED_UDIV_TEMP(NAME)\tFIXED_OP(__udiv,NAME,3)\n-#define FIXED_SSDIV_TEMP(NAME)\tFIXED_OP(__ssdiv,NAME,3)\n-#define FIXED_USDIV_TEMP(NAME)\tFIXED_OP(__usdiv,NAME,3)\n-#define FIXED_NEG_TEMP(NAME)\tFIXED_OP(__neg,NAME,2)\n-#define FIXED_SSNEG_TEMP(NAME)\tFIXED_OP(__ssneg,NAME,2)\n-#define FIXED_USNEG_TEMP(NAME)\tFIXED_OP(__usneg,NAME,2)\n-#define FIXED_ASHL_TEMP(NAME)\tFIXED_OP(__ashl,NAME,3)\n-#define FIXED_ASHR_TEMP(NAME)\tFIXED_OP(__ashr,NAME,3)\n-#define FIXED_LSHR_TEMP(NAME)\tFIXED_OP(__lshr,NAME,3)\n-#define FIXED_SSASHL_TEMP(NAME)\tFIXED_OP(__ssashl,NAME,3)\n-#define FIXED_USASHL_TEMP(NAME)\tFIXED_OP(__usashl,NAME,3)\n-#define FIXED_CMP_TEMP(NAME)\tFIXED_OP(__cmp,NAME,2)\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define FIXED_OP(OP,MODE,NUM)\t__gnu_ ## OP ## MODE ## NUM\n+#else\n+#define FIXED_OP(OP,MODE,NUM)\t__ ## OP ## MODE ## NUM\n+#endif\n+\n+#define FIXED_SATURATE1_TEMP(NAME)\tFIXED_OP(saturate1,NAME,)\n+#define FIXED_SATURATE2_TEMP(NAME)\tFIXED_OP(saturate2,NAME,)\n+#define FIXED_MULHELPER_TEMP(NAME)\tFIXED_OP(mulhelper,NAME,)\n+#define FIXED_DIVHELPER_TEMP(NAME)\tFIXED_OP(divhelper,NAME,)\n+#define FIXED_ASHLHELPER_TEMP(NAME)\tFIXED_OP(ashlhelper,NAME,)\n+#define FIXED_ADD_TEMP(NAME)\tFIXED_OP(add,NAME,3)\n+#define FIXED_SSADD_TEMP(NAME)\tFIXED_OP(ssadd,NAME,3)\n+#define FIXED_USADD_TEMP(NAME)\tFIXED_OP(usadd,NAME,3)\n+#define FIXED_SUB_TEMP(NAME)\tFIXED_OP(sub,NAME,3)\n+#define FIXED_SSSUB_TEMP(NAME)\tFIXED_OP(sssub,NAME,3)\n+#define FIXED_USSUB_TEMP(NAME)\tFIXED_OP(ussub,NAME,3)\n+#define FIXED_MUL_TEMP(NAME)\tFIXED_OP(mul,NAME,3)\n+#define FIXED_SSMUL_TEMP(NAME)\tFIXED_OP(ssmul,NAME,3)\n+#define FIXED_USMUL_TEMP(NAME)\tFIXED_OP(usmul,NAME,3)\n+#define FIXED_DIV_TEMP(NAME)\tFIXED_OP(div,NAME,3)\n+#define FIXED_UDIV_TEMP(NAME)\tFIXED_OP(udiv,NAME,3)\n+#define FIXED_SSDIV_TEMP(NAME)\tFIXED_OP(ssdiv,NAME,3)\n+#define FIXED_USDIV_TEMP(NAME)\tFIXED_OP(usdiv,NAME,3)\n+#define FIXED_NEG_TEMP(NAME)\tFIXED_OP(neg,NAME,2)\n+#define FIXED_SSNEG_TEMP(NAME)\tFIXED_OP(ssneg,NAME,2)\n+#define FIXED_USNEG_TEMP(NAME)\tFIXED_OP(usneg,NAME,2)\n+#define FIXED_ASHL_TEMP(NAME)\tFIXED_OP(ashl,NAME,3)\n+#define FIXED_ASHR_TEMP(NAME)\tFIXED_OP(ashr,NAME,3)\n+#define FIXED_LSHR_TEMP(NAME)\tFIXED_OP(lshr,NAME,3)\n+#define FIXED_SSASHL_TEMP(NAME)\tFIXED_OP(ssashl,NAME,3)\n+#define FIXED_USASHL_TEMP(NAME)\tFIXED_OP(usashl,NAME,3)\n+#define FIXED_CMP_TEMP(NAME)\tFIXED_OP(cmp,NAME,2)\n \n #if defined (MODE_NAME)\n #if defined (DINT_C_TYPE)\n@@ -1146,14 +1150,19 @@ extern FIXED_C_TYPE FIXED_USASHL (FIXED_C_TYPE, word_type);\n #define TO_HAVE_PADDING_BITS\t(TO_PADDING_BITS > 0)\n #endif /* TO_TYPE == 4  */\n \n-#define FIXED_CONVERT_OP(OP,FROM,TO)\tOP ## FROM ## TO\n-#define FIXED_CONVERT_OP2(OP,FROM,TO)\tOP ## FROM ## TO ## 2\n-#define FRACT_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(__fract,N1,N2)\n-#define FRACT2_TEMP(N1,N2)\t\tFIXED_CONVERT_OP2(__fract,N1,N2)\n-#define SATFRACT_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(__satfract,N1,N2)\n-#define SATFRACT2_TEMP(N1,N2)\t\tFIXED_CONVERT_OP2(__satfract,N1,N2)\n-#define FRACTUNS_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(__fractuns,N1,N2)\n-#define SATFRACTUNS_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(__satfractuns,N1,N2)\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define FIXED_CONVERT_OP(OP,FROM,TO)\t__gnu_ ## OP ## FROM ## TO\n+#define FIXED_CONVERT_OP2(OP,FROM,TO)\t__gnu_ ## OP ## FROM ## TO ## 2\n+#else\n+#define FIXED_CONVERT_OP(OP,FROM,TO)\t__ ## OP ## FROM ## TO\n+#define FIXED_CONVERT_OP2(OP,FROM,TO)\t__ ## OP ## FROM ## TO ## 2\n+#endif\n+#define FRACT_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(fract,N1,N2)\n+#define FRACT2_TEMP(N1,N2)\t\tFIXED_CONVERT_OP2(fract,N1,N2)\n+#define SATFRACT_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(satfract,N1,N2)\n+#define SATFRACT2_TEMP(N1,N2)\t\tFIXED_CONVERT_OP2(satfract,N1,N2)\n+#define FRACTUNS_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(fractuns,N1,N2)\n+#define SATFRACTUNS_TEMP(N1,N2)\t\tFIXED_CONVERT_OP(satfractuns,N1,N2)\n \n /* Define conversions from fixed-point to fixed-point.  */\n #if FROM_TYPE == 4 && TO_TYPE == 4"}, {"sha": "5b094518a1dd58c48dfb9121bf51d15760806bed", "filename": "gcc/config/frv/t-linux", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ffrv%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ffrv%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-linux?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -29,5 +29,5 @@ EXTRA_MULTILIB_PARTS =\n CRTSTUFF_T_CFLAGS = -fPIC\n TARGET_LIBGCC2_CFLAGS = -fPIC\n \n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \\\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver \\\n \t\t $(srcdir)/config/frv/libgcc-frv.ver"}, {"sha": "af2c9e41c4de37da4d19ad9c81e4d876f39fd559", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -113,4 +113,4 @@ SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n # We'd like to use SHLIB_SONAME here too, but shlib_base_name\n # does not get substituted before mkmap-flat.awk is run.\n SHLIB_MKMAP_OPTS = -v pe_dll=libgcc_s_$(EH_MODEL)-$(SHLIB_SOVERSION)$(SHLIB_EXT)\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver"}, {"sha": "500d932fec89158777163af926175c154e89fea8", "filename": "gcc/config/i386/t-linux", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fi386%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fi386%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1,5 +1,5 @@\n # On 64bit we do not need any exports for glibc for 64-bit libgcc_s.\n # Need to support TImode for x86.  Override the settings from\n # t-slibgcc-elf-ver and t-linux\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \\\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver \\\n \t\t $(srcdir)/config/i386/libgcc-glibc.ver"}, {"sha": "e9f168e49d2119620593cb8ef11c2dd2981fbd0c", "filename": "gcc/config/mips/t-slibgcc-irix", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-slibgcc-irix?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -49,4 +49,4 @@ SHLIB_INSTALL = \\\n \t$(LN_S) $(SHLIB_SONAME) \\\n \t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver"}, {"sha": "705e053122dca41ad687bfb2a9bcf64894ee5c56", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -82,7 +82,7 @@ SHLIB_INSTALL = \\\n \t\t$$(DESTDIR)$$(slibdir)@shlib_slibdir_qual@/\n SHLIB_LIBS = -lc `case @multilib_dir@ in *pthread*) echo -lpthread ;; esac`\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc-ppc64.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc-ppc64.ver\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n # GCC 128-bit long double support routines."}, {"sha": "e918a2e13a1ac476f0e988a4481bb2175d42a3c2", "filename": "gcc/config/rs6000/t-aix52", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Frs6000%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Frs6000%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix52?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -63,7 +63,7 @@ SHLIB_INSTALL = \\\n \t\t$$(DESTDIR)$$(slibdir)@shlib_slibdir_qual@/\n SHLIB_LIBS = -lc `case @multilib_dir@ in *pthread*) echo -lpthread ;; esac`\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc-ppc64.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver $(srcdir)/config/rs6000/libgcc-ppc64.ver\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n # GCC 128-bit long double support routines."}, {"sha": "30daa376614379d2ed163d33aa468f7bd9ddf699", "filename": "gcc/config/sparc/t-linux", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fsparc%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Fsparc%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-linux?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1,5 +1,5 @@\n # Override t-slibgcc-elf-ver to export some libgcc symbols with\n # the symbol versions that glibc used.\n # Avoid the t-linux version file.\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver \\\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver \\\n \t\t $(srcdir)/config/sparc/libgcc-sparc-glibc.ver"}, {"sha": "b90f4fcf3a3b2b80a970ec420854af6102d10aa2", "filename": "gcc/config/t-slibgcc-elf-ver", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ft-slibgcc-elf-ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ft-slibgcc-elf-ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-elf-ver?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -53,4 +53,4 @@ SHLIB_INSTALL = \\\n \trm -f $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK); \\\n \t$(SHLIB_INSTALL_SOLINK)\n SHLIB_MKMAP = $(srcdir)/mkmap-symver.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver"}, {"sha": "013a0d70e9ee94b68bcb90325d7f60a90f9ebe59", "filename": "gcc/config/t-slibgcc-sld", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ft-slibgcc-sld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fconfig%2Ft-slibgcc-sld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-sld?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -47,4 +47,4 @@ SHLIB_INSTALL = \\\n \t$(LN_S) $(SHLIB_SONAME) \\\n \t  $$(DESTDIR)$$(slibdir)$(SHLIB_SLIBDIR_QUAL)/$(SHLIB_SOLINK)\n SHLIB_MKMAP = $(srcdir)/mkmap-symver.awk\n-SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+SHLIB_MAPFILES = $$(libgcc_objdir)/libgcc-std.ver"}, {"sha": "c2aa216dbb593b0e3551f450af89c85decc3efde", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1581,6 +1581,15 @@ anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n is 128 then the default is 1, otherwise it is 0.\n @end defmac\n \n+@defmac LIBGCC2_GNU_PREFIX\n+This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n+hook and should be defined if that hook is overriden to be true.  It\n+causes function names in libgcc to be changed to use a @code{__gnu_}\n+prefix for their name rather than the default @code{__}.  A port which\n+uses this macro should also arrange to use @file{t-gnu-prefix} in\n+the libgcc @file{config.host}.\n+@end defmac\n+\n @defmac SF_SIZE\n @defmacx DF_SIZE\n @defmacx XF_SIZE\n@@ -5245,6 +5254,15 @@ library routines.\n The default is to do nothing.  Most ports don't need to define this hook.\n @end deftypefn\n \n+@deftypevr {Target Hook} bool TARGET_LIBFUNC_GNU_PREFIX\n+If false (the default), internal library routines start with two\n+underscores.  If set to true, these routines start with @code{__gnu_}\n+instead.  E.g., @code{__muldi3} changes to @code{__gnu_muldi3}.  This\n+currently only affects functions defined in @file{libgcc2.c}.  If this\n+is set to true, the @file{tm.h} file must also\n+@code{#define LIBGCC2_GNU_PREFIX}.\n+@end deftypevr\n+\n @defmac FLOAT_LIB_COMPARE_RETURNS_BOOL (@var{mode}, @var{comparison})\n This macro should return @code{true} if the library routine that\n implements the floating point comparison operator @var{comparison} in"}, {"sha": "ab0b39b2d2b2b417c0058d8c42ae74aca73a2e67", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1571,6 +1571,15 @@ anyway.  If you don't define this and @code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE}\n is 128 then the default is 1, otherwise it is 0.\n @end defmac\n \n+@defmac LIBGCC2_GNU_PREFIX\n+This macro corresponds to the @code{TARGET_LIBFUNC_GNU_PREFIX} target\n+hook and should be defined if that hook is overriden to be true.  It\n+causes function names in libgcc to be changed to use a @code{__gnu_}\n+prefix for their name rather than the default @code{__}.  A port which\n+uses this macro should also arrange to use @file{t-gnu-prefix} in\n+the libgcc @file{config.host}.\n+@end defmac\n+\n @defmac SF_SIZE\n @defmacx DF_SIZE\n @defmacx XF_SIZE\n@@ -5197,6 +5206,8 @@ library routines.\n The default is to do nothing.  Most ports don't need to define this hook.\n @end deftypefn\n \n+@hook TARGET_LIBFUNC_GNU_PREFIX\n+\n @defmac FLOAT_LIB_COMPARE_RETURNS_BOOL (@var{mode}, @var{comparison})\n This macro should return @code{true} if the library routine that\n implements the floating point comparison operator @var{comparison} in"}, {"sha": "aee6d19c3eade737e6403993975528f351a987aa", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -193,8 +193,13 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define UHWtype\tUDItype\n #define DWtype\tTItype\n #define UDWtype\tUTItype\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define __NW(a,b)\t__gnu_ ## a ## di ## b\n+#define __NDW(a,b)\t__gnu_ ## a ## ti ## b\n+#else\n #define __NW(a,b)\t__ ## a ## di ## b\n #define __NDW(a,b)\t__ ## a ## ti ## b\n+#endif\n #define COMPAT_SIMODE_TRAPPING_ARITHMETIC\n #elif LIBGCC2_UNITS_PER_WORD == 4\n #define W_TYPE_SIZE (4 * BITS_PER_UNIT)\n@@ -204,8 +209,13 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define UHWtype\tUSItype\n #define DWtype\tDItype\n #define UDWtype\tUDItype\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define __NW(a,b)\t__gnu_ ## a ## si ## b\n+#define __NDW(a,b)\t__gnu_ ## a ## di ## b\n+#else\n #define __NW(a,b)\t__ ## a ## si ## b\n #define __NDW(a,b)\t__ ## a ## di ## b\n+#endif\n #elif LIBGCC2_UNITS_PER_WORD == 2\n #define W_TYPE_SIZE (2 * BITS_PER_UNIT)\n #define Wtype\tHItype\n@@ -214,8 +224,13 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define UHWtype\tUHItype\n #define DWtype\tSItype\n #define UDWtype\tUSItype\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define __NW(a,b)\t__gnu_ ## a ## hi ## b\n+#define __NDW(a,b)\t__gnu_ ## a ## si ## b\n+#else\n #define __NW(a,b)\t__ ## a ## hi ## b\n #define __NDW(a,b)\t__ ## a ## si ## b\n+#endif\n #else\n #define W_TYPE_SIZE BITS_PER_UNIT\n #define Wtype\tQItype\n@@ -224,10 +239,20 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define UHWtype\tUQItype\n #define DWtype\tHItype\n #define UDWtype\tUHItype\n+#ifdef LIBGCC2_GNU_PREFIX\n+#define __NW(a,b)\t__gnu_ ## a ## qi ## b\n+#define __NDW(a,b)\t__gnu_ ## a ## hi ## b\n+#else\n #define __NW(a,b)\t__ ## a ## qi ## b\n #define __NDW(a,b)\t__ ## a ## hi ## b\n #endif\n+#endif\n \n+#ifdef LIBGCC2_GNU_PREFIX\n+#define __N(a)\t__gnu_ ## a\n+#else\n+#define __N(a)\t__ ## a\n+#endif\n #define Wtype_MAX ((Wtype)(((UWtype)1 << (W_TYPE_SIZE - 1)) - 1))\n #define Wtype_MIN (- Wtype_MAX - 1)\n \n@@ -298,6 +323,25 @@ typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n #define __popcountDI2\t__NDW(popcount,2)\n #define __parityDI2\t__NDW(parity,2)\n \n+#define __clz_tab\t\t__N(clz_tab)\n+#define __powisf2\t\t__N(powisf2)\n+#define __powidf2\t\t__N(powidf2)\n+#define __powitf2\t\t__N(powitf2)\n+#define __powixf2\t\t__N(powixf2)\n+#define __bswapsi2\t\t__N(bswapsi2)\n+#define __bswapdi2\t\t__N(bswapdi2)\n+#define __mulsc3\t\t__N(mulsc3)\n+#define __muldc3\t\t__N(muldc3)\n+#define __mulxc3\t\t__N(mulxc3)\n+#define __multc3\t\t__N(multc3)\n+#define __divsc3\t\t__N(divsc3)\n+#define __divdc3\t\t__N(divdc3)\n+#define __divxc3\t\t__N(divxc3)\n+#define __divtc3\t\t__N(divtc3)\n+#define __udiv_w_sdiv\t\t__N(udiv_w_sdiv)\n+#define __clear_cache\t\t__N(clear_cache)\n+#define __enable_execute_stack\t__N(enable_execute_stack)\n+\n extern DWtype __muldi3 (DWtype, DWtype);\n extern DWtype __divdi3 (DWtype, DWtype);\n extern UDWtype __udivdi3 (UDWtype, UDWtype);\n@@ -347,6 +391,12 @@ extern DWtype __mulvDI3 (DWtype, DWtype);\n extern DWtype __negvDI2 (DWtype);\n \n #ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+#define __absvsi2\t__N(absvsi2)\n+#define __negvsi2\t__N(negvsi2)\n+#define __addvsi3\t__N(addvsi3)\n+#define __subvsi3\t__N(subvsi3)\n+#define __mulvsi3\t__N(mulvsi3)\n+\n extern SItype __absvsi2 (SItype);\n extern SItype __addvsi3 (SItype, SItype);\n extern SItype __subvsi3 (SItype, SItype);"}, {"sha": "1473b0f13aff1caf0f2bf607af270c557eb54ae9", "filename": "gcc/optabs.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -5152,13 +5152,22 @@ gen_libfunc (optab optable, const char *opname, int suffix, enum machine_mode mo\n   unsigned opname_len = strlen (opname);\n   const char *mname = GET_MODE_NAME (mode);\n   unsigned mname_len = strlen (mname);\n-  char *libfunc_name = XALLOCAVEC (char, 2 + opname_len + mname_len + 1 + 1);\n+  int prefix_len = targetm.libfunc_gnu_prefix ? 6 : 2;\n+  int len = prefix_len + opname_len + mname_len + 1 + 1;\n+  char *libfunc_name = XALLOCAVEC (char, len);\n   char *p;\n   const char *q;\n \n   p = libfunc_name;\n   *p++ = '_';\n   *p++ = '_';\n+  if (targetm.libfunc_gnu_prefix)\n+    {\n+      *p++ = 'g';\n+      *p++ = 'n';\n+      *p++ = 'u';\n+      *p++ = '_';\n+    }\n   for (q = opname; *q; )\n     *p++ = *q++;\n   for (q = mname; *q; q++)\n@@ -5362,6 +5371,7 @@ gen_interclass_conv_libfunc (convert_optab tab,\n \n   const char *fname, *tname;\n   const char *q;\n+  int prefix_len = targetm.libfunc_gnu_prefix ? 6 : 2;\n   char *libfunc_name, *suffix;\n   char *nondec_name, *dec_name, *nondec_suffix, *dec_suffix;\n   char *p;\n@@ -5372,11 +5382,19 @@ gen_interclass_conv_libfunc (convert_optab tab,\n \n   mname_len = strlen (GET_MODE_NAME (tmode)) + strlen (GET_MODE_NAME (fmode));\n \n-  nondec_name = XALLOCAVEC (char, 2 + opname_len + mname_len + 1 + 1);\n+  nondec_name = XALLOCAVEC (char, prefix_len + opname_len + mname_len + 1 + 1);\n   nondec_name[0] = '_';\n   nondec_name[1] = '_';\n-  memcpy (&nondec_name[2], opname, opname_len);\n-  nondec_suffix = nondec_name + opname_len + 2;\n+  if (targetm.libfunc_gnu_prefix)\n+    {\n+      nondec_name[2] = 'g';\n+      nondec_name[3] = 'n';\n+      nondec_name[4] = 'u';\n+      nondec_name[5] = '_';\n+    }\n+\n+  memcpy (&nondec_name[prefix_len], opname, opname_len);\n+  nondec_suffix = nondec_name + opname_len + prefix_len;\n \n   dec_name = XALLOCAVEC (char, 2 + dec_len + opname_len + mname_len + 1 + 1);\n   dec_name[0] = '_';\n@@ -5487,6 +5505,7 @@ gen_intraclass_conv_libfunc (convert_optab tab, const char *opname,\n \n   const char *fname, *tname;\n   const char *q;\n+  int prefix_len = targetm.libfunc_gnu_prefix ? 6 : 2;\n   char *nondec_name, *dec_name, *nondec_suffix, *dec_suffix;\n   char *libfunc_name, *suffix;\n   char *p;\n@@ -5500,8 +5519,15 @@ gen_intraclass_conv_libfunc (convert_optab tab, const char *opname,\n   nondec_name = XALLOCAVEC (char, 2 + opname_len + mname_len + 1 + 1);\n   nondec_name[0] = '_';\n   nondec_name[1] = '_';\n-  memcpy (&nondec_name[2], opname, opname_len);\n-  nondec_suffix = nondec_name + opname_len + 2;\n+  if (targetm.libfunc_gnu_prefix)\n+    {\n+      nondec_name[2] = 'g';\n+      nondec_name[3] = 'n';\n+      nondec_name[4] = 'u';\n+      nondec_name[5] = '_';\n+    }\n+  memcpy (&nondec_name[prefix_len], opname, opname_len);\n+  nondec_suffix = nondec_name + opname_len + prefix_len;\n \n   dec_name = XALLOCAVEC (char, 2 + dec_len + opname_len + mname_len + 1 + 1);\n   dec_name[0] = '_';\n@@ -6231,8 +6257,16 @@ init_optabs (void)\n \n   /* Explicitly initialize the bswap libfuncs since we need them to be\n      valid for things other than word_mode.  */\n-  set_optab_libfunc (bswap_optab, SImode, \"__bswapsi2\");\n-  set_optab_libfunc (bswap_optab, DImode, \"__bswapdi2\");\n+  if (targetm.libfunc_gnu_prefix)\n+    {\n+      set_optab_libfunc (bswap_optab, SImode, \"__gnu_bswapsi2\");\n+      set_optab_libfunc (bswap_optab, DImode, \"__gnu_bswapdi2\");\n+    }\n+  else\n+    {\n+      set_optab_libfunc (bswap_optab, SImode, \"__bswapsi2\");\n+      set_optab_libfunc (bswap_optab, DImode, \"__bswapdi2\");\n+    }\n \n   /* Use cabs for double complex abs, since systems generally have cabs.\n      Don't define any libcall for float complex, so that cabs will be used.  */"}, {"sha": "e39a6f928e927e0f805115ba6c4850a2e584aef8", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -762,8 +762,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P\n \n /* Target macros only used for code built for the target, that have\n-   moved to libgcc-tm.h.  */\n- #pragma GCC poison DECLARE_LIBRARY_RENAMES\n+   moved to libgcc-tm.h or have never been present elsewhere.  */\n+ #pragma GCC poison DECLARE_LIBRARY_RENAMES LIBGCC2_GNU_PREFIX\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "6137e976619025d2d6124e3c1a3ada90cdb8f1d4", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1242,6 +1242,17 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n+ /* Add a __gnu_ prefix to library functions rather than just __.  */\n+DEFHOOKPOD\n+(libfunc_gnu_prefix,\n+ \"If false (the default), internal library routines start with two\\n\\\n+underscores.  If set to true, these routines start with @code{__gnu_}\\n\\\n+instead.  E.g., @code{__muldi3} changes to @code{__gnu_muldi3}.  This\\n\\\n+currently only affects functions defined in @file{libgcc2.c}.  If this\\n\\\n+is set to true, the @file{tm.h} file must also\\n\\\n+@code{#define LIBGCC2_GNU_PREFIX}.\",\n+  bool, false)\n+\n /* Given a decl, a section name, and whether the decl initializer\n    has relocs, choose attributes for the section.  */\n /* ??? Should be merged with SELECT_SECTION and UNIQUE_SECTION.  */"}, {"sha": "63f50b0ad41a11d51ffd9ed1415cf2a8710c27ce", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -9525,6 +9525,10 @@ build_common_builtin_nodes (void)\n \tconst char *p;\n \tenum built_in_function mcode, dcode;\n \ttree type, inner_type;\n+\tconst char *prefix = \"__\";\n+\n+\tif (targetm.libfunc_gnu_prefix)\n+\t  prefix = \"__gnu_\";\n \n \ttype = lang_hooks.types.type_for_mode ((enum machine_mode) mode, 0);\n \tif (type == NULL)\n@@ -9543,13 +9547,17 @@ build_common_builtin_nodes (void)\n \t  *q = TOLOWER (*p);\n \t*q = '\\0';\n \n-\tbuilt_in_names[mcode] = concat (\"__mul\", mode_name_buf, \"3\", NULL);\n+\tbuilt_in_names[mcode] = concat (prefix, \"mul\", mode_name_buf, \"3\",\n+\t\t\t\t\tNULL);\n         local_define_builtin (built_in_names[mcode], ftype, mcode,\n-\t\t\t      built_in_names[mcode], ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n+\t\t\t      built_in_names[mcode],\n+\t\t\t      ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n \n-\tbuilt_in_names[dcode] = concat (\"__div\", mode_name_buf, \"3\", NULL);\n+\tbuilt_in_names[dcode] = concat (prefix, \"div\", mode_name_buf, \"3\",\n+\t\t\t\t\tNULL);\n         local_define_builtin (built_in_names[dcode], ftype, dcode,\n-\t\t\t      built_in_names[dcode], ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n+\t\t\t      built_in_names[dcode],\n+\t\t\t      ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n       }\n   }\n }"}, {"sha": "6dd2636d1a524f5494c36ba9eb4f70f1a0444406", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -1,3 +1,11 @@\n+2011-05-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* libgcc-std.ver.in: New file.\n+\t* Makefile.in (LIBGCC_VER_GNU_PREFIX, LIBGCC_VER_SYMBOLS_PREFIX): New\n+\tvariables.\n+\t(libgcc-std.ver): New rule.\n+\t* config/t-gnu-prefix: New file.\n+\n 2011-05-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/s390/t-tpf (LIB2ADDEH): Remove $(gcc_srcdir)/gthr-gnat.c."}, {"sha": "557fab36e48be6bc50c4a2505354e8c69340ad7b", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -250,6 +250,10 @@ gcc_s_compile = $(gcc_compile) -DSHARED\n objects = $(filter %$(objext),$^)\n \n # Collect any host-specific information from Makefile fragments.\n+\n+LIBGCC_VER_GNU_PREFIX = __\n+LIBGCC_VER_SYMBOLS_PREFIX =\n+\n tmake_file = @tmake_file@\n include $(srcdir)/empty.mk $(tmake_file)\n \n@@ -795,6 +799,9 @@ libgcc_s$(SHLIB_EXT): libgcc.map\n mapfile = libgcc.map\n endif\n \n+libgcc-std.ver: $(srcdir)/libgcc-std.ver.in\n+\tsed -e 's/__PFX__/$(LIBGCC_VER_GNU_PREFIX)/g' < $< > $@\n+\n libgcc_s$(SHLIB_EXT): $(libgcc-s-objects) $(extra-parts)\n \t# @multilib_flags@ is still needed because this may use\n \t# $(GCC_FOR_TARGET) and $(LIBGCC2_CFLAGS) directly."}, {"sha": "b04b23f09f374f5aebe1900875aaf1f480af9022", "filename": "libgcc/config/t-gnu-prefix", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2Fconfig%2Ft-gnu-prefix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2Fconfig%2Ft-gnu-prefix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-gnu-prefix?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -0,0 +1 @@\n+LIBGCC_VER_GNU_PREFIX = __gnu_"}, {"sha": "e468ec589bad62d9bffca29701b41f2729f5777f", "filename": "libgcc/libgcc-std.ver.in", "status": "added", "additions": 1922, "deletions": 0, "changes": 1922, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2Flibgcc-std.ver.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdbf45414aecd8ec143a0f2634ba7c53b11053ca/libgcc%2Flibgcc-std.ver.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc-std.ver.in?ref=cdbf45414aecd8ec143a0f2634ba7c53b11053ca", "patch": "@@ -0,0 +1,1922 @@\n+# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n+# 2008, 2010 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+GCC_3.0 {\n+  # libgcc1 integer symbols\n+  __PFX__absvsi2\n+  __PFX__addvsi3\n+  __PFX__ashlsi3\n+  __PFX__ashrsi3\n+  __PFX__divsi3\n+  __PFX__lshrsi3\n+  __PFX__modsi3\n+  __PFX__mulsi3\n+  __PFX__mulvsi3\n+  __PFX__negvsi2\n+  __PFX__subvsi3\n+  __PFX__udivsi3\n+  __PFX__umodsi3\n+\n+  # libgcc1 floating point symbols\n+  __PFX__addsf3\n+  __PFX__adddf3\n+  __PFX__addxf3\n+  __PFX__addtf3\n+  __PFX__divsf3\n+  __PFX__divdf3\n+  __PFX__divxf3\n+  __PFX__divtf3\n+  __PFX__eqsf2\n+  __PFX__eqdf2\n+  __PFX__eqxf2\n+  __PFX__eqtf2\n+  __PFX__extenddfxf2\n+  __PFX__extenddftf2\n+  __PFX__extendsfdf2\n+  __PFX__extendsfxf2\n+  __PFX__extendsftf2\n+  __PFX__fixsfsi\n+  __PFX__fixdfsi\n+  __PFX__fixxfsi\n+  __PFX__fixtfsi\n+  __PFX__floatsisf\n+  __PFX__floatsidf\n+  __PFX__floatsixf\n+  __PFX__floatsitf\n+  __PFX__gesf2\n+  __PFX__gedf2\n+  __PFX__gexf2\n+  __PFX__getf2\n+  __PFX__gtsf2\n+  __PFX__gtdf2\n+  __PFX__gtxf2\n+  __PFX__gttf2\n+  __PFX__lesf2\n+  __PFX__ledf2\n+  __PFX__lexf2\n+  __PFX__letf2\n+  __PFX__ltsf2\n+  __PFX__ltdf2\n+  __PFX__ltxf2\n+  __PFX__lttf2\n+  __PFX__mulsf3\n+  __PFX__muldf3\n+  __PFX__mulxf3\n+  __PFX__multf3\n+  __PFX__negsf2\n+  __PFX__negdf2\n+  __PFX__negxf2\n+  __PFX__negtf2\n+  __PFX__nesf2\n+  __PFX__nedf2\n+  __PFX__nexf2\n+  __PFX__netf2\n+  __PFX__subsf3\n+  __PFX__subdf3\n+  __PFX__subxf3\n+  __PFX__subtf3\n+  __PFX__truncdfsf2\n+  __PFX__truncxfsf2\n+  __PFX__trunctfsf2\n+  __PFX__truncxfdf2\n+  __PFX__trunctfdf2\n+\n+  # libgcc2 DImode arithmetic (for 32-bit targets).\n+  __PFX__absvdi2\n+  __PFX__addvdi3\n+  __PFX__ashldi3\n+  __PFX__ashrdi3\n+  __PFX__cmpdi2\n+  __PFX__divdi3\n+  __PFX__ffsdi2\n+  __PFX__fixdfdi\n+  __PFX__fixsfdi\n+  __PFX__fixtfdi\n+  __PFX__fixxfdi\n+  __PFX__fixunsdfdi\n+  __PFX__fixunsdfsi\n+  __PFX__fixunssfsi\n+  __PFX__fixunssfdi\n+  __PFX__fixunstfdi\n+  __PFX__fixunstfsi\n+  __PFX__fixunsxfdi\n+  __PFX__fixunsxfsi\n+  __PFX__floatdidf\n+  __PFX__floatdisf\n+  __PFX__floatdixf\n+  __PFX__floatditf\n+  __PFX__lshrdi3\n+  __PFX__moddi3\n+  __PFX__muldi3\n+  __PFX__mulvdi3\n+  __PFX__negdi2\n+  __PFX__negvdi2\n+  __PFX__subvdi3\n+  __PFX__ucmpdi2\n+  __PFX__udivdi3\n+  __PFX__udivmoddi4\n+  __PFX__umoddi3\n+\n+  # libgcc2 TImode arithmetic (for 64-bit targets).\n+  __PFX__ashlti3\n+  __PFX__ashrti3\n+  __PFX__cmpti2\n+  __PFX__divti3\n+  __PFX__ffsti2\n+  __PFX__fixdfti\n+  __PFX__fixsfti\n+  __PFX__fixtfti\n+  __PFX__fixxfti\n+  __PFX__lshrti3\n+  __PFX__modti3\n+  __PFX__multi3\n+  __PFX__negti2\n+  __PFX__ucmpti2\n+  __PFX__udivmodti4\n+  __PFX__udivti3\n+  __PFX__umodti3\n+  __PFX__fixunsdfti\n+  __PFX__fixunssfti\n+  __PFX__fixunstfti\n+  __PFX__fixunsxfti\n+  __PFX__floattidf\n+  __PFX__floattisf\n+  __PFX__floattixf\n+  __PFX__floattitf\n+\n+  # Used to deal with trampoline initialization on some platforms\n+  __PFX__clear_cache\n+\n+  # EH symbols\n+  _Unwind_DeleteException\n+  _Unwind_Find_FDE\n+  _Unwind_ForcedUnwind\n+  _Unwind_GetGR\n+  _Unwind_GetIP\n+  _Unwind_GetLanguageSpecificData\n+  _Unwind_GetRegionStart\n+  _Unwind_GetTextRelBase\n+  _Unwind_GetDataRelBase\n+  _Unwind_RaiseException\n+  _Unwind_Resume\n+  _Unwind_SetGR\n+  _Unwind_SetIP\n+  __deregister_frame\n+  __deregister_frame_info\n+  __deregister_frame_info_bases\n+  __register_frame\n+  __register_frame_info\n+  __register_frame_info_bases\n+  __register_frame_info_table\n+  __register_frame_info_table_bases\n+  __register_frame_table\n+\n+  # SjLj EH symbols\n+  _Unwind_SjLj_Register\n+  _Unwind_SjLj_Unregister\n+  _Unwind_SjLj_RaiseException\n+  _Unwind_SjLj_ForcedUnwind\n+  _Unwind_SjLj_Resume\n+}\n+\n+%inherit GCC_3.3 GCC_3.0\n+GCC_3.3 {\n+  _Unwind_FindEnclosingFunction\n+  _Unwind_GetCFA\n+  _Unwind_Backtrace\n+  _Unwind_Resume_or_Rethrow\n+  _Unwind_SjLj_Resume_or_Rethrow\n+}\n+\n+%inherit GCC_3.3.1 GCC_3.3\n+GCC_3.3.1 {\n+  __gcc_personality_sj0\n+  __gcc_personality_v0\n+}\n+\n+%inherit GCC_3.3.2 GCC_3.3.1\n+GCC_3.3.2 {\n+}\n+\n+%inherit GCC_3.3.4 GCC_3.3.2\n+GCC_3.3.4 {\n+  __PFX__unorddf2\n+  __PFX__unordsf2\n+}\n+\n+%inherit GCC_3.4 GCC_3.3.4\n+GCC_3.4 {\n+  # bit scanning and counting built-ins\n+  __PFX__clzsi2\n+  __PFX__clzdi2\n+  __PFX__clzti2\n+  __PFX__ctzsi2\n+  __PFX__ctzdi2\n+  __PFX__ctzti2\n+  __PFX__popcountsi2\n+  __PFX__popcountdi2\n+  __PFX__popcountti2\n+  __PFX__paritysi2\n+  __PFX__paritydi2\n+  __PFX__parityti2\n+}\n+\n+%inherit GCC_3.4.2 GCC_3.4\n+GCC_3.4.2 {\n+  # Used to deal with trampoline initialization on some platforms\n+  __PFX__enable_execute_stack\n+  __trampoline_setup\n+}\n+\n+%inherit GCC_3.4.4 GCC_3.4.2\n+GCC_3.4.4 {\n+  # libgcc2 TImode arithmetic (for 64-bit targets).\n+  __PFX__absvti2\n+  __PFX__addvti3\n+  __PFX__mulvti3\n+  __PFX__negvti2\n+  __PFX__subvti3\n+}\n+\n+%inherit GCC_4.0.0 GCC_3.4.4\n+GCC_4.0.0 {\n+  # libgcc2 __builtin_powi helpers.\n+  __PFX__powisf2\n+  __PFX__powidf2\n+  __PFX__powixf2\n+  __PFX__powitf2\n+\n+  # c99 compliant complex arithmetic\n+  __PFX__divsc3\n+  __PFX__divdc3\n+  __PFX__divxc3\n+  __PFX__divtc3\n+  __PFX__mulsc3\n+  __PFX__muldc3\n+  __PFX__mulxc3\n+  __PFX__multc3\n+}\n+\n+%inherit GCC_4.1.0 GCC_4.0.0\n+GCC_4.1.0 {\n+}\n+\n+%inherit GCC_4.2.0 GCC_4.1.0\n+GCC_4.2.0 {\n+  # unsigned-to-floating conversions\n+  __PFX__floatunsisf\n+  __PFX__floatunsidf\n+  __PFX__floatunsixf\n+  __PFX__floatunsitf\n+  __PFX__floatundidf\n+  __PFX__floatundisf\n+  __PFX__floatundixf\n+  __PFX__floatunditf\n+  __PFX__floatuntidf\n+  __PFX__floatuntisf\n+  __PFX__floatuntixf\n+  __PFX__floatuntitf\n+  _Unwind_GetIPInfo\n+}\n+\n+%inherit GCC_4.3.0 GCC_4.2.0\n+GCC_4.3.0 {\n+  # byte swapping routines\n+  __PFX__bswapsi2\n+  __PFX__bswapdi2\n+\n+  __emutls_get_address\n+  __emutls_register_common\n+  __PFX__ffssi2\n+  __PFX__extendxftf2\n+  __PFX__trunctfxf2\n+\n+  # fixed-point routines\n+  __PFX__addqq3\n+  __PFX__addhq3\n+  __PFX__addsq3\n+  __PFX__adddq3\n+  __PFX__addtq3\n+  __PFX__adduqq3\n+  __PFX__adduhq3\n+  __PFX__addusq3\n+  __PFX__addudq3\n+  __PFX__addutq3\n+  __PFX__addha3\n+  __PFX__addsa3\n+  __PFX__addda3\n+  __PFX__addta3\n+  __PFX__adduha3\n+  __PFX__addusa3\n+  __PFX__adduda3\n+  __PFX__adduta3\n+  __PFX__ssaddqq3\n+  __PFX__ssaddhq3\n+  __PFX__ssaddsq3\n+  __PFX__ssadddq3\n+  __PFX__ssaddtq3\n+  __PFX__ssaddha3\n+  __PFX__ssaddsa3\n+  __PFX__ssaddda3\n+  __PFX__ssaddta3\n+  __PFX__usadduqq3\n+  __PFX__usadduhq3\n+  __PFX__usaddusq3\n+  __PFX__usaddudq3\n+  __PFX__usaddutq3\n+  __PFX__usadduha3\n+  __PFX__usaddusa3\n+  __PFX__usadduda3\n+  __PFX__usadduta3\n+  __PFX__subqq3\n+  __PFX__subhq3\n+  __PFX__subsq3\n+  __PFX__subdq3\n+  __PFX__subtq3\n+  __PFX__subuqq3\n+  __PFX__subuhq3\n+  __PFX__subusq3\n+  __PFX__subudq3\n+  __PFX__subutq3\n+  __PFX__subha3\n+  __PFX__subsa3\n+  __PFX__subda3\n+  __PFX__subta3\n+  __PFX__subuha3\n+  __PFX__subusa3\n+  __PFX__subuda3\n+  __PFX__subuta3\n+  __PFX__sssubqq3\n+  __PFX__sssubhq3\n+  __PFX__sssubsq3\n+  __PFX__sssubdq3\n+  __PFX__sssubtq3\n+  __PFX__sssubha3\n+  __PFX__sssubsa3\n+  __PFX__sssubda3\n+  __PFX__sssubta3\n+  __PFX__ussubuqq3\n+  __PFX__ussubuhq3\n+  __PFX__ussubusq3\n+  __PFX__ussubudq3\n+  __PFX__ussubutq3\n+  __PFX__ussubuha3\n+  __PFX__ussubusa3\n+  __PFX__ussubuda3\n+  __PFX__ussubuta3\n+  __PFX__mulqq3\n+  __PFX__mulhq3\n+  __PFX__mulsq3\n+  __PFX__muldq3\n+  __PFX__multq3\n+  __PFX__muluqq3\n+  __PFX__muluhq3\n+  __PFX__mulusq3\n+  __PFX__muludq3\n+  __PFX__mulutq3\n+  __PFX__mulha3\n+  __PFX__mulsa3\n+  __PFX__mulda3\n+  __PFX__multa3\n+  __PFX__muluha3\n+  __PFX__mulusa3\n+  __PFX__muluda3\n+  __PFX__muluta3\n+  __PFX__ssmulqq3\n+  __PFX__ssmulhq3\n+  __PFX__ssmulsq3\n+  __PFX__ssmuldq3\n+  __PFX__ssmultq3\n+  __PFX__ssmulha3\n+  __PFX__ssmulsa3\n+  __PFX__ssmulda3\n+  __PFX__ssmulta3\n+  __PFX__usmuluqq3\n+  __PFX__usmuluhq3\n+  __PFX__usmulusq3\n+  __PFX__usmuludq3\n+  __PFX__usmulutq3\n+  __PFX__usmuluha3\n+  __PFX__usmulusa3\n+  __PFX__usmuluda3\n+  __PFX__usmuluta3\n+  __PFX__divqq3\n+  __PFX__divhq3\n+  __PFX__divsq3\n+  __PFX__divdq3\n+  __PFX__divtq3\n+  __PFX__divha3\n+  __PFX__divsa3\n+  __PFX__divda3\n+  __PFX__divta3\n+  __PFX__udivuqq3\n+  __PFX__udivuhq3\n+  __PFX__udivusq3\n+  __PFX__udivudq3\n+  __PFX__udivutq3\n+  __PFX__udivuha3\n+  __PFX__udivusa3\n+  __PFX__udivuda3\n+  __PFX__udivuta3\n+  __PFX__ssdivqq3\n+  __PFX__ssdivhq3\n+  __PFX__ssdivsq3\n+  __PFX__ssdivdq3\n+  __PFX__ssdivtq3\n+  __PFX__ssdivha3\n+  __PFX__ssdivsa3\n+  __PFX__ssdivda3\n+  __PFX__ssdivta3\n+  __PFX__usdivuqq3\n+  __PFX__usdivuhq3\n+  __PFX__usdivusq3\n+  __PFX__usdivudq3\n+  __PFX__usdivutq3\n+  __PFX__usdivuha3\n+  __PFX__usdivusa3\n+  __PFX__usdivuda3\n+  __PFX__usdivuta3\n+  __PFX__negqq2\n+  __PFX__neghq2\n+  __PFX__negsq2\n+  __PFX__negdq2\n+  __PFX__negtq2\n+  __PFX__neguqq2\n+  __PFX__neguhq2\n+  __PFX__negusq2\n+  __PFX__negudq2\n+  __PFX__negutq2\n+  __PFX__negha2\n+  __PFX__negsa2\n+  __PFX__negda2\n+  __PFX__negta2\n+  __PFX__neguha2\n+  __PFX__negusa2\n+  __PFX__neguda2\n+  __PFX__neguta2\n+  __PFX__ssnegqq2\n+  __PFX__ssneghq2\n+  __PFX__ssnegsq2\n+  __PFX__ssnegdq2\n+  __PFX__ssnegtq2\n+  __PFX__ssnegha2\n+  __PFX__ssnegsa2\n+  __PFX__ssnegda2\n+  __PFX__ssnegta2\n+  __PFX__usneguqq2\n+  __PFX__usneguhq2\n+  __PFX__usnegusq2\n+  __PFX__usnegudq2\n+  __PFX__usnegutq2\n+  __PFX__usneguha2\n+  __PFX__usnegusa2\n+  __PFX__usneguda2\n+  __PFX__usneguta2\n+  __PFX__ashlqq3\n+  __PFX__ashlhq3\n+  __PFX__ashlsq3\n+  __PFX__ashldq3\n+  __PFX__ashltq3\n+  __PFX__ashluqq3\n+  __PFX__ashluhq3\n+  __PFX__ashlusq3\n+  __PFX__ashludq3\n+  __PFX__ashlutq3\n+  __PFX__ashlha3\n+  __PFX__ashlsa3\n+  __PFX__ashlda3\n+  __PFX__ashlta3\n+  __PFX__ashluha3\n+  __PFX__ashlusa3\n+  __PFX__ashluda3\n+  __PFX__ashluta3\n+  __PFX__ashrqq3\n+  __PFX__ashrhq3\n+  __PFX__ashrsq3\n+  __PFX__ashrdq3\n+  __PFX__ashrtq3\n+  __PFX__ashrha3\n+  __PFX__ashrsa3\n+  __PFX__ashrda3\n+  __PFX__ashrta3\n+  __PFX__lshruqq3\n+  __PFX__lshruhq3\n+  __PFX__lshrusq3\n+  __PFX__lshrudq3\n+  __PFX__lshrutq3\n+  __PFX__lshruha3\n+  __PFX__lshrusa3\n+  __PFX__lshruda3\n+  __PFX__lshruta3\n+  __PFX__ssashlqq3\n+  __PFX__ssashlhq3\n+  __PFX__ssashlsq3\n+  __PFX__ssashldq3\n+  __PFX__ssashltq3\n+  __PFX__ssashlha3\n+  __PFX__ssashlsa3\n+  __PFX__ssashlda3\n+  __PFX__ssashlta3\n+  __PFX__usashluqq3\n+  __PFX__usashluhq3\n+  __PFX__usashlusq3\n+  __PFX__usashludq3\n+  __PFX__usashlutq3\n+  __PFX__usashluha3\n+  __PFX__usashlusa3\n+  __PFX__usashluda3\n+  __PFX__usashluta3\n+  __PFX__cmpqq2\n+  __PFX__cmphq2\n+  __PFX__cmpsq2\n+  __PFX__cmpdq2\n+  __PFX__cmptq2\n+  __PFX__cmpuqq2\n+  __PFX__cmpuhq2\n+  __PFX__cmpusq2\n+  __PFX__cmpudq2\n+  __PFX__cmputq2\n+  __PFX__cmpha2\n+  __PFX__cmpsa2\n+  __PFX__cmpda2\n+  __PFX__cmpta2\n+  __PFX__cmpuha2\n+  __PFX__cmpusa2\n+  __PFX__cmpuda2\n+  __PFX__cmputa2\n+  __PFX__fractqqhq2\n+  __PFX__fractqqsq2\n+  __PFX__fractqqdq2\n+  __PFX__fractqqtq2\n+  __PFX__fractqqha\n+  __PFX__fractqqsa\n+  __PFX__fractqqda\n+  __PFX__fractqqta\n+  __PFX__fractqquqq\n+  __PFX__fractqquhq\n+  __PFX__fractqqusq\n+  __PFX__fractqqudq\n+  __PFX__fractqqutq\n+  __PFX__fractqquha\n+  __PFX__fractqqusa\n+  __PFX__fractqquda\n+  __PFX__fractqquta\n+  __PFX__fractqqqi\n+  __PFX__fractqqhi\n+  __PFX__fractqqsi\n+  __PFX__fractqqdi\n+  __PFX__fractqqti\n+  __PFX__fractqqsf\n+  __PFX__fractqqdf\n+  __PFX__fracthqqq2\n+  __PFX__fracthqsq2\n+  __PFX__fracthqdq2\n+  __PFX__fracthqtq2\n+  __PFX__fracthqha\n+  __PFX__fracthqsa\n+  __PFX__fracthqda\n+  __PFX__fracthqta\n+  __PFX__fracthquqq\n+  __PFX__fracthquhq\n+  __PFX__fracthqusq\n+  __PFX__fracthqudq\n+  __PFX__fracthqutq\n+  __PFX__fracthquha\n+  __PFX__fracthqusa\n+  __PFX__fracthquda\n+  __PFX__fracthquta\n+  __PFX__fracthqqi\n+  __PFX__fracthqhi\n+  __PFX__fracthqsi\n+  __PFX__fracthqdi\n+  __PFX__fracthqti\n+  __PFX__fracthqsf\n+  __PFX__fracthqdf\n+  __PFX__fractsqqq2\n+  __PFX__fractsqhq2\n+  __PFX__fractsqdq2\n+  __PFX__fractsqtq2\n+  __PFX__fractsqha\n+  __PFX__fractsqsa\n+  __PFX__fractsqda\n+  __PFX__fractsqta\n+  __PFX__fractsquqq\n+  __PFX__fractsquhq\n+  __PFX__fractsqusq\n+  __PFX__fractsqudq\n+  __PFX__fractsqutq\n+  __PFX__fractsquha\n+  __PFX__fractsqusa\n+  __PFX__fractsquda\n+  __PFX__fractsquta\n+  __PFX__fractsqqi\n+  __PFX__fractsqhi\n+  __PFX__fractsqsi\n+  __PFX__fractsqdi\n+  __PFX__fractsqti\n+  __PFX__fractsqsf\n+  __PFX__fractsqdf\n+  __PFX__fractdqqq2\n+  __PFX__fractdqhq2\n+  __PFX__fractdqsq2\n+  __PFX__fractdqtq2\n+  __PFX__fractdqha\n+  __PFX__fractdqsa\n+  __PFX__fractdqda\n+  __PFX__fractdqta\n+  __PFX__fractdquqq\n+  __PFX__fractdquhq\n+  __PFX__fractdqusq\n+  __PFX__fractdqudq\n+  __PFX__fractdqutq\n+  __PFX__fractdquha\n+  __PFX__fractdqusa\n+  __PFX__fractdquda\n+  __PFX__fractdquta\n+  __PFX__fractdqqi\n+  __PFX__fractdqhi\n+  __PFX__fractdqsi\n+  __PFX__fractdqdi\n+  __PFX__fractdqti\n+  __PFX__fractdqsf\n+  __PFX__fractdqdf\n+  __PFX__fracttqqq2\n+  __PFX__fracttqhq2\n+  __PFX__fracttqsq2\n+  __PFX__fracttqdq2\n+  __PFX__fracttqha\n+  __PFX__fracttqsa\n+  __PFX__fracttqda\n+  __PFX__fracttqta\n+  __PFX__fracttquqq\n+  __PFX__fracttquhq\n+  __PFX__fracttqusq\n+  __PFX__fracttqudq\n+  __PFX__fracttqutq\n+  __PFX__fracttquha\n+  __PFX__fracttqusa\n+  __PFX__fracttquda\n+  __PFX__fracttquta\n+  __PFX__fracttqqi\n+  __PFX__fracttqhi\n+  __PFX__fracttqsi\n+  __PFX__fracttqdi\n+  __PFX__fracttqti\n+  __PFX__fracttqsf\n+  __PFX__fracttqdf\n+  __PFX__fracthaqq\n+  __PFX__fracthahq\n+  __PFX__fracthasq\n+  __PFX__fracthadq\n+  __PFX__fracthatq\n+  __PFX__fracthasa2\n+  __PFX__fracthada2\n+  __PFX__fracthata2\n+  __PFX__fracthauqq\n+  __PFX__fracthauhq\n+  __PFX__fracthausq\n+  __PFX__fracthaudq\n+  __PFX__fracthautq\n+  __PFX__fracthauha\n+  __PFX__fracthausa\n+  __PFX__fracthauda\n+  __PFX__fracthauta\n+  __PFX__fracthaqi\n+  __PFX__fracthahi\n+  __PFX__fracthasi\n+  __PFX__fracthadi\n+  __PFX__fracthati\n+  __PFX__fracthasf\n+  __PFX__fracthadf\n+  __PFX__fractsaqq\n+  __PFX__fractsahq\n+  __PFX__fractsasq\n+  __PFX__fractsadq\n+  __PFX__fractsatq\n+  __PFX__fractsaha2\n+  __PFX__fractsada2\n+  __PFX__fractsata2\n+  __PFX__fractsauqq\n+  __PFX__fractsauhq\n+  __PFX__fractsausq\n+  __PFX__fractsaudq\n+  __PFX__fractsautq\n+  __PFX__fractsauha\n+  __PFX__fractsausa\n+  __PFX__fractsauda\n+  __PFX__fractsauta\n+  __PFX__fractsaqi\n+  __PFX__fractsahi\n+  __PFX__fractsasi\n+  __PFX__fractsadi\n+  __PFX__fractsati\n+  __PFX__fractsasf\n+  __PFX__fractsadf\n+  __PFX__fractdaqq\n+  __PFX__fractdahq\n+  __PFX__fractdasq\n+  __PFX__fractdadq\n+  __PFX__fractdatq\n+  __PFX__fractdaha2\n+  __PFX__fractdasa2\n+  __PFX__fractdata2\n+  __PFX__fractdauqq\n+  __PFX__fractdauhq\n+  __PFX__fractdausq\n+  __PFX__fractdaudq\n+  __PFX__fractdautq\n+  __PFX__fractdauha\n+  __PFX__fractdausa\n+  __PFX__fractdauda\n+  __PFX__fractdauta\n+  __PFX__fractdaqi\n+  __PFX__fractdahi\n+  __PFX__fractdasi\n+  __PFX__fractdadi\n+  __PFX__fractdati\n+  __PFX__fractdasf\n+  __PFX__fractdadf\n+  __PFX__fracttaqq\n+  __PFX__fracttahq\n+  __PFX__fracttasq\n+  __PFX__fracttadq\n+  __PFX__fracttatq\n+  __PFX__fracttaha2\n+  __PFX__fracttasa2\n+  __PFX__fracttada2\n+  __PFX__fracttauqq\n+  __PFX__fracttauhq\n+  __PFX__fracttausq\n+  __PFX__fracttaudq\n+  __PFX__fracttautq\n+  __PFX__fracttauha\n+  __PFX__fracttausa\n+  __PFX__fracttauda\n+  __PFX__fracttauta\n+  __PFX__fracttaqi\n+  __PFX__fracttahi\n+  __PFX__fracttasi\n+  __PFX__fracttadi\n+  __PFX__fracttati\n+  __PFX__fracttasf\n+  __PFX__fracttadf\n+  __PFX__fractuqqqq\n+  __PFX__fractuqqhq\n+  __PFX__fractuqqsq\n+  __PFX__fractuqqdq\n+  __PFX__fractuqqtq\n+  __PFX__fractuqqha\n+  __PFX__fractuqqsa\n+  __PFX__fractuqqda\n+  __PFX__fractuqqta\n+  __PFX__fractuqquhq2\n+  __PFX__fractuqqusq2\n+  __PFX__fractuqqudq2\n+  __PFX__fractuqqutq2\n+  __PFX__fractuqquha\n+  __PFX__fractuqqusa\n+  __PFX__fractuqquda\n+  __PFX__fractuqquta\n+  __PFX__fractuqqqi\n+  __PFX__fractuqqhi\n+  __PFX__fractuqqsi\n+  __PFX__fractuqqdi\n+  __PFX__fractuqqti\n+  __PFX__fractuqqsf\n+  __PFX__fractuqqdf\n+  __PFX__fractuhqqq\n+  __PFX__fractuhqhq\n+  __PFX__fractuhqsq\n+  __PFX__fractuhqdq\n+  __PFX__fractuhqtq\n+  __PFX__fractuhqha\n+  __PFX__fractuhqsa\n+  __PFX__fractuhqda\n+  __PFX__fractuhqta\n+  __PFX__fractuhquqq2\n+  __PFX__fractuhqusq2\n+  __PFX__fractuhqudq2\n+  __PFX__fractuhqutq2\n+  __PFX__fractuhquha\n+  __PFX__fractuhqusa\n+  __PFX__fractuhquda\n+  __PFX__fractuhquta\n+  __PFX__fractuhqqi\n+  __PFX__fractuhqhi\n+  __PFX__fractuhqsi\n+  __PFX__fractuhqdi\n+  __PFX__fractuhqti\n+  __PFX__fractuhqsf\n+  __PFX__fractuhqdf\n+  __PFX__fractusqqq\n+  __PFX__fractusqhq\n+  __PFX__fractusqsq\n+  __PFX__fractusqdq\n+  __PFX__fractusqtq\n+  __PFX__fractusqha\n+  __PFX__fractusqsa\n+  __PFX__fractusqda\n+  __PFX__fractusqta\n+  __PFX__fractusquqq2\n+  __PFX__fractusquhq2\n+  __PFX__fractusqudq2\n+  __PFX__fractusqutq2\n+  __PFX__fractusquha\n+  __PFX__fractusqusa\n+  __PFX__fractusquda\n+  __PFX__fractusquta\n+  __PFX__fractusqqi\n+  __PFX__fractusqhi\n+  __PFX__fractusqsi\n+  __PFX__fractusqdi\n+  __PFX__fractusqti\n+  __PFX__fractusqsf\n+  __PFX__fractusqdf\n+  __PFX__fractudqqq\n+  __PFX__fractudqhq\n+  __PFX__fractudqsq\n+  __PFX__fractudqdq\n+  __PFX__fractudqtq\n+  __PFX__fractudqha\n+  __PFX__fractudqsa\n+  __PFX__fractudqda\n+  __PFX__fractudqta\n+  __PFX__fractudquqq2\n+  __PFX__fractudquhq2\n+  __PFX__fractudqusq2\n+  __PFX__fractudqutq2\n+  __PFX__fractudquha\n+  __PFX__fractudqusa\n+  __PFX__fractudquda\n+  __PFX__fractudquta\n+  __PFX__fractudqqi\n+  __PFX__fractudqhi\n+  __PFX__fractudqsi\n+  __PFX__fractudqdi\n+  __PFX__fractudqti\n+  __PFX__fractudqsf\n+  __PFX__fractudqdf\n+  __PFX__fractutqqq\n+  __PFX__fractutqhq\n+  __PFX__fractutqsq\n+  __PFX__fractutqdq\n+  __PFX__fractutqtq\n+  __PFX__fractutqha\n+  __PFX__fractutqsa\n+  __PFX__fractutqda\n+  __PFX__fractutqta\n+  __PFX__fractutquqq2\n+  __PFX__fractutquhq2\n+  __PFX__fractutqusq2\n+  __PFX__fractutqudq2\n+  __PFX__fractutquha\n+  __PFX__fractutqusa\n+  __PFX__fractutquda\n+  __PFX__fractutquta\n+  __PFX__fractutqqi\n+  __PFX__fractutqhi\n+  __PFX__fractutqsi\n+  __PFX__fractutqdi\n+  __PFX__fractutqti\n+  __PFX__fractutqsf\n+  __PFX__fractutqdf\n+  __PFX__fractuhaqq\n+  __PFX__fractuhahq\n+  __PFX__fractuhasq\n+  __PFX__fractuhadq\n+  __PFX__fractuhatq\n+  __PFX__fractuhaha\n+  __PFX__fractuhasa\n+  __PFX__fractuhada\n+  __PFX__fractuhata\n+  __PFX__fractuhauqq\n+  __PFX__fractuhauhq\n+  __PFX__fractuhausq\n+  __PFX__fractuhaudq\n+  __PFX__fractuhautq\n+  __PFX__fractuhausa2\n+  __PFX__fractuhauda2\n+  __PFX__fractuhauta2\n+  __PFX__fractuhaqi\n+  __PFX__fractuhahi\n+  __PFX__fractuhasi\n+  __PFX__fractuhadi\n+  __PFX__fractuhati\n+  __PFX__fractuhasf\n+  __PFX__fractuhadf\n+  __PFX__fractusaqq\n+  __PFX__fractusahq\n+  __PFX__fractusasq\n+  __PFX__fractusadq\n+  __PFX__fractusatq\n+  __PFX__fractusaha\n+  __PFX__fractusasa\n+  __PFX__fractusada\n+  __PFX__fractusata\n+  __PFX__fractusauqq\n+  __PFX__fractusauhq\n+  __PFX__fractusausq\n+  __PFX__fractusaudq\n+  __PFX__fractusautq\n+  __PFX__fractusauha2\n+  __PFX__fractusauda2\n+  __PFX__fractusauta2\n+  __PFX__fractusaqi\n+  __PFX__fractusahi\n+  __PFX__fractusasi\n+  __PFX__fractusadi\n+  __PFX__fractusati\n+  __PFX__fractusasf\n+  __PFX__fractusadf\n+  __PFX__fractudaqq\n+  __PFX__fractudahq\n+  __PFX__fractudasq\n+  __PFX__fractudadq\n+  __PFX__fractudatq\n+  __PFX__fractudaha\n+  __PFX__fractudasa\n+  __PFX__fractudada\n+  __PFX__fractudata\n+  __PFX__fractudauqq\n+  __PFX__fractudauhq\n+  __PFX__fractudausq\n+  __PFX__fractudaudq\n+  __PFX__fractudautq\n+  __PFX__fractudauha2\n+  __PFX__fractudausa2\n+  __PFX__fractudauta2\n+  __PFX__fractudaqi\n+  __PFX__fractudahi\n+  __PFX__fractudasi\n+  __PFX__fractudadi\n+  __PFX__fractudati\n+  __PFX__fractudasf\n+  __PFX__fractudadf\n+  __PFX__fractutaqq\n+  __PFX__fractutahq\n+  __PFX__fractutasq\n+  __PFX__fractutadq\n+  __PFX__fractutatq\n+  __PFX__fractutaha\n+  __PFX__fractutasa\n+  __PFX__fractutada\n+  __PFX__fractutata\n+  __PFX__fractutauqq\n+  __PFX__fractutauhq\n+  __PFX__fractutausq\n+  __PFX__fractutaudq\n+  __PFX__fractutautq\n+  __PFX__fractutauha2\n+  __PFX__fractutausa2\n+  __PFX__fractutauda2\n+  __PFX__fractutaqi\n+  __PFX__fractutahi\n+  __PFX__fractutasi\n+  __PFX__fractutadi\n+  __PFX__fractutati\n+  __PFX__fractutasf\n+  __PFX__fractutadf\n+  __PFX__fractqiqq\n+  __PFX__fractqihq\n+  __PFX__fractqisq\n+  __PFX__fractqidq\n+  __PFX__fractqitq\n+  __PFX__fractqiha\n+  __PFX__fractqisa\n+  __PFX__fractqida\n+  __PFX__fractqita\n+  __PFX__fractqiuqq\n+  __PFX__fractqiuhq\n+  __PFX__fractqiusq\n+  __PFX__fractqiudq\n+  __PFX__fractqiutq\n+  __PFX__fractqiuha\n+  __PFX__fractqiusa\n+  __PFX__fractqiuda\n+  __PFX__fractqiuta\n+  __PFX__fracthiqq\n+  __PFX__fracthihq\n+  __PFX__fracthisq\n+  __PFX__fracthidq\n+  __PFX__fracthitq\n+  __PFX__fracthiha\n+  __PFX__fracthisa\n+  __PFX__fracthida\n+  __PFX__fracthita\n+  __PFX__fracthiuqq\n+  __PFX__fracthiuhq\n+  __PFX__fracthiusq\n+  __PFX__fracthiudq\n+  __PFX__fracthiutq\n+  __PFX__fracthiuha\n+  __PFX__fracthiusa\n+  __PFX__fracthiuda\n+  __PFX__fracthiuta\n+  __PFX__fractsiqq\n+  __PFX__fractsihq\n+  __PFX__fractsisq\n+  __PFX__fractsidq\n+  __PFX__fractsitq\n+  __PFX__fractsiha\n+  __PFX__fractsisa\n+  __PFX__fractsida\n+  __PFX__fractsita\n+  __PFX__fractsiuqq\n+  __PFX__fractsiuhq\n+  __PFX__fractsiusq\n+  __PFX__fractsiudq\n+  __PFX__fractsiutq\n+  __PFX__fractsiuha\n+  __PFX__fractsiusa\n+  __PFX__fractsiuda\n+  __PFX__fractsiuta\n+  __PFX__fractdiqq\n+  __PFX__fractdihq\n+  __PFX__fractdisq\n+  __PFX__fractdidq\n+  __PFX__fractditq\n+  __PFX__fractdiha\n+  __PFX__fractdisa\n+  __PFX__fractdida\n+  __PFX__fractdita\n+  __PFX__fractdiuqq\n+  __PFX__fractdiuhq\n+  __PFX__fractdiusq\n+  __PFX__fractdiudq\n+  __PFX__fractdiutq\n+  __PFX__fractdiuha\n+  __PFX__fractdiusa\n+  __PFX__fractdiuda\n+  __PFX__fractdiuta\n+  __PFX__fracttiqq\n+  __PFX__fracttihq\n+  __PFX__fracttisq\n+  __PFX__fracttidq\n+  __PFX__fracttitq\n+  __PFX__fracttiha\n+  __PFX__fracttisa\n+  __PFX__fracttida\n+  __PFX__fracttita\n+  __PFX__fracttiuqq\n+  __PFX__fracttiuhq\n+  __PFX__fracttiusq\n+  __PFX__fracttiudq\n+  __PFX__fracttiutq\n+  __PFX__fracttiuha\n+  __PFX__fracttiusa\n+  __PFX__fracttiuda\n+  __PFX__fracttiuta\n+  __PFX__fractsfqq\n+  __PFX__fractsfhq\n+  __PFX__fractsfsq\n+  __PFX__fractsfdq\n+  __PFX__fractsftq\n+  __PFX__fractsfha\n+  __PFX__fractsfsa\n+  __PFX__fractsfda\n+  __PFX__fractsfta\n+  __PFX__fractsfuqq\n+  __PFX__fractsfuhq\n+  __PFX__fractsfusq\n+  __PFX__fractsfudq\n+  __PFX__fractsfutq\n+  __PFX__fractsfuha\n+  __PFX__fractsfusa\n+  __PFX__fractsfuda\n+  __PFX__fractsfuta\n+  __PFX__fractdfqq\n+  __PFX__fractdfhq\n+  __PFX__fractdfsq\n+  __PFX__fractdfdq\n+  __PFX__fractdftq\n+  __PFX__fractdfha\n+  __PFX__fractdfsa\n+  __PFX__fractdfda\n+  __PFX__fractdfta\n+  __PFX__fractdfuqq\n+  __PFX__fractdfuhq\n+  __PFX__fractdfusq\n+  __PFX__fractdfudq\n+  __PFX__fractdfutq\n+  __PFX__fractdfuha\n+  __PFX__fractdfusa\n+  __PFX__fractdfuda\n+  __PFX__fractdfuta\n+  __PFX__satfractqqhq2\n+  __PFX__satfractqqsq2\n+  __PFX__satfractqqdq2\n+  __PFX__satfractqqtq2\n+  __PFX__satfractqqha\n+  __PFX__satfractqqsa\n+  __PFX__satfractqqda\n+  __PFX__satfractqqta\n+  __PFX__satfractqquqq\n+  __PFX__satfractqquhq\n+  __PFX__satfractqqusq\n+  __PFX__satfractqqudq\n+  __PFX__satfractqqutq\n+  __PFX__satfractqquha\n+  __PFX__satfractqqusa\n+  __PFX__satfractqquda\n+  __PFX__satfractqquta\n+  __PFX__satfracthqqq2\n+  __PFX__satfracthqsq2\n+  __PFX__satfracthqdq2\n+  __PFX__satfracthqtq2\n+  __PFX__satfracthqha\n+  __PFX__satfracthqsa\n+  __PFX__satfracthqda\n+  __PFX__satfracthqta\n+  __PFX__satfracthquqq\n+  __PFX__satfracthquhq\n+  __PFX__satfracthqusq\n+  __PFX__satfracthqudq\n+  __PFX__satfracthqutq\n+  __PFX__satfracthquha\n+  __PFX__satfracthqusa\n+  __PFX__satfracthquda\n+  __PFX__satfracthquta\n+  __PFX__satfractsqqq2\n+  __PFX__satfractsqhq2\n+  __PFX__satfractsqdq2\n+  __PFX__satfractsqtq2\n+  __PFX__satfractsqha\n+  __PFX__satfractsqsa\n+  __PFX__satfractsqda\n+  __PFX__satfractsqta\n+  __PFX__satfractsquqq\n+  __PFX__satfractsquhq\n+  __PFX__satfractsqusq\n+  __PFX__satfractsqudq\n+  __PFX__satfractsqutq\n+  __PFX__satfractsquha\n+  __PFX__satfractsqusa\n+  __PFX__satfractsquda\n+  __PFX__satfractsquta\n+  __PFX__satfractdqqq2\n+  __PFX__satfractdqhq2\n+  __PFX__satfractdqsq2\n+  __PFX__satfractdqtq2\n+  __PFX__satfractdqha\n+  __PFX__satfractdqsa\n+  __PFX__satfractdqda\n+  __PFX__satfractdqta\n+  __PFX__satfractdquqq\n+  __PFX__satfractdquhq\n+  __PFX__satfractdqusq\n+  __PFX__satfractdqudq\n+  __PFX__satfractdqutq\n+  __PFX__satfractdquha\n+  __PFX__satfractdqusa\n+  __PFX__satfractdquda\n+  __PFX__satfractdquta\n+  __PFX__satfracttqqq2\n+  __PFX__satfracttqhq2\n+  __PFX__satfracttqsq2\n+  __PFX__satfracttqdq2\n+  __PFX__satfracttqha\n+  __PFX__satfracttqsa\n+  __PFX__satfracttqda\n+  __PFX__satfracttqta\n+  __PFX__satfracttquqq\n+  __PFX__satfracttquhq\n+  __PFX__satfracttqusq\n+  __PFX__satfracttqudq\n+  __PFX__satfracttqutq\n+  __PFX__satfracttquha\n+  __PFX__satfracttqusa\n+  __PFX__satfracttquda\n+  __PFX__satfracttquta\n+  __PFX__satfracthaqq\n+  __PFX__satfracthahq\n+  __PFX__satfracthasq\n+  __PFX__satfracthadq\n+  __PFX__satfracthatq\n+  __PFX__satfracthasa2\n+  __PFX__satfracthada2\n+  __PFX__satfracthata2\n+  __PFX__satfracthauqq\n+  __PFX__satfracthauhq\n+  __PFX__satfracthausq\n+  __PFX__satfracthaudq\n+  __PFX__satfracthautq\n+  __PFX__satfracthauha\n+  __PFX__satfracthausa\n+  __PFX__satfracthauda\n+  __PFX__satfracthauta\n+  __PFX__satfractsaqq\n+  __PFX__satfractsahq\n+  __PFX__satfractsasq\n+  __PFX__satfractsadq\n+  __PFX__satfractsatq\n+  __PFX__satfractsaha2\n+  __PFX__satfractsada2\n+  __PFX__satfractsata2\n+  __PFX__satfractsauqq\n+  __PFX__satfractsauhq\n+  __PFX__satfractsausq\n+  __PFX__satfractsaudq\n+  __PFX__satfractsautq\n+  __PFX__satfractsauha\n+  __PFX__satfractsausa\n+  __PFX__satfractsauda\n+  __PFX__satfractsauta\n+  __PFX__satfractdaqq\n+  __PFX__satfractdahq\n+  __PFX__satfractdasq\n+  __PFX__satfractdadq\n+  __PFX__satfractdatq\n+  __PFX__satfractdaha2\n+  __PFX__satfractdasa2\n+  __PFX__satfractdata2\n+  __PFX__satfractdauqq\n+  __PFX__satfractdauhq\n+  __PFX__satfractdausq\n+  __PFX__satfractdaudq\n+  __PFX__satfractdautq\n+  __PFX__satfractdauha\n+  __PFX__satfractdausa\n+  __PFX__satfractdauda\n+  __PFX__satfractdauta\n+  __PFX__satfracttaqq\n+  __PFX__satfracttahq\n+  __PFX__satfracttasq\n+  __PFX__satfracttadq\n+  __PFX__satfracttatq\n+  __PFX__satfracttaha2\n+  __PFX__satfracttasa2\n+  __PFX__satfracttada2\n+  __PFX__satfracttauqq\n+  __PFX__satfracttauhq\n+  __PFX__satfracttausq\n+  __PFX__satfracttaudq\n+  __PFX__satfracttautq\n+  __PFX__satfracttauha\n+  __PFX__satfracttausa\n+  __PFX__satfracttauda\n+  __PFX__satfracttauta\n+  __PFX__satfractuqqqq\n+  __PFX__satfractuqqhq\n+  __PFX__satfractuqqsq\n+  __PFX__satfractuqqdq\n+  __PFX__satfractuqqtq\n+  __PFX__satfractuqqha\n+  __PFX__satfractuqqsa\n+  __PFX__satfractuqqda\n+  __PFX__satfractuqqta\n+  __PFX__satfractuqquhq2\n+  __PFX__satfractuqqusq2\n+  __PFX__satfractuqqudq2\n+  __PFX__satfractuqqutq2\n+  __PFX__satfractuqquha\n+  __PFX__satfractuqqusa\n+  __PFX__satfractuqquda\n+  __PFX__satfractuqquta\n+  __PFX__satfractuhqqq\n+  __PFX__satfractuhqhq\n+  __PFX__satfractuhqsq\n+  __PFX__satfractuhqdq\n+  __PFX__satfractuhqtq\n+  __PFX__satfractuhqha\n+  __PFX__satfractuhqsa\n+  __PFX__satfractuhqda\n+  __PFX__satfractuhqta\n+  __PFX__satfractuhquqq2\n+  __PFX__satfractuhqusq2\n+  __PFX__satfractuhqudq2\n+  __PFX__satfractuhqutq2\n+  __PFX__satfractuhquha\n+  __PFX__satfractuhqusa\n+  __PFX__satfractuhquda\n+  __PFX__satfractuhquta\n+  __PFX__satfractusqqq\n+  __PFX__satfractusqhq\n+  __PFX__satfractusqsq\n+  __PFX__satfractusqdq\n+  __PFX__satfractusqtq\n+  __PFX__satfractusqha\n+  __PFX__satfractusqsa\n+  __PFX__satfractusqda\n+  __PFX__satfractusqta\n+  __PFX__satfractusquqq2\n+  __PFX__satfractusquhq2\n+  __PFX__satfractusqudq2\n+  __PFX__satfractusqutq2\n+  __PFX__satfractusquha\n+  __PFX__satfractusqusa\n+  __PFX__satfractusquda\n+  __PFX__satfractusquta\n+  __PFX__satfractudqqq\n+  __PFX__satfractudqhq\n+  __PFX__satfractudqsq\n+  __PFX__satfractudqdq\n+  __PFX__satfractudqtq\n+  __PFX__satfractudqha\n+  __PFX__satfractudqsa\n+  __PFX__satfractudqda\n+  __PFX__satfractudqta\n+  __PFX__satfractudquqq2\n+  __PFX__satfractudquhq2\n+  __PFX__satfractudqusq2\n+  __PFX__satfractudqutq2\n+  __PFX__satfractudquha\n+  __PFX__satfractudqusa\n+  __PFX__satfractudquda\n+  __PFX__satfractudquta\n+  __PFX__satfractutqqq\n+  __PFX__satfractutqhq\n+  __PFX__satfractutqsq\n+  __PFX__satfractutqdq\n+  __PFX__satfractutqtq\n+  __PFX__satfractutqha\n+  __PFX__satfractutqsa\n+  __PFX__satfractutqda\n+  __PFX__satfractutqta\n+  __PFX__satfractutquqq2\n+  __PFX__satfractutquhq2\n+  __PFX__satfractutqusq2\n+  __PFX__satfractutqudq2\n+  __PFX__satfractutquha\n+  __PFX__satfractutqusa\n+  __PFX__satfractutquda\n+  __PFX__satfractutquta\n+  __PFX__satfractuhaqq\n+  __PFX__satfractuhahq\n+  __PFX__satfractuhasq\n+  __PFX__satfractuhadq\n+  __PFX__satfractuhatq\n+  __PFX__satfractuhaha\n+  __PFX__satfractuhasa\n+  __PFX__satfractuhada\n+  __PFX__satfractuhata\n+  __PFX__satfractuhauqq\n+  __PFX__satfractuhauhq\n+  __PFX__satfractuhausq\n+  __PFX__satfractuhaudq\n+  __PFX__satfractuhautq\n+  __PFX__satfractuhausa2\n+  __PFX__satfractuhauda2\n+  __PFX__satfractuhauta2\n+  __PFX__satfractusaqq\n+  __PFX__satfractusahq\n+  __PFX__satfractusasq\n+  __PFX__satfractusadq\n+  __PFX__satfractusatq\n+  __PFX__satfractusaha\n+  __PFX__satfractusasa\n+  __PFX__satfractusada\n+  __PFX__satfractusata\n+  __PFX__satfractusauqq\n+  __PFX__satfractusauhq\n+  __PFX__satfractusausq\n+  __PFX__satfractusaudq\n+  __PFX__satfractusautq\n+  __PFX__satfractusauha2\n+  __PFX__satfractusauda2\n+  __PFX__satfractusauta2\n+  __PFX__satfractudaqq\n+  __PFX__satfractudahq\n+  __PFX__satfractudasq\n+  __PFX__satfractudadq\n+  __PFX__satfractudatq\n+  __PFX__satfractudaha\n+  __PFX__satfractudasa\n+  __PFX__satfractudada\n+  __PFX__satfractudata\n+  __PFX__satfractudauqq\n+  __PFX__satfractudauhq\n+  __PFX__satfractudausq\n+  __PFX__satfractudaudq\n+  __PFX__satfractudautq\n+  __PFX__satfractudauha2\n+  __PFX__satfractudausa2\n+  __PFX__satfractudauta2\n+  __PFX__satfractutaqq\n+  __PFX__satfractutahq\n+  __PFX__satfractutasq\n+  __PFX__satfractutadq\n+  __PFX__satfractutatq\n+  __PFX__satfractutaha\n+  __PFX__satfractutasa\n+  __PFX__satfractutada\n+  __PFX__satfractutata\n+  __PFX__satfractutauqq\n+  __PFX__satfractutauhq\n+  __PFX__satfractutausq\n+  __PFX__satfractutaudq\n+  __PFX__satfractutautq\n+  __PFX__satfractutauha2\n+  __PFX__satfractutausa2\n+  __PFX__satfractutauda2\n+  __PFX__satfractqiqq\n+  __PFX__satfractqihq\n+  __PFX__satfractqisq\n+  __PFX__satfractqidq\n+  __PFX__satfractqitq\n+  __PFX__satfractqiha\n+  __PFX__satfractqisa\n+  __PFX__satfractqida\n+  __PFX__satfractqita\n+  __PFX__satfractqiuqq\n+  __PFX__satfractqiuhq\n+  __PFX__satfractqiusq\n+  __PFX__satfractqiudq\n+  __PFX__satfractqiutq\n+  __PFX__satfractqiuha\n+  __PFX__satfractqiusa\n+  __PFX__satfractqiuda\n+  __PFX__satfractqiuta\n+  __PFX__satfracthiqq\n+  __PFX__satfracthihq\n+  __PFX__satfracthisq\n+  __PFX__satfracthidq\n+  __PFX__satfracthitq\n+  __PFX__satfracthiha\n+  __PFX__satfracthisa\n+  __PFX__satfracthida\n+  __PFX__satfracthita\n+  __PFX__satfracthiuqq\n+  __PFX__satfracthiuhq\n+  __PFX__satfracthiusq\n+  __PFX__satfracthiudq\n+  __PFX__satfracthiutq\n+  __PFX__satfracthiuha\n+  __PFX__satfracthiusa\n+  __PFX__satfracthiuda\n+  __PFX__satfracthiuta\n+  __PFX__satfractsiqq\n+  __PFX__satfractsihq\n+  __PFX__satfractsisq\n+  __PFX__satfractsidq\n+  __PFX__satfractsitq\n+  __PFX__satfractsiha\n+  __PFX__satfractsisa\n+  __PFX__satfractsida\n+  __PFX__satfractsita\n+  __PFX__satfractsiuqq\n+  __PFX__satfractsiuhq\n+  __PFX__satfractsiusq\n+  __PFX__satfractsiudq\n+  __PFX__satfractsiutq\n+  __PFX__satfractsiuha\n+  __PFX__satfractsiusa\n+  __PFX__satfractsiuda\n+  __PFX__satfractsiuta\n+  __PFX__satfractdiqq\n+  __PFX__satfractdihq\n+  __PFX__satfractdisq\n+  __PFX__satfractdidq\n+  __PFX__satfractditq\n+  __PFX__satfractdiha\n+  __PFX__satfractdisa\n+  __PFX__satfractdida\n+  __PFX__satfractdita\n+  __PFX__satfractdiuqq\n+  __PFX__satfractdiuhq\n+  __PFX__satfractdiusq\n+  __PFX__satfractdiudq\n+  __PFX__satfractdiutq\n+  __PFX__satfractdiuha\n+  __PFX__satfractdiusa\n+  __PFX__satfractdiuda\n+  __PFX__satfractdiuta\n+  __PFX__satfracttiqq\n+  __PFX__satfracttihq\n+  __PFX__satfracttisq\n+  __PFX__satfracttidq\n+  __PFX__satfracttitq\n+  __PFX__satfracttiha\n+  __PFX__satfracttisa\n+  __PFX__satfracttida\n+  __PFX__satfracttita\n+  __PFX__satfracttiuqq\n+  __PFX__satfracttiuhq\n+  __PFX__satfracttiusq\n+  __PFX__satfracttiudq\n+  __PFX__satfracttiutq\n+  __PFX__satfracttiuha\n+  __PFX__satfracttiusa\n+  __PFX__satfracttiuda\n+  __PFX__satfracttiuta\n+  __PFX__satfractsfqq\n+  __PFX__satfractsfhq\n+  __PFX__satfractsfsq\n+  __PFX__satfractsfdq\n+  __PFX__satfractsftq\n+  __PFX__satfractsfha\n+  __PFX__satfractsfsa\n+  __PFX__satfractsfda\n+  __PFX__satfractsfta\n+  __PFX__satfractsfuqq\n+  __PFX__satfractsfuhq\n+  __PFX__satfractsfusq\n+  __PFX__satfractsfudq\n+  __PFX__satfractsfutq\n+  __PFX__satfractsfuha\n+  __PFX__satfractsfusa\n+  __PFX__satfractsfuda\n+  __PFX__satfractsfuta\n+  __PFX__satfractdfqq\n+  __PFX__satfractdfhq\n+  __PFX__satfractdfsq\n+  __PFX__satfractdfdq\n+  __PFX__satfractdftq\n+  __PFX__satfractdfha\n+  __PFX__satfractdfsa\n+  __PFX__satfractdfda\n+  __PFX__satfractdfta\n+  __PFX__satfractdfuqq\n+  __PFX__satfractdfuhq\n+  __PFX__satfractdfusq\n+  __PFX__satfractdfudq\n+  __PFX__satfractdfutq\n+  __PFX__satfractdfuha\n+  __PFX__satfractdfusa\n+  __PFX__satfractdfuda\n+  __PFX__satfractdfuta\n+  __PFX__fractunsqqqi\n+  __PFX__fractunsqqhi\n+  __PFX__fractunsqqsi\n+  __PFX__fractunsqqdi\n+  __PFX__fractunsqqti\n+  __PFX__fractunshqqi\n+  __PFX__fractunshqhi\n+  __PFX__fractunshqsi\n+  __PFX__fractunshqdi\n+  __PFX__fractunshqti\n+  __PFX__fractunssqqi\n+  __PFX__fractunssqhi\n+  __PFX__fractunssqsi\n+  __PFX__fractunssqdi\n+  __PFX__fractunssqti\n+  __PFX__fractunsdqqi\n+  __PFX__fractunsdqhi\n+  __PFX__fractunsdqsi\n+  __PFX__fractunsdqdi\n+  __PFX__fractunsdqti\n+  __PFX__fractunstqqi\n+  __PFX__fractunstqhi\n+  __PFX__fractunstqsi\n+  __PFX__fractunstqdi\n+  __PFX__fractunstqti\n+  __PFX__fractunshaqi\n+  __PFX__fractunshahi\n+  __PFX__fractunshasi\n+  __PFX__fractunshadi\n+  __PFX__fractunshati\n+  __PFX__fractunssaqi\n+  __PFX__fractunssahi\n+  __PFX__fractunssasi\n+  __PFX__fractunssadi\n+  __PFX__fractunssati\n+  __PFX__fractunsdaqi\n+  __PFX__fractunsdahi\n+  __PFX__fractunsdasi\n+  __PFX__fractunsdadi\n+  __PFX__fractunsdati\n+  __PFX__fractunstaqi\n+  __PFX__fractunstahi\n+  __PFX__fractunstasi\n+  __PFX__fractunstadi\n+  __PFX__fractunstati\n+  __PFX__fractunsuqqqi\n+  __PFX__fractunsuqqhi\n+  __PFX__fractunsuqqsi\n+  __PFX__fractunsuqqdi\n+  __PFX__fractunsuqqti\n+  __PFX__fractunsuhqqi\n+  __PFX__fractunsuhqhi\n+  __PFX__fractunsuhqsi\n+  __PFX__fractunsuhqdi\n+  __PFX__fractunsuhqti\n+  __PFX__fractunsusqqi\n+  __PFX__fractunsusqhi\n+  __PFX__fractunsusqsi\n+  __PFX__fractunsusqdi\n+  __PFX__fractunsusqti\n+  __PFX__fractunsudqqi\n+  __PFX__fractunsudqhi\n+  __PFX__fractunsudqsi\n+  __PFX__fractunsudqdi\n+  __PFX__fractunsudqti\n+  __PFX__fractunsutqqi\n+  __PFX__fractunsutqhi\n+  __PFX__fractunsutqsi\n+  __PFX__fractunsutqdi\n+  __PFX__fractunsutqti\n+  __PFX__fractunsuhaqi\n+  __PFX__fractunsuhahi\n+  __PFX__fractunsuhasi\n+  __PFX__fractunsuhadi\n+  __PFX__fractunsuhati\n+  __PFX__fractunsusaqi\n+  __PFX__fractunsusahi\n+  __PFX__fractunsusasi\n+  __PFX__fractunsusadi\n+  __PFX__fractunsusati\n+  __PFX__fractunsudaqi\n+  __PFX__fractunsudahi\n+  __PFX__fractunsudasi\n+  __PFX__fractunsudadi\n+  __PFX__fractunsudati\n+  __PFX__fractunsutaqi\n+  __PFX__fractunsutahi\n+  __PFX__fractunsutasi\n+  __PFX__fractunsutadi\n+  __PFX__fractunsutati\n+  __PFX__fractunsqiqq\n+  __PFX__fractunsqihq\n+  __PFX__fractunsqisq\n+  __PFX__fractunsqidq\n+  __PFX__fractunsqitq\n+  __PFX__fractunsqiha\n+  __PFX__fractunsqisa\n+  __PFX__fractunsqida\n+  __PFX__fractunsqita\n+  __PFX__fractunsqiuqq\n+  __PFX__fractunsqiuhq\n+  __PFX__fractunsqiusq\n+  __PFX__fractunsqiudq\n+  __PFX__fractunsqiutq\n+  __PFX__fractunsqiuha\n+  __PFX__fractunsqiusa\n+  __PFX__fractunsqiuda\n+  __PFX__fractunsqiuta\n+  __PFX__fractunshiqq\n+  __PFX__fractunshihq\n+  __PFX__fractunshisq\n+  __PFX__fractunshidq\n+  __PFX__fractunshitq\n+  __PFX__fractunshiha\n+  __PFX__fractunshisa\n+  __PFX__fractunshida\n+  __PFX__fractunshita\n+  __PFX__fractunshiuqq\n+  __PFX__fractunshiuhq\n+  __PFX__fractunshiusq\n+  __PFX__fractunshiudq\n+  __PFX__fractunshiutq\n+  __PFX__fractunshiuha\n+  __PFX__fractunshiusa\n+  __PFX__fractunshiuda\n+  __PFX__fractunshiuta\n+  __PFX__fractunssiqq\n+  __PFX__fractunssihq\n+  __PFX__fractunssisq\n+  __PFX__fractunssidq\n+  __PFX__fractunssitq\n+  __PFX__fractunssiha\n+  __PFX__fractunssisa\n+  __PFX__fractunssida\n+  __PFX__fractunssita\n+  __PFX__fractunssiuqq\n+  __PFX__fractunssiuhq\n+  __PFX__fractunssiusq\n+  __PFX__fractunssiudq\n+  __PFX__fractunssiutq\n+  __PFX__fractunssiuha\n+  __PFX__fractunssiusa\n+  __PFX__fractunssiuda\n+  __PFX__fractunssiuta\n+  __PFX__fractunsdiqq\n+  __PFX__fractunsdihq\n+  __PFX__fractunsdisq\n+  __PFX__fractunsdidq\n+  __PFX__fractunsditq\n+  __PFX__fractunsdiha\n+  __PFX__fractunsdisa\n+  __PFX__fractunsdida\n+  __PFX__fractunsdita\n+  __PFX__fractunsdiuqq\n+  __PFX__fractunsdiuhq\n+  __PFX__fractunsdiusq\n+  __PFX__fractunsdiudq\n+  __PFX__fractunsdiutq\n+  __PFX__fractunsdiuha\n+  __PFX__fractunsdiusa\n+  __PFX__fractunsdiuda\n+  __PFX__fractunsdiuta\n+  __PFX__fractunstiqq\n+  __PFX__fractunstihq\n+  __PFX__fractunstisq\n+  __PFX__fractunstidq\n+  __PFX__fractunstitq\n+  __PFX__fractunstiha\n+  __PFX__fractunstisa\n+  __PFX__fractunstida\n+  __PFX__fractunstita\n+  __PFX__fractunstiuqq\n+  __PFX__fractunstiuhq\n+  __PFX__fractunstiusq\n+  __PFX__fractunstiudq\n+  __PFX__fractunstiutq\n+  __PFX__fractunstiuha\n+  __PFX__fractunstiusa\n+  __PFX__fractunstiuda\n+  __PFX__fractunstiuta\n+  __PFX__satfractunsqiqq\n+  __PFX__satfractunsqihq\n+  __PFX__satfractunsqisq\n+  __PFX__satfractunsqidq\n+  __PFX__satfractunsqitq\n+  __PFX__satfractunsqiha\n+  __PFX__satfractunsqisa\n+  __PFX__satfractunsqida\n+  __PFX__satfractunsqita\n+  __PFX__satfractunsqiuqq\n+  __PFX__satfractunsqiuhq\n+  __PFX__satfractunsqiusq\n+  __PFX__satfractunsqiudq\n+  __PFX__satfractunsqiutq\n+  __PFX__satfractunsqiuha\n+  __PFX__satfractunsqiusa\n+  __PFX__satfractunsqiuda\n+  __PFX__satfractunsqiuta\n+  __PFX__satfractunshiqq\n+  __PFX__satfractunshihq\n+  __PFX__satfractunshisq\n+  __PFX__satfractunshidq\n+  __PFX__satfractunshitq\n+  __PFX__satfractunshiha\n+  __PFX__satfractunshisa\n+  __PFX__satfractunshida\n+  __PFX__satfractunshita\n+  __PFX__satfractunshiuqq\n+  __PFX__satfractunshiuhq\n+  __PFX__satfractunshiusq\n+  __PFX__satfractunshiudq\n+  __PFX__satfractunshiutq\n+  __PFX__satfractunshiuha\n+  __PFX__satfractunshiusa\n+  __PFX__satfractunshiuda\n+  __PFX__satfractunshiuta\n+  __PFX__satfractunssiqq\n+  __PFX__satfractunssihq\n+  __PFX__satfractunssisq\n+  __PFX__satfractunssidq\n+  __PFX__satfractunssitq\n+  __PFX__satfractunssiha\n+  __PFX__satfractunssisa\n+  __PFX__satfractunssida\n+  __PFX__satfractunssita\n+  __PFX__satfractunssiuqq\n+  __PFX__satfractunssiuhq\n+  __PFX__satfractunssiusq\n+  __PFX__satfractunssiudq\n+  __PFX__satfractunssiutq\n+  __PFX__satfractunssiuha\n+  __PFX__satfractunssiusa\n+  __PFX__satfractunssiuda\n+  __PFX__satfractunssiuta\n+  __PFX__satfractunsdiqq\n+  __PFX__satfractunsdihq\n+  __PFX__satfractunsdisq\n+  __PFX__satfractunsdidq\n+  __PFX__satfractunsditq\n+  __PFX__satfractunsdiha\n+  __PFX__satfractunsdisa\n+  __PFX__satfractunsdida\n+  __PFX__satfractunsdita\n+  __PFX__satfractunsdiuqq\n+  __PFX__satfractunsdiuhq\n+  __PFX__satfractunsdiusq\n+  __PFX__satfractunsdiudq\n+  __PFX__satfractunsdiutq\n+  __PFX__satfractunsdiuha\n+  __PFX__satfractunsdiusa\n+  __PFX__satfractunsdiuda\n+  __PFX__satfractunsdiuta\n+  __PFX__satfractunstiqq\n+  __PFX__satfractunstihq\n+  __PFX__satfractunstisq\n+  __PFX__satfractunstidq\n+  __PFX__satfractunstitq\n+  __PFX__satfractunstiha\n+  __PFX__satfractunstisa\n+  __PFX__satfractunstida\n+  __PFX__satfractunstita\n+  __PFX__satfractunstiuqq\n+  __PFX__satfractunstiuhq\n+  __PFX__satfractunstiusq\n+  __PFX__satfractunstiudq\n+  __PFX__satfractunstiutq\n+  __PFX__satfractunstiuha\n+  __PFX__satfractunstiusa\n+  __PFX__satfractunstiuda\n+  __PFX__satfractunstiuta\n+}\n+\n+%inherit GCC_4.4.0 GCC_4.3.0\n+GCC_4.4.0 {\n+  __sync_fetch_and_add_1\n+  __sync_fetch_and_sub_1\n+  __sync_fetch_and_or_1\n+  __sync_fetch_and_and_1\n+  __sync_fetch_and_xor_1\n+  __sync_fetch_and_nand_1\n+  __sync_add_and_fetch_1\n+  __sync_sub_and_fetch_1\n+  __sync_or_and_fetch_1\n+  __sync_and_and_fetch_1\n+  __sync_xor_and_fetch_1\n+  __sync_nand_and_fetch_1\n+  __sync_bool_compare_and_swap_1\n+  __sync_val_compare_and_swap_1\n+  __sync_lock_test_and_set_1\n+\n+  __sync_fetch_and_add_2\n+  __sync_fetch_and_sub_2\n+  __sync_fetch_and_or_2\n+  __sync_fetch_and_and_2\n+  __sync_fetch_and_xor_2\n+  __sync_fetch_and_nand_2\n+  __sync_add_and_fetch_2\n+  __sync_sub_and_fetch_2\n+  __sync_or_and_fetch_2\n+  __sync_and_and_fetch_2\n+  __sync_xor_and_fetch_2\n+  __sync_nand_and_fetch_2\n+  __sync_bool_compare_and_swap_2\n+  __sync_val_compare_and_swap_2\n+  __sync_lock_test_and_set_2\n+\n+  __sync_fetch_and_add_4\n+  __sync_fetch_and_sub_4\n+  __sync_fetch_and_or_4\n+  __sync_fetch_and_and_4\n+  __sync_fetch_and_xor_4\n+  __sync_fetch_and_nand_4\n+  __sync_add_and_fetch_4\n+  __sync_sub_and_fetch_4\n+  __sync_or_and_fetch_4\n+  __sync_and_and_fetch_4\n+  __sync_xor_and_fetch_4\n+  __sync_nand_and_fetch_4\n+  __sync_bool_compare_and_swap_4\n+  __sync_val_compare_and_swap_4\n+  __sync_lock_test_and_set_4\n+\n+  __sync_fetch_and_add_8\n+  __sync_fetch_and_sub_8\n+  __sync_fetch_and_or_8\n+  __sync_fetch_and_and_8\n+  __sync_fetch_and_xor_8\n+  __sync_fetch_and_nand_8\n+  __sync_add_and_fetch_8\n+  __sync_sub_and_fetch_8\n+  __sync_or_and_fetch_8\n+  __sync_and_and_fetch_8\n+  __sync_xor_and_fetch_8\n+  __sync_nand_and_fetch_8\n+  __sync_bool_compare_and_swap_8\n+  __sync_val_compare_and_swap_8\n+  __sync_lock_test_and_set_8\n+\n+  __sync_fetch_and_add_16\n+  __sync_fetch_and_sub_16\n+  __sync_fetch_and_or_16\n+  __sync_fetch_and_and_16\n+  __sync_fetch_and_xor_16\n+  __sync_fetch_and_nand_16\n+  __sync_add_and_fetch_16\n+  __sync_sub_and_fetch_16\n+  __sync_or_and_fetch_16\n+  __sync_and_and_fetch_16\n+  __sync_xor_and_fetch_16\n+  __sync_nand_and_fetch_16\n+  __sync_bool_compare_and_swap_16\n+  __sync_val_compare_and_swap_16\n+  __sync_lock_test_and_set_16\n+\n+  __sync_synchronize\n+}\n+\n+%inherit GCC_4.5.0 GCC_4.4.0\n+GCC_4.5.0 {\n+  __unordxf2\n+  __unordtf2\n+}\n+\n+%inherit GCC_4.6.0 GCC_4.5.0\n+GCC_4.6.0 {\n+  __morestack_segments\n+  __morestack_current_segment\n+  __morestack_initial_sp\n+  __splitstack_find\n+}"}]}