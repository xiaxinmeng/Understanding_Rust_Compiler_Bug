{"sha": "24722ea98e979fd3c7a0e82c8f422544fa5cd947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3MjJlYTk4ZTk3OWZkM2M3YTBlODJjOGY0MjI1NDRmYTVjZDk0Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-04-09T09:00:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-04-09T09:00:31Z"}, "message": "list_read.c (snprintf): Define if HAVE_SNPRINTF isn't defined.\n\n\t* io/list_read.c (snprintf): Define if HAVE_SNPRINTF isn't defined.\n\t(nml_read_obj): Add nml_err_msg_size argument.  Pass it down to\n\trecursive call.  Use snprintf instead of sprintf when %s nl->var_name\n\tis used.\n\t(nml_get_obj_data): Add nml_err_msg_size argument.  Pass it down to\n\tnml_read_obj call.  Use snprintf instead of sprintf when %s\n\tnl->var_name is used.  Pass nml_err_msg to nml_parse_qualifier instead\n\tof parse_err_msg array.  Append \" for namelist variable \" and\n\tnl->var_name to it.\n\t(namelist_read): Increase size of nml_err_msg array to 200.  Pass\n\tsizeof nml_err_msg as extra argument to nml_get_obj_data.\n\n\t* gfortran.dg/namelist_47.f90: New test.\n\nFrom-SVN: r134132", "tree": {"sha": "6adbb3fdbc2fa0e1f069fddef84052635c7be029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6adbb3fdbc2fa0e1f069fddef84052635c7be029"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24722ea98e979fd3c7a0e82c8f422544fa5cd947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24722ea98e979fd3c7a0e82c8f422544fa5cd947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24722ea98e979fd3c7a0e82c8f422544fa5cd947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24722ea98e979fd3c7a0e82c8f422544fa5cd947/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d21c8af174ff13abfce72ca8be40c1def60c53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d21c8af174ff13abfce72ca8be40c1def60c53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d21c8af174ff13abfce72ca8be40c1def60c53f"}], "stats": {"total": 155, "additions": 119, "deletions": 36}, "files": [{"sha": "49601612d2227ced793dc8146e5cb609f4d4cab1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24722ea98e979fd3c7a0e82c8f422544fa5cd947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24722ea98e979fd3c7a0e82c8f422544fa5cd947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24722ea98e979fd3c7a0e82c8f422544fa5cd947", "patch": "@@ -1,3 +1,7 @@\n+2008-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/namelist_47.f90: New test.\n+\n 2008-04-09  Richard Guenther  <rguenther@suse.de>\n \n \t* gfortran.dg/bind_c_usage_14.f03: Adjust."}, {"sha": "bc9110fa3cdedeca0b8a1e37767e5f085cf28e12", "filename": "gcc/testsuite/gfortran.dg/namelist_47.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24722ea98e979fd3c7a0e82c8f422544fa5cd947/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24722ea98e979fd3c7a0e82c8f422544fa5cd947/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_47.f90?ref=24722ea98e979fd3c7a0e82c8f422544fa5cd947", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run }\n+\n+module nml_47\n+  type             ::  mt\n+    character(len=2) ::  c012345678901234567890123456789012345678901234567890123456789h(2) = (/\"aa\",\"bb\"/)\n+  end type mt\n+  type             ::  bt\n+    integer        ::  i(2) = (/1,2/)\n+    type(mt)       ::  m(2)\n+  end type bt\n+end module nml_47\n+\n+program namelist_47\n+  use nml_47\n+  type(bt)         ::  x(2)\n+  character(140)    ::  teststring\n+  namelist /mynml/ x\n+\n+  teststring = \" x(2)%m%c012345678901234567890123456789012345678901234567890123456789h(:)(2:2) = 'z','z',\"\n+  call writenml (teststring)\n+  teststring = \" x(2)%m(2)%c012345678901234567890123456789012345678901234567890123456789h(:)(2) = 'z','z',\"\n+  call writenml (teststring)\n+  teststring = \" x(2)%m(2)%c012345678901234567890123456789012345678901234567890123456789h(:)(:3) = 'z','z',\"\n+  call writenml (teststring)\n+  teststring = \" x(2)%m(2)%c012345678901234567890123456789012345678901234567890123456789h(1:2)(k:) = 'z','z',\"\n+  call writenml (teststring)\n+\n+contains\n+\n+subroutine writenml (astring)\n+  character(140), intent(in)  :: astring\n+  character(300)   :: errmessage\n+  integer          :: ierror\n+\n+  open (10, status=\"scratch\", delim='apostrophe')\n+  write (10, '(A)') \"&MYNML\"\n+  write (10, '(A)') astring\n+  write (10, '(A)') \"/\"\n+  rewind (10)\n+  read (10, nml = mynml, iostat=ierror, iomsg=errmessage)\n+  if (ierror == 0) call abort\n+  print '(a)', trim(errmessage)\n+  close (10)\n+\n+end subroutine writenml\n+\n+end program namelist_47\n+! { dg-output \"Multiple sub-objects with non-zero rank in namelist object x(\\n|\\r\\n|\\r)\" }\n+! { dg-output \"Missing colon in substring qualifier for namelist variable x%m%c012345678901234567890123456789012345678901234567890123456789h(\\n|\\r\\n|\\r)\" }\n+! { dg-output \"Substring out of range for namelist variable x%m%c012345678901234567890123456789012345678901234567890123456789h(\\n|\\r\\n|\\r)\" }\n+! { dg-output \"Bad character in substring qualifier for namelist variable x%m%c012345678901234567890123456789012345678901234567890123456789h(\\n|\\r\\n|\\r)\" }\n+! { dg-final { cleanup-modules \"nml_47\" } }"}, {"sha": "e5908bb79ca6e4cf693334d07035f43b0e822fe7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24722ea98e979fd3c7a0e82c8f422544fa5cd947/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24722ea98e979fd3c7a0e82c8f422544fa5cd947/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=24722ea98e979fd3c7a0e82c8f422544fa5cd947", "patch": "@@ -1,3 +1,17 @@\n+2008-04-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* io/list_read.c (snprintf): Define if HAVE_SNPRINTF isn't defined.\n+\t(nml_read_obj): Add nml_err_msg_size argument.  Pass it down to\n+\trecursive call.  Use snprintf instead of sprintf when %s nl->var_name\n+\tis used.\n+\t(nml_get_obj_data): Add nml_err_msg_size argument.  Pass it down to\n+\tnml_read_obj call.  Use snprintf instead of sprintf when %s\n+\tnl->var_name is used.  Pass nml_err_msg to nml_parse_qualifier instead\n+\tof parse_err_msg array.  Append \" for namelist variable \" and\n+\tnl->var_name to it.\n+\t(namelist_read): Increase size of nml_err_msg array to 200.  Pass\n+\tsizeof nml_err_msg as extra argument to nml_get_obj_data.\n+\n 2008-04-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25829 28655"}, {"sha": "802bf9e7706dc9d670058bb5dbd45920405e856f", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24722ea98e979fd3c7a0e82c8f422544fa5cd947/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24722ea98e979fd3c7a0e82c8f422544fa5cd947/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=24722ea98e979fd3c7a0e82c8f422544fa5cd947", "patch": "@@ -65,6 +65,10 @@ Boston, MA 02110-1301, USA.  */\n \n #define MAX_REPEAT 200000000\n \n+#ifndef HAVE_SNPRINTF\n+# undef snprintf\n+# define snprintf(str, size, ...) sprintf (str, __VA_ARGS__)\n+#endif\n \n /* Save a character to a string buffer, enlarging it as necessary.  */\n \n@@ -1912,7 +1916,7 @@ void namelist_read (st_parameter_dt *dtp)\n    static void nml_match_name (char *name, int len)\n    static int nml_query (st_parameter_dt *dtp)\n    static int nml_get_obj_data (st_parameter_dt *dtp,\n-\t\t\t\tnamelist_info **prev_nl, char *)\n+\t\t\t\tnamelist_info **prev_nl, char *, size_t)\n calls:\n       static void nml_untouch_nodes (st_parameter_dt *dtp)\n       static namelist_info * find_nml_node (st_parameter_dt *dtp,\n@@ -1921,7 +1925,7 @@ void namelist_read (st_parameter_dt *dtp)\n \t\t\t\t     array_loop_spec * ls, int rank, char *)\n       static void nml_touch_nodes (namelist_info * nl)\n       static int nml_read_obj (namelist_info *nl, index_type offset,\n-\t\t\t       namelist_info **prev_nl, char *,\n+\t\t\t       namelist_info **prev_nl, char *, size_t,\n \t\t\t       index_type clow, index_type chigh)\n calls:\n       -itself-  */\n@@ -2335,7 +2339,7 @@ nml_query (st_parameter_dt *dtp, char c)\n static try\n nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t      namelist_info **pprev_nl, char *nml_err_msg,\n-\t      index_type clow, index_type chigh)\n+\t      size_t nml_err_msg_size, index_type clow, index_type chigh)\n {\n   namelist_info * cmp;\n   char * obj_name;\n@@ -2453,8 +2457,8 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t      {\n \n \t\tif (nml_read_obj (dtp, cmp, (index_type)(pdata - nl->mem_pos),\n-\t\t\t\t  pprev_nl, nml_err_msg, clow, chigh)\n-\t\t    == FAILURE)\n+\t\t\t\t  pprev_nl, nml_err_msg, nml_err_msg_size,\n+\t\t\t\t  clow, chigh) == FAILURE)\n \t\t  {\n \t\t    free_mem (obj_name);\n \t\t    return FAILURE;\n@@ -2471,8 +2475,8 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t    goto incr_idx;\n \n           default:\n-\t    sprintf (nml_err_msg, \"Bad type for namelist object %s\",\n-\t\t\tnl->var_name);\n+\t    snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t      \"Bad type for namelist object %s\", nl->var_name);\n \t    internal_error (&dtp->common, nml_err_msg);\n \t    goto nml_err_ret;\n           }\n@@ -2560,9 +2564,9 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \n   if (dtp->u.p.repeat_count > 1)\n     {\n-       sprintf (nml_err_msg, \"Repeat count too large for namelist object %s\" ,\n-\t\t   nl->var_name );\n-       goto nml_err_ret;\n+      snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t\"Repeat count too large for namelist object %s\", nl->var_name);\n+      goto nml_err_ret;\n     }\n   return SUCCESS;\n \n@@ -2580,15 +2584,14 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \n static try\n nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n-\t\t  char *nml_err_msg)\n+\t\t  char *nml_err_msg, size_t nml_err_msg_size)\n {\n   char c;\n   namelist_info * nl;\n   namelist_info * first_nl = NULL;\n   namelist_info * root_nl = NULL;\n   int dim, parsed_rank;\n   int component_flag;\n-  char parse_err_msg[30];\n   index_type clow, chigh;\n   int non_zero_rank_count;\n \n@@ -2687,12 +2690,13 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n   if (nl == NULL)\n     {\n       if (dtp->u.p.nml_read_error && *pprev_nl)\n-\tsprintf (nml_err_msg, \"Bad data for namelist object %s\",\n-\t\t    (*pprev_nl)->var_name);\n+\tsnprintf (nml_err_msg, nml_err_msg_size,\n+\t\t  \"Bad data for namelist object %s\", (*pprev_nl)->var_name);\n \n       else\n-\tsprintf (nml_err_msg, \"Cannot match namelist object name %s\",\n-\t\t    dtp->u.p.saved_string);\n+\tsnprintf (nml_err_msg, nml_err_msg_size,\n+\t\t  \"Cannot match namelist object name %s\",\n+\t\t  dtp->u.p.saved_string);\n \n       goto nml_err_ret;\n     }\n@@ -2714,10 +2718,12 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n     {\n       parsed_rank = 0;\n       if (nml_parse_qualifier (dtp, nl->dim, nl->ls, nl->var_rank,\n-\t\t\t       parse_err_msg, &parsed_rank) == FAILURE)\n+\t\t\t       nml_err_msg, &parsed_rank) == FAILURE)\n \t{\n-\t  sprintf (nml_err_msg, \"%s for namelist variable %s\",\n-\t\t      parse_err_msg, nl->var_name);\n+\t  char *nml_err_msg_end = strchr (nml_err_msg, '\\0');\n+\t  snprintf (nml_err_msg_end,\n+\t\t    nml_err_msg_size - (nml_err_msg_end - nml_err_msg),\n+\t\t    \" for namelist variable %s\", nl->var_name);\n \t  goto nml_err_ret;\n \t}\n \n@@ -2738,8 +2744,8 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n     {\n       if (nl->type != GFC_DTYPE_DERIVED)\n \t{\n-\t  sprintf (nml_err_msg, \"Attempt to get derived component for %s\",\n-\t\t      nl->var_name);\n+\t  snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t    \"Attempt to get derived component for %s\", nl->var_name);\n \t  goto nml_err_ret;\n \t}\n \n@@ -2763,11 +2769,13 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n       descriptor_dimension chd[1] = { {1, clow, nl->string_length} };\n       array_loop_spec ind[1] = { {1, clow, nl->string_length, 1} };\n \n-      if (nml_parse_qualifier (dtp, chd, ind, -1, parse_err_msg, &parsed_rank)\n+      if (nml_parse_qualifier (dtp, chd, ind, -1, nml_err_msg, &parsed_rank)\n \t  == FAILURE)\n \t{\n-\t  sprintf (nml_err_msg, \"%s for namelist variable %s\",\n-\t\t      parse_err_msg, nl->var_name);\n+\t  char *nml_err_msg_end = strchr (nml_err_msg, '\\0');\n+\t  snprintf (nml_err_msg_end,\n+\t\t    nml_err_msg_size - (nml_err_msg_end - nml_err_msg),\n+\t\t    \" for namelist variable %s\", nl->var_name);\n \t  goto nml_err_ret;\n \t}\n \n@@ -2776,9 +2784,9 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n \n       if (ind[0].step != 1)\n \t{\n-\t  sprintf (nml_err_msg,\n-\t\t   \"Step not allowed in substring qualifier\"\n-\t\t   \" for namelist object %s\", nl->var_name);\n+\t  snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t    \"Step not allowed in substring qualifier\"\n+\t\t    \" for namelist object %s\", nl->var_name);\n \t  goto nml_err_ret;\n \t}\n \n@@ -2799,16 +2807,18 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n \n   if (c == '(')\n     {\n-      sprintf (nml_err_msg, \"Qualifier for a scalar or non-character\"\n-\t\t  \" namelist object %s\", nl->var_name);\n+      snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t\"Qualifier for a scalar or non-character namelist object %s\",\n+\t\tnl->var_name);\n       goto nml_err_ret;\n     }\n \n   /* Make sure there is no more than one non-zero rank object.  */\n   if (non_zero_rank_count > 1)\n     {\n-      sprintf (nml_err_msg, \"Multiple sub-objects with non-zero rank in\"\n-\t       \" namelist object %s\", nl->var_name);\n+      snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t\"Multiple sub-objects with non-zero rank in namelist object %s\",\n+\t\tnl->var_name);\n       non_zero_rank_count = 0;\n       goto nml_err_ret;\n     }\n@@ -2832,12 +2842,14 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n \n   if (c != '=')\n     {\n-      sprintf (nml_err_msg, \"Equal sign must follow namelist object name %s\",\n-\t\t  nl->var_name);\n+      snprintf (nml_err_msg, nml_err_msg_size,\n+\t\t\"Equal sign must follow namelist object name %s\",\n+\t\tnl->var_name);\n       goto nml_err_ret;\n     }\n \n-  if (nml_read_obj (dtp, nl, 0, pprev_nl, nml_err_msg, clow, chigh) == FAILURE)\n+  if (nml_read_obj (dtp, nl, 0, pprev_nl, nml_err_msg, nml_err_msg_size,\n+\t\t    clow, chigh) == FAILURE)\n     goto nml_err_ret;\n \n   return SUCCESS;\n@@ -2856,7 +2868,7 @@ namelist_read (st_parameter_dt *dtp)\n {\n   char c;\n   jmp_buf eof_jump;\n-  char nml_err_msg[100];\n+  char nml_err_msg[200];\n   /* Pointer to the previously read object, in case attempt is made to read\n      new object name.  Should this fail, error message can give previous\n      name.  */\n@@ -2924,7 +2936,8 @@ namelist_read (st_parameter_dt *dtp)\n \n   while (!dtp->u.p.input_complete)\n     {\n-      if (nml_get_obj_data (dtp, &prev_nl, nml_err_msg) == FAILURE)\n+      if (nml_get_obj_data (dtp, &prev_nl, nml_err_msg, sizeof nml_err_msg)\n+\t\t\t    == FAILURE)\n \t{\n \t  gfc_unit *u;\n "}]}