{"sha": "fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2MDliMGZkZmIwNmFkMTM0NDllYmY0ZmJlYzdiYzE0OGI1MzkwYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-04-13T08:47:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-04-13T08:47:23Z"}, "message": "optc-gen.awk: Handle stand-alone Mask records.\n\n\t* optc-gen.awk: Handle stand-alone Mask records.\n\t* opth-gen.awk: Likewise.\n\t* doc/options.texi (Option file format): Document them.\n\t* config.gcc (sparc-*-netbsdelf*, sparc-*-linux*, sparc64-*-freebsd*,\n\tsparc64-*-linux*, sparc64-*-netbsd*): Add long-double-switch.opt.\n\t(sparc64-*-openbsd*, sparc64-*-elf*): Add little-endian.opt.\n\t* config/sparc/sparc.h (MASK_FPU, MASK_UNALIGNED_DOUBLES,\n\tMASK_V8, MASK_SPARCLITE, MASK_SPARCLET, MASK_V9,\n\tMASK_DEPRECATED_V8_INSNS, MASK_IMPURE_TEXT, MASK_APP_REGS,\n\tMASK_HARD_QUAD, MASK_LITTLE_ENDIAN, MASK_PTR64, MASK_64BIT,\n\tMASK_STACK_BIAS, MASK_FPU_SET, MASK_VIS, MASK_V8PLUS,\n\tMASK_FASTER_STRUCTS, MASK_LONG_DOUBLE_128): Delete.\n\t(TARGET_FPU, TARGET_UNALIGNED_DOUBLES, TARGET_V8, TARGET_SPARCLITE,\n\tTARGET_SPARCLET, TARGET_V9, TARGET_DEPRECATED_V8_INSNS,\n\tTARGET_IMPURE_TEXT, TARGET_APP_REGS, MASK_HARD_QUAD,\n\tTARGET_LITTLE_ENDIAN, TARGET_PTR64, TARGET_64BIT, MASK_STACK_BIAS,\n\tTARGET_FPU_SET, TARGET_VIS, TARGET_V8PLUS, TARGET_FASTER_STRUCTS,\n\tTARGET_LONG_DOUBLE_128): Likewise.\n\t(TARGET_SWITCHES, SUBTARGET_SWITCHES): Likewise.\n\t(TARGET_OPTIONS, SUBTARGET_OPTIONS): Likewise.\n\t* config/sparc/freebsd.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/linux.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/linux64.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/netbsd-elf.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/sp64-elf.h (SUBTARGET_SWITCHES): Likewise.\n\t* config/sparc/sparc.c (fpu_option_set): New global.\n\t(sparc_handle_option): New function.\n\t(sparc_override_options): Test fpu_option_set.\n\t(TARGET_DEFAULT_TARGET_FLAGS): Set to TARGET_DEFAULT.\n\t(TARGET_HANDLE_OPTION): Set to sparc_handle_option.\n\t* config/sparc/sparc.opt: New file.\n\t* config/sparc/little-endian.opt: Likewise.\n\t* config/sparc/long-double-switch.opt: Likewise.\n\nFrom-SVN: r98078", "tree": {"sha": "6334f5d6c82986a5a8afac7939fe71286f4f8588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6334f5d6c82986a5a8afac7939fe71286f4f8588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/comments", "author": null, "committer": null, "parents": [{"sha": "c8de0f3babc7a07b8a867d23d8e6d42cef0a1e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8de0f3babc7a07b8a867d23d8e6d42cef0a1e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8de0f3babc7a07b8a867d23d8e6d42cef0a1e80"}], "stats": {"total": 530, "additions": 284, "deletions": 246}, "files": [{"sha": "05b32933ff13d79a66df8b5e086787edc1c42787", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -1924,6 +1924,7 @@ sh-*-*)\n \t;;\n sparc-*-netbsdelf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n+\textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \t;;\n sparc-*-openbsd*)\n \ttm_defines=OBSD_OLD_GAS\n@@ -1935,6 +1936,7 @@ sparc-*-openbsd*)\n \t;;\n sparc64-*-openbsd*)\n \ttm_file=\"sparc/openbsd1-64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp64-elf.h openbsd.h sparc/openbsd64.h\"\n+\textra_options=\"${extra_options} sparc/little-endian.opt\"\n \tgas=yes gnu_ld=yes\n \twith_cpu=ultrasparc\n \t;;\n@@ -1946,6 +1948,7 @@ sparc-*-elf*)\n \t;;\n sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n+\textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \t;;\n sparc-*-rtems*)\n@@ -2044,12 +2047,14 @@ sparc-*-sysv4*)\n \t;;\n sparc64-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp64-elf.h\"\n+\textra_options=\"${extra_options} sparc/little-endian.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \textra_parts=\"crtbegin.o crtend.o\"\n \tuse_fixproto=yes\n \t;;\n sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \ttm_file=\"${tm_file} ${fbsd_tm_file} dbxelf.h elfos.h sparc/sysv4.h sparc/freebsd.h\"\n+\textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-crtfm\"\n \tcase \"x$with_cpu\" in\n \t\txultrasparc) ;;\n@@ -2059,13 +2064,15 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \tneed_64bit_hwint=yes\n \t;;\n sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n-\ttmake_file=\"${tmake_file} sparc/t-linux64 sparc/t-crtfm\"\n \ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\"\n+\textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n+\ttmake_file=\"${tmake_file} sparc/t-linux64 sparc/t-crtfm\"\n \t;;\n sparc64-*-netbsd*)\n-\ttmake_file=\"${tmake_file} sparc/t-netbsd64\"\n \ttm_file=\"sparc/biarch64.h ${tm_file}\"\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n+\textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n+\ttmake_file=\"${tmake_file} sparc/t-netbsd64\"\n \t;;\n strongarm-*-elf*)\n \ttm_file=\"arm/strongarm-elf.h dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h\""}, {"sha": "aefa1d45ab855e966cdec9c035adf79b68576cba", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -72,11 +72,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Definitions for 64-bit SPARC running systems with ELF. */\n \n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\t    \\\n-  {\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") },  \\\n-  {\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n-\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (FreeBSD/sparc64 ELF)\");\n "}, {"sha": "fdad997056b2627f4c475976b3d15348c86260b8", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -86,11 +86,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc GNU/Linux with ELF)\");\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") }, \\\n-{\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n-\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n  "}, {"sha": "3a4613b89c96123eb6d24e2c5b2256cbb7412ee6", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -106,11 +106,6 @@ Boston, MA 02111-1307, USA.  */\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDLOW\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\t    \\\n-{\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") },  \\\n-{\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n-\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n "}, {"sha": "81a87585223ed995088eb69ae5af28e5a468d9c1", "filename": "gcc/config/sparc/little-endian.opt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flittle-endian.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flittle-endian.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flittle-endian.opt?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -0,0 +1,28 @@\n+; Options for the SPARC port of the compiler\n+;\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mlittle-endian\n+Target Report RejectNegative Mask(LITTLE_ENDIAN) MaskExists\n+Generate code for little-endian\n+\n+mbig-endian\n+Target Report RejectNegative InverseMask(LITTLE_ENDIAN)\n+Generate code for big-endian"}, {"sha": "565cb8e09b256f436bd7146c87216f24492b7acc", "filename": "gcc/config/sparc/long-double-switch.opt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flong-double-switch.opt?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -0,0 +1,28 @@\n+; Options for the SPARC port of the compiler\n+;\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mlong-double-128\n+Target Report RejectNegative Mask(LONG_DOUBLE_128) MaskExists\n+Use 128-bit long double\n+\n+mlong-double-64\n+Target Report RejectNegative InverseMask(LONG_DOUBLE_128)\n+Use 64-bit long double"}, {"sha": "f12a00a42e9a0e3a79e4ba5301ac8159db4f9562", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -195,13 +195,6 @@ Boston, MA 02111-1307, USA.  */\n   { \"netbsd_entry_point\",\tNETBSD_ENTRY_POINT },\n \n \n-/* What extra switches do we need?  */\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-  {\"long-double-64\", -MASK_LONG_DOUBLE_128, N_(\"Use 64 bit long doubles\") }, \\\n-  {\"long-double-128\", MASK_LONG_DOUBLE_128, N_(\"Use 128 bit long doubles\") },\n-\n-\n /* Build a compiler that supports -m32 and -m64?  */\n \n #ifdef SPARC_BI_ARCH"}, {"sha": "dcb79ee95fa86041bd8d3868a06b62465f694bf2", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -81,12 +81,6 @@ crtbegin.o%s \\\n    || (CHAR) == 'h' \\\n    || (CHAR) == 'z')\n \n-/* V9 chips can handle either endianness.  */\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{\"big-endian\", -MASK_LITTLE_ENDIAN, N_(\"Generate code for big endian\") }, \\\n-{\"little-endian\", MASK_LITTLE_ENDIAN, N_(\"Generate code for little endian\") },\n-\n #undef BYTES_BIG_ENDIAN\n #define BYTES_BIG_ENDIAN (! TARGET_LITTLE_ENDIAN)\n "}, {"sha": "a429bcfb8a50ae6aeefde833b1966500e0d7ea72", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 44, "deletions": 9, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -299,6 +299,7 @@ static HOST_WIDE_INT frame_base_offset;\n /* 1 if the next opcode is to be specially indented.  */\n int sparc_indent_opcode = 0;\n \n+static bool sparc_handle_option (size_t, const char *, int);\n static void sparc_init_modes (void);\n static void scan_record_type (tree, int *, int *, int *);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, enum machine_mode,\n@@ -372,6 +373,7 @@ const struct attribute_spec sparc_attribute_table[];\n \n /* Code model option as passed by user.  */\n const char *sparc_cmodel_string;\n+\n /* Parsed value.  */\n enum cmodel sparc_cmodel;\n \n@@ -388,7 +390,10 @@ struct sparc_cpu_select sparc_select[] =\n \n /* CPU type.  This is set from TARGET_CPU_DEFAULT and -m{cpu,tune}=xxx.  */\n enum processor_type sparc_cpu;\n-\f\n+\n+/* Whether\fan FPU option was specified.  */\n+static bool fpu_option_set = false;\n+\n /* Initialize the GCC target structure.  */\n \n /* The sparc default is to use .half rather than .short for aligned\n@@ -506,11 +511,45 @@ enum processor_type sparc_cpu;\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING SPARC_RELAXED_ORDERING\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION sparc_handle_option\n+\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END sparc_file_end\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n-\f\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+sparc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_mfpu:\n+    case OPT_mhard_float:\n+    case OPT_msoft_float:\n+      fpu_option_set = true;\n+      break;\n+\n+    case OPT_mcpu_:\n+      sparc_select[1].string = arg;\n+      break;\n+\n+    case OPT_mtune_:\n+      sparc_select[2].string = arg;\n+      break;\n+\n+    case OPT_mcmodel_:\n+      sparc_cmodel_string = arg;\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n@@ -657,13 +696,9 @@ sparc_override_options (void)\n     }\n \n   /* If -mfpu or -mno-fpu was explicitly used, don't override with\n-     the processor default.  Clear MASK_FPU_SET to avoid confusing\n-     the reverse mapping from switch values to names.  */\n-  if (TARGET_FPU_SET)\n-    {\n-      target_flags = (target_flags & ~MASK_FPU) | fpu;\n-      target_flags &= ~MASK_FPU_SET;\n-    }\n+     the processor default.  */\n+  if (fpu_option_set)\n+    target_flags = (target_flags & ~MASK_FPU) | fpu;\n \n   /* Don't allow -mvis if FPU is disabled.  */\n   if (! TARGET_FPU)"}, {"sha": "f00852a7a1fea88f0b7d12d4410a0c0143feec22", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 192, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -483,122 +483,14 @@ extern enum cmodel sparc_cmodel;\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n+/* Option handling.  */\n+\n #define OVERRIDE_OPTIONS  sparc_override_options ()\n \f\n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Nonzero if we should generate code to use the fpu.  */\n-#define MASK_FPU 1\n-#define TARGET_FPU (target_flags & MASK_FPU)\n-\n-/* Nonzero if we should assume that double pointers might be unaligned.\n-   This can happen when linking gcc compiled code with other compilers,\n-   because the ABI only guarantees 4 byte alignment.  */\n-#define MASK_UNALIGNED_DOUBLES 4\n-#define TARGET_UNALIGNED_DOUBLES (target_flags & MASK_UNALIGNED_DOUBLES)\n-\n-/* Nonzero means that we should generate code for a v8 sparc.  */\n-#define MASK_V8 0x8\n-#define TARGET_V8 (target_flags & MASK_V8)\n-\n-/* Nonzero means that we should generate code for a sparclite.\n-   This enables the sparclite specific instructions, but does not affect\n-   whether FPU instructions are emitted.  */\n-#define MASK_SPARCLITE 0x10\n-#define TARGET_SPARCLITE (target_flags & MASK_SPARCLITE)\n-\n-/* Nonzero if we're compiling for the sparclet.  */\n-#define MASK_SPARCLET 0x20\n-#define TARGET_SPARCLET (target_flags & MASK_SPARCLET)\n-\n-/* Nonzero if we're compiling for v9 sparc.\n-   Note that v9's can run in 32 bit mode so this doesn't necessarily mean\n-   the word size is 64.  */\n-#define MASK_V9 0x40\n-#define TARGET_V9 (target_flags & MASK_V9)\n-\n-/* Nonzero to generate code that uses the instructions deprecated in\n-   the v9 architecture.  This option only applies to v9 systems.  */\n-/* ??? This isn't user selectable yet.  It's used to enable such insns\n-   on 32 bit v9 systems and for the moment they're permanently disabled\n-   on 64 bit v9 systems.  */\n-#define MASK_DEPRECATED_V8_INSNS 0x80\n-#define TARGET_DEPRECATED_V8_INSNS (target_flags & MASK_DEPRECATED_V8_INSNS)\n-\n /* Mask of all CPU selection flags.  */\n #define MASK_ISA \\\n (MASK_V8 + MASK_SPARCLITE + MASK_SPARCLET + MASK_V9 + MASK_DEPRECATED_V8_INSNS)\n \n-/* Nonzero means don't pass `-assert pure-text' to the linker.  */\n-#define MASK_IMPURE_TEXT 0x100\n-#define TARGET_IMPURE_TEXT (target_flags & MASK_IMPURE_TEXT)\n-\n-/* 0x200 is unused */\n-\n-/* Nonzero means use the registers that the SPARC ABI reserves for\n-   application software.  This must be the default to coincide with the\n-   setting in FIXED_REGISTERS.  */\n-#define MASK_APP_REGS 0x400\n-#define TARGET_APP_REGS (target_flags & MASK_APP_REGS)\n-\n-/* Option to select how quad word floating point is implemented.\n-   When TARGET_HARD_QUAD is true, we use the hardware quad instructions.\n-   Otherwise, we use the SPARC ABI quad library functions.  */\n-#define MASK_HARD_QUAD 0x800\n-#define TARGET_HARD_QUAD (target_flags & MASK_HARD_QUAD)\n-\n-/* Nonzero on little-endian machines.  */\n-/* ??? Little endian support currently only exists for sparc86x-elf and\n-   sparc64-elf configurations.  May eventually want to expand the support\n-   to all targets, but for now it's kept local to only those two.  */\n-#define MASK_LITTLE_ENDIAN 0x1000\n-#define TARGET_LITTLE_ENDIAN (target_flags & MASK_LITTLE_ENDIAN)\n-\n-/* 0x2000, 0x4000 are unused */\n-\n-/* Nonzero if pointers are 64 bits.  */\n-#define MASK_PTR64 0x8000\n-#define TARGET_PTR64 (target_flags & MASK_PTR64)\n-\n-/* Nonzero if generating code to run in a 64 bit environment.\n-   This is intended to only be used by TARGET_ARCH{32,64} as they are the\n-   mechanism used to control compile time or run time selection.  */\n-#define MASK_64BIT 0x10000\n-#define TARGET_64BIT (target_flags & MASK_64BIT)\n-\n-/* 0x20000,0x40000 unused */\n-\n-/* Nonzero means use a stack bias of 2047.  Stack offsets are obtained by\n-   adding 2047 to %sp.  This option is for v9 only and is the default.  */\n-#define MASK_STACK_BIAS 0x80000\n-#define TARGET_STACK_BIAS (target_flags & MASK_STACK_BIAS)\n-\n-/* 0x100000,0x200000 unused */\n-\n-/* Nonzero means -m{,no-}fpu was passed on the command line.  */\n-#define MASK_FPU_SET 0x400000\n-#define TARGET_FPU_SET (target_flags & MASK_FPU_SET)\n-\n-/* Use the UltraSPARC Visual Instruction Set extensions.  */\n-#define MASK_VIS 0x1000000\n-#define TARGET_VIS (target_flags & MASK_VIS)\n-\n-/* Compile for Solaris V8+.  32 bit Solaris preserves the high bits of\n-   the current out and global registers and Linux 2.2+ as well.  */\n-#define MASK_V8PLUS 0x2000000\n-#define TARGET_V8PLUS (target_flags & MASK_V8PLUS)\n-\n-/* Force a the fastest alignment on structures to take advantage of\n-   faster copies.  */\n-#define MASK_FASTER_STRUCTS 0x4000000\n-#define TARGET_FASTER_STRUCTS (target_flags & MASK_FASTER_STRUCTS)\n-\n-/* Use IEEE quad long double.  */\n-#define MASK_LONG_DOUBLE_128 0x8000000\n-#define TARGET_LONG_DOUBLE_128 (target_flags & MASK_LONG_DOUBLE_128)\n-\n /* TARGET_HARD_MUL: Use hardware multiply instructions but not %y.\n    TARGET_HARD_MUL32: Use hardware multiply instructions with rd %y\n    to get high 32 bits.  False in V8+ or V9 because multiply stores\n@@ -613,79 +505,11 @@ extern int target_flags;\n   (TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET\t\\\n    || TARGET_DEPRECATED_V8_INSNS || TARGET_V8PLUS)\n \n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES  \\\n-  { {\"fpu\", MASK_FPU | MASK_FPU_SET,\t\t\t\t\t\\\n-     N_(\"Use hardware fp\") },\t\t\t\t\t\t\\\n-    {\"no-fpu\", -MASK_FPU,\t\t\t\t\t\t\\\n-     N_(\"Do not use hardware fp\") },\t\t\t\t\t\\\n-    {\"no-fpu\", MASK_FPU_SET,\t\t\t\tNULL, },\t\\\n-    {\"hard-float\", MASK_FPU | MASK_FPU_SET,\t\t\t\t\\\n-     N_(\"Use hardware fp\") },\t\t\t\t\t\t\\\n-    {\"soft-float\", -MASK_FPU,\t\t\t\t\t\t\\\n-     N_(\"Do not use hardware fp\") },\t\t\t\t\t\\\n-    {\"soft-float\", MASK_FPU_SET,\t\t\tNULL },\t\t\\\n-    {\"unaligned-doubles\", MASK_UNALIGNED_DOUBLES,\t\t\t\\\n-     N_(\"Assume possible double misalignment\") },\t\t\t\\\n-    {\"no-unaligned-doubles\", -MASK_UNALIGNED_DOUBLES,\t\t\t\\\n-     N_(\"Assume all doubles are aligned\") },\t\t\t\t\\\n-    {\"impure-text\", MASK_IMPURE_TEXT,\t\t\t\t\t\\\n-     N_(\"Pass -assert pure-text to linker\") }, \t\t\t\t\\\n-    {\"no-impure-text\", -MASK_IMPURE_TEXT,\t\t\t\t\\\n-     N_(\"Do not pass -assert pure-text to linker\") }, \t\t\t\\\n-    {\"app-regs\", MASK_APP_REGS,\t\t\t\t\t\t\\\n-     N_(\"Use ABI reserved registers\") },\t\t\t\t\\\n-    {\"no-app-regs\", -MASK_APP_REGS,\t\t\t\t\t\\\n-     N_(\"Do not use ABI reserved registers\") }, \t\t\t\\\n-    {\"hard-quad-float\", MASK_HARD_QUAD,\t\t\t\t\t\\\n-     N_(\"Use hardware quad fp instructions\") }, \t\t\t\\\n-    {\"soft-quad-float\", -MASK_HARD_QUAD,\t\t\t\t\\\n-     N_(\"Do not use hardware quad fp instructions\") }, \t\t\t\\\n-    {\"v8plus\", MASK_V8PLUS,\t\t\t\t\t\t\\\n-     N_(\"Compile for v8plus ABI\") },\t\t\t\t\t\\\n-    {\"no-v8plus\", -MASK_V8PLUS,\t\t\t\t\t\t\\\n-     N_(\"Do not compile for v8plus ABI\") }, \t\t\t\t\\\n-    {\"vis\", MASK_VIS,\t\t\t\t\t\t\t\\\n-     N_(\"Utilize Visual Instruction Set\") }, \t\t\t\t\\\n-    {\"no-vis\", -MASK_VIS,\t\t\t\t\t\t\\\n-     N_(\"Do not utilize Visual Instruction Set\") }, \t\t\t\\\n-    {\"ptr64\", MASK_PTR64,\t\t\t\t\t\t\\\n-     N_(\"Pointers are 64-bit\") }, \t\t\t\t\t\\\n-    {\"ptr32\", -MASK_PTR64,\t\t\t\t\t\t\\\n-     N_(\"Pointers are 32-bit\") }, \t\t\t\t\t\\\n-    {\"32\", -MASK_64BIT,\t\t\t\t\t\t\t\\\n-     N_(\"Use 32-bit ABI\") }, \t\t\t\t\t\t\\\n-    {\"64\", MASK_64BIT,\t\t\t\t\t\t\t\\\n-     N_(\"Use 64-bit ABI\") }, \t\t\t\t\t\t\\\n-    {\"stack-bias\", MASK_STACK_BIAS,\t\t\t\t\t\\\n-     N_(\"Use stack bias\") }, \t\t\t\t\t\t\\\n-    {\"no-stack-bias\", -MASK_STACK_BIAS,\t\t\t\t\t\\\n-     N_(\"Do not use stack bias\") }, \t\t\t\t\t\\\n-    {\"faster-structs\", MASK_FASTER_STRUCTS,\t\t\t\t\\\n-     N_(\"Use structs on stronger alignment for double-word copies\") }, \t\\\n-    {\"no-faster-structs\", -MASK_FASTER_STRUCTS,\t\t\t\t\\\n-     N_(\"Do not use structs on stronger alignment for double-word copies\") }, \\\n-    {\"relax\", 0,\t\t\t\t\t\t\t\\\n-     N_(\"Optimize tail call instructions in assembler and linker\") },\t\\\n-    {\"no-relax\", 0,\t\t\t\t\t\t\t\\\n-     N_(\"Do not optimize tail call instructions in assembler or linker\") }, \\\n-    SUBTARGET_SWITCHES\t\t\t\\\n-    { \"\", TARGET_DEFAULT, \"\"}}\n-\n /* MASK_APP_REGS must always be the default because that's what\n    FIXED_REGISTERS is set to and -ffixed- is processed before\n    CONDITIONAL_REGISTER_USAGE is called (where we process -mno-app-regs).  */\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_FPU)\n \n-/* This is meant to be redefined in target specific files.  */\n-#define SUBTARGET_SWITCHES\n-\n /* Processor type.\n    These must match the values for the cpu attribute in sparc.md.  */\n enum processor_type {\n@@ -712,20 +536,6 @@ extern enum processor_type sparc_cpu;\n    Every file includes us, but not every file includes insn-attr.h.  */\n #define sparc_cpu_attr ((enum attr_cpu) sparc_cpu)\n \n-#define TARGET_OPTIONS \\\n-{\t\t\t\t\t\t\t\t\\\n-  { \"cpu=\",  &sparc_select[1].string,\t\t\t\t\\\n-    N_(\"Use features of and schedule code for given CPU\"), 0},\t\\\n-  { \"tune=\", &sparc_select[2].string,\t\t\t\t\\\n-    N_(\"Schedule code for given CPU\"), 0},\t\t\t\\\n-  { \"cmodel=\", &sparc_cmodel_string,\t\t\t\t\\\n-    N_(\"Use given SPARC code model\"), 0},\t\t\t\\\n-  SUBTARGET_OPTIONS \t\t\t\t\t\t\\\n-}\n-\n-/* This is meant to be redefined in target specific files.  */\n-#define SUBTARGET_OPTIONS\n-\n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-cpu is ignored if -mcpu is specified.\n    --with-tune is ignored if -mtune is specified."}, {"sha": "88a603c6f5696305f30702f69fbad812b3e0ba3a", "filename": "gcc/config/sparc/sparc.opt", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -0,0 +1,123 @@\n+; Options for the SPARC port of the compiler\n+;\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+; License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mfpu\n+Target Report Mask(FPU)\n+Use hardware FP\n+\n+mhard-float\n+Target RejectNegative Mask(FPU) MaskExists\n+Use hardware FP\n+\n+msoft-float\n+Target RejectNegative InverseMask(FPU)\n+Do not use hardware FP\n+\n+munaligned-doubles\n+Target Report Mask(UNALIGNED_DOUBLES)\n+Assume possible double misalignment\n+\n+mimpure-text\n+Target Report\n+Pass -assert pure-text to linker\n+\n+mapp-regs\n+Target Report Mask(APP_REGS)\n+Use ABI reserved registers\n+\n+mhard-quad-float\n+Target Report RejectNegative Mask(HARD_QUAD)\n+Use hardware quad FP instructions\n+\n+msoft-quad-float\n+Target Report RejectNegative InverseMask(HARD_QUAD)\n+Do not use hardware quad fp instructions\n+\n+mv8plus\n+Target Report Mask(V8PLUS)\n+Compile for V8+ ABI\n+\n+mvis\n+Target Report Mask(VIS)\n+Use UltraSPARC Visual Instruction Set extensions\n+\n+mptr64\n+Target Report RejectNegative Mask(PTR64)\n+Pointers are 64-bit\n+\n+mptr32\n+Target Report RejectNegative InverseMask(PTR64)\n+Pointers are 32-bit\n+\n+m64\n+Target Report RejectNegative Mask(64BIT)\n+Use 64-bit ABI\n+\n+m32\n+Target Report RejectNegative InverseMask(64BIT)\n+Use 32-bit ABI\n+\n+mstack-bias\n+Target Report Mask(STACK_BIAS)\n+Use stack bias\n+\n+mfaster-structs\n+Target Report Mask(FASTER_STRUCTS)\n+Use structs on stronger alignment for double-word copies\n+\n+mrelax\n+Target\n+Optimize tail call instructions in assembler and linker\n+\n+mcpu=\n+Target RejectNegative Joined\n+Use features of and schedule code for given CPU\n+\n+mtune=\n+Target RejectNegative Joined\n+Schedule code for given CPU\n+\n+mcmodel=\n+Target RejectNegative Joined\n+Use given SPARC-V9 code model\n+\n+\n+Mask(LITTLE_ENDIAN)\n+;; Generate code for little-endian\n+\n+Mask(LONG_DOUBLE_128)\n+;; Use 128-bit long double\n+\n+Mask(SPARCLITE)\n+;; Generate code for SPARClite\n+\n+Mask(SPARCLET)\n+;; Generate code for SPARClet\n+\n+Mask(V8)\n+;; Generate code for SPARC-V8\n+\n+Mask(V9)\n+;; Generate code for SPARC-V9\n+\n+Mask(DEPRECATED_V8_INSNS)\n+;; Generate code that uses the V8 instructions deprecated\n+;; in the V9 architecture."}, {"sha": "ccc6c91039acf34612730f4b5a2197da0e4682b1", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -25,15 +25,17 @@ blank lines.  Comments may appear on their own line anywhere within\n the file and are preceded by semicolons.  Whitespace is allowed before\n the semicolon.\n \n-The files can contain two types of record: language definitions and\n-option definitions.\n+The files can contain the following types of record:\n \n-A language definition record has two fields: the string\n-@samp{Language} and the name of the language.  Once a language has\n-been declared in this way, it can be used as an option property.\n+@itemize @bullet\n+@item\n+A language definition record. \ufffdThese records have two fields: the\n+string @samp{Language} and the name of the language. \ufffdOnce a language\n+has been declared in this way, it can be used as an option property.\n @xref{Option properties}.\n \n-An option definition record has the following fields:\n+@item\n+An option definition record. \ufffdThese records have the following fields:\n \n @enumerate\n @item\n@@ -59,6 +61,21 @@ used instead of the option's name and the text to the right of the\n tab forms the help text.  This allows you to elaborate on what type\n of argument the option takes.\n \n+@item\n+A target mask record. \ufffdThese records have one field of the form\n+@samp{Mask(@var{x})}. \ufffdThe options-processing script will automatically\n+allocate a bit in @code{target_flags} (@pxref{Run-time Target}) for\n+each mask name @var{x} and set the macro @code{MASK_@var{x}} to the\n+appropriate bitmask. \ufffdIt will also declare a @code{TARGET_@var{x}}\n+macro that has the value 1 when bit @code{MASK_@var{x}} is set and\n+0 otherwise.\n+\n+They are primarily intended to declare target masks that are not\n+associated with user options, either because these masks represent\n+internal switches or because the options are not available on all\n+configurations and yet the masks always need to be defined.\n+@end itemize\n+\n @node Option properties\n @section Option properties\n "}, {"sha": "f458b65b83a35f5688a82486a411803b65bb7772", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -42,10 +42,13 @@ BEGIN {\n \t\t\tn_langs++;\n \t\t}\n \t\telse {\n-\t\t\topts[n_opts]  = $1\n-\t\t\tflags[n_opts] = $2\n-\t\t\thelp[n_opts]  = $3\n-\t\t\tn_opts++;\n+\t\t\tname = opt_args(\"Mask\", $1)\n+\t\t\tif (name == \"\") {\n+\t\t\t\topts[n_opts]  = $1\n+\t\t\t\tflags[n_opts] = $2\n+\t\t\t\thelp[n_opts]  = $3\n+\t\t\t\tn_opts++;\n+\t\t\t}\n \t\t}\n \t}\n "}, {"sha": "b5a4c57805822557a36502173c398d9803fd103b", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe609b0fdfb06ad13449ebf4fbec7bc148b5390a/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=fe609b0fdfb06ad13449ebf4fbec7bc148b5390a", "patch": "@@ -26,7 +26,8 @@\n BEGIN {\n \tn_opts = 0\n \tn_langs = 0\n-        quote = \"\\042\"\n+\tn_extra_masks = 0\n+\tquote = \"\\042\"\n \tcomma = \",\"\n \tFS=SUBSEP\n }\n@@ -38,10 +39,16 @@ BEGIN {\n \t\t\tn_langs++;\n \t\t}\n \t\telse {\n-\t\t\topts[n_opts]  = $1\n-\t\t\tflags[n_opts] = $2\n-\t\t\thelp[n_opts]  = $3\n-\t\t\tn_opts++;\n+\t\t\tname = opt_args(\"Mask\", $1)\n+\t\t\tif (name == \"\") {\n+\t\t\t\topts[n_opts]  = $1\n+\t\t\t\tflags[n_opts] = $2\n+\t\t\t\thelp[n_opts]  = $3\n+\t\t\t\tn_opts++;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\textra_masks[n_extra_masks++] = name\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -54,6 +61,7 @@ print \"#ifndef OPTIONS_H\"\n print \"#define OPTIONS_H\"\n print \"\"\n print \"extern int target_flags;\"\n+print \"\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = var_name(flags[i]);\n@@ -73,6 +81,9 @@ for (i = 0; i < n_opts; i++) {\n \tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n \t\tprint \"#define MASK_\" name \" (1 << \" masknum++ \")\"\n }\n+for (i = 0; i < n_extra_masks; i++) {\n+\tprint \"#define MASK_\" extra_masks[i] \" (1 << \" masknum++ \")\"\n+}\n if (masknum > 31)\n \tprint \"#error too many target masks\"\n print \"\"\n@@ -83,6 +94,10 @@ for (i = 0; i < n_opts; i++) {\n \t\tprint \"#define TARGET_\" name \\\n \t\t      \" ((target_flags & MASK_\" name \") != 0)\"\n }\n+for (i = 0; i < n_extra_masks; i++) {\n+\tprint \"#define TARGET_\" extra_masks[i] \\\n+\t      \" ((target_flags & MASK_\" extra_masks[i] \") != 0)\"\n+}\n print \"\"\n \n for (i = 0; i < n_opts; i++) {"}]}