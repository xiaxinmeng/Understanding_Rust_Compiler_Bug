{"sha": "dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwYmEyODEzZDYxNTBkNmI0YzhkZGJmOWYyNTljNmVmYmJhMTEwZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-11T03:49:54Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-11T03:49:54Z"}, "message": "cse.c (constant_pool_entries_regcost): New global variable to hold the register cost component of...\n\n\n\t* cse.c (constant_pool_entries_regcost): New global variable to\n\thold the register cost component of constant_pool_entries_cost.\n\t(fold_rtx): Calculate constant_pool_entries_regcost at the same\n\ttime as constant_pool_entries_cost.\n\t(cse_insn): Set both src_folded_cost and src_folded_regcost from\n\tconstant_pool_entries_cost and constant_pool_entries_regcost.\n\t(cse_main): Initialize constant_pool_entries_regcost to zero.\n\n\t* optabs.c (expand_unop): Attach a REG_EQUAL note describing\n\tthe semantics of the sequence of bit operations used to negate\n\ta floating-point value.\n\t(expand_abs_nojump): Likewise attach a REG_EQUAL note describing\n\tthe semantics of the bit operations used to abs a floating point\n\tvalue.\n\nFrom-SVN: r72326", "tree": {"sha": "21edeff789f11f21f721ad4c372bd423b1038dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21edeff789f11f21f721ad4c372bd423b1038dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/comments", "author": null, "committer": null, "parents": [{"sha": "796d7a8605529b8a88f0f3eebf6a3fc4316a1d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796d7a8605529b8a88f0f3eebf6a3fc4316a1d4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796d7a8605529b8a88f0f3eebf6a3fc4316a1d4a"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "5859517feb34cad45996360063f6bc0b0900f9a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "patch": "@@ -1,3 +1,20 @@\n+2003-10-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* cse.c (constant_pool_entries_regcost): New global variable to\n+\thold the register cost component of constant_pool_entries_cost.\n+\t(fold_rtx): Calculate constant_pool_entries_regcost at the same\n+\ttime as constant_pool_entries_cost.\n+\t(cse_insn): Set both src_folded_cost and src_folded_regcost from\n+\tconstant_pool_entries_cost and constant_pool_entries_regcost.\n+\t(cse_main): Initialize constant_pool_entries_regcost to zero.\n+\n+\t* optabs.c (expand_unop): Attach a REG_EQUAL note describing\n+\tthe semantics of the sequence of bit operations used to negate\n+\ta floating-point value.\n+\t(expand_abs_nojump): Likewise attach a REG_EQUAL note describing\n+\tthe semantics of the bit operations used to abs a floating point\n+\tvalue.\n+\n 2003-10-11  Bernardo Innocenti  <bernie@develer.com>\n \t    Paul Dale  <pauli@snapgear.com>\n "}, {"sha": "7cdc72f6506291034500557288b44a5a6c581eb9", "filename": "gcc/cse.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "patch": "@@ -569,6 +569,7 @@ static struct table_elt *last_jump_equiv_class;\n    the insn.  */\n \n static int constant_pool_entries_cost;\n+static int constant_pool_entries_regcost;\n \n /* This data describes a block that will be processed by cse_basic_block.  */\n \n@@ -3529,7 +3530,10 @@ fold_rtx (rtx x, rtx insn)\n \t    rtx new;\n \n \t    if (CONSTANT_P (constant) && GET_CODE (constant) != CONST_INT)\n-\t      constant_pool_entries_cost = COST (constant);\n+\t      {\n+\t\tconstant_pool_entries_cost = COST (constant);\n+\t\tconstant_pool_entries_regcost = approx_reg_cost (constant);\n+\t      }\n \n \t    /* If we are loading the full constant, we have an equivalence.  */\n \t    if (offset == 0 && mode == const_mode)\n@@ -5507,6 +5511,7 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t      src_folded_force_flag = 1;\n \t      src_folded = trial;\n \t      src_folded_cost = constant_pool_entries_cost;\n+\t      src_folded_regcost = constant_pool_entries_regcost;\n \t    }\n \t}\n \n@@ -6939,6 +6944,7 @@ cse_main (rtx f, int nregs, int after_loop, FILE *file)\n   cse_jumps_altered = 0;\n   recorded_label_ref = 0;\n   constant_pool_entries_cost = 0;\n+  constant_pool_entries_regcost = 0;\n   val.path_size = 0;\n \n   init_recog ();"}, {"sha": "10a3809430da7a1fc97fa29845e8e7df089f8e6e", "filename": "gcc/optabs.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=dd0ba2813d6150d6b4c8ddbf9f259c6efbba110f", "patch": "@@ -2615,7 +2615,16 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t\t\t       immed_double_const (lo, hi, imode),\n \t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n \t  if (temp != 0)\n-\t    return gen_lowpart (mode, temp);\n+\t    {\n+\t      rtx insn;\n+\t      if (target == 0)\n+\t\ttarget = gen_reg_rtx (mode);\n+\t      insn = emit_move_insn (target, gen_lowpart (mode, temp));\n+\t      set_unique_reg_note (insn, REG_EQUAL,\n+\t\t\t\t   gen_rtx_fmt_e (NEG, mode,\n+\t\t\t\t\t\t  copy_rtx (op0)));\n+\t      return target;\n+\t    }\n \t  delete_insns_since (last);\n         }\n     }\n@@ -2790,7 +2799,16 @@ expand_abs_nojump (enum machine_mode mode, rtx op0, rtx target,\n \t\t\t       immed_double_const (~lo, ~hi, imode),\n \t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n \t  if (temp != 0)\n-\t    return gen_lowpart (mode, temp);\n+\t    {\n+\t      rtx insn;\n+\t      if (target == 0)\n+\t\ttarget = gen_reg_rtx (mode);\n+\t      insn = emit_move_insn (target, gen_lowpart (mode, temp));\n+\t      set_unique_reg_note (insn, REG_EQUAL,\n+\t\t\t\t   gen_rtx_fmt_e (ABS, mode,\n+\t\t\t\t\t\t  copy_rtx (op0)));\n+\t      return target;\n+\t    }\n \t  delete_insns_since (last);\n \t}\n     }"}]}