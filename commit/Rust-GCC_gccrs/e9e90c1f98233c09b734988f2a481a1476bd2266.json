{"sha": "e9e90c1f98233c09b734988f2a481a1476bd2266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllOTBjMWY5ODIzM2MwOWI3MzQ5ODhmMmE0ODFhMTQ3NmJkMjI2Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-01-21T09:57:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-01-21T09:57:42Z"}, "message": "PR libstdc++/30449 (fill, fill_n)\n\n2007-01-21  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/30449 (fill, fill_n)\n\t* include/bits/stl_algobase.h (__fill_aux(wchar_t*, wchar_t*,\n\tconst wchar_t&), __fill_n_aux(wchar_t*, _Size, const wchar_t&)): New.\n\t(fill(signed char*, signed char*, const signed char&),\n\tfill(unsigned char*, unsigned char*, const unsigned char&),\n\tfill(char*, char*, char&), fill_n(signed char*, _Size,\n\tconst signed char&), fill_n(unsigned char*, _Size,\n\tconst unsigned char&), fill_n(char*, _Size, char&)): Rename to\n\t__*_aux.\n\t(__fill_normal, __fill_n_normal): New, call the latter.\n\t(fill, fill_n): Adjust, call the latter.\t\n\t* testsuite/25_algorithms/fill/4.cc: New.\n\t* testsuite/25_algorithms/fill/5.cc: New.\n\nFrom-SVN: r121027", "tree": {"sha": "4b0eb4567c4e5d30813186d23802313935982f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0eb4567c4e5d30813186d23802313935982f90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e90c1f98233c09b734988f2a481a1476bd2266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e90c1f98233c09b734988f2a481a1476bd2266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e90c1f98233c09b734988f2a481a1476bd2266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e90c1f98233c09b734988f2a481a1476bd2266/comments", "author": null, "committer": null, "parents": [{"sha": "6004caaf4dd656f955034b444a38a3a886a035c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6004caaf4dd656f955034b444a38a3a886a035c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6004caaf4dd656f955034b444a38a3a886a035c1"}], "stats": {"total": 340, "additions": 292, "deletions": 48}, "files": [{"sha": "80b49e1c2092626972abd78ca0ec1aac00b9c0b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9e90c1f98233c09b734988f2a481a1476bd2266", "patch": "@@ -1,3 +1,19 @@\n+2007-01-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/30449 (fill, fill_n)\n+\t* include/bits/stl_algobase.h (__fill_aux(wchar_t*, wchar_t*,\n+\tconst wchar_t&), __fill_n_aux(wchar_t*, _Size, const wchar_t&)): New.\n+\t(fill(signed char*, signed char*, const signed char&),\n+\tfill(unsigned char*, unsigned char*, const unsigned char&),\n+\tfill(char*, char*, char&), fill_n(signed char*, _Size,\n+\tconst signed char&), fill_n(unsigned char*, _Size,\n+\tconst unsigned char&), fill_n(char*, _Size, char&)): Rename to\n+\t__*_aux.\n+\t(__fill_normal, __fill_n_normal): New, call the latter.\n+\t(fill, fill_n): Adjust, call the latter.\t\n+\t* testsuite/25_algorithms/fill/4.cc: New.\n+\t* testsuite/25_algorithms/fill/5.cc: New.\n+\n 2007-01-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (basic_string<>::_S_compare): Add."}, {"sha": "c0107fc3d9f840fce21054fc9b71b050d62ec907", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 124, "deletions": 48, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=e9e90c1f98233c09b734988f2a481a1476bd2266", "patch": "@@ -1,6 +1,6 @@\n // Bits and pieces used in algorithms -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -64,6 +64,7 @@\n \n #include <bits/c++config.h>\n #include <cstring>\n+#include <cwchar>\n #include <climits>\n #include <cstdlib>\n #include <cstddef>\n@@ -540,6 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t\t   __result);\n     }\n \n+\n   template<bool>\n     struct __fill\n     {\n@@ -567,55 +569,93 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     };\n \n-  /**\n-   *  @brief Fills the range [first,last) with copies of value.\n-   *  @param  first  A forward iterator.\n-   *  @param  last   A forward iterator.\n-   *  @param  value  A reference-to-const of arbitrary type.\n-   *  @return   Nothing.\n-   *\n-   *  This function fills a range with copies of the same value.  For one-byte\n-   *  types filling contiguous areas of memory, this becomes an inline call to\n-   *  @c memset.\n-  */\n   template<typename _ForwardIterator, typename _Tp>\n-    void\n-    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\n+    inline void\n+    __fill_aux(_ForwardIterator __first, _ForwardIterator __last,\n+\t       const _Tp& __value)\n     {\n-      // concept requirements\n-      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n-\t\t\t\t  _ForwardIterator>)\n-      __glibcxx_requires_valid_range(__first, __last);\n-\n       const bool __scalar = __is_scalar<_Tp>::__value;\n       std::__fill<__scalar>::fill(__first, __last, __value);\n     }\n \n-  // Specialization: for one-byte types we can use memset.\n+  // Specialization: for char types we can use memset (wmemset).\n   inline void\n-  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)\n+  __fill_aux(unsigned char* __first, unsigned char* __last,\n+\t     const unsigned char& __c)\n   {\n-    __glibcxx_requires_valid_range(__first, __last);\n     const unsigned char __tmp = __c;\n     std::memset(__first, __tmp, __last - __first);\n   }\n \n   inline void\n-  fill(signed char* __first, signed char* __last, const signed char& __c)\n+  __fill_aux(signed char* __first, signed char* __last,\n+\t     const signed char& __c)\n   {\n-    __glibcxx_requires_valid_range(__first, __last);\n     const signed char __tmp = __c;\n     std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n   }\n \n   inline void\n-  fill(char* __first, char* __last, const char& __c)\n+  __fill_aux(char* __first, char* __last, const char& __c)\n   {\n-    __glibcxx_requires_valid_range(__first, __last);\n     const char __tmp = __c;\n     std::memset(__first, static_cast<unsigned char>(__tmp), __last - __first);\n   }\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  inline void\n+  __fill_aux(wchar_t* __first, wchar_t* __last, const wchar_t& __c)\n+  {\n+    const wchar_t __tmp = __c;\n+    std::wmemset(__first, __tmp, __last - __first);\n+  }\n+#endif\n+\n+  template<bool>\n+    struct __fill_normal\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __fill_n(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t const _Tp& __value)\n+        { std::__fill_aux(__first, __last, __value); }\n+    };\n+\n+  template<>\n+    struct __fill_normal<true>\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __fill_n(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t const _Tp& __value)\n+        { std::__fill_aux(__first.base(), __last.base(), __value); }\n+    };\n+\n+  /**\n+   *  @brief Fills the range [first,last) with copies of value.\n+   *  @param  first  A forward iterator.\n+   *  @param  last   A forward iterator.\n+   *  @param  value  A reference-to-const of arbitrary type.\n+   *  @return   Nothing.\n+   *\n+   *  This function fills a range with copies of the same value.  For char\n+   *  types filling contiguous areas of memory, this becomes an inline call\n+   *  to @c memset or @c wmemset.\n+  */\n+  template<typename _ForwardIterator, typename _Tp>\n+    inline void\n+    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n+\t\t\t\t  _ForwardIterator>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      const bool __fi = __is_normal_iterator<_ForwardIterator>::__value;\n+      std::__fill_normal<__fi>::__fill_n(__first, __last, __value);\n+    }\n+\n+\n   template<bool>\n     struct __fill_n\n     {\n@@ -643,51 +683,87 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     };\n \n-  /**\n-   *  @brief Fills the range [first,first+n) with copies of value.\n-   *  @param  first  An output iterator.\n-   *  @param  n      The count of copies to perform.\n-   *  @param  value  A reference-to-const of arbitrary type.\n-   *  @return   The iterator at first+n.\n-   *\n-   *  This function fills a range with copies of the same value.  For one-byte\n-   *  types filling contiguous areas of memory, this becomes an inline call to\n-   *  @c memset.\n-  */\n   template<typename _OutputIterator, typename _Size, typename _Tp>\n-    _OutputIterator\n-    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n+    inline _OutputIterator\n+    __fill_n_aux(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n-      // concept requirements\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)\n-\n       const bool __scalar = __is_scalar<_Tp>::__value;\n       return std::__fill_n<__scalar>::fill_n(__first, __n, __value);\n     }\n \n   template<typename _Size>\n     inline unsigned char*\n-    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)\n+    __fill_n_aux(unsigned char* __first, _Size __n, const unsigned char& __c)\n     {\n-      std::fill(__first, __first + __n, __c);\n+      std::__fill_aux(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n   template<typename _Size>\n     inline signed char*\n-    fill_n(signed char* __first, _Size __n, const signed char& __c)\n+    __fill_n_aux(signed char* __first, _Size __n, const signed char& __c)\n     {\n-      std::fill(__first, __first + __n, __c);\n+      std::__fill_aux(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n   template<typename _Size>\n     inline char*\n-    fill_n(char* __first, _Size __n, const char& __c)\n+    __fill_n_aux(char* __first, _Size __n, const char& __c)\n+    {\n+      std::__fill_aux(__first, __first + __n, __c);\n+      return __first + __n;\n+    }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<typename _Size>\n+    inline wchar_t*\n+    __fill_n_aux(wchar_t* __first, _Size __n, const wchar_t& __c)\n     {\n-      std::fill(__first, __first + __n, __c);\n+      std::__fill_aux(__first, __first + __n, __c);\n       return __first + __n;\n     }\n+#endif\n+\n+  template<bool>\n+    struct __fill_n_normal\n+    {\n+      template<typename _OI, typename _Size, typename _Tp>\n+        static _OI\n+        __fill_n_n(_OI __first, _Size __n, const _Tp& __value)\n+        { return std::__fill_n_aux(__first, __n, __value); }\n+    };\n+\n+  template<>\n+    struct __fill_n_normal<true>\n+    {\n+      template<typename _OI, typename _Size, typename _Tp>\n+        static _OI\n+        __fill_n_n(_OI __first, _Size __n, const _Tp& __value)\n+        { return _OI(std::__fill_n_aux(__first.base(), __n, __value)); }\n+    };\n+\n+  /**\n+   *  @brief Fills the range [first,first+n) with copies of value.\n+   *  @param  first  An output iterator.\n+   *  @param  n      The count of copies to perform.\n+   *  @param  value  A reference-to-const of arbitrary type.\n+   *  @return   The iterator at first+n.\n+   *\n+   *  This function fills a range with copies of the same value.  For char\n+   *  types filling contiguous areas of memory, this becomes an inline call\n+   *  to @c memset or @ wmemset.\n+  */\n+  template<typename _OutputIterator, typename _Size, typename _Tp>\n+    inline _OutputIterator\n+    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)\n+\n+      const bool __oi = __is_normal_iterator<_OutputIterator>::__value;\n+      return std::__fill_n_normal<__oi>::__fill_n_n(__first, __n, __value);\n+    }\n \n   /**\n    *  @brief Finds the places in ranges which don't match."}, {"sha": "e8d52389cdc1b963216fbe1652abe5864402b150", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/4.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F4.cc?ref=e9e90c1f98233c09b734988f2a481a1476bd2266", "patch": "@@ -0,0 +1,76 @@\n+// 2007-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.2.5 [lib.alg.fill] Fill.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n+  const int N1 = sizeof(A1) / sizeof(int);\n+  \n+  int i1[N1];\n+  fill(i1, i1 + N1, 3);\n+  VERIFY( equal(i1, i1 + N1, A1) );\n+\n+  vector<int> v1(N1);\n+  fill(v1.begin(), v1.end(), 3);\n+  VERIFY( equal(v1.begin(), v1.end(), A1) );\n+\n+  const char A2[] = {'\\3', '\\3', '\\3', '\\3', '\\3',\n+\t\t     '\\3', '\\3', '\\3', '\\3', '\\3'};\n+  const int N2 = sizeof(A2) / sizeof(char);\n+\n+  char i2[N2];\n+  fill(i2, i2 + N2, '\\3');\n+  VERIFY( equal(i2, i2 + N2, A2) );\n+\n+  vector<char> v2(N2);\n+  fill(v2.begin(), v2.end(), '\\3');\n+  VERIFY( equal(v2.begin(), v2.end(), A2) );\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  const wchar_t A3[] = {L'\\3', L'\\3', L'\\3', L'\\3', L'\\3',\n+\t\t\tL'\\3', L'\\3', L'\\3', L'\\3', L'\\3'};\n+  const int N3 = sizeof(A3) / sizeof(wchar_t);\n+\n+  wchar_t i3[N3];\n+  fill(i3, i3 + N3, L'\\3');\n+  VERIFY( equal(i3, i3 + N3, A3) );\n+\n+  vector<wchar_t> v3(N3);\n+  fill(v3.begin(), v3.end(), L'\\3');\n+  VERIFY( equal(v3.begin(), v3.end(), A3) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8fdb153b383c7f34a9018eee3020947bf59c264a", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/5.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e90c1f98233c09b734988f2a481a1476bd2266/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2F5.cc?ref=e9e90c1f98233c09b734988f2a481a1476bd2266", "patch": "@@ -0,0 +1,76 @@\n+// 2007-01-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.2.5 [lib.alg.fill] Fill_n.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A1[] = {3, 3, 3, 3, 3, 3, 3, 3, 3, 3};\n+  const int N1 = sizeof(A1) / sizeof(int);\n+  \n+  int i1[N1];\n+  fill_n(i1, N1, 3);\n+  VERIFY( equal(i1, i1 + N1, A1) );\n+\n+  vector<int> v1(N1);\n+  fill_n(v1.begin(), N1, 3);\n+  VERIFY( equal(v1.begin(), v1.end(), A1) );\n+\n+  const char A2[] = {'\\3', '\\3', '\\3', '\\3', '\\3',\n+\t\t     '\\3', '\\3', '\\3', '\\3', '\\3'};\n+  const int N2 = sizeof(A2) / sizeof(char);\n+\n+  char i2[N2];\n+  fill_n(i2, N2, '\\3');\n+  VERIFY( equal(i2, i2 + N2, A2) );\n+\n+  vector<char> v2(N2);\n+  fill_n(v2.begin(), N2, '\\3');\n+  VERIFY( equal(v2.begin(), v2.end(), A2) );\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  const wchar_t A3[] = {L'\\3', L'\\3', L'\\3', L'\\3', L'\\3',\n+\t\t\tL'\\3', L'\\3', L'\\3', L'\\3', L'\\3'};\n+  const int N3 = sizeof(A3) / sizeof(wchar_t);\n+\n+  wchar_t i3[N3];\n+  fill_n(i3, N3, L'\\3');\n+  VERIFY( equal(i3, i3 + N3, A3) );\n+\n+  vector<wchar_t> v3(N3);\n+  fill_n(v3.begin(), N3, L'\\3');\n+  VERIFY( equal(v3.begin(), v3.end(), A3) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}