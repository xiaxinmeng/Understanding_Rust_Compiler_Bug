{"sha": "a52a0a7feaf1813fac7d38a61341e0894f89fba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyYTBhN2ZlYWYxODEzZmFjN2QzOGE2MTM0MWUwODk0Zjg5ZmJhNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-06-23T08:36:05Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-06-23T08:36:05Z"}, "message": "Makefile.tpl (configure-build-[+module+], [...]): Pass [+extra_configure_args+].\n\n2004-06-22  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.tpl (configure-build-[+module+],\n\tconfigure-[+module+], configure-target-[+module+]): Pass\n\t[+extra_configure_args+].\n\t(all-build-[+module+], all-[+module+], check-[+module+],\n\tinstall-[+module+], [+make_target+]-[+module+],\n\tall-target-[+module+], check-target-[+module+],\n\tinstall-target-[+module+], [+make_target+]-target-[+module+]):\n\tPass [+extra_make_args+].\n\t(HOST_EXPORTS): Include the former GCC_HOST_EXPORTS.\n\t(GCC_HOST_EXPORTS): Remove.\n\t(configure-gcc, all-gcc, GCC_STRAP_TARGETS, profiledbootstrap,\n\tcross, check-gcc, check-gcc-c++, install-gcc,\n\tgcc-no-fixedincludes, [+make_target+]-gcc, stage[+id+]-bubble):\n\tReplace GCC_HOST_EXPORTS with HOST_EXPORTS.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r83542", "tree": {"sha": "e23782f16742a595915c7a92cf3ad3e8a67f1cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23782f16742a595915c7a92cf3ad3e8a67f1cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a52a0a7feaf1813fac7d38a61341e0894f89fba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52a0a7feaf1813fac7d38a61341e0894f89fba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52a0a7feaf1813fac7d38a61341e0894f89fba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52a0a7feaf1813fac7d38a61341e0894f89fba6/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65355d53c368e290265d38f822b1bbb8b3d23c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65355d53c368e290265d38f822b1bbb8b3d23c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65355d53c368e290265d38f822b1bbb8b3d23c69"}], "stats": {"total": 2286, "additions": 1148, "deletions": 1138}, "files": [{"sha": "ae77f6bb53ca79f63aa3b2bee30d11f6ef69f757", "filename": "ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52a0a7feaf1813fac7d38a61341e0894f89fba6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52a0a7feaf1813fac7d38a61341e0894f89fba6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a52a0a7feaf1813fac7d38a61341e0894f89fba6", "patch": "@@ -1,3 +1,21 @@\n+2004-06-22  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.tpl (configure-build-[+module+],\n+\tconfigure-[+module+], configure-target-[+module+]): Pass\n+\t[+extra_configure_args+].\n+\t(all-build-[+module+], all-[+module+], check-[+module+],\n+\tinstall-[+module+], [+make_target+]-[+module+],\n+\tall-target-[+module+], check-target-[+module+],\n+\tinstall-target-[+module+], [+make_target+]-target-[+module+]):\n+\tPass [+extra_make_args+].\n+\t(HOST_EXPORTS): Include the former GCC_HOST_EXPORTS.\n+\t(GCC_HOST_EXPORTS): Remove.\n+\t(configure-gcc, all-gcc, GCC_STRAP_TARGETS, profiledbootstrap,\n+\tcross, check-gcc, check-gcc-c++, install-gcc,\n+\tgcc-no-fixedincludes, [+make_target+]-gcc, stage[+id+]-bubble):\n+\tReplace GCC_HOST_EXPORTS with HOST_EXPORTS.\n+\t* Makefile.in: Regenerate.\n+\n 2004-06-21  Matthew Sachs  <msachs@apple.com>\n \n \t* MAINTAINERS: Added self to write-after-approval."}, {"sha": "4b63e90857c33f78f6bd0435d5f768faf3542e80", "filename": "Makefile.in", "status": "modified", "additions": 1099, "deletions": 1103, "changes": 2202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52a0a7feaf1813fac7d38a61341e0894f89fba6/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52a0a7feaf1813fac7d38a61341e0894f89fba6/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=a52a0a7feaf1813fac7d38a61341e0894f89fba6"}, {"sha": "323cee2c0e39a74a4fe936a996e6454d11201d18", "filename": "Makefile.tpl", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52a0a7feaf1813fac7d38a61341e0894f89fba6/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52a0a7feaf1813fac7d38a61341e0894f89fba6/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=a52a0a7feaf1813fac7d38a61341e0894f89fba6", "patch": "@@ -160,17 +160,13 @@ HOST_EXPORTS = \\\n \tWINDRES=\"$(WINDRES)\"; export WINDRES; \\\n \tOBJCOPY=\"$(OBJCOPY)\"; export OBJCOPY; \\\n \tOBJDUMP=\"$(OBJDUMP)\"; export OBJDUMP;\n-\n-# Similar, for the gcc directory.\n-GCC_HOST_EXPORTS = \\\n-\t$(HOST_EXPORTS) \\\n \tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n \tGMPLIBS=\"$(HOST_GMPLIBS)\"; export GMPLIBS; \\\n \tGMPINC=\"$(HOST_GMPINC)\"; export GMPINC;\n \n # Similar, for later GCC stages.\n STAGE_HOST_EXPORTS = \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \tCC=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\"; export CC; \\\n \tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/\"; export CC_FOR_BUILD;\n \n@@ -735,7 +731,7 @@ install.all: install-no-fixedincludes\n \t@if [ -f ./gcc/Makefile ] ; then \\\n \t\tr=`${PWD_COMMAND}` ; export r ; \\\n \t\t$(SET_LIB_PATH) \\\n-\t\t$(GCC_HOST_EXPORTS) \\\n+\t\t$(HOST_EXPORTS) \\\n \t\t(cd ./gcc && \\\n \t\t$(MAKE) $(FLAGS_TO_PASS) install-headers) ; \\\n \telse \\\n@@ -830,7 +826,7 @@ configure-build-[+module+]:\n \trm -f no-such-file || : ; \\\n \tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n \t  $(BUILD_CONFIGARGS) $${srcdiroption} \\\n-\t  --with-build-subdir=\"$(BUILD_SUBDIR)\" \\\n+\t  --with-build-subdir=\"$(BUILD_SUBDIR)\" [+extra_configure_flags+] \\\n \t  || exit 1\n @endif build-[+module+]\n \n@@ -842,7 +838,7 @@ all-build-[+module+]: configure-build-[+module+]\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(BUILD_EXPORTS) \\\n-\t(cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) all)\n+\t(cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) [+extra_make_flags+] all)\n @endif build-[+module+]\n [+ ENDFOR build_modules +]\n \n@@ -874,7 +870,7 @@ configure-[+module+]:\n \t    libsrcdir=\"$$s/[+module+]\";; \\\n \tesac; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n-\t  $(HOST_CONFIGARGS) $${srcdiroption} \\\n+\t  $(HOST_CONFIGARGS) $${srcdiroption} [+extra_configure_flags+] \\\n \t  || exit 1\n @endif [+module+]\n \n@@ -890,7 +886,7 @@ all-[+module+]: configure-[+module+]\n \t(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ \n \t  IF with_x \n \t    +] $(X11_FLAGS_TO_PASS)[+ \n-\t  ENDIF with_x +] all)\n+\t  ENDIF with_x +] [+extra_make_flags+] all)\n @endif [+module+]\n \n .PHONY: check-[+module+] maybe-check-[+module+]\n@@ -910,7 +906,7 @@ check-[+module+]:\n \t  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ \n \t    IF with_x \n \t      +] $(X11_FLAGS_TO_PASS)[+ \n-\t    ENDIF with_x +] check); \\\n+\t    ENDIF with_x +] [+extra_make_flags+] check); \\\n \tfi\n [+ ELSE check +]\n check-[+module+]:\n@@ -921,7 +917,7 @@ check-[+module+]:\n \t(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ \n \t  IF with_x \n \t    +] $(X11_FLAGS_TO_PASS)[+ \n-\t  ENDIF with_x +] check)\n+\t  ENDIF with_x +] [+extra_make_flags+] check)\n [+ ENDIF no_check +]\n @endif [+module+]\n \n@@ -940,7 +936,7 @@ install-[+module+]: installdirs\n \t(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ \n \t  IF with_x \n \t    +] $(X11_FLAGS_TO_PASS)[+ \n-\t  ENDIF with_x +] install)\n+\t  ENDIF with_x +] [+extra_make_flags+] install)\n [+ ENDIF no_install +]\n @endif [+module+]\n \n@@ -972,7 +968,7 @@ maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]\n \t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n \t          \"RANLIB=$${RANLIB}\" \\\n \t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \\\n-\t          [+make_target+]) \\\n+\t          [+extra_make_flags+] [+make_target+]) \\\n \t  || exit 1\n [+ ENDIF +]\n @endif [+module+]\n@@ -1043,7 +1039,7 @@ ENDIF raw_cxx +]\n \trm -f no-such-file || : ; \\\n \tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n \t  $(TARGET_CONFIGARGS) $${srcdiroption} \\\n-\t  --with-target-subdir=\"$(TARGET_SUBDIR)\" \\\n+\t  --with-target-subdir=\"$(TARGET_SUBDIR)\" [+extra_configure_flags+] \\\n \t  || exit 1\n @endif target-[+module+]\n \n@@ -1065,7 +1061,7 @@ ENDIF raw_cxx +]\n \t    IF raw_cxx \n \t  +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ \n \t    ENDIF raw_cxx \n-\t  +] all)\n+\t  +] [+extra_make_flags+] all)\n @endif target-[+module+]\n \n .PHONY: check-target-[+module+] maybe-check-target-[+module+]\n@@ -1090,7 +1086,7 @@ ENDIF raw_cxx +]\n \t    IF raw_cxx \n \t      +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ \n \t    ENDIF raw_cxx \n-\t  +] check)\n+\t  +] [+extra_make_flags+] check)\n [+ ENDIF no_check +]\n @endif target-[+module+]\n \n@@ -1112,7 +1108,7 @@ ELSE normal_cxx +]\n \t$(NORMAL_TARGET_EXPORTS) \\[+\n ENDIF raw_cxx +]\n \t(cd $(TARGET_SUBDIR)/[+module+] && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS) install)\n+\t  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+extra_make_flags+] install)\n [+ ENDIF no_install +]\n @endif target-[+module+]\n \n@@ -1148,7 +1144,7 @@ ENDIF raw_cxx +]\n \t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n \t          \"RANLIB=$${RANLIB}\" \\\n \t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \\\n-\t          [+make_target+]) \\\n+\t          [+extra_make_flags+] [+make_target+]) \\\n \t  || exit 1\n [+ ENDIF +]\n @endif target-[+module+]\n@@ -1180,7 +1176,7 @@ configure-gcc:\n \t[ -d gcc ] || mkdir gcc; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo Configuring in gcc; \\\n \tcd gcc || exit 1; \\\n \tcase $(srcdir) in \\\n@@ -1212,7 +1208,7 @@ all-gcc: configure-gcc\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \tif [ -f gcc/stage_last ] ; then \\\n \t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) quickstrap); \\\n \telse \\\n@@ -1235,7 +1231,7 @@ $(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Bootstrapping the compiler\"; \\\n \tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $@\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1255,7 +1251,7 @@ $(GCC_STRAP_TARGETS): all-bootstrap configure-gcc\n \t    compare=compare ;; \\\n \tesac; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"$$msg\"; \\\n \tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $$compare\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1268,7 +1264,7 @@ profiledbootstrap: all-bootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Bootstrapping the compiler\"; \\\n \tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stageprofile_build\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1279,7 +1275,7 @@ profiledbootstrap: all-bootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Building feedback based compiler\"; \\\n \tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stagefeedback_build\n \n@@ -1288,7 +1284,7 @@ cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Building the C and C++ compiler\"; \\\n \tcd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) LANGUAGES=\"c c++\"\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1307,7 +1303,7 @@ check-gcc:\n \t  r=`${PWD_COMMAND}`; export r; \\\n \t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  $(GCC_HOST_EXPORTS) \\\n+\t  $(HOST_EXPORTS) \\\n \t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check); \\\n \telse \\\n \t  true; \\\n@@ -1319,7 +1315,7 @@ check-gcc-c++:\n \t  r=`${PWD_COMMAND}`; export r; \\\n \t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  $(GCC_HOST_EXPORTS) \\\n+\t  $(HOST_EXPORTS) \\\n \t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++); \\\n \telse \\\n \t  true; \\\n@@ -1338,7 +1334,7 @@ install-gcc:\n \t  r=`${PWD_COMMAND}`; export r; \\\n \t  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  $(GCC_HOST_EXPORTS) \\\n+\t  $(HOST_EXPORTS) \\\n \t  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) install); \\\n \telse \\\n \t  true; \\\n@@ -1360,7 +1356,7 @@ gcc-no-fixedincludes:\n \t  r=`${PWD_COMMAND}`; export r; \\\n \t  s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \\\n \t  $(SET_LIB_PATH) \\\n-\t  $(GCC_HOST_EXPORTS) \\\n+\t  $(HOST_EXPORTS) \\\n \t  (cd ./gcc && \\\n \t   $(MAKE) $(GCC_FLAGS_TO_PASS) install); \\\n \t  rm -rf gcc/include; \\\n@@ -1384,7 +1380,7 @@ maybe-[+make_target+]-gcc: [+make_target+]-gcc\n \tfor flag in $(EXTRA_GCC_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n \tdone; \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Doing [+make_target+] in gcc\" ; \\\n \t(cd gcc && \\\n \t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n@@ -1508,7 +1504,7 @@ configure-stage[+id+]-gcc: [+ IF prev +] all-stage[+prev+]-gcc [+\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \\\n \t$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \\\n-\t$(GCC_HOST_EXPORTS) [+ ENDIF prev +] \\\n+\t$(HOST_EXPORTS) [+ ENDIF prev +] \\\n \techo Configuring stage [+id+] in gcc ; \\\n \tcd gcc || exit 1; \\\n \tcase $(srcdir) in \\\n@@ -1532,7 +1528,7 @@ all-stage[+id+]-gcc: configure-stage[+id+]-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \\\n \t$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \\\n-\t$(GCC_HOST_EXPORTS) [+ ENDIF prev +] \\\n+\t$(HOST_EXPORTS) [+ ENDIF prev +] \\\n \tcd gcc && \\\n \t$(MAKE) $(GCC_FLAGS_TO_PASS) [+ IF prev +] \\\n \t\t$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \\\n@@ -1618,7 +1614,7 @@ profiledbootstrap: all-bootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Bootstrapping the compiler\"; \\\n \t$(MAKE) stageprofile-bubble distclean-stagefeedback stageprofile-start\n \t@r=`${PWD_COMMAND}`; export r; \\\n@@ -1629,7 +1625,7 @@ profiledbootstrap: all-bootstrap configure-gcc\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(SET_LIB_PATH) \\\n-\t$(GCC_HOST_EXPORTS) \\\n+\t$(HOST_EXPORTS) \\\n \techo \"Building feedback based compiler\"; \\\n \t$(MAKE) stagefeedback-bubble stagefeedback-end\n "}]}