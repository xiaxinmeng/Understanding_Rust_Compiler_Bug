{"sha": "f5db779b2b87248590386d588a1f8c662169d081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkYjc3OWIyYjg3MjQ4NTkwMzg2ZDU4OGExZjhjNjYyMTY5ZDA4MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-11T14:04:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-11T14:04:07Z"}, "message": "* config/s390/s390.h (s390_tune_string, s390_arch_string)\n\t(s390_warn_framesize_string, s390_warn_dynamicstack_string)\n\t(s390_stack_size_string, s390_stack_guard_string, target_flags)\n\t(MASK_HARD_FLOAT, MASK_SMALL_EXEC, MASK_DEBUG_ARG, MASK_64BIT)\n\t(MASK_ZARCH, MASK_MVCLE, MASK_TPF_PROFILING, MASK_NO_FUSED_MADD)\n\t(MASK_BACKCHAIN, MASK_PACKED_STACK, TARGET_HARD_FLOAT)\n\t(TARGET_SOFT_FLOAT, TARGET_SMALL_EXEC, TARGET_DEBUG_ARG)\n\t(TARGET_64BIT, TARGET_ZARCH, TARGET_MVCLE, TARGET_TPF_PROFILING)\n\t(TARGET_NO_FUSED_MADD, TARGET_FUSED_MADD, TARGET_BACKCHAIN)\n\t(TARGET_PACKED_STACK, TARGET_SWITCHES, TARGET_OPTIONS): Delete.\n\t* config/s390/s390.c (TARGET_DEFAULT_TARGET_FLAGS): Override default.\n\t(TARGET_HANDLE_OPTION): Likewise.\n\t(s390_tune): Initialize to PROCESSOR_max.\n\t(s390_arch_string): Make static.\n\t(s390_tune_string, s390_warn_framesize_string): Delete.\n\t(s390_warn_dynamicstack_string, s390_stack_size_string): Delete.\n\t(s390_stack_guard_string, s390_warn_dynamicstack_p): Delete.\n\t(s390_handle_arch_option, s390_handle_option): New functions.\n\t(override_options): Remove parsing of option strings.\n\t* config/s390/s390.opt: New file.\n\nFrom-SVN: r97968", "tree": {"sha": "e592acd0b117a0f67907a80979cb6d4745e8ff7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e592acd0b117a0f67907a80979cb6d4745e8ff7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5db779b2b87248590386d588a1f8c662169d081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5db779b2b87248590386d588a1f8c662169d081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5db779b2b87248590386d588a1f8c662169d081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5db779b2b87248590386d588a1f8c662169d081/comments", "author": null, "committer": null, "parents": [{"sha": "84971f0156fab4c11ad99d9729f3259465191bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84971f0156fab4c11ad99d9729f3259465191bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84971f0156fab4c11ad99d9729f3259465191bed"}], "stats": {"total": 342, "additions": 193, "deletions": 149}, "files": [{"sha": "01b7c253d817fd0624f08d641d8aa1cd23853bbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5db779b2b87248590386d588a1f8c662169d081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5db779b2b87248590386d588a1f8c662169d081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5db779b2b87248590386d588a1f8c662169d081", "patch": "@@ -1,3 +1,26 @@\n+2005-04-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/s390/s390.h (s390_tune_string, s390_arch_string)\n+\t(s390_warn_framesize_string, s390_warn_dynamicstack_string)\n+\t(s390_stack_size_string, s390_stack_guard_string, target_flags)\n+\t(MASK_HARD_FLOAT, MASK_SMALL_EXEC, MASK_DEBUG_ARG, MASK_64BIT)\n+\t(MASK_ZARCH, MASK_MVCLE, MASK_TPF_PROFILING, MASK_NO_FUSED_MADD)\n+\t(MASK_BACKCHAIN, MASK_PACKED_STACK, TARGET_HARD_FLOAT)\n+\t(TARGET_SOFT_FLOAT, TARGET_SMALL_EXEC, TARGET_DEBUG_ARG)\n+\t(TARGET_64BIT, TARGET_ZARCH, TARGET_MVCLE, TARGET_TPF_PROFILING)\n+\t(TARGET_NO_FUSED_MADD, TARGET_FUSED_MADD, TARGET_BACKCHAIN)\n+\t(TARGET_PACKED_STACK, TARGET_SWITCHES, TARGET_OPTIONS): Delete.\n+\t* config/s390/s390.c (TARGET_DEFAULT_TARGET_FLAGS): Override default.\n+\t(TARGET_HANDLE_OPTION): Likewise.\n+\t(s390_tune): Initialize to PROCESSOR_max.\n+\t(s390_arch_string): Make static.\n+\t(s390_tune_string, s390_warn_framesize_string): Delete.\n+\t(s390_warn_dynamicstack_string, s390_stack_size_string): Delete.\n+\t(s390_stack_guard_string, s390_warn_dynamicstack_p): Delete.\n+\t(s390_handle_arch_option, s390_handle_option): New functions.\n+\t(override_options): Remove parsing of option strings.\n+\t* config/s390/s390.opt: New file.\n+\n 2005-04-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-complex.c (expand_vector_operations): Call"}, {"sha": "dfa4ec46b36005a317b4af13adcea6a4f45c27f4", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 74, "deletions": 73, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f5db779b2b87248590386d588a1f8c662169d081", "patch": "@@ -54,6 +54,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n \n static bool s390_assemble_integer (rtx, unsigned int, int);\n+static bool s390_handle_option (size_t, const char *, int);\n static void s390_encode_section_info (tree, rtx, int);\n static bool s390_cannot_force_const_mem (rtx);\n static rtx s390_delegitimize_address (rtx);\n@@ -197,6 +198,11 @@ struct processor_costs z990_cost =\n #undef  TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_FUSED_MADD)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION s390_handle_option\n+\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n \n@@ -293,23 +299,14 @@ struct s390_address\n };\n \n /* Which cpu are we tuning for.  */\n-enum processor_type s390_tune;\n+enum processor_type s390_tune = PROCESSOR_max;\n enum processor_flags s390_tune_flags;\n /* Which instruction set architecture to use.  */\n enum processor_type s390_arch;\n enum processor_flags s390_arch_flags;\n-\n-/* Strings to hold which cpu and instruction set architecture  to use.  */\n-const char *s390_tune_string;\t\t/* for -mtune=<xxx> */\n-const char *s390_arch_string;\t\t/* for -march=<xxx> */\n-\n-const char *s390_warn_framesize_string;\n-const char *s390_warn_dynamicstack_string;\n-const char *s390_stack_size_string;\n-const char *s390_stack_guard_string;\n+static const char *s390_arch_string;\n \n HOST_WIDE_INT s390_warn_framesize = 0;\n-bool s390_warn_dynamicstack_p = 0;\n HOST_WIDE_INT s390_stack_size = 0;\n HOST_WIDE_INT s390_stack_guard = 0;\n \n@@ -1244,10 +1241,14 @@ optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n   flag_asynchronous_unwind_tables = 1;\n }\n \n-void\n-override_options (void)\n+/* Return true if ARG is the name of a processor.  Set *TYPE and *FLAGS\n+   to the associated processor_type and processor_flags if so.  */\n+\n+static bool\n+s390_handle_arch_option (const char *arg,\n+\t\t\t enum processor_type *type,\n+\t\t\t enum processor_flags *flags)\n {\n-  int i;\n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n@@ -1262,9 +1263,57 @@ override_options (void)\n       {\"z990\", PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH\n \t\t\t\t    | PF_LONG_DISPLACEMENT},\n     };\n+  size_t i;\n+\n+  for (i = 0; i < ARRAY_SIZE (processor_alias_table); i++)\n+    if (strcmp (arg, processor_alias_table[i].name) == 0)\n+      {\n+\t*type = processor_alias_table[i].processor;\n+\t*flags = processor_alias_table[i].flags;\n+\treturn true;\n+      }\n+  return false;\n+}\n+\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+s390_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_march_:\n+      s390_arch_string = arg;\n+      return s390_handle_arch_option (arg, &s390_arch, &s390_arch_flags);\n+\n+    case OPT_mstack_guard_:\n+      if (sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_stack_guard) != 1)\n+\treturn false;\n+      if (exact_log2 (s390_stack_guard) == -1)\n+\terror (\"stack guard value must be an exact power of 2\");\n+      return true;\n+\n+    case OPT_mstack_size_:\n+      if (sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_stack_size) != 1)\n+\treturn false;\n+      if (exact_log2 (s390_stack_size) == -1)\n+\terror (\"stack size must be an exact power of 2\");\n+      return true;\n \n-  int const pta_size = ARRAY_SIZE (processor_alias_table);\n+    case OPT_mtune_:\n+      return s390_handle_arch_option (arg, &s390_tune, &s390_tune_flags);\n \n+    case OPT_mwarn_framesize_:\n+      return sscanf (arg, HOST_WIDE_INT_PRINT_DEC, &s390_warn_framesize) == 1;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n+void\n+override_options (void)\n+{\n   /* Acquire a unique set number for our register saves and restores.  */\n   s390_sr_alias_set = new_alias_set ();\n \n@@ -1282,36 +1331,16 @@ override_options (void)\n \n   /* Determine processor architectural level.  */\n   if (!s390_arch_string)\n-    s390_arch_string = TARGET_ZARCH? \"z900\" : \"g5\";\n-\n-  for (i = 0; i < pta_size; i++)\n-    if (! strcmp (s390_arch_string, processor_alias_table[i].name))\n-      {\n-\ts390_arch = processor_alias_table[i].processor;\n-\ts390_arch_flags = processor_alias_table[i].flags;\n-\tbreak;\n-      }\n-  if (i == pta_size)\n-    error (\"Unknown cpu used in -march=%s.\", s390_arch_string);\n+    {\n+      s390_arch_string = TARGET_ZARCH? \"z900\" : \"g5\";\n+      s390_handle_arch_option (s390_arch_string, &s390_arch, &s390_arch_flags);\n+    }\n \n   /* Determine processor to tune for.  */\n-  if (!s390_tune_string)\n+  if (s390_tune == PROCESSOR_max)\n     {\n       s390_tune = s390_arch;\n       s390_tune_flags = s390_arch_flags;\n-      s390_tune_string = s390_arch_string;\n-    }\n-  else\n-    {\n-      for (i = 0; i < pta_size; i++)\n-\tif (! strcmp (s390_tune_string, processor_alias_table[i].name))\n-\t  {\n-\t    s390_tune = processor_alias_table[i].processor;\n-\t    s390_tune_flags = processor_alias_table[i].flags;\n-\t    break;\n-\t  }\n-      if (i == pta_size)\n-\terror (\"Unknown cpu used in -mtune=%s.\", s390_tune_string);\n     }\n \n   /* Sanity checks.  */\n@@ -1332,42 +1361,14 @@ override_options (void)\n     error (\"-mbackchain -mpacked-stack -mhard-float are not supported \"\n \t   \"in combination.\");\n \n-  if (s390_warn_framesize_string)\n-    {\n-      if (sscanf (s390_warn_framesize_string, HOST_WIDE_INT_PRINT_DEC,\n-\t\t  &s390_warn_framesize) != 1)\n-\terror (\"invalid value for -mwarn-framesize\");\n-    }\n-\n-  if (s390_warn_dynamicstack_string)\n-    s390_warn_dynamicstack_p = 1;\n-  \n-  if (s390_stack_size_string)\n+  if (s390_stack_size)\n     {\n-      if (sscanf (s390_stack_size_string, HOST_WIDE_INT_PRINT_DEC, \n-\t\t  &s390_stack_size) != 1)\n-\terror (\"invalid value for -mstack-size\");\n-      \n-      if (exact_log2 (s390_stack_size) == -1)\n-\terror (\"stack size must be an exact power of 2\");\n-      \n-      if (s390_stack_guard_string)\n-\t{\n-\t  if (sscanf (s390_stack_guard_string, HOST_WIDE_INT_PRINT_DEC, \n-\t\t      &s390_stack_guard) != 1)\n-\t    error (\"invalid value for -mstack-guard\");\n-\t  \n-\t  if (s390_stack_guard >= s390_stack_size)\n-\t    error (\"stack size must be greater than the stack guard value\");\n- \n-\t  if (exact_log2 (s390_stack_guard) == -1)\n-\t    error (\"stack guard value must be an exact power of 2\");\n-\t}\n-      else\n+      if (!s390_stack_guard)\n \terror (\"-mstack-size implies use of -mstack-guard\");\n+      else if (s390_stack_guard >= s390_stack_size)\n+\terror (\"stack size must be greater than the stack guard value\");\n     }\n-  \n-  if (s390_stack_guard_string && !s390_stack_size_string)\n+  else if (s390_stack_guard)\n     error (\"-mstack-guard implies use of -mstack-size\"); \n }\n "}, {"sha": "329a7a7f7080ad4d91d33e23c24e2453b889fbaf", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=f5db779b2b87248590386d588a1f8c662169d081", "patch": "@@ -54,16 +54,9 @@ enum processor_flags\n \n extern enum processor_type s390_tune;\n extern enum processor_flags s390_tune_flags;\n-extern const char *s390_tune_string;\n \n extern enum processor_type s390_arch;\n extern enum processor_flags s390_arch_flags;\n-extern const char *s390_arch_string;\n-\n-extern const char *s390_warn_framesize_string;\n-extern const char *s390_warn_dynamicstack_string;\n-extern const char *s390_stack_size_string;\n-extern const char *s390_stack_guard_string;\n \n #define TARGET_CPU_IEEE_FLOAT \\\n \t(s390_arch_flags & PF_IEEE_FLOAT)\n@@ -93,33 +86,6 @@ extern const char *s390_stack_guard_string;\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Optional target features.  */\n-extern int target_flags;\n-\n-#define MASK_HARD_FLOAT            0x01\n-#define MASK_SMALL_EXEC            0x04\n-#define MASK_DEBUG_ARG             0x08\n-#define MASK_64BIT                 0x10\n-#define MASK_ZARCH                 0x20\n-#define MASK_MVCLE                 0x40\n-#define MASK_TPF_PROFILING         0x80\n-#define MASK_NO_FUSED_MADD         0x100\n-#define MASK_BACKCHAIN             0x200\n-#define MASK_PACKED_STACK          0x400\n-\n-#define TARGET_HARD_FLOAT          (target_flags & MASK_HARD_FLOAT)\n-#define TARGET_SOFT_FLOAT          (!(target_flags & MASK_HARD_FLOAT))\n-#define TARGET_SMALL_EXEC          (target_flags & MASK_SMALL_EXEC)\n-#define TARGET_DEBUG_ARG           (target_flags & MASK_DEBUG_ARG)\n-#define TARGET_64BIT               (target_flags & MASK_64BIT)\n-#define TARGET_ZARCH               (target_flags & MASK_ZARCH)\n-#define TARGET_MVCLE               (target_flags & MASK_MVCLE)\n-#define TARGET_TPF_PROFILING       (target_flags & MASK_TPF_PROFILING)\n-#define TARGET_NO_FUSED_MADD       (target_flags & MASK_NO_FUSED_MADD)\n-#define TARGET_FUSED_MADD\t   (! TARGET_NO_FUSED_MADD)\n-#define TARGET_BACKCHAIN           (target_flags & MASK_BACKCHAIN)\n-#define TARGET_PACKED_STACK        (target_flags & MASK_PACKED_STACK)\n-\n /* ??? Once this actually works, it could be made a runtime option.  */\n #define TARGET_IBM_FLOAT           0\n #define TARGET_IEEE_FLOAT          1\n@@ -130,48 +96,6 @@ extern int target_flags;\n #define TARGET_DEFAULT             MASK_HARD_FLOAT\n #endif\n \n-#define TARGET_SWITCHES                                                      \\\n-{ { \"hard-float\",          1, N_(\"Use hardware fp\")},                        \\\n-  { \"soft-float\",         -1, N_(\"Don't use hardware fp\")},                  \\\n-  { \"small-exec\",          4, N_(\"Use bras for executable < 64k\")},          \\\n-  { \"no-small-exec\",      -4, N_(\"Don't use bras\")},                         \\\n-  { \"debug\",               8, N_(\"Additional debug prints\")},                \\\n-  { \"no-debug\",           -8, N_(\"Don't print additional debug prints\")},    \\\n-  { \"64\",                 16, N_(\"64 bit ABI\")},                             \\\n-  { \"31\",                -16, N_(\"31 bit ABI\")},                             \\\n-  { \"zarch\",              32, N_(\"z/Architecture\")},                         \\\n-  { \"esa\",               -32, N_(\"ESA/390 architecture\")},                   \\\n-  { \"mvcle\",              64, N_(\"mvcle use\")},                              \\\n-  { \"no-mvcle\",          -64, N_(\"mvc&ex\")},                                 \\\n-  { \"tpf-trace\",         128, N_(\"Enable tpf OS tracing code\")},             \\\n-  { \"no-tpf-trace\",     -128, N_(\"Disable tpf OS tracing code\")},            \\\n-  { \"no-fused-madd\",     256, N_(\"Disable fused multiply/add instructions\")},\\\n-  { \"fused-madd\",       -256, N_(\"Enable fused multiply/add instructions\")}, \\\n-  { \"backchain\",         512, N_(\"Maintain backchain pointer\")},             \\\n-  { \"no-backchain\",     -512, N_(\"Don't maintain backchain pointer\")},       \\\n-  { \"packed-stack\",     1024, N_(\"Use packed stack layout\")},                \\\n-  { \"no-packed-stack\", -1024, N_(\"Don't use packed stack layout\")},          \\\n-  { \"\", TARGET_DEFAULT, 0 } }\n-\n-#define TARGET_OPTIONS                                                         \\\n-{ { \"tune=\",            &s390_tune_string,                                     \\\n-    N_(\"Schedule code for given CPU\"), 0},                                     \\\n-  { \"arch=\",            &s390_arch_string,                                     \\\n-    N_(\"Generate code for given CPU\"), 0},                                     \\\n-  { \"warn-framesize=\",   &s390_warn_framesize_string,                          \\\n-    N_(\"Warn if a single function's framesize exceeds the given framesize\"),   \\\n-       0},                                                                     \\\n-  { \"warn-dynamicstack\", &s390_warn_dynamicstack_string,                       \\\n-    N_(\"Warn if a function uses alloca or creates an array with dynamic size\"),\\\n-       0},                                                                     \\\n-  { \"stack-size=\",       &s390_stack_size_string,                              \\\n-    N_(\"Emit extra code in the function prologue in order to trap if the stack\"\\\n-       \"size exceeds the given limit\"), 0},                                    \\\n-  { \"stack-guard=\",      &s390_stack_guard_string,                             \\\n-    N_(\"Set the max. number of bytes which has to be left to stack size \"      \\\n-       \"before a trap instruction is triggered\"), 0},                          \\\n-}\n-\n /* Support for configure-time defaults.  */\n #define OPTION_DEFAULT_SPECS \t\t\t\t\t\\\n   { \"mode\", \"%{!mesa:%{!mzarch:-m%(VALUE)}}\" },\t\t\t\\"}, {"sha": "9ece6f13a3cd7878c840ebe038c622004c8645c0", "filename": "gcc/config/s390/s390.opt", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5db779b2b87248590386d588a1f8c662169d081/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=f5db779b2b87248590386d588a1f8c662169d081", "patch": "@@ -0,0 +1,96 @@\n+; Options for the S/390 / zSeries port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m31\n+Target Report RejectNegative InverseMask(64BIT)\n+31 bit ABI\n+\n+m64\n+Target Report RejectNegative Mask(64BIT)\n+64 bit ABI\n+\n+march=\n+Target RejectNegative Joined\n+Generate code for given CPU\n+\n+mbackchain\n+Target Report Mask(BACKCHAIN)\n+Maintain backchain pointer\n+\n+mdebug\n+Target Report Mask(DEBUG_ARG)\n+Additional debug prints\n+\n+mesa\n+Target Report RejectNegative InverseMask(ZARCH)\n+ESA/390 architecture\n+\n+mfused-madd\n+Target Report Mask(FUSED_MADD)\n+Enable fused multiply/add instructions\n+\n+mhard-float\n+Target Report RejectNegative Mask(HARD_FLOAT)\n+Use hardware fp\n+\n+mpacked-stack\n+Target Report Mask(PACKED_STACK)\n+Use packed stack layout\n+\n+msmall-exec\n+Target Report Mask(SMALL_EXEC)\n+Use bras for executable < 64k\n+\n+msoft-float\n+Target Report RejectNegative InverseMask(HARD_FLOAT, SOFT_FLOAT)\n+Don't use hardware fp\n+\n+mstack-guard=\n+Target RejectNegative Joined\n+Set the max. number of bytes which has to be left to stack size before a trap instruction is triggered\n+\n+mstack-size=\n+Target RejectNegative Joined\n+Emit extra code in the function prologue in order to trap if the stack size exceeds the given limit\n+\n+mtpf-trace\n+Target Report Mask(TPF_PROFILING)\n+Enable tpf OS tracing code\n+\n+mtune=\n+Target RejectNegative Joined\n+Schedule code for given CPU\n+\n+mvcle\n+Target Report Mask(MVCLE)\n+mvcle use\n+\n+mwarn-dynamicstack\n+Target RejectNegative Var(s390_warn_dynamicstack_p)\n+Warn if a function uses alloca or creates an array with dynamic size\n+\n+mwarn-framesize=\n+Target RejectNegative Joined\n+Warn if a single function's framesize exceeds the given framesize\n+\n+mzarch\n+Target Report RejectNegative Mask(ZARCH)\n+z/Architecture"}]}