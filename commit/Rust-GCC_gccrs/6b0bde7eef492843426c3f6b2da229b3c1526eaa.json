{"sha": "6b0bde7eef492843426c3f6b2da229b3c1526eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwYmRlN2VlZjQ5Mjg0MzQyNmMzZjZiMmRhMjI5YjNjMTUyNmVhYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-08-06T11:21:05Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-08-06T11:21:05Z"}, "message": "middle-end/AArch64: Fix bootstrap after vec changes\n\nThe build is broken since a3d3e8c362c2 since it's deleted the ability to pass\nvec<> by value and now must be past by reference.\n\nHowever some language hooks used by AArch64 were not updated and breaks the\nbuild on AArch64.  This patch updates these hooks.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (c_simulate_enum_decl): Pass vec<> by pointer.\n\t* c-tree.h (c_simulate_enum_decl): Likewise.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-sve-builtins.cc (register_svpattern,\n\tregister_svprfop): Pass vec<> by pointer.\n\t* langhooks-def.h (lhd_simulate_enum_decl): Likewise.\n\t* langhooks.c (lhd_simulate_enum_decl): Likewise.\n\t* langhooks.h (struct lang_hooks_for_types): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* cp-objcp-common.h (cxx_simulate_enum_decl): Pass vec<> by pointer.\n\t* decl.c (cxx_simulate_enum_decl): Likewise.", "tree": {"sha": "f9a4007c56b266703f69fc3a673e0accbdef6362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9a4007c56b266703f69fc3a673e0accbdef6362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b0bde7eef492843426c3f6b2da229b3c1526eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0bde7eef492843426c3f6b2da229b3c1526eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0bde7eef492843426c3f6b2da229b3c1526eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0bde7eef492843426c3f6b2da229b3c1526eaa/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c94db20be9af3cb0376292e2d4672b515558231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c94db20be9af3cb0376292e2d4672b515558231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c94db20be9af3cb0376292e2d4672b515558231"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "221a67fe57be105dfb88f5053179adb62c9cc47d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -9379,7 +9379,7 @@ build_enumerator (location_t decl_loc, location_t loc,\n \n tree\n c_simulate_enum_decl (location_t loc, const char *name,\n-\t\t      vec<string_int_pair> values)\n+\t\t      vec<string_int_pair> *values_ptr)\n {\n   location_t saved_loc = input_location;\n   input_location = loc;\n@@ -9389,6 +9389,7 @@ c_simulate_enum_decl (location_t loc, const char *name,\n \n   tree value_chain = NULL_TREE;\n   string_int_pair *value;\n+  vec<string_int_pair> values = *values_ptr;\n   unsigned int i;\n   FOR_EACH_VEC_ELT (values, i, value)\n     {"}, {"sha": "a8a90eae30d54006e83b20cdcc7aa7a582686c6c", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -595,7 +595,7 @@ extern void finish_function (location_t = input_location);\n extern tree finish_struct (location_t, tree, tree, tree,\n \t\t\t   class c_struct_parse_info *);\n extern tree c_simulate_enum_decl (location_t, const char *,\n-\t\t\t\t  vec<string_int_pair>);\n+\t\t\t\t  vec<string_int_pair> *);\n extern struct c_arg_info *build_arg_info (void);\n extern struct c_arg_info *get_parm_info (bool, tree);\n extern tree grokfield (location_t, struct c_declarator *,"}, {"sha": "f71b287570e4c8c00149e864db4bf03941382672", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -3499,7 +3499,7 @@ register_svpattern ()\n #undef PUSH\n \n   acle_svpattern = lang_hooks.types.simulate_enum_decl (input_location,\n-\t\t\t\t\t\t\t\"svpattern\", values);\n+\t\t\t\t\t\t\t\"svpattern\", &values);\n }\n \n /* Register the svprfop enum.  */\n@@ -3513,7 +3513,7 @@ register_svprfop ()\n #undef PUSH\n \n   acle_svprfop = lang_hooks.types.simulate_enum_decl (input_location,\n-\t\t\t\t\t\t      \"svprfop\", values);\n+\t\t\t\t\t\t      \"svprfop\", &values);\n }\n \n /* Implement #pragma GCC aarch64 \"arm_sve.h\".  */"}, {"sha": "f1704aad5578c4132bcee5b3f9799dbacb6fd114", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -38,7 +38,7 @@ extern bool cp_handle_option (size_t, const char *, HOST_WIDE_INT, int,\n \t\t\t      location_t, const struct cl_option_handlers *);\n extern tree cxx_make_type_hook\t\t\t(tree_code);\n extern tree cxx_simulate_enum_decl (location_t, const char *,\n-\t\t\t\t    vec<string_int_pair>);\n+\t\t\t\t    vec<string_int_pair> *);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,"}, {"sha": "f626f1e65ee644a494eb57fa5bcb7f1eb05ff667", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -16408,7 +16408,7 @@ lookup_enumerator (tree enumtype, tree name)\n \n tree\n cxx_simulate_enum_decl (location_t loc, const char *name,\n-\t\t\tvec<string_int_pair> values)\n+\t\t\tvec<string_int_pair> *values)\n {\n   location_t saved_loc = input_location;\n   input_location = loc;"}, {"sha": "02b4681dd96e1479cad1d9a233f308c2c1acba9f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -55,7 +55,7 @@ extern void lhd_set_decl_assembler_name (tree decl);\n extern void lhd_overwrite_decl_assembler_name (tree decl, tree name);\n extern bool lhd_warn_unused_global_decl (const_tree);\n extern tree lhd_simulate_enum_decl (location_t, const char *,\n-\t\t\t\t    vec<string_int_pair>);\n+\t\t\t\t    vec<string_int_pair> *);\n extern tree lhd_type_for_size (unsigned precision, int unsignedp);\n extern void lhd_incomplete_type_error (location_t, const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);"}, {"sha": "48c723777786e8bb3e3ab3c37ebe1ce296db573a", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -485,14 +485,15 @@ lhd_make_node (enum tree_code code)\n    might be reusable elsewhere.  */\n tree\n lhd_simulate_enum_decl (location_t loc, const char *name,\n-\t\t\tvec<string_int_pair> values)\n+\t\t\tvec<string_int_pair> *values_ptr)\n {\n   tree enumtype = lang_hooks.types.make_type (ENUMERAL_TYPE);\n   tree enumdecl = build_decl (loc, TYPE_DECL, get_identifier (name), enumtype);\n   TYPE_STUB_DECL (enumtype) = enumdecl;\n \n   tree value_chain = NULL_TREE;\n   string_int_pair *value;\n+  vec<string_int_pair> values = *values_ptr;\n   unsigned int i;\n   FOR_EACH_VEC_ELT (values, i, value)\n     {"}, {"sha": "ffd3e0bf2db588eafae3bcff551327207fa44881", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0bde7eef492843426c3f6b2da229b3c1526eaa/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=6b0bde7eef492843426c3f6b2da229b3c1526eaa", "patch": "@@ -66,7 +66,7 @@ struct lang_hooks_for_types\n \n   /* Make an enum type with the given name and values, associating\n      them all with the given source location.  */\n-  tree (*simulate_enum_decl) (location_t, const char *, vec<string_int_pair>);\n+  tree (*simulate_enum_decl) (location_t, const char *, vec<string_int_pair> *);\n \n   /* Return what kind of RECORD_TYPE this is, mainly for purposes of\n      debug information.  If not defined, record types are assumed to"}]}