{"sha": "bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiZGM0ZTFjZDIwMjIzYzU0ZTBhZTRkMWUzMWNjNmVhNzhmYTg4Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2011-12-30T18:22:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2011-12-30T18:22:16Z"}, "message": "gcov.c (total_lines, [...]): New global vars.\n\n\t* gcov.c (total_lines, total_executed): New global vars.\n\t(generate_results): Call executed_summary.\n\t(executed_summary): New function, broken out of ...\n\t(function_summary): ... here.  Call it.\n\t* coverage.c (coverage_finish): Also check for local_tick == -1.\n\t* gcov-dump (tag_function): Correct labelling typo.\n\nFrom-SVN: r182744", "tree": {"sha": "b11bd63164779cb7109aa20e284752f589cab45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b11bd63164779cb7109aa20e284752f589cab45c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04dbc287a6679cf4c922df5ae7e575367d1e25bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dbc287a6679cf4c922df5ae7e575367d1e25bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04dbc287a6679cf4c922df5ae7e575367d1e25bd"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "d4ee25a0b9f7043d91aef8c291be706336c2e531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "patch": "@@ -1,3 +1,12 @@\n+2011-12-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcov.c (total_lines, total_executed): New global vars.\n+\t(generate_results): Call executed_summary.\n+\t(executed_summary): New function, broken out of ...\n+\t(function_summary): ... here.  Call it.\n+\t* coverage.c (coverage_finish): Also check for local_tick == -1.\n+\t* gcov-dump (tag_function): Correct labelling typo.\n+\n 2011-12-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/51623"}, {"sha": "091e7e3e8c53f8f6d56d2411bb355cc41707857e", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "patch": "@@ -1119,7 +1119,7 @@ coverage_finish (void)\n   if (bbg_file_name && gcov_close ())\n     unlink (bbg_file_name);\n   \n-  if (!local_tick)\n+  if (!local_tick || local_tick == (unsigned)-1)\n     /* Only remove the da file, if we cannot stamp it.  If we can\n        stamp it, libgcov will DTRT.  */\n     unlink (da_file_name);"}, {"sha": "da0aa59d1767dd8018fecd97997e80f45ae9a321", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "patch": "@@ -286,7 +286,7 @@ tag_function (const char *filename ATTRIBUTE_UNUSED,\n     {\n       printf (\" ident=%u\", gcov_read_unsigned ());\n       printf (\", lineno_checksum=0x%08x\", gcov_read_unsigned ());\n-      printf (\", cfg_checksum_checksum=0x%08x\", gcov_read_unsigned ());\n+      printf (\", cfg_checksum=0x%08x\", gcov_read_unsigned ());\n \n       if (gcov_position () - pos < length)\n \t{"}, {"sha": "da9f85c780a31a191edf9fa019e2ccf5563fd979", "filename": "gcc/gcov.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "patch": "@@ -278,6 +278,9 @@ static unsigned a_names;    /* Allocated names */\n static unsigned object_runs;\n static unsigned program_count;\n \n+static unsigned total_lines;\n+static unsigned total_executed;\n+\n /* Modification time of graph file.  */\n \n static time_t bbg_file_time;\n@@ -380,6 +383,7 @@ static void solve_flow_graph (function_t *);\n static void find_exception_blocks (function_t *);\n static void add_branch_counts (coverage_t *, const arc_t *);\n static void add_line_counts (coverage_t *, function_t *);\n+static void executed_summary (unsigned, unsigned);\n static void function_summary (const coverage_t *, const char *);\n static const char *format_gcov (gcov_type, gcov_type, int);\n static void accumulate_line_counts (source_t *);\n@@ -702,6 +706,8 @@ generate_results (const char *file_name)\n       \n       accumulate_line_counts (src);\n       function_summary (&src->coverage, \"File\");\n+      total_lines += src->coverage.lines;\n+      total_executed += src->coverage.lines_executed;\n       if (flag_gcov_file && src->coverage.lines)\n \t{\n \t  char *gcov_file_name\n@@ -724,6 +730,9 @@ generate_results (const char *file_name)\n \t}\n       fnotice (stdout, \"\\n\");\n     }\n+\n+  if (!file_name)\n+    executed_summary (total_lines, total_executed);\n }\n \n /* Release a function structure */\n@@ -1666,20 +1675,25 @@ format_gcov (gcov_type top, gcov_type bottom, int dp)\n   return buffer;\n }\n \n-\n-/* Output summary info for a function.  */\n+/* Summary of execution */\n \n static void\n-function_summary (const coverage_t *coverage, const char *title)\n+executed_summary (unsigned lines, unsigned executed)\n {\n-  fnotice (stdout, \"%s '%s'\\n\", title, coverage->name);\n-\n-  if (coverage->lines)\n+  if (lines)\n     fnotice (stdout, \"Lines executed:%s of %d\\n\",\n-\t     format_gcov (coverage->lines_executed, coverage->lines, 2),\n-\t     coverage->lines);\n+\t     format_gcov (executed, lines, 2), lines);\n   else\n     fnotice (stdout, \"No executable lines\\n\");\n+}\n+  \n+/* Output summary info for a function or file.  */\n+\n+static void\n+function_summary (const coverage_t *coverage, const char *title)\n+{\n+  fnotice (stdout, \"%s '%s'\\n\", title, coverage->name);\n+  executed_summary (coverage->lines, coverage->lines_executed);\n \n   if (flag_branches)\n     {"}]}