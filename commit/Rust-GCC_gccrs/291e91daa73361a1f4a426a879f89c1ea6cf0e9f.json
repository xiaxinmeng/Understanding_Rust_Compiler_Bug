{"sha": "291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxZTkxZGFhNzMzNjFhMWY0YTQyNmE4NzlmODljMWVhNmNmMGU5Zg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-07-05T21:16:07Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-07-05T21:16:07Z"}, "message": "hashtable.h (_Hashtable<>::__rehash_policy): Do not rehash container.\n\n2015-07-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable.h (_Hashtable<>::__rehash_policy): Do not\n\trehash container.\n\t* testsuite/23_containers/unordered_set/max_load_factor/robustness.cc:\n\tAdapt.\n\nFrom-SVN: r225436", "tree": {"sha": "152a853df6a0b5caf0d08a72377394d5d134c646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152a853df6a0b5caf0d08a72377394d5d134c646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/comments", "author": null, "committer": null, "parents": [{"sha": "3b973a7f22d0006505139348a3871738328f0280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b973a7f22d0006505139348a3871738328f0280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b973a7f22d0006505139348a3871738328f0280"}], "stats": {"total": 60, "additions": 29, "deletions": 31}, "files": [{"sha": "86e9d4cfbfef22d144ac61331c5f38029adfb108", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "patch": "@@ -1,3 +1,10 @@\n+2015-07-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::__rehash_policy): Do not\n+\trehash container.\n+\t* testsuite/23_containers/unordered_set/max_load_factor/robustness.cc:\n+\tAdapt.\n+\n 2015-07-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update status table."}, {"sha": "0495f4bdd2fe8c778444b1572b1bf03fe245e422", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "patch": "@@ -594,7 +594,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_rehash_policy; }\n \n       void\n-      __rehash_policy(const _RehashPolicy&);\n+      __rehash_policy(const _RehashPolicy& __pol)\n+      { _M_rehash_policy = __pol; }\n \n       // Lookup.\n       iterator\n@@ -1280,22 +1281,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = &__x._M_before_begin;\n     }\n \n-  template<typename _Key, typename _Value,\n-\t   typename _Alloc, typename _ExtractKey, typename _Equal,\n-\t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n-\t   typename _Traits>\n-    void\n-    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n-\t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n-    __rehash_policy(const _RehashPolicy& __pol)\n-    {\n-      auto __do_rehash =\n-\t__pol._M_need_rehash(_M_bucket_count, _M_element_count, 0);\n-      if (__do_rehash.first)\n-\t_M_rehash(__do_rehash.second, _M_rehash_policy._M_state());\n-      _M_rehash_policy = __pol;\n-    }\n-\n   template<typename _Key, typename _Value,\n \t   typename _Alloc, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,"}, {"sha": "59782286e22e461959316850b62dd55b0358fe70", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/max_load_factor/robustness.cc", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291e91daa73361a1f4a426a879f89c1ea6cf0e9f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmax_load_factor%2Frobustness.cc?ref=291e91daa73361a1f4a426a879f89c1ea6cf0e9f", "patch": "@@ -32,41 +32,47 @@ void test01()\n   int val = 0;\n   for (; val != 100; ++val)\n     {\n-      VERIFY( us.insert(val).second) ;\n+      VERIFY( us.insert(val).second );\n       VERIFY( us.load_factor() <= us.max_load_factor() );\n     }\n \n   float cur_max_load_factor = us.max_load_factor();\n   int counter = 0;\n   std::size_t thrown_exceptions = 0;\n+\n+  // Reduce max load factor.\n+  us.max_load_factor(us.max_load_factor() / 2);\n+\n+  // At this point load factor is higher than max_load_factor because we can't\n+  // rehash in max_load_factor call.\n+  VERIFY( us.load_factor() > us.max_load_factor() );\n+\n   while (true)\n     {\n       __gnu_cxx::limit_condition::set_limit(counter++);\n       bool do_break = false;\n       try\n \t{\n-\t  us.max_load_factor(.5f);\n+\t  size_t nbkts = us.bucket_count();\n+\t  // Check that unordered_set will still be correctly resized when\n+\t  // needed.\n+\t  VERIFY( us.insert(val++).second );\n+\n+\t  VERIFY( us.bucket_count() != nbkts );\n+\t  VERIFY( us.load_factor() <= us.max_load_factor() );\n \t  do_break = true;\n \t}\n       catch (const __gnu_cxx::forced_error&)\n \t{\n-\t  VERIFY( us.max_load_factor() == cur_max_load_factor );\n+\t  // max load factor doesn't change.\n+\t  VERIFY( us.max_load_factor() == .5f );\n \t  ++thrown_exceptions;\n \t}\n-      // Lets check that unordered_set will still be correctly resized\n-      // when needed\n-      __gnu_cxx::limit_condition::set_limit(nl_size_t::max());\n-      for (;;)\n-\t{\n-\t  VERIFY( us.load_factor() <= us.max_load_factor() );\n-\t  size_t nbkts = us.bucket_count();\n-\t  VERIFY( us.insert(val++).second );\n-\t  if (us.bucket_count() != nbkts)\n-\t    break;\n-\t}\n+\n       if (do_break)\n \tbreak;\n     }\n+\n   VERIFY( thrown_exceptions > 0 );\n }\n "}]}