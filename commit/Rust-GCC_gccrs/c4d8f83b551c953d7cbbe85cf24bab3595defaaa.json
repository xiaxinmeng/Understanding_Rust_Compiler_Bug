{"sha": "c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkOGY4M2I1NTFjOTUzZDdjYmJlODVjZjI0YmFiMzU5NWRlZmFhYQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@inria.fr", "date": "2007-03-14T23:23:24Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-03-14T23:23:24Z"}, "message": "tree-loop-linear.c (gather_interchange_stats): For multidimensional arrays...\n\n\t* tree-loop-linear.c (gather_interchange_stats): For multidimensional\n\tarrays, multiply the access strides by the size of the sub-array.\n\t* testsuite/gcc.dg/tree-ssa/ltrans-5.c: New.\n\nFrom-SVN: r122935", "tree": {"sha": "d21c23b85fba4827eae8894e489ee403c78576ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21c23b85fba4827eae8894e489ee403c78576ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7f19c46a9fa0c1be528bfb9fa54196d8ca0e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7f19c46a9fa0c1be528bfb9fa54196d8ca0e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7f19c46a9fa0c1be528bfb9fa54196d8ca0e4b"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "56d9d74b62a8548cdd4f01f5ed8460be43d7181d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "patch": "@@ -1,3 +1,9 @@\n+2007-03-14  Sebastian Pop  <sebastian.pop@inria.fr>\n+\n+\t* tree-loop-linear.c (gather_interchange_stats): For multidimensional\n+\tarrays, multiply the access strides by the size of the sub-array.\n+\t* testsuite/gcc.dg/tree-ssa/ltrans-5.c: New.\n+\n 2007-03-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* configure.ac (HAVE_AS_IX86_SAHF): On x86 targets check whether"}, {"sha": "fae44d51968c240564e161c83ecf1448c6e3e413", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-5.c?ref=c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n+\n+int foo ()\n+{\n+  int A[100][1111];\n+  int i, j;\n+\n+  for( i = 0; i < 1111; i++)\n+    for( j = 0; j < 100; j++)\n+      A[j][i] = 5 * A[j][i];\n+\n+  return A[10][10];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"transformed loop\" 1 \"ltrans\"} } */ \n+/* { dg-final { cleanup-tree-dump \"ltrans\" } } */"}, {"sha": "94f3d59f7535fdf27b75d373805fae3e766c2145", "filename": "gcc/tree-loop-linear.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2Ftree-loop-linear.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8f83b551c953d7cbbe85cf24bab3595defaaa/gcc%2Ftree-loop-linear.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-linear.c?ref=c4d8f83b551c953d7cbbe85cf24bab3595defaaa", "patch": "@@ -134,24 +134,30 @@ gather_interchange_stats (VEC (ddr_p, heap) *dependence_relations,\n   for (i = 0; VEC_iterate (data_reference_p, datarefs, i, dr); i++)\n     {\n       unsigned int it;\n+      tree ref = DR_REF (dr);\n       tree stmt = DR_STMT (dr);\n       struct loop *stmt_loop = loop_containing_stmt (stmt);\n       struct loop *inner_loop = first_loop->inner;\n-      \n+\n       if (inner_loop != stmt_loop \n \t  && !flow_loop_nested_p (inner_loop, stmt_loop))\n \tcontinue;\n-      for (it = 0; it < DR_NUM_DIMENSIONS (dr); it++)\n+\n+      for (it = 0; it < DR_NUM_DIMENSIONS (dr); \n+\t   it++, ref = TREE_OPERAND (ref, 0))\n \t{\n \t  tree chrec = DR_ACCESS_FN (dr, it);\n-\t  tree tstride = evolution_part_in_loop_num \n-\t    (chrec, loop->num);\n-\t  \n+\t  tree tstride = evolution_part_in_loop_num (chrec, loop->num);\n+\t  tree array_size = TYPE_SIZE (TREE_TYPE (ref));\n+\n \t  if (tstride == NULL_TREE\n-\t      || TREE_CODE (tstride) != INTEGER_CST)\n+\t      || array_size == NULL_TREE \n+\t      || TREE_CODE (tstride) != INTEGER_CST\n+\t      || TREE_CODE (array_size) != INTEGER_CST)\n \t    continue;\n-\t  \n-\t  (*access_strides) += int_cst_value (tstride);\n+\n+\t  (*access_strides) += \n+\t    int_cst_value (array_size) * int_cst_value (tstride);\n \t}\n     }\n }"}]}