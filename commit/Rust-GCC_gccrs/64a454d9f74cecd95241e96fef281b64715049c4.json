{"sha": "64a454d9f74cecd95241e96fef281b64715049c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNDU0ZDlmNzRjZWNkOTUyNDFlOTZmZWYyODFiNjQ3MTUwNDljNA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2016-02-23T18:38:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2016-02-23T18:38:31Z"}, "message": "re PR fortran/69456 (Namelist value with trailing sign is ignored without error)\n\n2016-02-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/69456\n\t* io/list_read.c (read_real): If digit is missing from exponent issue\n\tan error. (parse_real): Likewise and adjusted error message to clarify\n\tit is part of a complex number.\n\t(nml_read_obj): Bump item count and add comment that this is used to\n\tidentify which item in a namelist read has a problem.\n\n\tPR libgfortran/69456\n\t* gfortran.dg/namelist_89.f90: New test.\n\t* gfortran.dg/pr59700.f90: Update test..\n\nFrom-SVN: r233641", "tree": {"sha": "f181cd7389d8bad1a96d98fe725f9b3dc253f400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f181cd7389d8bad1a96d98fe725f9b3dc253f400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a454d9f74cecd95241e96fef281b64715049c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a454d9f74cecd95241e96fef281b64715049c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a454d9f74cecd95241e96fef281b64715049c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a454d9f74cecd95241e96fef281b64715049c4/comments", "author": null, "committer": null, "parents": [{"sha": "35886f0bd4a8bcb1fe8b5f60d76fb94e5a0d4f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35886f0bd4a8bcb1fe8b5f60d76fb94e5a0d4f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35886f0bd4a8bcb1fe8b5f60d76fb94e5a0d4f9a"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "4b8cb0193a0e42023d4fbfe9a93a099e36d078ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64a454d9f74cecd95241e96fef281b64715049c4", "patch": "@@ -1,3 +1,9 @@\n+2016-02-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/69456\n+\t* gfortran.dg/namelist_89.f90: New test.\n+\t* gfortran.dg/pr59700.f90: Update test..\n+\n 2016-02-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/69780"}, {"sha": "cfae4664d625e3562973df05bb873fe00e95f2a4", "filename": "gcc/testsuite/gfortran.dg/namelist_89.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_89.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_89.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_89.f90?ref=64a454d9f74cecd95241e96fef281b64715049c4", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do run }\n+! PR69456 Namelist value with trailing sign is ignored without error\n+implicit none\n+integer :: ios\n+character(256) :: errormsg\n+real :: r1 = -1\n+real :: r2 = -1\n+real :: r3 = -1\n+real :: r4 = -1\n+complex :: c1 = (-1,-1)\n+namelist /nml/ r1, r2, r3, r4, c1\n+\n+open (99, status=\"scratch\")\n+\n+write(99,*) \"&nml\"\n+write(99,*) \"  r1=1+1\"      ! Treated as 1e+1!\n+write(99,*) \"  r2=1-1\"      ! Treated as 1e-1!\n+write(99,*) \"  r3=1+1\"      ! Treated as 1e+1!\n+write(99,*) \"  r4=1-1\"      ! Treated as 1e-1!\n+write(99,*) \"  c1=(1-,1+1)\" ! Should give error on item number 5\n+write(99,*) \"/\"\n+\n+rewind(99)\n+\n+read (99, nml=nml, iostat=ios, iomsg=errormsg)\n+if (ios.ne.5010) call abort\n+if (scan(errormsg, \"5\").ne.44) call abort\n+\n+rewind(99)\n+\n+write(99,*) \"&nml\"\n+write(99,*) \"  r1=1+1\"       ! Treated as 1e+1!\n+write(99,*) \"  r2=1-\"        ! Should give error on item number 2\n+write(99,*) \"  r3=1+1\"       ! Treated as 1e+1!\n+write(99,*) \"  r4=1-1\"       ! Treated as 1e-1!\n+write(99,*) \"  c1=(1-1,1+1)\" ! Treated as (1e-1,1e+1)!\n+write(99,*) \"/\"\n+\n+rewind(99)\n+\n+read (99, nml=nml, iostat=ios, iomsg=errormsg)\n+if (ios.ne.5010) call abort\n+if (scan(errormsg, \"2\").ne.25) call abort\n+\n+close (99)\n+\n+end"}, {"sha": "15bf26129ab07e9f583bb78687252096ac4341a9", "filename": "gcc/testsuite/gfortran.dg/pr59700.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59700.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a454d9f74cecd95241e96fef281b64715049c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59700.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59700.f90?ref=64a454d9f74cecd95241e96fef281b64715049c4", "patch": "@@ -35,6 +35,6 @@ program foo\n    rewind(fd)\n    msg = 'ok'\n    read(fd, *, err=40, iomsg=msg) c1, c2\n-40 if (msg /= 'Bad floating point number for item 2') call abort\n+40 if (msg /= 'Bad complex floating point number for item 2') call abort\n    close(fd)\n end program foo"}, {"sha": "4d10b2779e431df5cca25d9836b01363d8ca179a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a454d9f74cecd95241e96fef281b64715049c4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a454d9f74cecd95241e96fef281b64715049c4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=64a454d9f74cecd95241e96fef281b64715049c4", "patch": "@@ -1,3 +1,12 @@\n+2016-02-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/69456\n+\t* io/list_read.c (read_real): If digit is missing from exponent issue\n+\tan error. (parse_real): Likewise and adjusted error message to clarify\n+\tit is part of a complex number.\n+\t(nml_read_obj): Bump item count and add comment that this is used to\n+\tidentify which item in a namelist read has a problem.\n+\n 2016-02-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/69651"}, {"sha": "e24b3922631663ad0b7ab201ccb0b4c265c4685c", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a454d9f74cecd95241e96fef281b64715049c4/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a454d9f74cecd95241e96fef281b64715049c4/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=64a454d9f74cecd95241e96fef281b64715049c4", "patch": "@@ -1374,7 +1374,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n \n  exp2:\n   if (!isdigit (c))\n-    goto bad;\n+    goto bad_exponent;\n \n   push_char (dtp, c);\n \n@@ -1472,6 +1472,8 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n   if (nml_bad_return (dtp, c))\n     return 0;\n \n+ bad_exponent:\n+\n   free_saved (dtp);\n   if (c == EOF)\n     {\n@@ -1482,8 +1484,8 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n   else if (c != '\\n')\n     eat_line (dtp);\n \n-  snprintf (message, MSGLEN, \"Bad floating point number for item %d\",\n-\t      dtp->u.p.item_count);\n+  snprintf (message, MSGLEN, \"Bad complex floating point \"\n+\t    \"number for item %d\", dtp->u.p.item_count);\n   free_line (dtp);\n   generate_error (&dtp->common, LIBERROR_READ_VALUE, message);\n \n@@ -1814,7 +1816,8 @@ read_real (st_parameter_dt *dtp, void * dest, int length)\n \n  exp2:\n   if (!isdigit (c))\n-    goto bad_real;\n+    goto bad_exponent;\n+\n   push_char (dtp, c);\n \n   for (;;)\n@@ -1983,6 +1986,8 @@ read_real (st_parameter_dt *dtp, void * dest, int length)\n   if (nml_bad_return (dtp, c))\n     return;\n \n+ bad_exponent:\n+\n   free_saved (dtp);\n   if (c == EOF)\n     {\n@@ -2810,6 +2815,7 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n   if (dtp->u.p.nml_read_error || !nl->touched)\n     return true;\n \n+  dtp->u.p.item_count++;  /* Used in error messages.  */\n   dtp->u.p.repeat_count = 0;\n   eat_spaces (dtp);\n "}]}