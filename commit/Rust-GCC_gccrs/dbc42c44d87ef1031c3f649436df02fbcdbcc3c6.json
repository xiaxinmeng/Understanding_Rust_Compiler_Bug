{"sha": "dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjNDJjNDRkODdlZjEwMzFjM2Y2NDk0MzZkZjAyZmJjZGJjYzNjNg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-07-09T13:43:11Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-07-09T13:43:11Z"}, "message": "target.h (struct gcc_target): Add hard_regno_scratch_ok field.\n\n\t* target.h (struct gcc_target): Add hard_regno_scratch_ok field.\n\t* target-def.h (TARGET_HARD_REGNO_SCRATCH_OK): New.\n\t(TARGET_INITIALIZER): Use TARGET_HARD_REGNO_SCRATCH_OK.\n\t* targhooks.c (default_hard_regno_scratch_ok): New function.\n\t* targhooks.h (default_hard_regno_scratch_ok): Declare function.\n\t* doc/tm.texi: Document TARGET_HARD_REGNO_SCRATCH_OK hook.\n\t* recog.c:  Include \"target.h\".\n\t(peep2_find_free_register): Add check for global regs. Add target\n\tspecific check.\n\t* Makefile.in (recog.o): Depend on target.h.\n\nFrom-SVN: r137657", "tree": {"sha": "1e2b360a3708a9b833a49b11cda5009cb7f10ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e2b360a3708a9b833a49b11cda5009cb7f10ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/comments", "author": null, "committer": null, "parents": [{"sha": "28f16d05a00d360b76f3c48ac739bcab22fb1418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f16d05a00d360b76f3c48ac739bcab22fb1418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f16d05a00d360b76f3c48ac739bcab22fb1418"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "8fabd6d820b15784bde266e7f855475fa8405fb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -1,3 +1,16 @@\n+2008-07-09  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct gcc_target): Add hard_regno_scratch_ok field.\n+\t* target-def.h (TARGET_HARD_REGNO_SCRATCH_OK): New.\n+\t(TARGET_INITIALIZER): Use TARGET_HARD_REGNO_SCRATCH_OK.\n+\t* targhooks.c (default_hard_regno_scratch_ok): New function.\n+\t* targhooks.h (default_hard_regno_scratch_ok): Declare function.\n+\t* doc/tm.texi: Document TARGET_HARD_REGNO_SCRATCH_OK hook.\n+\t* recog.c:  Include \"target.h\".\n+\t(peep2_find_free_register): Add check for global regs. Add target\n+\tspecific check.\n+\t* Makefile.in (recog.o): Depend on target.h.\n+\n 2008-07-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_canonical_va_list_type): New."}, {"sha": "93acc465e0748f41b1435383dbfd59ae442a3152", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -2868,7 +2868,7 @@ recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(FUNCTION_H) $(BASIC_BLOCK_H) $(REGS_H) $(RECOG_H) $(EXPR_H) \\\n    $(FLAGS_H) insn-config.h $(INSN_ATTR_H) toplev.h output.h reload.h \\\n    addresses.h $(TM_P_H) $(TIMEVAR_H) tree-pass.h hard-reg-set.h $(REAL_H) \\\n-   $(DF_H) $(DBGCNT_H)\n+   $(DF_H) $(DBGCNT_H) $(TARGET_H)\n reg-stack.o : reg-stack.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) $(RECOG_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    insn-config.h toplev.h reload.h $(FUNCTION_H) $(TM_P_H) $(GGC_H) \\"}, {"sha": "586001869406dcc0511430b62ff2329217a82907", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -2242,6 +2242,16 @@ possible since doing so will allow GCC to perform better register\n allocation.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_HARD_REGNO_SCRATCH_OK (unsigned int @var{regno})\n+This target hook should return @code{true} if it is OK to use a hard register\n+@var{regno} as scratch reg in peephole2.\n+\n+One common use of this macro is to prevent using of a register that\n+is not saved by a prologue in an interrupt handler.\n+\n+The default version of this hook always returns @code{true}.\n+@end deftypefn\n+\n @defmac AVOID_CCMODE_COPIES\n Define this macro if the compiler should avoid copies to/from @code{CCmode}\n registers.  You should only define this macro if support for copying to/from"}, {"sha": "73d576478771183480bdfd90b62fe5ffdb61be68", "filename": "gcc/recog.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"output.h\"\n #include \"reload.h\"\n+#include \"target.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n #include \"df.h\"\n@@ -2898,6 +2899,9 @@ peep2_find_free_register (int from, int to, const char *class_str,\n       /* Don't allocate fixed registers.  */\n       if (fixed_regs[regno])\n \tcontinue;\n+      /* Don't allocate global registers.  */\n+      if (global_regs[regno])\n+\tcontinue;\n       /* Make sure the register is of the right class.  */\n       if (! TEST_HARD_REG_BIT (reg_class_contents[cl], regno))\n \tcontinue;\n@@ -2907,6 +2911,9 @@ peep2_find_free_register (int from, int to, const char *class_str,\n       /* And that we don't create an extra save/restore.  */\n       if (! call_used_regs[regno] && ! df_regs_ever_live_p (regno))\n \tcontinue;\n+      if (! targetm.hard_regno_scratch_ok (regno))\n+\tcontinue;\n+\n       /* And we don't clobber traceback for noreturn functions.  */\n       if ((regno == FRAME_POINTER_REGNUM || regno == HARD_FRAME_POINTER_REGNUM)\n \t  && (! reload_completed || frame_pointer_needed))"}, {"sha": "29ed88873b2a1688d1771de6d102291c33601f57", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -619,6 +619,10 @@\n #define TARGET_INSTANTIATE_DECLS hook_void_void\n #endif\n \n+#ifndef TARGET_HARD_REGNO_SCRATCH_OK\n+#define TARGET_HARD_REGNO_SCRATCH_OK default_hard_regno_scratch_ok\n+#endif\n+\n /* C specific.  */\n #ifndef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX default_mode_for_suffix\n@@ -846,6 +850,7 @@\n   TARGET_SECONDARY_RELOAD,\t\t\t\\\n   TARGET_EXPAND_TO_RTL_HOOK,\t\t\t\\\n   TARGET_INSTANTIATE_DECLS,\t\t\t\\\n+  TARGET_HARD_REGNO_SCRATCH_OK,\t\t\t\\\n   TARGET_C,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_EMUTLS,\t\t\t\t\\"}, {"sha": "d1642ef9497c096073079b4080b9c77a3e5e2ae2", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -872,6 +872,10 @@ struct gcc_target\n      but will be later.  */\n   void (* instantiate_decls) (void);\n \n+  /* Return true if is OK to use a hard register REGNO as scratch register\n+     in peephole2.  */\n+  bool (* hard_regno_scratch_ok) (unsigned int regno);\n+\n   /* Functions specific to the C family of frontends.  */\n   struct c {\n     /* Return machine mode for non-standard suffix"}, {"sha": "1cb561480b882eb632bf6fd68ef373853b65336e", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -703,4 +703,10 @@ default_builtin_vector_alignment_reachable (const_tree type, bool is_packed)\n   return true;\n }\n \n+bool\n+default_hard_regno_scratch_ok (unsigned int regno ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "4ad0fc86805f9e873a4bb2711e03d549bc5d2e96", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc42c44d87ef1031c3f649436df02fbcdbcc3c6/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=dbc42c44d87ef1031c3f649436df02fbcdbcc3c6", "patch": "@@ -97,3 +97,5 @@ extern int default_reloc_rw_mask (void);\n extern tree default_mangle_decl_assembler_name (tree, tree);\n extern tree default_emutls_var_fields (tree, tree *);\n extern tree default_emutls_var_init (tree, tree, tree);\n+\n+extern bool default_hard_regno_scratch_ok (unsigned int);"}]}