{"sha": "cff7cd9b1336236660bf486021063e96271cf137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmN2NkOWIxMzM2MjM2NjYwYmY0ODYwMjEwNjNlOTYyNzFjZjEzNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:56:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-27T13:56:38Z"}, "message": "[multiple changes]\n\n2009-07-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Kill_Current_Values): Reset Is_Known_Valid\n\n2009-07-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Dispatching_Call): Reverse previous patch and\n\tadd some documentation explaining why the SCIL nodes must be generated\n\tat that point.\n\n2009-07-27  Olivier Hainque  <hainque@adacore.com>\n\n\t* a-except.adb: Bind to __builtin_longjmp directly.\n\t* a-except-2005.ads: Provide direct binding to __builtin_longjmp\n\tfor sjlj variants.\n\t* a-exexpr.adb: Use it.\n\t* a-except-xi.adb: Likewise.\n\t* raise.c (_gnat_builtin_longjmp): Remove and update comments.\n\t* raise.h (_gnat_builtin_longjmp): Remove declaration.\n\nFrom-SVN: r150119", "tree": {"sha": "f16eced7a23d13f12e1181ad22bb2d9e4fc942d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f16eced7a23d13f12e1181ad22bb2d9e4fc942d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff7cd9b1336236660bf486021063e96271cf137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7cd9b1336236660bf486021063e96271cf137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff7cd9b1336236660bf486021063e96271cf137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7cd9b1336236660bf486021063e96271cf137/comments", "author": null, "committer": null, "parents": [{"sha": "57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57036dccfcf8e3da00e71cd00ed4a9c3825b3ad9"}], "stats": {"total": 120, "additions": 86, "deletions": 34}, "files": [{"sha": "1451d48eaff23d543bf662f36691fb75b2446686", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -1,3 +1,23 @@\n+2009-07-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Kill_Current_Values): Reset Is_Known_Valid\n+\n+2009-07-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Reverse previous patch and\n+\tadd some documentation explaining why the SCIL nodes must be generated\n+\tat that point.\n+\n+2009-07-27  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* a-except.adb: Bind to __builtin_longjmp directly.\n+\t* a-except-2005.ads: Provide direct binding to __builtin_longjmp\n+\tfor sjlj variants.\n+\t* a-exexpr.adb: Use it.\n+\t* a-except-xi.adb: Likewise.\n+\t* raise.c (_gnat_builtin_longjmp): Remove and update comments.\n+\t* raise.h (_gnat_builtin_longjmp): Remove declaration.\n+\n 2009-07-27  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_eval.adb (Compile_Time_Compare): More precise handling of"}, {"sha": "5c00cf5b576310048bbc21a4b082369726a7739b", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -50,6 +50,8 @@ with System.Parameters;\n with System.Standard_Library;\n with System.Traceback_Entries;\n \n+with Ada.Unchecked_Conversion;\n+\n package Ada.Exceptions is\n    pragma Warnings (Off);\n    pragma Preelaborate_05;\n@@ -348,4 +350,18 @@ private\n      Tracebacks       => (others => TBE.Null_TB_Entry),\n      Private_Data     => System.Null_Address);\n \n+   --  Common binding to __builtin_longjmp for sjlj variants.\n+\n+   --  The builtin expects a pointer type for the jmpbuf address argument, and\n+   --  System.Address doesn't work because this is really an integer type.\n+\n+   type Jmpbuf_Address is access Character;\n+\n+   function To_Jmpbuf_Address is new\n+     Ada.Unchecked_Conversion (System.Address, Jmpbuf_Address);\n+\n+   procedure builtin_longjmp (buffer : Jmpbuf_Address; Flag : Integer);\n+   pragma No_Return (builtin_longjmp);\n+   pragma Import (Intrinsic, builtin_longjmp, \"__builtin_longjmp\");\n+\n end Ada.Exceptions;"}, {"sha": "e3ae5b01cff089f8329e63137a27399bfd27f34c", "filename": "gcc/ada/a-exexpr.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr.adb?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -41,10 +41,6 @@ pragma Warnings (Off);\n separate (Ada.Exceptions)\n package body Exception_Propagation is\n \n-   procedure builtin_longjmp (buffer : Address; Flag : Integer);\n-   pragma No_Return (builtin_longjmp);\n-   pragma Import (C, builtin_longjmp, \"_gnat_builtin_longjmp\");\n-\n    ---------------------\n    -- Setup_Exception --\n    ---------------------\n@@ -114,7 +110,7 @@ package body Exception_Propagation is\n             Exception_Traces.Notify_Handled_Exception;\n          end if;\n \n-         builtin_longjmp (Jumpbuf_Ptr, 1);\n+         builtin_longjmp (To_Jmpbuf_Address (Jumpbuf_Ptr), 1);\n \n       else\n          Exception_Traces.Notify_Unhandled_Exception;"}, {"sha": "761a113ab85539b29c2bd5a8215fbc843d72a115", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -643,6 +643,20 @@ package body Exp_Disp is\n          Typ := Non_Limited_View (Typ);\n       end if;\n \n+      --  Generate the SCIL node for this dispatching call. The SCIL node for a\n+      --  dispatching call is inserted in the tree before the call is rewriten\n+      --  and expanded because the SCIL node must be found by the SCIL backend\n+      --  BEFORE the expanded nodes associated with the call node are found.\n+\n+      if Generate_SCIL then\n+         Insert_Action (Call_Node,\n+           New_SCIL_Node\n+             (SN_Kind      => Dispatching_Call,\n+              Related_Node => Call_Node,\n+              Entity       => Typ,\n+              Target_Prim  => Subp));\n+      end if;\n+\n       if not Is_Limited_Type (Typ) then\n          Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n       end if;\n@@ -866,17 +880,6 @@ package body Exp_Disp is\n       --  to avoid the generation of spurious warnings under ZFP run-time.\n \n       Analyze_And_Resolve (Call_Node, Call_Typ, Suppress => All_Checks);\n-\n-      --  Generate the SCIL node for this dispatching call\n-\n-      if Generate_SCIL then\n-         Insert_Action (Call_Node,\n-           New_SCIL_Node\n-             (SN_Kind      => Dispatching_Call,\n-              Related_Node => Call_Node,\n-              Entity       => Typ,\n-              Target_Prim  => Subp));\n-      end if;\n    end Expand_Dispatching_Call;\n \n    ---------------------------------"}, {"sha": "1f087783b6702f358574d761a63307ee37264cb5", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -29,11 +29,8 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* Shared routines to support exception handling.\n-   Note that _gnat_builtin_longjmp should disappear at some point, replaced\n-   by direct call to __builtin_longjmp from Ada code.\n-   __gnat_unhandled_terminate is code shared between all exception handling\n-   mechanisms */\n+/* Shared routines to support exception handling.  __gnat_unhandled_terminate\n+   is shared between all exception handling mechanisms.  */\n \n #ifdef IN_RTS\n #include \"tconfig.h\"\n@@ -46,13 +43,19 @@\n #include \"adaint.h\"\n #include \"raise.h\"\n \n-/*  We have not yet figured out how to import this directly */\n+/*  Wrapper to builtin_longjmp.  This is for the compiler eh only, as the sjlj\n+    runtime library interfaces directly to the intrinsic.  We can't yet do\n+    this for the compiler itself, because this capability relies on changes\n+    made in april 2008 and we need to preserve the possibility to bootstrap\n+    with an older base version.  */\n \n+#if defined (IN_GCC) && !defined (IN_RTS)\n void\n _gnat_builtin_longjmp (void *ptr, int flag ATTRIBUTE_UNUSED)\n {\n    __builtin_longjmp (ptr, 1);\n }\n+#endif\n \n /* When an exception is raised for which no handler exists, the procedure\n    Ada.Exceptions.Unhandled_Exception is called, which performs the call to"}, {"sha": "caf4cc7a0ee418064394be0343742c0e74eada08", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -7142,19 +7142,33 @@ package body Sem_Util is\n       Last_Assignment_Only : Boolean := False)\n    is\n    begin\n+      --  ??? do we have to worry about clearing cached checks?\n+\n       if Is_Assignable (Ent) then\n          Set_Last_Assignment (Ent, Empty);\n       end if;\n \n-      if not Last_Assignment_Only and then Is_Object (Ent) then\n-         Kill_Checks (Ent);\n-         Set_Current_Value (Ent, Empty);\n+      if Is_Object (Ent) then\n+         if not Last_Assignment_Only then\n+            Kill_Checks (Ent);\n+            Set_Current_Value (Ent, Empty);\n \n-         if not Can_Never_Be_Null (Ent) then\n-            Set_Is_Known_Non_Null (Ent, False);\n-         end if;\n+            if not Can_Never_Be_Null (Ent) then\n+               Set_Is_Known_Non_Null (Ent, False);\n+            end if;\n+\n+            Set_Is_Known_Null (Ent, False);\n \n-         Set_Is_Known_Null (Ent, False);\n+            --  Reset Is_Known_Valid unless type is always valid, or if we have\n+            --  a loop parameter (loop parameters are always valid, since their\n+            --  bounds are defined by the bounds given in the loop header).\n+\n+            if not Is_Known_Valid (Etype (Ent))\n+              and then Ekind (Ent) /= E_Loop_Parameter\n+            then\n+               Set_Is_Known_Valid (Ent, False);\n+            end if;\n+         end if;\n       end if;\n    end Kill_Current_Values;\n "}, {"sha": "0e3dde668e683482b58cd64a2e447b31b87b60d9", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7cd9b1336236660bf486021063e96271cf137/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=cff7cd9b1336236660bf486021063e96271cf137", "patch": "@@ -820,9 +820,9 @@ package Sem_Util is\n    --  clear the Is_True_Constant flag, since that only gets reset if there\n    --  really is an assignment somewhere in the entity scope). This procedure\n    --  also calls Kill_All_Checks, since this is a special case of needing to\n-   --  forget saved values. This procedure also clears Is_Known_Non_Null flags\n-   --  in variables, constants or parameters since these are also not known to\n-   --  be valid.\n+   --  forget saved values. This procedure also clears the Is_Known_Null and\n+   --  Is_Known_Non_Null and Is_Known_Valid flags in variables, constants or\n+   --  parameters since these are also not known to be trustable any more.\n    --\n    --  The Last_Assignment_Only flag is set True to clear only Last_Assignment\n    --  fields and leave other fields unchanged. This is used when we encounter\n@@ -839,8 +839,8 @@ package Sem_Util is\n       Last_Assignment_Only : Boolean := False);\n    --  This performs the same processing as described above for the form with\n    --  no argument, but for the specific entity given. The call has no effect\n-   --  if the entity Ent is not for an object. Again, Last_Assignment_Only is\n-   --  set if you want to clear only the Last_Assignment field (see above).\n+   --  if the entity Ent is not for an object. Last_Assignment_Only has the\n+   --  same meaning as for the call with no Ent.\n \n    procedure Kill_Size_Check_Code (E : Entity_Id);\n    --  Called when an address clause or pragma Import is applied to an entity."}]}