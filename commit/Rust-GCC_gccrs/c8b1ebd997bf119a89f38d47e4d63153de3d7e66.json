{"sha": "c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMWViZDk5N2JmMTE5YTg5ZjM4ZDQ3ZTRkNjMxNTNkZTNkN2U2Ng==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-26T10:44:15Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-26T10:44:15Z"}, "message": "remove elim_graph typedef\n\ngcc/ChangeLog:\n\n2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* tree-outof-ssa.c (struct elim_graph): Remove typedef.\n\t(new_elim_graph): Adjust.\n\t(clear_elim_graph): Likewise.\n\t(delete_elim_graph): Likewise.\n\t(elim_graph_size): Likewise.\n\t(elim_graph_add_node): Likewise.\n\t(elim_graph_add_edge): Likewise.\n\t(elim_graph_remove_succ_edge): Likewise.\n\t(eliminate_name): Likewise.\n\t(eliminate_build): Likewise.\n\t(elim_forward): Likewise.\n\t(elim_unvisited_predecessor): Likewise.\n\t(elim_backward): Likewise.\n\t(elim_create): Likewise.\n\t(eliminate_phi): Likewise.\n\t(expand_phi_nodes): Likewise.\n\nFrom-SVN: r238749", "tree": {"sha": "0f82421207ec6849f0b646e74b8c43ef8e64faaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f82421207ec6849f0b646e74b8c43ef8e64faaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b1ebd997bf119a89f38d47e4d63153de3d7e66/comments", "author": null, "committer": null, "parents": [{"sha": "7ba9e72de95e7eece69bfff744df14b866280f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba9e72de95e7eece69bfff744df14b866280f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba9e72de95e7eece69bfff744df14b866280f9d"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "ce2a9a2b7a9733b4fb688d355de87b06ba6024a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b1ebd997bf119a89f38d47e4d63153de3d7e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b1ebd997bf119a89f38d47e4d63153de3d7e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "patch": "@@ -1,3 +1,22 @@\n+2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* tree-outof-ssa.c (struct elim_graph): Remove typedef.\n+\t(new_elim_graph): Adjust.\n+\t(clear_elim_graph): Likewise.\n+\t(delete_elim_graph): Likewise.\n+\t(elim_graph_size): Likewise.\n+\t(elim_graph_add_node): Likewise.\n+\t(elim_graph_add_edge): Likewise.\n+\t(elim_graph_remove_succ_edge): Likewise.\n+\t(eliminate_name): Likewise.\n+\t(eliminate_build): Likewise.\n+\t(elim_forward): Likewise.\n+\t(elim_unvisited_predecessor): Likewise.\n+\t(elim_backward): Likewise.\n+\t(elim_create): Likewise.\n+\t(eliminate_phi): Likewise.\n+\t(expand_phi_nodes): Likewise.\n+\n 2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* bt-load.c (compute_out): Use auto_sbitmap class."}, {"sha": "5047788883cf663024caed9b7fffe2dc83168a87", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b1ebd997bf119a89f38d47e4d63153de3d7e66/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b1ebd997bf119a89f38d47e4d63153de3d7e66/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "patch": "@@ -126,7 +126,8 @@ ssa_is_replaceable_p (gimple *stmt)\n    rarely more than 6, and in the bootstrap of gcc, the maximum number\n    of nodes encountered was 12.  */\n \n-typedef struct _elim_graph {\n+struct elim_graph\n+{\n   /* Size of the elimination vectors.  */\n   int size;\n \n@@ -157,7 +158,7 @@ typedef struct _elim_graph {\n \n   /* Source locations for any constant copies.  */\n   vec<source_location> copy_locus;\n-} *elim_graph;\n+};\n \n \n /* For an edge E find out a good source location to associate with\n@@ -394,10 +395,10 @@ insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n /* Create an elimination graph with SIZE nodes and associated data\n    structures.  */\n \n-static elim_graph\n+static elim_graph *\n new_elim_graph (int size)\n {\n-  elim_graph g = (elim_graph) xmalloc (sizeof (struct _elim_graph));\n+  elim_graph *g = (elim_graph *) xmalloc (sizeof (struct elim_graph));\n \n   g->nodes.create (30);\n   g->const_dests.create (20);\n@@ -416,7 +417,7 @@ new_elim_graph (int size)\n /* Empty elimination graph G.  */\n \n static inline void\n-clear_elim_graph (elim_graph g)\n+clear_elim_graph (elim_graph *g)\n {\n   g->nodes.truncate (0);\n   g->edge_list.truncate (0);\n@@ -427,7 +428,7 @@ clear_elim_graph (elim_graph g)\n /* Delete elimination graph G.  */\n \n static inline void\n-delete_elim_graph (elim_graph g)\n+delete_elim_graph (elim_graph *g)\n {\n   sbitmap_free (g->visited);\n   g->stack.release ();\n@@ -445,7 +446,7 @@ delete_elim_graph (elim_graph g)\n /* Return the number of nodes in graph G.  */\n \n static inline int\n-elim_graph_size (elim_graph g)\n+elim_graph_size (elim_graph *g)\n {\n   return g->nodes.length ();\n }\n@@ -454,7 +455,7 @@ elim_graph_size (elim_graph g)\n /* Add NODE to graph G, if it doesn't exist already.  */\n \n static inline void\n-elim_graph_add_node (elim_graph g, int node)\n+elim_graph_add_node (elim_graph *g, int node)\n {\n   int x;\n   int t;\n@@ -469,7 +470,7 @@ elim_graph_add_node (elim_graph g, int node)\n /* Add the edge PRED->SUCC to graph G.  */\n \n static inline void\n-elim_graph_add_edge (elim_graph g, int pred, int succ, source_location locus)\n+elim_graph_add_edge (elim_graph *g, int pred, int succ, source_location locus)\n {\n   g->edge_list.safe_push (pred);\n   g->edge_list.safe_push (succ);\n@@ -481,7 +482,7 @@ elim_graph_add_edge (elim_graph g, int pred, int succ, source_location locus)\n    return the successor node.  -1 is returned if there is no such edge.  */\n \n static inline int\n-elim_graph_remove_succ_edge (elim_graph g, int node, source_location *locus)\n+elim_graph_remove_succ_edge (elim_graph *g, int node, source_location *locus)\n {\n   int y;\n   unsigned x;\n@@ -543,7 +544,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Add T to elimination graph G.  */\n \n static inline void\n-eliminate_name (elim_graph g, int T)\n+eliminate_name (elim_graph *g, int T)\n {\n   elim_graph_add_node (g, T);\n }\n@@ -570,7 +571,7 @@ queue_phi_copy_p (var_map map, tree t)\n    G->e.  */\n \n static void\n-eliminate_build (elim_graph g)\n+eliminate_build (elim_graph *g)\n {\n   tree Ti;\n   int p0, pi;\n@@ -619,7 +620,7 @@ eliminate_build (elim_graph g)\n /* Push successors of T onto the elimination stack for G.  */\n \n static void\n-elim_forward (elim_graph g, int T)\n+elim_forward (elim_graph *g, int T)\n {\n   int S;\n   source_location locus;\n@@ -637,7 +638,7 @@ elim_forward (elim_graph g, int T)\n /* Return 1 if there unvisited predecessors of T in graph G.  */\n \n static int\n-elim_unvisited_predecessor (elim_graph g, int T)\n+elim_unvisited_predecessor (elim_graph *g, int T)\n {\n   int P;\n   source_location locus;\n@@ -653,7 +654,7 @@ elim_unvisited_predecessor (elim_graph g, int T)\n /* Process predecessors first, and insert a copy.  */\n \n static void\n-elim_backward (elim_graph g, int T)\n+elim_backward (elim_graph *g, int T)\n {\n   int P;\n   source_location locus;\n@@ -688,7 +689,7 @@ get_temp_reg (tree name)\n    region, and create a temporary to break the cycle if one is found.  */\n \n static void\n-elim_create (elim_graph g, int T)\n+elim_create (elim_graph *g, int T)\n {\n   int P, S;\n   source_location locus;\n@@ -724,7 +725,7 @@ elim_create (elim_graph g, int T)\n /* Eliminate all the phi nodes on edge E in graph G.  */\n \n static void\n-eliminate_phi (edge e, elim_graph g)\n+eliminate_phi (edge e, elim_graph *g)\n {\n   int x;\n \n@@ -924,7 +925,7 @@ void\n expand_phi_nodes (struct ssaexpand *sa)\n {\n   basic_block bb;\n-  elim_graph g = new_elim_graph (sa->map->num_partitions);\n+  elim_graph *g = new_elim_graph (sa->map->num_partitions);\n   g->map = sa->map;\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb,"}]}