{"sha": "5b3bcba2468542faf69d6fbd9a932b700c542053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIzYmNiYTI0Njg1NDJmYWY2OWQ2ZmJkOWE5MzJiNzAwYzU0MjA1Mw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-05-26T21:24:29Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-05-26T21:24:29Z"}, "message": "comp-types-12.mm: New.\n\n[gcc/testsuite/ChangeLog]\n2005-05-26  Ziemowit Laski  <zlaski@apple.com>\n\n        * obj-c++.dg/comp-types-12.mm: New.\n        * objc.dg/comp-types-11.m: New.\n        * objc.dg/selector-4.m: New.\n\nFrom-SVN: r100226", "tree": {"sha": "fcc43190731c1d3ac22017821fd7e01a932b6d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcc43190731c1d3ac22017821fd7e01a932b6d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b3bcba2468542faf69d6fbd9a932b700c542053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3bcba2468542faf69d6fbd9a932b700c542053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3bcba2468542faf69d6fbd9a932b700c542053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3bcba2468542faf69d6fbd9a932b700c542053/comments", "author": null, "committer": null, "parents": [{"sha": "a9f9113a2473301a3641fc284e41c5b7dd5019f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f9113a2473301a3641fc284e41c5b7dd5019f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f9113a2473301a3641fc284e41c5b7dd5019f9"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "8f6bd148f65f69a19d16095388aa4e3937a5c26f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b3bcba2468542faf69d6fbd9a932b700c542053", "patch": "@@ -1,3 +1,9 @@\n+2005-05-26  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/comp-types-12.mm: New.\n+\t* objc.dg/comp-types-11.m: New.\n+\t* objc.dg/selector-4.m: New.\n+\n 2005-05-26  Andreas Jaeger  <aj@suse.de>\n \n \tPR testsuite/20772"}, {"sha": "b041759ca65a3b16f55025db9b77acdd49d196a0", "filename": "gcc/testsuite/obj-c++.dg/comp-types-12.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-12.mm?ref=5b3bcba2468542faf69d6fbd9a932b700c542053", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@interface Derived: Object\n+@end\n+\n+extern Object* foo(void);\n+static Derived *test(void)\n+{\n+   Derived *m = foo();   /* { dg-warning \"initialization from distinct Objective\\\\-C type\" } */\n+\n+   return m;\n+}\n+"}, {"sha": "b041759ca65a3b16f55025db9b77acdd49d196a0", "filename": "gcc/testsuite/objc.dg/comp-types-11.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-11.m?ref=5b3bcba2468542faf69d6fbd9a932b700c542053", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+#include <objc/Object.h>\n+\n+@interface Derived: Object\n+@end\n+\n+extern Object* foo(void);\n+static Derived *test(void)\n+{\n+   Derived *m = foo();   /* { dg-warning \"initialization from distinct Objective\\\\-C type\" } */\n+\n+   return m;\n+}\n+"}, {"sha": "d34f8c89cd6f4f9d39b5651f920df88e3f03cf4e", "filename": "gcc/testsuite/objc.dg/selector-4.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b3bcba2468542faf69d6fbd9a932b700c542053/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fselector-4.m?ref=5b3bcba2468542faf69d6fbd9a932b700c542053", "patch": "@@ -0,0 +1,30 @@\n+/* Test whether including C++ keywords such as 'and', 'or',\n+   'not', etc., is allowed inside ObjC selectors (as it must be).  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+@interface Int1 \n++ (int)and_eq:(int)arg1 and:(int)arg2;\n+- (int)or_eq:(int)arg1 or:(int)arg3;\n+- (int)not:(int)arg1 xor:(int)arg2;\n+- (void)bitand:(char)c1 bitor:(char)c2;\n+- (void)compl:(float)f1 xor_eq:(double)d1;\n+- (void)not_eq;\n+@end\n+\n+@implementation Int1\n++ (int)and_eq:(int)arg1 and:(int)arg2 { return arg1 + arg2; }\n+- (int)or_eq:(int)arg1 or:(int)arg3 { return arg1 + arg3; }\n+- (int)not:(int)arg1 xor:(int)arg2 { return arg1 + arg2; }\n+- (void)bitand:(char)c1 bitor:(char)c2 { }\n+- (void)compl:(float)f1 xor_eq:(double)d1 { }\n+- (void)not_eq { }\n+@end\n+\n+/* { dg-final { scan-assembler  \"\\\\+\\\\\\[Int1 and_eq:and:\\\\]|c_Int1__and_eq_and\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 or_eq:or:\\\\]|i_Int1__or_eq_or\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 not:xor:\\\\]|i_Int1__not_xor\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 bitand:bitor:\\\\]|i_Int1__bitand_bitor\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 compl:xor_eq:\\\\]|i_Int1__compl_xor_eq\" } } */\n+/* { dg-final { scan-assembler  \"\\\\-\\\\\\[Int1 not_eq\\\\]|i_Int1__not_eq\" } } */"}]}