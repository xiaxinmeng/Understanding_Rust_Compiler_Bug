{"sha": "0fa00483026f58848767c1577e3d76ef2fb2568b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhMDA0ODMwMjZmNTg4NDg3NjdjMTU3N2UzZDc2ZWYyZmIyNTY4Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-10-04T16:08:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-10-04T16:08:06Z"}, "message": "Mark C2x built-in functions as such.\n\nVarious built-in functions that GCC has as extensions are now standard\nfunctions in C2x.  This patch adds DEF_C2X_BUILTIN and uses it to mark\nthem as such.  Some of the so-marked functions were previously\nDEF_EXT_LIB_BUILTIN, while some DFP ones were DEF_GCC_BUILTIN\n(i.e. __builtin_* only); both sets become DEF_C2X_BUILTIN.  This in\nturn requires flag_isoc2x to be defined in various front ends using\nbuiltins.def.\n\nAs the semantics of the built-in functions should already be tested,\nthe tests added only verify that they are declared in C2x mode but not\nin C11 mode.  The test of DFP built-in functions being declared for\nC2x goes in gcc.dg/dfp/, as while such built-in functions currently\ndon't depend on whether DFP is supported, that looks like a bug to me\n(see bug 91985), so it seems best for the tests not to depend on\nexactly how that bug might be fixed.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* builtins.def (DEF_C2X_BUILTIN): New macro.\n\t(exp10, exp10f, exp10l, fabsd32, fabsd64, fabsd128, nand32)\n\t(nand64, nand128, roundeven, roundevenf, roundevenl, strdup)\n\t(strndup): Use DEF_C2X_BUILTIN.\n\t* coretypes.h (enum function_class): Add function_c2x_misc.\n\ngcc/ada:\n\t* gcc-interface/utils.c (flag_isoc2x): New variable.\n\ngcc/brig:\n\t* brig-lang.c (flag_isoc2x): New variable.\n\ngcc/lto:\n\t* lto-lang.c (flag_isoc2x): New variable.\n\ngcc/testsuite:\n\t* gcc.dg/c11-builtins-1.c, gcc.dg/c2x-builtins-1.c,\n\tgcc.dg/dfp/c2x-builtins-dfp-1.c: New tests.\n\nFrom-SVN: r276588", "tree": {"sha": "bf97b85148031f1f5d2fad140a077c0d069e516b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf97b85148031f1f5d2fad140a077c0d069e516b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa00483026f58848767c1577e3d76ef2fb2568b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa00483026f58848767c1577e3d76ef2fb2568b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa00483026f58848767c1577e3d76ef2fb2568b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa00483026f58848767c1577e3d76ef2fb2568b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0046f8d750560275c3d82179244b45412073d626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0046f8d750560275c3d82179244b45412073d626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0046f8d750560275c3d82179244b45412073d626"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "a9f8da9c8949e08b964c5f6c8670d4fa13c58d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -1,3 +1,11 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* builtins.def (DEF_C2X_BUILTIN): New macro.\n+\t(exp10, exp10f, exp10l, fabsd32, fabsd64, fabsd128, nand32)\n+\t(nand64, nand128, roundeven, roundevenf, roundevenl, strdup)\n+\t(strndup): Use DEF_C2X_BUILTIN.\n+\t* coretypes.h (enum function_class): Add function_c2x_misc.\n+\n 2019-10-04  Maya Rashish  <coypu@sdf.org>\n \n \t* ira-color.c (update_costs_from_allocno): Call"}, {"sha": "0463038f63a86412b4a8955488a71578eaa87397", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/utils.c (flag_isoc2x): New variable.\n+\n 2019-10-01  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* gcc-interface/Makefile.in (ADA_RTL_DSO_DIR): New variable."}, {"sha": "d2891f250a7dcc2f2a953628ba78cf3fc05781db", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -6901,6 +6901,7 @@ def_builtin_1 (enum built_in_function fncode,\n static int flag_isoc94 = 0;\n static int flag_isoc99 = 0;\n static int flag_isoc11 = 0;\n+static int flag_isoc2x = 0;\n \n /* Install what the common builtins.def offers plus our local additions.\n "}, {"sha": "9f824e2173c955f194474cd267595194d71a5950", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* brig-lang.c (flag_isoc2x): New variable.\n+\n 2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91283"}, {"sha": "505a83d9123d4c4f8d1b8ba6731473e7205fefc7", "filename": "gcc/brig/brig-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbrig%2Fbrig-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbrig%2Fbrig-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrig-lang.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -587,6 +587,7 @@ static GTY(()) tree signed_size_type_node;\n int flag_isoc94;\n int flag_isoc99;\n int flag_isoc11;\n+int flag_isoc2x;\n \n static void\n def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)"}, {"sha": "d8233f5f760f8426e8ff85473ecda02aa6c2655b", "filename": "gcc/builtins.def", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -154,6 +154,13 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       true, true, !flag_isoc11, ATTRS, targetm.libc_has_function (function_c11_misc), true)\n \n+/* Like DEF_LIB_BUILTIN, except that the function is only a part of\n+   the standard in C2x or above.  */\n+#undef DEF_C2X_BUILTIN\n+#define DEF_C2X_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       true, true, !flag_isoc2x, ATTRS, targetm.libc_has_function (function_c2x_misc), true)\n+\n /* Like DEF_C99_BUILTIN, but for complex math functions.  */\n #undef DEF_C99_COMPL_BUILTIN\n #define DEF_C99_COMPL_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n@@ -335,9 +342,9 @@ DEF_C99_BUILTIN        (BUILT_IN_ERFCL, \"erfcl\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n DEF_C99_BUILTIN        (BUILT_IN_ERFF, \"erff\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ERFL, \"erfl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_EXP, \"exp\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10, \"exp10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10F, \"exp10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10L, \"exp10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C2X_BUILTIN        (BUILT_IN_EXP10, \"exp10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C2X_BUILTIN        (BUILT_IN_EXP10F, \"exp10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C2X_BUILTIN        (BUILT_IN_EXP10L, \"exp10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2, \"exp2\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2F, \"exp2f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2L, \"exp2l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -352,9 +359,9 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSL, \"fabsl\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n #define FABS_TYPE(F) BT_FN_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FABS, \"fabs\", FABS_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef FABS_TYPE\n-DEF_GCC_BUILTIN        (BUILT_IN_FABSD32, \"fabsd32\", BT_FN_DFLOAT32_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_FABSD64, \"fabsd64\", BT_FN_DFLOAT64_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_FABSD128, \"fabsd128\", BT_FN_DFLOAT128_DFLOAT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_FABSD32, \"fabsd32\", BT_FN_DFLOAT32_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_FABSD64, \"fabsd64\", BT_FN_DFLOAT64_DFLOAT64, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_FABSD128, \"fabsd128\", BT_FN_DFLOAT128_DFLOAT128, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FDIM, \"fdim\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_FDIMF, \"fdimf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_FDIML, \"fdiml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -501,9 +508,9 @@ DEF_C99_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CO\n DEF_C99_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n #define NAN_TYPE(F) BT_FN_##F##_CONST_STRING\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_NAN, \"nan\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_NAND32, \"nand32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_NAND64, \"nand64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_NAND128, \"nand128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C2X_BUILTIN        (BUILT_IN_NAND32, \"nand32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C2X_BUILTIN        (BUILT_IN_NAND64, \"nand64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C2X_BUILTIN        (BUILT_IN_NAND128, \"nand128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANS, \"nans\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANSF, \"nansf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NANSL, \"nansl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n@@ -542,9 +549,9 @@ DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n #define RINT_TYPE(F) BT_FN_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_RINT, \"rint\", RINT_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef RINT_TYPE\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVEN, \"roundeven\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVENF, \"roundevenf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVENL, \"roundevenl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_ROUNDEVEN, \"roundeven\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_ROUNDEVENF, \"roundevenf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_C2X_BUILTIN        (BUILT_IN_ROUNDEVENL, \"roundevenl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUND, \"round\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDF, \"roundf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDL, \"roundl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -706,8 +713,8 @@ DEF_LIB_BUILTIN        (BUILT_IN_STRCHR, \"strchr\", BT_FN_STRING_CONST_STRING_INT\n DEF_LIB_BUILTIN        (BUILT_IN_STRCMP, \"strcmp\", BT_FN_INT_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRCPY, \"strcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRCSPN, \"strcspn\", BT_FN_SIZE_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRDUP, \"strdup\", BT_FN_STRING_CONST_STRING, ATTR_MALLOC_WARN_UNUSED_RESULT_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNDUP, \"strndup\", BT_FN_STRING_CONST_STRING_SIZE, ATTR_MALLOC_WARN_UNUSED_RESULT_NOTHROW_NONNULL_LEAF)\n+DEF_C2X_BUILTIN        (BUILT_IN_STRDUP, \"strdup\", BT_FN_STRING_CONST_STRING, ATTR_MALLOC_WARN_UNUSED_RESULT_NOTHROW_NONNULL_LEAF)\n+DEF_C2X_BUILTIN        (BUILT_IN_STRNDUP, \"strndup\", BT_FN_STRING_CONST_STRING_SIZE, ATTR_MALLOC_WARN_UNUSED_RESULT_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRLEN, \"strlen\", BT_FN_SIZE_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCASECMP, \"strncasecmp\", BT_FN_INT_CONST_STRING_CONST_STRING_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRNCAT, \"strncat\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)"}, {"sha": "b683f1298803e8e4c93a73da506e3db947caad77", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -378,7 +378,8 @@ enum function_class {\n   function_c99_misc,\n   function_c99_math_complex,\n   function_sincos,\n-  function_c11_misc\n+  function_c11_misc,\n+  function_c2x_misc\n };\n \n /* Enumerate visibility settings.  This is deliberately ordered from most"}, {"sha": "e4102320795448767eec421601bda34bb06134fc", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-lang.c (flag_isoc2x): New variable.\n+\n 2019-09-18  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/91763"}, {"sha": "0d781da5768fe056ecf62d9a6f9610945b192c42", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -247,6 +247,7 @@ static GTY(()) tree signed_size_type_node;\n int flag_isoc94;\n int flag_isoc99;\n int flag_isoc11;\n+int flag_isoc2x;\n \n /* Attribute handlers.  */\n "}, {"sha": "68ca51e824bdcbe996e94e8aa5de1cc20a01a132", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -1,3 +1,8 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-builtins-1.c, gcc.dg/c2x-builtins-1.c,\n+\tgcc.dg/dfp/c2x-builtins-dfp-1.c: New tests.\n+\n 2019-10-04  Mark Eggleston <mark.eggleston@codethink.com>\n \n \t* gfortran.dg/auto_in_equiv_1.f90: Replaced."}, {"sha": "bfadf704714667eb307f40e3f7832cc84bfa1e07", "filename": "gcc/testsuite/gcc.dg/c11-builtins-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-builtins-1.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -0,0 +1,19 @@\n+/* Test C11 built-in functions: test functions new in C2x are not\n+   declared as built-in for C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+int exp10 (void);\n+int exp10f (void);\n+int exp10l (void);\n+int fabsd32 (void);\n+int fabsd64 (void);\n+int fabsd128 (void);\n+int nand32 (void);\n+int nand64 (void);\n+int nand128 (void);\n+int roundeven (void);\n+int roundevenf (void);\n+int roundevenl (void);\n+int strdup (void);\n+int strndup (void);"}, {"sha": "74760592cf8dda2aceaac71e5d4bce4751e39a7c", "filename": "gcc/testsuite/gcc.dg/c2x-builtins-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-builtins-1.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -0,0 +1,13 @@\n+/* Test C2x built-in functions: test functions new in C2x are indeed\n+   declared as built-in as expected.  Non-DFP tests.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+int exp10 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int exp10f (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int exp10l (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int roundeven (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int roundevenf (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int roundevenl (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int strdup (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int strndup (void); /* { dg-warning \"conflicting types for built-in function\" } */"}, {"sha": "88b8b334e71017209e7fc7ff9b5f0f229d32cea7", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-builtins-dfp-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-builtins-dfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa00483026f58848767c1577e3d76ef2fb2568b/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-builtins-dfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-builtins-dfp-1.c?ref=0fa00483026f58848767c1577e3d76ef2fb2568b", "patch": "@@ -0,0 +1,11 @@\n+/* Test C2x built-in functions: test functions new in C2x are indeed\n+   declared as built-in as expected.  DFP tests.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+int fabsd32 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int fabsd64 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int fabsd128 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int nand32 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int nand64 (void); /* { dg-warning \"conflicting types for built-in function\" } */\n+int nand128 (void); /* { dg-warning \"conflicting types for built-in function\" } */"}]}