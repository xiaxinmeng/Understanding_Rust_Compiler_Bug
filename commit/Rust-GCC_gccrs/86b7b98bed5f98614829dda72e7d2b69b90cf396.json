{"sha": "86b7b98bed5f98614829dda72e7d2b69b90cf396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZiN2I5OGJlZDVmOTg2MTQ4MjlkZGE3MmU3ZDJiNjliOTBjZjM5Ng==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T01:39:14Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T01:39:14Z"}, "message": "typeck.c (check_for_casting_away_constness): Use 1 single argument, the type of cast, to decide what diagnostics generate.\n\n2008-02-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* typeck.c (check_for_casting_away_constness): Use 1 single\n\targument, the type of cast, to decide what diagnostics generate.\n\t(build_static_cast_1): Remove unused code. Update call to\n\tcheck_for_casting_away_constness.\n\t(build_reinterpret_cast_1): Update call to\n\tcheck_for_casting_away_constness.\n\t(build_const_cast_1): Likewise.\n\nFrom-SVN: r132609", "tree": {"sha": "4ba9990311686c3b71c6b79b6aecf6c760b8c610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba9990311686c3b71c6b79b6aecf6c760b8c610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86b7b98bed5f98614829dda72e7d2b69b90cf396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b7b98bed5f98614829dda72e7d2b69b90cf396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b7b98bed5f98614829dda72e7d2b69b90cf396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b7b98bed5f98614829dda72e7d2b69b90cf396/comments", "author": null, "committer": null, "parents": [{"sha": "55092ebf6e03abd80d72cd10937f9cfa9d4de64e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55092ebf6e03abd80d72cd10937f9cfa9d4de64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55092ebf6e03abd80d72cd10937f9cfa9d4de64e"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "f7fba35225dd1dd0155496266aca3b397466f1e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86b7b98bed5f98614829dda72e7d2b69b90cf396/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86b7b98bed5f98614829dda72e7d2b69b90cf396/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86b7b98bed5f98614829dda72e7d2b69b90cf396", "patch": "@@ -1,3 +1,13 @@\n+2008-02-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* typeck.c (check_for_casting_away_constness): Use 1 single\n+\targument, the type of cast, to decide what diagnostics generate.\n+\t(build_static_cast_1): Remove unused code. Update call to\n+\tcheck_for_casting_away_constness.\n+\t(build_reinterpret_cast_1): Update call to\n+\tcheck_for_casting_away_constness.\n+\t(build_const_cast_1): Likewise.\n+\t\n 2008-02-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* error.c (dump_expr): Don't deal directly with NEW_EXPR (and"}, {"sha": "81fbe77b3562ae416e4155f7217ff8a054f3ce12", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86b7b98bed5f98614829dda72e7d2b69b90cf396/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86b7b98bed5f98614829dda72e7d2b69b90cf396/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=86b7b98bed5f98614829dda72e7d2b69b90cf396", "patch": "@@ -4842,18 +4842,38 @@ build_compound_expr (tree lhs, tree rhs)\n }\n \n /* Issue a diagnostic message if casting from SRC_TYPE to DEST_TYPE\n-   casts away constness.  DIAG_FN gives the function to call if we\n-   need to issue a diagnostic; if it is NULL, no diagnostic will be\n-   issued.  DESCRIPTION explains what operation is taking place.  */\n+   casts away constness.  CAST gives the type of cast.  */\n \n static void\n check_for_casting_away_constness (tree src_type, tree dest_type,\n-\t\t\t\t  void (*diag_fn)(const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2),\n-\t\t\t\t  const char *description)\n+\t\t\t\t  enum tree_code cast)\n {\n-  if (diag_fn && casts_away_constness (src_type, dest_type))\n-    diag_fn (\"%s from type %qT to type %qT casts away constness\",\n-\t     description, src_type, dest_type);\n+  /* C-style casts are allowed to cast away constness.  With\n+     WARN_CAST_QUAL, we still want to issue a warning.  */\n+  if (cast == CAST_EXPR && !warn_cast_qual)\n+      return;\n+  \n+  if (casts_away_constness (src_type, dest_type))\n+    switch (cast)\n+      {\n+      case CAST_EXPR:\n+\twarning (OPT_Wcast_qual, \n+                 \"cast from type %qT to type %qT casts away constness\",\n+\t\t src_type, dest_type);\n+\treturn;\n+\t\n+      case STATIC_CAST_EXPR:\n+\terror (\"static_cast from type %qT to type %qT casts away constness\",\n+\t       src_type, dest_type);\n+\treturn;\n+\t\n+      case REINTERPRET_CAST_EXPR:\n+\terror (\"reinterpret_cast from type %qT to type %qT casts away constness\",\n+\t       src_type, dest_type);\n+\treturn;\n+      default:\n+\tgcc_unreachable();\n+      }\n }\n \n /* Convert EXPR (an expression with pointer-to-member type) to TYPE\n@@ -4939,8 +4959,6 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n   tree intype;\n   tree result;\n   tree orig;\n-  void (*diag_fn)(const char*, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n-  const char *desc;\n \n   /* Assume the cast is valid.  */\n   *valid_p = true;\n@@ -4950,21 +4968,6 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n   /* Save casted types in the function's used types hash table.  */\n   used_types_insert (type);\n \n-  /* Determine what to do when casting away constness.  */\n-  if (c_cast_p)\n-    {\n-      /* C-style casts are allowed to cast away constness.  With\n-\t WARN_CAST_QUAL, we still want to issue a warning.  */\n-      diag_fn = warn_cast_qual ? warning0 : NULL;\n-      desc = \"cast\";\n-    }\n-  else\n-    {\n-      /* A static_cast may not cast away constness.  */\n-      diag_fn = error;\n-      desc = \"static_cast\";\n-    }\n-\n   /* [expr.static.cast]\n \n      An lvalue of type \"cv1 B\", where B is a class type, can be cast\n@@ -5089,7 +5092,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       tree base;\n \n       if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, diag_fn, desc);\n+\tcheck_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n       base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype),\n \t\t\t  c_cast_p ? ba_unique : ba_check,\n \t\t\t  NULL);\n@@ -5124,8 +5127,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (can_convert (t1, t2) || can_convert (t2, t1))\n \t{\n \t  if (!c_cast_p)\n-\t    check_for_casting_away_constness (intype, type, diag_fn,\n-\t\t\t\t\t      desc);\n+\t    check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n \t  return convert_ptrmem (type, expr, /*allow_inverse_p=*/1,\n \t\t\t\t c_cast_p);\n \t}\n@@ -5142,7 +5144,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       && TYPE_PTROB_P (type))\n     {\n       if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, diag_fn, desc);\n+\tcheck_for_casting_away_constness (intype, type, STATIC_CAST_EXPR);\n       return build_nop (type, expr);\n     }\n \n@@ -5327,8 +5329,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       tree sexpr = expr;\n \n       if (!c_cast_p)\n-\tcheck_for_casting_away_constness (intype, type, error,\n-\t\t\t\t\t  \"reinterpret_cast\");\n+\tcheck_for_casting_away_constness (intype, type, REINTERPRET_CAST_EXPR);\n       /* Warn about possible alignment problems.  */\n       if (STRICT_ALIGNMENT && warn_cast_align\n \t  && !VOID_TYPE_P (type)\n@@ -5483,10 +5484,7 @@ build_const_cast_1 (tree dst_type, tree expr, bool complain,\n \t  *valid_p = true;\n \t  /* This cast is actually a C-style cast.  Issue a warning if\n \t     the user is making a potentially unsafe cast.  */\n-\t  if (warn_cast_qual)\n-\t    check_for_casting_away_constness (src_type, dst_type,\n-\t\t\t\t\t      warning0,\n-\t\t\t\t\t      \"cast\");\n+\t  check_for_casting_away_constness (src_type, dst_type, CAST_EXPR);\n \t}\n       if (reference_type)\n \t{"}]}