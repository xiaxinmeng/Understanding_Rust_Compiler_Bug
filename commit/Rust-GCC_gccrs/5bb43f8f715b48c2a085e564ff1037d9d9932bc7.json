{"sha": "5bb43f8f715b48c2a085e564ff1037d9d9932bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiNDNmOGY3MTViNDhjMmEwODVlNTY0ZmYxMDM3ZDlkOTkzMmJjNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-04-17T19:35:54Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-04-17T19:35:54Z"}, "message": "(process_pragma): Take the IDENTIFIER_POINTER tree\nnode instead of a character.\n\nFrom-SVN: r11844", "tree": {"sha": "adbcc5d975ee3dffbea75efee082f4f9cab28eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adbcc5d975ee3dffbea75efee082f4f9cab28eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb43f8f715b48c2a085e564ff1037d9d9932bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb43f8f715b48c2a085e564ff1037d9d9932bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb43f8f715b48c2a085e564ff1037d9d9932bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb43f8f715b48c2a085e564ff1037d9d9932bc7/comments", "author": null, "committer": null, "parents": [{"sha": "f72bbc3739258fd167d81b4b575a241e71643378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72bbc3739258fd167d81b4b575a241e71643378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72bbc3739258fd167d81b4b575a241e71643378"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "6b0d28506f20de936378500200e97cce3fad8258", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb43f8f715b48c2a085e564ff1037d9d9932bc7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb43f8f715b48c2a085e564ff1037d9d9932bc7/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5bb43f8f715b48c2a085e564ff1037d9d9932bc7", "patch": "@@ -618,36 +618,23 @@ eq_operator (x, mode)\n    with this attribute may be safely used in an interrupt vector.  */\n \n int\n-handle_pragma (file, c)\n+handle_pragma (file, t)\n      FILE *file;\n-     int c;\n+     tree t;\n {\n-  char pbuf[20];\n-  int psize = 0;\n+  int retval = 0;\n+  register char *pname;\n \n-  while (c == ' ' || c == '\\t')\n-    c = getc (file);\n-\n-  if (c != '\\n' & c != EOF)\n-    {\n-      while (psize < sizeof (pbuf) - 1\n-\t     && isalpha (c))\n-\t{\n-\t  pbuf[psize++] = c;\n-\t  c = getc (file);\n-\t}\n-      pbuf[psize] = 0;\n-\n-      if (strcmp (pbuf, \"interrupt\") == 0)\n-\tinterrupt_handler = 1;\n-      else if (strcmp (pbuf, \"saveall\") == 0)\n-\tpragma_saveall = 1;\n+  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+    return 0;\n \n-      while (c != '\\n' && c != EOF)\n-\tc = getc (file);\n-    }\n+  pname = IDENTIFIER_POINTER (t);\n+  if (strcmp (pname, \"interrupt\") == 0)\n+    interrupt_handler = retval = 1;\n+  else if (strcmp (pname, \"saveall\") == 0)\n+    pragma_saveall = retval = 1;\n \n-  return c;\n+  return retval;\n }\n \f\n /* If the next arg with MODE and TYPE is to be passed in a register, return"}]}