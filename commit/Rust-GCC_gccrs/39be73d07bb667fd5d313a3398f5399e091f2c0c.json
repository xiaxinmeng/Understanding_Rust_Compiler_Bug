{"sha": "39be73d07bb667fd5d313a3398f5399e091f2c0c", "node_id": "C_kwDOANBUbNoAKDM5YmU3M2QwN2JiNjY3ZmQ1ZDMxM2EzMzk4ZjUzOTllMDkxZjJjMGM", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-02-23T19:48:30Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2022-02-24T15:43:57Z"}, "message": "bpf: do not --enable-gcov for bpf-*-* targets\n\nThis patch changes the build machinery in order to disable the build\nof GCOV (both compiler and libgcc) in bpf-*-* targets.  The reason for\nthis change is that BPF is (currently) too restricted in order to\nsupport the coverage instrumentalization.\n\nTested in bpf-unknown-none and x86_64-linux-gnu targets.\n\n2022-02-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\ngcc/ChangeLog\n\n\tPR target/104656\n\t* configure.ac: --disable-gcov if targetting bpf-*.\n\t* configure: Regenerate.\n\nlibgcc/ChangeLog\n\n\tPR target/104656\n\t* configure.ac: --disable-gcov if targetting bpf-*.\n\t* configure: Regenerate.", "tree": {"sha": "3e6cf98da8b0bcb24f3170f64f3b0f7e864cfe94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e6cf98da8b0bcb24f3170f64f3b0f7e864cfe94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39be73d07bb667fd5d313a3398f5399e091f2c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39be73d07bb667fd5d313a3398f5399e091f2c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39be73d07bb667fd5d313a3398f5399e091f2c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39be73d07bb667fd5d313a3398f5399e091f2c0c/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4066d3a5097333f17c0d7be1630a98f3a5b1c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4066d3a5097333f17c0d7be1630a98f3a5b1c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4066d3a5097333f17c0d7be1630a98f3a5b1c1d"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "22eb3451e3dc83d767da764d5cf6c8a9a56d911e", "filename": "gcc/configure", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39be73d07bb667fd5d313a3398f5399e091f2c0c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39be73d07bb667fd5d313a3398f5399e091f2c0c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=39be73d07bb667fd5d313a3398f5399e091f2c0c", "patch": "@@ -8085,12 +8085,20 @@ fi\n if test \"${enable_gcov+set}\" = set; then :\n   enableval=$enable_gcov;\n else\n-  enable_gcov=yes\n+  case $target in\n+       bpf-*-*)\n+         enable_gcov=no\n+       ;;\n+       *)\n+         enable_gcov=yes\n+       ;;\n+     esac\n fi\n \n \n \n \n+\n # Check whether --with-specs was given.\n if test \"${with_specs+set}\" = set; then :\n   withval=$with_specs; CONFIGURE_SPECS=$withval\n@@ -19659,7 +19667,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19662 \"configure\"\n+#line 19670 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19765,7 +19773,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19768 \"configure\"\n+#line 19776 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "20da90901f8fe88fcab0ca499d59405f9448acb6", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39be73d07bb667fd5d313a3398f5399e091f2c0c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39be73d07bb667fd5d313a3398f5399e091f2c0c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=39be73d07bb667fd5d313a3398f5399e091f2c0c", "patch": "@@ -1041,7 +1041,15 @@ AC_SUBST(enable_shared)\n \n AC_ARG_ENABLE(gcov,\n [  --disable-gcov          don't provide libgcov and related host tools],\n-[], [enable_gcov=yes])\n+[], [case $target in\n+       bpf-*-*)\n+         enable_gcov=no\n+       ;;\n+       *)\n+         enable_gcov=yes\n+       ;;\n+     esac])\n+\n AC_SUBST(enable_gcov)\n \n AC_ARG_WITH(specs,"}, {"sha": "52bf25d4e946b20d67eb60c05f769dfc6c04c70c", "filename": "libgcc/configure", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39be73d07bb667fd5d313a3398f5399e091f2c0c/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39be73d07bb667fd5d313a3398f5399e091f2c0c/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=39be73d07bb667fd5d313a3398f5399e091f2c0c", "patch": "@@ -630,6 +630,7 @@ LIPO\n AR\n toolexeclibdir\n toolexecdir\n+enable_gcov\n target_subdir\n host_subdir\n build_subdir\n@@ -653,7 +654,6 @@ build_cpu\n build\n with_aix_soname\n enable_vtable_verify\n-enable_gcov\n enable_shared\n libgcc_topdir\n target_alias\n@@ -701,14 +701,14 @@ with_target_subdir\n with_cross_host\n with_ld\n enable_shared\n-enable_gcov\n enable_vtable_verify\n with_aix_soname\n enable_version_specific_runtime_libs\n with_toolexeclibdir\n with_slibdir\n enable_maintainer_mode\n with_build_libsubdir\n+enable_gcov\n enable_largefile\n enable_decimal_float\n with_system_libunwind\n@@ -1342,12 +1342,12 @@ Optional Features:\n   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --disable-shared        don't provide a shared libgcc\n-  --disable-gcov          don't provide libgcov and related host tools\n   --enable-vtable-verify    Enable vtable verification feature\n   --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n+  --disable-gcov          don't provide libgcov and related host tools\n   --disable-largefile     omit support for large files\n   --enable-decimal-float={no,yes,bid,dpd}\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n@@ -2252,15 +2252,6 @@ fi\n \n \n \n-# Check whether --enable-gcov was given.\n-if test \"${enable_gcov+set}\" = set; then :\n-  enableval=$enable_gcov;\n-else\n-  enable_gcov=yes\n-fi\n-\n-\n-\n # Check whether --enable-vtable-verify was given.\n if test \"${enable_vtable_verify+set}\" = set; then :\n   enableval=$enable_vtable_verify; case \"$enableval\" in\n@@ -2713,6 +2704,22 @@ fi\n target_subdir=${target_noncanonical}\n \n \n+# Check whether --enable-gcov was given.\n+if test \"${enable_gcov+set}\" = set; then :\n+  enableval=$enable_gcov;\n+else\n+  case $target in\n+       bpf-*-*)\n+         enable_gcov=no\n+       ;;\n+       *)\n+         enable_gcov=yes\n+       ;;\n+     esac\n+fi\n+\n+\n+\n # Calculate toolexeclibdir\n # Also toolexecdir, though it's only used in toolexeclibdir\n case ${version_specific_libs} in"}, {"sha": "6f0b67c2adc06cb28b69a8189bf9ab798ee50d01", "filename": "libgcc/configure.ac", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39be73d07bb667fd5d313a3398f5399e091f2c0c/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39be73d07bb667fd5d313a3398f5399e091f2c0c/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=39be73d07bb667fd5d313a3398f5399e091f2c0c", "patch": "@@ -68,11 +68,6 @@ AC_ARG_ENABLE(shared,\n ], [enable_shared=yes])\n AC_SUBST(enable_shared)\n \n-AC_ARG_ENABLE(gcov,\n-[  --disable-gcov          don't provide libgcov and related host tools],\n-[], [enable_gcov=yes])\n-AC_SUBST(enable_gcov)\n-\n AC_ARG_ENABLE(vtable-verify,\n [  --enable-vtable-verify    Enable vtable verification feature ],\n [case \"$enableval\" in\n@@ -163,6 +158,18 @@ ACX_NONCANONICAL_HOST\n ACX_NONCANONICAL_TARGET\n GCC_TOPLEV_SUBDIRS\n \n+AC_ARG_ENABLE(gcov,\n+[  --disable-gcov          don't provide libgcov and related host tools],\n+[], [case $target in\n+       bpf-*-*)\n+         enable_gcov=no\n+       ;;\n+       *)\n+         enable_gcov=yes\n+       ;;\n+     esac])\n+AC_SUBST(enable_gcov)\n+\n # Calculate toolexeclibdir\n # Also toolexecdir, though it's only used in toolexeclibdir\n case ${version_specific_libs} in"}]}