{"sha": "bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmMjhjZWRhZDVmNzRjY2EyYjcxYjdjMjVlZDk4ZmM1Yzk5MDIxZA==", "commit": {"author": {"name": "Jiangning Liu", "email": "jiangning.liu@arm.com", "date": "2012-03-09T08:45:14Z"}, "committer": {"name": "Jiangning Liu", "email": "liujiangning@gcc.gnu.org", "date": "2012-03-09T08:45:14Z"}, "message": "tree-scalar-evolution (interpret_rhs_expr): generate chrec for array reference and component reference.\n\n2012-03-09  Jiangning Liu  <jiangning.liu@arm.com>                                                        \n\n\t* tree-scalar-evolution (interpret_rhs_expr): generate chrec for\n\tarray reference and component reference.\n\t(analyze_scalar_evolution_for_address_of): New.\n\n2012-03-09  Jiangning Liu  <jiangning.liu@arm.com>                                                        \n\n\t* gcc.dg/tree-ssa/scev-3.c: New.\n\t* gcc.dg/tree-ssa/scev-4.c: New.\n\nFrom-SVN: r185129", "tree": {"sha": "b8bff00cb5d7f0ca87f6b36f037830f091953b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8bff00cb5d7f0ca87f6b36f037830f091953b98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/comments", "author": null, "committer": null, "parents": [{"sha": "68c5d97bad2d405e2b27826bcb95f224baec6465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c5d97bad2d405e2b27826bcb95f224baec6465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c5d97bad2d405e2b27826bcb95f224baec6465"}], "stats": {"total": 123, "additions": 114, "deletions": 9}, "files": [{"sha": "31bad53f3ffcbfa9316d0721b151bc5dc2313a6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "patch": "@@ -1,3 +1,9 @@\n+2012-03-09  Jiangning Liu  <jiangning.liu@arm.com>\n+\n+\t* tree-scalar-evolution (interpret_rhs_expr): generate chrec for\n+\tarray reference and component reference.\n+\t(analyze_scalar_evolution_for_address_of): New.\n+\n 2012-03-08  Jie Zhang  <jzhang918@gmail.com>\n \n \tPR target/49862"}, {"sha": "ad8c2188d78994daa153ffebc88a424aafa0505a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "patch": "@@ -1,3 +1,8 @@\n+2012-03-09  Jiangning Liu  <jiangning.liu@arm.com>\n+\n+\t* gcc.dg/tree-ssa/scev-3.c: New.\n+\t* gcc.dg/tree-ssa/scev-4.c: New.\n+\n 2012-03-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52469"}, {"sha": "28d5c9327271cae9a49b93c00a816abd714452fc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-3.c?ref=bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int *a_p;\n+int a[1000];\n+\n+f(int k)\n+{\n+\tint i;\n+\n+\tfor (i=k; i<1000; i+=k) {\n+\t\ta_p = &a[i];\n+\t\t*a_p = 100;\n+        }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"&a\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6c1e530a92f950f2ecb6cbe029237564894c0317", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-4.c?ref=bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef struct {\n+\tint x;\n+\tint y;\n+} S;\n+\n+int *a_p;\n+S a[1000];\n+\n+f(int k)\n+{\n+\tint i;\n+\n+\tfor (i=k; i<1000; i+=k) {\n+\t\ta_p = &a[i].y;\n+\t\t*a_p = 100;\n+        }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"&a\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c719984a6920516d76b5c18eebfdbde691d7a19b", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef28cedad5f74cca2b71b7c25ed98fc5c99021d/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=bef28cedad5f74cca2b71b7c25ed98fc5c99021d", "patch": "@@ -266,6 +266,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n \n static tree analyze_scalar_evolution_1 (struct loop *, tree, tree);\n+static tree analyze_scalar_evolution_for_address_of (struct loop *loop,\n+\t\t\t\t\t\t     tree var);\n \n /* The cached information about an SSA name VAR, claiming that below\n    basic block INSTANTIATED_BELOW, the value of VAR can be expressed\n@@ -1712,16 +1714,59 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n   switch (code)\n     {\n     case ADDR_EXPR:\n-      /* Handle &MEM[ptr + CST] which is equivalent to POINTER_PLUS_EXPR.  */\n-      if (TREE_CODE (TREE_OPERAND (rhs1, 0)) != MEM_REF)\n-\t{\n-\t  res = chrec_dont_know;\n-\t  break;\n-\t}\n+      if (TREE_CODE (TREE_OPERAND (rhs1, 0)) == MEM_REF\n+\t  || handled_component_p (TREE_OPERAND (rhs1, 0)))\n+        {\n+\t  enum machine_mode mode;\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  int unsignedp;\n+\t  int volatilep = 0;\n+\t  tree base, offset;\n+\t  tree chrec3;\n+\t  tree unitpos;\n+\n+\t  base = get_inner_reference (TREE_OPERAND (rhs1, 0),\n+\t\t\t\t      &bitsize, &bitpos, &offset,\n+\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\n+\t  if (TREE_CODE (base) == MEM_REF)\n+\t    {\n+\t      rhs2 = TREE_OPERAND (base, 1);\n+\t      rhs1 = TREE_OPERAND (base, 0);\n+\n+\t      chrec1 = analyze_scalar_evolution (loop, rhs1);\n+\t      chrec2 = analyze_scalar_evolution (loop, rhs2);\n+\t      chrec1 = chrec_convert (type, chrec1, at_stmt);\n+\t      chrec2 = chrec_convert (TREE_TYPE (rhs2), chrec2, at_stmt);\n+\t      res = chrec_fold_plus (type, chrec1, chrec2);\n+\t    }\n+\t  else\n+\t    {\n+\t      chrec1 = analyze_scalar_evolution_for_address_of (loop, base);\n+\t      chrec1 = chrec_convert (type, chrec1, at_stmt);\n+\t      res = chrec1;\n+\t    }\n+\n+\t  if (offset != NULL_TREE)\n+\t    {\n+\t      chrec2 = analyze_scalar_evolution (loop, offset);\n+\t      chrec2 = chrec_convert (TREE_TYPE (offset), chrec2, at_stmt);\n+\t      res = chrec_fold_plus (type, res, chrec2);\n+\t    }\n+\n+\t  if (bitpos != 0)\n+\t    {\n+\t      gcc_assert ((bitpos % BITS_PER_UNIT) == 0);\n \n-      rhs2 = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1);\n-      rhs1 = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n-      /* Fall through.  */\n+\t      unitpos = size_int_kind (bitpos / BITS_PER_UNIT, SIZETYPE);\n+\t      chrec3 = analyze_scalar_evolution (loop, unitpos);\n+\t      chrec3 = chrec_convert (TREE_TYPE (unitpos), chrec3, at_stmt);\n+\t      res = chrec_fold_plus (type, res, chrec3);\n+\t    }\n+        }\n+      else\n+\tres = chrec_dont_know;\n+      break;\n \n     case POINTER_PLUS_EXPR:\n       chrec1 = analyze_scalar_evolution (loop, rhs1);\n@@ -1961,6 +2006,14 @@ analyze_scalar_evolution (struct loop *loop, tree var)\n   return res;\n }\n \n+/* Analyzes and returns the scalar evolution of VAR address in LOOP.  */\n+\n+static tree\n+analyze_scalar_evolution_for_address_of (struct loop *loop, tree var)\n+{\n+  return analyze_scalar_evolution (loop, build_fold_addr_expr (var));\n+}\n+\n /* Analyze scalar evolution of use of VERSION in USE_LOOP with respect to\n    WRTO_LOOP (which should be a superloop of USE_LOOP)\n "}]}