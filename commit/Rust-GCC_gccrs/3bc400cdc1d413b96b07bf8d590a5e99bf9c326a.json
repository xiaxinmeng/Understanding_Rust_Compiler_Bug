{"sha": "3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjNDAwY2RjMWQ0MTNiOTZiMDdiZjhkNTkwYTVlOTliZjljMzI2YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-19T22:59:33Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-19T22:59:33Z"}, "message": "fold-const.c (fold_real_zero_addition_p): Don't fold a zero addition in the presence of signaling NaNs.\n\n\n\t* fold-const.c (fold_real_zero_addition_p): Don't fold a zero\n\taddition in the presence of signaling NaNs.\n\nFrom-SVN: r63133", "tree": {"sha": "a66699c948423365ed0ae6efa1aedf2907f37176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66699c948423365ed0ae6efa1aedf2907f37176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a/comments", "author": null, "committer": null, "parents": [{"sha": "b5a49c0bc8fe2914ed79aae28281bf0d25f152b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a49c0bc8fe2914ed79aae28281bf0d25f152b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a49c0bc8fe2914ed79aae28281bf0d25f152b4"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "da21d117faee17aedb017f9d0d80a42e3d2922c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "patch": "@@ -1,3 +1,8 @@\n+2003-02-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_real_zero_addition_p): Don't fold a zero\n+\taddition in the presence of signaling NaNs.\n+\n 2003-02-19  Krister Walfridsson  <cato@df.lth.se>\n \n \t* tm.texi (INIT_CUMULATIVE_ARGS): Fix typo.\n@@ -109,9 +114,10 @@ Tue Feb 18 23:50:59 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t(cgraph_expand_function): Rewrite.\n \n 2003-02-18  Matt Austern <austern@apple.com>\n+\n \t* toplev.c, langhooks.c, langhooks-def.h: Move\n \twrite_global_declarations from toplev.c to langhooks.c. \n-\t\n+\n 2003-02-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (general_operand_src): Always check\n@@ -168,8 +174,8 @@ Tue Feb 18 23:50:59 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n Tue Feb 18 20:15:54 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \n-\t* sh.c (calc_live_regs): Also check GET_CODE when checking if initial value\n-\tfor PR_REG is still the PR_REG register.\n+\t* sh.c (calc_live_regs): Also check GET_CODE when checking if\n+\tinitial value for PR_REG is still the PR_REG register.\n \n 2003-02-18  Jim Wilson  <wilson@redhat.com>\n "}, {"sha": "6b50a86a097b9aa907bb549fc0405f01539467f1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc400cdc1d413b96b07bf8d590a5e99bf9c326a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3bc400cdc1d413b96b07bf8d590a5e99bf9c326a", "patch": "@@ -4642,6 +4642,10 @@ fold_real_zero_addition_p (type, addend, negate)\n   if (!real_zerop (addend))\n     return false;\n \n+  /* Don't allow the fold with -fsignaling-nans.  */\n+  if (HONOR_SNANS (TYPE_MODE (type)))\n+    return false;\n+\n   /* Allow the fold if zeros aren't signed, or their sign isn't important.  */\n   if (!HONOR_SIGNED_ZEROS (TYPE_MODE (type)))\n     return true;"}]}