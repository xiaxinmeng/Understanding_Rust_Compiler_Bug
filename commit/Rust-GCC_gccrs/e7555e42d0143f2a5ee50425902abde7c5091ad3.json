{"sha": "e7555e42d0143f2a5ee50425902abde7c5091ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc1NTVlNDJkMDE0M2YyYTVlZTUwNDI1OTAyYWJkZTdjNTA5MWFkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-14T04:58:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-14T04:58:45Z"}, "message": "Improve various diagnostic issues.\n\n\t* call.c (build_new_method_call_1): Include template arguments in\n\terror message.\n\t(print_error_for_call_failure): Likewise.\n\t(build_new_function_call): Pass them in.\n\t* name-lookup.c (supplement_binding_1): Don't complain about a\n\tconflict with an erroneous declaration.\n\t* error.c (dump_decl): Fix printing of alias declaration.\n\t* decl.c (make_typename_type): Call cxx_incomplete_type_error.\n\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise.\n\t* semantics.c (perform_koenig_lookup): Don't wrap an error in\n\tTEMPLATE_ID_EXPR.\n\nFrom-SVN: r242376", "tree": {"sha": "a84feb431c6724da3b75512ec479a168b52abe58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a84feb431c6724da3b75512ec479a168b52abe58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7555e42d0143f2a5ee50425902abde7c5091ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7555e42d0143f2a5ee50425902abde7c5091ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7555e42d0143f2a5ee50425902abde7c5091ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7555e42d0143f2a5ee50425902abde7c5091ad3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ce968519a2b871e3d396dd785359c47218dba1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce968519a2b871e3d396dd785359c47218dba1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce968519a2b871e3d396dd785359c47218dba1a"}], "stats": {"total": 96, "additions": 72, "deletions": 24}, "files": [{"sha": "daeb517452b86814bed835db7d860a989b0477cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -1,3 +1,17 @@\n+2016-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_new_method_call_1): Include template arguments in\n+\terror message.\n+\t(print_error_for_call_failure): Likewise.\n+\t(build_new_function_call): Pass them in.\n+\t* name-lookup.c (supplement_binding_1): Don't complain about a\n+\tconflict with an erroneous declaration.\n+\t* error.c (dump_decl): Fix printing of alias declaration.\n+\t* decl.c (make_typename_type): Call cxx_incomplete_type_error.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name): Likewise.\n+\t* semantics.c (perform_koenig_lookup): Don't wrap an error in\n+\tTEMPLATE_ID_EXPR.\n+\n 2016-11-12  Jason Merrill  <jason@redhat.com>\n \n \tCWG 2233"}, {"sha": "f6f45905162e61df64ca80485d27c0c75457225a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -4146,8 +4146,16 @@ static void\n print_error_for_call_failure (tree fn, vec<tree, va_gc> *args,\n \t\t\t      struct z_candidate *candidates)\n {\n+  tree targs = NULL_TREE;\n+  if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n+    {\n+      targs = TREE_OPERAND (fn, 1);\n+      fn = TREE_OPERAND (fn, 0);\n+    }\n   tree name = DECL_NAME (OVL_CURRENT (fn));\n   location_t loc = location_of (name);\n+  if (targs)\n+    name = lookup_template_function (name, targs);\n \n   if (!any_strictly_viable (candidates))\n     error_at (loc, \"no matching function for call to %<%D(%A)%>\",\n@@ -4215,8 +4223,6 @@ build_new_function_call (tree fn, vec<tree, va_gc> **args, bool koenig_p,\n \t    return cp_build_function_call_vec (candidates->fn, args, complain);\n \n \t  // Otherwise, emit notes for non-viable candidates.\n-\t  if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n-\t    fn = TREE_OPERAND (fn, 0);\n \t  print_error_for_call_failure (fn, *args, candidates);\n \t}\n       result = error_mark_node;\n@@ -8649,19 +8655,20 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t   TREE_TYPE (instance));\n \t  else\n \t    {\n-\t      char *pretty_name;\n-\t      bool free_p;\n-\t      tree arglist;\n-\n-\t      pretty_name = name_as_c_string (name, basetype, &free_p);\n-\t      arglist = build_tree_list_vec (user_args);\n+\t      tree arglist = build_tree_list_vec (user_args);\n+\t      tree errname = name;\n+\t      if (IDENTIFIER_CTOR_OR_DTOR_P (errname))\n+\t\t{\n+\t\t  tree fn = DECL_ORIGIN (get_first_fn (fns));\n+\t\t  errname = DECL_NAME (fn);\n+\t\t}\n+\t      if (explicit_targs)\n+\t\terrname = lookup_template_function (errname, explicit_targs);\n \t      if (skip_first_for_error)\n \t\targlist = TREE_CHAIN (arglist);\n-\t      error (\"no matching function for call to %<%T::%s(%A)%#V%>\",\n-\t\t     basetype, pretty_name, arglist,\n+\t      error (\"no matching function for call to %<%T::%E(%A)%#V%>\",\n+\t\t     basetype, errname, arglist,\n \t\t     TREE_TYPE (instance));\n-\t      if (free_p)\n-\t\tfree (pretty_name);\n \t    }\n \t  print_z_candidates (location_of (name), candidates);\n \t}"}, {"sha": "ccd65b104a2cd1040efdeaca6bfc870055c54372", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -3756,8 +3756,13 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n   if (!t)\n     {\n       if (complain & tf_error)\n-\terror (want_template ? G_(\"no class template named %q#T in %q#T\")\n-\t       : G_(\"no type named %q#T in %q#T\"), name, context);\n+\t{\n+\t  if (!COMPLETE_TYPE_P (context))\n+\t    cxx_incomplete_type_error (NULL_TREE, context);\n+\t  else\n+\t    error (want_template ? G_(\"no class template named %q#T in %q#T\")\n+\t\t   : G_(\"no type named %q#T in %q#T\"), name, context);\n+\t}\n       return error_mark_node;\n     }\n   "}, {"sha": "fe1f75110b8ef4bd3eacf4b0a272b3be2bd01475", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -1049,7 +1049,9 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n \t  pp_cxx_whitespace (pp);\n \t  pp_cxx_ws_string (pp, \"=\");\n \t  pp_cxx_whitespace (pp);\n-\t  dump_type (pp, DECL_ORIGINAL_TYPE (t), flags);\n+\t  dump_type (pp, (DECL_ORIGINAL_TYPE (t)\n+\t\t\t  ? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t)),\n+\t\t     flags);\n \t  break;\n \t}\n       if ((flags & TFF_DECL_SPECIFIERS)"}, {"sha": "172ec820b4d6700c31afdaab18575926af3f12b4", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -565,7 +565,8 @@ supplement_binding_1 (cxx_binding *binding, tree decl)\n     }\n   else\n     {\n-      diagnose_name_conflict (decl, bval);\n+      if (!error_operand_p (bval))\n+\tdiagnose_name_conflict (decl, bval);\n       ok = false;\n     }\n "}, {"sha": "e669c0d1c8a48bd29b9f3ff66308a4115f5e6dd7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -3272,7 +3272,10 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t\t  parser->scope, id, parser->scope);\n       else if (TYPE_P (parser->scope))\n \t{\n-\t  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+\t  if (!COMPLETE_TYPE_P (parser->scope))\n+\t    cxx_incomplete_type_error (location_of (id), NULL_TREE,\n+\t\t\t\t       parser->scope);\n+\t  else if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n \t    error_at (location_of (id),\n \t\t      \"%qE in %q#T does not name a template type\",\n \t\t      id, parser->scope);"}, {"sha": "d390bf47469a45d38c30889ffcbe363e82a9c783", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -2259,7 +2259,7 @@ perform_koenig_lookup (cp_expr fn, vec<tree, va_gc> *args,\n \t}\n     }\n \n-  if (fn && template_id)\n+  if (fn && template_id && fn != error_mark_node)\n     fn = build2 (TEMPLATE_ID_EXPR, unknown_type_node, fn, tmpl_args);\n   \n   return fn;"}, {"sha": "7e894cdbd8678f5735a692ea9da09d11cc212652", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-56.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-56.C?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++11 } }\n+\n+using I = int;\t\t\t// { dg-message \"int\" }\n+using I = float;\t\t// { dg-error \"float\" }"}, {"sha": "691628e787817eab00bc2c9191cd60a5a5d6e080", "filename": "gcc/testsuite/g++.dg/template/crash7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -7,7 +7,7 @@\n \n template <typename> struct A\n {\n-    template <typename> A(typename A::X) {} // { dg-error \"no type\" }\n+    template <typename> A(typename A::X) {} // { dg-error \"incomplete\" }\n };\n \n // We currently don't give the \"no match\" error because we don't add the"}, {"sha": "3eda04c322523478f69fd89ac35935d721e90eca", "filename": "gcc/testsuite/g++.dg/template/error56.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -0,0 +1,12 @@\n+// Test that the error message mentions the template arguments.\n+\n+struct A\n+{\n+  template <class T> void f(T);\n+  void f();\n+};\n+\n+int main()\n+{\n+  A().f<1>();\t\t\t// { dg-error \"f<1>\" }\n+}"}, {"sha": "5336d4ed946191fd13767f8858cfd2185ec47a71", "filename": "gcc/testsuite/g++.dg/warn/forward-inner.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fforward-inner.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fforward-inner.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fforward-inner.C?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -3,13 +3,13 @@\n \n // Verify warnings for and within classes, and by extension, struct and union.\n class C1;\n-class C1::C2;      // { dg-error \"does not name a type\" }\n+class C1::C2;      // { dg-error \"incomplete\" }\n class C1::C2::C3;  // { dg-error \"has not been declared\" }\n \n class C1 {\n  public:\n   class C2;\n-  class C2::C3;    // { dg-error \"does not name a type\" }\n+  class C2::C3;    // { dg-error \"incomplete\" }\n   class C2 {\n    public:\n     class C3;"}, {"sha": "aa2acf8d142da92f06f7cd570282c99e60317aab", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl5.C?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -19,7 +19,7 @@ struct A {\n   struct Z;\n   expand me;          // { dg-error \"'expand' does not name a type\" }\n   void foo(struct A::e);\n-  void foo(struct A::z);  // { dg-error \"does not name a type\" }\n+  void foo(struct A::z);  // { dg-error \"incomplete\" }\n };\n \n struct Q;"}, {"sha": "a65971633fabe17563763b34bdd839a8ab79be44", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -41,7 +41,7 @@ void test01()\n   typedef make_signed<float>::type  \ttest5_type;\n }\n \n-// { dg-error \"does not name a type\" \"\" { target *-*-* } 32 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 32 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 34 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }"}, {"sha": "6a93e2f3640b4bddfbeda5433d16b440d82477ab", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7555e42d0143f2a5ee50425902abde7c5091ad3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7555e42d0143f2a5ee50425902abde7c5091ad3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=e7555e42d0143f2a5ee50425902abde7c5091ad3", "patch": "@@ -41,7 +41,7 @@ void test01()\n   typedef make_unsigned<float>::type  \t\ttest5_type;\n }\n \n-// { dg-error \"does not name a type\" \"\" { target *-*-* } 32 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 32 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 34 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 36 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 39 }"}]}