{"sha": "d1417442bf533b6a06246ef8f1627b196ff7c825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0MTc0NDJiZjUzM2I2YTA2MjQ2ZWY4ZjE2MjdiMTk2ZmY3YzgyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-16T20:14:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-16T20:14:45Z"}, "message": "tree-vectorizer.h (struct _loop_vec_info): Add no_data_dependencies field.\n\n\t* tree-vectorizer.h (struct _loop_vec_info): Add no_data_dependencies\n\tfield.\n\t(LOOP_VINFO_NO_DATA_DEPENDENCIES): Define.\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Clear it\n\twhen not giving up or versioning for alias only because of\n\tloop->safelen.\n\t(vect_analyze_data_ref_dependences): Set to true.\n\t* tree-vect-stmts.c (hoist_defs_of_uses): Return false if def_stmt\n\tis a GIMPLE_PHI.\n\t(vectorizable_load): Use LOOP_VINFO_NO_DATA_DEPENDENCIES instead of\n\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS, add && !nested_in_vect_loop\n\tto the condition.\n\nFrom-SVN: r206687", "tree": {"sha": "03a1ca6a02d62b0b91e99afafe1fccdc323c6673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a1ca6a02d62b0b91e99afafe1fccdc323c6673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1417442bf533b6a06246ef8f1627b196ff7c825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1417442bf533b6a06246ef8f1627b196ff7c825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1417442bf533b6a06246ef8f1627b196ff7c825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1417442bf533b6a06246ef8f1627b196ff7c825/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfb1582ce3fd2524f32fb009c59e84dc999db4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb1582ce3fd2524f32fb009c59e84dc999db4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb1582ce3fd2524f32fb009c59e84dc999db4f9"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "2000ed83ac4dedae5986358edf795e3a5ba377e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1417442bf533b6a06246ef8f1627b196ff7c825", "patch": "@@ -1,5 +1,18 @@\n 2014-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-vectorizer.h (struct _loop_vec_info): Add no_data_dependencies\n+\tfield.\n+\t(LOOP_VINFO_NO_DATA_DEPENDENCIES): Define.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Clear it\n+\twhen not giving up or versioning for alias only because of\n+\tloop->safelen.\n+\t(vect_analyze_data_ref_dependences): Set to true.\n+\t* tree-vect-stmts.c (hoist_defs_of_uses): Return false if def_stmt\n+\tis a GIMPLE_PHI.\n+\t(vectorizable_load): Use LOOP_VINFO_NO_DATA_DEPENDENCIES instead of\n+\tLOOP_REQUIRES_VERSIONING_FOR_ALIAS, add && !nested_in_vect_loop\n+\tto the condition.\n+\n \tPR middle-end/58344\n \t* expr.c (expand_expr_real_1): Handle init == NULL_TREE.\n "}, {"sha": "0deac8177fd141039dede98146f7ce1b1705f0bb", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=d1417442bf533b6a06246ef8f1627b196ff7c825", "patch": "@@ -244,6 +244,7 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t{\n \t  if (loop->safelen < *max_vf)\n \t    *max_vf = loop->safelen;\n+\t  LOOP_VINFO_NO_DATA_DEPENDENCIES (loop_vinfo) = false;\n \t  return false;\n \t}\n \n@@ -291,6 +292,7 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \t{\n \t  if (loop->safelen < *max_vf)\n \t    *max_vf = loop->safelen;\n+\t  LOOP_VINFO_NO_DATA_DEPENDENCIES (loop_vinfo) = false;\n \t  return false;\n \t}\n \n@@ -447,6 +449,7 @@ vect_analyze_data_ref_dependences (loop_vec_info loop_vinfo, int *max_vf)\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_analyze_data_ref_dependences ===\\n\");\n \n+  LOOP_VINFO_NO_DATA_DEPENDENCIES (loop_vinfo) = true;\n   if (!compute_all_dependences (LOOP_VINFO_DATAREFS (loop_vinfo),\n \t\t\t\t&LOOP_VINFO_DDRS (loop_vinfo),\n \t\t\t\tLOOP_VINFO_LOOP_NEST (loop_vinfo), true))"}, {"sha": "2a2364d9542667fec9ecd011fcd6e11df108615f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d1417442bf533b6a06246ef8f1627b196ff7c825", "patch": "@@ -5504,6 +5504,8 @@ hoist_defs_of_uses (gimple stmt, struct loop *loop)\n \t     dependencies within them.  */\n \t  tree op2;\n \t  ssa_op_iter i2;\n+\t  if (gimple_code (def_stmt) == GIMPLE_PHI)\n+\t    return false;\n \t  FOR_EACH_SSA_TREE_OPERAND (op2, def_stmt, i2, SSA_OP_USE)\n \t    {\n \t      gimple def_stmt2 = SSA_NAME_DEF_STMT (op2);\n@@ -6434,10 +6436,12 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      if (inv_p && !bb_vinfo)\n \t\t{\n \t\t  gcc_assert (!grouped_load);\n-\t\t  /* If we have versioned for aliasing then we are sure\n-\t\t     this is a loop invariant load and thus we can insert\n-\t\t     it on the preheader edge.  */\n-\t\t  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo)\n+\t\t  /* If we have versioned for aliasing or the loop doesn't\n+\t\t     have any data dependencies that would preclude this,\n+\t\t     then we are sure this is a loop invariant load and\n+\t\t     thus we can insert it on the preheader edge.  */\n+\t\t  if (LOOP_VINFO_NO_DATA_DEPENDENCIES (loop_vinfo)\n+\t\t      && !nested_in_vect_loop\n \t\t      && hoist_defs_of_uses (stmt, loop))\n \t\t    {\n \t\t      if (dump_enabled_p ())"}, {"sha": "51367ea2500b01e26872e357c9c670b65b91604b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1417442bf533b6a06246ef8f1627b196ff7c825/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=d1417442bf533b6a06246ef8f1627b196ff7c825", "patch": "@@ -347,6 +347,25 @@ typedef struct _loop_vec_info {\n      fix it up.  */\n   bool operands_swapped;\n \n+  /* True if there are no loop carried data dependencies in the loop.\n+     If loop->safelen <= 1, then this is always true, either the loop\n+     didn't have any loop carried data dependencies, or the loop is being\n+     vectorized guarded with some runtime alias checks, or couldn't\n+     be vectorized at all, but then this field shouldn't be used.\n+     For loop->safelen >= 2, the user has asserted that there are no\n+     backward dependencies, but there still could be loop carried forward\n+     dependencies in such loops.  This flag will be false if normal\n+     vectorizer data dependency analysis would fail or require versioning\n+     for alias, but because of loop->safelen >= 2 it has been vectorized\n+     even without versioning for alias.  E.g. in:\n+     #pragma omp simd\n+     for (int i = 0; i < m; i++)\n+       a[i] = a[i + k] * c;\n+     (or #pragma simd or #pragma ivdep) we can vectorize this and it will\n+     DTRT even for k > 0 && k < m, but without safelen we would not\n+     vectorize this, so this field would be false.  */\n+  bool no_data_dependencies;\n+\n   /* If if-conversion versioned this loop before conversion, this is the\n      loop version without if-conversion.  */\n   struct loop *scalar_loop;\n@@ -385,6 +404,7 @@ typedef struct _loop_vec_info {\n #define LOOP_VINFO_PEELING_FOR_GAPS(L)     (L)->peeling_for_gaps\n #define LOOP_VINFO_OPERANDS_SWAPPED(L)     (L)->operands_swapped\n #define LOOP_VINFO_PEELING_FOR_NITER(L)    (L)->peeling_for_niter\n+#define LOOP_VINFO_NO_DATA_DEPENDENCIES(L) (L)->no_data_dependencies\n #define LOOP_VINFO_SCALAR_LOOP(L)\t   (L)->scalar_loop\n \n #define LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT(L) \\"}]}