{"sha": "13e0981af51244eef62156d1e7c4810e87d616da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlMDk4MWFmNTEyNDRlZWY2MjE1NmQxZTdjNDgxMGU4N2Q2MTZkYQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2013-11-14T18:25:33Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2013-11-14T18:25:33Z"}, "message": "linux-unwind.h (ppc_fallback_frame_state): Correct location of CR save area for 64-bit little-endian systems.\n\n2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\t    Alan Modra  <amodra@gmail.com>\n\n\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Correct\n\tlocation of CR save area for 64-bit little-endian systems.\n\n\nCo-Authored-By: Alan Modra <amodra@gmail.com>\n\nFrom-SVN: r204800", "tree": {"sha": "74200d0b4259405c2cca7263eddb8bb6115ee078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74200d0b4259405c2cca7263eddb8bb6115ee078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e0981af51244eef62156d1e7c4810e87d616da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e0981af51244eef62156d1e7c4810e87d616da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e0981af51244eef62156d1e7c4810e87d616da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e0981af51244eef62156d1e7c4810e87d616da/comments", "author": null, "committer": null, "parents": [{"sha": "dc2faee140907409050417fc38004d94dd40ed22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2faee140907409050417fc38004d94dd40ed22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2faee140907409050417fc38004d94dd40ed22"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "ba72c24a082bb188695ddcd9d844f63608808ebb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e0981af51244eef62156d1e7c4810e87d616da/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e0981af51244eef62156d1e7c4810e87d616da/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=13e0981af51244eef62156d1e7c4810e87d616da", "patch": "@@ -1,3 +1,9 @@\n+2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Correct\n+\tlocation of CR save area for 64-bit little-endian systems.\n+\n 2013-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config.host (arm-wrs-vxworks): Replace arm/t-vxworks with arm/t-elf"}, {"sha": "c481e06dd24dea66fc91dfa3a06c77b59537f50f", "filename": "libgcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e0981af51244eef62156d1e7c4810e87d616da/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e0981af51244eef62156d1e7c4810e87d616da/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=13e0981af51244eef62156d1e7c4810e87d616da", "patch": "@@ -185,6 +185,7 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n {\n   struct gcc_regs *regs = get_regs (context);\n   struct gcc_vregs *vregs;\n+  long cr_offset;\n   long new_cfa;\n   int i;\n \n@@ -206,11 +207,13 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.reg[i].loc.offset = (long) &regs->gpr[i] - new_cfa;\n     }\n \n+  /* The CR is saved in the low 32 bits of regs->ccr.  */\n+  cr_offset = (long) &regs->ccr - new_cfa;\n+#ifndef __LITTLE_ENDIAN__\n+  cr_offset += sizeof (long) - 4;\n+#endif\n   fs->regs.reg[R_CR2].how = REG_SAVED_OFFSET;\n-  /* CR? regs are always 32-bit and PPC is big-endian, so in 64-bit\n-     libgcc loc.offset needs to point to the low 32 bits of regs->ccr.  */\n-  fs->regs.reg[R_CR2].loc.offset = (long) &regs->ccr - new_cfa\n-\t\t\t\t   + sizeof (long) - 4;\n+  fs->regs.reg[R_CR2].loc.offset = cr_offset;\n \n   fs->regs.reg[R_LR].how = REG_SAVED_OFFSET;\n   fs->regs.reg[R_LR].loc.offset = (long) &regs->link - new_cfa;"}]}