{"sha": "dbe65f77ff5b6a9013d71177552d417a2fe06693", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlNjVmNzdmZjViNmE5MDEzZDcxMTc3NTUyZDQxN2EyZmUwNjY5Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2017-05-01T23:31:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2017-05-01T23:31:24Z"}, "message": "d-demangle.c (strtol): Remove declaration.\n\nlibiberty/ChangeLog:\n\n\t* d-demangle.c (strtol): Remove declaration.\n\tUpdated all callers to use dlang_number.\n\t(dlang_number): New function.\n\t(dlang_value): Moved check for ISDIGIT into dlang_parse_integer.\n\t* testsuite/d-demangle-expected: Add tests.\n\nFrom-SVN: r247453", "tree": {"sha": "38a282c546eb18b6a1a976b8606624140be7de43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38a282c546eb18b6a1a976b8606624140be7de43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe65f77ff5b6a9013d71177552d417a2fe06693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe65f77ff5b6a9013d71177552d417a2fe06693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe65f77ff5b6a9013d71177552d417a2fe06693", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe65f77ff5b6a9013d71177552d417a2fe06693/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0aae15720e6ba2eb8b8f119d8e6dc0169299d151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aae15720e6ba2eb8b8f119d8e6dc0169299d151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aae15720e6ba2eb8b8f119d8e6dc0169299d151"}], "stats": {"total": 232, "additions": 185, "deletions": 47}, "files": [{"sha": "9bf22362cdba94909654304297d9f92ca8c05807", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=dbe65f77ff5b6a9013d71177552d417a2fe06693", "patch": "@@ -1,3 +1,11 @@\n+2017-05-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-demangle.c (strtol): Remove declaration.\n+\tUpdated all callers to use dlang_number.\n+\t(dlang_number): New function.\n+\t(dlang_value): Moved check for ISDIGIT into dlang_parse_integer.\n+\t* testsuite/d-demangle-expected: Add tests.\n+\n 2017-05-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-demangle.c (dlang_parse_symbol): Remove function."}, {"sha": "3aaffe1f14f8c83712324fc981004e28e4e23758", "filename": "libiberty/d-demangle.c", "status": "modified", "additions": 57, "deletions": 47, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2Fd-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2Fd-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fd-demangle.c?ref=dbe65f77ff5b6a9013d71177552d417a2fe06693", "patch": "@@ -26,9 +26,7 @@ You should have received a copy of the GNU Library General Public\n License along with libiberty; see the file COPYING.LIB.\n If not, see <http://www.gnu.org/licenses/>.  */\n \n-/* This file exports one function; dlang_demangle.\n-\n-   This file imports strtol for decoding mangled literals.  */\n+/* This file exports one function; dlang_demangle.  */\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n@@ -42,8 +40,6 @@ If not, see <http://www.gnu.org/licenses/>.  */\n \n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n-#else\n-extern long strtol (const char *nptr, char **endptr, int base);\n #endif\n \n #include <demangle.h>\n@@ -197,6 +193,36 @@ static const char *dlang_parse_tuple (string *, const char *);\n static const char *dlang_parse_template (string *, const char *, long);\n \n \n+/* Extract the number from MANGLED, and assign the result to RET.\n+   Return the remaining string on success or NULL on failure.  */\n+static const char *\n+dlang_number (const char *mangled, long *ret)\n+{\n+  /* Return NULL if trying to extract something that isn't a digit.  */\n+  if (mangled == NULL || !ISDIGIT (*mangled))\n+    return NULL;\n+\n+  (*ret) = 0;\n+\n+  while (ISDIGIT (*mangled))\n+    {\n+      (*ret) *= 10;\n+\n+      /* If an overflow occured when multiplying by ten, the result\n+\t will not be a multiple of ten.  */\n+      if ((*ret % 10) != 0)\n+\treturn NULL;\n+\n+      (*ret) += mangled[0] - '0';\n+      mangled++;\n+    }\n+\n+  if (*mangled == '\\0' || *ret < 0)\n+    return NULL;\n+\n+  return mangled;\n+}\n+\n /* Demangle the calling convention from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n@@ -709,15 +735,10 @@ static const char *\n dlang_identifier (string *decl, const char *mangled,\n \t\t  enum dlang_symbol_kinds kind)\n {\n-  char *endptr;\n   long len;\n+  const char *endptr = dlang_number (mangled, &len);\n \n-  if (mangled == NULL || *mangled == '\\0')\n-    return NULL;\n-\n-  len = strtol (mangled, &endptr, 10);\n-\n-  if (endptr == NULL || len <= 0)\n+  if (endptr == NULL || len == 0)\n     return NULL;\n \n   /* In template parameter symbols, the first character of the mangled\n@@ -726,7 +747,7 @@ dlang_identifier (string *decl, const char *mangled,\n   if (kind == dlang_template_param)\n     {\n       long psize = len;\n-      char *pend;\n+      const char *pend;\n       int saved = string_length (decl);\n \n       /* Work backwards until a match is found.  */\n@@ -871,10 +892,10 @@ dlang_parse_integer (string *decl, const char *mangled, char type)\n       char value[10];\n       int pos = 10;\n       int width = 0;\n-      char *endptr;\n-      long val = strtol (mangled, &endptr, 10);\n+      long val;\n \n-      if (endptr == NULL || val < 0)\n+      mangled = dlang_number (mangled, &val);\n+      if (mangled == NULL)\n \treturn NULL;\n \n       string_append (decl, \"'\");\n@@ -923,26 +944,27 @@ dlang_parse_integer (string *decl, const char *mangled, char type)\n \t  string_appendn (decl, &(value[pos]), 10 - pos);\n \t}\n       string_append (decl, \"'\");\n-      mangled = endptr;\n     }\n   else if (type == 'b')\n     {\n       /* Parse boolean value.  */\n-      char *endptr;\n-      long val = strtol (mangled, &endptr, 10);\n+      long val;\n \n-      if (endptr == NULL || val < 0)\n+      mangled = dlang_number (mangled, &val);\n+      if (mangled == NULL)\n \treturn NULL;\n \n       string_append (decl, val ? \"true\" : \"false\");\n-      mangled = endptr;\n     }\n   else\n     {\n       /* Parse integer value.  */\n       const char *numptr = mangled;\n       size_t num = 0;\n \n+      if (! ISDIGIT (*mangled))\n+\treturn NULL;\n+\n       while (ISDIGIT (*mangled))\n \t{\n \t  num++;\n@@ -1070,17 +1092,11 @@ static const char *\n dlang_parse_string (string *decl, const char *mangled)\n {\n   char type = *mangled;\n-  char *endptr;\n   long len;\n \n   mangled++;\n-  len = strtol (mangled, &endptr, 10);\n-\n-  if (endptr == NULL || len < 0)\n-    return NULL;\n-\n-  mangled = endptr;\n-  if (*mangled != '_')\n+  mangled = dlang_number (mangled, &len);\n+  if (mangled == NULL || *mangled != '_')\n     return NULL;\n \n   mangled++;\n@@ -1143,13 +1159,12 @@ dlang_parse_string (string *decl, const char *mangled)\n static const char *\n dlang_parse_arrayliteral (string *decl, const char *mangled)\n {\n-  char *endptr;\n-  long elements = strtol (mangled, &endptr, 10);\n+  long elements;\n \n-  if (endptr == NULL || elements < 0)\n+  mangled = dlang_number (mangled, &elements);\n+  if (mangled == NULL)\n     return NULL;\n \n-  mangled = endptr;\n   string_append (decl, \"[\");\n   while (elements--)\n     {\n@@ -1167,13 +1182,12 @@ dlang_parse_arrayliteral (string *decl, const char *mangled)\n static const char *\n dlang_parse_assocarray (string *decl, const char *mangled)\n {\n-  char *endptr;\n-  long elements = strtol (mangled, &endptr, 10);\n+  long elements;\n \n-  if (endptr == NULL || elements < 0)\n+  mangled = dlang_number (mangled, &elements);\n+  if (mangled == NULL)\n     return NULL;\n \n-  mangled = endptr;\n   string_append (decl, \"[\");\n   while (elements--)\n     {\n@@ -1194,13 +1208,12 @@ dlang_parse_assocarray (string *decl, const char *mangled)\n static const char *\n dlang_parse_structlit (string *decl, const char *mangled, const char *name)\n {\n-  char *endptr;\n-  long args = strtol (mangled, &endptr, 10);\n+  long args;\n \n-  if (endptr == NULL || args < 0)\n+  mangled = dlang_number (mangled, &args);\n+  if (mangled == NULL)\n     return NULL;\n \n-  mangled = endptr;\n   if (name != NULL)\n     string_append (decl, name);\n \n@@ -1241,8 +1254,6 @@ dlang_value (string *decl, const char *mangled, const char *name, char type)\n \n     case 'i':\n       mangled++;\n-      if (*mangled < '0' || *mangled > '9')\n-\treturn NULL;\n       /* Fall through */\n \n       /* There really should always be an `i' before encoded numbers, but there\n@@ -1469,13 +1480,12 @@ dlang_parse_qualified (string *decl, const char *mangled,\n static const char *\n dlang_parse_tuple (string *decl, const char *mangled)\n {\n-  char *endptr;\n-  long elements = strtol (mangled, &endptr, 10);\n+  long elements;\n \n-  if (endptr == NULL || elements < 0)\n+  mangled = dlang_number (mangled, &elements);\n+  if (mangled == NULL)\n     return NULL;\n \n-  mangled = endptr;\n   string_append (decl, \"Tuple!(\");\n \n   while (elements--)"}, {"sha": "0f511475faf03f0855473342e18a4745091286a0", "filename": "libiberty/testsuite/d-demangle-expected", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2Ftestsuite%2Fd-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe65f77ff5b6a9013d71177552d417a2fe06693/libiberty%2Ftestsuite%2Fd-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fd-demangle-expected?ref=dbe65f77ff5b6a9013d71177552d417a2fe06693", "patch": "@@ -850,6 +850,14 @@ _D8demangle22__T4testVG3uw3_616263Zv\n demangle.test!(\"abc\"w)\n #\n --format=dlang\n+_D8demangle16__T4testVAyaa0_Zv\n+demangle.test!(\"\")\n+#\n+--format=dlang\n+_D8demangle30__T4testVAyaa7_20090a0d0c0b00Zv\n+demangle.test!(\" \\t\\n\\r\\f\\v\\x00\")\n+#\n+--format=dlang\n _D8demangle22__T4testVAiA4i1i2i3i4Zv\n demangle.test!([1, 2, 3, 4])\n #\n@@ -964,6 +972,118 @@ _D5__T1aZv\n _D5__T1aZv\n #\n --format=dlang\n+_D00\n+_D00\n+#\n+--format=dlang\n+_D9223372036854775817\n+_D9223372036854775817\n+#\n+--format=dlang\n+_D1az\n+_D1az\n+#\n+--format=dlang\n+_D1aN\n+_D1aN\n+#\n+--format=dlang\n+_D1aF\n+_D1aF\n+#\n+--format=dlang\n+_D1aM\n+_D1aM\n+#\n+--format=dlang\n+_D1aFZNz\n+_D1aFZNz\n+#\n+--format=dlang\n+_D1aFNzZv\n+_D1aFNzZv\n+#\n+--format=dlang\n+_D4testFDX\n+_D4testFDX\n+#\n+--format=dlang\n+_D5__T0aZv\n+_D5__T0aZv\n+#\n+--format=dlang\n+_D10__T4testYZv\n+_D10__T4testYZv\n+#\n+--format=dlang\n+_D4testFBaZv\n+_D4testFBaZv\n+#\n+--format=dlang\n+_D8__T4test\n+_D8__T4test\n+#\n+--format=dlang\n+_D10__T4testVi\n+_D10__T4testVi\n+#\n+--format=dlang\n+_D10__T4testVai\n+_D10__T4testVai\n+#\n+--format=dlang\n+_D10__T4testVbi\n+_D10__T4testVbi\n+#\n+--format=dlang\n+_D11__T4testS1a\n+_D11__T4testS1a\n+#\n+--format=dlang\n+_D12__T4testViiZv\n+_D12__T4testViiZv\n+#\n+--format=dlang\n+_D12__T4testViYZv\n+_D12__T4testViYZv\n+#\n+--format=dlang\n+_D12__T4testVrcZv\n+_D12__T4testVrcZv\n+#\n+--format=dlang\n+_D13__T4testVdeYZv\n+_D13__T4testVdeYZv\n+#\n+--format=dlang\n+_D13__T4testViSiZv\n+_D13__T4testViSiZv\n+#\n+--format=dlang\n+_D14__T4testVAiAiZv\n+_D14__T4testVAiAiZv\n+#\n+--format=dlang\n+_D14__T4testS123aZv\n+_D14__T4testS123aZv\n+#\n+--format=dlang\n+_D15__T4testVHiiAiZv\n+_D15__T4testVHiiAiZv\n+#\n+--format=dlang\n+_D15__T4testVfe0p1Zv\n+_D15__T4testVfe0p1Zv\n+#\n+--format=dlang\n+_D16__T4testVAyaa0aZv\n+_D16__T4testVAyaa0aZv\n+#\n+--format=dlang\n+_D18__T4testVAyaa1_YYZv\n+_D18__T4testVAyaa1_YYZv\n+#\n+--format=dlang\n _D4test3fooAa\n test.foo\n #"}]}