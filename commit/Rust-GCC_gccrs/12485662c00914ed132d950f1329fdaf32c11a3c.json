{"sha": "12485662c00914ed132d950f1329fdaf32c11a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0ODU2NjJjMDA5MTRlZDEzMmQ5NTBmMTMyOWZkYWYzMmMxMWEzYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-11-20T13:25:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-20T13:25:04Z"}, "message": "re PR ipa/87706 (Inlined functions trigger invalid -Wmissing-profile warning)\n\n\n\tPR ipa/87706\n\t* ipa-fnsummary.c (pass_ipa_fnsummary): Do not remove functions\n\t* ipa.c (possible_inline_candidate_p): Break out from ..\n\t(process_references): ... here ; drop before_inlining_p;\n\tcleanup handling of alises.\n\t(walk_polymorphic_call_targets): Likewise.\n\t(symbol_table::remove_unreachable_nodes): Likewise.\n\t* passes.c (pass_data_ipa_remove_symbols): New structure.\n\t(pass_ipa_remove_symbols): New pass.\n\t(make_pass_ipa_remove_symbols): New functoin.\n\t* passes.def (pass_ipa_remove_symbols): Schedule after early passes.\n\nFrom-SVN: r266315", "tree": {"sha": "915c311dd930a542e608132872f89e56f2d114e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/915c311dd930a542e608132872f89e56f2d114e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12485662c00914ed132d950f1329fdaf32c11a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12485662c00914ed132d950f1329fdaf32c11a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12485662c00914ed132d950f1329fdaf32c11a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12485662c00914ed132d950f1329fdaf32c11a3c/comments", "author": null, "committer": null, "parents": [{"sha": "8c944c97a2e5a264779ad1d448f97319f471275a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c944c97a2e5a264779ad1d448f97319f471275a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c944c97a2e5a264779ad1d448f97319f471275a"}], "stats": {"total": 123, "additions": 89, "deletions": 34}, "files": [{"sha": "44ca2cefb3e268ab1d9dd2ae9a586b82857ec4c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -1,3 +1,17 @@\n+2018-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/87706\n+\t* ipa-fnsummary.c (pass_ipa_fnsummary): Do not remove functions\n+\t* ipa.c (possible_inline_candidate_p): Break out from ..\n+\t(process_references): ... here ; drop before_inlining_p;\n+\tcleanup handling of alises.\n+\t(walk_polymorphic_call_targets): Likewise.\n+\t(symbol_table::remove_unreachable_nodes): Likewise.\n+\t* passes.c (pass_data_ipa_remove_symbols): New structure.\n+\t(pass_ipa_remove_symbols): New pass.\n+\t(make_pass_ipa_remove_symbols): New functoin.\n+\t* passes.def (pass_ipa_remove_symbols): Schedule after early passes.\n+\n 2018-11-20  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vectorizable_condition): Do not get"}, {"sha": "23b7821dcc1af167d59c682ab5bb44708532f6ba", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -3563,10 +3563,7 @@ class pass_ipa_free_fn_summary : public simple_ipa_opt_pass\n   virtual unsigned int execute (function *)\n     {\n       ipa_free_fn_summary ();\n-      /* Early optimizations may make function unreachable.  We can not\n-\t remove unreachable functions as part of the early opts pass because\n-\t TODOs are run before subpasses.  Do it here.  */\n-      return small_p ? TODO_remove_functions | TODO_dump_symtab : 0;\n+      return 0;\n     }\n \n private:"}, {"sha": "89fb1da50fd42fd0e3e926c530ec699822efbaa1", "filename": "gcc/ipa.c", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -101,12 +101,32 @@ enqueue_node (symtab_node *node, symtab_node **first,\n   *first = node;\n }\n \n+/* Return true if NODE may get inlined later.\n+   This is used to keep DECL_EXTERNAL function bodies around long enough\n+   so inliner can proces them.  */\n+\n+static bool\n+possible_inline_candidate_p (symtab_node *node)\n+{\n+  if (symtab->state >= IPA_SSA_AFTER_INLINING)\n+    return false;\n+  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n+  if (!cnode)\n+    return false;\n+  if (DECL_UNINLINABLE (cnode->decl))\n+    return false;\n+  if (opt_for_fn (cnode->decl, optimize))\n+    return true;\n+  if (symtab->state >= IPA_SSA)\n+    return false;\n+  return lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (node->decl));\n+}\n+\n /* Process references.  */\n \n static void\n process_references (symtab_node *snode,\n \t\t    symtab_node **first,\n-\t\t    bool before_inlining_p,\n \t\t    hash_set<symtab_node *> *reachable)\n {\n   int i;\n@@ -118,14 +138,7 @@ process_references (symtab_node *snode,\n \n       if (node->definition && !node->in_other_partition\n \t  && ((!DECL_EXTERNAL (node->decl) || node->alias)\n-\t      || (((before_inlining_p\n-\t\t    && (TREE_CODE (node->decl) != FUNCTION_DECL\n-\t\t\t|| (TREE_CODE (node->decl) == FUNCTION_DECL\n-\t\t\t    && opt_for_fn (body->decl, optimize))\n-\t\t        || (symtab->state < IPA_SSA\n-\t\t            && lookup_attribute\n-\t\t\t\t (\"always_inline\",\n-\t\t\t          DECL_ATTRIBUTES (body->decl))))))\n+\t      || (possible_inline_candidate_p (node)\n \t\t  /* We use variable constructors during late compilation for\n \t\t     constant folding.  Keep references alive so partitioning\n \t\t     knows about potential references.  */\n@@ -140,7 +153,7 @@ process_references (symtab_node *snode,\n \t     body.  */\n \t  if (DECL_EXTERNAL (node->decl)\n \t      && node->alias\n-\t      && before_inlining_p)\n+\t      && symtab->state < IPA_SSA_AFTER_INLINING)\n \t    reachable->add (body);\n \t  reachable->add (node);\n \t}\n@@ -160,8 +173,7 @@ static void\n walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t\t\t       struct cgraph_edge *edge,\n \t\t\t       symtab_node **first,\n-\t\t\t       hash_set<symtab_node *> *reachable,\n-\t\t\t       bool before_inlining_p)\n+\t\t\t       hash_set<symtab_node *> *reachable)\n {\n   unsigned int i;\n   void *cache_token;\n@@ -190,15 +202,14 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t  /* Prior inlining, keep alive bodies of possible targets for\n \t     devirtualization.  */\n \t  if (n->definition\n-\t      && (before_inlining_p\n-\t\t  && opt_for_fn (body->decl, optimize)\n+\t      && (possible_inline_candidate_p (body)\n \t\t  && opt_for_fn (body->decl, flag_devirtualize)))\n \t     {\n \t\t/* Be sure that we will not optimize out alias target\n \t\t   body.  */\n \t\tif (DECL_EXTERNAL (n->decl)\n \t\t    && n->alias\n-\t\t    && before_inlining_p)\n+\t\t    && symtab->state < IPA_SSA_AFTER_INLINING)\n \t\t  reachable->add (body);\n \t       reachable->add (n);\n \t     }\n@@ -303,8 +314,6 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n   hash_set<symtab_node *> reachable;\n   hash_set<tree> body_needed_for_clonning;\n   hash_set<void *> reachable_call_targets;\n-  bool before_inlining_p = symtab->state < (!optimize && !in_lto_p ? IPA_SSA\n-\t\t\t\t\t    : IPA_SSA_AFTER_INLINING);\n \n   timevar_push (TV_IPA_UNREACHABLE);\n   build_type_inheritance_graph ();\n@@ -396,7 +405,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t\t  enqueue_node (next, &first, &reachable);\n \t    }\n \t  /* Mark references as reachable.  */\n-\t  process_references (node, &first, before_inlining_p, &reachable);\n+\t  process_references (node, &first, &reachable);\n \t}\n \n       if (cgraph_node *cnode = dyn_cast <cgraph_node *> (node))\n@@ -416,8 +425,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t\t      next = e->next_callee;\n \t\t      if (e->indirect_info->polymorphic)\n \t\t\twalk_polymorphic_call_targets (&reachable_call_targets,\n-\t\t\t\t\t\t       e, &first, &reachable,\n-\t\t\t\t\t\t       before_inlining_p);\n+\t\t\t\t\t\t       e, &first, &reachable);\n \t\t    }\n \t\t}\n \t      for (e = cnode->callees; e; e = e->next_callee)\n@@ -428,18 +436,13 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t\t      && (!e->inline_failed\n \t\t\t  || !DECL_EXTERNAL (e->callee->decl)\n \t\t\t  || e->callee->alias\n-\t\t\t  || (before_inlining_p\n-\t\t\t      && (opt_for_fn (body->decl, optimize)\n-\t\t                  || (symtab->state < IPA_SSA\n-\t\t                      && lookup_attribute\n-\t\t\t\t          (\"always_inline\",\n-\t\t\t\t           DECL_ATTRIBUTES (body->decl)))))))\n+\t\t\t  || possible_inline_candidate_p (e->callee)))\n \t\t    {\n \t\t      /* Be sure that we will not optimize out alias target\n \t\t\t body.  */\n \t\t      if (DECL_EXTERNAL (e->callee->decl)\n \t\t\t  && e->callee->alias\n-\t\t\t  && before_inlining_p)\n+\t\t\t  && symtab->state < IPA_SSA_AFTER_INLINING)\n \t\t\treachable.add (body);\n \t\t      reachable.add (e->callee);\n \t\t    }\n@@ -654,7 +657,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t\t   of possible later devirtualization.  Do not mark them as\n \t\t   local too early so we won't optimize them out before\n \t\t   we are done with polymorphic call analysis.  */\n-\t\t&& (!before_inlining_p\n+\t\t&& (symtab->state >= IPA_SSA_AFTER_INLINING\n \t\t    || !node->call_for_symbol_and_aliases\n \t\t       (is_indirect_call_target_p, NULL, true)))\n \t      {"}, {"sha": "85aa47d5c81e5719e638bc4b5f60b4df6b1ab592", "filename": "gcc/passes.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -459,6 +459,35 @@ class pass_local_optimization_passes : public simple_ipa_opt_pass\n \n }; // class pass_local_optimization_passes\n \n+const pass_data pass_data_ipa_remove_symbols =\n+{\n+  SIMPLE_IPA_PASS, /* type */\n+  \"remove_symbols\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_remove_functions | TODO_dump_symtab, /* todo_flags_finish */\n+};\n+\n+class pass_ipa_remove_symbols : public simple_ipa_opt_pass\n+{\n+public:\n+  pass_ipa_remove_symbols (gcc::context *ctxt)\n+    : simple_ipa_opt_pass (pass_data_ipa_remove_symbols, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *)\n+    {\n+      /* Don't bother doing anything if the program has errors.  */\n+      return (!seen_error () && !in_lto_p);\n+    }\n+\n+}; // class pass_local_optimization_passes\n+\n } // anon namespace\n \n simple_ipa_opt_pass *\n@@ -473,6 +502,12 @@ make_pass_local_optimization_passes (gcc::context *ctxt)\n   return new pass_local_optimization_passes (ctxt);\n }\n \n+simple_ipa_opt_pass *\n+make_pass_ipa_remove_symbols (gcc::context *ctxt)\n+{\n+  return new pass_ipa_remove_symbols (ctxt);\n+}\n+\n namespace {\n \n const pass_data pass_data_all_early_optimizations ="}, {"sha": "82ad9404b9e27f24f41bf4cfda4c30730507f96e", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -106,6 +106,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_local_fn_summary);\n   POP_INSERT_PASSES ()\n \n+  NEXT_PASS (pass_ipa_remove_symbols);\n   NEXT_PASS (pass_ipa_oacc);\n   PUSH_INSERT_PASSES_WITHIN (pass_ipa_oacc)\n       NEXT_PASS (pass_ipa_pta);"}, {"sha": "4ec625f17689efeca84dc4d2b7919ee30c5e3b2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -1,3 +1,8 @@\n+2018-11-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/87706\n+\t* gcc.dg/ipa/ctor-empty-1.c: Update template.\n+\n 2018-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88074"}, {"sha": "b1f4f8545a17ca2bf6cc56aa6c1fbe4abd9c3197", "filename": "gcc/testsuite/gcc.dg/ipa/ctor-empty-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12485662c00914ed132d950f1329fdaf32c11a3c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fctor-empty-1.c?ref=12485662c00914ed132d950f1329fdaf32c11a3c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -c -fdump-ipa-free-fnsummary1\"  } */\n+/* { dg-options \"-O3 -c -fdump-ipa-remove_symbols\"  } */\n static __attribute__((constructor))\n void empty_constructor()\n {\n }\n-/* { dg-final { scan-ipa-dump \"Reclaiming functions: empty_constructor\"  \"free-fnsummary1\"  } } */\n+/* { dg-final { scan-ipa-dump \"Reclaiming functions: empty_constructor\"  \"remove_symbols\"  } } */"}]}