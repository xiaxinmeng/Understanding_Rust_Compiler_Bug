{"sha": "003d46d5f302b8b93ac6085e98926c009cc0dec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzZDQ2ZDVmMzAyYjhiOTNhYzYwODVlOTg5MjZjMDA5Y2MwZGVjNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:29:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:29:17Z"}, "message": "Code cleanups.\n\nFrom-SVN: r247161", "tree": {"sha": "66a8d03e2b171d1eb49f971d571e5108fd896405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a8d03e2b171d1eb49f971d571e5108fd896405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/003d46d5f302b8b93ac6085e98926c009cc0dec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003d46d5f302b8b93ac6085e98926c009cc0dec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003d46d5f302b8b93ac6085e98926c009cc0dec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003d46d5f302b8b93ac6085e98926c009cc0dec4/comments", "author": null, "committer": null, "parents": [{"sha": "f4f5851ea31b5cb5c5b81ba645ce51a0a593b0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f5851ea31b5cb5c5b81ba645ce51a0a593b0d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f5851ea31b5cb5c5b81ba645ce51a0a593b0d7"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "bced508c7b22e5494f27a3ff6298bfd7dc4e0956", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003d46d5f302b8b93ac6085e98926c009cc0dec4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003d46d5f302b8b93ac6085e98926c009cc0dec4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=003d46d5f302b8b93ac6085e98926c009cc0dec4", "patch": "@@ -1999,7 +1999,7 @@ package body Exp_Util is\n       --  Obj_Id denotes the entity of the _object formal parameter of the\n       --  invariant procedure. All created checks are added to list Checks.\n \n-      procedure Add_Inherited_Invariant\n+      procedure Add_Inherited_Invariants\n         (Full_Typ : Entity_Id;\n          Priv_Typ : Entity_Id;\n          Obj_Id   : Entity_Id;\n@@ -2028,7 +2028,7 @@ package body Exp_Util is\n       --  is added to list Checks. Flag Inherited should be set when the pragma\n       --  is inherited from a parent or interface type.\n \n-      procedure Add_Own_Invariant\n+      procedure Add_Own_Invariants\n         (T         : Entity_Id;\n          Obj_Id    : Entity_Id;\n          Checks    : in out List_Id;\n@@ -2211,11 +2211,11 @@ package body Exp_Util is\n             Dim_Checks => Checks);\n       end Add_Array_Component_Invariants;\n \n-      -----------------------------\n-      -- Add_Inherited_Invariant --\n-      -----------------------------\n+      ------------------------------\n+      -- Add_Inherited_Invariants --\n+      ------------------------------\n \n-      procedure Add_Inherited_Invariant\n+      procedure Add_Inherited_Invariants\n         (Full_Typ : Entity_Id;\n          Priv_Typ : Entity_Id;\n          Obj_Id   : Entity_Id;\n@@ -2267,9 +2267,9 @@ package body Exp_Util is\n                elsif Present (Full_Typ) and then Entity (Arg1) = Full_Typ then\n                   Rep_Typ := Full_Typ;\n \n-               --  Otherwise the pragma applies to a parent type in which case\n-               --  it will be processed at a later stage by\n-               --  Add_Parent_Invariants or Add_Interface_Invariants.\n+               --  Otherwise the pragma applies to a parent type and will be\n+               --  processed at a later step by routine Add_Parent_Invariants\n+               --  or Add_Interface_Invariants.\n \n                else\n                   return;\n@@ -2298,7 +2298,7 @@ package body Exp_Util is\n \n             Next_Rep_Item (Prag);\n          end loop;\n-      end Add_Inherited_Invariant;\n+      end Add_Inherited_Invariants;\n \n       ------------------------------\n       -- Add_Interface_Invariants --\n@@ -2313,10 +2313,8 @@ package body Exp_Util is\n          Ifaces     : Elist_Id;\n \n       begin\n-         --  Generate an invariant check for each inherited class-wide\n-         --  invariant coming from all interfaces implemented by type T. Obj_Id\n-         --  denotes the entity of the _object formal parameter of the\n-         --  invariant procedure. All created checks are added to list Checks.\n+         --  Generate an invariant check for each class-wide invariant coming\n+         --  from all interfaces implemented by type T.\n \n          if Is_Tagged_Type (T) then\n             Collect_Interfaces (T, Ifaces);\n@@ -2325,7 +2323,7 @@ package body Exp_Util is\n \n             Iface_Elmt := First_Elmt (Ifaces);\n             while Present (Iface_Elmt) loop\n-               Add_Inherited_Invariant\n+               Add_Inherited_Invariants\n                  (Full_Typ => Node (Iface_Elmt),\n                   Priv_Typ => Empty,\n                   Obj_Id   => Obj_Id,\n@@ -2480,7 +2478,7 @@ package body Exp_Util is\n                Add_Record_Component_Invariants (Full_Typ, Obj_Id, Checks);\n             end if;\n \n-            Add_Inherited_Invariant\n+            Add_Inherited_Invariants\n               (Full_Typ => Full_Typ,\n                Priv_Typ => Priv_Typ,\n                Obj_Id   => Obj_Id,\n@@ -2490,11 +2488,11 @@ package body Exp_Util is\n          end loop;\n       end Add_Parent_Invariants;\n \n-      -----------------------\n-      -- Add_Own_Invariant --\n-      -----------------------\n+      ------------------------\n+      -- Add_Own_Invariants --\n+      ------------------------\n \n-      procedure Add_Own_Invariant\n+      procedure Add_Own_Invariants\n         (T         : Entity_Id;\n          Obj_Id    : Entity_Id;\n          Checks    : in out List_Id;\n@@ -2540,18 +2538,17 @@ package body Exp_Util is\n                Ploc := Sloc (Prag);\n \n                --  Verify the pragma belongs to T, otherwise the pragma applies\n-               --  to a parent type in which case it will be processed at a\n-               --  later stage by Add_Parent_Invariants or\n-               --  Add_Interface_Invariants.\n+               --  to a parent type in which case it will be processed later by\n+               --  Add_Parent_Invariants or Add_Interface_Invariants.\n \n                if Entity (Arg1) /= T then\n                   return;\n                end if;\n \n                Expr := New_Copy_Tree (Arg2);\n \n-               --  Substitute all references to type T with references to\n-               --  the _object formal parameter.\n+               --  Substitute all references to type T with references to the\n+               --  _object formal parameter.\n \n                Replace_Type_References\n                  (Expr     => Expr,\n@@ -2627,7 +2624,7 @@ package body Exp_Util is\n \n             Next_Rep_Item (Prag);\n          end loop;\n-      end Add_Own_Invariant;\n+      end Add_Own_Invariants;\n \n       -------------------------------------\n       -- Add_Record_Component_Invariants --\n@@ -3010,7 +3007,7 @@ package body Exp_Util is\n       if Partial_Invariant then\n          pragma Assert (Present (Priv_Typ));\n \n-         Add_Own_Invariant\n+         Add_Own_Invariants\n            (T      => Priv_Typ,\n             Obj_Id => Obj_Id,\n             Checks => Stmts);\n@@ -3102,13 +3099,13 @@ package body Exp_Util is\n          --  of the partial view. This also handles any invariants on array or\n          --  record components.\n \n-         Add_Own_Invariant\n+         Add_Own_Invariants\n            (T         => Priv_Typ,\n             Obj_Id    => Obj_Id,\n             Checks    => Stmts,\n             Priv_Item => Priv_Item);\n \n-         Add_Own_Invariant\n+         Add_Own_Invariants\n            (T         => Full_Typ,\n             Obj_Id    => Obj_Id,\n             Checks    => Stmts,"}]}