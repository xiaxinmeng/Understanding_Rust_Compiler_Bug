{"sha": "31a07c8102fa4a7e44118bdacda5f8577ca7218e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhMDdjODEwMmZhNGE3ZTQ0MTE4YmRhY2RhNWY4NTc3Y2E3MjE4ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-04-14T20:27:18Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-04-14T20:27:18Z"}, "message": "re PR target/80098 (ICE in curr_insn_transform, at lra-constraints.c:3816 on ppc64le)\n\n[gcc]\n2017-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80098\n\t* config/rs6000/rs6000-cpus.def (OTHER_P9_VECTOR_MASKS): Define\n\tmasks of options that should be turned off if the VSX vector\n\toptions are turned off.\n\t(OTHER_P8_VECTOR_MASKS): Likewise.\n\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Call\n\trs6000_disable_incompatible_switches to validate no type switches\n\tlike -mvsx.\n\t(rs6000_incompatible_switch): New function to disallow turning on\n\tother vector options if -mno-vsx, -mno-power8-vector, or\n\t-mno-power9-vector are specified.\n\n[gcc/testsuite]\n2017-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80098\n\t* gcc.target/powerpc/pr80098-1.c: New test.\n\t* gcc.target/powerpc/pr80098-2.c: Likewise.\n\t* gcc.target/powerpc/pr80098-3.c: Likewise.\n\t* gcc.target/powerpc/pr80098-4.c: Likewise.\n\nFrom-SVN: r246930", "tree": {"sha": "30ec7671b7e19070804b97a0954282e8f46f3c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30ec7671b7e19070804b97a0954282e8f46f3c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31a07c8102fa4a7e44118bdacda5f8577ca7218e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a07c8102fa4a7e44118bdacda5f8577ca7218e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a07c8102fa4a7e44118bdacda5f8577ca7218e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a07c8102fa4a7e44118bdacda5f8577ca7218e/comments", "author": null, "committer": null, "parents": [{"sha": "19b250c43ae355e88176310cf2be282bd381d6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b250c43ae355e88176310cf2be282bd381d6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b250c43ae355e88176310cf2be282bd381d6b3"}], "stats": {"total": 189, "additions": 176, "deletions": 13}, "files": [{"sha": "719974bb742fa2120aa6b0d7f39ca2ab683232be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -1,3 +1,18 @@\n+2017-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/80098\n+\t* config/rs6000/rs6000-cpus.def (OTHER_P9_VECTOR_MASKS): Define\n+\tmasks of options that should be turned off if the VSX vector\n+\toptions are turned off.\n+\t(OTHER_P8_VECTOR_MASKS): Likewise.\n+\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Call\n+\trs6000_disable_incompatible_switches to validate no type switches\n+\tlike -mvsx.\n+\t(rs6000_incompatible_switch): New function to disallow turning on\n+\tother vector options if -mno-vsx, -mno-power8-vector, or\n+\t-mno-power9-vector are specified.\n+\n 2017-04-14  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.h (CRT_CALL_STATIC_FUNCTION): Use long calls."}, {"sha": "cd5c70688d85b68002e8d977ba2b188ca050b38e", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -84,6 +84,30 @@\n \t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n \t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n \n+/* Flags that need to be turned off if -mno-power9-vector.  */\n+#define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MINMAX)\n+\n+/* Flags that need to be turned off if -mno-power8-vector.  */\n+#define OTHER_P8_VECTOR_MASKS\t(OTHER_P9_VECTOR_MASKS\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\t\t\\\n+\n+/* Flags that need to be turned off if -mno-vsx.  */\n+#define OTHER_VSX_VECTOR_MASKS\t(OTHER_P8_VECTOR_MASKS\t\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n+\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DI\t\t\\\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n+\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n+\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n+\n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n \n /* Deal with ports that do not have -mstrict-align.  */"}, {"sha": "0fd2365ecf3fbb94b4ad531a96ecc8dcd3b87364", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 94, "deletions": 13, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -1335,6 +1335,7 @@ static void rs6000_print_isa_options (FILE *, int, const char *,\n \t\t\t\t      HOST_WIDE_INT);\n static void rs6000_print_builtin_options (FILE *, int, const char *,\n \t\t\t\t\t  HOST_WIDE_INT);\n+static HOST_WIDE_INT rs6000_disable_incompatible_switches (void);\n \n static enum rs6000_reg_type register_to_reg_type (rtx, bool *);\n static bool rs6000_secondary_reload_move (enum rs6000_reg_type,\n@@ -3902,6 +3903,7 @@ rs6000_option_override_internal (bool global_init_p)\n   const char *implicit_cpu = OPTION_TARGET_CPU_DEFAULT;\n \n   HOST_WIDE_INT set_masks;\n+  HOST_WIDE_INT ignore_masks;\n   int cpu_index;\n   int tune_index;\n   struct cl_target_option *main_target_opt\n@@ -3967,7 +3969,8 @@ rs6000_option_override_internal (bool global_init_p)\n #endif\n #ifdef OS_MISSING_ALTIVEC\n   if (OS_MISSING_ALTIVEC)\n-    set_masks &= ~(OPTION_MASK_ALTIVEC | OPTION_MASK_VSX);\n+    set_masks &= ~(OPTION_MASK_ALTIVEC | OPTION_MASK_VSX\n+\t\t   | OTHER_VSX_VECTOR_MASKS);\n #endif\n \n   /* Don't override by the processor default if given explicitly.  */\n@@ -4270,11 +4273,15 @@ rs6000_option_override_internal (bool global_init_p)\n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n     rs6000_print_isa_options (stderr, 0, \"before defaults\", rs6000_isa_flags);\n \n+  /* Handle explicit -mno-{altivec,vsx,power8-vector,power9-vector} and turn\n+     off all of the options that depend on those flags.  */\n+  ignore_masks = rs6000_disable_incompatible_switches ();\n+\n   /* For the newer switches (vsx, dfp, etc.) set some of the older options,\n      unless the user explicitly used the -mno-<option> to disable the code.  */\n   if (TARGET_P9_VECTOR || TARGET_MODULO || TARGET_P9_DFORM_SCALAR\n       || TARGET_P9_DFORM_VECTOR || TARGET_P9_DFORM_BOTH > 0)\n-    rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_P9_MINMAX)\n     {\n       if (have_cpu)\n@@ -4283,15 +4290,14 @@ rs6000_option_override_internal (bool global_init_p)\n \t    {\n \t      /* legacy behavior: allow -mcpu-power9 with certain\n \t\t capabilities explicitly disabled.  */\n-\t      rs6000_isa_flags |=\n-\t\t(ISA_3_0_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+\t      rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~ignore_masks);\n \t      /* However, reject this automatic fix if certain\n \t\t capabilities required for TARGET_P9_MINMAX support\n \t\t have been explicitly disabled.  */\n \t      if (((OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n \t\t    | OPTION_MASK_UPPER_REGS_DF) & rs6000_isa_flags)\n \t\t  != (OPTION_MASK_VSX | OPTION_MASK_UPPER_REGS_SF\n-\t\t       | OPTION_MASK_UPPER_REGS_DF))\n+\t\t      | OPTION_MASK_UPPER_REGS_DF))\n \t\terror (\"-mpower9-minmax incompatible with explicitly disabled options\");\n \t\t}\n \t  else\n@@ -4308,21 +4314,21 @@ rs6000_option_override_internal (bool global_init_p)\n \trs6000_isa_flags |= ISA_3_0_MASKS_SERVER;\n     }\n   else if (TARGET_P8_VECTOR || TARGET_DIRECT_MOVE || TARGET_CRYPTO)\n-    rs6000_isa_flags |= (ISA_2_7_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_7_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_VSX)\n-    rs6000_isa_flags |= (ISA_2_6_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_6_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_POPCNTD)\n-    rs6000_isa_flags |= (ISA_2_6_MASKS_EMBEDDED & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_6_MASKS_EMBEDDED & ~ignore_masks);\n   else if (TARGET_DFP)\n-    rs6000_isa_flags |= (ISA_2_5_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_5_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_CMPB)\n-    rs6000_isa_flags |= (ISA_2_5_MASKS_EMBEDDED & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_5_MASKS_EMBEDDED & ~ignore_masks);\n   else if (TARGET_FPRND)\n-    rs6000_isa_flags |= (ISA_2_4_MASKS & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_4_MASKS & ~ignore_masks);\n   else if (TARGET_POPCNTB)\n-    rs6000_isa_flags |= (ISA_2_2_MASKS & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (ISA_2_2_MASKS & ~ignore_masks);\n   else if (TARGET_ALTIVEC)\n-    rs6000_isa_flags |= (OPTION_MASK_PPC_GFXOPT & ~rs6000_isa_flags_explicit);\n+    rs6000_isa_flags |= (OPTION_MASK_PPC_GFXOPT & ~ignore_masks);\n \n   if (TARGET_CRYPTO && !TARGET_ALTIVEC)\n     {\n@@ -39721,6 +39727,81 @@ rs6000_print_builtin_options (FILE *file, int indent, const char *string,\n \t\t\t\t ARRAY_SIZE (rs6000_builtin_mask_names));\n }\n \n+/* If the user used -mno-vsx, we need turn off all of the implicit ISA 2.06,\n+   2.07, and 3.0 options that relate to the vector unit (-mdirect-move,\n+   -mvsx-timode, -mupper-regs-df).\n+\n+   If the user used -mno-power8-vector, we need to turn off all of the implicit\n+   ISA 2.07 and 3.0 options that relate to the vector unit.\n+\n+   If the user used -mno-power9-vector, we need to turn off all of the implicit\n+   ISA 3.0 options that relate to the vector unit.\n+\n+   This function does not handle explicit options such as the user specifying\n+   -mdirect-move.  These are handled in rs6000_option_override_internal, and\n+   the appropriate error is given if needed.\n+\n+   We return a mask of all of the implicit options that should not be enabled\n+   by default.  */\n+\n+static HOST_WIDE_INT\n+rs6000_disable_incompatible_switches (void)\n+{\n+  HOST_WIDE_INT ignore_masks = rs6000_isa_flags_explicit;\n+  size_t i, j;\n+\n+  static const struct {\n+    const HOST_WIDE_INT no_flag;\t/* flag explicitly turned off.  */\n+    const HOST_WIDE_INT dep_flags;\t/* flags that depend on this option.  */\n+    const char *const name;\t\t/* name of the switch.  */\n+  } flags[] = {\n+    { OPTION_MASK_P9_VECTOR,\tOTHER_P9_VECTOR_MASKS,\t\"power9-vector\"\t},\n+    { OPTION_MASK_P8_VECTOR,\tOTHER_P8_VECTOR_MASKS,\t\"power8-vector\"\t},\n+    { OPTION_MASK_VSX,\t\tOTHER_VSX_VECTOR_MASKS,\t\"vsx\"\t\t},\n+  };\n+\n+  for (i = 0; i < ARRAY_SIZE (flags); i++)\n+    {\n+      HOST_WIDE_INT no_flag = flags[i].no_flag;\n+\n+      if ((rs6000_isa_flags & no_flag) == 0\n+\t  && (rs6000_isa_flags_explicit & no_flag) != 0)\n+\t{\n+\t  HOST_WIDE_INT dep_flags = flags[i].dep_flags;\n+\t  HOST_WIDE_INT set_flags = (rs6000_isa_flags_explicit\n+\t\t\t\t     & rs6000_isa_flags\n+\t\t\t\t     & dep_flags);\n+\n+\t  if (set_flags)\n+\t    {\n+\t      for (j = 0; j < ARRAY_SIZE (rs6000_opt_masks); j++)\n+\t\tif ((set_flags & rs6000_opt_masks[j].mask) != 0)\n+\t\t  {\n+\t\t    set_flags &= ~rs6000_opt_masks[j].mask;\n+\t\t    error (\"-mno-%s turns off -m%s\",\n+\t\t\t   flags[i].name,\n+\t\t\t   rs6000_opt_masks[j].name);\n+\t\t  }\n+\n+\t      gcc_assert (!set_flags);\n+\t    }\n+\n+\t  rs6000_isa_flags &= ~dep_flags;\n+\t  ignore_masks |= no_flag | dep_flags;\n+\t}\n+    }\n+\n+  if (!TARGET_P9_VECTOR\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR) != 0\n+      && TARGET_P9_DFORM_BOTH > 0)\n+    {\n+      error (\"-mno-power9-vector turns off -mpower9-dform\");\n+      TARGET_P9_DFORM_BOTH = 0;\n+    }\n+\n+  return ignore_masks;\n+}\n+\n \f\n /* Hook to determine if one function can safely inline another.  */\n "}, {"sha": "a1d74b6edb46ec80f09144c4c12c7628db734398", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -1,3 +1,11 @@\n+2017-04-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/80098\n+\t* gcc.target/powerpc/pr80098-1.c: New test.\n+\t* gcc.target/powerpc/pr80098-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80098-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80098-4.c: Likewise.\n+\n 2017-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80403"}, {"sha": "f7c200a09fd4c108133825870aba7b2b38e06523", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { powerpc64*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -mno-power9-vector -mpower9-minmax -mpower9-dform\" } */\n+\n+int i;\n+\n+/* { dg-error \"-mno-power9-vector turns off -mpower9-minmax\" \"PR80098\" { target *-*-* } 0 } */\n+/* { dg-error \"-mno-power9-vector turns off -mpower9-dform\"  \"PR80098\" { target *-*-* } 0 } */"}, {"sha": "d51734fca19518e8692acd8ad4e0cee5175a8fad", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-2.c?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { powerpc64*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -mno-power8-vector -mdirect-move -mcrypto\" } */\n+\n+int i;\n+\n+/* { dg-error \"-mno-power8-vector turns off -mdirect-move\" \"PR80098\" { target *-*-* } 0 } */\n+/* { dg-error \"-mno-power8-vector turns off -mcrypto\"      \"PR80098\" { target *-*-* } 0 } */"}, {"sha": "4c224e94b228ebe8911db6b1791cdb4f374ae570", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-3.c?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { powerpc64*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -mno-vsx -mdirect-move -mcrypto\" } */\n+\n+int i;\n+\n+/* { dg-error \"-mno-vsx turns off -mdirect-move\" \"PR80098\" { target *-*-* } 0 } */\n+/* { dg-error \"-mno-vsx turns off -mcrypto\"      \"PR80098\" { target *-*-* } 0 } */"}, {"sha": "28eb5e2be84d2097f87b93cdd91f2c9d5221d1d2", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a07c8102fa4a7e44118bdacda5f8577ca7218e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c?ref=31a07c8102fa4a7e44118bdacda5f8577ca7218e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -mno-vsx -mvsx-timode\" } */\n+\n+int i;\n+\n+/* { dg-error \"-mno-vsx turns off -mvsx-timode\" \"PR80098\" { target *-*-* } 0 } */"}]}