{"sha": "9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhY2FmZWI0YzllZmEyMzQ0NjIwYThmZGI3OWEyZWE1YWFkZmJhZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-01-23T15:57:19Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-01-23T15:57:19Z"}, "message": "re PR middle-end/38932 (ICE in set_value_range, at tree-vrp.c:398)\n\n2008-01-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/38932\n\t* fold-const.c (fold_unary_no_overflow): New.\n\t* tree.h (fold_unary_no_overflow): Declare.\n\t* tree-ssa-ccp.c (ccp_fold): Use fold_unary_no_overflow.\n\t* tree-ssa-sccvn.c (visit_reference_op_load,\n\tsimplify_unary_expression): Likewise.\n\ntestsuite:\n2008-01-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/38932\n\t* gcc.dg/pr38932.c: New.\n\nFrom-SVN: r143588", "tree": {"sha": "aacb078bea4cd0815736d26fb8837d2a3a40112b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aacb078bea4cd0815736d26fb8837d2a3a40112b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63e505333c7eae301e810d9b84d12a2149e81970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e505333c7eae301e810d9b84d12a2149e81970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e505333c7eae301e810d9b84d12a2149e81970"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "2697a7fd18932bb065be916c0204b0dfbaf6b844", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -1,3 +1,12 @@\n+2008-01-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/38932\n+\t* fold-const.c (fold_unary_ignore_overflow): New.\n+\t* tree.h (fold_unary_ignore_overflow): Declare.\n+\t* tree-ssa-ccp.c (ccp_fold): Use fold_unary_ignore_overflow.\n+\t* tree-ssa-sccvn.c (visit_reference_op_load,\n+\tsimplify_unary_expression): Likewise.\n+\n 2009-01-22  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* c-decl.c (finish_struct): Move code to set DECL_PACKED after"}, {"sha": "da4d50d5e9496e4931d239c7631362d0405f662e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -8628,6 +8628,24 @@ fold_unary (enum tree_code code, tree type, tree op0)\n     } /* switch (code) */\n }\n \n+\n+/* If the operation was a conversion do _not_ mark a resulting constant\n+   with TREE_OVERFLOW if the original constant was not.  These conversions\n+   have implementation defined behavior and retaining the TREE_OVERFLOW\n+   flag here would confuse later passes such as VRP.  */\n+tree\n+fold_unary_ignore_overflow (enum tree_code code, tree type, tree op0)\n+{\n+  tree res = fold_unary (code, type, op0);\n+  if (res\n+      && TREE_CODE (res) == INTEGER_CST\n+      && TREE_CODE (op0) == INTEGER_CST\n+      && CONVERT_EXPR_CODE_P (code))\n+    TREE_OVERFLOW (res) = TREE_OVERFLOW (op0);\n+\n+  return res;\n+}\n+\n /* Fold a binary expression of code CODE and type TYPE with operands\n    OP0 and OP1, containing either a MIN-MAX or a MAX-MIN combination.\n    Return the folded expression if folding is successful.  Otherwise,"}, {"sha": "6d266aefe400323ece5c73555ebb26a044cffcc7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -1,3 +1,8 @@\n+2008-01-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/38932\n+\t* gcc.dg/pr38932.c: New.\n+\n 2009-01-23  Revital Eres  <eres@il.ibm.com>\n \n \t* gcc.dg/sms-7.c: Fix test."}, {"sha": "4dfaffc777af3989eab8de2cd3b8a8bd6d2a3a13", "filename": "gcc/testsuite/gcc.dg/pr38932.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38932.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38932.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38932.c?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This variable needed only to exercise FRE instead of CCP.  */\n+unsigned char g;\n+\n+extern void abort();\n+\n+void f (long long int p)\n+{\n+  g = 255;\n+  if (p >= (-9223372036854775807LL - 1) - (signed char) g)\n+    p = 1;\n+\n+  if (p)\n+    abort ();\n+}\n+\n+"}, {"sha": "ef6890c65c3024dd33992df2aadc089b4127e2ee", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -966,7 +966,6 @@ ccp_fold (gimple stmt)\n                  so this should almost always return a simplified RHS.  */\n               tree lhs = gimple_assign_lhs (stmt);\n               tree op0 = gimple_assign_rhs1 (stmt);\n-\t      tree res;\n \n               /* Simplify the operand down to a constant.  */\n               if (TREE_CODE (op0) == SSA_NAME)\n@@ -1002,20 +1001,8 @@ ccp_fold (gimple stmt)\n \t\t  return op0;\n \t\t}\n \n-              res = fold_unary (subcode, gimple_expr_type (stmt), op0);\n-\n-\t      /* If the operation was a conversion do _not_ mark a\n-\t         resulting constant with TREE_OVERFLOW if the original\n-\t\t constant was not.  These conversions have implementation\n-\t\t defined behavior and retaining the TREE_OVERFLOW flag\n-\t\t here would confuse later passes such as VRP.  */\n-\t      if (res\n-\t\t  && TREE_CODE (res) == INTEGER_CST\n-\t\t  && TREE_CODE (op0) == INTEGER_CST\n-\t\t  && CONVERT_EXPR_CODE_P (subcode))\n-\t\tTREE_OVERFLOW (res) = TREE_OVERFLOW (op0);\n-\n-\t      return res;\n+              return fold_unary_ignore_overflow (subcode,\n+\t\t\t\t\t\t gimple_expr_type (stmt), op0);\n             }\n \n           case GIMPLE_BINARY_RHS:"}, {"sha": "d9d5bc27d763826e8c98c10431be5ee6d7f04b90", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -1761,7 +1761,8 @@ visit_reference_op_load (tree lhs, tree op, gimple stmt)\n \t  tree tem = valueize_expr (vn_get_expr_for (TREE_OPERAND (val, 0)));\n \t  if ((CONVERT_EXPR_P (tem)\n \t       || TREE_CODE (tem) == VIEW_CONVERT_EXPR)\n-\t      && (tem = fold_unary (TREE_CODE (val), TREE_TYPE (val), tem)))\n+\t      && (tem = fold_unary_ignore_overflow (TREE_CODE (val),\n+\t\t\t\t\t\t    TREE_TYPE (val), tem)))\n \t    val = tem;\n \t}\n       result = val;\n@@ -2123,7 +2124,7 @@ simplify_binary_expression (gimple stmt)\n   fold_defer_overflow_warnings ();\n \n   result = fold_binary (gimple_assign_rhs_code (stmt),\n-\t\t\tTREE_TYPE (gimple_get_lhs (stmt)), op0, op1);\n+\t\t        TREE_TYPE (gimple_get_lhs (stmt)), op0, op1);\n   if (result)\n     STRIP_USELESS_TYPE_CONVERSION (result);\n \n@@ -2182,8 +2183,8 @@ simplify_unary_expression (gimple stmt)\n   if (op0 == orig_op0)\n     return NULL_TREE;\n \n-  result = fold_unary (gimple_assign_rhs_code (stmt),\n-\t\t       gimple_expr_type (stmt), op0);\n+  result = fold_unary_ignore_overflow (gimple_assign_rhs_code (stmt),\n+\t\t\t\t       gimple_expr_type (stmt), op0);\n   if (result)\n     {\n       STRIP_USELESS_TYPE_CONVERSION (result);"}, {"sha": "b7300fa8b876a0c1382c6fbebc7132cd77cc6d50", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9bacafeb4c9efa2344620a8fdb79a2ea5aadfbad", "patch": "@@ -4733,6 +4733,7 @@ extern tree native_interpret_expr (tree, const unsigned char *, int);\n \n extern tree fold (tree);\n extern tree fold_unary (enum tree_code, tree, tree);\n+extern tree fold_unary_ignore_overflow (enum tree_code, tree, tree);\n extern tree fold_binary (enum tree_code, tree, tree, tree);\n extern tree fold_ternary (enum tree_code, tree, tree, tree, tree);\n extern tree fold_build1_stat (enum tree_code, tree, tree MEM_STAT_DECL);"}]}