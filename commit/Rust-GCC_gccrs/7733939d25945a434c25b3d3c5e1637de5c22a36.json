{"sha": "7733939d25945a434c25b3d3c5e1637de5c22a36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzczMzkzOWQyNTk0NWE0MzRjMjViM2QzYzVlMTYzN2RlNWMyMmEzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-24T19:11:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-24T19:11:33Z"}, "message": "sse.md (vec_set<mode>_0): Use sse4_noavx isa instead of sse4 for the first alternative...\n\n\t* config/i386/sse.md (vec_set<mode>_0): Use sse4_noavx isa instead\n\tof sse4 for the first alternative, drop %v from the template\n\tand d operand modifier.  Split second alternative into one sse4_noavx\n\tand one avx alternative, use *x instead of *v in the former and v\n\tinstead of *v in the latter.\n\t(*sse4_1_extractps): Use noavx isa instead of * for the first\n\talternative, drop %v from the template.  Split second alternative into\n\tone noavx and one avx alternative, use *x instead of *v in the\n\tformer and v instead of *v in the latter.\n\t(<vi8_sse4_1_avx2_avx512>_movntdqa): Guard the first 2 alternatives\n\twith noavx and the last one with avx.\n\t(sse4_1_phminposuw): Guard first alternative with noavx isa,\n\tsplit the second one into one noavx and one avx alternative,\n\tuse *x and Bm in the former and x and m in the latter one.\n\t(<sse4_1>_ptest<mode>): Use noavx instead of * for the first two\n\talternatives.\n\nFrom-SVN: r236660", "tree": {"sha": "b63d74f4e0bd5ed83c6c6239bcf0a921036ada03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b63d74f4e0bd5ed83c6c6239bcf0a921036ada03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7733939d25945a434c25b3d3c5e1637de5c22a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7733939d25945a434c25b3d3c5e1637de5c22a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7733939d25945a434c25b3d3c5e1637de5c22a36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7733939d25945a434c25b3d3c5e1637de5c22a36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "520c86db4c15e5dbecd68cf79629703fc1bb14b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c86db4c15e5dbecd68cf79629703fc1bb14b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520c86db4c15e5dbecd68cf79629703fc1bb14b9"}], "stats": {"total": 91, "additions": 56, "deletions": 35}, "files": [{"sha": "d91c35245d5549b3d3ebb43cfc2daa37bd31dd6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7733939d25945a434c25b3d3c5e1637de5c22a36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7733939d25945a434c25b3d3c5e1637de5c22a36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7733939d25945a434c25b3d3c5e1637de5c22a36", "patch": "@@ -1,5 +1,22 @@\n 2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (vec_set<mode>_0): Use sse4_noavx isa instead\n+\tof sse4 for the first alternative, drop %v from the template\n+\tand d operand modifier.  Split second alternative into one sse4_noavx\n+\tand one avx alternative, use *x instead of *v in the former and v\n+\tinstead of *v in the latter.\n+\t(*sse4_1_extractps): Use noavx isa instead of * for the first\n+\talternative, drop %v from the template.  Split second alternative into\n+\tone noavx and one avx alternative, use *x instead of *v in the\n+\tformer and v instead of *v in the latter.\n+\t(<vi8_sse4_1_avx2_avx512>_movntdqa): Guard the first 2 alternatives\n+\twith noavx and the last one with avx.\n+\t(sse4_1_phminposuw): Guard first alternative with noavx isa,\n+\tsplit the second one into one noavx and one avx alternative,\n+\tuse *x and Bm in the former and x and m in the latter one.\n+\t(<sse4_1>_ptest<mode>): Use noavx instead of * for the first two\n+\talternatives.\n+\n \t* config/i386/sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Limit\n \tfirst two alternatives to noavx, use *x instead of *v in the second\n \tone, add avx alternative without *."}, {"sha": "10ce494fa20ae8fa8c8f7aeb584b472f4a04e1bd", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7733939d25945a434c25b3d3c5e1637de5c22a36/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7733939d25945a434c25b3d3c5e1637de5c22a36/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7733939d25945a434c25b3d3c5e1637de5c22a36", "patch": "@@ -6623,18 +6623,19 @@\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=Yr,*v,v,Yi,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n+\t  \"=Yr,*x,v,v,Yi,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" Yr,*v,m,r ,m,x,v,*rm,*rm,*rm,!x,!*re,!*fF\"))\n+\t  \" Yr,*x,v,m,r ,m,x,v,*rm,*rm,*rm,!x,!*re,!*fF\"))\n \t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C , C,C,C ,C,0,v,0  ,0  ,x  ,0 ,0   ,0\")\n+\t  \" C , C,C,C,C ,C,0,v,0  ,0  ,x  ,0 ,0   ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   %vinsertps\\t{$0xe, %d2, %0|%0, %d2, 0xe}\n-   %vinsertps\\t{$0xe, %d2, %0|%0, %d2, 0xe}\n+   insertps\\t{$0xe, %2, %0|%0, %2, 0xe}\n+   insertps\\t{$0xe, %2, %0|%0, %2, 0xe}\n+   vinsertps\\t{$0xe, %2, %2, %0|%0, %2, %2, 0xe}\n    %vmov<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    %vmovd\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n@@ -6646,20 +6647,20 @@\n    #\n    #\n    #\"\n-  [(set_attr \"isa\" \"sse4,sse4,sse2,sse2,noavx,noavx,avx,sse4_noavx,sse4_noavx,avx,*,*,*\")\n+  [(set_attr \"isa\" \"sse4_noavx,sse4_noavx,avx,sse2,sse2,noavx,noavx,avx,sse4_noavx,sse4_noavx,avx,*,*,*\")\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0,1,7,8,9\")\n+     (cond [(eq_attr \"alternative\" \"0,1,2,8,9,10\")\n \t      (const_string \"sselog\")\n-\t    (eq_attr \"alternative\" \"11\")\n-\t      (const_string \"imov\")\n \t    (eq_attr \"alternative\" \"12\")\n+\t      (const_string \"imov\")\n+\t    (eq_attr \"alternative\" \"13\")\n \t      (const_string \"fmov\")\n \t   ]\n \t   (const_string \"ssemov\")))\n-   (set_attr \"prefix_extra\" \"*,*,*,*,*,*,*,1,1,1,*,*,*\")\n-   (set_attr \"length_immediate\" \"*,*,*,*,*,*,*,1,1,1,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex,*,*,*\")\n-   (set_attr \"mode\" \"SF,SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,TI,*,*,*\")])\n+   (set_attr \"prefix_extra\" \"*,*,*,*,*,*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,*,*,*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex,*,*,*\")\n+   (set_attr \"mode\" \"SF,SF,SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,TI,*,*,*\")])\n \n ;; A subset is vec_setv4sf.\n (define_insn \"*vec_setv4sf_sse4_1\"\n@@ -6761,14 +6762,15 @@\n   \"operands[1] = gen_lowpart (SFmode, operands[1]);\")\n \n (define_insn_and_split \"*sse4_1_extractps\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,v,v\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,rm,v,v\")\n \t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*v,0,v\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n,n\")])))]\n+\t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*x,v,0,v\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n,n,n\")])))]\n   \"TARGET_SSE4_1\"\n   \"@\n-   %vextractps\\t{%2, %1, %0|%0, %1, %2}\n-   %vextractps\\t{%2, %1, %0|%0, %1, %2}\n+   extractps\\t{%2, %1, %0|%0, %1, %2}\n+   extractps\\t{%2, %1, %0|%0, %1, %2}\n+   vextractps\\t{%2, %1, %0|%0, %1, %2}\n    #\n    #\"\n   \"&& reload_completed && SSE_REG_P (operands[0])\"\n@@ -6793,13 +6795,13 @@\n     }\n   DONE;\n }\n-  [(set_attr \"isa\" \"*,*,noavx,avx\")\n-   (set_attr \"type\" \"sselog,sselog,*,*\")\n-   (set_attr \"prefix_data16\" \"1,1,*,*\")\n-   (set_attr \"prefix_extra\" \"1,1,*,*\")\n-   (set_attr \"length_immediate\" \"1,1,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,*,*\")\n-   (set_attr \"mode\" \"V4SF,V4SF,*,*\")])\n+  [(set_attr \"isa\" \"noavx,noavx,avx,noavx,avx\")\n+   (set_attr \"type\" \"sselog,sselog,sselog,*,*\")\n+   (set_attr \"prefix_data16\" \"1,1,1,*,*\")\n+   (set_attr \"prefix_extra\" \"1,1,1,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,1,*,*\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex,*,*\")\n+   (set_attr \"mode\" \"V4SF,V4SF,V4SF,*,*\")])\n \n (define_insn_and_split \"*vec_extractv4sf_mem\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=v,*r,f\")\n@@ -14582,14 +14584,15 @@\n    [(V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512f\")])\n \n (define_insn \"<vi8_sse4_1_avx2_avx512>_movntdqa\"\n-  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=Yr,*x, v\")\n-\t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m, m, m\")]\n+  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m,m,m\")]\n \t\t     UNSPEC_MOVNTDQA))]\n   \"TARGET_SSE4_1\"\n   \"%vmovntdqa\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1,1,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_mpsadbw\"\n@@ -14715,14 +14718,15 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"sse4_1_phminposuw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x\")\n-\t(unspec:V8HI [(match_operand:V8HI 1 \"vector_operand\" \"YrBm,*xBm\")]\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"vector_operand\" \"YrBm,*xBm,xm\")]\n \t\t     UNSPEC_PHMINPOSUW))]\n   \"TARGET_SSE4_1\"\n   \"%vphminposuw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog1\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx2_<code>v16qiv16hi2<mask_name>\"\n@@ -14980,10 +14984,10 @@\n \t\t   UNSPEC_PTEST))]\n   \"TARGET_SSE4_1\"\n   \"%vptest\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"*,*,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set (attr \"btver2_decode\")\n      (if_then_else\n        (match_test \"<sseinsnmode>mode==OImode\")"}]}