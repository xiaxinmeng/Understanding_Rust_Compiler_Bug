{"sha": "0c791c59386785c32eb3cff33466ab4576ca75b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM3OTFjNTkzODY3ODVjMzJlYjNjZmYzMzQ2NmFiNDU3NmNhNzViNQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-08T22:36:36Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-08T22:36:36Z"}, "message": "rs6000: Update conditional jump patterns, no more (pc) (label_ref)\n\nCurrently we have two patterns for every conditional jump: one jumping\nif some condition is met, and the other jumping if it is not met.  We\ndon't need that second form because all our conditions have an opposite\nalready, and the generic code can deal with that just fine.\n\nThis patch deletes that second form.  We generated it directly in one\ncase; adjusted here.\n\n\n\t* config/rs6000/rs6000-string.c (expand_strncmp_align_check): Invert\n\ta conditional jump (and the compare for it) so that pc_rtx is the\n\tlast operand.\n\t* config/rs6000/rs6000.c (rs6000_legitimate_combined_insn): Adjust\n\tfor the deleted and renamed ctr<mode>_internal[234] patterns.\n\t* config/rs6000/rs6000.md: Delete second conditional branch pattern.\n\tDelete second conditional return pattern.\n\t(ctr<mode>_internal2): Delete this second bdnz pattern.\n\t(ctr<mode>_internal3): Rename to ctr<mode>_internal2.\n\t(ctr<mode>_internal4): Delete this second bdz pattern.\n\nFrom-SVN: r253531", "tree": {"sha": "1ebc56794599776a243c1ff3da9a5dd74c8820b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ebc56794599776a243c1ff3da9a5dd74c8820b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c791c59386785c32eb3cff33466ab4576ca75b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c791c59386785c32eb3cff33466ab4576ca75b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c791c59386785c32eb3cff33466ab4576ca75b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c791c59386785c32eb3cff33466ab4576ca75b5/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "561593c104a3fcce354d644b12072b1da8690baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561593c104a3fcce354d644b12072b1da8690baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561593c104a3fcce354d644b12072b1da8690baa"}], "stats": {"total": 104, "additions": 17, "deletions": 87}, "files": [{"sha": "7292163942443434e66c10dd46979df3da9505d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c791c59386785c32eb3cff33466ab4576ca75b5", "patch": "@@ -1,3 +1,16 @@\n+2017-10-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000-string.c (expand_strncmp_align_check): Invert\n+\ta conditional jump (and the compare for it) so that pc_rtx is the\n+\tlast operand.\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_combined_insn): Adjust\n+\tfor the deleted and renamed ctr<mode>_internal[234] patterns.\n+\t* config/rs6000/rs6000.md: Delete second conditional branch pattern.\n+\tDelete second conditional return pattern.\n+\t(ctr<mode>_internal2): Delete this second bdnz pattern.\n+\t(ctr<mode>_internal3): Rename to ctr<mode>_internal2.\n+\t(ctr<mode>_internal4): Delete this second bdz pattern.\n+\n 2017-10-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-outof-ssa.h (ssaexpand): Add partitions_for_undefined_values."}, {"sha": "8c2a93e3d911939d181a357f87c5102f04146c4c", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=0c791c59386785c32eb3cff33466ab4576ca75b5", "patch": "@@ -674,10 +674,10 @@ expand_strncmp_align_check (rtx strncmp_label, rtx src, HOST_WIDE_INT bytes)\n   emit_move_insn (cond, gen_rtx_COMPARE (CCmode, src_check,\n \t\t\t\t\t GEN_INT (4096 - bytes)));\n \n-  rtx cmp_rtx = gen_rtx_LT (VOIDmode, cond, const0_rtx);\n+  rtx cmp_rtx = gen_rtx_GE (VOIDmode, cond, const0_rtx);\n \n   rtx ifelse = gen_rtx_IF_THEN_ELSE (VOIDmode, cmp_rtx,\n-\t\t\t\t     pc_rtx, lab_ref);\n+\t\t\t\t     lab_ref, pc_rtx);\n   rtx j = emit_jump_insn (gen_rtx_SET (pc_rtx, ifelse));\n   JUMP_LABEL (j) = strncmp_label;\n   LABEL_NUSES (strncmp_label) += 1;"}, {"sha": "104f2edb167b8488928025cb13d7f920595e5aca", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0c791c59386785c32eb3cff33466ab4576ca75b5", "patch": "@@ -9051,11 +9051,7 @@ rs6000_legitimate_combined_insn (rtx_insn *insn)\n       && (icode == CODE_FOR_ctrsi_internal1\n \t  || icode == CODE_FOR_ctrdi_internal1\n \t  || icode == CODE_FOR_ctrsi_internal2\n-\t  || icode == CODE_FOR_ctrdi_internal2\n-\t  || icode == CODE_FOR_ctrsi_internal3\n-\t  || icode == CODE_FOR_ctrdi_internal3\n-\t  || icode == CODE_FOR_ctrsi_internal4\n-\t  || icode == CODE_FOR_ctrdi_internal4))\n+\t  || icode == CODE_FOR_ctrdi_internal2))\n     return false;\n \n   return true;"}, {"sha": "e3132c2082f19dca064b62956c9e59e2157a7bf6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 80, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c791c59386785c32eb3cff33466ab4576ca75b5/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0c791c59386785c32eb3cff33466ab4576ca75b5", "patch": "@@ -12626,37 +12626,6 @@\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 1 \"branch_comparison_operator\"\n-\t\t\t\t      [(match_operand 2\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n-\t\t\t\t       (const_int 0)])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n-  \"*\n-{\n-  return output_cbranch (operands[1], \\\"%l0\\\", 1, insn);\n-}\"\n-  [(set_attr \"type\" \"branch\")])\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 0 \"branch_comparison_operator\"\n-\t\t\t\t      [(match_operand 1\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n-\t\t\t\t       (const_int 0)])\n-\t\t      (pc)\n-\t\t      (any_return)))]\n-  \"<return_pred>\"\n-  \"*\n-{\n-  return output_cbranch (operands[0], NULL, 1, insn);\n-}\"\n-  [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"4\")])\n-\n ;; Logic on condition register values.\n \n ; This pattern matches things like\n@@ -12933,33 +12902,9 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n-(define_insn \"ctr<mode>_internal2\"\n-  [(set (pc)\n-\t(if_then_else (ne (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n-\t\t\t  (const_int 1))\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n-\t(plus:P (match_dup 1)\n-\t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n-  \"\"\n-  \"*\n-{\n-  if (which_alternative != 0)\n-    return \\\"#\\\";\n-  else if (get_attr_length (insn) == 4)\n-    return \\\"bdz %l0\\\";\n-  else\n-    return \\\"bdnz $+8\\;b %l0\\\";\n-}\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,16,20,20\")])\n-\n ;; Similar but use EQ\n \n-(define_insn \"ctr<mode>_internal3\"\n+(define_insn \"ctr<mode>_internal2\"\n   [(set (pc)\n \t(if_then_else (eq (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n@@ -12983,30 +12928,6 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n-(define_insn \"ctr<mode>_internal4\"\n-  [(set (pc)\n-\t(if_then_else (eq (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n-\t\t\t  (const_int 1))\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n-\t(plus:P (match_dup 1)\n-\t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n-   (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n-  \"\"\n-  \"*\n-{\n-  if (which_alternative != 0)\n-    return \\\"#\\\";\n-  else if (get_attr_length (insn) == 4)\n-    return \\\"bdnz %l0\\\";\n-  else\n-    return \\\"bdz $+8\\;b %l0\\\";\n-}\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,16,20,20\")])\n-\n ;; Now the splitters if we could not allocate the CTR register\n \n (define_split"}]}