{"sha": "6c2848ad02feef5ac094d1158be3861819b3bb49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyODQ4YWQwMmZlZWY1YWMwOTRkMTE1OGJlMzg2MTgxOWIzYmI0OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-15T19:27:00Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-07-15T19:29:59Z"}, "message": "i386: Introduce peephole2 to use flags from CMPXCHG more [PR96189]\n\nCMPXCHG instruction sets ZF flag if the values in the destination operand\nand EAX register are equal; otherwise the ZF flag is cleared and value\nfrom destination operand is loaded to EAX. Following assembly:\n\n        movl    %esi, %eax\n        lock cmpxchgl   %edx, (%rdi)\n        cmpl    %esi, %eax\n        sete    %al\n\ncan be optimized by removing the unneeded comparison, since set ZF flag\nsignals that no update to EAX happened.\n\n2020-15-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\tPR target/95355\n\t* config/i386/sync.md\n\t(peephole2 to remove unneded compare after CMPXCHG): New pattern.\n\ngcc/testsuite/ChangeLog:\n\tPR target/95355\n\t* gcc.target/i386/pr96189.c: New test.", "tree": {"sha": "7cd73e410c711ba4f8700bc1227f595b00c83394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cd73e410c711ba4f8700bc1227f595b00c83394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c2848ad02feef5ac094d1158be3861819b3bb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2848ad02feef5ac094d1158be3861819b3bb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2848ad02feef5ac094d1158be3861819b3bb49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2848ad02feef5ac094d1158be3861819b3bb49/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51542d9254426c54363a42451885a77b44ebbeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51542d9254426c54363a42451885a77b44ebbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51542d9254426c54363a42451885a77b44ebbeaf"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "d203e9d1ecba16af82c9c751a562aeccf8d41e99", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2848ad02feef5ac094d1158be3861819b3bb49/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2848ad02feef5ac094d1158be3861819b3bb49/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=6c2848ad02feef5ac094d1158be3861819b3bb49", "patch": "@@ -594,6 +594,41 @@\n   \"TARGET_CMPXCHG\"\n   \"lock{%;} %K4cmpxchg{<imodesuffix>}\\t{%3, %1|%1, %3}\")\n \n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"general_operand\"))\n+   (parallel [(set (match_dup 0)\n+\t\t   (unspec_volatile:SWI\n+\t\t     [(match_operand:SWI 2 \"memory_operand\")\n+\t\t      (match_dup 0)\n+\t\t      (match_operand:SWI 3 \"register_operand\")\n+\t\t      (match_operand:SI 4 \"const_int_operand\")]\n+\t\t     UNSPECV_CMPXCHG))\n+\t      (set (match_dup 2)\n+\t\t   (unspec_volatile:SWI [(const_int 0)] UNSPECV_CMPXCHG))\n+\t      (set (reg:CCZ FLAGS_REG)\n+\t\t   (unspec_volatile:CCZ [(const_int 0)] UNSPECV_CMPXCHG))])\n+   (set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ (match_operand:SWI 5 \"register_operand\")\n+\t\t     (match_operand:SWI 6 \"general_operand\")))]\n+  \"(rtx_equal_p (operands[0], operands[5])\n+    && rtx_equal_p (operands[1], operands[6]))\n+   || (rtx_equal_p (operands[0], operands[6])\n+       && rtx_equal_p (operands[1], operands[5]))\"\n+  [(set (match_dup 0)\n+\t(match_dup 1))\n+   (parallel [(set (match_dup 0)\n+\t\t   (unspec_volatile:SWI\n+\t\t     [(match_dup 2)\n+\t\t      (match_dup 0)\n+\t\t      (match_dup 3)\n+\t\t      (match_dup 4)]\n+\t\t     UNSPECV_CMPXCHG))\n+\t      (set (match_dup 2)\n+\t\t   (unspec_volatile:SWI [(const_int 0)] UNSPECV_CMPXCHG))\n+\t      (set (reg:CCZ FLAGS_REG)\n+\t\t   (unspec_volatile:CCZ [(const_int 0)] UNSPECV_CMPXCHG))])])\n+\n ;; For operand 2 nonmemory_operand predicate is used instead of\n ;; register_operand to allow combiner to better optimize atomic\n ;; additions of constants."}, {"sha": "1505e483b94042647b159eebb59dd9e3be157e3d", "filename": "gcc/testsuite/gcc.target/i386/pr96189.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2848ad02feef5ac094d1158be3861819b3bb49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2848ad02feef5ac094d1158be3861819b3bb49/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96189.c?ref=6c2848ad02feef5ac094d1158be3861819b3bb49", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/96176 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmpb\\t\" } } */\n+\n+_Bool\n+foo (unsigned char *x, unsigned char y, unsigned char z)\n+{\n+  unsigned char y_old = y;\n+  __atomic_compare_exchange_n (x, &y, z, 0, __ATOMIC_RELAXED, __ATOMIC_RELAXED);\n+  return y == y_old;\n+}"}]}