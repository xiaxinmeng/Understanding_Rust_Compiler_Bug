{"sha": "766d0c8c4401b260163f0895c69dbc88eb421a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2ZDBjOGM0NDAxYjI2MDE2M2YwODk1YzY5ZGJjODhlYjQyMWE4Nw==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2008-02-28T20:22:55Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2008-02-28T20:22:55Z"}, "message": "re PR fortran/31463 ([patch] inconsistent warnings if function return value is not set)\n\ngcc/fortran:\n2008-02-28  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/31463\n        PR fortran/33950\n        PR fortran/34296\n        * lang.opt: Added -Wreturn-type.\n        * options.c (gfc_handle_option): Recognize -Wreturn-type.\n        * trans-decl.c (gfc_trans_deferred_vars): Emit warnings for funtions\n        where the result value is not set.\n        (gfc_generate_function_code): Likewise.\n        (generate_local_decl): Emit warnings for funtions whose RESULT\n        variable is not set.\n\ngcc/testsuite:\n2008-02-28  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/31463\n        PR fortran/33950\n        PR fortran/34296\n        * gfortran.dg/arrayio_11.f90: Fixed test.\n        * gfortran.dg/arrayio_12.f90: Likewise.\n        * gfortran.dg/module_read_1.f90: Added warning-directives.\n        * gfortran.dg/pr32242.f90: Likewise.\n        * gfortran.dg/result_in_spec_3.f90: Likewise.\n        * gfortran.dg/use_12.f90: Likewise.\n        * gfortran.dg/warn_function_without_result.f90 : New test.\n\nFrom-SVN: r132756", "tree": {"sha": "f84b1022377b8110b6bff00c5391be2d07e74321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84b1022377b8110b6bff00c5391be2d07e74321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766d0c8c4401b260163f0895c69dbc88eb421a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766d0c8c4401b260163f0895c69dbc88eb421a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766d0c8c4401b260163f0895c69dbc88eb421a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766d0c8c4401b260163f0895c69dbc88eb421a87/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4613543f827f21ebc28da9ba2fba4cee24b43c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4613543f827f21ebc28da9ba2fba4cee24b43c5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4613543f827f21ebc28da9ba2fba4cee24b43c5e"}], "stats": {"total": 168, "additions": 144, "deletions": 24}, "files": [{"sha": "20e5ae3225c6630e1cfd79c3337ffd1d23e73392", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,3 +1,16 @@\n+2008-02-28  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31463\n+\tPR fortran/33950\n+\tPR fortran/34296\n+\t* lang.opt: Added -Wreturn-type.\n+\t* options.c (gfc_handle_option): Recognize -Wreturn-type.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Emit warnings for funtions\n+\twhere the result value is not set.\n+\t(gfc_generate_function_code): Likewise.\n+\t(generate_local_decl): Emit warnings for funtions whose RESULT\n+\tvariable is not set.\n+\n 2008-02-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34868"}, {"sha": "16db19285229b2eb14a224651f4599e9a67e65dc", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -65,6 +65,10 @@ Wnonstd-intrinsics\n Fortran Warning\n Warn about usage of non-standard intrinsics\n \n+Wreturn-type\n+Fortran Warning\n+; Documented in C\n+\n Wsurprising\n Fortran Warning\n Warn about \\\"suspicious\\\" constructs"}, {"sha": "ecab0c5850b28a350bcd2c0880aaa0653fa234ba", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -492,6 +492,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_line_truncation = value;\n       break;\n \n+    case OPT_Wreturn_type:\n+      warn_return_type = value;\n+      break;\n+\n     case OPT_Wsurprising:\n       gfc_option.warn_surprising = value;\n       break;"}, {"sha": "6f430cbc7a63c76d0d3c27659d1a6a6c27393770", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -2607,8 +2607,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t\tif (el->sym != el->sym->result)\n \t\t  break;\n \t    }\n-\t  if (el == NULL)\n-\t    warning (0, \"Function does not return a value\");\n+\t  /* TODO: move to the appropriate place in resolve.c.  */\n+\t  if (warn_return_type && el == NULL)\n+\t    gfc_warning (\"Return value of function '%s' at %L not set\",\n+\t\t\t proc_sym->name, &proc_sym->declared_at);\n \t}\n       else if (proc_sym->as)\n \t{\n@@ -2952,7 +2954,7 @@ generate_local_decl (gfc_symbol * sym)\n       /* Warn for unused variables, but not if they're inside a common\n \t block or are use-associated.  */\n       else if (warn_unused_variable\n-\t       && !(sym->attr.in_common || sym->attr.use_assoc))\n+\t       && !(sym->attr.in_common || sym->attr.use_assoc || sym->mark))\n \tgfc_warning (\"Unused variable '%s' declared at %L\", sym->name,\n \t\t     &sym->declared_at);\n       /* For variable length CHARACTER parameters, the PARM_DECL already\n@@ -2982,6 +2984,25 @@ generate_local_decl (gfc_symbol * sym)\n \tgfc_warning (\"Unused parameter '%s' declared at %L\", sym->name,\n \t\t     &sym->declared_at);\n     }\n+  else if (sym->attr.flavor == FL_PROCEDURE)\n+    {\n+      /* TODO: move to the appropriate place in resolve.c.  */\n+      if (warn_return_type\n+\t  && sym->attr.function\n+\t  && sym->result\n+\t  && sym != sym->result\n+\t  && !sym->result->attr.referenced\n+\t  && !sym->attr.use_assoc\n+\t  && sym->attr.if_source != IFSRC_IFBODY)\n+\t{\n+\t  gfc_warning (\"Return value '%s' of function '%s' declared at \"\n+\t\t       \"%L not set\", sym->result->name, sym->name,\n+\t\t        &sym->result->declared_at);\n+\n+\t  /* Prevents \"Unused variable\" warning for RESULT variables.  */\n+\t  sym->mark = sym->result->mark = 1;\n+\t}\n+    }\n \n   if (sym->attr.dummy == 1)\n     {\n@@ -3275,10 +3296,17 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t  gfc_add_expr_to_block (&block, tmp2);\n \t}\n \n-     gfc_add_expr_to_block (&block, tmp);\n+      gfc_add_expr_to_block (&block, tmp);\n+\n+      if (result == NULL_TREE)\n+\t{\n+\t  /* TODO: move to the appropriate place in resolve.c.  */\n+\t  if (warn_return_type && !sym->attr.referenced && sym == sym->result)\n+\t    gfc_warning (\"Return value of function '%s' at %L not set\",\n+\t\t\t sym->name, &sym->declared_at);\n \n-     if (result == NULL_TREE)\n-\twarning (0, \"Function return value not set\");\n+\t  TREE_NO_WARNING(sym->backend_decl) = 1;\n+\t}\n       else\n \t{\n \t  /* Set the return value to the dummy result variable.  The"}, {"sha": "b600cbc1dc9a5569f9dd4f95e50207524ae0f117", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,3 +1,16 @@\n+2008-02-28  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31463\n+\tPR fortran/33950\n+\tPR fortran/34296\n+\t* gfortran.dg/arrayio_11.f90: Fixed test.\n+\t* gfortran.dg/arrayio_12.f90: Likewise.\n+\t* gfortran.dg/module_read_1.f90: Added warning-directives.\n+\t* gfortran.dg/pr32242.f90: Likewise.\n+\t* gfortran.dg/result_in_spec_3.f90: Likewise.\n+\t* gfortran.dg/use_12.f90: Likewise.\n+\t* gfortran.dg/warn_function_without_result.f90 : New test.\n+\n 2008-02-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34868"}, {"sha": "04735d11bec23a2d8fefbefac1e4ea7afb12583e", "filename": "gcc/testsuite/gfortran.dg/arrayio_11.f90", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -21,7 +21,7 @@ program gfcbug51\n   FILE%date = (/'200612231200', '200712231200', &\n                 '200812231200'/)\n \n-  time = date_to_year (FILE)\n+  call date_to_year (FILE)\n   if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n \n   call month_to_date ((/8, 9, 10/), FILE)\n@@ -30,11 +30,10 @@ program gfcbug51\n \n contains\n \n-  function date_to_year (d) result (y)\n+  subroutine date_to_year (d)\n     type(date_t) :: d(3)\n-    type(year_t) :: y(size (d, 1))\n-    read (d%date(1:4),'(i4)')  time% year\n-  end function date_to_year\n+    read (d%date(1:4),'(i4)')  time%year\n+  end subroutine\n \n   subroutine month_to_date (m, d)\n     type(date_t) :: d(3)"}, {"sha": "09fa6c8a15e92e2b99e6ff9f6df6b49b4f865d81", "filename": "gcc/testsuite/gfortran.dg/arrayio_12.f90", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -18,7 +18,7 @@ program gfcbug51\n   cdate = (/'200612231200', '200712231200', &\n             '200812231200'/)\n \n-  time = date_to_year (cdate)\n+  call date_to_year (cdate)\n   if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n \n   call month_to_date ((/8, 9, 10/), cdate)\n@@ -27,11 +27,10 @@ program gfcbug51\n \n contains\n \n-  function date_to_year (d) result (y)\n+  subroutine date_to_year (d)\n     character(len=12) :: d(3)\n-    type(year_t) :: y(size (d, 1))\n-    read (cdate(:)(1:4),'(i4)')  time% year\n-  end function date_to_year\n+    read (cdate(:)(1:4),'(i4)')  time%year\n+  end subroutine\n \n   subroutine month_to_date (m, d)\n     character(len=12) :: d(3)"}, {"sha": "226c7366cd26ca3cb43adaed8af20b4eadb7fb64", "filename": "gcc/testsuite/gfortran.dg/module_read_1.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_read_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_read_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_read_1.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do run }\n+! { dg-options \"-Wreturn-type\" }\n ! PR fortran/33941\n ! The problem was that the intrinsic operators\n ! were written to the module file as '/=' etc.\n@@ -9,11 +10,11 @@\n \n module foo\n contains\n-  function pop(n) result(item)\n+  function pop(n) result(item)          ! { dg-warning \"not set\" }\n     integer :: n\n     character(len=merge(1, 0, n > 0)) :: item\n   end function pop\n-  function push(n) result(item)\n+  function push(n) result(item)         ! { dg-warning \"not set\" }\n     integer :: n\n     character(len=merge(1, 0, n /= 0)) :: item\n   end function push"}, {"sha": "21ecdd1786c08604de520dbd4e1d9b17255763c1", "filename": "gcc/testsuite/gfortran.dg/pr32242.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32242.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32242.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32242.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,5 +1,6 @@\n !PR fortran/32242\n ! { dg-do compile }\n+! { dg-options \"-Wreturn-type\" }\n ! { dg-final { cleanup-modules \"kahan_sum\" } }\n \n MODULE kahan_sum\n@@ -16,13 +17,13 @@ MODULE kahan_sum\n      TYPE ( pw_grid_type ), POINTER :: pw_grid\n   END TYPE pw_type\n CONTAINS\n- FUNCTION kahan_sum_d1(array,mask) RESULT(ks)\n+ FUNCTION kahan_sum_d1(array,mask) RESULT(ks)         ! { dg-warning \"not set\" }\n    REAL(KIND=dp), DIMENSION(:), INTENT(IN)  :: array\n    LOGICAL, DIMENSION(:), INTENT(IN), &\n      OPTIONAL                               :: mask\n    REAL(KIND=dp)                            :: ks\n  END FUNCTION kahan_sum_d1\n-  FUNCTION kahan_sum_z1(array,mask) RESULT(ks)\n+  FUNCTION kahan_sum_z1(array,mask) RESULT(ks)        ! { dg-warning \"not set\" }\n     COMPLEX(KIND=dp), DIMENSION(:), &\n       INTENT(IN)                             :: array\n     LOGICAL, DIMENSION(:), INTENT(IN), &\n@@ -34,6 +35,6 @@ FUNCTION pw_integral_a2b ( pw1, pw2 ) RESULT ( integral_value )\n     TYPE(pw_type), INTENT(IN)                :: pw1, pw2\n     REAL(KIND=dp)                            :: integral_value\n      integral_value = accurate_sum ( REAL ( CONJG ( pw1 % cc ( : ) ) &\n-          *  pw2 % cc ( : ) ,KIND=dp) * pw1 % pw_grid % gsq ( : ) )  ! { dg-warning \"Function return value not set\" }\n+          *  pw2 % cc ( : ) ,KIND=dp) * pw1 % pw_grid % gsq ( : ) )\n END FUNCTION pw_integral_a2b\n END MODULE"}, {"sha": "32743c32cedafcc8c5d45ff8336ce7c9a46791c7", "filename": "gcc/testsuite/gfortran.dg/result_in_spec_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_in_spec_3.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-std=gnu\" }\n+! { dg-options \"-std=gnu -Wreturn-type\" }\n ! PR fortran/34248\n !\n ! There was an ICE for assumed-length functions\n@@ -10,6 +10,6 @@\n   ctab = \"Hello\"\n END function test\n \n-FUNCTION test2() RESULT(res)\n+FUNCTION test2() RESULT(res)      ! { dg-warning \"not set\" }\n   character(*) :: res\n END function test2"}, {"sha": "7406dc433886ebe013a605a6b0940570c19b6893", "filename": "gcc/testsuite/gfortran.dg/use_12.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_12.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-Wreturn-type\" }\n ! Tests the fix of PR34545, in which the 'numclusters' that determines the size\n ! of fnres was not properly associated.\n !\n@@ -10,7 +11,7 @@ end module m1\n \n module m2\n   contains\n-    function get_nfirst( ) result(fnres)\n+    function get_nfirst( ) result(fnres)  ! { dg-warning \"not set\" }\n       use m1, only: numclusters\n       real :: fnres(numclusters)   ! change to REAL and it works!!  \n     end function get_nfirst"}, {"sha": "43af9c9ca10d6ab3ebdd7b426071d0fe7af5ab1b", "filename": "gcc/testsuite/gfortran.dg/warn_function_without_result.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766d0c8c4401b260163f0895c69dbc88eb421a87/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result.f90?ref=766d0c8c4401b260163f0895c69dbc88eb421a87", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do compile }\n+! { dg-options \"-Wreturn-type\" }\n+!\n+! PR fortran/31463 - inconsistent warnings if function return value is not set\n+! PR fortran/33950 - Warning missing for function result not set\n+! PR fortran/34296 - Intent(out) and character functions with RESULT: Value-not-set warning\n+!\n+FUNCTION f1()            ! { dg-warning \"not set\" }\n+REAL :: f1\n+END FUNCTION\n+\n+FUNCTION f2()            ! { dg-warning \"not set\" }\n+REAL, DIMENSION(1) :: f2\n+END FUNCTION\n+\n+FUNCTION f3()            ! { dg-warning \"not set\" }\n+REAL, POINTER :: f3\n+END FUNCTION\n+\n+FUNCTION f4()            ! { dg-warning \"not set\" }\n+REAL, DIMENSION(:), POINTER :: f4\n+END FUNCTION\n+\n+FUNCTION f5()            ! { dg-warning \"not set\" }\n+REAL, DIMENSION(:), ALLOCATABLE :: f5\n+END FUNCTION\n+\n+FUNCTION f6()            ! { dg-warning \"not set\" }\n+CHARACTER(2) :: f6\n+END FUNCTION\n+\n+\n+\n+FUNCTION g1() RESULT(h)  ! { dg-warning \"not set\" }\n+REAL :: h\n+END FUNCTION\n+\n+FUNCTION g2() RESULT(h)  ! { dg-warning \"not set\" }\n+REAL, DIMENSION(1) :: h\n+END FUNCTION\n+\n+FUNCTION g3() RESULT(h)  ! { dg-warning \"not set\" }\n+REAL, POINTER :: h\n+END FUNCTION\n+\n+FUNCTION g4() RESULT(h)  ! { dg-warning \"not set\" }\n+REAL, DIMENSION(:), POINTER :: h\n+END FUNCTION\n+\n+FUNCTION g5() RESULT(h)  ! { dg-warning \"not set\" }\n+REAL, DIMENSION(:), ALLOCATABLE :: h\n+END FUNCTION\n+\n+FUNCTION g6() RESULT(h)  ! { dg-warning \"not set\" }\n+CHARACTER(2) :: h\n+END FUNCTION\n+"}]}