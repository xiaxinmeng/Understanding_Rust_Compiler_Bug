{"sha": "179977c13abc237a74de8ff8db74ff892186c68e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5OTc3YzEzYWJjMjM3YTc0ZGU4ZmY4ZGI3NGZmODkyMTg2YzY4ZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-05-06T23:59:01Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-05-06T23:59:01Z"}, "message": "This commit was generated by cvs2svn to compensate for changes in r33746,\n\nwhich included commits to RCS files with non-trunk default branches.\n\nFrom-SVN: r33747", "tree": {"sha": "bf63ddd6f851df65a31a370541fbdecfd301b4bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf63ddd6f851df65a31a370541fbdecfd301b4bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/179977c13abc237a74de8ff8db74ff892186c68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179977c13abc237a74de8ff8db74ff892186c68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/179977c13abc237a74de8ff8db74ff892186c68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/179977c13abc237a74de8ff8db74ff892186c68e/comments", "author": null, "committer": null, "parents": [{"sha": "5a3c491c8e9ec258ff37a58de522b6f535ea4ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3c491c8e9ec258ff37a58de522b6f535ea4ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3c491c8e9ec258ff37a58de522b6f535ea4ade"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "eb67eac1f3634633f69d594ef7a9685fd0020f75", "filename": "boehm-gc/gcj_mlc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Fgcj_mlc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Fgcj_mlc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgcj_mlc.c?ref=179977c13abc237a74de8ff8db74ff892186c68e", "patch": "@@ -282,4 +282,8 @@ DCL_LOCK_STATE;\n     return((GC_PTR) op);\n }\n \n+#else\n+\n+char GC_no_gcj_support;\n+\n #endif  /* GC_GCJ_SUPPORT */"}, {"sha": "35686fc3527af57465875082e58438afbb0b571e", "filename": "boehm-gc/include/gc_cpp.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fgc_cpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fgc_cpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_cpp.h?ref=179977c13abc237a74de8ff8db74ff892186c68e", "patch": "@@ -255,12 +255,12 @@ inline gc_cleanup::gc_cleanup() {\n     GC_finalization_proc oldProc;\n     void* oldData;\n     void* base = GC_base( (void *) this );\n-    if (0 == base) return;\n-    GC_REGISTER_FINALIZER_IGNORE_SELF( \n-        base, cleanup, (void*) ((char*) this - (char*) base), \n+    if (0 != base)  {\n+      GC_REGISTER_FINALIZER_IGNORE_SELF( \n+        base, (GC_finalization_proc)cleanup, (void*) ((char*) this - (char*) base), \n         &oldProc, &oldData );\n-    if (0 != oldProc) {\n-        GC_REGISTER_FINALIZER_IGNORE_SELF( base, oldProc, oldData, 0, 0 );}}\n+      if (0 != oldProc) {\n+        GC_REGISTER_FINALIZER_IGNORE_SELF( base, oldProc, oldData, 0, 0 );}}}\n \n inline void* operator new( \n     size_t size, "}, {"sha": "ce685875549f0990a4dfb72ff9d9c7a3bf7fc5aa", "filename": "boehm-gc/include/private/gc_priv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h?ref=179977c13abc237a74de8ff8db74ff892186c68e", "patch": "@@ -1405,7 +1405,7 @@ extern GC_bool GC_objects_are_marked;\t/* There are marked objects in  */\n   extern GC_bool GC_incremental;\n \t\t\t/* Using incremental/generational collection. */\n #else\n-# define GC_incremental TRUE\n+# define GC_incremental FALSE\n \t\t\t/* Hopefully allow optimizer to remove some code. */\n #endif\n "}, {"sha": "045617a1d7b1743dfe1b3003389a95c48117e24c", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/179977c13abc237a74de8ff8db74ff892186c68e/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=179977c13abc237a74de8ff8db74ff892186c68e", "patch": "@@ -386,6 +386,11 @@\n  *\t\tto the nearest plausible page boundary, and use that instead\n  *\t\tof STACKBOTTOM.\n  *\n+ * Gustavo Rodriguez-Rivera points out that on most (all?) Unix machines,\n+ * the value of environ is a pointer that can serve as STACKBOTTOM.\n+ * I expect that HEURISTIC2 can be replaced by this approach, which\n+ * interferes far less with debugging. \n+ *\n  * If no expression for STACKBOTTOM can be found, and neither of the above\n  * heuristics are usable, the collector can still be used with all of the above\n  * undefined, provided one of the following is done:\n@@ -553,6 +558,7 @@\n \t\t\t\t/* This was 2, but that didn't sound right. */\n #     define OS_TYPE \"LINUX\"\n #     define HEURISTIC1\n+#     define DYNAMIC_LOADING\n #     undef STACK_GRAN\n #     define STACK_GRAN 0x10000000\n \t/* Stack usually starts at 0x80000000 */\n@@ -990,7 +996,11 @@\n \t/* this.)\t\t\t\t\t\t\t*/\n #       define STACKBOTTOM ((ptr_t) 0x7b033000)  /* from /etc/conf/h/param.h */\n #   else\n-#       define HEURISTIC2\n+\t/* Gustavo Rodriguez-Rivera suggested changing HEURISTIC2\t*/\n+\t/* to this.  We'll probably do this on other platforms, too.\t*/\n+\t/* For now I'll use it where I can test it.\t\t\t*/\n+\textern char ** environ;\n+#       define STACKBOTTOM ((ptr_t)environ)\n #   endif\n #   define STACK_GROWS_UP\n #   define DYNAMIC_LOADING\n@@ -1076,7 +1086,6 @@\n \t\t/* Requires Linux 2.3.47 or later.\t*/\n \textern int _end;\n #\tdefine DATAEND (&_end)\n-\t/* PREFETCH appears to have a large performance impact.\t*/\n #\tdefine PREFETCH(x) \\\n \t  __asm__ (\"\tlfetch\t[%0]\": : \"r\"((void *)(x)))\n #\tdefine PREFETCH_FOR_WRITE(x) \\"}]}