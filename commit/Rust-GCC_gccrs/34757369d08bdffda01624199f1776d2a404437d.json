{"sha": "34757369d08bdffda01624199f1776d2a404437d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NTczNjlkMDhiZGZmZGEwMTYyNDE5OWYxNzc2ZDJhNDA0NDM3ZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1998-07-11T03:04:39Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1998-07-11T03:04:39Z"}, "message": "arm.md (extendhisi2_mem, [...]): Propagate the volatile and structure attribute flags to MEMs generated.\n\n* arm.md (extendhisi2_mem, movhi, movhi_bytes): Propagate the volatile\nand structure attribute flags to MEMs generated.\n(splits for sign-extended HI & QI mode from memory):  Also propagate\nthe volatile flag.\n\nFrom-SVN: r21057", "tree": {"sha": "012967b819d7d5e25d98844c7fc42389e2d3a565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/012967b819d7d5e25d98844c7fc42389e2d3a565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34757369d08bdffda01624199f1776d2a404437d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34757369d08bdffda01624199f1776d2a404437d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34757369d08bdffda01624199f1776d2a404437d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34757369d08bdffda01624199f1776d2a404437d/comments", "author": null, "committer": null, "parents": [{"sha": "420d3897e2afb24d477dbf3e71306604935ed378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420d3897e2afb24d477dbf3e71306604935ed378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420d3897e2afb24d477dbf3e71306604935ed378"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "26e55613b1778151de7dab82be3dd110865bf1ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34757369d08bdffda01624199f1776d2a404437d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34757369d08bdffda01624199f1776d2a404437d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34757369d08bdffda01624199f1776d2a404437d", "patch": "@@ -1,3 +1,10 @@\n+Sat Jul 11 02:59:08 1998  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (extendhisi2_mem, movhi, movhi_bytes): Propagate the volatile\n+\tand structure attribute flags to MEMs generated.\n+\t(splits for sign-extended HI & QI mode from memory):  Also propagate \n+\tthe volatile flag.\n+\n Fri Jul 10 19:06:59 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* varray.h: Include system.h if it hasn't already been included"}, {"sha": "5a313e4d8e4e5abead7d7097f9f2fa6c7b4c3829", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34757369d08bdffda01624199f1776d2a404437d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34757369d08bdffda01624199f1776d2a404437d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=34757369d08bdffda01624199f1776d2a404437d", "patch": "@@ -2258,19 +2258,32 @@\n }\")\n \n (define_expand \"extendhisi2_mem\"\n-  [(set (match_dup 2) (zero_extend:SI (mem:QI (match_operand:HI 1 \"\" \"\"))))\n+  [(set (match_dup 2) (zero_extend:SI (match_operand:HI 1 \"\" \"\")))\n    (set (match_dup 3)\n-\t(zero_extend:SI (mem:QI (plus:SI (match_dup 1) (const_int 1)))))\n+\t(zero_extend:SI (match_dup 7)))\n    (set (match_dup 6) (ashift:SI (match_dup 4) (const_int 24)))\n    (set (match_operand:SI 0 \"\" \"\")\n \t(ior:SI (ashiftrt:SI (match_dup 6) (const_int 16)) (match_dup 5)))]\n   \"\"\n   \"\n+{\n+  rtx mem1, mem2;\n+  rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+\n+  mem1 = gen_rtx (MEM, QImode, addr);\n+  MEM_VOLATILE_P (mem1) = MEM_VOLATILE_P (operands[1]);\n+  MEM_IN_STRUCT_P (mem1) = MEM_IN_STRUCT_P (operands[1]);\n+  RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n+  mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n+  MEM_VOLATILE_P (mem2) = MEM_VOLATILE_P (operands[1]);\n+  MEM_IN_STRUCT_P (mem2) = MEM_IN_STRUCT_P (operands[1]);\n+  RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+  operands[1] = mem1;\n   operands[2] = gen_reg_rtx (SImode);\n   operands[3] = gen_reg_rtx (SImode);\n   operands[6] = gen_reg_rtx (SImode);\n+  operands[7] = mem2;\n \n   if (BYTES_BIG_ENDIAN)\n     {\n@@ -2282,6 +2295,7 @@\n       operands[4] = operands[3];\n       operands[5] = operands[2];\n     }\n+}\n \")\n \n (define_insn \"*extendhisi_insn\"\n@@ -2371,6 +2385,7 @@\n \n     operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]));\n     operands[2] = gen_rtx (MEM, QImode, operands[3]);\n+    MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n     MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n@@ -2435,6 +2450,7 @@\n     HOST_WIDE_INT offset;\n \n     operands[2] = gen_rtx (MEM, QImode, operands[0]);\n+    MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n     MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n     RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n     operands[1] = XEXP (operands[1], 0);\n@@ -2845,9 +2861,14 @@\n \t\t      && REGNO_POINTER_ALIGN (REGNO (base)) >= 4)\n \t\t    {\n \t\t      HOST_WIDE_INT new_offset = INTVAL (offset) & ~2;\n-\n-\t\t      emit_insn (gen_movsi (reg, gen_rtx (MEM, SImode,\n-\t\t\t\t\t   plus_constant (base, new_offset))));\n+\t\t      rtx new;\n+\n+\t\t      new = gen_rtx (MEM, SImode,\n+\t\t\t\t     plus_constant (base, new_offset));\n+\t\t      MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n+\t\t      MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+\t\t      RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n+\t\t      emit_insn (gen_movsi (reg, new));\n \t\t      if (((INTVAL (offset) & 2) != 0)\n \t\t\t  ^ (BYTES_BIG_ENDIAN ? 1 : 0))\n \t\t\t{\n@@ -2874,21 +2895,25 @@\n \t\t      && REGNO_POINTER_ALIGN (REGNO (base)) >= 4)\n \t\t    {\n \t\t      rtx reg = gen_reg_rtx (SImode);\n-\t\t      rtx new_mem;\n+\t\t      rtx new;\n \n \t\t      if ((INTVAL (offset) & 2) == 2)\n \t\t\t{\n \t\t\t  HOST_WIDE_INT new_offset = INTVAL (offset) ^ 2;\n-\t\t\t  new_mem = gen_rtx (MEM, SImode,\n-\t\t\t\t\t     plus_constant (base, new_offset));\n-\n-\t\t\t  emit_insn (gen_movsi (reg, new_mem));\n+\t\t\t  new = gen_rtx (MEM, SImode,\n+\t\t\t\t\t plus_constant (base, new_offset));\n+\t\t\t  MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n+\t\t\t  MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+\t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n+\t\t\t  emit_insn (gen_movsi (reg, new));\n \t\t\t}\n \t\t      else\n \t\t\t{\n-\t\t\t  new_mem = gen_rtx (MEM, SImode,\n-\t\t\t\t\t     XEXP (operands[1], 0));\n-\t\t\t  emit_insn (gen_rotated_loadsi (reg, new_mem));\n+\t\t\t  new = gen_rtx (MEM, SImode, XEXP (operands[1], 0));\n+\t\t\t  MEM_VOLATILE_P (new) = MEM_VOLATILE_P (operands[1]);\n+\t\t\t  MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (operands[1]);\n+\t\t\t  RTX_UNCHANGING_P (new) = RTX_UNCHANGING_P (operands[1]);\n+\t\t\t  emit_insn (gen_rotated_loadsi (reg, new));\n \t\t\t}\n \n \t\t      operands[1] = gen_lowpart (HImode, reg);\n@@ -2936,17 +2961,30 @@\n [(set_attr \"type\" \"load\")])\n \n (define_expand \"movhi_bytes\"\n-  [(set (match_dup 2) (zero_extend:SI (mem:QI (match_operand:HI 1 \"\" \"\"))))\n+  [(set (match_dup 2) (zero_extend:SI (match_operand:HI 1 \"\" \"\")))\n    (set (match_dup 3)\n-\t(zero_extend:SI (mem:QI (plus:SI (match_dup 1) (const_int 1)))))\n+\t(zero_extend:SI (match_dup 6)))\n    (set (match_operand:SI 0 \"\" \"\")\n \t (ior:SI (ashift:SI (match_dup 4) (const_int 8)) (match_dup 5)))]\n   \"\"\n   \"\n+{\n+  rtx mem1, mem2;\n+  rtx addr = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+\n+  mem1 = gen_rtx (MEM, QImode, addr);\n+  MEM_VOLATILE_P (mem1) = MEM_VOLATILE_P (operands[1]);\n+  MEM_IN_STRUCT_P (mem1) = MEM_IN_STRUCT_P (operands[1]);\n+  RTX_UNCHANGING_P (mem1) = RTX_UNCHANGING_P (operands[1]);\n+  mem2 = gen_rtx (MEM, QImode, plus_constant (addr, 1));\n+  MEM_VOLATILE_P (mem2) = MEM_VOLATILE_P (operands[1]);\n+  MEM_IN_STRUCT_P (mem2) = MEM_IN_STRUCT_P (operands[1]);\n+  RTX_UNCHANGING_P (mem2) = RTX_UNCHANGING_P (operands[1]);\n   operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+  operands[1] = mem1;\n   operands[2] = gen_reg_rtx (SImode);\n   operands[3] = gen_reg_rtx (SImode);\n+  operands[6] = mem2;\n \n   if (BYTES_BIG_ENDIAN)\n     {\n@@ -2958,6 +2996,7 @@\n       operands[4] = operands[3];\n       operands[5] = operands[2];\n     }\n+}\n \")\n \n (define_expand \"movhi_bigend\""}]}