{"sha": "a0a5f30f8e6741d55daca7fb3093df6365425661", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhNWYzMGY4ZTY3NDFkNTVkYWNhN2ZiMzA5M2RmNjM2NTQyNTY2MQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-03-26T04:17:57Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-03-26T04:17:57Z"}, "message": "pt.c (coerce_template_template_parm): Moved the body of the loop of coerce_template_template_parms here...\n\n2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n\n       * pt.c (coerce_template_template_parm): Moved the body of the loop\n       of coerce_template_template_parms here, to make iteration over a\n       template argument pack simpler.\n       Also, allow matching of a template parameter pack in the template\n       template parameter to a template parameter in the template\n       template argument.\n       (coerce_template_template_parms): Deal with variadic template\n       template parameters. Use coerce_template_template_parm.\n       (unify): Make sure we coerce the template template argument's\n       template arguments to the template template parameter's template\n       parameters, not the other way around.\n\n2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n\n       * g++.dg/cpp0x/variadic84.C: Update to reflect the change in\n       variadic template template parameter binding semantics.\n       * g++.dg/cpp0x/variadic85.C: Ditto.\n       * g++.dg/cpp0x/variadic88.C: New.\n       * g++.dg/cpp0x/variadic89.C: New.\n       * g++.dg/cpp0x/variadic90.C: New.\n       * g++.dg/cpp0x/variadic-ex14.C: Update to reflect the change in\n       variadic template template parameter binding semantics.\n       * g++.dg/cpp0x/variadic-lambda.C: New.\n\nFrom-SVN: r133543", "tree": {"sha": "f1ef439448a570f47eb3eed0834a900570fcfa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ef439448a570f47eb3eed0834a900570fcfa64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a5f30f8e6741d55daca7fb3093df6365425661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a5f30f8e6741d55daca7fb3093df6365425661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a5f30f8e6741d55daca7fb3093df6365425661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a5f30f8e6741d55daca7fb3093df6365425661/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22ec849c3b1088a10c46068f3df6e1e9fbc9efd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ec849c3b1088a10c46068f3df6e1e9fbc9efd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ec849c3b1088a10c46068f3df6e1e9fbc9efd4"}], "stats": {"total": 354, "additions": 288, "deletions": 66}, "files": [{"sha": "87e8c05ef1d8aeadf548bb332fa5c1dde512292d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -1,3 +1,17 @@\n+2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       * pt.c (coerce_template_template_parm): Moved the body of the loop\n+       of coerce_template_template_parms here, to make iteration over a\n+       template argument pack simpler.\n+       Also, allow matching of a template parameter pack in the template\n+       template parameter to a template parameter in the template\n+       template argument.\n+       (coerce_template_template_parms): Deal with variadic template\n+       template parameters. Use coerce_template_template_parm.\n+       (unify): Make sure we coerce the template template argument's\n+       template arguments to the template template parameter's template\n+       parameters, not the other way around.\n+\n 2008-03-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in: Remove .o targets."}, {"sha": "67d392da456f778d5d80a951a45891bc67789b75", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 129, "deletions": 53, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -4630,6 +4630,77 @@ convert_nontype_argument (tree type, tree expr)\n   return expr;\n }\n \n+/* Subroutine of coerce_template_template_parms, which returns 1 if\n+   PARM_PARM and ARG_PARM match using the rule for the template\n+   parameters of template template parameters. Both PARM and ARG are\n+   template parameters; the rest of the arguments are the same as for\n+   coerce_template_template_parms.\n+ */\n+static int\n+coerce_template_template_parm (tree parm,\n+                              tree arg,\n+                              tsubst_flags_t complain,\n+                              tree in_decl,\n+                              tree outer_args)\n+{\n+  if (arg == NULL_TREE || arg == error_mark_node\n+      || parm == NULL_TREE || parm == error_mark_node)\n+    return 0;\n+  \n+  if (TREE_CODE (arg) != TREE_CODE (parm))\n+    return 0;\n+  \n+  switch (TREE_CODE (parm))\n+    {\n+    case TEMPLATE_DECL:\n+      /* We encounter instantiations of templates like\n+\t template <template <template <class> class> class TT>\n+\t class C;  */\n+      {\n+\ttree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n+\ttree argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n+\t\n+\tif (!coerce_template_template_parms\n+\t    (parmparm, argparm, complain, in_decl, outer_args))\n+\t  return 0;\n+      }\n+      /* Fall through.  */\n+      \n+    case TYPE_DECL:\n+      if (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (arg))\n+\t  && !TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (parm)))\n+\t/* Argument is a parameter pack but parameter is not.  */\n+\treturn 0;\n+      break;\n+      \n+    case PARM_DECL:\n+      /* The tsubst call is used to handle cases such as\n+\t \n+           template <int> class C {};\n+\t   template <class T, template <T> class TT> class D {};\n+\t   D<int, C> d;\n+\n+\t i.e. the parameter list of TT depends on earlier parameters.  */\n+      if (!dependent_type_p (TREE_TYPE (arg))\n+\t  && !same_type_p\n+\t        (tsubst (TREE_TYPE (parm), outer_args, complain, in_decl),\n+\t\t TREE_TYPE (arg)))\n+\treturn 0;\n+      \n+      if (TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (arg))\n+\t  && !TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n+\t/* Argument is a parameter pack but parameter is not.  */\n+\treturn 0;\n+      \n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return 1;\n+}\n+\n \n /* Return 1 if PARM_PARMS and ARG_PARMS matches using rule for\n    template template parameters.  Both PARM_PARMS and ARG_PARMS are\n@@ -4652,17 +4723,45 @@ coerce_template_template_parms (tree parm_parms,\n {\n   int nparms, nargs, i;\n   tree parm, arg;\n+  int variadic_p = 0;\n \n   gcc_assert (TREE_CODE (parm_parms) == TREE_VEC);\n   gcc_assert (TREE_CODE (arg_parms) == TREE_VEC);\n \n   nparms = TREE_VEC_LENGTH (parm_parms);\n   nargs = TREE_VEC_LENGTH (arg_parms);\n \n-  if (nargs != nparms)\n+  /* Determine whether we have a parameter pack at the end of the\n+     template template parameter's template parameter list.  */\n+  if (TREE_VEC_ELT (parm_parms, nparms - 1) != error_mark_node)\n+    {\n+      parm = TREE_VALUE (TREE_VEC_ELT (parm_parms, nparms - 1));\n+      \n+      switch (TREE_CODE (parm))\n+        {\n+        case TEMPLATE_DECL:\n+        case TYPE_DECL:\n+          if (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (parm)))\n+            variadic_p = 1;\n+          break;\n+\t  \n+        case PARM_DECL:\n+          if (TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm)))\n+            variadic_p = 1;\n+          break;\n+\t  \n+        default:\n+          gcc_unreachable ();\n+        }\n+    }\n+ \n+  if (nargs != nparms\n+      && !(variadic_p && nargs >= nparms - 1))\n     return 0;\n \n-  for (i = 0; i < nparms; ++i)\n+  /* Check all of the template parameters except the parameter pack at\n+     the end (if any).  */\n+  for (i = 0; i < nparms - variadic_p; ++i)\n     {\n       if (TREE_VEC_ELT (parm_parms, i) == error_mark_node\n           || TREE_VEC_ELT (arg_parms, i) == error_mark_node)\n@@ -4671,60 +4770,35 @@ coerce_template_template_parms (tree parm_parms,\n       parm = TREE_VALUE (TREE_VEC_ELT (parm_parms, i));\n       arg = TREE_VALUE (TREE_VEC_ELT (arg_parms, i));\n \n-      if (arg == NULL_TREE || arg == error_mark_node\n-\t  || parm == NULL_TREE || parm == error_mark_node)\n+      if (!coerce_template_template_parm (parm, arg, complain, in_decl,\n+                                          outer_args))\n \treturn 0;\n \n-      if (TREE_CODE (arg) != TREE_CODE (parm))\n-\treturn 0;\n-\n-      switch (TREE_CODE (parm))\n-\t{\n-\tcase TEMPLATE_DECL:\n-\t  /* We encounter instantiations of templates like\n-\t       template <template <template <class> class> class TT>\n-\t       class C;  */\n-\t  {\n-\t    tree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n-\t    tree argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n-\n-\t    if (!coerce_template_template_parms\n-\t\t(parmparm, argparm, complain, in_decl, outer_args))\n-\t      return 0;\n-\t  }\n-\t  /* Fall through.  */\n-\n-\tcase TYPE_DECL:\n-\t  if (TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (parm))\n-\t      != TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (arg)))\n-\t    /* One is a parameter pack, the other is not.  */\n-\t    return 0;\n-\t  break;\n-\n-\tcase PARM_DECL:\n-\t  /* The tsubst call is used to handle cases such as\n-\n-\t       template <int> class C {};\n-\t       template <class T, template <T> class TT> class D {};\n-\t       D<int, C> d;\n+    }\n \n-\t     i.e. the parameter list of TT depends on earlier parameters.  */\n-\t  if (!dependent_type_p (TREE_TYPE (arg))\n-\t      && !same_type_p\n-\t\t    (tsubst (TREE_TYPE (parm), outer_args, complain, in_decl),\n-\t\t\t     TREE_TYPE (arg)))\n-\t    return 0;\n+  if (variadic_p)\n+    {\n+      /* Check each of the template parameters in the template\n+\t argument against the template parameter pack at the end of\n+\t the template template parameter.  */\n+      if (TREE_VEC_ELT (parm_parms, i) == error_mark_node)\n+\treturn 0;\n \n-\t  if (TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (parm))\n-\t      != TEMPLATE_PARM_PARAMETER_PACK (DECL_INITIAL (arg)))\n-\t    /* One is a parameter pack, the other is not.  */\n-\t    return 0;\n-\t  break;\n+      parm = TREE_VALUE (TREE_VEC_ELT (parm_parms, i));\n \n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      for (; i < nargs; ++i)\n+        {\n+          if (TREE_VEC_ELT (arg_parms, i) == error_mark_node)\n+            continue;\n+ \n+          arg = TREE_VALUE (TREE_VEC_ELT (arg_parms, i));\n+ \n+          if (!coerce_template_template_parm (parm, arg, complain, in_decl,\n+                                              outer_args))\n+            return 0;\n+        }\n     }\n+\n   return 1;\n }\n \n@@ -12825,8 +12899,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t  {\n \t    tree parmvec = TYPE_TI_ARGS (parm);\n \t    tree argvec = INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (arg));\n-\t    tree argtmplvec\n-\t      = DECL_INNERMOST_TEMPLATE_PARMS (TYPE_TI_TEMPLATE (arg));\n+\t    tree parm_parms \n+\t      = DECL_INNERMOST_TEMPLATE_PARMS \n+\t          (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (parm));\n \t    int i, len;\n             int parm_variadic_p = 0;\n \n@@ -12857,7 +12932,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t      Here, if Lvalue_proxy is permitted to bind to View, then\n \t      the global operator+ will be used; if they are not, the\n \t      Lvalue_proxy will be converted to float.  */\n-\t    if (coerce_template_parms (argtmplvec, parmvec,\n+\t    if (coerce_template_parms (parm_parms,\n+                                       argvec,\n \t\t\t\t       TYPE_TI_TEMPLATE (parm),\n \t\t\t\t       tf_none,\n \t\t\t\t       /*require_all_args=*/true,"}, {"sha": "e3499ad5ea9f53e2585987b3da7e1e9f3ad90d9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -1,3 +1,15 @@\n+2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       * g++.dg/cpp0x/variadic84.C: Update to reflect the change in\n+       variadic template template parameter binding semantics.\n+       * g++.dg/cpp0x/variadic85.C: Ditto.\n+       * g++.dg/cpp0x/variadic88.C: New.\n+       * g++.dg/cpp0x/variadic89.C: New.\n+       * g++.dg/cpp0x/variadic90.C: New.\n+       * g++.dg/cpp0x/variadic-ex14.C: Update to reflect the change in\n+       variadic template template parameter binding semantics.\n+       * g++.dg/cpp0x/variadic-lambda.C: New.\n+\n 2008-03-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR target/31558"}, {"sha": "f33ca0e8618ae8ff4621c4a3e2ec41a77278249c", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -14,10 +14,6 @@ X<B> xB; // { dg-error \"mismatch\" }\n X<C> xC; // { dg-error \"mismatch\" }\n // { dg-error \"expected a template\" \"\" { target *-*-* } 14 }\n // { dg-error \"invalid type\" \"\" { target *-*-* } 14 }\n-Y<A> yA; // { dg-error \"mismatch\" }\n-// { dg-error \"expected a template\" \"\" { target *-*-* } 17 }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 17 }\n-Y<B> yB; // { dg-error \"mismatch\" }\n-// { dg-error \"expected a template\" \"\" { target *-*-* } 20 }\n-// { dg-error \"invalid type\" \"\" { target *-*-* } 20 }\n+Y<A> yA;\n+Y<B> yB;\n Y<C> yC; // okay"}, {"sha": "705d441493e04471f9739db5ac0c9b5fab93ffcb", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-lambda.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-lambda.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-lambda.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-lambda.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -0,0 +1,79 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+struct int_placeholder;\n+\n+template<typename T>\n+struct do_replace\n+{\n+  typedef T type;\n+};\n+\n+template<>\n+struct do_replace<int_placeholder>\n+{\n+  typedef int type;\n+};\n+\n+template<typename T> struct lambdalike\n+{\n+  typedef T type;\n+};\n+\n+template<template<typename...> class TT, typename... Args>\n+struct lambdalike<TT<Args...> > {\n+  typedef TT<typename do_replace<Args>::type...> type;\n+};\n+\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+template<typename... Elements> struct tuple;\n+template<typename T1, typename T2> struct pair;\n+\n+static_assert(is_same<lambdalike<tuple<float, int_placeholder, double>>::type,\n+\t\t      tuple<float, int, double>>::value,\n+\t      \"MPL lambda-like replacement on tuple\");\n+static_assert(is_same<lambdalike<pair<float, int_placeholder>>::type,\n+\t\t      pair<float, int>>::value,\n+\t      \"MPL lambda-like replacement on pair\");\n+\n+\n+struct _1 {};\n+\n+template<typename Arg0, typename Lambda>\n+struct eval\n+{\n+    typedef Lambda type;\n+};\n+\n+template<typename Arg0>\n+struct eval<Arg0, _1>\n+{\n+    typedef Arg0 type;\n+};\n+\n+template<typename Arg0, template<typename...> class T, typename... Pack>\n+struct eval<Arg0, T<Pack...> >\n+{\n+    typedef T< typename eval<Arg0, Pack>::type... > type;\n+};\n+\n+static_assert(is_same<eval<int, tuple<float, _1, double>>::type,\n+\t              tuple<float, int, double>>::value, \"eval tuple\");\n+static_assert(is_same<eval<int, pair<_1, double>>::type,\n+\t              pair<int, double>>::value, \"eval pair\");\n+static_assert(is_same<eval<int, \n+\t                   tuple<pair<_1, _1>, pair<float, float>,\n+ \t                         pair<double, _1>>>::type,\n+\t      tuple<pair<int, int>, pair<float, float>, pair<double, int>>>::value,\n+\t      \"recursive eval\");"}, {"sha": "ce31267954f55ca23ddca24fec07d3bed51d6b03", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic84.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic84.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic84.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic84.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -18,9 +18,9 @@ template<int> struct B1 {};\n template<int, int> struct B2 {};\n template<typename> struct B3 {};\n template<typename, typename> struct B4 {};\n-A1<B1<0> > a1; // { dg-error \"incomplete type\" }\n-A2<B2<0, 1> > a2; // { dg-error \"incomplete type\" }\n-A3<B2<0, 1> > a3; // { dg-error \"incomplete type\" }\n-A4<B3<int> > a4; // { dg-error \"incomplete type\" }\n-A5<B4<int, long> > a5; // { dg-error \"incomplete type\" }\n-A6<B4<int, long> > a6; // { dg-error \"incomplete type\" }\n+A1<B1<0> > a1;\n+A2<B2<0, 1> > a2;\n+A3<B2<0, 1> > a3;\n+A4<B3<int> > a4;\n+A5<B4<int, long> > a5;\n+A6<B4<int, long> > a6;"}, {"sha": "facb263910f0c7b2bd866716ea1327ad757d8cd9", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic85.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -5,6 +5,6 @@\n template<typename...> struct A1;\n template<template<int, int...> class T> struct A1<T<0, 1> > {};\n template<int, int, int...> struct B1 {};\n-A1<B1<0, 1> > a1; // { dg-error \"incomplete type\" }\n+A1<B1<0, 1> > a1;\n template<int...> struct B2 {};\n A1<B2<0, 1> > a2; // { dg-error \"incomplete type\" }"}, {"sha": "b14cabe32181857656270f99de41e42fdd222c8a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic88.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic88.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic88.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic88.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template<template<typename...> class TT>\n+TT<int, float, double> foo(TT<int, float>)\n+{\n+  return TT<int, float, double>();\n+}\n+\n+template<typename T>\n+int& foo(T) \n+{ \n+  static int i = 0; return i; \n+}\n+\n+template<typename T, typename U>\n+struct pair {};\n+\n+void bar()\n+{\n+  pair<int, float> p;\n+  int& i = foo(p);\n+}\n+"}, {"sha": "b943771a6deee2e6bea65fb6a3086455d7cd48d1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic89.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic89.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++0x\" }\n+// Contributed by Eric Niebler\n+template<typename T, typename U>\n+struct pair\n+{};\n+\n+template<typename T>\n+struct test;\n+\n+template<template<typename...> class T, typename... Args>\n+struct test<T<Args...> >\n+{};\n+\n+test<pair<int, double> > t;"}, {"sha": "632e166c3465b2808aceffe3af810d4a9f09e038", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic90.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a5f30f8e6741d55daca7fb3093df6365425661/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic90.C?ref=a0a5f30f8e6741d55daca7fb3093df6365425661", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template<template<typename...> class TT>\n+struct X { };\n+\n+template<typename T, typename U> struct pair { };\n+\n+X<pair> x;"}]}