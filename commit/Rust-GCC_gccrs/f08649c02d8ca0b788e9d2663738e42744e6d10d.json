{"sha": "f08649c02d8ca0b788e9d2663738e42744e6d10d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4NjQ5YzAyZDhjYTBiNzg4ZTlkMjY2MzczOGU0Mjc0NGU2ZDEwZA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2014-12-17T16:25:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2014-12-17T16:25:49Z"}, "message": "Add a few debug utilities for DWARF expressions\n\n\t* dwarf2out.c (print_loc_descr): New.\n\t(print_dw_val): New.\n\t(print_attribute): New.\n\t(print_loc_descr): New.\n\t(print_die): Use print_dw_val.\n\t(debug_dwarf_loc_descr): New.\n\t* dwarf2out.h (debug_dwarf_loc_descr): New declaration.\n\nFrom-SVN: r218826", "tree": {"sha": "dc9e2df6564c06a410bf2b2edd6b19c6eeb9ce84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc9e2df6564c06a410bf2b2edd6b19c6eeb9ce84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f08649c02d8ca0b788e9d2663738e42744e6d10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08649c02d8ca0b788e9d2663738e42744e6d10d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f08649c02d8ca0b788e9d2663738e42744e6d10d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f08649c02d8ca0b788e9d2663738e42744e6d10d/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce37c2974be19760a28a67bc8eca5967353e2a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce37c2974be19760a28a67bc8eca5967353e2a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce37c2974be19760a28a67bc8eca5967353e2a2c"}], "stats": {"total": 289, "additions": 187, "deletions": 102}, "files": [{"sha": "ac8eb959db0f8e518ee1d490293267f54484f6d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f08649c02d8ca0b788e9d2663738e42744e6d10d", "patch": "@@ -1,3 +1,13 @@\n+2014-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (print_loc_descr): New.\n+\t(print_dw_val): New.\n+\t(print_attribute): New.\n+\t(print_loc_descr): New.\n+\t(print_die): Use print_dw_val.\n+\t(debug_dwarf_loc_descr): New.\n+\t* dwarf2out.h (debug_dwarf_loc_descr): New declaration.\n+\n 2014-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.c (gen_type_die_with_usage): Enable the array lang-hook"}, {"sha": "71e940f6b4df3aa7e14205a591ec25db7a84b60c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 176, "deletions": 102, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f08649c02d8ca0b788e9d2663738e42744e6d10d", "patch": "@@ -5370,6 +5370,173 @@ print_signature (FILE *outfile, char *sig)\n     fprintf (outfile, \"%02x\", sig[i] & 0xff);\n }\n \n+static void print_loc_descr (dw_loc_descr_ref, FILE *);\n+\n+/* Print the value associated to the VAL DWARF value node to OUTFILE.  If\n+   RECURSE, output location descriptor operations.  */\n+\n+static void\n+print_dw_val (dw_val_node *val, bool recurse, FILE *outfile)\n+{\n+  switch (val->val_class)\n+    {\n+    case dw_val_class_addr:\n+      fprintf (outfile, \"address\");\n+      break;\n+    case dw_val_class_offset:\n+      fprintf (outfile, \"offset\");\n+      break;\n+    case dw_val_class_loc:\n+      fprintf (outfile, \"location descriptor\");\n+      if (val->v.val_loc == NULL)\n+\tfprintf (outfile, \" -> <null>\\n\");\n+      else if (recurse)\n+\t{\n+\t  fprintf (outfile, \":\\n\");\n+\t  print_indent += 4;\n+\t  print_loc_descr (val->v.val_loc, outfile);\n+\t  print_indent -= 4;\n+\t}\n+      else\n+\tfprintf (outfile, \" (%p)\\n\", (void *) val->v.val_loc);\n+      break;\n+    case dw_val_class_loc_list:\n+      fprintf (outfile, \"location list -> label:%s\",\n+\t       val->v.val_loc_list->ll_symbol);\n+      break;\n+    case dw_val_class_range_list:\n+      fprintf (outfile, \"range list\");\n+      break;\n+    case dw_val_class_const:\n+      fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, val->v.val_int);\n+      break;\n+    case dw_val_class_unsigned_const:\n+      fprintf (outfile, HOST_WIDE_INT_PRINT_UNSIGNED, val->v.val_unsigned);\n+      break;\n+    case dw_val_class_const_double:\n+      fprintf (outfile, \"constant (\"HOST_WIDE_INT_PRINT_DEC\",\"\\\n+\t\t\tHOST_WIDE_INT_PRINT_UNSIGNED\")\",\n+\t       val->v.val_double.high,\n+\t       val->v.val_double.low);\n+      break;\n+    case dw_val_class_wide_int:\n+      {\n+\tint i = val->v.val_wide->get_len ();\n+\tfprintf (outfile, \"constant (\");\n+\tgcc_assert (i > 0);\n+\tif (val->v.val_wide->elt (i - 1) == 0)\n+\t  fprintf (outfile, \"0x\");\n+\tfprintf (outfile, HOST_WIDE_INT_PRINT_HEX,\n+\t\t val->v.val_wide->elt (--i));\n+\twhile (--i >= 0)\n+\t  fprintf (outfile, HOST_WIDE_INT_PRINT_PADDED_HEX,\n+\t\t   val->v.val_wide->elt (i));\n+\tfprintf (outfile, \")\");\n+\tbreak;\n+      }\n+    case dw_val_class_vec:\n+      fprintf (outfile, \"floating-point or vector constant\");\n+      break;\n+    case dw_val_class_flag:\n+      fprintf (outfile, \"%u\", val->v.val_flag);\n+      break;\n+    case dw_val_class_die_ref:\n+      if (val->v.val_die_ref.die != NULL)\n+\t{\n+\t  dw_die_ref die = val->v.val_die_ref.die;\n+\n+\t  if (die->comdat_type_p)\n+\t    {\n+\t      fprintf (outfile, \"die -> signature: \");\n+\t      print_signature (outfile,\n+\t\t\t       die->die_id.die_type_node->signature);\n+\t    }\n+\t  else if (die->die_id.die_symbol)\n+\t    fprintf (outfile, \"die -> label: %s\", die->die_id.die_symbol);\n+\t  else\n+\t    fprintf (outfile, \"die -> %ld\", die->die_offset);\n+\t  fprintf (outfile, \" (%p)\", (void *) die);\n+\t}\n+      else\n+\tfprintf (outfile, \"die -> <null>\");\n+      break;\n+    case dw_val_class_vms_delta:\n+      fprintf (outfile, \"delta: @slotcount(%s-%s)\",\n+\t       val->v.val_vms_delta.lbl2, val->v.val_vms_delta.lbl1);\n+      break;\n+    case dw_val_class_lbl_id:\n+    case dw_val_class_lineptr:\n+    case dw_val_class_macptr:\n+    case dw_val_class_high_pc:\n+      fprintf (outfile, \"label: %s\", val->v.val_lbl_id);\n+      break;\n+    case dw_val_class_str:\n+      if (val->v.val_str->str != NULL)\n+\tfprintf (outfile, \"\\\"%s\\\"\", val->v.val_str->str);\n+      else\n+\tfprintf (outfile, \"<null>\");\n+      break;\n+    case dw_val_class_file:\n+      fprintf (outfile, \"\\\"%s\\\" (%d)\", val->v.val_file->filename,\n+\t       val->v.val_file->emitted_number);\n+      break;\n+    case dw_val_class_data8:\n+      {\n+\tint i;\n+\n+\tfor (i = 0; i < 8; i++)\n+\t  fprintf (outfile, \"%02x\", val->v.val_data8[i]);\n+\tbreak;\n+      }\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Likewise, for a DIE attribute.  */\n+\n+static void\n+print_attribute (dw_attr_ref a, bool recurse, FILE *outfile)\n+{\n+  print_dw_val (&a->dw_attr_val, recurse, outfile);\n+}\n+\n+\n+/* Print the list of operands in the LOC location description to OUTFILE.  This\n+   routine is a debugging aid only.  */\n+\n+static void\n+print_loc_descr (dw_loc_descr_ref loc, FILE *outfile)\n+{\n+  dw_loc_descr_ref l = loc;\n+\n+  if (loc == NULL)\n+    {\n+      print_spaces (outfile);\n+      fprintf (outfile, \"<null>\\n\");\n+      return;\n+    }\n+\n+  for (l = loc; l != NULL; l = l->dw_loc_next)\n+    {\n+      print_spaces (outfile);\n+      fprintf (outfile, \"(%p) %s\",\n+\t       (void *) l,\n+\t       dwarf_stack_op_name (l->dw_loc_opc));\n+      if (l->dw_loc_oprnd1.val_class != dw_val_class_none)\n+\t{\n+\t  fprintf (outfile, \" \");\n+\t  print_dw_val (&l->dw_loc_oprnd1, false, outfile);\n+\t}\n+      if (l->dw_loc_oprnd2.val_class != dw_val_class_none)\n+\t{\n+\t  fprintf (outfile, \", \");\n+\t  print_dw_val (&l->dw_loc_oprnd2, false, outfile);\n+\t}\n+      fprintf (outfile, \"\\n\");\n+    }\n+}\n+\n /* Print the information associated with a given DIE, and its children.\n    This routine is a debugging aid only.  */\n \n@@ -5402,108 +5569,7 @@ print_die (dw_die_ref die, FILE *outfile)\n       print_spaces (outfile);\n       fprintf (outfile, \"  %s: \", dwarf_attr_name (a->dw_attr));\n \n-      switch (AT_class (a))\n-\t{\n-\tcase dw_val_class_addr:\n-\t  fprintf (outfile, \"address\");\n-\t  break;\n-\tcase dw_val_class_offset:\n-\t  fprintf (outfile, \"offset\");\n-\t  break;\n-\tcase dw_val_class_loc:\n-\t  fprintf (outfile, \"location descriptor\");\n-\t  break;\n-\tcase dw_val_class_loc_list:\n-\t  fprintf (outfile, \"location list -> label:%s\",\n-\t\t   AT_loc_list (a)->ll_symbol);\n-\t  break;\n-\tcase dw_val_class_range_list:\n-\t  fprintf (outfile, \"range list\");\n-\t  break;\n-\tcase dw_val_class_const:\n-\t  fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, AT_int (a));\n-\t  break;\n-\tcase dw_val_class_unsigned_const:\n-\t  fprintf (outfile, HOST_WIDE_INT_PRINT_UNSIGNED, AT_unsigned (a));\n-\t  break;\n-\tcase dw_val_class_const_double:\n-\t  fprintf (outfile, \"constant (\"HOST_WIDE_INT_PRINT_DEC\",\"\\\n-\t\t\t    HOST_WIDE_INT_PRINT_UNSIGNED\")\",\n-\t\t   a->dw_attr_val.v.val_double.high,\n-\t\t   a->dw_attr_val.v.val_double.low);\n-\t  break;\n-\tcase dw_val_class_wide_int:\n-\t  {\n-\t    int i = a->dw_attr_val.v.val_wide->get_len ();\n-\t    fprintf (outfile, \"constant (\");\n-\t    gcc_assert (i > 0);\n-\t    if (a->dw_attr_val.v.val_wide->elt (i - 1) == 0)\n-\t      fprintf (outfile, \"0x\");\n-\t    fprintf (outfile, HOST_WIDE_INT_PRINT_HEX,\n-\t\t     a->dw_attr_val.v.val_wide->elt (--i));\n-\t    while (--i >= 0)\n-\t      fprintf (outfile, HOST_WIDE_INT_PRINT_PADDED_HEX,\n-\t\t       a->dw_attr_val.v.val_wide->elt (i));\n-\t    fprintf (outfile, \")\");\n-\t    break;\n-\t  }\n-\tcase dw_val_class_vec:\n-\t  fprintf (outfile, \"floating-point or vector constant\");\n-\t  break;\n-\tcase dw_val_class_flag:\n-\t  fprintf (outfile, \"%u\", AT_flag (a));\n-\t  break;\n-\tcase dw_val_class_die_ref:\n-\t  if (AT_ref (a) != NULL)\n-\t    {\n-\t      if (AT_ref (a)->comdat_type_p)\n-\t        {\n-\t\t  fprintf (outfile, \"die -> signature: \");\n-\t\t  print_signature (outfile,\n-\t\t  \t\t   AT_ref (a)->die_id.die_type_node->signature);\n-                }\n-\t      else if (AT_ref (a)->die_id.die_symbol)\n-\t\tfprintf (outfile, \"die -> label: %s\",\n-\t\t         AT_ref (a)->die_id.die_symbol);\n-\t      else\n-\t\tfprintf (outfile, \"die -> %ld\", AT_ref (a)->die_offset);\n-\t      fprintf (outfile, \" (%p)\", (void *) AT_ref (a));\n-\t    }\n-\t  else\n-\t    fprintf (outfile, \"die -> <null>\");\n-\t  break;\n-\tcase dw_val_class_vms_delta:\n-\t  fprintf (outfile, \"delta: @slotcount(%s-%s)\",\n-\t\t   AT_vms_delta2 (a), AT_vms_delta1 (a));\n-\t  break;\n-\tcase dw_val_class_lbl_id:\n-\tcase dw_val_class_lineptr:\n-\tcase dw_val_class_macptr:\n-\tcase dw_val_class_high_pc:\n-\t  fprintf (outfile, \"label: %s\", AT_lbl (a));\n-\t  break;\n-\tcase dw_val_class_str:\n-\t  if (AT_string (a) != NULL)\n-\t    fprintf (outfile, \"\\\"%s\\\"\", AT_string (a));\n-\t  else\n-\t    fprintf (outfile, \"<null>\");\n-\t  break;\n-\tcase dw_val_class_file:\n-\t  fprintf (outfile, \"\\\"%s\\\" (%d)\", AT_file (a)->filename,\n-\t\t   AT_file (a)->emitted_number);\n-\t  break;\n-\tcase dw_val_class_data8:\n-\t  {\n-\t    int i;\n-\n-            for (i = 0; i < 8; i++)\n-              fprintf (outfile, \"%02x\", a->dw_attr_val.v.val_data8[i]);\n-\t    break;\n-          }\n-\tdefault:\n-\t  break;\n-\t}\n-\n+      print_attribute (a, true, outfile);\n       fprintf (outfile, \"\\n\");\n     }\n \n@@ -5517,6 +5583,14 @@ print_die (dw_die_ref die, FILE *outfile)\n     fprintf (outfile, \"\\n\");\n }\n \n+/* Print the list of operations in the LOC location description.  */\n+\n+DEBUG_FUNCTION void\n+debug_dwarf_loc_descr (dw_loc_descr_ref loc)\n+{\n+  print_loc_descr (loc, stderr);\n+}\n+\n /* Print the information collected for a given DIE.  */\n \n DEBUG_FUNCTION void"}, {"sha": "a61f5870488baf1d31ca10a5f0811f9891e01eba", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f08649c02d8ca0b788e9d2663738e42744e6d10d/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=f08649c02d8ca0b788e9d2663738e42744e6d10d", "patch": "@@ -254,6 +254,7 @@ extern void dwarf2out_emit_cfi (dw_cfi_ref cfi);\n extern void debug_dwarf (void);\n struct die_struct;\n extern void debug_dwarf_die (struct die_struct *);\n+extern void debug_dwarf_loc_descr (dw_loc_descr_ref);\n extern void debug (die_struct &ref);\n extern void debug (die_struct *ptr);\n extern void dwarf2out_set_demangle_name_func (const char *(*) (const char *));"}]}