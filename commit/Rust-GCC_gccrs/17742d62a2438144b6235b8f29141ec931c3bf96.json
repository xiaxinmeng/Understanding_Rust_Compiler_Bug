{"sha": "17742d62a2438144b6235b8f29141ec931c3bf96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc3NDJkNjJhMjQzODE0NGI2MjM1YjhmMjkxNDFlYzkzMWMzYmY5Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-13T12:43:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-13T12:43:58Z"}, "message": "tree-ssa-sccvn.h (enum vn_kind): New.\n\n2012-09-13  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.h (enum vn_kind): New.\n\t(vn_get_stmt_kind): Likewise.\n\t* tree-ssa-sccvn.c (vn_get_stmt_kind): New function, adjust\n\tADDR_EXPR handling.\n\t(visit_use): Use it.\n\t* tree-ssa-pre.c (compute_avail): Likewise, simplify further.\n\n\t* gcc.dg/tree-ssa/ssa-fre-37.c: New testcase.\n\nFrom-SVN: r191253", "tree": {"sha": "68386939ae0852a77af25150e2d0cbfe60672811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68386939ae0852a77af25150e2d0cbfe60672811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17742d62a2438144b6235b8f29141ec931c3bf96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17742d62a2438144b6235b8f29141ec931c3bf96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17742d62a2438144b6235b8f29141ec931c3bf96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17742d62a2438144b6235b8f29141ec931c3bf96/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d087cc916f97db8990d05ff5828b0c99ca58a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d087cc916f97db8990d05ff5828b0c99ca58a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d087cc916f97db8990d05ff5828b0c99ca58a34"}], "stats": {"total": 187, "additions": 101, "deletions": 86}, "files": [{"sha": "eebdfdfd79aa20c65478cc6305aa4c4078b9d765", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -1,3 +1,12 @@\n+2012-09-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.h (enum vn_kind): New.\n+\t(vn_get_stmt_kind): Likewise.\n+\t* tree-ssa-sccvn.c (vn_get_stmt_kind): New function, adjust\n+\tADDR_EXPR handling.\n+\t(visit_use): Use it.\n+\t* tree-ssa-pre.c (compute_avail): Likewise, simplify further.\n+\n 2012-09-13  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \t* config/i386/i386.c (processor_alias_table): Enable PTA_PRFCHW"}, {"sha": "fa84318e73a5a88d1ca0ddc1e992e56c5799043c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -1,3 +1,7 @@\n+2012-09-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-37.c: New testcase.\n+\n 2012-09-13  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/builtin-bswap-1.c: New testcase."}, {"sha": "bd4c5ef8a28ea2ca4273944d08311b4c0f33ffe3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-37.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-37.c?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+int a[256];\n+int *b, *c;\n+void foo (int i, int j)\n+{\n+  b = &a[i+j];\n+  c = &a[i+j];\n+}\n+\n+/* We should remove the redundant address computation.  */\n+\n+/* { dg-final { scan-tree-dump-times \" = &a\" 1 \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "ab9f2f467c307a0036d0d959f3ff4c5adfa8ee8a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 9, "deletions": 51, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -3922,21 +3922,22 @@ compute_avail (void)\n \t      bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n \t    }\n \n-\t  if (gimple_has_side_effects (stmt) || stmt_could_throw_p (stmt))\n+\t  if (gimple_has_side_effects (stmt)\n+\t      || stmt_could_throw_p (stmt)\n+\t      || is_gimple_debug (stmt))\n \t    continue;\n \n+\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n+\t    add_to_exp_gen (block, op);\n+\n \t  switch (gimple_code (stmt))\n \t    {\n \t    case GIMPLE_RETURN:\n-\t      FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n-\t\tadd_to_exp_gen (block, op);\n \t      continue;\n \n \t    case GIMPLE_CALL:\n \t      {\n \t\tvn_reference_t ref;\n-\t\tunsigned int i;\n-\t\tvn_reference_op_t vro;\n \t\tpre_expr result = NULL;\n \t\tVEC(vn_reference_op_s, heap) *ops = NULL;\n \n@@ -3952,18 +3953,6 @@ compute_avail (void)\n \t\tif (!ref)\n \t\t  continue;\n \n-\t\tfor (i = 0; VEC_iterate (vn_reference_op_s,\n-\t\t\t\t\t ref->operands, i,\n-\t\t\t\t\t vro); i++)\n-\t\t  {\n-\t\t    if (vro->op0 && TREE_CODE (vro->op0) == SSA_NAME)\n-\t\t      add_to_exp_gen (block, vro->op0);\n-\t\t    if (vro->op1 && TREE_CODE (vro->op1) == SSA_NAME)\n-\t\t      add_to_exp_gen (block, vro->op1);\n-\t\t    if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n-\t\t      add_to_exp_gen (block, vro->op2);\n-\t\t  }\n-\n \t\t/* If the value of the call is not invalidated in\n \t\t   this block until it is computed, add the expression\n \t\t   to EXP_GEN.  */\n@@ -3988,28 +3977,19 @@ compute_avail (void)\n \t    case GIMPLE_ASSIGN:\n \t      {\n \t\tpre_expr result = NULL;\n-\t\tswitch (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)))\n+\t\tswitch (vn_get_stmt_kind (stmt))\n \t\t  {\n-\t\t  case tcc_unary:\n-\t\t  case tcc_binary:\n-\t\t  case tcc_comparison:\n+\t\t  case VN_NARY:\n \t\t    {\n \t\t      vn_nary_op_t nary;\n-\t\t      unsigned int i;\n-\n \t\t      vn_nary_op_lookup_pieces (gimple_num_ops (stmt) - 1,\n \t\t\t\t\t\tgimple_assign_rhs_code (stmt),\n \t\t\t\t\t\tgimple_expr_type (stmt),\n \t\t\t\t\t\tgimple_assign_rhs1_ptr (stmt),\n \t\t\t\t\t\t&nary);\n-\n \t\t      if (!nary)\n \t\t\tcontinue;\n \n-\t\t      for (i = 0; i < nary->length; i++)\n-\t\t\tif (TREE_CODE (nary->op[i]) == SSA_NAME)\n-\t\t\t  add_to_exp_gen (block, nary->op[i]);\n-\n \t\t      /* If the NARY traps and there was a preceding\n \t\t         point in the block that might not return avoid\n \t\t\t adding the nary to EXP_GEN.  */\n@@ -4024,31 +4004,15 @@ compute_avail (void)\n \t\t      break;\n \t\t    }\n \n-\t\t  case tcc_declaration:\n-\t\t  case tcc_reference:\n+\t\t  case VN_REFERENCE:\n \t\t    {\n \t\t      vn_reference_t ref;\n-\t\t      unsigned int i;\n-\t\t      vn_reference_op_t vro;\n-\n \t\t      vn_reference_lookup (gimple_assign_rhs1 (stmt),\n \t\t\t\t\t   gimple_vuse (stmt),\n \t\t\t\t\t   VN_WALK, &ref);\n \t\t      if (!ref)\n \t\t\tcontinue;\n \n-\t\t      for (i = 0; VEC_iterate (vn_reference_op_s,\n-\t\t\t\t\t       ref->operands, i,\n-\t\t\t\t\t       vro); i++)\n-\t\t\t{\n-\t\t\t  if (vro->op0 && TREE_CODE (vro->op0) == SSA_NAME)\n-\t\t\t    add_to_exp_gen (block, vro->op0);\n-\t\t\t  if (vro->op1 && TREE_CODE (vro->op1) == SSA_NAME)\n-\t\t\t    add_to_exp_gen (block, vro->op1);\n-\t\t\t  if (vro->op2 && TREE_CODE (vro->op2) == SSA_NAME)\n-\t\t\t    add_to_exp_gen (block, vro->op2);\n-\t\t\t}\n-\n \t\t      /* If the value of the reference is not invalidated in\n \t\t\t this block until it is computed, add the expression\n \t\t\t to EXP_GEN.  */\n@@ -4082,18 +4046,12 @@ compute_avail (void)\n \t\t    }\n \n \t\t  default:\n-\t\t    /* For any other statement that we don't\n-\t\t       recognize, simply add all referenced\n-\t\t       SSA_NAMEs to EXP_GEN.  */\n-\t\t    FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n-\t\t      add_to_exp_gen (block, op);\n \t\t    continue;\n \t\t  }\n \n \t\tget_or_alloc_expression_id (result);\n \t\tadd_to_value (get_expr_value_id (result), result);\n \t\tbitmap_value_insert_into_set (EXP_GEN (block), result);\n-\n \t\tcontinue;\n \t      }\n \t    default:"}, {"sha": "2e5ed741a02d236ee0a7ac9e95bb70fc6d190f67", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 61, "deletions": 35, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -287,6 +287,63 @@ vn_get_expr_for (tree name)\n   return expr;\n }\n \n+/* Return the vn_kind the expression computed by the stmt should be\n+   associated with.  */\n+\n+enum vn_kind\n+vn_get_stmt_kind (gimple stmt)\n+{\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_CALL:\n+      return VN_REFERENCE;\n+    case GIMPLE_PHI:\n+      return VN_PHI;\n+    case GIMPLE_ASSIGN:\n+      {\n+\tenum tree_code code = gimple_assign_rhs_code (stmt);\n+\ttree rhs1 = gimple_assign_rhs1 (stmt);\n+\tswitch (get_gimple_rhs_class (code))\n+\t  {\n+\t  case GIMPLE_UNARY_RHS:\n+\t  case GIMPLE_BINARY_RHS:\n+\t  case GIMPLE_TERNARY_RHS:\n+\t    return VN_NARY;\n+\t  case GIMPLE_SINGLE_RHS:\n+\t    switch (TREE_CODE_CLASS (code))\n+\t      {\n+\t      case tcc_reference:\n+\t\t/* VOP-less references can go through unary case.  */\n+\t\tif ((code == REALPART_EXPR\n+\t\t     || code == IMAGPART_EXPR\n+\t\t     || code == VIEW_CONVERT_EXPR\n+\t\t     || code == BIT_FIELD_REF)\n+\t\t    && TREE_CODE (TREE_OPERAND (rhs1, 0)) == SSA_NAME)\n+\t\t  return VN_NARY;\n+\n+\t\t/* Fallthrough.  */\n+\t      case tcc_declaration:\n+\t\treturn VN_REFERENCE;\n+\n+\t      case tcc_constant:\n+\t\treturn VN_CONSTANT;\n+\n+\t      default:\n+\t\tif (code == ADDR_EXPR)\n+\t\t  return (is_gimple_min_invariant (rhs1)\n+\t\t\t  ? VN_CONSTANT : VN_REFERENCE);\n+\t\telse if (code == CONSTRUCTOR)\n+\t\t  return VN_NARY;\n+\t\treturn VN_NONE;\n+\t      }\n+\t  default:\n+\t    return VN_NONE;\n+\t  }\n+      }\n+    default:\n+      return VN_NONE;\n+    }\n+}\n \n /* Free a phi operation structure VP.  */\n \n@@ -3364,44 +3421,13 @@ visit_use (tree use)\n \t\t}\n \t      else\n \t\t{\n-\t\t  switch (get_gimple_rhs_class (code))\n+\t\t  switch (vn_get_stmt_kind (stmt))\n \t\t    {\n-\t\t    case GIMPLE_UNARY_RHS:\n-\t\t    case GIMPLE_BINARY_RHS:\n-\t\t    case GIMPLE_TERNARY_RHS:\n+\t\t    case VN_NARY:\n \t\t      changed = visit_nary_op (lhs, stmt);\n \t\t      break;\n-\t\t    case GIMPLE_SINGLE_RHS:\n-\t\t      switch (TREE_CODE_CLASS (code))\n-\t\t\t{\n-\t\t\tcase tcc_reference:\n-\t\t\t  /* VOP-less references can go through unary case.  */\n-\t\t\t  if ((code == REALPART_EXPR\n-\t\t\t       || code == IMAGPART_EXPR\n-\t\t\t       || code == VIEW_CONVERT_EXPR\n-\t\t\t       || code == BIT_FIELD_REF)\n-\t\t\t      && TREE_CODE (TREE_OPERAND (rhs1, 0)) == SSA_NAME)\n-\t\t\t    {\n-\t\t\t      changed = visit_nary_op (lhs, stmt);\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t  /* Fallthrough.  */\n-\t\t\tcase tcc_declaration:\n-\t\t\t  changed = visit_reference_op_load (lhs, rhs1, stmt);\n-\t\t\t  break;\n-\t\t\tdefault:\n-\t\t\t  if (code == ADDR_EXPR)\n-\t\t\t    {\n-\t\t\t      changed = visit_nary_op (lhs, stmt);\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t  else if (code == CONSTRUCTOR)\n-\t\t\t    {\n-\t\t\t      changed = visit_nary_op (lhs, stmt);\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t  changed = defs_to_varying (stmt);\n-\t\t\t}\n+\t\t    case VN_REFERENCE:\n+\t\t      changed = visit_reference_op_load (lhs, rhs1, stmt);\n \t\t      break;\n \t\t    default:\n \t\t      changed = defs_to_varying (stmt);"}, {"sha": "956bde22da11cf496405b3cf03dcdcc3eed4b885", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17742d62a2438144b6235b8f29141ec931c3bf96/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=17742d62a2438144b6235b8f29141ec931c3bf96", "patch": "@@ -121,6 +121,9 @@ typedef struct vn_constant_s\n   tree constant;\n } *vn_constant_t;\n \n+enum vn_kind { VN_NONE, VN_CONSTANT, VN_NARY, VN_REFERENCE, VN_PHI };\n+enum vn_kind vn_get_stmt_kind (gimple);\n+\n /* Hash the constant CONSTANT with distinguishing type incompatible\n    constants in the types_compatible_p sense.  */\n "}]}