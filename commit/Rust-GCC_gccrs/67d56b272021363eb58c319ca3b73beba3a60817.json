{"sha": "67d56b272021363eb58c319ca3b73beba3a60817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkNTZiMjcyMDIxMzYzZWI1OGMzMTljYTNiNzNiZWJhM2E2MDgxNw==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-04-08T08:36:57Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-04-08T08:36:57Z"}, "message": "arm: Various MVE vec_duplicate fixes [PR99647]\n\nThis patch fixes various issues with vec_duplicate in the MVE patterns.\nCurrently there are two patterns named *mve_mov<mode>. The second of\nthese is really a vector duplicate rather than a move, so I've renamed\nit accordingly.\n\nAs it stands, there are several issues with this pattern:\n1. The MVE_types iterator has an entry for TImode, but\n   vec_duplicate:TI is invalid.\n2. The mode of the operand to vec_duplicate is SImode, but it should\n   vary according to the vector mode iterator.\n3. The second alternative of this pattern is bogus: it allows matching\n   symbol_refs (the cause of the PR) and const_ints (which means that it\n   matches (vec_duplicate (const_int ...)) which is non-canonical: such\n   rtxes should be const_vectors instead and handled by the main vector\n   move pattern).\n\nThis patch fixes all of these issues, and removes the redundant\n*mve_vec_duplicate<mode> pattern.\n\ngcc/ChangeLog:\n\n\tPR target/99647\n\t* config/arm/iterators.md (MVE_vecs): New.\n\t(V_elem): Also handle V2DF.\n\t* config/arm/mve.md (*mve_mov<mode>): Rename to ...\n\t(*mve_vdup<mode>): ... this. Remove second alternative since\n\tvec_duplicate of const_int is not canonical RTL, and we don't\n\twant to match symbol_refs.\n\t(*mve_vec_duplicate<mode>): Delete (pattern is redundant).\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99647\n\t* gcc.c-torture/compile/pr99647.c: New test.", "tree": {"sha": "690e97169ee436000563e21a2aead974cf6e3657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/690e97169ee436000563e21a2aead974cf6e3657"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67d56b272021363eb58c319ca3b73beba3a60817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d56b272021363eb58c319ca3b73beba3a60817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67d56b272021363eb58c319ca3b73beba3a60817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d56b272021363eb58c319ca3b73beba3a60817/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb21ba79919b3c0ff30484546f48074899a3305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb21ba79919b3c0ff30484546f48074899a3305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb21ba79919b3c0ff30484546f48074899a3305"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "8fb723e65cd75970b1ba60385bdc4168ee8ea397", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=67d56b272021363eb58c319ca3b73beba3a60817", "patch": "@@ -261,6 +261,7 @@\n \n ;; MVE mode iterator.\n (define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n+(define_mode_iterator MVE_vecs [V16QI V8HI V4SI V2DI V8HF V4SF V2DF])\n (define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n (define_mode_iterator MVE_0 [V8HF V4SF])\n (define_mode_iterator MVE_1 [V16QI V8HI V4SI V2DI])\n@@ -567,9 +568,10 @@\n \t\t\t  (V4HI \"HI\") (V8HI \"HI\")\n \t\t\t  (V4HF \"HF\") (V8HF \"HF\")\n \t\t\t  (V4BF \"BF\") (V8BF \"BF\")\n-                          (V2SI \"SI\") (V4SI \"SI\")\n-                          (V2SF \"SF\") (V4SF \"SF\")\n-                          (DI \"DI\")   (V2DI \"DI\")])\n+\t\t\t  (V2SI \"SI\") (V4SI \"SI\")\n+\t\t\t  (V2SF \"SF\") (V4SF \"SF\")\n+\t\t\t  (DI   \"DI\") (V2DI \"DI\")\n+\t\t\t  (V2DF \"DF\")])\n \n ;; As above but in lower case.\n (define_mode_attr V_elem_l [(V8QI \"qi\") (V16QI \"qi\")"}, {"sha": "7467d5f4d573498fe228f7002e9c50af92fbb18c", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=67d56b272021363eb58c319ca3b73beba3a60817", "patch": "@@ -104,18 +104,14 @@\n    (set_attr \"thumb2_pool_range\" \"*,*,*,*,1018,*,*,*,*\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,996,*,*,*,*\")])\n \n-(define_insn \"*mve_mov<mode>\"\n-  [(set (match_operand:MVE_types 0 \"s_register_operand\" \"=w,w\")\n-\t(vec_duplicate:MVE_types\n-\t  (match_operand:SI 1 \"nonmemory_operand\" \"r,i\")))]\n+(define_insn \"*mve_vdup<mode>\"\n+  [(set (match_operand:MVE_vecs 0 \"s_register_operand\" \"=w\")\n+\t(vec_duplicate:MVE_vecs\n+\t  (match_operand:<V_elem> 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n-{\n-  if (which_alternative == 0)\n-    return \"vdup.<V_sz_elem>\\t%q0, %1\";\n-  return \"vmov.<V_sz_elem>\\t%q0, %1\";\n-}\n-  [(set_attr \"length\" \"4,4\")\n-   (set_attr \"type\" \"mve_move,mve_move\")])\n+  \"vdup.<V_sz_elem>\\t%q0, %1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"mve_move\")])\n \n ;;\n ;; [vst4q])\n@@ -10737,13 +10733,6 @@\n  [(set_attr \"type\" \"mve_move\")\n   (set_attr \"length\" \"8\")])\n \n-(define_insn \"*mve_vec_duplicate<mode>\"\n- [(set (match_operand:MVE_VLD_ST 0 \"s_register_operand\" \"=w\")\n-       (vec_duplicate:MVE_VLD_ST (match_operand:<V_elem> 1 \"general_operand\" \"r\")))]\n- \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n- \"vdup.<V_sz_elem>\\t%q0, %1\"\n- [(set_attr \"type\" \"mve_move\")])\n-\n ;; CDE instructions on MVE registers.\n \n (define_insn \"arm_vcx1qv16qi\""}, {"sha": "701155dd8565c2d79441ccb974795d8de25ea4a4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr99647.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99647.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67d56b272021363eb58c319ca3b73beba3a60817/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99647.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99647.c?ref=67d56b272021363eb58c319ca3b73beba3a60817", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do assemble } */\n+typedef int __attribute((vector_size(16))) V;\n+V f(void) {\n+  return (V){ (int)f, (int)f, (int)f, (int)f };\n+}"}]}