{"sha": "7d25ac209de8262e39e5551585da5094a4c5c317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyNWFjMjA5ZGU4MjYyZTM5ZTU1NTE1ODVkYTUwOTRhNGM1YzMxNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-27T08:49:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-27T08:49:16Z"}, "message": "re PR tree-optimization/81555 (Wrong code at -O1)\n\n\tPR tree-optimization/81555\n\tPR tree-optimization/81556\n\t* tree-ssa-reassoc.c (rewrite_expr_tree): Add NEXT_CHANGED argument,\n\tif true, force CHANGED for the recursive invocation.\n\t(reassociate_bb): Remember original length of ops array, pass\n\tlen != orig_len as NEXT_CHANGED in rewrite_expr_tree call.\n\n\t* gcc.c-torture/execute/pr81555.c: New test.\n\t* gcc.c-torture/execute/pr81556.c: New test.\n\nFrom-SVN: r250609", "tree": {"sha": "59aeb2fb78941197a712558842d5f67b1da78303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59aeb2fb78941197a712558842d5f67b1da78303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d25ac209de8262e39e5551585da5094a4c5c317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d25ac209de8262e39e5551585da5094a4c5c317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d25ac209de8262e39e5551585da5094a4c5c317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d25ac209de8262e39e5551585da5094a4c5c317/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036ea39917b0ef6f07a7c3c3c06002c73fd238f5"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "345034d1e1b3c8a77e5f11b52b4058a8f22ecf22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d25ac209de8262e39e5551585da5094a4c5c317", "patch": "@@ -1,5 +1,12 @@\n 2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/81555\n+\tPR tree-optimization/81556\n+\t* tree-ssa-reassoc.c (rewrite_expr_tree): Add NEXT_CHANGED argument,\n+\tif true, force CHANGED for the recursive invocation.\n+\t(reassociate_bb): Remember original length of ops array, pass\n+\tlen != orig_len as NEXT_CHANGED in rewrite_expr_tree call.\n+\n \t* attribs.c (decl_attributes): Imply noinline, noclone and no_icf\n \tattributes for noipa attribute.  For naked attribute use\n \tlookup_attribute first before lookup_attribute_spec."}, {"sha": "fd606e03c529eaad73408575c1fa60b27494ad1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d25ac209de8262e39e5551585da5094a4c5c317", "patch": "@@ -1,5 +1,10 @@\n 2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/81555\n+\tPR tree-optimization/81556\n+\t* gcc.c-torture/execute/pr81555.c: New test.\n+\t* gcc.c-torture/execute/pr81556.c: New test.\n+\n \t* gcc.dg/attr-noipa.c: New test.\n \t* gcc.dg/ipa/ipa-pta-18.c: New test.\n \t* gcc.dg/ipa/ipa-sra-11.c: New test."}, {"sha": "d546368a39b53cf3a03c638bf8ff5f8a656335cd", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81555.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81555.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81555.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81555.c?ref=7d25ac209de8262e39e5551585da5094a4c5c317", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/81555 */\n+\n+unsigned int a = 1, d = 0xfaeU, e = 0xe376U;\n+_Bool b = 0, f = 1;\n+unsigned char g = 1;\n+\n+void\n+foo (void)\n+{\n+  _Bool c = a != b;\n+  if (c)\n+    f = 0;\n+  if (e & c & (unsigned char)d & c)\n+    g = 0;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  if (f || g != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "cfbc75f861a51279ad20c87aaefa5a33125e665c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81556.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81556.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81556.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81556.c?ref=7d25ac209de8262e39e5551585da5094a4c5c317", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/81556 */\n+\n+unsigned long long int b = 0xb82ff73c5c020599ULL;\n+unsigned long long int c = 0xd4e8188733a29d8eULL;\n+unsigned long long int d = 2, f = 1, g = 0, h = 0;\n+unsigned long long int e = 0xf27771784749f32bULL;\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  _Bool a = d > 1;\n+  g = f % ((d > 1) << 9);\n+  h = a & (e & (a & b & c));\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  if (g != 1 || h != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7c3007f853a154100934f6e6ff26398358568dc3", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d25ac209de8262e39e5551585da5094a4c5c317/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=7d25ac209de8262e39e5551585da5094a4c5c317", "patch": "@@ -4205,11 +4205,15 @@ insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n \n /* Recursively rewrite our linearized statements so that the operators\n    match those in OPS[OPINDEX], putting the computation in rank\n-   order.  Return new lhs.  */\n+   order.  Return new lhs.\n+   CHANGED is true if we shouldn't reuse the lhs SSA_NAME both in\n+   the current stmt and during recursive invocations.\n+   NEXT_CHANGED is true if we shouldn't reuse the lhs SSA_NAME in\n+   recursive invocations.  */\n \n static tree\n rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n-\t\t   vec<operand_entry *> ops, bool changed)\n+\t\t   vec<operand_entry *> ops, bool changed, bool next_changed)\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n@@ -4300,7 +4304,8 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n      be the non-leaf side.  */\n   tree new_rhs1\n     = rewrite_expr_tree (SSA_NAME_DEF_STMT (rhs1), opindex + 1, ops,\n-\t\t\t changed || oe->op != rhs2);\n+\t\t\t changed || oe->op != rhs2 || next_changed,\n+\t\t\t false);\n \n   if (oe->op != rhs2 || new_rhs1 != rhs1)\n     {\n@@ -5654,6 +5659,7 @@ reassociate_bb (basic_block bb)\n \t      gimple_set_visited (stmt, true);\n \t      linearize_expr_tree (&ops, stmt, true, true);\n \t      ops.qsort (sort_by_operand_rank);\n+\t      int orig_len = ops.length ();\n \t      optimize_ops_list (rhs_code, &ops);\n \t      if (undistribute_ops_list (rhs_code, &ops,\n \t\t\t\t\t loop_containing_stmt (stmt)))\n@@ -5744,7 +5750,8 @@ reassociate_bb (basic_block bb)\n \n \t\t      new_lhs = rewrite_expr_tree (stmt, 0, ops,\n \t\t\t\t\t\t   powi_result != NULL\n-\t\t\t\t\t\t   || negate_result);\n+\t\t\t\t\t\t   || negate_result,\n+\t\t\t\t\t\t   len != orig_len);\n                     }\n \n \t\t  /* If we combined some repeated factors into a "}]}