{"sha": "49ab46214e9288ee1268f87ddcd64dacfd21c31d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlhYjQ2MjE0ZTkyODhlZTEyNjhmODdkZGNkNjRkYWNmZDIxYzMxZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-03T11:01:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-03T11:01:06Z"}, "message": "tree-vect-data-refs.c (vect_enhance_data_refs_alignment): When all DRs have unknown misaligned do not always peel when...\n\n2017-05-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n\tWhen all DRs have unknown misaligned do not always peel\n\twhen there is a store but apply the same costing model as if\n\tthere were only loads.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-alignpeel.c: New testcase.\n\nFrom-SVN: r247544", "tree": {"sha": "49ac386194b21f2505e28121e490f1735948196b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ac386194b21f2505e28121e490f1735948196b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ab46214e9288ee1268f87ddcd64dacfd21c31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ab46214e9288ee1268f87ddcd64dacfd21c31d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ab46214e9288ee1268f87ddcd64dacfd21c31d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ab46214e9288ee1268f87ddcd64dacfd21c31d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d5f521a5c09313c5c01005a69440f21bc80bc97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5f521a5c09313c5c01005a69440f21bc80bc97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5f521a5c09313c5c01005a69440f21bc80bc97"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "0c54109a5f28e6ff33f772b786b8cbcf114f3e09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49ab46214e9288ee1268f87ddcd64dacfd21c31d", "patch": "@@ -1,3 +1,10 @@\n+2017-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tWhen all DRs have unknown misaligned do not always peel\n+\twhen there is a store but apply the same costing model as if\n+\tthere were only loads.\n+\n 2017-05-03  Richard Biener  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "2d4d8e0de582b815a8575cd6f25d4a5b20c931c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49ab46214e9288ee1268f87ddcd64dacfd21c31d", "patch": "@@ -1,3 +1,7 @@\n+2017-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-alignpeel.c: New testcase.\n+\n 2017-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79472"}, {"sha": "9e20b4a72c91b48db58cdd0e7a353a48c2dd432a", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-alignpeel.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-alignpeel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-alignpeel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-alignpeel.c?ref=49ab46214e9288ee1268f87ddcd64dacfd21c31d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void func(double * __restrict__ v1, double * v2, unsigned n)\n+{\n+  for (unsigned i = 0; i < n; ++i)\n+    v1[i] = v2[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Alignment of access forced using peeling\" \"vect\" } } */"}, {"sha": "c97426882e82ffa11abdb900fe2c26f45373a3bf", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ab46214e9288ee1268f87ddcd64dacfd21c31d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=49ab46214e9288ee1268f87ddcd64dacfd21c31d", "patch": "@@ -1715,18 +1715,18 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n             dr0 = first_store;\n         }\n \n-      /* In case there are only loads with different unknown misalignments, use\n-         peeling only if it may help to align other accesses in the loop or\n+      /* Use peeling only if it may help to align other accesses in the loop or\n \t if it may help improving load bandwith when we'd end up using\n \t unaligned loads.  */\n       tree dr0_vt = STMT_VINFO_VECTYPE (vinfo_for_stmt (DR_STMT (dr0)));\n-      if (!first_store\n-\t  && !STMT_VINFO_SAME_ALIGN_REFS (\n-\t\t  vinfo_for_stmt (DR_STMT (dr0))).length ()\n+      if (STMT_VINFO_SAME_ALIGN_REFS\n+\t    (vinfo_for_stmt (DR_STMT (dr0))).length () == 0\n \t  && (vect_supportable_dr_alignment (dr0, false)\n \t      != dr_unaligned_supported\n-\t      || (builtin_vectorization_cost (vector_load, dr0_vt, 0)\n-\t\t  == builtin_vectorization_cost (unaligned_load, dr0_vt, -1))))\n+\t      || (DR_IS_READ (dr0)\n+\t\t  && (builtin_vectorization_cost (vector_load, dr0_vt, 0)\n+\t\t      == builtin_vectorization_cost (unaligned_load,\n+\t\t\t\t\t\t     dr0_vt, -1)))))\n         do_peeling = false;\n     }\n "}]}