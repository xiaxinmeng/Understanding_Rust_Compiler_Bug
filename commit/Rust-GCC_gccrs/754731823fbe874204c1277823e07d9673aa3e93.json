{"sha": "754731823fbe874204c1277823e07d9673aa3e93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0NzMxODIzZmJlODc0MjA0YzEyNzc4MjNlMDdkOTY3M2FhM2U5Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-16T18:14:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-16T18:14:50Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r997", "tree": {"sha": "3d74a14f3ffe9bf80130750a97500cc75ac4d5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d74a14f3ffe9bf80130750a97500cc75ac4d5c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754731823fbe874204c1277823e07d9673aa3e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754731823fbe874204c1277823e07d9673aa3e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754731823fbe874204c1277823e07d9673aa3e93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754731823fbe874204c1277823e07d9673aa3e93/comments", "author": null, "committer": null, "parents": [{"sha": "ea9c2c2af59ebaa85d902112ab7f082ecdfbacd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9c2c2af59ebaa85d902112ab7f082ecdfbacd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9c2c2af59ebaa85d902112ab7f082ecdfbacd3"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "044a4137bc36bcdf159d246ba96f43865aa004bf", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754731823fbe874204c1277823e07d9673aa3e93/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754731823fbe874204c1277823e07d9673aa3e93/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=754731823fbe874204c1277823e07d9673aa3e93", "patch": "@@ -3687,11 +3687,16 @@ expand_compound_operation (x)\n     case ZERO_EXTEND:\n       unsignedp = 1;\n     case SIGN_EXTEND:\n-      /* If we somehow managed to end up with (sign/zero_extend (const_int x)),\n-\t just return the CONST_INT.  We can't know how much masking to do\n-\t in that case.  */\n+      /* We can't necessarily use a const_int for a multiword mode;\n+\t it depends on implicitly extending the value.\n+\t Since we don't know the right way to extend it,\n+\t we can't tell whether the implicit way is right.\n+\n+\t Even for a mode that is no wider than a const_int,\n+\t we can't win, because we need to sign extend one of its bits through\n+\t the rest of it, and we don't know which bit.  */\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n-\treturn XEXP (x, 0);\n+\treturn x;\n \n       if (! FAKE_EXTEND_SAFE_P (GET_MODE (XEXP (x, 0)), XEXP (x, 0)))\n \treturn x;"}]}