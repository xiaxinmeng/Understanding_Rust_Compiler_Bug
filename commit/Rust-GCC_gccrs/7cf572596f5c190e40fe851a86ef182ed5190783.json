{"sha": "7cf572596f5c190e40fe851a86ef182ed5190783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmNTcyNTk2ZjVjMTkwZTQwZmU4NTFhODZlZjE4MmVkNTE5MDc4Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-22T17:32:22Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-22T17:32:22Z"}, "message": "fold-const.c (fold_ternary): Take decomposed arguments of CALL_EXPR.\n\n\t* fold-const.c (fold_ternary): Take decomposed arguments of\n\tCALL_EXPR.\n\t(fold): Update a call to fold_ternary.\n\nFrom-SVN: r96880", "tree": {"sha": "fe92d085b133b02bee492ead26918022684d188e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe92d085b133b02bee492ead26918022684d188e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf572596f5c190e40fe851a86ef182ed5190783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf572596f5c190e40fe851a86ef182ed5190783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf572596f5c190e40fe851a86ef182ed5190783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf572596f5c190e40fe851a86ef182ed5190783/comments", "author": null, "committer": null, "parents": [{"sha": "4c8fa2e5ee9a69d122f1629b0a8f1f758b6d9b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8fa2e5ee9a69d122f1629b0a8f1f758b6d9b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8fa2e5ee9a69d122f1629b0a8f1f758b6d9b8a"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "ca33ce19b638a8cfd4f570cda14edc69c3950282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf572596f5c190e40fe851a86ef182ed5190783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf572596f5c190e40fe851a86ef182ed5190783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cf572596f5c190e40fe851a86ef182ed5190783", "patch": "@@ -1,3 +1,9 @@\n+2005-03-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold_ternary): Take decomposed arguments of\n+\tCALL_EXPR.\n+\t(fold): Update a call to fold_ternary.\n+\n 2005-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/20561"}, {"sha": "603deefef5280b2743bed083db59fd3daefd5d6d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf572596f5c190e40fe851a86ef182ed5190783/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf572596f5c190e40fe851a86ef182ed5190783/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7cf572596f5c190e40fe851a86ef182ed5190783", "patch": "@@ -9693,28 +9693,20 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n     } /* switch (code) */\n }\n \n-/* Fold a ternary expression EXPR.  Return the folded expression if\n-   folding is successful.  Otherwise, return the original\n-   expression.  */\n+/* Fold a ternary expression of code CODE and type TYPE with operands\n+   OP0, OP1, and OP2.  Return the folded expression if folding is\n+   successful.  Otherwise, return NULL_TREE.  */\n \n static tree\n-fold_ternary (tree expr)\n+fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n {\n-  const tree t = expr;\n-  const tree type = TREE_TYPE (expr);\n   tree tem;\n-  tree op0, op1, op2;\n   tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n-  enum tree_code code = TREE_CODE (t);\n   enum tree_code_class kind = TREE_CODE_CLASS (code);\n \n   gcc_assert (IS_EXPR_CODE_CLASS (kind)\n \t      && TREE_CODE_LENGTH (code) == 3);\n \n-  op0 = TREE_OPERAND (t, 0);\n-  op1 = TREE_OPERAND (t, 1);\n-  op2 = TREE_OPERAND (t, 2);\n-\n   /* Strip any conversions that don't change the mode.  This is safe\n      for every expression, except for a comparison expression because\n      its signedness is derived from its operands.  So, in the latter\n@@ -9909,8 +9901,8 @@ fold_ternary (tree expr)\n \t  && TREE_CODE (TREE_OPERAND (op0, 0)) == FUNCTION_DECL\n \t  && DECL_BUILT_IN (TREE_OPERAND (op0, 0)))\n \t{\n-\t  tree fndecl = get_callee_fndecl (t);\n-\t  tree arglist = TREE_OPERAND (t, 1);\n+\t  tree fndecl = TREE_OPERAND (op0, 0);\n+\t  tree arglist = op1;\n \t  tree tmp = fold_builtin (fndecl, arglist, false);\n \t  if (tmp)\n \t    return tmp;\n@@ -9950,7 +9942,7 @@ fold (tree expr)\n   if (IS_EXPR_CODE_CLASS (kind))\n     {\n       tree type = TREE_TYPE (t);\n-      tree op0, op1;\n+      tree op0, op1, op2;\n \n       switch (TREE_CODE_LENGTH (code))\n \t{\n@@ -9964,7 +9956,10 @@ fold (tree expr)\n \t  tem = fold_binary (code, type, op0, op1);\n \t  return tem ? tem : expr;\n \tcase 3:\n-\t  tem = fold_ternary (expr);\n+\t  op0 = TREE_OPERAND (t, 0);\n+\t  op1 = TREE_OPERAND (t, 1);\n+\t  op2 = TREE_OPERAND (t, 2);\n+\t  tem = fold_ternary (code, type, op0, op1, op2);\n \t  return tem ? tem : expr;\n \tdefault:\n \t  break;"}]}