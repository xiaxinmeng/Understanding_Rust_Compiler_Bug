{"sha": "272d0bee76458f8e27e670f68890d6156102a93f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyZDBiZWU3NjQ1OGY4ZTI3ZTY3MGY2ODg5MGQ2MTU2MTAyYTkzZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-19T05:18:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-19T05:18:13Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* ChangeLog.2: Likewise.\n\t* ChangeLog.4: Likewise.\n\t* ChangeLog.5: Likewise.\n\t* cppexp.c: Likewise.\n\t* df.c: Likewise.\n\t* gcov.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* reload1.c: Likewise.\n\t* sched-rgn.c: Likewise.\n\t* stmt.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* timevar.c: Likewise.\n\t* toplev.c: Likewise.\n\t* tree.h: Likewise.\n\t* varasm.c: Likewise.\n\t* config/fr30/fr30.md: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/pa/pa.c: Likewise.\n\nFrom-SVN: r60281", "tree": {"sha": "a88cdafc197ec6d583f826dadc58fdeaa0a67c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a88cdafc197ec6d583f826dadc58fdeaa0a67c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272d0bee76458f8e27e670f68890d6156102a93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272d0bee76458f8e27e670f68890d6156102a93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272d0bee76458f8e27e670f68890d6156102a93f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272d0bee76458f8e27e670f68890d6156102a93f/comments", "author": null, "committer": null, "parents": [{"sha": "358ecb103a6432ea4f6b8b6aeab74a4c483fb6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358ecb103a6432ea4f6b8b6aeab74a4c483fb6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/358ecb103a6432ea4f6b8b6aeab74a4c483fb6bc"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "e8b07d52e4d52492bb8e3dc1dacd6d61f31e1d23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -1,3 +1,26 @@\n+2002-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* ChangeLog.2: Likewise.\n+\t* ChangeLog.4: Likewise.\n+\t* ChangeLog.5: Likewise.\n+\t* cppexp.c: Likewise.\n+\t* df.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* sched-rgn.c: Likewise.\n+\t* stmt.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* timevar.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* tree.h: Likewise.\n+\t* varasm.c: Likewise.\n+\t* config/fr30/fr30.md: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\n 2002-12-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* basic-block.h (flow_bb_inside_loop_p): Correct prototype.\n@@ -3068,7 +3091,7 @@ Tue Oct 29 19:32:16 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t(sched_get_priority_max, sched_get_priority_min)\n \t(pthread_getschedparam, pthread_setschedparam): Only use\n \tif _POSIX_THREAD_PRIORITY_SCHEDULING is defined.\n-\t(__gthread_objc_thread_set_priority): Don't treat all non-zero\n+\t(__gthread_objc_thread_set_priority): Don't treat all nonzero\n \treturns from sched_get_priority_max and sched_get_priority_min\n \tas an error.\n \n@@ -5022,7 +5045,7 @@ Thu Oct  3 23:20:58 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t(multilib_os_dir): New variable.\n \t(static_specs): Add multilib_options.\n \t(find_a_file): Add multilib argument.  Search in GCC or OS multilib\n-\tsubdirs if non-zero.\n+\tsubdirs if nonzero.\n \t(read_specs, execute): Update callers.\n \t(find_file): Likewise.  Don't prefix name with multilib_dir, instead\n \tpass 1 as multilib option."}, {"sha": "7a624fb4930b3af58131eadc41b1786148214474", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -10855,7 +10855,7 @@ Fri Aug 13 15:20:43 1999  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n Fri Aug 13 10:21:28 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* toplev.c (rest_of_compilation): Allow machine dependent\n-\treorganisation pass to place information into the RTL dump\n+\treorganization pass to place information into the RTL dump\n \tfile if it so wishes.\n \n Sun Aug 15 12:41:21 1999  Jim Wilson  <wilson@cygnus.com>"}, {"sha": "25546c471dcc3a16c9dfcc4246bdea4c91f11dd9", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -14230,7 +14230,7 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t(cpp_pop_buffer): Use _cpp_pop_file_buffer.\n \n \t* cpplex.c: Move all prototypes and structure declarations to the\n-\ttop of the file.  Properly parenthesise some macro arguments.\n+\ttop of the file.  Properly parenthesize some macro arguments.\n \t(cpp_scan_line): New function.\n \t(special_symbol [case T_INCLUDE_DEPTH]): Use pfile->include_depth,\n \tdon't need to walk up the stack counting."}, {"sha": "e5c26cc1cd208c24111b92e6cead8f040538298c", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -3283,7 +3283,7 @@ Sat May 19 18:23:04 2001  Richard Henderson <rth@redhat.com>\n \t* c-parse.in (parm_declarator): Split into\n \tparm_declarator_starttypename and parm_declarator_nostarttypename.\n \t(parm_declarator_starttypename, parm_declarator_nostarttypename):\n-\tNew.  Allow parenthesised sub-declarators which don't begin with a\n+\tNew.  Allow parenthesized sub-declarators which don't begin with a\n \tTYPENAME.  Fixes PR c/166.\n \n 2001-05-19  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "8ba00cce8e90317575d9e17ce4aa826e37d77210", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -1166,7 +1166,7 @@\n ;; from pc + 2, we increase the offset to 258.\n ;;\n ;; Note - we do not have to worry about whether the branch is delayed or\n-;; not, as branch shortening happens after delay slot reorganisation.\n+;; not, as branch shortening happens after delay slot reorganization.\n \n (define_insn \"*branch_true\"\n   [(set (pc)"}, {"sha": "b12a7f2323b3998b271d3bc1b3909ce7c9973ed1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -14467,7 +14467,7 @@ x86_can_output_mi_thunk (thunk, delta, vcall_offset, function)\n /* Output the assembler code for a thunk function.  THUNK_DECL is the\n    declaration for the thunk function itself, FUNCTION is the decl for\n    the target function.  DELTA is an immediate constant offset to be\n-   added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+   added to THIS.  If VCALL_OFFSET is nonzero, the word at\n    *(*this + vcall_offset) should be added to THIS.  */\n \n static void"}, {"sha": "96e12b402fd2501a64393a8e5c260f64756a97a6", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -8223,7 +8223,7 @@ ia64_aix_select_rtx_section (mode, x, align)\n /* Output the assembler code for a thunk function.  THUNK_DECL is the\n    declaration for the thunk function itself, FUNCTION is the decl for\n    the target function.  DELTA is an immediate constant offset to be\n-   added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+   added to THIS.  If VCALL_OFFSET is nonzero, the word at\n    *(*this + vcall_offset) should be added to THIS.  */\n \n static void"}, {"sha": "7ba4f7bbcfa8f4480805a01b85483a9a46aa31b3", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -6223,7 +6223,7 @@ output_millicode_call (insn, call_dest)\n   /* Handle the common case where we are sure that the branch will\n      reach the beginning of the $CODE$ subspace.  The within reach\n      form of the $$sh_func_adrs call has a length of 28.  Because\n-     it has an attribute type of multi, it never has a non-zero\n+     it has an attribute type of multi, it never has a nonzero\n      sequence length.  The length of the $$sh_func_adrs is the same\n      as certain out of reach PIC calls to other routines.  */\n   if (!TARGET_LONG_CALLS"}, {"sha": "202b2d01a597c042ed3b6f4e893a84772e96b003", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -633,7 +633,7 @@ already on the stack.\n The remaining cases are '(' and ')'.  We handle '(' by skipping the\n reduction phase completely.  ')' is given lower priority than\n everything else, including '(', effectively forcing a reduction of the\n-parenthesised expression.  If there is a matching '(', the routine\n+parenthesized expression.  If there is a matching '(', the routine\n reduce() exits immediately.  If the normal exit route sees a ')', then\n there cannot have been a matching '(' and an error message is output.\n "}, {"sha": "40358de80aaff41ad7e5400d3db7f6b23a79ce0e", "filename": "gcc/df.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -148,10 +148,10 @@ Similarly, should the first entry in the use list be the last use\n \n 5) Working with a sub-CFG.\n \n-Often the whole CFG does not need to be analysed, for example,\n+Often the whole CFG does not need to be analyzed, for example,\n when optimising a loop, only certain registers are of interest.\n Perhaps there should be a bitmap argument to df_analyse to specify\n- which registers should be analysed?   */\n+ which registers should be analyzed?   */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -2317,7 +2317,7 @@ df_modified_p (df, blocks)\n }\n \n \n-/* Analyse dataflow info for the basic blocks specified by the bitmap\n+/* Analyze dataflow info for the basic blocks specified by the bitmap\n    BLOCKS, or for the whole CFG if BLOCKS is zero, or just for the\n    modified blocks if BLOCKS is -1.  */\n int"}, {"sha": "946a3a80a9331bb352542e7f9ddd01bb13217633", "filename": "gcc/gcov.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -597,7 +597,7 @@ create_file_names (file_name)\n   return;\n }\n \n-/* Read the graph file. Return non-zero on fatal error.  */\n+/* Read the graph file. Return nonzero on fatal error.  */\n \n static int\n read_graph_file ()\n@@ -851,7 +851,7 @@ read_graph_file ()\n }\n \n /* Reads profiles from the count file and attach to each\n-   function. Return non-zero if fatal error.  */\n+   function. Return nonzero if fatal error.  */\n \n static int\n read_count_file ()"}, {"sha": "855e5edfe960d0fb75c430c2e172fbe9e9a4f96b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -254,8 +254,8 @@ find_structure (name, isunion)\n   return s;\n }\n \n-/* Return the previously-defined parameterised structure for structure\n-   T and parameters PARAM, or a new parameterised empty structure or\n+/* Return the previously-defined parameterized structure for structure\n+   T and parameters PARAM, or a new parameterized empty structure or\n    union if none was defined previously.  */\n \n static type_p"}, {"sha": "8e09c101511657a0de5cbb5d4147e5189dfc6418", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -305,7 +305,7 @@ struct elim_table\n   int from;\t\t\t/* Register number to be eliminated.  */\n   int to;\t\t\t/* Register number used as replacement.  */\n   int initial_offset;\t\t/* Initial difference between values.  */\n-  int can_eliminate;\t\t/* Non-zero if this elimination can be done.  */\n+  int can_eliminate;\t\t/* Nonzero if this elimination can be done.  */\n   int can_eliminate_previous;\t/* Value of CAN_ELIMINATE in previous scan over\n \t\t\t\t   insns made by reload.  */\n   int offset;\t\t\t/* Current offset between the two regs.  */\n@@ -5935,7 +5935,7 @@ choose_reload_regs (chain)\n     if (reload_override_in[j])\n       rld[j].in = reload_override_in[j];\n \n-  /* If this reload won't be done because it has been cancelled or is\n+  /* If this reload won't be done because it has been canceled or is\n      optional and not inherited, clear reload_reg_rtx so other\n      routines (such as subst_reloads) don't get confused.  */\n   for (j = 0; j < n_reloads; j++)"}, {"sha": "38635522e475ec24a9a0a5f04d48a9166b8821fe", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -1560,14 +1560,14 @@ enum INSN_TRAP_CLASS\n #define WORST_CLASS(class1, class2) \\\n ((class1 > class2) ? class1 : class2)\n \n-/* Non-zero if block bb_to is equal to, or reachable from block bb_from.  */\n+/* Nonzero if block bb_to is equal to, or reachable from block bb_from.  */\n #define IS_REACHABLE(bb_from, bb_to)\t\t\t\t\t\\\n   (bb_from == bb_to\t\t\t\t\t\t\t\\\n    || IS_RGN_ENTRY (bb_from)\t\t\t\t\t\t\\\n    || (TEST_BIT (ancestor_edges[bb_to],\t\t\t\t\t\\\n \t\t EDGE_TO_BIT (IN_EDGES (BB_TO_BLOCK (bb_from))))))\n \n-/* Non-zero iff the address is comprised from at most 1 register.  */\n+/* Nonzero iff the address is comprised from at most 1 register.  */\n #define CONST_BASED_ADDRESS_P(x)\t\t\t\\\n   (GET_CODE (x) == REG\t\t\t\t\t\\\n    || ((GET_CODE (x) == PLUS || GET_CODE (x) == MINUS\t\\"}, {"sha": "af0028fe5f729a1a090d3263bed1c4b8117e1101", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -390,7 +390,7 @@ struct stmt_status GTY(())\n #define emit_lineno (cfun->stmt->x_emit_lineno)\n #define goto_fixup_chain (cfun->stmt->x_goto_fixup_chain)\n \n-/* Non-zero if we are using EH to handle cleanups.  */\n+/* Nonzero if we are using EH to handle cleanups.  */\n static int using_eh_for_cleanups_p = 0;\n \n static int n_occurrences\t\tPARAMS ((int, const char *));"}, {"sha": "0dd8fc61f1d484237a918ddef1c894a77523ff56", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -784,7 +784,7 @@ place_union_field (rli, field)\n }\n \n /* A bitfield of SIZE with a required access alignment of ALIGN is allocated\n-   at BYTE_OFFSET / BIT_OFFSET.  Return non-zero if the field would span more\n+   at BYTE_OFFSET / BIT_OFFSET.  Return nonzero if the field would span more\n    units of alignment than the underlying TYPE.  */\n static int\n excess_unit_span (byte_offset, bit_offset, size, align, type)"}, {"sha": "feee994220b55c96c5a8e8a9a4b63786585e2163", "filename": "gcc/timevar.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -133,11 +133,11 @@ struct timevar_def\n   /* The name of this timing variable.  */\n   const char *name;\n \n-  /* Non-zero if this timing variable is running as a standalone\n+  /* Nonzero if this timing variable is running as a standalone\n      timer.  */\n   unsigned standalone : 1;\n \n-  /* Non-zero if this timing variable was ever started or pushed onto\n+  /* Nonzero if this timing variable was ever started or pushed onto\n      the timing stack.  */\n   unsigned used : 1;\n };"}, {"sha": "6d1a30dd10155efdfa48c21178d8d64261b56c50", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -423,7 +423,7 @@ int time_report = 0;\n \n int mem_report = 0;\n \n-/* Non-zero means to collect statistics which might be expensive\n+/* Nonzero means to collect statistics which might be expensive\n    and to print them when we are done.  */\n int flag_detailed_statistics = 0;\n \n@@ -4105,7 +4105,7 @@ decode_g_option (arg)\n      selected type.  It is an error to specify more than one\n      debugging type.  */\n   static enum debug_info_type selected_debug_type = NO_DEBUG;\n-  /* Non-zero if debugging format has been explicitly set.\n+  /* Nonzero if debugging format has been explicitly set.\n      -g and -ggdb don't explicitly set the debugging format so\n      -gdwarf -g3 is equivalent to -gdwarf3.  */\n   static int type_explicitly_set_p = 0;"}, {"sha": "b5803e54bdc21635815e28a8f7093fc5c973a686", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -604,7 +604,7 @@ extern void tree_vec_elt_check_failed PARAMS ((int, int, const char *,\n    when the node is a type).  */\n #define TREE_READONLY(NODE) ((NODE)->common.readonly_flag)\n \n-/* Non-zero if NODE is a _DECL with TREE_READONLY set.  */\n+/* Nonzero if NODE is a _DECL with TREE_READONLY set.  */\n #define TREE_READONLY_DECL_P(NODE) (TREE_READONLY (NODE) && DECL_P (NODE))\n \n /* Value of expression is constant."}, {"sha": "b0d5f8372f941611ac17a0ae9eca9c3c50af1683", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272d0bee76458f8e27e670f68890d6156102a93f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=272d0bee76458f8e27e670f68890d6156102a93f", "patch": "@@ -4117,7 +4117,7 @@ output_constructor (exp, size, align)\n   /* Number of bytes output or skipped so far.\n      In other words, current position within the constructor.  */\n   HOST_WIDE_INT total_bytes = 0;\n-  /* Non-zero means BYTE contains part of a byte, to be output.  */\n+  /* Nonzero means BYTE contains part of a byte, to be output.  */\n   int byte_buffer_in_use = 0;\n   int byte = 0;\n "}]}