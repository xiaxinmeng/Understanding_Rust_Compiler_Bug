{"sha": "cb152d128b72427d76d40d5d69245638ef8494a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxNTJkMTI4YjcyNDI3ZDc2ZDQwZDVkNjkyNDU2MzhlZjg0OTRhOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T23:37:38Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T23:37:38Z"}, "message": "rs6000: Remove wp and wq\n\nwp becomes wa with isa p9tf, and wq is replaced by wa with isa p9kf.\nTo manage to do that, there is the new mode attribute VSisa.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wp\"):\n\tDelete.\n\t(define_register_constraint \"wq\"): Delete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wp and RS6000_CONSTRAINT_wq.\n\t* config/rs6000/vsx.md (define_mode_attr VSr3): Delete.\n\t(define_mode_attr VSa): Delete.\n\t(define_mode_attr VSisa): New.\n\t(rest of file): Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271939", "tree": {"sha": "52560044a82850bb63fb99a685b3c28eedb8c13d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52560044a82850bb63fb99a685b3c28eedb8c13d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb152d128b72427d76d40d5d69245638ef8494a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb152d128b72427d76d40d5d69245638ef8494a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb152d128b72427d76d40d5d69245638ef8494a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb152d128b72427d76d40d5d69245638ef8494a8/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e9449e69f797c4274f3463e1e10a1796a455e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9449e69f797c4274f3463e1e10a1796a455e42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9449e69f797c4274f3463e1e10a1796a455e42"}], "stats": {"total": 160, "additions": 72, "deletions": 88}, "files": [{"sha": "526ed45be89bbed502305bde3a5fbec4343f6884", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -1,3 +1,18 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wp\"):\n+\tDelete.\n+\t(define_register_constraint \"wq\"): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wp and RS6000_CONSTRAINT_wq.\n+\t* config/rs6000/vsx.md (define_mode_attr VSr3): Delete.\n+\t(define_mode_attr VSa): Delete.\n+\t(define_mode_attr VSisa): New.\n+\t(rest of file): Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (define_attr \"isa\"): Add p9kf and p9tf."}, {"sha": "f047742aaff34cac00cd6d5e39773bc36e587166", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -67,12 +67,6 @@\n ;; There is a mode_attr that resolves to wa for SDmode and wn for SFmode\n (define_register_constraint \"wn\" \"NO_REGS\" \"No register (NO_REGS).\")\n \n-(define_register_constraint \"wp\" \"rs6000_constraints[RS6000_CONSTRAINT_wp]\"\n-  \"VSX register to use for IEEE 128-bit fp TFmode, or NO_REGS.\")\n-\n-(define_register_constraint \"wq\" \"rs6000_constraints[RS6000_CONSTRAINT_wq]\"\n-  \"VSX register to use for IEEE 128-bit fp KFmode, or NO_REGS.\")\n-\n (define_register_constraint \"wr\" \"rs6000_constraints[RS6000_CONSTRAINT_wr]\"\n   \"General purpose register if 64-bit instructions are enabled or NO_REGS.\")\n "}, {"sha": "91fafc4e7664794052fb4adef8337eae2bb20440", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -2509,8 +2509,6 @@ rs6000_debug_reg_global (void)\n \t   \"v  reg_class = %s\\n\"\n \t   \"wa reg_class = %s\\n\"\n \t   \"we reg_class = %s\\n\"\n-\t   \"wp reg_class = %s\\n\"\n-\t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n@@ -2520,8 +2518,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_v]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wa]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]]);\n@@ -3159,13 +3155,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_STFIWX)\n     rs6000_constraints[RS6000_CONSTRAINT_wx] = FLOAT_REGS;\t/* DImode  */\n \n-  if (TARGET_FLOAT128_TYPE)\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_wq] = VSX_REGS;\t/* KFmode  */\n-      if (FLOAT128_IEEE_P (TFmode))\n-\trs6000_constraints[RS6000_CONSTRAINT_wp] = VSX_REGS;\t/* TFmode  */\n-    }\n-\n   /* Support for new direct moves (ISA 3.0 + 64bit).  */\n   if (TARGET_DIRECT_MOVE_128)\n     rs6000_constraints[RS6000_CONSTRAINT_we] = VSX_REGS;"}, {"sha": "9b2f0d88d7103450ff2a6ad0f554373e1c54625f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -1257,8 +1257,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_v,\t\t/* Altivec registers */\n   RS6000_CONSTRAINT_wa,\t\t/* Any VSX register */\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n-  RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n-  RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */"}, {"sha": "f04b5fc1497ddf1e6031e94ee747bcea655f16e4", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 55, "deletions": 60, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -103,37 +103,25 @@\n \t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"wa\")\n-\t\t\t (TF\t\"wp\")\n-\t\t\t (KF\t\"wq\")\n+\t\t\t (TF\t\"wa\")\n+\t\t\t (KF\t\"wa\")\n \t\t\t (V1TI  \"v\")\n \t\t\t (TI    \"wa\")])\n \n-;; Map the register class used for float<->int conversions (floating point side)\n-;; VSr3 is any register class that will hold the data\n-(define_mode_attr VSr3\t[(V2DF  \"wa\")\n-\t\t\t (V4SF  \"wa\")\n-\t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"wa\")\n-\t\t\t (DI\t\"wa\")\n-\t\t\t (KF\t\"wq\")\n-\t\t\t (TF\t\"wp\")])\n-\n-;; The VSX register class that a type can occupy, even if it is not the\n-;; preferred register class (VSr is the preferred register class that will get\n-;; allocated first).\n-(define_mode_attr VSa\t[(V16QI \"wa\")\n-\t\t\t (V8HI  \"wa\")\n-\t\t\t (V4SI  \"wa\")\n-\t\t\t (V4SF  \"wa\")\n-\t\t\t (V2DI  \"wa\")\n-\t\t\t (V2DF  \"wa\")\n-\t\t\t (DI\t\"wa\")\n-\t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"wa\")\n-\t\t\t (V1TI\t\"wa\")\n-\t\t\t (TI    \"wa\")\n-\t\t\t (TF\t\"wp\")\n-\t\t\t (KF\t\"wq\")])\n+;; What value we need in the \"isa\" field, to make the IEEE QP float work.\n+(define_mode_attr VSisa\t[(V16QI \"*\")\n+\t\t\t (V8HI  \"*\")\n+\t\t\t (V4SI  \"*\")\n+\t\t\t (V4SF  \"*\")\n+\t\t\t (V2DI  \"*\")\n+\t\t\t (V2DF  \"*\")\n+\t\t\t (DI\t\"*\")\n+\t\t\t (DF    \"*\")\n+\t\t\t (SF\t\"*\")\n+\t\t\t (V1TI\t\"*\")\n+\t\t\t (TI    \"*\")\n+\t\t\t (TF\t\"p9tf\")\n+\t\t\t (KF\t\"p9kf\")])\n \n ;; A mode attribute to disparage use of GPR registers, except for scalar\n ;; integer modes.\n@@ -962,7 +950,7 @@\n    (set_attr \"type\" \"veclogical\")])\n \n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n-  [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=<VSa>,r\")\n+  [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=wa,r\")\n         (match_operand:VSX_LE_128 1 \"memory_operand\" \"Z,Q\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"@\n@@ -979,17 +967,19 @@\n   DONE;\n }\n   [(set_attr \"type\" \"vecload,load\")\n-   (set_attr \"length\" \"8,8\")])\n+   (set_attr \"length\" \"8,8\")\n+   (set_attr \"isa\" \"<VSisa>,*\")])\n \n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"=Z,Q\")\n-        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+<VSa>,r\"))]\n+        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+wa,r\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"@\n    #\n    #\"\n   [(set_attr \"type\" \"vecstore,store\")\n-   (set_attr \"length\" \"12,8\")])\n+   (set_attr \"length\" \"12,8\")\n+   (set_attr \"isa\" \"<VSisa>,*\")])\n \n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\")\n@@ -1140,12 +1130,12 @@\n ;;              VSX 0/-1   VMX const  GPR const LVX (VMX)  STVX (VMX)\n (define_insn \"vsx_mov<mode>_64bit\"\n   [(set (match_operand:VSX_M 0 \"nonimmediate_operand\"\n-               \"=ZwO,      <VSa>,     <VSa>,     r,         we,        ?wQ,\n+               \"=ZwO,      wa,        wa,        r,         we,        ?wQ,\n                 ?&r,       ??r,       ??Y,       <??r>,     wa,        v,\n-                ?<VSa>,    v,         <??r>,     wZ,        v\")\n+                ?wa,       v,         <??r>,     wZ,        v\")\n \n \t(match_operand:VSX_M 1 \"input_operand\" \n-               \"<VSa>,     ZwO,       <VSa>,     we,        r,         r,\n+               \"wa,        ZwO,       wa,        we,        r,         r,\n                 wQ,        Y,         r,         r,         wE,        jwM,\n                 ?jwM,      W,         <nW>,      v,         wZ\"))]\n \n@@ -1164,21 +1154,21 @@\n                 8,         8,         8,         8,         4,         4,\n                 4,         20,        8,         4,         4\")\n    (set_attr \"isa\"\n-               \"*,         *,         *,         *,         *,         *,\n+               \"<VSisa>,   <VSisa>,   <VSisa>,   *,         *,         *,\n                 *,         *,         *,         *,         p9v,       *,\n-                *,         *,         *,         *,         *\")])\n+                <VSisa>,   *,         *,         *,         *\")])\n \n ;;              VSX store  VSX load   VSX move   GPR load   GPR store  GPR move\n ;;              XXSPLTIB   VSPLTISW   VSX 0/-1   VMX const  GPR const\n ;;              LVX (VMX)  STVX (VMX)\n (define_insn \"*vsx_mov<mode>_32bit\"\n   [(set (match_operand:VSX_M 0 \"nonimmediate_operand\"\n-               \"=ZwO,      <VSa>,     <VSa>,     ??r,       ??Y,       <??r>,\n-                wa,        v,         ?<VSa>,    v,         <??r>,\n+               \"=ZwO,      wa,        wa,        ??r,       ??Y,       <??r>,\n+                wa,        v,         ?wa,       v,         <??r>,\n                 wZ,        v\")\n \n \t(match_operand:VSX_M 1 \"input_operand\" \n-               \"<VSa>,     ZwO,       <VSa>,     Y,         r,         r,\n+               \"wa,        ZwO,       wa,        Y,         r,         r,\n                 wE,        jwM,       ?jwM,      W,         <nW>,\n                 v,         wZ\"))]\n \n@@ -1197,8 +1187,8 @@\n                 4,         4,         4,         20,        16,\n                 4,         4\")\n    (set_attr \"isa\"\n-               \"*,         *,         *,         *,         *,         *,\n-                p9v,       *,         *,         *,         *,\n+               \"<VSisa>,   <VSisa>,   <VSisa>,   *,         *,         *,\n+                p9v,       *,         <VSisa>,   *,         *,\n                 *,         *\")])\n \n ;; Explicit  load/store expanders for the builtin functions\n@@ -1993,26 +1983,28 @@\n \n ;; Vector select\n (define_insn \"*vsx_xxsel<mode>\"\n-  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n \t(if_then_else:VSX_L\n-\t (ne:CC (match_operand:VSX_L 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n+\t (ne:CC (match_operand:VSX_L 1 \"vsx_register_operand\" \"<VSr>,wa\")\n \t\t(match_operand:VSX_L 4 \"zero_constant\" \"\"))\n-\t (match_operand:VSX_L 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+\t (match_operand:VSX_L 2 \"vsx_register_operand\" \"<VSr>,wa\")\n+\t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,wa\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxsel %x0,%x3,%x2,%x1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"isa\" \"<VSisa>\")])\n \n (define_insn \"*vsx_xxsel<mode>_uns\"\n-  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n+  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n \t(if_then_else:VSX_L\n-\t (ne:CCUNS (match_operand:VSX_L 1 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n+\t (ne:CCUNS (match_operand:VSX_L 1 \"vsx_register_operand\" \"<VSr>,wa\")\n \t\t   (match_operand:VSX_L 4 \"zero_constant\" \"\"))\n-\t (match_operand:VSX_L 2 \"vsx_register_operand\" \"<VSr>,<VSa>\")\n-\t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n+\t (match_operand:VSX_L 2 \"vsx_register_operand\" \"<VSr>,wa\")\n+\t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,wa\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxsel %x0,%x3,%x2,%x1\"\n-  [(set_attr \"type\" \"vecmove\")])\n+  [(set_attr \"type\" \"vecmove\")\n+   (set_attr \"isa\" \"<VSisa>\")])\n \n ;; Copy sign\n (define_insn \"vsx_copysign<mode>3\"\n@@ -3814,7 +3806,7 @@\n ;; 128-bit hardware types) and <vtype> is vector char, vector unsigned char,\n ;; vector short or vector unsigned short.\n (define_insn_and_split \"*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_fl_<FL_CONV:mode>\"\n-  [(set (match_operand:FL_CONV 0 \"gpc_reg_operand\" \"=<FL_CONV:VSr3>\")\n+  [(set (match_operand:FL_CONV 0 \"gpc_reg_operand\" \"=wa\")\n \t(float:FL_CONV\n \t (vec_select:<VSX_EXTRACT_I:VS_scalar>\n \t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v\")\n@@ -3835,10 +3827,11 @@\n \t(float:<FL_CONV:MODE> (match_dup 4)))]\n {\n   operands[4] = gen_rtx_REG (DImode, REGNO (operands[3]));\n-})\n+}\n+  [(set_attr \"isa\" \"<VSisa>\")])\n \n (define_insn_and_split \"*vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>\"\n-  [(set (match_operand:FL_CONV 0 \"gpc_reg_operand\" \"=<FL_CONV:VSr3>\")\n+  [(set (match_operand:FL_CONV 0 \"gpc_reg_operand\" \"=wa\")\n \t(unsigned_float:FL_CONV\n \t (vec_select:<VSX_EXTRACT_I:VS_scalar>\n \t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"v\")\n@@ -3857,7 +3850,8 @@\n \t(float:<FL_CONV:MODE> (match_dup 4)))]\n {\n   operands[4] = gen_rtx_REG (DImode, REGNO (operands[3]));\n-})\n+}\n+  [(set_attr \"isa\" \"<VSisa>\")])\n \n ;; V4SI/V8HI/V16QI set operation on ISA 3.0\n (define_insn \"vsx_set_<mode>_p9\"\n@@ -4210,14 +4204,15 @@\n \n ;; Shift left double by word immediate\n (define_insn \"vsx_xxsldwi_<mode>\"\n-  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSa>\")\n-\t(unspec:VSX_L [(match_operand:VSX_L 1 \"vsx_register_operand\" \"<VSa>\")\n-\t\t       (match_operand:VSX_L 2 \"vsx_register_operand\" \"<VSa>\")\n+  [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:VSX_L [(match_operand:VSX_L 1 \"vsx_register_operand\" \"wa\")\n+\t\t       (match_operand:VSX_L 2 \"vsx_register_operand\" \"wa\")\n \t\t       (match_operand:QI 3 \"u5bit_cint_operand\" \"i\")]\n \t\t      UNSPEC_VSX_SLDWI))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxsldwi %x0,%x1,%x2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"<VSisa>\")])\n \n \f\n ;; Vector reduction insns and splitters"}, {"sha": "843dd08d53116a2b47b9b23ca9de25b444f28a43", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb152d128b72427d76d40d5d69245638ef8494a8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=cb152d128b72427d76d40d5d69245638ef8494a8", "patch": "@@ -3196,9 +3196,8 @@ Altivec vector register\n @item wa\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n-When using any of the register constraints (@code{wa},\n-@code{wp}, or @code{wq},\n-that take VSX registers, you must use @code{%x<n>} in the template so\n+When using the register constraint @code{wa}\n+that takes VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n is an operand of a VSX instruction that expects VSX register\n@@ -3251,12 +3250,6 @@ were used or NO_REGS.\n @item wn\n No register (NO_REGS).\n \n-@item wp\n-VSX register to use for IEEE 128-bit floating point TFmode, or NO_REGS.\n-\n-@item wq\n-VSX register to use for IEEE 128-bit floating point, or NO_REGS.\n-\n @item wr\n General purpose register if 64-bit instructions are enabled or NO_REGS.\n "}]}