{"sha": "0afeef64be52defd45b00c47464183dd43381725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmZWVmNjRiZTUyZGVmZDQ1YjAwYzQ3NDY0MTgzZGQ0MzM4MTcyNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-12-11T19:33:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-12-11T19:33:39Z"}, "message": "c-common.c (type_for_mode): Handle unsigned vectors.\n\n2001-12-10  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* c-common.c (type_for_mode): Handle unsigned vectors.\n\t(type_for_mode): Remove redundant calls to TYPE_MODE.\n\n\t* tree.c (make_vector): New.\n\t(build_common_tree_nodes_2): Use make_vector for vector types.\n\tAdd unsigned vector types.\n\n\t* tree.h (tree_index): Add unsigned types for vectors.\n\t(unsigned_V16QI_type_node): New.\n\t(unsigned_V4SI_type_node): New.\n\t(unsigned_V8QI_type_node): New.\n\t(unsigned_V8HI_type_node): New.\n\t(unsigned_V4HI_type_node): New.\n\t(unsigned_V2SI_type_node): New.\n\nFrom-SVN: r47889", "tree": {"sha": "84e24cc2300c3468b223984903faa944b7798df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84e24cc2300c3468b223984903faa944b7798df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0afeef64be52defd45b00c47464183dd43381725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afeef64be52defd45b00c47464183dd43381725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afeef64be52defd45b00c47464183dd43381725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afeef64be52defd45b00c47464183dd43381725/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c612a619d0c4476cd0fde1feb1daafddba7c069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c612a619d0c4476cd0fde1feb1daafddba7c069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c612a619d0c4476cd0fde1feb1daafddba7c069"}], "stats": {"total": 162, "additions": 103, "deletions": 59}, "files": [{"sha": "e6a8d64de3b4b72ff639c9614c278e043e5351e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afeef64be52defd45b00c47464183dd43381725/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afeef64be52defd45b00c47464183dd43381725/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0afeef64be52defd45b00c47464183dd43381725", "patch": "@@ -1,3 +1,20 @@\n+2001-12-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* c-common.c (type_for_mode): Handle unsigned vectors.\n+\t(type_for_mode): Remove redundant calls to TYPE_MODE.\n+\n+\t* tree.c (make_vector): New.\n+\t(build_common_tree_nodes_2): Use make_vector for vector types.\n+\tAdd unsigned vector types.\n+\n+\t* tree.h (tree_index): Add unsigned types for vectors.\n+\t(unsigned_V16QI_type_node): New.\n+\t(unsigned_V4SI_type_node): New.\n+\t(unsigned_V8QI_type_node): New.\n+\t(unsigned_V8HI_type_node): New.\n+\t(unsigned_V4HI_type_node): New.\n+\t(unsigned_V2SI_type_node): New.\n+\n 2001-12-11  Stan Shebs  <shebs@apple.com>\n \n \t* objc/objc-act.c (finish_message_expr): Fix misplaced parens in a"}, {"sha": "ad58594866074331bcb10290d5d44313b03b1dea", "filename": "gcc/c-common.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afeef64be52defd45b00c47464183dd43381725/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afeef64be52defd45b00c47464183dd43381725/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0afeef64be52defd45b00c47464183dd43381725", "patch": "@@ -1315,16 +1315,16 @@ type_for_mode (mode, unsignedp)\n     return unsignedp ? widest_unsigned_literal_type_node\n                      : widest_integer_literal_type_node;\n \n-  if (mode == TYPE_MODE (intQI_type_node))\n+  if (mode == QImode)\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n-  if (mode == TYPE_MODE (intHI_type_node))\n+  if (mode == HImode)\n     return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n \n-  if (mode == TYPE_MODE (intSI_type_node))\n+  if (mode == SImode)\n     return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n \n-  if (mode == TYPE_MODE (intDI_type_node))\n+  if (mode == DImode)\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n@@ -1348,22 +1348,30 @@ type_for_mode (mode, unsignedp)\n     return build_pointer_type (integer_type_node);\n \n #ifdef VECTOR_MODE_SUPPORTED_P\n-  if (mode == TYPE_MODE (V16QI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V16QI_type_node;\n-  if (mode == TYPE_MODE (V8HI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V8HI_type_node;\n-  if (mode == TYPE_MODE (V4SF_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V4SF_type_node;\n-  if (mode == TYPE_MODE (V4SI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V4SI_type_node;\n-  if (mode == TYPE_MODE (V2SI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V2SI_type_node;\n-  if (mode == TYPE_MODE (V4HI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V4HI_type_node;\n-  if (mode == TYPE_MODE (V8QI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V8QI_type_node;\n-  if (mode == TYPE_MODE (V2SF_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n-    return V2SF_type_node;\n+  if (VECTOR_MODE_SUPPORTED_P (mode))\n+    {\n+      switch (mode)\n+\t{\n+\tcase V16QImode:\n+\t  return unsignedp ? unsigned_V16QI_type_node : V16QI_type_node;\n+\tcase V8HImode:\n+\t  return unsignedp ? unsigned_V8HI_type_node : V8HI_type_node;\n+\tcase V4SImode:\n+\t  return unsignedp ? unsigned_V4SI_type_node : V4SI_type_node;\n+\tcase V2SImode:\n+\t  return unsignedp ? unsigned_V2SI_type_node : V2SI_type_node;\n+\tcase V4HImode:\n+\t  return unsignedp ? unsigned_V4HI_type_node : V4HI_type_node;\n+\tcase V8QImode:\n+\t  return unsignedp ? unsigned_V8QI_type_node : V8QI_type_node;\n+\tcase V4SFmode:\n+\t  return V4SF_type_node;\n+\tcase V2SFmode:\n+\t  return V2SF_type_node;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n #endif\n \n   return 0;"}, {"sha": "a267fd7e2900a024fd4a2db57156df376e6e8687", "filename": "gcc/tree.c", "status": "modified", "additions": 42, "deletions": 39, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afeef64be52defd45b00c47464183dd43381725/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afeef64be52defd45b00c47464183dd43381725/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0afeef64be52defd45b00c47464183dd43381725", "patch": "@@ -162,6 +162,7 @@ static int type_hash_eq PARAMS ((const void*, const void*));\n static unsigned int type_hash_hash PARAMS ((const void*));\n static void print_type_hash_statistics PARAMS((void));\n static void finish_vector_type PARAMS((tree));\n+static tree make_vector PARAMS ((enum machine_mode, tree, int));\n static int type_hash_marked_p PARAMS ((const void *));\n static void type_hash_mark PARAMS ((const void *));\n static int mark_tree_hashtable_entry PARAMS((void **, void *));\n@@ -4874,43 +4875,45 @@ build_common_tree_nodes_2 (short_double)\n     va_list_type_node = t;\n   }\n \n-  V4SF_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V4SF_type_node) = float_type_node;\n-  TYPE_MODE (V4SF_type_node) = V4SFmode;\n-  finish_vector_type (V4SF_type_node);\n-\n-  V4SI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V4SI_type_node) = intSI_type_node;\n-  TYPE_MODE (V4SI_type_node) = V4SImode;\n-  finish_vector_type (V4SI_type_node);\n-\n-  V2SI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V2SI_type_node) = intSI_type_node;\n-  TYPE_MODE (V2SI_type_node) = V2SImode;\n-  finish_vector_type (V2SI_type_node);\n-\n-  V4HI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V4HI_type_node) = intHI_type_node;\n-  TYPE_MODE (V4HI_type_node) = V4HImode;\n-  finish_vector_type (V4HI_type_node);\n-\n-  V8QI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V8QI_type_node) = intQI_type_node;\n-  TYPE_MODE (V8QI_type_node) = V8QImode;\n-  finish_vector_type (V8QI_type_node);\n-\n-  V8HI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V8HI_type_node) = intHI_type_node;\n-  TYPE_MODE (V8HI_type_node) = V8HImode;\n-  finish_vector_type (V8HI_type_node);\n-\n-  V2SF_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V2SF_type_node) = float_type_node;\n-  TYPE_MODE (V2SF_type_node) = V2SFmode;\n-  finish_vector_type (V2SF_type_node);\n-\n-  V16QI_type_node = make_node (VECTOR_TYPE);\n-  TREE_TYPE (V16QI_type_node) = intQI_type_node;\n-  TYPE_MODE (V16QI_type_node) = V16QImode;\n-  finish_vector_type (V16QI_type_node);\n+  unsigned_V4SI_type_node\n+    = make_vector (V4SImode, unsigned_intSI_type_node, 1);\n+  unsigned_V2SI_type_node\n+    = make_vector (V2SImode, unsigned_intSI_type_node, 1);\n+  unsigned_V4HI_type_node\n+    = make_vector (V4HImode, unsigned_intHI_type_node, 1);\n+  unsigned_V8QI_type_node\n+    = make_vector (V8QImode, unsigned_intQI_type_node, 1);\n+  unsigned_V8HI_type_node\n+    = make_vector (V8HImode, unsigned_intHI_type_node, 1);\n+  unsigned_V16QI_type_node\n+    = make_vector (V16QImode, unsigned_intQI_type_node, 1);\n+\n+  V4SF_type_node = make_vector (V4SFmode, float_type_node, 0);\n+  V4SI_type_node = make_vector (V4SImode, intSI_type_node, 0);\n+  V2SI_type_node = make_vector (V2SImode, intSI_type_node, 0);\n+  V4HI_type_node = make_vector (V4HImode, intHI_type_node, 0);\n+  V8QI_type_node = make_vector (V8QImode, intQI_type_node, 0);\n+  V8HI_type_node = make_vector (V8HImode, intHI_type_node, 0);\n+  V2SF_type_node = make_vector (V2SFmode, float_type_node, 0);\n+  V16QI_type_node = make_vector (V16QImode, intQI_type_node, 0);\n+}\n+\n+/* Returns a vector tree node given a vector mode, the inner type, and\n+   the signness.  */\n+\n+static tree\n+make_vector (mode, innertype, unsignedp)\n+     enum machine_mode mode;\n+     tree innertype;\n+     int unsignedp;\n+{\n+  tree t;\n+\n+  t = make_node (VECTOR_TYPE);\n+  TREE_TYPE (t) = innertype;\n+  TYPE_MODE (t) = mode;\n+  TREE_UNSIGNED (TREE_TYPE (t)) = unsignedp;\n+  finish_vector_type (t);\n+\n+  return t;\n }"}, {"sha": "c905324de472bc2b82dd64a77b7189edb0183e3d", "filename": "gcc/tree.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afeef64be52defd45b00c47464183dd43381725/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afeef64be52defd45b00c47464183dd43381725/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0afeef64be52defd45b00c47464183dd43381725", "patch": "@@ -1888,6 +1888,15 @@ enum tree_index\n \n   TI_VOID_LIST_NODE,\n \n+  TI_UV4SF_TYPE,\n+  TI_UV4SI_TYPE,\n+  TI_UV8HI_TYPE,\n+  TI_UV8QI_TYPE,\n+  TI_UV4HI_TYPE,\n+  TI_UV2SI_TYPE,\n+  TI_UV2SF_TYPE,\n+  TI_UV16QI_TYPE,\n+\n   TI_V4SF_TYPE,\n   TI_V4SI_TYPE,\n   TI_V8HI_TYPE,\n@@ -1956,6 +1965,13 @@ extern tree global_trees[TI_MAX];\n #define main_identifier_node\t\tglobal_trees[TI_MAIN_IDENTIFIER]\n #define MAIN_NAME_P(NODE) (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n \n+#define unsigned_V16QI_type_node\tglobal_trees[TI_UV16QI_TYPE]\n+#define unsigned_V4SI_type_node\t\tglobal_trees[TI_UV4SI_TYPE]\n+#define unsigned_V8QI_type_node\t\tglobal_trees[TI_UV8QI_TYPE]\n+#define unsigned_V8HI_type_node\t\tglobal_trees[TI_UV8HI_TYPE]\n+#define unsigned_V4HI_type_node\t\tglobal_trees[TI_UV4HI_TYPE]\n+#define unsigned_V2SI_type_node\t\tglobal_trees[TI_UV2SI_TYPE]\n+\n #define V16QI_type_node\t\t\tglobal_trees[TI_V16QI_TYPE]\n #define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n #define V4SI_type_node\t\t\tglobal_trees[TI_V4SI_TYPE]"}]}