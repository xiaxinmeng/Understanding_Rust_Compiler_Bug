{"sha": "feec7ef6672bf28d5c79950a21d435533a10710d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlYzdlZjY2NzJiZjI4ZDVjNzk5NTBhMjFkNDM1NTMzYTEwNzEwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-31T12:09:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-31T16:36:11Z"}, "message": "libstdc++: Improve error handling in Net TS name resolution\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (__make_resolver_error_code):\n\tHandle EAI_SYSTEM errors.\n\t(basic_resolver_results): Use __make_resolver_error_code. Use\n\tGlibc NI_MAXHOST and NI_MAXSERV values for buffer sizes.", "tree": {"sha": "ec87ae2f30500f405e1ce397b1267dbecc851503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec87ae2f30500f405e1ce397b1267dbecc851503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feec7ef6672bf28d5c79950a21d435533a10710d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feec7ef6672bf28d5c79950a21d435533a10710d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feec7ef6672bf28d5c79950a21d435533a10710d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feec7ef6672bf28d5c79950a21d435533a10710d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b20d46f9597a4b1e19e0e2d4a0c68d056d7662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b20d46f9597a4b1e19e0e2d4a0c68d056d7662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b20d46f9597a4b1e19e0e2d4a0c68d056d7662"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "65c97de07d915606918e9b845ead6a4c32582d5c", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feec7ef6672bf28d5c79950a21d435533a10710d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feec7ef6672bf28d5c79950a21d435533a10710d/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=feec7ef6672bf28d5c79950a21d435533a10710d", "patch": "@@ -89,6 +89,12 @@ namespace ip\n     host_not_found = EAI_NONAME,\n     host_not_found_try_again = EAI_AGAIN,\n     service_not_found = EAI_SERVICE\n+    // N.B. POSIX defines additional errors that have no enumerator here:\n+    // EAI_BADFLAGS, EAI_FAIL, EAI_FAMILY, EAI_MEMORY, EAI_SOCKTYPE, EAI_SYSTEM\n+    // Some C libraries define additional errors:\n+    // EAI_BADHINTS, EAI_OVERFLOW, EAI_PROTOCOL\n+    // Some C libraries define additional (obsolete?) errors:\n+    // EAI_ADDRFAMILY, EAI_NODATA\n #endif\n   };\n \n@@ -117,6 +123,19 @@ namespace ip\n   inline error_condition make_error_condition(resolver_errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), resolver_category()); }\n \n+  /// @cond undocumented\n+  inline error_code\n+  __make_resolver_error_code(int __ai_err,\n+\t\t\t     [[__maybe_unused__]] int __sys_err) noexcept\n+  {\n+#ifdef EAI_SYSTEM\n+    if (__builtin_expect(__ai_err == EAI_SYSTEM, 0))\n+      return error_code(__sys_err, std::generic_category());\n+#endif\n+    return error_code(__ai_err, resolver_category());\n+  }\n+  /// @endcond\n+\n   /// @}\n \n   using port_type = uint_least16_t;\t///< Type used for port numbers.\n@@ -2011,7 +2030,7 @@ namespace ip\n \n       if (int __err = ::getaddrinfo(__h, __s, &__hints, &__sai._M_p))\n \t{\n-\t  __ec.assign(__err, resolver_category());\n+\t  __ec = ip::__make_resolver_error_code(__err, errno);\n \t  return;\n \t}\n       __ec.clear();\n@@ -2040,8 +2059,8 @@ namespace ip\n     basic_resolver_results(const endpoint_type& __ep, error_code& __ec)\n     {\n #ifdef _GLIBCXX_HAVE_NETDB_H\n-      char __host_name[256];\n-      char __service_name[128];\n+      char __host_name[1025];\t// glibc NI_MAXHOST\n+      char __service_name[32];  // glibc NI_MAXSERV\n       int __flags = 0;\n       if (__ep.protocol().type() == SOCK_DGRAM)\n \t__flags |= NI_DGRAM;\n@@ -2059,7 +2078,7 @@ namespace ip\n \t\t\t\t__flags);\n \t}\n       if (__err)\n-\t__ec.assign(__err, resolver_category());\n+\t__ec = ip::__make_resolver_error_code(__err, errno);\n       else\n \t{\n \t  __ec.clear();"}]}