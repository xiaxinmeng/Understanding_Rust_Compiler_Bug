{"sha": "39f346aaa68081e3f68cb696d63e2898074d0645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmMzQ2YWFhNjgwODFlM2Y2OGNiNjk2ZDYzZTI4OTgwNzRkMDY0NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2009-04-17T13:17:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T13:17:12Z"}, "message": "einfo.ads, einfo.adb: New attribute Underlying_Record_View...\n\n2009-04-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb: New attribute Underlying_Record_View, to handle\n\ttype extensions whose parent is a type with unknown discriminants.\n\n\t* exp_aggr.adb (Expand_Record_Aggregate): If the type of an extension\n\taggregate has unknown discriminants, use the Underlying_Record_View to\n\tobtain the discriminants of the ancestor part.\n\n\t* exp_disp.adb (Build_Dispatch_Tables): Types that are\n\tUnderlying_Record_Views share the dispatching information of the\n\toriginal record extension.\n\n\t* exp_ch3.adb (Expand_Record_Extension): If the type inherits unknown\n\tdiscriminants, propagate dispach table information to the\n\tUnderlying_Record_View.\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): If parent type has unknown\n\tdiscriminants and declaration is not a completion, generate\n\tUnderlying_Record_View to provide proper discriminant information to\n\tthe front-end and to gigi.\n\nFrom-SVN: r146264", "tree": {"sha": "7e8338d0948f7ff0611cbd9b15ddfcc3aff692b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e8338d0948f7ff0611cbd9b15ddfcc3aff692b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f346aaa68081e3f68cb696d63e2898074d0645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f346aaa68081e3f68cb696d63e2898074d0645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f346aaa68081e3f68cb696d63e2898074d0645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f346aaa68081e3f68cb696d63e2898074d0645/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c64de1e7d8a53dc87dc64ccfe36124c0616faf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c64de1e7d8a53dc87dc64ccfe36124c0616faf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c64de1e7d8a53dc87dc64ccfe36124c0616faf2"}], "stats": {"total": 197, "additions": 187, "deletions": 10}, "files": [{"sha": "3ace58e3e97567b4d4b9e2f6e3640cfde1696454", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -1,3 +1,25 @@\n+2009-04-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb: New attribute Underlying_Record_View, to handle\n+\ttype extensions whose parent is a type with unknown discriminants.\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate): If the type of an extension\n+\taggregate has unknown discriminants, use the Underlying_Record_View to\n+\tobtain the discriminants of the ancestor part.\n+\n+\t* exp_disp.adb (Build_Dispatch_Tables): Types that are\n+\tUnderlying_Record_Views share the dispatching information of the\n+\toriginal record extension.\n+\n+\t* exp_ch3.adb (Expand_Record_Extension): If the type inherits unknown\n+\tdiscriminants, propagate dispach table information to the\n+\tUnderlying_Record_View.\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): If parent type has unknown\n+\tdiscriminants and declaration is not a completion, generate\n+\tUnderlying_Record_View to provide proper discriminant information to\n+\tthe front-end and to gigi.\n+\n 2009-04-17  Robert Dewar  <dewar@adacore.com>\n \n \t* s-conca5.adb, g-sercom.adb, s-conca5.ads, s-conca7.adb, exp_imgv.adb,"}, {"sha": "92d9ce26b8f93810ef55eb39a3ad559b34410f9b", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -206,6 +206,7 @@ package body Einfo is\n    --    Stored_Constraint               Elist23\n \n    --    Spec_PPC_List                   Node24\n+   --    Underlying_Record_View          Node24\n \n    --    Interface_Alias                 Node25\n    --    Interfaces                      Elist25\n@@ -2672,6 +2673,12 @@ package body Einfo is\n       return Node19 (Id);\n    end Underlying_Full_View;\n \n+   function Underlying_Record_View (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Record_Type);\n+      return Node24 (Id);\n+   end Underlying_Record_View;\n+\n    function Universal_Aliasing (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -5152,6 +5159,12 @@ package body Einfo is\n       Set_Node19 (Id, V);\n    end Set_Underlying_Full_View;\n \n+   procedure Set_Underlying_Record_View (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Record_Type);\n+      Set_Node24 (Id, V);\n+   end Set_Underlying_Record_View;\n+\n    procedure Set_Universal_Aliasing (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id) and then Id = Base_Type (Id));\n@@ -7909,6 +7922,9 @@ package body Einfo is\n          when Subprogram_Kind                              =>\n             Write_Str (\"Spec_PPC_List\");\n \n+         when E_Record_Type                                =>\n+            Write_Str (\"Underlying record view\");\n+\n          when others                                       =>\n             Write_Str (\"???\");\n       end case;"}, {"sha": "91883e72a893c4fe8c1bcc62ec0e808c1116bdb4", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -3558,6 +3558,13 @@ package Einfo is\n --       private completion. If Td is already constrained, then its full view\n --       can serve directly as the full view of T.\n \n+--    Underlying_Record_View (Node24)\n+--       Present in record types. Set for record types that are extensions of\n+--       types with unknown discriminants. Such types do not have a completion,\n+--       but they cannot be used without having some discriminated view at\n+--       hand. This view is a record type with the same structure, whose parent\n+--       type is the full view of the parent in the original type extension.\n+\n --    Underlying_Type (synthesized)\n --       Applies to all entities. This is the identity function except in the\n --       case where it is applied to an incomplete or private type, in which\n@@ -5246,6 +5253,7 @@ package Einfo is\n    --    Discriminant_Constraint             (Elist21)\n    --    Corresponding_Remote_Type           (Node22)\n    --    Stored_Constraint                   (Elist23)\n+   --    Underlying_Record_View              (Node24)   (base type only)\n    --    Interfaces                          (Elist25)\n    --    Component_Alignment                 (special)  (base type only)\n    --    C_Pass_By_Copy                      (Flag125)  (base type only)\n@@ -5983,6 +5991,7 @@ package Einfo is\n    function Task_Body_Procedure                 (Id : E) return N;\n    function Treat_As_Volatile                   (Id : E) return B;\n    function Underlying_Full_View                (Id : E) return E;\n+   function Underlying_Record_View              (Id : E) return E;\n    function Universal_Aliasing                  (Id : E) return B;\n    function Unset_Reference                     (Id : E) return N;\n    function Used_As_Generic_Actual              (Id : E) return B;\n@@ -6534,6 +6543,7 @@ package Einfo is\n    procedure Set_Task_Body_Procedure             (Id : E; V : N);\n    procedure Set_Treat_As_Volatile               (Id : E; V : B := True);\n    procedure Set_Underlying_Full_View            (Id : E; V : E);\n+   procedure Set_Underlying_Record_View          (Id : E; V : E);\n    procedure Set_Universal_Aliasing              (Id : E; V : B := True);\n    procedure Set_Unset_Reference                 (Id : E; V : N);\n    procedure Set_Used_As_Generic_Actual          (Id : E; V : B := True);\n@@ -7226,6 +7236,7 @@ package Einfo is\n    pragma Inline (Task_Body_Procedure);\n    pragma Inline (Treat_As_Volatile);\n    pragma Inline (Underlying_Full_View);\n+   pragma Inline (Underlying_Record_View);\n    pragma Inline (Universal_Aliasing);\n    pragma Inline (Unset_Reference);\n    pragma Inline (Used_As_Generic_Actual);\n@@ -7610,6 +7621,7 @@ package Einfo is\n    pragma Inline (Set_Task_Body_Procedure);\n    pragma Inline (Set_Treat_As_Volatile);\n    pragma Inline (Set_Underlying_Full_View);\n+   pragma Inline (Set_Underlying_Record_View);\n    pragma Inline (Set_Universal_Aliasing);\n    pragma Inline (Set_Unset_Reference);\n    pragma Inline (Set_Used_As_Generic_Actual);"}, {"sha": "bd9fb0d1e85cf7bf8dad5b294f8e4b3ba373c889", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -2550,13 +2550,17 @@ package body Exp_Aggr is\n             --  in the limited case, the ancestor part must be either a\n             --  function call (possibly qualified, or wrapped in an unchecked\n             --  conversion) or aggregate (definitely qualified).\n+            --  The ancestor part can also be a function call (that may be\n+            --  transformed into an explicit dereference) or a qualification\n+            --  of one such.\n \n             elsif Is_Limited_Type (Etype (A))\n               and then Nkind (Unqualify (A)) /= N_Function_Call --  aggregate?\n               and then\n                 (Nkind (Unqualify (A)) /= N_Unchecked_Type_Conversion\n                    or else\n                  Nkind (Expression (Unqualify (A))) /= N_Function_Call)\n+              and then Nkind (Unqualify (A)) /= N_Explicit_Dereference\n             then\n                Ancestor_Is_Expression := True;\n \n@@ -3420,6 +3424,7 @@ package body Exp_Aggr is\n \n    procedure Convert_To_Assignments (N : Node_Id; Typ : Entity_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n+      T    : Entity_Id;\n       Temp : Entity_Id;\n \n       Instr       : Node_Id;\n@@ -3524,18 +3529,29 @@ package body Exp_Aggr is\n       else\n          Temp := Make_Defining_Identifier (Loc, New_Internal_Name ('A'));\n \n+         --  If the type inherits unknown discriminants, use the view with\n+         --  known discriminants if available.\n+\n+         if Has_Unknown_Discriminants (Typ)\n+            and then Present (Underlying_Record_View (Typ))\n+         then\n+            T := Underlying_Record_View (Typ);\n+         else\n+            T := Typ;\n+         end if;\n+\n          Instr :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Temp,\n-             Object_Definition   => New_Occurrence_Of (Typ, Loc));\n+             Object_Definition   => New_Occurrence_Of (T, Loc));\n \n          Set_No_Initialization (Instr);\n          Insert_Action (N, Instr);\n-         Initialize_Discriminants (Instr, Typ);\n+         Initialize_Discriminants (Instr, T);\n          Target_Expr := New_Occurrence_Of (Temp, Loc);\n-         Insert_Actions (N, Build_Record_Aggr_Code (N, Typ, Target_Expr));\n+         Insert_Actions (N, Build_Record_Aggr_Code (N, T, Target_Expr));\n          Rewrite (N, New_Occurrence_Of (Temp, Loc));\n-         Analyze_And_Resolve (N, Typ);\n+         Analyze_And_Resolve (N, T);\n       end if;\n    end Convert_To_Assignments;\n "}, {"sha": "4442a78e01da4bd699cc41e06a32bd531b5e8df3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -3007,7 +3007,9 @@ package body Exp_Ch3 is\n          --  If it is a type derived from a type with unknown discriminants,\n          --  we cannot build an initialization procedure for it.\n \n-         if Has_Unknown_Discriminants (Rec_Id) then\n+         if Has_Unknown_Discriminants (Rec_Id)\n+           or else Has_Unknown_Discriminants (Etype (Rec_Id))\n+         then\n             return False;\n          end if;\n \n@@ -3890,6 +3892,16 @@ package body Exp_Ch3 is\n          Par_Subtype := Process_Subtype (New_Copy_Tree (Indic), Def);\n       end if;\n \n+      --  If this is an extension of a type with unknown discriminants, use\n+      --  full view to provide proper discriminants to gigi.\n+\n+      if Has_Unknown_Discriminants (Par_Subtype)\n+        and then Is_Private_Type (Par_Subtype)\n+        and then Present (Full_View (Par_Subtype))\n+      then\n+         Par_Subtype := Full_View (Par_Subtype);\n+      end if;\n+\n       Set_Parent_Subtype (T, Par_Subtype);\n \n       Comp_Decl :=\n@@ -5732,6 +5744,27 @@ package body Exp_Ch3 is\n                end if;\n             end if;\n \n+            --  If the type has unknown discriminants, propagate dispatching\n+            --  information to its underlying record view, which does not get\n+            --  its own dispatch table.\n+\n+            if Is_Derived_Type (Def_Id)\n+              and then Has_Unknown_Discriminants (Def_Id)\n+              and then Present (Underlying_Record_View (Def_Id))\n+            then\n+               declare\n+                  Rep : constant Entity_Id :=\n+                           Underlying_Record_View (Def_Id);\n+               begin\n+                  Set_Access_Disp_Table\n+                    (Rep, Access_Disp_Table       (Def_Id));\n+                  Set_Dispatch_Table_Wrappers\n+                    (Rep, Dispatch_Table_Wrappers (Def_Id));\n+                  Set_Primitive_Operations\n+                    (Rep, Primitive_Operations    (Def_Id));\n+               end;\n+            end if;\n+\n             --  Make sure that the primitives Initialize, Adjust and Finalize\n             --  are Frozen before other TSS subprograms. We don't want them\n             --  Frozen inside.\n@@ -7526,7 +7559,7 @@ package body Exp_Ch3 is\n                        Null_Exclusion_Present =>\n                          Null_Exclusion_Present (Parent (Formal)),\n                        Parameter_Type =>\n-                         New_Reference_To (Etype (Formal), Loc),\n+                         New_Occurrence_Of (Etype (Formal), Loc),\n                        Expression =>\n                          New_Copy_Tree (Expression (Parent (Formal)))),\n                      Formal_List);"}, {"sha": "6a125ecbec211607e1989f7d5628b97694405a38", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -170,8 +170,24 @@ package body Exp_Disp is\n               and then Ekind (Defining_Entity (D)) /= E_Record_Subtype\n               and then not Is_Private_Type (Defining_Entity (D))\n             then\n-               Insert_List_After_And_Analyze (Last (Target_List),\n-                 Make_DT (Defining_Entity (D)));\n+\n+               --  We do not generate dispatch tables for the internal type\n+               --  created for a type extension with unknown discriminants\n+               --  The needed information is shared with the source type,\n+               --  See Expand_N_Record_Extension.\n+\n+               if not Comes_From_Source (Defining_Entity (D))\n+                 and then\n+                   Has_Unknown_Discriminants (Etype (Defining_Entity (D)))\n+                 and then\n+                    not Comes_From_Source (First_Subtype (Defining_Entity (D)))\n+               then\n+                  null;\n+\n+               else\n+                  Insert_List_After_And_Analyze (Last (Target_List),\n+                    Make_DT (Defining_Entity (D)));\n+               end if;\n \n             --  Handle private types of library level tagged types. We must\n             --  exchange the private and full-view to ensure the correct"}, {"sha": "11c64914ed79bf59da0336348052f92f367bdc6b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f346aaa68081e3f68cb696d63e2898074d0645/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=39f346aaa68081e3f68cb696d63e2898074d0645", "patch": "@@ -5462,6 +5462,7 @@ package body Sem_Ch3 is\n       Is_Completion : Boolean;\n       Derive_Subps  : Boolean := True)\n    is\n+      Loc         : constant Source_Ptr := Sloc (N);\n       Der_Base    : Entity_Id;\n       Discr       : Entity_Id;\n       Full_Decl   : Node_Id := Empty;\n@@ -5504,8 +5505,69 @@ package body Sem_Ch3 is\n \n    begin\n       if Is_Tagged_Type (Parent_Type) then\n-         Build_Derived_Record_Type\n-           (N, Parent_Type, Derived_Type, Derive_Subps);\n+\n+         --  A type extension of a type with unknown discriminants is an\n+         --  indefinite type that the back-end cannot handle directly.\n+         --  We treat it as a private type, and build a completion that is\n+         --  derived from the full view of the parent, and hopefully has\n+         --  known discriminants.  The implementation of more complex chains\n+         --  of derivation with unknown discriminants is left to the more\n+         --  enterprising reader.\n+\n+         if Has_Unknown_Discriminants (Parent_Type)\n+           and then Present (Full_View (Parent_Type))\n+           and then not In_Open_Scopes (Par_Scope)\n+           and then not Is_Completion\n+           and then Expander_Active\n+         then\n+            declare\n+               Full_Der : constant Entity_Id :=\n+                 Make_Defining_Identifier (Loc, New_Internal_Name ('T'));\n+               Decl : Node_Id;\n+               New_Ext : constant Node_Id :=\n+                           Copy_Separate_Tree\n+                             (Record_Extension_Part (Type_Definition (N)));\n+\n+            begin\n+               Build_Derived_Record_Type\n+                 (N, Parent_Type, Derived_Type, Derive_Subps);\n+\n+               --  Build anonymous completion, as a derivation from the full\n+               --  view of the parent.\n+\n+               Decl :=\n+                 Make_Full_Type_Declaration (Loc,\n+                   Defining_Identifier => Full_Der,\n+                   Type_Definition     =>\n+                     Make_Derived_Type_Definition (Loc,\n+                       Subtype_Indication =>\n+                         New_Copy_Tree\n+                           (Subtype_Indication (Type_Definition (N))),\n+                       Record_Extension_Part => New_Ext));\n+               Set_Has_Private_Declaration (Full_Der);\n+               Set_Has_Private_Declaration (Derived_Type);\n+\n+               Install_Private_Declarations (Par_Scope);\n+               Install_Visible_Declarations (Par_Scope);\n+               Insert_Before (N, Decl);\n+               Analyze (Decl);\n+               Uninstall_Declarations (Par_Scope);\n+\n+               --  Freeze the underlying record view, to prevent generation\n+               --  of useless dispatching information, which is simply shared\n+               --  with the real derived type.\n+\n+               Set_Is_Frozen (Full_Der);\n+               Set_Underlying_Record_View (Derived_Type, Full_Der);\n+            end;\n+\n+         --  if discriminants are known, build derived record.\n+\n+         else\n+            Build_Derived_Record_Type\n+              (N, Parent_Type, Derived_Type, Derive_Subps);\n+         end if;\n+\n          return;\n \n       elsif Has_Discriminants (Parent_Type) then"}]}