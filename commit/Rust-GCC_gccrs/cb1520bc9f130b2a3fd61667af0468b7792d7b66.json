{"sha": "cb1520bc9f130b2a3fd61667af0468b7792d7b66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxNTIwYmM5ZjEzMGIyYTNmZDYxNjY3YWYwNDY4Yjc3OTJkN2I2Ng==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-01-31T20:43:02Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-01-31T20:43:02Z"}, "message": "(expand_units): When calculate BLOCKAGE, reverse terms to POS_MINUS_OP.\n\n(expand_units): When calculate BLOCKAGE, reverse\nterms to POS_MINUS_OP.  Clarify comment before BLOCKAGE computation.\n(write_complex_function): Use EXECUTING_INSN for first switch, and\nCANDIDATE_INSN for second switch.\n\nFrom-SVN: r6442", "tree": {"sha": "c060327dd8273d80e7f1a8eb9750da5fdbec9fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c060327dd8273d80e7f1a8eb9750da5fdbec9fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1520bc9f130b2a3fd61667af0468b7792d7b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1520bc9f130b2a3fd61667af0468b7792d7b66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1520bc9f130b2a3fd61667af0468b7792d7b66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1520bc9f130b2a3fd61667af0468b7792d7b66/comments", "author": null, "committer": null, "parents": [{"sha": "8cfaf7a7bb282218e66657cb6655e38cea76d3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfaf7a7bb282218e66657cb6655e38cea76d3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfaf7a7bb282218e66657cb6655e38cea76d3c0"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "865c0e74703dc09f7869c24d6c3514637520dfcf", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1520bc9f130b2a3fd61667af0468b7792d7b66/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1520bc9f130b2a3fd61667af0468b7792d7b66/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=cb1520bc9f130b2a3fd61667af0468b7792d7b66", "patch": "@@ -1954,6 +1954,10 @@ expand_units ()\n \t     candidate insn, so in the expressions below, C is a known\n \t     term and E is an unknown term.\n \n+\t     We compute the blockage cost for each E for every possible C.\n+\t     Thus OP represents E, and READYCOST is a list of values for\n+\t     every possible C.\n+\n \t     The issue delay function for C is op->issue_exp and is used to\n \t     write the `<name>_unit_conflict_cost' function.  Symbolicly\n \t     this is \"ISSUE-DELAY (E,C)\".\n@@ -1995,8 +1999,8 @@ expand_units ()\n \t\t\t\t     * unit->issue_delay.min));\n \n \t      if (delay > 0)\n-\t\tblockage = operate_exp (POS_MINUS_OP, blockage,\n-\t\t\t\t\tmake_numeric_value (delay));\n+\t\tblockage = operate_exp (POS_MINUS_OP,\n+\t\t\t\t\tmake_numeric_value (delay), blockage);\n \n \t      blockage = operate_exp (MAX_OP, blockage, op->issue_exp);\n \t      blockage = simplify_knowing (blockage, unit->condexp);\n@@ -5114,7 +5118,7 @@ write_complex_function (unit, name, connection)\n   printf (\"{\\n\");\n   printf (\"  rtx insn;\\n\");\n   printf (\"  int casenum;\\n\\n\");\n-  printf (\"  insn = candidate_insn;\\n\");\n+  printf (\"  insn = executing_insn;\\n\");\n   printf (\"  switch (recog_memoized (insn))\\n\");\n   printf (\"    {\\n\");\n \n@@ -5136,7 +5140,7 @@ write_complex_function (unit, name, connection)\n \n   /* Now write an outer switch statement on each case.  Then write\n      the tests on the executing function within each.  */\n-  printf (\"  insn = executing_insn;\\n\");\n+  printf (\"  insn = candidate_insn;\\n\");\n   printf (\"  switch (casenum)\\n\");\n   printf (\"    {\\n\");\n "}]}