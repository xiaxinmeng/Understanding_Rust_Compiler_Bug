{"sha": "806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2ZjJjMWIyOGVkNDE2Mzg1NTI3MmJhZjNjYTdkNzliOTVkMmQ4Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2016-01-18T12:46:54Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2016-01-18T12:46:54Z"}, "message": "Enhance SCEV to follow copies of SSA_NAMEs.\n\n(Fixes missed vectorization of gcc.dg/vect/pr65947-2.c.)\n\n        * tree-scalar-evolution.c (follow_copies_to_constant): New.\n        (analyze_initial_condition, analyze_scalar_evolution_1): Call previous.\n\nFrom-SVN: r232509", "tree": {"sha": "1c0d8f2af9b412a04be41c417f3b798442f229cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0d8f2af9b412a04be41c417f3b798442f229cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806f2c1b28ed4163855272baf3ca7d79b95d2d8f/comments", "author": null, "committer": null, "parents": [{"sha": "70c1e88677b6ae08f831c65dcabb61c769ec81b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c1e88677b6ae08f831c65dcabb61c769ec81b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c1e88677b6ae08f831c65dcabb61c769ec81b9"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "8e2b6e6849fe8b0c95544655704c9cd8bf76beac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806f2c1b28ed4163855272baf3ca7d79b95d2d8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806f2c1b28ed4163855272baf3ca7d79b95d2d8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "patch": "@@ -1,3 +1,8 @@\n+2016-01-18  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* tree-scalar-evolution.c (follow_copies_to_constant): New.\n+\t(analyze_initial_condition, analyze_scalar_evolution_1): Call previous.\n+\n 2016-01-18  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR target/63679"}, {"sha": "c36a0398db62bdf882d7f8613ab9162f1390f2e7", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806f2c1b28ed4163855272baf3ca7d79b95d2d8f/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806f2c1b28ed4163855272baf3ca7d79b95d2d8f/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=806f2c1b28ed4163855272baf3ca7d79b95d2d8f", "patch": "@@ -1522,6 +1522,34 @@ analyze_evolution_in_loop (gphi *loop_phi_node,\n   return evolution_function;\n }\n \n+/* Looks to see if VAR is a copy of a constant (via straightforward assignments\n+   or degenerate phi's).  If so, returns the constant; else, returns VAR.  */\n+\n+static tree\n+follow_copies_to_constant (tree var)\n+{\n+  tree res = var;\n+  while (TREE_CODE (res) == SSA_NAME)\n+    {\n+      gimple *def = SSA_NAME_DEF_STMT (res);\n+      if (gphi *phi = dyn_cast <gphi *> (def))\n+\t{\n+\t  if (tree rhs = degenerate_phi_result (phi))\n+\t    res = rhs;\n+\t  else\n+\t    break;\n+\t}\n+      else if (gimple_assign_single_p (def))\n+\t/* Will exit loop if not an SSA_NAME.  */\n+\tres = gimple_assign_rhs1 (def);\n+      else\n+\tbreak;\n+    }\n+  if (CONSTANT_CLASS_P (res))\n+    return res;\n+  return var;\n+}\n+\n /* Given a loop-phi-node, return the initial conditions of the\n    variable on entry of the loop.  When the CCP has propagated\n    constants into the loop-phi-node, the initial condition is\n@@ -1574,21 +1602,9 @@ analyze_initial_condition (gphi *loop_phi_node)\n   if (init_cond == chrec_not_analyzed_yet)\n     init_cond = chrec_dont_know;\n \n-  /* During early loop unrolling we do not have fully constant propagated IL.\n-     Handle degenerate PHIs here to not miss important unrollings.  */\n-  if (TREE_CODE (init_cond) == SSA_NAME)\n-    {\n-      gimple *def = SSA_NAME_DEF_STMT (init_cond);\n-      if (gphi *phi = dyn_cast <gphi *> (def))\n-\t{\n-\t  tree res = degenerate_phi_result (phi);\n-\t  if (res != NULL_TREE\n-\t      /* Only allow invariants here, otherwise we may break\n-\t\t loop-closed SSA form.  */\n-\t      && is_gimple_min_invariant (res))\n-\t    init_cond = res;\n-\t}\n-    }\n+  /* We may not have fully constant propagated IL.  Handle degenerate PHIs here\n+     to not miss important early loop unrollings.  */\n+  init_cond = follow_copies_to_constant (init_cond);\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -1968,8 +1984,8 @@ analyze_scalar_evolution_1 (struct loop *loop, tree var, tree res)\n   if (bb == NULL\n       || !flow_bb_inside_loop_p (loop, bb))\n     {\n-      /* Keep the symbolic form.  */\n-      res = var;\n+      /* Keep symbolic form, but look through obvious copies for constants.  */\n+      res = follow_copies_to_constant (var);\n       goto set_and_end;\n     }\n "}]}