{"sha": "88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmZGM5YTY2ZTRiMTRhZWY1YWE0Yjg3MzIyM2U0ZDA4MWE4ODI0Yw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-11-20T15:15:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-20T15:15:31Z"}, "message": "[ARM] PR 68149 Fix ICE in unaligned_loaddi split\n\n\tPR target/68149\n\t* config/arm/arm.md (unaligned_loaddi): Delete.\n\t(unaligned_storedi): Likewise.\n\t* config/arm/arm.c (gen_movmem_ldrd_strd): Don't generate\n\tunaligned DImode memory ops.  Instead perform two back-to-back\n\tunaligned SImode ops.\n\nFrom-SVN: r230663", "tree": {"sha": "d0a3239ba96cd38b33d1606c7527cdc633c7ad43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a3239ba96cd38b33d1606c7527cdc633c7ad43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1add8de5b7092621ae7271e19e9ff4a371a303e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1add8de5b7092621ae7271e19e9ff4a371a303e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1add8de5b7092621ae7271e19e9ff4a371a303e8"}], "stats": {"total": 90, "additions": 33, "deletions": 57}, "files": [{"sha": "235a3b0cdc98d6b720b6017e10d5922d3d2c3d69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "patch": "@@ -1,3 +1,12 @@\n+2015-11-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/68149\n+\t* config/arm/arm.md (unaligned_loaddi): Delete.\n+\t(unaligned_storedi): Likewise.\n+\t* config/arm/arm.c (gen_movmem_ldrd_strd): Don't generate\n+\tunaligned DImode memory ops.  Instead perform two back-to-back\n+\tunaligned SImode ops.\n+\n 2015-11-20  Nathan Sidwell  <nathan@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n "}, {"sha": "805335ce354da661a3a7afdee124724cc3cdf8e4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "patch": "@@ -14890,21 +14890,41 @@ gen_movmem_ldrd_strd (rtx *operands)\n   if (!(dst_aligned || src_aligned))\n     return arm_gen_movmemqi (operands);\n \n-  src = adjust_address (src, DImode, 0);\n-  dst = adjust_address (dst, DImode, 0);\n+  /* If the either src or dst is unaligned we'll be accessing it as pairs\n+     of unaligned SImode accesses.  Otherwise we can generate DImode\n+     ldrd/strd instructions.  */\n+  src = adjust_address (src, src_aligned ? DImode : SImode, 0);\n+  dst = adjust_address (dst, dst_aligned ? DImode : SImode, 0);\n+\n   while (len >= 8)\n     {\n       len -= 8;\n       reg0 = gen_reg_rtx (DImode);\n+      rtx low_reg = NULL_RTX;\n+      rtx hi_reg = NULL_RTX;\n+\n+      if (!src_aligned || !dst_aligned)\n+\t{\n+\t  low_reg = gen_lowpart (SImode, reg0);\n+\t  hi_reg = gen_highpart_mode (SImode, DImode, reg0);\n+\t}\n       if (src_aligned)\n         emit_move_insn (reg0, src);\n       else\n-        emit_insn (gen_unaligned_loaddi (reg0, src));\n+\t{\n+\t  emit_insn (gen_unaligned_loadsi (low_reg, src));\n+\t  src = next_consecutive_mem (src);\n+\t  emit_insn (gen_unaligned_loadsi (hi_reg, src));\n+\t}\n \n       if (dst_aligned)\n         emit_move_insn (dst, reg0);\n       else\n-        emit_insn (gen_unaligned_storedi (dst, reg0));\n+\t{\n+\t  emit_insn (gen_unaligned_storesi (dst, low_reg));\n+\t  dst = next_consecutive_mem (dst);\n+\t  emit_insn (gen_unaligned_storesi (dst, hi_reg));\n+\t}\n \n       src = next_consecutive_mem (src);\n       dst = next_consecutive_mem (dst);"}, {"sha": "227a9bd3f3d8ff5ff4900b026d11690fe3561f8f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88fdc9a66e4b14aef5aa4b873223e4d081a8824c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=88fdc9a66e4b14aef5aa4b873223e4d081a8824c", "patch": "@@ -4277,59 +4277,6 @@\n    (set_attr \"predicable_short_it\" \"yes,no\")\n    (set_attr \"type\" \"store1\")])\n \n-;; Unaligned double-word load and store.\n-;; Split after reload into two unaligned single-word accesses.\n-;; It prevents lower_subreg from splitting some other aligned\n-;; double-word accesses too early. Used for internal memcpy.\n-\n-(define_insn_and_split \"unaligned_loaddi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=l,r\")\n-\t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"o,o\")]\n-\t\t   UNSPEC_UNALIGNED_LOAD))]\n-  \"unaligned_access && TARGET_32BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_UNALIGNED_LOAD))\n-   (set (match_dup 2) (unspec:SI [(match_dup 3)] UNSPEC_UNALIGNED_LOAD))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-\n-    /* If the first destination register overlaps with the base address,\n-       swap the order in which the loads are emitted.  */\n-    if (reg_overlap_mentioned_p (operands[0], operands[1]))\n-      {\n-        std::swap (operands[1], operands[3]);\n-        std::swap (operands[0], operands[2]);\n-      }\n-  }\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"4,8\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"load2\")])\n-\n-(define_insn_and_split \"unaligned_storedi\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=o,o\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"l,r\")]\n-\t\t   UNSPEC_UNALIGNED_STORE))]\n-  \"unaligned_access && TARGET_32BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (unspec:SI [(match_dup 1)] UNSPEC_UNALIGNED_STORE))\n-   (set (match_dup 2) (unspec:SI [(match_dup 3)] UNSPEC_UNALIGNED_STORE))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"4,8\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"store2\")])\n-\n \n (define_insn \"*extv_reg\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")"}]}