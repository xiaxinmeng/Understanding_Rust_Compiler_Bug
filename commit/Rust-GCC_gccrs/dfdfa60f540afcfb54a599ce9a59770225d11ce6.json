{"sha": "dfdfa60f540afcfb54a599ce9a59770225d11ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkZmE2MGY1NDBhZmNmYjU0YTU5OWNlOWE1OTc3MDIyNWQxMWNlNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-06-07T09:34:09Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-06-07T09:34:09Z"}, "message": "rs6000.md (restore_stack_block): Generate MEM and specify mode.\n\n        * rs6000.md (restore_stack_block): Generate MEM and specify mode.\n        * rs6000.h (STACK_SAVEAREA_MODE): SAVE_FUNCTION is VOIDmode.\n        * rs6000.c (rs6000_output_load_toc_table): Use fputs.\n        (output_function_profiler): Use asm_fprintf and fputs.\n\nFrom-SVN: r20268", "tree": {"sha": "77c27f7359c008e569e6416bcafdf57ddd9bf7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c27f7359c008e569e6416bcafdf57ddd9bf7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfdfa60f540afcfb54a599ce9a59770225d11ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfdfa60f540afcfb54a599ce9a59770225d11ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfdfa60f540afcfb54a599ce9a59770225d11ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfdfa60f540afcfb54a599ce9a59770225d11ce6/comments", "author": null, "committer": null, "parents": [{"sha": "a0b152cd982db03c04c909b14649f9eedf902611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b152cd982db03c04c909b14649f9eedf902611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b152cd982db03c04c909b14649f9eedf902611"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "d9932227fc844dcf36de1b8adcecdb7fbffcf125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfdfa60f540afcfb54a599ce9a59770225d11ce6", "patch": "@@ -1,3 +1,10 @@\n+Sun Jun  7 12:27:30 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.md (restore_stack_block): Generate MEM and specify mode.\n+\t* rs6000.h (STACK_SAVEAREA_MODE): SAVE_FUNCTION is VOIDmode.\n+\t* rs6000.c (rs6000_output_load_toc_table): Use fputs.\n+\t(output_function_profiler): Use asm_fprintf and fputs.\n+\n Sat Jun  6 12:17:12 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gencheck.c: Remove redundant stdio.h include.  Add a definition"}, {"sha": "72396847ac2c3af7b989952fa133f2820db86e1c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dfdfa60f540afcfb54a599ce9a59770225d11ce6", "patch": "@@ -3676,7 +3676,7 @@ rs6000_output_load_toc_table (file, reg)\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n       asm_fprintf (file, \"\\t{liu|lis} %s,\", reg_names[reg]);\n       assemble_name (file, buf);\n-      asm_fprintf (file, \"@ha\\n\");\n+      fputs (\"@ha\\n\", file);\n       asm_fprintf (file, \"\\t{cal|la} %s,\", reg_names[reg]);\n       assemble_name (file, buf);\n       asm_fprintf (file, \"@l(%s)\\n\", reg_names[reg]);\n@@ -4609,32 +4609,28 @@ output_function_profiler (file, labelno)\n       fprintf (file, \"\\tmflr %s\\n\", reg_names[0]);\n       if (flag_pic == 1)\n \t{\n-\t  fprintf (file, \"\\tbl _GLOBAL_OFFSET_TABLE_@local-4\\n\");\n-\t  fprintf (file, \"\\t%s %s,4(%s)\\n\",\n-\t\t   (TARGET_NEW_MNEMONICS) ? \"stw\" : \"st\",\n-\t\t   reg_names[0], reg_names[1]);\n-\t  fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n-\t  fprintf (file, \"\\t%s %s,\", (TARGET_NEW_MNEMONICS) ? \"lwz\" : \"l\",\n-\t\t   reg_names[0]);\n+\t  fputs (\"\\tbl _GLOBAL_OFFSET_TABLE_@local-4\\n\", file);\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n+\t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n+\t  asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n-\t  fprintf (file, \"@got(%s)\\n\", reg_names[11]);\n+\t  asm_fprintf (file, \"@got(%s)\\n\", reg_names[11]);\n \t}\n #if TARGET_ELF\n       else if (flag_pic > 1 || TARGET_RELOCATABLE)\n \t{\n-\t  fprintf (file, \"\\t%s %s,4(%s)\\n\",\n-\t\t   (TARGET_NEW_MNEMONICS) ? \"stw\" : \"st\",\n-\t\t   reg_names[0], reg_names[1]);\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n \t  rs6000_pic_func_labelno = rs6000_pic_labelno;\n \t  rs6000_output_load_toc_table (file, 11);\n-\t  fprintf (file, \"\\t%s %s,\", (TARGET_NEW_MNEMONICS) ? \"lwz\" : \"l\",\n-\t\t   reg_names[11]);\n+\t  asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[11]);\n \t  assemble_name (file, buf);\n-\t  fprintf (file, \"X(%s)\\n\", reg_names[11]);\n-\t  fprintf (file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n+\t  asm_fprintf (file, \"X(%s)\\n\", reg_names[11]);\n+\t  asm_fprintf (file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n \t  assemble_name (file, buf);\n-\t  fprintf (file, \"X = .-.LCTOC1\\n\");\n-\t  fprintf (file, \"\\t.long \");\n+\t  fputs (\"X = .-.LCTOC1\\n\", file);\n+\t  fputs (\"\\t.long \", file);\n \t  assemble_name (file, buf);\n \t  fputs (\"\\n\\t.previous\\n\", file);\n \t}\n@@ -4643,7 +4639,7 @@ output_function_profiler (file, labelno)\n \t{\n \t  asm_fprintf (file, \"\\t{liu|lis} %s,\", reg_names[11]);\n \t  assemble_name (file, buf);\n-\t  asm_fprintf (file, \"@ha\\n\");\n+\t  fputs (\"@ha\\n\", file);\n \t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\", reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\t{cal|la} %s,\", reg_names[0]);\n \t  assemble_name (file, buf);"}, {"sha": "910d99e0e68e83c2deb65824d772b0d99dda6b67", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=dfdfa60f540afcfb54a599ce9a59770225d11ce6", "patch": "@@ -1324,9 +1324,12 @@ extern int rs6000_sysv_varargs_p;\n    && (DEFAULT_ABI != ABI_SOLARIS || int_size_in_bytes (TYPE) > 8))\n \n /* Mode of stack savearea.\n+   FUNCTION is VOIDmode because calling convention maintains SP.\n+   BLOCK needs Pmode for SP.\n    NONLOCAL needs twice Pmode to maintain both backchain and SP.  */\n #define STACK_SAVEAREA_MODE(LEVEL)\t\\\n-    (LEVEL == SAVE_NONLOCAL ? (TARGET_32BIT ? DImode : TImode) : Pmode)\n+  (LEVEL == SAVE_FUNCTION ? VOIDmode\t\\\n+  : LEVEL == SAVE_NONLOCAL ? (TARGET_32BIT ? DImode : TImode) : Pmode)\n \n /* Minimum and maximum general purpose registers used to hold arguments.  */\n #define GP_ARG_MIN_REG 3"}, {"sha": "91300e37ca5bf2a9b626799f1e22ddab83640618", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfdfa60f540afcfb54a599ce9a59770225d11ce6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=dfdfa60f540afcfb54a599ce9a59770225d11ce6", "patch": "@@ -7318,12 +7318,16 @@\n   \"\")\n \n (define_expand \"restore_stack_block\"\n-  [(set (match_dup 2) (mem (match_operand 0 \"register_operand\" \"\")))\n+  [(use (match_operand 0 \"register_operand\" \"\"))\n+   (set (match_dup 2) (match_dup 3))\n    (set (match_dup 0) (match_operand 1 \"register_operand\" \"\"))\n-   (set (mem (match_dup 0)) (match_dup 2))]\n+   (set (match_dup 3) (match_dup 2))]\n   \"\"\n   \"\n-{ operands[2] = gen_reg_rtx (Pmode); }\")\n+{\n+  operands[2] = gen_reg_rtx (Pmode);\n+  operands[3] = gen_rtx (MEM, Pmode, operands[0]);\n+}\")\n \n (define_expand \"save_stack_nonlocal\"\n   [(match_operand 0 \"memory_operand\" \"\")"}]}