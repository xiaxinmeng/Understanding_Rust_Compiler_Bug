{"sha": "be8aad8d73f47e2581c873ba1069489e071c2a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4YWFkOGQ3M2Y0N2UyNTgxYzg3M2JhMTA2OTQ4OWUwNzFjMmE4Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-21T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-21T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "0cd97c130b59f37b6c7e54617e71b14ce4bcebea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd97c130b59f37b6c7e54617e71b14ce4bcebea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be8aad8d73f47e2581c873ba1069489e071c2a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8aad8d73f47e2581c873ba1069489e071c2a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8aad8d73f47e2581c873ba1069489e071c2a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8aad8d73f47e2581c873ba1069489e071c2a86/comments", "author": null, "committer": null, "parents": [{"sha": "5491da23088734d516aae220810f253b9922c98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5491da23088734d516aae220810f253b9922c98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5491da23088734d516aae220810f253b9922c98c"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "68ad244ba5716239218dabc515a25d42a58f51a9", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,8 @@\n+2021-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-changelog/git_update_version.py (active_refs): Add\n+\treleases/gcc-11.\n+\n 2021-04-12  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Do not allow space in long lines."}, {"sha": "07996a25689b8b386c6875b291edac773981783e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,30 @@\n+2021-04-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__CRC32__ for -mcrc32.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tEnable crc32 instruction for -msse4.2.\n+\t* config/i386/i386.md (sse4_2_crc32<mode>): Remove TARGET_SSE4_2\n+\tcheck.\n+\t(sse4_2_crc32di): Likewise.\n+\t* config/i386/ia32intrin.h: Use crc32 target option for CRC32\n+\tintrinsics.\n+\n+2021-04-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/100108\n+\t* config/rs6000/rs6000.c (rs6000_machine_from_flags): Do not consider\n+\tOPTION_MASK_ISEL.\n+\n+2021-04-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Fix typo.\n+\t* params.opt: Likewise.\n+\n+2021-04-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Document new param.\n+\n 2021-04-19  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/100081"}, {"sha": "1c1820ff172e56776965df04aafb71eb7c1d0e80", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1 +1 @@\n-20210420\n+20210421"}, {"sha": "55ef853947e00ec351ff628610dc7361c2aa1252", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,7 @@\n+2021-04-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gnatvsn.ads: Bump Library_Version to 12.\n+\n 2021-04-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_init): Set default range bits to 0."}, {"sha": "2bfd78b4ac2fb6775afc031af0e4daf592f89e59", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,8 @@\n+2021-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100109\n+\t* pt.c (find_parameter_packs_r): Look into enum initializers.\n+\n 2021-04-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97536"}, {"sha": "17803977013445f24874dd22799f66e79c6550fe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,10 @@\n+2021-04-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/100110\n+\t* trans-decl.c (gfc_get_symbol_decl): Replace test for host\n+\tassociation with a check that the current and symbol namespaces\n+\tare the same.\n+\n 2021-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* lang.opt (fopenacc-kernels=): Remove."}, {"sha": "d3638edb5fd5af93d2934625c66567562ab6edf8", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,7 @@\n+2021-04-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2021-04-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "caa346a3ad8e6e8fcd9e76b1dca3d4f44579c88d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,20 @@\n+2021-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100109\n+\t* g++.dg/cpp0x/lambda/lambda-variadic14.C: New test.\n+\n+2021-04-20  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/zero-scratch-regs-1.c: Force test to run for\n+\tz/Architecture only.\n+\n+2021-04-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/100110\n+\t* gfortran.dg/pdt_31.f03: New test.\n+\t* gfortran.dg/pdt_26.f03: Reduce 'builtin_malloc' count from 9\n+\tto 8.\n+\n 2021-04-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97536"}, {"sha": "ddb1830bf6277e52c6af5dacb64494738468bd0a", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,17 @@\n+2021-04-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98584\n+\t* libdruntime/gcc/deh.d (scanLSDA): Update calls to read_uleb128 and\n+\tread_encoded_value.\n+\t(actionTableLookup): Update calls to read_sleb128 and\n+\tread_encoded_value_with_base.\n+\t* libdruntime/gcc/unwind/pe.d (read_uleb128): Update signature.\n+\t(read_sleb128): Update signature.\n+\t(read_unaligned): New function.\n+\t(read_encoded_value_with_base): Update signature.  Call read_unaligned\n+\tinstead of unsafe pointer dereferencing.\n+\t(read_encoded_value): Update signature.\n+\n 2021-04-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/98494"}, {"sha": "3a3fe697925e61c58416c81343b2b9affd0c4cdc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,153 @@\n+2021-04-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/semaphore/try_acquire_for.cc: Disable\n+\ttest for targets not using futexes for semaphores.\n+\t* testsuite/30_threads/semaphore/try_acquire_until.cc: Likewise.\n+\t* testsuite/30_threads/stop_token/stop_callback/destroy.cc:\n+\tDisable for all targets.\n+\n+2021-04-20  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/Makefile.am: Add new <bits/this_thread_sleep.h> header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/this_thread_sleep.h: New file.\n+\t* include/bits/atomic_base.h: Adjust all calls\n+\tto __atomic_wait/__atomic_notify for new call signatures.\n+\t* include/bits/atomic_timed_wait.h: Extensive rewrite.\n+\t* include/bits/atomic_wait.h: Likewise.\n+\t* include/bits/semaphore_base.h: Adjust all calls\n+\tto __atomic_wait/__atomic_notify for new call signatures.\n+\t* include/std/atomic: Likewise.\n+\t* include/std/barrier: Likewise.\n+\t* include/std/latch: Likewise.\n+\t* include/std/semaphore: Likewise.\n+\t* include/std/thread (this_thread::sleep_for)\n+\t(this_thread::sleep_until): Move to new header.\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Simplify\n+\ttest.\n+\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Likewise.\n+\n+2021-04-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95983\n+\t* include/bits/stl_iterator.h (__detail::__move_iter_cat):\n+\tDefine.\n+\t(move_iterator): Derive from the above in C++20 in order to\n+\tconditionally define iterator_category as per P2259.\n+\t(move_iterator::__base_cat): No longer used, so remove.\n+\t(move_iterator::iterator_category): Remove in C++20.\n+\t(__detail::__common_iter_use_postfix_proxy): Define.\n+\t(common_iterator::_Proxy): Rename to ...\n+\t(common_iterator:__arrow_proxy): ... this.\n+\t(common_iterator::__postfix_proxy): Define as per P2259.\n+\t(common_iterator::operator->): Adjust.\n+\t(common_iterator::operator++): Adjust as per P2259.\n+\t(iterator_traits<common_iterator>::_S_iter_cat): Define.\n+\t(iterator_traits<common_iterator>::iterator_category): Change as\n+\tper P2259.\n+\t(__detail::__counted_iter_value_type): Define.\n+\t(__detail::__counted_iter_concept): Define.\n+\t(__detail::__counted_iter_cat): Define.\n+\t(counted_iterator): Derive from the above three classes in order\n+\tto conditionally define value_type, iterator_concept and\n+\titerator category respectively as per P2259.\n+\t(counted_iterator::operator->): Define as per P2259.\n+\t(incrementable_traits<counted_iterator>): Remove as per P2259.\n+\t(iterator_traits<counted_iterator>): Adjust as per P2259.\n+\t* include/std/ranges (__detail::__iota_view_iter_cat): Define.\n+\t(iota_view::_Iterator): Derive from the above in order to\n+\tconditionally define iterator_category as per P2259.\n+\t(iota_view::_S_iter_cat): Rename to ...\n+\t(iota_view::_S_iter_concept): ... this.\n+\t(iota_view::iterator_concept): Use it to apply LWG 3291 changes.\n+\t(iota_view::iterator_category): Remove.\n+\t(__detail::__filter_view_iter_cat): Define.\n+\t(filter_view::_Iterator): Derive from the above in order to\n+\tconditionally define iterator_category as per P2259.\n+\t(filter_view::_Iterator): Move to struct __filter_view_iter_cat.\n+\t(filter_view::_Iterator::iterator_category): Remove.\n+\t(transform_view::_Base): Define.\n+\t(transform_view::__iter_cat): Define.\n+\t(transform_view::_Iterator): Derive from the above in order to\n+\tconditionally define iterator_category as per P2259.\n+\t(transform_view::_Iterator::_Base): Just alias\n+\ttransform_view::_Base.\n+\t(transform_view::_Iterator::_S_iter_cat): Move to struct\n+\ttransform_view::__iter_cat.\n+\t(transform_view::_Iterator::iterator_category): Remove.\n+\t(transform_view::_Sentinel::_Base): Just alias\n+\ttransform_view::_Base.\n+\t(join_view::_Base): Define.\n+\t(join_view::_Outer_iter): Define.\n+\t(join_view::_Inner_iter): Define.\n+\t(join_view::_S_ref_is_glvalue): Define.\n+\t(join_view::__iter_cat): Define.\n+\t(join_view::_Iterator): Derive from it in order to conditionally\n+\tdefine iterator_category as per P2259.\n+\t(join_view::_Iterator::_Base): Just alias join_view::_Base.\n+\t(join_view::_Iterator::_S_ref_is_glvalue): Just alias\n+\tjoin_view::_S_ref_is_glvalue.\n+\t(join_view::_Iterator::_S_iter_cat): Move to struct\n+\ttransform_view::__iter_cat.\n+\t(join_view::_Iterator::_Outer_iter): Just alias\n+\tjoin_view::_Outer_iter.\n+\t(join_view::_Iterator::_Inner_iter): Just alias\n+\tjoin_view::_Inner_iter.\n+\t(join_view::_Iterator::iterator_category): Remove.\n+\t(join_view::_Sentinel::_Base): Just alias join_view::_Base.\n+\t(__detail::__split_view_outer_iter_cat): Define.\n+\t(__detail::__split_view_inner_iter_cat): Define.\n+\t(split_view::_Base): Define.\n+\t(split_view::_Outer_iter): Derive from __split_view_outer_iter_cat\n+\tin order to conditionally define iterator_category as per P2259.\n+\t(split_view::_Outer_iter::iterator_category): Remove.\n+\t(split_view::_Inner_iter): Derive from __split_view_inner_iter_cat\n+\tin order to conditionally define iterator_category as per P2259.\n+\t(split_view::_Inner_iter::_S_iter_cat): Move to\n+\t__split_view_inner_iter_cat.\n+\t(split_view::_Inner_iter::iterator_category): Remove.\n+\t(elements_view::_Base): Define.\n+\t(elements_view::__iter_cat): Define.\n+\t(elements_view::_Iterator): Derive from the above in order to\n+\tconditionall define iterator_category as per P2259.\n+\t(elements_view::_Iterator::_Base): Just alias\n+\telements_view::_Base.\n+\t(elements_view::_Iterator::_S_iter_concept)\n+\t(elements_view::_Iterator::iterator_concept): Define as per\n+\tP2259.\n+\t(elements_view::_Iterator::iterator_category): Remove.\n+\t(elements_view::_Sentinel::_Base): Just alias\n+\telements_view::_Base.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc:\n+\tAdjust constraints on iterator_traits<counted_iterator>.\n+\t* testsuite/std/ranges/p2259.cc: New test.\n+\n+2021-04-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100146\n+\t* include/std/charconv (__cpp_lib_to_chars): Define\n+\tconditionally.\n+\t* include/std/version (__cpp_lib_to_chars): Likewise..\n+\t* testsuite/20_util/from_chars/4.cc: Only check feature test\n+\tmacro, not _GLIBCXX_HAVE_USELOCALE.\n+\t* testsuite/20_util/from_chars/5.cc: Likewise.\n+\t* testsuite/20_util/from_chars/6.cc: Likewise.\n+\t* testsuite/20_util/to_chars/long_double.cc: Likewise.\n+\n+2021-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/util/testsuite_abi.cc (compare_symbols): If any symbol\n+\tversions with _IEEE128_ substring are found, set ieee_version_found\n+\tto true.  Ignore missing symbols with _IEEE128_ in version name if\n+\t!ieee_version_found.  Use i->first as version_name instead of\n+\ti->second.version_name if the latter is empty.\n+\t* config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt: Update.\n+\n 2021-04-19  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt:"}, {"sha": "ab18cfd905d226aa6cd6c7dbf83a4a2bd43f837d", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8aad8d73f47e2581c873ba1069489e071c2a86/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8aad8d73f47e2581c873ba1069489e071c2a86/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=be8aad8d73f47e2581c873ba1069489e071c2a86", "patch": "@@ -1,3 +1,8 @@\n+2021-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* crontab: Snapshots from trunk are now GCC 12 related.\n+\tAdd GCC 11 snapshots from the respective branch.\n+\n 2021-04-09  Martin Liska  <mliska@suse.cz>\n \n \t* branch_changer.py: Generate URL only when emitting"}]}