{"sha": "ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1NzRkYjZiOWIyYzA2YjlkNjgzMjZhOWNhYjZiNDE5M2EzMDNlMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-08-05T19:01:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-05T19:01:15Z"}, "message": "PR c++/91338 - Implement P1161R3: Deprecate a[b,c].\n\n\t* c-opts.c (c_common_post_options): Enable -Wcomma-subscript by\n\tdefault for C++2a, unless -Wno-deprecated.\n\t* c.opt (Wcomma-subscript): New warning.\n\n\t* parser.c (cp_parser_postfix_open_square_expression): Warn about uses\n\tof a comma operator within a subscripting expression.\n\t(cp_parser_skip_to_closing_square_bracket_1): New function, made out\n\tof...\n\t(cp_parser_skip_to_closing_square_bracket): ...this.\n\n\t* doc/invoke.texi: Document -Wcomma-subscript.\n\n\t* g++.dg/cpp2a/comma1.C: New test.\n\t* g++.dg/cpp2a/comma2.C: New test.\n\t* g++.dg/cpp2a/comma3.C: New test.\n\t* g++.dg/cpp2a/comma4.C: New test.\n\nFrom-SVN: r274121", "tree": {"sha": "99ee5447b6d67c9fb5893ac710b1bca1416b579f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ee5447b6d67c9fb5893ac710b1bca1416b579f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea55c91543bd9d78aa006bc9661422ddf4c4a3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea55c91543bd9d78aa006bc9661422ddf4c4a3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea55c91543bd9d78aa006bc9661422ddf4c4a3f1"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "99c3669eeffdd7bcf8e68b4b96d22c78845efa45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -1,3 +1,8 @@\n+2019-08-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91338 - Implement P1161R3: Deprecate a[b,c].\n+\t* doc/invoke.texi: Document -Wcomma-subscript.\n+\n 2019-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-core.h (tree_function_decl): Make function_code an"}, {"sha": "693a546347c0ea33be27fe57ce4e12c4580d0948", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -1,3 +1,10 @@\n+2019-08-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91338 - Implement P1161R3: Deprecate a[b,c].\n+\t* c-opts.c (c_common_post_options): Enable -Wcomma-subscript by\n+\tdefault for C++2a, unless -Wno-deprecated.\n+\t* c.opt (Wcomma-subscript): New warning.\n+\n 2019-07-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_LOOP."}, {"sha": "2d4af63cde4a3213e77588ff93fcdc12e37fdb29", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -916,6 +916,10 @@ c_common_post_options (const char **pfilename)\n   if (!global_options_set.x_warn_register)\n     warn_register = cxx_dialect >= cxx17;\n \n+  /* -Wcomma-subscript is enabled by default in C++20.  */\n+  if (!global_options_set.x_warn_comma_subscript)\n+    warn_comma_subscript = (cxx_dialect >= cxx2a && warn_deprecated);\n+\n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;"}, {"sha": "257cadfa5f1d77d194967e48bf54efdd7e1f339e", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -428,6 +428,10 @@ Wclobbered\n C ObjC C++ ObjC++ Var(warn_clobbered) Warning EnabledBy(Wextra)\n Warn about variables that might be changed by \\\"longjmp\\\" or \\\"vfork\\\".\n \n+Wcomma-subscript\n+C++ ObjC++ Var(warn_comma_subscript) Warning\n+Warn about uses of a comma operator within a subscripting expression.\n+\n Wcomment\n C ObjC C++ ObjC++ CPP(warn_comments) CppReason(CPP_W_COMMENTS) Var(cpp_warn_comment) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possibly nested block comments, and C++ comments spanning more than one physical line."}, {"sha": "3e4900c34fecb655d8554acd961c3af952e20990", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -1,3 +1,12 @@\n+2019-08-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91338 - Implement P1161R3: Deprecate a[b,c].\n+\t* parser.c (cp_parser_postfix_open_square_expression): Warn about uses\n+\tof a comma operator within a subscripting expression.\n+\t(cp_parser_skip_to_closing_square_bracket_1): New function, made out\n+\tof...\n+\t(cp_parser_skip_to_closing_square_bracket): ...this.\n+\n 2019-08-05  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (force_paren_expr): Preserve location."}, {"sha": "1a5ae147b84535c8468cccb38bf589486e1fc03e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -2669,6 +2669,8 @@ static bool cp_parser_init_statement_p\n   (cp_parser *);\n static bool cp_parser_skip_to_closing_square_bracket\n   (cp_parser *);\n+static int cp_parser_skip_to_closing_square_bracket_1\n+  (cp_parser *, enum cpp_ttype);\n \n /* Concept-related syntactic transformations */\n \n@@ -7522,7 +7524,33 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n \t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n \t}\n       else\n-\tindex = cp_parser_expression (parser);\n+\t{\n+\t  /* [depr.comma.subscript]: A comma expression appearing as\n+\t     the expr-or-braced-init-list of a subscripting expression\n+\t     is deprecated.  A parenthesized comma expression is not\n+\t     deprecated.  */\n+\t  if (warn_comma_subscript)\n+\t    {\n+\t      /* Save tokens so that we can put them back.  */\n+\t      cp_lexer_save_tokens (parser->lexer);\n+\n+\t      /* Look for ',' that is not nested in () or {}.  */\n+\t      if (cp_parser_skip_to_closing_square_bracket_1 (parser,\n+\t\t\t\t\t\t\t      CPP_COMMA) == -1)\n+\t\t{\n+\t\t  auto_diagnostic_group d;\n+\t\t  warning_at (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t\t      OPT_Wcomma_subscript,\n+\t\t\t      \"top-level comma expression in array subscript \"\n+\t\t\t      \"is deprecated\");\n+\t\t}\n+\n+\t      /* Roll back the tokens we skipped.  */\n+\t      cp_lexer_rollback_tokens (parser->lexer);\n+\t    }\n+\n+\t  index = cp_parser_expression (parser);\n+\t}\n     }\n \n   parser->greater_than_is_operator_p = saved_greater_than_is_operator_p;\n@@ -22857,16 +22885,25 @@ cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)\n }\n \n /* Consume tokens up to, and including, the next non-nested closing `]'.\n-   Returns true iff we found a closing `]'.  */\n+   Returns 1 iff we found a closing `]'.  Returns -1 if OR_TTYPE is not\n+   CPP_EOF and we found an unnested token of that type.  */\n \n-static bool\n-cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n+static int\n+cp_parser_skip_to_closing_square_bracket_1 (cp_parser *parser,\n+\t\t\t\t\t    enum cpp_ttype or_ttype)\n {\n   unsigned square_depth = 0;\n+  unsigned paren_depth = 0;\n+  unsigned brace_depth = 0;\n \n   while (true)\n     {\n-      cp_token * token = cp_lexer_peek_token (parser->lexer);\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\n+      /* Have we found what we're looking for before the closing square?  */\n+      if (token->type == or_ttype && or_ttype != CPP_EOF\n+\t  && brace_depth == 0 && paren_depth == 0 && square_depth == 0)\n+\treturn -1;\n \n       switch (token->type)\n \t{\n@@ -22876,20 +22913,38 @@ cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n \t  /* FALLTHRU */\n \tcase CPP_EOF:\n \t  /* If we've run out of tokens, then there is no closing `]'.  */\n-\t  return false;\n+\t  return 0;\n \n         case CPP_OPEN_SQUARE:\n           ++square_depth;\n           break;\n \n         case CPP_CLOSE_SQUARE:\n-\t  if (!square_depth--)\n+\t  if (square_depth-- == 0)\n \t    {\n \t      cp_lexer_consume_token (parser->lexer);\n-\t      return true;\n+\t      return 1;\n \t    }\n \t  break;\n \n+\tcase CPP_OPEN_BRACE:\n+\t  ++brace_depth;\n+\t  break;\n+\n+\tcase CPP_CLOSE_BRACE:\n+\t  if (brace_depth-- == 0)\n+\t    return 0;\n+\t  break;\n+\n+\tcase CPP_OPEN_PAREN:\n+\t  ++paren_depth;\n+\t  break;\n+\n+\tcase CPP_CLOSE_PAREN:\n+\t  if (paren_depth-- == 0)\n+\t    return 0;\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -22899,6 +22954,15 @@ cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n     }\n }\n \n+/* Consume tokens up to, and including, the next non-nested closing `]'.\n+   Returns true iff we found a closing `]'.  */\n+\n+static bool\n+cp_parser_skip_to_closing_square_bracket (cp_parser *parser)\n+{\n+  return cp_parser_skip_to_closing_square_bracket_1 (parser, CPP_EOF) == 1;\n+}\n+\n /* Return true if we are looking at an array-designator, false otherwise.  */\n \n static bool"}, {"sha": "01aab60f8954df37e8d0ac18357126a8c4f085cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -230,7 +230,8 @@ in the following sections.\n -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n--Wabi=@var{n}  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy @gol\n+-Wabi=@var{n}  -Wabi-tag  -Wcomma-subscript  -Wconversion-null @gol\n+-Wctor-dtor-privacy @gol\n -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n -Wliteral-suffix @gol\n -Wmultiple-inheritance  -Wno-init-list-lifetime @gol\n@@ -3037,6 +3038,24 @@ Warn when a type with an ABI tag is used in a context that does not\n have that ABI tag.  See @ref{C++ Attributes} for more information\n about ABI tags.\n \n+@item -Wcomma-subscript @r{(C++ and Objective-C++ only)}\n+@opindex Wcomma-subscript\n+@opindex Wno-comma-subscript\n+Warn about uses of a comma expression within a subscripting expression.\n+This usage was deprecated in C++2a.  However, a comma expression wrapped\n+in @code{( )} is not deprecated.  Example:\n+\n+@smallexample\n+@group\n+void f(int *a, int b, int c) @{\n+    a[b,c];     // deprecated\n+    a[(b,c)];   // OK\n+@}\n+@end group\n+@end smallexample\n+\n+Enabled by default with @option{-std=c++2a}.\n+\n @item -Wctor-dtor-privacy @r{(C++ and Objective-C++ only)}\n @opindex Wctor-dtor-privacy\n @opindex Wno-ctor-dtor-privacy"}, {"sha": "0e8e141bba6afd1087ffceb65f7fe0e89f815eef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -1,3 +1,11 @@\n+2019-08-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91338 - Implement P1161R3: Deprecate a[b,c].\n+\t* g++.dg/cpp2a/comma1.C: New test.\n+\t* g++.dg/cpp2a/comma2.C: New test.\n+\t* g++.dg/cpp2a/comma3.C: New test.\n+\t* g++.dg/cpp2a/comma4.C: New test.\n+\n 2019-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/mask_load_1.c: New test."}, {"sha": "8ffe5d74e618adbde3297107a205c87d237ec43a", "filename": "gcc/testsuite/g++.dg/cpp2a/comma1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma1.C?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/91338 - P1161R3: Deprecate a[b,c].\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  int operator,(int) { return 42; }\n+};\n+\n+void\n+fn (int *a, int b, int c)\n+{\n+  a[b,c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[(b,c)];\n+\n+  a[(void) b, c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[((void) b, c)];\n+\n+  a[(void) b, (void) c, (void) b, b]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[((void) b, (void) c, (void) b, b)];\n+\n+  a[S(), 10]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[(S(), 10)];\n+\n+  a[int{(1,2)}];\n+  a[int{(1,2)}, int{}]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++2a } }\n+  a[(int{(1,2)}, int{})];\n+}"}, {"sha": "15fd26ab400f3b5891ba3eddaaf14d8c39bed017", "filename": "gcc/testsuite/g++.dg/cpp2a/comma2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma2.C?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/91338 - P1161R3: Deprecate a[b,c].\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wno-comma-subscript\" }\n+\n+struct S {\n+  int operator,(int) { return 42; }\n+};\n+\n+void\n+fn (int *a, int b, int c)\n+{\n+  a[b,c]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(b,c)];\n+\n+  a[(void) b, c]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, c)];\n+\n+  a[(void) b, (void) c, (void) b, b]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, (void) c, (void) b, b)];\n+\n+  a[S(), 10]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(S(), 10)];\n+\n+  a[int{(1,2)}];\n+  a[int{(1,2)}, int{}]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(int{(1,2)}, int{})];\n+}"}, {"sha": "c39dd4b483a1ab88f734aa7fe928f6229cdb7f99", "filename": "gcc/testsuite/g++.dg/cpp2a/comma3.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma3.C?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/91338 - P1161R3: Deprecate a[b,c].\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wcomma-subscript\" }\n+\n+struct S {\n+  int operator,(int) { return 42; }\n+};\n+\n+void\n+fn (int *a, int b, int c)\n+{\n+  a[b,c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[(b,c)];\n+\n+  a[(void) b, c]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, c)];\n+\n+  a[(void) b, (void) c, (void) b, b]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, (void) c, (void) b, b)];\n+\n+  a[S(), 10]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[(S(), 10)];\n+\n+  a[int{(1,2)}];\n+  a[int{(1,2)}, int{}]; // { dg-warning \"top-level comma expression in array subscript is deprecated\" }\n+  a[(int{(1,2)}, int{})];\n+}"}, {"sha": "23183ad7bc21df10d5334664736aa0dca3361e9c", "filename": "gcc/testsuite/g++.dg/cpp2a/comma4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab574db6b9b2c06b9d68326a9cab6b4193a303e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcomma4.C?ref=ab574db6b9b2c06b9d68326a9cab6b4193a303e1", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/91338 - P1161R3: Deprecate a[b,c].\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wno-deprecated\" }\n+\n+struct S {\n+  int operator,(int) { return 42; }\n+};\n+\n+void\n+fn (int *a, int b, int c)\n+{\n+  a[b,c]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(b,c)];\n+\n+  a[(void) b, c]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, c)];\n+\n+  a[(void) b, (void) c, (void) b, b]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[((void) b, (void) c, (void) b, b)];\n+\n+  a[S(), 10]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(S(), 10)];\n+\n+  a[int{(1,2)}];\n+  a[int{(1,2)}, int{}]; // { dg-bogus \"top-level comma expression in array subscript is deprecated\" }\n+  a[(int{(1,2)}, int{})];\n+}"}]}