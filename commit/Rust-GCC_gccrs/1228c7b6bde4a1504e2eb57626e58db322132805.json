{"sha": "1228c7b6bde4a1504e2eb57626e58db322132805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyOGM3YjZiZGU0YTE1MDRlMmViNTc2MjZlNThkYjMyMjEzMjgwNQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-12-21T01:28:58Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-12-21T01:28:58Z"}, "message": "Makefile.am (sources): Remove complex.cc, complexf.cc and complexl.cc from list.\n\n\t* src/Makefile.am (sources): Remove complex.cc, complexf.cc and\n\tcomplexl.cc from list.\n\t* src/Makefile.in: Regenerate.\n\t* src/complex.cc: Remove.\n\t* src/complexf.cc: Likewise.\n\t* src/complexl.cc: Likewise.\n\n\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove csqrtl.c\n\t(EXTRA_DIST): Remove csqrt.c and csqrtf.c.\n\t* libmath/Makefile.in: Regenerate.\n\t* libmath/complex-stub.h: Remove.\n\t* libmath/csqrt.c: Likewise.\n\t* libmath/sqrtf.c: Likewise.\n\t* libmath/sqrtl.c: Likewise.\n\t* libmath/mathconf.h: Remove <complex.h> and \"complex-stub.h\"\n\t#inclusion.\n\n\t* include/bits/std_complex.h (sqrt<>): Define primary template.\n\t(complex<>): Remove sqrt friend declarations.\n\n\t* configure.in: Initialize with src/ios.cc.\n\t* configure: Regenerate.\n\t* acinclude.m4: Remove check for csqrt* and <complex.h>\n\t* aclocal.m4: Regenerate.\n\t* config.h.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r38409", "tree": {"sha": "61badc342d3eb229c3bff772c8045fd228faff42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61badc342d3eb229c3bff772c8045fd228faff42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1228c7b6bde4a1504e2eb57626e58db322132805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228c7b6bde4a1504e2eb57626e58db322132805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1228c7b6bde4a1504e2eb57626e58db322132805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228c7b6bde4a1504e2eb57626e58db322132805/comments", "author": null, "committer": null, "parents": [{"sha": "4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe"}], "stats": {"total": 2962, "additions": 1164, "deletions": 1798}, "files": [{"sha": "09714e465c27e2060b8014cc459b7568e72b6763", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -1,3 +1,32 @@\n+2000-12-21  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* src/Makefile.am (sources): Remove complex.cc, complexf.cc and\n+\tcomplexl.cc from list.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/complex.cc: Remove.\n+\t* src/complexf.cc: Likewise.\n+\t* src/complexl.cc: Likewise.\n+\n+\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove csqrtl.c\n+\t(EXTRA_DIST): Remove csqrt.c and csqrtf.c.\n+\t* libmath/Makefile.in: Regenerate.\n+\t* libmath/complex-stub.h: Remove.\n+\t* libmath/csqrt.c: Likewise.\n+\t* libmath/sqrtf.c: Likewise.\n+\t* libmath/sqrtl.c: Likewise.\n+\t* libmath/mathconf.h: Remove <complex.h> and \"complex-stub.h\"\n+\t#inclusion. \n+\t\n+\t* include/bits/std_complex.h (sqrt<>): Define primary template.\n+\t(complex<>): Remove sqrt friend declarations.\n+\n+\t* configure.in: Initialize with src/ios.cc.\n+\t* configure: Regenerate.\n+\t* acinclude.m4: Remove check for csqrt* and <complex.h>\n+\t* aclocal.m4: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2000-12-20  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (SECTION_FLAGS, OPT_LDFLAGS):  Fix minor thinko."}, {"sha": "5828c9a7ae47fe4214871be2a75920227864a6a8", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -136,48 +136,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "58a946cdfc00cbc693c28dddbd7c3a3039d1a0e6", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -748,9 +748,8 @@ dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n-  AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf copysignf)\n+  AC_REPLACE_MATHFUNCS(nan hypot hypotf atan2f expf copysignf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n@@ -760,7 +759,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(csqrtl hypotl signbitl)\n+    AC_REPLACE_MATHFUNCS(hypotl signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "c00423be300a9dc2f0c77a6799844cc81c38a9ff", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -760,9 +760,8 @@ dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n-  AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(csqrt csqrtf nan hypot hypotf atan2f expf copysignf)\n+  AC_REPLACE_MATHFUNCS(nan hypot hypotf atan2f expf copysignf)\n \n   dnl Compile the long double complex functions only if the function \n   dnl provides the non-complex long double functions that are needed.\n@@ -772,7 +771,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(csqrtl hypotl signbitl)\n+    AC_REPLACE_MATHFUNCS(hypotl signbitl)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "4f305f575283f0a1573879020a034abc74e8dedd", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1057, "deletions": 1148, "changes": 2205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1228c7b6bde4a1504e2eb57626e58db322132805"}, {"sha": "3f44e1276c86c32213a83acf8d9600fa8174fcc3", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -2,7 +2,7 @@\n # aclocal, autoconf, autoheader, automake\n \n AC_PREREQ(2.13)\n-AC_INIT(src/complex.cc)\n+AC_INIT(src/ios.cc)\n AC_CONFIG_AUX_DIR(..)\n \n # Gets and sets build, host, target, *_vendor, *_cpu, *_os, etc."}, {"sha": "18e1b02b165826658da541799a0a75e0e3d5daf3", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -450,6 +450,28 @@ namespace std\n       return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n     }\n \n+  template<typename _Tp>\n+    complex<_Tp>\n+    sqrt(const complex<_Tp>& __z)\n+    {\n+      _Tp __x = __z.real();\n+      _Tp __y = __z.imag();\n+\n+      if (__x == _Tp())\n+        {\n+          _Tp __t = sqrt(abs(__y) / 2);\n+          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);\n+        }\n+      else\n+        {\n+          _Tp __t = sqrt( 2 * abs(__z) + abs(__x));\n+          _Tp __u = __t / 2;\n+          return __x > _Tp()\n+            ? complex<_Tp>(__u, __y / __t)\n+            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);\n+        }\n+    }\n+\n   template<typename _Tp>\n     inline complex<_Tp>\n     tan(const complex<_Tp>& __z)\n@@ -537,8 +559,6 @@ namespace std\n         \n     friend class complex<double>;\n     friend class complex<long double>;\n-\n-    friend complex<float> sqrt<>(const complex<float>&);\n   };\n \n   inline float\n@@ -685,8 +705,6 @@ namespace std\n         \n     friend class complex<float>;\n     friend class complex<long double>;\n-\n-    friend complex<double> sqrt<>(const complex<double>&);\n   };\n \n   inline double\n@@ -833,8 +851,6 @@ namespace std\n \n     friend class complex<float>;\n     friend class complex<double>;\n-\n-    friend complex<long double> sqrt<>(const complex<long double>&);\n   };\n \n   inline"}, {"sha": "03de8c0564848401bc93806ae131b2a6cefd268f", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -26,10 +26,10 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n noinst_LTLIBRARIES = libmath.la\n \n EXTRA_LONG_DOUBLE_yes = \\\n-\tcsqrtl.c hypotl.c signbitl.c\n+\thypotl.c signbitl.c\n \n EXTRA_DIST = \\\n-\tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \\\n+\thypot.c hypotf.c atan2f.c expf.c \\\n \t$(EXTRA_LONG_DOUBLE_yes) \n \n libmath_la_LIBADD = \\"}, {"sha": "648f7d5e840de02081cec5ba68e0bae13eb0f5f6", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -114,24 +114,18 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\tcsqrtl.c hypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\tcsqrt.c csqrtf.c hypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -145,9 +139,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "791532419dbffbe01e979a1a2c5567762e5a50af", "filename": "libstdc++-v3/libmath/complex-stub.h", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,42 +0,0 @@\n-\n-/* Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-/* This is no header meant to be used in general.  It's simply here to\n-   get libstdc++ compiled.  It should never be installed in an official\n-   directory.  */\n-\n-#ifndef _COMPLEX_H\n-#define _COMPLEX_H\t1\n-\n-__complex__ double csqrt (__complex__ double x);\n-__complex__ float csqrtf (__complex__ float x);\n-__complex__ long double csqrtl (__complex__ long double x);\n-\n-#endif\n-"}, {"sha": "53551653ae0db36b99932db9e7758d6b7dd5b528", "filename": "libstdc++-v3/libmath/csqrt.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsqrt.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,110 +0,0 @@\n-/* Complex square root of double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-csqrt (__complex__ double x)\n-{\n-  __complex__ double res;\n-\n-  if (!FINITE_P (__real__ x) || !FINITE_P (__imag__ x))\n-    {\n-      if (INFINITE_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VAL;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITE_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysign (HUGE_VAL, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysign (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysign (sqrt (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabs (sqrt (__real__ x));\n-\t      __imag__ res = copysign (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  double r = sqrt (0.5 * fabs (__imag__ x));\n-\n-\t  __real__ res = copysign (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ double q;\n-\t  double t, r;\n-\n-\t  if (fabs (__imag__ x) < 2.0e-4 * fabs (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (hypot (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrt (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "a239588a646de841f8f5087e5946d544943b3350", "filename": "libstdc++-v3/libmath/csqrtf.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtf.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,110 +0,0 @@\n-/* Complex square root of float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-csqrtf (__complex__ float x)\n-{\n-  __complex__ float res;\n-\n-  if (!FINITEF_P (__real__ x) || !FINITEF_P (__imag__ x))\n-    {\n-      if (INFINITEF_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALF;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITEF_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysignf (HUGE_VALF, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysignf (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysignf (sqrtf (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabsf (sqrtf (__real__ x));\n-\t      __imag__ res = copysignf (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  float r = sqrtf (0.5 * fabsf (__imag__ x));\n-\n-\t  __real__ res = copysignf (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ float q;\n-\t  float t, r;\n-\n-\t  if (fabsf (__imag__ x) < 2.0e-4 * fabsf (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (hypotf (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrtf (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "d871a69afb01643f2fd878c1f025c27201f1ac4a", "filename": "libstdc++-v3/libmath/csqrtl.c", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcsqrtl.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,114 +0,0 @@\n-/* Complex square root of long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-csqrtl (__complex__ long double x)\n-{\n-  __complex__ long double res;\n-\n-  if (!FINITEL_P (__real__ x) || !FINITEL_P (__imag__ x))\n-    {\n-      if (INFINITEL_P (__imag__ x))\n-\t{\n-\t  __real__ res = HUGE_VALL;\n-\t  __imag__ res = __imag__ x;\n-\t}\n-      else if (INFINITEL_P (__real__ x))\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = __imag__ x != __imag__ x ? NAN : 0;\n-\t      __imag__ res = copysignl (HUGE_VALL, __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = __real__ x;\n-\t      __imag__ res = (__imag__ x != __imag__ x\n-\t\t\t      ? NAN : copysignl (0.0, __imag__ x));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  __real__ res = NAN;\n-\t  __imag__ res = NAN;\n-\t}\n-    }\n-  else\n-    {\n-      if (__imag__ x == 0.0)\n-\t{\n-\t  if (__real__ x < 0.0)\n-\t    {\n-\t      __real__ res = 0.0;\n-\t      __imag__ res = copysignl (sqrtl (-__real__ x), __imag__ x);\n-\t    }\n-\t  else\n-\t    {\n-\t      __real__ res = fabsl (sqrtl (__real__ x));\n-\t      __imag__ res = copysignl (0.0, __imag__ x);\n-\t    }\n-\t}\n-      else if (__real__ x == 0.0)\n-\t{\n-\t  long double r = sqrtl (0.5 * fabsl (__imag__ x));\n-\n-\t  __real__ res = copysignl (r, __imag__ x);\n-\t  __imag__ res = r;\n-\t}\n-      else\n-\t{\n-\t  __complex__ long double q;\n-\t  long double t, r;\n-\n-\t  if (fabsl (__imag__ x) < 2.0e-4 * fabsl (__real__ x))\n-\t    t = 0.25 * __imag__ x * (__imag__ x / __real__ x);\n-\t  else\n-\t    t = 0.5 * (local_hypotl (__real__ x, __imag__ x) - __real__ x);\n-\n-\t  r = sqrtl (t);\n-\n-\t  __real__ q = __imag__ x / (2.0 * r);\n-\t  __imag__ q = r;\n-\n-\t  /* Heron iteration in complex arithmetic.  */\n-\t  res = 0.5 * (q + q / x);\n-\t}\n-    }\n-\n-  return res;\n-}"}, {"sha": "c66fca7e0bf2966e8a54912febdc4b796a0bd253", "filename": "libstdc++-v3/libmath/mathconf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -227,12 +227,6 @@ double nan (void);\n extern \"C\" {\n #endif\n \n-#ifdef _GLIBCPP_HAVE_COMPLEX_H\n-# include <complex.h>\n-#else\n-# include \"complex-stub.h\"\n-#endif\n-\n /* signbit is a macro in ISO C99.  */\n #ifndef signbit\n extern int __signbitf (float);"}, {"sha": "343f968f7aee1f7ba126ce92abbc413fcdfef1a2", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.58 2000/12/15 00:55:02 bkoz Exp $\n+## $Id: Makefile.am,v 1.59 2000/12/18 18:03:08 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -174,7 +174,7 @@ build_headers = \\\n \n sources = \\\n \tlimitsMEMBERS.cc \\\n-\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n+\tcomplex_io.cc \\\n \tstdexcept.cc bitset.cc \\\n \tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n \tlocale.cc localename.cc codecvt.cc \\"}, {"sha": "c449a959907616e6b99a274030da939b284257b5", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 41, "deletions": 138, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228c7b6bde4a1504e2eb57626e58db322132805/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1228c7b6bde4a1504e2eb57626e58db322132805", "patch": "@@ -112,12 +112,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -129,13 +129,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -147,120 +145,35 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n-\t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/exception_support.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h bits/stl_iterator_base.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h \\\n-\tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \\\n-\tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n-\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n-\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n-\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n-\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers = \\\n-\text/ropeimpl.h ext/stl_rope.h \\\n-\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n-\text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc bitset.cc \\\n-\tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n-\tlocale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources = \\\n-\twstring-inst.cc\n+wstring_sources =  \twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -271,20 +184,17 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la \\\n-\t@libinst_wstring_la@\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n-@GXX_INCLUDE_DIR_TRUE@myincludep = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@myincludep = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@myincludep = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@myincludep = $(prefix)/include/g++-@libstdcxx_interface@\n \n targetincludep = @gxx_target_include_dir@\n \n@@ -300,12 +210,7 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -326,16 +231,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n@@ -354,10 +257,10 @@ libinst_string_la_OBJECTS =  libinst-string.la.lo\n libinst_wstring_la_LDFLAGS = \n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n-libstdc___la_OBJECTS =  limitsMEMBERS.lo complex.lo complexf.lo \\\n-complexl.lo complex_io.lo stdexcept.lo bitset.lo c++io.lo ios.lo \\\n-stdstreams.lo strstream.lo locale.lo localename.lo codecvt.lo \\\n-locale-inst.lo stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo\n+libstdc___la_OBJECTS =  limitsMEMBERS.lo complex_io.lo stdexcept.lo \\\n+bitset.lo c++io.lo ios.lo stdstreams.lo strstream.lo locale.lo \\\n+localename.lo codecvt.lo locale-inst.lo stl-inst.lo misc-inst.lo \\\n+valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "705dc7fb5d20d67e4587991291ec24ac44fa9beb", "filename": "libstdc++-v3/src/complex.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,51 +0,0 @@\n-// The template and inlines for the -*- C++ -*- complex number classes.\n-\n-// Copyright (C) 1997-2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <bits/std_complex.h>\n-\n-// This is a ISO C99 header.\n-#include <mathconf.h>\n-#undef complex\n-\n-#ifndef FLT\n-# define FLT double\n-#endif\n-\n-// This file often breaks due to compiler bugs. May need to put in guards, ie:\n-// #if defined(_GLIBCPP_BUGGY_FLOAT_COMPLEX) \n-// and\n-// #if defined(_GLIBCPP_FLOAT_SPECIALIZATION)\n-\n-namespace std\n-{\n-  template<>\n-  complex<FLT>\n-  sqrt(const complex<FLT>& __x)\n-  { return complex<FLT>(csqrt(__x._M_value)); }\n-} // namespace std"}, {"sha": "7831d7e7f6c57c5b9877de825aff651a8b830d3e", "filename": "libstdc++-v3/src/complexf.cc", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexf.cc?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,4 +0,0 @@\n-#define FLT float\n-// Used in complex.cc to work around GCC's buggy __complex__ float support.\n-#define _GLIBCPP_FLOAT_SPECIALIZATION 1\n-#include \"complex.cc\""}, {"sha": "d904e2420b9c8ecfaa07822ce59d0bc5de536ec6", "filename": "libstdc++-v3/src/complexl.cc", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplexl.cc?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,3 +0,0 @@\n-#define FLT long double\n-#include \"complex.cc\"\n-"}]}