{"sha": "941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "node_id": "C_kwDOANBUbNoAKDk0MWNkYzhiNmQyOWY5ZmU0OTRmZGQyNDRlOTZhNWU1YWEwOGJhMzI", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-03T06:56:44Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-03T06:56:44Z"}, "message": "OpenMP, libgomp: Add new runtime routine omp_get_mapped_ptr.\n\nThis patch adds the OpenMP runtime routine \"omp_get_mapped_ptr\" which was\nintroduced in OpenMP 5.1.\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (omp_runtime_api_call): Added get_mapped_ptr to\n\tomp_runtime_apis array.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.map: Added omp_get_mapped_ptr.\n\t* libgomp.texi: Tagged omp_get_mapped_ptr as supported.\n\t* omp.h.in: Added omp_get_mapped_ptr.\n\t* omp_lib.f90.in: Added interface for omp_get_mapped_ptr.\n\t* omp_lib.h.in: Likewise.\n\t* target.c (omp_get_mapped_ptr): Added implementation of\n\tomp_get_mapped_ptr.\n\t* testsuite/libgomp.c-c++-common/get-mapped-ptr-1.c: New test.\n\t* testsuite/libgomp.c-c++-common/get-mapped-ptr-2.c: New test.\n\t* testsuite/libgomp.c-c++-common/get-mapped-ptr-3.c: New test.\n\t* testsuite/libgomp.c-c++-common/get-mapped-ptr-4.c: New test.\n\t* testsuite/libgomp.fortran/get-mapped-ptr-1.f90: New test.\n\t* testsuite/libgomp.fortran/get-mapped-ptr-2.f90: New test.\n\t* testsuite/libgomp.fortran/get-mapped-ptr-3.f90: New test.\n\t* testsuite/libgomp.fortran/get-mapped-ptr-4.f90: New test.", "tree": {"sha": "2fd28aefc17121aa268953dace732e22305b3ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fd28aefc17121aa268953dace732e22305b3ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/comments", "author": null, "committer": null, "parents": [{"sha": "404edfce683cb1801b052ee7c8d45d603c392e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404edfce683cb1801b052ee7c8d45d603c392e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404edfce683cb1801b052ee7c8d45d603c392e08"}], "stats": {"total": 662, "additions": 661, "deletions": 1}, "files": [{"sha": "8767038689ca328467e2287fa5ad8ef0ca70ff25", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -3982,6 +3982,7 @@ omp_runtime_api_call (const_tree fndecl)\n       \"alloc\",\n       \"calloc\",\n       \"free\",\n+      \"get_mapped_ptr\",\n       \"realloc\",\n       \"target_alloc\",\n       \"target_associate_ptr\","}, {"sha": "608a54cee932189464dbe365179b7f5b2f3421f0", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -226,6 +226,11 @@ OMP_5.1 {\n \tomp_get_teams_thread_limit_;\n } OMP_5.0.2;\n \n+OMP_5.1.1 {\n+  global:\n+\tomp_get_mapped_ptr;\n+} OMP_5.1;\n+\n GOMP_1.0 {\n   global:\n \tGOMP_atomic_end;"}, {"sha": "38e0337535a9ff4f80090972e8795369e5c8bb93", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -314,7 +314,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{omp_target_is_accessible} runtime routine @tab N @tab\n @item @code{omp_target_memcpy_async} and @code{omp_target_memcpy_rect_async}\n       runtime routines @tab N @tab\n-@item @code{omp_get_mapped_ptr} runtime routine @tab N @tab\n+@item @code{omp_get_mapped_ptr} runtime routine @tab Y @tab\n @item @code{omp_calloc}, @code{omp_realloc}, @code{omp_aligned_alloc} and\n       @code{omp_aligned_calloc} runtime routines @tab Y @tab\n @item @code{omp_alloctrait_key_t} enum: @code{omp_atv_serialized} added,"}, {"sha": "18d015295d7da83f9f1ec4f2dac0505bcea0ae90", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -282,6 +282,7 @@ extern int omp_target_memcpy_rect (void *, const void *, __SIZE_TYPE__, int,\n extern int omp_target_associate_ptr (const void *, const void *, __SIZE_TYPE__,\n \t\t\t\t     __SIZE_TYPE__, int) __GOMP_NOTHROW;\n extern int omp_target_disassociate_ptr (const void *, int) __GOMP_NOTHROW;\n+extern void *omp_get_mapped_ptr (const void *, int) __GOMP_NOTHROW;\n \n extern void omp_set_affinity_format (const char *) __GOMP_NOTHROW;\n extern __SIZE_TYPE__ omp_get_affinity_format (char *, __SIZE_TYPE__)"}, {"sha": "506f15cdaae36c1717198ceaf51b1fa33c9f83fd", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -835,6 +835,15 @@\n           end function omp_target_disassociate_ptr\n         end interface\n \n+        interface\n+          function omp_get_mapped_ptr (ptr, device_num) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_int\n+            type(c_ptr) :: omp_get_mapped_ptr\n+            type(c_ptr), value :: ptr\n+            integer(c_int), value :: device_num\n+          end function omp_get_mapped_ptr\n+        end interface\n+\n #if _OPENMP >= 201811\n !GCC$ ATTRIBUTES DEPRECATED :: omp_get_nested, omp_set_nested\n #endif"}, {"sha": "0f48510d7ff0119d552b7872258d2f2a853d3e86", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -416,3 +416,12 @@\n           integer(c_int), value :: device_num\n         end function omp_target_disassociate_ptr\n       end interface\n+\n+      interface\n+        function omp_get_mapped_ptr (ptr, device_num) bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_int\n+          type(c_ptr) :: omp_get_mapped_ptr\n+          type(c_ptr), value :: ptr\n+          integer(c_int), value :: device_num\n+        end function omp_get_mapped_ptr\n+      end interface"}, {"sha": "86930ea2d5d5958b52d0ca2ebcfacf3aca36b80d", "filename": "libgomp/target.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -3665,6 +3665,44 @@ omp_target_disassociate_ptr (const void *ptr, int device_num)\n   return ret;\n }\n \n+void *\n+omp_get_mapped_ptr (const void *ptr, int device_num)\n+{\n+  if (device_num < 0 || device_num > gomp_get_num_devices ())\n+    return NULL;\n+\n+  if (device_num == omp_get_initial_device ())\n+    return (void *) ptr;\n+\n+  struct gomp_device_descr *devicep = resolve_device (device_num);\n+  if (devicep == NULL)\n+    return NULL;\n+\n+  if (!(devicep->capabilities & GOMP_OFFLOAD_CAP_OPENMP_400)\n+      || devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM)\n+    return (void *) ptr;\n+\n+  gomp_mutex_lock (&devicep->lock);\n+\n+  struct splay_tree_s *mem_map = &devicep->mem_map;\n+  struct splay_tree_key_s cur_node;\n+  void *ret = NULL;\n+\n+  cur_node.host_start = (uintptr_t) ptr;\n+  cur_node.host_end = cur_node.host_start;\n+  splay_tree_key n = gomp_map_0len_lookup (mem_map, &cur_node);\n+\n+  if (n)\n+    {\n+      uintptr_t offset = cur_node.host_start - n->host_start;\n+      ret = (void *) (n->tgt->tgt_start + n->tgt_offset + offset);\n+    }\n+\n+  gomp_mutex_unlock (&devicep->lock);\n+\n+  return ret;\n+}\n+\n int\n omp_pause_resource (omp_pause_resource_t kind, int device_num)\n {"}, {"sha": "97a60ca954197613146a68793536a083455adfc2", "filename": "libgomp/testsuite/libgomp.c-c++-common/get-mapped-ptr-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-1.c?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,41 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  int d = omp_get_default_device ();\n+  int id = omp_get_initial_device ();\n+  void *p , *q;\n+\n+  if (d < 0 || d >= omp_get_num_devices ())\n+    d = id;\n+\n+  p = omp_target_alloc (sizeof (int), d);\n+  if (p == NULL)\n+    return 0;\n+\n+  if (omp_target_associate_ptr (q, p, sizeof (int), 0, d) != 0)\n+    return 0;\n+\n+  if (omp_get_mapped_ptr (q, -1) != NULL)\n+    abort ();\n+\n+  if (omp_get_mapped_ptr (q, omp_get_num_devices () + 1) != NULL)\n+    abort ();\n+\n+  if (omp_get_mapped_ptr (q, id) != q)\n+    abort ();\n+\n+  if (omp_get_mapped_ptr (q, d) != p)\n+    abort ();\n+\n+  if (omp_target_disassociate_ptr (q, d) != 0)\n+    abort ();\n+\n+  if (omp_get_mapped_ptr (q, d) != NULL)\n+    abort ();\n+\n+  omp_target_free (p, d);\n+  return 0;\n+}"}, {"sha": "194dade8ac5f75cb8fa3ec9dccb9142bf8dbebd5", "filename": "libgomp/testsuite/libgomp.c-c++-common/get-mapped-ptr-2.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-2.c?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,106 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+int\n+main ()\n+{\n+  int d = omp_get_default_device ();\n+  int id = omp_get_initial_device ();\n+  int a = 42;\n+  int b[] = { 24, 42 };\n+  int c[] = { 47, 11 };\n+  int e[128];\n+  int *q = &a;\n+  void *p1 = NULL, *p2 = NULL, *p3 = NULL;\n+  void *devptrs[128];\n+\n+  if (d < 0 || d >= omp_get_num_devices ())\n+    d = id;\n+\n+  for (int i = 0; i < 128; i++)\n+    e[i] = i;\n+\n+  #pragma omp target data map(alloc: a, b, c[1], e[32:64]) device(d)\n+  {\n+    #pragma omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c[1], e[32:64]) device(d)\n+    {\n+      p1 = &a;\n+      p2 = &b;\n+      p3 = &c[1];\n+      for (int i = 32; i < 96; i++)\n+\tdevptrs[i] = &e[i];\n+    }\n+\n+    if (omp_get_mapped_ptr (&a, d) != (d == id ? &a : p1)\n+\t|| omp_get_mapped_ptr (q, d) != (d == id ? q : p1)\n+\t|| omp_get_mapped_ptr (b, d) != (d == id ? b : p2)\n+\t|| omp_get_mapped_ptr (&b[0], d) != (d == id ? &b[0] : p2)\n+\t|| omp_get_mapped_ptr (&c[1], d) != (d == id ? &c[1] : p3)\n+\t|| omp_get_mapped_ptr (&c[0], d) != (d == id ? &c[0] : NULL))\n+      abort ();\n+\n+    for (int i = 0; i < 32; i++)\n+      if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+\tabort ();\n+    for (int i = 32; i < 96; i++)\n+      if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : devptrs[i]))\n+\tabort ();\n+    for (int i = 96; i < 128; i++)\n+      if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+\tabort ();\n+  }\n+\n+  if (omp_get_mapped_ptr (&a, d) != (d == id ? &a : NULL)\n+      || omp_get_mapped_ptr (q, d) != (d == id ? q : NULL)\n+      || omp_get_mapped_ptr (b, d) != (d == id ? b : NULL)\n+      || omp_get_mapped_ptr (&b[0], d) != (d == id ? &b[0] : NULL)\n+      || omp_get_mapped_ptr (&c[1], d) != (d == id ? &c[1] : NULL)\n+      || omp_get_mapped_ptr (&c[0], d) != (d == id ? &c[0] : NULL))\n+    abort ();\n+  for (int i = 0; i < 128; i++)\n+    if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+      abort ();\n+\n+  #pragma omp target enter data map (alloc: a, b, c[1], e[32:64]) device (d)\n+  #pragma omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c[1], e[32:64]) device(d)\n+  {\n+    p1 = &a;\n+    p2 = &b;\n+    p3 = &c[1];\n+    for (int i = 32; i < 96; i++)\n+      devptrs[i] = &e[i];\n+  }\n+\n+  if (omp_get_mapped_ptr (&a, d) != (d == id ? &a : p1)\n+      || omp_get_mapped_ptr (q, d) != (d == id ? q : p1)\n+      || omp_get_mapped_ptr (b, d) != (d == id ? b : p2)\n+      || omp_get_mapped_ptr (&b[0], d) != (d == id ? &b[0] : p2)\n+      || omp_get_mapped_ptr (&c[1], d) != (d == id ? &c[1] : p3)\n+      || omp_get_mapped_ptr (&c[0], d) != (d == id ? &c[0] : NULL))\n+    abort ();\n+  for (int i = 0; i < 32; i++)\n+    if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+      abort ();\n+  for (int i = 32; i < 96; i++)\n+    if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : devptrs[i]))\n+      abort ();\n+  for (int i = 96; i < 128; i++)\n+    if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+      abort ();\n+\n+  #pragma omp target exit data map (delete: a, b, c[1], e[32:64]) device (d)\n+\n+  if (omp_get_mapped_ptr (&a, d) != (d == id ? &a : NULL)\n+      || omp_get_mapped_ptr (q, d) != (d == id ? q : NULL)\n+      || omp_get_mapped_ptr (b, d) != (d == id ? b : NULL)\n+      || omp_get_mapped_ptr (&b[0], d) != (d == id ? &b[0] : NULL)\n+      || omp_get_mapped_ptr (&c[1], d) != (d == id ? &c[1] : NULL)\n+      || omp_get_mapped_ptr (&c[0], d) != (d == id ? &c[0] : NULL))\n+    abort ();\n+  for (int i = 0; i < 128; i++)\n+    if (omp_get_mapped_ptr (&e[i], d) != (d == id ? &e[i] : NULL))\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "747ef75c752082a4068e951c1c6a8c34ba53b13a", "filename": "libgomp/testsuite/libgomp.c-c++-common/get-mapped-ptr-3.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-3.c?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,51 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  int d = omp_get_default_device ();\n+  int id = omp_get_initial_device ();\n+  int a[0];\n+  int b[] = { 24, 42 };\n+  void *p1 = NULL, *p2 = NULL;\n+\n+  if (d < 0 || d >= omp_get_num_devices ())\n+    d = id;\n+\n+  void *p = omp_target_alloc (sizeof (int), d);\n+  if (p == NULL)\n+    return 0;\n+\n+  if (omp_target_associate_ptr (a, p, sizeof (int), 0, d) != 0)\n+    return 0;\n+\n+  if (omp_get_mapped_ptr (a, d) != (d == id ? a : p))\n+    abort ();\n+\n+  if (omp_target_disassociate_ptr (a, d) != 0)\n+    abort ();\n+\n+  if (omp_get_mapped_ptr (a, d) != (d == id ? a : NULL))\n+    abort ();\n+\n+  #pragma omp target data map(alloc: a, b[1:0]) device(d)\n+  {\n+    #pragma omp target map(from: p1, p2) map(alloc: a, b[1:0]) device(d)\n+    {\n+      p1 = &a;\n+      p2 = &b[1];\n+    }\n+\n+    /* This is probably expected to be p1/p2 instead of NULL. Zero-length arrays\n+       as list items of the map clause are currently not inserted into the mem\n+       map ?! However by returning NULL, omp_get_mapped_ptr is consistent with\n+       omp_target_is_present.  */\n+    if (omp_get_mapped_ptr (a, d) != NULL\n+\t|| omp_get_mapped_ptr (&b[1], d) != NULL)\n+      abort ();\n+  }\n+\n+  omp_target_free (p, d);\n+  return 0;\n+}"}, {"sha": "6f4bd625d48243d1fac7c4ee2c00a0fecfa2230d", "filename": "libgomp/testsuite/libgomp.c-c++-common/get-mapped-ptr-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fget-mapped-ptr-4.c?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,49 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  int d = omp_get_default_device ();\n+  int id = omp_get_initial_device ();\n+  struct s_t { int m1; char m2; } s;\n+  void *p1 = NULL, *p2 = NULL;\n+\n+  if (d < 0 || d >= omp_get_num_devices ())\n+    d = id;\n+\n+  #pragma omp target data map(alloc: s, s.m2) device(d)\n+  {\n+    #pragma omp target map(from: p1, p2) map(alloc: s, s.m2) device(d)\n+    {\n+      p1 = &s;\n+      p2 = &s.m2;\n+    }\n+    if (omp_get_mapped_ptr (&s, d) != (d == id ? &s : p1)\n+\t|| omp_get_mapped_ptr (&s.m2, d) != (d == id ? &s.m2 : p2))\n+      abort ();\n+  }\n+\n+  if (omp_get_mapped_ptr (&s, d) != (d == id ? &s : NULL)\n+      || omp_get_mapped_ptr (&s.m2, d) != (d == id ? &s.m2 : NULL))\n+    abort ();\n+\n+  #pragma omp target enter data map(alloc: s, s.m2) device (d)\n+  #pragma omp target map(from: p1, p2) map(alloc: s, s.m2) device(d)\n+  {\n+    p1 = &s;\n+    p2 = &s.m2;\n+  }\n+\n+  if (omp_get_mapped_ptr (&s, d) != (d == id ? &s : p1)\n+      || omp_get_mapped_ptr (&s.m2, d) != (d == id ? &s.m2 : p2))\n+    abort ();\n+\n+  #pragma omp target exit data map (delete: s, s.m2) device (d)\n+\n+  if (omp_get_mapped_ptr (&s, d) != (d == id ? &s : NULL)\n+      || omp_get_mapped_ptr (&s.m2, d) != (d == id ? &s.m2 : NULL))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "de05179ce9f709675aedf7bac228eac7f84d11ee", "filename": "libgomp/testsuite/libgomp.fortran/get-mapped-ptr-1.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-1.f90?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,43 @@\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer :: d, id\n+  type(c_ptr) :: p\n+  integer, target :: q\n+\n+  d = omp_get_default_device ()\n+  id = omp_get_initial_device ()\n+\n+  if (d < 0 .or. d >= omp_get_num_devices ()) &\n+    d = id\n+\n+  p = omp_target_alloc (c_sizeof (q), d)\n+  if (.not. c_associated (p)) &\n+    stop 0  ! okay\n+\n+  if (omp_target_associate_ptr (c_loc (q), p, c_sizeof (q), &\n+                                0_c_size_t, d) == 0) then\n+\n+    if(c_associated (omp_get_mapped_ptr (c_loc (q), -1))) &\n+      stop 1\n+\n+    if(c_associated (omp_get_mapped_ptr (c_loc (q), &\n+                     omp_get_num_devices () + 1))) &\n+      stop 2\n+\n+    if(.not. c_associated (omp_get_mapped_ptr (c_loc (q), id), c_loc (q))) &\n+      stop 3\n+\n+    if(.not. c_associated (omp_get_mapped_ptr (c_loc (q), d), p)) &\n+      stop 4\n+\n+    if (omp_target_disassociate_ptr (c_loc (q), d) /= 0) &\n+      stop 5\n+\n+    if(c_associated (omp_get_mapped_ptr (c_loc (q), d))) &\n+      stop 6\n+  end if\n+\n+  call omp_target_free (p, d)\n+end program main"}, {"sha": "66a0b88f612fecf70a24f7ec46247606c6d1e42a", "filename": "libgomp/testsuite/libgomp.fortran/get-mapped-ptr-2.f90", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-2.f90?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,175 @@\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer :: d, id, i, j\n+  integer, target :: a, b(1:2), c(1:2), e(0:127)\n+  type(c_ptr) :: p1, p2, p3, q, devptrs(0:63)\n+\n+  a = 42;\n+  q = c_loc (a);\n+  e = [(i, i = 0, 127)]\n+\n+  d = omp_get_default_device ()\n+  id = omp_get_initial_device ()\n+\n+  if (d < 0 .or. d >= omp_get_num_devices ()) &\n+    d = id\n+\n+  if (d /= id) then\n+    !$omp target data map(alloc: a, b, c(2), e(32:95)) device(d)\n+      !$omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c(2), e(32:95)) device(d)\n+      p1 = c_loc (a);\n+      p2 = c_loc (b);\n+      p3 = c_loc (c(2))\n+      devptrs = [(c_loc (e(i)), i = 32, 95)]\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (q, d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), p2) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d), p2) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), p3) &\n+          .or. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d))) &\n+        stop 0\n+\n+      do j = 0, 31\n+        if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+          stop 1\n+      end do\n+      do j = 32, 95\n+        if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d), devptrs(j-32))) &\n+          stop 2\n+      end do\n+      do j = 96, 128\n+        if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+          stop 3\n+      end do\n+    !$omp end target data\n+\n+    if (c_associated (omp_get_mapped_ptr (c_loc (a), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (q, d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (b), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d))) &\n+      stop 4\n+      do j = 0, 127\n+        if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+          stop 5\n+      end do\n+\n+    !$omp target enter data map (alloc: a, b, c(2), e(32:95)) device (d)\n+      !$omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c(2), e(32:95)) device(d)\n+      p1 = c_loc (a);\n+      p2 = c_loc (b);\n+      p3 = c_loc (c(2))\n+      devptrs = [(c_loc (e(i)), i = 32, 95)]\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (q, d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), p2) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), p3) &\n+          .or. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d))) &\n+        stop 6\n+\n+      do j = 0, 31\n+        if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+          stop 7\n+      end do\n+      do j = 32, 95\n+        if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d), devptrs(j-32))) &\n+          stop 8\n+      end do\n+      do j = 96, 128\n+        if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+          stop 9\n+      end do\n+    !$omp target exit data map (delete: a, b, c(2), e(32:95)) device (d)\n+\n+    if (c_associated (omp_get_mapped_ptr (c_loc (a), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (q, d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (b), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d))) &\n+      stop 10\n+    do j = 0, 127\n+      if (c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+        stop 11\n+    end do\n+\n+  else ! d == id\n+\n+    !$omp target data map(alloc: a, b, c(2), e(32:95)) device(d)\n+      !$omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c(2), e(32:95)) device(d)\n+      p1 = c_loc (a);\n+      p2 = c_loc (b);\n+      p3 = c_loc (c(2))\n+      devptrs = [(c_loc (e(i)), i = 32, 95)]\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), c_loc (a)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (q, d), q) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), c_loc (b)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d), c_loc (b(1))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), c_loc (c(2))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d), c_loc (c(1)))) &\n+      stop 12\n+\n+      do j = 0, 127\n+        if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d), c_loc (e(j)))) &\n+          stop 13\n+      end do\n+    !$omp end target data\n+\n+    if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), c_loc (a)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (q, d), q) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), c_loc (b)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d), c_loc (b(1))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), c_loc (c(2))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d), c_loc (c(1)))) &\n+      stop 14\n+    do j = 0, 127\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d))) &\n+        stop 15\n+    end do\n+\n+    !$omp target enter data map (alloc: a, b, c(2), e(32:95)) device (d)\n+      !$omp target map(from: p1, p2, p3, devptrs) map(alloc: a, b, c(2), e(32:95)) device(d)\n+      p1 = c_loc (a);\n+      p2 = c_loc (b);\n+      p3 = c_loc (c(2))\n+      devptrs = [(c_loc (e(i)), i = 32, 95)]\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), c_loc (a)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (q, d), q) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), c_loc (b)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d), c_loc (b(1))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), c_loc (c(2))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d), c_loc (c(1)))) &\n+        stop 16\n+\n+      do j = 0, 127\n+        if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d), c_loc (e(j)))) &\n+          stop 17\n+      end do\n+    !$omp target exit data map (delete: a, b, c(2), e(32:95)) device (d)\n+\n+    if (.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), c_loc (a)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (q, d), q) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b), d), c_loc (b)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (b(1)), d), c_loc (b(1))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(2)), d), c_loc (c(2))) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (c(1)), d), c_loc (c(1)))) &\n+      stop 18\n+\n+    do j = 0, 127\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (e(j)), d), c_loc (e(j)))) &\n+        stop 19\n+    end do\n+  end if\n+\n+end program main"}, {"sha": "8e7ccac6a52788049900c795a28f8e0d1f331a7a", "filename": "libgomp/testsuite/libgomp.fortran/get-mapped-ptr-3.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-3.f90?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,48 @@\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer :: d, id\n+  type(c_ptr) :: p, p1, p2\n+  integer, target :: a(1:0), b(1:2)\n+\n+  d = omp_get_default_device ()\n+  id = omp_get_initial_device ()\n+\n+  if (d < 0 .or. d >= omp_get_num_devices ()) &\n+    d = id\n+\n+  p = omp_target_alloc (c_sizeof (c_int), d)\n+  if (.not. c_associated (p)) &\n+    stop 0  ! okay\n+\n+  if (omp_target_associate_ptr (c_loc (a), p, c_sizeof (c_int), &\n+                                0_c_size_t, d) == 0) then\n+\n+  if(.not. c_associated (omp_get_mapped_ptr (c_loc (a), d), p)) &\n+    stop 1\n+\n+  if (omp_target_disassociate_ptr (c_loc (a), d) /= 0) &\n+    stop 2\n+\n+  if(c_associated (omp_get_mapped_ptr (c_loc (a), d))) &\n+    stop 3\n+\n+  !$omp target data map(alloc: a) device(d)\n+    !$omp target map(from: p1) map(alloc: a) device(d)\n+    p1 = c_loc (a);\n+    !$omp end target\n+    if (c_associated (omp_get_mapped_ptr (c_loc (a), d))) &\n+      stop 4\n+  !$omp end target data\n+\n+  !$omp target data map(alloc: b(1:0)) device(d)\n+    !$omp target map(from: p2) map(alloc: b(1:0)) device(d)\n+    p2 = c_loc (b(1));\n+    !$omp end target\n+    if (c_associated (omp_get_mapped_ptr (c_loc (b(1)), d))) &\n+      stop 5\n+  !$omp end target data\n+  end if\n+  call omp_target_free (p, d)\n+end program main"}, {"sha": "4300a5561ac57b7508128df9236dc4a0db9d153e", "filename": "libgomp/testsuite/libgomp.fortran/get-mapped-ptr-4.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fget-mapped-ptr-4.f90?ref=941cdc8b6d29f9fe494fdd244e96a5e5aa08ba32", "patch": "@@ -0,0 +1,84 @@\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer :: d, id\n+  type(c_ptr) :: p1, p2\n+\n+  type t\n+    integer :: m1, m2\n+  end type t\n+  type(t), target :: s\n+\n+  d = omp_get_default_device ()\n+  id = omp_get_initial_device ()\n+\n+  if (d < 0 .or. d >= omp_get_num_devices ()) &\n+    d = id\n+\n+  if (d /= id) then\n+    !$omp target data map(alloc: s, s%m2) device(d)\n+      !$omp target map(from: p1, p2) map(alloc: s, s%m2) device(d)\n+      p1 = c_loc (s);\n+      p2 = c_loc (s%m2);\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), p2)) &\n+        stop 0\n+    !$omp end target data\n+\n+    if (c_associated (omp_get_mapped_ptr (c_loc (s), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d))) &\n+      stop 1\n+\n+    !$omp target enter data map (alloc: s, s%m2) device (d)\n+      !$omp target map(from: p1, p2) map(alloc: s, s%m2) device(d)\n+      p1 = c_loc (s);\n+      p2 = c_loc (s%m2);\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), p1) &\n+          .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), p2)) &\n+        stop 2\n+    !$omp target exit data map (delete: s, s%m2) device (d)\n+\n+    if (c_associated (omp_get_mapped_ptr (c_loc (s), d)) &\n+        .or. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d))) &\n+      stop 3\n+\n+  else ! d == id\n+\n+    !$omp target data map(alloc: s, s%m2) device(d)\n+      !$omp target map(from: p1, p2) map(alloc: s, s%m2) device(d)\n+      p1 = c_loc (s);\n+      p2 = c_loc (s%m2);\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), c_loc (s)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), c_loc (s%m2))) &\n+        stop 4\n+    !$omp end target data\n+\n+    if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), c_loc (s)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), c_loc (s%m2))) &\n+      stop 5\n+\n+    !$omp target enter data map (alloc: s, s%m2) device (d)\n+      !$omp target map(from: p1, p2) map(alloc: s, s%m2) device(d)\n+      p1 = c_loc (s);\n+      p2 = c_loc (s%m2);\n+      !$omp end target\n+\n+      if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), c_loc (s)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), c_loc (s%m2))) &\n+        stop 6\n+\n+    !$omp target exit data map (delete: s, s%m2) device (d)\n+\n+    if (.not. c_associated (omp_get_mapped_ptr (c_loc (s), d), c_loc (s)) &\n+        .or. .not. c_associated (omp_get_mapped_ptr (c_loc (s%m2), d), c_loc (s%m2))) &\n+      stop 7\n+  end if\n+\n+end program main"}]}