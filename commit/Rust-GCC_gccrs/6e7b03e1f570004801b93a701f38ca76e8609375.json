{"sha": "6e7b03e1f570004801b93a701f38ca76e8609375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU3YjAzZTFmNTcwMDA0ODAxYjkzYTcwMWYzOGNhNzZlODYwOTM3NQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2001-07-23T16:00:06Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2001-07-23T16:00:06Z"}, "message": "tm.texi (MD_CAN_REDIRECT_BRANCH): New macro.\n\n2001-07-13  Andrew Haley  <aph@redhat.com>\n\n        * doc/tm.texi (MD_CAN_REDIRECT_BRANCH): New macro.\n        * config/sh/sh.h (MD_CAN_REDIRECT_BRANCH): New macro.\n        * config/sh/sh.c (sh_can_redirect_branch): New function.\n        * config/sh/sh-protos.h (sh_can_redirect_branch): Declare.\n        * reorg.c (steal_delay_list_from_target): Use\n        MD_CAN_REDIRECT_BRANCH to see if redirection is possible.\n\nFrom-SVN: r44269", "tree": {"sha": "ef220d1f1710bdd39aaddf1da18b1709fc794695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef220d1f1710bdd39aaddf1da18b1709fc794695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e7b03e1f570004801b93a701f38ca76e8609375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7b03e1f570004801b93a701f38ca76e8609375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e7b03e1f570004801b93a701f38ca76e8609375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e7b03e1f570004801b93a701f38ca76e8609375/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0dd94abd70d7b14b56d60eac7333cdd9f028d278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd94abd70d7b14b56d60eac7333cdd9f028d278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd94abd70d7b14b56d60eac7333cdd9f028d278"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "b49083981f8a790a34e33f61a5a888ec95814352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -1,3 +1,12 @@\n+2001-07-13  Andrew Haley  <aph@redhat.com>\n+\n+        * doc/tm.texi (MD_CAN_REDIRECT_BRANCH): New macro.\n+        * config/sh/sh.h (MD_CAN_REDIRECT_BRANCH): New macro.\n+        * config/sh/sh.c (sh_can_redirect_branch): New function.\n+        * config/sh/sh-protos.h (sh_can_redirect_branch): Declare.\n+        * reorg.c (steal_delay_list_from_target): Use\n+        MD_CAN_REDIRECT_BRANCH to see if redirection is possible.\n+\n Mon Jul 23 17:20:18 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* flow.c (try_simplify_condjump): Unlink insn chain on"}, {"sha": "f11f2e2f74bfacb7e922d356a7e719625c27c188", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -98,6 +98,7 @@ extern void expand_df_unop PARAMS ((rtx (*)(rtx, rtx, rtx), rtx *));\n extern void expand_df_binop PARAMS ((rtx (*)(rtx, rtx, rtx, rtx), rtx *));\n extern void expand_fp_branch PARAMS ((rtx (*)(void), rtx (*)(void)));\n extern int sh_insn_length_adjustment PARAMS ((rtx));\n+extern int sh_can_redirect_branch PARAMS ((rtx, rtx));\n #ifdef TREE_CODE\n extern void sh_va_start PARAMS ((int, tree, rtx));\n extern rtx sh_va_arg PARAMS ((tree, tree));"}, {"sha": "ec09d08b66629a47c34cb44146c3c33a2c4d02b0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -5515,3 +5515,40 @@ static rtx mark_constant_pool_use (x)\n \n   return lab;\n }\n+\f\n+/* Return true if it's possible to redirect BRANCH1 to the destination\n+   of an unconditional jump BRANCH2.  We only want to do this if the\n+   resulting branch will have a short displacement.  */\n+int \n+sh_can_redirect_branch (branch1, branch2)\n+     rtx branch1;\n+     rtx branch2;\n+{\n+  if (flag_expensive_optimizations && simplejump_p (branch2))\n+    {\n+      rtx dest = XEXP (SET_SRC (single_set (branch2)), 0);\n+      rtx insn;\n+      int distance;\n+      \n+      for (distance = 0, insn = NEXT_INSN (branch1); \n+\t   insn && distance < 256; \n+\t   insn = PREV_INSN (insn))\n+\t{\n+\t  if (insn == dest)    \n+\t    return 1;\n+\t  else\n+\t    distance += get_attr_length (insn);\n+\t}\n+      for (distance = 0, insn = NEXT_INSN (branch1); \n+\t   insn && distance < 256; \n+\t   insn = NEXT_INSN (insn))\n+\t{\n+\t  if (insn == dest)    \n+\t    return 1;\n+\t  else\n+\t    distance += get_attr_length (insn);\n+\t}\n+    }\n+  return 0;\n+}\n+"}, {"sha": "cc17258353fb5e33246c5c74f0ab82e2f837a7f6", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -2421,6 +2421,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EMIT_MODE_SET(ENTITY, MODE, HARD_REGS_LIVE) \\\n   fpscr_set_from_mem ((MODE), (HARD_REGS_LIVE))\n \n+#define MD_CAN_REDIRECT_BRANCH(INSN, SEQ) \\\n+  sh_can_redirect_branch ((INSN), (SEQ))\n+\n #define DWARF_LINE_MIN_INSTR_LENGTH 2\n \n /* SH constant pool breaks the devices in crtstuff.c to control section"}, {"sha": "81a55828c2eb0aaded57b86285f5c04e02acf9f4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -8681,4 +8681,15 @@ ignored.  This function should return the result of the call to the\n built-in function.\n @end deftypefn\n \n+@findex MD_CAN_REDIRECT_BRANCH\n+@item MD_CAN_REDIRECT_BRANCH(@var{branch1}, @var{branch2})\n+\n+Take a branch insn in @var{branch1} and a another in @var{branch2}.\n+Return true if redirecting @var{branch1} to the destination of\n+@var{branch2} is possible.\n+\n+On some targets, branches may have a limited range.  Optimizing the\n+filling of delay slots can result in branches being redirected, and this\n+may in turn cause a branch offset to overflow.\n+\n @end table"}, {"sha": "3177e7117dd8e5abd33a06a007ab7604ab3d38c9", "filename": "gcc/reorg.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e7b03e1f570004801b93a701f38ca76e8609375/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=6e7b03e1f570004801b93a701f38ca76e8609375", "patch": "@@ -1272,6 +1272,14 @@ steal_delay_list_from_target (insn, condition, seq, delay_list,\n       || ! single_set (XVECEXP (seq, 0, 0)))\n     return delay_list;\n \n+#ifdef MD_CAN_REDIRECT_BRANCH\n+  /* On some targets, branches with delay slots can have a limited\n+     displacement.  Give the back end a chance to tell us we can't do\n+     this.  */\n+  if (! MD_CAN_REDIRECT_BRANCH (insn, XVECEXP (seq, 0, 0)))\n+    return delay_list;\n+#endif\n+\n   for (i = 1; i < XVECLEN (seq, 0); i++)\n     {\n       rtx trial = XVECEXP (seq, 0, i);"}]}