{"sha": "1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3YThkY2NkNDA1NmJlMTk3ZThmNzlmZTdiYmYyYjhiZDg5YzUzYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-05-31T17:01:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-05-31T17:01:17Z"}, "message": "re PR c++/15069 (a bit test on a variable of enum type is miscompiled)\n\n\n\tPR middle-end/15069\n\t* fold-const.c (fold_single_bit_test): Only perform \"(X & C) != 0\"\n\tinto \"X < 0\" (where C is the signbit) if X's type is a full mode.\n\n\t* g++.dg/opt/fold3.C: New test case.\n\nFrom-SVN: r82490", "tree": {"sha": "eac927b74d933af84e28ee45cd568925d8de1411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eac927b74d933af84e28ee45cd568925d8de1411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/comments", "author": null, "committer": null, "parents": [{"sha": "1027314a211e7b0e2b05b6bd8f179c12f784517e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1027314a211e7b0e2b05b6bd8f179c12f784517e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1027314a211e7b0e2b05b6bd8f179c12f784517e"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "cea33d1852c65bfd7d3c34eb3b8f70be3f63896d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "patch": "@@ -1,3 +1,9 @@\n+2004-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/15069\n+\t* fold-const.c (fold_single_bit_test): Only perform \"(X & C) != 0\"\n+\tinto \"X < 0\" (where C is the signbit) if X's type is a full mode.\n+\n 2004-05-31  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md: Disable the peephole2 patterns that generate indexed"}, {"sha": "b0d1db29237d4fcd2422ecb6f03963cf77332afb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "patch": "@@ -5413,18 +5413,18 @@ fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n       /* If we have (A & C) != 0 where C is the sign bit of A, convert\n \t this into A < 0.  Similarly for (A & C) == 0 into A >= 0.  */\n       arg00 = sign_bit_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg0, 1));\n-      if (arg00 != NULL_TREE)\n+      if (arg00 != NULL_TREE\n+\t  /* This is only a win if casting to a signed type is cheap,\n+\t     i.e. when arg00's type is not a partial mode.  */\n+\t  && TYPE_PRECISION (TREE_TYPE (arg00))\n+\t     == GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (arg00))))\n \t{\n \t  tree stype = lang_hooks.types.signed_type (TREE_TYPE (arg00));\n \t  return fold (build2 (code == EQ_EXPR ? GE_EXPR : LT_EXPR,\n \t\t\t       result_type, fold_convert (stype, arg00),\n \t\t\t       fold_convert (stype, integer_zero_node)));\n \t}\n \n-      /* At this point, we know that arg0 is not testing the sign bit.  */\n-      if (TYPE_PRECISION (type) - 1 == bitnum)\n-\tabort ();\n-      \n       /* Otherwise we have (A & C) != 0 where C is a single bit, \n \t convert that into ((A >> C2) & 1).  Where C2 = log2(C).\n \t Similarly for (A & C) == 0.  */"}, {"sha": "47ed126ef8b7b608fc3ad4f30204840ae0c50faf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "patch": "@@ -1,3 +1,8 @@\n+2004-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/15069\n+\t* g++.dg/opt/fold3.C: New test case.\n+\n 2004-05-30  Graham Stott  <graham.stott@btinternet.com>\n \n \t* lib/target-supports.exp (check_iconv_available): Fix fallout"}, {"sha": "87a36b9ad493a25a5f689addd8777ec6fa5818a3", "filename": "gcc/testsuite/g++.dg/opt/fold3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffold3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffold3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffold3.C?ref=1f7a8dccd4056be197e8f79fe7bbf2b8bd89c53b", "patch": "@@ -0,0 +1,21 @@\n+// PR middle-end/15069\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort (void);\n+\n+typedef enum {\n+  FOUR = 4,\n+  FIVE = 5\n+} direction_t;\n+\n+int main ()\n+{\n+  direction_t four = FOUR;\n+  int flags = (four & 4L) ? (32L | 128L) : 0;\n+  flags &= 32L;\n+\n+  if (flags == 0)\n+    abort ();\n+}\n+"}]}