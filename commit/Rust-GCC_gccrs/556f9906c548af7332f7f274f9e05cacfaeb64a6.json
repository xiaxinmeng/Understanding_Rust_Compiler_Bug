{"sha": "556f9906c548af7332f7f274f9e05cacfaeb64a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2Zjk5MDZjNTQ4YWY3MzMyZjdmMjc0ZjllMDVjYWNmYWViNjRhNg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-25T09:28:09Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-25T09:28:09Z"}, "message": "re PR target/54222 ([avr] Implement fixed-point support)\n\ngcc/\n\tPR target/54222\n\t* config/avr/builtins.def (DEF_BUILTIN): Add LIBNAME argument.\n\tAdd NULL LIBNAME argument to existing definitions.\n\t(ABSHR, ABSR, ABSLR, ABSLLR, ABSHK, ABSK, ABSLK, ABSLLK): New.\n\t* config/avr/avr-c.c (DEF_BUILTIN): Add LIBNAME argument.\n\t* config/avr/avr.c (DEF_BUILTIN): Same.\n\t(avr_init_builtins): Pass down LIBNAME to add_builtin_function.\n\t(avr_expand_builtin): Expand to a vanilla call if a libgcc\n\timplementation is available (DECL_ASSEMBLER_NAME is set).\n\t(avr_fold_absfx): New static function.\n\t(avr_fold_builtin): Use it to handle: AVR_BUILTIN_ABSHR,\n\tAVR_BUILTIN_ABSR, AVR_BUILTIN_ABSLR, AVR_BUILTIN_ABSLLR,\n\tAVR_BUILTIN_ABSHK, AVR_BUILTIN_ABSK, AVR_BUILTIN_ABSLK,\n\tAVR_BUILTIN_ABSLLK.\n\t* config/avr/stdfix.h (abshr, absr, abslr, absllr)\n\t(abshk, absk, abslk, absllk): Provide as static inline functions.\n\ngcc/testsuite/\n\tPR target/54222\n\t* gcc.target/avr/torture/builtins-3-absfx.c: New test.\n\nFrom-SVN: r195464", "tree": {"sha": "918c673cf4287a1ff60b0fbe521ff2d09b487c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/918c673cf4287a1ff60b0fbe521ff2d09b487c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/556f9906c548af7332f7f274f9e05cacfaeb64a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556f9906c548af7332f7f274f9e05cacfaeb64a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556f9906c548af7332f7f274f9e05cacfaeb64a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556f9906c548af7332f7f274f9e05cacfaeb64a6/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f546bbbc4dcc9cf044310cf0eafb091415df614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f546bbbc4dcc9cf044310cf0eafb091415df614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f546bbbc4dcc9cf044310cf0eafb091415df614"}], "stats": {"total": 419, "additions": 389, "deletions": 30}, "files": [{"sha": "cb97d62ce7c8b377dea9a774fa3505c3edec700e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -1,3 +1,22 @@\n+2013-01-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54222\n+\t* config/avr/builtins.def (DEF_BUILTIN): Add LIBNAME argument.\n+\tAdd NULL LIBNAME argument to existing definitions.\n+\t(ABSHR, ABSR, ABSLR, ABSLLR, ABSHK, ABSK, ABSLK, ABSLLK): New.\n+\t* config/avr/avr-c.c (DEF_BUILTIN): Add LIBNAME argument.\n+\t* config/avr/avr.c (DEF_BUILTIN): Same.\n+\t(avr_init_builtins): Pass down LIBNAME to add_builtin_function.\n+\t(avr_expand_builtin): Expand to a vanilla call if a libgcc\n+\timplementation is available (DECL_ASSEMBLER_NAME is set).\n+\t(avr_fold_absfx): New static function.\n+\t(avr_fold_builtin): Use it to handle: AVR_BUILTIN_ABSHR,\n+\tAVR_BUILTIN_ABSR, AVR_BUILTIN_ABSLR, AVR_BUILTIN_ABSLLR,\n+\tAVR_BUILTIN_ABSHK, AVR_BUILTIN_ABSK, AVR_BUILTIN_ABSLK,\n+\tAVR_BUILTIN_ABSLLK.\n+\t* config/avr/stdfix.h (abshr, absr, abslr, absllr)\n+\t(abshk, absk, abslk, absllk): Provide as static inline functions.\n+\n 2013-01-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/56035"}, {"sha": "ddcab546076749b2c2c0020c901ab4f237633458", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -168,7 +168,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   /* Define builtin macros so that the user can easily query whether or\n      not a specific builtin is available. */\n \n-#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)   \\\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE, LIBNAME)  \\\n   cpp_define (pfile, \"__BUILTIN_AVR_\" #NAME);\n #include \"builtins.def\"\n #undef DEF_BUILTIN"}, {"sha": "c833bfbaa79bac5b5c5cc6e64874830094e3dd11", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 79, "deletions": 5, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -11384,7 +11384,7 @@ avr_out_insert_bits (rtx *op, int *plen)\n \n enum avr_builtin_id\n   {\n-#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)   \\\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE, LIBNAME)  \\\n     AVR_BUILTIN_ ## NAME,\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n@@ -11407,7 +11407,7 @@ struct GTY(()) avr_builtin_description\n static GTY(()) struct avr_builtin_description\n avr_bdesc[AVR_BUILTIN_COUNT] =\n   {\n-#define DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE)                  \\\n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE, LIBNAME)         \\\n     { (enum insn_code) CODE_FOR_ ## ICODE, N_ARGS, NULL_TREE },\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n@@ -11489,7 +11489,33 @@ avr_init_builtins (void)\n                                 const_memx_ptr_type_node,\n                                 NULL);\n \n-#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE)                           \\\n+  tree hr_ftype_hr\n+    = build_function_type_list (short_fract_type_node,\n+                                short_fract_type_node, NULL);\n+  tree r_ftype_r\n+    = build_function_type_list (fract_type_node,\n+                                fract_type_node, NULL);\n+  tree lr_ftype_lr\n+    = build_function_type_list (long_fract_type_node,\n+                                long_fract_type_node, NULL);\n+  tree llr_ftype_llr\n+    = build_function_type_list (long_long_fract_type_node,\n+                                long_long_fract_type_node, NULL);\n+\n+  tree hk_ftype_hk\n+    = build_function_type_list (short_accum_type_node,\n+                                short_accum_type_node, NULL);\n+  tree k_ftype_k\n+    = build_function_type_list (accum_type_node,\n+                                accum_type_node, NULL);\n+  tree lk_ftype_lk\n+    = build_function_type_list (long_accum_type_node,\n+                                long_accum_type_node, NULL);\n+  tree llk_ftype_llk\n+    = build_function_type_list (long_long_accum_type_node,\n+                                long_long_accum_type_node, NULL);\n+  \n+#define DEF_BUILTIN(NAME, N_ARGS, TYPE, CODE, LIBNAME)                  \\\n   {                                                                     \\\n     int id = AVR_BUILTIN_ ## NAME;                                      \\\n     const char *Name = \"__builtin_avr_\" #NAME;                          \\\n@@ -11498,7 +11524,7 @@ avr_init_builtins (void)\n     gcc_assert (id < AVR_BUILTIN_COUNT);                                \\\n     avr_bdesc[id].fndecl                                                \\\n       = add_builtin_function (avr_tolower (name, Name), TYPE, id,       \\\n-                              BUILT_IN_MD, NULL, NULL_TREE);            \\\n+                              BUILT_IN_MD, LIBNAME, NULL_TREE);         \\\n   }\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n@@ -11580,7 +11606,7 @@ static rtx\n avr_expand_builtin (tree exp, rtx target,\n                     rtx subtarget ATTRIBUTE_UNUSED,\n                     enum machine_mode mode ATTRIBUTE_UNUSED,\n-                    int ignore ATTRIBUTE_UNUSED)\n+                    int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   const char *bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n@@ -11624,6 +11650,14 @@ avr_expand_builtin (tree exp, rtx target,\n       }\n     }\n \n+  /* No fold found and no insn:  Call support function from libgcc.  */\n+\n+  if (d->icode == CODE_FOR_nothing\n+      && DECL_ASSEMBLER_NAME (get_callee_fndecl (exp)) != NULL_TREE)\n+    {\n+      return expand_call (exp, target, ignore);\n+    }\n+\n   /* No special treatment needed: vanilla expand.  */\n \n   gcc_assert (d->icode != CODE_FOR_nothing);\n@@ -11639,6 +11673,33 @@ avr_expand_builtin (tree exp, rtx target,\n }\n \n \n+/* Helper for `avr_fold_builtin' that folds  absfx (FIXED_CST).  */\n+\n+static tree\n+avr_fold_absfx (tree tval)\n+{\n+  if (FIXED_CST != TREE_CODE (tval))\n+    return NULL_TREE;\n+\n+  /* Our fixed-points have no padding:  Use double_int payload directly.  */\n+\n+  FIXED_VALUE_TYPE fval = TREE_FIXED_CST (tval);\n+  unsigned int bits = GET_MODE_BITSIZE (fval.mode);\n+  double_int ival = fval.data.sext (bits);\n+\n+  if (!ival.is_negative())\n+    return tval;\n+\n+  /* ISO/IEC TR 18037, 7.18a.6.2:  The absfx functions are saturating.  */\n+\n+  fval.data = (ival == double_int::min_value (bits, false).sext (bits))\n+    ? double_int::max_value (bits, false)\n+    : -ival;\n+\n+  return build_fixed (TREE_TYPE (tval), fval);\n+}\n+\n+\n /* Implement `TARGET_FOLD_BUILTIN'.  */\n \n static tree\n@@ -11662,6 +11723,19 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n                             build_int_cst (val_type, 4));\n       }\n \n+    case AVR_BUILTIN_ABSHR:\n+    case AVR_BUILTIN_ABSR:\n+    case AVR_BUILTIN_ABSLR:\n+    case AVR_BUILTIN_ABSLLR:\n+\n+    case AVR_BUILTIN_ABSHK:\n+    case AVR_BUILTIN_ABSK:\n+    case AVR_BUILTIN_ABSLK:\n+    case AVR_BUILTIN_ABSLLK:\n+      /* GCC is not good with folding ABS for fixed-point.  Do it by hand.  */\n+\n+      return avr_fold_absfx (arg[0]);\n+\n     case AVR_BUILTIN_INSERT_BITS:\n       {\n         tree tbits = arg[1];"}, {"sha": "ecce186870d88f3bf08108e2599d27a11f40fe40", "filename": "gcc/config/avr/builtins.def", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -20,35 +20,53 @@\n    builtins defined in the AVR part of the GNU compiler.\n    Befor including this file, define a macro\n \n-   DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE)\n+   DEF_BUILTIN(NAME, N_ARGS, TYPE, ICODE, LIBNAME)\n \n-   NAME:   `__builtin_avr_name' will be the user-level name of the builtin.\n-           `AVR_BUILTIN_NAME' will be the internal builtin's id.\n-   N_ARGS: Number of input arguments.  If special treatment is needed,\n-           set to -1 and handle it by hand, see avr.c:avr_expand_builtin().\n-   TYPE:   A tree node describing the prototype of the built-in.\n-   ICODE:  Name of attached insn or expander.  If special treatment in avr.c\n-           is needed to expand the built-in, use `nothing'.\n-*/\n+   NAME:    `__builtin_avr_name' will be the user-level name of the builtin.\n+            `AVR_BUILTIN_NAME' will be the internal builtin's id.\n+   N_ARGS:  Number of input arguments.  If special treatment is needed,\n+            set to -1 and handle it by hand, see avr.c:avr_expand_builtin().\n+   TYPE:    A tree node describing the prototype of the built-in.\n+   ICODE:   Name of attached insn or expander.  If special treatment in avr.c\n+            is needed to expand the built-in, use `nothing'.\n+   LIBNAME: Name of the attached implementation in libgcc which is used if\n+            the builtin cannot be folded away and there is no insn.  */\n \n /* Mapped to respective instruction.  */\n \n-DEF_BUILTIN (NOP,  -1, void_ftype_void, nothing)\n-DEF_BUILTIN (SEI,   0, void_ftype_void, enable_interrupt)\n-DEF_BUILTIN (CLI,   0, void_ftype_void, disable_interrupt)\n-DEF_BUILTIN (WDR,   0, void_ftype_void, wdr)\n-DEF_BUILTIN (SLEEP, 0, void_ftype_void, sleep)\n+DEF_BUILTIN (NOP,  -1, void_ftype_void, nothing, NULL)\n+DEF_BUILTIN (SEI,   0, void_ftype_void, enable_interrupt, NULL)\n+DEF_BUILTIN (CLI,   0, void_ftype_void, disable_interrupt, NULL)\n+DEF_BUILTIN (WDR,   0, void_ftype_void, wdr, NULL)\n+DEF_BUILTIN (SLEEP, 0, void_ftype_void, sleep, NULL)\n \n /* Mapped to respective instruction but might also be folded away\n    or emit as libgcc call if ISA does not provide the instruction.  */\n \n-DEF_BUILTIN (SWAP,   1, uchar_ftype_uchar,      rotlqi3_4)\n-DEF_BUILTIN (FMUL,   2, uint_ftype_uchar_uchar, fmul)\n-DEF_BUILTIN (FMULS,  2, int_ftype_char_char,    fmuls)\n-DEF_BUILTIN (FMULSU, 2, int_ftype_char_uchar,   fmulsu)\n+DEF_BUILTIN (SWAP,   1, uchar_ftype_uchar,      rotlqi3_4, NULL)\n+DEF_BUILTIN (FMUL,   2, uint_ftype_uchar_uchar, fmul, NULL)\n+DEF_BUILTIN (FMULS,  2, int_ftype_char_char,    fmuls, NULL)\n+DEF_BUILTIN (FMULSU, 2, int_ftype_char_uchar,   fmulsu, NULL)\n \n /* More complex stuff that cannot be mapped 1:1 to an instruction.  */\n \n-DEF_BUILTIN (DELAY_CYCLES, -1, void_ftype_ulong, nothing)\n-DEF_BUILTIN (INSERT_BITS, 3, uchar_ftype_ulong_uchar_uchar, insert_bits)\n-DEF_BUILTIN (FLASH_SEGMENT, 1, char_ftype_const_memx_ptr, flash_segment)\n+DEF_BUILTIN (DELAY_CYCLES, -1, void_ftype_ulong, nothing, NULL)\n+DEF_BUILTIN (INSERT_BITS, 3, uchar_ftype_ulong_uchar_uchar, insert_bits, NULL)\n+DEF_BUILTIN (FLASH_SEGMENT, 1, char_ftype_const_memx_ptr, flash_segment, NULL)\n+\n+/* ISO/IEC TR 18037 \"Embedded C\"\n+   The following builtins are undocumented and used by stdfix.h.  */\n+\n+/* 7.18a.6 The fixed-point intrinsic functions. */\n+\n+/* 7.18a.6.2 The fixed-point absolute value functions. */\n+\n+DEF_BUILTIN (ABSHR,   1, hr_ftype_hr,   ssabsqq2, NULL)\n+DEF_BUILTIN (ABSR,    1, r_ftype_r,     ssabshq2, NULL)\n+DEF_BUILTIN (ABSLR,   1, lr_ftype_lr,   ssabssq2, NULL)\n+DEF_BUILTIN (ABSLLR,  1, llr_ftype_llr, nothing, \"__ssabsdq2\") // GCC extension\n+\n+DEF_BUILTIN (ABSHK,   1, hk_ftype_hk,   ssabsha2, NULL)\n+DEF_BUILTIN (ABSK,    1, k_ftype_k,     ssabssa2, NULL)\n+DEF_BUILTIN (ABSLK,  -1, lk_ftype_lk,   nothing, \"__ssabsda2\")\n+DEF_BUILTIN (ABSLLK, -1, llk_ftype_llk, nothing, \"__ssabsta2\") // GCC extension"}, {"sha": "b86195a3f16ab64b2927cdecba7d2242978a5fc5", "filename": "gcc/config/avr/stdfix.h", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Fstdfix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Fconfig%2Favr%2Fstdfix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fstdfix.h?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -35,12 +35,11 @@\n \n #include <stdfix-gcc.h>\n \n-/* 2.1.7.4 The bitwise fixed-point to integer conversion functions.  */\n-/* 2.1.7.5 The bitwise integer to fixed-point conversion functions.  */\n-\n #define _GCC_TYPEPUN(A, B)                      \\\n   __builtin_memcpy (&A, &B, sizeof (A))\n \n+/* 7.18a.6  The fixed-point intrinsic functions.  */\n+\n #if __SIZEOF_INT__ == 2\n \n typedef signed char int_hr_t;\n@@ -88,6 +87,79 @@ typedef long long unsigned int uint_uk_t;\n #endif /* __SIZEOF_INT__ == 2 */\n \n \n+/* 7.18a.6.2 The fixed-point absolute value functions. */\n+\n+/* short fract (hr): abshr */\n+\n+static __inline__ __attribute__((__always_inline__))\n+short fract abshr (const short fract __q)\n+{\n+  return __builtin_avr_abshr (__q);\n+}\n+\n+/* fract (r): absr */\n+\n+static __inline__ __attribute__((__always_inline__))\n+fract absr (const fract __q)\n+{\n+  return __builtin_avr_absr (__q);\n+}\n+\n+/* long fract (lr): abslr */\n+\n+static __inline__ __attribute__((__always_inline__))\n+long fract abslr (const long fract __q)\n+{\n+  return __builtin_avr_abslr (__q);\n+}\n+\n+/* short accum (hk): abshk */\n+\n+static __inline__ __attribute__((__always_inline__))\n+short accum abshk (const short accum __q)\n+{\n+  return __builtin_avr_abshk (__q);\n+}\n+\n+/* accum (k): absk */\n+\n+static __inline__ __attribute__((__always_inline__))\n+accum absk (const accum __q)\n+{\n+  return __builtin_avr_absk (__q);\n+}\n+\n+#if __SIZEOF_INT__ == 2\n+\n+/* long long fract (llr): absllr */\n+\n+static __inline__ __attribute__((__always_inline__))\n+long long fract absllr (const long long fract __q) /* GCC extension */\n+{\n+  return __builtin_avr_absllr (__q);\n+}\n+\n+/* long accum (lk): abslk */\n+\n+static __inline__ __attribute__((__always_inline__))\n+long accum abslk (const long accum __q)\n+{\n+  return __builtin_avr_abslk (__q);\n+}\n+\n+/* long long accum (llk): absllk */\n+\n+static __inline__ __attribute__((__always_inline__))\n+long long accum absllk (const long long accum __q) /* GCC extension */\n+{\n+  return __builtin_avr_absllk (__q);\n+}\n+\n+#endif /* __SIZEOF_INT__ == 2 */\n+\n+\n+/* 7.18a.6.5 The bitwise fixed-point to integer conversion functions. */\n+/* 7.18a.6.6 The bitwise integer to fixed-point conversion functions. */\n \n /* short fract (hr): bitshr, bitsuhr, hrbits, uhrbits */\n "}, {"sha": "d00476ef161690761919560e06b167293ac805a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -1,3 +1,8 @@\n+2013-01-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54222\n+\t* gcc.target/avr/torture/builtins-3-absfx.c: New test.\n+\n 2013-01-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/56035"}, {"sha": "a8bde2952d74320af3cf048c20324193457ef88e", "filename": "gcc/testsuite/gcc.target/avr/torture/builtins-3-absfx.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-3-absfx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f9906c548af7332f7f274f9e05cacfaeb64a6/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-3-absfx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fbuiltins-3-absfx.c?ref=556f9906c548af7332f7f274f9e05cacfaeb64a6", "patch": "@@ -0,0 +1,171 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#include <stdfix.h>\n+\n+extern void abort (void);\n+\n+short fract test1_hr (short fract x)\n+{\n+  return abshr (x);\n+}\n+\n+fract test1_r (fract x)\n+{\n+  return absr (x);\n+}\n+\n+long fract test1_lr (long fract x)\n+{\n+  return abslr (x);\n+}\n+\n+long long fract test1_llr (long long fract x)\n+{\n+  return absllr (x);\n+}\n+\n+short accum test1_hk (short accum x)\n+{\n+  return abshk (x);\n+}\n+\n+accum test1_k (accum x)\n+{\n+  return absk (x);\n+}\n+\n+long accum test1_lk (long accum x)\n+{\n+  return abslk (x);\n+}\n+\n+long long accum test1_llk (long long accum x)\n+{\n+  return absllk (x);\n+}\n+\n+\n+short fract test2_hr (void)\n+{\n+  return abshr (-0.12hr);\n+}\n+\n+fract test2_r (void)\n+{\n+  return absr (-0.12r);\n+}\n+\n+long fract test2_lr (void)\n+{\n+  return abslr (-0.12lr);\n+}\n+\n+long long fract test2_llr (void)\n+{\n+  return absllr (-0.123456llr);\n+}\n+\n+short accum test2_hk (void)\n+{\n+  return abshk (-221.12hk);\n+}\n+\n+accum test2_k (void)\n+{\n+  return absk (-4321.12k);\n+}\n+\n+long accum test2_lk (void)\n+{\n+  return abslk (-4321.12lk);\n+}\n+\n+long long accum test2_llk (void)\n+{\n+  return absllk (-4321.12llk);\n+}\n+\n+#define TEST1(VAL,FX)                                          \\\n+  if (abs ## FX (-VAL ## FX -v) != VAL ## FX + v)              \\\n+    abort();                                                   \\\n+  if (abs ## FX (-VAL ## FX -v) != abs ## FX (VAL ## FX + v))  \\\n+    abort();\n+\n+#define TEST2(VAL,FX)                                   \\\n+  if (abs ## FX (-VAL ## FX) != VAL ## FX)              \\\n+    abort();                                            \\\n+  if (abs ## FX (-VAL ## FX) != abs ## FX (VAL ## FX))  \\\n+    abort();\n+\n+const __flash short fract volatile v = 0.33hr;\n+const __flash short fract volatile z = 0hr;\n+\n+void test1 (void)\n+{\n+  TEST1 (0.123, hr);\n+  TEST1 (0.123, r);\n+  TEST1 (0.1234567, lr);\n+  TEST1 (0.1234567, llr);\n+  \n+  TEST1 (223.123, hk);\n+  TEST1 (12345.123, k);\n+  TEST1 (12342345.123, lk);\n+  TEST1 (12345.123, llk);\n+}\n+\n+\n+void test2 (void)\n+{\n+  TEST2 (0.123, hr);\n+  TEST2 (0.123, r);\n+  TEST2 (0.1234567, lr);\n+  TEST2 (0.1234567, llr);\n+  \n+  TEST2 (223.123, hk);\n+  TEST2 (12345.123, k);\n+  TEST2 (12342345.123, lk);\n+  TEST2 (12345.123, llk);\n+}\n+\n+#define MINMAX(T,FX)                                                    \\\n+  {                                                                     \\\n+    int_ ## FX ## _t imin                                               \\\n+      = (int_ ## FX ## _t) 1 << (8 * sizeof (int_ ## FX ## _t) -1);     \\\n+    int_ ## FX ## _t imax = ~imin;                                      \\\n+    T fmin =  FX ## bits (imin);                                        \\\n+    T fmax =  FX ## bits (imax);                                        \\\n+                                                                        \\\n+    if (abs ## FX (fmin) != fmax)                                       \\\n+      abort();                                                          \\\n+    if (abs ## FX (fmin) != abs ## FX (fmax))                           \\\n+      abort();                                                          \\\n+    if (abs ## FX (fmin + z) != fmax + z)                               \\\n+      abort();                                                          \\\n+    if (abs ## FX (fmin - z) != abs ## FX (fmax + z))                   \\\n+      abort();                                                          \\\n+  }\n+\n+void test3 (void)\n+{\n+  MINMAX (short fract, hr);\n+  MINMAX (fract, r);\n+  MINMAX (long fract, lr);\n+  MINMAX (long long fract, llr);\n+\n+  MINMAX (short accum, hk);\n+  MINMAX (accum, k);\n+  MINMAX (long accum, lk);\n+  MINMAX (long long accum, llk);\n+}\n+\n+\n+int main (void)\n+{\n+  test1();\n+  test2();\n+  test3();\n+\n+  return 0;\n+}\n+"}]}