{"sha": "07e857c23f6f011ce26ca409510253e1f22e3a49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlODU3YzIzZjZmMDExY2UyNmNhNDA5NTEwMjUzZTFmMjJlM2E0OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-11T19:52:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-08-11T19:52:01Z"}, "message": "(loop_optimize): Delete uses of loop_number_first_block,\n\nloop_number_last_block, loop_number_block_level.  Correct call of\nfind_loop_tree_blocks.  Add call to unroll_block_trees.\n\nFrom-SVN: r1799", "tree": {"sha": "56864b3cbd8be7c925659f532228babc03f2a1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56864b3cbd8be7c925659f532228babc03f2a1cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e857c23f6f011ce26ca409510253e1f22e3a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e857c23f6f011ce26ca409510253e1f22e3a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e857c23f6f011ce26ca409510253e1f22e3a49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e857c23f6f011ce26ca409510253e1f22e3a49/comments", "author": null, "committer": null, "parents": [{"sha": "ba534a45c7c54378a96328b634cd5e0a1fa8ca9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba534a45c7c54378a96328b634cd5e0a1fa8ca9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba534a45c7c54378a96328b634cd5e0a1fa8ca9a"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "f0500171b8f140c69dcf3eee4d6541cf3d59f1c9", "filename": "gcc/loop.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e857c23f6f011ce26ca409510253e1f22e3a49/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e857c23f6f011ce26ca409510253e1f22e3a49/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=07e857c23f6f011ce26ca409510253e1f22e3a49", "patch": "@@ -377,17 +377,6 @@ loop_optimize (f, dumpfile)\n   loop_invalid = (char *) alloca (max_loop_num * sizeof (char));\n   loop_number_exit_labels = (rtx *) alloca (max_loop_num * sizeof (rtx));\n \n-  if (flag_unroll_loops && write_symbols != NO_DEBUG)\n-    {\n-      loop_number_first_block\n-\t= (union tree_node **) alloca (max_loop_num\n-\t\t\t\t       * sizeof (union tree_node *));\n-      loop_number_last_block\n-\t= (union tree_node **) alloca (max_loop_num\n-\t\t\t\t       * sizeof (union tree_node *));\n-      loop_number_block_level = (int *) alloca (max_loop_num * sizeof (int));\n-    }\n-\n   /* Find and process each loop.\n      First, find them, and record them in order of their beginnings.  */\n   find_and_verify_loops (f);\n@@ -433,14 +422,20 @@ loop_optimize (f, dumpfile)\n \n   /* Create a mapping from loops to BLOCK tree nodes.  */\n   if (flag_unroll_loops && write_symbols != NO_DEBUG)\n-    find_loop_tree_blocks (f);\n+    find_loop_tree_blocks ();\n \n   /* Now scan the loops, last ones first, since this means inner ones are done\n      before outer ones.  */\n   for (i = max_loop_num-1; i >= 0; i--)\n     if (! loop_invalid[i] && loop_number_loop_ends[i])\n       scan_loop (loop_number_loop_starts[i], loop_number_loop_ends[i],\n \t\t max_reg_num ());\n+\n+  /* If debugging and unrolling loops, we must replicate the tree nodes\n+     corresponding to the blocks inside the loop, so that the original one\n+     to one mapping will remain.  */\n+  if (flag_unroll_loops && write_symbols != NO_DEBUG)\n+    unroll_block_trees ();\n }\n \f\n /* Optimize one loop whose start is LOOP_START and end is END."}]}