{"sha": "5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyYzk5YzQzYjc2ZTdkNGJjNDZlNDQ1ZWFhMDQyMDFjODI3ZmZlMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-04T20:10:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-04T20:10:49Z"}, "message": "pt.c (pop_tinst_level): Call extract_interface_info.\n\n\t* pt.c (pop_tinst_level): Call extract_interface_info.\n\t(instantiate_decl): Don't save and restore file position.\n\t* decl.c (cp_finish_decl): Make statics in extern inlines and\n\ttemplates common, if possible and the target doesn't support weak\n\tsymbols.\n\nFrom-SVN: r22824", "tree": {"sha": "2ec58476dda414b813c07876ff61079e5009558b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ec58476dda414b813c07876ff61079e5009558b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/comments", "author": null, "committer": null, "parents": [{"sha": "b4558b577c353fad6143feb814c54d8e99931a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4558b577c353fad6143feb814c54d8e99931a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4558b577c353fad6143feb814c54d8e99931a7b"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "d803d39328e20351cce85fe3be1e264ce33cf312", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "patch": "@@ -1,5 +1,12 @@\n 1998-10-04  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* pt.c (pop_tinst_level): Call extract_interface_info.\n+\t(instantiate_decl): Don't save and restore file position.\n+\n+\t* decl.c (cp_finish_decl): Make statics in extern inlines and\n+\ttemplates common, if possible and the target doesn't support weak\n+\tsymbols.\n+\n \t* decl.c (grokdeclarator): Remove redundant calls to\n \tbuild_type_variant and some duplicated code.\n \t* sig.c (build_signature_reference_type): Only take the type parm."}, {"sha": "cae72561e0cafcd3a56305415f168d3176351c0e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "patch": "@@ -7298,20 +7298,52 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       if (was_temp)\n \tend_temporary_allocation ();\n \n-      /* Extern inline function static data has external linkage.\n-         Instead of trying to deal with that, we disable inlining of\n-         such functions.  The ASM_WRITTEN check is to avoid hitting this\n-         for __FUNCTION__.  */\n+      /* Static data in a function with comdat linkage also has comdat\n+         linkage.  */\n       if (TREE_CODE (decl) == VAR_DECL\n \t  && TREE_STATIC (decl)\n+\t  /* Don't mess with __FUNCTION__.  */\n \t  && ! TREE_ASM_WRITTEN (decl)\n \t  && current_function_decl\n \t  && DECL_CONTEXT (decl) == current_function_decl\n-\t  && DECL_THIS_INLINE (current_function_decl)\n+\t  && (DECL_THIS_INLINE (current_function_decl)\n+\t      || DECL_TEMPLATE_INSTANTIATION (current_function_decl))\n \t  && TREE_PUBLIC (current_function_decl))\n \t{\n+\t  /* Rather than try to get this right with inlining, we suppress\n+\t     inlining of such functions.  */\n \t  current_function_cannot_inline\n \t    = \"function with static variable cannot be inline\";\n+\n+\t  /* If flag_weak, we don't need to mess with this, as we can just\n+\t     make the function weak, and let it refer to its unique local\n+\t     copy.  This works because we don't allow the function to be\n+\t     inlined.  */\n+\t  if (! flag_weak)\n+\t    {\n+\t      if (DECL_INTERFACE_KNOWN (current_function_decl))\n+\t\t{\n+\t\t  TREE_PUBLIC (decl) = 1;\n+\t\t  DECL_EXTERNAL (decl) = DECL_EXTERNAL (current_function_decl);\n+\t\t}\n+\t      else if (DECL_INITIAL (decl) == NULL_TREE\n+\t\t       || DECL_INITIAL (decl) == error_mark_node)\n+\t\t{\n+\t\t  TREE_PUBLIC (decl) = 1;\n+\t\t  DECL_COMMON (decl) = 1;\n+\t\t}\n+\t      /* else we lose. We can only do this if we can use common,\n+                 which we can't if it has been initialized.  */\n+\n+\t      if (TREE_PUBLIC (decl))\n+\t\tDECL_ASSEMBLER_NAME (decl)\n+\t\t  = build_static_name (current_function_decl, DECL_NAME (decl));\n+\t      else if (! DECL_ARTIFICIAL (decl))\n+\t\t{\n+\t\t  cp_warning_at (\"sorry: semantics of inline function static data `%#D' are wrong (you'll wind up with multiple copies)\", decl);\n+\t\t  cp_warning_at (\"  you can work around this by removing the initializer\"), decl;\n+\t\t}\n+\t    }\n \t}\n \n       else if (TREE_CODE (decl) == VAR_DECL"}, {"sha": "1545c069f491b5b283b842fe154c3b07a4eea8d1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2c99c43b76e7d4bc46e445eaa04201c827ffe2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5f2c99c43b76e7d4bc46e445eaa04201c827ffe2", "patch": "@@ -3995,6 +3995,7 @@ pop_tinst_level ()\n      this instantiation.  */\n   lineno = old->line;\n   input_filename = old->file;\n+  extract_interface_info ();\n   \n   current_tinst_level = old->next;\n   old->next = free_tinst_level;\n@@ -8004,8 +8005,6 @@ instantiate_decl (d)\n   tree gen_tmpl;\n   int nested = in_function_p ();\n   int pattern_defined;\n-  int line = lineno;\n-  char *file = input_filename;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -8142,9 +8141,6 @@ instantiate_decl (d)\n     {\n       /* Defer all templates except inline functions used in another\n          function.  */\n-      lineno = line;\n-      input_filename = file;\n-\n       if (at_eof && !pattern_defined \n \t  && DECL_EXPLICIT_INSTANTIATION (d))\n \t/* [temp.explicit]\n@@ -8217,9 +8213,6 @@ instantiate_decl (d)\n     }\n \n out:\n-  lineno = line;\n-  input_filename = file;\n-\n   pop_from_top_level ();\n   pop_tinst_level ();\n "}]}