{"sha": "98756bcbe27647f263f2b312d1d933d70cf56ba9", "node_id": "C_kwDOANBUbNoAKDk4NzU2YmNiZTI3NjQ3ZjI2M2YyYjMxMmQxZDkzM2Q3MGNmNTZiYTk", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-12-19T11:16:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2022-12-19T11:16:47Z"}, "message": "aarch64: PR target/108140 Handle NULL target in data intrinsic expansion\n\nIn this PR we ICE when expanding the __rbit builtin with a NULL target rtx.\nI *think* that only happens when the result is unused and hence maybe we shouldn't be expanding\nany RTL at all, but the ICE here is easily fixed by deriving the mode from the type of the expression\nrather than the target.\n\nThis patch does that.\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR target/108140\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_expand_builtin_data_intrinsic): Handle NULL target.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108140\n\t* gcc.target/aarch64/acle/pr108140.c: New test.", "tree": {"sha": "33bc7c702e811d5b01108a674f9c790661471fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33bc7c702e811d5b01108a674f9c790661471fa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98756bcbe27647f263f2b312d1d933d70cf56ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98756bcbe27647f263f2b312d1d933d70cf56ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98756bcbe27647f263f2b312d1d933d70cf56ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98756bcbe27647f263f2b312d1d933d70cf56ba9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2cec58ff502966004f79d1c9a2862c756b8509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2cec58ff502966004f79d1c9a2862c756b8509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2cec58ff502966004f79d1c9a2862c756b8509"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "5c9f727b255baa35e5876ed46819432e75cbc99c", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98756bcbe27647f263f2b312d1d933d70cf56ba9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98756bcbe27647f263f2b312d1d933d70cf56ba9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=98756bcbe27647f263f2b312d1d933d70cf56ba9", "patch": "@@ -2648,7 +2648,7 @@ static rtx\n aarch64_expand_builtin_data_intrinsic (unsigned int fcode, tree exp, rtx target)\n {\n   expand_operand ops[2];\n-  machine_mode mode = GET_MODE (target);\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n   create_output_operand (&ops[0], target, mode);\n   create_input_operand (&ops[1], expand_normal (CALL_EXPR_ARG (exp, 0)), mode);\n   enum insn_code icode;"}, {"sha": "967928a7dca73c6d309312c17388ed9dae9905f4", "filename": "gcc/testsuite/gcc.target/aarch64/acle/pr108140.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98756bcbe27647f263f2b312d1d933d70cf56ba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpr108140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98756bcbe27647f263f2b312d1d933d70cf56ba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpr108140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fpr108140.c?ref=98756bcbe27647f263f2b312d1d933d70cf56ba9", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/108140  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include<arm_acle.h>\n+\n+int\n+main(int argc, char *argv[])\n+{\n+\tunsigned long long input = argc-1;\n+\tunsigned long long v = __clz(__rbit(input));\n+\t__builtin_printf(\"%d %d\\n\", argc, v >= 64 ? 123 : 456);\n+\treturn 0;\n+}\n+"}]}