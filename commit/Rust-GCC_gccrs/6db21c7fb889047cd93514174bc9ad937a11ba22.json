{"sha": "6db21c7fb889047cd93514174bc9ad937a11ba22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiMjFjN2ZiODg5MDQ3Y2Q5MzUxNDE3NGJjOWFkOTM3YTExYmEyMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-08T05:13:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-08T05:13:35Z"}, "message": "alpha.h (alpha_compare): New.\n\n        * alpha.h (alpha_compare): New.\n        (alpha_compare_op0, alpha_compare_op1, alpha_compare_fp_p): Remove.\n        * alpha.c: Likewise for the definitions.\n        (alpha_emit_conditional_branch): Update for alpha_compare.\n        (alpha_emit_conditional_move): Likewise.\n        * alpha.md (cmpdf, cmpdi): Likewise.\n        (setcc patterns): Likewise.  Zero alpha_compare after use.\n        (sne): Optimize (x != 0) into (0U < x).\n\nFrom-SVN: r29183", "tree": {"sha": "5264998229135efa266d0c973c08fd1f3c382417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5264998229135efa266d0c973c08fd1f3c382417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db21c7fb889047cd93514174bc9ad937a11ba22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db21c7fb889047cd93514174bc9ad937a11ba22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db21c7fb889047cd93514174bc9ad937a11ba22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db21c7fb889047cd93514174bc9ad937a11ba22/comments", "author": null, "committer": null, "parents": [{"sha": "01439aeea597671b4e292002bc2b1ae2d7e3e82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01439aeea597671b4e292002bc2b1ae2d7e3e82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01439aeea597671b4e292002bc2b1ae2d7e3e82d"}], "stats": {"total": 124, "additions": 81, "deletions": 43}, "files": [{"sha": "fd51818869b7592ccf1dd1aa2d3a7a478146f182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db21c7fb889047cd93514174bc9ad937a11ba22", "patch": "@@ -1,3 +1,14 @@\n+Tue Sep  7 22:09:03 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (alpha_compare): New.\n+\t(alpha_compare_op0, alpha_compare_op1, alpha_compare_fp_p): Remove.\n+\t* alpha.c: Likewise for the definitions.\n+\t(alpha_emit_conditional_branch): Update for alpha_compare.\n+\t(alpha_emit_conditional_move): Likewise.\n+\t* alpha.md (cmpdf, cmpdi): Likewise.\n+\t(setcc patterns): Likewise.  Zero alpha_compare after use.\n+\t(sne): Optimize (x != 0) into (0U < x).\n+\n Tue Sep  7 21:55:02 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.h (alpha_eh_epilogue_sp_ofs): Remove."}, {"sha": "fbc1ebc395d1ba49ad17ad81a962353757e7e5f9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6db21c7fb889047cd93514174bc9ad937a11ba22", "patch": "@@ -77,8 +77,7 @@ const char *alpha_mlat_string;\t/* -mmemory-latency= */\n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n \n-rtx alpha_compare_op0, alpha_compare_op1;\n-int alpha_compare_fp_p;\n+struct alpha_compare alpha_compare;\n \n /* Non-zero if inside of a function, because the Alpha asm can't\n    handle .files inside of functions.  */\n@@ -1355,7 +1354,7 @@ alpha_emit_conditional_branch (code)\n {\n   enum rtx_code cmp_code, branch_code;\n   enum machine_mode cmp_mode, branch_mode = VOIDmode;\n-  rtx op0 = alpha_compare_op0, op1 = alpha_compare_op1;\n+  rtx op0 = alpha_compare.op0, op1 = alpha_compare.op1;\n   rtx tem;\n \n   /* The general case: fold the comparison code to the types of compares\n@@ -1374,7 +1373,7 @@ alpha_emit_conditional_branch (code)\n \n     case GE:  case GT: case GEU:  case GTU:\n       /* For FP, we swap them, for INT, we reverse them.  */\n-      if (alpha_compare_fp_p)\n+      if (alpha_compare.fp_p)\n \t{\n \t  cmp_code = swap_condition (code);\n \t  branch_code = NE;\n@@ -1391,7 +1390,7 @@ alpha_emit_conditional_branch (code)\n       abort ();\n     }\n \n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     {\n       cmp_mode = DFmode;\n       if (flag_fast_math)\n@@ -1457,6 +1456,9 @@ alpha_emit_conditional_branch (code)\n       emit_move_insn (tem, gen_rtx_fmt_ee (cmp_code, cmp_mode, op0, op1));\n     }\n \n+  /* Zero the operands.  */\n+  memset (&alpha_compare, 0, sizeof (alpha_compare));\n+\n   /* Return the branch comparison.  */\n   return gen_rtx_fmt_ee (branch_code, branch_mode, tem, CONST0_RTX (cmp_mode));\n }\n@@ -1475,21 +1477,25 @@ alpha_emit_conditional_move (cmp, mode)\n {\n   enum rtx_code code = GET_CODE (cmp);\n   enum rtx_code cmov_code = NE;\n-  rtx op0 = alpha_compare_op0;\n-  rtx op1 = alpha_compare_op1;\n+  rtx op0 = alpha_compare.op0;\n+  rtx op1 = alpha_compare.op1;\n+  int fp_p = alpha_compare.fp_p;\n   enum machine_mode cmp_mode\n     = (GET_MODE (op0) == VOIDmode ? DImode : GET_MODE (op0));\n-  enum machine_mode cmp_op_mode = alpha_compare_fp_p ? DFmode : DImode;\n+  enum machine_mode cmp_op_mode = fp_p ? DFmode : DImode;\n   enum machine_mode cmov_mode = VOIDmode;\n   rtx tem;\n \n-  if (alpha_compare_fp_p != FLOAT_MODE_P (mode))\n+  /* Zero the operands.  */\n+  memset (&alpha_compare, 0, sizeof (alpha_compare));\n+\n+  if (fp_p != FLOAT_MODE_P (mode))\n     return 0;\n \n   /* We may be able to use a conditional move directly.\n      This avoids emitting spurious compares. */\n   if (signed_comparison_operator (cmp, cmp_op_mode)\n-      && (!alpha_compare_fp_p || flag_fast_math)\n+      && (!fp_p || flag_fast_math)\n       && (op0 == CONST0_RTX (cmp_mode) || op1 == CONST0_RTX (cmp_mode)))\n     return gen_rtx_fmt_ee (code, VOIDmode, op0, op1);\n \n@@ -1525,7 +1531,7 @@ alpha_emit_conditional_move (cmp, mode)\n   /* ??? We mark the branch mode to be CCmode to prevent the compare\n      and cmov from being combined, since the compare insn follows IEEE\n      rules that the cmov does not.  */\n-  if (alpha_compare_fp_p && !flag_fast_math)\n+  if (fp_p && !flag_fast_math)\n     cmov_mode = CCmode;\n \n   tem = gen_reg_rtx (cmp_op_mode);"}, {"sha": "db9dec936d0204b1a42d84db674e49d92916dc59", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=6db21c7fb889047cd93514174bc9ad937a11ba22", "patch": "@@ -1197,8 +1197,13 @@ extern struct rtx_def *alpha_emit_conditional_move ();\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n    since it hasn't been defined!  */\n \n-extern struct rtx_def *alpha_compare_op0, *alpha_compare_op1;\n-extern int alpha_compare_fp_p;\n+struct alpha_compare\n+{\n+  struct rtx_def *op0, *op1;\n+  int fp_p;\n+};\n+\n+extern struct alpha_compare alpha_compare;\n \n /* Machine specific function data.  */\n "}, {"sha": "8bdb39689d1bb3ee03a0d76fb025b66e35c18c12", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db21c7fb889047cd93514174bc9ad937a11ba22/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=6db21c7fb889047cd93514174bc9ad937a11ba22", "patch": "@@ -2916,9 +2916,9 @@\n   \"TARGET_FP\"\n   \"\n {\n-  alpha_compare_op0 = operands[0];\n-  alpha_compare_op1 = operands[1];\n-  alpha_compare_fp_p = 1;\n+  alpha_compare.op0 = operands[0];\n+  alpha_compare.op1 = operands[1];\n+  alpha_compare.fp_p = 1;\n   DONE;\n }\")\n \n@@ -2928,9 +2928,9 @@\n   \"\"\n   \"\n {\n-  alpha_compare_op0 = operands[0];\n-  alpha_compare_op1 = operands[1];\n-  alpha_compare_fp_p = 0;\n+  alpha_compare.op0 = operands[0];\n+  alpha_compare.op1 = operands[1];\n+  alpha_compare.fp_p = 0;\n   DONE;\n }\")\n \n@@ -3020,10 +3020,11 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_EQ (DImode, alpha_compare_op0, alpha_compare_op1);\n+  operands[1] = gen_rtx_EQ (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sne\"\n@@ -3033,10 +3034,17 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_EQ (DImode, alpha_compare_op0, alpha_compare_op1);\n+  if (alpha_compare.op1 == const0_rtx)\n+    {\n+      emit_insn (gen_sgtu (operands[0]));\n+      DONE;\n+    }\n+\n+  operands[1] = gen_rtx_EQ (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"slt\"\n@@ -3045,10 +3053,11 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LT (DImode, alpha_compare_op0, alpha_compare_op1);\n+  operands[1] = gen_rtx_LT (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sle\"\n@@ -3057,10 +3066,11 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LE (DImode, alpha_compare_op0, alpha_compare_op1);\n+  operands[1] = gen_rtx_LE (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sgt\"\n@@ -3069,11 +3079,12 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LT (DImode, force_reg (DImode, alpha_compare_op1),\n-\t\t\t    alpha_compare_op0);\n+  operands[1] = gen_rtx_LT (DImode, force_reg (DImode, alpha_compare.op1),\n+\t\t\t    alpha_compare.op0);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sge\"\n@@ -3082,11 +3093,12 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LE (DImode, force_reg (DImode, alpha_compare_op1),\n-\t\t\t    alpha_compare_op0);\n+  operands[1] = gen_rtx_LE (DImode, force_reg (DImode, alpha_compare.op1),\n+\t\t\t    alpha_compare.op0);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sltu\"\n@@ -3095,10 +3107,11 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LTU (DImode, alpha_compare_op0, alpha_compare_op1);\n+  operands[1] = gen_rtx_LTU (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sleu\"\n@@ -3107,10 +3120,11 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LEU (DImode, alpha_compare_op0, alpha_compare_op1);\n+  operands[1] = gen_rtx_LEU (DImode, alpha_compare.op0, alpha_compare.op1);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sgtu\"\n@@ -3119,11 +3133,12 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LTU (DImode, force_reg (DImode, alpha_compare_op1),\n-\t\t\t     alpha_compare_op0);\n+  operands[1] = gen_rtx_LTU (DImode, force_reg (DImode, alpha_compare.op1),\n+\t\t\t     alpha_compare.op0);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \n (define_expand \"sgeu\"\n@@ -3132,11 +3147,12 @@\n   \"\"\n   \"\n {\n-  if (alpha_compare_fp_p)\n+  if (alpha_compare.fp_p)\n     FAIL;\n \n-  operands[1] = gen_rtx_LEU (DImode, force_reg (DImode, alpha_compare_op1),\n-\t\t\t     alpha_compare_op0);\n+  operands[1] = gen_rtx_LEU (DImode, force_reg (DImode, alpha_compare.op1),\n+\t\t\t     alpha_compare.op0);\n+  alpha_compare.op0 = alpha_compare.op1 = NULL_RTX;\n }\")\n \f\n ;; These are the main define_expand's used to make conditional moves."}]}