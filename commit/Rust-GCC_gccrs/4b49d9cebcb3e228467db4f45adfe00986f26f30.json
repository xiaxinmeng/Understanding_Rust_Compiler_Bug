{"sha": "4b49d9cebcb3e228467db4f45adfe00986f26f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0OWQ5Y2ViY2IzZTIyODQ2N2RiNGY0NWFkZmUwMDk4NmYyNmYzMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-09-28T23:07:01Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-09-28T23:07:01Z"}, "message": "re PR target/37640 (__sync_lock_test_and_set on PPC64 causes ICE)\n\n2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR target/37640\n        * config/rs6000/rs6000.c (rs6000_expand_compare_and_swapqhi): Force\n        address to a register before taking the lower part.\n\n2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR target/37640\n        * gcc.c-torture/compile/sync-3.c: New testcase to check that\n\taddresses of non zero offset works.\n\nFrom-SVN: r140740", "tree": {"sha": "9f196ee3834f09ea3f8097275cea07421e2990e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f196ee3834f09ea3f8097275cea07421e2990e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b49d9cebcb3e228467db4f45adfe00986f26f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b49d9cebcb3e228467db4f45adfe00986f26f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b49d9cebcb3e228467db4f45adfe00986f26f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b49d9cebcb3e228467db4f45adfe00986f26f30/comments", "author": null, "committer": null, "parents": [{"sha": "30deaaf309195b515d474935c283620973a1fb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30deaaf309195b515d474935c283620973a1fb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30deaaf309195b515d474935c283620973a1fb3e"}], "stats": {"total": 200, "additions": 199, "deletions": 1}, "files": [{"sha": "f5d7516a4cceca9735fbfae4a8bd92e7e348f79f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b49d9cebcb3e228467db4f45adfe00986f26f30", "patch": "@@ -1,3 +1,9 @@\n+2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR target/37640\n+\t* config/rs6000/rs6000.c (rs6000_expand_compare_and_swapqhi): Force\n+\taddress to a register before taking the lower part.\n+\n 2008-09-28  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.h (OVERRIDE_OPTIONS): Unset flag_dwarf2_cfi_asm"}, {"sha": "0940c2266b0dc08b1fa250bd4c59093989dc0a0e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4b49d9cebcb3e228467db4f45adfe00986f26f30", "patch": "@@ -14020,7 +14020,8 @@ rs6000_expand_compare_and_swapqhi (rtx dst, rtx mem, rtx oldval, rtx newval)\n   HOST_WIDE_INT imask = GET_MODE_MASK (mode);\n \n   /* Shift amount for subword relative to aligned word.  */\n-  addrSI = force_reg (SImode, gen_lowpart_common (SImode, XEXP (mem, 0)));\n+  addrSI = force_reg (GET_MODE (XEXP (mem, 0)), XEXP (mem, 0));\n+  addrSI = force_reg (SImode, gen_lowpart_common (SImode, addrSI));\n   shift = gen_reg_rtx (SImode);\n   emit_insn (gen_rlwinm (shift, addrSI, GEN_INT (3),\n \t\t\t GEN_INT (shift_mask)));"}, {"sha": "26d16dd827d8e90a25a2aa163bd6a83c0e96661b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b49d9cebcb3e228467db4f45adfe00986f26f30", "patch": "@@ -1,3 +1,9 @@\n+2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR target/37640\n+\t* gcc.c-torture/compile/sync-3.c: New testcase to check that\n+\taddresses of non zero offset works.\n+\n 2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n             Kaushal Kantawala  <kaushal_kantawala@playstation.sony.com>\n "}, {"sha": "a31c9260d96f089c7382c8c4f9864ffe18be961f", "filename": "gcc/testsuite/gcc.c-torture/compile/sync-3.c", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b49d9cebcb3e228467db4f45adfe00986f26f30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsync-3.c?ref=4b49d9cebcb3e228467db4f45adfe00986f26f30", "patch": "@@ -0,0 +1,185 @@\n+/* Validate that each of the __sync builtins compiles.  This won't \n+   necessarily link, since the target might not support the builtin,\n+   so this may result in external library calls.  */\n+\n+void test_op_ignore (void)\n+{\n+signed char sc[2];\n+unsigned char uc[2];\n+signed short ss[2];\n+unsigned short us[2];\n+signed int si[2];\n+unsigned int ui[2];\n+signed long sl[2];\n+unsigned long ul[2];\n+signed long long sll[2];\n+unsigned long long ull[2];\n+  (void) __sync_fetch_and_add (&sc[1], -1);\n+  (void) __sync_fetch_and_add (&uc[1], -1);\n+  (void) __sync_fetch_and_add (&ss[1], -1);\n+  (void) __sync_fetch_and_add (&us[1], -1);\n+  (void) __sync_fetch_and_add (&si[1], -1);\n+  (void) __sync_fetch_and_add (&ui[1], -1);\n+  (void) __sync_fetch_and_add (&sl[1], -1);\n+  (void) __sync_fetch_and_add (&ul[1], -1);\n+  (void) __sync_fetch_and_add (&sll[1], -1);\n+  (void) __sync_fetch_and_add (&ull[1], -1);\n+\n+  (void) __sync_fetch_and_sub (&sc[1], -1);\n+  (void) __sync_fetch_and_sub (&uc[1], -1);\n+  (void) __sync_fetch_and_sub (&ss[1], -1);\n+  (void) __sync_fetch_and_sub (&us[1], -1);\n+  (void) __sync_fetch_and_sub (&si[1], -1);\n+  (void) __sync_fetch_and_sub (&ui[1], -1);\n+  (void) __sync_fetch_and_sub (&sl[1], -1);\n+  (void) __sync_fetch_and_sub (&ul[1], -1);\n+  (void) __sync_fetch_and_sub (&sll[1], -1);\n+  (void) __sync_fetch_and_sub (&ull[1], -1);\n+\n+  (void) __sync_fetch_and_or (&sc[1], -1);\n+  (void) __sync_fetch_and_or (&uc[1], -1);\n+  (void) __sync_fetch_and_or (&ss[1], -1);\n+  (void) __sync_fetch_and_or (&us[1], -1);\n+  (void) __sync_fetch_and_or (&si[1], -1);\n+  (void) __sync_fetch_and_or (&ui[1], -1);\n+  (void) __sync_fetch_and_or (&sl[1], -1);\n+  (void) __sync_fetch_and_or (&ul[1], -1);\n+  (void) __sync_fetch_and_or (&sll[1], -1);\n+  (void) __sync_fetch_and_or (&ull[1], -1);\n+\n+  (void) __sync_fetch_and_xor (&sc[1], -1);\n+  (void) __sync_fetch_and_xor (&uc[1], -1);\n+  (void) __sync_fetch_and_xor (&ss[1], -1);\n+  (void) __sync_fetch_and_xor (&us[1], -1);\n+  (void) __sync_fetch_and_xor (&si[1], -1);\n+  (void) __sync_fetch_and_xor (&ui[1], -1);\n+  (void) __sync_fetch_and_xor (&sl[1], -1);\n+  (void) __sync_fetch_and_xor (&ul[1], -1);\n+  (void) __sync_fetch_and_xor (&sll[1], -1);\n+  (void) __sync_fetch_and_xor (&ull[1], -1);\n+\n+  (void) __sync_fetch_and_and (&sc[1], -1);\n+  (void) __sync_fetch_and_and (&uc[1], -1);\n+  (void) __sync_fetch_and_and (&ss[1], -1);\n+  (void) __sync_fetch_and_and (&us[1], -1);\n+  (void) __sync_fetch_and_and (&si[1], -1);\n+  (void) __sync_fetch_and_and (&ui[1], -1);\n+  (void) __sync_fetch_and_and (&sl[1], -1);\n+  (void) __sync_fetch_and_and (&ul[1], -1);\n+  (void) __sync_fetch_and_and (&sll[1], -1);\n+  (void) __sync_fetch_and_and (&ull[1], -1);\n+\n+  (void) __sync_fetch_and_nand (&sc[1], -1);\n+  (void) __sync_fetch_and_nand (&uc[1], -1);\n+  (void) __sync_fetch_and_nand (&ss[1], -1);\n+  (void) __sync_fetch_and_nand (&us[1], -1);\n+  (void) __sync_fetch_and_nand (&si[1], -1);\n+  (void) __sync_fetch_and_nand (&ui[1], -1);\n+  (void) __sync_fetch_and_nand (&sl[1], -1);\n+  (void) __sync_fetch_and_nand (&ul[1], -1);\n+  (void) __sync_fetch_and_nand (&sll[1], -1);\n+  (void) __sync_fetch_and_nand (&ull[1], -1);\n+}\n+\n+void test_fetch_and_op (void)\n+{\n+signed char sc[2];\n+unsigned char uc[2];\n+signed short ss[2];\n+unsigned short us[2];\n+signed int si[2];\n+unsigned int ui[2];\n+signed long sl[2];\n+unsigned long ul[2];\n+signed long long sll[2];\n+unsigned long long ull[2];\n+  sc[1] = __sync_fetch_and_add (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_add (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_add (&ss[1], -11);\n+  us[1] = __sync_fetch_and_add (&us[1], -11);\n+  si[1] = __sync_fetch_and_add (&si[1], -11);\n+  ui[1] = __sync_fetch_and_add (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_add (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_add (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_add (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_add (&ull[1], -11);\n+\n+  sc[1] = __sync_fetch_and_sub (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_sub (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_sub (&ss[1], -11);\n+  us[1] = __sync_fetch_and_sub (&us[1], -11);\n+  si[1] = __sync_fetch_and_sub (&si[1], -11);\n+  ui[1] = __sync_fetch_and_sub (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_sub (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_sub (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_sub (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_sub (&ull[1], -11);\n+\n+  sc[1] = __sync_fetch_and_or (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_or (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_or (&ss[1], -11);\n+  us[1] = __sync_fetch_and_or (&us[1], -11);\n+  si[1] = __sync_fetch_and_or (&si[1], -11);\n+  ui[1] = __sync_fetch_and_or (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_or (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_or (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_or (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_or (&ull[1], -11);\n+\n+  sc[1] = __sync_fetch_and_xor (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_xor (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_xor (&ss[1], -11);\n+  us[1] = __sync_fetch_and_xor (&us[1], -11);\n+  si[1] = __sync_fetch_and_xor (&si[1], -11);\n+  ui[1] = __sync_fetch_and_xor (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_xor (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_xor (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_xor (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_xor (&ull[1], -11);\n+\n+  sc[1] = __sync_fetch_and_and (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_and (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_and (&ss[1], -11);\n+  us[1] = __sync_fetch_and_and (&us[1], -11);\n+  si[1] = __sync_fetch_and_and (&si[1], -11);\n+  ui[1] = __sync_fetch_and_and (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_and (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_and (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_and (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_and (&ull[1], -11);\n+\n+  sc[1] = __sync_fetch_and_nand (&sc[1], -11);\n+  uc[1] = __sync_fetch_and_nand (&uc[1], -11);\n+  ss[1] = __sync_fetch_and_nand (&ss[1], -11);\n+  us[1] = __sync_fetch_and_nand (&us[1], -11);\n+  si[1] = __sync_fetch_and_nand (&si[1], -11);\n+  ui[1] = __sync_fetch_and_nand (&ui[1], -11);\n+  sl[1] = __sync_fetch_and_nand (&sl[1], -11);\n+  ul[1] = __sync_fetch_and_nand (&ul[1], -11);\n+  sll[1] = __sync_fetch_and_nand (&sll[1], -11);\n+  ull[1] = __sync_fetch_and_nand (&ull[1], -11);\n+}\n+\n+void test_lock (void)\n+{\n+signed char sc[2];\n+unsigned char uc[2];\n+signed short ss[2];\n+unsigned short us[2];\n+signed int si[2];\n+unsigned int ui[2];\n+signed long sl[2];\n+unsigned long ul[2];\n+signed long long sll[2];\n+unsigned long long ull[2];\n+  sc[1] = __sync_lock_test_and_set (&sc[1], -1);\n+  uc[1] = __sync_lock_test_and_set (&uc[1], -1);\n+  ss[1] = __sync_lock_test_and_set (&ss[1], -1);\n+  us[1] = __sync_lock_test_and_set (&us[1], -1);\n+  si[1] = __sync_lock_test_and_set (&si[1], -1);\n+  ui[1] = __sync_lock_test_and_set (&ui[1], -1);\n+  sl[1] = __sync_lock_test_and_set (&sl[1], -1);\n+  ul[1] = __sync_lock_test_and_set (&ul[1], -1);\n+  sll[1] = __sync_lock_test_and_set (&sll[1], -1);\n+  ull[1] = __sync_lock_test_and_set (&ull[1], -1);\n+}"}]}