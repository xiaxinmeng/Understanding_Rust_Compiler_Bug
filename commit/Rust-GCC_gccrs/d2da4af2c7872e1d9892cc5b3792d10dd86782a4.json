{"sha": "d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkYTRhZjJjNzg3MmUxZDk4OTJjYzViMzc5MmQxMGRkODY3ODJhNA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-09-17T17:07:24Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-09-17T17:07:24Z"}, "message": "re PR c/41049 (conversion from integer to decimal float loses trailing zeros)\n\ngcc/\n\tPR c/41049\n\t* real.c decimal_from_integer, decimal_integer_string): New.\n\t(real_from_integer): Use them as special case for decimal float.\n\t* config/dfp-bit.c (_si_to_sd, _usi_to_sd): Use default rounding.\n\t(_di_to_sd, _di_to_dd, _di_to_td, _udi_to_sd, _udi_to_dd, _udi_to_td):\n\tDo not append zero after the decimal point in string to convert.\ngcc/testsuite/\n\tPR c/41049\n\t* dfp/pr41049.c: New test.\n\nFrom-SVN: r151806", "tree": {"sha": "76332f90632195d93b999cee84b8426bd071c7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76332f90632195d93b999cee84b8426bd071c7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/comments", "author": null, "committer": null, "parents": [{"sha": "51a0d6aa772829f49bc40564c92aa96e7a3cd910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a0d6aa772829f49bc40564c92aa96e7a3cd910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a0d6aa772829f49bc40564c92aa96e7a3cd910"}], "stats": {"total": 644, "additions": 641, "deletions": 3}, "files": [{"sha": "27276f90464659675f532d79a9810281a5ecc04b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "patch": "@@ -1,3 +1,12 @@\n+2009-09-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/41049\n+\t* real.c decimal_from_integer, decimal_integer_string): New.\n+\t(real_from_integer): Use them as special case for decimal float.\n+\t* config/dfp-bit.c (_si_to_sd, _usi_to_sd): Use default rounding.\n+\t(_di_to_sd, _di_to_dd, _di_to_td, _udi_to_sd, _udi_to_dd, _udi_to_td):\n+\tDo not append zero after the decimal point in string to convert.\n+\n 2009-09-17  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* graphite-sese-to-poly.c (pdr_add_data_dimensions): Add bounds only"}, {"sha": "19f2fdae67d29076bcefb231fcbf7364861a6e24", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "patch": "@@ -568,7 +568,6 @@ INT_TO_DFP (INT_TYPE i)\n   decContext context;\n \n   decContextDefault (&context, DEC_INIT_DECIMAL128);\n-  context.round = DEC_ROUND_DOWN;\n   f64 = *DEC_FLOAT_FROM_INT (&f64, i);\n   u32.f = *decSingleFromWider (&u32.f, &f64, &context);\n   if (DFP_EXCEPTIONS_ENABLED && context.status != 0)\n@@ -593,7 +592,7 @@ INT_TO_DFP (INT_TYPE i)\n   DFP_INIT_ROUNDMODE (context.round);\n \n   /* Use a C library function to get a floating point string.  */\n-  sprintf (buf, INT_FMT \".0\", CAST_FOR_FMT(i));\n+  sprintf (buf, INT_FMT \".\", CAST_FOR_FMT(i));\n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);\n   IEEE_TO_HOST (s, &f);"}, {"sha": "eb4e25bba836437f6d24408faf794a0b292b5a83", "filename": "gcc/real.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "patch": "@@ -110,6 +110,9 @@ static int do_compare (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *, int);\n static void do_fix_trunc (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n static unsigned long rtd_divmod (REAL_VALUE_TYPE *, REAL_VALUE_TYPE *);\n+static void decimal_from_integer (REAL_VALUE_TYPE *);\n+static void decimal_integer_string (char *, const REAL_VALUE_TYPE *,\n+\t\t\t\t    size_t);\n \n static const REAL_VALUE_TYPE * ten_to_ptwo (int);\n static const REAL_VALUE_TYPE * ten_to_mptwo (int);\n@@ -2168,10 +2171,70 @@ real_from_integer (REAL_VALUE_TYPE *r, enum machine_mode mode,\n       normalize (r);\n     }\n \n-  if (mode != VOIDmode)\n+  if (DECIMAL_FLOAT_MODE_P (mode))\n+    decimal_from_integer (r);\n+  else if (mode != VOIDmode)\n     real_convert (r, mode, r);\n }\n \n+/* Render R, an integral value, as a floating point constant with no\n+   specified exponent.  */\n+\n+static void\n+decimal_integer_string (char *str, const REAL_VALUE_TYPE *r_orig,\n+\t\t\tsize_t buf_size)\n+{\n+  int dec_exp, digit, digits;\n+  REAL_VALUE_TYPE r, pten;\n+  char *p;\n+  bool sign;\n+\n+  r = *r_orig;\n+\n+  if (r.cl == rvc_zero)\n+    {\n+      strcpy (str, \"0.\");\n+      return;\n+    }\n+\n+  sign = r.sign;\n+  r.sign = 0;\n+\n+  dec_exp = REAL_EXP (&r) * M_LOG10_2;\n+  digits = dec_exp + 1;\n+  gcc_assert ((digits + 2) < (int)buf_size);\n+\n+  pten = *real_digit (1);\n+  times_pten (&pten, dec_exp);\n+\n+  p = str;\n+  if (sign)\n+    *p++ = '-';\n+\n+  digit = rtd_divmod (&r, &pten);\n+  gcc_assert (digit >= 0 && digit <= 9);\n+  *p++ = digit + '0';\n+  while (--digits > 0)\n+    {\n+      times_pten (&r, 1);\n+      digit = rtd_divmod (&r, &pten);\n+      *p++ = digit + '0';\n+    }\n+  *p++ = '.';\n+  *p++ = '\\0';\n+}\n+\n+/* Convert a real with an integral value to decimal float.  */\n+\n+static void\n+decimal_from_integer (REAL_VALUE_TYPE *r)\n+{\n+  char str[256];\n+\n+  decimal_integer_string (str, r, sizeof (str) - 1);\n+  decimal_real_from_string (r, str);\n+}\n+\n /* Returns 10**2**N.  */\n \n static const REAL_VALUE_TYPE *"}, {"sha": "c6270142d4ae6a66e5a58c3ede8f95ddc9796920", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "patch": "@@ -1,3 +1,8 @@\n+2009-09-17  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/41049\n+\t* dfp/pr41049.c: New test.\n+\n 2009-09-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/41385"}, {"sha": "6187481eca1b38f8a3122fc72670d6e3a53248ae", "filename": "gcc/testsuite/gcc.dg/dfp/pr41049.c", "status": "added", "additions": 562, "deletions": 0, "changes": 562, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr41049.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2da4af2c7872e1d9892cc5b3792d10dd86782a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr41049.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr41049.c?ref=d2da4af2c7872e1d9892cc5b3792d10dd86782a4", "patch": "@@ -0,0 +1,562 @@\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* The preferred exponent of the result of a conversion from an\n+   integral type to a decimal float type is zero.  A conversion at\n+   either compile time or runtime should not change the number of\n+   trailing zeroes.  */\n+\n+#include \"dfp-dbg.h\"\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#define TESTVAL_NEG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  si = VAL;\t\t\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  a = si;\t\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  c = VAL;\t\t\t\t\t\t\t\t\\\n+  d = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) != 0))\t\t\\\n+    FAILURE\n+\n+#define TESTVAL_NEG_BIG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  a = sll;\t\t\t\t\t\t\t\t\\\n+  b = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0))\t\t\\\n+    FAILURE\n+\n+#define TESTVAL_NONNEG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  si = VAL;\t\t\t\t\t\t\t\t\\\n+  ui = VAL;\t\t\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  ull = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  a = si;\t\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  c = ui;\t\t\t\t\t\t\t\t\\\n+  d = ull;\t\t\t\t\t\t\t\t\\\n+  e = VAL;\t\t\t\t\t\t\t\t\\\n+  f = VAL;\t\t\t\t\t\t\t\t\\\n+  g = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  h = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&e,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&f,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&g,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&h,SIZE) != 0))\t\t\\\n+    FAILURE\n+\n+#define TESTVAL_NONNEG_BIG(VAL,SUF,SIZE)\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  ull = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  d = ull;\t\t\t\t\t\t\t\t\\\n+  f = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  g = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&b, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&d, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&f, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&g, (void *)&d,SIZE) != 0))\t\t\\\n+    FAILURE\n+\n+#undef SUFFIX\n+#define SUFFIX DF\n+#undef TYPE\n+#define TYPE _Decimal32\n+  \n+void\n+zeroes_32 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+  \n+void\n+round_32 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (10000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000050, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000010, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (-10000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000050, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000010, SUFFIX, sizeof (TYPE));\n+}\n+\n+#undef SUFFIX\n+#define SUFFIX DD\n+#undef TYPE\n+#define TYPE _Decimal64\n+  \n+void\n+zeroes_64 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+  \n+void\n+round_64 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000010, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000010, SUFFIX, sizeof (TYPE));\n+}\n+\n+#undef SUFFIX\n+#define SUFFIX DL\n+#undef TYPE\n+#define TYPE _Decimal128\n+  \n+void\n+zeroes_128 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+\n+\n+int\n+main ()\n+{\n+  zeroes_32 ();\n+  zeroes_64 ();\n+  zeroes_128 ();\n+  round_32 ();\n+  round_64 ();\n+\n+  FINISH\n+}"}]}