{"sha": "ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "node_id": "C_kwDOANBUbNoAKGFiMGY3MGE2MzAxMWZmMDZlZWE2NDk2MGUzYjhjYTY2NTc1YmZkYWY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-23T11:05:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-23T12:58:53Z"}, "message": "frange: Make the setter taking trees a wrapper.\n\nThe frange setter does all its work in trees.  This incurs a penalty\nfor the real_value variants because they must wrap their arguments\ninto a tree and pass it to the tree setter, which will then do the\nopposite.  This is leftovers from the irange setter.\n\nEven though the we still need constructors taking trees so we can\ninteract with the tree world, there's no sense penalizing the rest of\nthe implementation.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::set): Swap setters such that the one\n\taccepting REAL_VALUE_TYPE does all the work.", "tree": {"sha": "d05967b357adf863b6ed3b3c988dac873cfabd90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d05967b357adf863b6ed3b3c988dac873cfabd90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0f70a63011ff06eea64960e3b8ca66575bfdaf/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceb5bc42d9d703bac5c98b94c639ef9438aaede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ceb5bc42d9d703bac5c98b94c639ef9438aaede"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "9ca442478c97cd8915898e0844c3cedccd4a8f84", "filename": "gcc/value-range.cc", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0f70a63011ff06eea64960e3b8ca66575bfdaf/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0f70a63011ff06eea64960e3b8ca66575bfdaf/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=ab0f70a63011ff06eea64960e3b8ca66575bfdaf", "patch": "@@ -290,7 +290,9 @@ frange::flush_denormals_to_zero ()\n // Setter for franges.\n \n void\n-frange::set (tree min, tree max, value_range_kind kind)\n+frange::set (tree type,\n+\t     const REAL_VALUE_TYPE &min, const REAL_VALUE_TYPE &max,\n+\t     value_range_kind kind)\n {\n   switch (kind)\n     {\n@@ -299,7 +301,7 @@ frange::set (tree min, tree max, value_range_kind kind)\n       return;\n     case VR_VARYING:\n     case VR_ANTI_RANGE:\n-      set_varying (TREE_TYPE (min));\n+      set_varying (type);\n       return;\n     case VR_RANGE:\n       break;\n@@ -308,14 +310,12 @@ frange::set (tree min, tree max, value_range_kind kind)\n     }\n \n   // Handle NANs.\n-  if (real_isnan (TREE_REAL_CST_PTR (min)) || real_isnan (TREE_REAL_CST_PTR (max)))\n+  if (real_isnan (&min) || real_isnan (&max))\n     {\n-      gcc_checking_assert (real_identical (TREE_REAL_CST_PTR (min),\n-\t\t\t\t\t   TREE_REAL_CST_PTR (max)));\n-      tree type = TREE_TYPE (min);\n+      gcc_checking_assert (real_identical (&min, &max));\n       if (HONOR_NANS (type))\n \t{\n-\t  bool sign = real_isneg (TREE_REAL_CST_PTR (min));\n+\t  bool sign = real_isneg (&min);\n \t  set_nan (type, sign);\n \t}\n       else\n@@ -324,9 +324,9 @@ frange::set (tree min, tree max, value_range_kind kind)\n     }\n \n   m_kind = kind;\n-  m_type = TREE_TYPE (min);\n-  m_min = *TREE_REAL_CST_PTR (min);\n-  m_max = *TREE_REAL_CST_PTR (max);\n+  m_type = type;\n+  m_min = min;\n+  m_max = max;\n   if (HONOR_NANS (m_type))\n     {\n       m_pos_nan = true;\n@@ -351,7 +351,7 @@ frange::set (tree min, tree max, value_range_kind kind)\n     }\n \n   // Check for swapped ranges.\n-  gcc_checking_assert (tree_compare (LE_EXPR, min, max));\n+  gcc_checking_assert (real_compare (LE_EXPR, &min, &max));\n \n   normalize_kind ();\n \n@@ -361,14 +361,11 @@ frange::set (tree min, tree max, value_range_kind kind)\n     verify_range ();\n }\n \n-// Setter for frange from REAL_VALUE_TYPE endpoints.\n-\n void\n-frange::set (tree type,\n-\t     const REAL_VALUE_TYPE &min, const REAL_VALUE_TYPE &max,\n-\t     value_range_kind kind)\n+frange::set (tree min, tree max, value_range_kind kind)\n {\n-  set (build_real (type, min), build_real (type, max), kind);\n+  set (TREE_TYPE (min),\n+       *TREE_REAL_CST_PTR (min), *TREE_REAL_CST_PTR (max), kind);\n }\n \n // Normalize range to VARYING or UNDEFINED, or vice versa.  Return"}]}