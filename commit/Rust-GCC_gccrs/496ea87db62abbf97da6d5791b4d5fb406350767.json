{"sha": "496ea87db62abbf97da6d5791b4d5fb406350767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2ZWE4N2RiNjJhYmJmOTdkYTZkNTc5MWI0ZDVmYjQwNjM1MDc2Nw==", "commit": {"author": {"name": "Bilyan Borisov", "email": "bilyan.borisov@arm.com", "date": "2015-11-03T10:58:27Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-11-03T10:58:27Z"}, "message": "[AARCH64][PATCH 1/3] Implementing the variants of the vmulx_ NEON intrinsic\n\ngcc/\n\n\t* config/aarch64/aarch64-simd-builtins.def (fmulx): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_fmulx<mode>): New.\n\t* config/aarch64/arm_neon.h (vmulx_f32): Rewrite to call fmulx\n\tbuiltin.\n\t(vmulxq_f32): Likewise.\n\t(vmulx_f64): New.\n\t(vmulxq_f64): Rewrite to call fmulx builtin.\n\t(vmulxs_f32): Likewise.\n\t(vmulxd_f64): Likewise.\n\t(vmulx_lane_f32): Remove.\n\t* config/aarch64/iterators.md (UNSPEC): Add fmulx.\n\ngcc/testsuite/\n\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulx_f32_1.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulx_f64_1.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f32_1.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f64_1.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxs_f32_1.c: New.\n\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxd_f64_1.c: New.\n\nFrom-SVN: r229702", "tree": {"sha": "e3ed7379a3febcc2d0f88561c8224375ac46b4e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ed7379a3febcc2d0f88561c8224375ac46b4e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/496ea87db62abbf97da6d5791b4d5fb406350767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496ea87db62abbf97da6d5791b4d5fb406350767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496ea87db62abbf97da6d5791b4d5fb406350767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496ea87db62abbf97da6d5791b4d5fb406350767/comments", "author": null, "committer": null, "parents": [{"sha": "04f725b90712254596630764cb2d5c69585d7337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f725b90712254596630764cb2d5c69585d7337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f725b90712254596630764cb2d5c69585d7337"}], "stats": {"total": 420, "additions": 352, "deletions": 68}, "files": [{"sha": "5459551b1f7604a0715974a82e5afa8754525829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -1,3 +1,17 @@\n+2015-11-03  Bilyan Borisov  <bilyan.borisov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (fmulx): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_fmulx<mode>): New.\n+\t* config/aarch64/arm_neon.h (vmulx_f32): Rewrite to call fmulx\n+\tbuiltin.\n+\t(vmulxq_f32): Likewise.\n+\t(vmulx_f64): New.\n+\t(vmulxq_f64): Rewrite to call fmulx builtin.\n+\t(vmulxs_f32): Likewise.\n+\t(vmulxd_f64): Likewise.\n+\t(vmulx_lane_f32): Remove.\n+\t* config/aarch64/iterators.md (UNSPEC): Add fmulx.\n+\n 2015-11-03  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64.md (*movhf_aarch64): Use"}, {"sha": "04dac6f84db2393ef5057b7ddb04b7ed026c8a72", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -41,6 +41,7 @@\n \n   BUILTIN_VDC (COMBINE, combine, 0)\n   BUILTIN_VB (BINOP, pmul, 0)\n+  BUILTIN_VALLF (BINOP, fmulx, 0)\n   BUILTIN_VDQF_DF (UNOP, sqrt, 2)\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)"}, {"sha": "269e00237bb1153ebf42505906ec5b760b04aafe", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -2868,6 +2868,18 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype><q>\")]\n )\n \n+;; fmulx.\n+\n+(define_insn \"aarch64_fmulx<mode>\"\n+  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n+\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")\n+\t\t       (match_operand:VALLF 2 \"register_operand\" \"w\")]\n+\t\t      UNSPEC_FMULX))]\n+ \"TARGET_SIMD\"\n+ \"fmulx\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\"\n+ [(set_attr \"type\" \"neon_fp_mul_<Vetype>\")]\n+)\n+\n ;; <su>q<addsub>\n \n (define_insn \"aarch64_<su_optab><optab><mode>\""}, {"sha": "265c26679089f5a1b30a41360687fb1e3c2a8e50", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 37, "deletions": 68, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -8509,63 +8509,6 @@ vmulq_n_u32 (uint32x4_t a, uint32_t b)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vmulx_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"fmulx %0.2s,%1.2s,%2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-#define vmulx_lane_f32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32x4_t b_ = (b);                                            \\\n-       float32x2_t a_ = (a);                                            \\\n-       float32x2_t result;                                              \\\n-       __asm__ (\"fmulx %0.2s,%1.2s,%2.s[%3]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vmulxd_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"fmulx %d0, %d1, %d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vmulxq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"fmulx %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vmulxq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"fmulx %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n #define vmulxq_lane_f32(a, b, c)                                        \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -8592,17 +8535,6 @@ vmulxq_f64 (float64x2_t a, float64x2_t b)\n        result;                                                          \\\n      })\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vmulxs_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"fmulx %s0, %s1, %s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vmvn_p8 (poly8x8_t a)\n {\n@@ -17739,6 +17671,43 @@ vmaxq_u32 (uint32x4_t __a, uint32x4_t __b)\n   return (uint32x4_t) __builtin_aarch64_umaxv4si ((int32x4_t) __a,\n \t\t\t\t\t\t  (int32x4_t) __b);\n }\n+/* vmulx */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vmulx_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_fmulxv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vmulxq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_fmulxv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmulx_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return (float64x1_t) {__builtin_aarch64_fmulxdf (__a[0], __b[0])};\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vmulxq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_fmulxv2df (__a, __b);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vmulxs_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_aarch64_fmulxsf (__a, __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vmulxd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_aarch64_fmulxdf (__a, __b);\n+}\n \n /* vpmax  */\n "}, {"sha": "6f35036b0132a615ecc7318a5498f7d61db7950b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -239,6 +239,7 @@\n     UNSPEC_SQDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_SQRDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_PMUL\t\t; Used in aarch64-simd.md.\n+    UNSPEC_FMULX\t; Used in aarch64-simd.md.\n     UNSPEC_USQADD\t; Used in aarch64-simd.md.\n     UNSPEC_SUQADD\t; Used in aarch64-simd.md.\n     UNSPEC_SQXTUN\t; Used in aarch64-simd.md."}, {"sha": "1de0ea186a89a5a6b65fe491732e79f16425df54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -1,3 +1,12 @@\n+2015-11-03  Bilyan Borisov  <bilyan.borisov@arm.com>\n+\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulx_f32_1.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulx_f64_1.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f32_1.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f64_1.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxs_f32_1.c: New.\n+\t* gcc/testsuite/gcc.target/aarch64/simd/vmulxd_f64_1.c: New.\n+\n 2015-11-03  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/fp16/set_zero_1.c: New."}, {"sha": "d0d26c5695e4a565dcdef3209ec9cc6116c2aa3b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulx_f32_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f32_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,52 @@\n+/* Test the vmulx_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+test_case (float32_t v1[2], float32_t v2[2], float32_t e[2])\n+{\n+  int i;\n+  float32x2_t vec1_1 = vld1_f32 (v1);\n+  float32x2_t vec1_2 = vld1_f32 (v2);\n+\n+  float32x2_t actual1 = vmulx_f32 (vec1_1, vec1_2);\n+  float32_t actual[2];\n+  vst1_f32 (actual, actual1);\n+\n+  for (i = 0; i < 2; ++i)\n+    if (actual[i] != e[i])\n+      abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  float32_t v1 = 3.14159265359;\n+  float32_t v2 = 1.383894;\n+  float32_t v3 = -2.71828;\n+  float32_t v4 = -3.4891931;\n+\n+  float32_t v1_1[] = {v1, v2};\n+  float32_t v1_2[] = {v3, v4};\n+  float32_t e1[] = {v1 * v3, v2 * v4};\n+  test_case (v1_1, v1_2, e1);\n+\n+  float32_t v2_1[] = {0, -0.0};\n+  float32_t v2_2[] = {__builtin_huge_valf (), __builtin_huge_valf ()};\n+  float32_t e2[] = {2.0, -2.0};\n+  test_case (v2_1, v2_2, e2);\n+\n+  float32_t v3_1[] = {0, -0.0};\n+  float32_t v3_2[] = {-__builtin_huge_valf (), -__builtin_huge_valf ()};\n+  float32_t e3[] = {-2.0, 2.0};\n+  test_case (v3_1, v3_2, e3);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2s, ?\\[vV\\]\\[0-9\\]+\\.2s, ?\\[vV\\]\\[0-9\\]+\\.2s\\n\" 1 } } */"}, {"sha": "5791d8a6b28b4f5bea54c8204c5fba0a67c09480", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulx_f64_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulx_f64_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,57 @@\n+/* Test the vmulx_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void  __attribute__ ((noinline))\n+test_case (float64_t v1[1], float64_t v2[1], float64_t e1[1])\n+{\n+  float64x1_t vec1_1 = vld1_f64 (v1);\n+  float64x1_t vec1_2 = vld1_f64 (v2);\n+\n+  float64x1_t actual1 = vmulx_f64 (vec1_1, vec1_2);\n+  float64_t actual[1];\n+  vst1_f64 (actual, actual1);\n+  if (actual[0] != e1[0])\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  float64_t v1 = 3.14159265359;\n+  float64_t v2 = -2.71828;\n+\n+  float64_t v1_1[] = {v1};\n+  float64_t v1_2[] = {v2};\n+  float64_t e1[] = {v1 * v2};\n+  test_case (v1_1, v1_2, e1);\n+\n+  float64_t v2_1[] = {0};\n+  float64_t v2_2[] = {__builtin_huge_val ()};\n+  float64_t e2[] = {2.0};\n+  test_case (v2_1, v2_2, e2);\n+\n+  float64_t v3_1[] = {0};\n+  float64_t v3_2[] = {-__builtin_huge_val ()};\n+  float64_t e3[] = {-2.0};\n+  test_case (v3_1, v3_2, e3);\n+\n+  float64_t v4_1[] = {-0.0};\n+  float64_t v4_2[] = {__builtin_huge_val ()};\n+  float64_t e4[] = {-2.0};\n+  test_case (v4_1, v4_2, e4);\n+\n+  float64_t v5_1[] = {-0.0};\n+  float64_t v5_2[] = {-__builtin_huge_val ()};\n+  float64_t e5[] = {2.0};\n+  test_case (v5_1, v5_2, e5);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" 1 } } */"}, {"sha": "d36e7428289c17799952aadb951c1cc9c964a3c3", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxd_f64_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxd_f64_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vmulxd_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+test_case (float64_t v1, float64_t v2, float64_t e1)\n+{\n+  float64_t actual1 = vmulxd_f64 (v1, v2);\n+  if (actual1 != e1)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  float64_t v1 = 3.14159265359;\n+  float64_t v2 = 1.383894;\n+  float64_t v3 = -2.71828;\n+  float64_t v4 = -3.4891931;\n+\n+  test_case (v1, v2, v1 * v2);\n+  test_case (0.0, __builtin_huge_val (), 2.0);\n+  test_case (0.0, -__builtin_huge_val (), -2.0);\n+  test_case (-0.0, __builtin_huge_val (), -2.0);\n+  test_case (-0.0, -__builtin_huge_val (), 2.0);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" 1 } } */"}, {"sha": "7f8dbd9c8deca7a7891bcf8ba890fc7af213ed78", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f32_1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f32_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,48 @@\n+/* Test the vmulxq_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+test_case (float32_t v1[4], float32_t v2[4], float32_t e[4])\n+{\n+  int i;\n+  float32x4_t vec1_1 = vld1q_f32 (v1);\n+  float32x4_t vec1_2 = vld1q_f32 (v2);\n+\n+  float32x4_t actual1 = vmulxq_f32 (vec1_1, vec1_2);\n+  float32_t actual[4];\n+  vst1q_f32 (actual, actual1);\n+\n+  for (i = 0; i < 4; ++i)\n+    if (actual[i] != e[i])\n+      abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  float32_t v1 = 3.14159265359;\n+  float32_t v2 = 1.383894;\n+  float32_t v3 = -2.71828;\n+  float32_t v4 = -3.4891931;\n+\n+  float32_t v1_1[] = {v1, v2, v3, v4};\n+  float32_t v1_2[] = {v3, v4, v1, v2};\n+  float32_t e1[] = {v1 * v3, v2 * v4, v3 * v1, v4 * v2};\n+  test_case (v1_1, v1_2, e1);\n+\n+  float32_t v2_1[] = {0, -0.0, 0, -0.0};\n+  float32_t v2_2[] = {-__builtin_huge_valf (), -__builtin_huge_valf (),\n+\t\t      __builtin_huge_valf (), __builtin_huge_valf () };\n+  float32_t e2[] = {-2.0, 2.0, 2.0, -2.0};\n+  test_case (v2_1, v2_2, e2);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4s, ?\\[vV\\]\\[0-9\\]+\\.4s, ?\\[vV\\]\\[0-9\\]+\\.4s\\n\" 1 } } */"}, {"sha": "f306bd05301ddabf6cf6b01a235bf1b54b1fe5e8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxq_f64_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxq_f64_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,51 @@\n+/* Test the vmulxq_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void  __attribute__ ((noinline))\n+test_case (float64_t v1[2], float64_t v2[2], float64_t e1[2])\n+{\n+  int i;\n+  float64x2_t vec1_1 = vld1q_f64 (v1);\n+  float64x2_t vec1_2 = vld1q_f64 (v2);\n+\n+  float64x2_t actual1 = vmulxq_f64 (vec1_1, vec1_2);\n+  float64_t actual[2];\n+  vst1q_f64 (actual, actual1);\n+\n+  for (i = 0; i < 2; ++i)\n+    if (actual[i] != e1[i])\n+      abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  float64_t v1 = 3.14159265359;\n+  float64_t v2 = -2.71828;\n+\n+  float64_t v1_1[] = {v1, v2};\n+  float64_t v1_2[] = {v2, v1};\n+  float64_t e1[] = {v1 * v2, v2* v1};\n+  test_case (v1_1, v1_2, e1);\n+\n+  float64_t v2_1[] = {0, 0};\n+  float64_t v2_2[] = {__builtin_huge_val (), -__builtin_huge_val ()};\n+  float64_t e2[] = {2.0, -2.0};\n+  test_case (v2_1, v2_2, e2);\n+\n+  float64_t v3_1[] = {-0.0, -0.0};\n+  float64_t v3_2[] = {__builtin_huge_val (), -__builtin_huge_val ()};\n+  float64_t e3[] = {-2.0, 2.0};\n+  test_case (v3_1, v3_2, e3);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[dD\\]\\n\" 1} } */"}, {"sha": "fc08e143b874b6501a1076720ca9467ddbb32ddb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmulxs_f32_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_f32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496ea87db62abbf97da6d5791b4d5fb406350767/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_f32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmulxs_f32_1.c?ref=496ea87db62abbf97da6d5791b4d5fb406350767", "patch": "@@ -0,0 +1,34 @@\n+/* Test the vmulxs_f32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void __attribute__ ((noinline))\n+test_case (float32_t v1, float32_t v2, float32_t e)\n+{\n+  float32_t actual = vmulxs_f32 (v1, v2);\n+  if (actual != e)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  float32_t v1 = 3.14159265359;\n+  float32_t v2 = 1.383894;\n+  float32_t v3 = -2.71828;\n+  float32_t v4 = -3.4891931;\n+\n+  test_case (v1, v2, v1 * v2);\n+  test_case (0.0, __builtin_huge_valf (), 2.0);\n+  test_case (0.0, -__builtin_huge_valf (), -2.0);\n+  test_case (-0.0, __builtin_huge_valf (), -2.0);\n+  test_case (-0.0, -__builtin_huge_valf (), 2.0);\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-times \"fmulx\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+\\n\" 1 } } */"}]}