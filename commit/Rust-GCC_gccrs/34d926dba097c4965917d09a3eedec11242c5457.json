{"sha": "34d926dba097c4965917d09a3eedec11242c5457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkOTI2ZGJhMDk3YzQ5NjU5MTdkMDlhM2VlZGVjMTEyNDJjNTQ1Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-07T22:31:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-08T14:51:22Z"}, "message": "analyzer: fix another ICE in constructor-handling [PR96949]\n\nPR analyzer/96949 reports an ICE with\n--param analyzer-max-svalue-depth=0, where the param value leads\nto INTEGER_CST values in a RANGE_EXPR being treated as unknown\nsymbolic values.\n\nThis patch replaces implicit assumptions that these values are\nconcrete (and thus have concrete bit offsets), adding\nerror-handling for symbolic cases instead of assertions.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96949\n\t* store.cc (binding_map::apply_ctor_val_to_range): Add\n\terror-handling for the cases where we have symbolic offsets.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96949\n\t* gfortran.dg/analyzer/pr96949.f90: New test.", "tree": {"sha": "a81e90bd2416094f975e846aa022e38bd847491e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81e90bd2416094f975e846aa022e38bd847491e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d926dba097c4965917d09a3eedec11242c5457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d926dba097c4965917d09a3eedec11242c5457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d926dba097c4965917d09a3eedec11242c5457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d926dba097c4965917d09a3eedec11242c5457/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af656c401e97f9de2a8478f18278e8efb2a6cf23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af656c401e97f9de2a8478f18278e8efb2a6cf23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af656c401e97f9de2a8478f18278e8efb2a6cf23"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "1348895e5c7557ecfceed7c9385859a4612902fb", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d926dba097c4965917d09a3eedec11242c5457/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d926dba097c4965917d09a3eedec11242c5457/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=34d926dba097c4965917d09a3eedec11242c5457", "patch": "@@ -466,19 +466,23 @@ binding_map::apply_ctor_val_to_range (const region *parent_reg,\n   const region *max_element\n     = get_subregion_within_ctor (parent_reg, max_index, mgr);\n   region_offset min_offset = min_element->get_offset ();\n+  if (min_offset.symbolic_p ())\n+    return false;\n   bit_offset_t start_bit_offset = min_offset.get_bit_offset ();\n   store_manager *smgr = mgr->get_store_manager ();\n   const binding_key *max_element_key\n     = binding_key::make (smgr, max_element, BK_direct);\n-  gcc_assert (max_element_key->concrete_p ());\n+  if (max_element_key->symbolic_p ())\n+    return false;\n   const concrete_binding *max_element_ckey\n     = max_element_key->dyn_cast_concrete_binding ();\n   bit_size_t range_size_in_bits\n     = max_element_ckey->get_next_bit_offset () - start_bit_offset;\n   const concrete_binding *range_key\n     = smgr->get_concrete_binding (start_bit_offset, range_size_in_bits,\n \t\t\t\t  BK_direct);\n-  gcc_assert (range_key->concrete_p ());\n+  if (range_key->symbolic_p ())\n+    return false;\n \n   /* Get the value.  */\n   if (TREE_CODE (val) == CONSTRUCTOR)"}, {"sha": "4af96bb967633faa588e233e4dcbe96900b083f1", "filename": "gcc/testsuite/gfortran.dg/analyzer/pr96949.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d926dba097c4965917d09a3eedec11242c5457/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr96949.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d926dba097c4965917d09a3eedec11242c5457/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr96949.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanalyzer%2Fpr96949.f90?ref=34d926dba097c4965917d09a3eedec11242c5457", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wno-analyzer-too-complex --param analyzer-max-svalue-depth=0\" }\n+\n+program n6\n+  integer :: ck(2,2)\n+  integer :: ac\n+\n+  data ck /4 * 1/\n+\n+  call x9()\n+\n+contains\n+  subroutine x9()\n+    if (ck(2, 1) == 1) then\n+       ac = 1\n+    else\n+       ac = 0\n+    end if\n+  end subroutine x9\n+end program n6"}]}