{"sha": "9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUxM2Q1ZmJjYWJhZjg0YjVlODQ1MGU4YmIxNjg5NGIzZDQyYmE5Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-15T12:56:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-15T12:56:17Z"}, "message": "re PR tree-optimization/71887 (wrong code (SIGFPE) at -O1 and above on x86_64-linux-gnu (in both 32-bit and 64-bit modes))\n\n2016-07-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71887\n\t* tree-ssa-phiopt.c (absorbing_element_p): Add rhs arg and\n\tverify it is not zero for division / modulo handling.\n\t(value_replacement): Adjust.\n\n\t* gcc.dg/torture/pr71887.c: New testcase.\n\nFrom-SVN: r238373", "tree": {"sha": "56a686a80dbf024010fa6ae23366cee856981020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a686a80dbf024010fa6ae23366cee856981020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad611a4c8401a0ba74501d6c289f881b3de82827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad611a4c8401a0ba74501d6c289f881b3de82827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad611a4c8401a0ba74501d6c289f881b3de82827"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "318baa2041136dac98a9cd6ba4841404096ee7fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "patch": "@@ -1,3 +1,10 @@\n+2016-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71887\n+\t* tree-ssa-phiopt.c (absorbing_element_p): Add rhs arg and\n+\tverify it is not zero for division / modulo handling.\n+\t(value_replacement): Adjust.\n+\n 2016-07-15  Virendra Pathak  <virendra.pathak@broadcom.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "b4892fcd51518b2dbc01124a4b856dea8fe4f314", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "patch": "@@ -1,3 +1,8 @@\n+2016-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71887\n+\t* gcc.dg/torture/pr71887.c: New testcase.\n+\n 2016-07-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/71858"}, {"sha": "2df816ae9343b11dd4c26fe43226a48ec5f58cc8", "filename": "gcc/testsuite/gcc.dg/torture/pr71887.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71887.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71887.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71887.c?ref=9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+char a;\n+int b;\n+\n+int main ()\n+{\n+  unsigned char c = a, d = a;\n+  b = d == 0 ? c : c % d;\n+  return 0;\n+}"}, {"sha": "dd3837d0da1e127aceca022ed1f9736299df8e15", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9513d5fbcabaf84b5e8450e8bb16894b3d42ba96/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9513d5fbcabaf84b5e8450e8bb16894b3d42ba96", "patch": "@@ -812,7 +812,7 @@ neutral_element_p (tree_code code, tree arg, bool right)\n /* Returns true if ARG is an absorbing element for operation CODE.  */\n \n static bool\n-absorbing_element_p (tree_code code, tree arg, bool right)\n+absorbing_element_p (tree_code code, tree arg, bool right, tree rval)\n {\n   switch (code)\n     {\n@@ -827,6 +827,8 @@ absorbing_element_p (tree_code code, tree arg, bool right)\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n+      return !right && integer_zerop (arg);\n+\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:\n@@ -836,7 +838,9 @@ absorbing_element_p (tree_code code, tree arg, bool right)\n     case CEIL_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n-      return !right && integer_zerop (arg);\n+      return (!right\n+\t      && integer_zerop (arg)\n+\t      && tree_single_nonzero_warnv_p (rval, NULL));\n \n     default:\n       return false;\n@@ -1010,9 +1014,10 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t      && neutral_element_p (code_def, cond_rhs, false))\n \t  || (operand_equal_for_phi_arg_p (arg1, cond_rhs)\n \t      && ((operand_equal_for_phi_arg_p (rhs2, cond_lhs)\n-\t\t   && absorbing_element_p (code_def, cond_rhs, true))\n+\t\t   && absorbing_element_p (code_def, cond_rhs, true, rhs2))\n \t\t  || (operand_equal_for_phi_arg_p (rhs1, cond_lhs)\n-\t\t      && absorbing_element_p (code_def, cond_rhs, false))))))\n+\t\t      && absorbing_element_p (code_def,\n+\t\t\t\t\t      cond_rhs, false, rhs2))))))\n     {\n       gsi = gsi_for_stmt (cond);\n       if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))"}]}