{"sha": "781183595acba67a37c66f59a0c1d9b5fee7e248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxMTgzNTk1YWNiYTY3YTM3YzY2ZjU5YTBjMWQ5YjVmZWU3ZTI0OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-02-22T20:33:29Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-02-22T20:33:29Z"}, "message": "Add conversions between _Float128 and Decimal.\n\nThis patch implements conversions between _Float128 and the 3 Decimal floating\ntypes.  It does this by extendending the dfp-bit conversions to add a new\nbinary floating point type (KF), and doing the conversions in the same manner\nas the other binary/decimal conversions.\n\nFor conversions from _Float128 to Decimal, this patch uses a function\n(__sprintfkf) instead of the sprintf function to convert long double values to\nstrings.  The __sprintfkf function determines if GLIBC 2.32 or newer is used\nand calls the IEEE 128-bit version of sprintf (__sprintfieee128).  If the GLIBC\nis earlier than 2.32, the code will convert _Float128 to __ibm128 and then use\nthe normal sprintf to convert this value.\n\nFor conversions from Decimal to _Float128, this patch uses a function\n(__strtokf) instead of strtold to convert the strings from the Decimal\nconversion to long double.  The __strtokf function determines if GLIBC 2.32 or\nnewer is used, and if it is, calls the IEEE 128-bit version (__strtoieee128).\nIf the GLIBC is earlier than 2.32, the code will call strtold and convert the\n__ibm128 value to _Float128.\n\nThese functions will primarily be used if/when the default PowerPC long double\ntype is changed to IEEE 128-bit, but they could also be used if the user\nexplicitly converts _Float128 to/from a Decimal type.\n\nlibgcc/\n2021-02-22  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/_dd_to_kf.c: New file.\n\t* config/rs6000/_kf_to_dd.c: New file.\n\t* config/rs6000/_kf_to_sd.c: New file.\n\t* config/rs6000/_kf_to_td.c: New file.\n\t* config/rs6000/_sd_to_kf.c: New file.\n\t* config/rs6000/_sprintfkf.c: New file.\n\t* config/rs6000/_sprintfkf.h: New file.\n\t* config/rs6000/_strtokf.h: New file.\n\t* config/rs6000/_strtokf.c: New file.\n\t* config/rs6000/_td_to_kf.c: New file.\n\t* config/rs6000/quad-float128.h: Add new declarations.\n\t* config/rs6000/t-float128 (fp128_dec_funcs): New macro.\n\t(fp128_decstr_funcs): New macro.\n\t(ibm128_dec_funcs): New macro.\n\t(fp128_ppc_funcs): Add the new conversions.\n\t(fp128_dec_objs): Force Decimal <-> __float128 conversions to be\n\tcompiled with -mabi=ieeelongdouble.\n\t(fp128_decstr_objs): Force __float128 <-> string conversions to be\n\tcompiled with -mabi=ibmlongdouble.\n\t(ibm128_dec_objs): Force Decimal <-> __float128 conversions to be\n\tcompiled with -mabi=ieeelongdouble.\n\t(FP128_CFLAGS_DECIMAL): New macro.\n\t(IBM128_CFLAGS_DECIMAL): New macro.\n\t* dfp-bit.c (DFP_TO_BFP): Add PowerPC _Float128 support.\n\t(BFP_TO_DFP): Add PowerPC _Float128 support.\n\t* dfp-bit.h (BFP_KIND): Add new binary floating point kind for\n\tIEEE 128-bit floating point.\n\t(DFP_TO_BFP): Add PowerPC _Float128 support.\n\t(BFP_TO_DFP): Add PowerPC _Float128 support.\n\t(BFP_SPRINTF): New macro.", "tree": {"sha": "aebce9b934a865fdd62b1307093b2b7cd0c14fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aebce9b934a865fdd62b1307093b2b7cd0c14fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/781183595acba67a37c66f59a0c1d9b5fee7e248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781183595acba67a37c66f59a0c1d9b5fee7e248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781183595acba67a37c66f59a0c1d9b5fee7e248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781183595acba67a37c66f59a0c1d9b5fee7e248/comments", "author": null, "committer": null, "parents": [{"sha": "8e99b5ba4c19526335fe9cabdc6df7fb2edcfe6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e99b5ba4c19526335fe9cabdc6df7fb2edcfe6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e99b5ba4c19526335fe9cabdc6df7fb2edcfe6f"}], "stats": {"total": 470, "additions": 467, "deletions": 3}, "files": [{"sha": "6613c4483f88f44271441edcf5fe5c5daa690bb4", "filename": "libgcc/config/rs6000/_dd_to_kf.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_dd_to_kf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_dd_to_kf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_dd_to_kf.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Decimal64 -> _Float128 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to dd_to_tf conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_dd_to_kf\t\t1\n+#define WIDTH\t\t\t64\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "93a10435e6f805f997b538ecb30635f64975992a", "filename": "libgcc/config/rs6000/_kf_to_dd.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_dd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_dd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_kf_to_dd.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* _Float128 -> Decimal64 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to tf_to_dd conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_kf_to_dd\t\t1\n+#define WIDTH\t\t\t64\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "01396da814b7623f520a86c243083f25bd6532f1", "filename": "libgcc/config/rs6000/_kf_to_sd.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_sd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_sd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_kf_to_sd.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* _Float128 -> Decimal32 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to tf_to_sd conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_kf_to_sd\t\t1\n+#define WIDTH\t\t\t32\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "45bba925f9ad4aae483d1623d6e0317a7225edbf", "filename": "libgcc/config/rs6000/_kf_to_td.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_td.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_kf_to_td.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_kf_to_td.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* _Float128 -> Decimal128 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to tf_to_td conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_kf_to_td\t\t1\n+#define WIDTH\t\t\t128\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "92244442050ab369ce8873711bf205f2f06c3586", "filename": "libgcc/config/rs6000/_sd_to_kf.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sd_to_kf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sd_to_kf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_sd_to_kf.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Decimal32 -> _Float128 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to sd_to_tf conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_sd_to_kf\t\t1\n+#define WIDTH\t\t\t32\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "a7fdfb483c9a111c3254cfa1535f43b90357ddbf", "filename": "libgcc/config/rs6000/_sprintfkf.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,57 @@\n+/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Conversion to IEEE 128-bit floating point from string using snprintf.  */\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <soft-fp.h>\n+#include <quad-float128.h>\n+#include <stdio.h>\n+\n+/* This function must be built with IBM 128-bit as long double, so that we can\n+   access the strfroml function if do not have an IEEE 128-bit version, and if\n+   that is not available, use sprintf.  */\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IBM128__)\n+#error \"Long double is not IBM 128-bit\"\n+#endif\n+\n+/* If the user is using GLIBC 2.32, we can use the __snprintfieee128 function.\n+\n+   If we are linked against an earlier library, we will have fake it by\n+   converting the value to long double, and using sprintf to do the conversion.\n+   This isn't ideal, as IEEE 128-bit has more exponent range than IBM\n+   128-bit.  */\n+\n+extern int __sprintfieee128 (char *restrict, const char *restrict, ...)\n+  __attribute__ ((__weak__));\n+\n+int __sprintfkf (char *restrict string,\n+\t\t const char *restrict format,\n+\t\t _Float128 number)\n+{\n+  if (__sprintfieee128)\n+    return __sprintfieee128 (string, format, number);\n+\n+  return sprintf (string, format, (long double) number);\n+}"}, {"sha": "637d104c8828341a7de087faa2c32fab32cc4415", "filename": "libgcc/config/rs6000/_sprintfkf.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Declaration of the conversion function to IEEE 128-bit floating point from\n+   string using snprintf.  */\n+\n+extern int __sprintfkf (char *restrict, const char *restrict, ...);\n+"}, {"sha": "dc13534cdc2235577b75a4ae0682c621b07cd7f7", "filename": "libgcc/config/rs6000/_strtokf.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_strtokf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_strtokf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_strtokf.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,53 @@\n+/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Conversion to IEEE 128-bit floating point from string.  */\n+\n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <soft-fp.h>\n+#include <quad-float128.h>\n+\n+/* This function must be built with IBM 128-bit as long double, so that we can\n+   access the strtold function if do not have an IEEE 128-bit version.  */\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IBM128__)\n+#error \"Long double is not IBM 128-bit\"\n+#endif\n+\n+/* If the user is using GLIBC 2.32, we can use the __strtoieee128 function.\n+\n+   If we are linked against an earlier library, we will have fake it by\n+   converting the string to IBM 128-bit long double, and then converting that to\n+   __float128.  This isn't ideal, as IEEE 128-bit has more exponent range than\n+   IBM 128-bit.  */\n+\n+extern _Float128 __strtoieee128 (const char *, char **) __attribute__ ((__weak__));\n+\n+_Float128\n+__strtokf (const char *string, char **endptr)\n+{\n+  if (__strtoieee128)\n+    return __strtoieee128 (string, endptr);\n+\n+  return strtold (string, endptr);\n+}"}, {"sha": "a7ca8e092440816c1169293dad4fd0797f92c199", "filename": "libgcc/config/rs6000/_strtokf.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_strtokf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_strtokf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_strtokf.h?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Declaration of the conversion function to IEEE 128-bit floating point from\n+   string.  */\n+\n+extern _Float128 __strtokf (const char *, char **);"}, {"sha": "0134581207f4e562bf66fc24716f332871d82a6b", "filename": "libgcc/config/rs6000/_td_to_kf.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_td_to_kf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2F_td_to_kf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_td_to_kf.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Decimal128 -> _Float128 conversion.  */\n+\n+/* FINE_GRAINED_LIBRARIES is used so we can isolate just to td_to_tf conversion\n+   function from dp-bits.c.  */\n+#define FINE_GRAINED_LIBRARIES\t1\n+#define L_td_to_kf\t\t1\n+#define WIDTH\t\t\t128\n+\n+#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IEEE128__)\n+#error \"Long double is not IEEE 128-bit\"\n+#endif\n+\n+/* Use dfp-bit.c to do the real work.  */\n+#include \"dfp-bit.c\""}, {"sha": "5beb1531d2b90ce637ea5d7784353d6a9f997456", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -49,6 +49,7 @@ typedef __complex float TCtype __attribute__ ((mode (TC)));\n #pragma GCC target (\"vsx,float128\")\n #endif\n \n+#include <stddef.h>\n #include <quad.h>\n \n #define IBM128_TYPE\t__ibm128\n@@ -171,6 +172,13 @@ extern TFtype __trunctfkf2 (IBM128_TYPE);\n extern TCtype __mulkc3 (TFtype, TFtype, TFtype, TFtype);\n extern TCtype __divkc3 (TFtype, TFtype, TFtype, TFtype);\n \n+/* Convert IEEE 128-bit floating point to/from string.  We explicitly use\n+   _Float128 instead of TFmode because _strtokf and _strfromkf must be compiled\n+   with long double being IBM 128.  */\n+extern _Float128 __strtokf (const char *, char **);\n+extern int __strfromkf (char *restrict, size_t, const char *restrict,\n+\t\t\t_Float128);\n+\n /* Implementation of conversions between __ibm128 and __float128, to allow the\n    same code to be used on systems with IEEE 128-bit emulation and with IEEE\n    128-bit hardware support.  */"}, {"sha": "6fb1a3d871bad3e1ff1ab6e43a2d51ae6318ccf1", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -22,10 +22,23 @@ fp128_softfp_static_obj\t= $(addsuffix -sw$(objext),$(fp128_softfp_funcs))\n fp128_softfp_shared_obj\t= $(addsuffix -sw_s$(objext),$(fp128_softfp_funcs))\n fp128_softfp_obj\t= $(fp128_softfp_static_obj) $(fp128_softfp_shared_obj)\n \n+# Decimal <-> _Float128 conversions\n+fp128_dec_funcs\t\t= _kf_to_sd _kf_to_dd _kf_to_td \\\n+\t\t\t  _sd_to_kf _dd_to_kf _td_to_kf\n+\n+# _Float128 to/from string conversions that must be compiled with IBM 128-bit\n+# long double.\n+fp128_decstr_funcs\t= _strtokf _sprintfkf\n+\n+# Decimal <-> __ibm128 conversions\n+ibm128_dec_funcs\t= _tf_to_sd _tf_to_dd _tf_to_td \\\n+\t\t\t  _sd_to_tf _dd_to_tf _td_to_tf\n+\n # New functions for software emulation\n fp128_ppc_funcs\t\t= floattikf floatuntikf fixkfti fixunskfti \\\n \t\t\t  extendkftf2-sw trunctfkf2-sw \\\n-\t\t\t  sfp-exceptions _mulkc3 _divkc3 _powikf2\n+\t\t\t  sfp-exceptions _mulkc3 _divkc3 _powikf2 \\\n+\t\t\t  $(fp128_dec_funcs) $(fp128_decstr_funcs)\n \n fp128_ppc_src\t\t= $(addprefix $(srcdir)/config/rs6000/,$(addsuffix \\\n \t\t\t\t.c,$(fp128_ppc_funcs)))\n@@ -69,6 +82,28 @@ $(fp128_ppc_obj)\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_SW)\n $(fp128_obj)\t\t : $(fp128_includes)\n $(fp128_obj)\t\t : $(srcdir)/config/rs6000/quad-float128.h\n \n+# Force the TF mode to/from decimal functions to be compiled with IBM long\n+# double.  Add building the KF mode to/from decimal conversions with explict\n+# IEEE long double.\n+fp128_dec_objs\t\t= $(addsuffix $(objext),$(fp128_dec_funcs)) \\\n+\t\t\t  $(addsuffix _s$(objext),$(fp128_dec_funcs))\n+\n+fp128_decstr_objs\t= $(addsuffix $(objext),$(fp128_decstr_funcs)) \\\n+\t\t\t  $(addsuffix _s$(objext),$(fp128_decstr_funcs))\n+\n+ibm128_dec_objs\t\t= $(addsuffix $(objext),$(ibm128_dec_funcs)) \\\n+\t\t\t  $(addsuffix _s$(objext),$(ibm128_dec_funcs))\n+\n+FP128_CFLAGS_DECIMAL\t= -mno-gnu-attribute -Wno-psabi -mabi=ieeelongdouble\n+IBM128_CFLAGS_DECIMAL\t= -mno-gnu-attribute -Wno-psabi -mabi=ibmlongdouble\n+\n+$(fp128_dec_objs)\t: INTERNAL_CFLAGS += $(FP128_CFLAGS_DECIMAL)\n+$(fp128_decstr_objs)\t: INTERNAL_CFLAGS += $(IBM128_CFLAGS_DECIMAL)\n+$(ibm128_dec_objs)\t: INTERNAL_CFLAGS += $(IBM128_CFLAGS_DECIMAL)\n+\n+$(fp128_decstr_objs)\t: $(srcdir)/config/rs6000/_strtokf.h \\\n+\t\t\t  $(srcdir)/config/rs6000/_sprintfkf.h \\\n+\n $(fp128_softfp_src) : $(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@)) $(fp128_dep)\n \t@src=\"$(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@))\"; \\\n \techo \"Create $@\"; \\"}, {"sha": "0b0f9ace1fac1dc4a3c34094dfb1164bed2a119a", "filename": "libgcc/dfp-bit.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fdfp-bit.c?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -606,6 +606,7 @@ INT_TO_DFP (INT_TYPE i)\n \n #if defined (L_sd_to_sf) || defined (L_dd_to_sf) || defined (L_td_to_sf) \\\n  || defined (L_sd_to_df) || defined (L_dd_to_df) || defined (L_td_to_df) \\\n+ || defined (L_sd_to_kf) || defined (L_dd_to_kf) || defined (L_td_to_kf) \\\n  || ((defined (L_sd_to_xf) || defined (L_dd_to_xf) || defined (L_td_to_xf)) \\\n      && LONG_DOUBLE_HAS_XF_MODE) \\\n  || ((defined (L_sd_to_tf) || defined (L_dd_to_tf) || defined (L_td_to_tf)) \\\n@@ -626,6 +627,7 @@ DFP_TO_BFP (DFP_C_TYPE f)\n                                                                                 \n #if defined (L_sf_to_sd) || defined (L_sf_to_dd) || defined (L_sf_to_td) \\\n  || defined (L_df_to_sd) || defined (L_df_to_dd) || defined (L_df_to_td) \\\n+ || defined (L_kf_to_sd) || defined (L_kf_to_dd) || defined (L_kf_to_td) \\\n  || ((defined (L_xf_to_sd) || defined (L_xf_to_dd) || defined (L_xf_to_td)) \\\n      && LONG_DOUBLE_HAS_XF_MODE) \\\n  || ((defined (L_tf_to_sd) || defined (L_tf_to_dd) || defined (L_tf_to_td)) \\\n@@ -641,8 +643,14 @@ BFP_TO_DFP (BFP_TYPE x)\n   decContextDefault (&context, CONTEXT_INIT);\n   DFP_INIT_ROUNDMODE (context.round);\n \n-  /* Use a C library function to write the floating point value to a string.  */\n-  sprintf (buf, BFP_FMT, (BFP_VIA_TYPE) x);\n+  /* Use the sprintf library function to write the floating point value to a string.\n+\n+     If we are handling the IEEE 128-bit floating point on PowerPC, use the\n+     special function __sprintfkf instead of sprintf.  This function allows us\n+     to use __sprintfieee128 if we have a new enough GLIBC, and it can fall back\n+     to using the traditional sprintf via conversion to IBM 128-bit if the glibc\n+     is older.  */\n+  BFP_SPRINTF (buf, BFP_FMT, (BFP_VIA_TYPE) x);\n \n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);"}, {"sha": "5e3bfa65ab8086865bb5af618ffe105dac3e8c05", "filename": "libgcc/dfp-bit.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781183595acba67a37c66f59a0c1d9b5fee7e248/libgcc%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fdfp-bit.h?ref=781183595acba67a37c66f59a0c1d9b5fee7e248", "patch": "@@ -241,6 +241,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #elif defined (L_sd_to_tf) || defined (L_dd_to_tf) || defined (L_td_to_tf) \\\n  ||   defined (L_tf_to_sd) || defined (L_tf_to_dd) || defined (L_tf_to_td)\n #define BFP_KIND 4\n+#elif defined (L_sd_to_kf) || defined (L_dd_to_kf) || defined (L_td_to_kf) \\\n+ ||   defined (L_kf_to_sd) || defined (L_kf_to_dd) || defined (L_kf_to_td)\n+#define BFP_KIND 5\n #endif\n \n /*  If BFP_KIND is defined, define additional macros:\n@@ -291,6 +294,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define BFP_VIA_TYPE long double\n #endif /* LONG_DOUBLE_HAS_TF_MODE */\n \n+#elif BFP_KIND == 5\n+#define BFP_TYPE _Float128\n+#define BFP_FMT \"%.36Le\"\n+#define BFP_VIA_TYPE _Float128\n+#define STR_TO_BFP __strtokf\n+#include <_strtokf.h>\n+\n #endif /* BFP_KIND */\n \n #if WIDTH == 128 || WIDTH_TO == 128\n@@ -490,6 +500,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #elif BFP_KIND == 4\n #define BFP_TO_DFP\tDPD_BID_NAME(__dpd_trunctfsd,__bid_trunctfsd)\n #define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendsdtf,__bid_extendsdtf)\n+#elif BFP_KIND == 5\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_trunckfsd,__bid_trunckfsd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendsdkf,__bid_extendsdkf)\n #endif /* BFP_KIND */\n \n #elif WIDTH == 64\n@@ -505,6 +518,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #elif BFP_KIND == 4\n #define BFP_TO_DFP\tDPD_BID_NAME(__dpd_trunctfdd,__bid_trunctfdd)\n #define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendddtf,__bid_extendddtf)\n+#elif BFP_KIND == 5\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_trunckfdd,__bid_trunckfdd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendddkf,__bid_extendddkf)\n #endif /* BFP_KIND */\n \n #elif WIDTH == 128\n@@ -520,6 +536,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #elif BFP_KIND == 4\n #define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendtftd,__bid_extendtftd)\n #define DFP_TO_BFP\tDPD_BID_NAME(__dpd_trunctdtf,__bid_trunctdtf)\n+#elif BFP_KIND == 5\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendkftd,__bid_extendkftd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_trunctdkf,__bid_trunctdkf)\n #endif /* BFP_KIND */\n \n #endif /* WIDTH */\n@@ -609,6 +628,7 @@ extern DFP_C_TYPE INT_TO_DFP (INT_TYPE);\n \n #if defined (L_sd_to_sf) || defined (L_dd_to_sf) || defined (L_td_to_sf) \\\n  || defined (L_sd_to_df) || defined (L_dd_to_df) || defined (L_td_to_df) \\\n+ || defined (L_sd_to_kf) || defined (L_dd_to_kf) || defined (L_td_to_kf) \\\n  || ((defined (L_sd_to_xf) || defined (L_dd_to_xf) || defined (L_td_to_xf)) \\\n      && LONG_DOUBLE_HAS_XF_MODE) \\\n  || ((defined (L_sd_to_tf) || defined (L_dd_to_tf) || defined (L_td_to_tf)) \\\n@@ -623,6 +643,12 @@ extern BFP_TYPE DFP_TO_BFP (DFP_C_TYPE);\n  || ((defined (L_tf_to_sd) || defined (L_tf_to_dd) || defined (L_tf_to_td)) \\\n      && LONG_DOUBLE_HAS_TF_MODE)\n extern DFP_C_TYPE BFP_TO_DFP (BFP_TYPE);\n+#define BFP_SPRINTF sprintf\n+\n+#elif defined (L_kf_to_sd) || defined (L_kf_to_dd) || defined (L_kf_to_td)\n+extern DFP_C_TYPE BFP_TO_DFP (BFP_TYPE);\n+#include <_sprintfkf.h>\n+#define BFP_SPRINTF __sprintfkf\n #endif\n \n #endif /* _DFPBIT_H */"}]}