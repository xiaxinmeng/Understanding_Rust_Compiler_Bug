{"sha": "ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1MTZhNzRkZTNmZWRlNGQ1MmRjZDNiOGFlYjY1YWExNDhlMTRlMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-04-30T19:33:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-04-30T19:33:32Z"}, "message": "arm.c (arm_unwind_emit): Use crtl->all_throwers_are_sibcalls instead of cfun->all_throwers_are_sibcalls.\n\ngcc/\n\t* config/arm/arm.c (arm_unwind_emit): Use\n\tcrtl->all_throwers_are_sibcalls instead of\n\tcfun->all_throwers_are_sibcalls.\n\t(arm_output_fn_unwind): Likewise.\n\t* config/frv/frv.c (frv_stack_info): Use crtl->uses_pic_offset_table\n\tinstead of cfun->uses_pic_offset_table.\n\t(frv_expand_prologue): Likewise.\n\t(frv_frame_pointer_required): Likewise.\n\t(frv_expand_fdpic_call): Likewise.\n\t(frv_emit_movsi): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Use\n\tcfun->returns_pcc_struct instead of\n\tcurrent_function_returns_pcc_struct.\n\t* config/m32c/m32c.c (need_to_save): Use crtl->calls_eh_return\n\tinstead of cfun->calls_eh_return.\n\t(m32c_pushm_popm): Likewise.\n\t* config/xtensa/xtensa.h (cfun->calls_alloca): Remove bogus\n\t\"extern\" declaration.\n\nFrom-SVN: r134835", "tree": {"sha": "3554e21804b54bd9867bfb724434ae589eb43f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3554e21804b54bd9867bfb724434ae589eb43f0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/comments", "author": null, "committer": null, "parents": [{"sha": "00d382a8ddfca7635f66bef566909f9f207e50df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d382a8ddfca7635f66bef566909f9f207e50df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d382a8ddfca7635f66bef566909f9f207e50df"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "28225695e1c6b186ab952fa1dd73d76c9623338d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -1,3 +1,24 @@\n+2008-04-30  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/arm/arm.c (arm_unwind_emit): Use\n+\tcrtl->all_throwers_are_sibcalls instead of\n+\tcfun->all_throwers_are_sibcalls.\n+\t(arm_output_fn_unwind): Likewise.\n+\t* config/frv/frv.c (frv_stack_info): Use crtl->uses_pic_offset_table\n+\tinstead of cfun->uses_pic_offset_table.\n+\t(frv_expand_prologue): Likewise.\n+\t(frv_frame_pointer_required): Likewise.\n+\t(frv_expand_fdpic_call): Likewise.\n+\t(frv_emit_movsi): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Use\n+\tcfun->returns_pcc_struct instead of\n+\tcurrent_function_returns_pcc_struct.\n+\t* config/m32c/m32c.c (need_to_save): Use crtl->calls_eh_return\n+\tinstead of cfun->calls_eh_return.\n+\t(m32c_pushm_popm): Likewise.\n+\t* config/xtensa/xtensa.h (cfun->calls_alloca): Remove bogus\n+\t\"extern\" declaration.\n+\n 2008-04-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/21636"}, {"sha": "64f12a1600184c3187e979469a89df007437726a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -18635,7 +18635,7 @@ arm_unwind_emit (FILE * asm_out_file, rtx insn)\n \n   if (!(flag_unwind_tables || crtl->uses_eh_lsda)\n       && (TREE_NOTHROW (current_function_decl)\n-\t  || cfun->all_throwers_are_sibcalls))\n+\t  || crtl->all_throwers_are_sibcalls))\n     return;\n \n   if (GET_CODE (insn) == NOTE || !RTX_FRAME_RELATED_P (insn))\n@@ -18724,7 +18724,7 @@ arm_output_fn_unwind (FILE * f, bool prologue)\n \t the frame annotations.  */\n       if (!(flag_unwind_tables || crtl->uses_eh_lsda)\n \t  && (TREE_NOTHROW (current_function_decl)\n-\t      || cfun->all_throwers_are_sibcalls))\n+\t      || crtl->all_throwers_are_sibcalls))\n \tfputs(\"\\t.cantunwind\\n\", f);\n \n       fputs (\"\\t.fnend\\n\", f);"}, {"sha": "ef9aa51b9c54cba9f05c649331572d9ebbafaa92", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -1175,7 +1175,7 @@ frv_stack_info (void)\n \t\t  || (crtl->calls_eh_return\n \t\t      && (regno >= FIRST_EH_REGNUM && regno <= LAST_EH_REGNUM))\n \t\t  || (!TARGET_FDPIC && flag_pic\n-\t\t      && cfun->uses_pic_offset_table && regno == PIC_REGNO))\n+\t\t      && crtl->uses_pic_offset_table && regno == PIC_REGNO))\n \t\t{\n \t\t  info_ptr->save_p[regno] = REG_SAVE_1WORD;\n \t\t  size_1word += UNITS_PER_WORD;\n@@ -1195,7 +1195,7 @@ frv_stack_info (void)\n \t      || cfun->machine->frame_needed\n               || (TARGET_LINKED_FP && frame_pointer_needed)\n               || (!TARGET_FDPIC && flag_pic\n-\t\t  && cfun->uses_pic_offset_table))\n+\t\t  && crtl->uses_pic_offset_table))\n \t    {\n \t      info_ptr->save_p[LR_REGNO] = REG_SAVE_1WORD;\n \t      size_1word += UNITS_PER_WORD;\n@@ -1864,7 +1864,7 @@ frv_expand_prologue (void)\n     emit_insn (gen_blockage ());\n \n   /* Set up pic register/small data register for this function.  */\n-  if (!TARGET_FDPIC && flag_pic && cfun->uses_pic_offset_table)\n+  if (!TARGET_FDPIC && flag_pic && crtl->uses_pic_offset_table)\n     emit_insn (gen_pic_prologue (gen_rtx_REG (Pmode, PIC_REGNO),\n \t\t\t\t gen_rtx_REG (Pmode, LR_REGNO),\n \t\t\t\t gen_rtx_REG (SImode, OFFSET_REGNO)));\n@@ -2110,7 +2110,7 @@ frv_frame_pointer_required (void)\n   if (!current_function_sp_is_unchanging)\n     return TRUE;\n \n-  if (!TARGET_FDPIC && flag_pic && cfun->uses_pic_offset_table)\n+  if (!TARGET_FDPIC && flag_pic && crtl->uses_pic_offset_table)\n     return TRUE;\n \n   if (profile_flag)\n@@ -3799,7 +3799,7 @@ frv_expand_fdpic_call (rtx *operands, bool ret_value, bool sibcall)\n \tx = gen_symGOTOFF2reg (dest, addr, OUR_FDPIC_REG,\n \t\t\t       GEN_INT (R_FRV_FUNCDESC_GOTOFF12));\n       emit_insn (x);\n-      cfun->uses_pic_offset_table = TRUE;\n+      crtl->uses_pic_offset_table = TRUE;\n       addr = dest;\n     }\n   else if (GET_CODE (addr) == SYMBOL_REF)\n@@ -4160,7 +4160,7 @@ frv_emit_movsi (rtx dest, rtx src)\n \t\t\t\t\t   gen_rtx_REG (Pmode, base_regno),\n \t\t\t\t\t   GEN_INT (R_FRV_GPREL12)));\n       if (base_regno == PIC_REGNO)\n-\tcfun->uses_pic_offset_table = TRUE;\n+\tcrtl->uses_pic_offset_table = TRUE;\n       return TRUE;\n     }\n \n@@ -4204,7 +4204,7 @@ frv_emit_movsi (rtx dest, rtx src)\n \t  break;\n \t}\n       emit_insn (x);\n-      cfun->uses_pic_offset_table = TRUE;\n+      crtl->uses_pic_offset_table = TRUE;\n       return TRUE;\n     }\n "}, {"sha": "7ee5eda9407daaedf61d855a24047bca1950935c", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -1872,7 +1872,7 @@ iq2000_expand_prologue (void)\n \n   /* If struct value address is treated as the first argument.  */\n   if (aggregate_value_p (DECL_RESULT (fndecl), fndecl)\n-      && ! current_function_returns_pcc_struct\n+      && !cfun->returns_pcc_struct\n       && targetm.calls.struct_value_rtx (TREE_TYPE (fndecl), 1) == 0)\n     {\n       tree type = build_pointer_type (fntype);"}, {"sha": "2e5558fd92d55fc0881da10d13f5952132e7bf2b", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -1251,7 +1251,7 @@ need_to_save (int regno)\n {\n   if (fixed_regs[regno])\n     return 0;\n-  if (cfun->calls_eh_return)\n+  if (crtl->calls_eh_return)\n     return 1;\n   if (regno == FP_REGNO)\n     return 0;\n@@ -1283,7 +1283,7 @@ m32c_pushm_popm (Push_Pop_Type ppt)\n \n   if (crtl->return_rtx\n       && GET_CODE (crtl->return_rtx) == PARALLEL\n-      && !(cfun->calls_eh_return || cfun->machine->is_interrupt))\n+      && !(crtl->calls_eh_return || cfun->machine->is_interrupt))\n     {\n       rtx exp = XVECEXP (crtl->return_rtx, 0, 0);\n       rtx rv = XEXP (exp, 0);"}, {"sha": "eaef97e2094c488cc698fda3e2c71fe9a25e4da0", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad516a74de3fede4d52dcd3b8aeb65aa148e14e3/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=ad516a74de3fede4d52dcd3b8aeb65aa148e14e3", "patch": "@@ -23,7 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"xtensa-config.h\"\n \n /* Standard GCC variables that we reference.  */\n-extern int cfun->calls_alloca;\n extern int optimize;\n \n /* External variables defined in xtensa.c.  */"}]}