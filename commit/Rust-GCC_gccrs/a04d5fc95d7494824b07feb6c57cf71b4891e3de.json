{"sha": "a04d5fc95d7494824b07feb6c57cf71b4891e3de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA0ZDVmYzk1ZDc0OTQ4MjRiMDdmZWI2YzU3Y2Y3MWI0ODkxZTNkZQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2016-01-15T22:42:41Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2016-01-15T22:42:41Z"}, "message": "libstdc++: Make certain exceptions transaction_safe.\n\nFrom-SVN: r232454", "tree": {"sha": "2a0e76101e1e20d6aaa161901261dee89f905afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0e76101e1e20d6aaa161901261dee89f905afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a04d5fc95d7494824b07feb6c57cf71b4891e3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04d5fc95d7494824b07feb6c57cf71b4891e3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04d5fc95d7494824b07feb6c57cf71b4891e3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04d5fc95d7494824b07feb6c57cf71b4891e3de/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40c43acacc1765416278e6636c20c5e3a78a7384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c43acacc1765416278e6636c20c5e3a78a7384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c43acacc1765416278e6636c20c5e3a78a7384"}], "stats": {"total": 773, "additions": 731, "deletions": 42}, "files": [{"sha": "5026833da76f9e8a810f3a3d5d414e3084255fc8", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -1,3 +1,7 @@\n+2015-01-15  Torvald Riegel  <triegel@redhat.com>\n+\n+\ttestsuite/libitm.c++/libstdc++-safeexc.C: New.\n+\n 2016-01-13  Torvald Riegel  <triegel@redhat.com>\n \n \t* beginend.cc (gtm_thread::trycommit): Fix seq_cst fences."}, {"sha": "3e1655e83ec8fb016a9720cbb8fb015d200a4d3d", "filename": "libitm/testsuite/libitm.c++/libstdc++-safeexc.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-safeexc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-safeexc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Flibstdc%2B%2B-safeexc.C?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -0,0 +1,89 @@\n+// Tests that the exceptions declared by the TM TS (N4514) as transaction_safe\n+// are indeed that.  Thus, this also tests the transactional clones in\n+// libstdc++ and libsupc++.\n+\n+// { dg-do run }\n+\n+#include <iostream>\n+#include <exception>\n+#include <stdexcept>\n+#include <string>\n+\n+using namespace std;\n+\n+template<typename T> void thrower(const T& t)\n+{\n+  try\n+    {\n+      atomic_commit\n+      {\n+\tthrow t;\n+      }\n+    }\n+  catch (T ex)\n+    {\n+      if (ex != t) abort ();\n+    }\n+}\n+\n+template<typename T> void thrower1(const string& what)\n+{\n+  try\n+    {\n+      atomic_commit\n+      {\n+\tthrow T ();\n+      }\n+    }\n+  catch (T ex)\n+    {\n+      if (what != ex.what()) abort ();\n+    }\n+}\n+\n+template<typename T> void thrower2(const string& what)\n+{\n+  try\n+    {\n+      atomic_commit\n+      {\n+\tthrow T (what);\n+      }\n+    }\n+  catch (T ex)\n+    {\n+      if (what != ex.what()) abort ();\n+    }\n+}\n+\n+\n+int main ()\n+{\n+  thrower<unsigned int> (23);\n+  thrower<int> (23);\n+  thrower<unsigned short> (23);\n+  thrower<short> (23);\n+  thrower<unsigned char> (23);\n+  thrower<char> (23);\n+  thrower<unsigned long int> (42);\n+  thrower<long int> (42);\n+  thrower<unsigned long long int> (42);\n+  thrower<long long int> (42);\n+  thrower<double> (23.42);\n+  thrower<long double> (23.42);\n+  thrower<float> (23.42);\n+  thrower<void*> (0);\n+  thrower<void**> (0);\n+  thrower1<exception> (\"std::exception\");\n+  thrower1<bad_exception> (\"std::bad_exception\");\n+  thrower2<logic_error> (\"test\");\n+  thrower2<domain_error> (\"test\");\n+  thrower2<invalid_argument> (\"test\");\n+  thrower2<length_error> (\"test\");\n+  thrower2<out_of_range> (\"test\");\n+  thrower2<runtime_error> (\"test\");\n+  thrower2<range_error> (\"test\");\n+  thrower2<overflow_error> (\"test\");\n+  thrower2<underflow_error> (\"test\");\n+  return 0;\n+}"}, {"sha": "0c9728bd44bb09ae21e34d68e55ce9525afd2708", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -1,3 +1,28 @@\n+2016-01-15  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string): Declare friends.\n+\t* include/bits/c++config (_GLIBCXX_TXN_SAFE,\n+\t_GLIBCXX_TXN_SAFE_DYN, _GLIBCXX_USE_ALLOCATOR_NEW): New.\n+\t* include/std/stdexcept (logic_error, domain_error, invalid_argument,\n+\tlength_error, out_of_range, runtime_error, range_error,\n+\tunderflow_error, overflow_error): Declare members as transaction-safe.\n+\t(logic_error, runtime_error): Declare friend functions.\n+\t* libsupc++/exception (exception, bad_exception): Declare members as\n+\ttransaction-safe.\n+\t* src/c++11/cow-stdexcept.cc: Define transactional clones for the\n+\ttransaction-safe members of exceptions and helper functions.\n+\t* libsupc++/eh_exception.cc: Adjust and define transactional clones.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.22) Add transactional clones.\n+\t(CXXABI_1.3.10): New.\n+\t* acinclude.m4 (GLIBCXX_CHECK_SIZE_T_MANGLING): New.\n+\t(GLIBCXX_ENABLE_ALLOCATOR): Set ENABLE_ALLOCATOR_NEW.\n+\t* configure.ac: Call GLIBCXX_CHECK_SIZE_T_MANGLING.\n+\t* include/Makefile.am: Write ENABLE_ALLOCATOR_NEW to c++config.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/util/testsuite_abi.cc (check_version): Add CXXABI_1.3.10.\n+\n 2016-01-15  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* include/ext/random.tcc: Use __builtin_isfinite instead of"}, {"sha": "1e256603a2985c35db5904a54f76c211ff540fb0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -2594,6 +2594,8 @@ AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n       ;;\n   esac\n \n+  GLIBCXX_CONDITIONAL(ENABLE_ALLOCATOR_NEW,\n+\t\t      test $enable_libstdcxx_allocator_flag = new)\n   AC_SUBST(ALLOCATOR_H)\n   AC_SUBST(ALLOCATOR_NAME)\n ])\n@@ -4344,6 +4346,34 @@ dnl\n   AC_LANG_RESTORE\n ])\n \n+dnl\n+dnl Check how size_t is mangled.  Copied from libitm.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SIZE_T_MANGLING], [\n+  AC_CACHE_CHECK([how size_t is mangled],\n+                 glibcxx_cv_size_t_mangling, [\n+    AC_TRY_COMPILE([], [extern __SIZE_TYPE__ x; extern unsigned long x;],\n+                   [glibcxx_cv_size_t_mangling=m], [\n+      AC_TRY_COMPILE([], [extern __SIZE_TYPE__ x; extern unsigned int x;],\n+                     [glibcxx_cv_size_t_mangling=j], [\n+        AC_TRY_COMPILE([],\n+                       [extern __SIZE_TYPE__ x; extern unsigned long long x;],\n+                       [glibcxx_cv_size_t_mangling=y], [\n+          AC_TRY_COMPILE([],\n+                         [extern __SIZE_TYPE__ x; extern unsigned short x;],\n+                         [glibcxx_cv_size_t_mangling=t],\n+                         [glibcxx_cv_size_t_mangling=x])\n+        ])\n+      ])\n+    ])\n+  ])\n+  if test $glibcxx_cv_size_t_mangling = x; then\n+    AC_MSG_ERROR([Unknown underlying type for size_t])\n+  fi\n+  AC_DEFINE_UNQUOTED(_GLIBCXX_MANGLE_SIZE_T, [$glibcxx_cv_size_t_mangling],\n+    [Define to the letter to which size_t is mangled.])\n+])\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "4600b2366db603680e3330a283f830d1bc7f0fd3", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -791,6 +791,9 @@\n /* Define if compatibility should be provided for -mlong-double-64. */\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n \n+/* Define to the letter to which size_t is mangled. */\n+#undef _GLIBCXX_MANGLE_SIZE_T\n+\n /* Define if ptrdiff_t is int. */\n #undef _GLIBCXX_PTRDIFF_T_IS_INT\n "}, {"sha": "41069d156a3367ebdf5c4491589f0e22d0e1b390", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -1876,6 +1876,37 @@ GLIBCXX_3.4.22 {\n     _ZNSt6thread6_StateD[012]Ev;\n     _ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE;\n \n+    # Support for the Transactional Memory TS (N4514)\n+    _ZGTtNSt11logic_errorC[12]EPKc;\n+    _ZGTtNSt11logic_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNKSt11logic_error4whatEv;\n+    _ZGTtNSt11logic_errorD[012]Ev;\n+    _ZGTtNSt12domain_errorC[12]EPKc;\n+    _ZGTtNSt12domain_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt12domain_errorD[012]Ev;\n+    _ZGTtNSt16invalid_argumentC[12]EPKc;\n+    _ZGTtNSt16invalid_argumentC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt16invalid_argumentD[012]Ev;\n+    _ZGTtNSt12length_errorC[12]EPKc;\n+    _ZGTtNSt12length_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt12length_errorD[012]Ev;\n+    _ZGTtNSt12out_of_rangeC[12]EPKc;\n+    _ZGTtNSt12out_of_rangeC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt12out_of_rangeD[012]Ev;\n+    _ZGTtNSt13runtime_errorC[12]EPKc;\n+    _ZGTtNSt13runtime_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNKSt13runtime_error4whatEv;\n+    _ZGTtNSt13runtime_errorD[012]Ev;\n+    _ZGTtNSt11range_errorC[12]EPKc;\n+    _ZGTtNSt11range_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt11range_errorD[012]Ev;\n+    _ZGTtNSt14overflow_errorC[12]EPKc;\n+    _ZGTtNSt14overflow_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt14overflow_errorD[012]Ev;\n+    _ZGTtNSt15underflow_errorC[12]EPKc;\n+    _ZGTtNSt15underflow_errorC[12]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;\n+    _ZGTtNSt15underflow_errorD[012]Ev;\n+\n } GLIBCXX_3.4.21;\n \n # Symbols in the support library (libsupc++) have their own tag.\n@@ -2109,6 +2140,16 @@ CXXABI_1.3.9 {\n \n } CXXABI_1.3.8;\n \n+CXXABI_1.3.10 {\n+\n+    # Support for the Transactional Memory TS (N4514)\n+    _ZGTtNKSt9exceptionD1Ev;\n+    _ZGTtNKSt9exception4whatEv;\n+    _ZGTtNKSt13bad_exceptionD1Ev;\n+    _ZGTtNKSt13bad_exception4whatEv;\n+\n+} CXXABI_1.3.9;\n+\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}, {"sha": "94e88a52d7c76e3cf7f189e1027c918b88220343", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 118, "deletions": 9, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -700,6 +700,8 @@ GLIBCXX_C_HEADERS_C_TRUE\n C_INCLUDE_DIR\n ALLOCATOR_NAME\n ALLOCATOR_H\n+ENABLE_ALLOCATOR_NEW_FALSE\n+ENABLE_ALLOCATOR_NEW_TRUE\n CLOCALE_INTERNAL_H\n CLOCALE_CC\n CTIME_CC\n@@ -11594,7 +11596,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11597 \"configure\"\n+#line 11599 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11700,7 +11702,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11703 \"configure\"\n+#line 11705 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15386,7 +15388,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15389 \"configure\"\n+#line 15391 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15421,7 +15423,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15424 \"configure\"\n+#line 15426 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15456,7 +15458,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15459 \"configure\"\n+#line 15461 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15492,7 +15494,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15495 \"configure\"\n+#line 15497 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15571,7 +15573,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15574 \"configure\"\n+#line 15576 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15613,7 +15615,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15616 \"configure\"\n+#line 15618 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15647,7 +15649,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15650 \"configure\"\n+#line 15652 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16285,6 +16287,7 @@ $as_echo \"$enable_libstdcxx_allocator_flag\" >&6; }\n \n \n \n+\n    # Check whether --enable-cheaders was given.\n if test \"${enable_cheaders+set}\" = set; then :\n   enableval=$enable_cheaders;\n@@ -80294,6 +80297,99 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+# For Transactional Memory TS\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking how size_t is mangled\" >&5\n+$as_echo_n \"checking how size_t is mangled... \" >&6; }\n+if test \"${glibcxx_cv_size_t_mangling+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+extern __SIZE_TYPE__ x; extern unsigned long x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_size_t_mangling=m\n+else\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+extern __SIZE_TYPE__ x; extern unsigned int x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_size_t_mangling=j\n+else\n+\n+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+extern __SIZE_TYPE__ x; extern unsigned long long x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_size_t_mangling=y\n+else\n+\n+          cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+extern __SIZE_TYPE__ x; extern unsigned short x;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_size_t_mangling=t\n+else\n+  glibcxx_cv_size_t_mangling=x\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_size_t_mangling\" >&5\n+$as_echo \"$glibcxx_cv_size_t_mangling\" >&6; }\n+  if test $glibcxx_cv_size_t_mangling = x; then\n+    as_fn_error \"Unknown underlying type for size_t\" \"$LINENO\" 5\n+  fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_MANGLE_SIZE_T $glibcxx_cv_size_t_mangling\n+_ACEOF\n+\n+\n+\n # Define documentation rules conditionally.\n \n # See if makeinfo has been installed and is modern enough\n@@ -80755,6 +80851,15 @@ else\n fi\n \n \n+    if test $enable_libstdcxx_allocator_flag = new; then\n+  ENABLE_ALLOCATOR_NEW_TRUE=\n+  ENABLE_ALLOCATOR_NEW_FALSE='#'\n+else\n+  ENABLE_ALLOCATOR_NEW_TRUE='#'\n+  ENABLE_ALLOCATOR_NEW_FALSE=\n+fi\n+\n+\n     if test $enable_cheaders = c; then\n   GLIBCXX_C_HEADERS_C_TRUE=\n   GLIBCXX_C_HEADERS_C_FALSE='#'\n@@ -81274,6 +81379,10 @@ if test -z \"${GLIBCXX_BUILD_PCH_TRUE}\" && test -z \"${GLIBCXX_BUILD_PCH_FALSE}\";\n   as_fn_error \"conditional \\\"GLIBCXX_BUILD_PCH\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_ALLOCATOR_NEW_TRUE}\" && test -z \"${ENABLE_ALLOCATOR_NEW_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ENABLE_ALLOCATOR_NEW\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${GLIBCXX_C_HEADERS_C_TRUE}\" && test -z \"${GLIBCXX_C_HEADERS_C_FALSE}\"; then\n   as_fn_error \"conditional \\\"GLIBCXX_C_HEADERS_C\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "9e19e9927fd1b56e24199189cc8e4df505855b73", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -408,6 +408,9 @@ AC_CHECK_HEADERS([fcntl.h dirent.h sys/statvfs.h utime.h])\n GLIBCXX_ENABLE_FILESYSTEM_TS\n GLIBCXX_CHECK_FILESYSTEM_DEPS\n \n+# For Transactional Memory TS\n+GLIBCXX_CHECK_SIZE_T_MANGLING\n+\n # Define documentation rules conditionally.\n \n # See if makeinfo has been installed and is modern enough"}, {"sha": "39327d98b27b015bdfd2c3dad5db80481d8ad728", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -1200,6 +1200,14 @@ stamp-cxx11-abi:\n \techo 0 > stamp-cxx11-abi\n endif\n \n+if ENABLE_ALLOCATOR_NEW\n+stamp-allocator-new:\n+\techo 1 > stamp-allocator-new\n+else\n+stamp-allocator-new:\n+\techo 0 > stamp-allocator-new\n+endif\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1210,13 +1218,15 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-visibility \\\n \t\t\t      stamp-extern-template \\\n \t\t\t      stamp-dual-abi \\\n-\t\t\t      stamp-cxx11-abi\n+\t\t\t      stamp-cxx11-abi \\\n+\t\t\t      stamp-allocator-new\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n \tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n+\tallocatornew=`cat stamp-allocator-new` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1227,6 +1237,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n \t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n+\t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "e74fae8b849c49c72ccafd3eb2f0b79a892dad52", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -1631,6 +1631,11 @@ stamp-host: ${host_headers} ${bits_host_headers} ${ext_host_headers} ${host_head\n @ENABLE_CXX11_ABI_FALSE@stamp-cxx11-abi:\n @ENABLE_CXX11_ABI_FALSE@\techo 0 > stamp-cxx11-abi\n \n+@ENABLE_ALLOCATOR_NEW_TRUE@stamp-allocator-new:\n+@ENABLE_ALLOCATOR_NEW_TRUE@\techo 1 > stamp-allocator-new\n+@ENABLE_ALLOCATOR_NEW_FALSE@stamp-allocator-new:\n+@ENABLE_ALLOCATOR_NEW_FALSE@\techo 0 > stamp-allocator-new\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1641,13 +1646,15 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-visibility \\\n \t\t\t      stamp-extern-template \\\n \t\t\t      stamp-dual-abi \\\n-\t\t\t      stamp-cxx11-abi\n+\t\t\t      stamp-cxx11-abi \\\n+\t\t\t      stamp-allocator-new\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n \tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n+\tallocatornew=`cat stamp-allocator-new` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1658,6 +1665,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n \t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n+\t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "374c9851539d379bdaf0c308a2c154cc987349e7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -4902,6 +4902,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n+\n+# ifdef _GLIBCXX_TM_TS_INTERNAL\n+      friend void\n+      ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,\n+\t\t\t\t\t    void* exc);\n+      friend const char*\n+      ::_txnal_cow_string_c_str(const void *that);\n+      friend void\n+      ::_txnal_cow_string_D1(void *that);\n+      friend void\n+      ::_txnal_cow_string_D1_commit(void *that);\n+# endif\n   };\n #endif  // !_GLIBCXX_USE_CXX11_ABI\n "}, {"sha": "387a7bb57fefe49425f4a018ce3459119f6285bd", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -481,6 +481,22 @@ namespace std\n # define _GLIBCXX_BEGIN_EXTERN_C extern \"C\" {\n # define _GLIBCXX_END_EXTERN_C }\n \n+#define _GLIBCXX_USE_ALLOCATOR_NEW\n+\n+// Conditionally enable annotations for the Transactional Memory TS on C++11.\n+// Most of the following conditions are due to limitations in the current\n+// implementation.\n+#if __cplusplus >= 201103L && _GLIBCXX_USE_CXX11_ABI\t\t\t\\\n+  && _GLIBCXX_USE_DUAL_ABI && __cpp_transactional_memory >= 201505L\t\\\n+  &&  !_GLIBCXX_FULLY_DYNAMIC_STRING && __GXX_WEAK__ \t\t\t\\\n+  && _GLIBCXX_USE_ALLOCATOR_NEW\n+#define _GLIBCXX_TXN_SAFE transaction_safe\n+#define _GLIBCXX_TXN_SAFE_DYN transaction_safe_dynamic\n+#else\n+#define _GLIBCXX_TXN_SAFE\n+#define _GLIBCXX_TXN_SAFE_DYN\n+#endif\n+\n #else // !__cplusplus\n # define _GLIBCXX_BEGIN_EXTERN_C\n # define _GLIBCXX_END_EXTERN_C"}, {"sha": "aef27cc361712fddf3d82441e7d7f9207927ef13", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -117,34 +117,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     /** Takes a character string describing the error.  */\n     explicit \n-    logic_error(const string& __arg);\n+    logic_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n \n #if __cplusplus >= 201103L\n     explicit\n-    logic_error(const char*);\n+    logic_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n     logic_error(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n     logic_error& operator=(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n #endif\n \n-    virtual ~logic_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~logic_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n-    what() const _GLIBCXX_USE_NOEXCEPT;\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+\n+# ifdef _GLIBCXX_TM_TS_INTERNAL\n+    friend void*\n+    ::_txnal_logic_error_get_msg(void* e);\n+# endif\n   };\n \n   /** Thrown by the library, or by you, to report domain errors (domain in\n    *  the mathematical sense).  */\n   class domain_error : public logic_error \n   {\n   public:\n-    explicit domain_error(const string& __arg);\n+    explicit domain_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit domain_error(const char*);\n+    explicit domain_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -153,9 +158,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class invalid_argument : public logic_error \n   {\n   public:\n-    explicit invalid_argument(const string& __arg);\n+    explicit invalid_argument(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit invalid_argument(const char*);\n+    explicit invalid_argument(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~invalid_argument() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -165,9 +170,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class length_error : public logic_error \n   {\n   public:\n-    explicit length_error(const string& __arg);\n+    explicit length_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit length_error(const char*);\n+    explicit length_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~length_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -177,9 +182,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class out_of_range : public logic_error \n   {\n   public:\n-    explicit out_of_range(const string& __arg);\n+    explicit out_of_range(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit out_of_range(const char*);\n+    explicit out_of_range(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~out_of_range() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -196,33 +201,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n     /** Takes a character string describing the error.  */\n     explicit \n-    runtime_error(const string& __arg);\n+    runtime_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n \n #if __cplusplus >= 201103L\n     explicit\n-    runtime_error(const char*);\n+    runtime_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n     runtime_error(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n     runtime_error& operator=(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n #endif\n \n-    virtual ~runtime_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~runtime_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n-    what() const _GLIBCXX_USE_NOEXCEPT;\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+\n+# ifdef _GLIBCXX_TM_TS_INTERNAL\n+    friend void*\n+    ::_txnal_runtime_error_get_msg(void* e);\n+# endif\n   };\n \n   /** Thrown to indicate range errors in internal computations.  */\n   class range_error : public runtime_error \n   {\n   public:\n-    explicit range_error(const string& __arg);\n+    explicit range_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit range_error(const char*);\n+    explicit range_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~range_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -231,9 +241,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class overflow_error : public runtime_error \n   {\n   public:\n-    explicit overflow_error(const string& __arg);\n+    explicit overflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit overflow_error(const char*);\n+    explicit overflow_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~overflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -242,9 +252,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class underflow_error : public runtime_error \n   {\n   public:\n-    explicit underflow_error(const string& __arg);\n+    explicit underflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n-    explicit underflow_error(const char*);\n+    explicit underflow_error(const char*) _GLIBCXX_TXN_SAFE;\n #endif\n     virtual ~underflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };"}, {"sha": "32f9df73a66cd13395c2baa8b4e45942f0f90a7e", "filename": "libstdc++-v3/libsupc++/eh_exception.cc", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -26,16 +26,18 @@\n #include \"exception\"\n #include <cxxabi.h>\n \n-std::exception::~exception() _GLIBCXX_USE_NOEXCEPT { }\n+std::exception::~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT { }\n \n-std::bad_exception::~bad_exception() _GLIBCXX_USE_NOEXCEPT { }\n+std::bad_exception::~bad_exception() _GLIBCXX_TXN_SAFE_DYN\n+    _GLIBCXX_USE_NOEXCEPT\n+{ }\n \n abi::__forced_unwind::~__forced_unwind() throw() { }\n \n abi::__foreign_exception::~__foreign_exception() throw() { }\n \n const char* \n-std::exception::what() const _GLIBCXX_USE_NOEXCEPT\n+std::exception::what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT\n {\n   // NB: Another elegant option would be returning typeid(*this).name()\n   // and not overriding what() in bad_exception, bad_alloc, etc.  In\n@@ -44,7 +46,41 @@ std::exception::what() const _GLIBCXX_USE_NOEXCEPT\n }\n \n const char* \n-std::bad_exception::what() const _GLIBCXX_USE_NOEXCEPT\n+std::bad_exception::what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT\n {\n   return \"std::bad_exception\";\n }\n+\n+// Transactional clones for the destructors and what().\n+// what() is effectively transaction_pure, but we do not want to annotate it\n+// as such; thus, we call exactly the respective nontransactional function.\n+extern \"C\" {\n+\n+void\n+_ZGTtNKSt9exceptionD1Ev(const std::exception*)\n+{ }\n+\n+const char*\n+_ZGTtNKSt9exception4whatEv(const std::exception* that)\n+{\n+  // We really want the non-virtual call here.  We already executed the\n+  // indirect call representing the virtual call, and the TM runtime or the\n+  // compiler resolved it to this transactional clone.  In the clone, we want\n+  // to do the same as for the nontransactional original, so we just call it.\n+  return that->std::exception::what();\n+}\n+\n+void\n+_ZGTtNKSt13bad_exceptionD1Ev(\n+    const std::bad_exception*)\n+{ }\n+\n+const char*\n+_ZGTtNKSt13bad_exception4whatEv(\n+    const std::bad_exception* that)\n+{\n+  // Also see _ZGTtNKSt9exception4whatEv.\n+  return that->std::bad_exception::what();\n+}\n+\n+}"}, {"sha": "63631f6d1d125fc5d599d317753001070318906d", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -61,11 +61,12 @@ namespace std\n   {\n   public:\n     exception() _GLIBCXX_USE_NOEXCEPT { }\n-    virtual ~exception() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause\n      *  of the current error.  */\n-    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n+    virtual const char*\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /** If an %exception is thrown which is not listed in a function's\n@@ -77,10 +78,11 @@ namespace std\n \n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n-    virtual ~bad_exception() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~bad_exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n \n     // See comment in eh_exception.cc.\n-    virtual const char* what() const _GLIBCXX_USE_NOEXCEPT;\n+    virtual const char*\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n   };\n \n   /// If you write a replacement %terminate handler, it must be of this type."}, {"sha": "afc3f6cddf7c952fc1c0ce86252ed121c7d8a435", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "modified", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -26,6 +26,21 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n+// Enable hooks for support for the Transactional Memory TS (N4514).\n+#define _GLIBCXX_TM_TS_INTERNAL\n+void\n+_txnal_cow_string_C1_for_exceptions(void* that, const char* s, void* exc);\n+const char*\n+_txnal_cow_string_c_str(const void* that);\n+void\n+_txnal_cow_string_D1(void* that);\n+void\n+_txnal_cow_string_D1_commit(void* that);\n+void*\n+_txnal_logic_error_get_msg(void* e);\n+void*\n+_txnal_runtime_error_get_msg(void* e);\n+\n // All exception classes still use the classic COW std::string.\n #define _GLIBCXX_USE_CXX11_ABI 0\n #define _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS 1\n@@ -151,3 +166,277 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n+\n+// Support for the Transactional Memory TS (N4514).\n+//\n+// logic_error and runtime_error both carry a message in the form of a COW\n+// string.  This COW string is never made visible to users of the exception\n+// because what() returns a C string.  The COW string can be constructed as\n+// either a copy of a COW string of another logic_error/runtime_error, or\n+// using a C string or SSO string; thus, the COW string's _Rep is only\n+// accessed by logic_error operations.  We control all txnal clones of those\n+// operations and thus can ensure that _Rep is never accessed transactionally.\n+// Furthermore, _Rep will always have been allocated or deallocated via\n+// global new or delete, so nontransactional writes we do to _Rep cannot\n+// interfere with transactional accesses.\n+extern \"C\" {\n+\n+#ifndef _GLIBCXX_MANGLE_SIZE_T\n+#error Mangled name of size_t type not defined.\n+#endif\n+#define CONCAT1(x,y)\t\tx##y\n+#define CONCAT(x,y)\t\tCONCAT1(x,y)\n+#define _ZGTtnaX\t\tCONCAT(_ZGTtna,_GLIBCXX_MANGLE_SIZE_T)\n+\n+#ifdef __i386__\n+/* Only for 32-bit x86.  */\n+# define ITM_REGPARM\t__attribute__((regparm(2)))\n+#else\n+# define ITM_REGPARM\n+#endif\n+\n+#if __GXX_WEAK__\n+// Declare all libitm symbols we rely on, but make them weak so that we do\n+// not depend on libitm.\n+extern void* _ZGTtnaX (size_t sz) __attribute__((weak));\n+extern void _ZGTtdlPv (void* ptr) __attribute__((weak));\n+extern uint8_t _ITM_RU1(const uint8_t *p)\n+  ITM_REGPARM __attribute__((weak));\n+extern uint32_t _ITM_RU4(const uint32_t *p)\n+  ITM_REGPARM __attribute__((weak));\n+extern uint64_t _ITM_RU8(const uint64_t *p)\n+  ITM_REGPARM __attribute__((weak));\n+extern void _ITM_memcpyRtWn(void *, const void *, size_t)\n+  ITM_REGPARM __attribute__((weak));\n+extern void _ITM_memcpyRnWt(void *, const void *, size_t)\n+  ITM_REGPARM __attribute__((weak));\n+extern void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *)\n+  ITM_REGPARM __attribute__((weak));\n+\n+#else\n+// If there is no support for weak symbols, create dummies.  The exceptions\n+// will not be declared transaction_safe in this case.\n+void* _ZGTtnaX (size_t) { return NULL; }\n+void _ZGTtdlPv (void*) { }\n+uint8_t _ITM_RU1(const uint8_t *) { return 0; }\n+uint32_t _ITM_RU4(const uint32_t *) { return 0; }\n+uint64_t _ITM_RU8(const uint64_t *) { return 0; }\n+void _ITM_memcpyRtWn(void *, const void *, size_t) { }\n+void _ITM_memcpyRnWt(void *, const void *, size_t) { }\n+void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *) { };\n+#endif\n+\n+}\n+\n+// A transactional version of basic_string::basic_string(const char *s)\n+// that also notifies the TM runtime about allocations belonging to this\n+// exception.\n+void\n+_txnal_cow_string_C1_for_exceptions(void* that, const char* s, void *exc)\n+{\n+  typedef std::basic_string<char> bs_type;\n+  bs_type *bs = (bs_type*) that;\n+\n+  // First, do a transactional strlen, but including the trailing zero.\n+  bs_type::size_type len = 1;\n+  for (const char *ss = s; _ITM_RU1((const uint8_t*) ss) != 0; ss++, len++);\n+\n+\n+  // Allocate memory for the string and the refcount.  We use the\n+  // transactional clone of global new[]; if this throws, it will do so in a\n+  // transaction-compatible way.\n+  // The allocation belongs to this exception, so tell the runtime about it.\n+  // TODO Once this is supported, link the following allocation to this\n+  // exception: void *prev = _ITM_setAssociatedException(exc);\n+  bs_type::_Rep *rep;\n+  try\n+    {\n+      rep = (bs_type::_Rep*) _ZGTtnaX (len + sizeof (bs_type::_Rep));\n+    }\n+  catch (...)\n+    {\n+      // Pop the association with this exception.\n+      // TODO Once this is supported, link the following allocation to this\n+      // exception: _ITM_setAssociatedException(prev);\n+      // We do not need to instrument a rethrow.\n+      throw;\n+    }\n+  // Pop the association with this exception.\n+  // TODO Once this is supported, link the following allocation to this\n+  // exception: _ITM_setAssociatedException(prev);\n+\n+  // Now initialize the rest of the string and copy the C string.  The memory\n+  // will be freshly allocated, so nontransactional accesses are sufficient,\n+  // including the writes when copying the string (see above).\n+  rep->_M_set_sharable();\n+  rep->_M_length = rep->_M_capacity = len - 1;\n+  _ITM_memcpyRtWn(rep->_M_refdata(), s, len);\n+  new (&bs->_M_dataplus) bs_type::_Alloc_hider(rep->_M_refdata(),\n+\t\t\t\t\t       bs_type::allocator_type());\n+}\n+\n+static void* txnal_read_ptr(void* const * ptr)\n+{\n+  static_assert(sizeof(uint64_t) == sizeof(void*)\n+\t\t|| sizeof(uint32_t) == sizeof(void*));\n+  // FIXME make a true compile-time choice to prevent warnings.\n+#if __UINTPTR_MAX__ == __UINT64_MAX__\n+  return (void*)_ITM_RU8((const uint64_t*)ptr);\n+#else\n+  return (void*)_ITM_RU4((const uint32_t*)ptr);\n+#endif\n+}\n+\n+// We must access the data pointer in the COW string transactionally because\n+// another transaction can delete the string and reuse the memory.\n+const char*\n+_txnal_cow_string_c_str(const void* that)\n+{\n+  typedef std::basic_string<char> bs_type;\n+  const bs_type *bs = (const bs_type*) that;\n+\n+  return (const char*) txnal_read_ptr((void**)&bs->_M_dataplus._M_p);\n+}\n+\n+const char*\n+_txnal_sso_string_c_str(const void* that)\n+{\n+  return (const char*) txnal_read_ptr(\n+      (void* const*)const_cast<char* const*>(\n+\t  &((const std::__sso_string*) that)->_M_s._M_p));\n+}\n+\n+void\n+_txnal_cow_string_D1_commit(void* data)\n+{\n+  typedef std::basic_string<char> bs_type;\n+  bs_type::_Rep *rep = (bs_type::_Rep*) data;\n+  rep->_M_dispose(bs_type::allocator_type());\n+}\n+\n+void\n+_txnal_cow_string_D1(void* that)\n+{\n+  typedef std::basic_string<char> bs_type;\n+  bs_type::_Rep *rep = reinterpret_cast<bs_type::_Rep*>(\n+      const_cast<char*>(_txnal_cow_string_c_str(that))) - 1;\n+\n+  // The string can be shared, in which case we would need to decrement the\n+  // reference count.  We cannot undo that because we might lose the string\n+  // otherwise.  Therefore, we register a commit action that will dispose of\n+  // the string's _Rep.\n+  enum {_ITM_noTransactionId  = 1};\n+  _ITM_addUserCommitAction(_txnal_cow_string_D1_commit, _ITM_noTransactionId,\n+\t\t\t   rep);\n+}\n+\n+void*\n+_txnal_logic_error_get_msg(void* e)\n+{\n+  std::logic_error* le = (std::logic_error*) e;\n+  return &le->_M_msg;\n+}\n+\n+void*\n+_txnal_runtime_error_get_msg(void* e)\n+{\n+  std::runtime_error* le = (std::runtime_error*) e;\n+  return &le->_M_msg;\n+}\n+\n+// The constructors are only declared transaction-safe if the C++11 ABI is\n+// used for std::string and the exception classes use a COW string internally.\n+// A user must not call these constructors otherwise; if they do, it will\n+// result in undefined behavior, which is in this case not initializing this\n+// string.\n+#if _GLIBCXX_USE_DUAL_ABI\n+#define CTORDTORSTRINGCSTR(s) _txnal_sso_string_c_str((s))\n+#else\n+#define CTORDTORSTRINGCSTR(s) \"\"\n+#endif\n+\n+// This macro defines transaction constructors and destructors for a specific\n+// exception class.  NAME is the variable part of the mangled name, CLASS is\n+// the class name, and BASE must be logic_error or runtime_error (which is\n+// then used to call the proper friend function that can return a pointer to\n+// the _M_msg member declared by the given (base) class).\n+#define CTORDTOR(NAME, CLASS, BASE)\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##C1EPKc (CLASS* that, const char* s)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  /* This will use the singleton _Rep for an empty string and just\t\\\n+     point to it instead of allocating memory.  Thus, we can use it as\t\\\n+     source, copy it into the object we are constructing, and then\t\\\n+     construct the COW string in the latter manually.  Note that the\t\\\n+     exception classes will not be declared transaction_safe if the\t\\\n+     shared empty _Rep is disabled with --enable-fully-dynamic-string\t\\\n+     (in which case _GLIBCXX_FULLY_DYNAMIC_STRING is nonzero).  */\t\\\n+  CLASS e(\"\");\t\t\t\t\t\t\t\t\\\n+  _ITM_memcpyRnWt(that, &e, sizeof(CLASS));\t\t\t\t\\\n+  _txnal_cow_string_C1_for_exceptions(_txnal_##BASE##_get_msg(that),\t\\\n+\t\t\t\t      s, that);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##C2EPKc (CLASS*, const char*)\t\t\t\t\\\n+  __attribute__((alias (\"_ZGTtNSt\" #NAME \"C1EPKc\")));\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE( \\\n+    CLASS* that, const std::__sso_string& s)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  CLASS e(\"\");\t\t\t\t\t\t\t\t\\\n+  _ITM_memcpyRnWt(that, &e, sizeof(CLASS));\t\t\t\t\\\n+  /* Get the C string from the SSO string.  */\t\t\t\t\\\n+  _txnal_cow_string_C1_for_exceptions(_txnal_##BASE##_get_msg(that),\t\\\n+\t\t\t\t      CTORDTORSTRINGCSTR(&s), that);\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##C2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE( \\\n+    CLASS*, const std::__sso_string&) __attribute__((alias\t\t\\\n+(\"_ZGTtNSt\" #NAME\t\t\t\t\t\t\t\\\n+  \"C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\")));\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##D1Ev(CLASS* that)\t\t\t\t\t\\\n+{ _txnal_cow_string_D1(_txnal_##BASE##_get_msg(that)); }\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##D2Ev(CLASS*)\t\t\t\t\t\t\\\n+__attribute__((alias (\"_ZGTtNSt\" #NAME \"D1Ev\")));\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+_ZGTtNSt##NAME##D0Ev(CLASS* that)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  _ZGTtNSt##NAME##D1Ev(that);\t\t\t\t\t\t\\\n+  _ZGTtdlPv(that);\t\t\t\t\t\t\t\\\n+}\n+\n+// Now create all transactional constructors and destructors, as well as the\n+// two virtual what() functions.\n+extern \"C\" {\n+\n+CTORDTOR(11logic_error, std::logic_error, logic_error)\n+\n+const char*\n+_ZGTtNKSt11logic_error4whatEv(const std::logic_error* that)\n+{\n+  return _txnal_cow_string_c_str(_txnal_logic_error_get_msg(\n+      const_cast<std::logic_error*>(that)));\n+}\n+\n+CTORDTOR(12domain_error, std::domain_error, logic_error)\n+CTORDTOR(16invalid_argument, std::invalid_argument, logic_error)\n+CTORDTOR(12length_error, std::length_error, logic_error)\n+CTORDTOR(12out_of_range, std::out_of_range, logic_error)\n+\n+\n+CTORDTOR(13runtime_error, std::runtime_error, runtime_error)\n+\n+const char*\n+_ZGTtNKSt13runtime_error4whatEv(const std::runtime_error* that)\n+{\n+  return _txnal_cow_string_c_str(_txnal_runtime_error_get_msg(\n+      const_cast<std::runtime_error*>(that)));\n+}\n+\n+CTORDTOR(11range_error, std::range_error, runtime_error)\n+CTORDTOR(14overflow_error, std::overflow_error, runtime_error)\n+CTORDTOR(15underflow_error, std::underflow_error, runtime_error)\n+\n+}"}, {"sha": "caf154400f952e87686f68c8e3e44120137bb589", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04d5fc95d7494824b07feb6c57cf71b4891e3de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=a04d5fc95d7494824b07feb6c57cf71b4891e3de", "patch": "@@ -214,6 +214,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.7\");\n       known_versions.push_back(\"CXXABI_1.3.8\");\n       known_versions.push_back(\"CXXABI_1.3.9\");\n+      known_versions.push_back(\"CXXABI_1.3.10\");\n       known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_FLOAT128\");\n     }\n@@ -232,7 +233,7 @@ check_version(symbol& test, bool added)\n \n       // Check that added symbols are added in the latest pre-release version.\n       bool latestp = (test.version_name == \"GLIBCXX_3.4.22\"\n-\t\t     || test.version_name == \"CXXABI_1.3.9\"\n+\t\t     || test.version_name == \"CXXABI_1.3.10\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");\n       if (added && !latestp)"}]}