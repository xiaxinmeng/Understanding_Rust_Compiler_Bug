{"sha": "679dbc9dcec0d1240951442947199ba155f494b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc5ZGJjOWRjZWMwZDEyNDA5NTE0NDI5NDcxOTliYTE1NWY0OTRiNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-02T19:21:08Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-02T19:21:08Z"}, "message": "c++: Kill DECL_ANTICIPATED\n\nHere's the patch to remove DECL_ANTICIPATED, and with it hiddenness is\nmanaged entirely in the symbol table.  Sadly I couldn't get rid of the\nactual field without more investigation -- it's repurposed for\nOMP_PRIVATIZED_MEMBER.  It looks like a the VAR-related flags in\nlang_decl_base are not completely orthogonal, so perhaps some can be\nturned into an enumeration or something.  But that's more than I want\nto do right now.\n\nDECL_FRIEND_P Is still slightly suspect as it appears to mean more\nthan just in-class definition.  However, I'm leaving that for now.\n\n\tgcc/cp/\n\t* cp-tree.h (lang_decl_base): anticipated_p is not used for\n\tanticipatedness.\n\t(DECL_ANTICIPATED): Delete.\n\t* decl.c (duplicate_decls): Delete DECL_ANTICIPATED_management,\n\tuse was_hidden.\n\t(cxx_builtin_function): Drop DECL_ANTICIPATED setting.\n\t(xref_tag_1): Drop DECL_ANTICIPATED assert.\n\t* name-lookup.c (name_lookup::adl_class_only): Drop\n\tDECL_ANTICIPATED check.\n\t(name_lookup::search_adl): Always dedup.\n\t(anticipated_builtin_p): Reimplement.\n\t(do_pushdecl): Drop DECL_ANTICIPATED asserts & update.\n\t(lookup_elaborated_type_1): Drop DECL_ANTICIPATED update.\n\t(do_pushtag): Drop DECL_ANTICIPATED setting.\n\t* pt.c (push_template_decl): Likewise.\n\t(tsubst_friend_class): Likewise.\n\tlibcc1/\n\t* libcp1plugin.cc (libcp1plugin.cc): Drop DECL_ANTICIPATED test.", "tree": {"sha": "32a0b84c34b0d8598cd12f7b34388d598780f933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32a0b84c34b0d8598cd12f7b34388d598780f933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/679dbc9dcec0d1240951442947199ba155f494b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679dbc9dcec0d1240951442947199ba155f494b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679dbc9dcec0d1240951442947199ba155f494b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679dbc9dcec0d1240951442947199ba155f494b6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee1c0413e251ff0b6a6d526209ef038b9835320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee1c0413e251ff0b6a6d526209ef038b9835320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee1c0413e251ff0b6a6d526209ef038b9835320"}], "stats": {"total": 104, "additions": 21, "deletions": 83}, "files": [{"sha": "c9ad75117ad34f49f2ac6a071be14cf3693678d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=679dbc9dcec0d1240951442947199ba155f494b6", "patch": "@@ -2657,8 +2657,10 @@ struct GTY(()) lang_decl_base {\n   unsigned not_really_extern : 1;\t   /* var or fn */\n   unsigned initialized_in_class : 1;\t   /* var or fn */\n   unsigned threadprivate_or_deleted_p : 1; /* var or fn */\n-  unsigned anticipated_p : 1;\t\t   /* fn, type or template */\n-  /* anticipated_p reused as DECL_OMP_PRIVATIZED_MEMBER in var */\n+  /* anticipated_p is no longer used for anticipated_decls (fn, type\n+     or template).  It is used as DECL_OMP_PRIVATIZED_MEMBER in\n+     var.  */\n+  unsigned anticipated_p : 1;\n   unsigned friend_or_tls : 1;\t\t   /* var, fn, type or template */\n   unsigned unknown_bound_p : 1;\t\t   /* var */\n   unsigned odr_used : 1;\t\t   /* var or fn */\n@@ -4037,13 +4039,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define DECL_BUILTIN_P(NODE) \\\n   (DECL_SOURCE_LOCATION(NODE) == BUILTINS_LOCATION)\n \n-/* Nonzero if NODE is a DECL which we know about but which has not\n-   been explicitly declared, such as a built-in function or a friend\n-   declared inside a class.  */\n-#define DECL_ANTICIPATED(NODE) \\\n-  (DECL_LANG_SPECIFIC (TYPE_FUNCTION_OR_TEMPLATE_DECL_CHECK (NODE)) \\\n-   ->u.base.anticipated_p)\n-\n /* True for artificial decls added for OpenMP privatized non-static\n    data members.  */\n #define DECL_OMP_PRIVATIZED_MEMBER(NODE) \\"}, {"sha": "f333a36b0e1edfca59e42dbbe7943ad9ef44dca3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=679dbc9dcec0d1240951442947199ba155f494b6", "patch": "@@ -1444,7 +1444,7 @@ tree\n duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n {\n   unsigned olddecl_uid = DECL_UID (olddecl);\n-  int olddecl_friend = 0, types_match = 0, hidden_friend = 0;\n+  int olddecl_friend = 0, types_match = 0;\n   int olddecl_hidden_friend = 0;\n   int new_defines_function = 0;\n   tree new_template_info;\n@@ -1473,7 +1473,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t{\n \t  /* Avoid warnings redeclaring built-ins which have not been\n \t     explicitly declared.  */\n-\t  if (DECL_ANTICIPATED (olddecl))\n+\t  if (was_hidden)\n \t    {\n \t      if (TREE_PUBLIC (newdecl)\n \t\t  && CP_DECL_CONTEXT (newdecl) == global_namespace)\n@@ -1645,7 +1645,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n       /* If a function is explicitly declared \"throw ()\", propagate that to\n \t the corresponding builtin.  */\n       if (DECL_BUILT_IN_CLASS (olddecl) == BUILT_IN_NORMAL\n-\t  && DECL_ANTICIPATED (olddecl)\n+\t  && was_hidden\n \t  && TREE_NOTHROW (newdecl)\n \t  && !TREE_NOTHROW (olddecl))\n \t{\n@@ -2139,9 +2139,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n     {\n       olddecl_friend = DECL_FRIEND_P (STRIP_TEMPLATE (olddecl));\n       olddecl_hidden_friend = olddecl_friend && was_hidden;\n-      hidden_friend = olddecl_hidden_friend && hiding;\n-      if (!hidden_friend)\n-\tDECL_ANTICIPATED (olddecl) = false;\n     }\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n@@ -2890,8 +2887,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n   DECL_UID (olddecl) = olddecl_uid;\n   if (olddecl_friend)\n     DECL_FRIEND_P (olddecl) = true;\n-  if (hidden_friend)\n-    DECL_ANTICIPATED (olddecl) = true;\n \n   /* NEWDECL contains the merged attribute lists.\n      Update OLDDECL to be the same.  */\n@@ -4690,21 +4685,15 @@ cxx_builtin_function (tree decl)\n   const char *name = IDENTIFIER_POINTER (id);\n   bool hiding = false;\n   if (name[0] != '_' || name[1] != '_')\n-    {\n-      /* In the user's namespace, it must be declared before use.  */\n-      DECL_ANTICIPATED (decl) = 1;\n-      hiding = true;\n-    }\n+    /* In the user's namespace, it must be declared before use.  */\n+    hiding = true;\n   else if (IDENTIFIER_LENGTH (id) > strlen (\"___chk\")\n \t   && 0 != strncmp (name + 2, \"builtin_\", strlen (\"builtin_\"))\n \t   && 0 == memcmp (name + IDENTIFIER_LENGTH (id) - strlen (\"_chk\"),\n \t\t\t   \"_chk\", strlen (\"_chk\") + 1))\n-    {\n-      /* Treat __*_chk fortification functions as anticipated as well,\n-\t unless they are __builtin_*_chk.  */\n-      DECL_ANTICIPATED (decl) = 1;\n-      hiding = true;\n-    }\n+    /* Treat __*_chk fortification functions as anticipated as well,\n+       unless they are __builtin_*_chk.  */\n+    hiding = true;\n \n   /* All builtins that don't begin with an '_' should additionally\n      go in the 'std' namespace.  */\n@@ -15063,10 +15052,6 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t  inform (location_of (t), \"previous declaration %qD\", t);\n \t  return error_mark_node;\n \t}\n-\n-      gcc_checking_assert (how == TAG_how::HIDDEN_FRIEND\n-\t\t\t   || !(DECL_LANG_SPECIFIC (TYPE_NAME (t))\n-\t\t\t\t&& DECL_ANTICIPATED (TYPE_NAME (t))));\n     }\n \n   return t;"}, {"sha": "190b56bf4dd041e9f270e6fd31c592af4ebfa6b8", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=679dbc9dcec0d1240951442947199ba155f494b6", "patch": "@@ -842,12 +842,6 @@ name_lookup::adl_class_only (tree type)\n \t  if (CP_DECL_CONTEXT (fn) != context)\n \t    continue;\n \n-\t  /* Only interested in anticipated friends.  (Non-anticipated\n-\t     ones will have been inserted during the namespace\n-\t     adl.)  */\n-\t  if (!DECL_ANTICIPATED (fn))\n-\t    continue;\n-\n \t  /* Template specializations are never found by name lookup.\n \t     (Templates themselves can be found, but not template\n \t     specializations.)  */\n@@ -1079,11 +1073,8 @@ name_lookup::adl_template_arg (tree arg)\n tree\n name_lookup::search_adl (tree fns, vec<tree, va_gc> *args)\n {\n-  if (fns)\n-    {\n-      deduping = true;\n-      lookup_mark (fns, true);\n-    }\n+  deduping = true;\n+  lookup_mark (fns, true);\n   value = fns;\n \n   unsigned ix;\n@@ -2136,19 +2127,9 @@ strip_using_decl (tree decl)\n static bool\n anticipated_builtin_p (tree ovl)\n {\n-  if (TREE_CODE (ovl) != OVERLOAD)\n-    return false;\n-\n-  if (!OVL_HIDDEN_P (ovl))\n-    return false;\n-\n-  tree fn = OVL_FUNCTION (ovl);\n-  gcc_checking_assert (DECL_ANTICIPATED (fn));\n-\n-  if (DECL_BUILTIN_P (fn))\n-    return true;\n-\n-  return false;\n+  return (TREE_CODE (ovl) == OVERLOAD\n+\t  && OVL_HIDDEN_P (ovl)\n+\t  && DECL_BUILTIN_P (OVL_FUNCTION (ovl)));\n }\n \n /* BINDING records an existing declaration for a name in the current scope.\n@@ -3079,14 +3060,6 @@ do_pushdecl (tree decl, bool hiding)\n       tree *slot = NULL; /* Binding slot in namespace.  */\n       tree old = NULL_TREE;\n \n-      if (!hiding)\n-\t/* We should never unknownly push an anticipated decl.  */\n-\tgcc_checking_assert (!((TREE_CODE (decl) == TYPE_DECL\n-\t\t\t\t|| TREE_CODE (decl) == FUNCTION_DECL\n-\t\t\t\t|| TREE_CODE (decl) == TEMPLATE_DECL)\n-\t\t\t       && DECL_LANG_SPECIFIC (decl)\n-\t\t\t       && DECL_ANTICIPATED (decl)));\n-\n       if (level->kind == sk_namespace)\n \t{\n \t  /* We look in the decl's namespace for an existing\n@@ -3171,8 +3144,6 @@ do_pushdecl (tree decl, bool hiding)\n \t\t  /* Don't attempt to push it.  */\n \t\t  return error_mark_node;\n \t\t}\n-\t      /* Hide it from ordinary lookup.  */\n-\t      DECL_ANTICIPATED (decl) = true;\n \t    }\n \t}\n \n@@ -6730,15 +6701,13 @@ lookup_elaborated_type_1 (tree name, TAG_how how)\n \t\tHIDDEN_TYPE_BINDING_P (iter) = false;\n \n \t\t/* Unanticipate the decl itself.  */\n-\t\tDECL_ANTICIPATED (found) = false;\n \t\tDECL_FRIEND_P (found) = false;\n \n \t\tgcc_checking_assert (TREE_CODE (found) != TEMPLATE_DECL);\n \n \t\tif (tree ti = TYPE_TEMPLATE_INFO (TREE_TYPE (found)))\n \t\t  {\n \t\t    tree tmpl = TI_TEMPLATE (ti);\n-\t\t    DECL_ANTICIPATED (tmpl) = false;\n \t\t    DECL_FRIEND_P (tmpl) = false;\n \t\t  }\n \t      }\n@@ -6799,18 +6768,17 @@ lookup_elaborated_type_1 (tree name, TAG_how how)\n \t  if (reveal)\n \t    {\n \t      /* Reveal the previously hidden thing.  */\n-\t      DECL_ANTICIPATED (found) = false;\n \t      DECL_FRIEND_P (found) = false;\n \n \t      if (TREE_CODE (found) == TEMPLATE_DECL)\n \t\t{\n-\t\t  DECL_ANTICIPATED (DECL_TEMPLATE_RESULT (found)) = false;\n-\t\t  DECL_FRIEND_P (DECL_TEMPLATE_RESULT (found)) = false;\n+\t\t  tree res = DECL_TEMPLATE_RESULT (found);\n+\t\t  if (DECL_LANG_SPECIFIC (res))\n+\t\t    DECL_FRIEND_P (res) = false;\n \t\t}\n \t      else if (tree ti = TYPE_TEMPLATE_INFO (TREE_TYPE (found)))\n \t\t{\n \t\t  tree tmpl = TI_TEMPLATE (ti);\n-\t\t  DECL_ANTICIPATED (tmpl) = false;\n \t\t  DECL_FRIEND_P (tmpl) = false;\n \t\t}\n \t    }\n@@ -7019,7 +6987,6 @@ do_pushtag (tree name, tree type, TAG_how how)\n \t     ordinary name lookup.  Its corresponding TEMPLATE_DECL\n \t     will be marked in push_template_decl.  */\n \t  retrofit_lang_decl (tdef);\n-\t  DECL_ANTICIPATED (tdef) = 1;\n \t  DECL_FRIEND_P (tdef) = 1;\n \t}\n "}, {"sha": "1ab5435b35975d3cf613123e48da28de09a0c63e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679dbc9dcec0d1240951442947199ba155f494b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=679dbc9dcec0d1240951442947199ba155f494b6", "patch": "@@ -6024,10 +6024,7 @@ push_template_decl (tree decl, bool is_friend)\n \t{\n \t  /* Hide template friend classes that haven't been declared yet.  */\n \t  if (is_friend && TREE_CODE (decl) == TYPE_DECL)\n-\t    {\n-\t      DECL_ANTICIPATED (tmpl) = 1;\n-\t      DECL_FRIEND_P (tmpl) = 1;\n-\t    }\n+\t    DECL_FRIEND_P (tmpl) = 1;\n \n \t  tmpl = pushdecl_namespace_level (tmpl, /*hiding=*/is_friend);\n \t  if (tmpl == error_mark_node)\n@@ -11311,11 +11308,6 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n \t  CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl))\n \t    = INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl)));\n \n-\t  /* It is hidden.  */\n-\t  retrofit_lang_decl (DECL_TEMPLATE_RESULT (tmpl));\n-\t  DECL_ANTICIPATED (tmpl)\n-\t    = DECL_ANTICIPATED (DECL_TEMPLATE_RESULT (tmpl)) = true;\n-\n \t  /* Substitute into and set the constraints on the new declaration.  */\n \t  if (tree ci = get_constraints (friend_tmpl))\n \t    {"}, {"sha": "98174250585ae65d0391dd48f8a5319f6b8d17f2", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/679dbc9dcec0d1240951442947199ba155f494b6/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/679dbc9dcec0d1240951442947199ba155f494b6/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=679dbc9dcec0d1240951442947199ba155f494b6", "patch": "@@ -353,7 +353,6 @@ supplement_binding (cxx_binding *binding, tree decl)\n \t   /* If TARGET_BVAL is anticipated but has not yet been\n \t      declared, pretend it is not there at all.  */\n \t   || (TREE_CODE (target_bval) == FUNCTION_DECL\n-\t       && DECL_ANTICIPATED (target_bval)\n \t       && DECL_BUILTIN_P (target_bval)))\n     binding->value = decl;\n   else if (TREE_CODE (target_bval) == TYPE_DECL"}]}