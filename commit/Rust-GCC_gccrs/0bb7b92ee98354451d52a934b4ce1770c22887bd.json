{"sha": "0bb7b92ee98354451d52a934b4ce1770c22887bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiN2I5MmVlOTgzNTQ0NTFkNTJhOTM0YjRjZTE3NzBjMjI4ODdiZA==", "commit": {"author": {"name": "Michael J. Eager", "email": "eager@eagercon.com", "date": "2008-10-11T13:33:04Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-10-11T13:33:04Z"}, "message": "rs6000.c (rs6000_parse_fpu_option): Interpret -mfpu options.\n\n2008-10-11  Michael J. Eager  <eager@eagercon.com>\n\n        * config/rs6000/rs6000.c (rs6000_parse_fpu_option): Interpret\n        -mfpu options.\n        (rs6000_handle_option): Process -mfpu options.\n        * config/rs6000/rs6000.h: (TARGET_XILINX_FPU): New.\n        (enum fpu_type_t): New.\n        * config/rs6000/rs6000.md (attr fp_type): New.\n        Include xfpu.md.\n        (addsf3, subsf3, mulsf3, adddf3, subdf3, muldf3, trunctfdf2): Set\n        fp_type.\n        (floatsisf2): Remove TARGET_SINGLE_FPU condition.\n        (floatdidf2): Add TARGET_SINGLE_FPU condition.\n        * config/rs6000/rs6000.opt (-mfpu): New.\n        (-mxilinx-fpu): New.\n        * config/rs6000/sysv4.h: (DRIVER_SELF_SPECS): New.\n        * config/rs6000/xfpu.h: New. Define TARGET_XILINX_FPU.\n        * config/rs6000/xfpu.md: New. Define Xilinx pipeline.\n        * gcc/config.gcc: powerpc-xilinx-eabi target: New.\n        * gcc/doc/invoke.texi (RS/6000 and PowerPC Options): Add -mfpu option.\n\nFrom-SVN: r141059", "tree": {"sha": "13c993a0eb7619d78b505046f9c8c648d1f879d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c993a0eb7619d78b505046f9c8c648d1f879d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb7b92ee98354451d52a934b4ce1770c22887bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb7b92ee98354451d52a934b4ce1770c22887bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb7b92ee98354451d52a934b4ce1770c22887bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb7b92ee98354451d52a934b4ce1770c22887bd/comments", "author": {"login": "eagerm", "id": 945532, "node_id": "MDQ6VXNlcjk0NTUzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/945532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eagerm", "html_url": "https://github.com/eagerm", "followers_url": "https://api.github.com/users/eagerm/followers", "following_url": "https://api.github.com/users/eagerm/following{/other_user}", "gists_url": "https://api.github.com/users/eagerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eagerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eagerm/subscriptions", "organizations_url": "https://api.github.com/users/eagerm/orgs", "repos_url": "https://api.github.com/users/eagerm/repos", "events_url": "https://api.github.com/users/eagerm/events{/privacy}", "received_events_url": "https://api.github.com/users/eagerm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91a9632ca5578311dca3a5325ba59048324f4033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a9632ca5578311dca3a5325ba59048324f4033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a9632ca5578311dca3a5325ba59048324f4033"}], "stats": {"total": 363, "additions": 327, "deletions": 36}, "files": [{"sha": "709013084dc41fdca57d034b10d402bebaf503b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -1,3 +1,24 @@\n+2008-10-11  Michael J. Eager  <eager@eagercon.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_parse_fpu_option): Interpret\n+\t-mfpu options.\n+\t(rs6000_handle_option): Process -mfpu options.\n+\t* config/rs6000/rs6000.h: (TARGET_XILINX_FPU): New.\n+\t(enum fpu_type_t): New.\n+\t* config/rs6000/rs6000.md (attr fp_type): New.\n+\tInclude xfpu.md.\n+\t(addsf3, subsf3, mulsf3, adddf3, subdf3, muldf3, trunctfdf2): Set\n+\tfp_type.\n+\t(floatsisf2): Remove TARGET_SINGLE_FPU condition.\n+\t(floatdidf2): Add TARGET_SINGLE_FPU condition.\n+\t* config/rs6000/rs6000.opt (-mfpu): New.\n+\t(-mxilinx-fpu): New.\n+\t* config/rs6000/sysv4.h: (DRIVER_SELF_SPECS): New.\n+\t* config/rs6000/xfpu.h: New. Define TARGET_XILINX_FPU.\n+\t* config/rs6000/xfpu.md: New. Define Xilinx pipeline.\n+\t* gcc/config.gcc: powerpc-xilinx-eabi target: New.\n+\t* gcc/doc/invoke.texi (RS/6000 and PowerPC Options): Add -mfpu option.\n+\n 2008-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35760"}, {"sha": "8f31bdef144be413d87f1629f68c75aded02dc46", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -1899,6 +1899,11 @@ powerpcle-*-eabi*)\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \t;;\n+powerpc-xilinx-eabi*)\n+ \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h rs6000/xfpu.h\"\n+  \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n+  \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n+  \t;;\n rs6000-ibm-aix4.[12]* | powerpc-ibm-aix4.[12]*)\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix41.h rs6000/xcoff.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-newas\""}, {"sha": "49828de96e4d7eb081d0341c62e7833267ef0c38", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -2199,11 +2199,25 @@ optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n     flag_section_anchors = 2;\n }\n \n+static enum fpu_type_t\n+rs6000_parse_fpu_option (const char *option)\n+{\n+  if (!strcmp(\"none\", option)) return FPU_NONE;\n+  if (!strcmp(\"sp_lite\", option)) return FPU_SF_LITE;\n+  if (!strcmp(\"dp_lite\", option)) return FPU_DF_LITE;\n+  if (!strcmp(\"sp_full\", option)) return FPU_SF_FULL;\n+  if (!strcmp(\"dp_full\", option)) return FPU_DF_FULL;\n+  error(\"unknown value %s for -mfpu\", option);\n+  return FPU_NONE;\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n rs6000_handle_option (size_t code, const char *arg, int value)\n {\n+  enum fpu_type_t fpu_type = FPU_NONE;\n+\n   switch (code)\n     {\n     case OPT_mno_power:\n@@ -2523,6 +2537,30 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n       /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n       rs6000_single_float = rs6000_double_float = 0;\n       break;\n+\n+    case OPT_mfpu_:\n+      fpu_type = rs6000_parse_fpu_option(arg);\n+      if (fpu_type != FPU_NONE) \n+      /* If -mfpu is not none, then turn off SOFT_FLOAT, turn on HARD_FLOAT. */\n+      {\n+        target_flags &= ~MASK_SOFT_FLOAT;\n+        target_flags_explicit |= MASK_SOFT_FLOAT;\n+        rs6000_xilinx_fpu = 1;\n+        if (fpu_type == FPU_SF_LITE || fpu_type == FPU_SF_FULL) \n+        rs6000_single_float = 1;\n+        if (fpu_type == FPU_DF_LITE || fpu_type == FPU_DF_FULL) \n+          rs6000_single_float = rs6000_double_float = 1;\n+        if (fpu_type == FPU_SF_LITE || fpu_type == FPU_DF_LITE) \n+          rs6000_simple_fpu = 1;\n+      }\n+      else\n+      {\n+        /* -mfpu=none is equivalent to -msoft-float */\n+        target_flags |= MASK_SOFT_FLOAT;\n+        target_flags_explicit |= MASK_SOFT_FLOAT;\n+        rs6000_single_float = rs6000_double_float = 0;\n+      }\n+      break;\n     }\n   return true;\n }"}, {"sha": "de212cd9c05b63463c413397986a47d47f41d7d6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -305,6 +305,7 @@ enum processor_type\n #define TARGET_DOUBLE_FLOAT 1\n #define TARGET_SINGLE_FPU   0\n #define TARGET_SIMPLE_FPU   0\n+#define TARGET_XILINX_FPU   0\n \n extern enum processor_type rs6000_cpu;\n \n@@ -321,6 +322,18 @@ extern enum processor_type rs6000_cpu;\n #define PROCESSOR_DEFAULT   PROCESSOR_RIOS1\n #define PROCESSOR_DEFAULT64 PROCESSOR_RS64A\n \n+/* FP processor type.  */\n+enum fpu_type_t\n+{\n+\tFPU_NONE,\t\t/* No FPU */\n+\tFPU_SF_LITE,\t\t/* Limited Single Precision FPU */\n+\tFPU_DF_LITE,\t\t/* Limited Double Precision FPU */\n+\tFPU_SF_FULL,\t\t/* Full Single Precision FPU */\n+\tFPU_DF_FULL\t\t/* Full Double Single Precision FPU */\n+};\n+\n+extern enum fpu_type_t fpu_type;\n+\n /* Specify the dialect of assembler to use.  New mnemonics is dialect one\n    and the old mnemonics are dialect zero.  */\n #define ASSEMBLER_DIALECT (TARGET_NEW_MNEMONICS ? 1 : 0)\n@@ -393,6 +406,7 @@ extern int rs6000_float_gprs;\n extern int rs6000_alignment_flags;\n extern const char *rs6000_sched_insert_nops_str;\n extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n+extern int rs6000_xilinx_fpu;\n \n /* Alignment options for fields in structures for sub-targets following\n    AIX-like ABI."}, {"sha": "7b0f1a131c9768c7412fca0e33689eb4fac325a5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -119,6 +119,9 @@\n (define_attr \"type\" \"integer,two,three,load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,store,store_ux,store_u,fpload,fpload_ux,fpload_u,fpstore,fpstore_ux,fpstore_u,vecload,vecstore,imul,imul2,imul3,lmul,idiv,ldiv,insert_word,branch,cmp,fast_compare,compare,var_delayed_compare,delayed_compare,imul_compare,lmul_compare,fpcompare,cr_logical,delayed_cr,mfcr,mfcrf,mtcr,mfjmpr,mtjmpr,fp,fpsimple,dmul,sdiv,ddiv,ssqrt,dsqrt,jmpreg,brinc,vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,vecfloat,vecfdiv,isync,sync,load_l,store_c,shift,trap,insert_dword,var_shift_rotate,cntlz,exts,mffgpr,mftgpr\"\n   (const_string \"integer\"))\n \n+;; Define floating point instruction sub-types for use with Xfpu.md\n+(define_attr \"fp_type\" \"fp_default,fp_addsub_s,fp_addsub_d,fp_mul_s,fp_mul_d,fp_div_s,fp_div_d,fp_maddsub_s,fp_maddsub_d,fp_sqrt_s,fp_sqrt_d\" (const_string \"fp_default\"))\n+\n ;; Length (in bytes).\n ; '(pc)' in the following doesn't include the instruction itself; it is\n ; calculated as if the instruction had zero size.\n@@ -174,6 +177,7 @@\n (include \"power5.md\")\n (include \"power6.md\")\n (include \"cell.md\")\n+(include \"xfpu.md\")\n \n (include \"predicates.md\")\n (include \"constraints.md\")\n@@ -5149,15 +5153,17 @@\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fadds %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -5172,15 +5178,17 @@\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fsubs %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -5195,15 +5203,17 @@\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"fmuls %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_mul_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_mul_d\")])\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -5257,7 +5267,8 @@\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"fmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5267,7 +5278,8 @@\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5277,7 +5289,8 @@\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"fmsubs %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5287,7 +5300,8 @@\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5297,7 +5311,8 @@\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && TARGET_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5307,7 +5322,8 @@\n   \"TARGET_POWERPC && TARGET_SINGLE_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5317,7 +5333,8 @@\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5327,7 +5344,8 @@\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5337,7 +5355,8 @@\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && TARGET_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5347,7 +5366,8 @@\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5357,7 +5377,8 @@\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n    && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5372,15 +5393,15 @@\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) \n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2 || TARGET_XILINX_FPU) \n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \n    && !TARGET_SIMPLE_FPU\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT \n+  \"(TARGET_PPC_GPOPT || TARGET_XILINX_FPU) && TARGET_HARD_FLOAT \n    && TARGET_FPRS && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n@@ -5614,7 +5635,8 @@\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"subdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -5629,7 +5651,8 @@\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -5644,7 +5667,9 @@\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_mul_d\")])\n+\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -5687,7 +5712,8 @@\n \t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5696,7 +5722,8 @@\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5706,7 +5733,8 @@\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5716,7 +5744,8 @@\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5726,7 +5755,8 @@\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5736,7 +5766,8 @@\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5826,10 +5857,10 @@\n   \"\")\n \n (define_expand \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"\")\n+ [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+      (fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+ \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+ \"\")\n \n ; For each of these conversions, there is a define_expand, a define_insn\n ; with a '#' template, and a define_split (with C code).  The idea is\n@@ -6140,20 +6171,20 @@\n (define_expand \"floatsisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (!TARGET_FPRS || TARGET_SINGLE_FPU)\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n   \"\")\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"!f#r\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_POWERPC64 || TARGET_XILINX_FPU) && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_FPRS\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=!f#r\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_POWERPC64 || TARGET_XILINX_FPU) && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_FPRS\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -8722,7 +8753,8 @@\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n    && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")"}, {"sha": "8e309803cd920e5e6fc1b85996ebb65820a719d6", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -729,6 +729,9 @@ extern int fixuplabelno;\n \n #define LINK_OS_DEFAULT_SPEC \"\"\n \n+#define DRIVER_SELF_SPECS \"%{mfpu=none: %<mfpu=* \\\n+ \t%<msingle-float %<mdouble-float}\"\n+\n /* Override rs6000.h definition.  */\n #undef\tCPP_SPEC\n #define\tCPP_SPEC \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "af631163634e2f6fbf7359c62174271e8bc29a0e", "filename": "gcc/config/rs6000/xfpu.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fxfpu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fxfpu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxfpu.h?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -0,0 +1,26 @@\n+/* Definitions for Xilinx PowerPC 405/440 APU.\n+\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+   Contributed by Michael Eager (eager@eagercon.com)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Undefine definitions from rs6000.h. */\n+#undef TARGET_XILINX_FPU \n+\n+#define TARGET_XILINX_FPU  (rs6000_xilinx_fpu)"}, {"sha": "25c449a515a5860afaad788e2ce3775eef2a729c", "filename": "gcc/config/rs6000/xfpu.md", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxfpu.md?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -0,0 +1,140 @@\n+;; Scheduling description for the Xilinx PowerPC 405 APU Floating Point Unit.\n+;; Copyright (C) 2008 Free Software Foundation, Inc.\n+;; Contributed by Michael Eager (eager@eagercon.com).\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;;----------------------------------------------------\n+;; Xilinx APU FPU Pipeline Description\n+;;\n+;;  - attr 'type' and 'fp_type' should definitely\n+;;    be cleaned up at some point in the future.\n+;;    ddiv,sdiv,dmul,smul etc are quite confusing.\n+;;    Should use consistent fp* attrs. 'fp_type'\n+;;    should also go away, leaving us only with 'fp'\n+;;\n+;;----------------------------------------------------\n+\n+;; -------------------------------------------------------------------------\n+;; Latencies\n+;; Latest latency figures (all in FCB cycles). PowerPC to FPU frequency ratio\n+;; assumed to be 1/2. (most common deployment)\n+;; Add 2 PPC cycles for (register file access + wb) and 2 PPC cycles \n+;; for issue (from PPC)\n+;;                          SP          DP\n+;; Loads:                    4           6\n+;; Stores:                   1           2      (from availability of data)\n+;; Move/Abs/Neg:             1           1\n+;; Add/Subtract:             5           7\n+;; Multiply:                 4          11\n+;; Multiply-add:            10          19\n+;; Convert (any):            4           6\n+;; Divide/Sqrt:             27          56\n+;; Compares:                 1           2\n+;;\n+;; bypasses needed for forwarding capability of the FPU. \n+;; Add this at some future time.\n+;; -------------------------------------------------------------------------\n+(define_automaton \"Xfpu\")\n+(define_cpu_unit \"Xfpu_issue,Xfpu_addsub,Xfpu_mul,Xfpu_div,Xfpu_sqrt\" \"Xfpu\")\n+\n+\n+(define_insn_reservation \"fp-default\" 2\n+  (and (and \n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_default\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2\")\n+\n+(define_insn_reservation \"fp-compare\" 6\n+  (and (eq_attr \"type\" \"fpcompare\")                     ;; Inconsistent naming\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_addsub\")\n+\n+(define_insn_reservation \"fp-addsub-s\" 14\n+  (and (and\n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_addsub_s\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_addsub\")\n+\n+(define_insn_reservation \"fp-addsub-d\" 18\n+  (and (and\n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_addsub_d\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_addsub\")\n+\n+(define_insn_reservation \"fp-mul-s\" 12\n+  (and (and\n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_mul_s\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_mul\")\n+\n+(define_insn_reservation \"fp-mul-d\" 16    ;; Actually 28. Long latencies are killing the automaton formation. Need to figure out why.\n+  (and (and\n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_mul_d\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_mul\")\n+\n+(define_insn_reservation \"fp-div-s\" 24                   ;; Actually 34\n+   (and (eq_attr \"type\" \"sdiv\")                          ;; Inconsistent attr naming\n+        (eq_attr \"cpu\" \"ppc405\"))\n+   \"Xfpu_issue*2,Xfpu_div*10\")                           ;; Unpipelined\n+\n+(define_insn_reservation \"fp-div-d\" 34                   ;; Actually 116\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppc405\"))                         ;; Inconsistent attr naming\n+  \"Xfpu_issue*2,Xfpu_div*10\")                            ;; Unpipelined\n+\n+(define_insn_reservation \"fp-maddsub-s\" 24\n+  (and (and\n+        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"fp_type\" \"fp_maddsub_s\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_mul,nothing*7,Xfpu_addsub\")\n+\n+(define_insn_reservation \"fp-maddsub-d\" 34              ;; Actually 42\n+  (and (and\n+        (eq_attr \"type\" \"dmul\")                         ;; Inconsistent attr naming\n+        (eq_attr \"fp_type\" \"fp_maddsub_d\"))\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_mul,nothing*7,Xfpu_addsub\")\n+\n+(define_insn_reservation \"fp-load\" 10                   ;; FIXME. Is double/single precision the same ?\n+  (and (eq_attr \"type\" \"fpload, fpload_ux, fpload_u\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*10\")\n+\n+(define_insn_reservation \"fp-store\" 4 \n+  (and (eq_attr \"type\" \"fpstore, fpstore_ux, fpstore_u\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*4\")\n+\n+(define_insn_reservation \"fp-sqrt-s\" 24         ;; Actually 56\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_sqrt*10\")                  ;; Unpipelined\n+\n+\n+(define_insn_reservation \"fp-sqrt-d\" 34         ;; Actually 116\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"ppc405\"))\n+  \"Xfpu_issue*2,Xfpu_sqrt*10\")                  ;; Unpipelined\n+"}, {"sha": "c5c47fed86febec923cc07422df952438dc1ef81", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7b92ee98354451d52a934b4ce1770c22887bd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0bb7b92ee98354451d52a934b4ce1770c22887bd", "patch": "@@ -649,6 +649,7 @@ Objective-C and Objective-C++ Dialects}.\n -mshared  -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot @gol\n -mgp32  -mgp64  -mfp32  -mfp64  -mhard-float  -msoft-float @gol\n -msingle-float  -mdouble-float  -mdsp  -mno-dsp  -mdspr2  -mno-dspr2 @gol\n+-mfpu=@var{fpu-type} @gol\n -msmartmips  -mno-smartmips @gol\n -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx @gol\n -mips3d  -mno-mips3d  -mmt  -mno-mt  -mllsc  -mno-llsc @gol\n@@ -13656,6 +13657,17 @@ Generate code for single or double-precision floating point operations.\n @opindex msimple-fpu\n Do not generate sqrt and div instructions for hardware floating point unit.\n \n+@item -mfpu\n+@opindex mfpu\n+Specify type of floating point unit.  Valid values are @var{sp_lite} \n+(equivalent to -msingle-float -msimple-fpu), @var{dp_lite} (equivalent\n+to -mdouble-float -msimple-fpu), @var{sp_full} (equivalent to -msingle-float),\n+and @var{dp_full} (equivalent to -mdouble-float).\n+\n+@item -mxilinx-fpu\n+@opindex mxilinx-fpu\n+Perform optimizations for floating point unit on Xilinx PPC 405/440.\n+\n @item -mmultiple\n @itemx -mno-multiple\n @opindex mmultiple"}]}