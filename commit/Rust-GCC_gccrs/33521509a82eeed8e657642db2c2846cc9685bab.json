{"sha": "33521509a82eeed8e657642db2c2846cc9685bab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1MjE1MDlhODJlZWVkOGU2NTc2NDJkYjJjMjg0NmNjOTY4NWJhYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-11-12T21:24:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-12T21:24:19Z"}, "message": "configure.ac: Check for getexecname.\n\n\t* configure.ac: Check for getexecname.\n\t* fileline.c: #include <errno.h>.  Define getexecname if not\n\tavailable.\n\t(fileline_initialize): Try to find the executable in a few\n\tdifferent ways.\n\t* print.c (error_callback): Only print the filename if it came\n\tfrom the backtrace state.\n\t* configure, config.h.in: Rebuild.\n\nCo-Authored-By: Gerald Pfeifer <gerald@pfeifer.com>\nCo-Authored-By: Rainer Orth <ro@CeBiTec.Uni-Bielefeld.DE>\n\nFrom-SVN: r193454", "tree": {"sha": "33eae4f1dfeddbcdd692656a204db81bdd98f92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33eae4f1dfeddbcdd692656a204db81bdd98f92d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33521509a82eeed8e657642db2c2846cc9685bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33521509a82eeed8e657642db2c2846cc9685bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33521509a82eeed8e657642db2c2846cc9685bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33521509a82eeed8e657642db2c2846cc9685bab/comments", "author": null, "committer": null, "parents": [{"sha": "211d71a745167d6bb935ddf21b7d7f6dd5168969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211d71a745167d6bb935ddf21b7d7f6dd5168969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211d71a745167d6bb935ddf21b7d7f6dd5168969"}], "stats": {"total": 121, "additions": 111, "deletions": 10}, "files": [{"sha": "dcd49d071d69082df04c0587ea6beaecb1ba73a3", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -1,3 +1,16 @@\n+2012-11-12  Ian Lance Taylor  <iant@google.com>\n+\t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\t    Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* configure.ac: Check for getexecname.\n+\t* fileline.c: #include <errno.h>.  Define getexecname if not\n+\tavailable.\n+\t(fileline_initialize): Try to find the executable in a few\n+\tdifferent ways.\n+\t* print.c (error_callback): Only print the filename if it came\n+\tfrom the backtrace state.\n+\t* configure, config.h.in: Rebuild.\n+\n 2012-10-29  Ian Lance Taylor  <iant@google.com>\n \n \t* mmap.c (backtrace_vector_release): Correct last patch: add"}, {"sha": "48ff63fdc05d2ffe9de9437fb69b65336fcdce0e", "filename": "libbacktrace/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfig.h.in?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -16,6 +16,9 @@\n /* Define to 1 if you have the fcntl function */\n #undef HAVE_FCNTL\n \n+/* Define if getexecname is available. */\n+#undef HAVE_GETEXECNAME\n+\n /* Define if _Unwind_GetIPInfo is available. */\n #undef HAVE_GETIPINFO\n "}, {"sha": "2a57c5102f35c8c2a10503c52ca5722844ac7780", "filename": "libbacktrace/configure", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -12319,6 +12319,27 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# Check for getexecname function.\n+if test -n \"${with_target_subdir}\"; then\n+   case \"${host}\" in\n+   *-*-solaris2*) have_getexecname=yes ;;\n+   *) have_getexecname=no ;;\n+   esac\n+else\n+  ac_fn_c_check_func \"$LINENO\" \"getexecname\" \"ac_cv_func_getexecname\"\n+if test \"x$ac_cv_func_getexecname\" = x\"\"yes; then :\n+  have_getexecname=yes\n+else\n+  have_getexecname=no\n+fi\n+\n+fi\n+if test \"$have_getexecname\" = \"yes\"; then\n+\n+$as_echo \"#define HAVE_GETEXECNAME 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether tests can run\" >&5\n $as_echo_n \"checking whether tests can run... \" >&6; }\n if test \"${libbacktrace_cv_sys_native+set}\" = set; then :"}, {"sha": "c9cba3e4e9c08e9cbeca08f2f6bd94febe32ea52", "filename": "libbacktrace/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure.ac?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -289,6 +289,19 @@ fi\n \n AC_CHECK_DECLS(strnlen)\n \n+# Check for getexecname function.\n+if test -n \"${with_target_subdir}\"; then\n+   case \"${host}\" in\n+   *-*-solaris2*) have_getexecname=yes ;;\n+   *) have_getexecname=no ;;\n+   esac\n+else\n+  AC_CHECK_FUNC(getexecname, [have_getexecname=yes], [have_getexecname=no])\n+fi\n+if test \"$have_getexecname\" = \"yes\"; then\n+  AC_DEFINE(HAVE_GETEXECNAME, 1, [Define if getexecname is available.])\n+fi\n+\n AC_CACHE_CHECK([whether tests can run],\n   [libbacktrace_cv_sys_native],\n   [AC_RUN_IFELSE([AC_LANG_PROGRAM([], [return 0;])],"}, {"sha": "1ade81e9d493ecdfcfc5bfb70fa7b5ee2130d868", "filename": "libbacktrace/fileline.c", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Ffileline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Ffileline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Ffileline.c?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -34,12 +34,17 @@ POSSIBILITY OF SUCH DAMAGE.  */\n \n #include <sys/types.h>\n #include <sys/stat.h>\n+#include <errno.h>\n #include <fcntl.h>\n #include <stdlib.h>\n \n #include \"backtrace.h\"\n #include \"internal.h\"\n \n+#ifndef HAVE_GETEXECNAME\n+#define getexecname() NULL\n+#endif\n+\n /* Initialize the fileline information from the executable.  Returns 1\n    on success, 0 on failure.  */\n \n@@ -49,6 +54,8 @@ fileline_initialize (struct backtrace_state *state,\n {\n   int failed;\n   fileline fileline_fn;\n+  int pass;\n+  int called_error_callback;\n   int descriptor;\n \n   failed = state->fileline_initialization_failed;\n@@ -79,12 +86,58 @@ fileline_initialize (struct backtrace_state *state,\n \n   /* We have not initialized the information.  Do it now.  */\n \n-  if (state->filename != NULL)\n-    descriptor = backtrace_open (state->filename, error_callback, data, NULL);\n-  else\n-    descriptor = backtrace_open (\"/proc/self/exe\", error_callback, data, NULL);\n+  descriptor = -1;\n+  called_error_callback = 0;\n+  for (pass = 0; pass < 4; ++pass)\n+    {\n+      const char *filename;\n+      int does_not_exist;\n+\n+      switch (pass)\n+\t{\n+\tcase 0:\n+\t  filename = state->filename;\n+\t  break;\n+\tcase 1:\n+\t  filename = getexecname ();\n+\t  break;\n+\tcase 2:\n+\t  filename = \"/proc/self/exe\";\n+\t  break;\n+\tcase 3:\n+\t  filename = \"/proc/curproc/file\";\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      if (filename == NULL)\n+\tcontinue;\n+\n+      descriptor = backtrace_open (filename, error_callback, data,\n+\t\t\t\t   &does_not_exist);\n+      if (descriptor < 0 && !does_not_exist)\n+\t{\n+\t  called_error_callback = 1;\n+\t  break;\n+\t}\n+      if (descriptor >= 0)\n+\tbreak;\n+    }\n+\n   if (descriptor < 0)\n-    failed = 1;\n+    {\n+      if (!called_error_callback)\n+\t{\n+\t  if (state->filename != NULL)\n+\t    error_callback (data, state->filename, ENOENT);\n+\t  else\n+\t    error_callback (data,\n+\t\t\t    \"libbacktrace could not find executable to open\",\n+\t\t\t    0);\n+\t}\n+      failed = 1;\n+    }\n \n   if (!failed)\n     {"}, {"sha": "9b775584d476e4ce47ee5cf6215920abe24308f8", "filename": "libbacktrace/print.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fprint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33521509a82eeed8e657642db2c2846cc9685bab/libbacktrace%2Fprint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fprint.c?ref=33521509a82eeed8e657642db2c2846cc9685bab", "patch": "@@ -69,12 +69,10 @@ static void\n error_callback (void *data, const char *msg, int errnum)\n {\n   struct print_data *pdata = (struct print_data *) data;\n-  const char *name;\n \n-  name = pdata->state->filename;\n-  if (name == NULL)\n-    name = \"/proc/self/exe\";\n-  fprintf (stderr, \"%s: libbacktrace: %s\", name, msg);\n+  if (pdata->state->filename != NULL)\n+    fprintf (stderr, \"%s: \", pdata->state->filename);\n+  fprintf (stderr, \"libbacktrace: %s\", msg);\n   if (errnum > 0)\n     fprintf (stderr, \": %s\", strerror (errnum));\n   fputc ('\\n', stderr);"}]}