{"sha": "b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiMGE0ZmE2MDI2NzYyMDczYjExN2E4ZTZiNjY0ZjJlYzdkZDljNw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-12T05:17:03Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-12T05:17:03Z"}, "message": "Enable VAES support [1/5]\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_VAES_SET,\n\tOPTION_MASK_ISA_VAES_UNSET): New.\n\t(ix86_handle_option): Handle -mvaes.\n\t* config/i386/cpuid.h: Define bit_VAES.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mvaes.\n\t* config/i386/i386-c.c (__VAES__): New.\n\t* config/i386/i386.c (ix86_target_string): Add -mvaes.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t* config/i386/i386.h (TARGET_VAES, TARGET_VAES_P): New.\n\t* config/i386/i386.opt: Add -mvaes.\n\t* doc/invoke.texi: Ditto.\n\nFrom-SVN: r255571", "tree": {"sha": "e1f1e816e3345a68f4a878947e920cb6f997107e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f1e816e3345a68f4a878947e920cb6f997107e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "102d484d482d055c2e9d0a6c383ca6437f45fe97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102d484d482d055c2e9d0a6c383ca6437f45fe97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102d484d482d055c2e9d0a6c383ca6437f45fe97"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "62f1c240b2ac8cc3008a4c19b344e1dba0c22367", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -1,3 +1,17 @@\n+2017-12-12  Julia Koval  <julia.koval@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_VAES_SET,\n+\tOPTION_MASK_ISA_VAES_UNSET): New.\n+\t(ix86_handle_option): Handle -mvaes.\n+\t* config/i386/cpuid.h: Define bit_VAES.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mvaes.\n+\t* config/i386/i386-c.c (__VAES__): New.\n+\t* config/i386/i386.c (ix86_target_string): Add -mvaes.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t* config/i386/i386.h (TARGET_VAES, TARGET_VAES_P): New.\n+\t* config/i386/i386.opt: Add -mvaes.\n+\t* doc/invoke.texi: Ditto.\n+\n 2017-12-12  Alexandre Oliva <aoliva@redhat.com>\n \n \t* debug.h (gcc_debug_hooks): Add inline_entry."}, {"sha": "575a914311f289e6fec193ec6972a0103f5cb403", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -142,6 +142,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_GFNI_SET OPTION_MASK_ISA_GFNI\n #define OPTION_MASK_ISA_IBT_SET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_SET OPTION_MASK_ISA_SHSTK\n+#define OPTION_MASK_ISA_VAES_SET OPTION_MASK_ISA_VAES\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -212,6 +213,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_GFNI_UNSET OPTION_MASK_ISA_GFNI\n #define OPTION_MASK_ISA_IBT_UNSET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_UNSET OPTION_MASK_ISA_SHSTK\n+#define OPTION_MASK_ISA_VAES_UNSET OPTION_MASK_ISA_VAES\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -539,6 +541,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mvaes:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_VAES_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_VAES_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_VAES_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_VAES_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "41369c2e3485e9039ec8c1c620a7d0e655b54687", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -100,6 +100,7 @@\n #define bit_AVX512VBMI2\t(1 << 6)\n #define bit_SHSTK\t(1 << 7)\n #define bit_GFNI\t(1 << 8)\n+#define bit_VAES\t(1 << 9)\n #define bit_AVX512VNNI\t(1 << 11)\n #define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_RDPID\t(1 << 22)"}, {"sha": "0cc4c4e96d6a1566eeff27ab8756ce50cfcdf0ea", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -417,7 +417,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx5124fmaps = 0, has_avx5124vnniw = 0;\n   unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n   unsigned int has_ibt = 0, has_shstk = 0;\n-  unsigned int has_avx512vnni = 0;\n+  unsigned int has_avx512vnni = 0, has_vaes = 0;\n \n   bool arch;\n \n@@ -510,6 +510,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512vnni = ecx & bit_AVX512VNNI;\n       has_rdpid = ecx & bit_RDPID;\n       has_gfni = ecx & bit_GFNI;\n+      has_vaes = ecx & bit_VAES;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n@@ -1076,6 +1077,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *gfni = has_gfni ? \" -mgfni\" : \" -mno-gfni\";\n       const char *ibt = has_ibt ? \" -mibt\" : \" -mno-ibt\";\n       const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n+      const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1086,7 +1088,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n-\t\t\tavx512vbmi2, avx512vnni, NULL);\n+\t\t\tavx512vbmi2, avx512vnni, vaes, NULL);\n     }\n \n done:"}, {"sha": "8ccec7bc29f23e0ae4d3219a28b860f63854379c", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -482,6 +482,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       if (flag_cf_protection != CF_NONE)\n \tdef_or_undef (parse_in, \"__CET__\");\n     }\n+  if (isa_flag2 & OPTION_MASK_ISA_VAES)\n+    def_or_undef (parse_in, \"__VAES__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "53317cf3d0ac6d93bd62169bb4d6019e23e21de0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -2748,6 +2748,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mavx512vbmi2\",\tOPTION_MASK_ISA_AVX512VBMI2 },\n     { \"-mavx512vnni\", OPTION_MASK_ISA_AVX512VNNI },\n+    { \"-mvaes\",\t\tOPTION_MASK_ISA_VAES },\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n@@ -5322,6 +5323,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"gfni\",\tOPT_mgfni),\n     IX86_ATTR_ISA (\"ibt\",\tOPT_mibt),\n     IX86_ATTR_ISA (\"shstk\",\tOPT_mshstk),\n+    IX86_ATTR_ISA (\"vaes\",\tOPT_mvaes),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "01fd6ce52bbd6cd749f5de07c6a6517b31d3cde0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -109,6 +109,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_RDPID_P(x)\tTARGET_ISA_RDPID_P(x)\n #define TARGET_GFNI\tTARGET_ISA_GFNI\n #define TARGET_GFNI_P(x)\tTARGET_ISA_GFNI_P(x)\n+#define TARGET_VAES\tTARGET_ISA_VAES\n+#define TARGET_VAES_P(x)\tTARGET_ISA_VAES_P(x)\n #define TARGET_BMI\tTARGET_ISA_BMI\n #define TARGET_BMI_P(x)\tTARGET_ISA_BMI_P(x)\n #define TARGET_BMI2\tTARGET_ISA_BMI2"}, {"sha": "04e391d311d032e5ea59f8f3d7c37ca151f8545c", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -785,6 +785,10 @@ mgfni\n Target Report Mask(ISA_GFNI) Var(ix86_isa_flags) Save\n Support GFNI built-in functions and code generation.\n \n+mvaes\n+Target Report Mask(ISA_VAES) Var(ix86_isa_flags2) Save\n+Support VAES built-in functions and code generation.\n+\n mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation."}, {"sha": "0d565b48f21e03ab2cae426d4735d078c3cc7518", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b7b0a4fa6026762073b117a8e6b664f2ec7dd9c7", "patch": "@@ -1204,7 +1204,7 @@ See RS/6000 and PowerPC Options.\n -mprefetchwt1  -mclflushopt  -mxsavec  -mxsaves @gol\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n--mmwaitx  -mclzero  -mpku  -mthreads -mgfni @gol\n+-mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n -mcet -mibt -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n@@ -26101,10 +26101,13 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mgfni\n @opindex mgfni\n+@need 200\n+@itemx -mvaes\n+@opindex mvaes\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n-AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2,\n+AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n GFNI, 3DNow!@: or enhanced 3DNow!@: extended instruction sets.  Each has a\n corresponding @option{-mno-} option to disable use of these instructions."}]}