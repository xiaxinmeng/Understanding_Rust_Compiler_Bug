{"sha": "942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyZDMzNGVjM2ZkZjM2MGRmZWRjMGY5N2QxYjQ3NDdhMWY1NmYwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-19T14:06:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-19T14:06:45Z"}, "message": "PR c++/66139 - EH cleanups for partially constructed aggregates.\n\nThere were several overlapping PRs about failure to clean up fully\nconstructed subobjects when an exception is thrown during aggregate\ninitialization of a temporary.  I fixed this for non-temporaries in the\ncontext of 57510, but that fix didn't handle temporaries.  So this patch\ndoes split_nonconstant_init at gimplification time, which is much smaller\nthan alternatives I tried.\n\n\tPR c++/57510\n\t* cp-gimplify.c (cp_gimplify_init_expr): Use split_nonconstant_init.\n\t* typeck2.c (split_nonconstant_init): Handle non-variable dest.\n\t(split_nonconstant_init_1): Clear TREE_SIDE_EFFECTS.\n\t* tree.c (is_local_temp): New.\n\nFrom-SVN: r279576", "tree": {"sha": "b27d4a2df27541a26c5d007a91095e2cff7fc3d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b27d4a2df27541a26c5d007a91095e2cff7fc3d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39f8777c403cbaf2603bbf2dec026c4d87e2dbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f8777c403cbaf2603bbf2dec026c4d87e2dbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f8777c403cbaf2603bbf2dec026c4d87e2dbb9"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "b2d0c3bcc7070c91f1d66a5fd1edc8b00d17d251", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -1,3 +1,12 @@\n+2019-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66139 - EH cleanups for partially constructed aggregates.\n+\tPR c++/57510\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Use split_nonconstant_init.\n+\t* typeck2.c (split_nonconstant_init): Handle non-variable dest.\n+\t(split_nonconstant_init_1): Clear TREE_SIDE_EFFECTS.\n+\t* tree.c (is_local_temp): New.\n+\n 2019-12-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91165 follow-on tweak"}, {"sha": "fc512ccff5c27bee539566a0bcaaba44d96cc3ff", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -513,7 +513,7 @@ gimplify_expr_stmt (tree *stmt_p)\n /* Gimplify initialization from an AGGR_INIT_EXPR.  */\n \n static void\n-cp_gimplify_init_expr (tree *expr_p)\n+cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p)\n {\n   tree from = TREE_OPERAND (*expr_p, 1);\n   tree to = TREE_OPERAND (*expr_p, 0);\n@@ -526,6 +526,20 @@ cp_gimplify_init_expr (tree *expr_p)\n   if (TREE_CODE (from) == TARGET_EXPR)\n     from = TARGET_EXPR_INITIAL (from);\n \n+  /* If we might need to clean up a partially constructed object, break down\n+     the CONSTRUCTOR with split_nonconstant_init.  */\n+  if (TREE_CODE (from) == CONSTRUCTOR\n+      && TREE_SIDE_EFFECTS (from)\n+      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (to)))\n+    {\n+      gimplify_expr (&to, pre_p, NULL, is_gimple_lvalue, fb_lvalue);\n+      replace_placeholders (from, to);\n+      from = split_nonconstant_init (to, from);\n+      cp_genericize_tree (&from, false);\n+      *expr_p = from;\n+      return;\n+    }\n+\n   /* Look through any COMPOUND_EXPRs, since build_compound_expr pushes them\n      inside the TARGET_EXPR.  */\n   for (t = from; t; )\n@@ -717,7 +731,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t LHS of an assignment might also be involved in the RHS, as in bug\n \t 25979.  */\n     case INIT_EXPR:\n-      cp_gimplify_init_expr (expr_p);\n+      cp_gimplify_init_expr (expr_p, pre_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n       /* Fall through.  */"}, {"sha": "50cd2837010500b56ee43610af66fe19b9aee9af", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -7359,6 +7359,7 @@ extern tree build_min_non_dep_call_vec\t\t(tree, tree, vec<tree, va_gc> *);\n extern vec<tree, va_gc>* vec_copy_and_insert    (vec<tree, va_gc>*, tree, unsigned);\n extern tree build_cplus_new\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_local_temp\t\t\t(tree);\n+extern bool is_local_temp\t\t\t(tree);\n extern tree build_aggr_init_expr\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);"}, {"sha": "42194cb937f8ed817e59ed609041b5f3265481a8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -539,6 +539,16 @@ build_local_temp (tree type)\n   return slot;\n }\n \n+/* Return whether DECL is such a local temporary.  */\n+\n+bool\n+is_local_temp (tree decl)\n+{\n+  return (VAR_P (decl) && DECL_ARTIFICIAL (decl)\n+\t  && !TREE_STATIC (decl)\n+\t  && DECL_FUNCTION_SCOPE_P (decl));\n+}\n+\n /* Set various status flags when building an AGGR_INIT_EXPR object T.  */\n \n static void"}, {"sha": "0e7766a1f3de4761612267e92f578614babc2e19", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -749,6 +749,7 @@ split_nonconstant_init_1 (tree dest, tree init)\n \n   /* The rest of the initializer is now a constant. */\n   TREE_CONSTANT (init) = 1;\n+  TREE_SIDE_EFFECTS (init) = 0;\n \n   /* We didn't split out anything.  */\n   if (num_split_elts == 0)\n@@ -777,8 +778,16 @@ split_nonconstant_init (tree dest, tree init)\n       if (split_nonconstant_init_1 (dest, init))\n \tinit = NULL_TREE;\n       code = pop_stmt_list (code);\n-      DECL_INITIAL (dest) = init;\n-      TREE_READONLY (dest) = 0;\n+      if (VAR_P (dest) && !is_local_temp (dest))\n+\t{\n+\t  DECL_INITIAL (dest) = init;\n+\t  TREE_READONLY (dest) = 0;\n+\t}\n+      else if (init)\n+\t{\n+\t  tree ie = build2 (INIT_EXPR, void_type_node, dest, init);\n+\t  code = add_stmt_to_compound (ie, code);\n+\t}\n     }\n   else if (TREE_CODE (init) == STRING_CST\n \t   && array_of_runtime_bound_p (TREE_TYPE (dest)))"}, {"sha": "90dd8d70d63afad1024f3b6d0130266f7474a731", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist116.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/66139\n+// { dg-do run { target c++11 } }\n+\n+int constructed = 0;\n+\n+class lock_guard_ext{\n+public:\n+  lock_guard_ext() { ++constructed; }\n+  ~lock_guard_ext() { --constructed; }\n+};\n+ \n+struct Access {\n+  lock_guard_ext lock;\n+  int value;\n+};\n+ \n+int t() {\n+  throw 0;\n+}\n+\n+Access foo1() {\n+  return { {}, t() };\n+}\n+ \n+int main () {\n+  try { foo1(); } catch (int) {}\n+  if (constructed != 0)\n+    __builtin_abort();\n+}"}, {"sha": "415a5de2dd1d35cb72b6585bed69a2ede347451e", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist117.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/66139\n+// { dg-do run { target c++11 } }\n+\n+#include <initializer_list>\n+\n+int c, d;\n+\n+struct a\n+{\n+  a (int i) { if (i) throw i; c++; }\n+  ~a () { d++; }\n+};\n+\n+void check (void (*f) ())\n+{\n+  try\n+  {\n+    c = d = 0;\n+    f ();\n+  }\n+  catch (int)\n+  {\n+    if (c != 1 || d != 1)\n+      __builtin_abort ();\n+    return;\n+  }\n+  __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+  struct s { a x, y; };\n+  check ([] { s t { 0, 1 }; });\n+  check ([] { s { 0, 1 }; });\n+  check ([] { a t[2] { 0, 1 }; });\n+  using array = a[2];\n+  check ([] { array { 0, 1 }; });\n+  check ([] { std::initializer_list <a> t { 0, 1 }; });\n+  check ([] { std::initializer_list <a> { 0, 1 }; });\n+}"}, {"sha": "4d1f4f3edfc9d7a19e000f39dae06afd34b4a030", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-eh.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942d334ec3fdf360dfedc0f97d1b4747a1f56f08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C?ref=942d334ec3fdf360dfedc0f97d1b4747a1f56f08", "patch": "@@ -1,8 +1,7 @@\n // Test that we properly clean up if we get an exception in the middle of\n // constructing the closure object.\n \n-// This test fails because of PR 41449; it isn't a lambda issue.\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n // { dg-require-effective-target c++11 }\n \n struct A"}]}