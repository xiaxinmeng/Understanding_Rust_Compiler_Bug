{"sha": "5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjMWFlM2I4YTZlOGFlNDhmNTFjOTM0NWU5MWRhNTYwNjk0ZmUxZQ==", "commit": {"author": {"name": "Evandro Menezes", "email": "e.menezes@samsung.com", "date": "2015-12-03T16:08:40Z"}, "committer": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2015-12-03T16:08:40Z"}, "message": "Add cost model for Exynos M1\n\ngcc/\n\t* config/aarch64/aarch64-cores.def: Use the Exynos M1 cost model.\n\t* config/aarch64/aarch64.c (exynosm1_addrcost_table): New variable.\n\t(exynosm1_regmove_cost): Likewise.\n\t(exynosm1_vector_cost): Likewise.\n\t(exynosm1_tunings): Likewise.\n\t* config/arm/aarch-cost-tables.h (exynosm1_extra_costs): Likewise.\n\t* config/arm/arm.c (arm_exynosm1_tune): Likewise.\n\t* config/arm/arm-cores.def: Use the Exynos M1 cost model.\n\nFrom-SVN: r231233", "tree": {"sha": "ec2d226eb90d0fe9f87c3ad11f66ce9b042f500e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2d226eb90d0fe9f87c3ad11f66ce9b042f500e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/comments", "author": null, "committer": null, "parents": [{"sha": "b3e4665562a83f85a5d590d137ae042854c035a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e4665562a83f85a5d590d137ae042854c035a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e4665562a83f85a5d590d137ae042854c035a8"}], "stats": {"total": 206, "additions": 204, "deletions": 2}, "files": [{"sha": "8a7a4ec04f7b79d2be66239eb899181ea40c3253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -1,3 +1,13 @@\n+2015-12-03  Evandro Menezes  <e.menezes@samsung.com>\n+\n+\t* config/aarch64/aarch64-cores.def: Use the Exynos M1 cost model.\n+\t* config/aarch64/aarch64.c (exynosm1_addrcost_table): New variable.\n+\t(exynosm1_regmove_cost): Likewise.\n+\t(exynosm1_vector_cost): Likewise.\n+\t(exynosm1_tunings): Likewise.\n+\t* config/arm/aarch-cost-tables.h (exynosm1_extra_costs): Likewise.\n+\t* config/arm/arm.c (arm_exynos_m1_tune): Likewise.\n+\n 2015-12-03  Alan Lawrence  <alan.lawrence@arm.com>\n \t    Richard Biener  <richard.guenther@gmail.com>\n "}, {"sha": "076574ec4299d90d0bee5a704a826150666f017c", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -44,7 +44,7 @@ AARCH64_CORE(\"cortex-a35\",  cortexa35, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AA\n AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, \"0x41\", \"0xd03\")\n AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07\")\n AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08\")\n-AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa72, \"0x53\", \"0x001\")\n+AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, exynosm1,  \"0x53\", \"0x001\")\n AARCH64_CORE(\"qdf24xx\",     qdf24xx,   cortexa57, 8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa57, \"0x51\", \"0x800\")\n AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8A,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  \"0x43\", \"0x0a1\")\n AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8A,  AARCH64_FL_FOR_ARCH8, xgene1, \"0x50\", \"0x000\")"}, {"sha": "bfbfc2a836dc3b95f8d4fe4a4f188b1b660e1d9a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -216,6 +216,22 @@ static const struct cpu_addrcost_table cortexa57_addrcost_table =\n   0, /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table exynosm1_addrcost_table =\n+{\n+    {\n+      0, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      2, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  1, /* register_offset  */\n+  1, /* register_sextend  */\n+  2, /* register_zextend  */\n+  0, /* imm_offset  */\n+};\n+\n static const struct cpu_addrcost_table xgene1_addrcost_table =\n {\n     {\n@@ -262,6 +278,16 @@ static const struct cpu_regmove_cost cortexa53_regmove_cost =\n   2 /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost exynosm1_regmove_cost =\n+{\n+  1, /* GP2GP  */\n+  /* Avoid the use of slow int<->fp moves for spilling by setting\n+     their cost higher than memmov_cost (actual, 4 and 9).  */\n+  9, /* GP2FP  */\n+  9, /* FP2GP  */\n+  1 /* FP2FP  */\n+};\n+\n static const struct cpu_regmove_cost thunderx_regmove_cost =\n {\n   2, /* GP2GP  */\n@@ -314,6 +340,22 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n   1 /* cond_not_taken_branch_cost  */\n };\n \n+static const struct cpu_vector_cost exynosm1_vector_cost =\n+{\n+  1, /* scalar_stmt_cost  */\n+  5, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  3, /* vec_stmt_cost  */\n+  3, /* vec_to_scalar_cost  */\n+  3, /* scalar_to_vec_cost  */\n+  5, /* vec_align_load_cost  */\n+  5, /* vec_unalign_load_cost  */\n+  1, /* vec_unalign_store_cost  */\n+  1, /* vec_store_cost  */\n+  1, /* cond_taken_branch_cost  */\n+  1 /* cond_not_taken_branch_cost  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost xgene1_vector_cost =\n {\n@@ -470,6 +512,30 @@ static const struct tune_params cortexa72_tunings =\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n+static const struct tune_params exynosm1_tunings =\n+{\n+  &exynosm1_extra_costs,\n+  &exynosm1_addrcost_table,\n+  &exynosm1_regmove_cost,\n+  &exynosm1_vector_cost,\n+  &generic_branch_cost,\n+  4,\t/* memmov_cost  */\n+  3,\t/* issue_rate  */\n+  (AARCH64_FUSE_NOTHING), /* fusible_ops  */\n+  4,\t/* function_align.  */\n+  4,\t/* jump_align.  */\n+  4,\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  48,\t/* max_case_values.  */\n+  64,\t/* cache_line_size.  */\n+  tune_params::AUTOPREFETCHER_OFF, /* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE) /* tune_flags.  */\n+};\n+\n static const struct tune_params thunderx_tunings =\n {\n   &thunderx_extra_costs,"}, {"sha": "850bde060b0262274917d28fd1535cfaf799417d", "filename": "gcc/config/arm/aarch-cost-tables.h", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-cost-tables.h?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -331,6 +331,109 @@ const struct cpu_cost_table cortexa57_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table exynosm1_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    COSTS_N_INSNS (0), /* shift_reg.  */\n+    0,                 /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    0,                 /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (2),       /* simple.  */\n+      COSTS_N_INSNS (3),       /* flag_setting.  */\n+      COSTS_N_INSNS (4),       /* extend.  */\n+      COSTS_N_INSNS (2),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (19)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (4),       /* extend.  */\n+      COSTS_N_INSNS (3),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (35)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (3),         /* load.  */\n+    COSTS_N_INSNS (4),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (3),         /* ldrd.  */\n+    COSTS_N_INSNS (2),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    2,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),         /* loadf.  */\n+    COSTS_N_INSNS (4),         /* loadd.  */\n+    COSTS_N_INSNS (4),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    2,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    0,                         /* store_unaligned.  */\n+    COSTS_N_INSNS (1),         /* loadv.  */\n+    COSTS_N_INSNS (1)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (21),      /* div.  */\n+      COSTS_N_INSNS (3),       /* mult.  */\n+      COSTS_N_INSNS (4),       /* mult_addsub.  */\n+      COSTS_N_INSNS (4),       /* fma.  */\n+      COSTS_N_INSNS (2),       /* addsub.  */\n+      COSTS_N_INSNS (0),       /* fpconst.  */\n+      COSTS_N_INSNS (0),       /* neg.  */\n+      COSTS_N_INSNS (3),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (12),      /* toint.  */\n+      COSTS_N_INSNS (7),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (34),      /* div.  */\n+      COSTS_N_INSNS (3),       /* mult.  */\n+      COSTS_N_INSNS (4),       /* mult_addsub.  */\n+      COSTS_N_INSNS (4),       /* fma.  */\n+      COSTS_N_INSNS (2),       /* addsub.  */\n+      COSTS_N_INSNS (0),       /* fpconst.  */\n+      COSTS_N_INSNS (0),       /* neg.  */\n+      COSTS_N_INSNS (3),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (12),      /* toint.  */\n+      COSTS_N_INSNS (7),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (0)  /* alu.  */\n+  }\n+};\n+\n const struct cpu_cost_table xgene1_extra_costs =\n {\n   /* ALU */"}, {"sha": "642c840bed73028fd6d300e78b4ca9d445429f93", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -169,7 +169,7 @@ ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED\n ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH8A),            xgene1)\n "}, {"sha": "42bf27223ef0b7919708e2b65686f35ee33eecd3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5ec1ae3b8a6e8ae48f51c9345e91da560694fe1e", "patch": "@@ -2006,6 +2006,29 @@ const struct tune_params arm_cortex_a57_tune =\n   tune_params::SCHED_AUTOPREF_FULL\n };\n \n+const struct tune_params arm_exynosm1_tune =\n+{\n+  arm_9e_rtx_costs,\n+  &exynosm1_extra_costs,\n+  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  3,\t\t\t\t\t\t/* Issue rate.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n+};\n+\n const struct tune_params arm_xgene1_tune =\n {\n   arm_9e_rtx_costs,"}]}