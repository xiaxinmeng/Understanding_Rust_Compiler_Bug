{"sha": "3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0OGE1NGNhMzllNGFhMGQzOGNlYzUwYjhlOGVlN2I3YTkzZGYwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-01T21:01:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-01T21:01:59Z"}, "message": "re PR c++/49924 ([C++0X] [constexpr] can't initialize a non-static member array of a literal type as a constexpr)\n\n\tPR c++/49924\n\t* semantics.c (cxx_eval_vec_init_1): Fix logic.\n\nFrom-SVN: r177073", "tree": {"sha": "47375ddd3aba101247cb5326b6dd17abb7e941f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47375ddd3aba101247cb5326b6dd17abb7e941f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "172c08a54430cef4d0833d88d3b22013780e0280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172c08a54430cef4d0833d88d3b22013780e0280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172c08a54430cef4d0833d88d3b22013780e0280"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "6dda726a1a0422abc9cbb96a8d313300a5b5c2d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "patch": "@@ -1,5 +1,8 @@\n 2011-08-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49924\n+\t* semantics.c (cxx_eval_vec_init_1): Fix logic.\n+\n \tPR c++/49813\n \t* semantics.c (potential_constant_expression_1): Allow any builtin.\n \t(morally_constexpr_builtin_function_p): Remove."}, {"sha": "0b2a96fa4d2de1bb3979913560dac37835bf82f5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "patch": "@@ -6651,15 +6651,23 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n   tree elttype = TREE_TYPE (atype);\n   int max = tree_low_cst (array_type_nelts (atype), 0);\n   VEC(constructor_elt,gc) *n = VEC_alloc (constructor_elt, gc, max + 1);\n+  bool pre_init = false;\n   int i;\n \n   /* For the default constructor, build up a call to the default\n      constructor of the element type.  We only need to handle class types\n      here, as for a constructor to be constexpr, all members must be\n      initialized, which for a defaulted default constructor means they must\n      be of a class type with a constexpr default constructor.  */\n-  if (value_init)\n-    gcc_assert (!init);\n+  if (TREE_CODE (elttype) == ARRAY_TYPE)\n+    /* We only do this at the lowest level.  */;\n+  else if (value_init)\n+    {\n+      init = build_value_init (elttype, tf_warning_or_error);\n+      init = cxx_eval_constant_expression\n+\t    (call, init, allow_non_constant, addr, non_constant_p);\n+      pre_init = true;\n+    }\n   else if (!init)\n     {\n       VEC(tree,gc) *argvec = make_tree_vector ();\n@@ -6669,6 +6677,7 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n       release_tree_vector (argvec);\n       init = cxx_eval_constant_expression (call, init, allow_non_constant,\n \t\t\t\t\t   addr, non_constant_p);\n+      pre_init = true;\n     }\n \n   if (*non_constant_p && !allow_non_constant)\n@@ -6690,17 +6699,14 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n \t\t\t\t\t allow_non_constant, addr,\n \t\t\t\t\t non_constant_p);\n \t}\n-      else if (value_init)\n+      else if (pre_init)\n \t{\n-\t  eltinit = build_value_init (elttype, tf_warning_or_error);\n-\t  eltinit = cxx_eval_constant_expression\n-\t    (call, eltinit, allow_non_constant, addr, non_constant_p);\n-\t}\n-      else if (TREE_CODE (init) == CONSTRUCTOR)\n-\t{\n-\t  /* Initializing an element using the call to the default\n-\t     constructor we just built above.  */\n-\t  eltinit = unshare_expr (init);\n+\t  /* Initializing an element using value or default initialization\n+\t     we just pre-built above.  */\n+\t  if (i == 0)\n+\t    eltinit = init;\n+\t  else\n+\t    eltinit = unshare_expr (init);\n \t}\n       else\n \t{"}, {"sha": "e3626441401784ce15b49017d54c04c37132d483", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "patch": "@@ -1,5 +1,8 @@\n 2011-08-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49924\n+\t* g++.dg/cpp0x/constexpr-array4.C: New.\n+\n \tPR c++/49813\n \t* g++.dg/cpp0x/constexpr-builtin1.C: New.\n "}, {"sha": "9aeb75d6b064630dedff6e4b5a20b9749b4b1f7f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array4.C?ref=3748a54ca39e4aa0d38cec50b8e8ee7b7a93df09", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/49924\n+// { dg-options -std=c++0x }\n+\n+struct A { constexpr A() { } };\n+\n+struct B {\n+  A array[1]; //non-static member array of a literal type w constexpr ctor\n+  constexpr B() : array{} { } // here is the problem\n+};\n+\n+int main()\n+{\n+  constexpr B b{};  // won't compile\n+}"}]}