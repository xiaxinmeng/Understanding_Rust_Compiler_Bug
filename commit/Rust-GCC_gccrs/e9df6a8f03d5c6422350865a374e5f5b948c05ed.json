{"sha": "e9df6a8f03d5c6422350865a374e5f5b948c05ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkZjZhOGYwM2Q1YzY0MjIzNTA4NjVhMzc0ZTVmNWI5NDhjMDVlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-21T16:24:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-21T16:24:00Z"}, "message": "PR libstdc++/70940 make pmr::resource_adaptor return aligned memory\n\n\tPR libstdc++/70940\n\t* include/experimental/memory_resource\n\t(__resource_adaptor_imp::do_deallocate): Add missing return.\n\t* testsuite/experimental/memory_resource/new_delete_resource.cc: New.\n\t* testsuite/experimental/memory_resource/resource_adaptor.cc: Test\n\tresource_adaptor with std::allocator, __gnu_cxx::new_allocator and\n\t__gnu_cxx::malloc_allocator.\n\nFrom-SVN: r261851", "tree": {"sha": "6ae33deaf8e4e7a756d753319c1e7ec4190f3031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae33deaf8e4e7a756d753319c1e7ec4190f3031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9df6a8f03d5c6422350865a374e5f5b948c05ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9df6a8f03d5c6422350865a374e5f5b948c05ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9df6a8f03d5c6422350865a374e5f5b948c05ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9df6a8f03d5c6422350865a374e5f5b948c05ed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7956c508ddf36901d06bdb3f5a1ae099ee656924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7956c508ddf36901d06bdb3f5a1ae099ee656924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7956c508ddf36901d06bdb3f5a1ae099ee656924"}], "stats": {"total": 244, "additions": 241, "deletions": 3}, "files": [{"sha": "6b9690c0e79b0cb8dd0290062eb3a7c899a707e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9df6a8f03d5c6422350865a374e5f5b948c05ed", "patch": "@@ -1,5 +1,13 @@\n 2018-06-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/70940\n+\t* include/experimental/memory_resource\n+\t(__resource_adaptor_imp::do_deallocate): Add missing return.\n+\t* testsuite/experimental/memory_resource/new_delete_resource.cc: New.\n+\t* testsuite/experimental/memory_resource/resource_adaptor.cc: Test\n+\tresource_adaptor with std::allocator, __gnu_cxx::new_allocator and\n+\t__gnu_cxx::malloc_allocator.\n+\n \tPR libstdc++/70940\n \t* include/experimental/memory_resource (__resource_adaptor_common):\n \tNew base class."}, {"sha": "8f5a8df14c95e9a1a2ac3ae4c087cf1a74f48b73", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=e9df6a8f03d5c6422350865a374e5f5b948c05ed", "patch": "@@ -408,7 +408,10 @@ namespace pmr {\n       {\n \tauto __ptr = static_cast<char*>(__p);\n \tif (__alignment == 1)\n-\t  _M_alloc.deallocate(__ptr, __bytes);\n+\t  {\n+\t    _M_alloc.deallocate(__ptr, __bytes);\n+\t    return;\n+\t  }\n \n \tconst _AlignMgr __mgr(__bytes, __alignment);\n \t// Use the stored token to retrieve the original pointer to deallocate."}, {"sha": "692e520bf9a4e89e049157b2266b7675bc995ac5", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/new_delete_resource.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc?ref=e9df6a8f03d5c6422350865a374e5f5b948c05ed", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/memory_resource>\n+#include <testsuite_hooks.h>\n+\n+bool new_called = false;\n+bool delete_called = false;\n+\n+void* operator new(std::size_t n)\n+{\n+  new_called = true;\n+  if (void* p = malloc(n))\n+    return p;\n+  throw std::bad_alloc();\n+}\n+\n+void operator delete(void* p)\n+{\n+  delete_called = true;\n+  std::free(p);\n+}\n+\n+void operator delete(void* p, std::size_t)\n+{\n+  ::operator delete(p);\n+}\n+\n+template<std::size_t A>\n+  bool aligned(void* p)\n+  {\n+    return (reinterpret_cast<std::uintptr_t>(p) % A) == 0;\n+  }\n+\n+template<typename T>\n+  bool aligned(void* p)\n+  { return aligned<alignof(T)>(p); }\n+\n+// Extended alignments:\n+constexpr std::size_t al6 = (1ul << 6), al12 = (1ul << 12), al18 = (1ul << 18);\n+\n+using std::experimental::pmr::memory_resource;\n+using std::experimental::pmr::new_delete_resource;\n+\n+memory_resource* global = nullptr;\n+\n+void\n+test01()\n+{\n+  memory_resource* r1 = new_delete_resource();\n+  VERIFY( *r1 == *r1 );\n+  memory_resource* r2 = new_delete_resource();\n+  VERIFY( r1 == r2 );\n+  VERIFY( *r1 == *r2 );\n+  global = r1;\n+}\n+\n+void\n+test02()\n+{\n+  memory_resource* r1 = new_delete_resource();\n+  VERIFY( r1 == global );\n+  VERIFY( *r1 == *global );\n+\n+  new_called = false;\n+  delete_called = false;\n+  void* p = r1->allocate(1);\n+  VERIFY( new_called );\n+  VERIFY( ! delete_called );\n+\n+  new_called = false;\n+  r1->deallocate(p, 1);\n+  VERIFY( ! new_called );\n+  VERIFY( delete_called );\n+}\n+\n+void\n+test03()\n+{\n+  using std::max_align_t;\n+  using std::size_t;\n+  void* p = nullptr;\n+\n+  memory_resource* r1 = new_delete_resource();\n+  p = r1->allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r1->deallocate(p, 1);\n+  p = r1->allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r1->deallocate(p, 1, alignof(short));\n+  p = r1->allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r1->deallocate(p, 1, alignof(long));\n+  constexpr size_t big_al = alignof(max_align_t) * 8;\n+  p = r1->allocate(1, big_al);\n+  VERIFY( aligned<big_al>(p) );\n+  r1->deallocate(p, 1, big_al);\n+\n+  // Test extended alignments\n+  p = r1->allocate(1024, al6);\n+  VERIFY( aligned<al6>(p) );\n+  r1->deallocate(p, 1024, al6);\n+  p = r1->allocate(1024, al12);\n+  VERIFY( aligned<al12>(p) );\n+  r1->deallocate(p, 1024, al12);\n+  p = r1->allocate(1024, al18);\n+  VERIFY( aligned<al18>(p) );\n+  r1->deallocate(p, 1024, al18);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "46cb113da7b9d6e0ec701c7ee74259267c4ccc65", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/resource_adaptor.cc", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9df6a8f03d5c6422350865a374e5f5b948c05ed/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc?ref=e9df6a8f03d5c6422350865a374e5f5b948c05ed", "patch": "@@ -20,6 +20,8 @@\n \n #include <experimental/memory_resource>\n #include <ext/debug_allocator.h>\n+#include <ext/new_allocator.h>\n+#include <ext/malloc_allocator.h>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n@@ -91,8 +93,8 @@ test05()\n   VERIFY( aligned<big_al>(p) );\n   r3.deallocate(p, 1, big_al);\n \n-  __gnu_cxx::debug_allocator<std::allocator<short>> a5;\n-  resource_adaptor<decltype(a5)> r5(a5), r6(a5);\n+  __gnu_cxx::debug_allocator<std::allocator<short>> a5, a6;\n+  resource_adaptor<decltype(a5)> r5(a5), r6(a6);\n   VERIFY( r5 == r5 );\n   VERIFY( r5 == r6 );\n   VERIFY( r5 != r1 );\n@@ -121,6 +123,99 @@ test05()\n   p = r5.allocate(1024, al18);\n   VERIFY( aligned<al18>(p) );\n   r5.deallocate(p, 1024, al18);\n+\n+  __gnu_cxx::new_allocator<short> a7, a8;\n+  resource_adaptor<decltype(a7)> r7(a7), r8(a8);\n+  VERIFY( r7 == r7 );\n+  VERIFY( r7 == r8 );\n+  VERIFY( r7 != r1 );\n+  VERIFY( r7 != r3 );\n+  VERIFY( r7 != r5 );\n+  p = r7.allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r7.deallocate(p, 1);\n+  p = r7.allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r7.deallocate(p, 1, alignof(short));\n+  p = r7.allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r7.deallocate(p, 1, alignof(long));\n+  p = r7.allocate(1, big_al);\n+  VERIFY( aligned<big_al>(p) );\n+  r7.deallocate(p, 1, big_al);\n+  // Test extended alignments\n+  p = r7.allocate(1024, al6);\n+  VERIFY( aligned<al6>(p) );\n+  r7.deallocate(p, 1024, al6);\n+  p = r7.allocate(1024, al12);\n+  VERIFY( aligned<al12>(p) );\n+  r7.deallocate(p, 1024, al12);\n+  p = r7.allocate(1024, al18);\n+  VERIFY( aligned<al18>(p) );\n+  r7.deallocate(p, 1024, al18);\n+\n+  __gnu_cxx::malloc_allocator<short> a9, a10;\n+  resource_adaptor<decltype(a9)> r9(a9), r10(a10);\n+  VERIFY( r9 == r9 );\n+  VERIFY( r9 == r10 );\n+  VERIFY( r9 != r1 );\n+  VERIFY( r9 != r3 );\n+  VERIFY( r9 != r5 );\n+  VERIFY( r9 != r7 );\n+  p = r9.allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r9.deallocate(p, 1);\n+  p = r9.allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r9.deallocate(p, 1, alignof(short));\n+  p = r9.allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r9.deallocate(p, 1, alignof(long));\n+  p = r9.allocate(1, big_al);\n+  VERIFY( aligned<big_al>(p) );\n+  r9.deallocate(p, 1, big_al);\n+  // Test extended alignments\n+  p = r9.allocate(1024, al6);\n+  VERIFY( aligned<al6>(p) );\n+  r9.deallocate(p, 1024, al6);\n+  p = r9.allocate(1024, al12);\n+  VERIFY( aligned<al12>(p) );\n+  r9.deallocate(p, 1024, al12);\n+  p = r9.allocate(1024, al18);\n+  VERIFY( aligned<al18>(p) );\n+  r9.deallocate(p, 1024, al18);\n+\n+  std::allocator<short> a11, a12;\n+  resource_adaptor<decltype(a11)> r11(a11), r12(a12);\n+  VERIFY( r11 == r11 );\n+  VERIFY( r11 == r12 );\n+  VERIFY( r11 != r1 );\n+  VERIFY( r11 != r3 );\n+  VERIFY( r11 != r5 );\n+  VERIFY( r11 != r7 );\n+  VERIFY( r11 != r9 );\n+  p = r11.allocate(1);\n+  VERIFY( aligned<max_align_t>(p) );\n+  r11.deallocate(p, 1);\n+  p = r11.allocate(1, alignof(short));\n+  VERIFY( aligned<short>(p) );\n+  r11.deallocate(p, 1, alignof(short));\n+  p = r11.allocate(1, alignof(long));\n+  VERIFY( aligned<long>(p) );\n+  r11.deallocate(p, 1, alignof(long));\n+  p = r11.allocate(1, big_al);\n+  VERIFY( aligned<big_al>(p) );\n+  r11.deallocate(p, 1, big_al);\n+  // Test extended alignments\n+  p = r11.allocate(1024, al6);\n+  VERIFY( aligned<al6>(p) );\n+  r11.deallocate(p, 1024, al6);\n+  p = r11.allocate(1024, al12);\n+  VERIFY( aligned<al12>(p) );\n+  r11.deallocate(p, 1024, al12);\n+  p = r11.allocate(1024, al18);\n+  VERIFY( aligned<al18>(p) );\n+  r11.deallocate(p, 1024, al18);\n }\n \n int main()"}]}