{"sha": "29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhNzlmY2Y0ZTlkNDQ4ODhhYWRlNWMzZTE5ZTJiODkyNWMyMGFiMA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-05-25T20:39:31Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-25T20:39:31Z"}, "message": "s390.c (GP_ARG_NUM_REG, [...]): New defines.\n\nChangeLog:\n\n\t* config/s390/s390.c (GP_ARG_NUM_REG, FP_ARG_NUM_REG): New defines.\n\t(s390_function_arg, s390_gimplify_va_arg): Use them.\n\t(s390_register_info): Save only required subset of argument\n\tregisters into save area for va_list.\n\t(s390_va_start): Initialize only required elements of va_list struct.\n\t(s390_build_builtin_va_list): Set va_list_[gf]pr_counter_field.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/stdarg-2.c: Add tests for s390*-*-linux* targets.\n\t* gcc.dg/tree-ssa/stdarg-3.c: Likewise.\n\t* gcc.dg/tree-ssa/stdarg-4.c: Likewise.\n\t* gcc.dg/tree-ssa/stdarg-5.c: Likewise.\n\nFrom-SVN: r100164", "tree": {"sha": "e4be1bc753b666b714ba6acf1e4ebca138322cb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4be1bc753b666b714ba6acf1e4ebca138322cb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/comments", "author": null, "committer": null, "parents": [{"sha": "24597146d4d08526bc0a2032e44f5523f6399db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24597146d4d08526bc0a2032e44f5523f6399db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24597146d4d08526bc0a2032e44f5523f6399db3"}], "stats": {"total": 179, "additions": 136, "deletions": 43}, "files": [{"sha": "02d90470820d78c79856ef2d0c01613295aaba46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -1,3 +1,12 @@\n+2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (GP_ARG_NUM_REG, FP_ARG_NUM_REG): New defines.\n+\t(s390_function_arg, s390_gimplify_va_arg): Use them.\n+\t(s390_register_info): Save only required subset of argument\n+\tregisters into save area for va_list.\n+\t(s390_va_start): Initialize only required elements of va_list struct.\n+\t(s390_build_builtin_va_list): Set va_list_[gf]pr_counter_field.\n+\n 2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* reload1.c (verify_initial_elim_offsets): Return boolean status"}, {"sha": "2c860e7da1b05a9ec73b929b426192afeeab594b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 83, "deletions": 43, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -255,6 +255,11 @@ struct machine_function GTY(())\n #define cfun_fpr_bit_p(BITNUM) (!!(cfun->machine->frame_layout.fpr_bitmap &    \\\n   (1 << (BITNUM))))\n \n+/* Number of GPRs and FPRs used for argument passing.  */\n+#define GP_ARG_NUM_REG 5\n+#define FP_ARG_NUM_REG (TARGET_64BIT? 4 : 2)\n+\n+\n /* Return true if SET either doesn't set the CC register, or else\n    the source and destination have matching CC modes and that\n    CC mode is at least as constrained as REQ_MODE.  */\n@@ -5659,18 +5664,40 @@ s390_register_info (int live_regs[])\n   if (current_function_stdarg)\n     {\n       /* Varargs functions need to save gprs 2 to 6.  */\n-      if (cfun_frame_layout.first_save_gpr == -1\n-          || cfun_frame_layout.first_save_gpr > 2)\n-        cfun_frame_layout.first_save_gpr = 2;\n-\n-      if (cfun_frame_layout.last_save_gpr == -1\n-          || cfun_frame_layout.last_save_gpr < 6)\n-        cfun_frame_layout.last_save_gpr = 6;\n+      if (cfun->va_list_gpr_size\n+\t  && current_function_args_info.gprs < GP_ARG_NUM_REG)\n+\t{\n+\t  int min_gpr = current_function_args_info.gprs;\n+\t  int max_gpr = min_gpr + cfun->va_list_gpr_size;\n+\t  if (max_gpr > GP_ARG_NUM_REG)\n+\t    max_gpr = GP_ARG_NUM_REG;\n+\n+\t  if (cfun_frame_layout.first_save_gpr == -1\n+\t      || cfun_frame_layout.first_save_gpr > 2 + min_gpr)\n+\t    cfun_frame_layout.first_save_gpr = 2 + min_gpr;\n+\n+\t  if (cfun_frame_layout.last_save_gpr == -1\n+\t      || cfun_frame_layout.last_save_gpr < 2 + max_gpr - 1)\n+\t    cfun_frame_layout.last_save_gpr = 2 + max_gpr - 1;\n+\t}\n \n       /* Mark f0, f2 for 31 bit and f0-f4 for 64 bit to be saved.  */\n-      if (TARGET_HARD_FLOAT)\n-\tfor (i = 0; i < (TARGET_64BIT ? 4 : 2); i++)\n-\t  cfun_set_fpr_bit (i);\n+      if (TARGET_HARD_FLOAT && cfun->va_list_fpr_size\n+\t  && current_function_args_info.fprs < FP_ARG_NUM_REG)\n+\t{\n+\t  int min_fpr = current_function_args_info.fprs;\n+\t  int max_fpr = min_fpr + cfun->va_list_fpr_size;\n+\t  if (max_fpr > FP_ARG_NUM_REG)\n+\t    max_fpr = FP_ARG_NUM_REG;\n+\n+\t  /* ??? This is currently required to ensure proper location\n+\t     of the fpr save slots within the va_list save area.  */\n+\t  if (TARGET_PACKED_STACK)\n+\t    min_fpr = 0;\n+\n+\t  for (i = min_fpr; i < max_fpr; i++)\n+\t    cfun_set_fpr_bit (i);\n+\t}\n     }\n \n   if (!TARGET_64BIT)\n@@ -6714,7 +6741,7 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n {\n   if (s390_function_arg_float (mode, type))\n     {\n-      if (cum->fprs + 1 > (TARGET_64BIT? 4 : 2))\n+      if (cum->fprs + 1 > FP_ARG_NUM_REG)\n \treturn 0;\n       else\n \treturn gen_rtx_REG (mode, cum->fprs + 16);\n@@ -6724,7 +6751,7 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       int size = s390_function_arg_size (mode, type);\n       int n_gprs = (size + UNITS_PER_WORD-1) / UNITS_PER_WORD;\n \n-      if (cum->gprs + n_gprs > 5)\n+      if (cum->gprs + n_gprs > GP_ARG_NUM_REG)\n \treturn 0;\n       else\n \treturn gen_rtx_REG (mode, cum->gprs + 2);\n@@ -6832,6 +6859,9 @@ s390_build_builtin_va_list (void)\n   f_sav = build_decl (FIELD_DECL, get_identifier (\"__reg_save_area\"),\n \t\t      ptr_type_node);\n \n+  va_list_gpr_counter_field = f_gpr;\n+  va_list_fpr_counter_field = f_fpr;\n+\n   DECL_FIELD_CONTEXT (f_gpr) = record;\n   DECL_FIELD_CONTEXT (f_fpr) = record;\n   DECL_FIELD_CONTEXT (f_ovf) = record;\n@@ -6887,39 +6917,53 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   n_gpr = current_function_args_info.gprs;\n   n_fpr = current_function_args_info.fprs;\n \n-  t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n-\t     build_int_cst (NULL_TREE, n_gpr));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  if (cfun->va_list_gpr_size)\n+    {\n+      t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n+\t         build_int_cst (NULL_TREE, n_gpr));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n \n-  t = build (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n-\t     build_int_cst (NULL_TREE, n_fpr));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  if (cfun->va_list_fpr_size)\n+    {\n+      t = build (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n+\t         build_int_cst (NULL_TREE, n_fpr));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n \n   /* Find the overflow area.  */\n-  t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n+  if (n_gpr + cfun->va_list_gpr_size > GP_ARG_NUM_REG\n+      || n_fpr + cfun->va_list_fpr_size > FP_ARG_NUM_REG)\n+    {\n+      t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n \n-  off = INTVAL (current_function_arg_offset_rtx);\n-  off = off < 0 ? 0 : off;\n-  if (TARGET_DEBUG_ARG)\n-    fprintf (stderr, \"va_start: n_gpr = %d, n_fpr = %d off %d\\n\",\n-\t     (int)n_gpr, (int)n_fpr, off);\n+      off = INTVAL (current_function_arg_offset_rtx);\n+      off = off < 0 ? 0 : off;\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"va_start: n_gpr = %d, n_fpr = %d off %d\\n\",\n+\t\t (int)n_gpr, (int)n_fpr, off);\n \n-  t = build (PLUS_EXPR, TREE_TYPE (ovf), t, build_int_cst (NULL_TREE, off));\n+      t = build (PLUS_EXPR, TREE_TYPE (ovf), t, build_int_cst (NULL_TREE, off));\n \n-  t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n \n   /* Find the register save area.  */\n-  t = make_tree (TREE_TYPE (sav), return_address_pointer_rtx);\n-  t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n-\t     build_int_cst (NULL_TREE, -RETURN_REGNUM * UNITS_PER_WORD));\n+  if ((cfun->va_list_gpr_size && n_gpr < GP_ARG_NUM_REG)\n+      || (cfun->va_list_fpr_size && n_fpr < FP_ARG_NUM_REG))\n+    {\n+      t = make_tree (TREE_TYPE (sav), return_address_pointer_rtx);\n+      t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n+\t         build_int_cst (NULL_TREE, -RETURN_REGNUM * UNITS_PER_WORD));\n   \n-  t = build (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      t = build (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n }\n \n /* Implement va_arg by updating the va_list structure\n@@ -6987,7 +7031,7 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       sav_ofs = 2 * UNITS_PER_WORD;\n       sav_scale = UNITS_PER_WORD;\n       size = UNITS_PER_WORD;\n-      max_reg = 4;\n+      max_reg = GP_ARG_NUM_REG - n_reg;\n     }\n   else if (s390_function_arg_float (TYPE_MODE (type), type))\n     {\n@@ -7003,8 +7047,7 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       n_reg = 1;\n       sav_ofs = 16 * UNITS_PER_WORD;\n       sav_scale = 8;\n-      /* TARGET_64BIT has up to 4 parameter in fprs */\n-      max_reg = TARGET_64BIT ? 3 : 1;\n+      max_reg = FP_ARG_NUM_REG - n_reg;\n     }\n   else\n     {\n@@ -7028,10 +7071,7 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n \tsav_ofs += UNITS_PER_WORD - size;\n \n       sav_scale = UNITS_PER_WORD;\n-      if (n_reg > 1)\n-\tmax_reg = 3;\n-      else\n-\tmax_reg = 4;\n+      max_reg = GP_ARG_NUM_REG - n_reg;\n     }\n \n   /* Pull the value out of the saved registers ...  */"}, {"sha": "9323ecbe054641f52114c88586269e6368bd1448", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -1,3 +1,10 @@\n+2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/stdarg-2.c: Add tests for s390*-*-linux* targets.\n+\t* gcc.dg/tree-ssa/stdarg-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/stdarg-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/stdarg-5.c: Likewise.\n+\n 2005-05-25  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.dg/20050524-1.c: New test."}, {"sha": "0672e50fe869f49639f152063d265e5c7a2f5fa8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-2.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -24,6 +24,7 @@ f1 (int i, ...)\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -42,6 +43,7 @@ f2 (int i, ...)\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -55,6 +57,7 @@ f3 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[1-9\\]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n@@ -71,6 +74,7 @@ f4 (int i, ...)\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -87,6 +91,7 @@ f5 (int i, ...)\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -105,6 +110,7 @@ f6 (int i, ...)\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -120,6 +126,7 @@ f7 (int i, ...)\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -137,6 +144,7 @@ f8 (int i, ...)\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -152,6 +160,7 @@ f9 (int i, ...)\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -169,6 +178,7 @@ f10 (int i, ...)\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -187,6 +197,7 @@ f11 (int i, ...)\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -205,6 +216,7 @@ f12 (int i, ...)\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -223,6 +235,7 @@ f13 (int i, ...)\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -241,6 +254,7 @@ f14 (int i, ...)\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 24 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[1-9]\\[0-9\\]* GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -263,6 +277,7 @@ f15 (int i, ...)\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump-not \"f15: va_list escapes 0, needs to save 0 GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "ac3aeb94a1ea387815299660bdc8f9b49e3e0d42", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-3.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-3.c?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -23,6 +23,7 @@ f1 (int i, ...)\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -36,6 +37,7 @@ f2 (int i, ...)\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -52,6 +54,7 @@ f3 (int i, ...)\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -66,6 +69,7 @@ f4 (int i, ...)\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -80,6 +84,7 @@ f5 (int i, ...)\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -96,6 +101,7 @@ f6 (int i, ...)\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -110,6 +116,7 @@ f7 (int i, ...)\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -124,6 +131,7 @@ f8 (int i, ...)\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -138,6 +146,7 @@ f10 (int i, ...)\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -152,6 +161,7 @@ f11 (int i, ...)\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -166,6 +176,7 @@ f12 (int i, ...)\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 1, needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "61e12f3c12cef285d6d3253597b251a09523fc8d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-4.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -26,6 +26,7 @@ f1 (int i, ...)\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -41,6 +42,7 @@ f2 (int i, ...)\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes \\[01\\], needs to save all GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -62,6 +64,7 @@ f3 (int i, ...)\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n \n@@ -81,6 +84,7 @@ f4 (int i, ...)\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target i?86-*-* ia64-*-* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save \\[148\\] GPR units\" \"stdarg\" { target { powerpc*-*-* && lp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "bd62f2bdfeffe3d32c5a398368b27b38ce45b35f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-5.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a79fcf4e9d44888aade5c3e19e2b8925c20ab0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c?ref=29a79fcf4e9d44888aade5c3e19e2b8925c20ab0", "patch": "@@ -24,6 +24,7 @@ f1 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n void\n f2 (int i, ...)\n@@ -36,6 +37,7 @@ f2 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and all FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n /* Here va_arg can be executed at most as many times as va_start.  */\n void\n@@ -53,6 +55,7 @@ f3 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n void\n f4 (int i, ...)\n@@ -70,6 +73,7 @@ f4 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 16 GPR units and 16 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n void\n f5 (int i, ...)\n@@ -83,6 +87,7 @@ f5 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 16 GPR units and 0 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save (4|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n void\n f6 (int i, ...)\n@@ -96,6 +101,7 @@ f6 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 8 GPR units and 32 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 32 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n void\n f7 (int i, ...)\n@@ -109,4 +115,5 @@ f7 (int i, ...)\n }\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 0 GPR units and 64 FPR units\" \"stdarg\" { target { x86_64-*-* && lp64 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 32 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}]}