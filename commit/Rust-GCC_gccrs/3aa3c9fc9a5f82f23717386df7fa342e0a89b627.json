{"sha": "3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhM2M5ZmM5YTVmODJmMjM3MTczODZkZjdmYTM0MmUwYTg5YjYyNw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-05-14T11:42:53Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-05-14T11:42:53Z"}, "message": "re PR c/66066 (r222889 causes bogus error: initializer element is not constant)\n\n\tPR c/66066\n\tPR c/66127\n\t* c-common.c (c_fully_fold): Pass false down to c_fully_fold_internal.\n\t(c_fully_fold_internal): Fold C_MAYBE_CONST_EXPRs with\n\tC_MAYBE_CONST_EXPR_INT_OPERANDS set.  Add FOR_INT_CONST argument and\n\tuse it.  If FOR_INT_CONST, require that all evaluated operands be\n\tINTEGER_CSTs.\n\n\t* c-typeck.c (digest_init): Call pedwarn_init with OPT_Wpedantic\n\trather than with 0.\n\n\t* gcc.dg/pr14649-1.c: Add -Wpedantic.\n\t* gcc.dg/pr19984.c: Likewise.\n\t* gcc.dg/pr66066-1.c: New test.\n\t* gcc.dg/pr66066-2.c: New test.\n\t* gcc.dg/pr66066-3.c: New test.\n\nFrom-SVN: r223193", "tree": {"sha": "f48930586f2a03d6d44f7e85c4dfe7f4f6c23873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48930586f2a03d6d44f7e85c4dfe7f4f6c23873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12b3286d41a6aedba8e295a7c7934ec124904b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b3286d41a6aedba8e295a7c7934ec124904b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b3286d41a6aedba8e295a7c7934ec124904b55"}], "stats": {"total": 210, "additions": 191, "deletions": 19}, "files": [{"sha": "48d483e7b1b3c23322e24171ba06cb4b0e1a6831", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -1,3 +1,13 @@\n+2015-05-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66066\n+\tPR c/66127\n+\t* c-common.c (c_fully_fold): Pass false down to c_fully_fold_internal.\n+\t(c_fully_fold_internal): Fold C_MAYBE_CONST_EXPRs with\n+\tC_MAYBE_CONST_EXPR_INT_OPERANDS set.  Add FOR_INT_CONST argument and\n+\tuse it.  If FOR_INT_CONST, require that all evaluated operands be\n+\tINTEGER_CSTs.\n+\n 2015-05-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.h (warn_for_misleading_indentation): New prototype."}, {"sha": "31c4c0d16e01bd9b0ebb4be193285fdc4adf1a54", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -315,7 +315,7 @@ const struct fname_var_t fname_vars[] =\n /* Global visibility options.  */\n struct visibility_flags visibility_options;\n \n-static tree c_fully_fold_internal (tree expr, bool, bool *, bool *);\n+static tree c_fully_fold_internal (tree expr, bool, bool *, bool *, bool);\n static tree check_case_value (location_t, tree);\n static bool check_case_bounds (location_t, tree, tree, tree *, tree *);\n \n@@ -1148,7 +1148,7 @@ c_fully_fold (tree expr, bool in_init, bool *maybe_const)\n       expr = TREE_OPERAND (expr, 0);\n     }\n   ret = c_fully_fold_internal (expr, in_init, maybe_const,\n-\t\t\t       &maybe_const_itself);\n+\t\t\t       &maybe_const_itself, false);\n   if (eptype)\n     ret = fold_convert_loc (loc, eptype, ret);\n   *maybe_const &= maybe_const_itself;\n@@ -1161,11 +1161,13 @@ c_fully_fold (tree expr, bool in_init, bool *maybe_const)\n    arithmetic overflow (for C90, *MAYBE_CONST_OPERANDS is carried from\n    both evaluated and unevaluated subexpressions while\n    *MAYBE_CONST_ITSELF is carried from only evaluated\n-   subexpressions).  */\n+   subexpressions).  FOR_INT_CONST indicates if EXPR is an expression\n+   with integer constant operands, and if any of the operands doesn't\n+   get folded to an integer constant, don't fold the expression itself.  */\n \n static tree\n c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n-\t\t       bool *maybe_const_itself)\n+\t\t       bool *maybe_const_itself, bool for_int_const)\n {\n   tree ret = expr;\n   enum tree_code code = TREE_CODE (expr);\n@@ -1209,7 +1211,11 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (C_MAYBE_CONST_EXPR_NON_CONST (expr))\n \t*maybe_const_operands = false;\n       if (C_MAYBE_CONST_EXPR_INT_OPERANDS (expr))\n-\t*maybe_const_itself = false;\n+\t{\n+\t  *maybe_const_itself = false;\n+\t  inner = c_fully_fold_internal (inner, in_init, maybe_const_operands,\n+\t\t\t\t\t maybe_const_itself, true);\n+\t}\n       if (pre && !in_init)\n \tret = build2 (COMPOUND_EXPR, TREE_TYPE (expr), pre, inner);\n       else\n@@ -1259,7 +1265,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op1 = TREE_OPERAND (expr, 1);\n       op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself);\n+\t\t\t\t   maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op0);\n       if (op0 != orig_op0)\n \tret = build3 (COMPONENT_REF, TREE_TYPE (expr), op0, op1, op2);\n@@ -1276,10 +1282,10 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op2 = TREE_OPERAND (expr, 2);\n       op3 = TREE_OPERAND (expr, 3);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself);\n+\t\t\t\t   maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op0);\n       op1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself);\n+\t\t\t\t   maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op1);\n       op1 = decl_constant_value_for_optimization (op1);\n       if (op0 != orig_op0 || op1 != orig_op1)\n@@ -1336,7 +1342,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself);\n+\t\t\t\t   maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op0);\n       if (code != MODIFY_EXPR\n \t  && code != PREDECREMENT_EXPR\n@@ -1348,9 +1354,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t expression for the sake of conversion warnings.  */\n       if (code != MODIFY_EXPR)\n \top1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n-\t\t\t\t     maybe_const_itself);\n+\t\t\t\t     maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op1);\n       op1 = decl_constant_value_for_optimization (op1);\n+\n+      if (for_int_const && (TREE_CODE (op0) != INTEGER_CST\n+\t\t\t    || TREE_CODE (op1) != INTEGER_CST))\n+\tgoto out;\n+\n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n \tret = in_init\n \t  ? fold_build2_initializer_loc (loc, code, TREE_TYPE (expr), op0, op1)\n@@ -1420,10 +1431,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       /* Unary operations.  */\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself);\n+\t\t\t\t   maybe_const_itself, for_int_const);\n       STRIP_TYPE_NOPS (op0);\n       if (code != ADDR_EXPR && code != REALPART_EXPR && code != IMAGPART_EXPR)\n \top0 = decl_constant_value_for_optimization (op0);\n+\n+      if (for_int_const && TREE_CODE (op0) != INTEGER_CST)\n+\tgoto out;\n+\n       /* ??? Cope with user tricks that amount to offsetof.  The middle-end is\n \t not prepared to deal with them if they occur in initializers.  */\n       if (op0 != orig_op0\n@@ -1468,17 +1483,25 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t arguments.  */\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n-      op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n+      op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self,\n+\t\t\t\t   for_int_const);\n       STRIP_TYPE_NOPS (op0);\n \n       unused_p = (op0 == (code == TRUTH_ANDIF_EXPR\n \t\t\t  ? truthvalue_false_node\n \t\t\t  : truthvalue_true_node));\n       c_disable_warnings (unused_p);\n-      op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self,\n+\t\t\t\t   for_int_const);\n       STRIP_TYPE_NOPS (op1);\n       c_enable_warnings (unused_p);\n \n+      if (for_int_const\n+\t  && (TREE_CODE (op0) != INTEGER_CST\n+\t      /* Require OP1 be an INTEGER_CST only if it's evaluated.  */\n+\t      || (!unused_p && TREE_CODE (op1) != INTEGER_CST)))\n+\tgoto out;\n+\n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n \tret = in_init\n \t  ? fold_build2_initializer_loc (loc, code, TREE_TYPE (expr), op0, op1)\n@@ -1506,19 +1529,30 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       orig_op2 = op2 = TREE_OPERAND (expr, 2);\n-      op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n+      op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self,\n+\t\t\t\t   for_int_const);\n \n       STRIP_TYPE_NOPS (op0);\n       c_disable_warnings (op0 == truthvalue_false_node);\n-      op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self,\n+\t\t\t\t   for_int_const);\n       STRIP_TYPE_NOPS (op1);\n       c_enable_warnings (op0 == truthvalue_false_node);\n \n       c_disable_warnings (op0 == truthvalue_true_node);\n-      op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self);\n+      op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self,\n+\t\t\t\t   for_int_const);\n       STRIP_TYPE_NOPS (op2);\n       c_enable_warnings (op0 == truthvalue_true_node);\n \n+      if (for_int_const\n+\t  && (TREE_CODE (op0) != INTEGER_CST\n+\t      /* Only the evaluated operand must be an INTEGER_CST.  */\n+\t      || (op0 == truthvalue_true_node\n+\t\t  ? TREE_CODE (op1) != INTEGER_CST\n+\t\t  : TREE_CODE (op2) != INTEGER_CST)))\n+\tgoto out;\n+\n       if (op0 != orig_op0 || op1 != orig_op1 || op2 != orig_op2)\n \tret = fold_build3_loc (loc, code, TREE_TYPE (expr), op0, op1, op2);\n       else"}, {"sha": "ebf9759bc9b699b1b2d24c95fabf60bd6d48bd9d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -1,3 +1,10 @@\n+2015-05-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66066\n+\tPR c/66127\n+\t* c-typeck.c (digest_init): Call pedwarn_init with OPT_Wpedantic\n+\trather than with 0.\n+\n 2015-05-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_if_body): Add param \"if_loc\", use it"}, {"sha": "9b883a22f2ba3e97eb080c482b9c0e9eb6023ba9", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -6864,7 +6864,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  inside_init = error_mark_node;\n \t}\n       else if (require_constant && !maybe_const)\n-\tpedwarn_init (init_loc, 0,\n+\tpedwarn_init (init_loc, OPT_Wpedantic,\n \t\t      \"initializer element is not a constant expression\");\n \n       /* Added to enable additional -Wsuggest-attribute=format warnings.  */"}, {"sha": "ef46d503bf5ad972223605aa7d7b0f5024101071", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -1,3 +1,13 @@\n+2015-05-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66066\n+\tPR c/66127\n+\t* gcc.dg/pr14649-1.c: Add -Wpedantic.\n+\t* gcc.dg/pr19984.c: Likewise.\n+\t* gcc.dg/pr66066-1.c: New test.\n+\t* gcc.dg/pr66066-2.c: New test.\n+\t* gcc.dg/pr66066-3.c: New test.\n+\n 2015-05-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/pow-sqrt-synth-1.c: New test."}, {"sha": "b9fc4b9461637176aaccd00738d8548b99f1c30e", "filename": "gcc/testsuite/gcc.dg/pr14649-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14649-1.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -1,6 +1,6 @@\n /* PR c/14649 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wpedantic\" } */\n \n double atan(double);\n "}, {"sha": "a628e0e91eac28d7b99fa1f86d225c74d3ab324b", "filename": "gcc/testsuite/gcc.dg/pr19984.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -1,6 +1,6 @@\n /* PR c/19984 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -std=c99\" } */\n+/* { dg-options \"-O2 -std=c99 -Wpedantic\" } */\n \n \n double nan (const char *);"}, {"sha": "7a1d342c808a294165facc2899c12e2cdf3b56f7", "filename": "gcc/testsuite/gcc.dg/pr66066-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-1.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/66066 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-div-by-zero\" } */\n+\n+/* Accept these unless -pedantic-errors/-Werror.  */\n+int a1 = -1 << 0;\n+int a2 = -1 << 0 | 0;\n+int a3 = -1 << 0 & 1;\n+int a4 = -1 << 2 ^ 1;\n+int a5 = 4 & -1 << 2;\n+int a6 = (-1 << 2) ^ (1 >> 1);\n+int a7 = 0 || (-1 << 1);\n+int a8 = 0 ? 2 : (-1 << 1);\n+int a9 = 1 && -1 << 0;\n+int a10 = !(-1 << 0);\n+\n+/* Don't accept these.  */\n+int b1 = 1 / 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int b2 = 1 / (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b3 = 0 ? 2 : 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b4 = 0 || 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b5 = 0 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b6 = 1 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b7 = (1 / 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b8 = (1 / 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int b9 = 1 && 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b10 = !(1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c1 = 1 % 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int c2 = 1 / (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c3 = 0 ? 2 : 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c4 = 0 || 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c5 = 0 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c6 = 1 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c7 = (1 % 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c8 = (1 % 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int c9 = 1 && 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c10 = !(1 % 0);\t/* { dg-error \"initializer element is not constant\" } */"}, {"sha": "848fe854bf8ea3ac1321a9c98d926c3ffdcbf706", "filename": "gcc/testsuite/gcc.dg/pr66066-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-2.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/66066 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-div-by-zero -Wpedantic\" } */\n+\n+/* Accept these unless -pedantic-errors/-Werror.  */\n+int a1 = -1 << 0;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a2 = -1 << 0 | 0;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a3 = -1 << 0 & 1;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a4 = -1 << 2 ^ 1;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a5 = 4 & -1 << 2;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a6 = (-1 << 2) ^ (1 >> 1);\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a7 = 0 || (-1 << 1);\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a8 = 0 ? 2 : (-1 << 1);\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a9 = 1 && -1 << 0;\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+int a10 = !(-1 << 0);\t\t/* { dg-warning \"initializer element is not a constant expression\" } */\n+\n+/* Don't accept these.  */\n+int b1 = 1 / 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int b2 = 1 / (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b3 = 0 ? 2 : 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b4 = 0 || 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b5 = 0 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b6 = 1 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b7 = (1 / 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b8 = (1 / 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int b9 = 1 && 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b10 = !(1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c1 = 1 % 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int c2 = 1 / (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c3 = 0 ? 2 : 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c4 = 0 || 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c5 = 0 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c6 = 1 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c7 = (1 % 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c8 = (1 % 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int c9 = 1 && 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c10 = !(1 % 0);\t/* { dg-error \"initializer element is not constant\" } */"}, {"sha": "99ffec625561dfa36cb856a6ef83192a6724ba16", "filename": "gcc/testsuite/gcc.dg/pr66066-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa3c9fc9a5f82f23717386df7fa342e0a89b627/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66066-3.c?ref=3aa3c9fc9a5f82f23717386df7fa342e0a89b627", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/66066 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-div-by-zero -pedantic-errors\" } */\n+\n+/* Accept these unless -pedantic-errors/-Werror.  */\n+int a1 = -1 << 0;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a2 = -1 << 0 | 0;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a3 = -1 << 0 & 1;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a4 = -1 << 2 ^ 1;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a5 = 4 & -1 << 2;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a6 = (-1 << 2) ^ (1 >> 1);\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a7 = 0 || (-1 << 1);\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a8 = 0 ? 2 : (-1 << 1);\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a9 = 1 && -1 << 0;\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+int a10 = !(-1 << 0);\t\t/* { dg-error \"initializer element is not a constant expression\" } */\n+\n+/* Don't accept these.  */\n+int b1 = 1 / 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int b2 = 1 / (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b3 = 0 ? 2 : 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b4 = 0 || 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b5 = 0 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b6 = 1 * (1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int b7 = (1 / 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b8 = (1 / 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int b9 = 1 && 1 / 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int b10 = !(1 / 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c1 = 1 % 0;\t\t/* { dg-error \"initializer element is not constant\" } */\n+int c2 = 1 / (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c3 = 0 ? 2 : 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c4 = 0 || 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c5 = 0 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c6 = 1 * (1 % 0);\t/* { dg-error \"initializer element is not constant\" } */\n+int c7 = (1 % 0) * 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c8 = (1 % 0) * 1;\t/* { dg-error \"initializer element is not constant\" } */\n+int c9 = 1 && 1 % 0;\t/* { dg-error \"initializer element is not constant\" } */\n+int c10 = !(1 % 0);\t/* { dg-error \"initializer element is not constant\" } */"}]}