{"sha": "ff35f162daebd1ac6538aa74c0f270f8e19902de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzNWYxNjJkYWViZDFhYzY1MzhhYTc0YzBmMjcwZjhlMTk5MDJkZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-04T21:22:32Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-04T21:56:06Z"}, "message": "Handle shebang line, plus any whitespace and comment skipping in lexer\n\nThe lexer tried to handle the shebang line but used loc directly,\ninstead of the current_column. And it assumed a '/' should immediately\nfollow the \"#!\". But if the \"#!\" is followed by whitespace and/or\ncomments and a '[' character, then the first line isn't see as a\nshebang line (even if the kernel or shell would) but as the start of\nan inner attribute.\n\nAdd various tests for when the first line starting with \"#!\" is seen\nas a shebang line (and should be skipped). And some tests there is a\n'[' character following some whitespace and/or comments and the \"#!\"\nis seen as part of an inner attribute.", "tree": {"sha": "487d1b338b5a4060bbcb605d0c9e298475d1587a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/487d1b338b5a4060bbcb605d0c9e298475d1587a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff35f162daebd1ac6538aa74c0f270f8e19902de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35f162daebd1ac6538aa74c0f270f8e19902de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff35f162daebd1ac6538aa74c0f270f8e19902de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35f162daebd1ac6538aa74c0f270f8e19902de/comments", "author": null, "committer": null, "parents": [{"sha": "210ae4f7b0fea9671482b8f01354fd5b9274f878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210ae4f7b0fea9671482b8f01354fd5b9274f878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210ae4f7b0fea9671482b8f01354fd5b9274f878"}], "stats": {"total": 108, "additions": 89, "deletions": 19}, "files": [{"sha": "ebd69de0fd1cb0862b6865860717017bf93ff61a", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 60, "deletions": 19, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -237,28 +237,63 @@ Lexer::build_token ()\n       current_char = peek_input ();\n       skip_input ();\n \n-      // return end of file token if end of file\n-      if (current_char == EOF)\n-\treturn Token::make (END_OF_FILE, loc);\n-\n       // detect shebang\n-      if (loc == 1 && current_line == 1 && current_char == '#')\n+      // Must be the first thing on the first line, starting with #!\n+      // But since an attribute can also start with an #! we don't count it as a\n+      // shebang line when after any whitespace or comments there is a [. If it\n+      // is a shebang line we simple drop the line. Otherwise we don't consume\n+      // any characters and fall through to the real tokenizer.\n+      if (current_line == 1 && current_column == 1 && current_char == '#'\n+\t  && peek_input () == '!')\n \t{\n-\t  current_char = peek_input ();\n-\n-\t  if (current_char == '!')\n+\t  int n = 1;\n+\t  while (true)\n \t    {\n-\t      skip_input ();\n-\t      current_char = peek_input ();\n-\n-\t      if (current_char == '/')\n+\t      int next_char = peek_input (n);\n+\t      if (is_whitespace (next_char))\n+\t\tn++;\n+\t      else if (next_char == '/' && peek_input (n + 1) == '/')\n \t\t{\n-\t\t  // definitely shebang\n-\n-\t\t  skip_input ();\n-\n-\t\t  // ignore rest of line\n-\t\t  while (current_char != '\\n')\n+\t\t  // A single line comment\n+\t\t  n += 2;\n+\t\t  next_char = peek_input (n);\n+\t\t  while (next_char != '\\n' && next_char != EOF)\n+\t\t    {\n+\t\t      n++;\n+\t\t      next_char = peek_input (n);\n+\t\t    }\n+\t\t  if (next_char == '\\n')\n+\t\t    n++;\n+\t\t}\n+\t      else if (next_char == '/' && peek_input (n + 1) == '*')\n+\t\t{\n+\t\t  // Start of a block comment\n+\t\t  n += 2;\n+\t\t  int level = 1;\n+\t\t  while (level > 0)\n+\t\t    {\n+\t\t      if (peek_input (n) == EOF)\n+\t\t\tbreak;\n+\t\t      else if (peek_input (n) == '/'\n+\t\t\t       && peek_input (n + 1) == '*')\n+\t\t\t{\n+\t\t\t  n += 2;\n+\t\t\t  level += 1;\n+\t\t\t}\n+\t\t      else if (peek_input (n) == '*'\n+\t\t\t       && peek_input (n + 1) == '/')\n+\t\t\t{\n+\t\t\t  n += 2;\n+\t\t\t  level -= 1;\n+\t\t\t}\n+\t\t      else\n+\t\t\tn++;\n+\t\t    }\n+\t\t}\n+\t      else if (next_char != '[')\n+\t\t{\n+\t\t  // definitely shebang, ignore the first line\n+\t\t  while (current_char != '\\n' && current_char != EOF)\n \t\t    {\n \t\t      current_char = peek_input ();\n \t\t      skip_input ();\n@@ -269,11 +304,17 @@ Lexer::build_token ()\n \t\t  current_column = 1;\n \t\t  // tell line_table that new line starts\n \t\t  line_map->start_line (current_line, max_column_hint);\n-\t\t  continue;\n+\t\t  break;\n \t\t}\n+\t      else\n+\t\tbreak; /* Definitely not a shebang line. */\n \t    }\n \t}\n \n+      // return end of file token if end of file\n+      if (current_char == EOF)\n+\treturn Token::make (END_OF_FILE, loc);\n+\n       // if not end of file, start tokenising\n       switch (current_char)\n \t{"}, {"sha": "37e01b659408e916ee554b4ef355a1164244c7ed", "filename": "gcc/testsuite/rust/compile/torture/not_shebang.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,3 @@\n+#!\n+[allow(unused)]\n+fn main () { }"}, {"sha": "662f65067497946b7339e9af063cad552c843e1a", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_block_comment.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_block_comment.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1 @@\n+#!/*/this/is/a/comment*/[allow(unused)] fn main () { }"}, {"sha": "273ae4e8e2aa75c0b94cf21df4ef02dc5604dfa4", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_comment.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_comment.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,3 @@\n+#!//this/is/a/comment\n+[allow(unused)]   \n+fn main () { }"}, {"sha": "86800b14cb325f6bfc95a52d8bba6a7f38340bcc", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_multiline_comment.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_multiline_comment.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,7 @@\n+#!//this/is/a/comment\n+\n+/* Also a /* nested */\n+   multiline // comment\n+   with some more whitespace after, but then finally a [, so not a real #! line.  */\n+\n+[allow(unused)] fn main () { }"}, {"sha": "6b94a69111a3c7e8a8d04d8496cd4025d943a159", "filename": "gcc/testsuite/rust/compile/torture/not_shebang_spaces.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnot_shebang_spaces.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,6 @@\n+#!   \n+\n+    [allow(unused)]   \n+\n+        fn main () { }\n+    "}, {"sha": "1c8b9c9a955c5f084e9302716e109ad7daf1deab", "filename": "gcc/testsuite/rust/compile/torture/shebang.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env cat \n+\n+fn main () { }"}, {"sha": "075bc6cf5941d7fb8540df78a4e769599d7f55dd", "filename": "gcc/testsuite/rust/compile/torture/shebang_plus_attr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env cat \n+#![allow(unused)]\n+fn main () { }"}, {"sha": "ece8a52381c0816376b4b76331015c40e86d2e2c", "filename": "gcc/testsuite/rust/compile/torture/shebang_plus_attr2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35f162daebd1ac6538aa74c0f270f8e19902de/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fshebang_plus_attr2.rs?ref=ff35f162daebd1ac6538aa74c0f270f8e19902de", "patch": "@@ -0,0 +1,3 @@\n+#!//usr/bin/env cat \n+#![allow(unused)]\n+fn main () { }"}]}