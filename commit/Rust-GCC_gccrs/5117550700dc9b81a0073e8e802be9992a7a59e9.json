{"sha": "5117550700dc9b81a0073e8e802be9992a7a59e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNzU1MDcwMGRjOWI4MWEwMDczZThlODAyYmU5OTkyYTdhNTllOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2019-04-27T00:46:20Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-04-27T00:46:20Z"}, "message": "RISC-V: Promode modes of constant loads for store insns.\n\nThis improves optimization of code storing constants to memory.  Given this\ntestcase:\n    void sub1 (int *a, long long *b) { *a = 1; *b = 1; }\nan unpatched rv64 compiler emits two li instructions, one for an SImode pseudo\nand one for a DImode pseudo.  With the patch, we get a single DImode li insn.\n\n\tgcc/\n\t* config/riscv/riscv-protos.h (riscv_move_integer): Add machine_mode\n\tparameter.\n\t* config/riscv/riscv.c (riscv_move_integer): New parameter orig_mode.\n\tPass orig_mode to riscv_build_integer.\n\t(riscv_split_integer): Pass mode to riscv_move_integer.\n\t(riscv_legitimize_const_move): Likewise.\n\t(riscv_legitimize_move): For MEM dest and CONST_INT src case, new local\n\tpromoted_mode.  Replace force_reg call with code to load constant into\n\tpromoted reg and then subreg it for the store.\n\t* config/riscv/riscv.md (low<mode>+1): Pass <GPR:MODE>mode to\n\triscv_move_integer.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/load-immediate.c: New.\n\nFrom-SVN: r270621", "tree": {"sha": "c1c6eb525456a622b4accbf0e9acf96ff04b2bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c6eb525456a622b4accbf0e9acf96ff04b2bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5117550700dc9b81a0073e8e802be9992a7a59e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5117550700dc9b81a0073e8e802be9992a7a59e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5117550700dc9b81a0073e8e802be9992a7a59e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5117550700dc9b81a0073e8e802be9992a7a59e9/comments", "author": null, "committer": null, "parents": [{"sha": "0d056d03a6d930f545b4d969ba12b03d23ddce7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d056d03a6d930f545b4d969ba12b03d23ddce7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d056d03a6d930f545b4d969ba12b03d23ddce7d"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "e5de2dfaac3f2559db6bc6466b6a586105b2a186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -1,3 +1,17 @@\n+2019-04-26  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv-protos.h (riscv_move_integer): Add machine_mode\n+\tparameter.\n+\t* config/riscv/riscv.c (riscv_move_integer): New parameter orig_mode.\n+\tPass orig_mode to riscv_build_integer.\n+\t(riscv_split_integer): Pass mode to riscv_move_integer.\n+\t(riscv_legitimize_const_move): Likewise.\n+\t(riscv_legitimize_move): For MEM dest and CONST_INT src case, new local\n+\tpromoted_mode.  Replace force_reg call with code to load constant into\n+\tpromoted reg and then subreg it for the store.\n+\t* config/riscv/riscv.md (low<mode>+1): Pass <GPR:MODE>mode to\n+\triscv_move_integer.\n+\n 2018-04-26  Eugene Sharygin  <eush@ispras.ru>\n \n \t* gdbhooks.py: Fix UnicodeDecodeErrors when printing trees with"}, {"sha": "5c1002bbc291550d5f5066d1d9215a723e84df34", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -47,7 +47,7 @@ extern rtx riscv_emit_move (rtx, rtx);\n extern bool riscv_split_symbol (rtx, rtx, machine_mode, rtx *);\n extern bool riscv_split_symbol_type (enum riscv_symbol_type);\n extern rtx riscv_unspec_address (rtx, enum riscv_symbol_type);\n-extern void riscv_move_integer (rtx, rtx, HOST_WIDE_INT);\n+extern void riscv_move_integer (rtx, rtx, HOST_WIDE_INT, machine_mode);\n extern bool riscv_legitimize_move (machine_mode, rtx, rtx);\n extern rtx riscv_subword (rtx, bool);\n extern bool riscv_split_64bit_move_p (rtx, rtx);"}, {"sha": "6fb6c6ad3728af95edd32b089feb2eae6549b6b7", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -508,8 +508,8 @@ riscv_split_integer (HOST_WIDE_INT val, machine_mode mode)\n   unsigned HOST_WIDE_INT hival = sext_hwi ((val - loval) >> 32, 32);\n   rtx hi = gen_reg_rtx (mode), lo = gen_reg_rtx (mode);\n \n-  riscv_move_integer (hi, hi, hival);\n-  riscv_move_integer (lo, lo, loval);\n+  riscv_move_integer (hi, hi, hival, mode);\n+  riscv_move_integer (lo, lo, loval, mode);\n \n   hi = gen_rtx_fmt_ee (ASHIFT, mode, hi, GEN_INT (32));\n   hi = force_reg (mode, hi);\n@@ -1334,18 +1334,22 @@ riscv_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   return x;\n }\n \n-/* Load VALUE into DEST.  TEMP is as for riscv_force_temporary.  */\n+/* Load VALUE into DEST.  TEMP is as for riscv_force_temporary.  ORIG_MODE\n+   is the original src mode before promotion.  */\n \n void\n-riscv_move_integer (rtx temp, rtx dest, HOST_WIDE_INT value)\n+riscv_move_integer (rtx temp, rtx dest, HOST_WIDE_INT value,\n+\t\t    machine_mode orig_mode)\n {\n   struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS];\n   machine_mode mode;\n   int i, num_ops;\n   rtx x;\n \n   mode = GET_MODE (dest);\n-  num_ops = riscv_build_integer (codes, value, mode);\n+  /* We use the original mode for the riscv_build_integer call, because HImode\n+     values are given special treatment.  */\n+  num_ops = riscv_build_integer (codes, value, orig_mode);\n \n   if (can_create_pseudo_p () && num_ops > 2 /* not a simple constant */\n       && num_ops >= riscv_split_integer_cost (value))\n@@ -1381,7 +1385,7 @@ riscv_legitimize_const_move (machine_mode mode, rtx dest, rtx src)\n   /* Split moves of big integers into smaller pieces.  */\n   if (splittable_const_int_operand (src, mode))\n     {\n-      riscv_move_integer (dest, dest, INTVAL (src));\n+      riscv_move_integer (dest, dest, INTVAL (src), mode);\n       return;\n     }\n \n@@ -1428,7 +1432,31 @@ riscv_legitimize_move (machine_mode mode, rtx dest, rtx src)\n {\n   if (!register_operand (dest, mode) && !reg_or_0_operand (src, mode))\n     {\n-      riscv_emit_move (dest, force_reg (mode, src));\n+      rtx reg;\n+\n+      if (GET_CODE (src) == CONST_INT)\n+\t{\n+\t  /* Apply the equivalent of PROMOTE_MODE here for constants to\n+\t     improve cse.  */\n+\t  machine_mode promoted_mode = mode;\n+\t  if (GET_MODE_CLASS (mode) == MODE_INT\n+\t      && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n+\t    promoted_mode = word_mode;\n+\n+\t  if (splittable_const_int_operand (src, mode))\n+\t    {\n+\t      reg = gen_reg_rtx (promoted_mode);\n+\t      riscv_move_integer (reg, reg, INTVAL (src), mode);\n+\t    }\n+\t  else\n+\t    reg = force_reg (promoted_mode, src);\n+\n+\t  if (promoted_mode != mode)\n+\t    reg = gen_lowpart (mode, reg);\n+\t}\n+      else\n+\treg = force_reg (mode, src);\n+      riscv_emit_move (dest, reg);\n       return true;\n     }\n "}, {"sha": "fc81daa43eff5dffafae5b65ca5dd1b46d28daff", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -1278,7 +1278,8 @@\n   \"\"\n   [(const_int 0)]\n {\n-  riscv_move_integer (operands[2], operands[0], INTVAL (operands[1]));\n+  riscv_move_integer (operands[2], operands[0], INTVAL (operands[1]),\n+\t\t      <GPR:MODE>mode);\n   DONE;\n })\n "}, {"sha": "4c68148e67be177e1b9dbba2ee7e4fb2358e10be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -1,3 +1,7 @@\n+2019-04-26  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/load-immediate.c: New.\n+\n 2019-04-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/90243"}, {"sha": "f8fe7473c314c33ac7b8b957d8675a7f6a4947be", "filename": "gcc/testsuite/gcc.target/riscv/load-immediate.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fload-immediate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5117550700dc9b81a0073e8e802be9992a7a59e9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fload-immediate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fload-immediate.c?ref=5117550700dc9b81a0073e8e802be9992a7a59e9", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64d -O2\" } */\n+\n+/* Check that we don't have unnecessary load immediate instructions.  */\n+void\n+sub1 (int *a, long long *b)\n+{\n+  *a = 1;\n+  *b = 1;\n+}\n+\n+void\n+sub2 (short *a, short *b)\n+{\n+  *a = -32768;\n+  *b = 32767;\n+}\n+\n+void\n+sub3 (int *a, long long *b)\n+{\n+  *a = 10000;\n+  *b = 10000;\n+}\n+\n+void\n+sub4 (int *a, short *b)\n+{\n+  *a = 1;\n+  *b = 1;\n+}\n+/* { dg-final { scan-assembler-times \"\\tli\\t\" 4 } } */"}]}