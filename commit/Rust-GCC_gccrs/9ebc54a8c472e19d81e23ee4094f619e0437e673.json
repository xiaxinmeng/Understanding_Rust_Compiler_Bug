{"sha": "9ebc54a8c472e19d81e23ee4094f619e0437e673", "node_id": "C_kwDOANBUbNoAKDllYmM1NGE4YzQ3MmUxOWQ4MWUyM2VlNDA5NGY2MTllMDQzN2U2NzM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-09-20T18:43:49Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-29T09:08:46Z"}, "message": "ada: Improve efficiency of slice-of-component assignment\n\nThis patch improves the efficiency of slice assignment when the left- or\nright-hand side is a slice of a component or a slice of a slice.\nPreviously, the optimization was disabled in these cases, just in\ncase there might be a volatile or independent component lurking.\nNow we explicitly check all the relevant subcomponents of\nthe prefix.\n\nThe previous version said (in exp_ch5.adb):\n\n\t--  ...We could\n\t--  complicate this code by actually looking for such volatile and\n\t--  independent components.\n\nand that's exactly what we are doing here.\n\ngcc/ada/\n\n\t* exp_ch5.adb\n\t(Expand_Assign_Array_Loop_Or_Bitfield): Make the checks for\n\tvolatile and independent objects more precise.", "tree": {"sha": "2206b4ba85bbb92879881280c8788e15fb6cd1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2206b4ba85bbb92879881280c8788e15fb6cd1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ebc54a8c472e19d81e23ee4094f619e0437e673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebc54a8c472e19d81e23ee4094f619e0437e673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebc54a8c472e19d81e23ee4094f619e0437e673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebc54a8c472e19d81e23ee4094f619e0437e673/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ea0437ead0dda3acd51cfb80a01de5feb56929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ea0437ead0dda3acd51cfb80a01de5feb56929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ea0437ead0dda3acd51cfb80a01de5feb56929"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "209741c82cf829ae2a545823baf8744fd02f87d0", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 71, "deletions": 24, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebc54a8c472e19d81e23ee4094f619e0437e673/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebc54a8c472e19d81e23ee4094f619e0437e673/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=9ebc54a8c472e19d81e23ee4094f619e0437e673", "patch": "@@ -1594,48 +1594,95 @@ package body Exp_Ch5 is\n       Rev    : Boolean) return Node_Id\n    is\n \n+      function Volatile_Or_Independent\n+        (Exp : Node_Id; Typ : Entity_Id) return Boolean;\n+      --  Exp is an expression of type Typ, or if there is no expression\n+      --  involved, Exp is Empty. True if there are any volatile or independent\n+      --  objects that should disable the optimization. We check the object\n+      --  itself, all subcomponents, and if Exp is a slice of a component or\n+      --  slice, we check the prefix and its type.\n+      --\n+      --  We disable the optimization when there are relevant volatile or\n+      --  independent objects, because Copy_Bitfield can read and write bits\n+      --  that are not part of the objects being copied.\n+\n+      -----------------------------\n+      -- Volatile_Or_Independent --\n+      -----------------------------\n+\n+      function Volatile_Or_Independent\n+        (Exp : Node_Id; Typ : Entity_Id) return Boolean\n+      is\n+      begin\n+         --  Initially, Exp is the left- or right-hand side. In recursive\n+         --  calls, Exp is Empty if we're just checking a component type, and\n+         --  Exp is the prefix if we're checking the prefix of a slice.\n+\n+         if Present (Exp)\n+           and then (Is_Volatile_Object_Ref (Exp)\n+                       or else Is_Independent_Object (Exp))\n+         then\n+            return True;\n+         end if;\n+\n+         if Has_Volatile_Components (Typ)\n+           or else Has_Independent_Components (Typ)\n+         then\n+            return True;\n+         end if;\n+\n+         if Is_Array_Type (Typ) then\n+            return Volatile_Or_Independent (Empty, Component_Type (Typ));\n+         elsif Is_Record_Type (Typ) then\n+            declare\n+               Comp : Entity_Id := First_Component (Typ);\n+            begin\n+               while Present (Comp) loop\n+                  if Volatile_Or_Independent (Empty, Comp) then\n+                     return True;\n+                  end if;\n+\n+                  Next_Component (Comp);\n+               end loop;\n+            end;\n+         end if;\n+\n+         if Nkind (Exp) = N_Slice\n+           and then Nkind (Prefix (Exp)) in\n+                      N_Selected_Component | N_Indexed_Component | N_Slice\n+         then\n+            if Volatile_Or_Independent (Prefix (Exp), Etype (Prefix (Exp)))\n+            then\n+               return True;\n+            end if;\n+         end if;\n+\n+         return False;\n+      end Volatile_Or_Independent;\n+\n       L : constant Node_Id := Name (N);\n       R : constant Node_Id := Expression (N);\n       --  Left- and right-hand sides of the assignment statement\n \n       Slices : constant Boolean :=\n         Nkind (L) = N_Slice or else Nkind (R) = N_Slice;\n-      L_Prefix_Comp : constant Boolean :=\n-        --  True if the left-hand side is a slice of a component or slice\n-        Nkind (L) = N_Slice\n-          and then Nkind (Prefix (L)) in\n-                     N_Selected_Component | N_Indexed_Component | N_Slice;\n-      R_Prefix_Comp : constant Boolean :=\n-        --  Likewise for the right-hand side\n-        Nkind (R) = N_Slice\n-          and then Nkind (Prefix (R)) in\n-                     N_Selected_Component | N_Indexed_Component | N_Slice;\n+\n+   --  Start of processing for Expand_Assign_Array_Loop_Or_Bitfield\n \n    begin\n       --  Determine whether Copy_Bitfield or Fast_Copy_Bitfield is appropriate\n       --  (will work, and will be more efficient than component-by-component\n       --  copy). Copy_Bitfield doesn't work for reversed storage orders. It is\n-      --  efficient for slices of bit-packed arrays. Copy_Bitfield can read and\n-      --  write bits that are not part of the objects being copied, so we don't\n-      --  want to use it if there are volatile or independent components. If\n-      --  the Prefix of the slice is a component or slice, then it might be a\n-      --  part of an object with some other volatile or independent components,\n-      --  so we disable the optimization in that case as well. We could\n-      --  complicate this code by actually looking for such volatile and\n-      --  independent components.\n+      --  efficient for slices of bit-packed arrays.\n \n       if Is_Bit_Packed_Array (L_Type)\n         and then Is_Bit_Packed_Array (R_Type)\n         and then not Reverse_Storage_Order (L_Type)\n         and then not Reverse_Storage_Order (R_Type)\n         and then Ndim = 1\n         and then Slices\n-        and then not Has_Volatile_Component (L_Type)\n-        and then not Has_Volatile_Component (R_Type)\n-        and then not Has_Independent_Components (L_Type)\n-        and then not Has_Independent_Components (R_Type)\n-        and then not L_Prefix_Comp\n-        and then not R_Prefix_Comp\n+        and then not Volatile_Or_Independent (L, L_Type)\n+        and then not Volatile_Or_Independent (R, R_Type)\n       then\n          --  Here if Copy_Bitfield can work (except for the Rev test below).\n          --  Determine whether to call Fast_Copy_Bitfield instead. If we"}]}