{"sha": "88c6f1018217155e6a92734074450505703a827b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjNmYxMDE4MjE3MTU1ZTZhOTI3MzQwNzQ0NTA1MDU3MDNhODI3Yg==", "commit": {"author": {"name": "Hui-May Chang", "email": "hm.chang@apple.com", "date": "2007-02-02T18:19:13Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-02-02T18:19:13Z"}, "message": "revert: i386.c (ix86_function_arg_regno_p): Put back the code before the following patch under TARGET_MACHO.\n\n2007-02-02  Hui-May Chang  <hm.chang@apple.com>\n\n\tRevert for x86 darwin:\n\t2005-06-19  Uros Bizjak  <uros@kss-loka.si>\n\n\t* config/i386/i386.c (ix86_function_arg_regno_p): Put back the\n\tcode before the following patch under TARGET_MACHO.\n\t(ix86_function_value_regno_p): Likewise.\n\nFrom-SVN: r121515", "tree": {"sha": "b294125bb2d07e528e2e4dfb9f39ff8f9f449f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b294125bb2d07e528e2e4dfb9f39ff8f9f449f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88c6f1018217155e6a92734074450505703a827b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c6f1018217155e6a92734074450505703a827b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c6f1018217155e6a92734074450505703a827b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c6f1018217155e6a92734074450505703a827b/comments", "author": null, "committer": null, "parents": [{"sha": "b4f7c767a02062e8eada837df7c306bb35c7a7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f7c767a02062e8eada837df7c306bb35c7a7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f7c767a02062e8eada837df7c306bb35c7a7a4"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "3a5bae7d70b2dbee90ddddf592a3e6afe468140a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c6f1018217155e6a92734074450505703a827b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c6f1018217155e6a92734074450505703a827b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88c6f1018217155e6a92734074450505703a827b", "patch": "@@ -1,3 +1,12 @@\n+2007-02-02  Hui-May Chang  <hm.chang@apple.com>\n+\n+\tRevert for x86 darwin:\n+\t2005-06-19  Uros Bizjak  <uros@kss-loka.si>\n+\t\n+\t* config/i386/i386.c (ix86_function_arg_regno_p): Put back the\n+\tcode before the following patch under TARGET_MACHO.\n+\t(ix86_function_value_regno_p): Likewise.\n+\n 2007-02-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fold-const.c (negate_expr_p, fold_negate_expr): Handle"}, {"sha": "e652d7ef341ac1c53098635902d7f06cc82e8333", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c6f1018217155e6a92734074450505703a827b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c6f1018217155e6a92734074450505703a827b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88c6f1018217155e6a92734074450505703a827b", "patch": "@@ -2902,15 +2902,29 @@ ix86_function_arg_regno_p (int regno)\n {\n   int i;\n   if (!TARGET_64BIT)\n-    return (regno < REGPARM_MAX\n-\t    || (TARGET_MMX && MMX_REGNO_P (regno)\n-\t\t&& (regno < FIRST_MMX_REG + MMX_REGPARM_MAX))\n-\t    || (TARGET_SSE && SSE_REGNO_P (regno)\n-\t\t&& (regno < FIRST_SSE_REG + SSE_REGPARM_MAX)));\n-\n-  if (TARGET_SSE && SSE_REGNO_P (regno)\n-      && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX))\n-    return true;\n+    {\n+      if (TARGET_MACHO)\n+        return (regno < REGPARM_MAX\n+                || (TARGET_SSE && SSE_REGNO_P (regno) && !fixed_regs[regno]));\n+      else\n+        return (regno < REGPARM_MAX\n+\t        || (TARGET_MMX && MMX_REGNO_P (regno)\n+\t  \t    && (regno < FIRST_MMX_REG + MMX_REGPARM_MAX))\n+\t        || (TARGET_SSE && SSE_REGNO_P (regno)\n+\t\t    && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX)));\n+    }\n+\n+  if (TARGET_MACHO)\n+    {\n+      if (SSE_REGNO_P (regno) && TARGET_SSE)\n+        return true;\n+    }\n+  else\n+    {\n+      if (TARGET_SSE && SSE_REGNO_P (regno)\n+          && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX))\n+        return true;\n+    }\n   /* RAX is used as hidden argument to va_arg functions.  */\n   if (!regno)\n     return true;\n@@ -4014,16 +4028,31 @@ ix86_function_arg_boundary (enum machine_mode mode, tree type)\n bool\n ix86_function_value_regno_p (int regno)\n {\n-  if (regno == 0\n-      || (regno == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n-      || (regno == FIRST_SSE_REG && TARGET_SSE))\n-    return true;\n+  if (TARGET_MACHO)\n+    {\n+      if (!TARGET_64BIT)\n+        {\n+          return ((regno) == 0\n+                  || ((regno) == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n+                  || ((regno) == FIRST_SSE_REG && TARGET_SSE));\n+        }\n+      return ((regno) == 0 || (regno) == FIRST_FLOAT_REG\n+              || ((regno) == FIRST_SSE_REG && TARGET_SSE)\n+              || ((regno) == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387));\n+      }\n+  else\n+    {\n+      if (regno == 0\n+          || (regno == FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387)\n+          || (regno == FIRST_SSE_REG && TARGET_SSE))\n+        return true;\n \n-  if (!TARGET_64BIT\n-      && (regno == FIRST_MMX_REG && TARGET_MMX))\n-\treturn true;\n+      if (!TARGET_64BIT\n+          && (regno == FIRST_MMX_REG && TARGET_MMX))\n+\t    return true;\n \n-  return false;\n+      return false;\n+    }\n }\n \n /* Define how to find the value returned by a function."}]}