{"sha": "9bc2c2347d5d782c7362efe180ab002759e296c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjMmMyMzQ3ZDVkNzgyYzczNjJlZmUxODBhYjAwMjc1OWUyOTZjOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-03T09:28:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-03T10:54:12Z"}, "message": "fix scalar BB vectorization costing\n\nWe were costing the scalar pattern stmts rather than the scalar\noriginal stmt and also not appropriately looking at the pattern\nstmt for whether the stmt is vectorized.\n\n2020-07-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Cost the\n\toriginal non-pattern stmts, look at the pattern stmt\n\tvectorization status.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-slp-2.c: New\n\ttestcase.", "tree": {"sha": "3263bf670ab56e7388d6e0e9a38838abd539b1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3263bf670ab56e7388d6e0e9a38838abd539b1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bc2c2347d5d782c7362efe180ab002759e296c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc2c2347d5d782c7362efe180ab002759e296c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc2c2347d5d782c7362efe180ab002759e296c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc2c2347d5d782c7362efe180ab002759e296c8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf628a97efaf11204ab02527b30ca71d7759ca37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf628a97efaf11204ab02527b30ca71d7759ca37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf628a97efaf11204ab02527b30ca71d7759ca37"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "1b7ac34ccaac7a0ab22d2cd54fe24181e40e13d0", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-slp-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc2c2347d5d782c7362efe180ab002759e296c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-slp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc2c2347d5d782c7362efe180ab002759e296c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-slp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-slp-2.c?ref=9bc2c2347d5d782c7362efe180ab002759e296c8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fdump-tree-slp-details\" } */\n+\n+int a[4], b[4];\n+void foo()\n+{\n+  a[0] = b[0] / 7;\n+  a[1] = b[1] / 7;\n+  a[2] = b[2] / 7;\n+  a[3] = b[3] / 7;\n+}\n+\n+/* We should cost the original division stmt, not the scalar pattern stmts.  */\n+/* { dg-final { scan-tree-dump-times \" / 7 1 times scalar_stmt costs\" 4 \"slp2\" } } */"}, {"sha": "33fc87a9f861d3e92c7f1c8ad5844ee782507ad9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bc2c2347d5d782c7362efe180ab002759e296c8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bc2c2347d5d782c7362efe180ab002759e296c8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9bc2c2347d5d782c7362efe180ab002759e296c8", "patch": "@@ -3039,7 +3039,6 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n-      gimple *stmt = stmt_info->stmt;\n       ssa_op_iter op_iter;\n       def_operand_p def_p;\n \n@@ -3051,15 +3050,18 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t required defs in the SLP children in the scalar cost.  This\n \t way we make the vectorization more costly when compared to\n \t the scalar cost.  */\n-      FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, op_iter, SSA_OP_DEF)\n+      stmt_vec_info orig_stmt_info = vect_orig_stmt (stmt_info);\n+      gimple *orig_stmt = orig_stmt_info->stmt;\n+      FOR_EACH_SSA_DEF_OPERAND (def_p, orig_stmt, op_iter, SSA_OP_DEF)\n \t{\n \t  imm_use_iterator use_iter;\n \t  gimple *use_stmt;\n \t  FOR_EACH_IMM_USE_STMT (use_stmt, use_iter, DEF_FROM_PTR (def_p))\n \t    if (!is_gimple_debug (use_stmt))\n \t      {\n \t\tstmt_vec_info use_stmt_info = vinfo->lookup_stmt (use_stmt);\n-\t\tif (!use_stmt_info || !PURE_SLP_STMT (use_stmt_info))\n+\t\tif (!use_stmt_info\n+\t\t    || !PURE_SLP_STMT (vect_stmt_to_vectorize (use_stmt_info)))\n \t\t  {\n \t\t    (*life)[i] = true;\n \t\t    BREAK_FROM_IMM_USE_STMT (use_iter);\n@@ -3070,23 +3072,23 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \tcontinue;\n \n       /* Count scalar stmts only once.  */\n-      if (gimple_visited_p (stmt))\n+      if (gimple_visited_p (orig_stmt))\n \tcontinue;\n-      gimple_set_visited (stmt, true);\n+      gimple_set_visited (orig_stmt, true);\n \n       vect_cost_for_stmt kind;\n-      if (STMT_VINFO_DATA_REF (stmt_info))\n-        {\n-          if (DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)))\n+      if (STMT_VINFO_DATA_REF (orig_stmt_info))\n+\t{\n+\t  if (DR_IS_READ (STMT_VINFO_DATA_REF (orig_stmt_info)))\n \t    kind = scalar_load;\n-          else\n+\t  else\n \t    kind = scalar_store;\n-        }\n-      else if (vect_nop_conversion_p (stmt_info))\n+\t}\n+      else if (vect_nop_conversion_p (orig_stmt_info))\n \tcontinue;\n       else\n \tkind = scalar_stmt;\n-      record_stmt_cost (cost_vec, 1, kind, stmt_info, 0, vect_body);\n+      record_stmt_cost (cost_vec, 1, kind, orig_stmt_info, 0, vect_body);\n     }\n \n   auto_vec<bool, 20> subtree_life;"}]}