{"sha": "8103623923ac4ea19b97a369979d4bd5731aab57", "node_id": "C_kwDOANBUbNoAKDgxMDM2MjM5MjNhYzRlYTE5Yjk3YTM2OTk3OWQ0YmQ1NzMxYWFiNTc", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-02-07T03:29:32Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-02-07T03:29:32Z"}, "message": "rs6000: Disable MMA if no VSX support [PR103627]\n\nAs PR103627 shows, there is an unexpected case where !TARGET_VSX\nand TARGET_MMA co-exist.  As ISA3.1 claims, SIMD is a requirement\nfor MMA.  By looking into the ICE, I noticed that the current\nMMA implementation depends on vector pairs load/store which use\nVSX register, but we don't have a separated option to control\nPower10 vector support and Segher pointed out \"-mpower9-vector is\na workaround that should go away\" and more explanations in [1].\nSo this patch makes MMA require VSX instead.\n\n[1] https://gcc.gnu.org/pipermail/gcc-patches/2022-January/589303.html\n\ngcc/ChangeLog:\n\n\tPR target/103627\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Disable\n\tMMA if !TARGET_VSX.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103627\n\t* gcc.target/powerpc/pr103627-1.c: New test.\n\t* gcc.target/powerpc/pr103627-2.c: New test.", "tree": {"sha": "3584269aa672ec7161d770c99853d2b7eb6e0449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3584269aa672ec7161d770c99853d2b7eb6e0449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8103623923ac4ea19b97a369979d4bd5731aab57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8103623923ac4ea19b97a369979d4bd5731aab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8103623923ac4ea19b97a369979d4bd5731aab57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8103623923ac4ea19b97a369979d4bd5731aab57/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353f8fcc2e6ce8997ddfdc55451f0f0e9450f981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353f8fcc2e6ce8997ddfdc55451f0f0e9450f981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353f8fcc2e6ce8997ddfdc55451f0f0e9450f981"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "a2843d1caefb2bca9abb54b536241b1327a46792", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=8103623923ac4ea19b97a369979d4bd5731aab57", "patch": "@@ -4482,6 +4482,16 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_MMA;\n     }\n \n+  /* MMA requires SIMD support as ISA 3.1 claims and our implementation\n+     such as \"*movoo\" uses vector pair access which use VSX registers.\n+     So make MMA require VSX support here.  */\n+  if (TARGET_MMA && !TARGET_VSX)\n+    {\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_MMA) != 0)\n+\terror (\"%qs requires %qs\", \"-mmma\", \"-mvsx\");\n+      rs6000_isa_flags &= ~OPTION_MASK_MMA;\n+    }\n+\n   if (!TARGET_PCREL && TARGET_PCREL_OPT)\n     rs6000_isa_flags &= ~OPTION_MASK_PCREL_OPT;\n "}, {"sha": "5cecf515e58deca60597bcf086d68fe7998ba007", "filename": "gcc/testsuite/gcc.target/powerpc/pr103627-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-1.c?ref=8103623923ac4ea19b97a369979d4bd5731aab57", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -mno-vsx\" } */\n+\n+/* Verify compiler emits error message instead of ICE.  */\n+\n+extern float *dest;\n+extern __vector_quad src;\n+\n+int\n+foo ()\n+{\n+  __builtin_mma_disassemble_acc (dest, &src);\n+  /* { dg-error \"'__builtin_mma_disassemble_acc' requires the '-mmma' option\" \"\" { target *-*-* } .-1 } */\n+  return 0;\n+}\n+"}, {"sha": "89ae4f607bf4d501246509c5552193cc84d6bb5c", "filename": "gcc/testsuite/gcc.target/powerpc/pr103627-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8103623923ac4ea19b97a369979d4bd5731aab57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103627-2.c?ref=8103623923ac4ea19b97a369979d4bd5731aab57", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -mmma -mno-vsx\" } */\n+\n+/* Verify the emitted error message.  */\n+\n+extern float *dest;\n+extern __vector_quad src;\n+\n+int\n+foo ()\n+{\n+  __builtin_mma_disassemble_acc (dest, &src);\n+  /* { dg-error \"'-mmma' requires '-mvsx'\" \"mma\" { target *-*-* } 0 } */\n+  return 0;\n+}\n+"}]}