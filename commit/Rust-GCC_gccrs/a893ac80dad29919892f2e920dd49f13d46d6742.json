{"sha": "a893ac80dad29919892f2e920dd49f13d46d6742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5M2FjODBkYWQyOTkxOTg5MmYyZTkyMGRkNDlmMTNkNDZkNjc0Mg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-12-12T22:54:09Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-12-12T22:54:09Z"}, "message": "re PR target/24779 (Python miscompilation - TOC reload)\n\n2008-12-12  Andrew Pinski  <andrew_pinskia@playstation.sony.com>\n            Peter Bergner <bergner@vnet.ibm.com>\n\n        PR target/24779\n        * config/rs6000/rs6000.md (call_indirect_aix32): Move the load of the\n        TOC into the call pattern.\n        (call_indirect_aix64): Likewise.\n        (call_value_indirect_aix32): Likewise.\n        (call_value_indirect_aix64): Likewise.\n        (call_indirect_nonlocal_aix32_internal): New insn and split patterns\n        to split off the load of the TOC.\n        (call_indirect_nonlocal_aix32): Enable only after reload.\n        (call_indirect_nonlocal_aix64_internal): New insn and split patterns\n        to split off the load of the TOC.\n        (call_indirect_nonlocal_aix64): Enable only after reload.\n        (call_value_indirect_nonlocal_aix32_internal): New insn and split\n        patterns to split off the load of the TOC.\n        (call_value_indirect_nonlocal_aix32): Enable only after reload.\n        (call_value_indirect_nonlocal_aix64_internal): New insn and split\n        patterns to split off the load of the TOC.\n        (call_value_indirect_nonlocal_aix64): Enable only after reload.\n\n\n\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r142727", "tree": {"sha": "2dafe3376a9eed9d89265d0ab6b050156a96b362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dafe3376a9eed9d89265d0ab6b050156a96b362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a893ac80dad29919892f2e920dd49f13d46d6742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a893ac80dad29919892f2e920dd49f13d46d6742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a893ac80dad29919892f2e920dd49f13d46d6742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a893ac80dad29919892f2e920dd49f13d46d6742/comments", "author": null, "committer": null, "parents": [{"sha": "9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5"}], "stats": {"total": 159, "additions": 131, "deletions": 28}, "files": [{"sha": "f25094f8a121a97b4ea87cbd101c35c5cd8898ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a893ac80dad29919892f2e920dd49f13d46d6742/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a893ac80dad29919892f2e920dd49f13d46d6742/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a893ac80dad29919892f2e920dd49f13d46d6742", "patch": "@@ -1,3 +1,25 @@\n+2008-12-12  Andrew Pinski  <andrew_pinskia@playstation.sony.com>\n+            Peter Bergner <bergner@vnet.ibm.com>\n+\n+\tPR target/24779\n+\t* config/rs6000/rs6000.md (call_indirect_aix32): Move the load of the\n+\tTOC into the call pattern.\n+\t(call_indirect_aix64): Likewise.\n+\t(call_value_indirect_aix32): Likewise.\n+\t(call_value_indirect_aix64): Likewise.\n+\t(call_indirect_nonlocal_aix32_internal): New insn and split patterns\n+\tto split off the load of the TOC.\n+\t(call_indirect_nonlocal_aix32): Enable only after reload.\n+\t(call_indirect_nonlocal_aix64_internal): New insn and split patterns\n+\tto split off the load of the TOC.\n+\t(call_indirect_nonlocal_aix64): Enable only after reload.\n+\t(call_value_indirect_nonlocal_aix32_internal): New insn and split\n+\tpatterns to split off the load of the TOC.\n+\t(call_value_indirect_nonlocal_aix32): Enable only after reload.\n+\t(call_value_indirect_nonlocal_aix64_internal): New insn and split\n+\tpatterns to split off the load of the TOC.\n+\t(call_value_indirect_nonlocal_aix64): Enable only after reload.\n+\n 2008-12-12  Andreas Schwab  <schwab@suse.de>\n \n \tRevert:"}, {"sha": "7a6c0369065a01e9c07ddb393834342de3f31a0f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 109, "deletions": 28, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a893ac80dad29919892f2e920dd49f13d46d6742/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a893ac80dad29919892f2e920dd49f13d46d6742/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a893ac80dad29919892f2e920dd49f13d46d6742", "patch": "@@ -10798,18 +10798,14 @@\n \t(mem:SI (match_operand:SI 0 \"gpc_reg_operand\" \"\")))\n    (set (mem:SI (plus:SI (reg:SI 1) (const_int 20)))\n \t(reg:SI 2))\n-   (set (reg:SI 2)\n-\t(mem:SI (plus:SI (match_dup 0)\n-\t\t\t (const_int 4))))\n    (set (reg:SI 11)\n \t(mem:SI (plus:SI (match_dup 0)\n \t\t\t (const_int 8))))\n    (parallel [(call (mem:SI (match_dup 2))\n \t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (reg:SI 2))\n+\t      (use (mem:SI (plus:SI (match_dup 0) (const_int 4))))\n \t      (use (reg:SI 11))\n-\t      (set (reg:SI 2)\n-\t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+\t      (use (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"TARGET_32BIT\"\n   \"\n@@ -10820,18 +10816,14 @@\n \t(mem:DI (match_operand:DI 0 \"gpc_reg_operand\" \"\")))\n    (set (mem:DI (plus:DI (reg:DI 1) (const_int 40)))\n \t(reg:DI 2))\n-   (set (reg:DI 2)\n-\t(mem:DI (plus:DI (match_dup 0)\n-\t\t\t (const_int 8))))\n    (set (reg:DI 11)\n \t(mem:DI (plus:DI (match_dup 0)\n \t\t\t (const_int 16))))\n    (parallel [(call (mem:SI (match_dup 2))\n \t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (reg:DI 2))\n+\t      (use (mem:DI (plus:DI (match_dup 0) (const_int 8))))\n \t      (use (reg:DI 11))\n-\t      (set (reg:DI 2)\n-\t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+\t      (use (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"TARGET_64BIT\"\n   \"\n@@ -10842,19 +10834,15 @@\n \t(mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n    (set (mem:SI (plus:SI (reg:SI 1) (const_int 20)))\n \t(reg:SI 2))\n-   (set (reg:SI 2)\n-\t(mem:SI (plus:SI (match_dup 1)\n-\t\t\t (const_int 4))))\n    (set (reg:SI 11)\n \t(mem:SI (plus:SI (match_dup 1)\n \t\t\t (const_int 8))))\n    (parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (match_dup 3))\n \t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (reg:SI 2))\n+\t      (use (mem:SI (plus:SI (match_dup 1) (const_int 4))))\n \t      (use (reg:SI 11))\n-\t      (set (reg:SI 2)\n-\t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+\t      (use (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"TARGET_32BIT\"\n   \"\n@@ -10865,19 +10853,15 @@\n \t(mem:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n    (set (mem:DI (plus:DI (reg:DI 1) (const_int 40)))\n \t(reg:DI 2))\n-   (set (reg:DI 2)\n-\t(mem:DI (plus:DI (match_dup 1)\n-\t\t\t (const_int 8))))\n    (set (reg:DI 11)\n \t(mem:DI (plus:DI (match_dup 1)\n \t\t\t (const_int 16))))\n    (parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:SI (match_dup 3))\n \t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (reg:DI 2))\n+\t      (use (mem:DI (plus:DI (match_dup 1) (const_int 8))))\n \t      (use (reg:DI 11))\n-\t      (set (reg:DI 2)\n-\t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+\t      (use (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"TARGET_64BIT\"\n   \"\n@@ -11079,6 +11063,29 @@\n ;; variable argument function.  It is > 0 if FP registers were passed\n ;; and < 0 if they were not.\n \n+(define_insn_and_split \"*call_indirect_nonlocal_aix32_internal\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"c,*l\"))\n+\t\t (match_operand 1 \"\" \"g,g\"))\n+   (use (mem:SI (plus:SI (match_operand:SI 2 \"register_operand\" \"b,b\") (const_int 4))))\n+   (use (reg:SI 11))\n+   (use (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:SI 2)\n+\t(mem:SI (plus:SI (match_dup 2) (const_int 4))))\n+   (parallel [(call (mem:SI (match_dup 0))\n+\t\t    (match_dup 1))\n+\t      (use (reg:SI 2))\n+\t      (use (reg:SI 11))\n+\t      (set (reg:SI 2)\n+\t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"*call_indirect_nonlocal_aix32\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"c,*l\"))\n \t (match_operand 1 \"\" \"g,g\"))\n@@ -11087,7 +11094,7 @@\n    (set (reg:SI 2)\n \t(mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n    (clobber (reg:SI LR_REGNO))]\n-  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX && reload_completed\"\n   \"b%T0l\\;{l|lwz} 2,20(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n@@ -11103,6 +11110,30 @@\n   \"bl %z0\\;%.\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n+   \n+(define_insn_and_split \"*call_indirect_nonlocal_aix64_internal\"\n+  [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"c,*l\"))\n+\t\t (match_operand 1 \"\" \"g,g\"))\n+   (use (mem:DI (plus:DI (match_operand:DI 2 \"register_operand\" \"b,b\")\n+\t\t\t (const_int 8))))\n+   (use (reg:DI 11))\n+   (use (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:DI 2)\n+\t(mem:DI (plus:DI (match_dup 2) (const_int 8))))\n+   (parallel [(call (mem:SI (match_dup 0))\n+\t\t    (match_dup 1))\n+\t      (use (reg:DI 2))\n+\t      (use (reg:DI 11))\n+\t      (set (reg:DI 2)\n+\t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"*call_indirect_nonlocal_aix64\"\n   [(call (mem:SI (match_operand:DI 0 \"register_operand\" \"c,*l\"))\n@@ -11112,7 +11143,7 @@\n    (set (reg:DI 2)\n \t(mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n    (clobber (reg:SI LR_REGNO))]\n-  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX && reload_completed\"\n   \"b%T0l\\;ld 2,40(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n@@ -11129,6 +11160,31 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn_and_split \"*call_value_indirect_nonlocal_aix32_internal\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"c,*l\"))\n+\t\t      (match_operand 2 \"\" \"g,g\")))\n+\t(use (mem:SI (plus:SI (match_operand:SI 3 \"register_operand\" \"b,b\")\n+\t\t\t      (const_int 4))))\n+\t(use (reg:SI 11))\n+\t(use (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+\t(clobber (reg:SI LR_REGNO))]\n+  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:SI 2)\n+\t(mem:SI (plus:SI (match_dup 3) (const_int 4))))\n+   (parallel [(set (match_dup 0) (call (mem:SI (match_dup 1))\n+\t\t\t\t       (match_dup 2)))\n+\t      (use (reg:SI 2))\n+\t      (use (reg:SI 11))\n+\t      (set (reg:SI 2)\n+\t\t   (mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"*call_value_indirect_nonlocal_aix32\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"c,*l\"))\n@@ -11138,7 +11194,7 @@\n    (set (reg:SI 2)\n \t(mem:SI (plus:SI (reg:SI 1) (const_int 20))))\n    (clobber (reg:SI LR_REGNO))]\n-  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"TARGET_32BIT && DEFAULT_ABI == ABI_AIX && reload_completed\"\n   \"b%T1l\\;{l|lwz} 2,20(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n@@ -11156,6 +11212,31 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn_and_split \"*call_value_indirect_nonlocal_aix64_internal\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"c,*l\"))\n+\t\t      (match_operand 2 \"\" \"g,g\")))\n+\t(use (mem:DI (plus:DI (match_operand:DI 3 \"register_operand\" \"b,b\")\n+\t\t\t      (const_int 8))))\n+\t(use (reg:DI 11))\n+\t(use (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+\t(clobber (reg:SI LR_REGNO))]\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:DI 2)\n+\t(mem:DI (plus:DI (match_dup 3) (const_int 8))))\n+   (parallel [(set (match_dup 0) (call (mem:SI (match_dup 1))\n+\t\t\t\t       (match_dup 2)))\n+\t      (use (reg:DI 2))\n+\t      (use (reg:DI 11))\n+\t      (set (reg:DI 2)\n+\t\t   (mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+  \"\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"*call_value_indirect_nonlocal_aix64\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:DI 1 \"register_operand\" \"c,*l\"))\n@@ -11165,7 +11246,7 @@\n    (set (reg:DI 2)\n \t(mem:DI (plus:DI (reg:DI 1) (const_int 40))))\n    (clobber (reg:SI LR_REGNO))]\n-  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX\"\n+  \"TARGET_64BIT && DEFAULT_ABI == ABI_AIX && reload_completed\"\n   \"b%T1l\\;ld 2,40(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])"}]}