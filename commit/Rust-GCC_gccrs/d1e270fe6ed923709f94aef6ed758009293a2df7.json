{"sha": "d1e270fe6ed923709f94aef6ed758009293a2df7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlMjcwZmU2ZWQ5MjM3MDlmOTRhZWY2ZWQ3NTgwMDkyOTNhMmRmNw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-05-24T22:18:43Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-05-24T22:18:43Z"}, "message": "bitfield-[1-5].mm: New.\n\n        * obj-c++.dg/bitfield-[1-5].mm: New.\n        * obj-c++.dg/class-protocol-1.mm: New.\n        * obj-c++.dg/comp-types-1[0-1].mm: New.\n        * obj-c++.dg/comp-types-[2-9].mm: New.\n        * obj-c++.dg/encode-[4-8].mm: New.\n        * obj-c++.dg/layout-1.mm: New.\n        * obj-c++.dg/method-1[0-9].mm: New.\n        * obj-c++.dg/method-2[0-1].mm: New.\n        * obj-c++.dg/method-[8-9].mm: New.\n        * obj-c++.dg/objc-gc-3.mm: New.\n        * obj-c++.dg/try-catch-10.mm: New.\n        * objc.dg/bitfield-5.m: New.\n        * objc.dg/comp-types-10.m: New.\n        * objc.dg/comp-types-9.m: New.\n        * objc.dg/layout-1.m: New.\n        * objc.dg/objc-gc-4.m: New.\n        * objc.dg/try-catch-9.m: New.\n        * objc.dg/class-protocol-1.m: Tweak diagnostics.\n        * objc.dg/comp-types-1.m: Likewise.\n        * objc.dg/comp-types-[5-6].m: Likewise.\n        * objc.dg/method-9.m: Likewise.\n\nFrom-SVN: r100121", "tree": {"sha": "873a8e69cb460b5a1ef680bc2aed0ef6291fcb5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/873a8e69cb460b5a1ef680bc2aed0ef6291fcb5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1e270fe6ed923709f94aef6ed758009293a2df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e270fe6ed923709f94aef6ed758009293a2df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e270fe6ed923709f94aef6ed758009293a2df7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e270fe6ed923709f94aef6ed758009293a2df7/comments", "author": null, "committer": null, "parents": [{"sha": "37e0a9e8902bb91b969591d6f5edcc69a7881a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e0a9e8902bb91b969591d6f5edcc69a7881a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e0a9e8902bb91b969591d6f5edcc69a7881a01"}], "stats": {"total": 2477, "additions": 2448, "deletions": 29}, "files": [{"sha": "e46a7710262fb0a4f424f43e62893cafc30c9854", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -1,3 +1,27 @@\n+2005-05-24  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/bitfield-[1-5].mm: New.\n+\t* obj-c++.dg/class-protocol-1.mm: New.\n+\t* obj-c++.dg/comp-types-1[0-1].mm: New.\n+\t* obj-c++.dg/comp-types-[2-9].mm: New.\n+\t* obj-c++.dg/encode-[4-8].mm: New.\n+\t* obj-c++.dg/layout-1.mm: New.\n+\t* obj-c++.dg/method-1[0-9].mm: New.\n+\t* obj-c++.dg/method-2[0-1].mm: New.\n+\t* obj-c++.dg/method-[8-9].mm: New.\n+\t* obj-c++.dg/objc-gc-3.mm: New.\n+\t* obj-c++.dg/try-catch-10.mm: New.\n+\t* objc.dg/bitfield-5.m: New.\n+\t* objc.dg/comp-types-10.m: New.\n+\t* objc.dg/comp-types-9.m: New.\n+\t* objc.dg/layout-1.m: New.\n+\t* objc.dg/objc-gc-4.m: New.\n+\t* objc.dg/try-catch-9.m: New.\n+\t* objc.dg/class-protocol-1.m: Tweak diagnostics.\n+\t* objc.dg/comp-types-1.m: Likewise.\n+\t* objc.dg/comp-types-[5-6].m: Likewise.\n+\t* objc.dg/method-9.m: Likewise.\n+\n 2005-05-24  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/altivec-vec-merge.c: Make test usable on GNU/Linux targets"}, {"sha": "c7920251d0622c1992f5a4c55bef322b07052490", "filename": "gcc/testsuite/obj-c++.dg/bitfield-1.mm", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-1.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,113 @@\n+/* Check if ObjC class layout follows the ABI (informally)\n+   set in the past.  ObjC structs must be laid out as if\n+   all ivars, including those inherited from superclasses,\n+   were defined at once (i.e., any padding introduced for\n+   superclasses should be removed).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-Wpadded -Wabi\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum { zero, one, two, three, four };\n+\n+@interface Base: Object {\n+@public\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+struct Base_0 { /* { dg-warning \"padding struct size to alignment boundary\" } */\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+};\n+\n+@interface Derived: Base {\n+@public\n+  signed e: 5;\n+  unsigned f: 4;\n+  enum Enum g: 3;\n+}\n+@end\n+\n+struct Derived_0 {\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+  signed e: 5;\n+  int f: 4;\n+  enum Enum g: 3;\n+};\n+\n+@interface Leaf: Derived {\n+@public\n+  signed h: 2;\n+}\n+@end\n+\n+struct Leaf_0 {\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+  signed e: 5;\n+  unsigned f: 4;\n+  enum Enum g: 3;\n+  signed h: 2;\n+};\n+  \n+/* Note that the semicolon after @defs(...) is optional.  */\n+\n+typedef struct { @defs(Base) } Base_t; /* { dg-warning \"padding struct size to alignment boundary\" } */\n+typedef struct { @defs(Derived); } Derived_t;\n+typedef struct { @defs(Leaf); } Leaf_t;\n+\n+int main(void)\n+{\n+  struct Leaf_0 l_0;\n+  Leaf *l = (Leaf *)&l_0;\n+  Leaf_t *l_t = (Leaf_t *)&l_0;\n+\n+  CHECK_IF(sizeof(Base_t) == sizeof(Base));\n+  CHECK_IF(sizeof(Derived_t) == sizeof(Derived));\n+  CHECK_IF(sizeof(Leaf_t) == sizeof(Leaf));\n+\n+  CHECK_IF(sizeof(struct Base_0) == sizeof(Base));\n+  CHECK_IF(sizeof(struct Derived_0) == sizeof(Derived));\n+  CHECK_IF(sizeof(struct Leaf_0) == sizeof(Leaf));\n+\n+  l_0.isa = (Class)0;\n+  l_0.a = 3;\n+  l_0.b = 0;\n+  l_0.c = three;\n+  l_0.d = 31;\n+  l_0.e = 0;\n+  l_0.f = 15;\n+  l_0.g = zero;\n+  l_0.h = -2;\n+\n+  CHECK_IF(!l_t->isa);\n+  CHECK_IF(l->a == 3 && l_t->a == 3);\n+  CHECK_IF(!l->b && !l_t->b);\n+  CHECK_IF(l->c == three && l_t->c == three);\n+  CHECK_IF(l->d == 31 && l_t->d == 31);\n+  CHECK_IF(!l->e && !l_t->e);\n+  CHECK_IF(l->f == 15 && l_t->f == 15);\n+  CHECK_IF(l->g == zero && l_t->g == zero);\n+  CHECK_IF(l->h == -2 && l_t->h == -2);\n+  \n+  return 0;\n+}"}, {"sha": "7f778b5a4d95c7d2641c597ca27ca27dc03d9d37", "filename": "gcc/testsuite/obj-c++.dg/bitfield-2.mm", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-2.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,78 @@\n+/* Check if bitfield ivars are inherited correctly (i.e., without\n+   being \"promoted\" to ints).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object \n+{\n+    int full;\n+    int full2: 32;\n+    int _refs: 8;\n+    int field2: 3;\n+    unsigned f3: 8;\n+    short cc;\n+    unsigned g: 16;\n+    int r2: 8;\n+    int r3: 8;\n+    int r4: 2;\n+    int r5: 8;\n+    char c;\n+}\n+- (void)setValues;\n+@end\n+\n+@interface Derived: Base\n+{\n+    char d;\n+    int _field3: 6;\n+}\n+- (void)checkValues;\n+@end\n+\n+@implementation Base\n+-(void)setValues {\n+  full = 1;\n+  full2 = 2;\n+  _refs = 3;\n+  field2 = 1;\n+  f3 = 6;\n+  cc = 7;\n+  g = 8;\n+  r2 = 9;\n+  r3 = 10;\n+  r4 = 1;\n+  r5 = 12;\n+  c = 13;\n+}\n+@end\n+\n+@implementation Derived\n+-(void)checkValues {\n+  CHECK_IF(full == 1);\n+  CHECK_IF(full2 == 2);\n+  CHECK_IF(_refs == 3);\n+  CHECK_IF(field2 == 1);\n+  CHECK_IF(f3 == 6);\n+  CHECK_IF(cc == 7);\n+  CHECK_IF(g == 8);\n+  CHECK_IF(r2 == 9);\n+  CHECK_IF(r3 == 10);\n+  CHECK_IF(r4 == 1);\n+  CHECK_IF(r5 == 12);\n+  CHECK_IF(c == 13);\n+}\n+@end\n+\n+int main(void) {\n+  Derived *obj = [[Derived alloc] init];\n+\n+  [obj setValues];\n+  [obj checkValues];\n+\n+  return 0;\n+}"}, {"sha": "d607a3efc9d4077dee0939f925d3b1454702eb77", "filename": "gcc/testsuite/obj-c++.dg/bitfield-3.mm", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-3.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,57 @@\n+/* Check if bitfield ivars are correctly @encode'd when\n+   the NeXT runtime is used.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime -fsigned-char\" } */\n+/* { dg-do run { target *-*-darwin* } } */\n+\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+extern \"C\" {\n+  extern void abort(void);\n+  extern int strcmp(const char *, const char *);\n+}\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base \n+{\n+    struct objc_class *isa;\n+    int full;\n+    int full2: 32;\n+    int _refs: 8;\n+    int field2: 3;\n+    unsigned f3: 8;\n+    short cc;\n+    unsigned g: 16;\n+    int r2: 8;\n+    int r3: 8;\n+    int r4: 2;\n+    int r5: 8;\n+    char c;\n+}\n+@end\n+\n+@interface Derived: Base\n+{\n+    char d;\n+    int _field3: 6;\n+}\n+@end\n+\n+@implementation Base\n+@end\n+\n+@implementation Derived\n+@end\n+\n+int main(void) {\n+  const char *s1r = \"{Base=#ib32b8b3b8sb16b8b8b2b8c}\";\n+  const char *s1 = @encode(Base);\n+  const char *s2r = \"{Derived=#ib32b8b3b8sb16b8b8b2b8ccb6}\";\n+  const char *s2 = @encode(Derived);\n+\n+  CHECK_IF(!strcmp(s1r, s1));\n+  CHECK_IF(!strcmp(s2r, s2));\n+\n+  return 0;\n+}"}, {"sha": "4aa2a8b39dfb0bdd8ab8afc5addd07c634072d94", "filename": "gcc/testsuite/obj-c++.dg/bitfield-4.mm", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-4.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,51 @@\n+/* Check if the @defs() construct preserves the correct\n+   layout of bitfields.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc -Wpadded\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+extern \"C\" {\n+  extern void abort(void);\n+  extern int strcmp(const char *str1, const char *str2);\n+}\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum { one, two, three, four };\n+\n+@interface Base: Object {\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+@interface Derived: Base {\n+  signed e: 5;\n+  int f: 4;\n+  enum Enum g: 3;\n+}\n+@end\n+  \n+/* Note that the semicolon after @defs(...) is optional.  */\n+\n+typedef struct { @defs(Base) } Base_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+typedef struct { @defs(Derived); } Derived_t;\n+\n+int main(void)\n+{\n+  CHECK_IF(sizeof(Base_t) == sizeof(Base));\n+  CHECK_IF(sizeof(Derived_t) == sizeof(Derived));\n+\n+#ifdef __NEXT_RUNTIME__\n+  CHECK_IF(!strcmp(@encode(Base), \"{Base=#b2b3b4b5}\"));\n+  CHECK_IF(!strcmp(@encode(Derived), \"{Derived=#b2b3b4b5b5b4b3}\"));\n+\n+  CHECK_IF(!strcmp(@encode(Base_t), \"{?=#b2b3b4b5}\"));\n+  CHECK_IF(!strcmp(@encode(Derived_t), \"{?=#b2b3b4b5b5b4b3}\"));\n+#endif /* __NEXT_RUNTIME__ */\n+\n+  return 0;\n+}"}, {"sha": "b6716df8d97da6d936fb7656732a3364f002eeec", "filename": "gcc/testsuite/obj-c++.dg/bitfield-5.mm", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fbitfield-5.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,29 @@\n+\n+/* Make sure that bitfield types are printed correctly, and that ivar redeclaration\n+  (@interface vs. @implementation) checks take the bitfield width into account.  */\n+/* Author: Ziemowit Laski   <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+@interface Base {\n+  int i;\n+}\n+@end\n+\n+@interface WithBitfields: Base {\n+  void *isa;\n+  unsigned a: 3;\n+  signed b: 4;\n+  int c: 5;\n+}\n+@end\n+\n+@implementation WithBitfields {\n+  char *isa;  /* { dg-error \"conflicting instance variable type .char \\\\*isa.\" } */\n+  /* { dg-error \"previous declaration of .void \\\\*isa.\" \"\" { target *-*-* } 13 } */\n+  unsigned a: 5;  /* { dg-error \"conflicting instance variable type .unsigned( int)? a: 5.\" } */\n+  /* { dg-error \"previous declaration of .unsigned( int)? a: 3.\" \"\" { target *-*-* } 14 } */                     \n+  signed b: 4;  /* This one is fine. */\n+  int c: 3;  /* { dg-error \"conflicting instance variable type .int c: 3.\" } */\n+  /* { dg-error \"previous declaration of .int c: 5.\" \"\" { target *-*-* } 16 } */ \n+}\n+@end"}, {"sha": "b8200d0c0b30c4c9f5b0fcf5f25a798610a05a7b", "filename": "gcc/testsuite/obj-c++.dg/class-protocol-1.mm", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,442 @@\n+\n+/* Check Class <protocol> types */\n+/* Author: David Ayers <d.ayers@inode.at> */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+@protocol MyProto1\n++(void)doItClass1;\n+-(void)doItInstance1;\n+@end\n+\n+@protocol MyProto2\n++(void)doItClass2;\n+-(void)doItInstance2;\n+@end\n+\n+@interface MyClass1 <MyProto1>\n+{\n+  Class isa;\n+}\n+@end\n+@implementation MyClass1\n++(void)doItClass1{}\n+-(void)doItInstance1{}\n+@end\n+\n+@interface MyClass2 : MyClass1 <MyProto2>\n+@end\n+@implementation MyClass2\n++(void)doItClass2{}\n+-(void)doItInstance2{}\n+@end\n+\n+@interface MyClass3\n+{\n+  Class isa;\n+}\n+@end\n+@interface MyClass4 : MyClass3 <MyProto1>\n+@end\n+\n+/*----------------------------------------*/\n+\n+Class cls = 0;\n+Class <MyProto1> clsP1 = 0;\n+Class <MyProto2> clsP2 = 0;\n+\n+void\n+testSimple(void)\n+{\n+  [cls doItClass1];\n+  [cls doItInstance1];\n+  [cls doItClass2];\n+  [cls doItInstance2];\n+\n+  [clsP1 doItClass1];\n+  [clsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+  [clsP1 doItClass2];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP1 doItInstance2]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP2 doItClass1];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP2 doItInstance1]; /* { dg-warning \"not found in protocol\" } */\n+  [clsP2 doItClass2];\n+  [clsP2 doItInstance2]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass1];\n+  [MyClass1 doItInstance1];\n+  [MyClass1 doItClass2];    /* { dg-warning \"may not respond to\" } */\n+  [MyClass1 doItInstance2]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass2 doItClass1];\n+  [MyClass2 doItInstance1];\n+  [MyClass2 doItClass2];\n+  [MyClass2 doItInstance2]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass3 doItClass1];    /* { dg-warning \"may not respond to\" } */\n+  [MyClass3 doItInstance1]; /* { dg-warning \"may not respond to\" } */\n+\n+  [MyClass4 doItClass1];\n+  [MyClass4 doItInstance1]; /* { dg-warning \"may not respond to\" } */\n+}\n+\n+/*----------------------------------------*/\n+/* Protocols declared by categories */\n+\n+@protocol MyProto3\n++(void)doItClass3;\n+-(void)doItInstance3;\n+@end\n+@protocol MyProto4\n++(void)doItClass4;\n+-(void)doItInstance4;\n+@end\n+\n+@interface MyClass1 (Category1) <MyProto3>\n+@end\n+@interface MyClass2 (Category2) <MyProto4>\n+@end\n+\n+void\n+testCategory(void)\n+{\n+  [cls doItClass3];\n+  [cls doItInstance3];\n+  [cls doItClass4];\n+  [cls doItInstance4];\n+\n+  [MyClass1 doItClass3];\n+  [MyClass1 doItInstance3];\n+  [MyClass1 doItClass4];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance4]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass3];\n+  [MyClass2 doItInstance3];\n+  [MyClass2 doItClass4];\n+  [MyClass2 doItInstance4]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+/*----------------------------------------*/\n+/* Inherited protocols declared by categories */\n+\n+@protocol MyProto5 <MyProto1>\n++(void)doItClass5;\n+-(void)doItInstance5;\n+@end\n+\n+@protocol MyProto6 <MyProto2>\n++(void)doItClass6;\n+-(void)doItInstance6;\n+@end\n+\n+@interface MyClass1 (Category3) <MyProto5>\n+@end\n+@interface MyClass2 (Category4) <MyProto6>\n+@end\n+\n+Class <MyProto5> clsP5 = 0;\n+Class <MyProto6> clsP6 = 0;\n+\n+void\n+testCategoryInherited(void)\n+{\n+  [cls doItClass5];\n+  [cls doItInstance5];\n+  [cls doItClass6];\n+  [cls doItInstance6];\n+\n+  [clsP5 doItClass1];\n+  [clsP5 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+  [clsP5 doItClass2];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP5 doItInstance2]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP6 doItClass1];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP6 doItInstance1]; /* { dg-warning \"not found in protocol\" } */\n+  [clsP6 doItClass2];\n+  [clsP6 doItInstance2]; /* { dg-warning \"instead of\" }  */\n+\n+\n+  [MyClass1 doItClass5];\n+  [MyClass1 doItInstance5];\n+  [MyClass1 doItClass6];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance6]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass5];\n+  [MyClass2 doItInstance5];\n+  [MyClass2 doItClass6];\n+  [MyClass2 doItInstance6]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+/*----------------------------------------*/\n+/* Forward declared root protocols */\n+\n+@protocol FwProto;\n+\n+@interface MyClass1 (Forward) <FwProto>\n+@end\n+\n+Class <FwProto> clsP7 = 0;\n+\n+void\n+testForwardeDeclared1(void)\n+{\n+  [cls doItClass7];         /* { dg-warning \"no .\\\\+doItClass7. method found\" } */\n+  [cls doItInstance7];      /* { dg-warning \"no .\\\\+doItInstance7. method found\" } */\n+\n+  [clsP7 doItClass7];       /* { dg-warning \"not found in protocol\" } */\n+  /* { dg-warning \"no .\\\\+doItClass7. method found\" \"\" { target *-*-* } 190 } */\n+  [clsP7 doItInstance7];    /* { dg-warning \"not found in protocol\" } */\n+  /* { dg-warning \"no .\\\\+doItInstance7. method found\" \"\" { target *-*-* } 192 } */\n+\n+  [MyClass1 doItClass7];    /* { dg-warning \"may not respond\" } */\n+  [MyClass1 doItInstance7]; /* { dg-warning \"may not respond\" } */\n+\n+  [MyClass2 doItClass7];    /* { dg-warning \"may not respond\" } */\n+  [MyClass2 doItInstance7]; /* { dg-warning \"may not respond\" } */\n+\n+}\n+\n+@protocol FwProto\n++(void)doItClass7;\n+-(void)doItInstance7;\n+@end\n+\n+void\n+testForwardeDeclared2(void)\n+{\n+  [cls doItClass7];\n+  [cls doItInstance7];\n+\n+  [clsP7 doItClass7];    \n+  [clsP7 doItInstance7]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass7];\n+  [MyClass1 doItInstance7];\n+\n+  [MyClass2 doItClass7];\n+  [MyClass2 doItInstance7];\n+}\n+\n+/*----------------------------------------*/\n+/* Inherited non root protocols */\n+\n+@protocol MyProto8\n++(void)doItClass8;\n+-(void)doItInstance8;\n+@end\n+\n+@protocol MyProto9 <MyProto8>\n++(void)doItClass9;\n+-(void)doItInstance9;\n+@end\n+\n+@interface MyClass1 (InheritedNonRoot) <MyProto9>\n+@end\n+\n+Class <MyProto8> clsP8 = 0;\n+Class <MyProto9> clsP9 = 0;\n+\n+void\n+testInheritedNonRoot(void)\n+{\n+  [cls doItClass8];\n+  [cls doItInstance8];\n+  [cls doItClass9];\n+  [cls doItInstance9];\n+\n+  [clsP8 doItClass8];\n+  [clsP8 doItInstance8]; /* { dg-warning \"instead of\" }  */\n+  [clsP8 doItClass9];    /* { dg-warning \"not found in protocol\" } */\n+  [clsP8 doItInstance9]; /* { dg-warning \"not found in protocol\" } */\n+\n+  [clsP9 doItClass8];\n+  [clsP9 doItInstance8]; /* { dg-warning \"instead of\" }  */\n+  [clsP9 doItClass9];\n+  [clsP9 doItInstance9]; /* { dg-warning \"instead of\" }  */\n+\n+  [MyClass1 doItClass8];\n+  [MyClass1 doItInstance8];\n+  [MyClass1 doItClass9];\n+  [MyClass1 doItInstance9];\n+\n+  [MyClass2 doItClass8];\n+  [MyClass2 doItInstance8];\n+  [MyClass2 doItClass9];\n+  [MyClass2 doItInstance9];\n+  \n+}\n+\n+/*----------------------------------------*/\n+/* Prototype mismatch  */\n+\n+@protocol MyOtherProto1\n++(id)doItClass1;\n+-(id)doItInstance1;\n+@end\n+@interface MyOtherClass1 <MyOtherProto1>\n+@end\n+\n+Class <MyOtherProto1> oclsP1;\n+\n+void\n+testPrototypeMismatch(void)\n+{\n+  id tmp1 = [oclsP1 doItClass1];\n+  id tmp2 = [oclsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+\n+  [clsP1 doItClass1];\n+  [clsP1 doItInstance1]; /* { dg-warning \"instead of\" }  */\n+}\n+\n+id obj = nil;\n+id <MyProto1> objP1 = nil;\n+id <MyProto2> objP2 = nil;\n+id <MyProto5> objP5 = nil;\n+int num = 0;\n+void *ptr = 0;\n+\n+MyClass1 *mc1 = nil;\n+\n+void\n+testComptypes(void)\n+{\n+  { /* id <protocol>, id <protocol>  */\n+    objP1 == objP2;  /* { dg-warning \"lacks a cast\" } */\n+    objP2 == objP1;  /* { dg-warning \"lacks a cast\" } */\n+\n+    objP1 == objP5;\n+    objP5 == objP1;\n+  }\n+  { /* id <protocol>, SomeClass *  */\n+    mc1 == objP1;\n+    objP1 == mc1;\n+\n+    mc1 == objP2; /* { dg-warning \"lacks a cast\" } */\n+    objP2 == mc1; /* { dg-warning \"lacks a cast\" } */\n+  }\n+  { /* id <protocol>, id  */\n+    obj == objP1;\n+    objP1 == obj;\n+  }\n+  { /* id <protocol>, Class  */\n+    cls == objP1; /* { dg-warning \"lacks a cast\" } */\n+    objP1 == cls; /* { dg-warning \"lacks a cast\" } */\n+  }\n+  { /* id <protocol>, non-ObjC  */\n+    num == objP1; /* { dg-warning \"between pointer\" } */\n+    objP1 == num; /* { dg-warning \"between pointer\" } */\n+\n+    ptr == objP1;\n+    objP1 == ptr;\n+  }\n+  { /* Class <protocol>, Class <protocol> */\n+    clsP1 == clsP2; /* { dg-warning \"lacks a cast\" } */\n+    clsP2 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+\n+    clsP1 == clsP5;\n+    clsP5 == clsP1;\n+  }\n+  { /* Class <protocol>, SomeClass * */\n+    mc1 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+    clsP1 == mc1; /* { dg-warning \"lacks a cast\" } */\n+  }\n+  { /* Class <protocol>, id */\n+    obj == clsP1;\n+    clsP1 == obj;\n+  }\n+  { /* Class <protocol>, Class */\n+    cls == clsP1;\n+    clsP1 == cls;\n+  }\n+  { /* Class <protocol>, non-ObjC */\n+    num == clsP1; /* { dg-warning \"between pointer\" } */\n+    clsP1 == num; /* { dg-warning \"between pointer\" } */\n+\n+    ptr == clsP1;\n+    clsP1 == ptr;\n+  }\n+  { /* Class <protocol>, id <protocol> */\n+    clsP1 == objP1; /* { dg-warning \"lacks a cast\" } */\n+    objP1 == clsP1; /* { dg-warning \"lacks a cast\" } */\n+  }\n+\n+  { /* id <protocol>, id <protocol>  */\n+    objP1 = objP2; /* { dg-warning \"does not conform\" } */\n+    objP2 = objP1; /* { dg-warning \"does not conform\" } */\n+\n+    objP1 = objP5;\n+    objP5 = objP1; /* { dg-warning \"does not conform\" } */\n+  }\n+  { /* id <protocol>, SomeClass *  */\n+    mc1 = objP1;\n+    objP1 = mc1;\n+\n+    mc1 = objP2; /* { dg-warning \"does not conform\" } */\n+    objP2 = mc1; /* { dg-warning \"does not implement\" } */\n+  }\n+  { /* id <protocol>, id  */\n+    obj = objP1;\n+    objP1 = obj;\n+  }\n+  { /* id <protocol>, Class  */\n+    cls = objP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    objP1 = cls; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  }\n+  { /* id <protocol>, non-ObjC  */\n+    num = objP1; /* { dg-error \"invalid conversion\" } */\n+    objP1 = num; /* { dg-error \"invalid conversion\" } */\n+\n+    ptr = objP1;\n+    objP1 = ptr; /* { dg-error \"invalid conversion\" } */\n+  }\n+  { /* Class <protocol>, Class <protocol> */\n+    clsP1 = clsP2; /* { dg-warning \"does not conform\" } */\n+    clsP2 = clsP1; /* { dg-warning \"does not conform\" } */\n+\n+    clsP1 = clsP5;\n+    clsP5 = clsP1; /* { dg-warning \"does not conform\" } */\n+  }\n+  { /* Class <protocol>, SomeClass * */\n+    /* These combinations should always elicit a warning.  */\n+    mc1 = clsP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    clsP1 = mc1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    \n+    mc1 = clsP2; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    clsP2 = mc1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  }\n+  { /* Class <protocol>, id */\n+    obj = clsP1;\n+    clsP1 = obj;\n+  }\n+  { /* Class <protocol>, Class */\n+    cls = clsP1;\n+    clsP1 = cls;\n+  }\n+  { /* Class <protocol>, non-ObjC */\n+    num = clsP1; /* { dg-error \"invalid conversion\" } */\n+    clsP1 = num; /* { dg-error \"invalid conversion\" } */\n+\n+    ptr = clsP1;\n+    clsP1 = ptr; /* { dg-error \"invalid conversion\" } */\n+  }\n+  { /* Class <protocol>, id <protocol> */\n+    clsP1 = objP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    objP1 = clsP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  }\n+}\n+\n+int main ()\n+{\n+  testSimple();\n+  testCategory();\n+  testCategoryInherited();\n+  return(0);\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "3abcde5bec6fc29e9e2b079c0d819ac323a58deb", "filename": "gcc/testsuite/obj-c++.dg/comp-types-10.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-10.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,19 @@\n+/* Yet another mysterious gimplifier crasher.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+@class NSString;\n+@protocol NSObject\n+@end\n+@interface NSObject <NSObject> {\n+}\n+@end\n+void __setRetained(id *ivar, id value) {\n+    *ivar = value;\n+}\n+static NSString *_logProcessPrefix = 0;\n+@implementation NSObject (ScopeAdditions)\n++ (void)setObjectLogProcessPrefix:(NSString *)processPrefix {\n+    __setRetained(&_logProcessPrefix, processPrefix);\n+}\n+@end"}, {"sha": "8cd53404f5265e21f7a2704ac1f064576f087e41", "filename": "gcc/testsuite/obj-c++.dg/comp-types-11.mm", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-11.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Foo\n+- (id)meth1;\n+- (id)meth2:(int)arg;\n+@end\n+\n+@interface Derived1: Object\n+@end\n+\n+@interface Derived2: Object\n++ (Derived1 *)new;\n+@end\n+\n+id<Foo> func(void) {\n+  Object *o = [Object new];\n+  return o;  /* { dg-warning \"class .Object. does not implement the .Foo. protocol\" } */\n+}\n+\n+@implementation Derived2\n++ (Derived1 *)new {\n+  Derived2 *o = [super new];\n+  return o;  /* { dg-warning \"distinct Objective\\\\-C type in return\" } */\n+}\n+@end\n+"}, {"sha": "07043785a229eeedbeccf83c6368f09202daaefd", "filename": "gcc/testsuite/obj-c++.dg/comp-types-2.mm", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-2.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,88 @@\n+/* Test various ObjC types assignments and comparisons.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) foo;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+@interface MyOtherClass <MyProtocol>\n+- (void) foo;\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id<MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  MyOtherClass *obj_cp = nil;\n+  Class obj_C = Nil;\n+\n+  /* Assigning to an 'id' variable should never\n+     generate a warning.  */\n+  obj = obj_p;  /* Ok  */\n+  obj = obj_c;  /* Ok  */\n+  obj = obj_cp; /* Ok  */\n+  obj = obj_C;  /* Ok  */\n+  \n+  /* Assigning to a 'MyClass *' variable should always generate a\n+     warning, unless done from an 'id'.  */\n+  obj_c = obj;    /* Ok */\n+  obj_c = obj_p;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_c = obj_cp; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_c = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+\n+  /* Assigning to an 'id<MyProtocol>' variable should generate a\n+     warning if done from a 'MyClass *' (which doesn't implement\n+     MyProtocol), but not from an 'id' or from a 'MyOtherClass *'\n+     (which implements MyProtocol).  */\n+  obj_p = obj;    /* Ok */\n+  obj_p = obj_c;  /* { dg-warning \"does not implement\" } */\n+  obj_p = obj_cp; /* Ok  */\n+  obj_p = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+\n+  /* Assigning to a 'MyOtherClass *' variable should always generate\n+     a warning, unless done from an 'id' or an 'id<MyProtocol>' (since\n+     MyOtherClass implements MyProtocol).  */\n+  obj_cp = obj;    /* Ok */\n+  obj_cp = obj_c;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_cp = obj_p;  /* Ok */\n+  obj_cp = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+\n+  /* Any comparison involving an 'id' must be without warnings.  */\n+  if (obj == obj_p) ;  /* Ok  */ /*Bogus warning here in 2.95.4*/\n+  if (obj_p == obj) ;  /* Ok  */\n+  if (obj == obj_c) ;  /* Ok  */\n+  if (obj_c == obj) ;  /* Ok  */\n+  if (obj == obj_cp) ; /* Ok  */\n+  if (obj_cp == obj) ; /* Ok  */\n+  if (obj == obj_C) ;  /* Ok  */\n+  if (obj_C == obj) ;  /* Ok  */\n+\n+  /* Any comparison between 'MyClass *' and anything which is not an 'id'\n+     must generate a warning.  */\n+  if (obj_c == obj_p) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_p == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_c == obj_cp) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_cp == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_c == obj_C) ;  /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_c) ;  /* { dg-warning \"lacks a cast\" } */\n+\n+  /* Any comparison between 'MyOtherClass *' (which implements\n+     MyProtocol) and an 'id' implementing MyProtocol are Ok.  */\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+\n+\n+  if (obj_p == obj_C) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_p) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_cp == obj_C) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_C == obj_cp) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  return 0;\n+}"}, {"sha": "2bea01534a729adff4ed3f60efa6d296a89954c6", "filename": "gcc/testsuite/obj-c++.dg/comp-types-3.mm", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-3.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,38 @@\n+/* Test simple ObjC types casts.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) foo;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id<MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  Class obj_C = Nil;\n+\n+  /* All these casts should generate no warnings.  */\n+\n+  obj = (id)obj_p;\n+  obj = (id)obj_c;\n+  obj = (id)obj_C;\n+  obj_c = (MyClass *)obj;\n+  obj_c = (MyClass *)obj_p;\n+  obj_c = (MyClass *)obj_C;\n+  obj_p = (id<MyProtocol>)obj;\n+  obj_p = (id<MyProtocol>)obj_c;\n+  obj_p = (id<MyProtocol>)obj_C;\n+  obj_C = (Class)obj;\n+  obj_C = (Class)obj_p;\n+  obj_C = (Class)obj_c;\n+  \n+\n+  return 0;\n+}"}, {"sha": "6867f82785d7fa46ff1b7bbf08fba59127b9644c", "filename": "gcc/testsuite/obj-c++.dg/comp-types-4.mm", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-4.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,64 @@\n+/* Test assignments and comparisons between protocols (obscure case).  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocolA\n+- (void) methodA;\n+@end\n+\n+@protocol MyProtocolB\n+- (void) methodB;\n+@end\n+\n+@protocol MyProtocolAB <MyProtocolA, MyProtocolB>\n+@end\n+\n+@protocol MyProtocolAC <MyProtocolA>\n+- (void) methodC;\n+@end\n+\n+int main()\n+{\n+  id<MyProtocolA> obj_a = nil;\n+  id<MyProtocolB> obj_b = nil;\n+  id<MyProtocolAB> obj_ab = nil;\n+  id<MyProtocolAC> obj_ac = nil;\n+\n+  obj_a = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_a = obj_ab; /* Ok */\n+  obj_a = obj_ac; /* Ok */\n+  \n+  obj_b = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_b = obj_ab; /* Ok */\n+  obj_b = obj_ac; /* { dg-warning \"does not conform\" } */\n+  \n+  obj_ab = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_ab = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_ab = obj_ac; /* { dg-warning \"does not conform\" } */\n+  \n+  obj_ac = obj_a;  /* { dg-warning \"does not conform\" } */\n+  obj_ac = obj_b;  /* { dg-warning \"does not conform\" } */\n+  obj_ac = obj_ab; /* { dg-warning \"does not conform\" } */\n+\n+  if (obj_a == obj_b) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_b == obj_a) ; /* { dg-warning \"lacks a cast\" } */\n+\n+  if (obj_a == obj_ab) ; /* Ok */\n+  if (obj_ab == obj_a) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_a == obj_ac) ; /* Ok */ \n+  if (obj_ac == obj_a) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_b == obj_ab) ; /* Ok */ \n+  if (obj_ab == obj_b) ; /* Ok */ /* Spurious 2.95.4 warning here */\n+\n+  if (obj_b == obj_ac) ; /* { dg-warning \"lacks a cast\" } */ \n+  if (obj_ac == obj_b) ; /* { dg-warning \"lacks a cast\" } */ \n+\n+  if (obj_ab == obj_ac) ; /* { dg-warning \"lacks a cast\" } */ \n+  if (obj_ac == obj_ab) ; /* { dg-warning \"lacks a cast\" } */ \n+\n+  return 0;\n+}"}, {"sha": "99f6772bd42eeb7742cc3189b147aaf0a1ad1f28", "filename": "gcc/testsuite/obj-c++.dg/comp-types-5.mm", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-5.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,74 @@\n+/* Test errors for assignments and comparisons between ObjC and C++ types.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* The NeXT runtime headers do not define NULL.  */\n+#ifndef NULL\n+#define NULL ((void *)0)\n+#endif\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id <MyProtocol> obj_p = nil;\n+  MyClass *obj_c = nil;\n+  Class obj_C = Nil;\n+  \n+  int i = 0;\n+  int *j = (int *)NULL;\n+\n+  /* These should all generate warnings.  */\n+  \n+  obj = i; /* { dg-error \"invalid conversion\" } */\n+  obj = j; /* { dg-error \"cannot convert\" } */\n+\n+  obj_p = i; /* { dg-error \"invalid conversion\" } */\n+  obj_p = j; /* { dg-error \"cannot convert\" } */\n+  \n+  obj_c = i; /* { dg-error \"invalid conversion\" } */\n+  obj_c = j; /* { dg-error \"cannot convert\" } */\n+\n+  obj_C = i; /* { dg-error \"invalid conversion\" } */\n+  obj_C = j; /* { dg-error \"cannot convert\" } */\n+  \n+  i = obj;   /* { dg-error \"invalid conversion\" } */\n+  i = obj_p; /* { dg-error \"invalid conversion\" } */\n+  i = obj_c; /* { dg-error \"invalid conversion\" } */\n+  i = obj_C; /* { dg-error \"invalid conversion\" } */\n+  \n+  j = obj;   /* { dg-error \"cannot convert\" } */\n+  j = obj_p; /* { dg-error \"cannot convert\" } */\n+  j = obj_c; /* { dg-error \"cannot convert\" } */\n+  j = obj_C; /* { dg-error \"cannot convert\" } */\n+  \n+  if (obj == i) ; /* { dg-error \"comparison between pointer and integer\" } */\n+  if (i == obj) ; /* { dg-error \"comparison between pointer and integer\" } */\n+  if (obj == j) ; /* { dg-error \"lacks a cast\" } */\n+  if (j == obj) ; /* { dg-error \"lacks a cast\" } */\n+\n+  if (obj_c == i) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (i == obj_c) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (obj_c == j) ; /* { dg-error \"lacks a cast\" } */\n+  if (j == obj_c) ; /* { dg-error \"lacks a cast\" } */\n+\n+  if (obj_p == i) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (i == obj_p) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (obj_p == j) ; /* { dg-error \"lacks a cast\" } */\n+  if (j == obj_p) ; /* { dg-error \"lacks a cast\" } */\n+\n+  if (obj_C == i) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (i == obj_C) ; /*{ dg-error \"comparison between pointer and integer\" }*/\n+  if (obj_C == j) ; /* { dg-error \"lacks a cast\" } */\n+  if (j == obj_C) ; /* { dg-error \"lacks a cast\" } */\n+\n+  return 0;\n+}"}, {"sha": "23b84edd374d59025de1f6b013023270c20a414f", "filename": "gcc/testsuite/obj-c++.dg/comp-types-6.mm", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-6.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,33 @@\n+/* Test assignments and comparisons involving `one-off' protocols.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+int main()\n+{\n+  id obj = nil;\n+  id <MyProtocol> obj_p = nil;\n+  MyClass<MyProtocol> *obj_cp = nil;\n+\n+  obj_cp = obj; /* Ok */\n+  obj = obj_cp; /* Ok */\n+\n+  obj_cp = obj_p; /* Ok */\n+  obj_p = obj_cp; /* Ok */\n+  \n+  if (obj_cp == obj) ; /* Ok */\n+  if (obj == obj_cp) ; /* Ok */\n+\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+\n+  return 0;\n+}"}, {"sha": "e23558114bcd24fd050dcaba931f67ae9077347a", "filename": "gcc/testsuite/obj-c++.dg/comp-types-7.mm", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-7.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,38 @@\n+/* Test assignments and comparisons involving category protocols.  */\n+/* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) method;\n+@end\n+\n+@interface MyClass\n+@end\n+\n+@interface MyClass (Addition) <MyProtocol>\n+- (void) method;\n+@end\n+\n+@interface MyOtherClass : MyClass\n+@end\n+\n+int main()\n+{\n+  id <MyProtocol> obj_p = nil;\n+  MyClass *obj_cp = nil;\n+  MyOtherClass *obj_cp2 = nil;\n+\n+  obj_cp = obj_p;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_cp2 = obj_p; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_p = obj_cp;  /* Ok */\n+  obj_p = obj_cp2; /* Ok */\n+\n+  if (obj_cp == obj_p) ; /* Ok */\n+  if (obj_cp2 == obj_p) ; /* Ok */\n+  if (obj_p == obj_cp) ; /* Ok */\n+  if (obj_p == obj_cp2) ; /* Ok */\n+\n+  return 0;\n+}"}, {"sha": "490f4ff1938acdf1220a5fb0c43c005fbbb7e909", "filename": "gcc/testsuite/obj-c++.dg/comp-types-8.mm", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-8.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+\n+/* We used to ICE because we removed the cast to List_linked*\n+   in -[ListIndex_linked next]. */\n+\n+@interface List\n+{\n+@public\n+  int firstLink;\n+}\n+@end\n+\n+@interface ListIndex_linked\n+{\n+@public\n+  List *collection;\n+  int link;\n+}\n+@end\n+\n+@interface List_linked: List\n+@end\n+\n+@implementation List\n+@end\n+\n+@implementation ListIndex_linked\n+- next\n+{\n+   link = ((List_linked*)collection)->firstLink;\n+}\n+@end\n+"}, {"sha": "f092c9e279612fabb49dac8be75b5e6a996cc784", "filename": "gcc/testsuite/obj-c++.dg/comp-types-9.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcomp-types-9.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+/* Another gimplifier ICE... */\n+\n+#include <objc/Object.h>\n+\n+@interface MyView: Object {\n+  int _frame;\n+}\n+- (void)_finalize;\n+@end\n+\n+@interface MyViewTemplate: MyView {\n+  void *_className;\n+}\n+- (id)createRealObject;\n+@end\n+\n+@implementation MyViewTemplate\n+- (id)createRealObject {\n+    id realObj;\n+    *(MyView *)realObj = *(MyView *)self;\n+    return realObj;\n+}\n+@end"}, {"sha": "25c0b509f8db6209806b8632d6a84eadd81f3ca3", "filename": "gcc/testsuite/obj-c++.dg/encode-4.mm", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-4.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,105 @@\n+/* Test Objective-C method encodings. */\n+\n+/* The _encoded_ parameter offsets for Objective-C methods are \n+   computed inductively as follows:\n+    - The first paramter (self) has offset 0;\n+    - The k-th parameter (k > 1) has offset equal to the\n+      sum of:\n+        - the offset of the k-1-st paramter\n+        - the (void *)-promoted size of the k-1-st parameter.\n+\n+   Note that the encoded offsets need not correspond\n+   to the actual placement of parameters (relative to 'self')\n+   on the stack!  Your target's ABI may have very different\n+   opinions on the matter.  */\n+\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#define METHOD Method\n+#define OBJC_GETCLASS objc_getClass\n+#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#else\n+#include <objc/objc-api.h>\n+#define METHOD Method_t\n+#define OBJC_GETCLASS objc_get_class\n+#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#endif\n+\n+extern \"C\" {\n+  extern int sscanf(const char *str, const char *format, ...);\n+  extern void abort(void);\n+}\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Foo: Object\n+typedef struct { float x, y; } XXPoint;\n+typedef struct { float width, height; } XXSize;\n+typedef struct _XXRect { XXPoint origin; XXSize size; } XXRect;\n+-(id)setRect:(XXRect)r withInt:(int)i;\n+-(void) char:(signed char)c float:(float)f double:(double)d long:(long)l;\n+@end\n+\n+XXRect my_rect;\n+unsigned offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+@implementation Foo\n+-(id)setRect:(XXRect)r withInt:(int)i {\n+  unsigned offs = sizeof(self);\n+  CHECK_IF(offs == offs3);\n+  offs += sizeof(_cmd);\n+  CHECK_IF(offs == offs4);\n+  offs += sizeof(r);\n+  CHECK_IF(offs == offs5);\n+  offs += sizeof(i); \n+  CHECK_IF(offs == offs1); \n+  return nil; \n+}\n+-(void) char:(signed char)c float:(float)f double:(double)d long:(long)l {\n+  unsigned offs = sizeof(self);\n+  CHECK_IF(offs == offs3);\n+  offs += sizeof(_cmd);\n+  CHECK_IF(offs == offs4);\n+  offs += sizeof((int)c);\n+  CHECK_IF(offs == offs5);\n+  offs += sizeof(f);\n+  CHECK_IF(offs == offs6);\n+  offs += sizeof(d);\n+  CHECK_IF(offs == offs7);\n+  offs += sizeof(l);\n+  CHECK_IF(offs == offs1);\n+}\n+@end\n+\n+\n+int main(void) {\n+  Foo *foo = [[Foo alloc] init];\n+  Class fooClass = OBJC_GETCLASS(\"Foo\");\n+  METHOD meth;\n+  const char *string;\n+\n+  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(setRect:withInt:));\n+  offs2 = 9999;\n+  sscanf(meth->method_types, \"@%u@%u:%u{_XXRect={?=ff}{?=ff}}%ui%u\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5);\n+  CHECK_IF(!offs2);\n+  [foo setRect:my_rect withInt:123];\n+\n+  meth = CLASS_GETINSTANCEMETHOD(fooClass, @selector(char:float:double:long:));\n+  offs2 = 9999;\n+  if (sizeof (long) == 8)\n+    string = \"v%u@%u:%uc%uf%ud%uq%u\";\n+  else\n+    string = \"v%u@%u:%uc%uf%ud%ul%u\";\n+  sscanf(meth->method_types, string, &offs1, &offs2, &offs3,  \n+\t &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs2);\n+  [foo char:'c' float:2.3 double:3.5 long:2345L];\n+\n+  return 0;\n+}  "}, {"sha": "9a36326a355f54e690d0fdb34adc039522a2be47", "filename": "gcc/testsuite/obj-c++.dg/encode-5.mm", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-5.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,74 @@\n+/* Method encoding tests for stand-alone @protocol declarations.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/Protocol.h>\n+#ifdef __cplusplus\n+#define ProtoBool bool\n+#else\n+#define ProtoBool _Bool\n+#endif\n+\n+#ifndef __NEXT_RUNTIME__\n+#include <objc/objc-api.h>\n+#endif\n+\n+extern \"C\" {\n+  extern int sscanf(const char *str, const char *format, ...);\n+  extern void abort(void);\n+}\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum {\n+  zero, one, two, three\n+};\n+typedef enum Enum Enum;\n+typedef signed char ObjCBool; /* as used by the NeXT runtime */\n+\n+@protocol Proto\n+union __XXAngle { unsigned int alpha, beta; };\n+typedef struct { float x, y; union __XXAngle a; } XXPoint;\n+typedef struct { double width, height; } XXSize;\n+typedef struct _XXRect { XXPoint origin; XXSize size; struct _XXRect *next; } XXRect;\n+- (void) char:(signed char)c float:(float)f double:(double)d unsigned:(unsigned)u short:(short)s long:(long)l;\n+- (void *)setRect:(XXRect)r withBool:(ProtoBool)b withInt:(int)i;\n++ (Enum *)getEnum:(XXPoint *)pt enum:(enum Enum)e bool:(ObjCBool)b;\n++ (ProtoBool **)getBool:(ObjCBool **)b;\n+@end\n+\n+Protocol *proto = @protocol(Proto);\n+struct objc_method_description *meth;\n+unsigned totsize, offs0, offs1, offs2, offs3, offs4, offs5, offs6, offs7;\n+\n+static void scan_initial(const char *pattern) {\n+  totsize = offs0 = offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = offs7 = (unsigned)-1;\n+  sscanf(meth->types, pattern, &totsize, &offs0, &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6, &offs7);\n+  CHECK_IF(!offs0 && offs1 == sizeof(id) && offs2 == offs1 + sizeof(SEL) && totsize >= offs2);\n+}\n+\n+int main(void) {\n+  const char *string;\n+\n+  meth = [proto descriptionForInstanceMethod: @selector(char:float:double:unsigned:short:long:)];\n+  if (sizeof (long) == 8)\n+    string = \"v%u@%u:%uc%uf%ud%uI%us%uq%u\";\n+  else\n+    string = \"v%u@%u:%uc%uf%ud%uI%us%ul%u\";\n+  scan_initial(string);\n+  CHECK_IF(offs3 == offs2 + sizeof(int) && offs4 == offs3 + sizeof(float));\n+  CHECK_IF(offs5 == offs4 + sizeof(double) && offs6 == offs5 + sizeof(unsigned));\n+  CHECK_IF(offs7 == offs6 + sizeof(int) && totsize == offs7 + sizeof(long));\n+  meth = [proto descriptionForInstanceMethod: @selector(setRect:withBool:withInt:)];\n+  scan_initial(\"^v%u@%u:%u{_XXRect={?=ff(__XXAngle=II)}{?=dd}^{_XXRect}}%uB%ui%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(XXRect) && offs4 == offs3 + sizeof(int));\n+  CHECK_IF(totsize == offs4 + sizeof(int));\n+  meth = [proto descriptionForClassMethod: @selector(getEnum:enum:bool:)];\n+  scan_initial(\"^i%u@%u:%u^{?=ff(__XXAngle=II)}%ui%uc%u\");\n+  CHECK_IF(offs3 == offs2 + sizeof(XXPoint *) && offs4 == offs3 + sizeof(enum Enum));\n+  CHECK_IF(totsize == offs4 + sizeof(int));  /* 'ObjCBool' is really 'char' */\n+  meth = [proto descriptionForClassMethod: @selector(getBool:)];         \n+  scan_initial(\"^^B%u@%u:%u^*%u\");\n+  CHECK_IF(totsize == offs2 + sizeof(ObjCBool **));\n+  return 0;\n+}"}, {"sha": "1ee11714def7c97da2549c8ad164c8b32d3a8be3", "filename": "gcc/testsuite/obj-c++.dg/encode-6.mm", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-6.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,75 @@\n+/* Encoding tests for ObjC class layouts.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-class.h>\n+#define OBJC_GETCLASS objc_getClass\n+#else\n+#include <objc/objc-api.h>\n+#define OBJC_GETCLASS objc_get_class\n+#endif\n+\n+extern \"C\" {\n+  extern void abort(void);\n+  extern int strcmp(const char *s1, const char *s2);\n+}\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@class Int1, Int2;\n+struct Nested;\n+\n+struct Innermost {\n+  unsigned char a, b;\n+  struct Nested *encl;\n+};\n+\n+struct Nested {\n+  float a, b;\n+  Int1 *next;\n+  struct Innermost innermost;\n+};\n+\n+@interface Int1: Object {\n+  signed char a, b;\n+  Int2 *int2;\n+  struct Nested nested;\n+}\n+@end\n+\n+@interface Int2: Int1 {\n+  struct Innermost *innermost;\n+  Int1 *base;\n+}\n+@end\n+\n+@implementation Int1\n+@end\n+\n+@implementation Int2\n+@end\n+\n+struct objc_ivar *ivar;\n+\n+static void check_ivar(const char *name, const char *type) {\n+  CHECK_IF(!strcmp(ivar->ivar_name, name));\n+  CHECK_IF(!strcmp(ivar->ivar_type, type));\n+  ivar++;\n+}\n+\n+int main(void) {\n+  ivar = ((Class)OBJC_GETCLASS(\"Int1\"))->ivars->ivar_list;\n+  check_ivar(\"a\", \"c\");\n+  check_ivar(\"b\", \"c\");\n+  check_ivar(\"int2\", \"@\\\"Int2\\\"\");\n+  check_ivar(\"nested\", \n+    \"{Nested=\\\"a\\\"f\\\"b\\\"f\\\"next\\\"@\\\"Int1\\\"\\\"innermost\\\"{Innermost=\\\"a\\\"C\\\"b\\\"C\\\"encl\\\"^{Nested}}}\");\n+    \n+  ivar = ((Class)OBJC_GETCLASS(\"Int2\"))->ivars->ivar_list;\n+  check_ivar(\"innermost\", \"^{Innermost=CC^{Nested}}\");\n+  check_ivar(\"base\", \"@\\\"Int1\\\"\");\n+  \n+  return 0;\n+}"}, {"sha": "f2cb693b1b7249e1639811d37685da1b4c3557d7", "filename": "gcc/testsuite/obj-c++.dg/encode-7.mm", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-7.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,78 @@\n+/* Check if array arguments of ObjC methods are decayed to pointer types\n+   in a proper fashion:\n+     (1) The _encodings_ for the array arguments should remain to be '[4i]' and\n+         such, since this has been the case since at least gcc 3.3.\n+     (2) However, when building the static C functions out of ObjC method signatures,\n+         we need to decay the arrays into pointers (as C does).\n+     (3) If array size is not known (e.g., 'int a[]'), then the type shall be\n+         encoded as a pointer.  */\n+\n+/* Contributed by Alexander Malmberg <alexander@malmberg.org>  */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+#ifdef __NEXT_RUNTIME__\n+#define METHOD Method\n+#define OBJC_GETCLASS objc_getClass\n+#define CLASS_GETINSTANCEMETHOD class_getInstanceMethod\n+#else\n+#include <objc/objc-api.h>\n+#define METHOD Method_t\n+#define OBJC_GETCLASS objc_get_class\n+#define CLASS_GETINSTANCEMETHOD class_get_instance_method\n+#endif\n+\n+@interface Test : Object\n+{ float j; }\n+-(void) test2: (int [5])a with: (int [])b;\n+-(id) test3: (Test **)b; /* { dg-warning \"previous declaration of .\\\\-\\\\(id\\\\)test3:\\\\(Test \\\\*\\\\*\\\\)b.\" } */\n+@end\n+\n+@implementation Test\n+-(void) test2: (int [5])a with: (int [])b\n+{\n+  a[3] = *b;\n+}\n+-(void) test3: (Test [3][4])b {  /* { dg-warning \"conflicting types for .\\\\-\\\\(void\\\\)test3:\\\\(Test \\\\\\[3\\\\\\]\\\\\\[4\\\\\\]\\\\)b.\" } */\n+}\n+@end\n+\n+int bb[6] = { 0, 1, 2, 3, 4, 5 };\n+int *b = bb;\n+Test *cc[4];\n+Test **c = cc;\n+\n+int offs1, offs2, offs3, offs4, offs5, offs6;\n+\n+int main(int argc, char **argv)\n+{\n+  Class testClass = OBJC_GETCLASS(\"Test\");\n+  METHOD meth;\n+\n+  cc[0] = [Test new];\n+  CHECK_IF (bb[3] == 3);\n+  [*c test2: b with: bb + 4];\n+  CHECK_IF (bb[3] == 4);\n+  bb[3] = 0;\n+  [*c test2: bb with: bb + 5];\n+  CHECK_IF (bb[3] == 5);\n+\n+  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test2:with:));\n+  offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n+  sscanf(meth->method_types, \"v%d@%d:%d[%di]%d^i%d\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6);\n+  CHECK_IF (!offs2 && offs4 == 5 && offs3 > 0);\n+  CHECK_IF (offs5 == 2 * offs3 && offs6 == 3 * offs3 && offs1 == 4 * offs3);\n+  \n+  meth = CLASS_GETINSTANCEMETHOD(testClass, @selector(test3:));\n+  offs1 = offs2 = offs3 = offs4 = offs5 = offs6 = -1;\n+  sscanf(meth->method_types, \"v%d@%d:%d[%d[%d{Test=#f}]]%d\", &offs1, &offs2, &offs3,\n+      &offs4, &offs5, &offs6);\n+  CHECK_IF (!offs2 && offs4 == 3 && offs5 == 4 && offs3 > 0);\n+  CHECK_IF (offs6 == 2 * offs3 && offs1 == 3 * offs3);\n+  \n+  return 0;\n+}"}, {"sha": "5f61cb87be45aca064c2f6ec7610674405a2a4df", "filename": "gcc/testsuite/obj-c++.dg/encode-8.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-8.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,23 @@\n+/* Test if the Objective-C @encode machinery distinguishes between\n+   'BOOL *' (which should be encoded as '^c') and 'char *' (which\n+   should be encoded as '*').  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <string.h>           \n+#include <stdlib.h>\n+#include <objc/objc.h>\n+\n+int main(void) {\n+  const char *BOOL_ptr = @encode(BOOL *);\n+  const char *char_ptr = @encode(char *);\n+  \n+  if(strcmp(BOOL_ptr, \"^c\"))\n+    abort();\n+\n+  if(strcmp(char_ptr, \"*\"))\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "fe8ab3d083d2ddf91405633ab1363f50af4f6a2b", "filename": "gcc/testsuite/obj-c++.dg/layout-1.mm", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Flayout-1.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,15 @@\n+/* Ensure that we do not get bizarre warnings referring to\n+   __attribute__((packed)) or some such.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpadded -Wpacked -Wabi\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Derived1: Object\n+{ }\n+@end\n+\n+@interface Derived2: Object\n+- (id) foo;\n+@end\n+"}, {"sha": "4c7ccb8b8a70cb6a3b2c3e02145e68e83308b415", "filename": "gcc/testsuite/obj-c++.dg/method-10.mm", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-10.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,45 @@\n+/* Test for sending messages to aliased classes (and instances thereof).  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+\n+extern \"C\" void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@interface Int1: Object\n++ (int) classMeth;\n+- (int) instanceMeth;\n+@end\n+\n+@interface Int2: Object\n++ (int) classMeth;      \n+- (int) instanceMeth;\n+@end\n+\n+@implementation Int1\n++ (int) classMeth { return 345; }\n+- (int) instanceMeth { return 697; }\n+@end\n+\n+@implementation Int2\n++ (int) classMeth { return 1345; }\n+- (int) instanceMeth { return 1697; }\n+@end\n+\n+typedef Int1 Int1Typedef;\n+@compatibility_alias Int1Alias Int1Typedef;\n+@compatibility_alias Int2Alias Int2;\n+typedef Int2Alias Int2Typedef;                  \n+\n+int main(void) {\n+  Int1Alias *int1alias = [[Int1Typedef alloc] init];\n+  Int2Typedef *int2typedef = [[Int2Alias alloc] init];\n+\n+  CHECK_IF([Int1Typedef classMeth] == 345 && [Int2Alias classMeth] == 1345);\n+  CHECK_IF([int1alias instanceMeth] == 697 && [int2typedef instanceMeth] == 1697);\n+  CHECK_IF([(Int2Typedef *)int1alias instanceMeth] == 697);\n+  CHECK_IF([(Int1Alias *)int2typedef instanceMeth] == 1697);\n+  return 0;\n+}"}, {"sha": "c8d092df74de893a36b80c218781b73d0ded625a", "filename": "gcc/testsuite/obj-c++.dg/method-11.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-11.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* Check if class references (generated for the NeXT runtime) are appropriately \n+   folded.  This test is safe to run on all targets.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+typedef Object ObjectTypedef1;\n+typedef ObjectTypedef1 ObjectTypedef2;\n+@compatibility_alias ObjectAlias1 ObjectTypedef2;\n+@compatibility_alias ObjectAlias2 ObjectAlias1;\n+typedef ObjectAlias2 ObjectTypedef3;\n+\n+void foo(void) {\n+  id obj = [Object new];\n+  obj = [ObjectTypedef1 new];\n+  obj = [ObjectTypedef2 new];\n+  obj = [ObjectTypedef3 new];\n+  obj = [ObjectAlias1 new];\n+  obj = [ObjectAlias2 new];\n+}\n+\n+/* { dg-final { scan-assembler \"_OBJC_CLASS_REFERENCES_0\" } } */\n+/* { dg-final { scan-assembler-not \"_OBJC_CLASS_REFERENCES_1\" } } */"}, {"sha": "21f4bb9f44da0c8dec69aefdc9f66261c445e30a", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,31 @@\n+/* Check that sending messages to variables of type 'Class' does not involve instance methods, unless they reside in root classes.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-options \"-Wstrict-selector-match\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Protocol.h>\n+\n+@interface Base\n+- (unsigned)port;\n+@end\n+\n+@interface Derived: Base\n+- (Object *)port;\n++ (Protocol *)port;\n+- (id)starboard;\n+@end\n+\n+void foo(void) {\n+  Class receiver;\n+\n+  [receiver port];  /* { dg-warning \"multiple methods named .\\\\+port. found\" } */\n+       /* { dg-warning \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n+       /* { dg-warning \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n+\n+  [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */\n+\n+  [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n+}"}, {"sha": "adf6dfe26d84880a0af9b5e178f0b7470bcfb0c8", "filename": "gcc/testsuite/obj-c++.dg/method-13.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-13.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,27 @@\n+/* Check if finding multiple signatures for a method is handled gracefully.  Author:  Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-options \"-Wstrict-selector-match\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Class1\n+- (void)setWindow:(Object *)wdw;\n+@end\n+\n+@interface Class2\n+- (void)setWindow:(Class1 *)window;\n+@end\n+\n+id foo(void) {\n+  Object *obj = [[Object alloc] init];\n+  id obj2 = obj;\n+  [obj setWindow:nil];  /* { dg-warning \".Object. may not respond to .\\\\-setWindow:.\" } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 18 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 18 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 18 } */\n+  [obj2 setWindow:nil]; /* { dg-warning \"multiple methods named .\\\\-setWindow:. found\" } */\n+       /* { dg-warning \"using .\\\\-\\\\(void\\\\)setWindow:\\\\(Object \\\\*\\\\)wdw.\" \"\" { target *-*-* } 8 } */\n+       /* { dg-warning \"also found .\\\\-\\\\(void\\\\)setWindow:\\\\(Class1 \\\\*\\\\)window.\" \"\" { target *-*-* } 12 } */\n+\n+  return obj;\n+}"}, {"sha": "4a13b7d6cbb57575022ddf16852d29750785f00f", "filename": "gcc/testsuite/obj-c++.dg/method-14.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-14.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-14.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-14.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,14 @@\n+/* Check if casting the receiver type causes method lookup to succeed.  This was broken\n+   in Objective-C++.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+@interface A\n+@end\n+\n+@interface B: A\n+- (void)f;\n+@end\n+\n+void g(A *p) { [(B *)p f];  }\n+"}, {"sha": "9d9099e9f7e5ee8e4aea63ebe4eeba250513267a", "filename": "gcc/testsuite/obj-c++.dg/method-15.mm", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-15.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,43 @@\n+/* Check if finding multiple signatures for a method is handled gracefully when method lookup succeeds (see also method-7.m).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-options \"-Wstrict-selector-match\" } */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol MyObject\n+- (id)initWithData:(Object *)data;\n+@end\n+\n+@protocol SomeOther\n+- (id)initWithData:(int)data;\n+@end\n+\n+@protocol MyCoding\n+- (id)initWithData:(id<MyObject, MyCoding>)data;\n+@end\n+\n+@interface NTGridDataObject: Object <MyCoding>\n+{\n+    Object<MyCoding> *_data;\n+}\n++ (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data;\n+@end\n+\n+@implementation NTGridDataObject\n+- (id)initWithData:(id<MyObject, MyCoding>)data {\n+  return data;\n+}\n++ (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n+{\n+    NTGridDataObject *result = [[NTGridDataObject alloc] initWithData:data];\n+     /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 33 } */\n+     /* { dg-warning \"using .\\\\-\\\\(id\\\\)initWithData:\\\\(Object \\\\*\\\\)data.\" \"\" { target *-*-* } 9 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(id <MyObject, MyCoding>\\\\)data.\" \"\" { target *-*-* } 17 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 13 } */\n+\n+     /* The following warning is a consequence of picking the \"wrong\" method signature.  */\n+     /* { dg-warning \"passing argument 1 of .initWithData:. from distinct Objective\\\\-C type\" \"\" { target *-*-* } 33 } */\n+    return result;\n+}\n+@end"}, {"sha": "f4a9efcd72cd4de6b179f5a46491240fcb44024e", "filename": "gcc/testsuite/obj-c++.dg/method-16.mm", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-16.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,34 @@\n+\n+/* Ensure that we indeed cannot obtain the value of a message send\n+   if the chosen method signature returns 'void'.  There used to\n+   exist a cheesy hack that allowed it.  While at it, check that\n+   the first lexically occurring method signature gets picked\n+   when sending messages to 'id'.  */ \n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface Object1\n+- (void)initWithData:(Object1 *)data;\n+@end\n+\n+@interface Object2\n+- (id)initWithData:(Object1 *)data;\n+@end\n+\n+@interface Object3\n+- (id)initWithData:(Object2 *)data;\n+@end\n+\n+void foo(void) {\n+  id obj1, obj2 = 0;\n+  obj2 = [obj1 initWithData: obj2];\n+     /* { dg-warning \"multiple methods named .\\\\-initWithData:. found\" \"\" { target *-*-* } 26 } */\n+     /* { dg-warning \"using .\\\\-\\\\(void\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 13 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object1 \\\\*\\\\)data.\" \"\" { target *-*-* } 17 } */\n+     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(Object2 \\\\*\\\\)data.\" \"\" { target *-*-* } 21 } */\n+\n+     /* The following error is a consequence of picking the \"wrong\" method signature.  */\n+     /* { dg-error \"void value not ignored as it ought to be\" \"\" { target *-*-* } 26 } */\n+}"}, {"sha": "556830f3449fe482c0ff11c1852bd29a1623023c", "filename": "gcc/testsuite/obj-c++.dg/method-17.mm", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-17.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,32 @@\n+/* When there is only one candidate method available, make sure the\n+   compiler uses its argument/return types when constructing the\n+   message sends (so that proper C/C++ argument conversions may\n+   take place).  */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+extern \"C\" void abort(void);\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+static double d = 4.5920234e2;\n+\n+@interface Foo : Object\n+-(void) brokenType: (int)x floatingPoint: (double)y;\n+@end\n+\n+\n+@implementation Foo\n+-(void) brokenType: (int)x floatingPoint: (double)y\n+{\n+\tCHECK_IF(x == 459);\n+\tCHECK_IF(y == d);\n+}\n+@end\n+\n+int main(void)\n+{\n+\tFoo *foo=[Foo new];\n+\t[foo brokenType: (int)d floatingPoint: d];\n+\treturn 0;\n+}\n+"}, {"sha": "411caac111ad283318ec7431a18ce6905a4e8097", "filename": "gcc/testsuite/obj-c++.dg/method-18.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-18.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-18.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-18.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Igor Seleznev <selez@mail.ru>.  */\n+/* This used to be broken.  */\n+\n+#include <objc/objc.h>\n+\n+@interface A\n++ (A *)currentContext;\n+@end\n+\n+@interface B\n++ (B *)currentContext;\n+@end\n+\n+int main()\n+{\n+    [A currentContext];  /* { dg-bogus \"multiple declarations\" }  */\n+    return 0;\n+}\n+\n+@implementation A\n++ (A *)currentContext { return nil; }\n+@end\n+@implementation B\n++ (B *)currentContext { return nil; }\n+@end"}, {"sha": "55890f5b404dea0a6e20605e2d9388432aa53277", "filename": "gcc/testsuite/obj-c++.dg/method-19.mm", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-19.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,81 @@\n+/* Test if instance methods of root classes are used as class methods, if no\n+   \"real\" methods are found.  For receivers of type 'id' and 'Class', all\n+   root classes must be considered.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+\n+#ifdef __NEXT_RUNTIME__\n+#include <objc/objc-runtime.h>\n+#define OBJC_GETCLASS objc_getClass\n+#else\n+#include <objc/objc-api.h>\n+#define OBJC_GETCLASS objc_get_class\n+#endif\n+\n+extern \"C\" {\n+  extern void abort(void);\n+  extern int strcmp(const char *, const char *);\n+}\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+@protocol Proto\n+- (const char *) method4;\n+@end\n+\n+@interface Root\n+{ Class isa; }\n++ (const char *) method2;\n+@end\n+\n+@interface Derived: Root\n+- (const char *) method1;\n+- (const char *) method2;\n+- (const char *) method3;\n+@end\n+\n+@interface Root (Categ)\n+- (const char *) method3;\n+@end\n+\n+@implementation Root (Categ)\n+- (const char *) method3 { return \"Root(Categ)::-method3\"; }\n+- (const char *) method4 { return \"Root(Categ)::-method4\"; }\n+@end\n+\n+@implementation Derived\n+- (const char *) method1 { return \"Derived::-method1\"; }\n+- (const char *) method2 { return \"Derived::-method2\"; }\n+- (const char *) method3 { return \"Derived::-method3\"; }\n+@end\n+\n+@implementation Root\n+#ifdef __NEXT_RUNTIME__\n++ initialize { return self; }\n+#endif\n+- (const char *) method1 { return \"Root::-method1\"; }\n++ (const char *) method2 { return \"Root::+method2\"; }\n+@end\n+\n+int main(void)\n+{\n+  Class obj = OBJC_GETCLASS(\"Derived\");\n+\n+  /* None of the following should elicit compiler-time warnings.  */\n+\n+  CHECK_IF(!strcmp([Root method1], \"Root::-method1\"));\n+  CHECK_IF(!strcmp([Root method2], \"Root::+method2\"));\n+  CHECK_IF(!strcmp([Root method3], \"Root(Categ)::-method3\"));\n+  CHECK_IF(!strcmp([Root method4], \"Root(Categ)::-method4\"));\n+  CHECK_IF(!strcmp([Derived method1], \"Root::-method1\"));\n+  CHECK_IF(!strcmp([Derived method2], \"Root::+method2\"));\n+  CHECK_IF(!strcmp([Derived method3], \"Root(Categ)::-method3\"));\n+  CHECK_IF(!strcmp([Derived method4], \"Root(Categ)::-method4\"));\n+  CHECK_IF(!strcmp([obj method1], \"Root::-method1\"));\n+  CHECK_IF(!strcmp([obj method2], \"Root::+method2\"));\n+  CHECK_IF(!strcmp([obj method3], \"Root(Categ)::-method3\"));\n+  CHECK_IF(!strcmp([obj method4], \"Root(Categ)::-method4\"));\n+\n+  return 0;\n+}"}, {"sha": "96982254aa9f397d422b1833aabda0cfc2b6dcab", "filename": "gcc/testsuite/obj-c++.dg/method-20.mm", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-20.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-20.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-20.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,17 @@\n+/* Test if context-sensitive \"in\", \"out\", \"byref\", etc., qualifiers can be\n+   used as method selectors.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+@interface Foo\n+- (void)insertNewButtonImage:(Foo *)newButtonImage in:(Foo *)buttonCell;\n++ (oneway void)oneway:(int)i2 byref:(int)i3 out:(float)f4 bycopy:(float)f5;\n+@end\n+\n+@implementation Foo\n+- (void)insertNewButtonImage:(Foo *)newButtonImage in:(Foo *)buttonCell { }\n++ (oneway void)oneway:(int)i2 byref:(int)i3 out:(float)f4 bycopy:(float)f5 { }\n+@end\n+\n+/* { dg-final { scan-assembler \"insertNewButtonImage:in:\" } } */\n+/* { dg-final { scan-assembler \"oneway:byref:out:bycopy:\" } } */"}, {"sha": "94291a5a106e43c4f2ee187e1881c3d53f42d768", "filename": "gcc/testsuite/obj-c++.dg/method-21.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-21.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* Test for spurious \"may or may not return a value\" warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object\n+- (id) meth1;\n+- (void) meth2;\n+@end\n+\n+extern int bar;\n+\n+@implementation Foo\n+- (id) meth1 {\n+  if (bar)\n+    return [Object new];\n+  return; /* { dg-error \"return.statement with no value\" } */\n+}\n+- (void) meth2 {\n+  if (!bar)\n+    return;\n+  bar = 0;\n+}\n+@end"}, {"sha": "310437a00235a842c669ea97b189e82c38222f91", "filename": "gcc/testsuite/obj-c++.dg/method-8.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-8.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,30 @@\n+/* Tests of duplication.  */\n+/* { dg-do compile } */\n+\n+@interface class1\n+- (int) meth1;\n+- (void) meth1;  /* { dg-error \"duplicate declaration of method .\\\\-meth1.\" } */\n+@end\n+\n+@interface class2\n++ (void) meth1;\n++ (int) meth1;  /* { dg-error \"duplicate declaration of method .\\\\+meth1.\" } */\n+@end\n+\n+@interface class3\n+- (int) meth1;\n+@end\n+\n+@implementation class3\n+- (int) meth1 { return 0; } /* { dg-error \"previously defined here\" } */\n+- (int) meth1 { return 0; } /* { dg-error \"redefinition of\" } */\n+@end\n+\n+@interface class4\n++ (void) meth1;\n+@end\n+\n+@implementation class4\n++ (void) meth1 {} /* { dg-error \"previously defined here\" } */\n++ (void) meth1 {} /* { dg-error \"redefinition of\" } */\n+@end"}, {"sha": "4509c4aa477e6e807b92698e85ea9a8bef5fab4a", "filename": "gcc/testsuite/obj-c++.dg/method-9.mm", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-9.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,33 @@\n+/* Test for lookup of class (factory) methods.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+@interface MyBase \n+- (void) rootInstanceMethod;\n+@end\n+\n+@interface MyIntermediate: MyBase\n+@end\n+\n+@interface MyDerived: MyIntermediate\n+- (void) instanceMethod;\n++ (void) classMethod;\n+@end\n+\n+@implementation MyDerived\n+- (void) instanceMethod {\n+}\n+\n++ (void) classMethod {                    /* If a class method is not found, the root  */\n+    [self rootInstanceMethod];            /* class is searched for an instance method  */\n+    [MyIntermediate rootInstanceMethod];  /* with the same name.                       */\n+\n+    [self instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n+    [MyDerived instanceMethod];   /* { dg-warning \".MyDerived. may not respond to .\\\\+instanceMethod.\" } */\n+}\n+@end\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n+"}, {"sha": "df0a44cd8dd4fd24d73776732f2083c349c7dae0", "filename": "gcc/testsuite/obj-c++.dg/objc-gc-3.mm", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fobjc-gc-3.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,63 @@\n+/* Test looking up fields in superclasses in the context of write-barriers\n+   (where component references get rewritten).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-fobjc-gc\" } */\n+\n+#include <objc/Object.h>\n+\n+@class MyWindow;\n+\n+@interface MyDocument : Object {\n+    MyWindow *_window;\n+}\n+@end\n+\n+@interface MyFileDocument : MyDocument {\n+     struct {\n+        unsigned int autoClose:1;\n+        unsigned int openForUI:1;\n+        unsigned int isClosing:1;\n+        unsigned int needsDiskCheck:1;\n+        unsigned int isWritable:1;\n+        unsigned int representsFileOnDisk:1;\n+        unsigned int RESERVED:26;\n+    } _fdFlags;\n+}\n+@end\n+\n+@interface MyTextFileDocument : MyFileDocument {\n+    Object *_textStorage;\n+    struct __tfdFlags {\n+        unsigned int immutable:1;\n+        unsigned int lineEnding:2;\n+        unsigned int isClosing:1;\n+        unsigned int settingsAreSet:1;\n+        unsigned int usesTabs:1;\n+        unsigned int isUTF8WithBOM:1;\n+        unsigned int wrapsLines:1;\n+        unsigned int usingDefaultLanguage:1;\n+        unsigned int RESERVED:23;\n+    } _tfdFlags;\n+    int _tabWidth;\n+    int _indentWidth;\n+}\n+@end\n+\n+@interface MyRTFFileDocument : MyTextFileDocument\n+- (BOOL)readFromFile:(const char *)fileName ofType:(const char *)type;\n+@end\n+\n+@implementation MyRTFFileDocument\n+- (BOOL)readFromFile:(const char *)fileName ofType:(const char *)type {\n+        if (_textStorage && fileName) {\n+            [_textStorage free];\n+\t    return YES;\n+        } else if (type) {\n+            _textStorage = [MyRTFFileDocument new];\n+\t    return NO;\n+        }\n+   return (fileName && type);\n+}\n+@end"}, {"sha": "5f6daa42bf32705e80d4de068eed52977c993cdd", "filename": "gcc/testsuite/obj-c++.dg/try-catch-10.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftry-catch-10.mm?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* Check that taking the address of a local variable marked 'volatile'\n+   by the compiler does not generate untoward errors.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+\n+void foo (int *arg1, int *arg2)\n+{\n+  *arg1 = *arg2;\n+}\n+\n+void bar (int arg) {\n+  int rcvr;\n+\n+  @try {\n+    rcvr = arg;\n+  }\n+  @finally {\n+    int *rcvr0 = &rcvr;\n+    foo (rcvr0, &arg);\n+  }\n+}\n+"}, {"sha": "ddd3b03a309084c8aead83a4a210857d1dcc7789", "filename": "gcc/testsuite/objc.dg/bitfield-5.m", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fbitfield-5.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,113 @@\n+/* Check ObjC class layout follows the ABI (informally)\n+   set in the past.  ObjC structs must be laid out as if\n+   all ivars, including those inherited from superclasses,\n+   were defined at once (i.e., any padding introduced for\n+   superclasses should be removed).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-Wpadded\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+#define CHECK_IF(expr) if(!(expr)) abort()\n+\n+enum Enum { zero, one, two, three, four };\n+\n+@interface Base: Object {\n+@public\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+struct Base_0 {\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+}; /* { dg-warning \"padding struct size to alignment boundary\" } */\n+\n+@interface Derived: Base {\n+@public\n+  signed e: 5;\n+  unsigned f: 4;\n+  enum Enum g: 3;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+struct Derived_0 {\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+  signed e: 5;\n+  int f: 4;\n+  enum Enum g: 3;\n+}; /* { dg-warning \"padding struct size to alignment boundary\" } */\n+\n+@interface Leaf: Derived {\n+@public\n+  signed h: 2;\n+} /* { dg-warning \"padding struct size to alignment boundary\" } */\n+@end\n+\n+struct Leaf_0 {\n+  Class isa;\n+  unsigned a: 2;\n+  int b: 3;\n+  enum Enum c: 4;\n+  unsigned d: 5;\n+  signed e: 5;\n+  unsigned f: 4;\n+  enum Enum g: 3;\n+  signed h: 2;\n+}; /* { dg-warning \"padding struct size to alignment boundary\" } */\n+  \n+/* Note that the semicolon after @defs(...) is optional.  */\n+\n+typedef struct { @defs(Base) } Base_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+typedef struct { @defs(Derived); } Derived_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+typedef struct { @defs(Leaf); } Leaf_t;  /* { dg-warning \"padding struct size to alignment boundary\" } */\n+\n+int main(void)\n+{\n+  struct Leaf_0 l_0;\n+  Leaf *l = (Leaf *)&l_0;\n+  Leaf_t *l_t = (Leaf_t *)&l_0;\n+\n+  CHECK_IF(sizeof(Base_t) == sizeof(Base));\n+  CHECK_IF(sizeof(Derived_t) == sizeof(Derived));\n+  CHECK_IF(sizeof(Leaf_t) == sizeof(Leaf));\n+\n+  CHECK_IF(sizeof(struct Base_0) == sizeof(Base));\n+  CHECK_IF(sizeof(struct Derived_0) == sizeof(Derived));\n+  CHECK_IF(sizeof(struct Leaf_0) == sizeof(Leaf));\n+\n+  l_0.isa = (Class)0;\n+  l_0.a = 3;\n+  l_0.b = 0;\n+  l_0.c = three;\n+  l_0.d = 31;\n+  l_0.e = 0;\n+  l_0.f = 15;\n+  l_0.g = zero;\n+  l_0.h = -2;\n+\n+  CHECK_IF(!l_t->isa);\n+  CHECK_IF(l->a == 3 && l_t->a == 3);\n+  CHECK_IF(!l->b && !l_t->b);\n+  CHECK_IF(l->c == three && l_t->c == three);\n+  CHECK_IF(l->d == 31 && l_t->d == 31);\n+  CHECK_IF(!l->e && !l_t->e);\n+  CHECK_IF(l->f == 15 && l_t->f == 15);\n+  CHECK_IF(l->g == zero && l_t->g == zero);\n+  CHECK_IF(l->h == -2 && l_t->h == -2);\n+  \n+  return 0;\n+}"}, {"sha": "f97f2317962f19b648c9abf608aceba2e287ffeb", "filename": "gcc/testsuite/objc.dg/class-protocol-1.m", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -313,9 +313,9 @@ @interface MyOtherClass1 <MyOtherProto1>\n   { /* id <protocol>, SomeClass *  */\n     mc1 == objP1;\n     objP1 == mc1;\n-    \n-    mc1 == objP2; /* { dg-warning \"does not implement\" } */\n-    objP2 == mc1; /* { dg-warning \"does not implement\" } */\n+\n+    mc1 == objP2; /* { dg-warning \"lacks a cast\" } */\n+    objP2 == mc1; /* { dg-warning \"lacks a cast\" } */\n   }\n   { /* id <protocol>, id  */\n     obj == objP1;\n@@ -371,19 +371,19 @@ @interface MyOtherClass1 <MyOtherProto1>\n     objP5 = objP1; /* { dg-warning \"does not conform\" } */\n   }\n   { /* id <protocol>, SomeClass *  */\n-    mc1 = objP1; /* { dg-warning \"incompatible\" } */ /* FIXME: should be \"\" */\n+    mc1 = objP1;\n     objP1 = mc1;\n-    \n-    mc1 = objP2; /* { dg-warning \"incompatible\" } */ /* FIXME: should be \"does not implement\" */\n+\n+    mc1 = objP2; /* { dg-warning \"does not conform\" } */\n     objP2 = mc1; /* { dg-warning \"does not implement\" } */\n   }\n   { /* id <protocol>, id  */\n     obj = objP1;\n     objP1 = obj;\n   }\n   { /* id <protocol>, Class  */\n-    cls = objP1; /* { dg-warning \"incompatible\" } */\n-    objP1 = cls; /* { dg-warning \"incompatible\" } */\n+    cls = objP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    objP1 = cls; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n   }\n   { /* id <protocol>, non-ObjC  */\n     num = objP1; /* { dg-warning \"makes integer\" } */\n@@ -401,11 +401,11 @@ @interface MyOtherClass1 <MyOtherProto1>\n   }\n   { /* Class <protocol>, SomeClass * */\n     /* These combinations should always elicit a warning.  */\n-    mc1 = clsP1; /* { dg-warning \"incompatible\" } */\n-    clsP1 = mc1; /* { dg-warning \"incompatible\" } */\n+    mc1 = clsP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    clsP1 = mc1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n     \n-    mc1 = clsP2; /* { dg-warning \"incompatible\" } */\n-    clsP2 = mc1; /* { dg-warning \"incompatible\" } */\n+    mc1 = clsP2; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    clsP2 = mc1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n   }\n   { /* Class <protocol>, id */\n     obj = clsP1;\n@@ -423,8 +423,8 @@ @interface MyOtherClass1 <MyOtherProto1>\n     clsP1 = ptr;\n   }\n   { /* Class <protocol>, id <protocol> */\n-    clsP1 = objP1; /* { dg-warning \"incompatible\" } */\n-    objP1 = clsP1; /* { dg-warning \"incompatible\" } */\n+    clsP1 = objP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+    objP1 = clsP1; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n   }\n }\n "}, {"sha": "5bf59a73cbae49f8b47c54cb5bffcad6ef5902b6", "filename": "gcc/testsuite/objc.dg/comp-types-1.m", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-1.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -32,9 +32,9 @@ int main()\n   /* Assigning to a 'MyClass *' variable should always generate a\n      warning, unless done from an 'id'.  */\n   obj_c = obj;    /* Ok */\n-  obj_c = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n-  obj_c = obj_cp; /* { dg-warning \"incompatible pointer type\" } */\n-  obj_c = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_c = obj_p;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_c = obj_cp; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_c = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n \n   /* Assigning to an 'id<MyProtocol>' variable should generate a\n      warning if done from a 'MyClass *' (which doesn't implement\n@@ -43,14 +43,15 @@ int main()\n   obj_p = obj;    /* Ok */\n   obj_p = obj_c;  /* { dg-warning \"does not implement\" } */\n   obj_p = obj_cp; /* Ok  */\n-  obj_p = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_p = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n \n   /* Assigning to a 'MyOtherClass *' variable should always generate\n-     a warning, unless done from an 'id'  */\n+     a warning, unless done from an 'id' or an 'id<MyProtocol>' (since\n+     MyOtherClass implements MyProtocol).  */\n   obj_cp = obj;    /* Ok */\n-  obj_cp = obj_c;  /* { dg-warning \"incompatible pointer type\" } */\n-  obj_cp = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n-  obj_cp = obj_C;  /* { dg-warning \"incompatible pointer type\" } */\n+  obj_cp = obj_c;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_cp = obj_p;  /* Ok */\n+  obj_cp = obj_C;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n \n   /* Any comparison involving an 'id' must be without warnings.  */\n   if (obj == obj_p) ;  /* Ok  */ /*Bogus warning here in 2.95.4*/\n@@ -64,8 +65,8 @@ int main()\n \n   /* Any comparison between 'MyClass *' and anything which is not an 'id'\n      must generate a warning.  */\n-  if (obj_c == obj_p) ; /* { dg-warning \"does not implement\" } */\n-  if (obj_p == obj_c) ; /* { dg-warning \"does not implement\" } */\n+  if (obj_c == obj_p) ; /* { dg-warning \"lacks a cast\" } */\n+  if (obj_p == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n   if (obj_c == obj_cp) ; /* { dg-warning \"lacks a cast\" } */\n   if (obj_cp == obj_c) ; /* { dg-warning \"lacks a cast\" } */\n   if (obj_c == obj_C) ;  /* { dg-warning \"lacks a cast\" } */"}, {"sha": "8cd53404f5265e21f7a2704ac1f064576f087e41", "filename": "gcc/testsuite/objc.dg/comp-types-10.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-10.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@protocol Foo\n+- (id)meth1;\n+- (id)meth2:(int)arg;\n+@end\n+\n+@interface Derived1: Object\n+@end\n+\n+@interface Derived2: Object\n++ (Derived1 *)new;\n+@end\n+\n+id<Foo> func(void) {\n+  Object *o = [Object new];\n+  return o;  /* { dg-warning \"class .Object. does not implement the .Foo. protocol\" } */\n+}\n+\n+@implementation Derived2\n++ (Derived1 *)new {\n+  Derived2 *o = [super new];\n+  return o;  /* { dg-warning \"distinct Objective\\\\-C type in return\" } */\n+}\n+@end\n+"}, {"sha": "c112ecbe54d70b6a28a86621a6dc69bf075f9348", "filename": "gcc/testsuite/objc.dg/comp-types-5.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-5.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -19,8 +19,8 @@ int main()\n   obj_cp = obj; /* Ok */\n   obj = obj_cp; /* Ok */\n \n-  obj_cp = obj_p; /* { dg-warning \"incompatible pointer type\" } */\n-  obj_p = obj_cp; /* Ok */ /* Spurious 2.95.4 warning here.  */\n+  obj_cp = obj_p; /* Ok */\n+  obj_p = obj_cp; /* Ok */\n   \n   if (obj_cp == obj) ; /* Ok */\n   if (obj == obj_cp) ; /* Ok */"}, {"sha": "e23558114bcd24fd050dcaba931f67ae9077347a", "filename": "gcc/testsuite/objc.dg/comp-types-6.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-6.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -1,6 +1,7 @@\n /* Test assignments and comparisons involving category protocols.  */\n /* Author: Nicola Pero <nicola@brainstorm.co.uk>.  */\n /* { dg-do compile } */\n+\n #include <objc/objc.h>\n \n @protocol MyProtocol\n@@ -23,8 +24,8 @@ int main()\n   MyClass *obj_cp = nil;\n   MyOtherClass *obj_cp2 = nil;\n \n-  obj_cp = obj_p;  /* { dg-warning \"incompatible pointer type\" } */\n-  obj_cp2 = obj_p; /* { dg-warning \"incompatible pointer type\" } */\n+  obj_cp = obj_p;  /* { dg-warning \"distinct Objective\\\\-C type\" } */\n+  obj_cp2 = obj_p; /* { dg-warning \"distinct Objective\\\\-C type\" } */\n   obj_p = obj_cp;  /* Ok */\n   obj_p = obj_cp2; /* Ok */\n "}, {"sha": "3abcde5bec6fc29e9e2b079c0d819ac323a58deb", "filename": "gcc/testsuite/objc.dg/comp-types-9.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-9.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,19 @@\n+/* Yet another mysterious gimplifier crasher.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+@class NSString;\n+@protocol NSObject\n+@end\n+@interface NSObject <NSObject> {\n+}\n+@end\n+void __setRetained(id *ivar, id value) {\n+    *ivar = value;\n+}\n+static NSString *_logProcessPrefix = 0;\n+@implementation NSObject (ScopeAdditions)\n++ (void)setObjectLogProcessPrefix:(NSString *)processPrefix {\n+    __setRetained(&_logProcessPrefix, processPrefix);\n+}\n+@end"}, {"sha": "6fb114217ab466de816870d3eb6f4b1759ce22f9", "filename": "gcc/testsuite/objc.dg/layout-1.m", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flayout-1.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,15 @@\n+/* Ensure that we do not get bizarre warnings referring to\n+   __attribute__((packed)) or some such.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpadded -Wpacked\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Derived1: Object\n+{ }\n+@end\n+\n+@interface Derived2: Object\n+- (id) foo;\n+@end\n+"}, {"sha": "ade5d64e71a33099d0f98bc5a0f4bc7b2d0a2dfc", "filename": "gcc/testsuite/objc.dg/method-9.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-9.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -39,7 +39,7 @@ + (NTGridDataObject*)dataObject:(id<MyObject, MyCoding>)data\n     /* { dg-warning \"also found .\\\\-\\\\(id\\\\)initWithData:\\\\(int\\\\)data.\" \"\" { target *-*-* } 15 } */\n \n     /* The following warning is a consequence of picking the \"wrong\" method signature.  */\n-    /* { dg-warning \"passing argument 1 of .initWithData:. from incompatible pointer type\" \"\" { target *-*-* } 35 } */\n+    /* { dg-warning \"passing argument 1 of .initWithData:. from distinct Objective\\\\-C type\" \"\" { target *-*-* } 35 } */\n     return result;\n }\n @end"}, {"sha": "df0a44cd8dd4fd24d73776732f2083c349c7dae0", "filename": "gcc/testsuite/objc.dg/objc-gc-4.m", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-gc-4.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,63 @@\n+/* Test looking up fields in superclasses in the context of write-barriers\n+   (where component references get rewritten).  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-fobjc-gc\" } */\n+\n+#include <objc/Object.h>\n+\n+@class MyWindow;\n+\n+@interface MyDocument : Object {\n+    MyWindow *_window;\n+}\n+@end\n+\n+@interface MyFileDocument : MyDocument {\n+     struct {\n+        unsigned int autoClose:1;\n+        unsigned int openForUI:1;\n+        unsigned int isClosing:1;\n+        unsigned int needsDiskCheck:1;\n+        unsigned int isWritable:1;\n+        unsigned int representsFileOnDisk:1;\n+        unsigned int RESERVED:26;\n+    } _fdFlags;\n+}\n+@end\n+\n+@interface MyTextFileDocument : MyFileDocument {\n+    Object *_textStorage;\n+    struct __tfdFlags {\n+        unsigned int immutable:1;\n+        unsigned int lineEnding:2;\n+        unsigned int isClosing:1;\n+        unsigned int settingsAreSet:1;\n+        unsigned int usesTabs:1;\n+        unsigned int isUTF8WithBOM:1;\n+        unsigned int wrapsLines:1;\n+        unsigned int usingDefaultLanguage:1;\n+        unsigned int RESERVED:23;\n+    } _tfdFlags;\n+    int _tabWidth;\n+    int _indentWidth;\n+}\n+@end\n+\n+@interface MyRTFFileDocument : MyTextFileDocument\n+- (BOOL)readFromFile:(const char *)fileName ofType:(const char *)type;\n+@end\n+\n+@implementation MyRTFFileDocument\n+- (BOOL)readFromFile:(const char *)fileName ofType:(const char *)type {\n+        if (_textStorage && fileName) {\n+            [_textStorage free];\n+\t    return YES;\n+        } else if (type) {\n+            _textStorage = [MyRTFFileDocument new];\n+\t    return NO;\n+        }\n+   return (fileName && type);\n+}\n+@end"}, {"sha": "5f6daa42bf32705e80d4de068eed52977c993cdd", "filename": "gcc/testsuite/objc.dg/try-catch-9.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e270fe6ed923709f94aef6ed758009293a2df7/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-9.m?ref=d1e270fe6ed923709f94aef6ed758009293a2df7", "patch": "@@ -0,0 +1,25 @@\n+/* Check that taking the address of a local variable marked 'volatile'\n+   by the compiler does not generate untoward errors.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+\n+void foo (int *arg1, int *arg2)\n+{\n+  *arg1 = *arg2;\n+}\n+\n+void bar (int arg) {\n+  int rcvr;\n+\n+  @try {\n+    rcvr = arg;\n+  }\n+  @finally {\n+    int *rcvr0 = &rcvr;\n+    foo (rcvr0, &arg);\n+  }\n+}\n+"}]}