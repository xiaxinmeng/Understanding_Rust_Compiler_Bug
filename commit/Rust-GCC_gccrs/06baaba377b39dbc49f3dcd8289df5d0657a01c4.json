{"sha": "06baaba377b39dbc49f3dcd8289df5d0657a01c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiYWFiYTM3N2IzOWRiYzQ5ZjNkY2Q4Mjg5ZGY1ZDA2NTdhMDFjNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-20T15:54:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-20T15:54:03Z"}, "message": "re PR tree-optimization/45704 (load byte instruction is used for volatile int)\n\n2010-09-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/45704\n\t* gimplify.c (gimplify_modify_expr_rhs): Preserve volatileness.\n\n\t* gcc.dg/torture/pr45704.c: New testcase.\n\nFrom-SVN: r164439", "tree": {"sha": "889547809b1062951c7b4d333495f6c88dad4420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889547809b1062951c7b4d333495f6c88dad4420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06baaba377b39dbc49f3dcd8289df5d0657a01c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06baaba377b39dbc49f3dcd8289df5d0657a01c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06baaba377b39dbc49f3dcd8289df5d0657a01c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06baaba377b39dbc49f3dcd8289df5d0657a01c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e0f5ff1f3be1ddccc2a50cb371b5dce94124b1"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "9f4eaccae71028719211a46787c94dadd0763d58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06baaba377b39dbc49f3dcd8289df5d0657a01c4", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45704\n+\t* gimplify.c (gimplify_modify_expr_rhs): Preserve volatileness.\n+\n 2010-09-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/45605"}, {"sha": "4e6a037e7ae0a1c38fb0c07901c6905cb8c3e770", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=06baaba377b39dbc49f3dcd8289df5d0657a01c4", "patch": "@@ -4200,9 +4200,18 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n \t     This kind of code arises in C++ when an object is bound\n \t     to a const reference, and if \"x\" is a TARGET_EXPR we want\n \t     to take advantage of the optimization below.  */\n+\t    bool volatile_p = TREE_THIS_VOLATILE (*from_p);\n \t    tree t = gimple_fold_indirect_ref_rhs (TREE_OPERAND (*from_p, 0));\n \t    if (t)\n \t      {\n+\t\tif (TREE_THIS_VOLATILE (t) != volatile_p)\n+\t\t  {\n+\t\t    if (TREE_CODE_CLASS (TREE_CODE (t)) == tcc_declaration)\n+\t\t      t = build_simple_mem_ref_loc (EXPR_LOCATION (*from_p),\n+\t\t\t\t\t\t    build_fold_addr_expr (t));\n+\t\t    if (REFERENCE_CLASS_P (t))\n+\t\t      TREE_THIS_VOLATILE (t) = volatile_p;\n+\t\t  }\n \t\t*from_p = t;\n \t\tret = GS_OK;\n \t\tchanged = true;"}, {"sha": "6dac3e5e587d621f976b875d0fb41586c21f4a4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06baaba377b39dbc49f3dcd8289df5d0657a01c4", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45704\n+\t* gcc.dg/torture/pr45704.c: New testcase.\n+\n 2010-09-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/45605"}, {"sha": "487b30a96c03902e709e476a4507af89f502fa43", "filename": "gcc/testsuite/gcc.dg/torture/pr45704.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45704.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06baaba377b39dbc49f3dcd8289df5d0657a01c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45704.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr45704.c?ref=06baaba377b39dbc49f3dcd8289df5d0657a01c4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+\n+struct st {\n+    int ptr;\n+};\n+\n+int foo(struct st *st)\n+{\n+  int v = *(volatile int *)&st->ptr;\n+  return v & 0xff;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"={v}\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}