{"sha": "07c9f0961d540e2cb63eb2326e673b13d1df4a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjOWYwOTYxZDU0MGUyY2I2M2ViMjMyNmU2NzNiMTNkMWRmNGEyNg==", "commit": {"author": {"name": "Andrew Sutton", "email": "asutton@lock3software.com", "date": "2019-10-23T13:05:32Z"}, "committer": {"name": "Andrew Sutton", "email": "asutton@gcc.gnu.org", "date": "2019-10-23T13:05:32Z"}, "message": "Fix a bug with type constraints in constructors.\n\ngcc/cp/\n\t* parser.c (cp_parser_constructor_declarator_p): Pass an empty\n\tdecl-specifier-seq to make sure we parse type constraints as part\n\tof a type-specifier.\n\ngcc/testsuite/\n\t* g++.dg/cpp2a/concepts5.C: New test.\n\nFrom-SVN: r277323", "tree": {"sha": "2b9aaf8e126d6b731f3379b23cc263f78ddbad94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9aaf8e126d6b731f3379b23cc263f78ddbad94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c9f0961d540e2cb63eb2326e673b13d1df4a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c9f0961d540e2cb63eb2326e673b13d1df4a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c9f0961d540e2cb63eb2326e673b13d1df4a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c9f0961d540e2cb63eb2326e673b13d1df4a26/comments", "author": {"login": "asutton", "id": 570796, "node_id": "MDQ6VXNlcjU3MDc5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/570796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asutton", "html_url": "https://github.com/asutton", "followers_url": "https://api.github.com/users/asutton/followers", "following_url": "https://api.github.com/users/asutton/following{/other_user}", "gists_url": "https://api.github.com/users/asutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/asutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asutton/subscriptions", "organizations_url": "https://api.github.com/users/asutton/orgs", "repos_url": "https://api.github.com/users/asutton/repos", "events_url": "https://api.github.com/users/asutton/events{/privacy}", "received_events_url": "https://api.github.com/users/asutton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82e8e335f917b9ce40801838c06f7945cf88da43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e8e335f917b9ce40801838c06f7945cf88da43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e8e335f917b9ce40801838c06f7945cf88da43"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "d1518123b2481ced6589390798f73b9185b4e9af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07c9f0961d540e2cb63eb2326e673b13d1df4a26", "patch": "@@ -126,6 +126,12 @@\n \t* decl.c (cxx_maybe_build_cleanup): When clearing location of cleanup,\n \tif cleanup is a nop, clear location of its operand too.\n \n+2019-10-15  Andrew Sutton  <asutton@lock3software.com>\n+\n+\t* parser.c (cp_parser_constructor_declarator_p): Pass an empty\n+\tdecl-specifier-seq to make sure we parse type constraints as part\n+\tof a type-specifier.\n+\n 2019-10-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* class.c (build_clones): Break out of clone_function_decl.  Just"}, {"sha": "c597adb38f193251c28d5f9e62e0510a369a1476", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=07c9f0961d540e2cb63eb2326e673b13d1df4a26", "patch": "@@ -28336,11 +28336,19 @@ cp_parser_constructor_declarator_p (cp_parser *parser, cp_parser_flags flags,\n \t     looking for the type-specifier.  It is actually a function named\n \t     `T::fn' that takes one parameter (of type `int') and returns a\n \t     value of type `S'.  Constructors can be friends, but they must\n-\t     use a qualified name.  */\n+\t     use a qualified name.\n+\n+\t     Parse with an empty set of declaration specifiers since we're\n+\t     trying to match a decl-specifier-seq of the first parameter.  \n+\t     This must be non-null so that cp_parser_simple_type_specifier\n+\t     will recognize a constrained placeholder type such as:\n+\t     'C<int> auto' where C is a type concept.  */\n+\t  cp_decl_specifier_seq ctor_specs;\n+\t  clear_decl_specs (&ctor_specs);\n \t  cp_parser_type_specifier (parser,\n \t\t\t\t    (friend_p ? CP_PARSER_FLAGS_NONE\n \t\t\t\t     : (flags & ~CP_PARSER_FLAGS_OPTIONAL)),\n-\t\t\t\t    /*decl_specs=*/NULL,\n+\t\t\t\t    /*decl_specs=*/&ctor_specs,\n \t\t\t\t    /*is_declarator=*/true,\n \t\t\t\t    /*declares_class_or_enum=*/NULL,\n \t\t\t\t    /*is_cv_qualifier=*/NULL);"}, {"sha": "2fd237bd8be1d5dad146fe0a3b2923f04855057b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07c9f0961d540e2cb63eb2326e673b13d1df4a26", "patch": "@@ -344,6 +344,10 @@\n \t* gcc.dg/ipa/pr91089.c: Add sub-test for range analysis.\n \t* g++.dg/tree-ssa/ivopts-3.C: Force a function to be noinline.\n \n+2019-10-15  Andrew Sutton  <asutton@lock3software.com>\n+\n+\t* g++.dg/cpp2a/concepts5.C: New test.\n+\n 2019-10-15  Andrew Pinski  <apinski@marvell.com>\n \n \t* gcc.c-torture/compile/20191015-1.c: New test."}, {"sha": "24ac2aa4095ab4f16035696ead1c22750c1ab913", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts5.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9f0961d540e2cb63eb2326e673b13d1df4a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts5.C?ref=07c9f0961d540e2cb63eb2326e673b13d1df4a26", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++2a } }\n+\n+\n+template <typename T, typename U>\n+concept same_as = __is_same_as(T, U);\n+\n+template<typename T>\n+concept character = same_as<T, char>;\n+\n+struct T\n+{\n+  constexpr T(same_as<int> auto const x) : val(0) { }\n+\n+  constexpr T(character auto const x) : val(1) { }\n+\n+  int val;\n+};\n+\n+void test()\n+{\n+  static_assert(T(0).val == 0);\n+  static_assert(T('a').val == 1);\n+}\n+"}]}