{"sha": "290dfd9bc7bea2f102f29723d20674f1b57332f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwZGZkOWJjN2JlYTJmMTAyZjI5NzIzZDIwNjc0ZjFiNTczMzJmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-18T11:20:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-18T11:20:43Z"}, "message": "re PR target/89369 (pseudo-RNG miscompiled on s390x-linux with -O2 -march=zEC12 -mtune=z13 starting with r266203)\n\n\tPR target/89369\n\t* config/s390/s390.md (*r<noxa>sbg_<mode>_srl_bitmask,\n\t*r<noxa>sbg_<mode>_sll, *r<noxa>sbg_<mode>_srl): Don't construct\n\tpattern in a temporary buffer.\n\t(*r<noxa>sbg_sidi_srl): Likewise.  Always use 32 as I3 rather\n\tthan 64-operands[2].\n\n\t* gcc.c-torture/execute/pr89369.c: New test.\n\t* gcc.target/s390/md/rXsbg_mode_sXl.c (rosbg_si_srl,\n\trxsbg_si_srl): Expect last 3 operands 32,63,62 rather than\n\t34,63,62.\n\nFrom-SVN: r268984", "tree": {"sha": "e5df51ca84ece4a9de36fd386608eed8396321e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5df51ca84ece4a9de36fd386608eed8396321e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/290dfd9bc7bea2f102f29723d20674f1b57332f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290dfd9bc7bea2f102f29723d20674f1b57332f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290dfd9bc7bea2f102f29723d20674f1b57332f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290dfd9bc7bea2f102f29723d20674f1b57332f1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a10e76edcee03f7c0a5136a6e4b1ac483ee0d70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10e76edcee03f7c0a5136a6e4b1ac483ee0d70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10e76edcee03f7c0a5136a6e4b1ac483ee0d70f"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "f8cd9cfc28fca8853c3b515227716c499db6a800", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=290dfd9bc7bea2f102f29723d20674f1b57332f1", "patch": "@@ -1,5 +1,12 @@\n 2019-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/89369\n+\t* config/s390/s390.md (*r<noxa>sbg_<mode>_srl_bitmask,\n+\t*r<noxa>sbg_<mode>_sll, *r<noxa>sbg_<mode>_srl): Don't construct\n+\tpattern in a temporary buffer.\n+\t(*r<noxa>sbg_sidi_srl): Likewise.  Always use 32 as I3 rather\n+\tthan 64-operands[2].\n+\n \tPR target/89361\n \t* config/s390/s390.c (s390_indirect_branch_attrvalue,\n \ts390_indirect_branch_settings): Define unconditionally."}, {"sha": "a307e33e9d715e0eae66c9868a2cdc327cbb2ef1", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=290dfd9bc7bea2f102f29723d20674f1b57332f1", "patch": "@@ -4268,10 +4268,8 @@\n    && s390_extzv_shift_ok (<bitsize>, 64 - INTVAL (operands[3]),\n                            INTVAL (operands[2]))\"\n   {\n-    static char buffer[256];\n-    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%%<bfstart>2,%%<bfend>2,%ld\",\n-             64 - INTVAL (operands[3]));\n-    return buffer;\n+    operands[3] = GEN_INT (64 - INTVAL (operands[3]));\n+    return \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,%3\";\n   }\n   [(set_attr \"op_type\" \"RIE\")])\n \n@@ -4306,10 +4304,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\"\n   {\n-    static char buffer[256];\n-    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,<bitoff>,%ld,%%2\",\n-             63 - INTVAL (operands[2]));\n-    return buffer;\n+    operands[3] = GEN_INT (63 - INTVAL (operands[2]));\n+    return \"r<noxa>sbg\\t%0,%1,<bitoff>,%3,%2\";\n   }\n   [(set_attr \"op_type\" \"RIE\")])\n \n@@ -4327,10 +4323,9 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\"\n   {\n-    static char buffer[256];\n-    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%ld,63,%ld\",\n-             <bitoff_plus> INTVAL (operands[2]), 64 - INTVAL (operands[2]));\n-    return buffer;\n+    operands[3] = GEN_INT (64 - INTVAL (operands[2]));\n+    operands[2] = GEN_INT (<bitoff_plus> INTVAL (operands[2]));\n+    return \"r<noxa>sbg\\t%0,%1,%2,63,%3\";\n   }\n   [(set_attr \"op_type\" \"RIE\")])\n \n@@ -4348,10 +4343,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\"\n   {\n-    static char buffer[256];\n-    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%ld,63,%ld\",\n-             64 - INTVAL (operands[2]), 32 + INTVAL (operands[2]));\n-    return buffer;\n+    operands[2] = GEN_INT (32 + INTVAL (operands[2]));\n+    return \"r<noxa>sbg\\t%0,%1,32,63,%2\";\n   }\n   [(set_attr \"op_type\" \"RIE\")])\n "}, {"sha": "2ca40b00dabc3893ac14f365c614d86a945a3139", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=290dfd9bc7bea2f102f29723d20674f1b57332f1", "patch": "@@ -1,3 +1,11 @@\n+2019-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/89369\n+\t* gcc.c-torture/execute/pr89369.c: New test.\n+\t* gcc.target/s390/md/rXsbg_mode_sXl.c (rosbg_si_srl,\n+\trxsbg_si_srl): Expect last 3 operands 32,63,62 rather than\n+\t34,63,62.\n+\n 2019-02-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/89209"}, {"sha": "a8f095e0b578ecc1e828566bd3d2b3704d33b74f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr89369.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89369.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89369.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr89369.c?ref=290dfd9bc7bea2f102f29723d20674f1b57332f1", "patch": "@@ -0,0 +1,69 @@\n+/* PR target/89369 */\n+\n+#if __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8 && __CHAR_BIT__ == 8\n+struct S { unsigned int u[4]; };\n+\n+static void\n+foo (struct S *out, struct S const *in, int shift)\n+{\n+  unsigned long long th, tl, oh, ol;\n+  th = ((unsigned long long) in->u[3] << 32) | in->u[2];\n+  tl = ((unsigned long long) in->u[1] << 32) | in->u[0];\n+  oh = th >> (shift * 8);\n+  ol = tl >> (shift * 8);\n+  ol |= th << (64 - shift * 8);\n+  out->u[1] = ol >> 32;\n+  out->u[0] = ol;\n+  out->u[3] = oh >> 32;\n+  out->u[2] = oh;\n+}\n+\n+static void\n+bar (struct S *out, struct S const *in, int shift)\n+{\n+  unsigned long long th, tl, oh, ol;\n+  th = ((unsigned long long) in->u[3] << 32) | in->u[2];\n+  tl = ((unsigned long long) in->u[1] << 32) | in->u[0];\n+  oh = th << (shift * 8);\n+  ol = tl << (shift * 8);\n+  oh |= tl >> (64 - shift * 8);\n+  out->u[1] = ol >> 32;\n+  out->u[0] = ol;\n+  out->u[3] = oh >> 32;\n+  out->u[2] = oh;\n+}\n+\n+__attribute__((noipa)) static void\n+baz (struct S *r, struct S *a, struct S *b, struct S *c, struct S *d)\n+{\n+  struct S x, y;\n+  bar (&x, a, 1);\n+  foo (&y, c, 1);\n+  r->u[0] = a->u[0] ^ x.u[0] ^ ((b->u[0] >> 11) & 0xdfffffefU) ^ y.u[0] ^ (d->u[0] << 18);\n+  r->u[1] = a->u[1] ^ x.u[1] ^ ((b->u[1] >> 11) & 0xddfecb7fU) ^ y.u[1] ^ (d->u[1] << 18);\n+  r->u[2] = a->u[2] ^ x.u[2] ^ ((b->u[2] >> 11) & 0xbffaffffU) ^ y.u[2] ^ (d->u[2] << 18);\n+  r->u[3] = a->u[3] ^ x.u[3] ^ ((b->u[3] >> 11) & 0xbffffff6U) ^ y.u[3] ^ (d->u[3] << 18);\n+}\n+\n+int\n+main ()\n+{\n+  struct S a[] = { { 0x000004d3, 0xbc5448db, 0xf22bde9f, 0xebb44f8f },\n+\t\t   { 0x03a32799, 0x60be8246, 0xa2d266ed, 0x7aa18536 },\n+\t\t   { 0x15a38518, 0xcf655ce1, 0xf3e09994, 0x50ef69fe },\n+\t\t   { 0x88274b07, 0xe7c94866, 0xc0ea9f47, 0xb6a83c43 },\n+\t\t   { 0xcd0d0032, 0x5d47f5d7, 0x5a0afbf6, 0xaea87b24 },\n+\t\t   { 0, 0, 0, 0 } };\n+  baz (&a[5], &a[0], &a[1], &a[2], &a[3]);\n+  if (a[4].u[0] != a[5].u[0] || a[4].u[1] != a[5].u[1]\n+      || a[4].u[2] != a[5].u[2] || a[4].u[3] != a[5].u[3])\n+    __builtin_abort ();\n+  return 0;\n+}\n+#else\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#endif"}, {"sha": "ede813818ff1e187147e355e21ebbbea1a718277", "filename": "gcc/testsuite/gcc.target/s390/md/rXsbg_mode_sXl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290dfd9bc7bea2f102f29723d20674f1b57332f1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c?ref=290dfd9bc7bea2f102f29723d20674f1b57332f1", "patch": "@@ -46,7 +46,7 @@ rosbg_si_srl (unsigned int a, unsigned int b)\n {\n   return a | (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,34,63,62\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,32,63,62\" 1 } } */\n \n __attribute__ ((noinline)) unsigned int\n rxsbg_si_sll (unsigned int a, unsigned int b)\n@@ -60,7 +60,7 @@ rxsbg_si_srl (unsigned int a, unsigned int b)\n {\n   return a ^ (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,34,63,62\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,32,63,62\" 1 } } */\n \n __attribute__ ((noinline)) unsigned long long\n di_sll (unsigned long long x)"}]}