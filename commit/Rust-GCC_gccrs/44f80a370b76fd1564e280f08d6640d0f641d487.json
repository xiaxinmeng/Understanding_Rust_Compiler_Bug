{"sha": "44f80a370b76fd1564e280f08d6640d0f641d487", "node_id": "C_kwDOANBUbNoAKDQ0ZjgwYTM3MGI3NmZkMTU2NGUyODBmMDhkNjY0MGQwZjY0MWQ0ODc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T11:40:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-10T11:40:23Z"}, "message": "range-op-float: Extend lhs by 0.5ulp rather than 1ulp if not -frounding-math [PR109008]\n\nThis patch, incremental to the just posted one, improves the reverse\noperation ranges significantly by widening just by 0.5ulp in each\ndirection rather than 1ulp.  Again, REAL_VALUE_TYPE has both wider\nexponent range and wider mantissa precision (160 bits) than any\nsupported type, this patch uses the latter property.\n\nThe patch doesn't do it if -frounding-math, because then the rounding\ncan be +-1ulp in each direction depending on the rounding mode which\nwe don't know, or for IBM double double because that type is just weird\nand we can't trust in sane properties.\n\nI've performed testing of these 2 patches on 300000 random tests as with\nyesterday's patch, exact numbers are in the PR, but I see very significant\nimprovement in the precision of the ranges while keeping it conservatively\ncorrect.\n\n2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109008\n\t* range-op-float.cc (float_widen_lhs_range): If not\n\t-frounding-math and not IBM double double format, extend lhs\n\trange just by 0.5ulp rather than 1ulp in each direction.", "tree": {"sha": "7a17b91249f3829a383ee17dfc168513ba6a58ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a17b91249f3829a383ee17dfc168513ba6a58ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f80a370b76fd1564e280f08d6640d0f641d487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f80a370b76fd1564e280f08d6640d0f641d487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f80a370b76fd1564e280f08d6640d0f641d487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f80a370b76fd1564e280f08d6640d0f641d487/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c8a083d44f8123ad81a3cd411389b0b7b42ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c8a083d44f8123ad81a3cd411389b0b7b42ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c8a083d44f8123ad81a3cd411389b0b7b42ae6"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "204b3911cc48fbee0742214eaa227eabffbb53ba", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f80a370b76fd1564e280f08d6640d0f641d487/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f80a370b76fd1564e280f08d6640d0f641d487/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=44f80a370b76fd1564e280f08d6640d0f641d487", "patch": "@@ -2205,8 +2205,8 @@ zero_to_inf_range (REAL_VALUE_TYPE &lb, REAL_VALUE_TYPE &ub, int signbit_known)\n    [1., 1.] = op1 + [1., 1.].  op1's range is not [0., 0.], but\n    [-0x1.0p-54, 0x1.0p-53] (when not -frounding-math), any value for\n    which adding 1. to it results in 1. after rounding to nearest.\n-   So, for op1_range/op2_range extend the lhs range by 1ulp in each\n-   direction.  See PR109008 for more details.  */\n+   So, for op1_range/op2_range extend the lhs range by 1ulp (or 0.5ulp)\n+   in each direction.  See PR109008 for more details.  */\n \n static frange\n float_widen_lhs_range (tree type, const frange &lhs)\n@@ -2230,6 +2230,14 @@ float_widen_lhs_range (tree type, const frange &lhs)\n \t  lb = dconstm1;\n \t  SET_REAL_EXP (&lb, FLOAT_MODE_FORMAT (TYPE_MODE (type))->emax + 1);\n \t}\n+      if (!flag_rounding_math && !MODE_COMPOSITE_P (TYPE_MODE (type)))\n+\t{\n+\t  /* If not -frounding-math nor IBM double double, actually widen\n+\t     just by 0.5ulp rather than 1ulp.  */\n+\t  REAL_VALUE_TYPE tem;\n+\t  real_arithmetic (&tem, PLUS_EXPR, &lhs.lower_bound (), &lb);\n+\t  real_arithmetic (&lb, RDIV_EXPR, &tem, &dconst2);\n+\t}\n     }\n   if (real_isfinite (&ub))\n     {\n@@ -2240,6 +2248,14 @@ float_widen_lhs_range (tree type, const frange &lhs)\n \t  ub = dconst1;\n \t  SET_REAL_EXP (&ub, FLOAT_MODE_FORMAT (TYPE_MODE (type))->emax + 1);\n \t}\n+      if (!flag_rounding_math && !MODE_COMPOSITE_P (TYPE_MODE (type)))\n+\t{\n+\t  /* If not -frounding-math nor IBM double double, actually widen\n+\t     just by 0.5ulp rather than 1ulp.  */\n+\t  REAL_VALUE_TYPE tem;\n+\t  real_arithmetic (&tem, PLUS_EXPR, &lhs.upper_bound (), &ub);\n+\t  real_arithmetic (&ub, RDIV_EXPR, &tem, &dconst2);\n+\t}\n     }\n   /* Temporarily disable -ffinite-math-only, so that frange::set doesn't\n      reduce the range back to real_min_representable (type) as lower bound"}]}