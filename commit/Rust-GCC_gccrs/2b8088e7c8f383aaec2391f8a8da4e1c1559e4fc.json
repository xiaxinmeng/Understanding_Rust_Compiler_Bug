{"sha": "2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4MDg4ZTdjOGYzODNhYWVjMjM5MWY4YThkYTRlMWMxNTU5ZTRmYw==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2012-06-12T06:11:09Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2012-06-12T06:11:09Z"}, "message": "sh.c (output_stack_adjust): Remove !epilogue_p condition for generating REG_FRAME_RELATED_EXPR note.\n\n2012-06-12  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\t* config/sh/sh.c (output_stack_adjust): Remove !epilogue_p\n\tcondition for generating REG_FRAME_RELATED_EXPR note.\n\t(pop): Add code for generating REG_CFA_RESTORE,\n\tREG_CFA_ADJUST_CFA notes. Set RTX_FRAME_RELATED_P to 1.\n\t(sh_expand_epilogue): Use frame_insn() for FP to SP move.\n\tSet 'frame_p' of calls to output_stack_adjust() to 'true'.\n\nFrom-SVN: r188424", "tree": {"sha": "bf8751ea4b315b24c3de26bbdfe4eefcef8ef354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf8751ea4b315b24c3de26bbdfe4eefcef8ef354"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fe5efbd2e858da3e3fefd24f75528e5ef6972c"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "c2e212c42fd905a4ea0199dc2e62fc9844e23bd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "patch": "@@ -1,3 +1,12 @@\n+2012-06-12  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* config/sh/sh.c (output_stack_adjust): Remove !epilogue_p\n+\tcondition for generating REG_FRAME_RELATED_EXPR note.\n+\t(pop): Add code for generating REG_CFA_RESTORE,\n+\tREG_CFA_ADJUST_CFA notes. Set RTX_FRAME_RELATED_P to 1.\n+\t(sh_expand_epilogue): Use frame_insn() for FP to SP move.\n+\tSet 'frame_p' of calls to output_stack_adjust() to 'true'.\n+\n 2012-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (HWI_HEX2): Add missing shift."}, {"sha": "4c6b9cf7af7c121d6853e703ebf0241cf95f8c1b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2b8088e7c8f383aaec2391f8a8da4e1c1559e4fc", "patch": "@@ -6483,11 +6483,10 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      emit_insn (GEN_MOV (const_reg, GEN_INT (size)));\n \t      insn = emit_fn (GEN_ADD3 (reg, reg, const_reg));\n \t    }\n-\t  if (! epilogue_p)\n-\t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t  gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t       gen_rtx_PLUS (SImode, reg,\n-\t\t\t\t\t\t     GEN_INT (size))));\n+\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t\tgen_rtx_SET (VOIDmode, reg,\n+\t\t\t\t     gen_rtx_PLUS (SImode, reg,\n+\t\t\t\t\t\t   GEN_INT (size))));\n \t}\n     }\n }\n@@ -6532,7 +6531,7 @@ push (int rn)\n static void\n pop (int rn)\n {\n-  rtx x;\n+  rtx x, sp_reg, reg;\n   if (rn == FPUL_REG)\n     x = gen_pop_fpul ();\n   else if (rn == FPSCR_REG)\n@@ -6550,7 +6549,18 @@ pop (int rn)\n     x = gen_pop (gen_rtx_REG (SImode, rn));\n \n   x = emit_insn (x);\n+\n+  sp_reg = gen_rtx_REG (SImode, STACK_POINTER_REGNUM);\n+  reg = copy_rtx (GET_CODE (PATTERN (x)) == PARALLEL\n+\t\t  ? SET_DEST (XVECEXP (PATTERN (x), 0, 0))\n+\t\t  : SET_DEST (PATTERN (x)));\n+  add_reg_note (x, REG_CFA_RESTORE, reg);\n+  add_reg_note (x, REG_CFA_ADJUST_CFA,\n+\t\tgen_rtx_SET (SImode, sp_reg,\n+\t\t\t     plus_constant (SImode, sp_reg,\n+\t\t\t\t\t    GET_MODE_SIZE (GET_MODE (reg)))));\n   add_reg_note (x, REG_INC, gen_rtx_REG (SImode, STACK_POINTER_REGNUM));\n+  RTX_FRAME_RELATED_P (x) = 1;\n }\n \n /* Generate code to push the regs specified in the mask.  */\n@@ -7433,14 +7443,14 @@ sh_expand_epilogue (bool sibcall_p)\n \t See PR/18032 and PR/40313.  */\n       emit_insn (gen_blockage ());\n       output_stack_adjust (frame_size, hard_frame_pointer_rtx, e,\n-\t\t\t   &live_regs_mask, false);\n+\t\t\t   &live_regs_mask, true);\n \n       /* We must avoid moving the stack pointer adjustment past code\n \t which reads from the local frame, else an interrupt could\n \t occur after the SP adjustment and clobber data in the local\n \t frame.  */\n       emit_insn (gen_blockage ());\n-      emit_insn (GEN_MOV (stack_pointer_rtx, hard_frame_pointer_rtx));\n+      frame_insn (GEN_MOV (stack_pointer_rtx, hard_frame_pointer_rtx));\n     }\n   else if (frame_size)\n     {\n@@ -7450,7 +7460,7 @@ sh_expand_epilogue (bool sibcall_p)\n \t frame.  */\n       emit_insn (gen_blockage ());\n       output_stack_adjust (frame_size, stack_pointer_rtx, e,\n-\t\t\t   &live_regs_mask, false);\n+\t\t\t   &live_regs_mask, true);\n     }\n \n   if (SHMEDIA_REGS_STACK_ADJUST ())\n@@ -7667,7 +7677,7 @@ sh_expand_epilogue (bool sibcall_p)\n   output_stack_adjust (crtl->args.pretend_args_size\n \t\t       + save_size + d_rounding\n \t\t       + crtl->args.info.stack_regs * 8,\n-\t\t       stack_pointer_rtx, e, NULL, false);\n+\t\t       stack_pointer_rtx, e, NULL, true);\n \n   if (crtl->calls_eh_return)\n     emit_insn (GEN_ADD3 (stack_pointer_rtx, stack_pointer_rtx,"}]}