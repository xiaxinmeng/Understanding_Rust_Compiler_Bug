{"sha": "a0c8285b03a452fcdf39e4d3db8d7710123584b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjODI4NWIwM2E0NTJmY2RmMzllNGQzZGI4ZDc3MTAxMjM1ODRiMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-07-30T17:27:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-07-30T17:27:17Z"}, "message": "re PR c/10320 (gcc 3.4 gets rid of static inline function that does not get inlined)\n\n\n\t* gcse.c (insert_store): Ignore fake edges.\n\n\t* c-common.c (flag_vtable_gc): Kill.\n\t* c-common.g (flag_vtable_gc): Kill.\n\t* c-opts (c_common_handle_option): Kill.\n\t* c.opt (fvtable-gc): Kill.\n\t* final.c (final_scan_insn): Do not call assemble_vtable_entry.\n\t* output.h (assemble_vtable_entry, assemble_vtable_inherit): Kill.\n\t* varasm.c (assemble_vtable_entry, assemble_vtable_inherit): Kill.\n\n\t* invoke.texi (-ftable-gc): Kill documentation.\n\n\tPR C/10320\n\t* tree-inline.c (inlinable_function_p): Don't set DECL_UNINLINABLE\n\tjust because function body is missing.\n\n\t* i386.c (pic_symbolic_operand): Properly detect RIP relative unspecs.\n\n\t* class.c (build_vtable_entry_ref): Kill.\n\t(build_vtbl_ref_1): Do not call build_vtable_entry_ref.\n\t(build_vfn_ref): Do not call build_vtable_entry_ref.\n\t* cp-lang.c (LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE): Kill.\n\t* cp-tree.h (prepare_assemble_variable): Kill.\n\t* cp-decl.c (prepare_assemble_variable): Kill.\n\nFrom-SVN: r69964", "tree": {"sha": "181f1593ae48087fad3a738850b5465caf5b57c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/181f1593ae48087fad3a738850b5465caf5b57c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c8285b03a452fcdf39e4d3db8d7710123584b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c8285b03a452fcdf39e4d3db8d7710123584b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c8285b03a452fcdf39e4d3db8d7710123584b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c8285b03a452fcdf39e4d3db8d7710123584b0/comments", "author": null, "committer": null, "parents": [{"sha": "1051c718b1be8473bacf4d7c65be3f7304116ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1051c718b1be8473bacf4d7c65be3f7304116ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1051c718b1be8473bacf4d7c65be3f7304116ddc"}], "stats": {"total": 327, "additions": 56, "deletions": 271}, "files": [{"sha": "3f64081c405935d3641027f512aceb6a815a05d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -1,3 +1,22 @@\n+Wed Jul 30 19:12:10 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcse.c (insert_store): Ignore fake edges.\n+\n+\t* c-common.c (flag_vtable_gc): Kill.\n+\t* c-common.g (flag_vtable_gc): Kill.\n+\t* c-opts (c_common_handle_option): Kill.\n+\t* c.opt (fvtable-gc): Kill.\n+\t* final.c (final_scan_insn): Do not call assemble_vtable_entry.\n+\t* output.h (assemble_vtable_entry, assemble_vtable_inherit): Kill.\n+\t* varasm.c (assemble_vtable_entry, assemble_vtable_inherit): Kill.\n+\n+\t* invoke.texi (-ftable-gc): Kill documentation.\n+\n+\t* tree-inline.c (inlinable_function_p): Don't set DECL_UNINLINABLE\n+\tjust because function body is missing.\n+\n+\t* i386.c (pic_symbolic_operand): Properly detect RIP relative unspecs.\n+\n 2003-07-30  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* unwind-sjlj.c: Fix typo in file description."}, {"sha": "8ee29b7a4eab56710a23571a5fe43bd4af8dd7ae", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -569,10 +569,6 @@ int flag_weak = 1;\n \n int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n \n-/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n-\n-int flag_vtable_gc;\n-\n /* Nonzero means make the default pedwarns warnings instead of errors.\n    The value of this flag is ignored if -pedantic is specified.  */\n "}, {"sha": "6590453f86715276c961457a0ac236f3e1517040", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -743,10 +743,6 @@ extern int flag_weak;\n \n extern int flag_use_cxa_atexit;\n \n-/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n-\n-extern int flag_vtable_gc;\n-\n /* Nonzero means make the default pedwarns warnings instead of errors.\n    The value of this flag is ignored if -pedantic is specified.  */\n "}, {"sha": "85f9a0bf2e079c1970e1749fd0e53aec7d1f8a88", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -675,6 +675,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fthis_is_variable:\n     case OPT_fvtable_thunks:\n     case OPT_fxref:\n+    case OPT_fvtable_gc:\n       warning (\"switch \\\"%s\\\" is no longer supported\", option->opt_text);\n       break;\n \n@@ -896,10 +897,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       max_tinst_depth = value;\n       break;\n \n-    case OPT_fvtable_gc:\n-      flag_vtable_gc = value;\n-      break;\n-\n     case OPT_fuse_cxa_atexit:\n       flag_use_cxa_atexit = value;\n       break;"}, {"sha": "706ecc4ff590193192306ac07b1049b2bcb36c2d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -3410,7 +3410,12 @@ pic_symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   op = XEXP (op, 0);\n   if (TARGET_64BIT)\n     {\n-      if (GET_CODE (XEXP (op, 0)) == UNSPEC)\n+      if (GET_CODE (op) == UNSPEC\n+\t  && XINT (op, 1) == UNSPEC_GOTPCREL)\n+\treturn 1;\n+      if (GET_CODE (op) == PLUS\n+\t  && XINT (XEXP (op, 0), 1) == UNSPEC_GOTPCREL\n+\t  && GET_CODE (XEXP (op, 0)) == UNSPEC)\n \treturn 1;\n     }\n   else"}, {"sha": "8d22b7497948e3cd57c5751ffb9c2c570eae08a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -1,3 +1,12 @@\n+Wed Jul 30 19:12:48 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* class.c (build_vtable_entry_ref): Kill.\n+\t(build_vtbl_ref_1): Do not call build_vtable_entry_ref.\n+\t(build_vfn_ref): Do not call build_vtable_entry_ref.\n+\t* cp-lang.c (LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE): Kill.\n+\t* cp-tree.h (prepare_assemble_variable): Kill.\n+\t* cp-decl.c (prepare_assemble_variable): Kill.\n+\n 2003-07-29  Geoffrey Keating  <geoffk@apple.com>\n \n \t* parser.c (cp_lexer_new_main): Use c_common_no_more_pch instead"}, {"sha": "527eae4611cf8299129202e585f1ae68efd4bdfb", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -131,7 +131,6 @@ static void add_implicitly_declared_members (tree, int, int, int);\n static tree fixed_type_or_null (tree, int *, int *);\n static tree resolve_address_of_overloaded_function (tree, tree, int,\n \t\t\t\t\t\t\t  int, int, tree);\n-static tree build_vtable_entry_ref (tree, tree, tree);\n static tree build_vtbl_ref_1 (tree, tree);\n static tree build_vtbl_initializer (tree, tree, tree, tree, int *);\n static int count_fields (tree);\n@@ -421,32 +420,6 @@ convert_to_base_statically (tree expr, tree base)\n }\n \n \f\n-/* Virtual function things.  */\n-\n-static tree\n-build_vtable_entry_ref (tree array_ref, tree instance, tree idx)\n-{\n-  tree i, i2, vtable, first_fn, basetype;\n-\n-  basetype = non_reference (TREE_TYPE (instance));\n-\n-  vtable = get_vtbl_decl_for_binfo (TYPE_BINFO (basetype));\n-  first_fn = TYPE_BINFO_VTABLE (basetype);\n-\n-  i = fold (build_array_ref (first_fn, idx));\n-  i = fold (build_c_cast (ptrdiff_type_node,\n-\t\t\t  build_unary_op (ADDR_EXPR, i, 0)));\n-  i2 = fold (build_array_ref (vtable, build_int_2 (0,0)));\n-  i2 = fold (build_c_cast (ptrdiff_type_node,\n-\t\t\t   build_unary_op (ADDR_EXPR, i2, 0)));\n-  i = fold (cp_build_binary_op (MINUS_EXPR, i, i2));\n-\n-  if (TREE_CODE (i) != INTEGER_CST)\n-    abort ();\n-\n-  return build (VTABLE_REF, TREE_TYPE (array_ref), array_ref, vtable, i);\n-}\n-\n /* Given an object INSTANCE, return an expression which yields the\n    vtable element corresponding to INDEX.  There are many special\n    cases for INSTANCE which we take care of here, mainly to avoid\n@@ -490,9 +463,6 @@ build_vtbl_ref (tree instance, tree idx)\n {\n   tree aref = build_vtbl_ref_1 (instance, idx);\n \n-  if (flag_vtable_gc)\n-    aref = build_vtable_entry_ref (aref, instance, idx);\n-\n   return aref;\n }\n \n@@ -510,9 +480,6 @@ build_vfn_ref (tree instance, tree idx)\n     aref = build1 (NOP_EXPR, TREE_TYPE (aref),\n \t\t   build_unary_op (ADDR_EXPR, aref, /*noconvert=*/1));\n \n-  if (flag_vtable_gc)\n-    aref = build_vtable_entry_ref (aref, instance, idx);\n-\n   return aref;\n }\n "}, {"sha": "6de92102a9db754268b66478c534990d1ac70453", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -153,9 +153,6 @@ static bool cp_var_mod_type_p (tree);\n #undef LANG_HOOKS_EXPR_SIZE\n #define LANG_HOOKS_EXPR_SIZE cp_expr_size\n \n-#undef LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE \n-#define LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE prepare_assemble_variable\n-\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION expand_body\n #undef LANG_HOOKS_CALLGRAPH_LOWER_FUNCTION"}, {"sha": "a7bdc578e7dace6accc3a34cf786e480420c8001", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -3826,7 +3826,6 @@ extern tree build_artificial_parm (tree, tree);\n extern tree get_guard (tree);\n extern tree get_guard_cond (tree);\n extern tree set_guard (tree);\n-extern void prepare_assemble_variable (tree);\n extern void lower_function (tree);\n \n /* XXX Not i18n clean.  */"}, {"sha": "f89258c867d82317a2c163518f8e9f4b350736b0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -1626,36 +1626,6 @@ import_export_class (tree ctype)\n       CLASSTYPE_INTERFACE_ONLY (ctype) = (import_export < 0);\n     }\n }\n-    \n-/* We need to describe to the assembler the relationship between\n-   a vtable and the vtable of the parent class.  */\n-\n-void\n-prepare_assemble_variable (tree vars)\n-{\n-  tree parent;\n-  rtx child_rtx, parent_rtx;\n-\n-  if (!flag_vtable_gc || TREE_CODE (vars) != VAR_DECL\n-      || !DECL_VTABLE_OR_VTT_P (vars))\n-    return;\n-\n-  child_rtx = XEXP (DECL_RTL (vars), 0);\t  /* strip the mem ref  */\n-\n-  parent = binfo_for_vtable (vars);\n-\n-  if (parent == TYPE_BINFO (DECL_CONTEXT (vars)))\n-    parent_rtx = const0_rtx;\n-  else if (parent)\n-    {\n-      parent = get_vtbl_decl_for_binfo (TYPE_BINFO (BINFO_TYPE (parent)));\n-      parent_rtx = XEXP (DECL_RTL (parent), 0);  /* strip the mem ref  */\n-    }\n-  else\n-    abort ();\n-\n-  assemble_vtable_inherit (child_rtx, parent_rtx);\n-}\n \n /* If necessary, write out the vtables for the dynamic class CTYPE.\n    Returns true if any vtables were emitted.  */"}, {"sha": "f1cd6f0e7b353169f0313b23f5f008c23da6af87", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -183,7 +183,7 @@ in the following sections.\n -fno-nonansi-builtins  -fno-operator-names @gol\n -fno-optional-diags  -fpermissive @gol\n -frepo  -fno-rtti  -fstats  -ftemplate-depth-@var{n} @gol\n--fuse-cxa-atexit  -fvtable-gc  -fno-weak  -nostdinc++ @gol\n+-fuse-cxa-atexit  -fno-weak  -nostdinc++ @gol\n -fno-default-inline  -Wabi  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wno-deprecated @gol\n@@ -1456,17 +1456,6 @@ This option is required for fully standards-compliant handling of static\n destructors, but will only work if your C library supports\n @code{__cxa_atexit}.\n \n-@item -fvtable-gc\n-@opindex fvtable-gc\n-Emit special relocations for vtables and virtual function references\n-so that the linker can identify unused virtual functions and zero out\n-vtable slots that refer to them.  This is most useful with\n-@option{-ffunction-sections} and @option{-Wl,--gc-sections}, in order to\n-also discard the functions themselves.\n-\n-This optimization requires GNU as and GNU ld.  Not all systems support\n-this option.  @option{-Wl,--gc-sections} is ignored without @option{-static}.\n-\n @item -fno-weak\n @opindex fno-weak\n Do not use weak symbol support, even if it is provided by the linker."}, {"sha": "f43f9d92b6e186c6ec57f8773fd33c09f518bd71", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -2486,9 +2486,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t/* Emit information for vtable gc.  */\n \tnote = find_reg_note (insn, REG_VTABLE_REF, NULL_RTX);\n-\tif (note)\n-\t  assemble_vtable_entry (XEXP (XEXP (note, 0), 0),\n-\t\t\t\t INTVAL (XEXP (XEXP (note, 0), 1)));\n \n \tcurrent_output_insn = debug_insn = 0;\n       }"}, {"sha": "a8bb4533b8d5c1d079dab3c7224eb26e36b80c32", "filename": "gcc/gcse.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -7495,6 +7495,9 @@ insert_store (struct ls_expr * expr, edge e)\n   if (expr->reaching_reg == NULL_RTX)\n     return 0;\n \n+  if (e->flags & EDGE_FAKE)\n+    return 0;\n+\n   reg = expr->reaching_reg;\n   insn = gen_move_insn (copy_rtx (expr->pattern), reg);\n \n@@ -7503,13 +7506,14 @@ insert_store (struct ls_expr * expr, edge e)\n      edges so we don't try to insert it on the other edges.  */\n   bb = e->dest;\n   for (tmp = e->dest->pred; tmp ; tmp = tmp->pred_next)\n-    {\n-      int index = EDGE_INDEX (edge_list, tmp->src, tmp->dest);\n-      if (index == EDGE_INDEX_NO_EDGE)\n-\tabort ();\n-      if (! TEST_BIT (pre_insert_map[index], expr->index))\n-\tbreak;\n-    }\n+    if (!tmp->flags & EDGE_FAKE)\n+      {\n+\tint index = EDGE_INDEX (edge_list, tmp->src, tmp->dest);\n+\tif (index == EDGE_INDEX_NO_EDGE)\n+\t  abort ();\n+\tif (! TEST_BIT (pre_insert_map[index], expr->index))\n+\t  break;\n+      }\n \n   /* If tmp is NULL, we found an insertion on every edge, blank the\n      insertion vector for these edges, and insert at the start of the BB.  */"}, {"sha": "a2b48e79dd0b8604dec454815ea6840cfb86d1a5", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -508,10 +508,6 @@ extern void default_file_start (void);\n extern void file_end_indicate_exec_stack (void);\n extern bool default_valid_pointer_mode (enum machine_mode);\n \n-/* Emit data for vtable gc for GNU binutils.  */\n-extern void assemble_vtable_entry (rtx, HOST_WIDE_INT);\n-extern void assemble_vtable_inherit (rtx, rtx);\n-\n extern int default_address_cost (rtx);\n \n #endif /* ! GCC_OUTPUT_H */"}, {"sha": "d20cc6e4b2b478f906ff071f91b16209f8ab5f7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -1,3 +1,7 @@\n+Wed Jul 30 19:13:34 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* vtgc1.c: Kill.\n+\n 2003-07-29  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.dg/struct-in-proto-1.c: New test."}, {"sha": "511d45b36e7194bb56c41bdd025afd31521a9a1a", "filename": "gcc/testsuite/g++.dg/opt/vtgc1.C", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1051c718b1be8473bacf4d7c65be3f7304116ddc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1051c718b1be8473bacf4d7c65be3f7304116ddc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fvtgc1.C?ref=1051c718b1be8473bacf4d7c65be3f7304116ddc", "patch": "@@ -1,136 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-fvtable-gc\" }\n-// Origin: Hans-Peter Nilsson <hp@bitrange.com>\n-\n-class Base0\n-{\n-public:\n-  Base0(); virtual ~Base0();\n-  virtual void f1();\n-  virtual void f2();\n-private:\n-  int a_value;\n-};\n-\n-class Base1 : public Base0\n-{\n-public:\n-  Base1(); virtual ~Base1();\n-  virtual void f1(), f2();\n-  virtual void f3();\n-};\n-\n-class Base2 : public Base1\n-{\n-public:\n-  Base2(); virtual ~Base2();\n-  virtual void f1(), f2();\n-  virtual void f4();\n-};\n-\n-class VbasedA : virtual public Base2\n-{\n-public:\n-  VbasedA(); virtual ~VbasedA();\n-  virtual void f1(), f2(), f3();\n-  virtual void f6();\n-};\n-\n-class Side0\n-{\n-public:\n-  Side0(); virtual ~Side0();\n-  virtual void x1();\n-  virtual void xx();\n-private:\n-  int ryan;\n-};\n-\n-class Multisv0 : public Side0, virtual public Base2\n-{\n-public:\n-  Multisv0(); virtual ~Multisv0();\n-  virtual void f1(), f2();\n-  virtual void f3();\n-  virtual void f6();\n-  virtual void xx();\n-};\n-\n-class Multivs1 : public Base2, virtual public Side0\n-{\n-public:\n-  Multivs1(); virtual ~Multivs1(); virtual void f1(); virtual void fx2();\n-  virtual void fx4(), fx5();\n-  virtual void f6();\n-  virtual void xx();\n-};\n-\n-class Multiss2 : public Base2, public Side0\n-{\n-public:\n-  Multiss2(); virtual ~Multiss2(); virtual void f1(); virtual void fx2();\n-  virtual void fx4();\n-  virtual void f6();\n-  virtual void xx();\n-};\n-\n-class Multivv3 : virtual public Base2, virtual public Side0\n-{\n-public:\n-  Multivv3(); virtual ~Multivv3(); virtual void f1(); virtual void fx2();\n-  virtual void fx4(), fx5();\n-  virtual void f6();\n-  virtual void xx();\n-};\n-\n-Base0::Base0() {}\n-Base0::~Base0() {}\n-Base1::Base1() {}\n-Base1::~Base1() {}\n-Base2::Base2() {}\n-Base2::~Base2() {}\n-VbasedA::VbasedA() {}\n-VbasedA::~VbasedA() {}\n-Multisv0::Multisv0() {}\n-Multisv0::~Multisv0() {}\n-Multivs1::Multivs1() {}\n-Multivs1::~Multivs1() {}\n-Multiss2::Multiss2() {}\n-Multiss2::~Multiss2() {}\n-Multivv3::Multivv3() {}\n-Multivv3::~Multivv3() {}\n-Side0::Side0() {}\n-Side0::~Side0() {}\n-\n-extern void x (VbasedA *);\n-extern void x2 (Multisv0 *);\n-extern void x3 (Multivs1 *);\n-extern void x4 (Multiss2 *);\n-extern void x5 (Multivv3 *);\n-void y () { VbasedA ii; x(&ii);}\n-void y2 () { Multisv0 ii; x2(&ii);}\n-void y3 () { Multivs1 ii; x3(&ii);}\n-void y4 () { Multiss2 ii; x4(&ii);}\n-void y5 () { Multivv3 ii; x5(&ii);}\n-void x (VbasedA *ii) { ii->f2();}\n-void x2 (Multisv0 *ii) { ii->f2();}\n-void x3 (Multivs1 *ii) { ii->f2();}\n-void x4 (Multiss2 *ii) { ii->f2();}\n-void x5 (Multivv3 *ii) { ii->f2();}\n-\n-// Use .* because of ia64's convention of marking symbols with \"#\", which\n-// makes it through the c++filt.\n-\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivv3.*0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivv3.*0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multiss2.*vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multivs1.*vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multivs1.*vtable for Base2\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Multisv0.*vtable for Side0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for Multisv0.*vtable for Side0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Side0.*0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for VbasedA.*0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*VTT for VbasedA.*0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base2.*vtable for Base1\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base1.*vtable for Base0\" } }\n-// { dg-final { scan-assembler-dem \"\\.vtable_inherit\\[ \\t\\]*vtable for Base0.*0\" } }"}, {"sha": "dbf2543b093ebabb9a10500d544cde1d19e0d74c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -948,6 +948,11 @@ inlinable_function_p (tree fn, inline_data *id, int nolimit)\n      in C++ it may result in template instantiation.)  */\n   inlinable = !(*lang_hooks.tree_inlining.cannot_inline_tree_fn) (&fn);\n \n+  /* If we don't have the function body available, we can't inline\n+     it.  */\n+  if (! DECL_SAVED_TREE (fn))\n+    return 0;\n+\n   /* We may be here either because fn is declared inline or because\n      we use -finline-functions.  For the second case, we are more\n      restrictive.  */\n@@ -1027,11 +1032,6 @@ inlinable_function_p (tree fn, inline_data *id, int nolimit)\n \t}\n     }\n \n-  /* If we don't have the function body available, we can't inline\n-     it.  */\n-  if (! DECL_SAVED_TREE (fn))\n-    inlinable = 0;\n-\n   /* Check again, language hooks may have modified it.  */\n   if (! inlinable || DECL_UNINLINABLE (fn))\n     return 0;"}, {"sha": "63ba1bd800f7f187637384ea5359b6e26a0c99f2", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c8285b03a452fcdf39e4d3db8d7710123584b0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a0c8285b03a452fcdf39e4d3db8d7710123584b0", "patch": "@@ -4657,30 +4657,6 @@ default_pe_asm_named_section (const char *name, unsigned int flags)\n     }\n }\n \f\n-/* Used for vtable gc in GNU binutils.  Record that the pointer at OFFSET\n-   from SYMBOL is used in all classes derived from SYMBOL.  */\n-\n-void\n-assemble_vtable_entry (rtx symbol, HOST_WIDE_INT offset)\n-{\n-  fputs (\"\\t.vtable_entry \", asm_out_file);\n-  output_addr_const (asm_out_file, symbol);\n-  fprintf (asm_out_file, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n-}\n-\n-/* Used for vtable gc in GNU binutils.  Record the class hierarchy by noting\n-   that the vtable symbol CHILD is derived from the vtable symbol PARENT.  */\n-\n-void\n-assemble_vtable_inherit (rtx child, rtx parent)\n-{\n-  fputs (\"\\t.vtable_inherit \", asm_out_file);\n-  output_addr_const (asm_out_file, child);\n-  fputs (\", \", asm_out_file);\n-  output_addr_const (asm_out_file, parent);\n-  fputc ('\\n', asm_out_file);\n-}\n-\f\n /* The lame default section selector.  */\n \n void"}]}