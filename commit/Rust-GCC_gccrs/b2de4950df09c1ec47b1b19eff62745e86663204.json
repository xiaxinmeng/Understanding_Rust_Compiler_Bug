{"sha": "b2de4950df09c1ec47b1b19eff62745e86663204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkZTQ5NTBkZjA5YzFlYzQ3YjFiMTllZmY2Mjc0NWU4NjY2MzIwNA==", "commit": {"author": {"name": "Carlos O'Donell", "email": "carlos@redhat.com", "date": "2016-03-16T05:00:58Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2016-03-16T05:00:58Z"}, "message": "Cleanup and expand on the 'leaf' function attribute documentation.\n\nDescribe the problems that a user might face with indirect functions\nand ELF symbol interposition.\n\ngcc/ChangeLog:\n\n2016-03-16  Carlos O'Donell  <carlos@redhat.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\t* doc/extend.texi (Common Function Attributes): Describe ifunc impact\n\ton leaf attribute. Mention ELF interposition problems.\n\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r234247", "tree": {"sha": "499e593aa8491786c2df6ae9f5a28e139ba89c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/499e593aa8491786c2df6ae9f5a28e139ba89c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2de4950df09c1ec47b1b19eff62745e86663204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2de4950df09c1ec47b1b19eff62745e86663204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2de4950df09c1ec47b1b19eff62745e86663204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2de4950df09c1ec47b1b19eff62745e86663204/comments", "author": {"login": "codonell", "id": 3019228, "node_id": "MDQ6VXNlcjMwMTkyMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/3019228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codonell", "html_url": "https://github.com/codonell", "followers_url": "https://api.github.com/users/codonell/followers", "following_url": "https://api.github.com/users/codonell/following{/other_user}", "gists_url": "https://api.github.com/users/codonell/gists{/gist_id}", "starred_url": "https://api.github.com/users/codonell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codonell/subscriptions", "organizations_url": "https://api.github.com/users/codonell/orgs", "repos_url": "https://api.github.com/users/codonell/repos", "events_url": "https://api.github.com/users/codonell/events{/privacy}", "received_events_url": "https://api.github.com/users/codonell/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab1caa6e04b28cc232ea3f0255ef7325c2c27b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1caa6e04b28cc232ea3f0255ef7325c2c27b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1caa6e04b28cc232ea3f0255ef7325c2c27b19"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "68fcd05c07afbec6fb9b3467dbf4d2192a887ddf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2de4950df09c1ec47b1b19eff62745e86663204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2de4950df09c1ec47b1b19eff62745e86663204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2de4950df09c1ec47b1b19eff62745e86663204", "patch": "@@ -1,3 +1,9 @@\n+2016-03-16  Carlos O'Donell  <carlos@redhat.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Common Function Attributes): Describe ifunc impact\n+\ton leaf attribute. Mention ELF interposition problems.\n+\n 2016-03-16  Alan Modra  <amodra@gmail.com>\n \n \tPR rtl-optimization/69195"}, {"sha": "8fddb34a7e3370b0188a1246c01741b9c66a70c4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2de4950df09c1ec47b1b19eff62745e86663204/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2de4950df09c1ec47b1b19eff62745e86663204/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b2de4950df09c1ec47b1b19eff62745e86663204", "patch": "@@ -2772,29 +2772,40 @@ refer to the following subsections for details.\n \n @item leaf\n @cindex @code{leaf} function attribute\n-Calls to external functions with this attribute must return to the current\n-compilation unit only by return or by exception handling.  In particular, leaf\n-functions are not allowed to call callback function passed to it from the current\n-compilation unit or directly call functions exported by the unit or longjmp\n-into the unit.  Leaf function might still call functions from other compilation\n-units and thus they are not necessarily leaf in the sense that they contain no\n-function calls at all.\n-\n-The attribute is intended for library functions to improve dataflow analysis.\n-The compiler takes the hint that any data not escaping the current compilation unit can\n-not be used or modified by the leaf function.  For example, the @code{sin} function\n-is a leaf function, but @code{qsort} is not.\n-\n-Note that leaf functions might invoke signals and signal handlers might be\n-defined in the current compilation unit and use static variables.  The only\n-compliant way to write such a signal handler is to declare such variables\n-@code{volatile}.\n-\n-The attribute has no effect on functions defined within the current compilation\n-unit.  This is to allow easy merging of multiple compilation units into one,\n-for example, by using the link-time optimization.  For this reason the\n-attribute is not allowed on types to annotate indirect calls.\n-\n+Calls to external functions with this attribute must return to the\n+current compilation unit only by return or by exception handling.  In\n+particular, a leaf function is not allowed to invoke callback functions\n+passed to it from the current compilation unit, directly call functions\n+exported by the unit, or @code{longjmp} into the unit.  Leaf functions\n+might still call functions from other compilation units and thus they\n+are not necessarily leaf in the sense that they contain no function\n+calls at all.\n+\n+The attribute is intended for library functions to improve dataflow\n+analysis.  The compiler takes the hint that any data not escaping the\n+current compilation unit cannot be used or modified by the leaf\n+function.  For example, the @code{sin} function is a leaf function, but\n+@code{qsort} is not.\n+\n+Note that leaf functions might indirectly run a signal handler defined\n+in the current compilation unit that uses static variables.  Similarly,\n+when lazy symbol resolution is in effect, leaf functions might invoke\n+indirect functions whose resolver function or implementation function is\n+defined in the current compilation unit and uses static variables.  There\n+is no standard-compliant way to write such a signal handler, resolver\n+function, or implementation function, and the best that you can do is to\n+remove the @code{leaf} attribute or mark all such static variables\n+@code{volatile}.  Lastly, for ELF-based systems that support symbol\n+interposition, care should be taken that functions defined in the\n+current compilation unit do not unexpectedly interpose other symbols\n+based on the defined standards mode and defined feature test macros;\n+otherwise an inadvertent callback would be added.\n+\n+The attribute has no effect on functions defined within the current\n+compilation unit.  This is to allow easy merging of multiple compilation\n+units into one, for example, by using the link-time optimization.  For\n+this reason the attribute is not allowed on types to annotate indirect\n+calls.\n \n @item malloc\n @cindex @code{malloc} function attribute"}]}