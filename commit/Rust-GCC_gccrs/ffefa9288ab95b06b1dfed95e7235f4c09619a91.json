{"sha": "ffefa9288ab95b06b1dfed95e7235f4c09619a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlZmE5Mjg4YWI5NWIwNmIxZGZlZDk1ZTcyMzVmNGMwOTYxOWE5MQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-02-22T10:54:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-02-22T10:54:56Z"}, "message": "Make pr30957-1.c pass rather xfail\n\n2015-02-22  Tom de Vries  <tom@codesourcery.com>\n\n\t* gcc.dg/pr30957-1.c: Make pr30957-1.c pass rather xfail.\n\nFrom-SVN: r220893", "tree": {"sha": "83e7f367d165409d83678849565baefd9502f1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e7f367d165409d83678849565baefd9502f1a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffefa9288ab95b06b1dfed95e7235f4c09619a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffefa9288ab95b06b1dfed95e7235f4c09619a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffefa9288ab95b06b1dfed95e7235f4c09619a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffefa9288ab95b06b1dfed95e7235f4c09619a91/comments", "author": null, "committer": null, "parents": [{"sha": "42924e4bc2eaa8f1dd8b7ac2a4498617c0a95ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42924e4bc2eaa8f1dd8b7ac2a4498617c0a95ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42924e4bc2eaa8f1dd8b7ac2a4498617c0a95ac4"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "5ef35b9292dad4055cdf4feeaf7f6a36e94b0d22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffefa9288ab95b06b1dfed95e7235f4c09619a91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffefa9288ab95b06b1dfed95e7235f4c09619a91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffefa9288ab95b06b1dfed95e7235f4c09619a91", "patch": "@@ -1,3 +1,7 @@\n+2015-02-22  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.dg/pr30957-1.c: Make pr30957-1.c pass rather xfail.\n+\n 2015-02-21  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/65156"}, {"sha": "f34c6e537037643c3b9f7c875cb549f1650bf509", "filename": "gcc/testsuite/gcc.dg/pr30957-1.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffefa9288ab95b06b1dfed95e7235f4c09619a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffefa9288ab95b06b1dfed95e7235f4c09619a91/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c?ref=ffefa9288ab95b06b1dfed95e7235f4c09619a91", "patch": "@@ -1,12 +1,9 @@\n-/* { dg-do run { xfail *-*-* } } */\n-/* We don't (and don't want to) perform this optimisation on soft-float\n-   targets, where each addition is a library call.  This test requires\n-   -fassociative-math for enabling the variable-expansion as well as\n-   -fsigned-zeros for honoring the sign of zero; but\n-   they can not co-exist; also under -funsafe-math-optimizations, so we\n-   expect it to fail.  */\n+/* { dg-do run } */\n+/* We don't (and don't want to) perform this optimisation on soft-float targets,\n+   where each addition is a library call.  /\n /* { dg-require-effective-target hard_float } */\n-/* { dg-options \"-O2 -funroll-loops -funsafe-math-optimizations -fvariable-expansion-in-unroller -fdump-rtl-loop2_unroll\" } */\n+/* -fassociative-math requires -fno-trapping-math and -fno-signed-zeros. */\n+/* { dg-options \"-O2 -funroll-loops -fassociative-math -fno-trapping-math -fno-signed-zeros -fvariable-expansion-in-unroller -fdump-rtl-loop2_unroll\" } */\n \n extern void abort (void);\n extern void exit (int);\n@@ -26,12 +23,15 @@ foo (float d, int n)\n int\n main ()\n {\n-  if (__builtin_copysignf (1.0, foo (0.0 / -5.0, 10)) != -1.0)\n+  /* When compiling standard compliant we expect foo to return -0.0.  But the\n+     variable expansion during unrolling optimization (for this testcase enabled\n+     by non-compliant -fassociative-math) instantiates copy(s) of the\n+     accumulator which it initializes with +0.0.  Hence we expect that foo\n+     returns +0.0.  */\n+  if (__builtin_copysignf (1.0, foo (0.0 / -5.0, 10)) != 1.0)\n     abort ();\n   exit (0);\n }\n \n /* { dg-final { scan-rtl-dump \"Expanding Accumulator\" \"loop2_unroll\" } } */\n /* { dg-final { cleanup-rtl-dump \"loop*\" } } */\n-\n-"}]}