{"sha": "97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "node_id": "C_kwDOANBUbNoAKDk3OTA5ZjgwZmRlNmM0Y2UyYTJmYTFlMTFiMzI1YTgwYzQ3NDFiOGM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-01T08:56:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-01T08:56:45Z"}, "message": "Fix ICE with stack checking emulation at -O2\n\nOn bare-metal platforms, the Ada compiler emulates stack checking (it is\nrequired by the language and tested by ACATS) in the runtime via the\nstack_check_libfunc hook of the RTL middle-end.  Calls to the function\nare generated as libcalls but they now require a proper function type\nat -O2 or above.\n\ngcc/\n\t* explow.c: Include langhooks.h.\n\t(set_stack_check_libfunc): Build a proper function type.", "tree": {"sha": "44cea07dea819a3ab4a36cb12423733b4839c3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44cea07dea819a3ab4a36cb12423733b4839c3a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c/comments", "author": null, "committer": null, "parents": [{"sha": "021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021ad8e5cf9ab66e1a0a41dce3a54586facb86e0"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "a35423f5d16c2104ec26e564c78964bbd878169f", "filename": "gcc/explow.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97909f80fde6c4ce2a2fa1e11b325a80c4741b8c/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=97909f80fde6c4ce2a2fa1e11b325a80c4741b8c", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n #include \"stor-layout.h\"\n+#include \"langhooks.h\"\n #include \"except.h\"\n #include \"dojump.h\"\n #include \"explow.h\"\n@@ -1641,8 +1642,14 @@ set_stack_check_libfunc (const char *libfunc_name)\n {\n   gcc_assert (stack_check_libfunc == NULL_RTX);\n   stack_check_libfunc = gen_rtx_SYMBOL_REF (Pmode, libfunc_name);\n+  tree ptype\n+    = Pmode == ptr_mode\n+      ? ptr_type_node\n+      : lang_hooks.types.type_for_mode (Pmode, 1);\n+  tree ftype\n+    = build_function_type_list (void_type_node, ptype, NULL_TREE);\n   tree decl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL,\n-\t\t\t  get_identifier (libfunc_name), void_type_node);\n+\t\t\t  get_identifier (libfunc_name), ftype);\n   DECL_EXTERNAL (decl) = 1;\n   SET_SYMBOL_REF_DECL (stack_check_libfunc, decl);\n }"}]}