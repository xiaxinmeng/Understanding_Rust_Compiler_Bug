{"sha": "ea40ba9c04882ea2ddf987e2783f98cc38bac081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0MGJhOWMwNDg4MmVhMmRkZjk4N2UyNzgzZjk4Y2MzOGJhYzA4MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-07-03T00:38:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-07-03T00:38:49Z"}, "message": "c-common.h (GCC_DIAG_STYLE): Define.\n\n\t* c-common.h (GCC_DIAG_STYLE): Define.\n\t* c-tree.h (GCC_DIAG_STYLE): Do not define.  Change minimum GCC\n\tversion for format checking to 4.1.\n\t* c-format.c: Include toplev.h after c-common.h.\n\t(enum format_type): Add gcc_tdiag_format_type.\n\t(gcc_tdiag_length_specs, gcc_tdiag_flag_pairs,\n\tgcc_tdiag_flag_specs, gcc_tdiag_char_table): New.\n\t(format_types_orig): Add gcc_tdiag.\n\t(init_dynamic_diag_info): Support gcc_tdiag formats.\n\t(handle_format_attribute): Likewise.\n\t* toplev.h (NO_FRONT_END_DIAG, ATTRIBUTE_GCC_FE_DIAG): Remove.\n\t(GCC_DIAG_STYLE): Default to __gcc_tdiag__.  Change minimum GCC\n\tversion for format checking to 4.1.\n\t(warning0, warning, error, pedwarn, sorry): Use\n\tATTRIBUTE_GCC_DIAG.\n\t* config/rs6000/rs6000.c (altivec_expand_builtin), varasm.c\n\t(finish_aliases_1): Do not use %qE.\n\t* config/arm/arm.c, config/i386/i386.c, config/mmix/mmix.c,\n\tconfig/pdp11/pdp11.c, stor-layout.c, tree-eh.c, tree-ssa.c:\n\tCorrect format bugs.\n\t* config/v850/v850-protos.h (v850_output_aligned_bss): Change size\n\tparameter to unsigned HOST_WIDE_INT.\n\t* config/v850/v850.c (v850_output_aligned_bss): Likewise.\n\ncp:\n\t* cp-tree.h (GCC_DIAG_STYLE): #undef before defining.  Change\n\tminimum GCC version for format checking to 4.1.\n\ntestsuite:\n\t* gcc.dg/format/gcc_diag-1.c: Update.\n\nFrom-SVN: r101543", "tree": {"sha": "8a19c399c9e578fcd71ada4df98540c8fc66eb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a19c399c9e578fcd71ada4df98540c8fc66eb48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea40ba9c04882ea2ddf987e2783f98cc38bac081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea40ba9c04882ea2ddf987e2783f98cc38bac081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea40ba9c04882ea2ddf987e2783f98cc38bac081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea40ba9c04882ea2ddf987e2783f98cc38bac081/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be91f647000940ada4a7c512a2cf5d6e2971817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be91f647000940ada4a7c512a2cf5d6e2971817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be91f647000940ada4a7c512a2cf5d6e2971817"}], "stats": {"total": 224, "additions": 182, "deletions": 42}, "files": [{"sha": "84e8a85ddc3e6bed802554977317f81ef5897f7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -1,3 +1,29 @@\n+2005-07-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (GCC_DIAG_STYLE): Define.\n+\t* c-tree.h (GCC_DIAG_STYLE): Do not define.  Change minimum GCC\n+\tversion for format checking to 4.1.\n+\t* c-format.c: Include toplev.h after c-common.h.\n+\t(enum format_type): Add gcc_tdiag_format_type.\n+\t(gcc_tdiag_length_specs, gcc_tdiag_flag_pairs,\n+\tgcc_tdiag_flag_specs, gcc_tdiag_char_table): New.\n+\t(format_types_orig): Add gcc_tdiag.\n+\t(init_dynamic_diag_info): Support gcc_tdiag formats.\n+\t(handle_format_attribute): Likewise.\n+\t* toplev.h (NO_FRONT_END_DIAG, ATTRIBUTE_GCC_FE_DIAG): Remove.\n+\t(GCC_DIAG_STYLE): Default to __gcc_tdiag__.  Change minimum GCC\n+\tversion for format checking to 4.1.\n+\t(warning0, warning, error, pedwarn, sorry): Use\n+\tATTRIBUTE_GCC_DIAG.\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin), varasm.c\n+\t(finish_aliases_1): Do not use %qE.\n+\t* config/arm/arm.c, config/i386/i386.c, config/mmix/mmix.c,\n+\tconfig/pdp11/pdp11.c, stor-layout.c, tree-eh.c, tree-ssa.c:\n+\tCorrect format bugs.\n+\t* config/v850/v850-protos.h (v850_output_aligned_bss): Change size\n+\tparameter to unsigned HOST_WIDE_INT.\n+\t* config/v850/v850.c (v850_output_aligned_bss): Likewise.\n+\n 2005-07-02  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR middle-end/21742"}, {"sha": "76a9650036001beba6239b7c9173c405b8c23f90", "filename": "gcc/c-common.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -926,4 +926,13 @@ extern void preprocess_file (cpp_reader *);\n extern void pp_file_change (const struct line_map *);\n extern void pp_dir_change (cpp_reader *, const char *);\n \n+/* In order for the format checking to accept the C frontend\n+   diagnostic framework extensions, you must include this file before\n+   toplev.h, not after.  The C front end formats are a subset of those\n+   for C++, so they are the appropriate set to use in common code;\n+   cp-tree.h overrides this for C++.  */\n+#ifndef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_cdiag__\n+#endif\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "49af57622981f523794501ba097a575d3f3d1c65", "filename": "gcc/c-format.c", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -25,8 +25,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n-#include \"toplev.h\"\n #include \"c-common.h\"\n+#include \"toplev.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"langhooks.h\"\n@@ -58,7 +58,8 @@ set_Wformat (int setting)\n    format_type_error.  Target-specific format types do not have\n    matching enum values.  */\n enum format_type { printf_format_type, asm_fprintf_format_type,\n-\t\t   gcc_diag_format_type, gcc_cdiag_format_type,\n+\t\t   gcc_diag_format_type, gcc_tdiag_format_type,\n+\t\t   gcc_cdiag_format_type,\n \t\t   gcc_cxxdiag_format_type,\n \t\t   scanf_format_type, strftime_format_type,\n \t\t   strfmon_format_type, format_type_error = -1};\n@@ -310,6 +311,7 @@ static const format_length_info gcc_diag_length_specs[] =\n };\n \n /* The custom diagnostics all accept the same length specifiers.  */\n+#define gcc_tdiag_length_specs gcc_diag_length_specs\n #define gcc_cdiag_length_specs gcc_diag_length_specs\n #define gcc_cxxdiag_length_specs gcc_diag_length_specs\n \n@@ -386,6 +388,7 @@ static const format_flag_pair gcc_diag_flag_pairs[] =\n   { 0, 0, 0, 0 }\n };\n \n+#define gcc_tdiag_flag_pairs gcc_diag_flag_pairs\n #define gcc_cdiag_flag_pairs gcc_diag_flag_pairs\n #define gcc_cxxdiag_flag_pairs gcc_diag_flag_pairs\n \n@@ -398,6 +401,7 @@ static const format_flag_spec gcc_diag_flag_specs[] =\n   { 0, 0, 0, NULL, NULL, 0 }\n };\n \n+#define gcc_tdiag_flag_specs gcc_diag_flag_specs\n #define gcc_cdiag_flag_specs gcc_diag_flag_specs\n \n static const format_flag_spec gcc_cxxdiag_flag_specs[] =\n@@ -543,6 +547,29 @@ static const format_char_info gcc_diag_char_table[] =\n   { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n };\n \n+static const format_char_info gcc_tdiag_char_table[] =\n+{\n+  /* C89 conversion specifiers.  */\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n+  { \"ox\",  0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n+  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  T9L_ULL, BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"pq\", \"cR\", NULL },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"c\",  NULL },\n+\n+  /* Custom conversion specifiers.  */\n+\n+  /* %H will require \"location_t\" at runtime.  */\n+  { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n+\n+  /* These will require a \"tree\" at runtime.  */\n+  { \"DFJT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n+\n+  { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+  { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n+  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+};\n+\n static const format_char_info gcc_cdiag_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n@@ -666,6 +693,12 @@ static const format_kind_info format_types_orig[] =\n     0, 0, 'p', 0, 'L',\n     NULL, &integer_type_node\n   },\n+  { \"gcc_tdiag\",   gcc_tdiag_length_specs,  gcc_tdiag_char_table, \"q+\", NULL, \n+    gcc_tdiag_flag_specs, gcc_tdiag_flag_pairs,\n+    FMT_FLAG_ARG_CONVERT,\n+    0, 0, 'p', 0, 'L',\n+    NULL, &integer_type_node\n+  },\n   { \"gcc_cdiag\",   gcc_cdiag_length_specs,  gcc_cdiag_char_table, \"q+\", NULL, \n     gcc_cdiag_flag_specs, gcc_cdiag_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n@@ -2360,7 +2393,7 @@ init_dynamic_diag_info (void)\n \n   if (!loc || !t || !hwi)\n     {\n-      static format_char_info *diag_fci, *cdiag_fci, *cxxdiag_fci;\n+      static format_char_info *diag_fci, *tdiag_fci, *cdiag_fci, *cxxdiag_fci;\n       static format_length_info *diag_ls;\n       unsigned int i;\n \n@@ -2441,6 +2474,7 @@ init_dynamic_diag_info (void)\n       /* All the GCC diag formats use the same length specs.  */\n       if (!diag_ls)\n \tdynamic_format_types[gcc_diag_format_type].length_char_specs =\n+\t  dynamic_format_types[gcc_tdiag_format_type].length_char_specs =\n \t  dynamic_format_types[gcc_cdiag_format_type].length_char_specs =\n \t  dynamic_format_types[gcc_cxxdiag_format_type].length_char_specs =\n \t  diag_ls = (format_length_info *)\n@@ -2479,6 +2513,30 @@ init_dynamic_diag_info (void)\n \t  diag_fci[i].pointer_count = 1;\n \t}\n \n+      /* Handle the __gcc_tdiag__ format specifics.  */\n+      if (!tdiag_fci)\n+\tdynamic_format_types[gcc_tdiag_format_type].conversion_specs =\n+\t  tdiag_fci = (format_char_info *)\n+\t\t      xmemdup (gcc_tdiag_char_table,\n+\t\t\t       sizeof (gcc_tdiag_char_table),\n+\t\t\t       sizeof (gcc_tdiag_char_table));\n+      if (loc)\n+        {\n+\t  i = find_char_info_specifier_index (tdiag_fci, 'H');\n+\t  tdiag_fci[i].types[0].type = &loc;\n+\t  tdiag_fci[i].pointer_count = 1;\n+\t}\n+      if (t)\n+        {\n+\t  /* All specifiers taking a tree share the same struct.  */\n+\t  i = find_char_info_specifier_index (tdiag_fci, 'D');\n+\t  tdiag_fci[i].types[0].type = &t;\n+\t  tdiag_fci[i].pointer_count = 1;\n+\t  i = find_char_info_specifier_index (tdiag_fci, 'J');\n+\t  tdiag_fci[i].types[0].type = &t;\n+\t  tdiag_fci[i].pointer_count = 1;\n+\t}\n+\n       /* Handle the __gcc_cdiag__ format specifics.  */\n       if (!cdiag_fci)\n \tdynamic_format_types[gcc_cdiag_format_type].conversion_specs =\n@@ -2603,6 +2661,7 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n      initialize certain bits a runtime.  */\n   if (info.format_type == asm_fprintf_format_type\n       || info.format_type == gcc_diag_format_type\n+      || info.format_type == gcc_tdiag_format_type\n       || info.format_type == gcc_cdiag_format_type\n       || info.format_type == gcc_cxxdiag_format_type)\n     {\n@@ -2620,6 +2679,7 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       /* If this is one of the diagnostic attributes, then we have to\n          initialize 'location_t' and 'tree' at runtime.  */\n       else if (info.format_type == gcc_diag_format_type\n+\t       || info.format_type == gcc_tdiag_format_type\n \t       || info.format_type == gcc_cdiag_format_type\n \t       || info.format_type == gcc_cxxdiag_format_type)\n \tinit_dynamic_diag_info ();"}, {"sha": "4cf6fa7c3effedace12332ba15b95775b1fc2ed0", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -608,8 +608,7 @@ extern void c_write_global_declarations (void);\n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must include this file before\n    toplev.h, not after.  */\n-#define GCC_DIAG_STYLE __gcc_cdiag__\n-#if GCC_VERSION >= 3005\n+#if GCC_VERSION >= 4001\n #define ATTRIBUTE_GCC_CDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m ,n))) ATTRIBUTE_NONNULL(m)\n #else\n #define ATTRIBUTE_GCC_CDIAG(m, n) ATTRIBUTE_NONNULL(m)"}, {"sha": "4a87848a35a58349791556b38baa7c876d89f27f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -14750,7 +14750,7 @@ arm_unwind_emit_stm (FILE * asm_out_file, rtx p)\n   else if (reg >= FIRST_FPA_REGNUM && reg <= LAST_FPA_REGNUM)\n     {\n       /* FPA registers are done differently.  */\n-      asm_fprintf (asm_out_file, \"\\t.save %r, %d\\n\", reg, nregs);\n+      asm_fprintf (asm_out_file, \"\\t.save %r, %wd\\n\", reg, nregs);\n       return;\n     }\n   else\n@@ -14848,7 +14848,7 @@ arm_unwind_emit_set (FILE * asm_out_file, rtx p)\n \t      || GET_CODE (XEXP (e1, 1)) != CONST_INT)\n \t    abort ();\n \n-\t  asm_fprintf (asm_out_file, \"\\t.pad #%d\\n\",\n+\t  asm_fprintf (asm_out_file, \"\\t.pad #%wd\\n\",\n \t\t       -INTVAL (XEXP (e1, 1)));\n \t}\n       else if (REGNO (e0) == HARD_FRAME_POINTER_REGNUM)\n@@ -14863,7 +14863,7 @@ arm_unwind_emit_set (FILE * asm_out_file, rtx p)\n \t\tabort ();\n \t      reg = REGNO (XEXP (e1, 0));\n \t      offset = INTVAL (XEXP (e1, 1));\n-\t      asm_fprintf (asm_out_file, \"\\t.setfp %r, %r, #%d\\n\",\n+\t      asm_fprintf (asm_out_file, \"\\t.setfp %r, %r, #%wd\\n\",\n \t\t\t   HARD_FRAME_POINTER_REGNUM, reg,\n \t\t\t   INTVAL (XEXP (e1, 1)));\n \t    }"}, {"sha": "f3d4376459e4d6936f02245a9eb9219ed4b883ec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -14659,7 +14659,7 @@ get_element_number (tree vec_type, tree arg)\n   if (!host_integerp (arg, 1)\n       || (elt = tree_low_cst (arg, 1), elt > max))\n     {\n-      error (\"selector must be an integer constant in the range 0..%i\", max);\n+      error (\"selector must be an integer constant in the range 0..%wi\", max);\n       return 0;\n     }\n "}, {"sha": "1b5acc43306fe458c21fbe6588af7850e03d0e9c", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -1891,7 +1891,7 @@ mmix_expand_prologue (void)\n \n   /* Make sure we don't get an unaligned stack.  */\n   if ((stack_space_to_allocate % 8) != 0)\n-    internal_error (\"stack frame not a multiple of 8 bytes: %d\",\n+    internal_error (\"stack frame not a multiple of 8 bytes: %wd\",\n \t\t    stack_space_to_allocate);\n \n   if (current_function_pretend_args_size)\n@@ -2127,7 +2127,7 @@ mmix_expand_epilogue (void)\n \n   /* Make sure we don't get an unaligned stack.  */\n   if ((stack_space_to_deallocate % 8) != 0)\n-    internal_error (\"stack frame not a multiple of octabyte: %d\",\n+    internal_error (\"stack frame not a multiple of octabyte: %wd\",\n \t\t    stack_space_to_deallocate);\n \n   /* We will add back small offsets to the stack pointer as we go."}, {"sha": "4036b12449a03306f44d2b10189eda1d33823f08", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -245,7 +245,7 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n     {\n       fprintf (stream, \"\\t/*abuse empty parameter slot for locals!*/\\n\");\n       if (size > 2)\n-\tfprintf(stream, \"\\tsub $%#o, sp\\n\", size - 2);\n+\tasm_fprintf (stream, \"\\tsub $%#wo, sp\\n\", size - 2);\n \n     }\n }\n@@ -285,7 +285,7 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n \n     /* make frame */\n     if (fsize)\t\t\t\t\t\t\t\n-\tfprintf (stream, \"\\tsub $%#o, sp\\n\", fsize);\t\t\t\n+\tasm_fprintf (stream, \"\\tsub $%#wo, sp\\n\", fsize);\n \n     /* save CPU registers  */\n     for (regno = 0; regno < 8; regno++)\t\t\t\t"}, {"sha": "04721695b88b583928044cff5831629c3f4f912a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -6826,7 +6826,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       && fcode <= ALTIVEC_BUILTIN_OVERLOADED_LAST)\n     {\n       *expandedp = true;\n-      error (\"unresolved overload for Altivec builtin %qE\", fndecl);\n+      error (\"unresolved overload for Altivec builtin %qF\", fndecl);\n       return const0_rtx;\n     }\n "}, {"sha": "aff12412fedb4eb938f1489a0b0750fab189938f", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -61,7 +61,7 @@ extern rtx    function_arg                  (CUMULATIVE_ARGS *, Mmode, tree, int\n \n #ifdef TREE_CODE\n extern int    v850_interrupt_function_p     (tree);\n-extern void   v850_output_aligned_bss       (FILE *, tree, const char *, int, int);\n+extern void   v850_output_aligned_bss       (FILE *, tree, const char *, unsigned HOST_WIDE_INT, int);\n extern void   v850_output_common            (FILE *, tree, const char *, int, int);\n extern void   v850_output_local             (FILE *, tree, const char *, int, int);\n extern v850_data_area v850_get_data_area    (tree);"}, {"sha": "676c516ff2e439c9c60b65df29d300b1c664ab87", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -2485,7 +2485,7 @@ void\n v850_output_aligned_bss (FILE * file,\n                          tree decl,\n                          const char * name,\n-                         int size,\n+                         unsigned HOST_WIDE_INT size,\n                          int align)\n {\n   switch (v850_get_data_area (decl))"}, {"sha": "2f0ecd2acaee2654f76270a3aa1f43f28519dd6a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -1,3 +1,8 @@\n+2005-07-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* cp-tree.h (GCC_DIAG_STYLE): #undef before defining.  Change\n+\tminimum GCC version for format checking to 4.1.\n+\n 2005-07-02  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* Make-lang.in (cc1plus-checksum.c): Use"}, {"sha": "7edb1e639e4f2ad3e07588b3527db544ba77450d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -4367,9 +4367,11 @@ extern void cp_genericize\t\t\t(tree);\n \n /* In order for the format checking to accept the C++ frontend\n    diagnostic framework extensions, you must include this file before\n-   toplev.h, not after.  */\n+   toplev.h, not after.  We override the definition of GCC_DIAG_STYLE\n+   in c-common.h.  */\n+#undef GCC_DIAG_STYLE\n #define GCC_DIAG_STYLE __gcc_cxxdiag__\n-#if GCC_VERSION >= 3004\n+#if GCC_VERSION >= 4001\n #define ATTRIBUTE_GCC_CXXDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n #else\n #define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)"}, {"sha": "77dfc192775e51f736ec378e0f4579f5bb614d57", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -30,6 +30,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"output.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"target.h\"\n@@ -453,7 +454,7 @@ layout_decl (tree decl, unsigned int known_align)\n \t  if (compare_tree_int (size, size_as_int) == 0)\n \t    warning (0, \"size of %q+D is %d bytes\", decl, size_as_int);\n \t  else\n-\t    warning (0, \"size of %q+D is larger than %d bytes\",\n+\t    warning (0, \"size of %q+D is larger than %wd bytes\",\n                      decl, larger_than_size);\n \t}\n     }"}, {"sha": "5d94b114862f5a6dd74e6abf81292958d1242f8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -1,3 +1,7 @@\n+2005-07-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/format/gcc_diag-1.c: Update.\n+\n 2005-07-02  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/pr22051-1.c: New test."}, {"sha": "f8af0ea4d9eb21ac226b517867cfc386c96ca04b", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -21,6 +21,7 @@ union tree_node;\n typedef union tree_node *tree;\n \n extern int diag (const char *, ...) ATTRIBUTE_DIAG(__gcc_diag__);\n+extern int tdiag (const char *, ...) ATTRIBUTE_DIAG(__gcc_tdiag__);\n extern int cdiag (const char *, ...) ATTRIBUTE_DIAG(__gcc_cdiag__);\n extern int cxxdiag (const char *, ...) ATTRIBUTE_DIAG(__gcc_cxxdiag__);\n \n@@ -35,42 +36,57 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n {\n   /* Acceptable C90 specifiers, flags and modifiers.  */\n   diag (\"%%\");\n+  tdiag (\"%%\");\n   cdiag (\"%%\");\n   cxxdiag (\"%%\");\n   diag (\"%d%i%o%u%x%c%s%p%%\", i, i, u, u, u, i, s, p);\n+  tdiag (\"%d%i%o%u%x%c%s%p%%\", i, i, u, u, u, i, s, p);\n   cdiag (\"%d%i%o%u%x%c%s%p%%\", i, i, u, u, u, i, s, p);\n   cxxdiag (\"%d%i%o%u%x%c%s%p%%\", i, i, u, u, u, i, s, p);\n   diag (\"%qd%qi%qo%qu%qx%qc%qs%qp%<%%%'%>\", i, i, u, u, u, i, s, p);\n+  tdiag (\"%qd%qi%qo%qu%qx%qc%qs%qp%<%%%'%>\", i, i, u, u, u, i, s, p);\n   cdiag (\"%qd%qi%qo%qu%qx%qc%qs%qp%<%%%'%>\", i, i, u, u, u, i, s, p);\n   cxxdiag (\"%qd%qi%qo%qu%qx%qc%qs%qp%<%%%'%>\", i, i, u, u, u, i, s, p);\n   diag (\"%ld%li%lo%lu%lx\", l, l, ul, ul, ul);\n+  tdiag (\"%ld%li%lo%lu%lx\", l, l, ul, ul, ul);\n   cdiag (\"%ld%li%lo%lu%lx\", l, l, ul, ul, ul);\n   cxxdiag (\"%ld%li%lo%lu%lx\", l, l, ul, ul, ul);\n   diag (\"%lld%lli%llo%llu%llx\", ll, ll, ull, ull, ull);\n+  tdiag (\"%lld%lli%llo%llu%llx\", ll, ll, ull, ull, ull);\n   cdiag (\"%lld%lli%llo%llu%llx\", ll, ll, ull, ull, ull);\n   cxxdiag (\"%lld%lli%llo%llu%llx\", ll, ll, ull, ull, ull);\n   diag (\"%wd%wi%wo%wu%wx\", ll, ll, ull, ull, ull);\n+  tdiag (\"%wd%wi%wo%wu%wx\", ll, ll, ull, ull, ull);\n   cdiag (\"%wd%wi%wo%wu%wx\", ll, ll, ull, ull, ull);\n   cxxdiag (\"%wd%wi%wo%wu%wx\", ll, ll, ull, ull, ull);\n   diag (\"%.*s\", i, s);\n+  tdiag (\"%.*s\", i, s);\n   cdiag (\"%.*s\", i, s);\n   cxxdiag (\"%.*s\", i, s);\n \n   /* Extensions provided in the diagnostic framework.  */\n   diag (\"%m\");\n+  tdiag (\"%m\");\n   cdiag (\"%m\");\n   cxxdiag (\"%m\");\n   diag (\"%H\", loc);\n+  tdiag (\"%H\", loc);\n   cdiag (\"%H\", loc);\n   cxxdiag (\"%H\", loc);\n   diag (\"%J\", t1);\n+  tdiag (\"%J\", t1);\n   cdiag (\"%J\", t1);\n   cxxdiag (\"%J\", t1);\n \n+  tdiag (\"%D%F%T\", t1, t1, t1);\n+  tdiag (\"%+D%+F%+T\", t1, t1, t1);\n+  tdiag (\"%q+D%q+F%q+T\", t1, t1, t1);\n+  tdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n   cdiag (\"%D%F%T\", t1, t1, t1);\n   cdiag (\"%+D%+F%+T\", t1, t1, t1);\n   cdiag (\"%q+D%q+F%q+T\", t1, t1, t1);\n   cdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n+  cdiag (\"%E\", t1);\n   cxxdiag (\"%A%D%E%F%T%V\", t1, t1, t1, t1, t1, t1);\n   cxxdiag (\"%D%D%D%D\", t1, t2, *t3, t4[5]);\n   cxxdiag (\"%#A%#D%#E%#F%#T%#V\", t1, t1, t1, t1, t1, t1);\n@@ -80,36 +96,49 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n \n   /* Bad stuff with extensions.  */\n   diag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n+  tdiag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n   cdiag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n   cxxdiag (\"%m\", i); /* { dg-warning \"format\" \"extra arg\" } */\n   diag (\"%#m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n+  tdiag (\"%#m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%#m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%#m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   diag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n+  tdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   diag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n+  tdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cxxdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n   diag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n+  tdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cxxdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   diag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n+  tdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n   cdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n   diag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n+  tdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n   cdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n   diag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n+  tdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   cdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   diag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n+  tdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   diag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n+  tdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   diag (\"%D\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n+  tdiag (\"%A\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n+  tdiag (\"%E\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n+  tdiag (\"%#D\", t1); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%A\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n   cdiag (\"%#D\", t1); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%+D\", t1);\n@@ -118,10 +147,13 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   cxxdiag (\"%C\", i, i); /* { dg-warning \"format\" \"extra arg\" } */\n   cxxdiag (\"%#C\", i); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%+C\", i); /* { dg-warning \"format\" \"bogus modifier\" } */\n+  tdiag (\"%D\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cdiag (\"%D\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cxxdiag (\"%D\"); /* { dg-warning \"format\" \"missing arg\" } */\n+  tdiag (\"%D\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n   cdiag (\"%D\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%D\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n+  tdiag (\"%D\", t1, t1); /* { dg-warning \"format\" \"extra arg\" } */\n   cdiag (\"%D\", t1, t1); /* { dg-warning \"format\" \"extra arg\" } */\n   cxxdiag (\"%D\", t1, t1); /* { dg-warning \"format\" \"extra arg\" } */\n \n@@ -137,36 +169,47 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n \n   /* Various tests of bad argument types.  */\n   diag (\"%-d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%-d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%-d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%-d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"% d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"% d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"% d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"% d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%#o\", u); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%#o\", u); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%#o\", u); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%#o\", u); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%0d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%0d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%0d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%0d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%08d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%08d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%08d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%08d\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%+d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%+d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%+d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%+d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%-3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%-3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%-3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%-3d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%.7d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%.7d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%.7d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%.7d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%+9.4d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%+9.4d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%+9.4d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%+9.4d\\n\", i); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%.3ld\\n\", l); /* { dg-warning \"format\" \"bad flag\" } */\n+  tdiag (\"%.3ld\\n\", l); /* { dg-warning \"format\" \"bad flag\" } */\n   cdiag (\"%.3ld\\n\", l); /* { dg-warning \"format\" \"bad flag\" } */\n   cxxdiag (\"%.3ld\\n\", l); /* { dg-warning \"format\" \"bad flag\" } */\n   diag (\"%d %lu\\n\", i, ul);"}, {"sha": "ddd6b61fe54cc9f60981dd58b66682436412e835", "filename": "gcc/toplev.h", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -44,34 +44,25 @@ extern void _fatal_insn (const char *, rtx, const char *, int, const char *)\n /* If we haven't already defined a frontend specific diagnostics\n    style, use the generic one.  */\n #ifndef GCC_DIAG_STYLE\n-#define GCC_DIAG_STYLE __gcc_diag__\n-#define NO_FRONT_END_DIAG\n+#define GCC_DIAG_STYLE __gcc_tdiag__\n #endif\n /* None of these functions are suitable for ATTRIBUTE_PRINTF, because\n    each language front end can extend them with its own set of format\n-   specifiers.  We must use custom format checks.  Note that at present\n-   the front-end %D specifier is used in non-front-end code with some\n-   functions, and those formats can only be checked in front-end code.  */\n-#if GCC_VERSION >= 3005\n+   specifiers.  We must use custom format checks.  */\n+#if GCC_VERSION >= 4001\n #define ATTRIBUTE_GCC_DIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n-#ifdef NO_FRONT_END_DIAG\n-#define ATTRIBUTE_GCC_FE_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#else\n-#define ATTRIBUTE_GCC_FE_DIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n-#endif\n #else\n #define ATTRIBUTE_GCC_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#define ATTRIBUTE_GCC_FE_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n #endif\n extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void warning0 (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n-extern void warning (int, const char *, ...) ATTRIBUTE_GCC_FE_DIAG(2,3);\n-extern void error (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n+extern void warning0 (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void pedwarn (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n-extern void sorry (const char *, ...) ATTRIBUTE_GCC_FE_DIAG(1,2);\n+extern void pedwarn (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n "}, {"sha": "9449d5b861a51f9137e18441a5892f71737c8644", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -1764,7 +1764,7 @@ mark_eh_edge (struct eh_region *region, void *data)\n   e = find_edge (src, dst);\n   if (!e)\n     {\n-      error (\"EH edge %i->%i is missing %i %i.\", src->index, dst->index, src, dst);\n+      error (\"EH edge %i->%i is missing.\", src->index, dst->index);\n       mark_eh_edge_found_error = true;\n     }\n   else if (!(e->flags & EDGE_EH))"}, {"sha": "c4fbf8a8ab1f7bb24f92fd191b75cbfaf15fc198", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -346,7 +346,7 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n       if (e->dest != bb)\n \t{\n \t  error (\"Wrong edge %d->%d for PHI argument\\n\",\n-\t         e->src->index, e->dest->index, bb->index);\n+\t         e->src->index, e->dest->index);\n \t  err = true;\n \t}\n "}, {"sha": "59abefbdf127bb1af634078d01e634cdb4c1af32", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea40ba9c04882ea2ddf987e2783f98cc38bac081/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ea40ba9c04882ea2ddf987e2783f98cc38bac081", "patch": "@@ -4583,11 +4583,11 @@ finish_aliases_1 (void)\n \n       target_decl = find_decl_and_mark_needed (p->decl, p->target);\n       if (target_decl == NULL)\n-\terror (\"%q+D aliased to undefined symbol %qE\",\n-\t       p->decl, p->target);\n+\terror (\"%q+D aliased to undefined symbol %qs\",\n+\t       p->decl, IDENTIFIER_POINTER (p->target));\n       else if (DECL_EXTERNAL (target_decl))\n-\terror (\"%q+D aliased to external symbol %qE\",\n-\t       p->decl, p->target);\n+\terror (\"%q+D aliased to external symbol %qs\",\n+\t       p->decl, IDENTIFIER_POINTER (p->target));\n     }\n }\n "}]}