{"sha": "456976d81d0d5c3d01050d4f6c12b80db61b5d55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2OTc2ZDgxZDBkNWMzZDAxMDUwZDRmNmMxMmI4MGRiNjFiNWQ1NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-08-20T14:04:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-08-20T14:04:30Z"}, "message": "ada-tree.h (SET_TYPE_RM_VALUE): Mark the expression as visited.\n\n\t* gcc-interface/ada-tree.h (SET_TYPE_RM_VALUE): Mark the expression\n\tas visited.\n\t* gcc-interface/misc.c (gnat_get_subrange_bounds): Always return the\n\tbounds.\n\t* gcc-interface/trans.c (add_decl_expr): Do not mark gigi-specific\n\tfields.\n\t(gnat_gimplify_expr) <DECL_EXPR>: New case.\n\nFrom-SVN: r150963", "tree": {"sha": "06e8be604568a4fdad47be340fc9287316228a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e8be604568a4fdad47be340fc9287316228a35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456976d81d0d5c3d01050d4f6c12b80db61b5d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456976d81d0d5c3d01050d4f6c12b80db61b5d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456976d81d0d5c3d01050d4f6c12b80db61b5d55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456976d81d0d5c3d01050d4f6c12b80db61b5d55/comments", "author": null, "committer": null, "parents": [{"sha": "197c68cc978ee36fab09445e9f09a5752f2585f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197c68cc978ee36fab09445e9f09a5752f2585f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197c68cc978ee36fab09445e9f09a5752f2585f1"}], "stats": {"total": 128, "additions": 95, "deletions": 33}, "files": [{"sha": "0427cbe003c788c246c96b659f7ede3658d15bc8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -1,3 +1,13 @@\n+2009-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (SET_TYPE_RM_VALUE): Mark the expression\n+\tas visited.\n+\t* gcc-interface/misc (gnat_get_subrange_bounds): Always return the\n+\tbounds.\n+\t* gcc-interface/trans.c (add_decl_expr): Do not mark gigi-specific\n+\tfields.\n+\t(gnat_gimplify_expr) <DECL_EXPR>: New case.\n+\n 2009-08-17  Aurelien Jarno  <aurelien@aurel32.net>\n \n \t* s-osinte-kfreebsd-gnu.ads (SA_ONSTACK): New constant."}, {"sha": "18eb41657cf0c227f6848c12c7249a4a681477d8", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -208,6 +208,10 @@ do {\t\t\t\t\t\t   \\\n   tree tmp = (X);\t\t\t\t   \\\n   if (!TYPE_RM_VALUES (NODE))\t\t\t   \\\n     TYPE_RM_VALUES (NODE) = make_tree_vec (3);\t   \\\n+  /* ??? The field is not visited by the generic   \\\n+     code so we need to mark it manually.  */\t   \\\n+  if (!TREE_CONSTANT (tmp))\t\t\t   \\\n+    mark_visited (&tmp);\t\t\t   \\\n   TREE_VEC_ELT (TYPE_RM_VALUES (NODE), (N)) = tmp; \\\n } while (0)\n "}, {"sha": "cc9eeaa8035baa0d8b1865860f6ab6ffff16c9ad", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -656,14 +656,8 @@ gnat_type_max_size (const_tree gnu_type)\n static void\n gnat_get_subrange_bounds (const_tree gnu_type, tree *lowval, tree *highval)\n {\n-  tree min = TYPE_MIN_VALUE (gnu_type);\n-  tree max = TYPE_MAX_VALUE (gnu_type);\n-  /* If the bounds aren't constant, use non-representable constant values\n-     to get the same effect on debug info without tree sharing issues.  */\n-  *lowval\n-    = TREE_CONSTANT (min) ? min : build_int_cstu (integer_type_node, -1);\n-  *highval\n-    = TREE_CONSTANT (max) ? max : build_int_cstu (integer_type_node, -1);\n+  *lowval = TYPE_MIN_VALUE (gnu_type);\n+  *highval = TYPE_MAX_VALUE (gnu_type);\n }\n \n /* GNU_TYPE is a type. Determine if it should be passed by reference by"}, {"sha": "b3a201fcc8e1c0527499b49975f26066b64239f2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -5557,31 +5557,6 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t  mark_visited (&DECL_SIZE_UNIT (gnu_decl));\n \t  mark_visited (&DECL_INITIAL (gnu_decl));\n \t}\n-\n-      /* In any case, we have to deal with our own fields.  */\n-      else if (TREE_CODE (gnu_decl) == TYPE_DECL)\n-\tswitch (TREE_CODE (type))\n-\t  {\n-\t  case RECORD_TYPE:\n-\t  case UNION_TYPE:\n-\t  case QUAL_UNION_TYPE:\n-\t    if ((t = TYPE_ADA_SIZE (type)))\n-\t      mark_visited (&t);\n-\t    break;\n-\n-\t  case INTEGER_TYPE:\n-\t  case ENUMERAL_TYPE:\n-\t  case BOOLEAN_TYPE:\n-\t  case REAL_TYPE:\n-\t    if ((t = TYPE_RM_MIN_VALUE (type)))\n-\t      mark_visited (&t);\n-\t    if ((t = TYPE_RM_MAX_VALUE (type)))\n-\t      mark_visited (&t);\n-\t    break;\n-\n-\t  default:\n-\t    break;\n-\t  }\n     }\n   else\n     add_stmt_with_node (gnu_stmt, gnat_entity);\n@@ -5875,6 +5850,47 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \t  return GS_ALL_DONE;\n \t}\n \n+      return GS_UNHANDLED;\n+\n+    case DECL_EXPR:\n+      op = DECL_EXPR_DECL (expr);\n+\n+      /* The expressions for the RM bounds must be gimplified to ensure that\n+\t they are properly elaborated.  See gimplify_decl_expr.  */\n+      if ((TREE_CODE (op) == TYPE_DECL || TREE_CODE (op) == VAR_DECL)\n+\t  && !TYPE_SIZES_GIMPLIFIED (TREE_TYPE (op)))\n+\tswitch (TREE_CODE (TREE_TYPE (op)))\n+\t{\n+\t  case INTEGER_TYPE:\n+\t  case ENUMERAL_TYPE:\n+\t  case BOOLEAN_TYPE:\n+\t  case REAL_TYPE:\n+\t    {\n+\t      tree type = TYPE_MAIN_VARIANT (TREE_TYPE (op)), t, val;\n+\n+\t      val = TYPE_RM_MIN_VALUE (type);\n+\t      if (val)\n+\t\t{\n+\t\t  gimplify_one_sizepos (&val, pre_p);\n+\t\t  for (t = type; t; t = TYPE_NEXT_VARIANT (t))\n+\t\t    SET_TYPE_RM_MIN_VALUE (t, val);\n+\t\t}\n+\n+\t      val = TYPE_RM_MAX_VALUE (type);\n+\t      if (val)\n+\t\t{\n+\t\t  gimplify_one_sizepos (&val, pre_p);\n+\t\t  for (t = type; t; t = TYPE_NEXT_VARIANT (t))\n+\t\t    SET_TYPE_RM_MAX_VALUE (t, val);\n+\t\t}\n+\n+\t    }\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t}\n+\n       /* ... fall through ... */\n \n     default:"}, {"sha": "cf6d2e5ca1df64c3c6903dbe1dcf72cc984db3c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -1,3 +1,7 @@\n+2009-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/dynamic_bound.adb: New test.\n+\n 2009-08-20  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41121"}, {"sha": "99720cdfa203d76412fb6979d05065979557ebc7", "filename": "gcc/testsuite/gnat.dg/dynamic_bound.adb", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Ftestsuite%2Fgnat.dg%2Fdynamic_bound.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456976d81d0d5c3d01050d4f6c12b80db61b5d55/gcc%2Ftestsuite%2Fgnat.dg%2Fdynamic_bound.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdynamic_bound.adb?ref=456976d81d0d5c3d01050d4f6c12b80db61b5d55", "patch": "@@ -0,0 +1,34 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnato\" }\n+\n+procedure Dynamic_Bound is\n+\n+  procedure Define (Count : Integer) is\n+\n+    type Count_T is new Integer range 0 .. Count * 1000;\n+\n+    type Obj_T is record\n+      Count : Count_T;\n+    end record;\n+\n+    type T is access Obj_T ;\n+\n+    procedure Create (S : in out T) is\n+    begin\n+      S := new Obj_T'(Count => 0);\n+    end;\n+\n+    procedure Add (To : in out T) is\n+    begin\n+      To.Count := To.Count + 1;\n+    end;\n+\n+    My_T : T;\n+\n+  begin\n+    Create (My_T);\n+  end;\n+\n+begin\n+  Define (1);\n+end;"}]}