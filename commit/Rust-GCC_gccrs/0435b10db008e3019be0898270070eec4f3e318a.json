{"sha": "0435b10db008e3019be0898270070eec4f3e318a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzNWIxMGRiMDA4ZTMwMTliZTA4OTgyNzAwNzBlZWM0ZjNlMzE4YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-02T17:39:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-02T17:39:06Z"}, "message": "[AArch64] Add a couple of SVE ACLE comparison folds\n\nWhen writing vector-length specific SVE code, it's useful to be able\nto store an svbool_t predicate in a GNU vector of unsigned chars.\nThis patch makes sure that there is no overhead when converting\nto that form and then immediately reading it back again.\n\n2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins.h\n\t(gimple_folder::force_vector): Declare.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(gimple_folder::force_vector): New function.\n\t* config/aarch64/aarch64-sve-builtins-base.cc\n\t(svcmp_impl::fold): Likewise.\n\t(svdup_impl::fold): Handle svdup_z too.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/eqne_dup_1.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/dup_f16.c (dup_0_f16_z): Expect\n\tthe call to be folded to zero.\n\t* gcc.target/aarch64/sve/acle/asm/dup_f32.c (dup_0_f32_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_f64.c (dup_0_f64_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_s8.c (dup_0_s8_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_s16.c (dup_0_s16_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_s32.c (dup_0_s32_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_s64.c (dup_0_s64_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_u8.c (dup_0_u8_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_u16.c (dup_0_u16_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_u32.c (dup_0_u32_z): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_u64.c (dup_0_u64_z): Likewise.\n\nFrom-SVN: r278907", "tree": {"sha": "96d50c1a58cb3a70e9d378758c766f97cb39ce6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d50c1a58cb3a70e9d378758c766f97cb39ce6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0435b10db008e3019be0898270070eec4f3e318a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0435b10db008e3019be0898270070eec4f3e318a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0435b10db008e3019be0898270070eec4f3e318a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0435b10db008e3019be0898270070eec4f3e318a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6098f64819e729026df0ebf0e18ac5de713e36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6098f64819e729026df0ebf0e18ac5de713e36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6098f64819e729026df0ebf0e18ac5de713e36e"}], "stats": {"total": 133, "additions": 122, "deletions": 11}, "files": [{"sha": "29fed4f40f4bd71a1dad052b786348432553bf16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -1,3 +1,13 @@\n+2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(gimple_folder::force_vector): Declare.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(gimple_folder::force_vector): New function.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc\n+\t(svcmp_impl::fold): Likewise.\n+\t(svdup_impl::fold): Handle svdup_z too.\n+\n 2019-12-02  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-devirt.c (warn_types_mismatch): Use get_odr_name_for_type"}, {"sha": "38bd3adce1ebbde4c58531ffd26eedd4ae4938b0", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -333,6 +333,28 @@ class svcmp_impl : public function_base\n   CONSTEXPR svcmp_impl (tree_code code, int unspec_for_fp)\n     : m_code (code), m_unspec_for_fp (unspec_for_fp) {}\n \n+  gimple *\n+  fold (gimple_folder &f) const OVERRIDE\n+  {\n+    tree pg = gimple_call_arg (f.call, 0);\n+    tree rhs1 = gimple_call_arg (f.call, 1);\n+    tree rhs2 = gimple_call_arg (f.call, 2);\n+\n+    /* Convert a ptrue-predicated integer comparison into the corresponding\n+       gimple-level operation.  */\n+    if (integer_all_onesp (pg)\n+\t&& f.type_suffix (0).element_bytes == 1\n+\t&& f.type_suffix (0).integer_p)\n+      {\n+\tgimple_seq stmts = NULL;\n+\trhs2 = f.force_vector (stmts, TREE_TYPE (rhs1), rhs2);\n+\tgsi_insert_seq_before (f.gsi, stmts, GSI_SAME_STMT);\n+\treturn gimple_build_assign (f.lhs, m_code, rhs1, rhs2);\n+      }\n+\n+    return NULL;\n+  }\n+\n   rtx\n   expand (function_expander &e) const OVERRIDE\n   {\n@@ -700,6 +722,17 @@ class svdup_impl : public quiet<function_base>\n \t  return gimple_build_assign (f.lhs, VEC_DUPLICATE_EXPR, rhs);\n       }\n \n+    /* svdup_z (pg, x) == VEC_COND_EXPR <pg, VEC_DUPLICATE_EXPR <x>, 0>.  */\n+    if (f.pred == PRED_z)\n+      {\n+\tgimple_seq stmts = NULL;\n+\ttree pred = f.convert_pred (stmts, vec_type, 0);\n+\trhs = f.force_vector (stmts, vec_type, rhs);\n+\tgsi_insert_seq_before (f.gsi, stmts, GSI_SAME_STMT);\n+\treturn gimple_build_assign (f.lhs, VEC_COND_EXPR, pred, rhs,\n+\t\t\t\t    build_zero_cst (vec_type));\n+      }\n+\n     return NULL;\n   }\n "}, {"sha": "3a6b4704604ac04786af14af43cfcbb505829a80", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -2234,6 +2234,17 @@ gimple_folder::gimple_folder (const function_instance &instance, tree fndecl,\n {\n }\n \n+/* VALUE might be a vector of type VECTYPE or a single scalar element.\n+   Duplicate it into a vector of type VECTYPE in the latter case, adding any\n+   new statements to STMTS.  */\n+tree\n+gimple_folder::force_vector (gimple_seq &stmts, tree vectype, tree value)\n+{\n+  if (!VECTOR_TYPE_P (TREE_TYPE (value)))\n+    value = gimple_build_vector_from_val (&stmts, vectype, value);\n+  return value;\n+}\n+\n /* Convert predicate argument ARGNO so that it has the type appropriate for\n    an operation on VECTYPE.  Add any new statements to STMTS.  */\n tree"}, {"sha": "0884b0f6756fb7b8376a032bcfa81962b25893f3", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -488,6 +488,7 @@ class gimple_folder : public function_call_info\n   gimple_folder (const function_instance &, tree,\n \t\t gimple_stmt_iterator *, gcall *);\n \n+  tree force_vector (gimple_seq &, tree, tree);\n   tree convert_pred (gimple_seq &, tree, unsigned int);\n   tree fold_contiguous_base (gimple_seq &, tree);\n   tree load_store_cookie (tree);"}, {"sha": "2e6d171750b8e14e93d1c80135db151c2afdf89c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -1,3 +1,19 @@\n+2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/eqne_dup_1.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_f16.c (dup_0_f16_z): Expect\n+\tthe call to be folded to zero.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_f32.c (dup_0_f32_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_f64.c (dup_0_f64_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_s8.c (dup_0_s8_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_s16.c (dup_0_s16_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_s32.c (dup_0_s32_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_s64.c (dup_0_s64_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_u8.c (dup_0_u8_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_u16.c (dup_0_u16_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_u32.c (dup_0_u32_z): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_u64.c (dup_0_u64_z): Likewise.\n+\n 2019-12-02  Sudakshina Das  <sudi.das@arm.com>\n \n \t* g++.dg/ext/arm-fp16/arm-fp16-ops.h: Remove volatile keyword."}, {"sha": "a90c7118448cdf058db264f57c61a6cc51e89e5e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f16.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -120,7 +120,7 @@ TEST_UNIFORM_Z (dup_1_f16_z, svfloat16_t,\n \n /*\n ** dup_0_f16_z:\n-**\tmov\tz0\\.h, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_f16_z, svfloat16_t,"}, {"sha": "ba23781429c87509606d168d0d96530dd70cc8f2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f32.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -118,7 +118,7 @@ TEST_UNIFORM_Z (dup_1_f32_z, svfloat32_t,\n \n /*\n ** dup_0_f32_z:\n-**\tmov\tz0\\.s, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_f32_z, svfloat32_t,"}, {"sha": "b397da885673a565c994415e6d6659f517c71e3a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_f64.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -118,7 +118,7 @@ TEST_UNIFORM_Z (dup_1_f64_z, svfloat64_t,\n \n /*\n ** dup_0_f64_z:\n-**\tmov\tz0\\.d, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_f64_z, svfloat64_t,"}, {"sha": "21ab6f63e375583a0a031ee58c96244f0633c854", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s16.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -869,7 +869,7 @@ TEST_UNIFORM_Z (dup_m8000_s16_z, svint16_t,\n \n /*\n ** dup_0_s16_z:\n-**\tmov\tz0\\.h, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_s16_z, svint16_t,"}, {"sha": "500ec48b34a63971626e879d24206d947bdad5d6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s32.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -849,7 +849,7 @@ TEST_UNIFORM_Z (dup_m8000_s32_z, svint32_t,\n \n /*\n ** dup_0_s32_z:\n-**\tmov\tz0\\.s, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_s32_z, svint32_t,"}, {"sha": "651bb1b43f0232e3d93288996d7418e90ebd76e1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_s64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s64.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -849,7 +849,7 @@ TEST_UNIFORM_Z (dup_m8000_s64_z, svint64_t,\n \n /*\n ** dup_0_s64_z:\n-**\tmov\tz0\\.d, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_s64_z, svint64_t,"}, {"sha": "f3c9db8ead70187dd9ce0e0570ce0e499399bded", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_s8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_s8.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -275,7 +275,7 @@ TEST_UNIFORM_Z (dup_m128_s8_z, svint8_t,\n \n /*\n ** dup_0_s8_z:\n-**\tmov\tz0\\.b, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_s8_z, svint8_t,"}, {"sha": "dba409d5b3bfc7e6213213718371502c3bd1308a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u16.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -869,7 +869,7 @@ TEST_UNIFORM_Z (dup_m8000_u16_z, svuint16_t,\n \n /*\n ** dup_0_u16_z:\n-**\tmov\tz0\\.h, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_u16_z, svuint16_t,"}, {"sha": "7d5b4626fd43284a7b08448843c14ed8a80a628a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u32.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -849,7 +849,7 @@ TEST_UNIFORM_Z (dup_m8000_u32_z, svuint32_t,\n \n /*\n ** dup_0_u32_z:\n-**\tmov\tz0\\.s, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_u32_z, svuint32_t,"}, {"sha": "0431e75bc65ca46652c0f6f769c6579c6fbbd8c2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_u64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u64.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -849,7 +849,7 @@ TEST_UNIFORM_Z (dup_m8000_u64_z, svuint64_t,\n \n /*\n ** dup_0_u64_z:\n-**\tmov\tz0\\.d, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_u64_z, svuint64_t,"}, {"sha": "1bb4cc1bd794ff9a36d52d44bbfcb723e78c01df", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_u8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_u8.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -275,7 +275,7 @@ TEST_UNIFORM_Z (dup_m128_u8_z, svuint8_t,\n \n /*\n ** dup_0_u8_z:\n-**\tmov\tz0\\.b, p0/z, #0\n+**\tmov\tz0\\.[bhsd], #0\n **\tret\n */\n TEST_UNIFORM_Z (dup_0_u8_z, svuint8_t,"}, {"sha": "651f5ae18f87b98ffab23cd2c41c9d10a8f7cd3f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/eqne_dup_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Feqne_dup_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0435b10db008e3019be0898270070eec4f3e318a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Feqne_dup_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Feqne_dup_1.c?ref=0435b10db008e3019be0898270070eec4f3e318a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-additional-options \"-O\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_sve.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+** cmp1:\n+**\tptrue\t(p[0-7])\\.b(?:[^\\n]*)\n+**\tcmple\tp0\\.b, \\1/z, z0\\.b, z1\\.d\n+**\tret\n+*/\n+svbool_t\n+cmp1 (svint8_t x, svint64_t y)\n+{\n+  svbool_t res = svcmple_wide (svptrue_b8 (), x, y);\n+  svuint8_t res_u8 = svdup_u8_z (res, 1);\n+  return svcmpne (svptrue_b8 (), res_u8, 0);\n+}\n+\n+/*\n+** cmp2:\n+**\tptrue\t(p[0-7])\\.b(?:[^\\n]*)\n+**\tcmplt\tp0\\.b, \\1/z, z0\\.b, z1\\.d\n+**\tret\n+*/\n+svbool_t\n+cmp2 (svint8_t x, svint64_t y)\n+{\n+  svbool_t res = svcmplt_wide (svptrue_b8 (), x, y);\n+  svuint8_t res_u8 = svdup_u8_z (res, 42);\n+  return svcmpeq (svptrue_b8 (), res_u8, 42);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif"}]}