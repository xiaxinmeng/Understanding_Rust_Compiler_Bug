{"sha": "7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1Y2JiNTcwMzJjOTgzMjBiYzdiNWJhOWRhM2RhYjgzNjJhMzkzZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-08-25T21:09:00Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-08-25T21:09:00Z"}, "message": "hooks.h (hook_bool_const_int_const_int_true): Declare.\n\n\t* hooks.h (hook_bool_const_int_const_int_true): Declare.\n\t* hooks.c (hook_bool_const_int_const_int_true): New function.\n\t* target.h (struct gcc_target): Add can_eliminate field.\n\t* target-def.h (TARGET_CAN_ELIMINATE): Define.\n\t(TARGET_INITIALIZER): Use TARGET_CAN_ELIMINATE.\n\t* ira.c (setup_eliminable_regset): Use can_eliminate target hook.\n\t* reload1.c (update_eliminables, init_elim_table): (Ditto.).\n\t(elim_table): Revise comment.\n\t* system.h (CAN_ELIMINATE): Poison.\n\t* defaults.h (CAN_ELIMINATE): Remove.\n\t* doc/tm.texi (CAN_ELIMINATE): Revise documentation.\n\n\t* config/alpha/vms.h (CAN_ELIMINATE): Remove macro.\n\t* config/alpha/alpha.c (TARGET_CAN_ELIMINATE) [TARGET_ABI_OPEN_VMS]:\n\tDefine macro.\n\t(alpha_vms_can_eliminate): Declare as static, change return type to\n\tbool.\n\t* config/alpha/alpha-protos.h (alpha_vms_can_eliminate): Remove.\n\n\t* config/arm/arm.h (CAN_ELIMINATE): Remove macro.\n\t* config/arm/arm.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(arm_can_eliminate): New function.\n\n\t* config/avr/avr.h (CAN_ELIMINATE): Remove macro.\n\t* config/avr/avr.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(avr_can_eliminate): Declare as static.\n\t* config/avr/avr-protos.h (avr_can_eliminate): Remove.\n\n\t* config/bfin/bfin.h (CAN_ELIMINATE): Remove macro.\n\t* config/bfin/bfin.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(bfin_can_eliminate): New function.\n\n\t* config/crx/crx.h (CAN_ELIMINATE): Remove macro.\n\t* config/crx/crx.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(crx_can_eliminate): New function.\n\t\n\t* config/fr30/fr30.h (CAN_ELIMINATE): Remove macro.\n\t* config/fr30/fr30.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(fr30_can_eliminate): New function.\n\n\t* config/frv/frv.h (CAN_ELIMINATE): Remove macro.\n\t* config/frv/frv.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(frv_can_eliminate): New function.\n\n\t* config/h8300/h8300.h (CAN_ELIMINATE): Remove macro.\n\t* config/h8300/h8300.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(h8300_can_eliminate): New function.\n\n\t* config/i386/i386.h (CAN_ELIMINATE): Remove macro.\n\t* config/i386/i386.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(i386_can_eliminate): Declare as static, change return type to bool.\n\t* config/i386/i386-protos.h (i386_can_eliminate): Remove.\n\n\t* config/ia64/ia64.h (CAN_ELIMINATE): Remove macro.\n\t* config/ia64/ia64.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(ia64_can_eliminate): New function.\n\n\t* config/iq2000/iq2000.h (CAN_ELIMINATE): Remove macro.\n\t* config/iq2000/iq2000.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(iq2000_can_eliminate): New function.\n\n\t* config/m32r/m32r.h (CAN_ELIMINATE): Remove macro.\n\t* config/m32r/m32r.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(m32r_can_eliminate): New function.\n\n\t* config/m68hc11/m68hc11.h (CAN_ELIMINATE): Remove macro.\n\t* config/m68hc11/m68hc11.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(m68hc11_can_eliminate): New function.\n\n\t* config/m68k/m68k.h (CAN_ELIMINATE): Remove macro.\n\t* config/m68k/m68k.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(m68k_can_eliminate): New function.\n\n\t* config/mep/mep.h (CAN_ELIMINATE): Remove macro.\n\t* config/mep/mep.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(mep_can_eliminate): New function.\n\n\t* config/mips/mips.h (CAN_ELIMINATE): Remove macro.\n\t* config/mips/mips.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(mips_can_eliminate): New function.\n\n\t* config/rs6000/rs6000.h (CAN_ELIMINATE): Remove macro.\n\t* config/rs6000/rs6000.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(rs6000_can_eliminate): New function.\n\n\t* config/s390/s390.h (CAN_ELIMINATE): Remove macro.\n\t* config/s390/s390.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(s390_can_eliminate): Declare as static.\n\t* config/s390/s390-protos.h (sparc_can_eliminate): Remove.\n\n\t* config/score/score.h (CAN_ELIMINATE): Remove macro.\n\t* config/score/score.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(score_can_eliminate): New function.\n\n\t* config/sparc/sparc.h (CAN_ELIMINATE): Remove macro.\n\t* config/sparc/sparc.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(sparc_can_eliminate): Declare as static.\n\t* config/sparc/sparc-protos.h (sparc_can_eliminate): Remove.\n\n\t* config/stormy16/stormy16.h (CAN_ELIMINATE): Remove macro.\n\t* config/stormy16/stormy16.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(xstormy16_can_eliminate): New function.\n\n\t* config/v850/v850.h (CAN_ELIMINATE): Remove macro.\n\t* config/v850/v850.c (TARGET_CAN_ELIMINATE): Define macro.\n\t(v850_can_eliminate): New function.\n\nFrom-SVN: r151096", "tree": {"sha": "44f8c8c44ea173046d301d7e79624a45b2640933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f8c8c44ea173046d301d7e79624a45b2640933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/comments", "author": null, "committer": null, "parents": [{"sha": "79232baaf890c7223876b5ffb93ed05e7948d7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79232baaf890c7223876b5ffb93ed05e7948d7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79232baaf890c7223876b5ffb93ed05e7948d7a3"}], "stats": {"total": 646, "additions": 435, "deletions": 211}, "files": [{"sha": "4d4a8e659f020a8891e1e9ab39ab37097f0a7244", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,3 +1,112 @@\n+2009-08-25  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* hooks.h (hook_bool_const_int_const_int_true): Declare.\n+\t* hooks.c (hook_bool_const_int_const_int_true): New function.\n+\t* target.h (struct gcc_target): Add can_eliminate field.\n+\t* target-def.h (TARGET_CAN_ELIMINATE): Define.\n+\t(TARGET_INITIALIZER): Use TARGET_CAN_ELIMINATE.\n+\t* ira.c (setup_eliminable_regset): Use can_eliminate target hook.\n+\t* reload1.c (update_eliminables, init_elim_table): (Ditto.).\n+\t(elim_table): Revise comment.\n+\t* system.h (CAN_ELIMINATE): Poison.\n+\t* defaults.h (CAN_ELIMINATE): Remove.\n+\t* doc/tm.texi (CAN_ELIMINATE): Revise documentation.\n+\n+\t* config/alpha/vms.h (CAN_ELIMINATE): Remove macro.\n+\t* config/alpha/alpha.c (TARGET_CAN_ELIMINATE) [TARGET_ABI_OPEN_VMS]:\n+\tDefine macro.\n+\t(alpha_vms_can_eliminate): Declare as static, change return type to\n+\tbool.\n+\t* config/alpha/alpha-protos.h (alpha_vms_can_eliminate): Remove.\n+\n+\t* config/arm/arm.h (CAN_ELIMINATE): Remove macro.\n+\t* config/arm/arm.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(arm_can_eliminate): New function.\n+\n+\t* config/avr/avr.h (CAN_ELIMINATE): Remove macro.\n+\t* config/avr/avr.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(avr_can_eliminate): Declare as static.\n+\t* config/avr/avr-protos.h (avr_can_eliminate): Remove.\n+\n+\t* config/bfin/bfin.h (CAN_ELIMINATE): Remove macro.\n+\t* config/bfin/bfin.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(bfin_can_eliminate): New function.\n+\n+\t* config/crx/crx.h (CAN_ELIMINATE): Remove macro.\n+\t* config/crx/crx.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(crx_can_eliminate): New function.\n+\t\n+\t* config/fr30/fr30.h (CAN_ELIMINATE): Remove macro.\n+\t* config/fr30/fr30.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(fr30_can_eliminate): New function.\n+\n+\t* config/frv/frv.h (CAN_ELIMINATE): Remove macro.\n+\t* config/frv/frv.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(frv_can_eliminate): New function.\n+\n+\t* config/h8300/h8300.h (CAN_ELIMINATE): Remove macro.\n+\t* config/h8300/h8300.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(h8300_can_eliminate): New function.\n+\n+\t* config/i386/i386.h (CAN_ELIMINATE): Remove macro.\n+\t* config/i386/i386.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(i386_can_eliminate): Declare as static, change return type to bool.\n+\t* config/i386/i386-protos.h (i386_can_eliminate): Remove.\n+\n+\t* config/ia64/ia64.h (CAN_ELIMINATE): Remove macro.\n+\t* config/ia64/ia64.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(ia64_can_eliminate): New function.\n+\n+\t* config/iq2000/iq2000.h (CAN_ELIMINATE): Remove macro.\n+\t* config/iq2000/iq2000.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(iq2000_can_eliminate): New function.\n+\n+\t* config/m32r/m32r.h (CAN_ELIMINATE): Remove macro.\n+\t* config/m32r/m32r.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(m32r_can_eliminate): New function.\n+\n+\t* config/m68hc11/m68hc11.h (CAN_ELIMINATE): Remove macro.\n+\t* config/m68hc11/m68hc11.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(m68hc11_can_eliminate): New function.\n+\n+\t* config/m68k/m68k.h (CAN_ELIMINATE): Remove macro.\n+\t* config/m68k/m68k.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(m68k_can_eliminate): New function.\n+\n+\t* config/mep/mep.h (CAN_ELIMINATE): Remove macro.\n+\t* config/mep/mep.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(mep_can_eliminate): New function.\n+\n+\t* config/mips/mips.h (CAN_ELIMINATE): Remove macro.\n+\t* config/mips/mips.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(mips_can_eliminate): New function.\n+\n+\t* config/rs6000/rs6000.h (CAN_ELIMINATE): Remove macro.\n+\t* config/rs6000/rs6000.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(rs6000_can_eliminate): New function.\n+\n+\t* config/s390/s390.h (CAN_ELIMINATE): Remove macro.\n+\t* config/s390/s390.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(s390_can_eliminate): Declare as static.\n+\t* config/s390/s390-protos.h (sparc_can_eliminate): Remove.\n+\n+\t* config/score/score.h (CAN_ELIMINATE): Remove macro.\n+\t* config/score/score.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(score_can_eliminate): New function.\n+\n+\t* config/sparc/sparc.h (CAN_ELIMINATE): Remove macro.\n+\t* config/sparc/sparc.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(sparc_can_eliminate): Declare as static.\n+\t* config/sparc/sparc-protos.h (sparc_can_eliminate): Remove.\n+\n+\t* config/stormy16/stormy16.h (CAN_ELIMINATE): Remove macro.\n+\t* config/stormy16/stormy16.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(xstormy16_can_eliminate): New function.\n+\n+\t* config/v850/v850.h (CAN_ELIMINATE): Remove macro.\n+\t* config/v850/v850.c (TARGET_CAN_ELIMINATE): Define macro.\n+\t(v850_can_eliminate): New function.\n+\n 2009-08-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (*cmpdf_ieee_ext[123]): Remove."}, {"sha": "7e9d14b5f4b501c7ebc422c5010b3c8f331b8286", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -114,7 +114,6 @@ extern void avms_asm_output_external (FILE *, tree, const char *);\n extern void vms_output_aligned_decl_common (FILE *, tree, const char *,\n \t\t\t\t\t    unsigned HOST_WIDE_INT,\n \t\t\t\t\t    unsigned int);\n-extern int alpha_vms_can_eliminate (unsigned int, unsigned int);\n extern HOST_WIDE_INT alpha_vms_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t\t   unsigned int);\n #endif"}, {"sha": "1c15e53f996867385f28ae155dde91c846d62dfa", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -7483,8 +7483,10 @@ alpha_initial_elimination_offset (unsigned int from,\n \n #if TARGET_ABI_OPEN_VMS\n \n-int\n-alpha_vms_can_eliminate (unsigned int from ATTRIBUTE_UNUSED, unsigned int to)\n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+static bool\n+alpha_vms_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n {\n   /* We need the alpha_procedure_type to decide. Evaluate it now.  */\n   alpha_sa_size ();\n@@ -10983,6 +10985,8 @@ alpha_init_libfuncs (void)\n #if TARGET_ABI_OPEN_VMS\n # undef TARGET_ATTRIBUTE_TABLE\n # define TARGET_ATTRIBUTE_TABLE vms_attribute_table\n+# undef TARGET_CAN_ELIMINATE\n+# define TARGET_CAN_ELIMINATE alpha_vms_can_eliminate\n #endif\n \n #undef TARGET_IN_SMALL_DATA_P"}, {"sha": "cb84a040eee6b1683316cbbbabf2df4b7948ff22", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -142,10 +142,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef EPILOGUE_USES\n #define EPILOGUE_USES(REGNO)    ((REGNO) == 26 || (REGNO) == 29)\n \n-#undef CAN_ELIMINATE\n-#define CAN_ELIMINATE(FROM, TO)  \\\n-  (alpha_vms_can_eliminate ((FROM), (TO)))\n-\n #undef INITIAL_ELIMINATION_OFFSET\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   ((OFFSET) = alpha_vms_initial_elimination_offset(FROM, TO))"}, {"sha": "1cc9557361a242237089392277b6a0ed920c1746", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -218,6 +218,7 @@ static tree arm_promoted_type (const_tree t);\n static tree arm_convert_to_type (tree type, tree expr);\n static bool arm_scalar_mode_supported_p (enum machine_mode);\n static bool arm_frame_pointer_required (void);\n+static bool arm_can_eliminate (const int, const int);\n \n \f\n /* Table of machine attributes.  */\n@@ -485,6 +486,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED arm_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE arm_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -14065,6 +14069,24 @@ arm_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n     }\n }\n \n+/* Given FROM and TO register numbers, say whether this elimination is\n+   allowed.  Frame pointer elimination is automatically handled.\n+\n+   All eliminations are permissible.  Note that ARG_POINTER_REGNUM and\n+   HARD_FRAME_POINTER_REGNUM are in fact the same thing.  If we need a frame\n+   pointer, we must eliminate FRAME_POINTER_REGNUM into\n+   HARD_FRAME_POINTER_REGNUM and not into STACK_POINTER_REGNUM or\n+   ARG_POINTER_REGNUM.  */\n+\n+bool\n+arm_can_eliminate (const int from, const int to)\n+{\n+  return ((to == FRAME_POINTER_REGNUM && from == ARG_POINTER_REGNUM) ? false :\n+          (to == STACK_POINTER_REGNUM && frame_pointer_needed) ? false :\n+          (to == ARM_HARD_FRAME_POINTER_REGNUM && TARGET_THUMB) ? false :\n+          (to == THUMB_HARD_FRAME_POINTER_REGNUM && TARGET_ARM) ? false :\n+           true);\n+}\n \n /* Emit RTL to save coprocessor registers on function entry.  Returns the\n    number of bytes pushed.  */"}, {"sha": "ae32da563e1f8834f9bc585ddb0e6aaea8afa003", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1846,21 +1846,6 @@ typedef struct\n  { FRAME_POINTER_REGNUM,      ARM_HARD_FRAME_POINTER_REGNUM   },\\\n  { FRAME_POINTER_REGNUM,      THUMB_HARD_FRAME_POINTER_REGNUM }}\n \n-/* Given FROM and TO register numbers, say whether this elimination is\n-   allowed.  Frame pointer elimination is automatically handled.\n-\n-   All eliminations are permissible.  Note that ARG_POINTER_REGNUM and\n-   HARD_FRAME_POINTER_REGNUM are in fact the same thing.  If we need a frame\n-   pointer, we must eliminate FRAME_POINTER_REGNUM into\n-   HARD_FRAME_POINTER_REGNUM and not into STACK_POINTER_REGNUM or\n-   ARG_POINTER_REGNUM.  */\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n-  (((TO) == FRAME_POINTER_REGNUM && (FROM) == ARG_POINTER_REGNUM) ? 0 :\t\\\n-   ((TO) == STACK_POINTER_REGNUM && frame_pointer_needed) ? 0 :\t\t\\\n-   ((TO) == ARM_HARD_FRAME_POINTER_REGNUM && TARGET_THUMB) ? 0 :\t\\\n-   ((TO) == THUMB_HARD_FRAME_POINTER_REGNUM && TARGET_ARM) ? 0 :\t\\\n-   1)\n-\n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\"}, {"sha": "c39b97be177c4a8280c947c1db85fcc4f3157b4c", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -34,7 +34,6 @@ extern enum reg_class avr_reg_class_from_letter (int c);\n extern void asm_globalize_label (FILE *file, const char *name);\n extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n extern void order_regs_for_local_alloc (void);\n-extern bool avr_can_eliminate (int, int);\n extern int avr_initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);\n extern void gas_output_limited_string (FILE *file, const char *str);"}, {"sha": "2c562e9a18f13abec65ea3ff4c13dd1f67f4ea7e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -90,6 +90,7 @@ static rtx avr_builtin_setjmp_frame_value (void);\n static bool avr_hard_regno_scratch_ok (unsigned int);\n static unsigned int avr_case_values_threshold (void);\n static bool avr_frame_pointer_required_p (void);\n+static bool avr_can_eliminate (const int, const int);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -191,6 +192,8 @@ static const struct attribute_spec avr_attribute_table[] =\n \n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED avr_frame_pointer_required_p\n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE avr_can_eliminate\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -428,7 +431,7 @@ avr_regs_to_save (HARD_REG_SET *set)\n /* Return true if register FROM can be eliminated via register TO.  */\n \n bool\n-avr_can_eliminate (int from, int to)\n+avr_can_eliminate (const int from, const int to)\n {\n   return ((from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n \t  || ((from == FRAME_POINTER_REGNUM "}, {"sha": "ff409398249a7d5c6fb387b9e10f84ecffa1b7dc", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -364,8 +364,6 @@ enum reg_class {\n \t{FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\\\n        ,{FRAME_POINTER_REGNUM+1,STACK_POINTER_REGNUM+1}}\n \n-#define CAN_ELIMINATE(FROM, TO)\tavr_can_eliminate (FROM, TO)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   OFFSET = avr_initial_elimination_offset (FROM, TO)\n "}, {"sha": "61da6db38eb5305fa4fed2e443878b2d644ec858", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -883,6 +883,17 @@ n_regs_saved_by_prologue (void)\n   return n;\n }\n \n+/* Given FROM and TO register numbers, say whether this elimination is\n+   allowed.  Frame pointer elimination is automatically handled.\n+\n+   All other eliminations are valid.  */\n+\n+static bool\n+bfin_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n+}\n+\n /* Return the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n \n@@ -6338,4 +6349,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED bfin_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE bfin_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "a9ff6fa8b4761158aec7c499fcc5c11a2fd9defc", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -376,14 +376,6 @@ extern const char *bfin_library_id_string;\n  { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\t\\\n \n-/* Given FROM and TO register numbers, say whether this elimination is\n-   allowed.  Frame pointer elimination is automatically handled.\n-\n-   All other eliminations are valid.  */\n-\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n "}, {"sha": "a0b43a4aa18cda2b90e41f6ed1633acde8eded20", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -129,6 +129,7 @@ static rtx crx_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n static bool crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED);\n static int crx_address_cost (rtx, bool);\n static bool crx_legitimate_address_p (enum machine_mode, rtx, bool);\n+static bool crx_can_eliminate (const int, const int);\n \n /*****************************************************************************/\n /* RTL VALIDITY\t\t\t\t\t\t\t\t     */\n@@ -137,6 +138,9 @@ static bool crx_legitimate_address_p (enum machine_mode, rtx, bool);\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tcrx_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE\t\tcrx_can_eliminate\n+\n /*****************************************************************************/\n /* STACK LAYOUT AND CALLING CONVENTIONS\t\t\t\t\t     */\n /*****************************************************************************/\n@@ -320,6 +324,14 @@ crx_compute_frame (void)\n \t\t\t\t     crtl->outgoing_args_size : 0);\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+crx_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n+}\n+\n /* Implements the macro INITIAL_ELIMINATION_OFFSET, return the OFFSET. */\n \n int"}, {"sha": "ed6d3d6edd2de9c63492213d371d4fd2dc42f34f", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -298,9 +298,6 @@ enum reg_class\n     { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}  \\\n   }\n \n-#define CAN_ELIMINATE(FROM, TO) \\\n- ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     (OFFSET) = crx_initial_elimination_offset ((FROM), (TO));\t\t\\"}, {"sha": "431af8f63f94ba9134a7152f4e28b6494de2195c", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -120,6 +120,7 @@ static bool fr30_must_pass_in_stack (enum machine_mode, const_tree);\n static int fr30_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool fr30_frame_pointer_required (void);\n+static bool fr30_can_eliminate (const int, const int);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))\n@@ -161,8 +162,20 @@ static bool fr30_frame_pointer_required (void);\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED fr30_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE fr30_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+\n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+fr30_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == FRAME_POINTER_REGNUM || ! frame_pointer_needed);\n+}\n+\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n    for the current function.  As a side effect it fills in the \n    current_frame_info structure, if the data is available.  */"}, {"sha": "f055a1a05dc6f3f95b614d1156707ced88712fdc", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -549,15 +549,6 @@ enum reg_class\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\\\n }\n \n-/* A C expression that returns nonzero if the compiler is allowed to try to\n-   replace register number FROM with register number TO.  This macro\n-   need only be defined if `ELIMINABLE_REGS' is defined, and will usually be\n-   the constant 1, since most of the cases preventing register elimination are\n-   things that the compiler already knows about.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n- ((TO) == FRAME_POINTER_REGNUM || ! frame_pointer_needed)\n-\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n    initial difference between the specified pair of registers.  This macro must\n    be defined if `ELIMINABLE_REGS' is defined.  */"}, {"sha": "63e65fb8bbf182facb24ca8a0e2d629c28f3c39a", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -382,6 +382,7 @@ static bool frv_secondary_reload                (bool, rtx, enum reg_class,\n \t\t\t\t\t\t enum machine_mode,\n \t\t\t\t\t\t secondary_reload_info *);\n static bool frv_frame_pointer_required\t\t(void);\n+static bool frv_can_eliminate\t\t\t(const int, const int);\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -475,6 +476,9 @@ static bool frv_frame_pointer_required\t\t(void);\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED frv_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE frv_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define FRV_SYMBOL_REF_TLS_P(RTX) \\\n@@ -2145,6 +2149,16 @@ frv_frame_pointer_required (void)\n }\n \n \f\n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+frv_can_eliminate (const int from, const int to)\n+{\n+  return (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+          ? ! frame_pointer_needed\n+          : true);\n+}\n+\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n    initial difference between the specified pair of registers.  This macro must\n    be defined if `ELIMINABLE_REGS' is defined.  */"}, {"sha": "0516ecf2cac18cc1395090f48604dde9ed7b1628", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1594,17 +1594,6 @@ typedef struct frv_stack {\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\t\t\\\n }\n \n-/* A C expression that returns nonzero if the compiler is allowed to try to\n-   replace register number FROM with register number TO.  This macro need only\n-   be defined if `ELIMINABLE_REGS' is defined, and will usually be the constant\n-   1, since most of the cases preventing register elimination are things that\n-   the compiler already knows about.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n-  ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\t\\\n-   ? ! frame_pointer_needed\t\t\t\t\t\t\\\n-   : 1)\n-\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It specifies the\n    initial difference between the specified pair of registers.  This macro must\n    be defined if `ELIMINABLE_REGS' is defined.  */"}, {"sha": "02b3ff6094a089876cf80acf1a6fa5f82c94dda8", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1825,6 +1825,20 @@ h8300_expand_movsi (rtx operands[])\n   return 0;\n }\n \n+/* Given FROM and TO register numbers, say whether this elimination is allowed.\n+   Frame pointer elimination is automatically handled.\n+\n+   For the h8300, if frame pointer elimination is being done, we would like to\n+   convert ap and rp into sp, not fp.\n+\n+   All other eliminations are valid.  */\n+\n+static bool\n+h8300_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n+}\n+\n /* Function for INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET).\n    Define the offset between two registers, one to be eliminated, and\n    the other its replacement, at the start of a routine.  */\n@@ -5801,4 +5815,7 @@ h8300_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE h8300_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "884e49a9d4a7a5ff7d14c3b13b94f6a98cfa1f58", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Renesas H8/300 (generic)\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -558,17 +558,6 @@ enum reg_class {\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n  { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n-/* Given FROM and TO register numbers, say whether this elimination is allowed.\n-   Frame pointer elimination is automatically handled.\n-\n-   For the h8300, if frame pointer elimination is being done, we would like to\n-   convert ap and rp into sp, not fp.\n-\n-   All other eliminations are valid.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\\n-  ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n "}, {"sha": "183352b73ba733b1167133f4adfc7cd277e1bf3a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -28,7 +28,6 @@ extern int ix86_can_use_return_insn_p (void);\n extern void ix86_setup_frame_addresses (void);\n \n extern void ix86_file_end (void);\n-extern int ix86_can_eliminate (int, int);\n extern HOST_WIDE_INT ix86_initial_elimination_offset (int, int);\n extern void ix86_expand_prologue (void);\n extern void ix86_expand_epilogue (int);"}, {"sha": "b761ab2545da3c9afaf62a26fe9cca8d48b81fbb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -7794,16 +7794,16 @@ ix86_nsaved_sseregs (void)\n    pointer.  Otherwise, frame pointer elimination is automatically\n    handled and all other eliminations are valid.  */\n \n-int\n-ix86_can_eliminate (int from, int to)\n+static bool\n+ix86_can_eliminate (const int from, const int to)\n {\n   if (stack_realign_fp)\n     return ((from == ARG_POINTER_REGNUM\n \t     && to == HARD_FRAME_POINTER_REGNUM)\n \t    || (from == FRAME_POINTER_REGNUM\n \t\t&& to == STACK_POINTER_REGNUM));\n   else\n-    return to == STACK_POINTER_REGNUM ? !frame_pointer_needed : 1;\n+    return to == STACK_POINTER_REGNUM ? !frame_pointer_needed : true;\n }\n \n /* Return the offset between two registers, one to be eliminated, and the other\n@@ -30664,6 +30664,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED ix86_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE ix86_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "88e310eccd4e6ddf2d6bcbb504ce560d5be731fc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1684,11 +1684,6 @@ typedef struct ix86_args {\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n  { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\t\\\n \n-/* Given FROM and TO register numbers, say whether this elimination is\n-   allowed.   */\n-\n-#define CAN_ELIMINATE(FROM, TO) ix86_can_eliminate ((FROM), (TO))\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n "}, {"sha": "85bca08d3859ae9d6865e63d3dfc7e4232fde93e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009  Free Software Foundation, Inc.\n+   2009\n+   Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -199,6 +200,7 @@ static rtx gen_movdi_x (rtx, rtx, rtx);\n static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n+static bool ia64_can_eliminate (const int, const int);\n static enum machine_mode hfa_element_mode (const_tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n@@ -522,6 +524,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX ia64_c_mode_for_suffix\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE ia64_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -2639,6 +2644,14 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n   current_frame_info.initialized = reload_completed;\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+ia64_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == BR_REG (0) ? current_function_is_leaf : true);\n+}\n+\n /* Compute the initial difference between the specified pair of registers.  */\n \n HOST_WIDE_INT"}, {"sha": "40c85501cda32bf841d02dc3b07432a0f20695d8", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -1027,13 +1027,6 @@ enum reg_class\n   {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\t\\\n }\n \n-/* A C expression that returns nonzero if the compiler is allowed to try to\n-   replace register number FROM with register number TO.  The frame pointer\n-   is automatically handled.  */\n-\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  (TO == BR_REG (0) ? current_function_is_leaf : 1)\n-\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n    specifies the initial difference between the specified pair of\n    registers.  This macro must be defined if `ELIMINABLE_REGS' is"}, {"sha": "85a8e5ac9f47b65ea521b79080bd79e326d7107d", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Vitesse IQ2000 processors\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -165,6 +165,7 @@ static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, bool);\n static void iq2000_va_start\t      (tree, rtx);\n static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n+static bool iq2000_can_eliminate      (const int, const int);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -214,6 +215,9 @@ static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tiq2000_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE            iq2000_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return nonzero if we split the address into high and low parts.  */\n@@ -1678,6 +1682,22 @@ compute_frame_size (HOST_WIDE_INT size)\n   return total_size;\n }\n \f\n+\n+/* We can always eliminate to the frame pointer.  We can eliminate to the\n+   stack pointer unless a frame pointer is needed.  */\n+\n+bool\n+iq2000_can_eliminate (const int from, const int to)\n+{\n+  return (from == RETURN_ADDRESS_POINTER_REGNUM\n+          && (! leaf_function_p ()\n+              || (to == GP_REG_FIRST + 31 && leaf_function_p)))\n+          || (from != RETURN_ADDRESS_POINTER_REGNUM\n+              && (to == HARD_FRAME_POINTER_REGNUM\n+                  || (to == STACK_POINTER_REGNUM\n+                      && ! frame_pointer_needed)));\n+}\n+\n /* Implement INITIAL_ELIMINATION_OFFSET.  FROM is either the frame\n    pointer, argument pointer, or return address pointer.  TO is either\n    the stack pointer or hard frame pointer.  */"}, {"sha": "43bacfdd28ed69e21c10ff1c5515fd971a01bf52", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  \n    Vitesse IQ2000 processors\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -354,17 +354,6 @@ enum reg_class\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\t\\\n  { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n-\n-/* We can always eliminate to the frame pointer.  We can eliminate to the \n-   stack pointer unless a frame pointer is needed.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n-  (((FROM) == RETURN_ADDRESS_POINTER_REGNUM && (! leaf_function_p ()\t\\\n-   || (TO == GP_REG_FIRST + 31 && leaf_function_p)))   \t\t\t\\\n-  || ((FROM) != RETURN_ADDRESS_POINTER_REGNUM\t\t\t\t\\\n-   && ((TO) == HARD_FRAME_POINTER_REGNUM \t\t\t\t\\\n-   || ((TO) == STACK_POINTER_REGNUM && ! frame_pointer_needed))))\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t \\\n         (OFFSET) = iq2000_initial_elimination_offset ((FROM), (TO))\n \f"}, {"sha": "fdd89bc27a5fd31208b1f63d9984de8e5650a514", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -87,6 +87,7 @@ static bool m32r_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n+static bool m32r_can_eliminate (const int, const int);\n \f\n /* M32R specific attributes.  */\n \n@@ -151,6 +152,9 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES m32r_arg_partial_bytes\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE m32r_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -1472,6 +1476,17 @@ m32r_compute_frame_size (int size)\t/* # of var. bytes allocated.  */\n   /* Ok, we're done.  */\n   return total_size;\n }\n+\n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+m32r_can_eliminate (const int from, const int to)\n+{\n+  return (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+          ? ! frame_pointer_needed\n+          : true);\n+}\n+\n \f\n /* The table we use to reference PIC data.  */\n static rtx global_offset_table;"}, {"sha": "da6a105247ba65e9371a239a8ce6a5263d2d7d0f", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -793,18 +793,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n  { ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM },\t\\\n  { ARG_POINTER_REGNUM,   FRAME_POINTER_REGNUM }}\n \n-/* A C expression that returns nonzero if the compiler is allowed to\n-   try to replace register number FROM-REG with register number\n-   TO-REG.  This macro need only be defined if `ELIMINABLE_REGS' is\n-   defined, and will usually be the constant 1, since most of the\n-   cases preventing register elimination are things that the compiler\n-   already knows about.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n-  ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\t\\\n-   ? ! frame_pointer_needed\t\t\t\t\t\t\\\n-   : 1)\n-\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n    specifies the initial difference between the specified pair of\n    registers.  This macro must be defined if `ELIMINABLE_REGS' is"}, {"sha": "d30b84ccfd510a515a9438da90ef251d6a99e294", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -91,6 +91,7 @@ static int m68hc11_make_autoinc_notes (rtx *, void *);\n static void m68hc11_init_libfuncs (void);\n static rtx m68hc11_struct_value_rtx (tree, int);\n static bool m68hc11_return_in_memory (const_tree, const_tree);\n+static bool m68hc11_can_eliminate (const int, const int);\n \n /* Must be set to 1 to produce debug messages.  */\n int debug_m6811 = 0;\n@@ -278,6 +279,9 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tm68hc11_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE m68hc11_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n@@ -1280,6 +1284,19 @@ m68hc11_is_trap_symbol (rtx sym)\n \n /* Argument support functions.  */\n \n+/* Given FROM and TO register numbers, say whether this elimination is\n+   allowed. Frame pointer elimination is automatically handled.\n+\n+   All other eliminations are valid.  */\n+\n+bool\n+m68hc11_can_eliminate (const int from, const int to)\n+{\n+  return (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+          ? ! frame_pointer_needed\n+          : true);\n+}\n+\n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine.  */\n int"}, {"sha": "9b19c33e0f83ac0a93a482b0edb55e808bf73d9f", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n@@ -883,17 +883,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n  {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n  {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n-/* Given FROM and TO register numbers, say whether this elimination is allowed.\n-   Frame pointer elimination is automatically handled.\n-\n-   All other eliminations are valid.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\\n- ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\\\n-  ? ! frame_pointer_needed\t\t\t\t\t\\\n-  : 1)\n-\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n "}, {"sha": "033872c28a1f55ff05f0498bf1e73341e66b04dd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -132,6 +132,7 @@ static void m68k_sched_dfa_pre_advance_cycle (void);\n static void m68k_sched_dfa_post_advance_cycle (void);\n static int m68k_sched_first_cycle_multipass_dfa_lookahead (void);\n \n+static bool m68k_can_eliminate (const int, const int);\n static bool m68k_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool m68k_handle_option (size_t, const char *, int);\n static rtx find_addr_reg (rtx);\n@@ -263,6 +264,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tm68k_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE m68k_can_eliminate\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n@@ -866,6 +870,14 @@ m68k_compute_frame_layout (void)\n   current_frame.funcdef_no = current_function_funcdef_no;\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+m68k_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n+}\n+\n HOST_WIDE_INT\n m68k_initial_elimination_offset (int from, int to)\n {"}, {"sha": "b2cfb1d8fd10d611f79a2ba776208bb135c0afb2", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GCC for Motorola 680x0/ColdFire.\n    Copyright (C) 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -663,9 +664,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n  { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM },\t\t\\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM }}\n \n-#define CAN_ELIMINATE(FROM, TO) \\\n-  ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   (OFFSET) = m68k_initial_elimination_offset(FROM, TO)\n \f"}, {"sha": "b255339bfc37ad326da26288c7832e6d04156f04", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -227,6 +227,7 @@ static rtx mep_expand_builtin_saveregs (void);\n static tree mep_build_builtin_va_list (void);\n static void mep_expand_va_start (tree, rtx);\n static tree mep_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n+static bool mep_can_eliminate (const int, const int);\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -298,6 +299,8 @@ static tree mep_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n #define TARGET_EXPAND_BUILTIN_VA_START\tmep_expand_va_start\n #undef\tTARGET_GIMPLIFY_VA_ARG_EXPR\n #define\tTARGET_GIMPLIFY_VA_ARG_EXPR\tmep_gimplify_va_arg_expr\n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE            mep_can_eliminate\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2609,6 +2612,16 @@ mep_reg_size (int regno)\n   return 4;\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+mep_can_eliminate (const int from, const int to)\n+{\n+  return  (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+           ? ! frame_pointer_needed\n+           : true);\n+}\n+\n int\n mep_elimination_offset (int from, int to)\n {"}, {"sha": "58a688614cc7bfbbd0f19da03b05474a0f4fe22c", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -498,11 +498,6 @@ extern unsigned int mep_selected_isa;\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\t\\\n }\n \n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\\n- ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\\\n-  ? ! frame_pointer_needed\t\t\t\t\t\\\n-  : 1)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n \t(OFFSET) = mep_elimination_offset (FROM, TO)\n "}, {"sha": "423639923767fc28db44ccae741d8475c7a96d75", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -8989,6 +8989,15 @@ mips_frame_pointer_required (void)\n   return false;\n }\n \n+/* Make sure that we're not trying to eliminate to the wrong hard frame\n+   pointer.  */\n+\n+static bool\n+mips_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == HARD_FRAME_POINTER_REGNUM || to == STACK_POINTER_REGNUM);\n+}\n+\n /* Implement INITIAL_ELIMINATION_OFFSET.  FROM is either the frame pointer\n    or argument pointer.  TO is either the stack pointer or hard frame\n    pointer.  */\n@@ -15010,6 +15019,9 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED mips_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE mips_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "2c9199a12c31b724a1bfe5f84f8ad2353e5af96f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -2166,11 +2166,6 @@ enum reg_class\n  { FRAME_POINTER_REGNUM, GP_REG_FIRST + 30},\t\t\t\t\\\n  { FRAME_POINTER_REGNUM, GP_REG_FIRST + 17}}\n \n-/* Make sure that we're not trying to eliminate to the wrong hard frame\n-   pointer.  */\n-#define CAN_ELIMINATE(FROM, TO) \\\n-  ((TO) == HARD_FRAME_POINTER_REGNUM || (TO) == STACK_POINTER_REGNUM)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET) = mips_initial_elimination_offset ((FROM), (TO))\n "}, {"sha": "cb64d28f4c95470676be98b123889c8b813b669f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1088,6 +1088,7 @@ static const enum reg_class *rs6000_ira_cover_classes (void);\n \n const int INSN_NOT_AVAILABLE = -1;\n static enum machine_mode rs6000_eh_return_filter_mode (void);\n+static bool rs6000_can_eliminate (const int, const int);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -1453,6 +1454,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P rs6000_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE rs6000_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return number of consecutive hard regs needed starting at reg REGNO\n@@ -25011,6 +25015,26 @@ rs6000_libcall_value (enum machine_mode mode)\n   return gen_rtx_REG (mode, regno);\n }\n \n+\n+/* Given FROM and TO register numbers, say whether this elimination is allowed.\n+   Frame pointer elimination is automatically handled.\n+\n+   For the RS/6000, if frame pointer elimination is being done, we would like\n+   to convert ap into fp, not sp.\n+\n+   We need r30 if -mminimal-toc was specified, and there are constant pool\n+   references.  */\n+\n+bool\n+rs6000_can_eliminate (const int from, const int to)\n+{\n+  return (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+          ? ! frame_pointer_needed\n+          : from == RS6000_PIC_OFFSET_TABLE_REGNUM\n+            ? ! TARGET_MINIMAL_TOC || TARGET_NO_TOC || get_pool_size () == 0\n+            : true);\n+}\n+\n /* Define the offset between two registers, FROM to be eliminated and its\n    replacement TO, at the start of a routine.  */\n HOST_WIDE_INT"}, {"sha": "d837d44c9be79338c45a2f5f975d82b2bef2a07f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1786,22 +1786,6 @@ typedef struct rs6000_args\n  { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n  { RS6000_PIC_OFFSET_TABLE_REGNUM, RS6000_PIC_OFFSET_TABLE_REGNUM } }\n \n-/* Given FROM and TO register numbers, say whether this elimination is allowed.\n-   Frame pointer elimination is automatically handled.\n-\n-   For the RS/6000, if frame pointer elimination is being done, we would like\n-   to convert ap into fp, not sp.\n-\n-   We need r30 if -mminimal-toc was specified, and there are constant pool\n-   references.  */\n-\n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n- ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\t\\\n-  ? ! frame_pointer_needed\t\t\t\t\t\t\\\n-  : (FROM) == RS6000_PIC_OFFSET_TABLE_REGNUM \t\t\t\t\\\n-  ? ! TARGET_MINIMAL_TOC || TARGET_NO_TOC || get_pool_size () == 0\t\\\n-  : 1)\n-\n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\"}, {"sha": "be68bd530c39d42260092ef2c846ab90aef9ddb3", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM S/390.\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008 Free\n-   Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Free Software Foundation, Inc.\n \n    Contributed by Hartmut Penner (hpenner@de.ibm.com)\n \n@@ -36,7 +36,6 @@ extern bool s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment);\n \n extern void optimization_options (int, int);\n extern void override_options (void);\n-extern bool s390_can_eliminate (int, int);\n extern HOST_WIDE_INT s390_initial_elimination_offset (int, int);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);"}, {"sha": "05896064d6e7ebbbc85ffae25a7b2e0c5b1cbb8c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -7335,8 +7335,8 @@ s390_class_max_nregs (enum reg_class rclass, enum machine_mode mode)\n \n /* Return true if register FROM can be eliminated via register TO.  */\n \n-bool\n-s390_can_eliminate (int from, int to)\n+static bool\n+s390_can_eliminate (const int from, const int to)\n {\n   /* On zSeries machines, we have not marked the base register as fixed.\n      Instead, we have an elimination rule BASE_REGNUM -> BASE_REGNUM.\n@@ -10146,6 +10146,9 @@ s390_reorg (void)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P s390_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE s390_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "3c93fb770f611dcf64b249ababc3ab5adab67a05", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -646,9 +646,6 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n  { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\\\n  { BASE_REGNUM, BASE_REGNUM }}\n \n-#define CAN_ELIMINATE(FROM, TO) \\\n-  s390_can_eliminate ((FROM), (TO))\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET) = s390_initial_elimination_offset ((FROM), (TO))\n "}, {"sha": "12eb76b1a419f4eea69e9099978ce66e6f894724", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Sunnorth.\n \n    This file is part of GCC.\n@@ -116,6 +116,9 @@\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tscore_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE            score_can_eliminate\n+\n struct extern_list *extern_head = 0;\n \n /* default 0 = NO_REGS  */\n@@ -426,6 +429,16 @@ score_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n   gcc_unreachable ();\n }\n \n+/* We can always eliminate to the hard frame pointer.  We can eliminate\n+   to the stack pointer unless a frame pointer is needed.  */\n+\n+static bool\n+score_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == HARD_FRAME_POINTER_REGNUM\n+          || (to  == STACK_POINTER_REGNUM && !frame_pointer_needed));\n+}\n+\n /* Implement INITIAL_ELIMINATION_OFFSET.  FROM is either the frame\n    pointer or argument pointer.  TO is either the stack pointer or\n    hard frame pointer.  */"}, {"sha": "ea3e016899516b47d77ac39ba9cc6d8fe0188ad3", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -564,13 +564,6 @@ extern enum reg_class score_char_to_class[256];\n    { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},      \\\n    { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n-/* We can always eliminate to the hard frame pointer.  We can eliminate\n-   to the stack pointer unless a frame pointer is needed.  */\n-#define CAN_ELIMINATE(FROM, TO)        \\\n-  (((TO) == HARD_FRAME_POINTER_REGNUM) \\\n-   || ((TO) == STACK_POINTER_REGNUM    \\\n-       && !frame_pointer_needed))\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET) = score_initial_elimination_offset ((FROM), (TO))\n "}, {"sha": "4ece6c0b161e345f7d79f2f0fcbbeafbe088f73c", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -50,7 +50,6 @@ extern int short_branch (int, int);\n extern void sparc_profile_hook (int);\n extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n-extern bool sparc_can_eliminate (const int, const int);\n \n #ifdef RTX_CODE\n extern enum machine_mode select_cc_mode (enum rtx_code, rtx, rtx);"}, {"sha": "ea439142deabc56983ae0696e43527c7fefe42fc", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -420,6 +420,7 @@ static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n static bool sparc_frame_pointer_required (void);\n+static bool sparc_can_eliminate (const int, const int);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n static const char *sparc_mangle_type (const_tree);\n #endif\n@@ -588,6 +589,9 @@ static bool fpu_option_set = false;\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED sparc_frame_pointer_required\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE sparc_can_eliminate\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE sparc_mangle_type"}, {"sha": "c5c762a44ec49c67a04631eb1cc674f6c8f3275f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1369,12 +1369,6 @@ extern char leaf_reg_remap[];\n   {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}, \\\n    { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM} }\n \n-/* The way this is structured, we can't eliminate SFP in favor of SP\n-   if the frame pointer is required: we want to use the SFP->HFP elimination\n-   in that case.  But the test in update_eliminables doesn't know we are\n-   assuming below that we only do the former elimination.  */\n-#define CAN_ELIMINATE(FROM, TO) sparc_can_eliminate((FROM), (TO))\n-\n /* We always pretend that this is a leaf function because if it's not,\n    there's no point in trying to eliminate the frame pointer.  If it\n    is a leaf function, we guessed right!  */"}, {"sha": "1c076b2c6498140460d75eab32a3516243163ea7", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1016,6 +1016,16 @@ xstormy16_compute_stack_layout (void)\n   return layout;\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+static bool\n+xstormy16_can_eliminate (const int from, const int to)\n+{\n+  return (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM\n+          ? ! frame_pointer_needed\n+          : true);\n+}\n+\n /* Determine how all the special registers get eliminated.  */\n \n int\n@@ -2654,6 +2664,9 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\txstormy16_legitimate_address_p\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE xstormy16_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-stormy16.h\""}, {"sha": "49505b507b028d796e464be4311efe06450592bd", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 cpu description.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007,\n-   2008  Free Software Foundation, Inc.\n+   2008, 2009  Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -375,11 +375,6 @@ enum reg_class\n   {ARG_POINTER_REGNUM,\t HARD_FRAME_POINTER_REGNUM},\t\\\n }\n \n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n- ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\t\\\n-  ? ! frame_pointer_needed\t\t\t\t\t\t\\\n-  : 1)\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   (OFFSET) = xstormy16_initial_elimination_offset (FROM, TO)\n "}, {"sha": "19268e2bd3bac64dfc48506a36770f37f7c490fa", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -72,6 +72,7 @@ static bool v850_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static int v850_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n+static bool v850_can_eliminate       (const int, const int);\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -173,6 +174,9 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES v850_arg_partial_bytes\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE v850_can_eliminate\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set the maximum size of small memory area TYPE to the value given\n@@ -2957,4 +2961,12 @@ v850_setup_incoming_varargs (CUMULATIVE_ARGS *ca,\n   ca->anonymous_args = (!TARGET_GHS ? 1 : 0);\n }\n \n+/* Worker function for TARGET_CAN_ELIMINATE.  */\n+\n+bool\n+v850_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n+}\n+\n #include \"gt-v850.h\""}, {"sha": "026a2292588838aae021b9292bcd91d30978eded", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2008  Free Software Foundation, Inc.\n+   2007, 2008, 2009  Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n    This file is part of GCC.\n@@ -538,16 +538,6 @@ enum reg_class\n  { ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM },\t\t\t\\\n  { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM }}\t\t\t\\\n \n-/* A C expression that returns nonzero if the compiler is allowed to\n-   try to replace register number FROM-REG with register number\n-   TO-REG.  This macro need only be defined if `ELIMINABLE_REGS' is\n-   defined, and will usually be the constant 1, since most of the\n-   cases preventing register elimination are things that the compiler\n-   already knows about.  */\n-\n-#define CAN_ELIMINATE(FROM, TO) \\\n- ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n-\n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n    specifies the initial difference between the specified pair of\n    registers.  This macro must be defined if `ELIMINABLE_REGS' is"}, {"sha": "f1d968330702f133b8cc863a960dcd9af74f27ad", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1147,10 +1147,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT\n #endif\n \n-#ifndef CAN_ELIMINATE\n-#define CAN_ELIMINATE(FROM, TO) true\n-#endif\n-\n /* Many ports have no mode-dependent addresses (except possibly autoincrement\n    and autodecrement addresses, which are handled by target-independent code\n    in recog.c).  */"}, {"sha": "818df81a4d3c390fef1555c9a65175db1afcfcee", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -3812,16 +3812,16 @@ Note that the elimination of the argument pointer with the stack pointer is\n specified first since that is the preferred elimination.\n @end defmac\n \n-@defmac CAN_ELIMINATE (@var{from-reg}, @var{to-reg})\n-A C expression that returns @code{true} if the compiler is allowed to try\n-to replace register number @var{from-reg} with register number\n-@var{to-reg}.  This macro need only be defined if @code{ELIMINABLE_REGS}\n+@deftypefn {Target Hook} bool TARGET_CAN_ELIMINATE (const int @var{from-reg}, const int @var{to-reg})\n+This target hook should returns @code{true} if the compiler is allowed to\n+try to replace register number @var{from-reg} with register number\n+@var{to-reg}.  This target hook need only be defined if @code{ELIMINABLE_REGS}\n is defined, and will usually be @code{true}, since most of the cases\n preventing register elimination are things that the compiler already\n knows about.\n \n-Default value is @code{true}.\n-@end defmac\n+Default return value is @code{true}.\n+@end deftypefn\n \n @defmac INITIAL_ELIMINATION_OFFSET (@var{from-reg}, @var{to-reg}, @var{offset-var})\n This macro is similar to @code{INITIAL_FRAME_POINTER_OFFSET}.  It"}, {"sha": "0547ca81bb65a68f1c3c5f3ceed744ef70bec180", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -56,6 +56,13 @@ hook_bool_bool_false (bool a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+/* Generic hook that takes const int, const int) and returns true.  */\n+bool hook_bool_const_int_const_int_true (const int a ATTRIBUTE_UNUSED,\n+                                         const int b ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n /* Generic hook that takes (enum machine_mode) and returns false.  */\n bool\n hook_bool_mode_false (enum machine_mode mode ATTRIBUTE_UNUSED)"}, {"sha": "2704e25234f186f024092d288d57fc33412ae6b8", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -28,6 +28,7 @@\n extern bool hook_bool_void_false (void);\n extern bool hook_bool_void_true (void);\n extern bool hook_bool_bool_false (bool);\n+extern bool hook_bool_const_int_const_int_true (const int, const int);\n extern bool hook_bool_mode_false (enum machine_mode);\n extern bool hook_bool_mode_const_rtx_false (enum machine_mode, const_rtx);\n extern bool hook_bool_mode_const_rtx_true (enum machine_mode, const_rtx);"}, {"sha": "c6a87237621db1f50e6ee879960a73b79dfff9ea", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -1458,7 +1458,7 @@ setup_eliminable_regset (void)\n   for (i = 0; i < (int) ARRAY_SIZE (eliminables); i++)\n     {\n       bool cannot_elim\n-\t= (! CAN_ELIMINATE (eliminables[i].from, eliminables[i].to)\n+\t= (! targetm.can_eliminate (eliminables[i].from, eliminables[i].to)\n \t   || (eliminables[i].to == STACK_POINTER_REGNUM && need_fp));\n \n       if (! regs_asm_clobbered[eliminables[i].from])"}, {"sha": "25af8404e105bb554ab6b7a4334eedeb1ed1b42e", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -318,8 +318,9 @@ struct elim_table\n   int to;\t\t\t/* Register number used as replacement.  */\n   HOST_WIDE_INT initial_offset;\t/* Initial difference between values.  */\n   int can_eliminate;\t\t/* Nonzero if this elimination can be done.  */\n-  int can_eliminate_previous;\t/* Value of CAN_ELIMINATE in previous scan over\n-\t\t\t\t   insns made by reload.  */\n+  int can_eliminate_previous;\t/* Value returned by TARGET_CAN_ELIMINATE\n+\t\t\t\t   target hook in previous scan over insns\n+\t\t\t\t   made by reload.  */\n   HOST_WIDE_INT offset;\t\t/* Current offset between the two regs.  */\n   HOST_WIDE_INT previous_offset;/* Offset at end of previous insn.  */\n   int ref_outside_mem;\t\t/* \"to\" has been referenced outside a MEM.  */\n@@ -3705,7 +3706,7 @@ update_eliminables (HARD_REG_SET *pset)\n     if ((ep->from == HARD_FRAME_POINTER_REGNUM \n          && targetm.frame_pointer_required ())\n #ifdef ELIMINABLE_REGS\n-\t|| ! CAN_ELIMINATE (ep->from, ep->to)\n+\t|| ! targetm.can_eliminate (ep->from, ep->to)\n #endif\n \t)\n       ep->can_eliminate = 0;\n@@ -3811,7 +3812,7 @@ init_elim_table (void)\n       ep->from = ep1->from;\n       ep->to = ep1->to;\n       ep->can_eliminate = ep->can_eliminate_previous\n-\t= (CAN_ELIMINATE (ep->from, ep->to)\n+\t= (targetm.can_eliminate (ep->from, ep->to)\n \t   && ! (ep->to == STACK_POINTER_REGNUM\n \t\t && frame_pointer_needed \n \t\t && (! SUPPORTS_STACK_ALIGNMENT"}, {"sha": "f73097a035d7a3db407ae8c4b9f7d3334e9b5061", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -693,7 +693,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tMUST_PASS_IN_STACK FUNCTION_ARG_PASS_BY_REFERENCE               \\\n         VECTOR_MODE_SUPPORTED_P TARGET_SUPPORTS_HIDDEN \t\t\t\\\n \tFUNCTION_ARG_PARTIAL_NREGS ASM_OUTPUT_DWARF_DTPREL\t\t\\\n-\tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED\n+\tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n+\tCAN_ELIMINATE\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "3cef10a55cce2910113fbea2610542116a7340e3", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -666,6 +666,10 @@\n #define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_false\n #endif\n \n+#ifndef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE hook_bool_const_int_const_int_true\n+#endif\n+\n /* C specific.  */\n #ifndef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX default_mode_for_suffix\n@@ -939,6 +943,7 @@\n   TARGET_HARD_REGNO_SCRATCH_OK,\t\t\t\\\n   TARGET_CASE_VALUES_THRESHOLD,\t\t\t\\\n   TARGET_FRAME_POINTER_REQUIRED,\t\t\\\n+  TARGET_CAN_ELIMINATE,\t\t\t\t\\\n   TARGET_C,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_EMUTLS,\t\t\t\t\\"}, {"sha": "7f7f177904f1b55854b682647f50bb4a6cabde75", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5cbb57032c98320bc7b5ba9da3dab8362a393d/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7b5cbb57032c98320bc7b5ba9da3dab8362a393d", "patch": "@@ -971,6 +971,10 @@ struct gcc_target\n   /* Retutn true if a function must have and use a frame pointer.  */\n   bool (* frame_pointer_required) (void);\n \n+  /* Returns true if the compiler is allowed to try to replace register number\n+     from-reg with register number to-reg.  */\n+  bool (* can_eliminate) (const int, const int);\n+\n   /* Functions specific to the C family of frontends.  */\n   struct c {\n     /* Return machine mode for non-standard suffix"}]}