{"sha": "624dcfd62ba91e683a3cf6adc09a586d556757dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI0ZGNmZDYyYmE5MWU2ODNhM2NmNmFkYzA5YTU4NmQ1NTY3NTdkYw==", "commit": {"author": {"name": "Andrey Turetskiy", "email": "andrey.turetskiy@intel.com", "date": "2015-09-04T08:54:14Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-09-04T08:54:14Z"}, "message": "gcc/\n\t* config/i386/i386-builtin-types.def\n\t(VOID_PFLOAT_HI_V8DI_V16SF_INT): New.\n\t(VOID_PDOUBLE_QI_V16SI_V8DF_INT): Ditto.\n\t(VOID_PINT_HI_V8DI_V16SI_INT): Ditto.\n\t(VOID_PLONGLONG_QI_V16SI_V8DI_INT): Ditto.\n\t* config/i386/i386.c\n\t(ix86_builtins): Add IX86_BUILTIN_SCATTERALTSIV8DF,\n\tIX86_BUILTIN_SCATTERALTDIV16SF, IX86_BUILTIN_SCATTERALTSIV8DI,\n\tIX86_BUILTIN_SCATTERALTDIV16SI.\n\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_scatteraltsiv8df,\n\t__builtin_ia32_scatteraltdiv8sf, __builtin_ia32_scatteraltsiv8di,\n\t__builtin_ia32_scatteraltdiv8si.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_SCATTERALTSIV8DF,\n\tIX86_BUILTIN_SCATTERALTDIV16SF, IX86_BUILTIN_SCATTERALTSIV8DI,\n\tIX86_BUILTIN_SCATTERALTDIV16SI.\n\t(ix86_vectorize_builtin_scatter): New.\n\t(TARGET_VECTORIZE_BUILTIN_SCATTER): Define as\n\tix86_vectorize_builtin_scatter.\n\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Petr Murzin <petr.murzin@intel.com>\n\nFrom-SVN: r227482", "tree": {"sha": "103b9a36614f4930dd37c0df0d9120aee844a260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/103b9a36614f4930dd37c0df0d9120aee844a260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/624dcfd62ba91e683a3cf6adc09a586d556757dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624dcfd62ba91e683a3cf6adc09a586d556757dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624dcfd62ba91e683a3cf6adc09a586d556757dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624dcfd62ba91e683a3cf6adc09a586d556757dc/comments", "author": null, "committer": null, "parents": [{"sha": "3bab634221b45ccdae547b8536cb2bc722e75ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bab634221b45ccdae547b8536cb2bc722e75ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bab634221b45ccdae547b8536cb2bc722e75ea0"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "7ef424fad923d866a94bb41136f208818d87a41f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=624dcfd62ba91e683a3cf6adc09a586d556757dc", "patch": "@@ -1,3 +1,26 @@\n+2015-09-04  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Petr Murzin  <petr.murzin@intel.com>\n+\t    Kirill Yukhin <kirill.yukhin@intel.com>\n+\n+\t* config/i386/i386-builtin-types.def\n+\t(VOID_PFLOAT_HI_V8DI_V16SF_INT): New.\n+\t(VOID_PDOUBLE_QI_V16SI_V8DF_INT): Ditto.\n+\t(VOID_PINT_HI_V8DI_V16SI_INT): Ditto.\n+\t(VOID_PLONGLONG_QI_V16SI_V8DI_INT): Ditto.\n+\t* config/i386/i386.c\n+\t(ix86_builtins): Add IX86_BUILTIN_SCATTERALTSIV8DF,\n+\tIX86_BUILTIN_SCATTERALTDIV16SF, IX86_BUILTIN_SCATTERALTSIV8DI,\n+\tIX86_BUILTIN_SCATTERALTDIV16SI.\n+\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_scatteraltsiv8df,\n+\t__builtin_ia32_scatteraltdiv8sf, __builtin_ia32_scatteraltsiv8di,\n+\t__builtin_ia32_scatteraltdiv8si.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_SCATTERALTSIV8DF,\n+\tIX86_BUILTIN_SCATTERALTDIV16SF, IX86_BUILTIN_SCATTERALTSIV8DI,\n+\tIX86_BUILTIN_SCATTERALTDIV16SI.\n+\t(ix86_vectorize_builtin_scatter): New.\n+\t(TARGET_VECTORIZE_BUILTIN_SCATTER): Define as\n+\tix86_vectorize_builtin_scatter.\n+\n 2015-09-04  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n \t    Petr Murzin  <petr.murzin@intel.com>\n \t    Kirill Yukhin <kirill.yukhin@intel.com>"}, {"sha": "b892f086798c8ebd86fdf320a10dca4711c880f9", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=624dcfd62ba91e683a3cf6adc09a586d556757dc", "patch": "@@ -1021,6 +1021,10 @@ DEF_FUNCTION_TYPE (VOID, PINT, QI, V8DI, V8SI, INT)\n DEF_FUNCTION_TYPE (VOID, PINT, QI, V4DI, V4SI, INT)\n DEF_FUNCTION_TYPE (VOID, PINT, QI, V2DI, V4SI, INT)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V8DI, V8DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PFLOAT, HI, V8DI, V16SF, INT)\n+DEF_FUNCTION_TYPE (VOID, PDOUBLE, QI, V16SI, V8DF, INT)\n+DEF_FUNCTION_TYPE (VOID, PINT, HI, V8DI, V16SI, INT)\n+DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V16SI, V8DI, INT)\n \n DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCINT64, INT, INT)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, QI, V4DI, V4DI, INT)"}, {"sha": "d78f4e7f1759d83bccbabdd1cf7725d5ee7affbd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624dcfd62ba91e683a3cf6adc09a586d556757dc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=624dcfd62ba91e683a3cf6adc09a586d556757dc", "patch": "@@ -30388,6 +30388,10 @@ enum ix86_builtins\n   IX86_BUILTIN_GATHER3SIV16SI,\n   IX86_BUILTIN_GATHER3SIV8DF,\n   IX86_BUILTIN_GATHER3SIV8DI,\n+  IX86_BUILTIN_SCATTERALTSIV8DF,\n+  IX86_BUILTIN_SCATTERALTDIV16SF,\n+  IX86_BUILTIN_SCATTERALTSIV8DI,\n+  IX86_BUILTIN_SCATTERALTDIV16SI,\n   IX86_BUILTIN_SCATTERDIV16SF,\n   IX86_BUILTIN_SCATTERDIV16SI,\n   IX86_BUILTIN_SCATTERDIV8DF,\n@@ -34204,6 +34208,21 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_AVX512VL, \"__builtin_ia32_scatterdiv2di\",\n \t       VOID_FTYPE_PLONGLONG_QI_V2DI_V2DI_INT,\n \t       IX86_BUILTIN_SCATTERDIV2DI);\n+  def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatteraltsiv8df \",\n+\t       VOID_FTYPE_PDOUBLE_QI_V16SI_V8DF_INT,\n+\t       IX86_BUILTIN_SCATTERALTSIV8DF);\n+\n+  def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatteraltdiv8sf \",\n+\t       VOID_FTYPE_PFLOAT_HI_V8DI_V16SF_INT,\n+\t       IX86_BUILTIN_SCATTERALTDIV16SF);\n+\n+  def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatteraltsiv8di \",\n+\t       VOID_FTYPE_PLONGLONG_QI_V16SI_V8DI_INT,\n+\t       IX86_BUILTIN_SCATTERALTSIV8DI);\n+\n+  def_builtin (OPTION_MASK_ISA_AVX512F, \"__builtin_ia32_scatteraltdiv8si \",\n+\t       VOID_FTYPE_PINT_HI_V8DI_V16SI_INT,\n+\t       IX86_BUILTIN_SCATTERALTDIV16SI);\n \n   /* AVX512PF */\n   def_builtin (OPTION_MASK_ISA_AVX512PF, \"__builtin_ia32_gatherpfdpd\",\n@@ -39860,6 +39879,18 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     case IX86_BUILTIN_GATHERPFDPD:\n       icode = CODE_FOR_avx512pf_gatherpfv8sidf;\n       goto vec_prefetch_gen;\n+    case IX86_BUILTIN_SCATTERALTSIV8DF:\n+      icode = CODE_FOR_avx512f_scattersiv8df;\n+      goto scatter_gen;\n+    case IX86_BUILTIN_SCATTERALTDIV16SF:\n+      icode = CODE_FOR_avx512f_scatterdiv16sf;\n+      goto scatter_gen;\n+    case IX86_BUILTIN_SCATTERALTSIV8DI:\n+      icode = CODE_FOR_avx512f_scattersiv8di;\n+      goto scatter_gen;\n+    case IX86_BUILTIN_SCATTERALTDIV16SI:\n+      icode = CODE_FOR_avx512f_scatterdiv16si;\n+      goto scatter_gen;\n     case IX86_BUILTIN_GATHERPFDPS:\n       icode = CODE_FOR_avx512pf_gatherpfv16sisf;\n       goto vec_prefetch_gen;\n@@ -40123,6 +40154,36 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       mode3 = insn_data[icode].operand[3].mode;\n       mode4 = insn_data[icode].operand[4].mode;\n \n+      /* Scatter instruction stores operand op3 to memory with\n+\t indices from op2 and scale from op4 under writemask op1.\n+\t If index operand op2 has more elements then source operand\n+\t op3 one need to use only its low half. And vice versa.  */\n+      switch (fcode)\n+\t{\n+\tcase IX86_BUILTIN_SCATTERALTSIV8DF:\n+\tcase IX86_BUILTIN_SCATTERALTSIV8DI:\n+\t  half = gen_reg_rtx (V8SImode);\n+\t  if (!nonimmediate_operand (op2, V16SImode))\n+\t    op2 = copy_to_mode_reg (V16SImode, op2);\n+\t  emit_insn (gen_vec_extract_lo_v16si (half, op2));\n+\t  op2 = half;\n+\t  break;\n+\tcase IX86_BUILTIN_SCATTERALTDIV16SF:\n+\tcase IX86_BUILTIN_SCATTERALTDIV16SI:\n+\t  half = gen_reg_rtx (mode3);\n+\t  if (mode3 == V8SFmode)\n+\t    gen = gen_vec_extract_lo_v16sf;\n+\t  else\n+\t    gen = gen_vec_extract_lo_v16si;\n+\t  if (!nonimmediate_operand (op3, GET_MODE (op3)))\n+\t    op3 = copy_to_mode_reg (GET_MODE (op3), op3);\n+\t  emit_insn (gen (half, op3));\n+\t  op3 = half;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+\n       /* Force memory operand only with base register here.  But we\n \t don't want to do it on memory operand for other builtin\n \t functions.  */\n@@ -41202,6 +41263,62 @@ ix86_vectorize_builtin_gather (const_tree mem_vectype,\n   return ix86_get_builtin (code);\n }\n \n+/* Returns a decl of a function that implements scatter store with\n+   register type VECTYPE and index type INDEX_TYPE and SCALE.\n+   Return NULL_TREE if it is not available.  */\n+\n+static tree\n+ix86_vectorize_builtin_scatter (const_tree vectype,\n+\t\t\t\tconst_tree index_type, int scale)\n+{\n+  bool si;\n+  enum ix86_builtins code;\n+\n+  if (!TARGET_AVX512F)\n+    return NULL_TREE;\n+\n+  if ((TREE_CODE (index_type) != INTEGER_TYPE\n+       && !POINTER_TYPE_P (index_type))\n+      || (TYPE_MODE (index_type) != SImode\n+\t  && TYPE_MODE (index_type) != DImode))\n+    return NULL_TREE;\n+\n+  if (TYPE_PRECISION (index_type) > POINTER_SIZE)\n+    return NULL_TREE;\n+\n+  /* v*scatter* insn sign extends index to pointer mode.  */\n+  if (TYPE_PRECISION (index_type) < POINTER_SIZE\n+      && TYPE_UNSIGNED (index_type))\n+    return NULL_TREE;\n+\n+  /* Scale can be 1, 2, 4 or 8.  */\n+  if (scale <= 0\n+      || scale > 8\n+      || (scale & (scale - 1)) != 0)\n+    return NULL_TREE;\n+\n+  si = TYPE_MODE (index_type) == SImode;\n+  switch (TYPE_MODE (vectype))\n+    {\n+    case V8DFmode:\n+      code = si ? IX86_BUILTIN_SCATTERALTSIV8DF : IX86_BUILTIN_SCATTERDIV8DF;\n+      break;\n+    case V8DImode:\n+      code = si ? IX86_BUILTIN_SCATTERALTSIV8DI : IX86_BUILTIN_SCATTERDIV8DI;\n+      break;\n+    case V16SFmode:\n+      code = si ? IX86_BUILTIN_SCATTERSIV16SF : IX86_BUILTIN_SCATTERALTDIV16SF;\n+      break;\n+    case V16SImode:\n+      code = si ? IX86_BUILTIN_SCATTERSIV16SI : IX86_BUILTIN_SCATTERALTDIV16SI;\n+      break;\n+    default:\n+      return NULL_TREE;\n+    }\n+\n+  return ix86_builtins[code];\n+}\n+\n /* Returns a code for a target-specific builtin that implements\n    reciprocal of the function, or NULL_TREE if not available.  */\n \n@@ -52332,6 +52449,9 @@ ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n #undef TARGET_VECTORIZE_BUILTIN_GATHER\n #define TARGET_VECTORIZE_BUILTIN_GATHER ix86_vectorize_builtin_gather\n \n+#undef TARGET_VECTORIZE_BUILTIN_SCATTER\n+#define TARGET_VECTORIZE_BUILTIN_SCATTER ix86_vectorize_builtin_scatter\n+\n #undef TARGET_BUILTIN_RECIPROCAL\n #define TARGET_BUILTIN_RECIPROCAL ix86_builtin_reciprocal\n "}]}