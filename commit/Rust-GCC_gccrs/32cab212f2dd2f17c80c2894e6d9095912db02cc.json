{"sha": "32cab212f2dd2f17c80c2894e6d9095912db02cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjYWIyMTJmMmRkMmYxN2M4MGMyODk0ZTZkOTA5NTkxMmRiMDJjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-07T09:33:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-07T09:33:23Z"}, "message": "re PR middle-end/60092 (posix_memalign not recognized to derive alias and alignment info)\n\n2014-02-07  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/60092\n\t* builtin-types.def (BT_FN_INT_PTRPTR_SIZE_SIZE): Add.\n\t* builtins.def (BUILT_IN_POSIX_MEMALIGN): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n\tHandle BUILT_IN_POSIX_MEMALIGN.\n\t(find_func_clobbers): Likewise.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Likewise.\n\t(call_may_clobber_ref_p_1): Likewise.\n\n\t* gcc.dg/tree-ssa/alias-30.c: New testcase.\n\t* gcc.dg/tree-ssa/alias-31.c: Likewise.\n\nFrom-SVN: r207595", "tree": {"sha": "629d882ca041bd4388e6a8674102352639e71fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/629d882ca041bd4388e6a8674102352639e71fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32cab212f2dd2f17c80c2894e6d9095912db02cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cab212f2dd2f17c80c2894e6d9095912db02cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32cab212f2dd2f17c80c2894e6d9095912db02cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cab212f2dd2f17c80c2894e6d9095912db02cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c51d6883ae957c26cbd2a71c09291e34a21f73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c51d6883ae957c26cbd2a71c09291e34a21f73c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c51d6883ae957c26cbd2a71c09291e34a21f73c"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "07625f575c66e1fff3408ce671957b6f06130aa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -1,3 +1,14 @@\n+2014-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* builtin-types.def (BT_FN_INT_PTRPTR_SIZE_SIZE): Add.\n+\t* builtins.def (BUILT_IN_POSIX_MEMALIGN): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n+\tHandle BUILT_IN_POSIX_MEMALIGN.\n+\t(find_func_clobbers): Likewise.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Likewise.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\n 2014-02-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59918"}, {"sha": "fba9c7ddd80adfc7b8a7649e317b7324a3350fa4", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -429,6 +429,7 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I2_INT, BT_VOID, BT_VOLATILE_PTR, BT_I2, BT\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I4_INT, BT_VOID, BT_VOLATILE_PTR, BT_I4, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I8_INT, BT_VOID, BT_VOLATILE_PTR, BT_I8, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I16_INT, BT_VOID, BT_VOLATILE_PTR, BT_I16, BT_INT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_PTRPTR_SIZE_SIZE, BT_INT, BT_PTR_PTR, BT_SIZE, BT_SIZE)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_FILEPTR)"}, {"sha": "5a76ba3291ef7ea2d91e1dfb437871899271e0fa", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -755,6 +755,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNT, \"popcount\", BT_FN_INT_UINT, ATTR_CONS\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTIMAX, \"popcountimax\", BT_FN_INT_UINTMAX, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTL, \"popcountl\", BT_FN_INT_ULONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_POPCOUNTLL, \"popcountll\", BT_FN_INT_ULONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_POSIX_MEMALIGN, \"posix_memalign\", BT_FN_INT_PTRPTR_SIZE_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n DEF_GCC_BUILTIN        (BUILT_IN_PREFETCH, \"prefetch\", BT_FN_VOID_CONST_PTR_VAR, ATTR_NOVOPS_LEAF_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_REALLOC, \"realloc\", BT_FN_PTR_PTR_SIZE, ATTR_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_RETURN, \"return\", BT_FN_VOID_PTR, ATTR_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "a75accc259d4811e8b1822a6c76218d154959146", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -1,3 +1,9 @@\n+2014-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gcc.dg/tree-ssa/alias-30.c: New testcase.\n+\t* gcc.dg/tree-ssa/alias-31.c: Likewise.\n+\n 2014-02-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/59918"}, {"sha": "addf1284057adb4d050761bd74e6a2535b3420da", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-30.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-30.c?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+extern int posix_memalign(void **memptr,\n+\t\t\t  __SIZE_TYPE__ alignment, __SIZE_TYPE__ size);\n+\n+int foo (float *p)\n+{\n+  int res = *p;\n+  int *q;\n+  void *tem;\n+  if (posix_memalign (&tem, 128, 128 * sizeof (int)) != 0)\n+    return 0;\n+  q = (int *)tem;\n+  *q = 1;\n+  return res + *p;\n+}\n+\n+/* We should be able to CSE the load from *p in the return stmt.  */\n+\n+/* { dg-final { scan-tree-dump \"Replaced \\\\\\*p\" \"fre1\" } } */\n+/* { dg-final { cleanup-tree-dump \"fre1\" } } */"}, {"sha": "f1aefbdc2ba0439b7c0c210e10258ceb45af116b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-31.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-31.c?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+\n+extern int posix_memalign(void **memptr,\n+\t\t\t  __SIZE_TYPE__ alignment, __SIZE_TYPE__ size);\n+\n+int foo (float *p)\n+{\n+  int res = *p;\n+  struct { void *q1; void *q2; } q;\n+  if (posix_memalign (&q.q1, 128, 128 * sizeof (int)) != 0)\n+    return 0;\n+  if (posix_memalign (&q.q2, 128, 128 * sizeof (int)) != 0)\n+    return 0;\n+  *((int *)q.q1) = 1;\n+  *((int *)q.q2) = 2;\n+  return res + *p + *((int *)q.q1) + *((int *)q.q2);\n+}\n+\n+/* There should be only one load from *p left.  All stores and all\n+   other loads should be removed.  */\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\*\\[^ \\]\" 1 \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "e70627589cc6b3c7ab9fef1542357319ff65cfc1", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -1515,6 +1515,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t/* The following builtins do not read from memory.  */\n \tcase BUILT_IN_FREE:\n \tcase BUILT_IN_MALLOC:\n+\tcase BUILT_IN_POSIX_MEMALIGN:\n \tcase BUILT_IN_CALLOC:\n \tcase BUILT_IN_ALLOCA:\n \tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n@@ -1838,6 +1839,18 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n \tcase BUILT_IN_ASSUME_ALIGNED:\n \t  return false;\n+\t/* But posix_memalign stores a pointer into the memory pointed to\n+\t   by its first argument.  */\n+\tcase BUILT_IN_POSIX_MEMALIGN:\n+\t  {\n+\t    tree ptrptr = gimple_call_arg (call, 0);\n+\t    ao_ref dref;\n+\t    ao_ref_init_from_ptr_and_size (&dref, ptrptr,\n+\t\t\t\t\t   TYPE_SIZE_UNIT (ptr_type_node));\n+\t    return (refs_may_alias_p_1 (&dref, ref, false)\n+\t\t    || (flag_errno_math\n+\t\t\t&& targetm.ref_may_alias_errno (ref)));\n+\t  }\n \t/* Freeing memory kills the pointed-to memory.  More importantly\n \t   the call has to serve as a barrier for moving loads and stores\n \t   across it.  */"}, {"sha": "402b3d1032df63b9888477b61eecfc1b000dee7e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32cab212f2dd2f17c80c2894e6d9095912db02cc/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=32cab212f2dd2f17c80c2894e6d9095912db02cc", "patch": "@@ -3982,7 +3982,7 @@ handle_lhs_call (gimple stmt, tree lhs, int flags, vec<ce_s> rhsc,\n       struct constraint_expr tmpc;\n       rhsc.create (0);\n       vi = make_heapvar (\"HEAP\");\n-      /* We marking allocated storage local, we deal with it becoming\n+      /* We are marking allocated storage local, we deal with it becoming\n          global by escaping and setting of vars_contains_escaped_heap.  */\n       DECL_EXTERNAL (vi->decl) = 0;\n       vi->is_global_var = 0;\n@@ -4231,6 +4231,26 @@ find_func_aliases_for_builtin_call (gimple t)\n \t  lhsc.release ();\n \t  return true;\n \t}\n+      case BUILT_IN_POSIX_MEMALIGN:\n+        {\n+\t  tree ptrptr = gimple_call_arg (t, 0);\n+\t  get_constraint_for (ptrptr, &lhsc);\n+\t  do_deref (&lhsc);\n+\t  varinfo_t vi = make_heapvar (\"HEAP\");\n+\t  /* We are marking allocated storage local, we deal with it becoming\n+\t     global by escaping and setting of vars_contains_escaped_heap.  */\n+\t  DECL_EXTERNAL (vi->decl) = 0;\n+\t  vi->is_global_var = 0;\n+\t  struct constraint_expr tmpc;\n+\t  tmpc.var = vi->id;\n+\t  tmpc.offset = 0;\n+\t  tmpc.type = ADDRESSOF;\n+\t  rhsc.safe_push (tmpc);\n+\t  process_all_all_constraints (lhsc, rhsc);\n+\t  lhsc.release ();\n+\t  rhsc.release ();\n+\t  return true;\n+\t}\n       case BUILT_IN_ASSUME_ALIGNED:\n \t{\n \t  tree res = gimple_call_lhs (t);\n@@ -4960,6 +4980,7 @@ find_func_clobbers (gimple origt)\n \t     its argument.  */\n \t  case BUILT_IN_MEMSET:\n \t  case BUILT_IN_MEMSET_CHK:\n+\t  case BUILT_IN_POSIX_MEMALIGN:\n \t    {\n \t      tree dest = gimple_call_arg (t, 0);\n \t      unsigned i;"}]}