{"sha": "01118373fe07a1329bb33d00c286f59c6e7f15b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExMTgzNzNmZTA3YTEzMjliYjMzZDAwYzI4NmY1OWM2ZTdmMTViMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-16T17:39:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-16T17:39:01Z"}, "message": "* x86-tune-costs.h (znver1_cost): Fix move cost tables.\n\nFrom-SVN: r253790", "tree": {"sha": "569de720a54cb04b7da0861576c0a7c35fc9321e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/569de720a54cb04b7da0861576c0a7c35fc9321e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01118373fe07a1329bb33d00c286f59c6e7f15b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01118373fe07a1329bb33d00c286f59c6e7f15b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01118373fe07a1329bb33d00c286f59c6e7f15b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01118373fe07a1329bb33d00c286f59c6e7f15b1/comments", "author": null, "committer": null, "parents": [{"sha": "3094082db0975cdbc2c125dd0845f55594b14529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3094082db0975cdbc2c125dd0845f55594b14529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3094082db0975cdbc2c125dd0845f55594b14529"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "ab0d1f6ac63e10f9d6974e39667e6e8b1b1ee87b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01118373fe07a1329bb33d00c286f59c6e7f15b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01118373fe07a1329bb33d00c286f59c6e7f15b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01118373fe07a1329bb33d00c286f59c6e7f15b1", "patch": "@@ -1,3 +1,7 @@\n+2017-10-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* x86-tune-costs.h (znver1_cost): Fix move cost tables.\n+\n 2017-10-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc/config.gcc (powerpc*-*-*spe*): Pick 8548 as the default"}, {"sha": "6a482ddea5ba6e72074c9d88414899b61d72679b", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01118373fe07a1329bb33d00c286f59c6e7f15b1/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01118373fe07a1329bb33d00c286f59c6e7f15b1/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=01118373fe07a1329bb33d00c286f59c6e7f15b1", "patch": "@@ -1455,29 +1455,34 @@ struct processor_costs znver1_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n   8,\t\t\t\t\t/* \"large\" insn.  */\n   9,\t\t\t\t\t/* MOVE_RATIO.  */\n-  4,\t\t\t\t\t/* cost for loading QImode using\n+\n+  /* reg-reg moves are done by renaming and thus they are even cheaper than\n+     1 cycle. Becuase reg-reg move cost is 2 and the following tables correspond\n+     to doubles of latencies, we do not model this correctly.  It does not\n+     seem to make practical difference to bump prices up even more.  */\n+  6,\t\t\t\t\t/* cost for loading QImode using\n \t\t\t\t\t   movzbl.  */\n-  {5, 5, 4},\t\t\t\t/* cost of loading integer registers\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {4, 4, 4},\t\t\t\t/* cost of storing integer\n+  {8, 8, 8},\t\t\t\t/* cost of storing integer\n \t\t\t\t\t   registers.  */\n   2,\t\t\t\t\t/* cost of reg,reg fld/fst.  */\n-  {5, 5, 12},\t\t\t\t/* cost of loading fp registers\n+  {6, 6, 16},\t\t\t\t/* cost of loading fp registers\n \t\t   \t\t\t   in SFmode, DFmode and XFmode.  */\n-  {4, 4, 8},\t\t\t\t/* cost of storing fp registers\n+  {8, 8, 16},\t\t\t\t/* cost of storing fp registers\n  \t\t   \t\t\t   in SFmode, DFmode and XFmode.  */\n   2,\t\t\t\t\t/* cost of moving MMX register.  */\n-  {4, 4},\t\t\t\t/* cost of loading MMX registers\n+  {6, 6},\t\t\t\t/* cost of loading MMX registers\n \t\t\t\t\t   in SImode and DImode.  */\n-  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+  {8, 8},\t\t\t\t/* cost of storing MMX registers\n \t\t\t\t\t   in SImode and DImode.  */\n   2,\t\t\t\t\t/* cost of moving SSE register.  */\n-  {4, 4, 4},\t\t\t\t/* cost of loading SSE registers\n+  {6, 6, 6},\t\t\t\t/* cost of loading SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode.  */\n-  {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n+  {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode.  */\n-  2,\t\t\t\t\t/* MMX or SSE register to integer.  */\n+  6,\t\t\t\t\t/* MMX or SSE register to integer.  */\n   32,\t\t\t\t\t/* size of l1 cache.  */\n   512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block.  */"}]}