{"sha": "048fc686384138a7489ccbb7428ac35c84b6513e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4ZmM2ODYzODQxMzhhNzQ4OWNjYmI3NDI4YWMzNWM4NGI2NTEzZQ==", "commit": {"author": {"name": "Joe Buck", "email": "jbuck@synopsys.com", "date": "1999-07-31T13:28:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-31T13:28:54Z"}, "message": "gcc.texi: Use terms \"GNU Compiler Collection\" and \"GCC\".\n\n        * gcc.texi: Use terms \"GNU Compiler Collection\" and \"GCC\".\n        Also update copyright.\n\nFrom-SVN: r28359", "tree": {"sha": "6278ecd77b92fa4fcfa5277afd59b34f842dac3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6278ecd77b92fa4fcfa5277afd59b34f842dac3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048fc686384138a7489ccbb7428ac35c84b6513e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048fc686384138a7489ccbb7428ac35c84b6513e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048fc686384138a7489ccbb7428ac35c84b6513e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048fc686384138a7489ccbb7428ac35c84b6513e/comments", "author": null, "committer": null, "parents": [{"sha": "b384405b341a1539bf3b10b4ce5a99f2ed389630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b384405b341a1539bf3b10b4ce5a99f2ed389630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b384405b341a1539bf3b10b4ce5a99f2ed389630"}], "stats": {"total": 491, "additions": 250, "deletions": 241}, "files": [{"sha": "a4d4349336cdbfdf54bdff84e04459ae23d8c5d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048fc686384138a7489ccbb7428ac35c84b6513e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048fc686384138a7489ccbb7428ac35c84b6513e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=048fc686384138a7489ccbb7428ac35c84b6513e", "patch": "@@ -1,3 +1,8 @@\n+Thu Jul 31 12:34:45 1999  Joe Buck  <jbuck@synopsys.com>\n+\n+\t* gcc.texi: Use terms \"GNU Compiler Collection\" and \"GCC\".\n+\tAlso update copyright.\n+\n Sat Jul 31 11:10:07 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* c-pragma.c: Don't include \"except.h\"."}, {"sha": "8b478c6c24c1f9dc1e9e35b5c898a5923509dbe4", "filename": "gcc/gcc.texi", "status": "modified", "additions": 245, "deletions": 241, "changes": 486, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048fc686384138a7489ccbb7428ac35c84b6513e/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048fc686384138a7489ccbb7428ac35c84b6513e/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=048fc686384138a7489ccbb7428ac35c84b6513e", "patch": "@@ -47,15 +47,15 @@\n \n @ifset INTERNALS\n @ifset USING\n-@settitle Using and Porting GNU CC\n+@settitle Using and Porting the GNU Compiler Collection (GCC)\n @end ifset\n @end ifset\n @c seems reasonable to assume at least one of INTERNALS or USING is set...\n @ifclear INTERNALS\n-@settitle Using GNU CC\n+@settitle Using the GNU Compiler Collection\n @end ifclear\n @ifclear USING\n-@settitle Porting GNU CC\n+@settitle Porting the GNU Compiler Collection\n @end ifclear\n \n @syncodeindex fn cp\n@@ -82,7 +82,7 @@\n @ifinfo\n @dircategory Programming\n @direntry\n-* gcc: (gcc).                  The GNU C compiler.\n+* gcc: (gcc).                  The GNU Compiler Collection.\n @end direntry\n @ifset INTERNALS\n @ifset USING\n@@ -100,7 +100,7 @@ Published by the Free Software Foundation\n 59 Temple Place - Suite 330\n Boston, MA 02111-1307 USA\n \n-Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice\n@@ -133,27 +133,27 @@ instead of in the original English.\n @titlepage\n @ifset INTERNALS\n @ifset USING\n-@center @titlefont{Using and Porting GNU CC}\n+@center @titlefont{Using and Porting the GNU Compiler Collection}\n \n @end ifset\n @end ifset\n @ifclear INTERNALS\n-@title Using GNU CC\n+@title Using the GNU Compiler Collection\n @end ifclear\n @ifclear USING\n-@title Porting GNU CC\n+@title Porting the GNU Compiler Collection\n @end ifclear\n @sp 2\n @center Richard M. Stallman\n @sp 3\n-@center Last updated 16 March 1998\n+@center Last updated 28 July 1999\n @sp 1\n @c The version number appears five times more in this file.\n \n @center for gcc-2.96\n @page\n @vskip 0pt plus 1filll\n-Copyright @copyright{} 1988, 89, 92, 93, 94, 95, 96, 98  Free Software Foundation, Inc.\n+Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1998, 1999  Free Software Foundation, Inc.\n @sp 2\n For GCC Version 2.96@*\n @sp 1\n@@ -214,19 +214,19 @@ bugs.  It corresponds to GCC version 2.96.\n @ifset USING\n * G++ and GCC::     You can compile C or C++ programs.\n * Invoking GCC::    Command options supported by @samp{gcc}.\n-* Installation::    How to configure, compile and install GNU CC.\n+* Installation::    How to configure, compile and install GCC.\n * C Extensions::    GNU extensions to the C language family.\n * C++ Extensions::  GNU extensions to the C++ language.\n-* Gcov::\t    gcov: a GNU CC test coverage program.\n-* Trouble::         If you have trouble installing GNU CC.\n+* Gcov::\t    gcov: a GCC test coverage program.\n+* Trouble::         If you have trouble installing GCC.\n * Bugs::            How, why and where to report bugs.\n-* Service::         How to find suppliers of support for GNU CC.\n-* Contributing::    How to contribute to testing and developing GNU CC.\n-* VMS::             Using GNU CC on VMS.\n+* Service::         How to find suppliers of support for GCC.\n+* Contributing::    How to contribute to testing and developing GCC.\n+* VMS::             Using GCC on VMS.\n @end ifset\n @ifset INTERNALS\n-* Portability::     Goals of GNU CC's portability features.\n-* Interface::       Function-call interface of GNU CC output.\n+* Portability::     Goals of GCC's portability features.\n+* Interface::       Function-call interface of GCC output.\n * Passes::          Order of passes, what they do, and what each file is for.\n * RTL::             The intermediate representation that most passes work on.\n * Machine Desc::    How to write machine description instruction patterns.\n@@ -239,24 +239,27 @@ bugs.  It corresponds to GCC version 2.96.\n * GNU/Linux::       Linux and the GNU Project\n \n * Copying::         GNU General Public License says\n-                     how you can copy and share GNU CC.\n-* Contributors::    People who have contributed to GNU CC.\n+                     how you can copy and share GCC.\n+* Contributors::    People who have contributed to GCC.\n \n * Index::\t    Index of concepts and symbol names.\n @end menu\n \n @ifset USING\n @node G++ and GCC\n-@chapter Compile C, C++, or Objective C\n+@chapter Compile C, C++, Objective C, or Fortran\n \n @cindex Objective C\n-The C, C++, and Objective C versions of the compiler are integrated; the\n-GNU C compiler can compile programs written in C, C++, or Objective C.\n+The C, C++, and Objective C, and Fortran versions of the compiler are\n+integrated; this is why we use the name ``GNU Compiler Collection''.\n+GCC can compile programs written in C, C++, Objective C, or Fortran.\n+The Fortran compiler is described in a separate manual.\n \n @cindex GCC\n-``GCC'' is a common shorthand term for the GNU C compiler.  This is both\n+``GCC'' is a common shorthand term for the GNU Compiler Collection.  This is both\n the most general name for the compiler, and the name used when the\n-emphasis is on compiling C programs.\n+emphasis is on compiling C programs (as the abbreviation formerly\n+stood for ``GNU C Compiler'').\n \n @cindex C++\n @cindex G++\n@@ -265,20 +268,20 @@ When referring to C++ compilation, it is usual to call the compiler\n it ``GCC'' no matter what the language context; however, the term\n ``G++'' is more useful when the emphasis is on compiling C++ programs.\n \n-We use the name ``GNU CC'' to refer to the compilation system as a\n+We use the name ``GCC'' to refer to the compilation system as a\n whole, and more specifically to the language-independent part of the\n compiler.  For example, we refer to the optimization options as\n-affecting the behavior of ``GNU CC'' or sometimes just ``the compiler''.\n+affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n \n Front ends for other languages, such as Ada 9X, Fortran, Modula-3, and\n Pascal, are under development.  These front-ends, like that for C++, are\n-built in subdirectories of GNU CC and link to it.  The result is an\n+built in subdirectories of GCC and link to it.  The result is an\n integrated compiler that can compile programs written in C, C++,\n Objective C, or any of the languages for which you have installed front\n ends.\n \n In this manual, we only discuss the options for the C, Objective-C, and\n-C++ compilers and those of the GNU CC core.  Consult the documentation\n+C++ compilers and those of the GCC core.  Consult the documentation\n of the other front ends for the options to use when compiling programs\n written in other languages.\n \n@@ -308,13 +311,13 @@ give you comprehensive C++ source-level editing capabilities\n @include gcov.texi\n \n @node Trouble\n-@chapter Known Causes of Trouble with GNU CC\n+@chapter Known Causes of Trouble with GCC\n @cindex bugs, known\n @cindex installation trouble\n @cindex known causes of trouble\n \n-This section describes known problems that affect users of GNU CC.  Most\n-of these are not GNU CC bugs per se---if they were, we would fix them.\n+This section describes known problems that affect users of GCC.  Most\n+of these are not GCC bugs per se---if they were, we would fix them.\n But the result for a user may be like the result of a bug.\n \n Some of these problems are due to bugs in other software, some are\n@@ -323,12 +326,12 @@ where people's opinions differ as to what is best.\n \n @menu\n * Actual Bugs::\t\t      Bugs we will fix later.\n-* Installation Problems::     Problems that manifest when you install GNU CC.\n-* Cross-Compiler Problems::   Common problems of cross compiling with GNU CC.\n-* Interoperation::      Problems using GNU CC with other compilers,\n+* Installation Problems::     Problems that manifest when you install GCC.\n+* Cross-Compiler Problems::   Common problems of cross compiling with GCC.\n+* Interoperation::      Problems using GCC with other compilers,\n \t\t\t   and with certain linkers, assemblers and debuggers.\n * External Bugs::\tProblems compiling certain programs.\n-* Incompatibilities::   GNU CC is incompatible with traditional C.\n+* Incompatibilities::   GCC is incompatible with traditional C.\n * Fixed Headers::       GNU C uses corrected versions of system header files.\n                            This is necessary, but doesn't always work smoothly.\n * Standard Libraries::  GNU C uses the system C library, which might not be\n@@ -363,7 +366,7 @@ There are several obscure case of mis-using struct, union, and\n enum tags that are not detected as errors by the compiler.\n \n @item\n-When @samp{-pedantic-errors} is specified, GNU C will incorrectly give\n+When @samp{-pedantic-errors} is specified, GCC will incorrectly give\n an error message when a function name is specified in an expression\n involving the comma operator.\n \n@@ -393,19 +396,19 @@ directory.  Make sure you have done all the necessary preparations.\n @xref{Other Dir}.\n \n @item\n-If you build GNU CC on a BSD system using a directory stored in a System\n+If you build GCC on a BSD system using a directory stored in a System\n V file system, problems may occur in running @code{fixincludes} if the\n System V file system doesn't support symbolic links.  These problems\n result in a failure to fix the declaration of @code{size_t} in\n @file{sys/types.h}.  If you find that @code{size_t} is a signed type and\n that type mismatches occur, this could be the cause.\n \n-The solution is not to use such a directory for building GNU CC.\n+The solution is not to use such a directory for building GCC.\n \n @item\n-In previous versions of GNU CC, the @code{gcc} driver program looked for\n+In previous versions of GCC, the @code{gcc} driver program looked for\n @code{as} and @code{ld} in various places; for example, in files\n-beginning with @file{/usr/local/lib/gcc-}.  GNU CC version 2 looks for\n+beginning with @file{/usr/local/lib/gcc-}.  GCC version 2 looks for\n them in the directory\n @file{/usr/local/lib/gcc-lib/@var{target}/@var{version}}.\n \n@@ -433,12 +436,12 @@ the compiler.  In one case, this was traced down to a bug in\n @item\n If you have installed a program known as purify, you may find that it\n causes errors while linking @code{enquire}, which is part of building\n-GNU CC.  The fix is to get rid of the file @code{real-ld} which purify\n-installs---so that GNU CC won't try to use it.\n+GCC.  The fix is to get rid of the file @code{real-ld} which purify\n+installs---so that GCC won't try to use it.\n \n @item\n On GNU/Linux SLS 1.01, there is a problem with @file{libc.a}: it does not\n-contain the obstack functions.  However, GNU CC assumes that the obstack\n+contain the obstack functions.  However, GCC assumes that the obstack\n functions are in @file{libc.a} when it is the GNU C library.  To work\n around this problem, change the @code{__GNU_LIBRARY__} conditional\n around line 31 to @samp{#if 1}.\n@@ -447,7 +450,7 @@ around line 31 to @samp{#if 1}.\n On some 386 systems, building the compiler never finishes because\n @code{enquire} hangs due to a hardware problem in the motherboard---it\n reports floating point exceptions to the kernel incorrectly.  You can\n-install GNU CC except for @file{float.h} by patching out the command to\n+install GCC except for @file{float.h} by patching out the command to\n run @code{enquire}.  You may also be able to fix the problem for real by\n getting a replacement motherboard.  This problem was observed in\n Revision E of the Micronics motherboard, and is fixed in Revision F.\n@@ -459,7 +462,7 @@ are running SCO Unix, you can reboot and force the FPU to be ignored.\n To do this, type @samp{hd(40)unix auto ignorefpu}.\n \n @item\n-On some 386 systems, GNU CC crashes trying to compile @file{enquire.c}.\n+On some 386 systems, GCC crashes trying to compile @file{enquire.c}.\n This happens on machines that don't have a 387 FPU chip.  On 386\n machines, the system kernel is supposed to emulate the 387 when you\n don't have one.  The crash is due to a bug in the emulator.\n@@ -490,48 +493,48 @@ enquire.c:2328: floating overflow\n @end example\n \n @item\n-On SCO systems, when compiling GNU CC with the system's compiler,\n+On SCO systems, when compiling GCC with the system's compiler,\n do not use @samp{-O}.  Some versions of the system's compiler miscompile\n-GNU CC with @samp{-O}.\n+GCC with @samp{-O}.\n \n @cindex @code{genflags}, crash on Sun 4\n @item\n Sometimes on a Sun 4 you may observe a crash in the program\n-@code{genflags} or @code{genoutput} while building GNU CC.  This is said to\n+@code{genflags} or @code{genoutput} while building GCC.  This is said to\n be due to a bug in @code{sh}.  You can probably get around it by running\n @code{genflags} or @code{genoutput} manually and then retrying the\n @code{make}.\n \n @item\n-On Solaris 2, executables of GNU CC version 2.0.2 are commonly\n+On Solaris 2, executables of GCC version 2.0.2 are commonly\n available, but they have a bug that shows up when compiling current\n-versions of GNU CC: undefined symbol errors occur during assembly if you\n+versions of GCC: undefined symbol errors occur during assembly if you\n use @samp{-g}.\n \n-The solution is to compile the current version of GNU CC without\n+The solution is to compile the current version of GCC without\n @samp{-g}.  That makes a working compiler which you can use to recompile\n with @samp{-g}.\n \n @item\n Solaris 2 comes with a number of optional OS packages.  Some of these\n-packages are needed to use GNU CC fully.  If you did not install all\n+packages are needed to use GCC fully.  If you did not install all\n optional packages when installing Solaris, you will need to verify that\n-the packages that GNU CC needs are installed.\n+the packages that GCC needs are installed.\n \n To check whether an optional package is installed, use\n the @code{pkginfo} command.  To add an optional package, use the\n @code{pkgadd} command.  For further details, see the Solaris\n documentation.\n \n-For Solaris 2.0 and 2.1, GNU CC needs six packages: @samp{SUNWarc},\n+For Solaris 2.0 and 2.1, GCC needs six packages: @samp{SUNWarc},\n @samp{SUNWbtool}, @samp{SUNWesu}, @samp{SUNWhea}, @samp{SUNWlibm}, and\n @samp{SUNWtoo}.\n \n-For Solaris 2.2, GNU CC needs an additional seventh package: @samp{SUNWsprot}.\n+For Solaris 2.2, GCC needs an additional seventh package: @samp{SUNWsprot}.\n \n @item\n On Solaris 2, trying to use the linker and other tools in\n-@file{/usr/ucb} to install GNU CC has been observed to cause trouble.\n+@file{/usr/ucb} to install GCC has been observed to cause trouble.\n For example, the linker may hang indefinitely.  The fix is to remove\n @file{/usr/ucb} from your @code{PATH}.\n \n@@ -555,7 +558,7 @@ optional, and there should not be a warning about their absence.\n @item\n In Ultrix 4.0 on the MIPS machine, @file{stdio.h} does not work with GNU\n CC at all unless it has been fixed with @code{fixincludes}.  This causes\n-problems in building GNU CC.  Once GNU CC is installed, the problems go\n+problems in building GCC.  Once GCC is installed, the problems go\n away.\n \n To work around this problem, when making the stage 1 compiler, specify\n@@ -585,7 +588,7 @@ Some versions of the MIPS linker will issue an assertion failure\n when linking code that uses @code{alloca} against shared\n libraries on RISC-OS 5.0, and DEC's OSF/1 systems.  This is a bug\n in the linker, that is supposed to be fixed in future revisions.\n-To protect against this, GNU CC passes @samp{-non_shared} to the\n+To protect against this, GCC passes @samp{-non_shared} to the\n linker unless you pass an explicit @samp{-shared} or\n @samp{-call_shared} switch.\n \n@@ -618,7 +621,7 @@ On System V, if you get an error like this,\n that too indicates a problem with disk space, ULIMIT, or @code{MAXUMEM}.\n \n @item\n-Current GNU CC versions probably do not work on version 2 of the NeXT\n+Current GCC versions probably do not work on version 2 of the NeXT\n operating system.\n \n @item\n@@ -628,7 +631,7 @@ does not happen on 3.1.\n \n @item\n On the Tower models 4@var{n}0 and 6@var{n}0, by default a process is not\n-allowed to have more than one megabyte of memory.  GNU CC cannot compile\n+allowed to have more than one megabyte of memory.  GCC cannot compile\n itself (or many other programs) with @samp{-O} in that much memory.\n \n To solve this problem, reconfigure the kernel adding the following line\n@@ -640,7 +643,7 @@ MAXUMEM = 4096\n \n @item\n On HP 9000 series 300 or 400 running HP-UX release 8.0, there is a bug\n-in the assembler that must be fixed before GNU CC can be built.  This\n+in the assembler that must be fixed before GCC can be built.  This\n bug manifests itself during the first stage of compilation, while\n building @file{libgcc2.a}:\n \n@@ -677,21 +680,21 @@ use BASH (the GNU shell) to run @code{fixproto}.\n \n @item\n Some versions of the Pyramid C compiler are reported to be unable to\n-compile GNU CC.  You must use an older version of GNU CC for\n+compile GCC.  You must use an older version of GCC for\n bootstrapping.  One indication of this problem is if you get a crash\n-when GNU CC compiles the function @code{muldi3} in file @file{libgcc2.c}.\n+when GCC compiles the function @code{muldi3} in file @file{libgcc2.c}.\n \n-You may be able to succeed by getting GNU CC version 1, installing it,\n-and using it to compile GNU CC version 2.  The bug in the Pyramid C\n-compiler does not seem to affect GNU CC version 1.\n+You may be able to succeed by getting GCC version 1, installing it,\n+and using it to compile GCC version 2.  The bug in the Pyramid C\n+compiler does not seem to affect GCC version 1.\n \n @item\n There may be similar problems on System V Release 3.1 on 386 systems.\n \n @item\n On the Intel Paragon (an i860 machine), if you are using operating\n system version 1.0, you will get warnings or errors about redefinition\n-of @code{va_arg} when you build GNU CC.\n+of @code{va_arg} when you build GCC.\n \n If this happens, then you need to link most programs with the library\n @file{iclib.a}.  You must also modify @file{stdio.h} as follows: before\n@@ -728,7 +731,7 @@ insert the line\n These problems don't exist in operating system version 1.1.\n \n @item\n-On the Altos 3068, programs compiled with GNU CC won't work unless you\n+On the Altos 3068, programs compiled with GCC won't work unless you\n fix a kernel bug.  This happens using system versions V.2.2 1.0gT1 and\n V.2.2 1.0e and perhaps later versions as well.  See the file\n @file{README.ALTOS}.\n@@ -819,12 +822,12 @@ run.  Incompatible libraries are then detected at link time, rather than\n at run time.\n \n @item\n-Older GDB versions sometimes fail to read the output of GNU CC version\n+Older GDB versions sometimes fail to read the output of GCC version\n 2.  If you have trouble, get GDB version 4.4 or later.\n \n @item\n @cindex DBX\n-DBX rejects some files produced by GNU CC, though it accepts similar\n+DBX rejects some files produced by GCC, though it accepts similar\n constructs in output from PCC.  Until someone can supply a coherent\n description of what is valid DBX input and what is not, there is\n nothing I can do about these problems.  You are on your own.\n@@ -841,10 +844,10 @@ be run.\n @item\n Use of @samp{-I/usr/include} may cause trouble.\n \n-Many systems come with header files that won't work with GNU CC unless\n+Many systems come with header files that won't work with GCC unless\n corrected by @code{fixincludes}.  The corrected header files go in a new\n-directory; GNU CC searches this directory before @file{/usr/include}.\n-If you use @samp{-I/usr/include}, this tells GNU CC to search\n+directory; GCC searches this directory before @file{/usr/include}.\n+If you use @samp{-I/usr/include}, this tells GCC to search\n @file{/usr/include} earlier on, before the corrected headers.  The\n result is that you get the uncorrected header files.\n \n@@ -854,7 +857,7 @@ Instead, you should use these options (when compiling C programs):\n -I/usr/local/lib/gcc-lib/@var{target}/@var{version}/include -I/usr/include\n @end smallexample\n \n-For C++ programs, GNU CC also uses a special directory that defines C++\n+For C++ programs, GCC also uses a special directory that defines C++\n interfaces to standard C subroutines.  This directory is meant to be\n searched @emph{before} other standard include directories, so that it\n takes precedence.  If you are compiling C++ programs and specifying\n@@ -871,7 +874,7 @@ options above:\n There is a bug in @code{vfork} on the Sun-4 which causes the registers\n of the child process to clobber those of the parent.  Because of this,\n programs that call @code{vfork} are likely to lose when compiled\n-optimized with GNU CC when the child code alters registers which contain\n+optimized with GCC when the child code alters registers which contain\n C variables in the parent.  This affects variables which are live in the\n parent across the call to @code{vfork}.\n \n@@ -884,18 +887,18 @@ using @samp{-O} for those source files.\n @item\n On some SGI systems, when you use @samp{-lgl_s} as an option,\n it gets translated magically to @samp{-lgl_s -lX11_s -lc_s}.\n-Naturally, this does not happen when you use GNU CC.\n+Naturally, this does not happen when you use GCC.\n You must specify all three options explicitly.\n \n @item\n-On a Sparc, GNU CC aligns all values of type @code{double} on an 8-byte\n+On a Sparc, GCC aligns all values of type @code{double} on an 8-byte\n boundary, and it expects every @code{double} to be so aligned.  The Sun\n compiler usually gives @code{double} values 8-byte alignment, with one\n exception: function arguments of type @code{double} may not be aligned.\n \n As a result, if a function compiled with Sun CC takes the address of an\n argument of type @code{double} and passes this pointer of type\n-@code{double *} to a function compiled with GNU CC, dereferencing the\n+@code{double *} to a function compiled with GCC, dereferencing the\n pointer may cause a fatal signal.\n \n One way to solve this problem is to compile your entire program with GNU\n@@ -926,7 +929,7 @@ Storing into the pointer can be done likewise with the same union.\n \n @item\n On Solaris, the @code{malloc} function in the @file{libmalloc.a} library\n-may allocate memory that is only 4 byte aligned.  Since GNU CC on the\n+may allocate memory that is only 4 byte aligned.  Since GCC on the\n Sparc assumes that doubles are 8 byte aligned, this may result in a\n fatal signal if doubles are stored in memory allocated by the\n @file{libmalloc.a} library.\n@@ -951,20 +954,20 @@ instructions they must be emulated by the operating system.  Long\n doubles do not work in Sun OS versions 4.0.3 and earlier, because the\n kernel emulator uses an obsolete and incompatible format.  Long doubles\n do not work in Sun OS version 4.1.1 due to a problem in a Sun library.\n-Long doubles do work on Sun OS versions 4.1.2 and higher, but GNU CC\n+Long doubles do work on Sun OS versions 4.1.2 and higher, but GCC\n does not enable them by default.  Long doubles appear to work in Sun OS\n 5.x (Solaris 2.x).\n \n @item\n On HP-UX version 9.01 on the HP PA, the HP compiler @code{cc} does not\n-compile GNU CC correctly.  We do not yet know why.  However, GNU CC\n+compile GCC correctly.  We do not yet know why.  However, GCC\n compiled on earlier HP-UX versions works properly on HP-UX 9.01 and can\n compile itself properly on 9.01.\n \n @item\n On the HP PA machine, ADB sometimes fails to work on functions compiled\n-with GNU CC.  Specifically, it fails to work on functions that use\n-@code{alloca} or variable-size arrays.  This is because GNU CC doesn't\n+with GCC.  Specifically, it fails to work on functions that use\n+@code{alloca} or variable-size arrays.  This is because GCC doesn't\n generate HP-UX unwind descriptors for such functions.  It may even be\n impossible to generate them.\n \n@@ -986,11 +989,11 @@ the HP assembler.  GAS for the PA does not have this problem.\n In extremely rare cases involving some very large functions you may\n receive errors from the HP linker complaining about an out of bounds\n unconditional branch offset.  This used to occur more often in previous\n-versions of GNU CC, but is now exceptionally rare.  If you should run\n+versions of GCC, but is now exceptionally rare.  If you should run\n into it, you can work around by making your function smaller.\n \n @item\n-GNU CC compiled code sometimes emits warnings from the HP-UX assembler of\n+GCC compiled code sometimes emits warnings from the HP-UX assembler of\n the form:\n \n @smallexample\n@@ -1064,7 +1067,7 @@ by requesting PTF 421749 from IBM.\n \n @item\n There is an assembler bug in versions of DG/UX prior to 5.4.2.01 that\n-occurs when the @samp{fldcr} instruction is used.  GNU CC uses\n+occurs when the @samp{fldcr} instruction is used.  GCC uses\n @samp{fldcr} on the 88100 to serialize volatile memory references.  Use\n the option @samp{-mno-serialize-volatile} if your version of the\n assembler has this bug.\n@@ -1090,15 +1093,15 @@ lines around the definition of @code{size_t}:\n @cindex Alliant\n @item\n On the Alliant, the system's own convention for returning structures\n-and unions is unusual, and is not compatible with GNU CC no matter\n+and unions is unusual, and is not compatible with GCC no matter\n what options are used.\n \n @cindex RT PC\n @cindex IBM RT PC\n @item\n On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n convention for structure and union returning.  Use the option\n-@samp{-mhc-struct-return} to tell GNU CC to use a convention compatible\n+@samp{-mhc-struct-return} to tell GCC to use a convention compatible\n with it.\n \n @cindex Vax calling convention\n@@ -1108,15 +1111,15 @@ On Ultrix, the Fortran compiler expects registers 2 through 5 to be saved\n by function calls.  However, the C compiler uses conventions compatible\n with BSD Unix: registers 2 through 5 may be clobbered by function calls.\n \n-GNU CC uses the same convention as the Ultrix C compiler.  You can use\n+GCC uses the same convention as the Ultrix C compiler.  You can use\n these options to produce code compatible with the Fortran compiler:\n \n @smallexample\n -fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5\n @end smallexample\n \n @item\n-On the WE32k, you may find that programs compiled with GNU CC do not\n+On the WE32k, you may find that programs compiled with GCC do not\n work with the standard shared C library.  You may need to link with\n the ordinary C compiler.  If you do so, you must specify the following\n options:\n@@ -1128,7 +1131,7 @@ options:\n The first specifies where to find the library @file{libgcc.a}\n specified with the @samp{-lgcc} option.\n \n-GNU CC does linking by invoking @code{ld}, just as @code{cc} does, and\n+GCC does linking by invoking @code{ld}, just as @code{cc} does, and\n there is no reason why it @emph{should} matter which compilation program\n you use to invoke @code{ld}.  If someone tracks this problem down,\n it can probably be fixed easily.\n@@ -1145,7 +1148,7 @@ sometimes reorders instructions incorrectly when optimization is turned\n on.  If you think this may be happening to you, try using the GNU\n assembler; GAS version 2.1 supports ECOFF on Irix.\n \n-Or use the @samp{-noasmopt} option when you compile GNU CC with itself,\n+Or use the @samp{-noasmopt} option when you compile GCC with itself,\n and then again when you compile your program.  (This is a temporary\n kludge to turn off assembler optimization on Irix.)  If this proves to\n be what you need, edit the assembler spec in the file @file{specs} so\n@@ -1197,30 +1200,30 @@ On various 386 Unix systems derived from System V, including SCO, ISC,\n and ESIX, you may get error messages about running out of virtual memory\n while compiling certain programs.\n \n-You can prevent this problem by linking GNU CC with the GNU malloc\n+You can prevent this problem by linking GCC with the GNU malloc\n (which thus replaces the malloc that comes with the system).  GNU malloc\n is available as a separate package, and also in the file\n @file{src/gmalloc.c} in the GNU Emacs 19 distribution.\n \n If you have installed GNU malloc as a separate library package, use this\n-option when you relink GNU CC:\n+option when you relink GCC:\n \n @example\n MALLOC=/usr/local/lib/libgmalloc.a\n @end example\n \n Alternatively, if you have compiled @file{gmalloc.c} from Emacs 19, copy\n the object file to @file{gmalloc.o} and use this option when you relink\n-GNU CC:\n+GCC:\n \n @example\n MALLOC=gmalloc.o\n @end example\n @end itemize\n \n @node Incompatibilities\n-@section Incompatibilities of GNU CC\n-@cindex incompatibilities of GNU CC\n+@section Incompatibilities of GCC\n+@cindex incompatibilities of GCC\n \n There are several noteworthy incompatibilities between GNU C and most\n existing (non-ANSI) versions of C.  The @samp{-traditional} option\n@@ -1232,8 +1235,8 @@ telling GNU C to behave like the other C compilers.\n @cindex read-only strings\n @cindex shared strings\n @item\n-GNU CC normally makes string constants read-only.  If several\n-identical-looking string constants are used, GNU CC stores only one\n+GCC normally makes string constants read-only.  If several\n+identical-looking string constants are used, GCC stores only one\n copy of the string.\n \n @cindex @code{mktemp}, and constant strings\n@@ -1252,7 +1255,7 @@ constant.  Likewise @code{fscanf} and @code{scanf}.\n The best solution to these problems is to change the program to use\n @code{char}-array variables with initialization strings for these\n purposes instead of string constants.  But if this is not possible,\n-you can use the @samp{-fwritable-strings} flag, which directs GNU CC\n+you can use the @samp{-fwritable-strings} flag, which directs GCC\n to handle string constants the same way most C compilers do.\n @samp{-traditional} also has this effect, among others.\n \n@@ -1264,8 +1267,8 @@ This is because 2147483648 cannot fit in the type @code{int}, so\n Negating this value yields 2147483648 again.\n \n @item\n-GNU CC does not substitute macro arguments when they appear inside of\n-string constants.  For example, the following macro in GNU CC\n+GCC does not substitute macro arguments when they appear inside of\n+string constants.  For example, the following macro in GCC\n \n @example\n #define foo(a) \"a\"\n@@ -1274,7 +1277,7 @@ string constants.  For example, the following macro in GNU CC\n @noindent\n will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n \n-The @samp{-traditional} option directs GNU CC to handle such cases\n+The @samp{-traditional} option directs GCC to handle such cases\n (among others) in the old-fashioned (non-ANSI) fashion.\n \n @cindex @code{setjmp} incompatibilities\n@@ -1308,7 +1311,7 @@ its first value is restored; otherwise, it keeps the last value stored\n in it.\n \n If you use the @samp{-W} option with the @samp{-O} option, you will\n-get a warning when GNU CC thinks such a problem might be possible.\n+get a warning when GCC thinks such a problem might be possible.\n \n The @samp{-traditional} option directs GNU C to put variables in\n the stack by default, rather than in registers, in functions that\n@@ -1317,7 +1320,7 @@ traditional C compilers.\n \n @item\n Programs that use preprocessing directives in the middle of macro\n-arguments do not work with GNU CC.  For example, a program like this\n+arguments do not work with GCC.  For example, a program like this\n will not work:\n \n @example\n@@ -1366,17 +1369,17 @@ difficulty described immediately above applies here too.\n @cindex whitespace\n @item\n PCC allows whitespace in the middle of compound assignment operators\n-such as @samp{+=}.  GNU CC, following the ANSI standard, does not\n+such as @samp{+=}.  GCC, following the ANSI standard, does not\n allow this.  The difficulty described immediately above applies here\n too.\n \n @cindex apostrophes\n @cindex '\n @item\n-GNU CC complains about unterminated character constants inside of\n+GCC complains about unterminated character constants inside of\n preprocessing conditionals that fail.  Some programs have English\n comments enclosed in conditionals that are guaranteed to fail; if these\n-comments contain apostrophes, GNU CC will probably report an error.  For\n+comments contain apostrophes, GCC will probably report an error.  For\n example, this code would produce an error:\n \n @example\n@@ -1403,38 +1406,38 @@ type of @code{time}.\n @cindex @code{float} as function value type\n @item\n When compiling functions that return @code{float}, PCC converts it to\n-a double.  GNU CC actually returns a @code{float}.  If you are concerned\n+a double.  GCC actually returns a @code{float}.  If you are concerned\n with PCC compatibility, you should declare your functions to return\n @code{double}; you might as well say what you mean.\n \n @cindex structures\n @cindex unions\n @item\n-When compiling functions that return structures or unions, GNU CC\n+When compiling functions that return structures or unions, GCC\n output code normally uses a method different from that used on most\n-versions of Unix.  As a result, code compiled with GNU CC cannot call\n+versions of Unix.  As a result, code compiled with GCC cannot call\n a structure-returning function compiled with PCC, and vice versa.\n \n-The method used by GNU CC is as follows: a structure or union which is\n+The method used by GCC is as follows: a structure or union which is\n 1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or union\n with any other size is stored into an address supplied by the caller\n (usually in a special, fixed register, but on some machines it is passed\n on the stack).  The machine-description macros @code{STRUCT_VALUE} and\n-@code{STRUCT_INCOMING_VALUE} tell GNU CC where to pass this address.\n+@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n \n By contrast, PCC on most target machines returns structures and unions\n of any size by copying the data into an area of static storage, and then\n returning the address of that storage as if it were a pointer value.\n The caller must copy the data from that memory area to the place where\n-the value is wanted.  GNU CC does not use this method because it is\n+the value is wanted.  GCC does not use this method because it is\n slower and nonreentrant.\n \n On some newer machines, PCC uses a reentrant convention for all\n-structure and union returning.  GNU CC on most of these machines uses a\n+structure and union returning.  GCC on most of these machines uses a\n compatible convention when returning structures and unions in memory,\n but still returns small structures and unions in registers.\n \n-You can tell GNU CC to use a compatible convention for all structure and\n+You can tell GCC to use a compatible convention for all structure and\n union returning with the option @samp{-fpcc-struct-return}.\n \n @cindex preprocessing tokens\n@@ -1460,13 +1463,13 @@ the minus sign.  This whitespace will end the preprocessing number.\n @node Fixed Headers\n @section Fixed Header Files\n \n-GNU CC needs to install corrected versions of some system header files.\n+GCC needs to install corrected versions of some system header files.\n This is because most target systems have some header files that won't\n-work with GNU CC unless they are changed.  Some have bugs, some are\n+work with GCC unless they are changed.  Some have bugs, some are\n incompatible with ANSI C, and some depend on special features of other\n compilers.\n \n-Installing GNU CC automatically creates and installs the fixed header\n+Installing GCC automatically creates and installs the fixed header\n files, by running a program called @code{fixincludes} (or for certain\n targets an alternative such as @code{fixinc.svr4}).  Normally, you\n don't need to pay attention to this.  But there are cases where it\n@@ -1475,8 +1478,8 @@ doesn't do the right thing automatically.\n @itemize @bullet\n @item\n If you update the system's header files, such as by installing a new\n-system version, the fixed header files of GNU CC are not automatically\n-updated.  The easiest way to update them is to reinstall GNU CC.  (If\n+system version, the fixed header files of GCC are not automatically\n+updated.  The easiest way to update them is to reinstall GCC.  (If\n you want to be clever, look in the makefile and you can find a\n shortcut.)\n \n@@ -1499,18 +1502,18 @@ different machine models, and arrange a structure of symbolic links so\n as to use the proper set, but you'll have to do this by hand.\n \n @item\n-On Lynxos, GNU CC by default does not fix the header files.  This is\n+On Lynxos, GCC by default does not fix the header files.  This is\n because bugs in the shell cause the @code{fixincludes} script to fail.\n \n This means you will encounter problems due to bugs in the system header\n-files.  It may be no comfort that they aren't GNU CC's fault, but it\n+files.  It may be no comfort that they aren't GCC's fault, but it\n does mean that there's nothing for us to do about them.\n @end itemize\n \n @node Standard Libraries\n @section Standard Libraries\n \n-GNU CC by itself attempts to be what the ISO/ANSI C standard calls a\n+GCC by itself attempts to be what the ISO/ANSI C standard calls a\n @dfn{conforming freestanding implementation}.  This means all ANSI\n C language features are available, as well as the contents of\n @file{float.h}, @file{limits.h}, @file{stdarg.h}, and\n@@ -1526,7 +1529,7 @@ this function match the Standard, but that would be wrong, since the\n function will still return @code{char *}.\n \n If you need a Standard compliant library, then you need to find one, as\n-GNU CC does not provide one.  The GNU C library (called @code{glibc})\n+GCC does not provide one.  The GNU C library (called @code{glibc})\n has been ported to a number of operating systems, and provides ANSI/ISO,\n POSIX, BSD and SystemV compatibility.  You could also ask your operating\n system vendor if newer libraries are available.\n@@ -1542,10 +1545,10 @@ way around them.\n Certain local variables aren't recognized by debuggers when you compile\n with optimization.\n \n-This occurs because sometimes GNU CC optimizes the variable out of\n+This occurs because sometimes GCC optimizes the variable out of\n existence.  There is no way to tell the debugger how to compute the\n value such a variable ``would have had'', and it is not clear that would\n-be desirable anyway.  So GNU CC simply does not mention the eliminated\n+be desirable anyway.  So GCC simply does not mention the eliminated\n variable when it writes debugging information.\n \n You have to expect a certain amount of disagreement between the\n@@ -1554,7 +1557,7 @@ executable and your source code, when you use optimization.\n @cindex conflicting types\n @cindex scope of declaration\n @item\n-Users often think it is a bug when GNU CC reports an error for code\n+Users often think it is a bug when GCC reports an error for code\n like this:\n \n @example\n@@ -1592,14 +1595,14 @@ If you care about controlling the amount of memory that is accessed, use\n volatile but do not use bitfields.\n \n @item\n-GNU CC comes with shell scripts to fix certain known problems in system\n+GCC comes with shell scripts to fix certain known problems in system\n header files.  They install corrected copies of various header files in\n-a special directory where only GNU CC will normally look for them.  The\n+a special directory where only GCC will normally look for them.  The\n scripts adapt to various systems by searching all the system header\n files for the problem cases that we know about.\n \n If new system header files are installed, nothing automatically arranges\n-to update the corrected header files.  You will have to reinstall GNU CC\n+to update the corrected header files.  You will have to reinstall GCC\n to fix the new header files.  More specifically, go to the build\n directory and delete the files @file{stmp-fixinc} and\n @file{stmp-headers}, and the subdirectory @code{include}; then do\n@@ -1891,7 +1894,7 @@ eighty characters in any case.)\n @section Certain Changes We Don't Want to Make\n \n This section lists changes that people frequently request, but which\n-we do not make because we think GNU CC is better without them.\n+we do not make because we think GCC is better without them.\n \n @itemize @bullet\n @item\n@@ -1992,12 +1995,12 @@ that machine.  But such applications are rare.  And users writing a\n program to run on more than one type of machine cannot possibly benefit\n from this kind of compatibility.\n \n-This is why GNU CC does and will treat plain bitfields in the same\n+This is why GCC does and will treat plain bitfields in the same\n fashion on all types of machines (by default).\n \n There are some arguments for making bitfields unsigned by default on all\n machines.  If, for example, this becomes a universal de facto standard,\n-it would make sense for GNU CC to go along with it.  This is something\n+it would make sense for GCC to go along with it.  This is something\n to be considered in the future.\n \n (Of course, users strongly concerned about portability should indicate\n@@ -2007,7 +2010,7 @@ they write programs which have the same meaning in both C dialects.)\n @item\n Undefining @code{__STDC__} when @samp{-ansi} is not used.\n \n-Currently, GNU CC defines @code{__STDC__} as long as you don't use\n+Currently, GCC defines @code{__STDC__} as long as you don't use\n @samp{-traditional}.  This provides good results in practice.\n \n Programmers normally use conditionals on @code{__STDC__} to ask whether\n@@ -2033,11 +2036,11 @@ compilers such as plain @samp{gcc}.  Whatever the ANSI C standard says\n is relevant to the design of plain @samp{gcc} without @samp{-ansi} only\n for pragmatic reasons, not as a requirement.\n \n-GNU CC normally defines @code{__STDC__} to be 1, and in addition\n+GCC normally defines @code{__STDC__} to be 1, and in addition\n defines @code{__STRICT_ANSI__} if you specify the @samp{-ansi} option.\n On some hosts, system include files use a different convention, where\n @code{__STDC__} is normally 0, but is 1 if the user specifies strict\n-conformance to the C Standard.  GNU CC follows the host convention when\n+conformance to the C Standard.  GCC follows the host convention when\n processing system include files, but when processing user files it follows\n the usual GNU C convention.\n \n@@ -2063,7 +2066,7 @@ test explicitly for C++ as well.\n @item\n Deleting ``empty'' loops.\n \n-Historically, GNU CC has not deleted ``empty'' loops under the\n+Historically, GCC has not deleted ``empty'' loops under the\n assumption that the most likely reason you would put one in a program is\n to have a delay, so deleting them will not make real programs run any\n faster.\n@@ -2118,7 +2121,7 @@ warnings.  Each kind has a different purpose:\n @itemize @w{}\n @item\n @emph{Errors} report problems that make it impossible to compile your\n-program.  GNU CC reports errors with the source file name and line\n+program.  GCC reports errors with the source file name and line\n number where the problem is apparent.\n \n @item\n@@ -2136,12 +2139,12 @@ warnings are issued only if you ask for them, with one of the @samp{-W}\n options (for instance, @samp{-Wall} requests a variety of useful\n warnings).\n \n-GNU CC always tries to compile your program if possible; it never\n+GCC always tries to compile your program if possible; it never\n gratuitously rejects a program whose meaning is clear merely because\n (for instance) it fails to conform to a standard.  In some cases,\n however, the C and C++ standards specify that certain extensions are\n forbidden, and a diagnostic @emph{must} be issued by a conforming\n-compiler.  The @samp{-pedantic} option tells GNU CC to issue warnings in\n+compiler.  The @samp{-pedantic} option tells GCC to issue warnings in\n such cases; @samp{-pedantic-errors} says to make them errors instead.\n This does not mean that @emph{all} non-ANSI constructs get warnings\n or errors.\n@@ -2154,7 +2157,7 @@ more detail on these and related command-line options.\n @cindex bugs\n @cindex reporting bugs\n \n-Your bug reports play an essential role in making GNU CC reliable.\n+Your bug reports play an essential role in making GCC reliable.\n \n When you encounter a problem, the first thing to do is to see if it is\n already known.  @xref{Trouble}.  If it isn't known, then you should\n@@ -2163,8 +2166,8 @@ report the problem.\n Reporting a bug may help you by bringing a solution to your problem, or\n it may not.  (If it does not, look in the service directory; see\n @ref{Service}.)  In any case, the principal function of a bug report is\n-to help the entire community by making the next version of GNU CC work\n-better.  Bug reports are your contribution to the maintenance of GNU CC.\n+to help the entire community by making the next version of GCC work\n+better.  Bug reports are your contribution to the maintenance of GCC.\n \n Since the maintainers are very overloaded, we cannot respond to every\n bug report.  However, if the bug has not been fixed, we are likely to\n@@ -2177,7 +2180,7 @@ information that makes for fixing the bug.\n * Criteria:  Bug Criteria.   Have you really found a bug?\n * Where: Bug Lists.\t     Where to send your bug report.\n * Reporting: Bug Reporting.  How to report a bug effectively.\n-* Patches: Sending Patches.  How to send a patch for GNU CC.\n+* Patches: Sending Patches.  How to send a patch for GCC.\n * Known: Trouble.            Known problems.\n * Help: Service.             Where to ask for help.\n @end menu\n@@ -2221,11 +2224,11 @@ by chance to give the desired results with another C or C++ compiler.\n For example, in many nonoptimizing compilers, you can write @samp{x;}\n at the end of a function instead of @samp{return x;}, with the same\n results.  But the value of the function is undefined if @code{return}\n-is omitted; it is not a bug when GNU CC produces different results.\n+is omitted; it is not a bug when GCC produces different results.\n \n Problems often result from expressions with two increment operators,\n as in @code{f (*p++, *p++)}.  Your previous compiler might have\n-interpreted that expression the way you intended; GNU CC might\n+interpreted that expression the way you intended; GCC might\n interpret it another way.  Neither compiler is wrong.  The bug is\n in your code.\n \n@@ -2245,8 +2248,9 @@ that is a compiler bug.  However, you should note that your idea of\n for traditional practice''.\n \n @item\n-If you are an experienced user of C or C++ compilers, your suggestions\n-for improvement of GNU CC or GNU C++ are welcome in any case.\n+If you are an experienced user of C or C++ (or Fortran or Objective-C)\n+compilers, your suggestions\n+for improvement of GCC are welcome in any case.\n @end itemize\n \n @node Bug Lists\n@@ -2319,11 +2323,11 @@ things:\n \n @itemize @bullet\n @item\n-The version of GNU CC.  You can get this by running it with the\n+The version of GCC.  You can get this by running it with the\n @samp{-v} option.\n \n Without this, we won't know whether there is any point in looking for\n-the bug in the current version of GNU CC.\n+the bug in the current version of GCC.\n \n @item\n A complete input file that will reproduce the bug.  If the bug is in the\n@@ -2345,16 +2349,16 @@ provoke the bug.  For example, bugs in register allocation and reloading\n frequently depend on every little detail of the function they happen in.\n \n Even if the input file that fails comes from a GNU program, you should\n-still send the complete test case.  Don't ask the GNU CC maintainers to\n+still send the complete test case.  Don't ask the GCC maintainers to\n do the extra work of obtaining the program in question---they are all\n overworked as it is.  Also, the problem may depend on what is in the\n-header files on your system; it is unreliable for the GNU CC maintainers\n+header files on your system; it is unreliable for the GCC maintainers\n to try the problem with the header files available to them.  By sending\n CPP output, you can eliminate this source of uncertainty and save us\n a certain percentage of wild goose chases.\n \n @item\n-The command arguments you gave GNU CC or GNU C++ to compile that example\n+The command arguments you gave GCC to compile that example\n and observe the bug.  For example, did you use @samp{-O}?  To guarantee\n you won't omit something important, list all the options.\n \n@@ -2383,7 +2387,7 @@ don't support) is a modification of the compiler source.\n \n @item\n Details of any other deviations from the standard procedure for installing\n-GNU CC.\n+GCC.\n \n @item\n A description of what behavior you observe that you believe is\n@@ -2406,7 +2410,7 @@ was not happening.  If you don't say to expect a crash, then we would\n not know whether the bug was happening.  We would not be able to draw\n any conclusion from our observations.\n \n-If the problem is a diagnostic when compiling GNU CC with some other\n+If the problem is a diagnostic when compiling GCC with some other\n compiler, say whether it is a warning or an error.\n \n Often the observed symptom is incorrect output when your program is run.\n@@ -2419,13 +2423,13 @@ person who understands the program can find this as easily as finding a\n bug in the program itself.\n \n @item\n-If you send examples of assembler code output from GNU CC or GNU C++,\n+If you send examples of assembler code output from GCC,\n please use @samp{-g} when you make them.  The debugging information\n includes source line numbers which are essential for correlating the\n output with the input.\n \n @item\n-If you wish to mention something in the GNU CC source, refer to it by\n+If you wish to mention something in the GCC source, refer to it by\n context, not by line number.\n \n The line numbers in the development sources don't match those in your\n@@ -2441,7 +2445,7 @@ any chance of being useful.\n @cindex backtrace for bug reports\n For example, many people send just a backtrace, but that is never\n useful by itself.  A simple backtrace with arguments conveys little\n-about GNU CC because the compiler is largely data-driven; the same\n+about GCC because the compiler is largely data-driven; the same\n functions are called over and over for different RTL insns, doing\n different things depending on the details of the insn.\n \n@@ -2485,7 +2489,7 @@ as well save your time for something else.\n Of course, if you can find a simpler example to report @emph{instead} of\n the original one, that is a convenience.  Errors in the output will be\n easier to spot, running under the debugger will take less time, etc.\n-Most GNU CC bugs involve just one function, so the most straightforward\n+Most GCC bugs involve just one function, so the most straightforward\n way to simplify an example is to delete all the function definitions\n except the one where the bug occurs.  Those earlier in the file may be\n replaced by external declarations if the crucial function depends on\n@@ -2509,7 +2513,7 @@ necessary information, such as the test case, on the assumption that a\n patch is all we need.  We might see problems with your patch and decide\n to fix the problem another way, or we might not understand it at all.\n \n-Sometimes with a program as complicated as GNU CC it is very hard to\n+Sometimes with a program as complicated as GCC it is very hard to\n construct an example that will make the program follow a certain path\n through the code.  If you don't send the example, we won't be able to\n construct one, so we won't be able to verify that the bug is fixed.\n@@ -2536,7 +2540,7 @@ we should be able to reproduce the crash ourselves.\n @end itemize\n \n @node Sending Patches,, Bug Reporting, Bugs\n-@section Sending Patches for GNU CC\n+@section Sending Patches for GCC\n \n If you would like to write bug fixes or improvements for the GNU C\n compiler, that is very helpful.  Send suggested fixes to the patches\n@@ -2633,7 +2637,7 @@ would break other systems.\n People often suggest fixing a problem by changing machine-independent\n files such as @file{toplev.c} to do something special that a particular\n system needs.  Sometimes it is totally obvious that such changes would\n-break GNU CC for almost all users.  We can't possibly make a change like\n+break GCC for almost all users.  We can't possibly make a change like\n that.  At best it might tell us how to write another patch that would\n solve the problem acceptably.\n \n@@ -2652,9 +2656,9 @@ form that is good to install.\n @end itemize\n \n @node Service\n-@chapter How To Get Help with GNU CC\n+@chapter How To Get Help with GCC\n \n-If you need help installing, using or changing GNU CC, there are two\n+If you need help installing, using or changing GCC, there are two\n ways to find it:\n \n @itemize @bullet\n@@ -2666,34 +2670,34 @@ Send a message to a suitable network mailing list.  First try\n @item\n Look in the service directory for someone who might help you for a fee.\n The service directory is found in the file named @file{SERVICE} in the\n-GNU CC distribution.\n+GCC distribution.\n @end itemize\n \n @node Contributing\n-@chapter Contributing to GNU CC Development\n+@chapter Contributing to GCC Development\n \n-If you would like to help pretest GNU CC releases to assure they work\n-well, or if you would like to work on improving GNU CC, please contact\n-the maintainers at @code{gcc@@gcc.gnu.org}.  A pretester should\n+If you would like to help pretest GCC releases to assure they work\n+well, or if you would like to work on improving GCC, please contact\n+the maintainers at @code{egcs@@egcs.cygnus.com}.  A pretester should\n be willing to try to investigate bugs as well as report them.\n \n If you'd like to work on improvements, please ask for suggested projects\n or suggest your own ideas.  If you have already written an improvement,\n please tell us about it.  If you have not yet started work, it is useful\n-to contact @code{gcc@@gcc.gnu.org} before you start; the\n+to contact @code{egcs@@egcs.cygnus.com} before you start; the\n maintainers may be able to suggest ways to make your extension fit in\n-better with the rest of GNU CC and with other development plans.\n+better with the rest of GCC and with other development plans.\n \n @node VMS\n-@chapter Using GNU CC on VMS\n+@chapter Using GCC on VMS\n \n @c prevent bad page break with this line\n-Here is how to use GNU CC on VMS.\n+Here is how to use GCC on VMS.\n \n @menu\n * Include Files and VMS::  Where the preprocessor looks for the include files.\n * Global Declarations::    How to do globaldef, globalref and globalvalue with\n-                           GNU CC.\n+                           GCC.\n * VMS Misc::\t\t   Misc information.\n @end menu\n \n@@ -2703,11 +2707,11 @@ Here is how to use GNU CC on VMS.\n @cindex include files and VMS\n @cindex VMS and include files\n @cindex header files and VMS\n-Due to the differences between the filesystems of Unix and VMS, GNU CC\n+Due to the differences between the filesystems of Unix and VMS, GCC\n attempts to translate file names in @samp{#include} into names that VMS\n will understand.  The basic strategy is to prepend a prefix to the\n specification of the include file, convert the whole filename to a VMS\n-filename, and then try to open the file.  GNU CC tries various prefixes\n+filename, and then try to open the file.  GCC tries various prefixes\n one by one until one of them succeeds:\n \n @enumerate\n@@ -2751,9 +2755,9 @@ Include directives of the form:\n @end example\n \n @noindent\n-are a common source of incompatibility between VAX-C and GNU CC.  VAX-C\n+are a common source of incompatibility between VAX-C and GCC.  VAX-C\n treats this much like a standard @code{#include <foobar.h>} directive.\n-That is incompatible with the ANSI C behavior implemented by GNU CC: to\n+That is incompatible with the ANSI C behavior implemented by GCC: to\n expand the name @code{foobar} as a macro.  Macro expansion should\n eventually yield one of the two standard formats for @code{#include}:\n \n@@ -2782,17 +2786,17 @@ Another source of incompatibility is that VAX-C assumes that:\n @end example\n \n @noindent\n-is actually asking for the file @file{foobar.h}.  GNU CC does not\n+is actually asking for the file @file{foobar.h}.  GCC does not\n make this assumption, and instead takes what you ask for literally;\n it tries to read the file @file{foobar}.  The best way to avoid this\n problem is to always specify the desired file extension in your include\n directives.\n \n-GNU CC for VMS is distributed with a set of include files that is\n+GCC for VMS is distributed with a set of include files that is\n sufficient to compile most general purpose programs.  Even though the\n-GNU CC distribution does not contain header files to define constants\n+GCC distribution does not contain header files to define constants\n and structures for some VMS system-specific functions, there is no\n-reason why you cannot use GNU CC with any of these functions.  You first\n+reason why you cannot use GCC with any of these functions.  You first\n may have to generate or create header files, either by using the public\n domain utility @code{UNSDL} (which can be found on a DECUS tape), or by\n extracting the relevant modules from one of the system macro libraries,\n@@ -2809,7 +2813,7 @@ whether explicitly, or implicitly via a logical name.\n @findex GLOBALDEF\n @findex GLOBALVALUEDEF\n @findex GLOBALVALUEREF\n-GNU CC does not provide the @code{globalref}, @code{globaldef} and\n+GCC does not provide the @code{globalref}, @code{globaldef} and\n @code{globalvalue} keywords of VAX-C.  You can get the same effect with\n an obscure feature of GAS, the GNU assembler.  (This requires GAS\n version 1.39 or later.)  The following macros allow you to use this\n@@ -2928,19 +2932,19 @@ enum globaldef color @{RED, BLUE, GREEN = 3@};\n @cindex exit status and VMS\n @cindex return value of @code{main}\n @cindex @code{main} and the exit status\n-GNU CC automatically arranges for @code{main} to return 1 by default if\n+GCC automatically arranges for @code{main} to return 1 by default if\n you fail to specify an explicit return value.  This will be interpreted\n by VMS as a status code indicating a normal successful completion.\n-Version 1 of GNU CC did not provide this default.\n+Version 1 of GCC did not provide this default.\n \n-GNU CC on VMS works only with the GNU assembler, GAS.  You need version\n+GCC on VMS works only with the GNU assembler, GAS.  You need version\n 1.37 or later of GAS in order to produce value debugging information for\n the VMS debugger.  Use the ordinary VMS linker with the object files\n produced by GAS.\n \n @cindex shared VMS run time system\n @cindex @file{VAXCRTL}\n-Under previous versions of GNU CC, the generated code would occasionally\n+Under previous versions of GCC, the generated code would occasionally\n give strange results when linked to the sharable @file{VAXCRTL} library.\n Now this should work.\n \n@@ -2957,10 +2961,10 @@ placed in writable storage.\n Although the VMS linker does distinguish between upper and lower case\n letters in global symbols, most VMS compilers convert all such symbols\n into upper case and most run-time library routines also have upper case\n-names.  To be able to reliably call such routines, GNU CC (by means of\n+names.  To be able to reliably call such routines, GCC (by means of\n the assembler GAS) converts global symbols into upper case like other\n VMS compilers.  However, since the usual practice in C is to distinguish\n-case, GNU CC (via GAS) tries to preserve usual C behavior by augmenting\n+case, GCC (via GAS) tries to preserve usual C behavior by augmenting\n each name that is not all lower case.  This means truncating the name\n to at most 23 characters and then adding more characters at the end\n which encode the case pattern of those 23.   Names which contain at\n@@ -3014,16 +3018,16 @@ number of changes to your source code.\n \n @ifset INTERNALS\n @node Portability\n-@chapter GNU CC and Portability\n+@chapter GCC and Portability\n @cindex portability\n-@cindex GNU CC and portability\n+@cindex GCC and portability\n \n-The main goal of GNU CC was to make a good, fast compiler for machines in\n+The main goal of GCC was to make a good, fast compiler for machines in\n the class that the GNU system aims to run on: 32-bit machines that address\n 8-bit bytes and have several general registers.  Elegance, theoretical\n power and simplicity are only secondary.\n \n-GNU CC gets most of the information about the target machine from a machine\n+GCC gets most of the information about the target machine from a machine\n description which gives an algebraic formula for each of the machine's\n instructions.  This is a very clean way to describe the target.  But when\n the compiler needs information that is difficult to express in this\n@@ -3034,7 +3038,7 @@ on the compiler; it was not of interest for its own sake.\n @cindex endianness\n @cindex autoincrement addressing, availability\n @findex abort\n-GNU CC does not contain machine dependent code, but it does contain code\n+GCC does not contain machine dependent code, but it does contain code\n that depends on machine parameters such as endianness (whether the most\n significant byte has the highest or lowest address of the bytes in a word)\n and the availability of autoincrement addressing.  In the RTL-generation\n@@ -3050,13 +3054,13 @@ affect only the target machines that need them.\n \n @ifset INTERNALS\n @node Interface\n-@chapter Interfacing to GNU CC Output\n-@cindex interfacing to GNU CC output\n+@chapter Interfacing to GCC Output\n+@cindex interfacing to GCC output\n @cindex run-time conventions\n @cindex function call conventions\n @cindex conventions, run-time\n \n-GNU CC is normally configured to use the same function calling convention\n+GCC is normally configured to use the same function calling convention\n normally in use on the target system.  This is done with the\n machine-description macros described (@pxref{Target Macros}).\n \n@@ -3065,43 +3069,43 @@ machine-description macros described (@pxref{Target Macros}).\n @cindex returning structures and unions\n However, returning of structure and union values is done differently on\n some target machines.  As a result, functions compiled with PCC\n-returning such types cannot be called from code compiled with GNU CC,\n+returning such types cannot be called from code compiled with GCC,\n and vice versa.  This does not cause trouble often because few Unix\n library routines return structures or unions.\n \n-GNU CC code returns structures and unions that are 1, 2, 4 or 8 bytes\n+GCC code returns structures and unions that are 1, 2, 4 or 8 bytes\n long in the same registers used for @code{int} or @code{double} return\n-values.  (GNU CC typically allocates variables of such types in\n+values.  (GCC typically allocates variables of such types in\n registers also.)  Structures and unions of other sizes are returned by\n storing them into an address passed by the caller (usually in a\n register).  The machine-description macros @code{STRUCT_VALUE} and\n-@code{STRUCT_INCOMING_VALUE} tell GNU CC where to pass this address.\n+@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n \n By contrast, PCC on most target machines returns structures and unions\n of any size by copying the data into an area of static storage, and then\n returning the address of that storage as if it were a pointer value.\n The caller must copy the data from that memory area to the place where\n-the value is wanted.  This is slower than the method used by GNU CC, and\n+the value is wanted.  This is slower than the method used by GCC, and\n fails to be reentrant.\n \n On some target machines, such as RISC machines and the 80386, the\n standard system convention is to pass to the subroutine the address of\n-where to return the value.  On these machines, GNU CC has been\n+where to return the value.  On these machines, GCC has been\n configured to be compatible with the standard compiler, when this method\n is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.\n \n @cindex argument passing\n @cindex passing arguments\n-GNU CC uses the system's standard convention for passing arguments.  On\n+GCC uses the system's standard convention for passing arguments.  On\n some machines, the first few arguments are passed in registers; in\n others, all are passed on the stack.  It would be possible to use\n registers for argument passing on any machine, and this would probably\n result in a significant speedup.  But the result would be complete\n incompatibility with code that follows the standard convention.  So this\n-change is practical only if you are switching to GNU CC as the sole C\n+change is practical only if you are switching to GCC as the sole C\n compiler for the system.  We may implement register argument passing on\n certain machines once we have a complete GNU system so that we can\n-compile the libraries with GNU CC.\n+compile the libraries with GCC.\n \n On some machines (particularly the Sparc), certain types of arguments\n are passed ``by invisible reference''.  This means that the value is\n@@ -3111,9 +3115,9 @@ the subroutine.\n @cindex @code{longjmp} and automatic variables\n If you use @code{longjmp}, beware of automatic variables.  ANSI C says that\n automatic variables that are not declared @code{volatile} have undefined\n-values after a @code{longjmp}.  And this is all GNU CC promises to do,\n+values after a @code{longjmp}.  And this is all GCC promises to do,\n because it is very difficult to restore register variables correctly, and\n-one of GNU CC's features is that it can put variables in registers without\n+one of GCC's features is that it can put variables in registers without\n your asking it to.\n \n If you want a variable to be unaltered by @code{longjmp}, and you don't\n@@ -3132,7 +3136,7 @@ go in a register:\n \n @cindex arithmetic libraries\n @cindex math libraries\n-Code compiled with GNU CC may call certain library routines.  Most of\n+Code compiled with GCC may call certain library routines.  Most of\n them handle arithmetic for which there are no instructions.  This\n includes multiply and divide on some machines, and floating point\n operations on any machine for which floating point support is disabled\n@@ -3141,7 +3145,7 @@ with @samp{-msoft-float}.  Some standard parts of the C library, such as\n function call interface is used for calling the library routines.\n \n These library routines should be defined in the library @file{libgcc.a},\n-which GNU CC automatically searches whenever it links a program.  On\n+which GCC automatically searches whenever it links a program.  On\n machines that have multiply and divide instructions, if hardware\n floating point is in use, normally @file{libgcc.a} is not needed, but it\n is searched just in case.\n@@ -3150,7 +3154,7 @@ Each arithmetic function is defined in @file{libgcc1.c} to use the\n corresponding C arithmetic operator.  As long as the file is compiled\n with another C compiler, which supports all the C arithmetic operators,\n this file will work portably.  However, @file{libgcc1.c} does not work if\n-compiled with GNU CC, because each arithmetic function would compile\n+compiled with GCC, because each arithmetic function would compile\n into a call to itself!\n @end ifset\n \n@@ -3305,7 +3309,7 @@ function must meet certain criteria, currently related to the size of\n the function and the types and number of parameters it has.  Note that\n this function may contain loops, recursive calls to itself\n (tail-recursive functions can be inlined!), gotos, in short, all\n-constructs supported by GNU CC.  The file @file{integrate.c} contains\n+constructs supported by GCC.  The file @file{integrate.c} contains\n the code to save a function's rtl for later inlining and to inline that\n rtl when the function is called.  The header file @file{integrate.h}\n is also used for this purpose.\n@@ -3665,7 +3669,7 @@ definitions that describe the machine and system on which the compiler\n is running, unlike the definitions in @file{@var{machine}.h}, which\n describe the machine for which the compiler is producing output.  Most\n of the values in @file{xm-@var{machine}.h} are actually the same on all\n-machines that GNU CC runs on, so large parts of all configuration files\n+machines that GCC runs on, so large parts of all configuration files\n are identical.  But there are some macros that vary:\n \n @table @code\n@@ -3690,7 +3694,7 @@ exits without serious errors.\n @findex HOST_WORDS_BIG_ENDIAN\n @item HOST_WORDS_BIG_ENDIAN\n Defined if the host machine stores words of multi-word values in\n-big-endian order.  (GNU CC does not depend on the host byte ordering\n+big-endian order.  (GCC does not depend on the host byte ordering\n within a word.)\n \n @findex HOST_FLOAT_WORDS_BIG_ENDIAN\n@@ -3769,7 +3773,7 @@ If you do define this macro, you should probably do it as follows:\n @end example\n \n @noindent\n-so that when the compiler is compiled with GNU CC it uses the more\n+so that when the compiler is compiled with GCC it uses the more\n efficient built-in @code{alloca} function.\n \n @item FUNCTION_CONVERSION_BUG\n@@ -3781,7 +3785,7 @@ used in an expression.\n @findex MULTIBYTE_CHARS\n @item MULTIBYTE_CHARS\n Define this macro to enable support for multibyte characters in the\n-input to GNU CC.  This requires that the host system support the ANSI C\n+input to GCC.  This requires that the host system support the ANSI C\n library functions for converting multibyte characters to wide\n characters.\n \n@@ -3812,15 +3816,15 @@ Therefore, if you define @code{sys_siglist}, you should also define\n Define this to be 1 if you know that the host compiler supports\n prototypes, even if it doesn't define __STDC__, or define\n it to be 0 if you do not want any prototypes used in compiling\n-GNU CC.  If @samp{USE_PROTOTYPES} is not defined, it will be\n+GCC.  If @samp{USE_PROTOTYPES} is not defined, it will be\n determined automatically whether your compiler supports\n prototypes by checking if @samp{__STDC__} is defined.\n \n @findex NO_MD_PROTOTYPES\n @item NO_MD_PROTOTYPES\n Define this if you wish suppression of prototypes generated from\n the machine description file, but to use other prototypes within\n-GNU CC.  If @samp{USE_PROTOTYPES} is defined to be 0, or the\n+GCC.  If @samp{USE_PROTOTYPES} is defined to be 0, or the\n host compiler does not support prototypes, this macro has no\n effect.\n \n@@ -3845,20 +3849,20 @@ the colon character\n @item DIR_SEPARATOR\n If your system uses some character other than slash to separate\n directory names within a file specification, define this macro to be a C\n-character constant specifying that character.  When GNU CC displays file\n-names, the character you specify will be used.  GNU CC will test for\n+character constant specifying that character.  When GCC displays file\n+names, the character you specify will be used.  GCC will test for\n both slash and the character you specify when parsing filenames.\n \n @findex OBJECT_SUFFIX\n @item OBJECT_SUFFIX\n Define this macro to be a C string representing the suffix for object\n-files on your machine.  If you do not define this macro, GNU CC will use\n+files on your machine.  If you do not define this macro, GCC will use\n @samp{.o} as the suffix for object files.\n \n @findex EXECUTABLE_SUFFIX\n @item EXECUTABLE_SUFFIX\n Define this macro to be a C string representing the suffix for executable\n-files on your machine.  If you do not define this macro, GNU CC will use\n+files on your machine.  If you do not define this macro, GCC will use\n the null string as the suffix for object files.\n \n @findex COLLECT_EXPORT_LIST\n@@ -3874,14 +3878,14 @@ lists.\n @findex bcmp\n In addition, configuration files for system V define @code{bcopy},\n @code{bzero} and @code{bcmp} as aliases.  Some files define @code{alloca}\n-as a macro when compiled with GNU CC, in order to take advantage of the\n-benefit of GNU CC's built-in @code{alloca}.\n+as a macro when compiled with GCC, in order to take advantage of the\n+benefit of GCC's built-in @code{alloca}.\n \n @node Fragments\n @chapter Makefile Fragments\n @cindex makefile fragment\n \n-When you configure GNU CC using the @file{configure} script\n+When you configure GCC using the @file{configure} script\n (@pxref{Installation}), it will construct the file @file{Makefile} from\n the template file @file{Makefile.in}.  When it does this, it will\n incorporate makefile fragment files from the @file{config} directory,\n@@ -3939,11 +3943,11 @@ in @code{EXTRA-PARTS}.\n \n @findex MULTILIB_OPTIONS\n @item MULTILIB_OPTIONS\n-For some targets, invoking GNU CC in different ways produces objects\n-that can not be linked together.  For example, for some targets GNU CC\n+For some targets, invoking GCC in different ways produces objects\n+that can not be linked together.  For example, for some targets GCC\n produces both big and little endian code.  For these targets, you must\n arrange for multiple versions of @file{libgcc.a} to be compiled, one for\n-each set of incompatible options.  When GNU CC invokes the linker, it\n+each set of incompatible options.  When GCC invokes the linker, it\n arranges to link in the right version of @file{libgcc.a}, based on\n the command line options used.\n \n@@ -3976,7 +3980,7 @@ you desire a different set of directory names.\n @findex MULTILIB_MATCHES\n @item MULTILIB_MATCHES\n Sometimes the same option may be written in two different ways.  If an\n-option is listed in @code{MULTILIB_OPTIONS}, GNU CC needs to know about\n+option is listed in @code{MULTILIB_OPTIONS}, GCC needs to know about\n any synonyms.  In that case, set @code{MULTILIB_MATCHES} to a list of\n items of the form @samp{option=option} to describe all relevant\n synonyms.  For example, @samp{m68000=mc68000 m68020=mc68020}.\n@@ -4070,7 +4074,7 @@ difference than others.  For example, maintaining a separate version of\n a program contributes very little; maintaining the standard version of a\n program for the whole community contributes much.  Easy new ports\n contribute little, since someone else would surely do them; difficult\n-ports such as adding a new CPU to the GNU C compiler contribute more;\n+ports such as adding a new CPU to the GNU Compiler Collection contribute more;\n major new features or packages contribute the most.\n \n By establishing the idea that supporting further development is ``the\n@@ -4520,7 +4524,7 @@ the ``copyright'' line and a pointer to where the full notice is found.\n \n @smallexample\n @var{one line to give the program's name and a brief idea of what it does.}\n-Copyright (C) 19@var{yy}  @var{name of author}\n+Copyright (C) @var{yyyy}  @var{name of author}\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -4543,7 +4547,7 @@ If the program is interactive, make it output a short notice like this\n when it starts in an interactive mode:\n \n @smallexample\n-Gnomovision version 69, Copyright (C) 19@var{yy} @var{name of author}\n+Gnomovision version 69, Copyright (C) @var{yyyy} @var{name of author}\n Gnomovision comes with ABSOLUTELY NO WARRANTY; for details\n type `show w'.\n This is free software, and you are welcome to redistribute it\n@@ -4575,11 +4579,11 @@ library.  If this is what you want to do, use the GNU Library General\n Public License instead of this License.\n \n @node Contributors\n-@unnumbered Contributors to GNU CC\n+@unnumbered Contributors to GCC\n @cindex contributors\n \n In addition to Richard Stallman, several people have written parts\n-of GNU CC.\n+of GCC.\n \n @itemize @bullet\n @item\n@@ -4631,13 +4635,13 @@ Randy Smith finished the Sun FPA support.\n Robert Brown implemented the support for Encore 32000 systems.\n \n @item\n-David Kashtan of SRI adapted GNU CC to VMS.\n+David Kashtan of SRI adapted GCC to VMS.\n \n @item\n Alex Crain provided changes for the 3b1.\n \n @item\n-Greg Satz and Chris Hanson assisted in making GNU CC work on HP-UX for\n+Greg Satz and Chris Hanson assisted in making GCC work on HP-UX for\n the 9000 series 300.\n \n @item\n@@ -4654,16 +4658,16 @@ Dario Dariol contributed the four varieties of sample programs\n that print a copy of their source.\n \n @item\n-Alain Lichnewsky ported GNU CC to the Mips cpu.\n+Alain Lichnewsky ported GCC to the Mips cpu.\n \n @item\n-Devon Bowen, Dale Wiles and Kevin Zachmann ported GNU CC to the Tahoe.\n+Devon Bowen, Dale Wiles and Kevin Zachmann ported GCC to the Tahoe.\n \n @item\n Jonathan Stone wrote the machine description for the Pyramid computer.\n \n @item\n-Gary Miller ported GNU CC to Charles River Data Systems machines.\n+Gary Miller ported GCC to Charles River Data Systems machines.\n \n @item\n Richard Kenner of the New York University Ultracomputer Research"}]}