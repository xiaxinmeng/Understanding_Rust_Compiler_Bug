{"sha": "3807f286eff75cb0e4af924c3ee9e02add23e12e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwN2YyODZlZmY3NWNiMGU0YWY5MjRjM2VlOWUwMmFkZDIzZTEyZQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2020-05-07T17:52:52Z"}, "committer": {"name": "Jeff Law", "email": "law@torsion.usersys.redhat.com", "date": "2020-05-07T17:52:52Z"}, "message": "Check alignment for no peeling gaps handling\n\n        * gcc/tree-vect-stmts.c (vectorizable_load): Check alignment to avoid\n        redundant half vector handlings for no peeling gaps.", "tree": {"sha": "9bc8631ea4e243ea87cdb0fcc92798473a8ddc35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc8631ea4e243ea87cdb0fcc92798473a8ddc35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3807f286eff75cb0e4af924c3ee9e02add23e12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3807f286eff75cb0e4af924c3ee9e02add23e12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3807f286eff75cb0e4af924c3ee9e02add23e12e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3807f286eff75cb0e4af924c3ee9e02add23e12e/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41081235df0e32d9bfc3fe4169af4f1af4b823af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41081235df0e32d9bfc3fe4169af4f1af4b823af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41081235df0e32d9bfc3fe4169af4f1af4b823af"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "986da64ff8d289e547f643b3ccbacce7eeb04608", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3807f286eff75cb0e4af924c3ee9e02add23e12e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3807f286eff75cb0e4af924c3ee9e02add23e12e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3807f286eff75cb0e4af924c3ee9e02add23e12e", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Check alignment to avoid\n+\tredundant half vector handlings for no peeling gaps.\n+\n 2020-05-07  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* tree-ssa-operands.c (operands_scanner): New class."}, {"sha": "2349d3172063a3716946d0ac99eb38e03a89c282", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3807f286eff75cb0e4af924c3ee9e02add23e12e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3807f286eff75cb0e4af924c3ee9e02add23e12e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3807f286eff75cb0e4af924c3ee9e02add23e12e", "patch": "@@ -9628,18 +9628,23 @@ vectorizable_load (vec_info *vinfo,\n \t\t      {\n \t\t\ttree ltype = vectype;\n \t\t\ttree new_vtype = NULL_TREE;\n+\t\t\tunsigned HOST_WIDE_INT gap\n+\t\t\t  = DR_GROUP_GAP (first_stmt_info);\n+\t\t\tunsigned int vect_align\n+\t\t\t  = vect_known_alignment_in_bytes (first_dr_info);\n+\t\t\tunsigned int scalar_dr_size\n+\t\t\t  = vect_get_scalar_dr_size (first_dr_info);\n \t\t\t/* If there's no peeling for gaps but we have a gap\n \t\t\t   with slp loads then load the lower half of the\n \t\t\t   vector only.  See get_group_load_store_type for\n \t\t\t   when we apply this optimization.  */\n \t\t\tif (slp\n \t\t\t    && loop_vinfo\n \t\t\t    && !LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n-\t\t\t    && DR_GROUP_GAP (first_stmt_info) != 0\n-\t\t\t    && known_eq (nunits,\n-\t\t\t\t\t (group_size\n-\t\t\t\t\t  - DR_GROUP_GAP (first_stmt_info)) * 2)\n-\t\t\t    && known_eq (nunits, group_size))\n+\t\t\t    && gap != 0\n+\t\t\t    && known_eq (nunits, (group_size - gap) * 2)\n+\t\t\t    && known_eq (nunits, group_size)\n+\t\t\t    && gap >= (vect_align / scalar_dr_size))\n \t\t\t  {\n \t\t\t    tree half_vtype;\n \t\t\t    new_vtype\n@@ -9654,10 +9659,9 @@ vectorizable_load (vec_info *vinfo,\n \t\t\tif (ltype != vectype\n \t\t\t    && memory_access_type == VMAT_CONTIGUOUS_REVERSE)\n \t\t\t  {\n-\t\t\t    unsigned HOST_WIDE_INT gap\n-\t\t\t      = DR_GROUP_GAP (first_stmt_info);\n-\t\t\t    gap *= tree_to_uhwi (TYPE_SIZE_UNIT (elem_type));\n-\t\t\t    tree gapcst = build_int_cst (ref_type, gap);\n+\t\t\t    unsigned HOST_WIDE_INT gap_offset\n+\t\t\t      = gap * tree_to_uhwi (TYPE_SIZE_UNIT (elem_type));\n+\t\t\t    tree gapcst = build_int_cst (ref_type, gap_offset);\n \t\t\t    offset = size_binop (PLUS_EXPR, offset, gapcst);\n \t\t\t  }\n \t\t\tdata_ref"}]}