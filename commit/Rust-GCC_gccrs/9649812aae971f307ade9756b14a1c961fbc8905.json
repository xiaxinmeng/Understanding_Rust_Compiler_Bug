{"sha": "9649812aae971f307ade9756b14a1c961fbc8905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0OTgxMmFhZTk3MWYzMDdhZGU5NzU2YjE0YTFjOTYxZmJjODkwNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-09T03:35:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-09T03:35:31Z"}, "message": "langhooks-def.h (lhd_register_builtin_type): New function.\n\n\t* langhooks-def.h (lhd_register_builtin_type): New function.\n\t(LANG_HOOKS_REGISTER_BUILTIN_TYPE): New macro.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n\t* langhooks.h (lang_hooks_for_types): Add register_builtin_type.\n\t* langhooks.c (lhd_register_builtin_type): New function.\n\t* c-common.h (c_register_builtin_type): Declare.\n\t* c-common.c (c_register_builtin_type): New function.\n\t* c-lang.c (LANG_HOOKS_REGISTER_BUILTIN_TYPE): Define to\n\tc_register_builtin_type.\n\t* config/ia64/hpux.h (TARGET_OS_CPP_BUILTINS): Remove __fpreg,\n\t__float80, and __float128 macros.\n\t* config/ia64/ia64.c (ia64_init_builtins): Create __fpreg,\n\t__float80, and __float128 types.\n\n\t* cp-lang.c (LANG_HOOKS_REGISTER_BUILTIN_TYPE): Define to\n\tc_register_builtin_type.\n\n\t* gcc.dg/ia64-types1.c: New test.\n\t* gcc.dg/ia64-types2.c: Likewise.\n\nFrom-SVN: r71227", "tree": {"sha": "08059530952c2e25ede239ac8522a8acb81e71ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08059530952c2e25ede239ac8522a8acb81e71ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9649812aae971f307ade9756b14a1c961fbc8905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649812aae971f307ade9756b14a1c961fbc8905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9649812aae971f307ade9756b14a1c961fbc8905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649812aae971f307ade9756b14a1c961fbc8905/comments", "author": null, "committer": null, "parents": [{"sha": "11bf0eb0c73c713a4093fb456839c7dee7b8a722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11bf0eb0c73c713a4093fb456839c7dee7b8a722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11bf0eb0c73c713a4093fb456839c7dee7b8a722"}], "stats": {"total": 172, "additions": 166, "deletions": 6}, "files": [{"sha": "b16092ff3032c8026b9a1907d3e39523194a7403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -1,3 +1,19 @@\n+2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* langhooks-def.h (lhd_register_builtin_type): New function.\n+\t(LANG_HOOKS_REGISTER_BUILTIN_TYPE): New macro.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n+\t* langhooks.h (lang_hooks_for_types): Add register_builtin_type.\n+\t* langhooks.c (lhd_register_builtin_type): New function.\n+\t* c-common.h (c_register_builtin_type): Declare.\n+\t* c-common.c (c_register_builtin_type): New function.\n+\t* c-lang.c (LANG_HOOKS_REGISTER_BUILTIN_TYPE): Define to\n+\tc_register_builtin_type.\n+\t* config/ia64/hpux.h (TARGET_OS_CPP_BUILTINS): Remove __fpreg,\n+\t__float80, and __float128 macros.\n+\t* config/ia64/ia64.c (ia64_init_builtins): Create __fpreg,\n+\t__float80, and __float128 types.\n+\n 2003-09-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtin-types.def"}, {"sha": "4e637490430d08515afcd5acaeb68189a3d0f8bc", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -2005,6 +2005,21 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n \n   return type;\n }\n+\n+/* The C version of the register_builtin_type langhook.  */\n+\n+void\n+c_register_builtin_type (tree type, const char* name)\n+{\n+  tree decl;\n+\n+  decl = build_decl (TYPE_DECL, get_identifier (name), type);\n+  DECL_ARTIFICIAL (decl) = 1;\n+  if (!TYPE_NAME (type))\n+    TYPE_NAME (type) = decl;\n+  pushdecl (decl);\n+}\n+\n \f\n /* Return the minimum number of bits needed to represent VALUE in a\n    signed or unsigned type, UNSIGNEDP says which.  */"}, {"sha": "6ce5661c44a54f9ceb5c1790b1e53995a9410211", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -948,6 +948,7 @@ extern bool c_common_init (void);\n extern void c_common_finish (void);\n extern void c_common_parse_file (int);\n extern HOST_WIDE_INT c_common_get_alias_set (tree);\n+extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (tree);\n extern int self_promoting_args_p (tree);\n extern tree strip_array_types (tree);"}, {"sha": "a6a4ede30ed20211d17c5d26b75dd229ab58b63f", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -133,6 +133,8 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR c_incomplete_type_error\n #undef LANG_HOOKS_TYPE_PROMOTES_TO\n #define LANG_HOOKS_TYPE_PROMOTES_TO c_type_promotes_to\n+#undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n+#define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n \n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS c_write_global_declarations"}, {"sha": "b2b854b3fcb46bf5532caabd3fc2ef32e5e0e26c", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -26,9 +26,6 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_VERSION fprintf (stderr, \" (IA-64) HP-UX\");\n \n /* Target OS builtins.  */\n-/* -D__fpreg=long double is needed to compensate for\n-   the lack of __fpreg which is a primitive type in\n-   HP C but does not exist in GNU C.  */\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n \tbuiltin_assert(\"system=hpux\");\t\t\t\\\n@@ -39,9 +36,6 @@ do {\t\t\t\t\t\t\t\\\n \tbuiltin_define(\"__IA64__\");\t\t\t\\\n \tbuiltin_define(\"_LONGLONG\");\t\t\t\\\n \tbuiltin_define(\"_UINT128_T\");\t\t\t\\\n-\tbuiltin_define(\"__fpreg=long double\");\t\t\\\n-\tbuiltin_define(\"__float80=long double\");\t\\\n-\tbuiltin_define(\"__float128=long double\");\t\\\n \tif (c_dialect_cxx () || !flag_iso)\t\t\\\n \t  {\t\t\t\t\t\t\\\n \t    builtin_define(\"_HPUX_SOURCE\");\t\t\\"}, {"sha": "a6e5ff60643076782503734b9846f4dfb5c1a5f3", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -7694,6 +7694,48 @@ ia64_init_builtins (void)\n   tree void_ftype_pdi\n     = build_function_type_list (void_type_node, pdi_type_node, NULL_TREE);\n \n+  tree fpreg_type;\n+\n+  /* The __fpreg type.  */\n+  fpreg_type = make_node (REAL_TYPE);\n+  /* ??? Once the IA64 back end supports both 80-bit and 128-bit\n+     floating types, this type should have XFmode, not TFmode.\n+     TYPE_PRECISION should be 80 bits, not 128.  And, the back end\n+     should know to load/save __fpreg variables using the ldf.fill and\n+     stf.spill instructions.  */\n+  TYPE_PRECISION (fpreg_type) = 128;\n+  layout_type (fpreg_type);\n+  (*lang_hooks.types.register_builtin_type) (fpreg_type, \"__fpreg\");\n+\n+  /* The __float80 type.  */\n+  if (INTEL_EXTENDED_IEEE_FORMAT)\n+    /* The __float80 type is a synonym for \"long double\".  */\n+    (*lang_hooks.types.register_builtin_type) (long_double_type_node,\n+\t\t\t\t\t       \"__float80\");\n+  else\n+    {\n+      tree float80_type = make_node (REAL_TYPE);\n+      /* ??? Once the IA64 back end supports both 80-bit and 128-bit\n+\t floating types, this type should have XFmode, not TFmode.\n+\t TYPE_PRECISION should be 80 bits, not 128.  */\n+      TYPE_PRECISION (float80_type) = 128;\n+      layout_type (float80_type);\n+      (*lang_hooks.types.register_builtin_type) (float80_type, \"__float80\");\n+    }\n+\n+  /* The __float128 type.  */\n+  if (INTEL_EXTENDED_IEEE_FORMAT)\n+    {\n+      tree float128_type = make_node (REAL_TYPE);\n+      TYPE_PRECISION (float128_type) = 128;\n+      layout_type (float128_type);\n+      (*lang_hooks.types.register_builtin_type) (float128_type, \"__float128\");\n+    }\n+  else\n+    /* This is a synonym for \"long double\".  */\n+    (*lang_hooks.types.register_builtin_type) (long_double_type_node,\n+\t\t\t\t\t       \"__float128\");\n+\n #define def_builtin(name, type, code) \\\n   builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL_TREE)\n "}, {"sha": "2fed9f4b99d7baf55799d101a6373263237c6427", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -1,5 +1,8 @@\n 2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-lang.c (LANG_HOOKS_REGISTER_BUILTIN_TYPE): Define to\n+\tc_register_builtin_type.\n+\n \tPR c++/11786\n \t* decl2.c (add_function): Do not complain about seeing the same\n \tnon-function twice."}, {"sha": "527054c991f8760b36f67f1ca8178ce9e5c84c16", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -184,6 +184,8 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR cxx_incomplete_type_error\n #undef LANG_HOOKS_TYPE_PROMOTES_TO\n #define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n+#undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n+#define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "5089fdaba116a6160d3e4f79b19db4242394f248", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -61,6 +61,7 @@ extern bool lhd_can_use_bit_fields_p (void);\n extern bool lhd_warn_unused_global_decl (tree);\n extern void lhd_incomplete_type_error (tree, tree);\n extern tree lhd_type_promotes_to (tree);\n+extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (tree);\n extern tree lhd_expr_size (tree);\n extern bool lhd_decl_uninit (tree);\n@@ -213,6 +214,7 @@ extern int lhd_tree_dump_type_quals (tree);\n #define LANG_HOOKS_MAKE_TYPE make_node\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n+#define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -222,6 +224,7 @@ extern int lhd_tree_dump_type_quals (tree);\n   LANG_HOOKS_SIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, \\\n   LANG_HOOKS_TYPE_PROMOTES_TO, \\\n+  LANG_HOOKS_REGISTER_BUILTIN_TYPE, \\\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR \\\n }\n "}, {"sha": "7a003bbcc00d88440a953cc693a8431c3fa09e61", "filename": "gcc/langhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -208,6 +208,13 @@ lhd_type_promotes_to (tree type ATTRIBUTE_UNUSED)\n   abort ();\n }\n \n+/* Registration of machine- or os-specific builtin types.  */\n+void\n+lhd_register_builtin_type (tree type ATTRIBUTE_UNUSED, \n+\t\t\t   const char* name ATTRIBUTE_UNUSED)\n+{\n+}\n+\n /* Invalid use of an incomplete type.  */\n void\n lhd_incomplete_type_error (tree value ATTRIBUTE_UNUSED, tree type)"}, {"sha": "0d86478fc6476dfbabc9299d3236a14950a35fb8", "filename": "gcc/langhooks.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -136,6 +136,15 @@ struct lang_hooks_for_types\n      arguments.  The default hook aborts.  */\n   tree (*type_promotes_to) (tree);\n \n+  /* Register TYPE as a builtin type with the indicated NAME.  The\n+     TYPE is placed in the outermost lexical scope.  The semantics\n+     should be analogous to:\n+\n+       typedef TYPE NAME;\n+\n+     in C.  The default hook ignores the declaration.  */\n+  void (*register_builtin_type) (tree, const char *);\n+\n   /* This routine is called in tree.c to print an error message for\n      invalid use of an incomplete type.  VALUE is the expression that\n      was used (or 0 if that isn't known) and TYPE is the type that was"}, {"sha": "bc34f5b182a676df5fa83e278897ae2b0f8e4810", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -1,3 +1,8 @@\n+2003-09-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/ia64-types1.c: New test.\n+\t* gcc.dg/ia64-types2.c: Likewise.\n+\n 2003-09-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-1.c: Add more _Complex tests."}, {"sha": "521588b47bd1b4f1b13027f7d285d7c8929edf29", "filename": "gcc/testsuite/gcc.dg/ia64-types1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types1.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile { target ia64*-hp-hpux* } } */\n+\n+/* Test that __fpreg is distinct from any other builtin type.  */\n+\n+extern float fr1; /* { dg-error \"\" } */\n+extern __fpreg fr1; /* { dg-error \"\" } */\n+extern double fr2; /* { dg-error \"\" } */\n+extern __fpreg fr2; /* { dg-error \"\" } */\n+extern long double fr3; /* { dg-error \"\" } */\n+extern __fpreg fr3; /* { dg-error \"\" } */\n+extern __float80 fr4; /* { dg-error \"\" } */\n+extern __fpreg fr4; /* { dg-error \"\" } */\n+extern __float128 fr5; /* { dg-error \"\" } */\n+extern __fpreg fr5; /* { dg-error \"\" } */\n+\n+/* Test that __float80 is distinct from any other builtin type.  */\n+\n+extern float f801; /* { dg-error \"\" } */\n+extern __float80 f801; /* { dg-error \"\" } */\n+extern double f802; /* { dg-error \"\" } */\n+extern __float80 f802; /* { dg-error \"\" } */\n+extern long double f803; /* { dg-error \"\" } */\n+extern __float80 f803; /* { dg-error \"\" } */\n+extern __fpreg f804;  /* { dg-error \"\" } */\n+extern __float80 f804; /* { dg-error \"\" } */\n+extern __float128 f805; /* { dg-error \"\" } */\n+extern __float80 f805; /* { dg-error \"\" } */\n+\n+/* Test that __float128 is distinct from any other builtin type --\n+   except \"long double\", for which it is a synonym.  */\n+\n+extern float f1281; /* { dg-error \"\" } */\n+extern __float128 f1281; /* { dg-error \"\" } */\n+extern double f1282; /* { dg-error \"\" } */\n+extern __float128 f1282; /* { dg-error \"\" } */\n+extern long double f1283;\n+extern __float128 f1283;\n+extern __fpreg f1284; /* { dg-error \"\" } */\n+extern __float128 f1284; /* { dg-error \"\" } */\n+extern __float80 f1285; /* { dg-error \"\" } */\n+extern __float128 f1285; /* { dg-error \"\" } */"}, {"sha": "30e4ddbf87c44f1f52f1a27c4a4d8b1cdb40fa4e", "filename": "gcc/testsuite/gcc.dg/ia64-types2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649812aae971f307ade9756b14a1c961fbc8905/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-types2.c?ref=9649812aae971f307ade9756b14a1c961fbc8905", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target ia64*-hp-hpux* } } */\n+/* { dg-options } */\n+\n+/* Test that the sizes and alignments of the extra floating-point\n+   types are correct.  */\n+\n+int main () {\n+  if (sizeof (__fpreg) != 16)\n+    return 1;\n+  if (__alignof__ (__fpreg) != 16)\n+    return 2;\n+\n+  if (sizeof (__float80) != 16)\n+    return 3;\n+  if (__alignof__ (__float80) != 16)\n+    return 4;\n+\n+  return 0;\n+}\n+"}]}