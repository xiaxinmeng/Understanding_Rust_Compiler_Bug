{"sha": "c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ4Y2I0Mzk5NDc3ZDUzZmYzYWY3YzU4MDlhYTFlOGEwZGMwNWJlOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-28T02:16:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-28T02:16:57Z"}, "message": "builtin-choose-expr-2.c, [...]: New tests.\n\n\t* gcc.dg/builtin-choose-expr-2.c, gcc.dg/cast-1.c,\n\tgcc.dg/cast-2.c, gcc.dg/cast-3.c, gcc.dg/format/opt-1.c,\n\tgcc.dg/format/opt-2.c, gcc.dg/format/opt-3.c,\n\tgcc.dg/format/opt-4.c, gcc.dg/format/opt-5.c,\n\tgcc.dg/format/opt-6.c, gcc.dg/pointer-arith-5.c,\n\tgcc.dg/pointer-arith-6.c, gcc.dg/pointer-arith-7.c,\n\tgcc.dg/pointer-arith-8.c: New tests.\n\nFrom-SVN: r91405", "tree": {"sha": "87cb5c2422aa38c268152d7f12a18fc52fcf83a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87cb5c2422aa38c268152d7f12a18fc52fcf83a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69b7944b0dc051434b07f7e5614c20ba3806bc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b7944b0dc051434b07f7e5614c20ba3806bc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b7944b0dc051434b07f7e5614c20ba3806bc64"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "bb87d09b5f395bcb367fc614b0b78b8b9287964b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -1,3 +1,13 @@\n+2004-11-28  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/builtin-choose-expr-2.c, gcc.dg/cast-1.c,\n+\tgcc.dg/cast-2.c, gcc.dg/cast-3.c, gcc.dg/format/opt-1.c,\n+\tgcc.dg/format/opt-2.c, gcc.dg/format/opt-3.c,\n+\tgcc.dg/format/opt-4.c, gcc.dg/format/opt-5.c,\n+\tgcc.dg/format/opt-6.c, gcc.dg/pointer-arith-5.c,\n+\tgcc.dg/pointer-arith-6.c, gcc.dg/pointer-arith-7.c,\n+\tgcc.dg/pointer-arith-8.c: New tests.\n+\n 2004-11-27  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/18364"}, {"sha": "2551fdb4baaca70426391a8403c70496dd1fb8bf", "filename": "gcc/testsuite/gcc.dg/builtin-choose-expr-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-choose-expr-2.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,12 @@\n+/* Test diagnostic for invalid use of __builtin_choose_expr.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int a, b, c, d;\n+\n+void\n+f (void)\n+{\n+  a = __builtin_choose_expr (b, c, d); /* { dg-error \"error: first argument to '__builtin_choose_expr' not a constant\" } */\n+}"}, {"sha": "e3d79db6be2054882d0de6874be6e18d49c27938", "filename": "gcc/testsuite/gcc.dg/cast-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-1.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,41 @@\n+/* Test diagnostics for bad or doubtful casts.  Test with no special\n+   options.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+struct s { int a; } sv;\n+union u { int a; } uv;\n+int i;\n+long l;\n+char c;\n+void *p;\n+float fv;\n+\n+void\n+f (void)\n+{\n+  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n+  (struct s) sv;\n+  (union u) uv;\n+  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n+  (union u) i;\n+  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (void) sv;\n+  (const void) uv;\n+  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) (char) 1;\n+  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) (void *) 1;\n+}"}, {"sha": "0f84c22fbd85504842a26ea9713f16dc7df3a88d", "filename": "gcc/testsuite/gcc.dg/cast-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-2.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,41 @@\n+/* Test diagnostics for bad or doubtful casts.  Test with\n+   -pedantic.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+struct s { int a; } sv;\n+union u { int a; } uv;\n+int i;\n+long l;\n+char c;\n+void *p;\n+float fv;\n+\n+void\n+f (void)\n+{\n+  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n+  (struct s) sv; /* { dg-warning \"warning: ISO C forbids casting nonscalar to the same type\" } */\n+  (union u) uv; /* { dg-warning \"warning: ISO C forbids casting nonscalar to the same type\" } */\n+  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n+  (union u) i; /* { dg-warning \"warning: ISO C forbids casts to union type\" } */\n+  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (void) sv;\n+  (const void) uv;\n+  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) (char) 1;\n+  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) (void *) 1;\n+}"}, {"sha": "656bf6dc7959967d8591be67cfa7c278b0c3ee33", "filename": "gcc/testsuite/gcc.dg/cast-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-3.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,41 @@\n+/* Test diagnostics for bad or doubtful casts.  Test with\n+   -pedantic-errors.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n+\n+struct s { int a; } sv;\n+union u { int a; } uv;\n+int i;\n+long l;\n+char c;\n+void *p;\n+float fv;\n+\n+void\n+f (void)\n+{\n+  (int []) p; /* { dg-error \"error: cast specifies array type\" } */\n+  (int ()) p; /* { dg-error \"error: cast specifies function type\" } */\n+  (struct s) sv; /* { dg-error \"error: ISO C forbids casting nonscalar to the same type\" } */\n+  (union u) uv; /* { dg-error \"error: ISO C forbids casting nonscalar to the same type\" } */\n+  (struct s) i; /* { dg-error \"error: conversion to non-scalar type requested\" } */\n+  (union u) i; /* { dg-error \"error: ISO C forbids casts to union type\" } */\n+  (union u) l; /* { dg-error \"error: cast to union type from type not present in union\" } */\n+  (int) sv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (int) uv; /* { dg-error \"error: aggregate value used where an integer was expected\" } */\n+  (float) sv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (float) uv; /* { dg-error \"error: aggregate value used where a float was expected\" } */\n+  (_Complex double) sv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (_Complex double) uv; /* { dg-error \"error: aggregate value used where a complex was expected\" } */\n+  (void *) sv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (void *) uv; /* { dg-error \"error: cannot convert to a pointer type\" } */\n+  (_Bool) sv; /* { dg-error \"error: used struct type value where scalar is required\" } */\n+  (_Bool) uv; /* { dg-error \"error: used union type value where scalar is required\" } */\n+  (void) sv;\n+  (const void) uv;\n+  (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+  (void *) (char) 1;\n+  (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+  (char) (void *) 1;\n+}"}, {"sha": "7bdb55bf666dfb1c2b094e8765a9f26e77d453b7", "filename": "gcc/testsuite/gcc.dg/format/opt-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-1.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-extra-args.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-extra-args\" } */\n+\n+/* { dg-warning \"warning: -Wformat-extra-args ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "5a8f70375d7238419c701837a825649ab25c3b3a", "filename": "gcc/testsuite/gcc.dg/format/opt-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-2.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-nonliteral.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-nonliteral\" } */\n+\n+/* { dg-warning \"warning: -Wformat-nonliteral ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "7722172ee063c9cd28c64fc9a12531e62de4ee3e", "filename": "gcc/testsuite/gcc.dg/format/opt-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-3.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-security.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-security\" } */\n+\n+/* { dg-warning \"warning: -Wformat-security ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "b526d4f92e72b059d1af32dd6b8c4f9020a4ce11", "filename": "gcc/testsuite/gcc.dg/format/opt-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-4.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-y2k.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-y2k\" } */\n+\n+/* { dg-warning \"warning: -Wformat-y2k ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "b7135fbb6682e3df077092f82773fb9fe4737ae0", "filename": "gcc/testsuite/gcc.dg/format/opt-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-5.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wformat-zero-length.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat-zero-length\" } */\n+\n+/* { dg-warning \"warning: -Wformat-zero-length ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "140da30c1f8ac6d0262ae9702e9e74d33f248d4e", "filename": "gcc/testsuite/gcc.dg/format/opt-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fopt-6.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,7 @@\n+/* Test diagnostics for options used on their own without\n+   -Wformat.  -Wmissing-format-attribute.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+/* { dg-warning \"warning: -Wmissing-format-attribute ignored without -Wformat\" \"ignored\" { target *-*-* } 0 } */"}, {"sha": "47564c049f52625adb7356905352da7bd80c6c2f", "filename": "gcc/testsuite/gcc.dg/pointer-arith-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-5.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for sizeof on void and function types.  Test with\n+   no special options.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+extern const void v;\n+void f(void);\n+\n+void\n+g (void)\n+{\n+  sizeof (v);\n+  sizeof (void);\n+  sizeof (f);\n+  sizeof (void (void));\n+}"}, {"sha": "18cd185299502a110c79d2a3bf81f5b8ac4b1324", "filename": "gcc/testsuite/gcc.dg/pointer-arith-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-6.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for sizeof on void and function types.  Test with\n+   -Wpointer-arith.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpointer-arith\" } */\n+\n+extern const void v;\n+void f(void);\n+\n+void\n+g (void)\n+{\n+  sizeof (v); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+}"}, {"sha": "73a9b05838bd516ce9a55f6254816fb5115fe9b0", "filename": "gcc/testsuite/gcc.dg/pointer-arith-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-7.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for sizeof on void and function types.  Test with\n+   -pedantic.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+extern const void v;\n+void f(void);\n+\n+void\n+g (void)\n+{\n+  sizeof (v); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-warning \"warning: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-warning \"warning: invalid application of 'sizeof' to a function type\" } */\n+}"}, {"sha": "96d4c3343a3d517f8b9f56271c93d5bcb048da01", "filename": "gcc/testsuite/gcc.dg/pointer-arith-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c48cb4399477d53ff3af7c5809aa1e8a0dc05be9/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-8.c?ref=c48cb4399477d53ff3af7c5809aa1e8a0dc05be9", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for sizeof on void and function types.  Test with\n+   -pedantic-errors.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+extern const void v;\n+void f(void);\n+\n+void\n+g (void)\n+{\n+  sizeof (v); /* { dg-error \"error: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (void); /* { dg-error \"error: invalid application of 'sizeof' to a void type\" } */\n+  sizeof (f); /* { dg-error \"error: invalid application of 'sizeof' to a function type\" } */\n+  sizeof (void (void)); /* { dg-error \"error: invalid application of 'sizeof' to a function type\" } */\n+}"}]}