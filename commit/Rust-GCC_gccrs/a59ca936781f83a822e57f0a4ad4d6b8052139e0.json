{"sha": "a59ca936781f83a822e57f0a4ad4d6b8052139e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5Y2E5MzY3ODFmODNhODIyZTU3ZjBhNGFkNGQ2YjgwNTIxMzllMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-04-07T03:48:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-04-07T03:48:22Z"}, "message": "call.c (build_call): Still evaluate the actual argument.\n\n\t* call.c (build_call): Still evaluate the actual argument.\n\t* class.c (is_empty_class): Update for -fnew-abi.\n\t* decl2.c: -fnew-abi implies -fsquangle.\n\t* method.c (do_build_assign_ref): Don't do anything to copy\n\tan empty class.\n\t(do_build_copy_constructor): Likewise.\n\t* call.c (build_over_call): Likewise.\n\nFrom-SVN: r19029", "tree": {"sha": "e8b7595994582cee45b6c20eb9d3bc039af6ff5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b7595994582cee45b6c20eb9d3bc039af6ff5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59ca936781f83a822e57f0a4ad4d6b8052139e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59ca936781f83a822e57f0a4ad4d6b8052139e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59ca936781f83a822e57f0a4ad4d6b8052139e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59ca936781f83a822e57f0a4ad4d6b8052139e0/comments", "author": null, "committer": null, "parents": [{"sha": "cd36edbdfbddced4fe8d976a9c4fc3fdb744832e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd36edbdfbddced4fe8d976a9c4fc3fdb744832e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd36edbdfbddced4fe8d976a9c4fc3fdb744832e"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "02b3f696a4a7f65a617eb17e64c3aa666dc2832c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a59ca936781f83a822e57f0a4ad4d6b8052139e0", "patch": "@@ -1,3 +1,15 @@\n+Mon Apr  6 02:25:05 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (build_call): Still evaluate the actual argument.\n+\t* class.c (is_empty_class): Update for -fnew-abi.\n+\n+\t* decl2.c: -fnew-abi implies -fsquangle.\n+\n+\t* method.c (do_build_assign_ref): Don't do anything to copy\n+\tan empty class.\n+\t(do_build_copy_constructor): Likewise.\n+\t* call.c (build_over_call): Likewise.\n+\n Sat Apr  4 18:43:58 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* tree.c (avoid_overlap): Return a value."}, {"sha": "d001331141026e64d2be29532821dd9eb6fdb0bc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a59ca936781f83a822e57f0a4ad4d6b8052139e0", "patch": "@@ -525,7 +525,8 @@ build_call (function, result_type, parms)\n \t  TREE_TYPE (t) = TREE_TYPE (TREE_VALUE (tmp));\n \t  RTL_EXPR_RTL (t) = const0_rtx;\n \t  RTL_EXPR_SEQUENCE (t) = NULL_RTX;\n-\t  TREE_VALUE (tmp) = t;\n+\t  TREE_VALUE (tmp) = build (COMPOUND_EXPR, TREE_TYPE (t),\n+\t\t\t\t    TREE_VALUE (tmp), t);\n \t}\n \n   function = build_nt (CALL_EXPR, function, parms, NULL_TREE);\n@@ -3351,17 +3352,29 @@ build_over_call (fn, convs, args, flags)\n \t{\n \t  tree to = stabilize_reference\n \t    (build_indirect_ref (TREE_VALUE (args), 0));\n+\n+\t  /* Don't copy the padding byte; it might not have been allocated\n+\t     if to is a base subobject.  */\n+\t  if (is_empty_class (DECL_CLASS_CONTEXT (fn)))\n+\t    return to;\n+\n \t  val = build (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n \t  TREE_SIDE_EFFECTS (val) = 1;\n \t  return build_unary_op (ADDR_EXPR, val, 0);\n \t}\n     }\n   else if (DECL_NAME (fn) == ansi_opname[MODIFY_EXPR]\n \t   && copy_args_p (fn)\n-\t   && TYPE_HAS_TRIVIAL_ASSIGN_REF (DECL_CONTEXT (fn)))\n+\t   && TYPE_HAS_TRIVIAL_ASSIGN_REF (DECL_CLASS_CONTEXT (fn)))\n     {\n       tree to = stabilize_reference\n \t(build_indirect_ref (TREE_VALUE (converted_args), 0));\n+\n+      /* Don't copy the padding byte; it might not have been allocated\n+\t if to is a base subobject.  */\n+      if (is_empty_class (DECL_CLASS_CONTEXT (fn)))\n+\treturn to;\n+\n       arg = build_indirect_ref (TREE_VALUE (TREE_CHAIN (converted_args)), 0);\n       val = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n       TREE_SIDE_EFFECTS (val) = 1;"}, {"sha": "c2d6b0530b29e128fa27a8c5af8eda8505dbfa4b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a59ca936781f83a822e57f0a4ad4d6b8052139e0", "patch": "@@ -5486,7 +5486,13 @@ is_empty_class (type)\n {\n   tree t;\n \n-  if (! IS_AGGR_TYPE (type) || TYPE_BINFO_BASETYPES (type))\n+  if (! IS_AGGR_TYPE (type))\n+    return 0;\n+\n+  if (flag_new_abi)\n+    return CLASSTYPE_SIZE (type) == integer_zero_node;\n+\n+  if (TYPE_BINFO_BASETYPES (type))\n     return 0;\n   t = TYPE_FIELDS (type);\n   while (t && TREE_CODE (t) != FIELD_DECL)"}, {"sha": "42cbba99ac1f5191dce35cc6944699babbb4a60b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a59ca936781f83a822e57f0a4ad4d6b8052139e0", "patch": "@@ -401,7 +401,9 @@ int flag_new_for_scope = 1;\n \n int flag_weak = 1;\n \n-int flag_new_abi = 1;\n+/* Nonzero to enable experimental ABI changes.  */\n+\n+int flag_new_abi;\n \n /* Maximum template instantiation depth. Must be at least 17 for ANSI\n    compliance. */\n@@ -469,8 +471,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"check-new\", &flag_check_new, 1},\n   {\"repo\", &flag_use_repository, 1},\n   {\"for-scope\", &flag_new_for_scope, 2},\n-  {\"weak\", &flag_weak, 1},\n-  {\"new-abi\", &flag_new_abi, 1}\n+  {\"weak\", &flag_weak, 1}\n };\n \n /* Decode the string P as a language-specific option.\n@@ -562,6 +563,16 @@ lang_decode_option (p)\n \t  error (\"-fno-ansi-overloading is no longer supported\");\n \t  found = 1;\n \t}\n+      else if (!strcmp (p, \"new-abi\"))\n+\t{\n+\t  flag_new_abi = 1;\n+\t  flag_do_squangling = 1;\n+\t}\n+      else if (!strcmp (p, \"no-new-abi\"))\n+\t{\n+\t  flag_new_abi = 0;\n+\t  flag_do_squangling = 0;\n+\t}\n       else if (!strncmp (p, \"template-depth-\", 15))\n \t{\n \t  char *endp = p + 15;"}, {"sha": "e8ed718d165f6f2311d4faa3b9a11a9713dbf4f2", "filename": "gcc/cp/method.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59ca936781f83a822e57f0a4ad4d6b8052139e0/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a59ca936781f83a822e57f0a4ad4d6b8052139e0", "patch": "@@ -2047,7 +2047,11 @@ do_build_copy_constructor (fndecl)\n     parm = TREE_CHAIN (parm);\n   parm = convert_from_reference (parm);\n \n-  if (TYPE_HAS_TRIVIAL_INIT_REF (current_class_type))\n+  if (TYPE_HAS_TRIVIAL_INIT_REF (current_class_type)\n+      && is_empty_class (current_class_type))\n+    /* Don't copy the padding byte; it might not have been allocated\n+       if *this is a base subobject.  */;\n+  else if (TYPE_HAS_TRIVIAL_INIT_REF (current_class_type))\n     {\n       t = build (INIT_EXPR, void_type_node, current_class_ref, parm);\n       TREE_SIDE_EFFECTS (t) = 1;\n@@ -2159,7 +2163,11 @@ do_build_assign_ref (fndecl)\n \n   parm = convert_from_reference (parm);\n \n-  if (TYPE_HAS_TRIVIAL_ASSIGN_REF (current_class_type))\n+  if (TYPE_HAS_TRIVIAL_ASSIGN_REF (current_class_type)\n+      && is_empty_class (current_class_type))\n+    /* Don't copy the padding byte; it might not have been allocated\n+       if *this is a base subobject.  */;\n+  else if (TYPE_HAS_TRIVIAL_ASSIGN_REF (current_class_type))\n     {\n       tree t = build (MODIFY_EXPR, void_type_node, current_class_ref, parm);\n       TREE_SIDE_EFFECTS (t) = 1;"}]}