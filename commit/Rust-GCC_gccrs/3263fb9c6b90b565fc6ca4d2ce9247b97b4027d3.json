{"sha": "3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI2M2ZiOWM2YjkwYjU2NWZjNmNhNGQyY2U5MjQ3Yjk3YjQwMjdkMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-31T10:35:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-31T10:35:07Z"}, "message": "Remove using-declarations that add std names to __gnu_cxx\n\nThese using-declarations appear to have been added for simplicity when\nmoving the non-standard extensions from namespace std to namespace\n__gnu_cxx. Dumping all these names into namespace __gnu_cxx allows\nunportable uses like __gnu_cxx::size_t and __gnu_cxx::pair, which serve\nno useful purpose.\n\nThis patch removes most of the using-declarations from namespace scope,\nthen either qualifies names as needed or adds using-declarations at\nblock scope or typedefs at class scope.\n\n\t* include/backward/hashtable.h (size_t, ptrdiff_t)\n\t(forward_iterator_tag, input_iterator_tag, _Construct, _Destroy)\n\t(distance, vector, pair, __iterator_category): Remove\n\tusing-declarations that add these names to namespace __gnu_cxx.\n\t* include/ext/bitmap_allocator.h (size_t, ptrdiff_t): Likewise.\n\t* include/ext/debug_allocator.h (size_t): Likewise.\n\t* include/ext/functional (size_t, unary_function, binary_function)\n\t(mem_fun1_t, const_mem_fun1_t, mem_fun1_ref_t, const_mem_fun1_ref_t):\n\tLikewise.\n\t* include/ext/malloc_allocator.h (size_t, ptrdiff_t): Likewise.\n\t* include/ext/memory (ptrdiff_t, pair, __iterator_category): Likewise.\n\t* include/ext/mt_allocator.h (size_t, ptrdiff_t): Likewise.\n\t* include/ext/new_allocator.h (size_t, ptrdiff_t): Likewise.\n\t* include/ext/numeric (iota): Fix outdated comment.\n\t* include/ext/pool_allocator.h (size_t, ptrdiff_t): Likewise.\n\t* include/ext/rb_tree (_Rb_tree, allocator): Likewise.\n\t* include/ext/rope (size_t, ptrdiff_t, allocator, _Destroy): Likewise.\n\t* include/ext/ropeimpl.h (size_t, printf, basic_ostream)\n\t(__throw_length_error, _Destroy, std::__uninitialized_fill_n_a):\n\tLikewise.\n\t* include/ext/slist (size_t, ptrdiff_t, _Construct, _Destroy)\n\t(allocator, __true_type, __false_type): Likewise.\n\nFrom-SVN: r271807", "tree": {"sha": "8ff726ced75998f75da0ec78f2bdd7a5de98c599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ff726ced75998f75da0ec78f2bdd7a5de98c599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608a080c3f6e5a8338ff99658b27e226cbba7a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608a080c3f6e5a8338ff99658b27e226cbba7a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608a080c3f6e5a8338ff99658b27e226cbba7a67"}], "stats": {"total": 818, "additions": 413, "deletions": 405}, "files": [{"sha": "2786b673637c5a35ca48a8e6a6769e61893511e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -1,3 +1,28 @@\n+2019-05-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/backward/hashtable.h (size_t, ptrdiff_t)\n+\t(forward_iterator_tag, input_iterator_tag, _Construct, _Destroy)\n+\t(distance, vector, pair, __iterator_category): Remove\n+\tusing-declarations that add these names to namespace __gnu_cxx.\n+\t* include/ext/bitmap_allocator.h (size_t, ptrdiff_t): Likewise.\n+\t* include/ext/debug_allocator.h (size_t): Likewise.\n+\t* include/ext/functional (size_t, unary_function, binary_function)\n+\t(mem_fun1_t, const_mem_fun1_t, mem_fun1_ref_t, const_mem_fun1_ref_t):\n+\tLikewise.\n+\t* include/ext/malloc_allocator.h (size_t, ptrdiff_t): Likewise.\n+\t* include/ext/memory (ptrdiff_t, pair, __iterator_category): Likewise.\n+\t* include/ext/mt_allocator.h (size_t, ptrdiff_t): Likewise.\n+\t* include/ext/new_allocator.h (size_t, ptrdiff_t): Likewise.\n+\t* include/ext/numeric (iota): Fix outdated comment.\n+\t* include/ext/pool_allocator.h (size_t, ptrdiff_t): Likewise.\n+\t* include/ext/rb_tree (_Rb_tree, allocator): Likewise.\n+\t* include/ext/rope (size_t, ptrdiff_t, allocator, _Destroy): Likewise.\n+\t* include/ext/ropeimpl.h (size_t, printf, basic_ostream)\n+\t(__throw_length_error, _Destroy, std::__uninitialized_fill_n_a):\n+\tLikewise.\n+\t* include/ext/slist (size_t, ptrdiff_t, _Construct, _Destroy)\n+\t(allocator, __true_type, __false_type): Likewise.\n+\n 2019-05-31  Antony Polukhin  <antoshkka@gmail.com>\n \n \tPR libstdc++/71579"}, {"sha": "df6ad85191c03310002fec49cfd2bfa9919a65c2", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -69,17 +69,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-  using std::forward_iterator_tag;\n-  using std::input_iterator_tag;\n-  using std::_Construct;\n-  using std::_Destroy;\n-  using std::distance;\n-  using std::vector;\n-  using std::pair;\n-  using std::__iterator_category;\n-\n   template<class _Val>\n     struct _Hashtable_node\n     {\n@@ -112,10 +101,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t_ExtractKey, _EqualKey, _Alloc>\n         const_iterator;\n       typedef _Hashtable_node<_Val> _Node;\n-      typedef forward_iterator_tag iterator_category;\n+      typedef std::forward_iterator_tag iterator_category;\n       typedef _Val value_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef size_t size_type;\n+      typedef std::ptrdiff_t difference_type;\n+      typedef std::size_t size_type;\n       typedef _Val& reference;\n       typedef _Val* pointer;\n       \n@@ -164,10 +153,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         const_iterator;\n       typedef _Hashtable_node<_Val> _Node;\n \n-      typedef forward_iterator_tag iterator_category;\n+      typedef std::forward_iterator_tag iterator_category;\n       typedef _Val value_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef size_t size_type;\n+      typedef std::ptrdiff_t difference_type;\n+      typedef std::size_t size_type;\n       typedef const _Val& reference;\n       typedef const _Val* pointer;\n       \n@@ -272,8 +261,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _HashFcn hasher;\n       typedef _EqualKey key_equal;\n \n-      typedef size_t            size_type;\n-      typedef ptrdiff_t         difference_type;\n+      typedef std::size_t            size_type;\n+      typedef std::ptrdiff_t         difference_type;\n       typedef value_type*       pointer;\n       typedef const value_type* const_pointer;\n       typedef value_type&       reference;\n@@ -299,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       typedef typename _Alloc::template rebind<_Node>::other _Node_Alloc;\n       typedef typename _Alloc::template rebind<_Node*>::other _Nodeptr_Alloc;\n-      typedef vector<_Node*, _Nodeptr_Alloc> _Vector_type;\n+      typedef std::vector<_Node*, _Nodeptr_Alloc> _Vector_type;\n \n       _Node_Alloc _M_node_allocator;\n \n@@ -445,7 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __result;\n       }\n \n-      pair<iterator, bool>\n+      std::pair<iterator, bool>\n       insert_unique(const value_type& __obj)\n       {\n \tresize(_M_num_elements + 1);\n@@ -459,7 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn insert_equal_noresize(__obj);\n       }\n \n-      pair<iterator, bool>\n+      std::pair<iterator, bool>\n       insert_unique_noresize(const value_type& __obj);\n \n       iterator\n@@ -468,17 +457,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _InputIterator>\n         void\n         insert_unique(_InputIterator __f, _InputIterator __l)\n-        { insert_unique(__f, __l, __iterator_category(__f)); }\n+        { insert_unique(__f, __l, std::__iterator_category(__f)); }\n \n       template<class _InputIterator>\n         void\n         insert_equal(_InputIterator __f, _InputIterator __l)\n-        { insert_equal(__f, __l, __iterator_category(__f)); }\n+        { insert_equal(__f, __l, std::__iterator_category(__f)); }\n \n       template<class _InputIterator>\n         void\n         insert_unique(_InputIterator __f, _InputIterator __l,\n-\t\t      input_iterator_tag)\n+\t\t      std::input_iterator_tag)\n         {\n \t  for ( ; __f != __l; ++__f)\n \t    insert_unique(*__f);\n@@ -487,7 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _InputIterator>\n         void\n         insert_equal(_InputIterator __f, _InputIterator __l,\n-\t\t     input_iterator_tag)\n+\t\t     std::input_iterator_tag)\n         {\n \t  for ( ; __f != __l; ++__f)\n \t    insert_equal(*__f);\n@@ -496,9 +485,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _ForwardIterator>\n         void\n         insert_unique(_ForwardIterator __f, _ForwardIterator __l,\n-\t\t      forward_iterator_tag)\n+\t\t      std::forward_iterator_tag)\n         {\n-\t  size_type __n = distance(__f, __l);\n+\t  size_type __n = std::distance(__f, __l);\n \t  resize(_M_num_elements + __n);\n \t  for ( ; __n > 0; --__n, ++__f)\n \t    insert_unique_noresize(*__f);\n@@ -507,9 +496,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _ForwardIterator>\n         void\n         insert_equal(_ForwardIterator __f, _ForwardIterator __l,\n-\t\t     forward_iterator_tag)\n+\t\t     std::forward_iterator_tag)\n         {\n-\t  size_type __n = distance(__f, __l);\n+\t  size_type __n = std::distance(__f, __l);\n \t  resize(_M_num_elements + __n);\n \t  for ( ; __n > 0; --__n, ++__f)\n \t    insert_equal_noresize(*__f);\n@@ -555,10 +544,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __result;\n       }\n \n-      pair<iterator, iterator>\n+      std::pair<iterator, iterator>\n       equal_range(const key_type& __key);\n \n-      pair<const_iterator, const_iterator>\n+      std::pair<const_iterator, const_iterator>\n       equal_range(const key_type& __key) const;\n \n       size_type\n@@ -605,11 +594,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_bkt_num_key(_M_get_key(__obj)); }\n \n       size_type\n-      _M_bkt_num_key(const key_type& __key, size_t __n) const\n+      _M_bkt_num_key(const key_type& __key, std::size_t __n) const\n       { return _M_hash(__key) % __n; }\n \n       size_type\n-      _M_bkt_num(const value_type& __obj, size_t __n) const\n+      _M_bkt_num(const value_type& __obj, std::size_t __n) const\n       { return _M_bkt_num_key(_M_get_key(__obj), __n); }\n \n       _Node*\n@@ -712,7 +701,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__ht1._M_buckets.size() != __ht2._M_buckets.size())\n \treturn false;\n \n-      for (size_t __n = 0; __n < __ht1._M_buckets.size(); ++__n)\n+      for (std::size_t __n = 0; __n < __ht1._M_buckets.size(); ++__n)\n \t{\n \t  _Node* __cur1 = __ht1._M_buckets[__n];\n \t  _Node* __cur2 = __ht2._M_buckets[__n];\n@@ -757,7 +746,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __ht1.swap(__ht2); }\n \n   template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n-    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator, bool>\n+    std::pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator,\n+\t      bool>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     insert_unique_noresize(const value_type& __obj)\n     {\n@@ -766,13 +756,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       for (_Node* __cur = __first; __cur; __cur = __cur->_M_next)\n \tif (_M_equals(_M_get_key(__cur->_M_val), _M_get_key(__obj)))\n-\t  return pair<iterator, bool>(iterator(__cur, this), false);\n+\t  return std::pair<iterator, bool>(iterator(__cur, this), false);\n       \n       _Node* __tmp = _M_new_node(__obj);\n       __tmp->_M_next = __first;\n       _M_buckets[__n] = __tmp;\n       ++_M_num_elements;\n-      return pair<iterator, bool>(iterator(__tmp, this), true);\n+      return std::pair<iterator, bool>(iterator(__tmp, this), true);\n     }\n \n   template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n@@ -822,12 +812,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n-    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator,\n-\t typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator>\n+    std::pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator,\n+\t      typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     equal_range(const key_type& __key)\n     {\n-      typedef pair<iterator, iterator> _Pii;\n+      typedef std::pair<iterator, iterator> _Pii;\n       const size_type __n = _M_bkt_num_key(__key);\n \n       for (_Node* __first = _M_buckets[__n]; __first;\n@@ -848,12 +838,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n-    pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator,\n-\t typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator>\n+    std::pair<\n+\ttypename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator,\n+\ttypename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     equal_range(const key_type& __key) const\n     {\n-      typedef pair<const_iterator, const_iterator> _Pii;\n+      typedef std::pair<const_iterator, const_iterator> _Pii;\n       const size_type __n = _M_bkt_num_key(__key);\n \n       for (const _Node* __first = _M_buckets[__n]; __first;"}, {"sha": "27cfb0713a4505d7327f43f121c5ade151c79448", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -46,9 +46,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-\n   namespace __detail\n   {\n     /** @class  __mini_vector bitmap_allocator.h bitmap_allocator.h\n@@ -77,8 +74,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef _Tp* pointer;\n \ttypedef _Tp& reference;\n \ttypedef const _Tp& const_reference;\n-\ttypedef size_t size_type;\n-\ttypedef ptrdiff_t difference_type;\n+\ttypedef std::size_t size_type;\n+\ttypedef std::ptrdiff_t difference_type;\n \ttypedef pointer iterator;\n \n       private:\n@@ -223,13 +220,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct __mv_iter_traits<_Tp*>\n       {\n \ttypedef _Tp value_type;\n-\ttypedef ptrdiff_t difference_type;\n+\ttypedef std::ptrdiff_t difference_type;\n       };\n \n     enum \n       { \n \tbits_per_byte = 8,\n-\tbits_per_block = sizeof(size_t) * size_t(bits_per_byte) \n+\tbits_per_block = sizeof(std::size_t) * std::size_t(bits_per_byte)\n       };\n \n     template<typename _ForwardIterator, typename _Tp, typename _Compare>\n@@ -265,17 +262,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  passed to the function.\n      */\n     template<typename _AddrPair>\n-      inline size_t\n+      inline std::size_t\n       __num_blocks(_AddrPair __ap)\n       { return (__ap.second - __ap.first) + 1; }\n \n     /** @brief The number of Bit-maps pointed to by the address pair\n      *  passed to the function.\n      */\n     template<typename _AddrPair>\n-      inline size_t\n+      inline std::size_t\n       __num_bitmaps(_AddrPair __ap)\n-      { return __num_blocks(__ap) / size_t(bits_per_block); }\n+      { return __num_blocks(__ap) / std::size_t(bits_per_block); }\n \n     // _Tp should be a pointer type.\n     template<typename _Tp>\n@@ -336,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef typename __detail::__mini_vector<_Block_pair> _BPVector;\n \ttypedef typename _BPVector::difference_type _Counter_type;\n \n-\tsize_t* _M_pbitmap;\n+\tstd::size_t* _M_pbitmap;\n \t_Counter_type _M_data_offset;\n \n       public:\n@@ -346,6 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool \n \toperator()(_Block_pair __bp) throw()\n \t{\n+\t  using std::size_t;\n \t  // Set the _rover to the last physical location bitmap,\n \t  // which is the bitmap which belongs to the first free\n \t  // block. Thus, the bitmaps are in exact reverse order of\n@@ -377,13 +375,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return false;\n \t}\n     \n-\tsize_t*\n+\tstd::size_t*\n \t_M_get() const throw()\n \t{ return _M_pbitmap; }\n \n \t_Counter_type\n \t_M_offset() const throw()\n-\t{ return _M_data_offset * size_t(bits_per_block); }\n+\t{ return _M_data_offset * std::size_t(bits_per_block); }\n       };\n \n     /** @class  _Bitmap_counter bitmap_allocator.h bitmap_allocator.h\n@@ -402,8 +400,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef _Tp pointer;\n \n \t_BPVector& _M_vbp;\n-\tsize_t* _M_curr_bmap;\n-\tsize_t* _M_last_bmap_in_block;\n+\tstd::size_t* _M_curr_bmap;\n+\tstd::size_t* _M_last_bmap_in_block;\n \t_Index_type _M_curr_index;\n     \n       public:\n@@ -424,22 +422,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \n \t  _M_curr_index = __index;\n-\t  _M_curr_bmap = reinterpret_cast<size_t*>\n+\t  _M_curr_bmap = reinterpret_cast<std::size_t*>\n \t    (_M_vbp[_M_curr_index].first) - 1;\n \t  \n \t  _GLIBCXX_DEBUG_ASSERT(__index <= (long)_M_vbp.size() - 1);\n \t\n \t  _M_last_bmap_in_block = _M_curr_bmap\n \t    - ((_M_vbp[_M_curr_index].second \n \t\t- _M_vbp[_M_curr_index].first + 1) \n-\t       / size_t(bits_per_block) - 1);\n+\t       / std::size_t(bits_per_block) - 1);\n \t}\n     \n \t// Dangerous Function! Use with extreme care. Pass to this\n \t// function ONLY those values that are known to be correct,\n \t// otherwise this will mess up big time.\n \tvoid\n-\t_M_set_internal_bitmap(size_t* __new_internal_marker) throw()\n+\t_M_set_internal_bitmap(std::size_t* __new_internal_marker) throw()\n \t{ _M_curr_bmap = __new_internal_marker; }\n     \n \tbool\n@@ -461,7 +459,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n     \n-\tsize_t*\n+\tstd::size_t*\n \t_M_get() const throw()\n \t{ return _M_curr_bmap; }\n     \n@@ -472,8 +470,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Index_type\n \t_M_offset() const throw()\n \t{\n-\t  return size_t(bits_per_block)\n-\t    * ((reinterpret_cast<size_t*>(this->_M_base()) \n+\t  return std::size_t(bits_per_block)\n+\t    * ((reinterpret_cast<std::size_t*>(this->_M_base())\n \t\t- _M_curr_bmap) - 1);\n \t}\n     \n@@ -486,9 +484,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  corresponding bit in the bit-map.\n      */\n     inline void \n-    __bit_allocate(size_t* __pbmap, size_t __pos) throw()\n+    __bit_allocate(std::size_t* __pbmap, std::size_t __pos) throw()\n     {\n-      size_t __mask = 1 << __pos;\n+      std::size_t __mask = 1 << __pos;\n       __mask = ~__mask;\n       *__pbmap &= __mask;\n     }\n@@ -497,18 +495,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  corresponding bit in the bit-map.\n      */\n     inline void \n-    __bit_free(size_t* __pbmap, size_t __pos) throw()\n+    __bit_free(std::size_t* __pbmap, std::size_t __pos) throw()\n     {\n-      size_t __mask = 1 << __pos;\n+      std::size_t __mask = 1 << __pos;\n       *__pbmap |= __mask;\n     }\n   } // namespace __detail\n \n   /** @brief  Generic Version of the bsf instruction.\n    */\n-  inline size_t \n-  _Bit_scan_forward(size_t __num)\n-  { return static_cast<size_t>(__builtin_ctzl(__num)); }\n+  inline std::size_t\n+  _Bit_scan_forward(std::size_t __num)\n+  { return static_cast<std::size_t>(__builtin_ctzl(__num)); }\n \n   /** @class  free_list bitmap_allocator.h bitmap_allocator.h\n    *\n@@ -518,7 +516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class free_list\n   {\n   public:\n-    typedef size_t* \t\t\t\tvalue_type;\n+    typedef std::size_t* \t\t\tvalue_type;\n     typedef __detail::__mini_vector<value_type> vector_type;\n     typedef vector_type::iterator \t\titerator;\n     typedef __mutex\t\t\t\t__mutex_type;\n@@ -527,8 +525,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _LT_pointer_compare\n     {\n       bool\n-      operator()(const size_t* __pui, \n-\t\t const size_t __cui) const throw()\n+      operator()(const std::size_t* __pui,\n+\t\t const std::size_t __cui) const throw()\n       { return *__pui < __cui; }\n     };\n \n@@ -559,7 +557,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  or larger blocks from the free list.\n      */\n     void\n-    _M_validate(size_t* __addr) throw()\n+    _M_validate(std::size_t* __addr) throw()\n     {\n       vector_type& __free_list = _M_get_free_list();\n       const vector_type::size_type __max_size = 64;\n@@ -605,10 +603,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  false.\n      */\n     bool \n-    _M_should_i_give(size_t __block_size, \n-\t\t     size_t __required_size) throw()\n+    _M_should_i_give(std::size_t __block_size,\n+\t\t     std::size_t __required_size) throw()\n     {\n-      const size_t __max_wastage_percentage = 36;\n+      const std::size_t __max_wastage_percentage = 36;\n       if (__block_size >= __required_size && \n \t  (((__block_size - __required_size) * 100 / __block_size)\n \t   < __max_wastage_percentage))\n@@ -625,14 +623,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  by a call to the _M_get function.\n      */\n     inline void \n-    _M_insert(size_t* __addr) throw()\n+    _M_insert(std::size_t* __addr) throw()\n     {\n #if defined __GTHREADS\n       __scoped_lock __bfl_lock(_M_get_mutex());\n #endif\n       // Call _M_validate to decide what should be done with\n       // this particular free list.\n-      this->_M_validate(reinterpret_cast<size_t*>(__addr) - 1);\n+      this->_M_validate(reinterpret_cast<std::size_t*>(__addr) - 1);\n       // See discussion as to why this is 1!\n     }\n     \n@@ -644,8 +642,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  @return  A pointer to the new memory block of size at least\n      *  equal to that requested.\n      */\n-    size_t*\n-    _M_get(size_t __sz) _GLIBCXX_THROW(std::bad_alloc);\n+    std::size_t*\n+    _M_get(std::size_t __sz) _GLIBCXX_THROW(std::bad_alloc);\n \n     /** @brief  This function just clears the internal Free List, and\n      *  gives back all the memory to the OS.\n@@ -684,8 +682,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class bitmap_allocator : private free_list\n     {\n     public:\n-      typedef size_t    \t\tsize_type;\n-      typedef ptrdiff_t \t\tdifference_type;\n+      typedef std::size_t    \t\tsize_type;\n+      typedef std::ptrdiff_t \t\tdifference_type;\n       typedef _Tp*        \t\tpointer;\n       typedef const _Tp*  \t\tconst_pointer;\n       typedef _Tp&        \t\treference;\n@@ -706,7 +704,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n     private:\n-      template<size_t _BSize, size_t _AlignSize>\n+      template<std::size_t _BSize, std::size_t _AlignSize>\n         struct aligned_size\n \t{\n \t  enum\n@@ -765,6 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void \n       _S_refill_pool() _GLIBCXX_THROW(std::bad_alloc)\n       {\n+\tusing std::size_t;\n #if defined _GLIBCXX_DEBUG\n \t_S_check_for_free_blocks();\n #endif\n@@ -798,7 +797,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       static _BPVector _S_mem_blocks;\n-      static size_t _S_block_size;\n+      static std::size_t _S_block_size;\n       static __detail::_Bitmap_counter<_Alloc_block*> _S_last_request;\n       static typename _BPVector::size_type _S_last_dealloc_index;\n #if defined __GTHREADS\n@@ -823,6 +822,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       pointer \n       _M_allocate_single_object() _GLIBCXX_THROW(std::bad_alloc)\n       {\n+\tusing std::size_t;\n #if defined __GTHREADS\n \t__scoped_lock __bit_lock(_S_mut);\n #endif\n@@ -913,6 +913,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void \n       _M_deallocate_single_object(pointer __p) throw()\n       {\n+\tusing std::size_t;\n #if defined __GTHREADS\n \t__scoped_lock __bit_lock(_S_mut);\n #endif\n@@ -1109,8 +1110,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bitmap_allocator<_Tp>::_S_mem_blocks;\n \n   template<typename _Tp>\n-    size_t bitmap_allocator<_Tp>::_S_block_size = \n-    2 * size_t(__detail::bits_per_block);\n+    std::size_t bitmap_allocator<_Tp>::_S_block_size\n+      = 2 * std::size_t(__detail::bits_per_block);\n \n   template<typename _Tp>\n     typename bitmap_allocator<_Tp>::_BPVector::size_type "}, {"sha": "08f0eb23f5b1681801c733d45f04aa2edde72ea8", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -50,8 +50,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-\n   /**\n    *  @brief  A meta-allocator with debugging bits.\n    *  @ingroup allocators\n@@ -103,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type _S_extra()\n       {\n-\tconst size_t __obj_size = sizeof(value_type);\n+\tconst std::size_t __obj_size = sizeof(value_type);\n \treturn (sizeof(size_type) + __obj_size - 1) / __obj_size; \n       }\n "}, {"sha": "84aef7c2c325db5aee48bec282bca2762470caab", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -64,14 +64,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::unary_function;\n-  using std::binary_function;\n-  using std::mem_fun1_t;\n-  using std::const_mem_fun1_t;\n-  using std::mem_fun1_ref_t;\n-  using std::const_mem_fun1_ref_t;\n-\n   /** The @c identity_element functions are not part of the C++\n    *  standard; SGI provided them as an extension.  Its argument is an\n    *  operation, and its return value is the identity element for that\n@@ -123,8 +115,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Operation1, class _Operation2>\n     class unary_compose\n-    : public unary_function<typename _Operation2::argument_type,\n-\t\t\t    typename _Operation1::result_type>\n+    : public std::unary_function<typename _Operation2::argument_type,\n+\t\t\t\t typename _Operation1::result_type>\n     {\n     protected:\n       _Operation1 _M_fn1;\n@@ -148,8 +140,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// An \\link SGIextensions SGI extension \\endlink.\n   template <class _Operation1, class _Operation2, class _Operation3>\n     class binary_compose\n-    : public unary_function<typename _Operation2::argument_type,\n-\t\t\t    typename _Operation1::result_type>\n+    : public std::unary_function<typename _Operation2::argument_type,\n+\t\t\t\t typename _Operation1::result_type>\n     {\n     protected:\n       _Operation1 _M_fn1;\n@@ -209,15 +201,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // extension documented next\n   template <class _Arg1, class _Arg2>\n-    struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1>\n+    struct _Project1st : public std::binary_function<_Arg1, _Arg2, _Arg1>\n     {\n       _Arg1\n       operator()(const _Arg1& __x, const _Arg2&) const\n       { return __x; }\n     };\n \n   template <class _Arg1, class _Arg2>\n-    struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2>\n+    struct _Project2nd : public std::binary_function<_Arg1, _Arg2, _Arg2>\n     {\n       _Arg2\n       operator()(const _Arg1&, const _Arg2& __y) const\n@@ -350,12 +342,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup SGIextensions\n    */\n   class subtractive_rng\n-  : public unary_function<unsigned int, unsigned int>\n+  : public std::unary_function<unsigned int, unsigned int>\n   {\n   private:\n     unsigned int _M_table[55];\n-    size_t _M_index1;\n-    size_t _M_index2;\n+    std::size_t _M_index1;\n+    std::size_t _M_index2;\n \n   public:\n     /// Returns a number less than the argument.\n@@ -373,10 +365,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       unsigned int __k = 1;\n       _M_table[54] = __seed;\n-      size_t __i;\n+      std::size_t __i;\n       for (__i = 0; __i < 54; __i++)\n \t{\n-\t  size_t __ii = (21 * (__i + 1) % 55) - 1;\n+\t  std::size_t __ii = (21 * (__i + 1) % 55) - 1;\n \t  _M_table[__ii] = __k;\n \t  __k = __seed - __k;\n \t  __seed = _M_table[__ii];\n@@ -404,24 +396,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // the C++ standard.\n   \n   template <class _Ret, class _Tp, class _Arg>\n-    inline mem_fun1_t<_Ret, _Tp, _Arg>\n+    inline std::mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun1(_Ret (_Tp::*__f)(_Arg))\n-    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n+    { return std::mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline const_mem_fun1_t<_Ret, _Tp, _Arg>\n+    inline std::const_mem_fun1_t<_Ret, _Tp, _Arg>\n     mem_fun1(_Ret (_Tp::*__f)(_Arg) const)\n-    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n+    { return std::const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>\n+    inline std::mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun1_ref(_Ret (_Tp::*__f)(_Arg))\n-    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n+    { return std::mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n   template <class _Ret, class _Tp, class _Arg>\n-    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n+    inline std::const_mem_fun1_ref_t<_Ret, _Tp, _Arg>\n     mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n-    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n+    { return std::const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1bc76372f4468523a22c0938c3d5a668c3eeab38", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -42,9 +42,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-\n   /**\n    *  @brief  An allocator that uses malloc.\n    *  @ingroup allocators\n@@ -57,8 +54,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class malloc_allocator\n     {\n     public:\n-      typedef size_t     size_type;\n-      typedef ptrdiff_t  difference_type;\n+      typedef std::size_t     size_type;\n+      typedef std::ptrdiff_t  difference_type;\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n@@ -141,9 +138,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n       {\n #if __PTRDIFF_MAX__ < __SIZE_MAX__\n-\treturn size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n #else\n-\treturn size_t(-1) / sizeof(_Tp);\n+\treturn std::size_t(-1) / sizeof(_Tp);\n #endif\n       }\n "}, {"sha": "2912dcbacee0b24b527a6bf5f4c9cfdf8323f4df", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -65,13 +65,10 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::ptrdiff_t;\n-  using std::pair;\n-  using std::__iterator_category;\n   using std::_Temporary_buffer;\n \n   template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    pair<_InputIter, _ForwardIter>\n+    std::pair<_InputIter, _ForwardIter>\n     __uninitialized_copy_n(_InputIter __first, _Size __count,\n \t\t\t   _ForwardIter __result, std::input_iterator_tag)\n     {\n@@ -80,7 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  for (; __count > 0 ; --__count, ++__first, ++__cur)\n \t    std::_Construct(&*__cur, *__first);\n-\t  return pair<_InputIter, _ForwardIter>(__first, __cur);\n+\t  return std::pair<_InputIter, _ForwardIter>(__first, __cur);\n \t}\n       __catch(...)\n \t{\n@@ -90,22 +87,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIter, typename _Size, typename _ForwardIter>\n-    inline pair<_RandomAccessIter, _ForwardIter>\n+    inline std::pair<_RandomAccessIter, _ForwardIter>\n     __uninitialized_copy_n(_RandomAccessIter __first, _Size __count,\n \t\t\t   _ForwardIter __result,\n \t\t\t   std::random_access_iterator_tag)\n     {\n       _RandomAccessIter __last = __first + __count;\n-      return (pair<_RandomAccessIter, _ForwardIter>\n+      return (std::pair<_RandomAccessIter, _ForwardIter>\n \t      (__last, std::uninitialized_copy(__first, __last, __result)));\n     }\n \n   template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    inline pair<_InputIter, _ForwardIter>\n+    inline std::pair<_InputIter, _ForwardIter>\n     __uninitialized_copy_n(_InputIter __first, _Size __count,\n \t\t\t   _ForwardIter __result)\n-    { return __gnu_cxx::__uninitialized_copy_n(__first, __count, __result,\n-\t\t\t\t\t       __iterator_category(__first)); }\n+    {\n+      return __gnu_cxx::__uninitialized_copy_n(__first, __count, __result,\n+\t  std::__iterator_category(__first));\n+    }\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -118,18 +117,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Like copy(), but does not require an initialized output range.\n   */\n   template<typename _InputIter, typename _Size, typename _ForwardIter>\n-    inline pair<_InputIter, _ForwardIter>\n+    inline std::pair<_InputIter, _ForwardIter>\n     uninitialized_copy_n(_InputIter __first, _Size __count,\n \t\t\t _ForwardIter __result)\n-    { return __gnu_cxx::__uninitialized_copy_n(__first, __count, __result,\n-\t\t\t\t\t       __iterator_category(__first)); }\n+    {\n+      return __gnu_cxx::__uninitialized_copy_n(__first, __count, __result,\n+\t  std::__iterator_category(__first));\n+    }\n \n \n   // An alternative version of uninitialized_copy_n that constructs\n   // and destroys objects with a user-provided allocator.\n   template<typename _InputIter, typename _Size, typename _ForwardIter,\n            typename _Allocator>\n-    pair<_InputIter, _ForwardIter>\n+    std::pair<_InputIter, _ForwardIter>\n     __uninitialized_copy_n_a(_InputIter __first, _Size __count,\n \t\t\t     _ForwardIter __result,\n \t\t\t     _Allocator __alloc)\n@@ -139,7 +140,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  for (; __count > 0 ; --__count, ++__first, ++__cur)\n \t    __alloc.construct(&*__cur, *__first);\n-\t  return pair<_InputIter, _ForwardIter>(__first, __cur);\n+\t  return std::pair<_InputIter, _ForwardIter>(__first, __cur);\n \t}\n       __catch(...)\n \t{\n@@ -150,7 +151,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIter, typename _Size, typename _ForwardIter,\n            typename _Tp>\n-    inline pair<_InputIter, _ForwardIter>\n+    inline std::pair<_InputIter, _ForwardIter>\n     __uninitialized_copy_n_a(_InputIter __first, _Size __count,\n \t\t\t     _ForwardIter __result,\n \t\t\t     std::allocator<_Tp>)"}, {"sha": "003d7928f306b003b0f8c421e55603e61726237d", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -42,8 +42,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n \n   typedef void (*__destroy_handler)(void*);\n \n@@ -53,11 +51,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Using short int as type for the binmap implies we are never\n     // caching blocks larger than 32768 with this allocator.\n     typedef unsigned short int _Binmap_type;\n+    typedef std::size_t size_t;\n \n     // Variables used to configure the behavior of the allocator,\n     // assigned and explained in detail below.\n     struct _Tune\n-     {\n+    {\n       // Compile time constants for the default _Tune values.\n       enum { _S_align = 8 };\n       enum { _S_max_bytes = 128 };\n@@ -477,7 +476,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       static pool_type&\n       _S_get_pool()\n-      { \n+      {\n+\tusing std::size_t;\n \t// Sane defaults for the _PoolTp.\n \ttypedef typename pool_type::_Block_record _Block_record;\n \tconst static size_t __a = (__alignof__(_Tp) >= sizeof(_Block_record)\n@@ -570,8 +570,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __mt_alloc_base \n     {\n     public:\n-      typedef size_t                    size_type;\n-      typedef ptrdiff_t                 difference_type;\n+      typedef std::size_t               size_type;\n+      typedef std::ptrdiff_t            difference_type;\n       typedef _Tp*                      pointer;\n       typedef const _Tp*                const_pointer;\n       typedef _Tp&                      reference;\n@@ -594,7 +594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n-      { return size_t(-1) / sizeof(_Tp); }\n+      { return size_type(-1) / sizeof(_Tp); }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n@@ -639,8 +639,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __mt_alloc : public __mt_alloc_base<_Tp>\n     {\n     public:\n-      typedef size_t                    \tsize_type;\n-      typedef ptrdiff_t                 \tdifference_type;\n+      typedef std::size_t                    \tsize_type;\n+      typedef std::ptrdiff_t                 \tdifference_type;\n       typedef _Tp*                      \tpointer;\n       typedef const _Tp*                \tconst_pointer;\n       typedef _Tp&                      \treference;\n@@ -705,16 +705,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Requests larger than _M_max_bytes are handled by operator\n       // new/delete directly.\n       __pool_type& __pool = __policy_type::_S_get_pool();\n-      const size_t __bytes = __n * sizeof(_Tp);\n+      const size_type __bytes = __n * sizeof(_Tp);\n       if (__pool._M_check_threshold(__bytes))\n \t{\n \t  void* __ret = ::operator new(__bytes);\n \t  return static_cast<_Tp*>(__ret);\n \t}\n       \n       // Round up to power of 2 and figure out which bin to use.\n-      const size_t __which = __pool._M_get_binmap(__bytes);\n-      const size_t __thread_id = __pool._M_get_thread_id();\n+      const size_type __which = __pool._M_get_binmap(__bytes);\n+      const size_type __thread_id = __pool._M_get_thread_id();\n       \n       // Find out if we have blocks on our freelist.  If so, go ahead\n       // and use them directly without having to lock anything.\n@@ -758,7 +758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // Requests larger than _M_max_bytes are handled by\n \t  // operators new/delete directly.\n \t  __pool_type& __pool = __policy_type::_S_get_pool();\n-\t  const size_t __bytes = __n * sizeof(_Tp);\n+\t  const size_type __bytes = __n * sizeof(_Tp);\n \t  if (__pool._M_check_threshold(__bytes))\n \t    ::operator delete(__p);\n \t  else"}, {"sha": "ee699532c6a2bc32bef827a9ecccbea15edfe579", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -41,9 +41,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-\n   /**\n    *  @brief  An allocator that uses global new, as per [20.4].\n    *  @ingroup allocators\n@@ -58,8 +55,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class new_allocator\n     {\n     public:\n-      typedef size_t     size_type;\n-      typedef ptrdiff_t  difference_type;\n+      typedef std::size_t     size_type;\n+      typedef std::ptrdiff_t  difference_type;\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n@@ -140,9 +137,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n       {\n #if __PTRDIFF_MAX__ < __SIZE_MAX__\n-\treturn size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n #else\n-\treturn size_t(-1) / sizeof(_Tp);\n+\treturn std::size_t(-1) / sizeof(_Tp);\n #endif\n       }\n "}, {"sha": "3581b4782fadfc3fe9d6e625c5f7d15d68ef97fb", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -131,7 +131,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup SGIextensions\n    *  @doctodo\n   */\n-  // iota is not part of the C++ standard.  It is an extension.\n+  // iota is not part of the standard until C++11.  It is an extension.\n   template<typename _ForwardIter, typename _Tp>\n     void\n     iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)"}, {"sha": "96685ec5b6efefd027e366b00139979723ac8cf9", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -57,9 +57,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-\n   /**\n    *  @brief  Base class for __pool_alloc.\n    *\n@@ -77,6 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n     class __pool_alloc_base\n     {\n+      typedef std::size_t size_t;\n     protected:\n \n       enum { _S_align = 8 };\n@@ -129,8 +127,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _Atomic_word\t    _S_force_new;\n \n     public:\n-      typedef size_t     size_type;\n-      typedef ptrdiff_t  difference_type;\n+      typedef std::size_t     size_type;\n+      typedef std::ptrdiff_t  difference_type;\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n@@ -166,7 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n-      { return size_t(-1) / sizeof(_Tp); }\n+      { return std::size_t(-1) / sizeof(_Tp); }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n@@ -213,6 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NODISCARD _Tp*\n     __pool_alloc<_Tp>::allocate(size_type __n, const void*)\n     {\n+      using std::size_t;\n       pointer __ret = 0;\n       if (__builtin_expect(__n != 0, true))\n \t{\n@@ -266,6 +265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     __pool_alloc<_Tp>::deallocate(pointer __p, size_type __n)\n     {\n+      using std::size_t;\n       if (__builtin_expect(__n != 0 && __p != 0, true))\n \t{\n #if __cpp_aligned_new"}, {"sha": "9358766d5e23563e998e08b5c736b03683a3778d", "filename": "libstdc++-v3/include/ext/rb_tree", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frb_tree?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -64,9 +64,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::_Rb_tree;\n-  using std::allocator;\n-\n   // Class rb_tree is not part of the C++ standard.  It is provided for\n   // compatibility with the HP STL.\n \n@@ -76,11 +73,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @doctodo\n    */\n   template <class _Key, class _Value, class _KeyOfValue, class _Compare,\n-\t    class _Alloc = allocator<_Value> >\n+\t    class _Alloc = std::allocator<_Value> >\n     struct rb_tree\n-    : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>\n+    : public std::_Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>\n     {\n-      typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;\n+      typedef std::_Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;\n       typedef typename _Base::allocator_type allocator_type;\n \n       rb_tree(const _Compare& __comp = _Compare(),"}, {"sha": "0788dee3c71a8ac3a5c83a08ce5f0276cd94e9be", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 164, "deletions": 155, "changes": 319, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -73,11 +73,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};\n   } // namespace __detail\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-  using std::allocator;\n-  using std::_Destroy;\n-\n   // See libstdc++/36832.\n   template<typename _ForwardIterator, typename _Allocator>\n     void\n@@ -91,8 +86,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _ForwardIterator, typename _Tp>\n     inline void\n     _Destroy_const(_ForwardIterator __first,\n-\t\t   _ForwardIterator __last, allocator<_Tp>)\n-    { _Destroy(__first, __last); }\n+\t\t   _ForwardIterator __last, std::allocator<_Tp>)\n+    { std::_Destroy(__first, __last); }\n \n   // The _S_eos function is used for those functions that\n   // convert to/from C-like strings to detect the end of the string.\n@@ -153,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual ~char_producer() { }\n \n       virtual void\n-      operator()(size_t __start_pos, size_t __len,\n+      operator()(std::size_t __start_pos, std::size_t __len,\n \t\t _CharT* __buffer) = 0;\n       // Buffer should really be an arbitrary output iterator.\n       // That way we could flatten directly into an ostream, etc.\n@@ -175,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // behave a little like basic_ostringstream<sequence::value_type> and a\n   // little like containers.\n \n-  template<class _Sequence, size_t _Buf_sz = 100>\n+  template<class _Sequence, std::size_t _Buf_sz = 100>\n     class sequence_buffer\n     : public std::iterator<std::output_iterator_tag, void, void, void, void>\n     {\n@@ -184,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       _Sequence* _M_prefix;\n       value_type _M_buffer[_Buf_sz];\n-      size_t     _M_buf_count;\n+      std::size_t _M_buf_count;\n     public:\n \n       void\n@@ -252,12 +247,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n       \n       void\n-      append(value_type* __s, size_t __len)\n+      append(value_type* __s, std::size_t __len)\n       {\n \tif (__len + _M_buf_count <= _Buf_sz)\n \t  {\n-\t    size_t __i = _M_buf_count;\n-\t    for (size_t __j = 0; __j < __len; __i++, __j++)\n+\t    std::size_t __i = _M_buf_count;\n+\t    for (std::size_t __j = 0; __j < __len; __i++, __j++)\n \t      _M_buffer[__i] = __s[__j];\n \t    _M_buf_count += __len;\n \t  }\n@@ -271,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       sequence_buffer&\n-      write(value_type* __s, size_t __len)\n+      write(value_type* __s, std::size_t __len)\n       {\n \tappend(__s, __len);\n \treturn *this;\n@@ -317,13 +312,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual ~_Rope_char_consumer() { }\n   \n       virtual bool\n-      operator()(const _CharT* __buffer, size_t __len) = 0;\n+      operator()(const _CharT* __buffer, std::size_t __len) = 0;\n     };\n   \n   // First a lot of forward declarations.  The standard seems to require\n   // much stricter \"declaration before use\" than many of the implementations\n   // that preceded it.\n-  template<class _CharT, class _Alloc = allocator<_CharT> >\n+  template<class _CharT, class _Alloc = std::allocator<_CharT> >\n     class rope;\n   \n   template<class _CharT, class _Alloc>\n@@ -358,16 +353,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _CharT, class _Alloc>\n     _Rope_const_iterator<_CharT, _Alloc>\n     operator-(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n-\t      ptrdiff_t __n);\n+\t      std::ptrdiff_t __n);\n \n   template<class _CharT, class _Alloc>\n     _Rope_const_iterator<_CharT, _Alloc>\n     operator+(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n-\t      ptrdiff_t __n);\n+\t      std::ptrdiff_t __n);\n \n   template<class _CharT, class _Alloc>\n     _Rope_const_iterator<_CharT, _Alloc>\n-    operator+(ptrdiff_t __n,\n+    operator+(std::ptrdiff_t __n,\n \t      const _Rope_const_iterator<_CharT, _Alloc>& __x);\n \n   template<class _CharT, class _Alloc>\n@@ -381,21 +376,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const _Rope_const_iterator<_CharT, _Alloc>& __y);\n   \n   template<class _CharT, class _Alloc>\n-    ptrdiff_t\n+    std::ptrdiff_t\n     operator-(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n \t      const _Rope_const_iterator<_CharT, _Alloc>& __y);\n \n   template<class _CharT, class _Alloc>\n     _Rope_iterator<_CharT, _Alloc>\n-    operator-(const _Rope_iterator<_CharT, _Alloc>& __x, ptrdiff_t __n);\n+    operator-(const _Rope_iterator<_CharT, _Alloc>& __x, std::ptrdiff_t __n);\n \n   template<class _CharT, class _Alloc>\n     _Rope_iterator<_CharT, _Alloc>\n-    operator+(const _Rope_iterator<_CharT, _Alloc>& __x, ptrdiff_t __n);\n+    operator+(const _Rope_iterator<_CharT, _Alloc>& __x, std::ptrdiff_t __n);\n \n   template<class _CharT, class _Alloc>\n     _Rope_iterator<_CharT, _Alloc>\n-    operator+(ptrdiff_t __n, const _Rope_iterator<_CharT, _Alloc>& __x);\n+    operator+(std::ptrdiff_t __n, const _Rope_iterator<_CharT, _Alloc>& __x);\n \n   template<class _CharT, class _Alloc>\n     bool\n@@ -408,7 +403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const _Rope_iterator<_CharT, _Alloc>& __y);\n \n   template<class _CharT, class _Alloc>\n-    ptrdiff_t\n+    std::ptrdiff_t\n     operator-(const _Rope_iterator<_CharT, _Alloc>& __x,\n \t      const _Rope_iterator<_CharT, _Alloc>& __y);\n \n@@ -453,7 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct _Refcount_Base\n   {\n     // The type _RC_t\n-    typedef size_t _RC_t;\n+    typedef std::size_t _RC_t;\n     \n     // The data member _M_ref_count\n     volatile _RC_t _M_ref_count;\n@@ -548,6 +543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Rope_rep_base\n     : public _Alloc\n     {\n+      typedef std::size_t size_type;\n       typedef _Alloc allocator_type;\n \n       allocator_type\n@@ -562,17 +558,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_get_allocator() const\n       { return *static_cast<const _Alloc*>(this); }\n \n-      _Rope_rep_base(size_t __size, const allocator_type&)\n+      _Rope_rep_base(size_type __size, const allocator_type&)\n       : _M_size(__size) { }\n \n-      size_t _M_size;\n+      size_type _M_size;\n \n # define __ROPE_DEFINE_ALLOC(_Tp, __name) \\\n         typedef typename \\\n           _Alloc::template rebind<_Tp>::other __name##Alloc; \\\n-        static _Tp* __name##_allocate(size_t __n) \\\n+        static _Tp* __name##_allocate(size_type __n) \\\n           { return __name##Alloc().allocate(__n); } \\\n-        static void __name##_deallocate(_Tp *__p, size_t __n) \\\n+        static void __name##_deallocate(_Tp *__p, size_type __n) \\\n           { __name##Alloc().deallocate(__p, __n); }\n       __ROPE_DEFINE_ALLOCS(_Alloc)\n # undef __ROPE_DEFINE_ALLOC\n@@ -603,11 +599,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                         /* the same memory as the data field.       */\n       typedef typename _Rope_rep_base<_CharT, _Alloc>::allocator_type\n         allocator_type;\n+      typedef std::size_t size_type;\n \n       using _Rope_rep_base<_CharT, _Alloc>::get_allocator;\n       using _Rope_rep_base<_CharT, _Alloc>::_M_get_allocator;\n \n-      _Rope_RopeRep(__detail::_Tag __t, int __d, bool __b, size_t __size,\n+      _Rope_RopeRep(__detail::_Tag __t, int __d, bool __b, size_type __size,\n \t\t    const allocator_type& __a)\n       : _Rope_rep_base<_CharT, _Alloc>(__size, __a),\n #ifndef __GC\n@@ -626,7 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_incr () { }\n #endif\n       static void\n-      _S_free_string(__GC_CONST _CharT*, size_t __len,\n+      _S_free_string(__GC_CONST _CharT*, size_type __len,\n \t\t     allocator_type& __a);\n #define __STL_FREE_STRING(__s, __l, __a) _S_free_string(__s, __l, __a);\n                         // Deallocate data section of a leaf.\n@@ -688,17 +685,18 @@ protected:\n     struct _Rope_RopeLeaf\n     : public _Rope_RopeRep<_CharT, _Alloc>\n     {\n+      typedef std::size_t size_type;\n     public:\n       // Apparently needed by VC++\n       // The data fields of leaves are allocated with some\n       // extra space, to accommodate future growth and for basic\n       // character types, to hold a trailing eos character.\n       enum { _S_alloc_granularity = 8 };\n       \n-      static size_t\n-      _S_rounded_up_size(size_t __n)\n+      static size_type\n+      _S_rounded_up_size(size_type __n)\n       {\n-        size_t __size_with_eos;\n+        size_type __size_with_eos;\n \t\n         if (_S_is_basic_char_type((_CharT*)0))\n \t  __size_with_eos = __n + 1;\n@@ -708,8 +706,8 @@ protected:\n \treturn __size_with_eos;\n #else\n \t// Allow slop for in-place expansion.\n-\treturn ((__size_with_eos + size_t(_S_alloc_granularity) - 1)\n-\t\t&~ (size_t(_S_alloc_granularity) - 1));\n+\treturn ((__size_with_eos + size_type(_S_alloc_granularity) - 1)\n+\t\t&~ (size_type(_S_alloc_granularity) - 1));\n #endif\n       }\n       __GC_CONST _CharT* _M_data; /* Not necessarily 0 terminated. */\n@@ -720,7 +718,7 @@ protected:\n       typedef typename _Rope_rep_base<_CharT,_Alloc>::allocator_type\n         allocator_type;\n \n-      _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size,\n+      _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_type __size,\n \t\t     const allocator_type& __a)\n       : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_leaf, 0, true,\n \t\t\t\t      __size, __a), _M_data(__d)\n@@ -810,7 +808,7 @@ protected:\n     typedef typename _Rope_rep_base<_CharT, _Alloc>::allocator_type\n       allocator_type;\n \n-      _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,\n+      _Rope_RopeFunction(char_producer<_CharT>* __f, std::size_t __size,\n                         bool __d, const allocator_type& __a)\n       : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_function, 0, true, __size, __a)\n \t, _M_fn(__f)\n@@ -852,13 +850,14 @@ protected:\n     : public _Rope_RopeFunction<_CharT, _Alloc>,\n       public char_producer<_CharT>\n     {\n+      typedef std::size_t size_type;\n     public:\n       // XXX this whole class should be rewritten.\n       _Rope_RopeRep<_CharT,_Alloc>* _M_base;      // not 0\n-      size_t _M_start;\n+      size_type _M_start;\n \n       virtual void\n-      operator()(size_t __start_pos, size_t __req_len,\n+      operator()(size_type __start_pos, size_type __req_len,\n \t\t _CharT* __buffer)\n       {\n         switch(_M_base->_M_tag)\n@@ -887,8 +886,8 @@ protected:\n       typedef typename _Rope_rep_base<_CharT, _Alloc>::allocator_type\n         allocator_type;\n \n-      _Rope_RopeSubstring(_Rope_RopeRep<_CharT, _Alloc>* __b, size_t __s,\n-                          size_t __l, const allocator_type& __a)\n+      _Rope_RopeSubstring(_Rope_RopeRep<_CharT, _Alloc>* __b, size_type __s,\n+                          size_type __l, const allocator_type& __a)\n       : _Rope_RopeFunction<_CharT, _Alloc>(this, __l, false, __a),\n         char_producer<_CharT>(), _M_base(__b), _M_start(__s)\n       {\n@@ -966,12 +965,12 @@ protected:\n #endif\n       typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;\n       typedef rope<_CharT, _Alloc> _My_rope;\n-      size_t _M_pos;\n+      std::size_t _M_pos;\n       _CharT _M_current;\n       bool _M_current_valid;\n       _My_rope* _M_root;     // The whole rope.\n     public:\n-      _Rope_char_ref_proxy(_My_rope* __r, size_t __p)\n+      _Rope_char_ref_proxy(_My_rope* __r, std::size_t __p)\n       :  _M_pos(__p), _M_current(), _M_current_valid(false), _M_root(__r) { }\n \n       _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)\n@@ -982,7 +981,7 @@ protected:\n       // expression.  We claim that's not possible without calling\n       // a copy constructor or generating reference to a proxy\n       // reference.  We declare the latter to have undefined semantics.\n-      _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)\n+      _Rope_char_ref_proxy(_My_rope* __r, std::size_t __p, _CharT __c)\n       : _M_pos(__p), _M_current(__c), _M_current_valid(true), _M_root(__r) { }\n \n       inline operator _CharT () const;\n@@ -1012,7 +1011,7 @@ protected:\n     {\n       // XXX this class should be rewritten.\n       friend class _Rope_char_ref_proxy<_CharT, _Alloc>;\n-      size_t _M_pos;\n+      std::size_t _M_pos;\n       rope<_CharT,_Alloc>* _M_root;     // The whole rope.\n     public:\n       _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)\n@@ -1064,9 +1063,9 @@ protected:\n     protected:\n       enum { _S_path_cache_len = 4 }; // Must be <= 9.\n       enum { _S_iterator_buf_len = 15 };\n-      size_t _M_current_pos;\n+      std::size_t _M_current_pos;\n       _RopeRep* _M_root;     // The whole rope.\n-      size_t _M_leaf_pos;    // Starting position for current leaf\n+      std::size_t _M_leaf_pos; // Starting position for current leaf\n       __GC_CONST _CharT* _M_buf_start;\n                              // Buffer possibly\n                              // containing current char.\n@@ -1107,13 +1106,13 @@ protected:\n                                         // cache is valid for previous posn.\n       _Rope_iterator_base() { }\n \n-      _Rope_iterator_base(_RopeRep* __root, size_t __pos)\n+      _Rope_iterator_base(_RopeRep* __root, std::size_t __pos)\n       : _M_current_pos(__pos), _M_root(__root), _M_buf_ptr(0) { }\n \n-      void _M_incr(size_t __n);\n-      void _M_decr(size_t __n);\n+      void _M_incr(std::size_t __n);\n+      void _M_decr(std::size_t __n);\n     public:\n-      size_t\n+      std::size_t\n       index() const\n       { return _M_current_pos; }\n     \n@@ -1141,7 +1140,7 @@ protected:\n     protected:\n       typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;\n       // The one from the base class may not be directly visible.\n-      _Rope_const_iterator(const _RopeRep* __root, size_t __pos)\n+      _Rope_const_iterator(const _RopeRep* __root, std::size_t __pos)\n       : _Rope_iterator_base<_CharT, _Alloc>(const_cast<_RopeRep*>(__root),\n \t\t\t\t\t    __pos)\n                    // Only nonconst iterators modify root ref count\n@@ -1160,7 +1159,7 @@ protected:\n \n       _Rope_const_iterator(const _Rope_iterator<_CharT,_Alloc>& __x);\n     \n-      _Rope_const_iterator(const rope<_CharT, _Alloc>& __r, size_t __pos)\n+      _Rope_const_iterator(const rope<_CharT, _Alloc>& __r, std::size_t __pos)\n       : _Rope_iterator_base<_CharT,_Alloc>(__r._M_tree_ptr, __pos) { }\n \n       _Rope_const_iterator&\n@@ -1209,7 +1208,7 @@ protected:\n       }\n \n       _Rope_const_iterator&\n-      operator+=(ptrdiff_t __n)\n+      operator+=(std::ptrdiff_t __n)\n       {\n         if (__n >= 0)\n \t  this->_M_incr(__n);\n@@ -1226,7 +1225,7 @@ protected:\n       }\n \n       _Rope_const_iterator&\n-      operator-=(ptrdiff_t __n)\n+      operator-=(std::ptrdiff_t __n)\n       {\n         if (__n >= 0)\n \t  this->_M_decr(__n);\n@@ -1238,7 +1237,7 @@ protected:\n       _Rope_const_iterator\n       operator++(int)\n       {\n-        size_t __old_pos = this->_M_current_pos;\n+\tstd::size_t __old_pos = this->_M_current_pos;\n         this->_M_incr(1);\n         return _Rope_const_iterator<_CharT,_Alloc>(this->_M_root, __old_pos);\n         // This makes a subsequent dereference expensive.\n@@ -1249,28 +1248,28 @@ protected:\n       _Rope_const_iterator\n       operator--(int)\n       {\n-        size_t __old_pos = this->_M_current_pos;\n+\tstd::size_t __old_pos = this->_M_current_pos;\n         this->_M_decr(1);\n         return _Rope_const_iterator<_CharT,_Alloc>(this->_M_root, __old_pos);\n       }\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_const_iterator<_CharT2, _Alloc2>\n         operator-(const _Rope_const_iterator<_CharT2, _Alloc2>& __x,\n-\t\t  ptrdiff_t __n);\n+\t\t  std::ptrdiff_t __n);\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_const_iterator<_CharT2, _Alloc2>\n         operator+(const _Rope_const_iterator<_CharT2, _Alloc2>& __x,\n-\t\t  ptrdiff_t __n);\n+\t\t  std::ptrdiff_t __n);\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_const_iterator<_CharT2, _Alloc2>\n-        operator+(ptrdiff_t __n,\n+        operator+(std::ptrdiff_t __n,\n \t\t  const _Rope_const_iterator<_CharT2, _Alloc2>& __x);\n \n       reference\n-      operator[](size_t __n)\n+      operator[](std::size_t __n)\n       { return rope<_CharT, _Alloc>::_S_fetch(this->_M_root,\n \t\t\t\t\t      this->_M_current_pos + __n); }\n \n@@ -1285,7 +1284,7 @@ protected:\n \t\t  const _Rope_const_iterator<_CharT2, _Alloc2>& __y);\n \n       template<class _CharT2, class _Alloc2>\n-        friend ptrdiff_t\n+        friend std::ptrdiff_t\n         operator-(const _Rope_const_iterator<_CharT2, _Alloc2>& __x,\n \t\t  const _Rope_const_iterator<_CharT2, _Alloc2>& __y);\n     };\n@@ -1305,7 +1304,7 @@ protected:\n       // Root is included in the reference count.  This is necessary\n       // so that we can detect changes reliably.  Unfortunately, it\n       // requires careful bookkeeping for the nonGC case.\n-      _Rope_iterator(rope<_CharT, _Alloc>* __r, size_t __pos)\n+      _Rope_iterator(rope<_CharT, _Alloc>* __r, std::size_t __pos)\n       : _Rope_iterator_base<_CharT, _Alloc>(__r->_M_tree_ptr, __pos),\n         _M_root_rope(__r)\n       { _RopeRep::_S_ref(this->_M_root);\n@@ -1334,7 +1333,7 @@ protected:\n         _RopeRep::_S_ref(this->_M_root);\n       }\n \n-      _Rope_iterator(rope<_CharT, _Alloc>& __r, size_t __pos);\n+      _Rope_iterator(rope<_CharT, _Alloc>& __r, std::size_t __pos);\n \n       ~_Rope_iterator()\n       { _RopeRep::_S_unref(this->_M_root); }\n@@ -1389,7 +1388,7 @@ protected:\n       }\n \n       _Rope_iterator&\n-      operator+=(ptrdiff_t __n)\n+      operator+=(std::ptrdiff_t __n)\n       {\n         if (__n >= 0)\n \t  this->_M_incr(__n);\n@@ -1406,7 +1405,7 @@ protected:\n       }\n \n       _Rope_iterator&\n-      operator-=(ptrdiff_t __n)\n+      operator-=(std::ptrdiff_t __n)\n       {\n         if (__n >= 0)\n \t  this->_M_decr(__n);\n@@ -1418,21 +1417,21 @@ protected:\n       _Rope_iterator\n       operator++(int)\n       {\n-        size_t __old_pos = this->_M_current_pos;\n+\tstd::size_t __old_pos = this->_M_current_pos;\n         this->_M_incr(1);\n         return _Rope_iterator<_CharT,_Alloc>(_M_root_rope, __old_pos);\n       }\n \n       _Rope_iterator\n       operator--(int)\n       {\n-        size_t __old_pos = this->_M_current_pos;\n+\tstd::size_t __old_pos = this->_M_current_pos;\n         this->_M_decr(1);\n         return _Rope_iterator<_CharT,_Alloc>(_M_root_rope, __old_pos);\n       }\n \n       reference\n-      operator[](ptrdiff_t __n)\n+      operator[](std::ptrdiff_t __n)\n       { return _Rope_char_ref_proxy<_CharT, _Alloc>(_M_root_rope,\n \t\t\t\t\t\t    this->_M_current_pos\n \t\t\t\t\t\t    + __n); }\n@@ -1448,21 +1447,24 @@ protected:\n \t\t  const _Rope_iterator<_CharT2, _Alloc2>& __y);\n \n       template<class _CharT2, class _Alloc2>\n-        friend ptrdiff_t\n+        friend std::ptrdiff_t\n         operator-(const _Rope_iterator<_CharT2, _Alloc2>& __x,\n \t\t  const _Rope_iterator<_CharT2, _Alloc2>& __y);\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_iterator<_CharT2, _Alloc2>\n-        operator-(const _Rope_iterator<_CharT2, _Alloc2>& __x, ptrdiff_t __n);\n+        operator-(const _Rope_iterator<_CharT2, _Alloc2>& __x,\n+\t\t  std::ptrdiff_t __n);\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_iterator<_CharT2, _Alloc2>\n-        operator+(const _Rope_iterator<_CharT2, _Alloc2>& __x, ptrdiff_t __n);\n+        operator+(const _Rope_iterator<_CharT2, _Alloc2>& __x,\n+\t\t  std::ptrdiff_t __n);\n \n       template<class _CharT2, class _Alloc2>\n         friend _Rope_iterator<_CharT2, _Alloc2>\n-        operator+(ptrdiff_t __n, const _Rope_iterator<_CharT2, _Alloc2>& __x);\n+        operator+(std::ptrdiff_t __n,\n+\t\t  const _Rope_iterator<_CharT2, _Alloc2>& __x);\n     };\n \n \n@@ -1498,9 +1500,9 @@ protected:\n #define __ROPE_DEFINE_ALLOC(_Tp, __name) \\\n         typedef typename \\\n           _Alloc::template rebind<_Tp>::other __name##Alloc; \\\n-        static _Tp* __name##_allocate(size_t __n) \\\n+        static _Tp* __name##_allocate(std::size_t __n) \\\n           { return __name##Alloc().allocate(__n); } \\\n-        static void __name##_deallocate(_Tp *__p, size_t __n) \\\n+        static void __name##_deallocate(_Tp *__p, std::size_t __n) \\\n           { __name##Alloc().deallocate(__p, __n); }\n       __ROPE_DEFINE_ALLOCS(_Alloc)\n #undef __ROPE_DEFINE_ALLOC\n@@ -1522,8 +1524,8 @@ protected:\n     {\n     public:\n       typedef _CharT value_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef size_t size_type;\n+      typedef std::ptrdiff_t difference_type;\n+      typedef std::size_t size_type;\n       typedef _CharT const_reference;\n       typedef const _CharT* const_pointer;\n       typedef _Rope_iterator<_CharT, _Alloc> iterator;\n@@ -1580,7 +1582,7 @@ protected:\n       _S_apply_to_pieces(// should be template parameter\n \t\t\t _Rope_char_consumer<_CharT>& __c,\n \t\t\t const _RopeRep* __r,\n-\t\t\t size_t __begin, size_t __end);\n+\t\t\t size_type __begin, size_type __end);\n                          // begin and end are assumed to be in range.\n \n #ifndef __GC\n@@ -1605,16 +1607,17 @@ protected:\n \n       // _Result is counted in refcount.\n       static _RopeRep* _S_substring(_RopeRep* __base,\n-                                    size_t __start, size_t __endp1);\n+                                    size_type __start, size_type __endp1);\n \n       static _RopeRep* _S_concat_char_iter(_RopeRep* __r,\n-\t\t\t\t\t   const _CharT* __iter, size_t __slen);\n+\t\t\t\t\t   const _CharT* __iter,\n+\t\t\t\t\t   size_type __slen);\n       // Concatenate rope and char ptr, copying __s.\n       // Should really take an arbitrary iterator.\n       // Result is counted in refcount.\n       static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,\n \t\t\t\t\t\t const _CharT* __iter,\n-\t\t\t\t\t\t size_t __slen)\n+\t\t\t\t\t\t size_type __slen)\n \t// As above, but one reference to __r is about to be\n \t// destroyed.  Thus the pieces may be recycled if all\n \t// relevant reference counts are 1.\n@@ -1631,18 +1634,18 @@ protected:\n \n    public:\n       void\n-      apply_to_pieces(size_t __begin, size_t __end,\n+      apply_to_pieces(size_type __begin, size_type __end,\n \t\t      _Rope_char_consumer<_CharT>& __c) const\n       { _S_apply_to_pieces(__c, this->_M_tree_ptr, __begin, __end); }\n \n    protected:\n \n-      static size_t\n-      _S_rounded_up_size(size_t __n)\n+      static size_type\n+      _S_rounded_up_size(size_type __n)\n       { return _RopeLeaf::_S_rounded_up_size(__n); }\n \n-      static size_t\n-      _S_allocated_capacity(size_t __n)\n+      static size_type\n+      _S_allocated_capacity(size_type __n)\n       {\n \tif (_S_is_basic_char_type((_CharT*)0))\n \t  return _S_rounded_up_size(__n) - 1;\n@@ -1655,7 +1658,7 @@ protected:\n       // Takes ownership of s instead of copying.\n       static _RopeLeaf*\n       _S_new_RopeLeaf(__GC_CONST _CharT *__s,\n-\t\t      size_t __size, allocator_type& __a)\n+\t\t      size_type __size, allocator_type& __a)\n       {\n \t_RopeLeaf* __space = typename _Base::_LAlloc(__a).allocate(1);\n \treturn new(__space) _RopeLeaf(__s, __size, __a);\n@@ -1671,23 +1674,23 @@ protected:\n \n       static _RopeFunction*\n       _S_new_RopeFunction(char_producer<_CharT>* __f,\n-\t\t\t  size_t __size, bool __d, allocator_type& __a)\n+\t\t\t  size_type __size, bool __d, allocator_type& __a)\n       {\n \t_RopeFunction* __space = typename _Base::_FAlloc(__a).allocate(1);\n \treturn new(__space) _RopeFunction(__f, __size, __d, __a);\n       }\n \n       static _RopeSubstring*\n-      _S_new_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,\n-\t\t\t   size_t __l, allocator_type& __a)\n+      _S_new_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_type __s,\n+\t\t\t   size_type __l, allocator_type& __a)\n       {\n \t_RopeSubstring* __space = typename _Base::_SAlloc(__a).allocate(1);\n \treturn new(__space) _RopeSubstring(__b, __s, __l, __a);\n       }\n       \n       static _RopeLeaf*\n       _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,\n-\t\t\t\t\tsize_t __size, allocator_type& __a)\n+\t\t\t\t\tsize_type __size, allocator_type& __a)\n #define __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __size, __a) \\\n                 _S_RopeLeaf_from_unowned_char_ptr(__s, __size, __a)\n       {\n@@ -1718,20 +1721,20 @@ protected:\n       // Concatenation helper functions\n       static _RopeLeaf*\n       _S_leaf_concat_char_iter(_RopeLeaf* __r,\n-\t\t\t       const _CharT* __iter, size_t __slen);\n+\t\t\t       const _CharT* __iter, size_type __slen);\n       // Concatenate by copying leaf.\n       // should take an arbitrary iterator\n       // result has refcount 1.\n #ifndef __GC\n       static _RopeLeaf*\n       _S_destr_leaf_concat_char_iter(_RopeLeaf* __r,\n-\t\t\t\t     const _CharT* __iter, size_t __slen);\n+\t\t\t\t     const _CharT* __iter, size_type __slen);\n       // A version that potentially clobbers __r if __r->_M_ref_count == 1.\n #endif\n \n     private:\n       \n-      static size_t _S_char_ptr_len(const _CharT* __s);\n+      static size_type _S_char_ptr_len(const _CharT* __s);\n       // slightly generalized strlen\n \n       rope(_RopeRep* __t, const allocator_type& __a = allocator_type())\n@@ -1746,7 +1749,7 @@ protected:\n       // Again, with explicit starting position and length.\n       // Assumes that buffer is uninitialized.\n       static _CharT* _S_flatten(_RopeRep* __r,\n-\t\t\t\tsize_t __start, size_t __len,\n+\t\t\t\tsize_type __start, size_type __len,\n \t\t\t\t_CharT* __buffer);\n \n       static const unsigned long\n@@ -1816,7 +1819,7 @@ protected:\n \t\t\t\t\t   _M_get_allocator());\n       }\n \n-      rope(const _CharT* __s, size_t __len,\n+      rope(const _CharT* __s, size_type __len,\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n       {\n@@ -1865,14 +1868,14 @@ protected:\n \t  }\n       }\n \n-      rope(size_t __n, _CharT __c,\n+      rope(size_type __n, _CharT __c,\n \t   const allocator_type& __a = allocator_type());\n \n       rope(const allocator_type& __a = allocator_type())\n       : _Base(0, __a) { }\n \n       // Construct a rope from a function that can compute its members\n-      rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,\n+      rope(char_producer<_CharT> *__fn, size_type __len, bool __delete_fn,\n \t   const allocator_type& __a = allocator_type())\n       : _Base(__a)\n       {\n@@ -1982,8 +1985,8 @@ protected:\n       size_type\n       copy(size_type __pos, size_type __n, _CharT* __buffer) const\n       {\n-\tsize_t __size = size();\n-\tsize_t __len = (__pos + __n > __size? __size - __pos : __n);\n+\tsize_type __size = size();\n+\tsize_type __len = (__pos + __n > __size? __size - __pos : __n);\n \n \t_Destroy_const(__buffer, __buffer + __len, _M_get_allocator());\n \t_S_flatten(this->_M_tree_ptr, __pos, __len, __buffer);\n@@ -2108,7 +2111,7 @@ protected:\n       // argument should be an input iterator or forward iterator with\n       // value_type _CharT.\n       rope&\n-      append(const _CharT* __iter, size_t __n)\n+      append(const _CharT* __iter, size_type __n)\n       {\n \t_RopeRep* __result =\n \t  _S_destr_concat_char_iter(this->_M_tree_ptr, __iter, __n);\n@@ -2120,7 +2123,7 @@ protected:\n       rope&\n       append(const _CharT* __c_string)\n       {\n-\tsize_t __len = _S_char_ptr_len(__c_string);\n+\tsize_type __len = _S_char_ptr_len(__c_string);\n \tappend(__c_string, __len);\n \treturn(*this);\n       }\n@@ -2172,7 +2175,7 @@ protected:\n       }\n \n       rope&\n-      append(size_t __n, _CharT __c)\n+      append(size_type __n, _CharT __c)\n       {\n \trope<_CharT,_Alloc> __last(__n, __c);\n \treturn append(__last);\n@@ -2189,8 +2192,8 @@ protected:\n     protected:\n       // Result is included in refcount.\n       static _RopeRep*\n-      replace(_RopeRep* __old, size_t __pos1,\n-\t      size_t __pos2, _RopeRep* __r)\n+      replace(_RopeRep* __old, size_type __pos1,\n+\t      size_type __pos2, _RopeRep* __r)\n       {\n \tif (0 == __old)\n \t  {\n@@ -2213,7 +2216,7 @@ protected:\n \n     public:\n       void\n-      insert(size_t __p, const rope& __r)\n+      insert(size_type __p, const rope& __r)\n       {\n \t_RopeRep* __result =\n \t  replace(this->_M_tree_ptr, __p, __p, __r._M_tree_ptr);\n@@ -2222,14 +2225,14 @@ protected:\n       }\n \n       void\n-      insert(size_t __p, size_t __n, _CharT __c)\n+      insert(size_type __p, size_type __n, _CharT __c)\n       {\n \trope<_CharT,_Alloc> __r(__n,__c);\n \tinsert(__p, __r);\n       }\n       \n       void\n-      insert(size_t __p, const _CharT* __i, size_t __n)\n+      insert(size_type __p, const _CharT* __i, size_type __n)\n       {\n \t_Self_destruct_ptr __left(_S_substring(this->_M_tree_ptr, 0, __p));\n \t_Self_destruct_ptr __right(_S_substring(this->_M_tree_ptr,\n@@ -2244,37 +2247,37 @@ protected:\n       }\n \n       void\n-      insert(size_t __p, const _CharT* __c_string)\n+      insert(size_type __p, const _CharT* __c_string)\n       {\tinsert(__p, __c_string, _S_char_ptr_len(__c_string)); }\n \n       void\n-      insert(size_t __p, _CharT __c)\n+      insert(size_type __p, _CharT __c)\n       { insert(__p, &__c, 1); }\n \n       void\n-      insert(size_t __p)\n+      insert(size_type __p)\n       {\n \t_CharT __c = _CharT();\n \tinsert(__p, &__c, 1);\n       }\n \n       void\n-      insert(size_t __p, const _CharT* __i, const _CharT* __j)\n+      insert(size_type __p, const _CharT* __i, const _CharT* __j)\n       {\n \trope __r(__i, __j);\n \tinsert(__p, __r);\n       }\n \n       void\n-      insert(size_t __p, const const_iterator& __i,\n+      insert(size_type __p, const const_iterator& __i,\n \t     const const_iterator& __j)\n       {\n \trope __r(__i, __j);\n \tinsert(__p, __r);\n       }\n \n       void\n-      insert(size_t __p, const iterator& __i,\n+      insert(size_type __p, const iterator& __i,\n \t     const iterator& __j)\n       {\n \trope __r(__i, __j);\n@@ -2284,7 +2287,7 @@ protected:\n       // (position, length) versions of replace operations:\n       \n       void\n-      replace(size_t __p, size_t __n, const rope& __r)\n+      replace(size_type __p, size_type __n, const rope& __r)\n       {\n \t_RopeRep* __result =\n \t  replace(this->_M_tree_ptr, __p, __p + __n, __r._M_tree_ptr);\n@@ -2293,45 +2296,45 @@ protected:\n       }\n \n       void\n-      replace(size_t __p, size_t __n,\n-\t      const _CharT* __i, size_t __i_len)\n+      replace(size_type __p, size_type __n,\n+\t      const _CharT* __i, size_type __i_len)\n       {\n \trope __r(__i, __i_len);\n \treplace(__p, __n, __r);\n       }\n \n       void\n-      replace(size_t __p, size_t __n, _CharT __c)\n+      replace(size_type __p, size_type __n, _CharT __c)\n       {\n \trope __r(__c);\n \treplace(__p, __n, __r);\n       }\n \n       void\n-      replace(size_t __p, size_t __n, const _CharT* __c_string)\n+      replace(size_type __p, size_type __n, const _CharT* __c_string)\n       {\n \trope __r(__c_string);\n \treplace(__p, __n, __r);\n       }\n       \n       void\n-      replace(size_t __p, size_t __n,\n+      replace(size_type __p, size_type __n,\n \t      const _CharT* __i, const _CharT* __j)\n       {\n \trope __r(__i, __j);\n \treplace(__p, __n, __r);\n       }\n       \n       void\n-      replace(size_t __p, size_t __n,\n+      replace(size_type __p, size_type __n,\n \t      const const_iterator& __i, const const_iterator& __j)\n       {\n \trope __r(__i, __j);\n \treplace(__p, __n, __r);\n       }\n \n       void\n-      replace(size_t __p, size_t __n,\n+      replace(size_type __p, size_type __n,\n \t      const iterator& __i, const iterator& __j)\n       {\n \trope __r(__i, __j);\n@@ -2340,41 +2343,41 @@ protected:\n \n       // Single character variants:\n       void\n-      replace(size_t __p, _CharT __c)\n+      replace(size_type __p, _CharT __c)\n       {\n \titerator __i(this, __p);\n \t*__i = __c;\n       }\n \n       void\n-      replace(size_t __p, const rope& __r)\n+      replace(size_type __p, const rope& __r)\n       { replace(__p, 1, __r); }\n \n       void\n-      replace(size_t __p, const _CharT* __i, size_t __i_len)\n+      replace(size_type __p, const _CharT* __i, size_type __i_len)\n       { replace(__p, 1, __i, __i_len); }\n \n       void\n-      replace(size_t __p, const _CharT* __c_string)\n+      replace(size_type __p, const _CharT* __c_string)\n       {\treplace(__p, 1, __c_string); }\n \n       void\n-      replace(size_t __p, const _CharT* __i, const _CharT* __j)\n+      replace(size_type __p, const _CharT* __i, const _CharT* __j)\n       {\treplace(__p, 1, __i, __j); }\n \n       void\n-      replace(size_t __p, const const_iterator& __i,\n+      replace(size_type __p, const const_iterator& __i,\n \t      const const_iterator& __j)\n       { replace(__p, 1, __i, __j); }\n \n       void\n-      replace(size_t __p, const iterator& __i,\n+      replace(size_type __p, const iterator& __i,\n \t      const iterator& __j)\n       { replace(__p, 1, __i, __j); }\n \n       // Erase, (position, size) variant.\n       void\n-      erase(size_t __p, size_t __n)\n+      erase(size_type __p, size_type __n)\n       {\n \t_RopeRep* __result = replace(this->_M_tree_ptr, __p,\n \t\t\t\t     __p + __n, 0);\n@@ -2384,7 +2387,7 @@ protected:\n \n       // Erase, single character\n       void\n-      erase(size_t __p)\n+      erase(size_type __p)\n       { erase(__p, __p + 1); }\n \n       // Insert, iterator variants.\n@@ -2396,7 +2399,7 @@ protected:\n       }\n \n       iterator\n-      insert(const iterator& __p, size_t __n, _CharT __c)\n+      insert(const iterator& __p, size_type __n, _CharT __c)\n       {\n \tinsert(__p.index(), __n, __c);\n \treturn __p;\n@@ -2423,7 +2426,7 @@ protected:\n       }\n       \n       iterator\n-      insert(const iterator& __p, const _CharT* __i, size_t __n)\n+      insert(const iterator& __p, const _CharT* __i, size_type __n)\n       {\n \tinsert(__p.index(), __i, __n);\n \treturn __p;\n@@ -2469,7 +2472,7 @@ protected:\n       \n       void\n       replace(const iterator& __p, const iterator& __q,\n-\t      const _CharT* __i, size_t __n)\n+\t      const _CharT* __i, size_type __n)\n       { replace(__p.index(), __q.index() - __p.index(), __i, __n); }\n       \n       void\n@@ -2501,7 +2504,7 @@ protected:\n       { replace(__p.index(), __c_string); }\n       \n       void\n-      replace(const iterator& __p, const _CharT* __i, size_t __n)\n+      replace(const iterator& __p, const _CharT* __i, size_type __n)\n       { replace(__p.index(), __i, __n); }\n       \n       void\n@@ -2520,21 +2523,21 @@ protected:\n       iterator\n       erase(const iterator& __p, const iterator& __q)\n       {\n-\tsize_t __p_index = __p.index();\n+\tsize_type __p_index = __p.index();\n \terase(__p_index, __q.index() - __p_index);\n \treturn iterator(this, __p_index);\n       }\n \n       iterator\n       erase(const iterator& __p)\n       {\n-\tsize_t __p_index = __p.index();\n+\tsize_type __p_index = __p.index();\n \terase(__p_index, 1);\n \treturn iterator(this, __p_index);\n       }\n \n       rope\n-      substr(size_t __start, size_t __len = 1) const\n+      substr(size_type __start, size_type __len = 1) const\n       {\n \treturn rope<_CharT, _Alloc>(_S_substring(this->_M_tree_ptr,\n \t\t\t\t\t\t __start,\n@@ -2552,7 +2555,7 @@ protected:\n       rope\n       substr(iterator __start) const\n       {\n-\tsize_t __pos = __start.index();\n+\tsize_type __pos = __start.index();\n \treturn rope<_CharT, _Alloc>(_S_substring(this->_M_tree_ptr,\n \t\t\t\t\t\t __pos, __pos + 1));\n       }\n@@ -2570,7 +2573,7 @@ protected:\n       rope<_CharT, _Alloc>\n       substr(const_iterator __start)\n       {\n-\tsize_t __pos = __start.index();\n+\tsize_type __pos = __start.index();\n \treturn rope<_CharT, _Alloc>(_S_substring(this->_M_tree_ptr,\n \t\t\t\t\t\t __pos, __pos + 1));\n       }\n@@ -2718,26 +2721,32 @@ protected:\n     { return !(__x < __y); }\n \n   template <class _CharT, class _Alloc>\n-    inline ptrdiff_t\n+    inline std::ptrdiff_t\n     operator-(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n \t      const _Rope_const_iterator<_CharT, _Alloc>& __y)\n-    { return (ptrdiff_t)__x._M_current_pos - (ptrdiff_t)__y._M_current_pos; }\n+    {\n+      return (std::ptrdiff_t)__x._M_current_pos\n+\t- (std::ptrdiff_t)__y._M_current_pos;\n+    }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_const_iterator<_CharT, _Alloc>\n-    operator-(const _Rope_const_iterator<_CharT, _Alloc>& __x, ptrdiff_t __n)\n+    operator-(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n+\t      std::ptrdiff_t __n)\n     { return _Rope_const_iterator<_CharT, _Alloc>(__x._M_root,\n \t\t\t\t\t\t  __x._M_current_pos - __n); }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_const_iterator<_CharT, _Alloc>\n-    operator+(const _Rope_const_iterator<_CharT, _Alloc>& __x, ptrdiff_t __n)\n+    operator+(const _Rope_const_iterator<_CharT, _Alloc>& __x,\n+\t      std::ptrdiff_t __n)\n     { return _Rope_const_iterator<_CharT, _Alloc>(__x._M_root,\n \t\t\t\t\t\t  __x._M_current_pos + __n); }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_const_iterator<_CharT, _Alloc>\n-    operator+(ptrdiff_t __n, const _Rope_const_iterator<_CharT, _Alloc>& __x)\n+    operator+(std::ptrdiff_t __n,\n+\t      const _Rope_const_iterator<_CharT, _Alloc>& __x)\n   { return _Rope_const_iterator<_CharT, _Alloc>(__x._M_root,\n \t\t\t\t\t\t__x._M_current_pos + __n); }\n \n@@ -2779,28 +2788,28 @@ protected:\n     { return !(__x < __y); }\n \n   template <class _CharT, class _Alloc>\n-    inline ptrdiff_t\n+    inline std::ptrdiff_t\n     operator-(const _Rope_iterator<_CharT, _Alloc>& __x,\n \t      const _Rope_iterator<_CharT, _Alloc>& __y)\n-    { return ((ptrdiff_t)__x._M_current_pos\n-\t      - (ptrdiff_t)__y._M_current_pos); }\n+    { return ((std::ptrdiff_t)__x._M_current_pos\n+\t      - (std::ptrdiff_t)__y._M_current_pos); }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_iterator<_CharT, _Alloc>\n     operator-(const _Rope_iterator<_CharT, _Alloc>& __x,\n-\t      ptrdiff_t __n)\n+\t      std::ptrdiff_t __n)\n     { return _Rope_iterator<_CharT, _Alloc>(__x._M_root_rope,\n \t\t\t\t\t    __x._M_current_pos - __n); }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_iterator<_CharT, _Alloc>\n-    operator+(const _Rope_iterator<_CharT, _Alloc>& __x, ptrdiff_t __n)\n+    operator+(const _Rope_iterator<_CharT, _Alloc>& __x, std::ptrdiff_t __n)\n     { return _Rope_iterator<_CharT, _Alloc>(__x._M_root_rope,\n \t\t\t\t\t    __x._M_current_pos + __n); }\n \n   template <class _CharT, class _Alloc>\n     inline _Rope_iterator<_CharT, _Alloc>\n-    operator+(ptrdiff_t __n, const _Rope_iterator<_CharT, _Alloc>& __x)\n+    operator+(std::ptrdiff_t __n, const _Rope_iterator<_CharT, _Alloc>& __x)\n     { return _Rope_iterator<_CharT, _Alloc>(__x._M_root_rope,\n \t\t\t\t\t    __x._M_current_pos + __n); }\n \n@@ -2831,7 +2840,7 @@ protected:\n \t      const _CharT* __right)\n     {\n       typedef rope<_CharT, _Alloc> rope_type;\n-      size_t __rlen = rope_type::_S_char_ptr_len(__right);\n+      std::size_t __rlen = rope_type::_S_char_ptr_len(__right);\n       return rope_type(rope_type::_S_concat_char_iter(__left._M_tree_ptr,\n \t\t\t\t\t\t      __right, __rlen));\n     }\n@@ -2919,11 +2928,11 @@ protected:\n   typedef rope<wchar_t> wrope;\n \n   inline crope::reference\n-  __mutable_reference_at(crope& __c, size_t __i)\n+  __mutable_reference_at(crope& __c, std::size_t __i)\n   { return __c.mutable_reference_at(__i); }\n \n   inline wrope::reference\n-  __mutable_reference_at(wrope& __c, size_t __i)\n+  __mutable_reference_at(wrope& __c, std::size_t __i)\n   { return __c.mutable_reference_at(__i); }\n \n   template <class _CharT, class _Alloc>"}, {"sha": "d321522d4b543c53f2ef6be0ce348a08c49b5c15", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 63, "deletions": 55, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -52,13 +52,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::printf;\n-  using std::basic_ostream;\n-  using std::__throw_length_error;\n-  using std::_Destroy;\n-  using std::__uninitialized_fill_n_a;\n-\n   // Set buf_start, buf_end, and buf_ptr appropriately, filling tmp_buf\n   // if necessary.  Assumes _M_path_end[leaf_index] and leaf_pos are correct.\n   // Results in a valid buf_ptr if the iterator can be legitimately\n@@ -68,6 +61,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rope_iterator_base<_CharT, _Alloc>::\n     _S_setbuf(_Rope_iterator_base<_CharT, _Alloc>& __x)\n     {\n+      using std::size_t;\n       const _RopeRep* __leaf = __x._M_path_end[__x._M_leaf_index];\n       size_t __leaf_pos = __x._M_leaf_pos;\n       size_t __pos = __x._M_current_pos;\n@@ -113,6 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rope_iterator_base<_CharT, _Alloc>::\n     _S_setcache(_Rope_iterator_base<_CharT, _Alloc>& __x)\n     {\n+      using std::size_t;\n       const _RopeRep* __path[int(__detail::_S_max_rope_depth) + 1];\n       const _RopeRep* __curr_rope;\n       int __curr_depth = -1;  /* index into path    */\n@@ -190,6 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rope_iterator_base<_CharT, _Alloc>::\n     _S_setcache_for_incr(_Rope_iterator_base<_CharT, _Alloc>& __x)\n     {\n+      using std::size_t;\n       int __current_index = __x._M_leaf_index;\n       const _RopeRep* __current_node = __x._M_path_end[__current_index];\n       size_t __len = __current_node->_M_size;\n@@ -255,12 +251,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     void\n     _Rope_iterator_base<_CharT, _Alloc>::\n-    _M_incr(size_t __n)\n+    _M_incr(std::size_t __n)\n     {\n       _M_current_pos += __n;\n       if (0 != _M_buf_ptr)\n \t{\n-\t  size_t __chars_left = _M_buf_end - _M_buf_ptr;\n+\t  std::size_t __chars_left = _M_buf_end - _M_buf_ptr;\n \t  if (__chars_left > __n)\n \t    _M_buf_ptr += __n;\n \t  else if (__chars_left == __n)\n@@ -276,11 +272,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     void\n     _Rope_iterator_base<_CharT, _Alloc>::\n-    _M_decr(size_t __n)\n+    _M_decr(std::size_t __n)\n     {\n       if (0 != _M_buf_ptr)\n \t{\n-\t  size_t __chars_left = _M_buf_ptr - _M_buf_start;\n+\t  std::size_t __chars_left = _M_buf_ptr - _M_buf_start;\n \t  if (__chars_left >= __n)\n \t    _M_buf_ptr -= __n;\n \t  else\n@@ -314,13 +310,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     inline\n     _Rope_iterator<_CharT, _Alloc>::\n-    _Rope_iterator(rope<_CharT, _Alloc>& __r, size_t __pos)\n+    _Rope_iterator(rope<_CharT, _Alloc>& __r, std::size_t __pos)\n     : _Rope_iterator_base<_CharT,_Alloc>(__r._M_tree_ptr, __pos),\n       _M_root_rope(&__r)\n     { _RopeRep::_S_ref(this->_M_root); }\n \n   template <class _CharT, class _Alloc>\n-    inline size_t\n+    inline std::size_t\n     rope<_CharT, _Alloc>::\n     _S_char_ptr_len(const _CharT* __s)\n     {\n@@ -342,19 +338,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _CharT* __cstr = _M_c_string;\n       if (0 != __cstr)\n \t{\n-\t  size_t __size = this->_M_size + 1;\n-\t  _Destroy(__cstr, __cstr + __size, _M_get_allocator());\n+\t  std::size_t __size = this->_M_size + 1;\n+\t  std::_Destroy(__cstr, __cstr + __size, _M_get_allocator());\n \t  this->_Data_deallocate(__cstr, __size);\n \t}\n     }\n \n   template <class _CharT, class _Alloc>\n     inline void\n     _Rope_RopeRep<_CharT, _Alloc>::\n-    _S_free_string(_CharT* __s, size_t __n, allocator_type& __a)\n+    _S_free_string(_CharT* __s, std::size_t __n, allocator_type& __a)\n     {\n       if (!_S_is_basic_char_type((_CharT*)0))\n-\t_Destroy(__s, __s + __n, __a);\n+\tstd::_Destroy(__s, __s + __n, __a);\n       \n       //  This has to be a static member, so this gets a bit messy\n       __a.deallocate(__s,\n@@ -415,7 +411,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     inline void\n     _Rope_RopeRep<_CharT, _Alloc>::\n-    _S_free_string(const _CharT*, size_t, allocator_type)\n+    _S_free_string(const _CharT*, std::size_t, allocator_type)\n     { }\n \n #endif\n@@ -425,9 +421,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     typename rope<_CharT, _Alloc>::_RopeLeaf*\n     rope<_CharT, _Alloc>::\n-    _S_leaf_concat_char_iter(_RopeLeaf* __r, const _CharT* __iter, size_t __len)\n+    _S_leaf_concat_char_iter(_RopeLeaf* __r, const _CharT* __iter,\n+\t\t\t     std::size_t __len)\n     {\n-      size_t __old_len = __r->_M_size;\n+      std::size_t __old_len = __r->_M_size;\n       _CharT* __new_data = (_CharT*)\n \trope::_Data_allocate(_S_rounded_up_size(__old_len + __len));\n       _RopeLeaf* __result;\n@@ -455,11 +452,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename rope<_CharT,_Alloc>::_RopeLeaf*\n     rope<_CharT, _Alloc>::\n     _S_destr_leaf_concat_char_iter(_RopeLeaf* __r, const _CharT* __iter,\n-\t\t\t\t   size_t __len)\n+\t\t\t\t   std::size_t __len)\n     {\n       if (__r->_M_ref_count > 1)\n \treturn _S_leaf_concat_char_iter(__r, __iter, __len);\n-      size_t __old_len = __r->_M_size;\n+      std::size_t __old_len = __r->_M_size;\n       if (_S_allocated_capacity(__old_len) >= __old_len + __len)\n \t{\n \t  // The space has been partially initialized for the standard\n@@ -492,6 +489,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rope<_CharT, _Alloc>::\n     _S_tree_concat(_RopeRep* __left, _RopeRep* __right)\n     {\n+      using std::size_t;\n       _RopeConcatenation* __result = _S_new_RopeConcatenation(__left, __right,\n \t\t\t\t\t\t\t      __left->\n \t\t\t\t\t\t\t      _M_get_allocator());\n@@ -526,8 +524,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     typename rope<_CharT, _Alloc>::_RopeRep*\n     rope<_CharT, _Alloc>::\n-    _S_concat_char_iter(_RopeRep* __r, const _CharT*__s, size_t __slen)\n+    _S_concat_char_iter(_RopeRep* __r, const _CharT*__s, std::size_t __slen)\n     {\n+      using std::size_t;\n       _RopeRep* __result;\n       if (0 == __slen)\n \t{\n@@ -585,8 +584,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     typename rope<_CharT,_Alloc>::_RopeRep*\n     rope<_CharT,_Alloc>::\n-    _S_destr_concat_char_iter(_RopeRep* __r, const _CharT* __s, size_t __slen)\n+    _S_destr_concat_char_iter(_RopeRep* __r, const _CharT* __s,\n+\t\t\t      std::size_t __slen)\n     {\n+      using std::size_t;\n       _RopeRep* __result;\n       if (0 == __r)\n \treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n@@ -651,6 +652,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rope<_CharT, _Alloc>::\n     _S_concat(_RopeRep* __left, _RopeRep* __right)\n     {\n+      using std::size_t;\n       if (0 == __left)\n \t{\n \t  _S_ref(__right);\n@@ -712,8 +714,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     typename rope<_CharT, _Alloc>::_RopeRep*\n     rope<_CharT, _Alloc>::\n-    _S_substring(_RopeRep* __base, size_t __start, size_t __endp1)\n+    _S_substring(_RopeRep* __base, std::size_t __start, std::size_t __endp1)\n     {\n+      using std::size_t;\n       if (0 == __base)\n \treturn 0;\n       size_t __len = __base->_M_size;\n@@ -849,7 +852,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~_Rope_flatten_char_consumer() {}\n       \n       bool\n-      operator()(const _CharT* __leaf, size_t __n)\n+      operator()(const _CharT* __leaf, std::size_t __n)\n       {\n \tuninitialized_copy_n(__leaf, __n, _M_buf_ptr);\n \t_M_buf_ptr += __n;\n@@ -864,17 +867,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       _CharT _M_pattern;\n     public:\n-      size_t _M_count;  // Number of nonmatching characters\n+      std::size_t _M_count;  // Number of nonmatching characters\n       \n       _Rope_find_char_char_consumer(_CharT __p)\n       : _M_pattern(__p), _M_count(0) {}\n \t\n       ~_Rope_find_char_char_consumer() {}\n       \n       bool\n-      operator()(const _CharT* __leaf, size_t __n)\n+      operator()(const _CharT* __leaf, std::size_t __n)\n       {\n-\tsize_t __i;\n+\tstd::size_t __i;\n \tfor (__i = 0; __i < __n; __i++)\n \t  {\n \t    if (__leaf[__i] == _M_pattern)\n@@ -893,23 +896,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public _Rope_char_consumer<_CharT>\n     {\n     private:\n-      typedef basic_ostream<_CharT,_Traits> _Insert_ostream;\n+      typedef std::basic_ostream<_CharT,_Traits> _Insert_ostream;\n       _Insert_ostream& _M_o;\n     public:\n       _Rope_insert_char_consumer(_Insert_ostream& __writer)\n \t: _M_o(__writer) {}\n       ~_Rope_insert_char_consumer() { }\n       // Caller is presumed to own the ostream\n-      bool operator() (const _CharT* __leaf, size_t __n);\n+      bool operator() (const _CharT* __leaf, std::size_t __n);\n       // Returns true to continue traversal.\n     };\n \n   template<class _CharT, class _Traits>\n     bool\n     _Rope_insert_char_consumer<_CharT, _Traits>::\n-    operator()(const _CharT* __leaf, size_t __n)\n+    operator()(const _CharT* __leaf, std::size_t __n)\n     {\n-      size_t __i;\n+      std::size_t __i;\n       //  We assume that formatting is set up correctly for each element.\n       for (__i = 0; __i < __n; __i++)\n \t_M_o.put(__leaf[__i]);\n@@ -919,9 +922,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     bool\n     rope<_CharT, _Alloc>::\n-    _S_apply_to_pieces(_Rope_char_consumer<_CharT>& __c,\n-\t\t       const _RopeRep* __r, size_t __begin, size_t __end)\n+    _S_apply_to_pieces(_Rope_char_consumer<_CharT>& __c, const _RopeRep* __r,\n+\t\t       std::size_t __begin, std::size_t __end)\n     {\n+      using std::size_t;\n       if (0 == __r)\n \treturn true;\n       switch(__r->_M_tag)\n@@ -981,10 +985,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<class _CharT, class _Traits>\n     inline void\n-    _Rope_fill(basic_ostream<_CharT, _Traits>& __o, size_t __n)\n+    _Rope_fill(std::basic_ostream<_CharT, _Traits>& __o, std::size_t __n)\n     {\n       char __f = __o.fill();\n-      size_t __i;\n+      std::size_t __i;\n       \n       for (__i = 0; __i < __n; __i++)\n \t__o.put(__f);\n@@ -1005,10 +1009,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return true; }\n \n   template<class _CharT, class _Traits, class _Alloc>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __o,\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __o,\n \t       const rope<_CharT, _Alloc>& __r)\n     {\n+      using std::size_t;\n       size_t __w = __o.width();\n       bool __left = bool(__o.flags() & std::ios::left);\n       size_t __pad_len;\n@@ -1045,7 +1050,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <class _CharT, class _Alloc>\n     _CharT*\n     rope<_CharT, _Alloc>::\n-    _S_flatten(_RopeRep* __r, size_t __start, size_t __len,\n+    _S_flatten(_RopeRep* __r, std::size_t __start, std::size_t __len,\n \t       _CharT* __buffer)\n     {\n       _Rope_flatten_char_consumer<_CharT> __c(__buffer);\n@@ -1054,9 +1059,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template <class _CharT, class _Alloc>\n-    size_t\n+    std::size_t\n     rope<_CharT, _Alloc>::\n-    find(_CharT __pattern, size_t __start) const\n+    find(_CharT __pattern, std::size_t __start) const\n     {\n       _Rope_find_char_char_consumer<_CharT> __c(__pattern);\n       _S_apply_to_pieces(__c, this->_M_tree_ptr, __start, size());\n@@ -1110,6 +1115,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rope<_CharT, _Alloc>::\n     _S_dump(_RopeRep* __r, int __indent)\n     {\n+      using std::printf;\n       for (int __i = 0; __i < __indent; __i++)\n \tputchar(' ');\n       if (0 == __r)\n@@ -1236,7 +1242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       \n       if (__result->_M_depth > int(__detail::_S_max_rope_depth))\n-\t__throw_length_error(__N(\"rope::_S_balance\"));\n+\tstd::__throw_length_error(__N(\"rope::_S_balance\"));\n       return(__result);\n     }\n \n@@ -1268,7 +1274,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _RopeRep* __insertee;\t\t// included in refcount\n       _RopeRep* __too_tiny = 0;\t\t// included in refcount\n       int __i;\t\t\t\t// forest[0..__i-1] is empty\n-      size_t __s = __r->_M_size;\n+      std::size_t __s = __r->_M_size;\n       \n       for (__i = 0; __s >= _S_min_len[__i+1]/* not this bucket */; ++__i)\n \t{\n@@ -1330,7 +1336,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n-\t\tsize_t __left_len = __left->_M_size;\n+\t\tstd::size_t __left_len = __left->_M_size;\n \t\t\n \t\tif (__i >= __left_len)\n \t\t  {\n@@ -1368,7 +1374,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _S_fetch_ptr(_RopeRep* __r, size_type __i)\n     {\n       _RopeRep* __clrstack[__detail::_S_max_rope_depth];\n-      size_t __csptr = 0;\n+      std::size_t __csptr = 0;\n       \n       for(;;)\n \t{\n@@ -1380,7 +1386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n-\t\tsize_t __left_len = __left->_M_size;\n+\t\tstd::size_t __left_len = __left->_M_size;\n \t\t\n \t\tif (__c->_M_c_string != 0)\n \t\t  __clrstack[__csptr++] = __c;\n@@ -1424,8 +1430,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rope<_CharT, _Alloc>::\n     _S_compare (const _RopeRep* __left, const _RopeRep* __right)\n     {\n-      size_t __left_len;\n-      size_t __right_len;\n+      std::size_t __left_len;\n+      std::size_t __right_len;\n       \n       if (0 == __right)\n \treturn 0 != __left;\n@@ -1524,13 +1530,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template <class _CharT, class _Alloc>\n     rope<_CharT, _Alloc>::\n-    rope(size_t __n, _CharT __c, const allocator_type& __a)\n+    rope(std::size_t __n, _CharT __c, const allocator_type& __a)\n     : _Base(__a)\n     {\n+      using std::__uninitialized_fill_n_a;\n+\n       rope<_CharT,_Alloc> __result;\n-      const size_t __exponentiate_threshold = 32;\n-      size_t __exponent;\n-      size_t __rest;\n+      const std::size_t __exponentiate_threshold = 32;\n+      std::size_t __exponent;\n+      std::size_t __rest;\n       _CharT* __rest_buffer;\n       _RopeRep* __remainder;\n       rope<_CharT, _Alloc> __remainder_rope;\n@@ -1617,7 +1625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __GC_CONST _CharT* __result = this->_M_tree_ptr->_M_c_string;\n       if (0 == __result)\n \t{\n-\t  size_t __s = size();\n+\t  std::size_t __s = size();\n \t  __result = this->_Data_allocate(__s + 1);\n \t  _S_flatten(this->_M_tree_ptr, __result);\n \t  __result[__s] = _S_eos((_CharT*)0);\n@@ -1640,7 +1648,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__detail::_S_leaf == this->_M_tree_ptr->_M_tag\n \t  && 0 != __old_c_string)\n \treturn(__old_c_string);\n-      size_t __s = size();\n+      std::size_t __s = size();\n       _CharT* __result = this->_Data_allocate(_S_rounded_up_size(__s));\n       _S_flatten(this->_M_tree_ptr, __result);\n       __result[__s] = _S_eos((_CharT*)0);"}, {"sha": "ff2ea150c4ac4553e4c411ac4ebd4c6f4b96bcf3", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3", "patch": "@@ -54,14 +54,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  using std::size_t;\n-  using std::ptrdiff_t;\n-  using std::_Construct;\n-  using std::_Destroy;\n-  using std::allocator;\n-  using std::__true_type;\n-  using std::__false_type;\n-\n   struct _Slist_node_base\n   {\n     _Slist_node_base* _M_next;\n@@ -138,10 +130,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __result;\n   }\n \n-  inline size_t\n+  inline std::size_t\n   __slist_size(_Slist_node_base* __node)\n   {\n-    size_t __result = 0;\n+    std::size_t __result = 0;\n     for (; __node != 0; __node = __node->_M_next)\n       ++__result;\n     return __result;\n@@ -155,8 +147,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct _Slist_iterator_base\n   {\n-    typedef size_t                    size_type;\n-    typedef ptrdiff_t                 difference_type;\n+    typedef std::size_t                    size_type;\n+    typedef std::ptrdiff_t                 difference_type;\n     typedef std::forward_iterator_tag iterator_category;\n \n     _Slist_node_base* _M_node;\n@@ -288,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template <class _Tp, class _Alloc = allocator<_Tp> >\n+  template <class _Tp, class _Alloc = std::allocator<_Tp> >\n     class slist : private _Slist_base<_Tp,_Alloc>\n     {\n       // concept requirements\n@@ -303,8 +295,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef const value_type* const_pointer;\n       typedef value_type&       reference;\n       typedef const value_type& const_reference;\n-      typedef size_t            size_type;\n-      typedef ptrdiff_t         difference_type;\n+      typedef std::size_t            size_type;\n+      typedef std::ptrdiff_t         difference_type;\n       \n       typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;\n       typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;\n@@ -409,13 +401,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template <class _Integer>\n       void\n-      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n+      _M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type)\n       { _M_fill_assign((size_type) __n, (_Tp) __val); }\n \n       template <class _InputIterator>\n       void\n       _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n-\t\t\t __false_type);\n+\t\t\t std::__false_type);\n \n     public:\n \n@@ -533,14 +525,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <class _Integer>\n         void\n         _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,\n-\t\t\t      __true_type)\n+\t\t\t      std::__true_type)\n         { _M_insert_after_fill(__pos, __n, __x); }\n \n       template <class _InIterator>\n         void\n         _M_insert_after_range(_Node_base* __pos,\n \t\t\t      _InIterator __first, _InIterator __last,\n-\t\t\t      __false_type)\n+\t\t\t      std::__false_type)\n         {\n \t  while (__first != __last)\n \t    {\n@@ -771,7 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIterator __first,\n \t\t\t\t\t     _InputIterator __last,\n-\t\t\t\t\t     __false_type)\n+\t\t\t\t\t     std::__false_type)\n       {\n \t_Node_base* __prev = &this->_M_head;\n \t_Node* __node = (_Node*) this->_M_head._M_next;"}]}