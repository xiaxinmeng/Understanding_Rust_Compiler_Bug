{"sha": "6c99c37ba9c501cf387a81d1e2b5c40c710dc571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5OWMzN2JhOWM1MDFjZjM4N2E4MWQxZTJiNWM0MGM3MTBkYzU3MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-11T23:05:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-11T23:05:26Z"}, "message": "(digest_init): Don't recursively call digest_init when in traditional\nmode if the type is invalid.\n\nFrom-SVN: r10315", "tree": {"sha": "997208a38a3ab750f5803d3c74c2162b47c558d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997208a38a3ab750f5803d3c74c2162b47c558d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c99c37ba9c501cf387a81d1e2b5c40c710dc571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c99c37ba9c501cf387a81d1e2b5c40c710dc571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c99c37ba9c501cf387a81d1e2b5c40c710dc571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c99c37ba9c501cf387a81d1e2b5c40c710dc571/comments", "author": null, "committer": null, "parents": [{"sha": "ebe9f727648ca753e81fe3778895b95713e2b7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebe9f727648ca753e81fe3778895b95713e2b7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebe9f727648ca753e81fe3778895b95713e2b7ef"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "75df0837a4151e7c18bc3dae3d36a494f77b5c46", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c99c37ba9c501cf387a81d1e2b5c40c710dc571/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c99c37ba9c501cf387a81d1e2b5c40c710dc571/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6c99c37ba9c501cf387a81d1e2b5c40c710dc571", "patch": "@@ -4894,7 +4894,7 @@ digest_init (type, init, require_constant, constructor_constant)\n      and it initializes the first element of x to 0.  */\n   if (flag_traditional)\n     {\n-      tree top = 0, prev = 0;\n+      tree top = 0, prev = 0, otype = type;\n       while (TREE_CODE (type) == RECORD_TYPE\n \t     || TREE_CODE (type) == ARRAY_TYPE\n \t     || TREE_CODE (type) == QUAL_UNION_TYPE\n@@ -4916,11 +4916,17 @@ digest_init (type, init, require_constant, constructor_constant)\n \t      return error_mark_node;\n \t    }\n \t}\n-      TREE_OPERAND (prev, 1)\n-\t= build_tree_list (NULL_TREE,\n-\t\t\t   digest_init (type, init, require_constant,\n-\t\t\t\t\tconstructor_constant));\n-      return top;\n+\n+      if (otype != type)\n+\t{\n+\t  TREE_OPERAND (prev, 1)\n+\t    = build_tree_list (NULL_TREE,\n+\t\t\t       digest_init (type, init, require_constant,\n+\t\t\t\t\t    constructor_constant));\n+\t  return top;\n+\t}\n+      else\n+\treturn error_mark_node;\n     }\n   error_init (\"invalid initializer%s\", \" for `%s'\", NULL);\n   return error_mark_node;"}]}