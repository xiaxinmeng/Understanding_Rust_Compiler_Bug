{"sha": "626e2d6db5815ceab5a49f71c42bcfb03c315666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2ZTJkNmRiNTgxNWNlYWI1YTQ5ZjcxYzQyYmNmYjAzYzMxNTY2Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-16T23:38:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-16T23:38:51Z"}, "message": "alpha.md: Revert Thu Nov 26 change that came in through the last gcc2 merge...\n\n        * alpha.md: Revert Thu Nov 26 change that came in through the\n        last gcc2 merge: reinstate (plus (plus ...)) reload patterns.\n        Avoid earlyclobber when possible.\n\nFrom-SVN: r29466", "tree": {"sha": "4d0d33306ef617675f8e371435528804b62efab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0d33306ef617675f8e371435528804b62efab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626e2d6db5815ceab5a49f71c42bcfb03c315666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626e2d6db5815ceab5a49f71c42bcfb03c315666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626e2d6db5815ceab5a49f71c42bcfb03c315666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626e2d6db5815ceab5a49f71c42bcfb03c315666/comments", "author": null, "committer": null, "parents": [{"sha": "a218d5ba2b023b6475d6097d9d74585ad1bdfba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a218d5ba2b023b6475d6097d9d74585ad1bdfba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a218d5ba2b023b6475d6097d9d74585ad1bdfba0"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "961f5a7ea94be5e7ba411f611a21697d2773b3eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626e2d6db5815ceab5a49f71c42bcfb03c315666/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626e2d6db5815ceab5a49f71c42bcfb03c315666/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=626e2d6db5815ceab5a49f71c42bcfb03c315666", "patch": "@@ -1,3 +1,9 @@\n+Thu Sep 16 16:35:41 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md: Revert Thu Nov 26 change that came in through the\n+\tlast gcc2 merge: reinstate (plus (plus ...)) reload patterns.\n+\tAvoid earlyclobber when possible.\n+\n Thu Sep 16 18:44:48 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libgcc2.c (__do_global_ctors): Call atexit with one arg."}, {"sha": "b383e4ae9a3a625ec81108b4240c198521307720", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626e2d6db5815ceab5a49f71c42bcfb03c315666/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626e2d6db5815ceab5a49f71c42bcfb03c315666/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=626e2d6db5815ceab5a49f71c42bcfb03c315666", "patch": "@@ -650,6 +650,97 @@\n    s%2addq %1,%3,%0\n    s%2subq %1,%n3,%0\")\n \n+;; These variants of the above insns can occur if the third operand\n+;; is the frame pointer, or other eliminable register.  E.g. some\n+;; register holding an offset from the stack pointer.  This is a\n+;; kludge, but there doesn't seem to be a way around it.  Only\n+;; recognize them while reloading.\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=r,&r\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"some_operand\" \"%r,r\")\n+\t\t\t  (match_operand:DI 2 \"some_operand\" \"%r,r\"))\n+\t\t (match_operand:DI 3 \"some_operand\" \"IOKL,r\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:DI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 3 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n+  \"\")\n+\t\t\t\t\t   \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"some_operand\" \"=r,&r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ,rJ\")\n+\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n+\t\t\t  (match_operand:SI 3 \"some_operand\" \"%r,r\"))\n+\t\t (match_operand:SI 4 \"some_operand\" \"IOKL,r\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:SI 4 \"add_operand\" \"rIOKL\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=r,&r\")\n+\t(sign_extend:DI\n+\t (plus:SI (plus:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"some_operand\" \"rJ,rJ\")\n+\t\t\t    (match_operand:SI 2 \"const48_operand\" \"I,I\"))\n+\t\t   (match_operand:SI 3 \"some_operand\" \"%r,r\"))\n+\t\t  (match_operand:SI 4 \"some_operand\" \"IO,r\"))))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI\n+\t (plus:SI (plus:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t   (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t  (match_operand:SI 4 \"sext_add_operand\" \"\"))))]\n+  \"reload_completed\"\n+  [(set (match_dup 5)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (sign_extend:DI (plus:SI (match_dup 5) (match_dup 4))))]\n+  \"operands[5] = gen_lowpart (SImode, operands[0]);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"some_operand\" \"=r,&r\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"some_operand\" \"rJ,rJ\")\n+\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"I,I\"))\n+\t\t\t  (match_operand:DI 3 \"some_operand\" \"%r,r\"))\n+\t\t (match_operand:DI 4 \"some_operand\" \"IOKL,r\")))]\n+  \"reload_in_progress\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:DI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 4 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:DI (mult:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\")))]"}]}