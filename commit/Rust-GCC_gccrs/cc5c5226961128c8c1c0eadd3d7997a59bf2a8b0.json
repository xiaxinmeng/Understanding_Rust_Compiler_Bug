{"sha": "cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1YzUyMjY5NjExMjhjOGMxYzBlYWRkM2Q3OTk3YTU5YmYyYThiMA==", "commit": {"author": {"name": "Igor Zamyatin", "email": "igor.zamyatin@intel.com", "date": "2015-11-23T12:58:12Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-11-23T12:58:12Z"}, "message": "re PR c++/68001 ([cilkplus] ICE in cp_gimplify_expr, at cp/cp-gimplify.c:760)\n\nPR c++/68001\n\ngcc/c-family\n\tPR c++/68001\n\t* c-gimplify.c (c_gimplify_expr): Stop the process if see an error.\n\t* cilk.c (recognize_spawn): Determine location in a more precise\n\tway.\ngcc/cp\n\t* cp-gimplify.c (cp_gimplify_expr): Stop the process if see an error.\ngcc/testsuite\n\t* g++.dg/cilk-plus/CK/pr68001.cc: New test.\n\nFrom-SVN: r230755", "tree": {"sha": "30e258cf929d46b9df9c2b27f3695b35c4253e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e258cf929d46b9df9c2b27f3695b35c4253e1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/comments", "author": {"login": "Garra1980", "id": 25365940, "node_id": "MDQ6VXNlcjI1MzY1OTQw", "avatar_url": "https://avatars.githubusercontent.com/u/25365940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garra1980", "html_url": "https://github.com/Garra1980", "followers_url": "https://api.github.com/users/Garra1980/followers", "following_url": "https://api.github.com/users/Garra1980/following{/other_user}", "gists_url": "https://api.github.com/users/Garra1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garra1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garra1980/subscriptions", "organizations_url": "https://api.github.com/users/Garra1980/orgs", "repos_url": "https://api.github.com/users/Garra1980/repos", "events_url": "https://api.github.com/users/Garra1980/events{/privacy}", "received_events_url": "https://api.github.com/users/Garra1980/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7b492ea50624b72ec1d3c109fe0128a69b9e343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b492ea50624b72ec1d3c109fe0128a69b9e343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b492ea50624b72ec1d3c109fe0128a69b9e343"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "6e7b0f761f246a1a9e3a38f45788f2c2d557ab65", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -1,3 +1,10 @@\n+2015-11-23  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR c++/68001\n+\t* c-gimplify.c (c_gimplify_expr): Stop the process if see an error.\n+\t* cilk.c (recognize_spawn): Determine location in a more precise\n+\tway.\n+\n 2015-11-19  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (shorten_compare): But look through macros from"}, {"sha": "fc4a44a9ebfafb9945b1487e2838e592883ebda0", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -272,16 +272,16 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n       }\n \n     case CILK_SPAWN_STMT:\n-      gcc_assert\n-\t(fn_contains_cilk_spawn_p (cfun)\n-\t && cilk_detect_spawn_and_unwrap (expr_p));\n+      gcc_assert(fn_contains_cilk_spawn_p (cfun)\n+\t\t && cilk_detect_spawn_and_unwrap (expr_p));\n \n-      /* If errors are seen, then just process it as a CALL_EXPR.  */\n       if (!seen_error ())\n \t{\n \t  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n \t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \t}\n+      return GS_ERROR;\n+\n     case MODIFY_EXPR:\n     case INIT_EXPR:\n     case CALL_EXPR:"}, {"sha": "15cce34b33d9f4534e7be57aa1be0aaede8819bd", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\"\n-#include \"toplev.h\" \n+#include \"toplev.h\"\n #include \"calls.h\"\n #include \"cilk.h\"\n \n@@ -76,6 +76,7 @@ struct wrapper_data\n   tree block;\n };\n \n+static tree contains_cilk_spawn_stmt_walker (tree *tp, int *, void *);\n static void extract_free_variables (tree, struct wrapper_data *,\n \t\t\t\t    enum add_variable_type);\n static HOST_WIDE_INT cilk_wrapper_count;\n@@ -235,7 +236,19 @@ recognize_spawn (tree exp, tree *exp0)\n     }\n   /* _Cilk_spawn can't be wrapped in expression such as PLUS_EXPR.  */\n   else if (contains_cilk_spawn_stmt (exp))\n-    error_at (EXPR_LOCATION (exp), \"invalid use of %<_Cilk_spawn%>\");\n+    {\n+      location_t loc = EXPR_LOCATION (exp);\n+      if (loc == UNKNOWN_LOCATION)\n+\t{\n+\t  tree stmt = walk_tree (&exp,\n+\t\t\t\t contains_cilk_spawn_stmt_walker,\n+\t\t\t\t NULL,\n+\t\t\t\t NULL);\n+\t  gcc_assert (stmt != NULL_TREE);\n+\t  loc = EXPR_LOCATION (stmt);\n+\t}\n+      error_at (loc, \"invalid use of %<_Cilk_spawn%>\");\n+    }\n   return spawn_found;\n }\n "}, {"sha": "f401b822bbbf167ae847087c06cc61d5396dc3b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -1,3 +1,8 @@\n+2015-11-23  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR c++/68001\n+\t* cp-gimplify.c (cp_gimplify_expr): Stop the process if see an error.\n+\n 2015-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/67354"}, {"sha": "8fdcb6d81e06e131c0bda0762fa889a27441e9c6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -611,12 +611,14 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t 25979.  */\n     case INIT_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun)\n-\t  && cilk_detect_spawn_and_unwrap (expr_p)\n-\t  && !seen_error ())\n+\t  && cilk_detect_spawn_and_unwrap (expr_p))\n \t{\n \t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n \t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \t}\n+      if (seen_error ())\n+\treturn GS_ERROR;\n+\n       cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n@@ -725,16 +727,16 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       break;\n \n     case CILK_SPAWN_STMT:\n-      gcc_assert \n-\t(fn_contains_cilk_spawn_p (cfun) \n-\t && cilk_detect_spawn_and_unwrap (expr_p));\n+      gcc_assert(fn_contains_cilk_spawn_p (cfun)\n+\t\t && cilk_detect_spawn_and_unwrap (expr_p));\n \n-      /* If errors are seen, then just process it as a CALL_EXPR.  */\n       if (!seen_error ())\n \t{\n \t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n \t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n \t}\n+      return GS_ERROR;\n+\n     case CALL_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun)\n \t  && cilk_detect_spawn_and_unwrap (expr_p)"}, {"sha": "ac6f5ef6f8ea6c6ceda081fc531e381ba08da5ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -1,3 +1,8 @@\n+2015-11-23  Igor Zamyatin  <igor.zamyatin@intel.com>\n+\n+\tPR c++/68001\n+\t* g++.dg/cilk-plus/CK/pr68001.cc: New test.\n+\n 2015-11-23  Richard Biener  <rguenther@suse.de>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "}, {"sha": "07f7c5f2d55503a1f9c611f799298932fe5ae20d", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr68001.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr68001.cc?ref=cc5c5226961128c8c1c0eadd3d7997a59bf2a8b0", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/68001 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+#include <vector>\n+\n+std::vector<double> f() {\n+  std::vector<double> v;\n+  return v;\n+}\n+\n+int main()\n+{\n+  std::vector<double> x = _Cilk_spawn f(); /* { dg-error \"invalid use of\" } */\n+  std::vector<double> y = f();\n+  _Cilk_sync;\n+  return 0;\n+}"}]}