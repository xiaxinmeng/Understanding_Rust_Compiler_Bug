{"sha": "0a9ea215f7400612f6dae2c77351e503798ea599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5ZWEyMTVmNzQwMDYxMmY2ZGFlMmM3NzM1MWU1MDM3OThlYTU5OQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Make `extv' an expander matching the remaining bit-field operations\n\nWe have matching insns defined for `sign_extract' and `zero_extract'\nexpressions, so make the three named patterns for bit-field operations\nconsistent and make `extv' an expander rather than an insn taking a\nSImode, a QImode, and a SImode general operand for the LOC, SIZE, and\nPOS operands respectively, like with the `extzv' and `insv' patterns,\nmatching the machine instructions and giving the middle end more choice\nas to which actual insn to choose in a given situation.\n\nGiven this program:\n\ntypedef struct\n{\n  int f0:1;\n  int f1:7;\n  int f8:8;\n  int f16:16;\n} bit_t;\n\ntypedef struct\n{\n  unsigned int f0:1;\n  unsigned int f1:7;\n  unsigned int f8:8;\n  unsigned int f16:16;\n} ubit_t;\n\ntypedef union\n{\n  bit_t b;\n  int i;\n} bit_u;\n\ntypedef union\n{\n  ubit_t b;\n  unsigned int i;\n} ubit_u;\n\nint\nins1 (bit_u x, int y)\n{\n  asm volatile (\"\" : \"+r\" (x), \"+r\" (y));\n  x.b.f1 = y;\n  return x.i;\n}\n\nint\next1 (bit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f1;\n}\n\nunsigned int\nextz1 (ubit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f1;\n}\n\nint\nins8 (bit_u x, int y)\n{\n  asm volatile (\"\" : \"+r\" (x), \"+r\" (y));\n  x.b.f8 = y;\n  return x.i;\n}\n\nint\next8 (bit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f8;\n}\n\nunsigned int\nextz8 (ubit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f8;\n}\n\nint\nins16 (bit_u x, int y)\n{\n  asm volatile (\"\" : \"+r\" (x), \"+r\" (y));\n  x.b.f16 = y;\n  return x.i;\n}\n\nint\next16 (bit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f16;\n}\n\nunsigned int\nextz16 (ubit_u x)\n{\n  asm volatile (\"\" : \"+r\" (x));\n  return x.b.f16;\n}\n\nthis results in the following code change:\n\n@@ -16,12 +16,12 @@ ins1:\n .globl ext1\n \t.type\text1, @function\n ext1:\n-\t.word 0\t# 19\t[c=0]  procedure_entry_mask\n-\tsubl2 $4,%sp\t# 20\t[c=32]  addsi3\n+\t.word 0\t# 18\t[c=0]  procedure_entry_mask\n+\tsubl2 $4,%sp\t# 19\t[c=32]  addsi3\n \tmovl 4(%ap),%r0\t# 2\t[c=16]  movsi_2\n-\tcvtbl %r0,%r0\t# 7\t[c=4]  extendqisi2\n-\tashl $-1,%r0,%r0\t# 14\t[c=40]  *vax.md:624\n-\tret\t\t# 24\t[c=0]  return\n+\textv $1,$7,%r0,%r0\t# 7\t[c=60]  *extv_non_const\n+\tcvtbl %r0,%r0\t# 13\t[c=4]  extendqisi2\n+\tret\t\t# 23\t[c=0]  return\n \t.size\text1, .-ext1\n \t.align 1\n .globl extz1\n@@ -49,12 +49,12 @@ ins8:\n .globl ext8\n \t.type\text8, @function\n ext8:\n-\t.word 0\t# 20\t[c=0]  procedure_entry_mask\n-\tsubl2 $4,%sp\t# 21\t[c=32]  addsi3\n+\t.word 0\t# 18\t[c=0]  procedure_entry_mask\n+\tsubl2 $4,%sp\t# 19\t[c=32]  addsi3\n \tmovl 4(%ap),%r0\t# 2\t[c=16]  movsi_2\n-\tcvtwl %r0,%r0\t# 7\t[c=4]  extendhisi2\n-\tashl $-8,%r0,%r0\t# 15\t[c=40]  *vax.md:624\n-\tret\t\t# 25\t[c=0]  return\n+\trotl $24,%r0,%r0\t# 13\t[c=60]  *extv_non_const\n+\tcvtbl %r0,%r0\n+\tret\t\t# 23\t[c=0]  return\n \t.size\text8, .-ext8\n \t.align 1\n .globl extz8\n\nIf there is a performance degradation with the replacement sequences,\nthen it can and should be sorted within `extv_non_const'.\n\n\tgcc/\n\t* config/vax/vax.md (extv): Rename insn to...\n\t(*extv): ... this.\n\t(extv): New expander.", "tree": {"sha": "d91d18d22f71af50b6017dbd3589788ce314e047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91d18d22f71af50b6017dbd3589788ce314e047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9ea215f7400612f6dae2c77351e503798ea599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9ea215f7400612f6dae2c77351e503798ea599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9ea215f7400612f6dae2c77351e503798ea599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9ea215f7400612f6dae2c77351e503798ea599/comments", "author": null, "committer": null, "parents": [{"sha": "b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f3bba3fa08a3d6b254071c10abd941d57bf0b9"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "d8774cdd36ce28ad198ea9227780c4d511ed0b17", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9ea215f7400612f6dae2c77351e503798ea599/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9ea215f7400612f6dae2c77351e503798ea599/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=0a9ea215f7400612f6dae2c77351e503798ea599", "patch": "@@ -941,7 +941,15 @@\n   \"\"\n   \"cmpzv %2,%1,%0,%3\")\n \n-(define_insn \"extv\"\n+(define_expand \"extv\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t(sign_extract:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t (match_operand:QI 2 \"general_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*extv\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n \t(sign_extract:SI (match_operand:QI 1 \"memory_operand\" \"m\")\n \t\t\t (match_operand:QI 2 \"general_operand\" \"g\")"}]}