{"sha": "b720e91919619f0b4886b0c21c704916ce133fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMGU5MTkxOTYxOWYwYjQ4ODZiMGMyMWM3MDQ5MTZjZTEzM2ZiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-09-18T18:44:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-09-18T18:44:53Z"}, "message": "passes.def (pass_early_thread_jumps): Schedule after forwprop.\n\n\n\t* passes.def (pass_early_thread_jumps): Schedule after forwprop.\n\t* tree-pass.h (make_pass_early_thread_jumps): Declare.\n\t* tree-ssa-threadbackward.c (fsm_find_thread_path,\n\tfsm_find_thread_path, profitable_jump_thread_path,\n\tfsm_find_control_statement_thread_paths,\n\tfind_jump_threads_backwards): Add speed_p parameter.\n\t(pass_data_early_thread_jumps): New pass.\n\t(make_pass_early_thread_jumps): New function.\n\n\t* g++.dg/predict-loop-exit-1.C: Disable early jump threading.\n\t* g++.dg/predict-loop-exit-2.C: Disable early jump threading.\n\t* g++.dg/predict-loop-exit-3.C: Disable early jump threading.\n\t* gcc.dg/tree-ssa/pr69196-1.c: Disable early jump threading.\n\t* gcc.dg/tree-ssa/vrp01.c: Disable early jump threading.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Disable early jump threading.\n\t* gcc.dg/tree-ssa/pr68198.c: Scan ethread dump.\n\t* gcc.dg/tree-ssa/ssa-thread-13.c: Scan ethread dump.\n\t* gcc.dg/tree-ssa/vrp56.c: Scan ethread dump.\n\t* gcc.dg/tree-ssa/vrp92.c: Scan ethread dump.\n\t* gcc.dg/uninit-15.c: Swap xfailed and non-xfailed alternative.\n\nFrom-SVN: r240221", "tree": {"sha": "4b6a79aa6b6ae2a9ef0d8a2db11b8c28207b3593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6a79aa6b6ae2a9ef0d8a2db11b8c28207b3593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b720e91919619f0b4886b0c21c704916ce133fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b720e91919619f0b4886b0c21c704916ce133fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b720e91919619f0b4886b0c21c704916ce133fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b720e91919619f0b4886b0c21c704916ce133fbb/comments", "author": null, "committer": null, "parents": [{"sha": "bdabae3950a0043bfbfb42e585a5d88b7bc79fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdabae3950a0043bfbfb42e585a5d88b7bc79fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdabae3950a0043bfbfb42e585a5d88b7bc79fc6"}], "stats": {"total": 163, "additions": 128, "deletions": 35}, "files": [{"sha": "8eecbfe5118f5d23ac67b90bffcfcb59b1df3988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,3 +1,14 @@\n+2016-09-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* passes.def (pass_early_thread_jumps): Schedule after forwprop.\n+\t* tree-pass.h (make_pass_early_thread_jumps): Declare.\n+\t* tree-ssa-threadbackward.c (fsm_find_thread_path,\n+\tfsm_find_thread_path, profitable_jump_thread_path,\n+\tfsm_find_control_statement_thread_paths,\n+\tfind_jump_threads_backwards): Add speed_p parameter.\n+\t(pass_data_early_thread_jumps): New pass.\n+\t(make_pass_early_thread_jumps): New function.\n+\n 2016-09-17  Andreas Schwab  <schwab@suse.de>\n \n \t* config/ia64/ia64.h (ASM_OUTPUT_DWARF_OFFSET): Add cast."}, {"sha": "e98a719fc2b08adaf6d8dfb478df5840bc8c92f8", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* After CCP we rewrite no longer addressed locals into SSA\n \t     form if possible.  */\n \t  NEXT_PASS (pass_forwprop);\n+          NEXT_PASS (pass_early_thread_jumps);\n \t  NEXT_PASS (pass_sra_early);\n \t  /* pass_build_ealias is a dummy pass that ensures that we\n \t     execute TODO_rebuild_alias at this point.  */"}, {"sha": "956977c54399c4135a76f4e7e1978f1445719e52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,3 +1,17 @@\n+2016-09-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/predict-loop-exit-1.C: Disable early jump threading.\n+\t* g++.dg/predict-loop-exit-2.C: Disable early jump threading.\n+\t* g++.dg/predict-loop-exit-3.C: Disable early jump threading.\n+\t* gcc.dg/tree-ssa/pr69196-1.c: Disable early jump threading.\n+\t* gcc.dg/tree-ssa/vrp01.c: Disable early jump threading.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Disable early jump threading.\n+\t* gcc.dg/tree-ssa/pr68198.c: Scan ethread dump.\n+\t* gcc.dg/tree-ssa/ssa-thread-13.c: Scan ethread dump.\n+\t* gcc.dg/tree-ssa/vrp56.c: Scan ethread dump.\n+\t* gcc.dg/tree-ssa/vrp92.c: Scan ethread dump.\n+\t* gcc.dg/uninit-15.c: Swap xfailed and non-xfailed alternative.\n+\n 2016-09-18  Kirill Yukhin  <kirill.yukhin@gmaile.com>\n \n \t* gcc.target/i386/pr68633.c: Fix expected result."}, {"sha": "47bdf5182c1703a6ba549b8db458606edff657a2", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-1.C?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -fdisable-tree-ethread\" } */\n \n int g;\n int foo();"}, {"sha": "15b63eeb0fa62bfbfa55673b85627442236598f5", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-2.C?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -fdisable-tree-ethread\" } */\n \n int g;\n int foo();"}, {"sha": "8d417422b60459b1d5f5bebffbd206c28c460b6d", "filename": "gcc/testsuite/g++.dg/predict-loop-exit-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-loop-exit-3.C?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -fdisable-tree-ethread\" } */\n \n int g;\n int foo();"}, {"sha": "79e65aa01f4356b4c837c8af0d697c10a336028d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68198.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdisable-tree-ethread\" } */\n \n extern void abort (void);\n \n@@ -40,4 +40,4 @@ c_finish_omp_clauses (tree clauses)\n /* There are 3 FSM jump threading opportunities, two of which will\n   get filtered out.  */\n /* { dg-final { scan-tree-dump-times \"Registering FSM\" 1 \"thread1\"} } */\n-/* { dg-final { scan-tree-dump-times \"FSM Thread through multiway branch without threading a multiway branch\" 2 \"thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"FSM Thread through multiway branch without threading a multiway branch\" 2 \"ethread\"} } */"}, {"sha": "5f92447854bf8ea899e1d92f242135fb53c7b6c1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69196-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69196-1.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target sparc*-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdisable-tree-ethread\" } */\n \n /* { dg-final { scan-tree-dump \"FSM did not thread around loop and would copy too many statements\" \"thread1\" } } */\n "}, {"sha": "e1c33e86cd7c6a0dae8c80b954356dc46fc3078d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-dom2-stats -fdisable-tree-ethread\" } */\n \n void foo();\n void bla();"}, {"sha": "061f2235533405bf3821872550e3e7dfdc38c9e6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-13.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details\" } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"thread1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-ethread-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"ethread\" } } */\n \n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;"}, {"sha": "f25f2761d470bd35ccc5483e9474813008dfe32b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdisable-tree-ethread\" } */\n \n int\n foo (int *p, int i)"}, {"sha": "c2870c4590728ea7f0f417d07c84b19a2172ee64", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp56.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp56.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-thread1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-ethread-stats\" } */\n typedef struct basic_block_def *basic_block;\n struct basic_block_def;\n struct edge_def;\n@@ -38,5 +38,5 @@ cleanup_empty_eh (basic_block bb)\n \tfoo ();\n     }\n }\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"thread1\"} } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"ethread\"} } */\n "}, {"sha": "5d5375073e6cb9c2c0c475847d08e356b0860951", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp92.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp92.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdisable-tree-ethread\" } */\n \n void bar (void);\n int foo (int i, int j)"}, {"sha": "6154f4b638a6ac472d7d12e106a24dc10613d38f", "filename": "gcc/testsuite/gcc.dg/uninit-15.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -1,16 +1,16 @@\n /* PR tree-optimization/17506\n    We issue an uninitialized variable warning at a wrong location at\n    line 11, which is very confusing.  Make sure we print out a note to\n-   make it less confusing.  (xfailed alternative)\n+   make it less confusing.  (not xfailed alternative)\n    But it is of course ok if we warn in bar about uninitialized use\n-   of j.  (not xfailed alternative)  */\n+   of j.  (xfailed alternative)  */\n /* { dg-do compile } */\n /* { dg-options \"-O1 -Wuninitialized\" } */\n \n inline int\n foo (int i)\n {\n-  if (i) /* { dg-warning \"used uninitialized in this function\" \"\" { xfail *-*-* } } */\n+  if (i) /* { dg-warning \"used uninitialized in this function\" } */\n     return 1;\n   return 0;\n }\n@@ -20,7 +20,7 @@ void baz (void);\n void\n bar (void)\n {\n-  int j; /* { dg-message \"note: 'j' was declared here\" \"\" { xfail *-*-* } } */\n-  for (; foo (j); ++j)  /* { dg-warning \"'j' is used uninitialized\" } */\n+  int j; /* { dg-message \"note: 'j' was declared here\" } */\n+  for (; foo (j); ++j)  /* { dg-warning \"'j' is used uninitialized\" \"\" { xfail *-*-* } } */\n     baz ();\n }"}, {"sha": "cc87b184d670faa5bdef69619ccd1e0c564ed02c", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -399,6 +399,7 @@ extern gimple_opt_pass *make_pass_cd_dce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_call_cdce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_merge_phi (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_thread_jumps (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_early_thread_jumps (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_split_crit_edges (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_laddress (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_pre (gcc::context *ctxt);"}, {"sha": "6b522adcefbefddaa7a48c668a1e2af3afd95e44", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 83, "deletions": 17, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b720e91919619f0b4886b0c21c704916ce133fbb/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=b720e91919619f0b4886b0c21c704916ce133fbb", "patch": "@@ -61,12 +61,14 @@ get_gimple_control_stmt (basic_block bb)\n /* Return true if the CFG contains at least one path from START_BB to END_BB.\n    When a path is found, record in PATH the blocks from END_BB to START_BB.\n    VISITED_BBS is used to make sure we don't fall into an infinite loop.  Bound\n-   the recursion to basic blocks belonging to LOOP.  */\n+   the recursion to basic blocks belonging to LOOP.\n+   SPEED_P indicate that we could increase code size to improve the code path */\n \n static bool\n fsm_find_thread_path (basic_block start_bb, basic_block end_bb,\n \t\t      vec<basic_block, va_gc> *&path,\n-\t\t      hash_set<basic_block> *visited_bbs, loop_p loop)\n+\t\t      hash_set<basic_block> *visited_bbs, loop_p loop,\n+\t\t      bool speed_p)\n {\n   if (loop != start_bb->loop_father)\n     return false;\n@@ -82,7 +84,8 @@ fsm_find_thread_path (basic_block start_bb, basic_block end_bb,\n       edge e;\n       edge_iterator ei;\n       FOR_EACH_EDGE (e, ei, start_bb->succs)\n-\tif (fsm_find_thread_path (e->dest, end_bb, path, visited_bbs, loop))\n+\tif (fsm_find_thread_path (e->dest, end_bb, path, visited_bbs, loop,\n+\t\t\t\t  speed_p))\n \t  {\n \t    vec_safe_push (path, start_bb);\n \t    return true;\n@@ -101,11 +104,13 @@ fsm_find_thread_path (basic_block start_bb, basic_block end_bb,\n    value on PATH.  ARG is the value of that SSA_NAME.\n \n    BBI will be appended to PATH when we have a profitable jump threading\n-   path.  Callers are responsible for removing BBI from PATH in that case. */\n+   path.  Callers are responsible for removing BBI from PATH in that case.\n+\n+   SPEED_P indicate that we could increase code size to improve the code path */\n \n static edge\n profitable_jump_thread_path (vec<basic_block, va_gc> *&path,\n-\t\t\t     basic_block bbi, tree name, tree arg)\n+\t\t\t     basic_block bbi, tree name, tree arg, bool speed_p)\n {\n   /* Note BBI is not in the path yet, hence the +1 in the test below\n      to make sure BBI is accounted for in the path length test.  */\n@@ -307,7 +312,7 @@ profitable_jump_thread_path (vec<basic_block, va_gc> *&path,\n       return NULL;\n     }\n \n-  if (optimize_edge_for_speed_p (taken_edge))\n+  if (speed_p && optimize_edge_for_speed_p (taken_edge))\n     {\n       if (n_insns >= PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATH_INSNS))\n \t{\n@@ -422,13 +427,15 @@ convert_and_register_jump_thread_path (vec<basic_block, va_gc> *path,\n \n /* We trace the value of the SSA_NAME NAME back through any phi nodes looking\n    for places where it gets a constant value and save the path.  Stop after\n-   having recorded MAX_PATHS jump threading paths.  */\n+   having recorded MAX_PATHS jump threading paths.\n+\n+   SPEED_P indicate that we could increase code size to improve the code path */\n \n static void\n fsm_find_control_statement_thread_paths (tree name,\n \t\t\t\t\t hash_set<basic_block> *visited_bbs,\n \t\t\t\t\t vec<basic_block, va_gc> *&path,\n-\t\t\t\t\t bool seen_loop_phi)\n+\t\t\t\t\t bool seen_loop_phi, bool speed_p)\n {\n   /* If NAME appears in an abnormal PHI, then don't try to trace its\n      value back through PHI nodes.  */\n@@ -496,7 +503,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \t  hash_set<basic_block> *visited_bbs = new hash_set<basic_block>;\n \n \t  if (fsm_find_thread_path (var_bb, e->src, next_path, visited_bbs,\n-\t\t\t\t    e->src->loop_father))\n+\t\t\t\t    e->src->loop_father, speed_p))\n \t    ++e_count;\n \n \t  delete visited_bbs;\n@@ -562,7 +569,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \t      /* Recursively follow SSA_NAMEs looking for a constant\n \t\t definition.  */\n \t      fsm_find_control_statement_thread_paths (arg, visited_bbs, path,\n-\t\t\t\t\t\t       seen_loop_phi);\n+\t\t\t\t\t\t       seen_loop_phi, speed_p);\n \n \t      path->pop ();\n \t      continue;\n@@ -573,7 +580,8 @@ fsm_find_control_statement_thread_paths (tree name,\n \n \t  /* If this is a profitable jump thread path, then convert it\n \t     into the canonical form and register it.  */\n-\t  edge taken_edge = profitable_jump_thread_path (path, bbi, name, arg);\n+\t  edge taken_edge = profitable_jump_thread_path (path, bbi, name, arg,\n+\t\t\t\t\t\t\t speed_p);\n \t  if (taken_edge)\n \t    {\n \t      if (bb_loop_depth (taken_edge->src)\n@@ -589,7 +597,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \n       if (TREE_CODE (arg) == SSA_NAME)\n \tfsm_find_control_statement_thread_paths (arg, visited_bbs,\n-\t\t\t\t\t\t path, seen_loop_phi);\n+\t\t\t\t\t\t path, seen_loop_phi, speed_p);\n \n       else\n \t{\n@@ -599,7 +607,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \t  path->pop ();\n \n \t  edge taken_edge = profitable_jump_thread_path (path, var_bb,\n-\t\t\t\t\t\t     name, arg);\n+\t\t\t\t\t\t         name, arg, speed_p);\n \t  if (taken_edge)\n \t    {\n \t      if (bb_loop_depth (taken_edge->src)\n@@ -623,10 +631,11 @@ fsm_find_control_statement_thread_paths (tree name,\n    is a constant.  Record such paths for jump threading.\n \n    It is assumed that BB ends with a control statement and that by\n-   finding a path where NAME is a constant, we can thread the path.  */\n+   finding a path where NAME is a constant, we can thread the path.\n+   SPEED_P indicate that we could increase code size to improve the code path */\n \n void  \n-find_jump_threads_backwards (basic_block bb)\n+find_jump_threads_backwards (basic_block bb, bool speed_p)\n {     \n   gimple *stmt = get_gimple_control_stmt (bb);\n   if (!stmt)\n@@ -656,7 +665,8 @@ find_jump_threads_backwards (basic_block bb)\n   hash_set<basic_block> *visited_bbs = new hash_set<basic_block>;\n \n   max_threaded_paths = PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATHS);\n-  fsm_find_control_statement_thread_paths (name, visited_bbs, bb_path, false);\n+  fsm_find_control_statement_thread_paths (name, visited_bbs, bb_path, false,\n+\t\t\t\t\t   speed_p);\n \n   delete visited_bbs;\n   vec_free (bb_path);\n@@ -706,7 +716,7 @@ pass_thread_jumps::execute (function *fun)\n   FOR_EACH_BB_FN (bb, fun)\n     {\n       if (EDGE_COUNT (bb->succs) > 1)\n-\tfind_jump_threads_backwards (bb);\n+\tfind_jump_threads_backwards (bb, true);\n     }\n   bool changed = thread_through_all_blocks (true);\n \n@@ -721,3 +731,59 @@ make_pass_thread_jumps (gcc::context *ctxt)\n {\n   return new pass_thread_jumps (ctxt);\n }\n+\n+namespace {\n+\n+const pass_data pass_data_early_thread_jumps =\n+{\n+  GIMPLE_PASS,\n+  \"ethread\",\n+  OPTGROUP_NONE,\n+  TV_TREE_SSA_THREAD_JUMPS,\n+  ( PROP_cfg | PROP_ssa ),\n+  0,\n+  0,\n+  0,\n+  ( TODO_cleanup_cfg | TODO_update_ssa ),\n+};\n+\n+class pass_early_thread_jumps : public gimple_opt_pass\n+{\n+public:\n+  pass_early_thread_jumps (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_early_thread_jumps, ctxt)\n+  {}\n+\n+  opt_pass * clone (void) { return new pass_early_thread_jumps (m_ctxt); }\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *);\n+};\n+\n+bool\n+pass_early_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n+\n+unsigned int\n+pass_early_thread_jumps::execute (function *fun)\n+{\n+  /* Try to thread each block with more than one successor.  */\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      if (EDGE_COUNT (bb->succs) > 1)\n+\tfind_jump_threads_backwards (bb, false);\n+    }\n+  thread_through_all_blocks (true);\n+  return 0;\n+}\n+\n+}\n+\n+gimple_opt_pass *\n+make_pass_early_thread_jumps (gcc::context *ctxt)\n+{\n+  return new pass_early_thread_jumps (ctxt);\n+}"}]}