{"sha": "9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkNDljZGI1MzQwYmNhYWIwZWNjMDU3NGVkNzU0YWY5YmE3MTI4Mw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-12-02T08:24:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:24:27Z"}, "message": "S/390: Add vector pack/unpack patterns.\n\ngcc/ChangeLog:\n\n2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/vector.md (vec_halfhalf): New mode iterator.\n\t(\"vec_pack_trunc_<mode>\", \"vec_pack_ssat_<mode>\")\n\t(\"vec_pack_usat_<mode>\", \"vec_unpacks_hi_v16qi\")\n\t(\"vec_unpacks_low_v16qi\", \"vec_unpacku_hi_v16qi\")\n\t(\"vec_unpacku_low_v16qi\", \"vec_unpacks_hi_v8hi\")\n\t(\"vec_unpacks_lo_v8hi\", \"vec_unpacku_hi_v8hi\")\n\t(\"vec_unpacku_lo_v8hi\", \"vec_unpacks_hi_v4si\")\n\t(\"vec_unpacks_lo_v4si\", \"vec_unpacku_hi_v4si\")\n\t(\"vec_unpacku_lo_v4si\"): New pattern definitions.\n\t* config/s390/vx-builtins.md: Move VI_HW_HSD mode iterator to\n\tvector.md.\n\nFrom-SVN: r243157", "tree": {"sha": "41726d46559f6c1f531a0aac4b90a90e770e0c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41726d46559f6c1f531a0aac4b90a90e770e0c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/comments", "author": null, "committer": null, "parents": [{"sha": "f00bc26c002e81a23e84c8c359a97c88b6b95447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00bc26c002e81a23e84c8c359a97c88b6b95447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00bc26c002e81a23e84c8c359a97c88b6b95447"}], "stats": {"total": 213, "additions": 203, "deletions": 10}, "files": [{"sha": "d2ecd0f1d9da30a0a1434b103e02dcf1dd56b4e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "patch": "@@ -1,3 +1,17 @@\n+2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vector.md (vec_halfhalf): New mode iterator.\n+\t(\"vec_pack_trunc_<mode>\", \"vec_pack_ssat_<mode>\")\n+\t(\"vec_pack_usat_<mode>\", \"vec_unpacks_hi_v16qi\")\n+\t(\"vec_unpacks_low_v16qi\", \"vec_unpacku_hi_v16qi\")\n+\t(\"vec_unpacku_low_v16qi\", \"vec_unpacks_hi_v8hi\")\n+\t(\"vec_unpacks_lo_v8hi\", \"vec_unpacku_hi_v8hi\")\n+\t(\"vec_unpacku_lo_v8hi\", \"vec_unpacks_hi_v4si\")\n+\t(\"vec_unpacks_lo_v4si\", \"vec_unpacku_hi_v4si\")\n+\t(\"vec_unpacku_lo_v4si\"): New pattern definitions.\n+\t* config/s390/vx-builtins.md: Move VI_HW_HSD mode iterator to\n+\tvector.md.\n+\n 2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_reverse_condition): New"}, {"sha": "d446d5f0db3bce7cee5650682b9a095c585ecaaa", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 189, "deletions": 9, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "patch": "@@ -38,7 +38,8 @@\n (define_mode_iterator VIT_HW    [V16QI V8HI V4SI V2DI V1TI TI])\n (define_mode_iterator VI_HW     [V16QI V8HI V4SI V2DI])\n (define_mode_iterator VI_HW_QHS [V16QI V8HI V4SI])\n-(define_mode_iterator VI_HW_HS  [V8HI V4SI])\n+(define_mode_iterator VI_HW_HSD [V8HI  V4SI V2DI])\n+(define_mode_iterator VI_HW_HS  [V8HI  V4SI])\n (define_mode_iterator VI_HW_QH  [V16QI V8HI])\n \n ; All integer vector modes supported in a vector register + TImode\n@@ -114,6 +115,13 @@\n \t\t\t    (V1DF \"V2SF\") (V2DF \"V4SF\")\n \t\t\t    (V1TF \"V1DF\")])\n \n+; Vector with half the element size AND half the number of elements.\n+(define_mode_attr vec_halfhalf\n+  [(V2HI \"V2QI\") (V4HI \"V4QI\") (V8HI \"V8QI\")\n+   (V2SI \"V2HI\") (V4SI \"V4HI\")\n+   (V2DI \"V2SI\")\n+   (V2DF \"V2SF\")])\n+\n ; The comparisons not setting CC iterate over the rtx code.\n (define_code_iterator VFCMP_HW_OP [eq gt ge])\n (define_code_attr asm_fcmp_op [(eq \"e\") (gt \"h\") (ge \"he\")])\n@@ -1223,6 +1231,185 @@\n   \"vsel\\t%v0,%2,%1,%3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; vec_pack_trunc\n+\n+; vpkh, vpkf, vpkg\n+(define_insn \"vec_pack_trunc_<mode>\"\n+  [(set (match_operand:<vec_half> 0 \"register_operand\" \"=v\")\n+\t(vec_concat:<vec_half>\n+\t (truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 1 \"register_operand\" \"v\"))\n+\t (truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 2 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\"\n+  \"vpk<bhfgq>\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vpksh, vpksf, vpksg\n+(define_insn \"vec_pack_ssat_<mode>\"\n+  [(set (match_operand:<vec_half> 0 \"register_operand\" \"=v\")\n+\t(vec_concat:<vec_half>\n+\t (ss_truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 1 \"register_operand\" \"v\"))\n+\t (ss_truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 2 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\"\n+  \"vpks<bhfgq>\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vpklsh, vpklsf, vpklsg\n+(define_insn \"vec_pack_usat_<mode>\"\n+  [(set (match_operand:<vec_half> 0 \"register_operand\" \"=v\")\n+\t(vec_concat:<vec_half>\n+\t (us_truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 1 \"register_operand\" \"v\"))\n+\t (us_truncate:<vec_halfhalf>\n+\t  (match_operand:VI_HW_HSD 2 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\"\n+  \"vpkls<bhfgq>\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+;; vector unpack v16qi\n+\n+; signed\n+\n+(define_insn \"vec_unpacks_hi_v16qi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V8HI\n+\t (vec_select:V8QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+\t\t     (const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+  \"TARGET_VX\"\n+  \"vuphb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacks_low_v16qi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V8HI\n+\t (vec_select:V8QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 8) (const_int 9) (const_int 10)(const_int 11)\n+\t\t     (const_int 12)(const_int 13)(const_int 14)(const_int 15)]))))]\n+  \"TARGET_VX\"\n+  \"vuplb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; unsigned\n+\n+(define_insn \"vec_unpacku_hi_v16qi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V8HI\n+\t (vec_select:V8QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+\t\t     (const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+  \"TARGET_VX\"\n+  \"vuplhb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacku_low_v16qi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V8HI\n+\t (vec_select:V8QI\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 8) (const_int 9) (const_int 10)(const_int 11)\n+\t\t     (const_int 12)(const_int 13)(const_int 14)(const_int 15)]))))]\n+  \"TARGET_VX\"\n+  \"vupllb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+;; vector unpack v8hi\n+\n+; signed\n+\n+(define_insn \"vec_unpacks_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V4SI\n+\t (vec_select:V4HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)]))))]\n+  \"TARGET_VX\"\n+  \"vuphh\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacks_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V4SI\n+\t (vec_select:V4HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+  \"TARGET_VX\"\n+  \"vuplhw\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; unsigned\n+\n+(define_insn \"vec_unpacku_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V4SI\n+\t (vec_select:V4HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)]))))]\n+  \"TARGET_VX\"\n+  \"vuplhh\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacku_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V4SI\n+\t (vec_select:V4HI\n+\t  (match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+  \"TARGET_VX\"\n+  \"vupllh\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+;; vector unpack v4si\n+\n+; signed\n+\n+(define_insn \"vec_unpacks_hi_v4si\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V2DI\n+\t (vec_select:V2SI\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)]))))]\n+  \"TARGET_VX\"\n+  \"vuphf\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacks_lo_v4si\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(sign_extend:V2DI\n+\t (vec_select:V2SI\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 2)(const_int 3)]))))]\n+  \"TARGET_VX\"\n+  \"vuplf\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; unsigned\n+\n+(define_insn \"vec_unpacku_hi_v4si\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V2DI\n+\t (vec_select:V2SI\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 0)(const_int 1)]))))]\n+  \"TARGET_VX\"\n+  \"vuplhf\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"vec_unpacku_lo_v4si\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(zero_extend:V2DI\n+\t (vec_select:V2SI\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 2)(const_int 3)]))))]\n+  \"TARGET_VX\"\n+  \"vupllf\\t%0,%1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n \n ; reduc_smin\n@@ -1233,15 +1420,8 @@\n ; vec_shl vrep + vsl\n ; vec_shr\n \n-; vec_pack_trunc\n-; vec_pack_ssat\n-; vec_pack_usat\n-; vec_pack_sfix_trunc\n+; vec_pack_sfix_trunc: convert + pack ?\n ; vec_pack_ufix_trunc\n-; vec_unpacks_hi\n-; vec_unpacks_low\n-; vec_unpacku_hi\n-; vec_unpacku_low\n ; vec_unpacks_float_hi\n ; vec_unpacks_float_lo\n ; vec_unpacku_float_hi"}, {"sha": "b3818ee66274175753394be92e9dce1678e706e9", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad49cdb5340bcaab0ecc0574ed754af9ba71283/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "patch": "@@ -24,7 +24,6 @@\n (define_mode_iterator V_HW_32_64 [V4SI V2DI V2DF])\n (define_mode_iterator VI_HW_SD [V4SI V2DI])\n (define_mode_iterator V_HW_HSD [V8HI V4SI V2DI V2DF])\n-(define_mode_iterator VI_HW_HSD [V8HI V4SI V2DI])\n \n ; The element type of the vector with floating point modes translated\n ; to int modes of the same size."}]}