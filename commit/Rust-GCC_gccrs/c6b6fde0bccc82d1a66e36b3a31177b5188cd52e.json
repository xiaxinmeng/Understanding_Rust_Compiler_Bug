{"sha": "c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiNmZkZTBiY2NjODJkMWE2NmUzNmIzYTMxMTc3YjUxODhjZDUyZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2019-10-11T18:41:35Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-10-11T18:41:35Z"}, "message": "Extend subst to simplify CONST_INT inside SIGN_EXTEND.\n\nThis addresses PR 91860 which has four testcases triggering internal errors.\nThe problem here is that in combine when handling debug insns, we are trying\nto substitute\n(sign_extend:DI (const_int 8160 [0x1fe0]))\nas the value for\n(reg:DI 78 [ _9 ])\nin the debug insn\n(debug_insn 29 28 30 2 (var_location:QI d (subreg:QI (reg:DI 78 [ _9 ]) 0)) \"tmp4.c\":11:5 -1\n     (nil))\nThis eventually triggers an abort because 8160 is not a sign-extended\nQImode value.\n\nIn subst there is already code check for a CONST_INT inside a ZERO_EXTEND and\nsimplify it.  This needs to be extended to also handle a SIGN_EXTEND the same\nway.\n\n\tgcc/\n\tPR rtl-optimization/91860\n\t* combine.c (subst): If new_rtx is a constant, also check for\n\tSIGN_EXTEND when deciding whether to call simplify_unary_operation.\n\n\tgcc/testsuite/\n\tPR rtl-optimization/91860\n\t* gcc.dg/pr91860-1.c: New testcase.\n\t* gcc.dg/pr91860-2.c: New testcase.\n\t* gcc.dg/pr91860-3.c: New testcase.\n\t* gcc.dg/pr91860-4.c: New testcase.\n\nFrom-SVN: r276901", "tree": {"sha": "8edde92f02bb6cb265ce4e27485bfee556f20ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8edde92f02bb6cb265ce4e27485bfee556f20ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/comments", "author": null, "committer": null, "parents": [{"sha": "e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c78b3a0c7be7020b77f9a8ef04e970b391f1aa"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "12613f7f639b6553133703cb13f797939e26fbe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -1,3 +1,9 @@\n+2019-10-11  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR rtl-optimization/91860\n+\t* combine.c (subst): If new_rtx is a constant, also check for\n+\tSIGN_EXTEND when deciding whether to call simplify_unary_operation.\n+\n 2019-10-11  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* expr.c (store_expr): Use rtx_to_poly_int64 rather than"}, {"sha": "92e4e5e68985826b840c0a5d26b1fab5e514d1b6", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -5680,6 +5680,7 @@ subst (rtx x, rtx from, rtx to, int in_dest, int in_cond, int unique_copy)\n \t\t}\n \t      else if (CONST_SCALAR_INT_P (new_rtx)\n \t\t       && (GET_CODE (x) == ZERO_EXTEND\n+\t\t\t   || GET_CODE (x) == SIGN_EXTEND\n \t\t\t   || GET_CODE (x) == FLOAT\n \t\t\t   || GET_CODE (x) == UNSIGNED_FLOAT))\n \t\t{"}, {"sha": "cc1a57b7097fe17524c0e8b27dba3812ba09da61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -1,3 +1,11 @@\n+2019-10-11  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR rtl-optimization/91860\n+\t* gcc.dg/pr91860-1.c: New testcase.\n+\t* gcc.dg/pr91860-2.c: New testcase.\n+\t* gcc.dg/pr91860-3.c: New testcase.\n+\t* gcc.dg/pr91860-4.c: New testcase.\n+\n 2019-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91649"}, {"sha": "e715040e33d9e4bb0e5af6e1327b32056938a470", "filename": "gcc/testsuite/gcc.dg/pr91860-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-1.c?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fipa-cp -g --param=max-combine-insns=3\" } */\n+\n+char a;\n+int b;\n+\n+static void\n+bar (short d)\n+{\n+  d <<= __builtin_sub_overflow (0, d, &a);\n+  b = __builtin_bswap16 (~d);\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (21043);\n+}"}, {"sha": "7b44e648ca62d1f000b80e2180928f015baa0c71", "filename": "gcc/testsuite/gcc.dg/pr91860-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-2.c?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fexpensive-optimizations -fno-tree-fre -g --param=max-combine-insns=4\" } */\n+\n+unsigned a, b, c;\n+void\n+foo (void)\n+{\n+  unsigned short e;\n+  __builtin_mul_overflow (0, b, &a);\n+  __builtin_sub_overflow (59347, 9, &e);\n+  e <<= a & 5;\n+  c = e;\n+}"}, {"sha": "2b488cc9048128d1cc3d46737c67c90b55ff369d", "filename": "gcc/testsuite/gcc.dg/pr91860-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-3.c?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -g2 --param=max-combine-insns=3\" } */\n+\n+int a, b;\n+\n+void\n+foo (void)\n+{\n+  unsigned short d = 46067;\n+  int e = e;\n+  d <<= __builtin_mul_overflow (~0, e, &a);\n+  d |= -68719476735;\n+  b = d;\n+}\n+"}, {"sha": "36f2bd55c6400f4102c20b4c06420cb66b7573e8", "filename": "gcc/testsuite/gcc.dg/pr91860-4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b6fde0bccc82d1a66e36b3a31177b5188cd52e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91860-4.c?ref=c6b6fde0bccc82d1a66e36b3a31177b5188cd52e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+typedef unsigned __int128 u128;\n+\n+u32 b, c;\n+\n+static inline\n+u128 bar (u8 d, u128 e)\n+{\n+  __builtin_memset (11 + (char *) &e, b, 1);\n+  d <<= e & 7;\n+  d = d | d > 0;\n+  return d + e;\n+}\n+\n+void\n+foo (void)\n+{\n+  c = bar (~0, 5);\n+}"}]}