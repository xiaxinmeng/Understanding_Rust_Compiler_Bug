{"sha": "3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzZmRmM2Q1MjE3ZTVhMmQwNzVjYTM5OWI1NTdiMmU4ODZkY2QxOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-05-11T18:54:32Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-05-11T18:54:32Z"}, "message": "preprocessor: Fix cpp_avoid_paste for digit separators\n\nThe libcpp function cpp_avoid_paste is used to insert whitespace in\npreprocessed output where needed to avoid two consecutive\npreprocessing tokens, that logically (e.g. when stringized) do not\nhave whitespace between them, from being incorrectly lexed as one when\nthe preprocessed input is reread by a compiler.\n\nThis fails to allow for digit separators, so meaning that invalid\ncode, that has a CPP_NUMBER (from a macro expansion) followed by a\ncharacter literal, can result in preprocessed output with a valid use\nof digit separators, so that required syntax errors do not occur when\ncompiling with -save-temps.  Fix this by handling that case in\ncpp_avoid_paste (as with other cases in cpp_avoid_paste, this doesn't\ntry to check whether the language version in use supports digit\nseparators; it's always OK to have unnecessary whitespace in\npreprocessed output).\n\nNote: there are other cases, with various kinds of wide character or\nstring literal following a CPP_NUMBER, where spurious pasting of\npreprocessing tokens can occur but the sequence of tokens remains\ninvalid both before and after that pasting.  Maybe cpp_avoid_paste\nshould also handle those cases (and similar cases after a CPP_NAME),\nto ensure the sequence of preprocessing tokens in preprocessed output\nis exactly right, whether or not it affects whether syntax errors\noccur.  This patch only addresses the case with digit separators where\ninvalid code can fail to be diagnosed without the space inserted.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nlibcpp/\n\t* lex.c (cpp_avoid_paste): Do not allow pasting CPP_NUMBER with\n\tCPP_CHAR.\n\ngcc/testsuite/\n\t* g++.dg/cpp1y/digit-sep-paste.C, gcc.dg/c2x-digit-separators-3.c:\n\tNew tests.", "tree": {"sha": "70b8026d4dfe436fc83dd55fd8f7f6cb11020e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70b8026d4dfe436fc83dd55fd8f7f6cb11020e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21dfb22920ce32fcf336eac4513fa44de28819e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21dfb22920ce32fcf336eac4513fa44de28819e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21dfb22920ce32fcf336eac4513fa44de28819e0"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "41fb967ef8d6dd2c342eacb0e20068ed991a19f3", "filename": "gcc/testsuite/g++.dg/cpp1y/digit-sep-paste.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-paste.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-paste.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fdigit-sep-paste.C?ref=3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "patch": "@@ -0,0 +1,11 @@\n+// Test token pasting with digit separators avoided for preprocessed output.\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-save-temps\" }\n+\n+#define ZERO 0\n+\n+int\n+f ()\n+{\n+  return ZERO'0'0; /* { dg-error \"expected\" } */\n+}"}, {"sha": "cddb88fa88087657f0a172d6b8076319b5fc00fc", "filename": "gcc/testsuite/gcc.dg/c2x-digit-separators-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-digit-separators-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-digit-separators-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-digit-separators-3.c?ref=3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "patch": "@@ -0,0 +1,12 @@\n+/* Test C2x digit separators.  Test token pasting avoided for preprocessed\n+   output.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -save-temps\" } */\n+\n+#define ZERO 0\n+\n+int\n+f (void)\n+{\n+  return ZERO'0'0; /* { dg-error \"expected\" } */\n+}"}, {"sha": "36cd2e306302e9558a7ecf77a3fe03702bb6ee8c", "filename": "libcpp/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "patch": "@@ -3725,6 +3725,7 @@ cpp_avoid_paste (cpp_reader *pfile, const cpp_token *token1,\n \t\t\t\t|| b == CPP_NAME\n \t\t\t\t|| b == CPP_CHAR || b == CPP_STRING); /* L */\n     case CPP_NUMBER:\treturn (b == CPP_NUMBER || b == CPP_NAME\n+\t\t\t\t|| b == CPP_CHAR\n \t\t\t\t|| c == '.' || c == '+' || c == '-');\n \t\t\t\t      /* UCNs */\n     case CPP_OTHER:\treturn ((token1->val.str.text[0] == '\\\\'"}]}