{"sha": "996e968353f5b91cf8b7487998783ccba61de0d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2ZTk2ODM1M2Y1YjkxY2Y4Yjc0ODc5OTg3ODNjY2JhNjFkZTBkOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-12-07T22:38:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-12-07T22:38:24Z"}, "message": "local-alloc.c (block_alloc): Slightly retune heuristic to widen qty lifetimes.\n\n        * local-alloc.c (block_alloc): Slightly retune heuristic to widen\n        qty lifetimes.\nActually check in the local-alloc patch that goes along with this ChangeLog\nentry...\n\nFrom-SVN: r24171", "tree": {"sha": "67ea70a71f5deccf9a008f1f761972d95862648a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67ea70a71f5deccf9a008f1f761972d95862648a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996e968353f5b91cf8b7487998783ccba61de0d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996e968353f5b91cf8b7487998783ccba61de0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996e968353f5b91cf8b7487998783ccba61de0d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996e968353f5b91cf8b7487998783ccba61de0d8/comments", "author": null, "committer": null, "parents": [{"sha": "70d5ccef064325bcab1d3fbc57a6fef9aee2a096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d5ccef064325bcab1d3fbc57a6fef9aee2a096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d5ccef064325bcab1d3fbc57a6fef9aee2a096"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "f7d12d2e1e085676ce5be1aeaaea85e9f262569a", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996e968353f5b91cf8b7487998783ccba61de0d8/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996e968353f5b91cf8b7487998783ccba61de0d8/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=996e968353f5b91cf8b7487998783ccba61de0d8", "patch": "@@ -1414,17 +1414,18 @@ block_alloc (b)\n \t     discourage the register allocator from creating false\n \t     dependencies.\n  \n-\t     The adjustment by the value +-3 indicates precisely that\n-\t     this qty conflicts with qtys in the instructions immediately\n+\t     The adjustment value is choosen to indicate that this qty\n+\t     conflicts with all the qtys in the instructions immediately\n \t     before and after the lifetime of this qty.\n \n \t     Experiments have shown that higher values tend to hurt\n \t     overall code performance.\n \n \t     If allocation using the extended lifetime fails we will try\n \t     again with the qty's unadjusted lifetime.  */\n-\t  int fake_birth = MAX (0, qty_birth[q] - 3);\n-\t  int fake_death = MIN (insn_number * 2 + 1, qty_death[q] + 3);\n+\t  int fake_birth = MAX (0, qty_birth[q] - 2 + qty_birth[q] % 2);\n+\t  int fake_death = MIN (insn_number * 2 + 1,\n+\t\t\t\tqty_death[q] + 2 - qty_death[q] % 2);\n #endif\n \n \t  if (N_REG_CLASSES > 1)"}]}