{"sha": "fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlZmY1NjM5NjkwNWMyNzAxNTYwYWQ5MGYxZjFiY2RkNWMyZmQ1NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-10-12T18:13:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-10-12T18:13:41Z"}, "message": "re PR c++/21592 (ICE in resolve_overloaded_unification/arg_assoc)\n\ncp:\n\tPR c++/21592\n\t* pt.c (build_non_dependent_expr): Don't wrap a COMPONENT_REF\n\twith already looked up member functions.  Assert we're not\n\treturning a NON_DEPENDENT_EXPR with unknown type.\n\t* typeck.c (finish_class_member_access_expr):  We can get\n\tnon-template-id-expr baselinks.  If the lookup finds a baselink,\n\tremember it even inside templates.\ntestsuite:\n\tPR c++/21592\n\t* g++.dg/template/dependent-expr1.C: Add new expected error.\n\t* g++.dg/template/dependent-expr2.C: Adjust error text.\n\t* g++.dg/template/overload6.C: New.\n\nFrom-SVN: r105313", "tree": {"sha": "972b3ae09161bee749f644b55853df35eaf2009e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972b3ae09161bee749f644b55853df35eaf2009e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/comments", "author": null, "committer": null, "parents": [{"sha": "3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce5fa4fa606357251b653f66fbef96fdfcbea2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce5fa4fa606357251b653f66fbef96fdfcbea2f"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "404c7de9943dfa0107e3ab9121ea72a57c68482b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -1,5 +1,13 @@\n 2005-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/21592\n+\t* pt.c (build_non_dependent_expr): Don't wrap a COMPONENT_REF\n+\twith already looked up member functions.  Assert we're not\n+\treturning a NON_DEPENDENT_EXPR with unknown type.\n+\t* typeck.c (finish_class_member_access_expr):  We can get\n+\tnon-template-id-expr baselinks.  If the lookup finds a baselink,\n+\tremember it even inside templates.\n+\n \tPR c++/23797\n \t* parser.c (cp_parser_functional_cast): Cope when TYPE is not a\n \tTYPE_DECL.  Use dependent_type_p to check type."}, {"sha": "6724cf49b2e6d74a5cb74cb1093eaf94aaea3f4f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -12641,7 +12641,9 @@ build_non_dependent_expr (tree expr)\n   /* Preserve OVERLOADs; the functions must be available to resolve\n      types.  */\n   inner_expr = (TREE_CODE (expr) == ADDR_EXPR ?\n-\t\tTREE_OPERAND (expr, 0) : expr);\n+\t\tTREE_OPERAND (expr, 0) :\n+\t\tTREE_CODE (expr) == COMPONENT_REF ?\n+\t\tTREE_OPERAND (expr, 1) : expr);\n   if (is_overloaded_fn (inner_expr)\n       || TREE_CODE (inner_expr) == OFFSET_REF)\n     return expr;\n@@ -12680,6 +12682,9 @@ build_non_dependent_expr (tree expr)\n \t\t   TREE_OPERAND (expr, 0),\n \t\t   build_non_dependent_expr (TREE_OPERAND (expr, 1)));\n \n+  /* If the type is unknown, it can't really be non-dependent */\n+  gcc_assert (TREE_TYPE (expr) != unknown_type_node);\n+  \n   /* Otherwise, build a NON_DEPENDENT_EXPR.\n \n      REFERENCE_TYPEs are not stripped for expressions in templates"}, {"sha": "d39b53ae967b2c1583979446bd8a644db94cbc7e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -1904,11 +1904,8 @@ finish_class_member_access_expr (tree object, tree name)\n     }\n \n   if (BASELINK_P (name))\n-    {\n-      /* A member function that has already been looked up.  */\n-      gcc_assert (TREE_CODE (BASELINK_FUNCTIONS (name)) == TEMPLATE_ID_EXPR);\n-      member = name;\n-    }\n+    /* A member function that has already been looked up.  */\n+    member = name;\n   else\n     {\n       bool is_template_id = false;\n@@ -2002,7 +1999,9 @@ finish_class_member_access_expr (tree object, tree name)\n \t\t\t\t\t /*preserve_reference=*/false);\n   if (processing_template_decl && expr != error_mark_node)\n     return build_min_non_dep (COMPONENT_REF, expr,\n-\t\t\t      orig_object, orig_name, NULL_TREE);\n+\t\t\t      orig_object,\n+\t\t\t      BASELINK_P (member) ? member : orig_name,\n+\t\t\t      NULL_TREE);\n   return expr;\n }\n "}, {"sha": "9c14e0d2173a8425256ca46b5ccca8e89b3810a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -1,5 +1,10 @@\n 2005-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/21592\n+\t* g++.dg/template/dependent-expr1.C: Add new expected error.\n+\t* g++.dg/template/dependent-expr2.C: Adjust error text.\n+\t* g++.dg/template/overload6.C: New.\n+\n \tPR c++/23797\n \t* g++.dg/other/typename8.C: New.\n "}, {"sha": "79649861ba47e3107b324d03029c46c8ba996333", "filename": "gcc/testsuite/g++.dg/template/dependent-expr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -19,7 +19,7 @@ namespace std\n     Foo (sizeof (x));\n     Foo (__alignof__ (I));\n     Foo (__alignof__ (x));\n-    Foo (x->~I ());\n+    Foo (x->~I ()); // { dg-error \"\" }\n     //    Foo (typeid (I));\n     Foo (delete x); // { dg-error \"\" }\n     Foo (delete[] x); // { dg-error \"\" }"}, {"sha": "06f056b4140ecb3e942ea3d826cbe27d42d42ba9", "filename": "gcc/testsuite/g++.dg/template/dependent-expr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr2.C?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -18,6 +18,6 @@ struct B\n {\n   bool bar(A& a)\n   {\n-    return a.foo == 0; // { dg-error \"insufficient context\" \"\" }\n+    return a.foo == 0; // { dg-error \"\" \"\" }\n   }\n };"}, {"sha": "478b466394ad6dab21b3c95bcc5821a2451e5fae", "filename": "gcc/testsuite/g++.dg/template/overload6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeff56396905c2701560ad90f1f1bcdd5c2fd55/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload6.C?ref=fdeff56396905c2701560ad90f1f1bcdd5c2fd55", "patch": "@@ -0,0 +1,17 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 12 Oct 2005 <nathan@codesourcery.com>\n+\n+// PR 21592:ICE\n+// Origin:  Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+template<typename T> void unique(T,T);\n+\n+struct A\n+{\n+  int begin();\n+};\n+\n+template<int> void foo()\n+{\n+  unique(A().begin); // { dg-error \"no matching function\" \"\" }\n+}"}]}