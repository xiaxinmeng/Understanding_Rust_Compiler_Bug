{"sha": "80cad5faeb98e96f52597f2e8817c742a1ddacd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjYWQ1ZmFlYjk4ZTk2ZjUyNTk3ZjJlODgxN2M3NDJhMWRkYWNkMA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2004-10-16T16:49:53Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-10-16T16:49:53Z"}, "message": "tree-ssa-loop-ivopts.c (struct ivopts_data): New field important_candidates.\n\n\t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field important_candidates.\n\t(find_best_candidate): Take also important candidates into account.\n\t(find_optimal_iv_set): Initialize important_candidates bitmap.\n\nFrom-SVN: r89146", "tree": {"sha": "44606bf9ab44f65ab4dfa8b82f013615abb9f0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44606bf9ab44f65ab4dfa8b82f013615abb9f0d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80cad5faeb98e96f52597f2e8817c742a1ddacd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cad5faeb98e96f52597f2e8817c742a1ddacd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cad5faeb98e96f52597f2e8817c742a1ddacd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cad5faeb98e96f52597f2e8817c742a1ddacd0/comments", "author": null, "committer": null, "parents": [{"sha": "f59b0bd4e69f883adcf25fa44b15b993ff52cc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59b0bd4e69f883adcf25fa44b15b993ff52cc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59b0bd4e69f883adcf25fa44b15b993ff52cc07"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "2ddfb50cad36207140d0fa32589878c61cf4b380", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cad5faeb98e96f52597f2e8817c742a1ddacd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cad5faeb98e96f52597f2e8817c742a1ddacd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80cad5faeb98e96f52597f2e8817c742a1ddacd0", "patch": "@@ -1,3 +1,9 @@\n+2004-10-16  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field important_candidates.\n+\t(find_best_candidate): Take also important candidates into account.\n+\t(find_optimal_iv_set): Initialize important_candidates bitmap.\n+\n 2004-10-16  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/17560"}, {"sha": "70379dd1ddf6ffef5f1c399cc8b87f8566a162f8", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cad5faeb98e96f52597f2e8817c742a1ddacd0/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cad5faeb98e96f52597f2e8817c742a1ddacd0/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=80cad5faeb98e96f52597f2e8817c742a1ddacd0", "patch": "@@ -219,6 +219,9 @@ struct ivopts_data\n   /* The candidates.  */\n   varray_type iv_candidates;\n \n+  /* A bitmap of important candidates.  */\n+  bitmap important_candidates;\n+\n   /* Whether to consider just related and important candidates when replacing a\n      use.  */\n   bool consider_all_candidates;\n@@ -3474,7 +3477,9 @@ find_best_candidate (struct ivopts_data *data,\n   else\n     {\n       asol = BITMAP_XMALLOC ();\n-      bitmap_a_and_b (asol, sol, use->related_cands);\n+\n+      bitmap_a_or_b (asol, data->important_candidates, use->related_cands);\n+      bitmap_a_and_b (asol, asol, sol);\n     }\n \n   EXECUTE_IF_SET_IN_BITMAP (asol, 0, c, bi)\n@@ -3741,6 +3746,15 @@ find_optimal_iv_set (struct ivopts_data *data)\n   bitmap inv = BITMAP_XMALLOC ();\n   struct iv_use *use;\n \n+  data->important_candidates = BITMAP_XMALLOC ();\n+  for (i = 0; i < n_iv_cands (data); i++)\n+    {\n+      struct iv_cand *cand = iv_cand (data, i);\n+\n+      if (cand->important)\n+\tbitmap_set_bit (data->important_candidates, i);\n+    }\n+\n   /* Set the upper bound.  */\n   cost = get_initial_solution (data, set, inv);\n   if (cost == INFTY)\n@@ -3783,6 +3797,7 @@ find_optimal_iv_set (struct ivopts_data *data)\n     }\n \n   BITMAP_XFREE (inv);\n+  BITMAP_XFREE (data->important_candidates);\n \n   return set;\n }"}]}