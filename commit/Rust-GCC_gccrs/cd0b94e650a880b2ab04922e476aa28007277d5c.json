{"sha": "cd0b94e650a880b2ab04922e476aa28007277d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwYjk0ZTY1MGE4ODBiMmFiMDQ5MjJlNDc2YWEyODAwNzI3N2Q1Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-12T14:52:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-12T14:52:02Z"}, "message": "Replace std::to_string for integers with optimized version\n\nThe std::to_chars functions from C++17 can be used to implement\nstd::to_string with much better performance than calling snprintf. Only\nthe __detail::__to_chars_len and __detail::__to_chars_10 functions are\nneeded for to_string, because it always outputs base 10 representations.\n\nThe return type of __detail::__to_chars_10 should not be declared before\nC++17, so the function body is extracted into a new function that can be\nreused by to_string and __detail::__to_chars_10.\n\nThe existing tests for to_chars rely on to_string to check for correct\nanswers. Now that they use the same code that doesn't actually ensure\ncorrectness, so add new tests for std::to_string that compare against\nprintf output.\n\n\t* include/Makefile.am: Add new <bits/charconv.h> header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/basic_string.h (to_string(int), to_string(unsigned))\n\t(to_string(long), to_string(unsigned long), to_string(long long))\n\t(to_string(unsigned long long)): Rewrite to use __to_chars_10_impl.\n\t* include/bits/charconv.h: New header.\n\t(__detail::__to_chars_len): Move here from <charconv>.\n\t(__detail::__to_chars_10_impl): New function extracted from\n\t__detail::__to_chars_10.\n\t* include/std/charconv (__cpp_lib_to_chars): Add, but comment out.\n\t(__to_chars_unsigned_type): New class template that reuses\n\t__make_unsigned_selector_base::__select to pick a type.\n\t(__unsigned_least_t): Redefine as __to_chars_unsigned_type<T>::type.\n\t(__detail::__to_chars_len): Move to new header.\n\t(__detail::__to_chars_10): Add inline specifier. Move code doing the\n\toutput to __detail::__to_chars_10_impl and call that.\n\t* include/std/version (__cpp_lib_to_chars): Add, but comment out.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n\tto_string.cc: Fix reference in comment. Remove unused variable.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n\tto_string_int.cc: New test.\n\nFrom-SVN: r272186", "tree": {"sha": "392d0abf2fbedc380e69b203ddb9b74c775d072d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/392d0abf2fbedc380e69b203ddb9b74c775d072d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0b94e650a880b2ab04922e476aa28007277d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0b94e650a880b2ab04922e476aa28007277d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0b94e650a880b2ab04922e476aa28007277d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0b94e650a880b2ab04922e476aa28007277d5c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7b3aa51f8edd24fdc599d9f95a5cbf61aeb76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7b3aa51f8edd24fdc599d9f95a5cbf61aeb76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7b3aa51f8edd24fdc599d9f95a5cbf61aeb76e"}], "stats": {"total": 440, "additions": 365, "deletions": 75}, "files": [{"sha": "6d5e4b9ec163b2f5d9b832bcbb111a1518c8fb64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -1,3 +1,27 @@\n+2019-06-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new <bits/charconv.h> header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/basic_string.h (to_string(int), to_string(unsigned))\n+\t(to_string(long), to_string(unsigned long), to_string(long long))\n+\t(to_string(unsigned long long)): Rewrite to use __to_chars_10_impl.\n+\t* include/bits/charconv.h: New header.\n+\t(__detail::__to_chars_len): Move here from <charconv>.\n+\t(__detail::__to_chars_10_impl): New function extracted from\n+\t__detail::__to_chars_10.\n+\t* include/std/charconv (__cpp_lib_to_chars): Add, but comment out.\n+\t(__to_chars_unsigned_type): New class template that reuses\n+\t__make_unsigned_selector_base::__select to pick a type.\n+\t(__unsigned_least_t): Redefine as __to_chars_unsigned_type<T>::type.\n+\t(__detail::__to_chars_len): Move to new header.\n+\t(__detail::__to_chars_10): Add inline specifier. Move code doing the\n+\toutput to __detail::__to_chars_10_impl and call that.\n+\t* include/std/version (__cpp_lib_to_chars): Add, but comment out.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n+\tto_string.cc: Fix reference in comment. Remove unused variable.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n+\tto_string_int.cc: New test.\n+\n 2019-06-09  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tFix ConstexprIterator requirements tests - No constexpr algorithms!"}, {"sha": "742f2c38ad56f1f47d510367f1c51cdb36f51c41", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -102,6 +102,7 @@ bits_headers = \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/charconv.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\"}, {"sha": "fd4dbf7ffb71b095f05186e521702e3e83dbae37", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -446,6 +446,7 @@ bits_headers = \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/char_traits.h \\\n+\t${bits_srcdir}/charconv.h \\\n \t${bits_srcdir}/codecvt.h \\\n \t${bits_srcdir}/concept_check.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\"}, {"sha": "f1bdc6c553ff0a983542735d3a4520a750a24bc7", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -6500,6 +6500,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n \n #include <ext/string_conversions.h>\n+#include <bits/charconv.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -6547,43 +6548,68 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n #endif // _GLIBCXX_USE_C99_STDLIB\n \n-#if _GLIBCXX_USE_C99_STDIO\n-  // NB: (v)snprintf vs sprintf.\n+  // DR 1261. Insufficent overloads for to_string / to_wstring\n \n-  // DR 1261.\n   inline string\n   to_string(int __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),\n-\t\t\t\t\t   \"%d\", __val); }\n+  {\n+    const bool __neg = __val < 0;\n+    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;\n+    const auto __len = __detail::__to_chars_len(__uval);\n+    string __str(__neg + __len, '-');\n+    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);\n+    return __str;\n+  }\n \n   inline string\n   to_string(unsigned __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n-\t\t\t\t\t   4 * sizeof(unsigned),\n-\t\t\t\t\t   \"%u\", __val); }\n+  {\n+    string __str(__detail::__to_chars_len(__val), '\\0');\n+    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);\n+    return __str;\n+  }\n \n   inline string\n   to_string(long __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),\n-\t\t\t\t\t   \"%ld\", __val); }\n+  {\n+    const bool __neg = __val < 0;\n+    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;\n+    const auto __len = __detail::__to_chars_len(__uval);\n+    string __str(__neg + __len, '-');\n+    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);\n+    return __str;\n+  }\n \n   inline string\n   to_string(unsigned long __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n-\t\t\t\t\t   4 * sizeof(unsigned long),\n-\t\t\t\t\t   \"%lu\", __val); }\n+  {\n+    string __str(__detail::__to_chars_len(__val), '\\0');\n+    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);\n+    return __str;\n+  }\n \n   inline string\n   to_string(long long __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n-\t\t\t\t\t   4 * sizeof(long long),\n-\t\t\t\t\t   \"%lld\", __val); }\n+  {\n+    const bool __neg = __val < 0;\n+    const unsigned long long __uval\n+      = __neg ? (unsigned long long)~__val + 1ull : __val;\n+    const auto __len = __detail::__to_chars_len(__uval);\n+    string __str(__neg + __len, '-');\n+    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);\n+    return __str;\n+  }\n \n   inline string\n   to_string(unsigned long long __val)\n-  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n-\t\t\t\t\t   4 * sizeof(unsigned long long),\n-\t\t\t\t\t   \"%llu\", __val); }\n+  {\n+    string __str(__detail::__to_chars_len(__val), '\\0');\n+    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);\n+    return __str;\n+  }\n+\n+#if _GLIBCXX_USE_C99_STDIO\n+  // NB: (v)snprintf vs sprintf.\n \n   inline string\n   to_string(float __val)"}, {"sha": "0911660fab6852a61e55f662c4ee5be499e8461b", "filename": "libstdc++-v3/include/bits/charconv.h", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -0,0 +1,106 @@\n+// Numeric conversions (to_string, to_chars) -*- C++ -*-\n+\n+// Copyright (C) 2017-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/charconv.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{charconv}\n+ */\n+\n+#ifndef _GLIBCXX_CHARCONV_H\n+#define _GLIBCXX_CHARCONV_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus >= 201103L\n+\n+#include <type_traits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+namespace __detail\n+{\n+  // Generic implementation for arbitrary bases.\n+  template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR unsigned\n+    __to_chars_len(_Tp __value, int __base = 10) noexcept\n+    {\n+      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n+      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+\n+      unsigned __n = 1;\n+      const int __b2 = __base  * __base;\n+      const int __b3 = __b2 * __base;\n+      const int __b4 = __b3 * __base;\n+      for (;;)\n+\t{\n+\t  if (__value < __base) return __n;\n+\t  if (__value < __b2) return __n + 1;\n+\t  if (__value < __b3) return __n + 2;\n+\t  if (__value < __b4) return __n + 3;\n+\t  __value /= (unsigned)__b4;\n+\t  __n += 4;\n+\t}\n+    }\n+\n+  // Write an unsigned integer value to the range [first,first+len).\n+  // The caller is required to provide a buffer of exactly the right size\n+  // (which can be determined by the __to_chars_len function).\n+  template<typename _Tp>\n+    void\n+    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept\n+    {\n+      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n+      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n+\n+      static constexpr char __digits[201] =\n+\t\"0001020304050607080910111213141516171819\"\n+\t\"2021222324252627282930313233343536373839\"\n+\t\"4041424344454647484950515253545556575859\"\n+\t\"6061626364656667686970717273747576777879\"\n+\t\"8081828384858687888990919293949596979899\";\n+      unsigned __pos = __len - 1;\n+      while (__val >= 100)\n+\t{\n+\t  auto const __num = (__val % 100) * 2;\n+\t  __val /= 100;\n+\t  __first[__pos] = __digits[__num + 1];\n+\t  __first[__pos - 1] = __digits[__num];\n+\t  __pos -= 2;\n+\t}\n+      if (__val >= 10)\n+\t{\n+\t  auto const __num = __val * 2;\n+\t  __first[__pos] = __digits[__num + 1];\n+\t  __first[__pos - 1] = __digits[__num];\n+\t}\n+      else\n+\t__first[__pos] = '0' + __val;\n+    }\n+\n+} // namespace __detail\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++11\n+#endif // _GLIBCXX_CHARCONV_H"}, {"sha": "a777f60501debfbabde5f6b4e7ca72d2321d18dd", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 22, "deletions": 53, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -36,8 +36,11 @@\n #include <type_traits>\n #include <limits>\n #include <cctype>\n+#include <bits/charconv.h> // for __to_chars_len, __to_chars_10_impl\n #include <bits/error_constants.h> // for std::errc\n \n+// Define when floating point is supported: #define __cpp_lib_to_chars 201611L\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -76,42 +79,30 @@ namespace __detail\n     using __integer_to_chars_result_type\n       = enable_if_t<__is_int_to_chars_type<_Tp>::value, to_chars_result>;\n \n+  // Pick an unsigned type of suitable size. This is used to reduce the\n+  // number of specializations of __to_chars_len, __to_chars etc. that\n+  // get instantiated. For example, to_chars<char> and to_chars<short>\n+  // and to_chars<unsigned> will all use the same code, and so will\n+  // to_chars<long> when sizeof(int) == sizeof(long).\n   template<typename _Tp>\n-    using __unsigned_least_t\n-      = conditional_t<(sizeof(_Tp) <= sizeof(int)), unsigned int,\n-\tconditional_t<(sizeof(_Tp) <= sizeof(long)), unsigned long,\n-\tconditional_t<(sizeof(_Tp) <= sizeof(long long)), unsigned long long,\n-#if _GLIBCXX_USE_INT128\n-\tconditional_t<(sizeof(_Tp) <= sizeof(__int128)), unsigned __int128,\n-#endif\n-\tvoid\n+    struct __to_chars_unsigned_type : __make_unsigned_selector_base\n+    {\n+      using _UInts = _List<unsigned int, unsigned long, unsigned long long\n #if _GLIBCXX_USE_INT128\n-\t>\n+\t, unsigned __int128\n #endif\n-\t>>>;\n+\t>;\n+      using type = typename __select<sizeof(_Tp), _UInts>::__type;\n+    };\n+\n+  template<typename _Tp>\n+    using __unsigned_least_t = typename __to_chars_unsigned_type<_Tp>::type;\n \n   // Generic implementation for arbitrary bases.\n+  // Defined in <bits/charconv.h>.\n   template<typename _Tp>\n     constexpr unsigned\n-    __to_chars_len(_Tp __value, int __base = 10) noexcept\n-    {\n-      static_assert(is_integral<_Tp>::value, \"implementation bug\");\n-      static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n-\n-      unsigned __n = 1;\n-      const int __b2 = __base  * __base;\n-      const int __b3 = __b2 * __base;\n-      const int __b4 = __b3 * __base;\n-      for (;;)\n-\t{\n-\t  if (__value < __base) return __n;\n-\t  if (__value < __b2) return __n + 1;\n-\t  if (__value < __b3) return __n + 2;\n-\t  if (__value < __b4) return __n + 3;\n-\t  __value /= (unsigned)__b4;\n-\t  __n += 4;\n-\t}\n-    }\n+    __to_chars_len(_Tp __value, int __base /* = 10 */) noexcept;\n \n   template<typename _Tp>\n     constexpr unsigned\n@@ -242,7 +233,7 @@ namespace __detail\n     }\n \n   template<typename _Tp>\n-    __integer_to_chars_result_type<_Tp>\n+    inline __integer_to_chars_result_type<_Tp>\n     __to_chars_10(char* __first, char* __last, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -259,29 +250,7 @@ namespace __detail\n \t  return __res;\n \t}\n \n-      static constexpr char __digits[201] =\n-\t\"0001020304050607080910111213141516171819\"\n-\t\"2021222324252627282930313233343536373839\"\n-\t\"4041424344454647484950515253545556575859\"\n-\t\"6061626364656667686970717273747576777879\"\n-\t\"8081828384858687888990919293949596979899\";\n-      unsigned __pos = __len - 1;\n-      while (__val >= 100)\n-\t{\n-\t  auto const __num = (__val % 100) * 2;\n-\t  __val /= 100;\n-\t  __first[__pos] = __digits[__num + 1];\n-\t  __first[__pos - 1] = __digits[__num];\n-\t  __pos -= 2;\n-\t}\n-      if (__val >= 10)\n-\t{\n-\t  auto const __num = __val * 2;\n-\t  __first[__pos] = __digits[__num + 1];\n-\t  __first[__pos - 1] = __digits[__num];\n-\t}\n-      else\n-\t__first[__pos] = '0' + __val;\n+      __detail::__to_chars_10_impl(__first, __len, __val);\n       __res.ptr = __first + __len;\n       __res.ec = {};\n       return __res;"}, {"sha": "cef4f1f8e9cc490b7894c59bedfdd9d6ca6a57cb", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -139,6 +139,7 @@\n #endif\n #define __cpp_lib_shared_ptr_weak_type 201606\n #define __cpp_lib_string_view 201603\n+// #define __cpp_lib_to_chars 201611L\n #define __cpp_lib_type_trait_variable_templates 201510L\n #define __cpp_lib_uncaught_exceptions 201411L\n #define __cpp_lib_unordered_map_insertion 201411"}, {"sha": "a3dab3e54acb81524c57adef1b5ffa0df7319a86", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/to_string.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string.cc?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -20,15 +20,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 21.4 Numeric Conversions [string.conversions]\n+// C++11 21.5 Numeric Conversions [string.conversions]\n \n #include <string>\n #include <testsuite_hooks.h>\n \n void\n test01()\n {\n-  bool test = true;\n   using namespace std;\n   \n   long long ll1 = -2;\n@@ -59,5 +58,4 @@ test01()\n int main()\n {\n   test01();\n-  return 0;\n }"}, {"sha": "8eb2a48bd3067c073ecf424914752f714c98954d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/to_string_int.cc", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b94e650a880b2ab04922e476aa28007277d5c/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fto_string_int.cc?ref=cd0b94e650a880b2ab04922e476aa28007277d5c", "patch": "@@ -0,0 +1,164 @@\n+// { dg-options \"-DSIMULATOR_TEST\" { target simulator } }\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 21.5 Numeric Conversions [string.conversions]\n+\n+#include <string>\n+#include <limits>\n+#include <cstdint>\n+#include <cstdio>\n+#include <testsuite_hooks.h>\n+\n+namespace test\n+{\n+static char buf[100];\n+\n+// Canonical version of std::to_string(int) as specified in the standard.\n+static std::string to_string(int val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%d\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+static std::string to_string(unsigned int val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%u\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+static std::string to_string(long val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%ld\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+static std::string to_string(unsigned long val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%lu\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+static std::string to_string(long long val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%lld\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+static std::string to_string(unsigned long long val)\n+{\n+  std::string str;\n+  const int len = std::snprintf(buf, sizeof(buf), \"%llu\", val);\n+  VERIFY( len < (int)sizeof(buf) );\n+  return std::string(buf, len);\n+}\n+\n+} // namespace test\n+\n+const std::uint_least32_t values[] = {\n+  0x10, 0x30, 0x50, 0x80, 0xc0,\n+  0x100, 0x180, 0x1c0, 0x200, 0x400, 0x800, 0xc00,\n+  0x1000, 0x1800, 0x2000, 0x4000, 0x8000, 0xc000,\n+  0x10000, 0x10101, 0x80000, 0x80706, 0xc0000, 0xccccc,\n+  0x100000, 0x101010, 0x800000, 0x807060, 0xc0fefe, 0xc1d2e3f,\n+  0x1000000, 0x1001000, 0x1008000, 0x1010000, 0x1080000, 0x1100000, 0x1234567,\n+  0x10000000, 0x10101010, 0x12345678, 0x80000010, 0x87654321, 0xaaaaaaaa,\n+  0xf0000000, 0xf0101010, 0xf0f00000, 0xf0f0f0f0, 0xf0ff0ff0, 0xff0ff00f,\n+  0xffff0000, 0xffff00f0, 0xffff0ff0, 0xffffff00\n+};\n+\n+const std::size_t empty_string_capacity = std::string().capacity();\n+\n+#include <set>\n+\n+template<typename T>\n+  void check_value(T val)\n+  {\n+    const std::string s = std::to_string(val);\n+    const std::string expected = test::to_string(val);\n+    VERIFY( s == expected );\n+    VERIFY( s[s.size()] == '\\0' ); // null-terminator not overwritten!\n+    if (s.size() > empty_string_capacity)\n+      VERIFY( s.capacity() == s.size() ); // GNU-specific guarantee\n+  }\n+\n+#ifdef SIMULATOR_TEST\n+const int width = 3;\n+#else\n+const int width = 16;\n+#endif\n+\n+template<typename T>\n+  void check_values()\n+  {\n+#ifdef SIMULATOR_TEST\n+    check_value((T)-1);\n+    check_value((T)0);\n+    check_value((T)+1);\n+#endif\n+\n+    for (auto v : values)\n+    {\n+      for (int i = -width; i < +width; ++i)\n+      {\n+\tconst T val = (T)v + i;\n+\tcheck_value(val);\n+      }\n+\n+      if (std::numeric_limits<T>::digits > 32)\n+      {\n+\tfor (auto v2 : values)\n+\t{\n+\t  for (int i = -width; i < +width; ++i)\n+\t  {\n+\t    typename std::make_unsigned<T>::type hi = v2;\n+\t    hi += i;\n+\t    hi <<= 32;\n+\t    const T val = T(hi) | v;\n+\t    check_value(val);\n+\t  }\n+\t}\n+      }\n+    }\n+  }\n+\n+void test02()\n+{\n+  check_values<int>();\n+  check_values<unsigned int>();\n+  check_values<long>();\n+  check_values<unsigned long>();\n+  check_values<long long>();\n+  check_values<unsigned long long>();\n+}\n+\n+int main()\n+{\n+  test02();\n+}"}]}