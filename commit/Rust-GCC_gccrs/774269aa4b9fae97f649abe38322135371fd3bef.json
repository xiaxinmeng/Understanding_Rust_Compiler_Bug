{"sha": "774269aa4b9fae97f649abe38322135371fd3bef", "node_id": "C_kwDOANBUbNoAKDc3NDI2OWFhNGI5ZmFlOTdmNjQ5YWJlMzgzMjIxMzUzNzFmZDNiZWY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-17T00:16:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-17T00:16:20Z"}, "message": "Daily bump.", "tree": {"sha": "99b9012fc16e14d3bd8e248ffaeaa7fa07fab63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b9012fc16e14d3bd8e248ffaeaa7fa07fab63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774269aa4b9fae97f649abe38322135371fd3bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774269aa4b9fae97f649abe38322135371fd3bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774269aa4b9fae97f649abe38322135371fd3bef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774269aa4b9fae97f649abe38322135371fd3bef/comments", "author": null, "committer": null, "parents": [{"sha": "840a22e0fee9e7369a2eb1c9e3c70dcae24a20e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840a22e0fee9e7369a2eb1c9e3c70dcae24a20e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840a22e0fee9e7369a2eb1c9e3c70dcae24a20e4"}], "stats": {"total": 301, "additions": 300, "deletions": 1}, "files": [{"sha": "b4023cc7aa8aae799633381e37027b8b7247e0cd", "filename": "ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,21 @@\n+2021-12-16  Matthias Seidel  <mseidel@apache.org>\n+\n+\t* config.sub: Fix typo.\n+\n+2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tRevert:\n+\t2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.tpl (AR): Add @AR_PLUGIN_OPTION@\n+\t(RANLIB): Add @RANLIB_PLUGIN_OPTION@.\n+\t* configure.ac: Include config/gcc-plugin.m4.\n+\tAC_SUBST AR_PLUGIN_OPTION and RANLIB_PLUGIN_OPTION.\n+\t* libtool.m4 (_LT_CMD_OLD_ARCHIVE): Pass --plugin to AR and\n+\tRANLIB if possible.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* Makefile.tpl (BUILD_CFLAGS): New."}, {"sha": "5bc7097cde094e788c193d961ba01d1d84349430", "filename": "config/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,10 @@\n+2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tRevert:\n+\t2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc-plugin.m4 (GCC_PLUGIN_OPTION): New.\n+\n 2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* gcc-plugin.m4 (GCC_PLUGIN_OPTION): New."}, {"sha": "a027d4be080ce8b39b2e11a11bb9fd74a7487d75", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,7 @@\n+2021-12-16  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* analyze_brprob_spec.py: Add verbose argument.\n+\n 2021-12-06  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Filter out one warning."}, {"sha": "02e8f71cd29c6cee037f0cb886fbcc2c9bc63cd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,65 @@\n+2021-12-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103571\n+\t* config/i386/i386.h (VALID_AVX256_REG_MODE): Add V16HFmode.\n+\t(VALID_AVX256_REG_OR_OI_VHF_MODE): Replace with ...\n+\t(VALID_AVX256_REG_OR_OI_MODE): ... this.  Remove V16HFmode.\n+\t(VALID_AVX512F_SCALAR_MODE): Remove HImode and HFmode.\n+\t(VALID_AVX512FP16_SCALAR_MODE): New.\n+\t(VALID_AVX512F_REG_MODE): Add V32HFmode.\n+\t(VALID_SSE2_REG_MODE): Add V8HFmode, V4HFmode and V2HFmode.\n+\t(VALID_SSE2_REG_VHF_MODE): Remove.\n+\t(VALID_INT_MODE_P): Add V2HFmode.\n+\t* config/i386/i386.c (function_arg_advance_64):\n+\tRemove explicit mention of V16HFmode and V32HFmode.\n+\t(ix86_hard_regno_mode_ok): Remove explicit mention of XImode\n+\tand V32HFmode, use VALID_AVX512F_REG_OR_XI_MODE instead.\n+\tUse VALID_AVX512FP_SCALAR_MODE for TARGET_aVX512FP16.\n+\tUse VALID_AVX256_REG_OR_OI_MODE instead of\n+\tVALID_AVX256_REG_OR_OI_VHF_MODE and VALID_SSE2_REG_MODE instead\n+\tof VALID_SSE2_REG_VHF_MODE.\n+\t(ix86_set_reg_reg_cost): Remove usge of VALID_AVX512FP16_REG_MODE.\n+\t(ix86_vector_mode_supported): Ditto.\n+\n+2021-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/103696\n+\t* attribs.c (decl_attributes): Check if\n+\ttarget_option_current_node is changed.\n+\n+2021-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Add missing dash.\n+\n+2021-12-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (resolution): New enum.\n+\t(resolve_vec_mul): New function.\n+\t(resolve_vec_cmpne): Likewise.\n+\t(resolve_vec_adde_sube): Likewise.\n+\t(resolve_vec_addec_subec): Likewise.\n+\t(resolve_vec_splats): Likewise.\n+\t(resolve_vec_extract): Likewise.\n+\t(resolve_vec_insert): Likewise.\n+\t(resolve_vec_step): Likewise.\n+\t(find_instance): Likewise.\n+\t(altivec_resolve_overloaded_builtin): Many cleanups.  Call factored-out\n+\tfunctions.  Move variable declarations closer to uses.  Add commentary.\n+\tRemove unnecessary levels of braces.  Avoid use of gotos.  Change\n+\tmisleading variable names.  Use switches over if-else-if chains.\n+\n+2021-12-16  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\tPR target/103729\n+\t* config/aarch64/aarch64-simd.md (aarch64_movv8di): Allow big endian\n+\ttargets to move V8DI.\n+\n+2021-12-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR driver/103644\n+\t* gcc.c (check_offload_target_name): Add 'default' and 'disable'\n+\tto the candidate list.\n+\n 2021-12-15  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure: Regenerate."}, {"sha": "7b090ebf5311d33135fbb273a2b07861aa2f59fc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1 +1 @@\n-20211216\n+20211217"}, {"sha": "e2dcb93723e1210520a677a73682ac4b373b8ea3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,10 @@\n+2021-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/103709\n+\t* c-pragma.c (handle_pragma_pop_options): Do not check\n+\tglobal options modification when an error is seen in parsing\n+\tof options (pragmas or attributes).\n+\n 2021-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* known-headers.cc: Define INCLUDE_MEMORY instead of"}, {"sha": "b8a07266924463914925062c5bd6a57a19fd4cdb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,111 @@\n+2021-12-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99980\n+\t* parser.c (cp_parser_single_declaration): Maybe pass\n+\tCP_PARSER_FLAGS_DELAY_NOEXCEPT down to cp_parser_init_declarator.\n+\n+2021-12-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/103703\n+\t* parser.c (class_decl_loc_t::diag_mismatched_tags): Check for class\n+\ttype before assuming a type is one.\n+\n+2021-12-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/51577\n+\tPR c++/83035\n+\tPR c++/100465\n+\t* call.c (add_operator_candidates): Add lookups parameter.\n+\tUse it to avoid performing a second unqualified lookup when\n+\tinstantiating a dependent operator expression.\n+\t(build_new_op): Add lookups parameter and pass it appropriately.\n+\t* constraint.cc (finish_constraint_binary_op): Use\n+\tbuild_min_nt_loc instead of build_x_binary_op.\n+\t* coroutines.cc (build_co_await): Adjust call to build_new_op.\n+\t* cp-objcp-common.c (cp_common_init_ts): Mark\n+\tDEPENDENT_OPERATOR_TYPE appropriately.\n+\t* cp-tree.def (DEPENDENT_OPERATOR_TYPE): Define.\n+\t* cp-tree.h (WILDCARD_TYPE_P): Accept DEPENDENT_OPERATOR_TYPE.\n+\t(FOLD_EXPR_OP_RAW): New, renamed from ...\n+\t(FOLD_EXPR_OP): ... this.  Change this to return the tree_code directly.\n+\t(DEPENDENT_OPERATOR_TYPE_SAVED_LOOKUPS): Define.\n+\t(templated_operator_saved_lookups): Define.\n+\t(build_new_op): Add lookups parameter.\n+\t(build_dependent_operator_type): Declare.\n+\t(build_x_indirect_ref): Add lookups parameter.\n+\t(build_x_binary_op): Likewise.\n+\t(build_x_unary_op): Likewise.\n+\t(build_x_compound_expr): Likewise.\n+\t(build_x_modify_expr): Likewise.\n+\t* cxx-pretty-print.c (get_fold_operator): Adjust after\n+\tFOLD_EXPR_OP change.\n+\t* decl.c (start_preparsed_function): Don't call\n+\tpush_operator_bindings.\n+\t* decl2.c (grok_array_decl): Adjust calls to build_new_op.\n+\t* method.c (do_one_comp): Likewise.\n+\t(build_comparison_op): Likewise.\n+\t* module.cc (trees_out::type_node): Handle DEPENDENT_OPERATOR_TYPE.\n+\t(trees_in::tree_node): Likewise.\n+\t* name-lookup.c (lookup_name): Revert r11-2876 change.\n+\t(op_unqualified_lookup): Remove.\n+\t(maybe_save_operator_binding): Remove.\n+\t(discard_operator_bindings): Remove.\n+\t(push_operator_bindings): Remove.\n+\t* name-lookup.h (maybe_save_operator_binding): Remove.\n+\t(push_operator_bindings): Remove.\n+\t(discard_operator_bindings): Remove.\n+\t* parser.c (cp_parser_unary_expression): Adjust calls to build_x_*.\n+\t(cp_parser_binary_expression): Likewise.\n+\t(cp_parser_assignment_expression): Likewise.\n+\t(cp_parser_expression): Likewise.\n+\t(do_range_for_auto_deduction): Likewise.\n+\t(cp_convert_range_for): Likewise.\n+\t(cp_parser_perform_range_for_lookup): Likewise.\n+\t(cp_parser_template_argument): Likewise.\n+\t(cp_parser_omp_for_cond): Likewise.\n+\t(cp_parser_omp_for_incr): Likewise.\n+\t(cp_parser_omp_for_loop_init): Likewise.\n+\t(cp_convert_omp_range_for): Likewise.\n+\t(cp_finish_omp_range_for): Likewise.\n+\t* pt.c (fold_expression): Adjust after FOLD_EXPR_OP change. Pass\n+\ttemplated_operator_saved_lookups to build_x_*.\n+\t(tsubst_omp_for_iterator): Adjust call to build_x_modify_expr.\n+\t(tsubst_expr) <case COMPOUND_EXPR>: Pass\n+\ttemplated_operator_saved_lookups to build_x_*.\n+\t(tsubst_copy_and_build) <case INDIRECT_REF>: Likewise.\n+\t<case tcc_unary>: Likewise.\n+\t<case tcc_binary>: Likewise.\n+\t<case MODOP_EXPR>: Likewise.\n+\t<case COMPOUND_EXPR>: Likewise.\n+\t(dependent_type_p_r): Return true for DEPENDENT_OPERATOR_TYPE.\n+\t* ptree.c (cxx_print_type): Handle DEPENDENT_OPERATOR_TYPE.\n+\t* semantics.c (finish_increment_expr): Adjust call to\n+\tbuild_x_unary_op.\n+\t(finish_unary_op_expr): Likewise.\n+\t(handle_omp_for_class_iterator): Adjust calls to build_x_*.\n+\t(finish_omp_cancel): Likewise.\n+\t(finish_unary_fold_expr): Use build_dependent_operator_type.\n+\t(finish_binary_fold_expr): Likewise.\n+\t* tree.c (cp_free_lang_data): Don't call discard_operator_bindings.\n+\t* typeck.c (rationalize_conditional_expr): Adjust call to\n+\tbuild_x_binary_op.\n+\t(op_unqualified_lookup): Define.\n+\t(build_dependent_operator_type): Define.\n+\t(build_x_indirect_ref): Add lookups parameter and use\n+\tbuild_dependent_operator_type.\n+\t(build_x_binary_op): Likewise.\n+\t(build_x_array_ref): Likewise.\n+\t(build_x_unary_op): Likewise.\n+\t(build_x_compound_expr_from_list): Adjust call to\n+\tbuild_x_compound_expr.\n+\t(build_x_compound_expr_from_vec): Likewise.\n+\t(build_x_compound_expr): Add lookups parameter and use\n+\tbuild_dependent_operator_type.\n+\t(cp_build_modify_expr): Adjust call to build_new_op.\n+\t(build_x_modify_expr): Add lookups parameter and use\n+\tbuild_dependent_operator_type.\n+\t* typeck2.c (build_x_arrow): Adjust call to build_new_op.\n+\n 2021-12-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/102229"}, {"sha": "919710fc1cbc6dfeace0f9019837bc5ec2d729e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,57 @@\n+2021-12-16  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.dg/20021029-1.c: Build with -G0 for nios2.\n+\n+2021-12-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99980\n+\t* g++.dg/cpp0x/noexcept71.C: New test.\n+\n+2021-12-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/103703\n+\t* g++.dg/warn/Wmismatched-tags-9.C: New test.\n+\n+2021-12-16  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/103751\n+\t* gcc.dg/Warray-bounds-48.c: Fix member alignment.\n+\n+2021-12-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/51577\n+\tPR c++/83035\n+\tPR c++/100465\n+\t* g++.dg/lookup/operator-3.C: Split out operator overload\n+\tdeclarations into ...\n+\t* g++.dg/lookup/operator-3-ops.h: ... here.\n+\t* g++.dg/lookup/operator-3a.C: New test.\n+\t* g++.dg/lookup/operator-4.C: New test.\n+\t* g++.dg/lookup/operator-4a.C: New test.\n+\t* g++.dg/lookup/operator-5.C: New test.\n+\t* g++.dg/lookup/operator-5a.C: New test.\n+\t* g++.dg/lookup/operator-6.C: New test.\n+\t* g++.dg/lookup/operator-7.C: New test.\n+\t* g++.dg/lookup/operator-8.C: New test.\n+\n+2021-12-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103571\n+\t* gcc.target/i386/pr102812.c (dg-final): Do not scan for movdqa.\n+\n+2021-12-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/103696\n+\t* g++.target/i386/pr103696.C: New test.\n+\n+2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/iostat_5.f90: New file.\n+\n+2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/date_and_time_1.f90: New file.\n+\n 2021-12-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/102229"}, {"sha": "c03d89feba82244ee183e892b03bfc0c8ff53b2f", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,12 @@\n+2021-12-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/51577\n+\tPR c++/83035\n+\tPR c++/100465\n+\t* libcp1plugin.cc (plugin_build_unary_expr): Adjust call to\n+\tbuild_x_unary_op.\n+\t(plugin_build_binary_expr): Adjust call to build_x_binary_op.\n+\n 2021-12-15  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure: Regenerate."}, {"sha": "2f366c876259fd548eba05e297215e2203b14caf", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,13 @@\n+2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* io/file_pos.c: Fix error code.\n+\n+2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* intrinsics/time_1.h: Prefer clock_gettime() over\n+\t  gettimeofday().\n+\t* intrinsics/date_and_time.c: Fix timezone wrapping.\n+\n 2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR libfortran/103634"}, {"sha": "17e6834b15a08991f87fa7907f42be4d68408b38", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,16 @@\n+2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tRevert:\n+\t2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* Makefile.in (AR): Add @AR_PLUGIN_OPTION@\n+\t(RANLIB): Add @RANLIB_PLUGIN_OPTION@.\n+\t(configure_deps): Depend on ../config/gcc-plugin.m4.\n+\t* configure.ac: AC_SUBST AR_PLUGIN_OPTION and\n+\tRANLIB_PLUGIN_OPTION.\n+\t* aclocal.m4: Regenerated.\n+\t* configure: Likewise.\n+\n 2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* Makefile.in (AR): Add @AR_PLUGIN_OPTION@"}, {"sha": "7d6646b829c0307a4cca6e252bbfffd157fbb9df", "filename": "zlib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774269aa4b9fae97f649abe38322135371fd3bef/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774269aa4b9fae97f649abe38322135371fd3bef/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=774269aa4b9fae97f649abe38322135371fd3bef", "patch": "@@ -1,3 +1,10 @@\n+2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tRevert:\n+\t2021-12-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* configure: Regenerated.\n+\n 2021-12-15  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* configure: Regenerated."}]}