{"sha": "3269969693ef68682e2b4b3ab4e58bb061a25317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI2OTk2OTY5M2VmNjg2ODJlMmI0YjNhYjRlNThiYjA2MWEyNTMxNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T13:27:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T13:27:49Z"}, "message": "Initial revision\n\nFrom-SVN: r11196", "tree": {"sha": "c0065ae84172eef05384401f7a520cfe5d13f4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0065ae84172eef05384401f7a520cfe5d13f4f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3269969693ef68682e2b4b3ab4e58bb061a25317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3269969693ef68682e2b4b3ab4e58bb061a25317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3269969693ef68682e2b4b3ab4e58bb061a25317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3269969693ef68682e2b4b3ab4e58bb061a25317/comments", "author": null, "committer": null, "parents": [{"sha": "528a75669f8a01e237a86851ea733af0053f327f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528a75669f8a01e237a86851ea733af0053f327f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/528a75669f8a01e237a86851ea733af0053f327f"}], "stats": {"total": 250, "additions": 250, "deletions": 0}, "files": [{"sha": "d775c6ee13783b94c507f29f459a159e733251a4", "filename": "gcc/config/m68k/m68k-psos.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3269969693ef68682e2b4b3ab4e58bb061a25317/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3269969693ef68682e2b4b3ab4e58bb061a25317/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-psos.h?ref=3269969693ef68682e2b4b3ab4e58bb061a25317", "patch": "@@ -0,0 +1,67 @@\n+/* Definitions of a target machine for the GNU compiler:\n+   68040 running pSOS, ELF object files, DBX debugging.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+/* Use MOTOROLA assembler syntax, as gas is configured that way and\n+   glibc also seems to use it. Must come BEFORE m68k.h! */\n+\n+#define MOTOROLA\n+\n+/* Get generic m68k definitions. */\n+\n+#include \"m68k/m68k.h\"\n+#include \"m68k/m68kemb.h\"\n+\n+/* Default processor type is a (pure) 68040 with 68881 emulation using\n+   the floating-point support package. */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 01007\n+\n+/* Options passed to CPP, GAS, CC1 and CC1PLUS. We override\n+   m68k-none.h for consistency with TARGET_DEFAULT. */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+\"%{!mc68000:%{!m68000:%{!m68332:%{!msoft-float:-D__HAVE_68881__ }}}}\\\n+%{!ansi:-Dmc68000 %{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68040 }}}}}}}}}}}\\\n+-D__mc68000__ -D__mc68000 %{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68040__ -D__mc68040 }}}}}}}}}}\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+\"%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 }\\\n+%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040}%{m68302}%{m68332}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-mc68040}}}}}}}}}}\"\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \\\n+ \"%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000}%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float}}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-m68040}}}}}}}}}}\"\n+\n+#undef CC1PLUS_SPEC\n+#define CC1PLUS_SPEC \\\n+ \"%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000}%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float}}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-m68040}}}}}}}}}}\"\n+\n+\n+/* Get processor-independent pSOS definitions. */\n+\n+#include \"psos.h\"\n+\n+\n+/* end of m68k-psos.h */"}, {"sha": "0299a35d8ec071276ce2b3856dc135f5ba90912a", "filename": "gcc/config/psos.h", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3269969693ef68682e2b4b3ab4e58bb061a25317/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3269969693ef68682e2b4b3ab4e58bb061a25317/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=3269969693ef68682e2b4b3ab4e58bb061a25317", "patch": "@@ -0,0 +1,183 @@\n+/* Operating system specific defines to be used when targeting GCC for some\n+   embedded system running pSOS. We assume GNU tools with ELF, but\n+   try to maintain compatibility with the MRI tools. Based on svr4.h.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.\n+\n+   To use this file, make up a file with a name like:\n+\n+\t?????-psos.h\n+\n+   where ????? is replaced by the name of the basic hardware that you\n+   are targeting for.  Then, in the file ?????-psos.h, put something\n+   like:\n+\n+\t#include \"?????.h\"\n+\t#include \"psos.h\"\n+\n+   followed by any really system-specific defines (or overrides of\n+   defines) which you find that you need.\n+*/\n+\n+\n+/* Define a symbol indicating that we are using psos.h.  */\n+\n+#define USING_PSOS_H\n+\n+\n+/* All pSOS targets currently use the ELF object file format.  */\n+\n+#define OBJECT_FORMAT_ELF\n+\n+\n+/* Provide a NULL STARTFILE_SPEC. The startfile cannot be specified\n+   here because it depends on the architecture (e.g. 68K), the\n+   board-support package (e.g. M162) and the run-time configuration\n+   (e.g. application vs. ram-image vs. rom-image). Specify the\n+   startfile in a linker-script created from the generic\n+   architecture-specific linker-scripts. */\n+\n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+\n+/* Predefined macros (independent of processor type). */\n+\n+#define CPP_PREDEFINES \"-Dpsos\"\n+\n+\n+/* Implicit library calls should use ANSI memcpy rather than BSD\n+   bcopy, etc.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+\n+/* When using stabs, gcc2_compiled must be a stabs entry, not an\n+   ordinary symbol, or gdb won't see it.  The stabs entry must be\n+   before the N_SO in order for gdb to find it.  */\n+\n+#define ASM_IDENTIFY_GCC(FILE)\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    fputs (\".stabs \\\"gcc2_compiled.\\\", 0x3c, 0, 0, 0\\n\", FILE);\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n+\n+/* Switch into a generic section. */\n+\n+#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n+  fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n+\t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n+\t   (DECL) && TREE_READONLY (DECL) ? \"a\" : \"aw\")\n+\n+\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors\n+   sections. */\n+\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+\n+/* A default list of other sections which we might be \"in\" at any given\n+   time.  For targets that use additional sections (e.g. .tdesc) you\n+   should override this definition in the target-specific file which\n+   includes this file.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_ctors, in_dtors\n+\n+/* A default list of extra section function definitions.  For targets\n+   that use additional sections (e.g. .tdesc) you should override this\n+   definition in the target-specific file which includes this file.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+extern void text_section ();\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+\n+#ifndef INT_ASM_OP\n+#define INT_ASM_OP\t\t\".long\"\n+#endif\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+/* Use DBX debugging info by default.  */\n+\n+#ifndef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#endif\n+\n+/* For pSOS we use DBX debugging info.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+\n+/* Prevent generation of an exit function.  */\n+\n+#define HAVE_ATEXIT\n+"}]}