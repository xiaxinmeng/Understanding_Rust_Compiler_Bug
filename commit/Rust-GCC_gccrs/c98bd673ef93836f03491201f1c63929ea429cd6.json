{"sha": "c98bd673ef93836f03491201f1c63929ea429cd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4YmQ2NzNlZjkzODM2ZjAzNDkxMjAxZjFjNjM5MjllYTQyOWNkNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-27T13:44:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-27T18:26:08Z"}, "message": "jit: use deep unsharing of trees [PR 95314]\n\nPR jit/95314 reports a internal error inside verify_gimple, which\nturned out to be due to reusing the result of\ngcc_jit_lvalue_get_address in several functions, leading to tree nodes\nshared between multiple function bodies.\n\nThis patch fixes the issue by adopting the \"Deep unsharing\" strategy\ndescribed in the comment in gimplify.c preceding mostly_copy_tree_r:\nto mark all of the jit \"frontend\"'s expression tree nodes with\nTREE_VISITED, and to set LANG_HOOKS_DEEP_UNSHARING, so that \"they are\nunshared on the first reference within functions when the regular\nunsharing algorithm runs\".\n\ngcc/jit/ChangeLog:\n\tPR jit/95314\n\t* dummy-frontend.c (LANG_HOOKS_DEEP_UNSHARING): Define to be true.\n\t* jit-playback.h (gcc::jit::playback::rvalue): Mark tree node with\n\tTREE_VISITED.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/95314\n\t* jit.dg/all-non-failing-tests.h: Add test-pr95314-rvalue-reuse.c.\n\t* jit.dg/test-pr95314-rvalue-reuse.c: New test.", "tree": {"sha": "90d7eb25aa472f26263211afd48bbc5efa65bb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90d7eb25aa472f26263211afd48bbc5efa65bb90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98bd673ef93836f03491201f1c63929ea429cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98bd673ef93836f03491201f1c63929ea429cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98bd673ef93836f03491201f1c63929ea429cd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98bd673ef93836f03491201f1c63929ea429cd6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac43b32ce2e0e38848d06a1567f6db2bbeb678dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac43b32ce2e0e38848d06a1567f6db2bbeb678dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac43b32ce2e0e38848d06a1567f6db2bbeb678dc"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "6c7b7992a4d40b26ce3394fd83eab612cdfc6ae6", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=c98bd673ef93836f03491201f1c63929ea429cd6", "patch": "@@ -269,6 +269,9 @@ jit_langhook_getdecls (void)\n #undef LANG_HOOKS_GETDECLS\n #define LANG_HOOKS_GETDECLS\t\tjit_langhook_getdecls\n \n+#undef  LANG_HOOKS_DEEP_UNSHARING\n+#define LANG_HOOKS_DEEP_UNSHARING\ttrue\n+\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n #include \"gt-jit-dummy-frontend.h\""}, {"sha": "f9b3e675368c74b5deb3989629917eece15b7453", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=c98bd673ef93836f03491201f1c63929ea429cd6", "patch": "@@ -576,7 +576,12 @@ class rvalue : public wrapper\n   rvalue (context *ctxt, tree inner)\n     : m_ctxt (ctxt),\n       m_inner (inner)\n-  {}\n+  {\n+    /* Pre-mark tree nodes with TREE_VISITED so that they can be\n+       deeply unshared during gimplification (including across\n+       functions); this requires LANG_HOOKS_DEEP_UNSHARING to be true.  */\n+    TREE_VISITED (inner) = 1;\n+  }\n \n   rvalue *\n   as_rvalue () { return this; }"}, {"sha": "ca8d3df419373e24a9e9fc6b7d4f7f88dee3e41c", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=c98bd673ef93836f03491201f1c63929ea429cd6", "patch": "@@ -234,6 +234,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-pr95314-rvalue-reuse.c.  */\n+#define create_code create_code_pr95314_rvalue_reuse\n+#define verify_code verify_code_pr95314_rvalue_reuse\n+#include \"test-pr95314-rvalue-reuse.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-reading-struct.c */\n #define create_code create_code_reading_struct\n #define verify_code verify_code_reading_struct\n@@ -401,6 +408,9 @@ const struct testcase testcases[] = {\n   {\"pr95306_builtin_types\",\n    create_code_pr95306_builtin_types,\n    verify_code_pr95306_builtin_types},\n+  {\"pr95314_rvalue_reuse\",\n+   create_code_pr95314_rvalue_reuse,\n+   verify_code_pr95314_rvalue_reuse},\n   {\"reading_struct \",\n    create_code_reading_struct ,\n    verify_code_reading_struct },"}, {"sha": "6bed0bc52a4b187afe2de7cf16b3f7fdf53563e7", "filename": "gcc/testsuite/jit.dg/test-pr95314-rvalue-reuse.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95314-rvalue-reuse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98bd673ef93836f03491201f1c63929ea429cd6/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95314-rvalue-reuse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-pr95314-rvalue-reuse.c?ref=c98bd673ef93836f03491201f1c63929ea429cd6", "patch": "@@ -0,0 +1,56 @@\n+#include <libgccjit.h>\n+#include \"harness.h\"\n+\n+void create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *t_int =  gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *t_void = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *t_const_char_ptr\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CONST_CHAR_PTR);\n+  gcc_jit_lvalue *global\n+    = gcc_jit_context_new_global (ctxt, NULL, GCC_JIT_GLOBAL_INTERNAL,\n+\t\t\t\t  t_const_char_ptr, \"pr95314_global\");\n+\n+  gcc_jit_rvalue *global_ref = gcc_jit_lvalue_get_address(global, NULL);\n+\n+  gcc_jit_param *param_string\n+    = gcc_jit_context_new_param (ctxt, NULL, t_const_char_ptr, \"string\");\n+  gcc_jit_function *puts_func\n+    = gcc_jit_context_new_function (ctxt, NULL, GCC_JIT_FUNCTION_IMPORTED,\n+\t\t\t\t    t_int, \"puts\", 1, &param_string, 0);\n+\n+#define NUM_INNER_FNS 3\n+  gcc_jit_function *inner_fns[NUM_INNER_FNS];\n+  for (int i = 0; i < NUM_INNER_FNS; i++)\n+    {\n+      char fnname[128];\n+      sprintf (fnname, \"pr95314_inner_%i\", i);\n+      inner_fns[i]\n+\t= gcc_jit_context_new_function (ctxt, NULL, GCC_JIT_FUNCTION_INTERNAL,\n+\t\t\t\t\tt_void, fnname, 0, NULL, 0);\n+      gcc_jit_block *block = gcc_jit_function_new_block (inner_fns[i], NULL);\n+      gcc_jit_rvalue *arg\n+\t= gcc_jit_context_new_cast (ctxt, NULL, global_ref, t_const_char_ptr);\n+      gcc_jit_block_add_eval (block, NULL,\n+\t\t\t      gcc_jit_context_new_call (ctxt, NULL, puts_func,\n+\t\t\t\t\t\t\t1, &arg));\n+      gcc_jit_block_end_with_void_return (block, NULL);\n+    }\n+\n+  gcc_jit_function *outer_func\n+    = gcc_jit_context_new_function (ctxt, NULL, GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t    t_void, \"pr95314_outer\", 0, NULL, 0);\n+  gcc_jit_block *block = gcc_jit_function_new_block (outer_func, NULL);\n+  for (int i = 0; i < NUM_INNER_FNS; i++)\n+    gcc_jit_block_add_eval (block, NULL,\n+\t\t\t    gcc_jit_context_new_call (ctxt, NULL, inner_fns[i],\n+\t\t\t\t\t\t      0, NULL));\n+  gcc_jit_block_end_with_void_return (block, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_NON_NULL (result);\n+  (void)gcc_jit_result_get_code (result, \"pr95314_outer\");\n+}"}]}