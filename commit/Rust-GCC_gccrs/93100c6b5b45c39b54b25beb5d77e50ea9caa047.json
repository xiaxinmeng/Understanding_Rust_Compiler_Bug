{"sha": "93100c6b5b45c39b54b25beb5d77e50ea9caa047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMDBjNmI1YjQ1YzM5YjU0YjI1YmViNWQ3N2U1MGVhOWNhYTA0Nw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-25T13:02:42Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-25T13:02:42Z"}, "message": "re PR c++/54427 (Expose more vector extensions)\n\n2012-10-25  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/54427\n\ngcc/\n\t* tree.c (signed_or_unsigned_type_for): Handle vectors.\n\ngcc/cp/\n\t* typeck.c (build_x_conditional_expr): Handle VEC_COND_EXPR.\n\t* call.c (build_conditional_expr_1): Likewise.\n\ngcc/c-family/\n\t* c-common.c (scalar_to_vector): Handle VEC_COND_EXPR.\n\ngcc/testsuite/\n\t* g++.dg/ext/vector19.C: New testcase.\n\nFrom-SVN: r192808", "tree": {"sha": "c59298c0a1950703d2a7fcb4db22f59f20b81981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c59298c0a1950703d2a7fcb4db22f59f20b81981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93100c6b5b45c39b54b25beb5d77e50ea9caa047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93100c6b5b45c39b54b25beb5d77e50ea9caa047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93100c6b5b45c39b54b25beb5d77e50ea9caa047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93100c6b5b45c39b54b25beb5d77e50ea9caa047/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ced940d172f65be316637f4945fbf633a79ab90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ced940d172f65be316637f4945fbf633a79ab90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ced940d172f65be316637f4945fbf633a79ab90"}], "stats": {"total": 179, "additions": 170, "deletions": 9}, "files": [{"sha": "542856abe2f8e4e394ace9607f6c3cb9032dc321", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -1,3 +1,8 @@\n+2012-10-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* tree.c (signed_or_unsigned_type_for): Handle vectors.\n+\n 2012-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (recursive_inlining): Redirect to master"}, {"sha": "82f1fa22083adee3d91906dcb75e0fcda3b2c17d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -1,3 +1,8 @@\n+2012-10-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* c-common.c (scalar_to_vector): Handle VEC_COND_EXPR.\n+\n 2012-10-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (pch_cpp_save_state): Declare."}, {"sha": "840bc84c6d245192beef97312065add4f4710981", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -11474,6 +11474,8 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \tinteger_only_op = true;\n \t/* ... fall through ...  */\n \n+      case VEC_COND_EXPR:\n+\n       case PLUS_EXPR:\n       case MINUS_EXPR:\n       case MULT_EXPR:"}, {"sha": "c7c67e29bbf78af5fec7bbcaf1068b77b38c1f30", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -1,3 +1,9 @@\n+2012-10-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* typeck.c (build_x_conditional_expr): Handle VEC_COND_EXPR.\n+\t* call.c (build_conditional_expr_1): Likewise.\n+\n 2012-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/34892"}, {"sha": "df241056d2ed0d2f5e7593d88f59aa1dec9bb50d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 78, "deletions": 8, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -4373,18 +4373,90 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n \targ2 = arg1 = save_expr (arg1);\n     }\n \n+  /* If something has already gone wrong, just pass that fact up the\n+     tree.  */\n+  if (error_operand_p (arg1)\n+      || error_operand_p (arg2)\n+      || error_operand_p (arg3))\n+    return error_mark_node;\n+\n+  orig_arg2 = arg2;\n+  orig_arg3 = arg3;\n+\n+  if (VECTOR_INTEGER_TYPE_P (TREE_TYPE (arg1)))\n+    {\n+      arg1 = force_rvalue (arg1, complain);\n+      arg2 = force_rvalue (arg2, complain);\n+      arg3 = force_rvalue (arg3, complain);\n+\n+      tree arg1_type = TREE_TYPE (arg1);\n+      arg2_type = TREE_TYPE (arg2);\n+      arg3_type = TREE_TYPE (arg3);\n+\n+      if (TREE_CODE (arg2_type) != VECTOR_TYPE\n+\t  && TREE_CODE (arg3_type) != VECTOR_TYPE)\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"at least one operand of a vector conditional operator \"\n+\t\t   \"must be a vector\");\n+\t  return error_mark_node;\n+\t}\n+\n+      if ((TREE_CODE (arg2_type) == VECTOR_TYPE)\n+\t  != (TREE_CODE (arg3_type) == VECTOR_TYPE))\n+\t{\n+\t  enum stv_conv convert_flag =\n+\t    scalar_to_vector (input_location, VEC_COND_EXPR, arg2, arg3,\n+\t\t\t      complain & tf_error);\n+\n+\t  switch (convert_flag)\n+\t    {\n+\t      case stv_error:\n+\t\treturn error_mark_node;\n+\t      case stv_firstarg:\n+\t\t{\n+\t\t  arg2 = convert (TREE_TYPE (arg3_type), arg2);\n+\t\t  arg2 = build_vector_from_val (arg3_type, arg2);\n+\t\t  arg2_type = TREE_TYPE (arg2);\n+\t\t  break;\n+\t\t}\n+\t      case stv_secondarg:\n+\t\t{\n+\t\t  arg3 = convert (TREE_TYPE (arg2_type), arg3);\n+\t\t  arg3 = build_vector_from_val (arg2_type, arg3);\n+\t\t  arg3_type = TREE_TYPE (arg3);\n+\t\t  break;\n+\t\t}\n+\t      default:\n+\t\tbreak;\n+\t    }\n+\t}\n+\n+      if (!same_type_p (arg2_type, arg3_type)\n+\t  || TYPE_VECTOR_SUBPARTS (arg1_type)\n+\t     != TYPE_VECTOR_SUBPARTS (arg2_type)\n+\t  || TYPE_SIZE (arg1_type) != TYPE_SIZE (arg2_type))\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"incompatible vector types in conditional expression: \"\n+\t\t   \"%qT, %qT and %qT\", TREE_TYPE (arg1), TREE_TYPE (orig_arg2),\n+\t\t   TREE_TYPE (orig_arg3));\n+\t  return error_mark_node;\n+\t}\n+\n+      if (!COMPARISON_CLASS_P (arg1))\n+\targ1 = build2 (NE_EXPR, signed_type_for (arg1_type), arg1,\n+\t\t       build_zero_cst (arg1_type));\n+      return build3 (VEC_COND_EXPR, arg2_type, arg1, arg2, arg3);\n+    }\n+\n   /* [expr.cond]\n \n      The first expression is implicitly converted to bool (clause\n      _conv_).  */\n   arg1 = perform_implicit_conversion_flags (boolean_type_node, arg1, complain,\n \t\t\t\t\t    LOOKUP_NORMAL);\n-\n-  /* If something has already gone wrong, just pass that fact up the\n-     tree.  */\n-  if (error_operand_p (arg1)\n-      || error_operand_p (arg2)\n-      || error_operand_p (arg3))\n+  if (error_operand_p (arg1))\n     return error_mark_node;\n \n   /* [expr.cond]\n@@ -4394,8 +4466,6 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n      array-to-pointer (_conv.array_), and function-to-pointer\n      (_conv.func_) standard conversions are performed on the second\n      and third operands.  */\n-  orig_arg2 = arg2;\n-  orig_arg3 = arg3;\n   arg2_type = unlowered_expr_type (arg2);\n   arg3_type = unlowered_expr_type (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))"}, {"sha": "2514b6fc74144c52aab67b9af10356975427e4c1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -5810,7 +5810,8 @@ build_x_conditional_expr (location_t loc, tree ifexp, tree op1, tree op2,\n     }\n \n   expr = build_conditional_expr (ifexp, op1, op2, complain);\n-  if (processing_template_decl && expr != error_mark_node)\n+  if (processing_template_decl && expr != error_mark_node\n+      && TREE_CODE (expr) != VEC_COND_EXPR)\n     {\n       tree min = build_min_non_dep (COND_EXPR, expr,\n \t\t\t\t    orig_ifexp, orig_op1, orig_op2);"}, {"sha": "30fced628560b541596de1bde0bb52f7b62788be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -1,3 +1,8 @@\n+2012-10-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* g++.dg/ext/vector19.C: New testcase.\n+\n 2012-10-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/54902"}, {"sha": "ec08e7cd2b6b2b89d915776d3882508a8631407d", "filename": "gcc/testsuite/g++.dg/ext/vector19.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector19.C?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=c++11 -mavx2\" } */\n+\n+// The target restrictions and the -mavx2 flag are meant to disappear\n+// once vector lowering is in place.\n+\n+typedef double vec __attribute__((vector_size(2*sizeof(double))));\n+typedef signed char vec2 __attribute__((vector_size(16)));\n+typedef unsigned char vec2u __attribute__((vector_size(16)));\n+\n+void f (vec *x, vec *y, vec *z)\n+{\n+  *x = (*y < *z) ? *x : *y;\n+}\n+\n+void g (vec *x, vec *y, vec *z)\n+{\n+  *x = (*y < *z) ? *x : 42;\n+}\n+\n+void h (vec *x, vec *y, vec *z)\n+{\n+  *x = (*y < *z) ? 3. : *y;\n+}\n+\n+void i1 (vec *x, vec *y, vec *z)\n+{\n+  auto c = *y < *z;\n+  *x = c ? *x : *y;\n+}\n+\n+void i2 (vec2 *x, vec2 *y, vec2u *z)\n+{\n+  *x = *y ? *x : *y;\n+  *y = *z ? *x : *y;\n+}\n+\n+void j (vec2 *x, vec2 *y, vec2 *z, vec *t)\n+{\n+  *x = (*y < *z) ? *x : 4.2; /* { dg-error \"\" } */\n+  *y = (*x < *z) ? 2.5 : *y; /* { dg-error \"\" } */\n+  *t = *t ? *t : *t; /* { dg-error \"\" } */\n+  *z = (*x < *z) ? '1' : '0'; /* { dg-error \"\" } */\n+  // The last one may eventually be accepted.\n+}\n+\n+template <class A, class B>\n+auto k (A *a, B b) -> decltype (*a ? *a : b);\n+\n+void k (...) {}\n+\n+void l (vec2 *v, double x)\n+{\n+  k (v, x);\n+}\n+"}, {"sha": "c3642e3cc3573a0c192e858794929efa3ce489e1", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93100c6b5b45c39b54b25beb5d77e50ea9caa047/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=93100c6b5b45c39b54b25beb5d77e50ea9caa047", "patch": "@@ -10241,6 +10241,17 @@ signed_or_unsigned_type_for (int unsignedp, tree type)\n   if (TREE_CODE (type) == INTEGER_TYPE && TYPE_UNSIGNED (type) == unsignedp)\n     return type;\n \n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      tree inner = TREE_TYPE (type);\n+      tree inner2 = signed_or_unsigned_type_for (unsignedp, inner);\n+      if (!inner2)\n+\treturn NULL_TREE;\n+      if (inner == inner2)\n+\treturn type;\n+      return build_vector_type (inner2, TYPE_VECTOR_SUBPARTS (type));\n+    }\n+\n   if (!INTEGRAL_TYPE_P (type)\n       && !POINTER_TYPE_P (type))\n     return NULL_TREE;"}]}