{"sha": "d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4Y2JiZjY3NzA0NDZlYTdlYjBkNmFkMjU5NWFkNDkzNzk1M2Y1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-23T15:37:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-23T15:37:30Z"}, "message": "i386.h (enum reg_class): Rename MASK_REGS to ALL_MASK_REGS and MASK_EVEX_REGS to MASK_REGS.\n\n\t* config/i386/i386.h (enum reg_class): Rename MASK_REGS to\n\tALL_MASK_REGS and MASK_EVEX_REGS to MASK_REGS.\n\t(MASK_CLASS_P): Update for rename.\n\t(MAYBE_MASK_CLASS_P): Ditto.\n\t(REG_CLASS_NAMES): Update.\n\t(REG_CLASS_CONTENT): Update.\n\t* config/i386/i386.c (regclass_map): Update for MASK_REG\n\tand ALL_MASK_REGS rename.\n\t* config/i386/constraints.md (Yk): Update for rename.\n\t(k): Ditto.\n\n\t* config/i386/i386.h (enum reg_class): Remove\n\tEVEX_SSE_REGS and MOD4_SSE_REGS.\n\t(REG_CLASS_NAMES): Update.\n\t(REG_CLASS_CONTENT): Update.\n\t* config/i386/i386.c (regclass_map): Declare AVX-512 SSE\n\tregisters as ALL_SSE_REGS.\n\t(ix86_additional_allocno_class_p): Remove.\n\t(TARGET_ADDITIONAL_ALLOCNO_CLASS_P): Remove.\n\t(ix86_register_priority): Lower priority of EVEX SSE registers.\n\tUse IN_RANGE macro where appropriate.\n\t(ix86_hard_regno_mode_ok): Merge AVX-5124FMAPS and\n\tAVX-5124VNNIW checks.\n\t(ix86_modes_tieable_p): Tie 512-bit SSE modes.\n\t* config/i386/sse.md (avx5124fmaddps_4fmaddps)\n\t(avx5124fmaddps_4fmaddps_mask, avx5124fmaddps_4fmaddps_maskz)\n\t(avx5124fmaddps_4fmaddss, avx5124fmaddps_4fmaddss_mask)\n\t(avx5124fmaddps_4fmaddss_maskz, avx5124fmaddps_4fnmaddps)\n\t(avx5124fmaddps_4fnmaddps_mask, avx5124fmaddps_4fnmaddps_maskz)\n\t(avx5124fmaddps_4fnmaddss, avx5124fmaddps_4fnmaddss_mask)\n\t(avx5124fmaddps_4fnmaddss_maskz, avx5124vnniw_vp4dpwssd)\n\t(avx5124vnniw_vp4dpwssd_mask, avx5124vnniw_vp4dpwssd_maskz)\n\t(avx5124vnniw_vp4dpwssds, avx5124vnniw_vp4dpwssds_mask)\n\t(avx5124vnniw_vp4dpwssds_maskz): Use \"v\" instead of \"Yh\" constraint.\n\t* config/i386/constraints.md (Yh): Remove.\n\n\t* config/i386/i386.c (regclass_map): Declare integer REX registers\n        as GENERAL_REGS.\n\nFrom-SVN: r264516", "tree": {"sha": "0586eafc2c168d4ac3fb6b96b759a1f21f4a6731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0586eafc2c168d4ac3fb6b96b759a1f21f4a6731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/comments", "author": null, "committer": null, "parents": [{"sha": "839837b03666d07d924117019bcfc00a38c0d4f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839837b03666d07d924117019bcfc00a38c0d4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839837b03666d07d924117019bcfc00a38c0d4f4"}], "stats": {"total": 250, "additions": 137, "deletions": 113}, "files": [{"sha": "f3664e449f279cc38d424ca6fde004e5ba582d17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "patch": "@@ -1,3 +1,48 @@\n+2018-09-23   Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (enum reg_class): Rename MASK_REGS to\n+\tALL_MASK_REGS and MASK_EVEX_REGS to MASK_REGS.\n+\t(MASK_CLASS_P): Update for rename.\n+\t(MAYBE_MASK_CLASS_P): Ditto.\n+\t(REG_CLASS_NAMES): Update.\n+\t(REG_CLASS_CONTENT): Update.\n+\t* config/i386/i386.c (regclass_map): Update for MASK_REG\n+\tand ALL_MASK_REGS rename.\n+\t* config/i386/constraints.md (Yk): Update for rename.\n+\t(k): Ditto.\n+\n+2018-09-23   Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (enum reg_class): Remove\n+\tEVEX_SSE_REGS and MOD4_SSE_REGS.\n+\t(REG_CLASS_NAMES): Update.\n+\t(REG_CLASS_CONTENT): Update.\n+\t* config/i386/i386.c (regclass_map): Declare AVX-512 SSE\n+\tregisters as ALL_SSE_REGS.\n+\t(ix86_additional_allocno_class_p): Remove.\n+\t(TARGET_ADDITIONAL_ALLOCNO_CLASS_P): Remove.\n+\t(ix86_register_priority): Lower priority of EVEX SSE registers.\n+\tUse IN_RANGE macro where appropriate.\n+\t(ix86_hard_regno_mode_ok): Merge AVX-5124FMAPS and\n+\tAVX-5124VNNIW checks.\n+\t(ix86_modes_tieable_p): Tie 512-bit SSE modes.\n+\t* config/i386/sse.md (avx5124fmaddps_4fmaddps)\n+\t(avx5124fmaddps_4fmaddps_mask, avx5124fmaddps_4fmaddps_maskz)\n+\t(avx5124fmaddps_4fmaddss, avx5124fmaddps_4fmaddss_mask)\n+\t(avx5124fmaddps_4fmaddss_maskz, avx5124fmaddps_4fnmaddps)\n+\t(avx5124fmaddps_4fnmaddps_mask, avx5124fmaddps_4fnmaddps_maskz)\n+\t(avx5124fmaddps_4fnmaddss, avx5124fmaddps_4fnmaddss_mask)\n+\t(avx5124fmaddps_4fnmaddss_maskz, avx5124vnniw_vp4dpwssd)\n+\t(avx5124vnniw_vp4dpwssd_mask, avx5124vnniw_vp4dpwssd_maskz)\n+\t(avx5124vnniw_vp4dpwssds, avx5124vnniw_vp4dpwssds_mask)\n+\t(avx5124vnniw_vp4dpwssds_maskz): Use \"v\" instead of \"Yh\" constraint.\n+\t* config/i386/constraints.md (Yh): Remove.\n+\n+2018-09-23   Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (regclass_map): Declare integer REX registers\n+        as GENERAL_REGS.\n+\n 2018-09-23  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/service.texi (Service): Switch the fsf.org link to https.\n@@ -25,7 +70,7 @@\n \tto_update_switch_stmts into vr_values class member functions.\n \t* tree-vrp.h (switch_update, to_remove_edges): Remove declarations.\n \t(to_update_switch_stmts): Likewise.\n-\t* vr-values.c: Include cfghooks.h. \n+\t* vr-values.c: Include cfghooks.h.\n \t(vr_values::vr_values): Initialize to_remove_edges and\n \tto_update_switch_stmts.\n \t(vr_values::~vr_values): Verify to_remove_edges and\n@@ -776,7 +821,7 @@\n \n \t* config/aarch64/aarch64.h (TARGET_COMPUTE_FRAME_LAYOUT): Define.\n \t* config/aarch64/aarch64.c (aarch64_expand_prologue): Remove\n-\taarch64_layout_frame call. \n+\taarch64_layout_frame call.\n \t(aarch64_expand_epilogue): Likewise.\n \t(aarch64_initial_elimination_offset): Likewise.\n \t(aarch64_get_separate_components): Likewise.\n@@ -1329,7 +1374,8 @@\n \n \t* bb-reorder.c (edge_order): Convert to C-qsort-style\n \ttri-state comparator.\n-\t(reorder_basic_blocks_simple): Change std::stable_sort to gcc_stablesort.\n+\t(reorder_basic_blocks_simple): Change std::stable_sort to\n+\tgcc_stablesort.\n \n 2018-09-03  Alexander Monakov  <amonakov@ispras.ru>\n \n@@ -1927,7 +1973,8 @@\n \t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n \t* gimple-low.c (lower_stmt): Likewise.\n \t* gimple-pretty-print.c (dump_gimple_call): Likewise.\n-\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call): Likewise.\n+\t* gimple-ssa-warn-restrict.c (wrestrict_dom_walker::check_call):\n+\tLikewise.\n \t* gimple.c (gimple_build_call_from_tree): Likewise.\n \t(gimple_call_builtin_p): Likewise.\n \t(gimple_call_combined_fn): Likewise.\n@@ -2495,7 +2542,7 @@\n \t* config/darwin10.h (LINK_GCC_C_SEQUENCE_SPEC): Adjust to use the\n \tDarwin10-specific unwinder-shim.\n \t* config/darwin12.h (LINK_GCC_C_SEQUENCE_SPEC): Remove.\n-\t* config/rs6000/darwin.h (DARWIN_CRT1_SPEC, DARWIN_DYLIB1_SPEC): \n+\t* config/rs6000/darwin.h (DARWIN_CRT1_SPEC, DARWIN_DYLIB1_SPEC):\n \tNew to cater for Darwin10 Rosetta.\n \n 2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>"}, {"sha": "5456564d3a0355f2fed8552e612f8dd8c5a8ed02", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "patch": "@@ -78,10 +78,10 @@\n  \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_SECOND_REG : NO_REGS\"\n  \"Second from top of 80387 floating-point stack (@code{%st(1)}).\")\n \n-(define_register_constraint \"Yk\" \"TARGET_AVX512F ? MASK_EVEX_REGS : NO_REGS\"\n+(define_register_constraint \"Yk\" \"TARGET_AVX512F ? MASK_REGS : NO_REGS\"\n \"@internal Any mask register that can be used as predicate, i.e. k1-k7.\")\n \n-(define_register_constraint \"k\" \"TARGET_AVX512F ? MASK_REGS : NO_REGS\"\n+(define_register_constraint \"k\" \"TARGET_AVX512F ? ALL_MASK_REGS : NO_REGS\"\n \"@internal Any mask register.\")\n \n ;; Vector registers (also used for plain floating point nowadays).\n@@ -146,9 +146,6 @@\n  \"TARGET_AVX512VL ? ALL_SSE_REGS : TARGET_SSE ? SSE_REGS : NO_REGS\"\n  \"@internal For AVX512VL, any EVEX encodable SSE register (@code{%xmm0-%xmm31}), otherwise any SSE register.\")\n \n-(define_register_constraint \"Yh\" \"TARGET_AVX512F ? MOD4_SSE_REGS : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register, which has number factor of four.\")\n-\n ;; We use the B prefix to denote any number of internal operands:\n ;;  f  FLAGS_REG\n ;;  g  GOT memory operand."}, {"sha": "6dd31309495147a13b1beba5f83c0f5a1e4b9e1d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "patch": "@@ -244,25 +244,25 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n   /* flags, fpsr, fpcr, frame */\n   NO_REGS, NO_REGS, NO_REGS, NON_Q_REGS,\n   /* SSE registers */\n-  SSE_FIRST_REG, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n-  SSE_REGS, SSE_REGS,\n+  SSE_FIRST_REG, SSE_REGS, SSE_REGS, SSE_REGS,\n+  SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n   /* MMX registers */\n-  MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS,\n-  MMX_REGS, MMX_REGS,\n+  MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS,\n+  MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS,\n   /* REX registers */\n-  NON_Q_REGS, NON_Q_REGS, NON_Q_REGS, NON_Q_REGS,\n-  NON_Q_REGS, NON_Q_REGS, NON_Q_REGS, NON_Q_REGS,\n+  GENERAL_REGS, GENERAL_REGS, GENERAL_REGS, GENERAL_REGS,\n+  GENERAL_REGS, GENERAL_REGS, GENERAL_REGS, GENERAL_REGS,\n   /* SSE REX registers */\n-  SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n-  SSE_REGS, SSE_REGS,\n+  SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n+  SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n   /* AVX-512 SSE registers */\n-  EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS,\n-  EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS,\n-  EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS,\n-  EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS, EVEX_SSE_REGS,\n+  ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS,\n+  ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS,\n+  ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS,\n+  ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS, ALL_SSE_REGS,\n   /* Mask registers.  */\n-  MASK_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS,\n-  MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS\n+  ALL_MASK_REGS, MASK_REGS, MASK_REGS, MASK_REGS,\n+  MASK_REGS, MASK_REGS, MASK_REGS, MASK_REGS\n };\n \n /* The \"default\" register map used in 32bit mode.  */\n@@ -10858,15 +10858,6 @@ ix86_hard_regno_scratch_ok (unsigned int regno)\n \t      && df_regs_ever_live_p (regno)));\n }\n \n-/* Return true if register class CL should be an additional allocno\n-   class.  */\n-\n-static bool\n-ix86_additional_allocno_class_p (reg_class_t cl)\n-{\n-  return cl == MOD4_SSE_REGS;\n-}\n-\n /* Return TRUE if we need to save REGNO.  */\n \n static bool\n@@ -39017,12 +39008,14 @@ ix86_register_priority (int hard_regno)\n     return 1;\n   /* New x86-64 int registers result in bigger code size.  Discourage\n      them.  */\n-  if (FIRST_REX_INT_REG <= hard_regno && hard_regno <= LAST_REX_INT_REG)\n+  if (IN_RANGE (hard_regno, FIRST_REX_INT_REG, LAST_REX_INT_REG))\n     return 2;\n   /* New x86-64 SSE registers result in bigger code size.  Discourage\n      them.  */\n-  if (FIRST_REX_SSE_REG <= hard_regno && hard_regno <= LAST_REX_SSE_REG)\n+  if (IN_RANGE (hard_regno, FIRST_REX_SSE_REG, LAST_REX_SSE_REG))\n     return 2;\n+  if (IN_RANGE (hard_regno, FIRST_EXT_REX_SSE_REG, LAST_EXT_REX_SSE_REG))\n+    return 1;\n   /* Usage of AX register results in smaller code.  Prefer it.  */\n   if (hard_regno == AX_REG)\n     return 4;\n@@ -39659,16 +39652,11 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t      || VALID_AVX512F_SCALAR_MODE (mode)))\n \treturn true;\n \n-      /* For AVX-5124FMAPS allow V64SFmode for special regnos.  */\n+      /* For AVX-5124FMAPS or AVX-5124VNNIW\n+\t allow V64SF and V64SI modes for special regnos.  */\n       if ((TARGET_AVX5124FMAPS || TARGET_AVX5124VNNIW)\n-\t  && MOD4_SSE_REGNO_P (regno)\n-\t  && mode == V64SFmode)\n-\treturn true;\n-\n-      /* For AVX-5124VNNIW allow V64SImode for special regnos.  */\n-      if ((TARGET_AVX5124FMAPS || TARGET_AVX5124VNNIW)\n-\t  && MOD4_SSE_REGNO_P (regno)\n-\t  && mode == V64SImode)\n+\t  && (mode == V64SFmode || mode == V64SImode)\n+\t  && MOD4_SSE_REGNO_P (regno))\n \treturn true;\n \n       /* TODO check for QI/HI scalars.  */\n@@ -39796,6 +39784,10 @@ ix86_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n \n   /* If MODE2 is only appropriate for an SSE register, then tie with\n      any other mode acceptable to SSE registers.  */\n+  if (GET_MODE_SIZE (mode2) == 64\n+      && ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode2))\n+    return (GET_MODE_SIZE (mode1) == 64\n+\t    && ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode1));\n   if (GET_MODE_SIZE (mode2) == 32\n       && ix86_hard_regno_mode_ok (FIRST_SSE_REG, mode2))\n     return (GET_MODE_SIZE (mode1) == 32\n@@ -51113,9 +51105,6 @@ ix86_run_selftests (void)\n #undef TARGET_CUSTOM_FUNCTION_DESCRIPTORS\n #define TARGET_CUSTOM_FUNCTION_DESCRIPTORS 1\n \n-#undef TARGET_ADDITIONAL_ALLOCNO_CLASS_P\n-#define TARGET_ADDITIONAL_ALLOCNO_CLASS_P ix86_additional_allocno_class_p\n-\n #undef TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID\n #define TARGET_ADDR_SPACE_ZERO_ADDRESS_VALID ix86_addr_space_zero_address_valid\n "}, {"sha": "2fa9f2d53c4159a91999dde19fdfe33e1326b362", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "patch": "@@ -1315,10 +1315,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    For any two classes, it is very desirable that there be another\n    class that represents their union.\n \n-   It might seem that class BREG is unnecessary, since no useful 386\n-   opcode needs reg %ebx.  But some systems pass args to the OS in ebx,\n-   and the \"b\" register constraint is useful in asms for syscalls.\n-\n    The flags, fpsr and fpcr registers are in no class.  */\n \n enum reg_class\n@@ -1339,7 +1335,6 @@ enum reg_class\n   SSE_FIRST_REG,\n   NO_REX_SSE_REGS,\n   SSE_REGS,\n-  EVEX_SSE_REGS,\n   ALL_SSE_REGS,\n   MMX_REGS,\n   FP_TOP_SSE_REGS,\n@@ -1348,10 +1343,10 @@ enum reg_class\n   FLOAT_INT_REGS,\n   INT_SSE_REGS,\n   FLOAT_INT_SSE_REGS,\n-  MASK_EVEX_REGS,\n   MASK_REGS,\n-  MOD4_SSE_REGS,\n-  ALL_REGS, LIM_REG_CLASSES\n+  ALL_MASK_REGS,\n+  ALL_REGS,\n+  LIM_REG_CLASSES\n };\n \n #define N_REG_CLASSES ((int) LIM_REG_CLASSES)\n@@ -1365,7 +1360,7 @@ enum reg_class\n #define MMX_CLASS_P(CLASS) \\\n   ((CLASS) == MMX_REGS)\n #define MASK_CLASS_P(CLASS) \\\n-  reg_class_subset_p ((CLASS), MASK_REGS)\n+  reg_class_subset_p ((CLASS), ALL_MASK_REGS)\n #define MAYBE_INTEGER_CLASS_P(CLASS) \\\n   reg_classes_intersect_p ((CLASS), GENERAL_REGS)\n #define MAYBE_FLOAT_CLASS_P(CLASS) \\\n@@ -1375,7 +1370,7 @@ enum reg_class\n #define MAYBE_MMX_CLASS_P(CLASS) \\\n   reg_classes_intersect_p ((CLASS), MMX_REGS)\n #define MAYBE_MASK_CLASS_P(CLASS) \\\n-  reg_classes_intersect_p ((CLASS), MASK_REGS)\n+  reg_classes_intersect_p ((CLASS), ALL_MASK_REGS)\n \n #define Q_CLASS_P(CLASS) \\\n   reg_class_subset_p ((CLASS), Q_REGS)\n@@ -1401,7 +1396,6 @@ enum reg_class\n    \"SSE_FIRST_REG\",\t\t\t\\\n    \"NO_REX_SSE_REGS\",\t\t\t\\\n    \"SSE_REGS\",\t\t\t\t\\\n-   \"EVEX_SSE_REGS\",\t\t\t\\\n    \"ALL_SSE_REGS\",\t\t\t\\\n    \"MMX_REGS\",\t\t\t\t\\\n    \"FP_TOP_SSE_REGS\",\t\t\t\\\n@@ -1410,9 +1404,8 @@ enum reg_class\n    \"FLOAT_INT_REGS\",\t\t\t\\\n    \"INT_SSE_REGS\",\t\t\t\\\n    \"FLOAT_INT_SSE_REGS\",\t\t\\\n-   \"MASK_EVEX_REGS\",\t\t\t\\\n    \"MASK_REGS\",\t\t\t\t\\\n-   \"MOD4_SSE_REGS\",\t\t\t\\\n+   \"ALL_MASK_REGS\",\t\t\t\\\n    \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.  This is an initializer\n@@ -1421,41 +1414,39 @@ enum reg_class\n    Note that CLOBBERED_REGS are calculated by\n    TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n-#define REG_CLASS_CONTENTS                                              \\\n-{     { 0x00,       0x0,    0x0 },                                       \\\n-      { 0x01,       0x0,    0x0 },       /* AREG */                      \\\n-      { 0x02,       0x0,    0x0 },       /* DREG */                      \\\n-      { 0x04,       0x0,    0x0 },       /* CREG */                      \\\n-      { 0x08,       0x0,    0x0 },       /* BREG */                      \\\n-      { 0x10,       0x0,    0x0 },       /* SIREG */                     \\\n-      { 0x20,       0x0,    0x0 },       /* DIREG */                     \\\n-      { 0x03,       0x0,    0x0 },       /* AD_REGS */                   \\\n-      { 0x07,       0x0,    0x0 },       /* CLOBBERED_REGS */            \\\n-      { 0x0f,       0x0,    0x0 },       /* Q_REGS */                    \\\n-  { 0x1100f0,    0x1fe0,    0x0 },       /* NON_Q_REGS */                \\\n-      { 0x7e,    0x1fe0,    0x0 },       /* TLS_GOTBASE_REGS */\t\t \\\n-      { 0x7f,    0x1fe0,    0x0 },       /* INDEX_REGS */                \\\n-  { 0x1100ff,       0x0,    0x0 },       /* LEGACY_REGS */               \\\n-  { 0x1100ff,    0x1fe0,    0x0 },       /* GENERAL_REGS */              \\\n-     { 0x100,       0x0,    0x0 },       /* FP_TOP_REG */                \\\n-    { 0x0200,       0x0,    0x0 },       /* FP_SECOND_REG */             \\\n-    { 0xff00,       0x0,    0x0 },       /* FLOAT_REGS */                \\\n-  { 0x200000,       0x0,    0x0 },       /* SSE_FIRST_REG */             \\\n-{ 0x1fe00000,  0x000000,    0x0 },       /* NO_REX_SSE_REGS */           \\\n-{ 0x1fe00000,  0x1fe000,    0x0 },       /* SSE_REGS */                  \\\n-       { 0x0,0xffe00000,   0x1f },       /* EVEX_SSE_REGS */             \\\n-{ 0x1fe00000,0xffffe000,   0x1f },       /* ALL_SSE_REGS */              \\\n-{ 0xe0000000,      0x1f,    0x0 },       /* MMX_REGS */                  \\\n-{ 0x1fe00100,0xffffe000,   0x1f },       /* FP_TOP_SSE_REG */            \\\n-{ 0x1fe00200,0xffffe000,   0x1f },       /* FP_SECOND_SSE_REG */         \\\n-{ 0x1fe0ff00,0xffffe000,   0x1f },       /* FLOAT_SSE_REGS */            \\\n-{   0x11ffff,    0x1fe0,    0x0 },       /* FLOAT_INT_REGS */            \\\n-{ 0x1ff100ff,0xffffffe0,   0x1f },       /* INT_SSE_REGS */              \\\n-{ 0x1ff1ffff,0xffffffe0,   0x1f },       /* FLOAT_INT_SSE_REGS */        \\\n-       { 0x0,       0x0, 0x1fc0 },       /* MASK_EVEX_REGS */            \\\n-       { 0x0,       0x0, 0x1fe0 },       /* MASK_REGS */                 \\\n-{ 0x1fe00000,0xffffe000,   0x1f },       /* MOD4_SSE_REGS */\t\t \\\n-{ 0xffffffff,0xffffffff,0x1ffff }\t\t\\\n+#define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n+{      { 0x0,        0x0,    0x0 },\t/* NO_REGS */\t\t\t\\\n+      { 0x01,        0x0,    0x0 },\t/* AREG */\t\t\t\\\n+      { 0x02,        0x0,    0x0 },\t/* DREG */\t\t\t\\\n+      { 0x04,        0x0,    0x0 },\t/* CREG */\t\t\t\\\n+      { 0x08,        0x0,    0x0 },\t/* BREG */\t\t\t\\\n+      { 0x10,        0x0,    0x0 },\t/* SIREG */\t\t\t\\\n+      { 0x20,        0x0,    0x0 },\t/* DIREG */\t\t\t\\\n+      { 0x03,        0x0,    0x0 },\t/* AD_REGS */\t\t\t\\\n+      { 0x07,        0x0,    0x0 },\t/* CLOBBERED_REGS */\t\t\\\n+      { 0x0f,        0x0,    0x0 },\t/* Q_REGS */\t\t\t\\\n+  { 0x1100f0,        0x0,    0x0 },\t/* NON_Q_REGS */\t\t\\\n+      { 0x7e,     0x1fe0,    0x0 },\t/* TLS_GOTBASE_REGS */\t\t\\\n+      { 0x7f,     0x1fe0,    0x0 },\t/* INDEX_REGS */\t\t\\\n+  { 0x1100ff,        0x0,    0x0 },\t/* LEGACY_REGS */\t\t\\\n+  { 0x1100ff,     0x1fe0,    0x0 },\t/* GENERAL_REGS */\t\t\\\n+     { 0x100,        0x0,    0x0 },\t/* FP_TOP_REG */\t\t\\\n+    { 0x0200,        0x0,    0x0 },\t/* FP_SECOND_REG */\t\t\\\n+    { 0xff00,        0x0,    0x0 },\t/* FLOAT_REGS */\t\t\\\n+  { 0x200000,        0x0,    0x0 },\t/* SSE_FIRST_REG */\t\t\\\n+{ 0x1fe00000,        0x0,    0x0 },\t/* NO_REX_SSE_REGS */\t\t\\\n+{ 0x1fe00000,   0x1fe000,    0x0 },\t/* SSE_REGS */\t\t\t\\\n+{ 0x1fe00000, 0xffffe000,   0x1f },\t/* ALL_SSE_REGS */\t\t\\\n+{ 0xe0000000,       0x1f,    0x0 },\t/* MMX_REGS */\t\t\t\\\n+{ 0x1fe00100, 0xffffe000,   0x1f },\t/* FP_TOP_SSE_REG */\t\t\\\n+{ 0x1fe00200, 0xffffe000,   0x1f },\t/* FP_SECOND_SSE_REG */\t\t\\\n+{ 0x1fe0ff00, 0xffffe000,   0x1f },\t/* FLOAT_SSE_REGS */\t\t\\\n+{   0x11ffff,     0x1fe0,    0x0 },\t/* FLOAT_INT_REGS */\t\t\\\n+{ 0x1ff100ff, 0xffffffe0,   0x1f },\t/* INT_SSE_REGS */\t\t\\\n+{ 0x1ff1ffff, 0xffffffe0,   0x1f },\t/* FLOAT_INT_SSE_REGS */\t\\\n+       { 0x0,        0x0, 0x1fc0 },\t/* MASK_REGS */\t\t\t\\\n+       { 0x0,        0x0, 0x1fe0 },\t/* ALL_MASK_REGS */\t\t\\\n+{ 0xffffffff, 0xffffffff, 0x1fff }\t/* ALL_REGS  */\t\t\t\\\n }\n \n /* The same information, inverted:"}, {"sha": "1e260c0594cdf96474ddd057d6356d238de6fbde", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18cbbf6770446ea7eb0d6ad2595ad4937953f55/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d18cbbf6770446ea7eb0d6ad2595ad4937953f55", "patch": "@@ -19951,7 +19951,7 @@\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(unspec:V16SF\n \t  [(match_operand:V16SF 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fmaddps\\t{%3, %g2, %0|%0, %g2, %3}\"\n@@ -19963,7 +19963,7 @@\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V16SF\n \t  (unspec:V16SF\n-\t     [(match_operand:V64SF 1 \"register_operand\" \"Yh\")\n+\t     [(match_operand:V64SF 1 \"register_operand\" \"v\")\n \t      (match_operand:V4SF 2 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n \t  (match_operand:V16SF 3 \"register_operand\" \"0\")\n \t  (match_operand:HI 4 \"register_operand\" \"Yk\")))]\n@@ -19978,7 +19978,7 @@\n \t(vec_merge:V16SF\n \t  (unspec:V16SF\n \t    [(match_operand:V16SF 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n \t  (match_operand:V16SF 4 \"const0_operand\" \"C\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n@@ -19992,7 +19992,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(unspec:V4SF\n \t  [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fmaddss\\t{%3, %x2, %0|%0, %x2, %3}\"\n@@ -20004,7 +20004,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V4SF\n \t  (unspec:V4SF\n-\t    [(match_operand:V64SF 1 \"register_operand\" \"Yh\")\n+\t    [(match_operand:V64SF 1 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 2 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n \t  (match_operand:V4SF 3 \"register_operand\" \"0\")\n \t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n@@ -20019,7 +20019,7 @@\n \t(vec_merge:V4SF\n \t  (unspec:V4SF\n \t    [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n \t  (match_operand:V4SF 4 \"const0_operand\" \"C\")\n \t  (match_operand:QI 5 \"register_operand\" \"Yk\")))]\n@@ -20033,7 +20033,7 @@\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(unspec:V16SF\n \t  [(match_operand:V16SF 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fnmaddps\\t{%3, %g2, %0|%0, %g2, %3}\"\n@@ -20045,7 +20045,7 @@\n   [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V16SF\n \t  (unspec:V16SF\n-\t     [(match_operand:V64SF 1 \"register_operand\" \"Yh\")\n+\t     [(match_operand:V64SF 1 \"register_operand\" \"v\")\n \t      (match_operand:V4SF 2 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n \t  (match_operand:V16SF 3 \"register_operand\" \"0\")\n \t  (match_operand:HI 4 \"register_operand\" \"Yk\")))]\n@@ -20060,7 +20060,7 @@\n \t(vec_merge:V16SF\n \t  (unspec:V16SF\n \t    [(match_operand:V16SF 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n \t  (match_operand:V16SF 4 \"const0_operand\" \"C\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n@@ -20074,7 +20074,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(unspec:V4SF\n \t  [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fnmaddss\\t{%3, %x2, %0|%0, %x2, %3}\"\n@@ -20086,7 +20086,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_merge:V4SF\n \t  (unspec:V4SF\n-\t    [(match_operand:V64SF 1 \"register_operand\" \"Yh\")\n+\t    [(match_operand:V64SF 1 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 2 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n \t  (match_operand:V4SF 3 \"register_operand\" \"0\")\n \t  (match_operand:QI 4 \"register_operand\" \"Yk\")))]\n@@ -20101,7 +20101,7 @@\n \t(vec_merge:V4SF\n \t  (unspec:V4SF\n \t    [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SF 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n \t  (match_operand:V4SF 4 \"const0_operand\" \"C\")\n \t  (match_operand:QI 5 \"register_operand\" \"Yk\")))]\n@@ -20115,7 +20115,7 @@\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SI 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSD))]\n   \"TARGET_AVX5124VNNIW\"\n   \"vp4dpwssd\\t{%3, %g2, %0|%0, %g2, %3}\"\n@@ -20127,7 +20127,7 @@\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(vec_merge:V16SI\n \t  (unspec:V16SI\n-\t     [(match_operand:V64SI 1 \"register_operand\" \"Yh\")\n+\t     [(match_operand:V64SI 1 \"register_operand\" \"v\")\n \t      (match_operand:V4SI 2 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSD)\n \t  (match_operand:V16SI 3 \"register_operand\" \"0\")\n \t  (match_operand:HI 4 \"register_operand\" \"Yk\")))]\n@@ -20142,7 +20142,7 @@\n \t(vec_merge:V16SI\n \t  (unspec:V16SI\n \t    [(match_operand:V16SI 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SI 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSD)\n \t  (match_operand:V16SI 4 \"const0_operand\" \"C\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n@@ -20156,7 +20156,7 @@\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(unspec:V16SI\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n-\t   (match_operand:V64SI 2 \"register_operand\" \"Yh\")\n+\t   (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSDS))]\n   \"TARGET_AVX5124VNNIW\"\n   \"vp4dpwssds\\t{%3, %g2, %0|%0, %g2, %3}\"\n@@ -20168,7 +20168,7 @@\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(vec_merge:V16SI\n \t  (unspec:V16SI\n-\t     [(match_operand:V64SI 1 \"register_operand\" \"Yh\")\n+\t     [(match_operand:V64SI 1 \"register_operand\" \"v\")\n \t      (match_operand:V4SI 2 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSDS)\n \t  (match_operand:V16SI 3 \"register_operand\" \"0\")\n \t  (match_operand:HI 4 \"register_operand\" \"Yk\")))]\n@@ -20183,7 +20183,7 @@\n \t(vec_merge:V16SI\n \t  (unspec:V16SI\n \t    [(match_operand:V16SI 1 \"register_operand\" \"0\")\n-\t     (match_operand:V64SI 2 \"register_operand\" \"Yh\")\n+\t     (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSDS)\n \t  (match_operand:V16SI 4 \"const0_operand\" \"C\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]"}]}