{"sha": "174c12c7485f408f87f335ef57b6ce55180a0603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0YzEyYzc0ODVmNDA4Zjg3ZjMzNWVmNTdiNmNlNTUxODBhMDYwMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-02-13T01:20:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-02-13T01:20:02Z"}, "message": "i386.md (fixuns_trunc<SSEMODEF>si_1): New insn.\n\n        * config/i386/i386.md (fixuns_trunc<SSEMODEF>si_1): New insn.\n        (fixuns_trunc<SSEMODEF>si2): Use it.\n        * config/i386/sse.md (vec_setv4sf_0): Export.\n        * config/i386/i386.c (ix86_build_const_vector): Export.\n        (ix86_split_convert_uns_si_sse): Rename from\n        ix86_expand_convert_uns_si_sse and rewrite as a splitter.\n        * config/i386/i386-protos.h: Update.\n\nFrom-SVN: r121877", "tree": {"sha": "4b0f2fab48f3670203cb6c2bcbf3399f1b3e51f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0f2fab48f3670203cb6c2bcbf3399f1b3e51f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/174c12c7485f408f87f335ef57b6ce55180a0603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174c12c7485f408f87f335ef57b6ce55180a0603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174c12c7485f408f87f335ef57b6ce55180a0603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174c12c7485f408f87f335ef57b6ce55180a0603/comments", "author": null, "committer": null, "parents": [{"sha": "2397c5750e422ea5b7061dbfbabdbd3f2ba54905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2397c5750e422ea5b7061dbfbabdbd3f2ba54905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2397c5750e422ea5b7061dbfbabdbd3f2ba54905"}], "stats": {"total": 136, "additions": 91, "deletions": 45}, "files": [{"sha": "ecaf690a9ea246037d3250028db5802bd1ea4e92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=174c12c7485f408f87f335ef57b6ce55180a0603", "patch": "@@ -1,3 +1,13 @@\n+2007-02-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md (fixuns_trunc<SSEMODEF>si_1): New insn.\n+\t(fixuns_trunc<SSEMODEF>si2): Use it.\n+\t* config/i386/sse.md (vec_setv4sf_0): Export.\n+\t* config/i386/i386.c (ix86_build_const_vector): Export.\n+\t(ix86_split_convert_uns_si_sse): Rename from\n+\tix86_expand_convert_uns_si_sse and rewrite as a splitter.\n+\t* config/i386/i386-protos.h: Update.\n+\n 2007-02-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/29521"}, {"sha": "24655fe2377934089289e38f1b4c7677a25ee0dc", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=174c12c7485f408f87f335ef57b6ce55180a0603", "patch": "@@ -89,7 +89,8 @@ extern void ix86_expand_binary_operator (enum rtx_code,\n extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\trtx[]);\n-extern void ix86_expand_convert_uns_si_sse (rtx, rtx);\n+extern rtx ix86_build_const_vector (enum machine_mode, bool, rtx);\n+extern void ix86_split_convert_uns_si_sse (rtx[]);\n extern void ix86_expand_convert_uns_didf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sidf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sisf_sse (rtx, rtx);"}, {"sha": "13419d77cfe8f87dc985fd5f51ca094d36faff39", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=174c12c7485f408f87f335ef57b6ce55180a0603", "patch": "@@ -1519,7 +1519,6 @@ static const char *ix86_mangle_fundamental_type (tree);\n static tree ix86_stack_protect_fail (void);\n static rtx ix86_internal_arg_pointer (void);\n static void ix86_dwarf_handle_frame_unspec (const char *, rtx, int);\n-static rtx ix86_build_const_vector (enum machine_mode, bool, rtx);\n static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n \t\t\t\t\t\t rtx, rtx, int);\n \n@@ -9865,58 +9864,64 @@ ix86_unary_operator_ok (enum rtx_code code ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n-/* Convert an SF or DFmode value in an SSE register into an unsigned SImode.\n-   When -fpmath=387, this is done with an x87 st(0)_FP->signed-int-64\n-   conversion, and ignoring the upper 32 bits of the result.  On x86_64,\n-   there is an equivalent SSE %xmm->signed-int-64 conversion.\n-\n-   On x86_32, we don't have the instruction, nor the 64-bit destination\n-   register it requires.  Do the conversion inline in the SSE registers.\n-   Requires SSE2.  For x86_32, -mfpmath=sse, !optimize_size only.  */\n+/* Post-reload splitter for converting an SF or DFmode value in an\n+   SSE register into an unsigned SImode.  */\n \n void\n-ix86_expand_convert_uns_si_sse (rtx target, rtx input)\n+ix86_split_convert_uns_si_sse (rtx operands[])\n {\n-  REAL_VALUE_TYPE TWO31r;\n-  enum machine_mode mode, vecmode;\n-  rtx two31, value, large, sign, result_vec, zero_or_two31, x;\n+  enum machine_mode vecmode;\n+  rtx value, large, zero_or_two31, input, two31, x;\n \n-  mode = GET_MODE (input);\n-  vecmode = mode == SFmode ? V4SFmode : V2DFmode;\n+  large = operands[1];\n+  zero_or_two31 = operands[2];\n+  input = operands[3];\n+  two31 = operands[4];\n+  vecmode = GET_MODE (large);\n+  value = gen_rtx_REG (vecmode, REGNO (operands[0]));\n \n-  real_ldexp (&TWO31r, &dconst1, 31);\n-  two31 = const_double_from_real_value (TWO31r, mode);\n-  two31 = ix86_build_const_vector (mode, true, two31);\n-  two31 = force_reg (vecmode, two31);\n+  /* Load up the value into the low element.  We must ensure that the other\n+     elements are valid floats -- zero is the easiest such value.  */\n+  if (MEM_P (input))\n+    {\n+      if (vecmode == V4SFmode)\n+\temit_insn (gen_vec_setv4sf_0 (value, CONST0_RTX (V4SFmode), input));\n+      else\n+\temit_insn (gen_sse2_loadlpd (value, CONST0_RTX (V2DFmode), input));\n+    }\n+  else\n+    {\n+      input = gen_rtx_REG (vecmode, REGNO (input));\n+      emit_move_insn (value, CONST0_RTX (vecmode));\n+      if (vecmode == V4SFmode)\n+\temit_insn (gen_sse_movss (value, value, input));\n+      else\n+\temit_insn (gen_sse2_movsd (value, value, input));\n+    }\n \n-  value = gen_reg_rtx (vecmode);\n-  ix86_expand_vector_init_one_nonzero (false, vecmode, value, input, 0);\n+  emit_move_insn (large, two31);\n+  emit_move_insn (zero_or_two31, MEM_P (two31) ? large : two31);\n \n-  large = gen_reg_rtx (vecmode);\n-  x = gen_rtx_fmt_ee (LE, vecmode, two31, value);\n+  x = gen_rtx_fmt_ee (LE, vecmode, large, value);\n   emit_insn (gen_rtx_SET (VOIDmode, large, x));\n \n-  zero_or_two31 = gen_reg_rtx (vecmode);\n-  x = gen_rtx_AND (vecmode, large, two31);\n+  x = gen_rtx_AND (vecmode, zero_or_two31, large);\n   emit_insn (gen_rtx_SET (VOIDmode, zero_or_two31, x));\n \n   x = gen_rtx_MINUS (vecmode, value, zero_or_two31);\n   emit_insn (gen_rtx_SET (VOIDmode, value, x));\n \n-  result_vec = gen_reg_rtx (V4SImode);\n-  if (mode == SFmode)\n-    x = gen_sse2_cvttps2dq (result_vec, value);\n-  else\n-    x = gen_sse2_cvttpd2dq (result_vec, value);\n-  emit_insn (x);\n-\n-  sign = gen_reg_rtx (V4SImode);\n-  emit_insn (gen_ashlv4si3 (sign, gen_lowpart (V4SImode, large),\n-\t\t\t    GEN_INT (31)));\n+  large = gen_rtx_REG (V4SImode, REGNO (large));\n+  emit_insn (gen_ashlv4si3 (large, large, GEN_INT (31)));\n \n-  emit_insn (gen_xorv4si3 (result_vec, result_vec, sign));\n+  x = gen_rtx_REG (V4SImode, REGNO (value));\n+  if (vecmode == V4SFmode)\n+    emit_insn (gen_sse2_cvttps2dq (x, value));\n+  else\n+    emit_insn (gen_sse2_cvttpd2dq (x, value));\n+  value = x;\n \n-  ix86_expand_vector_extract (false, target, result_vec, 0);\n+  emit_insn (gen_xorv4si3 (value, value, large));\n }\n \n /* Convert an unsigned DImode value into a DFmode, using only SSE.\n@@ -10066,7 +10071,7 @@ ix86_expand_convert_uns_sisf_sse (rtx target, rtx input)\n    then replicate the value for all elements of the vector\n    register.  */\n \n-static rtx\n+rtx\n ix86_build_const_vector (enum machine_mode mode, bool vect, rtx value)\n {\n   rtvec v;"}, {"sha": "b74d8aebf06b92af0147262affaa4fe98f944755", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=174c12c7485f408f87f335ef57b6ce55180a0603", "patch": "@@ -488,6 +488,9 @@\n ;; SSE asm suffix for floating point modes\n (define_mode_attr ssemodefsuffix [(SF \"s\") (DF \"d\")])\n \n+;; SSE vector mode corresponding to a scalar mode\n+(define_mode_attr ssevecmode\n+  [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (SF \"V4SF\") (DF \"V2DF\")])\n \f\n ;; Scheduling descriptions\n \n@@ -4334,12 +4337,39 @@\n ;; Unsigned conversion to SImode.\n \n (define_expand \"fixuns_trunc<mode>si2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t           (fix:SI (match_operand:SSEMODEF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_KEEPS_VECTOR_ALIGNED_STACK && !optimize_size\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (unsigned_fix:SI\n+\t    (match_operand:SSEMODEF 1 \"nonimmediate_operand\" \"\")))\n+     (use (match_dup 2))\n+     (clobber (match_scratch:<ssevecmode> 3 \"\"))\n+     (clobber (match_scratch:<ssevecmode> 4 \"\"))])]\n+  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH && !optimize_size\"\n+{\n+  enum machine_mode mode = <MODE>mode;\n+  enum machine_mode vecmode = <ssevecmode>mode;\n+  REAL_VALUE_TYPE TWO31r;\n+  rtx two31;\n+\n+  real_ldexp (&TWO31r, &dconst1, 31);\n+  two31 = const_double_from_real_value (TWO31r, mode);\n+  two31 = ix86_build_const_vector (mode, true, two31);\n+  operands[2] = force_reg (vecmode, two31);\n+})\n+\n+(define_insn_and_split \"*fixuns_trunc<mode>_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&x,&x\")\n+\t(unsigned_fix:SI\n+\t  (match_operand:SSEMODEF 3 \"nonimmediate_operand\" \"xm,xm\")))\n+   (use (match_operand:<ssevecmode> 4  \"nonimmediate_operand\" \"m,x\"))\n+   (clobber (match_scratch:<ssevecmode> 1 \"=x,&x\"))\n+   (clobber (match_scratch:<ssevecmode> 2 \"=x,x\"))]\n+  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH && !optimize_size\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n {\n-  ix86_expand_convert_uns_si_sse (operands[0], operands[1]);\n+  ix86_split_convert_uns_si_sse (operands);\n   DONE;\n })\n "}, {"sha": "512a8f9bfdf11065e2e30ec879a8ab86e2b23aa7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174c12c7485f408f87f335ef57b6ce55180a0603/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=174c12c7485f408f87f335ef57b6ce55180a0603", "patch": "@@ -1367,7 +1367,7 @@\n   DONE;\n })\n \n-(define_insn \"*vec_setv4sf_0\"\n+(define_insn \"vec_setv4sf_0\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\"  \"=x,x,Y2,m\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF"}]}