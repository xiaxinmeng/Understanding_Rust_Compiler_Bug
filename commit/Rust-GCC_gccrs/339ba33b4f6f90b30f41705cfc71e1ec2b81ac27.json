{"sha": "339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5YmEzM2I0ZjZmOTBiMzBmNDE3MDVjZmM3MWUxZWMyYjgxYWMyNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-19T06:49:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-19T06:49:58Z"}, "message": "reg-notes.def (CROSSING_JUMP): Likewise.\n\ngcc/\n\t* reg-notes.def (CROSSING_JUMP): Likewise.\n\t* rtl.h (rtx_def): Update comment for jump flag.\n\t(CROSSING_JUMP_P): Define.\n\t* cfgcleanup.c (try_forward_edges, try_optimize_cfg): Use it instead\n\tof a REG_CROSSING_JUMP note.\n\t* cfghooks.c (tidy_fallthru_edges): Likewise.\n\t* cfgrtl.c (fixup_partition_crossing, rtl_verify_edges): Likewise.\n\t* emit-rtl.c (try_split): Likewise.\n\t* haifa-sched.c (sched_create_recovery_edges): Likewise.\n\t* ifcvt.c (find_if_case_1, find_if_case_2): Likewise.\n\t* jump.c (redirect_jump_2): Likewise.\n\t* reorg.c (follow_jumps, fill_slots_from_thread): Likewise.\n\t(relax_delay_slots): Likewise.\n\t* config/arc/arc.md (jump_i, cbranchsi4_scratch, *bbit): Likewise.\n\t(bbit_di): Likewise.\n\t* config/arc/arc.c (arc_reorg, arc_can_follow_jump): Likewise.\n\t* config/sh/sh.md (jump_compact): Likewise.\n\t* bb-reorder.c (rotate_loop): Likewise.\n\t(pass_duplicate_computed_gotos::execute): Likewise.\n\t(add_reg_crossing_jump_notes): Rename to...\n\t(update_crossing_jump_flags): ...this.\n\t(pass_partition_blocks::execute): Update accordingly.\n\nFrom-SVN: r210603", "tree": {"sha": "17c4d542445096d484b3cb4f6aa83da151b3ee6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17c4d542445096d484b3cb4f6aa83da151b3ee6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a65d5b87d1af187a2811c36a3c632cd168336d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65d5b87d1af187a2811c36a3c632cd168336d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65d5b87d1af187a2811c36a3c632cd168336d42"}], "stats": {"total": 154, "additions": 89, "deletions": 65}, "files": [{"sha": "75ca1d293bd88d5da3629e76f96bc3fdc9245bfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -1,3 +1,28 @@\n+2014-05-19  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* reg-notes.def (CROSSING_JUMP): Likewise.\n+\t* rtl.h (rtx_def): Update comment for jump flag.\n+\t(CROSSING_JUMP_P): Define.\n+\t* cfgcleanup.c (try_forward_edges, try_optimize_cfg): Use it instead\n+\tof a REG_CROSSING_JUMP note.\n+\t* cfghooks.c (tidy_fallthru_edges): Likewise.\n+\t* cfgrtl.c (fixup_partition_crossing, rtl_verify_edges): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.\n+\t* haifa-sched.c (sched_create_recovery_edges): Likewise.\n+\t* ifcvt.c (find_if_case_1, find_if_case_2): Likewise.\n+\t* jump.c (redirect_jump_2): Likewise.\n+\t* reorg.c (follow_jumps, fill_slots_from_thread): Likewise.\n+\t(relax_delay_slots): Likewise.\n+\t* config/arc/arc.md (jump_i, cbranchsi4_scratch, *bbit): Likewise.\n+\t(bbit_di): Likewise.\n+\t* config/arc/arc.c (arc_reorg, arc_can_follow_jump): Likewise.\n+\t* config/sh/sh.md (jump_compact): Likewise.\n+\t* bb-reorder.c (rotate_loop): Likewise.\n+\t(pass_duplicate_computed_gotos::execute): Likewise.\n+\t(add_reg_crossing_jump_notes): Rename to...\n+\t(update_crossing_jump_flags): ...this.\n+\t(pass_partition_blocks::execute): Update accordingly.\n+\n 2014-05-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree.h: Remove extraneous template <>."}, {"sha": "3d7fad5933940b57c64765a806e5b21ad566a58f", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -425,8 +425,7 @@ rotate_loop (edge back_edge, struct trace *trace, int trace_n)\n \t      /* Duplicate HEADER if it is a small block containing cond jump\n \t\t in the end.  */\n \t      if (any_condjump_p (BB_END (header)) && copy_bb_p (header, 0)\n-\t\t  && !find_reg_note (BB_END (header), REG_CROSSING_JUMP,\n-\t\t\t\t     NULL_RTX))\n+\t\t  && !CROSSING_JUMP_P (BB_END (header)))\n \t\tcopy_bb (header, single_succ_edge (prev_bb), prev_bb, trace_n);\n \t    }\n \t}\n@@ -2194,23 +2193,26 @@ fix_crossing_unconditional_branches (void)\n     }\n }\n \n-/* Add REG_CROSSING_JUMP note to all crossing jump insns.  */\n+/* Update CROSSING_JUMP_P flags on all jump insns.  */\n \n static void\n-add_reg_crossing_jump_notes (void)\n+update_crossing_jump_flags (void)\n {\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     FOR_EACH_EDGE (e, ei, bb->succs)\n-      if ((e->flags & EDGE_CROSSING)\n-\t  && JUMP_P (BB_END (e->src))\n-          /* Some notes were added during fix_up_fall_thru_edges, via\n-             force_nonfallthru_and_redirect.  */\n-          && !find_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX))\n-\tadd_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX);\n+      if (e->flags & EDGE_CROSSING)\n+\t{\n+\t  if (JUMP_P (BB_END (bb))\n+\t      /* Some flags were added during fix_up_fall_thru_edges, via\n+\t\t force_nonfallthru_and_redirect.  */\n+\t      && !CROSSING_JUMP_P (BB_END (bb)))\n+\t    CROSSING_JUMP_P (BB_END (bb)) = 1;\n+\t  break;\n+\t}\n }\n \n /* Reorder basic blocks.  The main entry point to this file.  FLAGS is\n@@ -2454,7 +2456,7 @@ pass_duplicate_computed_gotos::execute (function *fun)\n \tcontinue;\n \n       /* Only consider blocks that can be duplicated.  */\n-      if (find_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX)\n+      if (CROSSING_JUMP_P (BB_END (bb))\n \t  || !can_duplicate_block_p (bb))\n \tcontinue;\n \n@@ -2507,7 +2509,7 @@ pass_duplicate_computed_gotos::execute (function *fun)\n \n       /* Don't duplicate a partition crossing edge, which requires difficult\n          fixup.  */\n-      if (find_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX))\n+      if (JUMP_P (BB_END (bb)) && CROSSING_JUMP_P (BB_END (bb)))\n \tcontinue;\n \n       new_bb = duplicate_block (single_succ (bb), single_succ_edge (bb), bb);\n@@ -2710,7 +2712,7 @@ pass_partition_blocks::execute (function *fun)\n   if (!HAS_LONG_UNCOND_BRANCH)\n     fix_crossing_unconditional_branches ();\n \n-  add_reg_crossing_jump_notes ();\n+  update_crossing_jump_flags ();\n \n   /* Clear bb->aux fields that the above routines were using.  */\n   clear_aux_for_blocks ();"}, {"sha": "7c24a6d7dde196a41f4a6b3f8cc95c5e49bac312", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -419,7 +419,7 @@ try_forward_edges (int mode, basic_block b)\n      partition boundaries).  See the comments at the top of\n      bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n \n-  if (find_reg_note (BB_END (b), REG_CROSSING_JUMP, NULL_RTX))\n+  if (JUMP_P (BB_END (b)) && CROSSING_JUMP_P (BB_END (b)))\n     return false;\n \n   for (ei = ei_start (b->succs); (e = ei_safe_edge (ei)); )\n@@ -457,7 +457,8 @@ try_forward_edges (int mode, basic_block b)\n \t details.  */\n \n       if (first != EXIT_BLOCK_PTR_FOR_FN (cfun)\n-\t  && find_reg_note (BB_END (first), REG_CROSSING_JUMP, NULL_RTX))\n+\t  && JUMP_P (BB_END (first))\n+\t  && CROSSING_JUMP_P (BB_END (first)))\n \treturn changed;\n \n       while (counter < n_basic_blocks_for_fn (cfun))\n@@ -2797,7 +2798,7 @@ try_optimize_cfg (int mode)\n \t      if (single_succ_p (b)\n \t\t  && single_succ (b) != EXIT_BLOCK_PTR_FOR_FN (cfun)\n \t\t  && onlyjump_p (BB_END (b))\n-\t\t  && !find_reg_note (BB_END (b), REG_CROSSING_JUMP, NULL_RTX)\n+\t\t  && !CROSSING_JUMP_P (BB_END (b))\n \t\t  && try_redirect_by_replacing_jump (single_succ_edge (b),\n \t\t\t\t\t\t     single_succ (b),\n \t\t\t\t\t\t     (mode & CLEANUP_CFGLAYOUT) != 0))"}, {"sha": "04053a5d73d52fd756165b1a76357e518858af52", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -965,7 +965,7 @@ tidy_fallthru_edges (void)\n \t  s = single_succ_edge (b);\n \t  if (! (s->flags & EDGE_COMPLEX)\n \t      && s->dest == c\n-\t      && !find_reg_note (BB_END (b), REG_CROSSING_JUMP, NULL_RTX))\n+\t      && !(JUMP_P (BB_END (b)) && CROSSING_JUMP_P (BB_END (b))))\n \t    tidy_fallthru_edge (s);\n \t}\n     }"}, {"sha": "eb25e89ccf3a983b74cb4b5eba9f0ace2873a164", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -1325,8 +1325,6 @@ redirect_branch_edge (edge e, basic_block target)\n static void\n fixup_partition_crossing (edge e)\n {\n-  rtx note;\n-\n   if (e->src == ENTRY_BLOCK_PTR_FOR_FN (cfun) || e->dest\n       == EXIT_BLOCK_PTR_FOR_FN (cfun))\n     return;\n@@ -1337,19 +1335,17 @@ fixup_partition_crossing (edge e)\n   if (BB_PARTITION (e->src) != BB_PARTITION (e->dest))\n     {\n       e->flags |= EDGE_CROSSING;\n-      note = find_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX);\n       if (JUMP_P (BB_END (e->src))\n-          && !note)\n-        add_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX);\n+\t  && !CROSSING_JUMP_P (BB_END (e->src)))\n+\tCROSSING_JUMP_P (BB_END (e->src)) = 1;\n     }\n   else if (BB_PARTITION (e->src) == BB_PARTITION (e->dest))\n     {\n       e->flags &= ~EDGE_CROSSING;\n       /* Remove the section crossing note from jump at end of\n          src if it exists, and if no other successors are\n          still crossing.  */\n-      note = find_reg_note (BB_END (e->src), REG_CROSSING_JUMP, NULL_RTX);\n-      if (note)\n+      if (JUMP_P (BB_END (e->src)) && CROSSING_JUMP_P (BB_END (e->src)))\n         {\n           bool has_crossing_succ = false;\n           edge e2;\n@@ -1361,7 +1357,7 @@ fixup_partition_crossing (edge e)\n                 break;\n             }\n           if (!has_crossing_succ)\n-            remove_note (BB_END (e->src), note);\n+\t    CROSSING_JUMP_P (BB_END (e->src)) = 0;\n         }\n     }\n }\n@@ -2460,8 +2456,7 @@ rtl_verify_edges (void)\n \t\t\t e->src->index);\n \t\t  err = 1;\n \t\t}\n-              if (JUMP_P (BB_END (bb))\n-                  && !find_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX))\n+              if (JUMP_P (BB_END (bb)) && !CROSSING_JUMP_P (BB_END (bb)))\n \t\t{\n \t\t  error (\"No region crossing jump at section boundary in bb %i\",\n \t\t\t bb->index);\n@@ -2496,7 +2491,8 @@ rtl_verify_edges (void)\n \t}\n \n         if (!has_crossing_edge\n-            && find_reg_note (BB_END (bb), REG_CROSSING_JUMP, NULL_RTX))\n+\t    && JUMP_P (BB_END (bb))\n+\t    && CROSSING_JUMP_P (BB_END (bb)))\n           {\n             print_rtl_with_bb (stderr, get_insns (), TDF_RTL | TDF_BLOCKS | TDF_DETAILS);\n             error (\"Region crossing jump across same section in bb %i\","}, {"sha": "3b3e82080e69b1acdfb99bf9f5de8bcc4e69d026", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -6051,7 +6051,7 @@ arc_reorg (void)\n \t    continue;\n \n \t  /* Now check if the jump is beyond the s9 range.  */\n-\t  if (find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX))\n+\t  if (CROSSING_JUMP_P (insn))\n \t    continue;\n \t  offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));\n \n@@ -9206,7 +9206,7 @@ arc_decl_pretend_args (tree decl)\n \n /* Without this, gcc.dg/tree-prof/bb-reorg.c fails to assemble\n   when compiling with -O2 -freorder-blocks-and-partition -fprofile-use\n-  -D_PROFILE_USE; delay branch scheduling then follows a REG_CROSSING_JUMP\n+  -D_PROFILE_USE; delay branch scheduling then follows a crossing jump\n   to redirect two breqs.  */\n \n static bool\n@@ -9216,7 +9216,7 @@ arc_can_follow_jump (const_rtx follower, const_rtx followee)\n   union { const_rtx c; rtx r; } u;\n \n   u.c = follower;\n-  if (find_reg_note (followee, REG_CROSSING_JUMP, NULL_RTX))\n+  if (CROSSING_JUMP_P (followee))\n     switch (get_attr_type (u.r))\n       {\n       case TYPE_BRCC:"}, {"sha": "72ba470e6eac33281c68c2ebee65155b8772e53d", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -3480,7 +3480,7 @@\n \n (define_insn \"jump_i\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n-  \"!TARGET_LONG_CALLS_SET || !find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\"\n+  \"!TARGET_LONG_CALLS_SET || !CROSSING_JUMP_P (insn)\"\n   \"b%!%* %^%l0%&\"\n   [(set_attr \"type\" \"uncond_branch\")\n    (set (attr \"iscompact\")\n@@ -3496,7 +3496,7 @@\n \t  (eq_attr \"delay_slot_filled\" \"yes\")\n \t  (const_int 4)\n \n-\t  (match_test \"find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\")\n+\t  (match_test \"CROSSING_JUMP_P (insn)\")\n \t  (const_int 4)\n \n \t  (ior (lt (minus (match_dup 0) (pc)) (const_int -512))\n@@ -4589,7 +4589,7 @@\n    \"(reload_completed\n      || (TARGET_EARLY_CBRANCHSI\n \t && brcc_nolimm_operator (operands[0], VOIDmode)))\n-    && !find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\"\n+    && !CROSSING_JUMP_P (insn)\"\n    \"*\n      switch (get_attr_length (insn))\n      {\n@@ -4653,7 +4653,7 @@\n \t  (label_ref (match_operand 0 \"\" \"\"))\n \t  (pc)))\n    (clobber (reg:CC_ZN CC_REG))]\n-  \"!find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\"\n+  \"!CROSSING_JUMP_P (insn)\"\n {\n   switch (get_attr_length (insn))\n     {\n@@ -4693,7 +4693,7 @@\n \t  (label_ref (match_operand 0 \"\" \"\"))\n \t  (pc)))\n    (clobber (reg:CC_ZN CC_REG))]\n-  \"!find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\"\n+  \"!CROSSING_JUMP_P (insn)\"\n   \"#\"\n   \"\"\n   [(parallel"}, {"sha": "f77f572d0e5fd4e02631cece2ee3c4c98db946ac", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -8804,7 +8804,7 @@ label:\n (define_insn \"jump_compact\"\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n-  \"TARGET_SH1 && !find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX)\"\n+  \"TARGET_SH1 && !CROSSING_JUMP_P (insn)\"\n {\n   /* The length is 16 if the delay slot is unfilled.  */\n   if (get_attr_length(insn) > 4)"}, {"sha": "1d74c3fded725b33b5260cf73c39b6d8396ec9d6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -3590,11 +3590,13 @@ try_split (rtx pat, rtx trial, int last)\n      may have introduced invalid RTL sharing, so unshare the sequence now.  */\n   unshare_all_rtl_in_chain (seq);\n \n-  /* Mark labels.  */\n+  /* Mark labels and copy flags.  */\n   for (insn = insn_last; insn ; insn = PREV_INSN (insn))\n     {\n       if (JUMP_P (insn))\n \t{\n+\t  if (JUMP_P (trial))\n+\t    CROSSING_JUMP_P (insn) = CROSSING_JUMP_P (trial);\n \t  mark_jump_label (PATTERN (insn), insn, 0);\n \t  njumps++;\n \t  if (probability != -1\n@@ -3671,7 +3673,6 @@ try_split (rtx pat, rtx trial, int last)\n \t  break;\n \n \tcase REG_NON_LOCAL_GOTO:\n-\tcase REG_CROSSING_JUMP:\n \t  for (insn = insn_last; insn != NULL_RTX; insn = PREV_INSN (insn))\n \t    {\n \t      if (JUMP_P (insn))"}, {"sha": "149071ec94cf32be5c0ee76ce6b8ddc6990d1997", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -7653,7 +7653,7 @@ sched_create_recovery_edges (basic_block first_bb, basic_block rec,\n \t{\n \t  /* We don't need the same note for the check because\n \t     any_condjump_p (check) == true.  */\n-\t  add_reg_note (jump, REG_CROSSING_JUMP, NULL_RTX);\n+\t  CROSSING_JUMP_P (jump) = 1;\n \t}\n       edge_flags = EDGE_CROSSING;\n     }"}, {"sha": "2ca2278709dc739cdb29fff91e9e07ac58358c24", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -3877,12 +3877,14 @@ find_if_case_1 (basic_block test_bb, edge then_edge, edge else_edge)\n      bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n \n   if ((BB_END (then_bb)\n-       && find_reg_note (BB_END (then_bb), REG_CROSSING_JUMP, NULL_RTX))\n+       && JUMP_P (BB_END (then_bb))\n+       && CROSSING_JUMP_P (BB_END (then_bb)))\n       || (BB_END (test_bb)\n-\t  && find_reg_note (BB_END (test_bb), REG_CROSSING_JUMP, NULL_RTX))\n+\t  && JUMP_P (BB_END (test_bb))\n+\t  && CROSSING_JUMP_P (BB_END (test_bb)))\n       || (BB_END (else_bb)\n-\t  && find_reg_note (BB_END (else_bb), REG_CROSSING_JUMP,\n-\t\t\t    NULL_RTX)))\n+\t  && JUMP_P (BB_END (else_bb))\n+\t  && CROSSING_JUMP_P (BB_END (else_bb))))\n     return FALSE;\n \n   /* THEN has one successor.  */\n@@ -4000,12 +4002,14 @@ find_if_case_2 (basic_block test_bb, edge then_edge, edge else_edge)\n      bb-reorder.c:partition_hot_cold_basic_blocks for complete details.  */\n \n   if ((BB_END (then_bb)\n-       && find_reg_note (BB_END (then_bb), REG_CROSSING_JUMP, NULL_RTX))\n+       && JUMP_P (BB_END (then_bb))\n+       && CROSSING_JUMP_P (BB_END (then_bb)))\n       || (BB_END (test_bb)\n-\t  && find_reg_note (BB_END (test_bb), REG_CROSSING_JUMP, NULL_RTX))\n+\t  && JUMP_P (BB_END (test_bb))\n+\t  && CROSSING_JUMP_P (BB_END (test_bb)))\n       || (BB_END (else_bb)\n-\t  && find_reg_note (BB_END (else_bb), REG_CROSSING_JUMP,\n-\t\t\t    NULL_RTX)))\n+\t  && JUMP_P (BB_END (else_bb))\n+\t  && CROSSING_JUMP_P (BB_END (else_bb))))\n     return FALSE;\n \n   /* ELSE has one successor.  */"}, {"sha": "9418f6529fa23aa8f5e67fc210b703c5095ccb0a", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -1590,11 +1590,7 @@ redirect_jump_2 (rtx jump, rtx olabel, rtx nlabel, int delete_unused,\n      label and are now changing it into a direct conditional return.\n      The jump is no longer crossing in that case.  */\n   if (ANY_RETURN_P (nlabel))\n-    {\n-      note = find_reg_note (jump, REG_CROSSING_JUMP, NULL_RTX);\n-      if (note)\n-\tremove_note (jump, note);\n-    }\n+    CROSSING_JUMP_P (jump) = 0;\n \n   if (!ANY_RETURN_P (olabel)\n       && --LABEL_NUSES (olabel) == 0 && delete_unused > 0"}, {"sha": "3146ba001bdb8d578c415871f441959aca82ac3f", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -188,11 +188,6 @@ REG_NOTE (NORETURN)\n    computed goto.  */\n REG_NOTE (NON_LOCAL_GOTO)\n \n-/* Indicates that a jump crosses between hot and cold sections in a\n-   (partitioned) assembly or .o file, and therefore should not be\n-   reduced to a simpler jump by optimizations.  */\n-REG_NOTE (CROSSING_JUMP)\n-\n /* This kind of note is generated at each to `setjmp', and similar\n    functions that can return twice.  */\n REG_NOTE (SETJMP)"}, {"sha": "e4b6d45176c4316a78d89f4c20cbcac1e32f61e1", "filename": "gcc/reorg.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -2289,8 +2289,8 @@ fill_simple_delay_slots (int non_jumps_p)\n    If LABEL is not followed by a jump, return LABEL.\n    If the chain loops or we can't find end, return LABEL,\n    since that tells caller to avoid changing the insn.\n-   If the returned label is obtained by following a REG_CROSSING_JUMP\n-   jump, set *CROSSING to true, otherwise set it to false.  */\n+   If the returned label is obtained by following a crossing jump,\n+   set *CROSSING to true, otherwise set it to false.  */\n \n static rtx\n follow_jumps (rtx label, rtx jump, bool *crossing)\n@@ -2330,8 +2330,7 @@ follow_jumps (rtx label, rtx jump, bool *crossing)\n       if (!targetm.can_follow_jump (jump, insn))\n \tbreak;\n       if (!*crossing)\n-\t*crossing\n-\t  = find_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX) != NULL_RTX;\n+\t*crossing = CROSSING_JUMP_P (jump);\n       value = this_label;\n     }\n   if (depth == 10)\n@@ -2800,7 +2799,7 @@ fill_slots_from_thread (rtx insn, rtx condition, rtx thread,\n \t{\n \t  reorg_redirect_jump (insn, label);\n \t  if (crossing)\n-\t    set_unique_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX);\n+\t    CROSSING_JUMP_P (insn) = 1;\n \t}\n     }\n \n@@ -3175,7 +3174,7 @@ relax_delay_slots (rtx first)\n \t    {\n \t      reorg_redirect_jump (insn, target_label);\n \t      if (crossing)\n-\t\tset_unique_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX);\n+\t\tCROSSING_JUMP_P (insn) = 1;\n \t    }\n \n \t  /* See if this jump conditionally branches around an unconditional\n@@ -3320,7 +3319,7 @@ relax_delay_slots (rtx first)\n \t  reorg_redirect_jump (delay_insn, trial);\n \t  target_label = trial;\n \t  if (crossing)\n-\t    set_unique_reg_note (insn, REG_CROSSING_JUMP, NULL_RTX);\n+\t    CROSSING_JUMP_P (insn) = 1;\n \t}\n \n       /* If the first insn at TARGET_LABEL is redundant with a previous"}, {"sha": "10ae1e9cee5876bbbac4c38b57bae35e7da67edf", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339ba33b4f6f90b30f41705cfc71e1ec2b81ac27/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=339ba33b4f6f90b30f41705cfc71e1ec2b81ac27", "patch": "@@ -276,6 +276,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n \n   /* 1 in a MEM if we should keep the alias set for this mem unchanged\n      when we access a component.\n+     1 in a JUMP_INSN if it is a crossing jump.\n      1 in a CALL_INSN if it is a sibling call.\n      1 in a SET that is for a return.\n      In a CODE_LABEL, part of the two-bit alternate entry field.\n@@ -942,6 +943,10 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n #define INSN_DELETED_P(RTX)\t\t\t\t\t\t\\\n   (RTL_INSN_CHAIN_FLAG_CHECK (\"INSN_DELETED_P\", (RTX))->volatil)\n \n+/* 1 if JUMP RTX is a crossing jump.  */\n+#define CROSSING_JUMP_P(RTX) \\\n+  (RTL_FLAG_CHECK1 (\"CROSSING_JUMP_P\", (RTX), JUMP_INSN)->jump)\n+\n /* 1 if RTX is a call to a const function.  Built from ECF_CONST and\n    TREE_READONLY.  */\n #define RTL_CONST_CALL_P(RTX)\t\t\t\t\t\\"}]}