{"sha": "60fca1802a25034f49fa1e3769b3a5656f392e89", "node_id": "C_kwDOANBUbNoAKDYwZmNhMTgwMmEyNTAzNGY0OWZhMWUzNzY5YjNhNTY1NmYzOTJlODk", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-03T18:45:10Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-03T18:49:51Z"}, "message": "c++: Add fixed test [PR101071]\n\nAs a happy accident, this was fixed by the recent r13-2978.\n\n\tPR c++/101071\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/variadic-alias8.C: New test.", "tree": {"sha": "21e9c7bb4d7f1ef1cc3dfce321d6d04856a6c73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e9c7bb4d7f1ef1cc3dfce321d6d04856a6c73d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60fca1802a25034f49fa1e3769b3a5656f392e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fca1802a25034f49fa1e3769b3a5656f392e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fca1802a25034f49fa1e3769b3a5656f392e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fca1802a25034f49fa1e3769b3a5656f392e89/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0065f207cf19cd960b33d961472c6d69514336f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0065f207cf19cd960b33d961472c6d69514336f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0065f207cf19cd960b33d961472c6d69514336f"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "1d317ef843856ffb5c4f6f057fa4fdb45b8ab6ab", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-alias8.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60fca1802a25034f49fa1e3769b3a5656f392e89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60fca1802a25034f49fa1e3769b3a5656f392e89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-alias8.C?ref=60fca1802a25034f49fa1e3769b3a5656f392e89", "patch": "@@ -0,0 +1,95 @@\n+// PR c++/101071\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fno-elide-constructors -O2\" }\n+\n+// Like variadic-alias2.C, just different options.\n+\n+template<class...>\n+struct list {};\n+\n+struct nil;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+template<int n>\n+struct number {\n+  constexpr /*implicit*/ operator int() const { return n; }\n+  using type = number<n>;\n+};\n+\n+using false_ = number<0>;\n+using true_ = number<1>;\n+\n+static_assert(!false_{}, \"\");\n+static_assert(true_{}, \"\");\n+\n+template<int... ns> using numbers = list<number<ns>...>;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+template<class lhs, class rhs>\n+struct less_impl;\n+\n+template<int lhs, int rhs>\n+struct less_impl<number<lhs>, number<rhs>>\n+  : number<(lhs < rhs)> {};\n+\n+template<class lhs, class rhs> using less = typename less_impl<lhs, rhs>::type;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+template<class v0, class... vs>\n+struct sum_impl {\n+  static_assert(sizeof...(vs) == 0, \"see specialization\");\n+  using type = v0;\n+};\n+\n+template<int v0, int v1, class... vs>\n+struct sum_impl<number<v0>, number<v1>, vs...>\n+  : sum_impl<number<v0 + v1>, vs...> {};\n+\n+template<class... nums> using sum = typename sum_impl<nums...>::type;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+template<class num>\n+struct conditional_impl {\n+  static_assert(num{}, \"see specialization\");\n+\n+  template<class T, class F>\n+  using type = T;\n+};\n+\n+template<>\n+struct conditional_impl<false_> {\n+  template<class T, class F>\n+  using type = F;\n+};\n+\n+template<class num, class T, class F>\n+using conditional = typename conditional_impl<num>::template type<T, F>;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+template<class seq>\n+struct min_filter_impl;\n+\n+template<class... nums>\n+struct min_filter_impl<list<nums...>> {\n+  template<class num>\n+  using count_better_mins = sum<less<nums, num>...>;\n+\n+  using type = list<conditional<count_better_mins<nums>, nil, nums>...>;\n+};\n+\n+template<class seq> using min_filter = typename min_filter_impl<seq>::type;\n+\n+////////////////////////////////////////////////////////////////////////////////\n+\n+void test_min_filter() {\n+  using computed = min_filter<numbers<2, 7, 2>>;\n+  using expected = list<number<2>, nil, number<2>>;\n+  (void)(computed{} = expected{});// compiles for identical types\n+}\n+\n+int main() {}"}]}