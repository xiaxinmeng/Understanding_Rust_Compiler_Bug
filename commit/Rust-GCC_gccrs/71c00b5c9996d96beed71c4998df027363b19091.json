{"sha": "71c00b5c9996d96beed71c4998df027363b19091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjMDBiNWM5OTk2ZDk2YmVlZDcxYzQ5OThkZjAyNzM2M2IxOTA5MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-01T08:41:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-01T08:41:53Z"}, "message": "tree.c (tree_expr_size): New function.\n\n2009-09-01  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (tree_expr_size): New function.\n\t* tree.h (tree_expr_size): Declare.\n\t* rtlanal.c (rtx_addr_can_trap_p_1): Adjust comment.\n\t* builtins.c (fold_builtin_memory_op): Use tree_expr_size.\n\t* langhooks.c (lhd_expr_size): Remove.\n\t* langhooks.h (struct lang_hooks): Remove expr_size.\n\t* explow.c (expr_size): Use tree_expr_size.\n\t(int_expr_size): Likewise.\n\t* langhooks-def.h (lhd_expr_size): Remove.\n\t(LANG_HOOKS_EXPR_SIZE): Likewise.\n\t(LANG_HOOKS_INITIALIZER): Adjust.\n\n\tcp/\n\t* cp-objcp-common.c (cp_expr_size): Use tree_expr_size.\n\t* cp-objcp-common.h (LANG_HOOKS_EXPR_SIZE): Do not define.\n\nFrom-SVN: r151261", "tree": {"sha": "9cd3add9e373b84961bc956ed0b4d7217321694d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd3add9e373b84961bc956ed0b4d7217321694d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c00b5c9996d96beed71c4998df027363b19091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c00b5c9996d96beed71c4998df027363b19091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c00b5c9996d96beed71c4998df027363b19091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c00b5c9996d96beed71c4998df027363b19091/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58f986ca91089e045b33129a6525bc0e399431e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f986ca91089e045b33129a6525bc0e399431e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f986ca91089e045b33129a6525bc0e399431e5"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "dc65f0effbf7516c2b8c4b77d543e3d931baf749", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -1,3 +1,17 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (tree_expr_size): New function.\n+\t* tree.h (tree_expr_size): Declare.\n+\t* rtlanal.c (rtx_addr_can_trap_p_1): Adjust comment.\n+\t* builtins.c (fold_builtin_memory_op): Use tree_expr_size.\n+\t* langhooks.c (lhd_expr_size): Remove.\n+\t* langhooks.h (struct lang_hooks): Remove expr_size.\n+\t* explow.c (expr_size): Use tree_expr_size.\n+\t(int_expr_size): Likewise.\n+\t* langhooks-def.h (lhd_expr_size): Remove.\n+\t(LANG_HOOKS_EXPR_SIZE): Likewise.\n+\t(LANG_HOOKS_INITIALIZER): Adjust.\n+\n 2009-09-01  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (mark_addressable): Move declaration ..."}, {"sha": "7ea899d19bacaa5727ea9456e1d406f2300446d0", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -9092,7 +9092,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  srcvar = build_fold_indirect_ref_loc (loc, src);\n \t  if (TREE_THIS_VOLATILE (srcvar))\n \t    return NULL_TREE;\n-\t  else if (!tree_int_cst_equal (lang_hooks.expr_size (srcvar), len))\n+\t  else if (!tree_int_cst_equal (tree_expr_size (srcvar), len))\n \t    srcvar = NULL_TREE;\n \t  /* With memcpy, it is possible to bypass aliasing rules, so without\n \t     this check i.e. execute/20060930-2.c would be misoptimized,\n@@ -9110,7 +9110,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  destvar = build_fold_indirect_ref_loc (loc, dest);\n \t  if (TREE_THIS_VOLATILE (destvar))\n \t    return NULL_TREE;\n-\t  else if (!tree_int_cst_equal (lang_hooks.expr_size (destvar), len))\n+\t  else if (!tree_int_cst_equal (tree_expr_size (destvar), len))\n \t    destvar = NULL_TREE;\n \t  else if (!var_decl_component_p (destvar))\n \t    destvar = NULL_TREE;"}, {"sha": "b391672b904888dd09f2a5cf97d1161e46f06b73", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-objcp-common.c (cp_expr_size): Use tree_expr_size.\n+\t* cp-objcp-common.h (LANG_HOOKS_EXPR_SIZE): Do not define.\n+\n 2009-09-01  Richard Guenther  <rguenther@suse.de>\n \n \t* cp-objcp-common.h (LANG_HOOKS_MARK_ADDRESSABLE): Remove."}, {"sha": "32e5530f24352c68a45a462439b2078a13e3bd8a", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -109,7 +109,7 @@ cp_expr_size (const_tree exp)\n     }\n   else\n     /* Use the default code.  */\n-    return lhd_expr_size (exp);\n+    return tree_expr_size (exp);\n }\n \n /* Langhook for tree_size: determine size of our 'x' and 'c' nodes.  */"}, {"sha": "19fce29d0b94425ecf12f9a37affdeeb0803db52", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -99,8 +99,6 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN cp_dump_tree\n #undef LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN\n #define LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN cp_type_quals\n-#undef LANG_HOOKS_EXPR_SIZE\n-#define LANG_HOOKS_EXPR_SIZE cp_expr_size\n \n #undef LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR\n #define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR cxx_callgraph_analyze_expr"}, {"sha": "3073ff0eb918043ee112368795a93e224f1ae708", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -246,7 +246,7 @@ expr_size (tree exp)\n     size = TREE_OPERAND (exp, 1);\n   else\n     {\n-      size = lang_hooks.expr_size (exp);\n+      size = tree_expr_size (exp);\n       gcc_assert (size);\n       gcc_assert (size == SUBSTITUTE_PLACEHOLDER_IN_EXPR (size, exp));\n     }\n@@ -266,7 +266,7 @@ int_expr_size (tree exp)\n     size = TREE_OPERAND (exp, 1);\n   else\n     {\n-      size = lang_hooks.expr_size (exp);\n+      size = tree_expr_size (exp);\n       gcc_assert (size);\n     }\n "}, {"sha": "aebab55ad1246f7e7db68d6ae56709c6c8654f3f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -58,7 +58,6 @@ extern void lhd_incomplete_type_error (const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (const_tree);\n-extern tree lhd_expr_size (const_tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n extern tree lhd_expr_to_decl (tree, bool *, bool *);\n@@ -100,7 +99,6 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION lhd_print_error_function\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_DWARF_NAME\t\tlhd_dwarf_name\n-#define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tlhd_builtin_function\n@@ -254,7 +252,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_DWARF_NAME, \\\n   LANG_HOOKS_TYPES_COMPATIBLE_P, \\\n   LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n-  LANG_HOOKS_EXPR_SIZE, \\\n   LANG_HOOKS_TO_TARGET_CHARSET, \\\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\"}, {"sha": "7d2c0b08a010928717d3a472d29a4ce06588ce2d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -260,19 +260,6 @@ lhd_tree_dump_type_quals (const_tree t)\n   return TYPE_QUALS (t);\n }\n \n-/* lang_hooks.expr_size: Determine the size of the value of an expression T\n-   in a language-specific way.  Returns a tree for the size in bytes.  */\n-\n-tree\n-lhd_expr_size (const_tree exp)\n-{\n-  if (DECL_P (exp)\n-      && DECL_SIZE_UNIT (exp) != 0)\n-    return DECL_SIZE_UNIT (exp);\n-  else\n-    return size_in_bytes (TREE_TYPE (exp));\n-}\n-\n /* lang_hooks.gimplify_expr re-writes *EXPR_P into GIMPLE form.  */\n \n int"}, {"sha": "cf3bda05606623607c418d7380cf1be194f5bfe9", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -348,12 +348,6 @@ struct lang_hooks\n   void (*print_error_function) (struct diagnostic_context *, const char *,\n \t\t\t\tstruct diagnostic_info *);\n \n-  /* Called from expr_size to calculate the size of the value of an\n-     expression in a language-dependent way.  Returns a tree for the size\n-     in bytes.  A frontend can call lhd_expr_size to get the default\n-     semantics in cases that it doesn't want to handle specially.  */\n-  tree (*expr_size) (const_tree);\n-\n   /* Convert a character from the host's to the target's character\n      set.  The character should be in what C calls the \"basic source\n      character set\" (roughly, the set of characters defined by plain"}, {"sha": "27a46d9e73d58b0388cd6a3bce8ab90d838f8336", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -293,7 +293,7 @@ rtx_addr_can_trap_p_1 (const_rtx x, HOST_WIDE_INT offset, HOST_WIDE_INT size,\n \t  decl = SYMBOL_REF_DECL (x);\n \n \t  /* Else check that the access is in bounds.  TODO: restructure\n-\t     expr_size/lhd_expr_size/int_expr_size and just use the latter.  */\n+\t     expr_size/tree_expr_size/int_expr_size and just use the latter.  */\n \t  if (!decl)\n \t    decl_size = -1;\n \t  else if (DECL_P (decl) && DECL_SIZE_UNIT (decl))"}, {"sha": "66ac70288b3334ceec5d5063eaf6b8bcd843d299", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -2194,6 +2194,18 @@ max_int_size_in_bytes (const_tree type)\n \n   return size;\n }\n+\n+/* Returns a tree for the size of EXP in bytes.  */\n+\n+tree\n+tree_expr_size (const_tree exp)\n+{\n+  if (DECL_P (exp)\n+      && DECL_SIZE_UNIT (exp) != 0)\n+    return DECL_SIZE_UNIT (exp);\n+  else\n+    return size_in_bytes (TREE_TYPE (exp));\n+}\n \f\n /* Return the bit position of FIELD, in bits from the start of the record.\n    This is a tree of type bitsizetype.  */"}, {"sha": "110beb100993713b4037753036a6d6d67b452047", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c00b5c9996d96beed71c4998df027363b19091/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=71c00b5c9996d96beed71c4998df027363b19091", "patch": "@@ -4180,6 +4180,7 @@ extern tree expr_last (tree);\n extern tree size_in_bytes (const_tree);\n extern HOST_WIDE_INT int_size_in_bytes (const_tree);\n extern HOST_WIDE_INT max_int_size_in_bytes (const_tree);\n+extern tree tree_expr_size (const_tree);\n extern tree bit_position (const_tree);\n extern HOST_WIDE_INT int_bit_position (const_tree);\n extern tree byte_position (const_tree);"}]}