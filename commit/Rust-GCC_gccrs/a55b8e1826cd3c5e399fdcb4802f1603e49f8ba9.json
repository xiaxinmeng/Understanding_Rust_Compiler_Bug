{"sha": "a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1YjhlMTgyNmNkM2M1ZTM5OWZkY2I0ODAyZjE2MDNlNDlmOGJhOQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2006-01-21T17:57:01Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2006-01-21T17:57:01Z"}, "message": "re PR libgomp/25877 (team.c:269: warning: implicit declaration of function 'alloca')\n\n\tPR libgomp/25877\n\t* configure.ac: Remove check for alloca.h.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* libgomp.h: define gomp_alloca to be __builtin_alloca.\n\t* team.c: Remove use of alloca.h.\n\tCall gomp_alloca instead of alloca.\n\nFrom-SVN: r110068", "tree": {"sha": "16ba62c14bd05fa0e4fd37e596e2a99d95e7f40b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16ba62c14bd05fa0e4fd37e596e2a99d95e7f40b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/comments", "author": null, "committer": null, "parents": [{"sha": "30cb87a09beeca0cbdee7347c2d993d1b90446d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cb87a09beeca0cbdee7347c2d993d1b90446d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cb87a09beeca0cbdee7347c2d993d1b90446d2"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "e33066aa777f82d959ff02c45e9582f3a2cb0713", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -1,3 +1,13 @@\n+2006-01-21  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR libgomp/25877\n+\t* configure.ac: Remove check for alloca.h.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* libgomp.h: define gomp_alloca to be __builtin_alloca.\n+\t* team.c: Remove use of alloca.h.\n+\tCall gomp_alloca instead of alloca.\n+\n 2006-01-20  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR libgomp/25877"}, {"sha": "a24e14867c74bebec6c215c35865d8c3185423c2", "filename": "libgomp/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -1,8 +1,5 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n-/* Define to 1 if you have the <alloca.h> header file. */\n-#undef HAVE_ALLOCA_H\n-\n /* Define to 1 if the target supports __attribute__((alias(...))). */\n #undef HAVE_ATTRIBUTE_ALIAS\n "}, {"sha": "4824adc51e999c71162618fa5e91e0b963601f1d", "filename": "libgomp/configure", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -5317,8 +5317,7 @@ done\n \n \n \n-\n-for ac_header in alloca.h unistd.h semaphore.h sys/time.h\n+for ac_header in unistd.h semaphore.h sys/time.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then"}, {"sha": "854514a27f42349f972304d236dba7b7ccf06b97", "filename": "libgomp/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -136,7 +136,7 @@ AC_SUBST(libtool_VERSION)\n # Check header files.\n AC_STDC_HEADERS\n AC_HEADER_TIME\n-AC_CHECK_HEADERS(alloca.h unistd.h semaphore.h sys/time.h)\n+AC_CHECK_HEADERS(unistd.h semaphore.h sys/time.h)\n AC_CHECK_HEADER([pthread.h],[],\n   [AC_MSG_ERROR([Pthreads are required to build libgomp])])\n "}, {"sha": "dd1e494bfd0765e801f51476a05f5787ce1038e8", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -250,6 +250,10 @@ extern void *gomp_malloc (size_t) __attribute__((malloc));\n extern void *gomp_malloc_cleared (size_t) __attribute__((malloc));\n extern void *gomp_realloc (void *, size_t);\n \n+/* Avoid conflicting prototypes of alloca() in system headers by using\n+   GCC's builtin alloca().  */\n+#define gomp_alloca(x)  __builtin_alloca(x)\n+\n /* error.c */\n \n extern void gomp_error (const char *, ...)"}, {"sha": "a4020fc37c448bb90a0eb85fc624f3e04aa1ef28", "filename": "libgomp/team.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=a55b8e1826cd3c5e399fdcb4802f1603e49f8ba9", "patch": "@@ -32,11 +32,6 @@\n #include <stdlib.h>\n #include <string.h>\n \n-#ifdef HAVE_ALLOCA_H\n-# include <alloca.h>\n-#endif\n-\n-\n /* This array manages threads spawned from the top level, which will\n    return to the idle loop once the current PARALLEL construct ends.  */\n static struct gomp_thread **gomp_threads;\n@@ -270,7 +265,8 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \t}\n     }\n \n-  start_data = alloca (sizeof (struct gomp_thread_start_data) * (nthreads-i));\n+  start_data = gomp_alloca (sizeof (struct gomp_thread_start_data)\n+\t\t\t    * (nthreads-i));\n \n   /* Launch new threads.  */\n   for (; i < nthreads; ++i, ++start_data)"}]}