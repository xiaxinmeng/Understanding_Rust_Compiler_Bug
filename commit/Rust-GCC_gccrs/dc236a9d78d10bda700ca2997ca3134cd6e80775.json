{"sha": "dc236a9d78d10bda700ca2997ca3134cd6e80775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyMzZhOWQ3OGQxMGJkYTcwMGNhMjk5N2NhMzEzNGNkNmU4MDc3NQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-04-28T18:43:12Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-04-28T18:43:12Z"}, "message": "sbitmap: Remove popcount\n\nIn r193072 sbitmap_popcount was removed, so we cannot ask for the popcount\nof an sbitmap anymore.  Nothing calls sbitmap_alloc_with_popcount either.\nThis patch removes everything else popcount-related from sbitmap.\n\n\n\t* cfganal.c (bitmap_intersection_of_succs): Delete assert checking\n\tdst->popcount.\n\t(bitmap_intersection_of_preds): Ditto.\n\t(bitmap_union_of_succs): Ditto.\n\t(bitmap_union_of_preds): Ditto.\n\t* sbitmap.c (do_popcount): Delete.\n\t(BITMAP_DEBUGGING): Delete.\n\t(sbitmap_verify_popcount): Delete.\n\t(sbitmap_alloc): Don't initialize the popcount field.\n\t(sbitmap_alloc_with_popcount): Delete.\n\t(sbitmap_resize): Don't resize the popcount array.\n\t(sbitmap_vector_alloc): Don't initialize the popcount field.\n\t(bitmap_copy): Don't copy the popcount array.\n\t(bitmap_clear): Don't clear the popcount array.\n\t(bitmap_clear): Delete the popcount array handling.\n\t(bitmap_ior_and_compl): Delete the popcount assert.\n\t(bitmap_not): Ditto.\n\t(bitmap_and_compl): Ditto.\n\t(bitmap_and): Delete the popcount array handling.\n\t(bitmap_xor): Ditto.\n\t(bitmap_ior): Ditto.\n\t(bitmap_or_and): Delete the popcount assert.\n\t(bitmap_and_or): Ditto.\n\t(popcount_table): Delete.\n\t(sbitmap_elt_popcount): Delete.\n\t* sbitmap.h (simple_bitmap_def): Delete the popcount field.\n\t(bitmap_set_bit): Delete the popcount assert.\n\t(bitmap_clear_bit): Ditto.\n\t(sbitmap_free): Don't free the popcount array.\n\t(sbitmap_alloc_with_popcount): Delete declaration.\n\t(sbitmap_popcount): Ditto.\n\nFrom-SVN: r235592", "tree": {"sha": "213687455965e0361ac7efc243ef53f45672b17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213687455965e0361ac7efc243ef53f45672b17d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc236a9d78d10bda700ca2997ca3134cd6e80775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc236a9d78d10bda700ca2997ca3134cd6e80775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc236a9d78d10bda700ca2997ca3134cd6e80775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc236a9d78d10bda700ca2997ca3134cd6e80775/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb74cda0a5e2ab0a5a922c53113053c2e027a035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74cda0a5e2ab0a5a922c53113053c2e027a035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb74cda0a5e2ab0a5a922c53113053c2e027a035"}], "stats": {"total": 215, "additions": 39, "deletions": 176}, "files": [{"sha": "a7b3a69d6709381d0d449e564831325e5662a71e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc236a9d78d10bda700ca2997ca3134cd6e80775", "patch": "@@ -1,3 +1,37 @@\n+2016-04-28  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* cfganal.c (bitmap_intersection_of_succs): Delete assert checking\n+\tdst->popcount.\n+\t(bitmap_intersection_of_preds): Ditto.\n+\t(bitmap_union_of_succs): Ditto.\n+\t(bitmap_union_of_preds): Ditto.\n+\t* sbitmap.c (do_popcount): Delete.\n+\t(BITMAP_DEBUGGING): Delete.\n+\t(sbitmap_verify_popcount): Delete.\n+\t(sbitmap_alloc): Don't initialize the popcount field.\n+\t(sbitmap_alloc_with_popcount): Delete.\n+\t(sbitmap_resize): Don't resize the popcount array.\n+\t(sbitmap_vector_alloc): Don't initialize the popcount field.\n+\t(bitmap_copy): Don't copy the popcount array.\n+\t(bitmap_clear): Don't clear the popcount array.\n+\t(bitmap_clear): Delete the popcount array handling.\n+\t(bitmap_ior_and_compl): Delete the popcount assert.\n+\t(bitmap_not): Ditto.\n+\t(bitmap_and_compl): Ditto.\n+\t(bitmap_and): Delete the popcount array handling.\n+\t(bitmap_xor): Ditto.\n+\t(bitmap_ior): Ditto.\n+\t(bitmap_or_and): Delete the popcount assert.\n+\t(bitmap_and_or): Ditto.\n+\t(popcount_table): Delete.\n+\t(sbitmap_elt_popcount): Delete.\n+\t* sbitmap.h (simple_bitmap_def): Delete the popcount field.\n+\t(bitmap_set_bit): Delete the popcount assert.\n+\t(bitmap_clear_bit): Ditto.\n+\t(sbitmap_free): Don't free the popcount array.\n+\t(sbitmap_alloc_with_popcount): Delete declaration.\n+\t(sbitmap_popcount): Ditto.\n+\n 2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "}, {"sha": "189762cba8e539b65fe38ab3183e6edd27e08414", "filename": "gcc/cfganal.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=dc236a9d78d10bda700ca2997ca3134cd6e80775", "patch": "@@ -1378,8 +1378,6 @@ bitmap_intersection_of_succs (sbitmap dst, sbitmap *src, basic_block b)\n   edge e;\n   unsigned ix;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (e = NULL, ix = 0; ix < EDGE_COUNT (b->succs); ix++)\n     {\n       e = EDGE_SUCC (b, ix);\n@@ -1419,8 +1417,6 @@ bitmap_intersection_of_preds (sbitmap dst, sbitmap *src, basic_block b)\n   edge e;\n   unsigned ix;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (e = NULL, ix = 0; ix < EDGE_COUNT (b->preds); ix++)\n     {\n       e = EDGE_PRED (b, ix);\n@@ -1460,8 +1456,6 @@ bitmap_union_of_succs (sbitmap dst, sbitmap *src, basic_block b)\n   edge e;\n   unsigned ix;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (ix = 0; ix < EDGE_COUNT (b->succs); ix++)\n     {\n       e = EDGE_SUCC (b, ix);\n@@ -1501,8 +1495,6 @@ bitmap_union_of_preds (sbitmap dst, sbitmap *src, basic_block b)\n   edge e;\n   unsigned ix;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (ix = 0; ix < EDGE_COUNT (b->preds); ix++)\n     {\n       e = EDGE_PRED (b, ix);"}, {"sha": "10b4347d65b906ffe5ec488f3e9f28f1a345fec0", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 5, "deletions": 162, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=dc236a9d78d10bda700ca2997ca3134cd6e80775", "patch": "@@ -22,25 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"sbitmap.h\"\n \n-/* This suffices for roughly 99% of the hosts we run on, and the rest\n-   don't have 256 bit integers.  */\n-#if SBITMAP_ELT_BITS > 255\n-#error Need to increase size of datatype used for popcount\n-#endif\n-\n-#if GCC_VERSION >= 3400\n-#  if SBITMAP_ELT_BITS == HOST_BITS_PER_LONG\n-#    define do_popcount(x) __builtin_popcountl (x)\n-#  elif SBITMAP_ELT_BITS == HOST_BITS_PER_LONGLONG\n-#    define do_popcount(x) __builtin_popcountll (x)\n-#  else\n-#    error \"internal error: sbitmap.h and hwint.h are inconsistent\"\n-#  endif\n-#else\n-static unsigned long sbitmap_elt_popcount (SBITMAP_ELT_TYPE);\n-#  define do_popcount(x) sbitmap_elt_popcount (x)\n-#endif\n-\n typedef SBITMAP_ELT_TYPE *sbitmap_ptr;\n typedef const SBITMAP_ELT_TYPE *const_sbitmap_ptr;\n \n@@ -51,29 +32,6 @@ static inline unsigned int sbitmap_size_bytes (const_sbitmap map)\n    return map->size * sizeof (SBITMAP_ELT_TYPE);\n }\n \n-/* This macro controls debugging that is as expensive as the\n-   operations it verifies.  */\n-\n-/* #define BITMAP_DEBUGGING  */\n-#ifdef BITMAP_DEBUGGING\n-\n-/* Verify the population count of sbitmap A matches the cached value,\n-   if there is a cached value. */\n-\n-static void\n-sbitmap_verify_popcount (const_sbitmap a)\n-{\n-  unsigned ix;\n-  unsigned int lastword;\n-\n-  if (!a->popcount)\n-    return;\n-\n-  lastword = a->size;\n-  for (ix = 0; ix < lastword; ix++)\n-    gcc_assert (a->popcount[ix] == do_popcount (a->elms[ix]));\n-}\n-#endif\n \n /* Bitmap manipulation routines.  */\n \n@@ -92,17 +50,6 @@ sbitmap_alloc (unsigned int n_elms)\n   bmap = (sbitmap) xmalloc (amt);\n   bmap->n_bits = n_elms;\n   bmap->size = size;\n-  bmap->popcount = NULL;\n-  return bmap;\n-}\n-\n-/* Allocate a simple bitmap of N_ELMS bits, and a popcount array.  */\n-\n-sbitmap\n-sbitmap_alloc_with_popcount (unsigned int n_elms)\n-{\n-  sbitmap const bmap = sbitmap_alloc (n_elms);\n-  bmap->popcount = XNEWVEC (unsigned char, bmap->size);\n   return bmap;\n }\n \n@@ -123,8 +70,6 @@ sbitmap_resize (sbitmap bmap, unsigned int n_elms, int def)\n       amt = (sizeof (struct simple_bitmap_def)\n \t    + bytes - sizeof (SBITMAP_ELT_TYPE));\n       bmap = (sbitmap) xrealloc (bmap, amt);\n-      if (bmap->popcount)\n-\tbmap->popcount = XRESIZEVEC (unsigned char, bmap->popcount, size);\n     }\n \n   if (n_elms > bmap->n_bits)\n@@ -147,27 +92,15 @@ sbitmap_resize (sbitmap bmap, unsigned int n_elms, int def)\n \t      &= (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n \t}\n       else\n-\t{\n-\t  memset (bmap->elms + bmap->size, 0,\n-\t\t  bytes - sbitmap_size_bytes (bmap));\n-\t  if (bmap->popcount)\n-\t    memset (bmap->popcount + bmap->size, 0,\n-\t\t    (size * sizeof (unsigned char))\n-\t\t    - (bmap->size * sizeof (unsigned char)));\n-\n-\t}\n+\tmemset (bmap->elms + bmap->size, 0, bytes - sbitmap_size_bytes (bmap));\n     }\n   else if (n_elms < bmap->n_bits)\n     {\n       /* Clear the surplus bits in the last word.  */\n       last_bit = n_elms % SBITMAP_ELT_BITS;\n       if (last_bit)\n-\t{\n-\t  bmap->elms[size - 1]\n-\t    &= (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n-\t  if (bmap->popcount)\n-\t    bmap->popcount[size - 1] = do_popcount (bmap->elms[size - 1]);\n-\t}\n+\tbmap->elms[size - 1]\n+\t  &= (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n     }\n \n   bmap->n_bits = n_elms;\n@@ -236,7 +169,6 @@ sbitmap_vector_alloc (unsigned int n_vecs, unsigned int n_elms)\n       bitmap_vector[i] = b;\n       b->n_bits = n_elms;\n       b->size = size;\n-      b->popcount = NULL;\n     }\n \n   return bitmap_vector;\n@@ -248,8 +180,6 @@ void\n bitmap_copy (sbitmap dst, const_sbitmap src)\n {\n   memcpy (dst->elms, src->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n-  if (dst->popcount)\n-    memcpy (dst->popcount, src->popcount, sizeof (unsigned char) * dst->size);\n }\n \n /* Determine if a == b.  */\n@@ -279,8 +209,6 @@ void\n bitmap_clear (sbitmap bmap)\n {\n   memset (bmap->elms, 0, sbitmap_size_bytes (bmap));\n-  if (bmap->popcount)\n-    memset (bmap->popcount, 0, bmap->size * sizeof (unsigned char));\n }\n \n /* Set all elements in a bitmap to ones.  */\n@@ -291,18 +219,11 @@ bitmap_ones (sbitmap bmap)\n   unsigned int last_bit;\n \n   memset (bmap->elms, -1, sbitmap_size_bytes (bmap));\n-  if (bmap->popcount)\n-    memset (bmap->popcount, -1, bmap->size * sizeof (unsigned char));\n \n   last_bit = bmap->n_bits % SBITMAP_ELT_BITS;\n   if (last_bit)\n-    {\n-      bmap->elms[bmap->size - 1]\n-\t= (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n-      if (bmap->popcount)\n-\tbmap->popcount[bmap->size - 1]\n-\t  = do_popcount (bmap->elms[bmap->size - 1]);\n-    }\n+    bmap->elms[bmap->size - 1]\n+      = (SBITMAP_ELT_TYPE)-1 >> (SBITMAP_ELT_BITS - last_bit);\n }\n \n /* Zero a vector of N_VECS bitmaps.  */\n@@ -341,8 +262,6 @@ bitmap_ior_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitm\n   const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & ~*cp++);\n@@ -363,8 +282,6 @@ bitmap_not (sbitmap dst, const_sbitmap src)\n   const_sbitmap_ptr srcp = src->elms;\n   unsigned int last_bit;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (i = 0; i < n; i++)\n     *dstp++ = ~*srcp++;\n \n@@ -387,8 +304,6 @@ bitmap_and_compl (sbitmap dst, const_sbitmap a, const_sbitmap b)\n   const_sbitmap_ptr ap = a->elms;\n   const_sbitmap_ptr bp = b->elms;\n \n-  gcc_assert (!dst->popcount);\n-\n   /* A should be at least as large as DEST, to have a defined source.  */\n   gcc_assert (a->size >= dst_size);\n   /* If minuend is smaller, we simply pretend it to be zero bits, i.e.\n@@ -432,27 +347,15 @@ bitmap_and (sbitmap dst, const_sbitmap a, const_sbitmap b)\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n   const_sbitmap_ptr bp = b->elms;\n-  bool has_popcount = dst->popcount != NULL;\n-  unsigned char *popcountp = dst->popcount;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ & *bp++;\n       SBITMAP_ELT_TYPE wordchanged = *dstp ^ tmp;\n-      if (has_popcount)\n-\t{\n-\t  if (wordchanged)\n-\t    *popcountp = do_popcount (tmp);\n-\t  popcountp++;\n-\t}\n       *dstp++ = tmp;\n       changed |= wordchanged;\n     }\n-#ifdef BITMAP_DEBUGGING\n-  if (has_popcount)\n-    sbitmap_verify_popcount (dst);\n-#endif\n   return changed != 0;\n }\n \n@@ -466,27 +369,15 @@ bitmap_xor (sbitmap dst, const_sbitmap a, const_sbitmap b)\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n   const_sbitmap_ptr bp = b->elms;\n-  bool has_popcount = dst->popcount != NULL;\n-  unsigned char *popcountp = dst->popcount;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n       SBITMAP_ELT_TYPE wordchanged = *dstp ^ tmp;\n-      if (has_popcount)\n-\t{\n-\t  if (wordchanged)\n-\t    *popcountp = do_popcount (tmp);\n-\t  popcountp++;\n-\t}\n       *dstp++ = tmp;\n       changed |= wordchanged;\n     }\n-#ifdef BITMAP_DEBUGGING\n-  if (has_popcount)\n-    sbitmap_verify_popcount (dst);\n-#endif\n   return changed != 0;\n }\n \n@@ -500,27 +391,15 @@ bitmap_ior (sbitmap dst, const_sbitmap a, const_sbitmap b)\n   sbitmap_ptr dstp = dst->elms;\n   const_sbitmap_ptr ap = a->elms;\n   const_sbitmap_ptr bp = b->elms;\n-  bool has_popcount = dst->popcount != NULL;\n-  unsigned char *popcountp = dst->popcount;\n   SBITMAP_ELT_TYPE changed = 0;\n \n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ | *bp++;\n       SBITMAP_ELT_TYPE wordchanged = *dstp ^ tmp;\n-      if (has_popcount)\n-\t{\n-\t  if (wordchanged)\n-\t    *popcountp = do_popcount (tmp);\n-\t  popcountp++;\n-\t}\n       *dstp++ = tmp;\n       changed |= wordchanged;\n     }\n-#ifdef BITMAP_DEBUGGING\n-  if (has_popcount)\n-    sbitmap_verify_popcount (dst);\n-#endif\n   return changed != 0;\n }\n \n@@ -552,8 +431,6 @@ bitmap_or_and (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n   const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ | (*bp++ & *cp++);\n@@ -577,8 +454,6 @@ bitmap_and_or (sbitmap dst, const_sbitmap a, const_sbitmap b, const_sbitmap c)\n   const_sbitmap_ptr cp = c->elms;\n   SBITMAP_ELT_TYPE changed = 0;\n \n-  gcc_assert (!dst->popcount);\n-\n   for (i = 0; i < n; i++)\n     {\n       const SBITMAP_ELT_TYPE tmp = *ap++ & (*bp++ | *cp++);\n@@ -729,35 +604,3 @@ dump_bitmap_vector (FILE *file, const char *title, const char *subtitle,\n \n   fprintf (file, \"\\n\");\n }\n-\n-#if GCC_VERSION < 3400\n-/* Table of number of set bits in a character, indexed by value of char.  */\n-static const unsigned char popcount_table[] =\n-{\n-    0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n-    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,\n-};\n-\n-/* Count the bits in an SBITMAP element A.  */\n-\n-static unsigned long\n-sbitmap_elt_popcount (SBITMAP_ELT_TYPE a)\n-{\n-  unsigned long ret = 0;\n-  unsigned i;\n-\n-  if (a == 0)\n-    return 0;\n-\n-  /* Just do this the table way for now  */\n-  for (i = 0; i < SBITMAP_ELT_BITS; i += 8)\n-    ret += popcount_table[(a >> i) & 0xff];\n-  return ret;\n-}\n-#endif"}, {"sha": "c2081710bd293e41c9f1f691637c6327abea11c7", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc236a9d78d10bda700ca2997ca3134cd6e80775/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=dc236a9d78d10bda700ca2997ca3134cd6e80775", "patch": "@@ -84,7 +84,6 @@ along with GCC; see the file COPYING3.  If not see\n \n struct simple_bitmap_def\n {\n-  unsigned char *popcount;      /* Population count.  */\n   unsigned int n_bits;\t\t/* Number of bits.  */\n   unsigned int size;\t\t/* Size in elements.  */\n   SBITMAP_ELT_TYPE elms[1];\t/* The elements.  */\n@@ -110,7 +109,6 @@ bitmap_bit_p (const_sbitmap map, int bitno)\n static inline void\n bitmap_set_bit (sbitmap map, int bitno)\n {\n-  gcc_checking_assert (! map->popcount);\n   map->elms[bitno / SBITMAP_ELT_BITS]\n     |= (SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS;\n }\n@@ -120,7 +118,6 @@ bitmap_set_bit (sbitmap map, int bitno)\n static inline void\n bitmap_clear_bit (sbitmap map, int bitno)\n {\n-  gcc_checking_assert (! map->popcount);\n   map->elms[bitno / SBITMAP_ELT_BITS]\n     &= ~((SBITMAP_ELT_TYPE) 1 << (bitno) % SBITMAP_ELT_BITS);\n }\n@@ -213,7 +210,6 @@ bmp_iter_next (sbitmap_iterator *i, unsigned *bit_no ATTRIBUTE_UNUSED)\n \n inline void sbitmap_free (sbitmap map)\n {\n-  free (map->popcount);\n   free (map);\n }\n \n@@ -231,7 +227,6 @@ extern void debug (const simple_bitmap_def *ptr);\n extern void dump_bitmap_vector (FILE *, const char *, const char *, sbitmap *,\n \t\t\t\t int);\n extern sbitmap sbitmap_alloc (unsigned int);\n-extern sbitmap sbitmap_alloc_with_popcount (unsigned int);\n extern sbitmap *sbitmap_vector_alloc (unsigned int, unsigned int);\n extern sbitmap sbitmap_resize (sbitmap, unsigned int, int);\n extern void bitmap_copy (sbitmap, const_sbitmap);\n@@ -261,5 +256,4 @@ extern int bitmap_last_set_bit (const_sbitmap);\n \n extern void debug_bitmap (const_sbitmap);\n extern sbitmap sbitmap_realloc (sbitmap, unsigned int);\n-extern unsigned long sbitmap_popcount (const_sbitmap, unsigned long);\n #endif /* ! GCC_SBITMAP_H */"}]}