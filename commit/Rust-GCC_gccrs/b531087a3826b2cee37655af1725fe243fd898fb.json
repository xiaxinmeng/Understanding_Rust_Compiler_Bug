{"sha": "b531087a3826b2cee37655af1725fe243fd898fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzMTA4N2EzODI2YjJjZWUzNzY1NWFmMTcyNWZlMjQzZmQ4OThmYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-15T13:13:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-15T13:13:21Z"}, "message": "* config/i386/i386.c: Fix formatting.\n\nFrom-SVN: r48869", "tree": {"sha": "dc90f5f50c249d6d874e3fd9691a283379864f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc90f5f50c249d6d874e3fd9691a283379864f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b531087a3826b2cee37655af1725fe243fd898fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b531087a3826b2cee37655af1725fe243fd898fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b531087a3826b2cee37655af1725fe243fd898fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b531087a3826b2cee37655af1725fe243fd898fb/comments", "author": null, "committer": null, "parents": [{"sha": "7c94ce7f87a1df87f85723833e6a1707e20233c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c94ce7f87a1df87f85723833e6a1707e20233c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c94ce7f87a1df87f85723833e6a1707e20233c3"}], "stats": {"total": 74, "additions": 39, "deletions": 35}, "files": [{"sha": "2d6fc5f03f00c0799d4bf0091a3a29f4b58db271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b531087a3826b2cee37655af1725fe243fd898fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b531087a3826b2cee37655af1725fe243fd898fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b531087a3826b2cee37655af1725fe243fd898fb", "patch": "@@ -1,3 +1,7 @@\n+2002-01-15  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/i386/i386.c: Fix formatting.\n+\n 2002-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (process_init_element): Don't save_expr"}, {"sha": "a51990b38864c9a99378c89afd4a64016a4ad5f2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b531087a3826b2cee37655af1725fe243fd898fb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b531087a3826b2cee37655af1725fe243fd898fb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b531087a3826b2cee37655af1725fe243fd898fb", "patch": "@@ -668,13 +668,13 @@ static void ix86_mark_machine_status PARAMS ((struct function *));\n static void ix86_free_machine_status PARAMS ((struct function *));\n static int ix86_split_to_parts PARAMS ((rtx, rtx *, enum machine_mode));\n static int ix86_safe_length_prefix PARAMS ((rtx));\n-static int ix86_nsaved_regs PARAMS((void));\n-static void ix86_emit_save_regs PARAMS((void));\n+static int ix86_nsaved_regs PARAMS ((void));\n+static void ix86_emit_save_regs PARAMS ((void));\n static void ix86_emit_save_regs_using_mov PARAMS ((rtx, HOST_WIDE_INT));\n static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int, int));\n static void ix86_set_move_mem_attrs_1 PARAMS ((rtx, rtx, rtx, rtx, rtx));\n-static void ix86_sched_reorder_pentium PARAMS((rtx *, rtx *));\n-static void ix86_sched_reorder_ppro PARAMS((rtx *, rtx *));\n+static void ix86_sched_reorder_pentium PARAMS ((rtx *, rtx *));\n+static void ix86_sched_reorder_ppro PARAMS ((rtx *, rtx *));\n static HOST_WIDE_INT ix86_GOT_alias_set PARAMS ((void));\n static void ix86_adjust_counter PARAMS ((rtx, HOST_WIDE_INT));\n static rtx ix86_expand_aligntest PARAMS ((rtx, int));\n@@ -2138,7 +2138,7 @@ function_arg (cum, mode, type, named)\n \t       words, cum->words, cum->nregs, GET_MODE_NAME (mode), named);\n \n       if (ret)\n-\tfprintf (stderr, \", reg=%%e%s\", reg_names[ REGNO(ret) ]);\n+\tfprintf (stderr, \", reg=%%e%s\", reg_names[ REGNO (ret) ]);\n       else\n \tfprintf (stderr, \", stack\");\n \n@@ -2449,7 +2449,7 @@ ix86_va_start (stdarg_p, valist, nextarg)\n \n   if (TARGET_DEBUG_ARG)\n     fprintf (stderr, \"va_start: words = %d, n_gpr = %d, n_fpr = %d\\n\",\n-\t     (int)words, (int)n_gpr, (int)n_fpr);\n+\t     (int) words, (int) n_gpr, (int) n_fpr);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n \t     build_int_2 (n_gpr * 8, 0));\n@@ -2547,7 +2547,7 @@ ix86_va_arg (valist, type)\n \t      for (i = 0; i < XVECLEN (container, 0) && !need_temp; i++)\n \t\t{\n \t\t  rtx slot = XVECEXP (container, 0, i);\n-\t\t  if (REGNO (XEXP (slot, 0)) != FIRST_SSE_REG + (unsigned int)i\n+\t\t  if (REGNO (XEXP (slot, 0)) != FIRST_SSE_REG + (unsigned int) i\n \t\t      || INTVAL (XEXP (slot, 1)) != i * 16)\n \t\t    need_temp = 1;\n \t\t}\n@@ -2559,7 +2559,7 @@ ix86_va_arg (valist, type)\n \t      for (i = 0; i < XVECLEN (container, 0) && !need_temp; i++)\n \t\t{\n \t\t  rtx slot = XVECEXP (container, 0, i);\n-\t\t  if (REGNO (XEXP (slot, 0)) != (unsigned int)i\n+\t\t  if (REGNO (XEXP (slot, 0)) != (unsigned int) i\n \t\t      || INTVAL (XEXP (slot, 1)) != i * 8)\n \t\t    need_temp = 1;\n \t\t}\n@@ -3318,15 +3318,15 @@ binary_fp_operator (op, mode)\n }\n \n int\n-mult_operator(op, mode)\n+mult_operator (op, mode)\n     register rtx op;\n     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == MULT;\n }\n \n int\n-div_operator(op, mode)\n+div_operator (op, mode)\n     register rtx op;\n     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n@@ -3658,7 +3658,7 @@ x86_64_zero_extended_value (value)\n \tif (HOST_BITS_PER_WIDE_INT == 32)\n \t  return INTVAL (value) >= 0;\n \telse\n-\t  return !(INTVAL (value) & ~(HOST_WIDE_INT)0xffffffff);\n+\t  return !(INTVAL (value) & ~(HOST_WIDE_INT) 0xffffffff);\n \tbreak;\n \n       /* For certain code models, the symbolic references are known to fit.  */\n@@ -3812,7 +3812,7 @@ load_pic_register ()\n   rtx gotsym, pclab;\n \n   if (TARGET_64BIT)\n-    abort();\n+    abort ();\n \n   gotsym = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n \n@@ -3867,7 +3867,7 @@ ix86_save_reg (regno, maybe_eh_return)\n       unsigned i;\n       for (i = 0; ; i++)\n \t{\n-\t  unsigned test = EH_RETURN_DATA_REGNO(i);\n+\t  unsigned test = EH_RETURN_DATA_REGNO (i);\n \t  if (test == INVALID_REGNUM)\n \t    break;\n \t  if (test == (unsigned) regno)\n@@ -4131,7 +4131,7 @@ ix86_expand_prologue ()\n       rtx arg0, sym;\n \n       if (TARGET_64BIT)\n-\tabort();\n+\tabort ();\n \n       arg0 = gen_rtx_REG (SImode, 0);\n       emit_move_insn (arg0, GEN_INT (allocate));\n@@ -4341,7 +4341,7 @@ ix86_expand_epilogue (style)\n \n \t  /* There are is no \"pascal\" calling convention in 64bit ABI.  */\n \t  if (TARGET_64BIT)\n-\t    abort();\n+\t    abort ();\n \n \t  emit_insn (gen_popsi1 (ecx));\n \t  emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, popc));\n@@ -5074,7 +5074,7 @@ legitimize_address (x, oldx, mode)\n   /* Canonicalize shifts by 0, 1, 2, 3 into multiply */\n   if (GET_CODE (x) == ASHIFT\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && (log = (unsigned)exact_log2 (INTVAL (XEXP (x, 1)))) < 4)\n+      && (log = (unsigned) exact_log2 (INTVAL (XEXP (x, 1)))) < 4)\n     {\n       changed = 1;\n       x = gen_rtx_MULT (Pmode, force_reg (Pmode, XEXP (x, 0)),\n@@ -5087,7 +5087,7 @@ legitimize_address (x, oldx, mode)\n \n       if (GET_CODE (XEXP (x, 0)) == ASHIFT\n \t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-\t  && (log = (unsigned)exact_log2 (INTVAL (XEXP (XEXP (x, 0), 1)))) < 4)\n+\t  && (log = (unsigned) exact_log2 (INTVAL (XEXP (XEXP (x, 0), 1)))) < 4)\n \t{\n \t  changed = 1;\n \t  XEXP (x, 0) = gen_rtx_MULT (Pmode,\n@@ -5097,7 +5097,7 @@ legitimize_address (x, oldx, mode)\n \n       if (GET_CODE (XEXP (x, 1)) == ASHIFT\n \t  && GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT\n-\t  && (log = (unsigned)exact_log2 (INTVAL (XEXP (XEXP (x, 1), 1)))) < 4)\n+\t  && (log = (unsigned) exact_log2 (INTVAL (XEXP (XEXP (x, 1), 1)))) < 4)\n \t{\n \t  changed = 1;\n \t  XEXP (x, 1) = gen_rtx_MULT (Pmode,\n@@ -5410,7 +5410,7 @@ put_condition_code (code, mode, reverse, fp, file)\n       enum rtx_code second_code, bypass_code;\n       ix86_fp_comparison_codes (code, &bypass_code, &code, &second_code);\n       if (bypass_code != NIL || second_code != NIL)\n-\tabort();\n+\tabort ();\n       code = ix86_fp_compare_code_to_integer (code);\n       mode = CCmode;\n     }\n@@ -7827,7 +7827,7 @@ ix86_expand_setcc (code, dest)\n       if (bypass_test)\n \t{\n \t  if (second_test)\n-\t    abort();\n+\t    abort ();\n \t  test = bypass_test;\n \t  bypass = 1;\n \t  PUT_CODE (test, reverse_condition_maybe_unordered (GET_CODE (test)));\n@@ -7860,7 +7860,7 @@ ix86_expand_int_movcc (operands)\n   if ((code == LEU || code == GTU)\n       && GET_CODE (ix86_compare_op1) == CONST_INT\n       && mode != HImode\n-      && (unsigned int)INTVAL (ix86_compare_op1) != 0xffffffff\n+      && (unsigned int) INTVAL (ix86_compare_op1) != 0xffffffff\n       && GET_CODE (operands[2]) == CONST_INT\n       && GET_CODE (operands[3]) == CONST_INT)\n     {\n@@ -8356,7 +8356,7 @@ ix86_expand_fp_movcc (operands)\n   if (!fcmov_comparison_operator (compare_op, VOIDmode))\n     {\n       if (second_test != NULL || bypass_test != NULL)\n-\tabort();\n+\tabort ();\n       tmp = gen_reg_rtx (QImode);\n       ix86_expand_setcc (code, tmp);\n       code = NE;\n@@ -8519,7 +8519,7 @@ ix86_split_to_parts (operand, parts, mode)\n \t        parts[0]\n \t\t  = GEN_INT (trunc_int_for_mode\n \t\t      ((l[0] & (((HOST_WIDE_INT) 2 << 31) - 1))\n-\t\t       + ((((HOST_WIDE_INT)l[1]) << 31) << 1),\n+\t\t       + ((((HOST_WIDE_INT) l[1]) << 31) << 1),\n \t\t       DImode));\n \t      else\n \t        parts[0] = immed_double_const (l[0], l[1], DImode);\n@@ -8658,7 +8658,7 @@ ix86_split_long_move (operands)\n \t      else if (REG_P (part[1][1]))\n \t\tpart[1][1] = gen_rtx_REG (DImode, REGNO (part[1][1]));\n \t      else\n-\t\tabort();\n+\t\tabort ();\n \t      if (GET_MODE (part[1][0]) == SImode)\n \t\tpart[1][0] = part[1][1];\n \t    }\n@@ -8994,7 +8994,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n   else if (count != 0\n \t   && (align >= 8\n \t       || (!TARGET_PENTIUMPRO && !TARGET_64BIT && align >= 4)\n-\t       || optimize_size || count < (unsigned int)64))\n+\t       || optimize_size || count < (unsigned int) 64))\n     {\n       int size = TARGET_64BIT && !optimize_size ? 8 : 4;\n       if (count & ~(size - 1))\n@@ -9063,7 +9063,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n \n       if (count == 0\n \t  && align < (TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t    || count >= (unsigned int)260)\n+\t\t\t\t\t    || count >= (unsigned int) 260)\n \t\t      ? 8 : UNITS_PER_WORD))\n \t{\n \t  label = gen_label_rtx ();\n@@ -9088,7 +9088,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n \t}\n       if (align <= 4\n \t  && ((TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t     || count >= (unsigned int)260))\n+\t\t\t\t     || count >= (unsigned int) 260))\n \t      || TARGET_64BIT))\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n@@ -9206,7 +9206,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n   else if (count != 0\n \t   && (align >= 8\n \t       || (!TARGET_PENTIUMPRO && !TARGET_64BIT && align >= 4)\n-\t       || optimize_size || count < (unsigned int)64))\n+\t       || optimize_size || count < (unsigned int) 64))\n     {\n       int size = TARGET_64BIT && !optimize_size ? 8 : 4;\n       zeroreg = copy_to_mode_reg (size == 4 ? SImode : DImode, const0_rtx);\n@@ -9259,7 +9259,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \n       if (count == 0\n \t  && align < (TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t    || count >= (unsigned int)260)\n+\t\t\t\t\t    || count >= (unsigned int) 260)\n \t\t      ? 8 : UNITS_PER_WORD))\n \t{\n \t  label = gen_label_rtx ();\n@@ -9285,7 +9285,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align <= 4 && TARGET_PENTIUMPRO && (count == 0\n-\t\t\t\t\t      || count >= (unsigned int)260))\n+\t\t\t\t\t      || count >= (unsigned int) 260))\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n \t  emit_insn (gen_strsetsi (destreg, (TARGET_64BIT\n@@ -10065,7 +10065,7 @@ ix86_safe_length (insn)\n      rtx insn;\n {\n   if (recog_memoized (insn) >= 0)\n-    return get_attr_length(insn);\n+    return get_attr_length (insn);\n   else\n     return 128;\n }\n@@ -10075,7 +10075,7 @@ ix86_safe_length_prefix (insn)\n      rtx insn;\n {\n   if (recog_memoized (insn) >= 0)\n-    return get_attr_length(insn);\n+    return get_attr_length (insn);\n   else\n     return 0;\n }\n@@ -10085,7 +10085,7 @@ ix86_safe_memory (insn)\n      rtx insn;\n {\n   if (recog_memoized (insn) >= 0)\n-    return get_attr_memory(insn);\n+    return get_attr_memory (insn);\n   else\n     return MEMORY_UNKNOWN;\n }\n@@ -10095,7 +10095,7 @@ ix86_safe_pent_pair (insn)\n      rtx insn;\n {\n   if (recog_memoized (insn) >= 0)\n-    return get_attr_pent_pair(insn);\n+    return get_attr_pent_pair (insn);\n   else\n     return PENT_PAIR_NP;\n }\n@@ -10708,7 +10708,7 @@ x86_initialize_trampoline (tramp, fnaddr, cxt)\n \t\t      GEN_INT (trunc_int_for_mode (0xe3, QImode)));\n       offset += 3;\n       if (offset > TRAMPOLINE_SIZE)\n-\tabort();\n+\tabort ();\n     }\n }\n \f"}]}