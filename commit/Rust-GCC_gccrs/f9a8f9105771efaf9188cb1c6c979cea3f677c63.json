{"sha": "f9a8f9105771efaf9188cb1c6c979cea3f677c63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhOGY5MTA1NzcxZWZhZjkxODhjYjFjNmM5NzljZWEzZjY3N2M2Mw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2017-04-25T13:30:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:30:56Z"}, "message": "contracts.adb (Analyze_Entry_Or_Subprogram_Body_Contract): Add a warning about SPARK mode management.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* contracts.adb (Analyze_Entry_Or_Subprogram_Body_Contract):\n\tAdd a warning about SPARK mode management. The routine now\n\tsaves and restores both the mode and associated pragma.\n\t(Analyze_Entry_Or_Subprogram_Contract): Add a warning about\n\tSPARK mode management. The routine now saves and restores both\n\tthe mode and associated pragma.\n\t(Analyze_Object_Contract):\n\tAdd a warning about SPARK mode management. The routine\n\tnow saves and restores both the mode and associated pragma.\n\t(Analyze_Package_Body_Contract): Add a warning about SPARK mode\n\tmanagement.  The routine now saves and restores both the mode\n\tand associated pragma.\t(Analyze_Package_Contract): Add a warning\n\tabout SPARK mode management. The routine now saves and restores\n\tboth the mode and associated pragma.\n\t(Analyze_Task_Contract):\n\tAdd a warning about SPARK mode management. The routine now saves\n\tand restores both the mode and associated pragma.\n\t* expander.adb (Expand): Change the way the Ghost mode is saved\n\tand restored.\n\t* exp_ch3.adb (Freeze_Type): Change the way the Ghost mode is\n\tsaved and restored.\n\t* exp_disp.adb (Make_DT): Change the way the Ghost mode is saved\n\tand restored.\n\t* exp_util.adb (Build_DIC_Procedure_Body):\n\tChange the way the Ghost mode is saved and restored.\n\t(Build_DIC_Procedure_Declaration): Change the way the Ghost\n\tmode is saved and restored.\n\t(Build_Invariant_Procedure_Body):\n\tChange the way the Ghost mode is saved and restored.\n\t(Build_Invariant_Procedure_Declaration): Change the way the Ghost\n\tmode is saved and restored.\n\t(Make_Predicate_Call): Change the\n\tway the Ghost mode is saved and restored.\n\t* freeze.adb (Freeze_Entity): Change the way the Ghost mode is\n\tsaved and restored.\n\t* ghost.adb (Mark_And_Set_Ghost_Assignment): Remove parameter Mode\n\tand its assignment.\n\t(Mark_And_Set_Ghost_Body): Remove parameter\n\tMode and its assignment.\n\t(Mark_And_Set_Ghost_Completion):\n\tRemove parameter Mode and its assignment.\n\t(Mark_And_Set_Ghost_Declaration): Remove parameter Mode and its\n\tassignment.\n\t(Mark_And_Set_Ghost_Instantiation): Remove parameter\n\tMode and its assignment.\n\t(Mark_And_Set_Ghost_Procedure_Call):\n\tRemove parameter Mode and its assignment.\n\t(Set_Ghost_Mode):\n\tRemove parameter Mode and its assignment.\n\t* ghost.ads (Mark_And_Set_Ghost_Assignment): Remove parameter Mode\n\tand update the comment on usage.\n\t(Mark_And_Set_Ghost_Body):\n\tRemove parameter Mode and update the comment on usage.\n\t(Mark_And_Set_Ghost_Completion): Remove parameter Mode and\n\tupdate the comment on usage.\n\t(Mark_And_Set_Ghost_Declaration):\n\tRemove parameter Mode and update the comment on usage.\n\t(Mark_And_Set_Ghost_Instantiation): Remove parameter Mode and\n\tupdate the comment on usage.\n\t(Mark_And_Set_Ghost_Procedure_Call):\n\tRemove parameter Mode and update the comment on usage.\n\t(Set_Ghost_Mode): Remove parameter Mode and update the comment\n\ton usage.\n\t* lib.ads Remove obsolete fields SPARK_Mode_Pragma from various\n\ttypes.\n\t* lib-load.adb (Create_Dummy_Package_Unit): Remove the assignment\n\tof obsolete field SPARK_Mode_Pragma.\n\t(Load_Main_Source): Remove\n\tthe assignment of obsolete field SPARK_Mode_Pragma.\n\t(Load_Unit): Remove the assignment of obsolete field SPARK_Mode_Pragma.\n\t* lib-writ.adb (Add_Preprocessing_Dependency): Remove\n\tthe assignment of obsolete field SPARK_Mode_Pragma.\n\t(Ensure_System_Dependency): Remove the assignment of obsolete\n\tfield SPARK_Mode_Pragma.\n\t* rtsfind.adb (Load_RTU): Add a warning about Ghost and SPARK\n\tmode management. Change the way Ghost and SPARK modes are saved\n\tand restored.\n\t* sem.adb (Analyze): Change the way the Ghost mode is saved\n\tand restored.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Change the way the\n\tGhost mode is saved and restored.\n\t(Process_Full_View): Change\n\tthe way the Ghost mode is saved and restored.\n\t* sem_ch5.adb (Analyze_Assignment): Change the way the Ghost\n\tmode is saved and restored.\n\t* sem_ch6.adb (Analyze_Procedure_Call): Change the way the Ghost\n\tmode is saved and restored.\n\t(Analyze_Subprogram_Body_Helper):\n\tChange the way the Ghost mode is saved and restored.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Change the way the\n\tGhost mode is saved and restored.\n\t* sem_ch10.adb (Analyze_Subunit): Add a warning about SPARK mode\n\tmanagement. Save the SPARK mode-related data prior to any changes\n\tto the scope stack and contexts. The mode is then reinstalled\n\tbefore the subunit is analyzed in order to restore the original\n\tview of the subunit.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Update the\n\twarning on region management.  Change the way the Ghost and\n\tSPARK modes are saved and restored.\n\t(Inline_Instance_Body):\n\tAdd a warning about SPARK mode management. Code clean up.\n\t(Analyze_Subprogram_Instantiation): Update the warning on region\n\tmanagement.  Change the way the Ghost and SPARK modes are saved\n\tand restored.\n\t(Instantiate_Package_Body): Update the warning\n\ton region management. Change the way the Ghost and SPARK modes\n\tare saved and restored.\n\t(Instantiate_Subprogram_Body): Update\n\tthe warning on region management. Change the way the Ghost and\n\tSPARK modes are saved and restored.\n\t(Set_Instance_Env): Add a\n\twarning about SPARK mode management. Change the way SPARK mode\n\tis saved and restored.\n\t* sem_ch13.adb (Build_Predicate_Functions):\n\tChange the way the Ghost mode is saved and restored.\n\t(Build_Predicate_Function_Declaration): Change the way the Ghost\n\tmode is saved and restored.\n\t* sem_elab.adb (Check_Elab_Calls): Add a warning about SPARK\n\tmode management. Change the way SPARK mode is saved and restored.\n\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part):\n\tChange the way the Ghost mode is saved and restored.\n\t(Analyze_Initial_Condition_In_Decl_Part): Change the way\n\tthe Ghost mode is saved and restored.\n\t(Analyze_Pragma):\n\tChange the way the Ghost mode is saved and restored.\n\t(Analyze_Pre_Post_Condition_In_Decl_Part): Change the way the\n\tGhost mode is saved and restored.\n\t* sem_util.adb (Install_SPARK_Mode): New routine.\n\t(Restore_SPARK_Mode): New routine.\n\t(Save_SPARK_Mode_And_Set): Removed.\n\t(Set_SPARK_Mode): New routine.\n\t* sem_util.ads (Install_SPARK_Mode): New routine.\n\t(Restore_SPARK_Mode): New routine.\n\t(Save_SPARK_Mode_And_Set): Removed.\n\t(Set_SPARK_Mode): New routine.\n\nFrom-SVN: r247230", "tree": {"sha": "992c764511936912725444e11960472f1948170a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/992c764511936912725444e11960472f1948170a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a8f9105771efaf9188cb1c6c979cea3f677c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a8f9105771efaf9188cb1c6c979cea3f677c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a8f9105771efaf9188cb1c6c979cea3f677c63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a8f9105771efaf9188cb1c6c979cea3f677c63/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1691d7e604001acf559885a0db261eaef0dc5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1691d7e604001acf559885a0db261eaef0dc5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1691d7e604001acf559885a0db261eaef0dc5d8"}], "stats": {"total": 1013, "additions": 589, "deletions": 424}, "files": [{"sha": "fc2de1da12cfd7295f3dc50d072b925104ec381e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -1,3 +1,141 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Analyze_Entry_Or_Subprogram_Body_Contract):\n+\tAdd a warning about SPARK mode management. The routine now\n+\tsaves and restores both the mode and associated pragma.\n+\t(Analyze_Entry_Or_Subprogram_Contract): Add a warning about\n+\tSPARK mode management. The routine now saves and restores both\n+\tthe mode and associated pragma.\n+\t(Analyze_Object_Contract):\n+\tAdd a warning about SPARK mode management. The routine\n+\tnow saves and restores both the mode and associated pragma.\n+\t(Analyze_Package_Body_Contract): Add a warning about SPARK mode\n+\tmanagement.  The routine now saves and restores both the mode\n+\tand associated pragma.\t(Analyze_Package_Contract): Add a warning\n+\tabout SPARK mode management. The routine now saves and restores\n+\tboth the mode and associated pragma.\n+\t(Analyze_Task_Contract):\n+\tAdd a warning about SPARK mode management. The routine now saves\n+\tand restores both the mode and associated pragma.\n+\t* expander.adb (Expand): Change the way the Ghost mode is saved\n+\tand restored.\n+\t* exp_ch3.adb (Freeze_Type): Change the way the Ghost mode is\n+\tsaved and restored.\n+\t* exp_disp.adb (Make_DT): Change the way the Ghost mode is saved\n+\tand restored.\n+\t* exp_util.adb (Build_DIC_Procedure_Body):\n+\tChange the way the Ghost mode is saved and restored.\n+\t(Build_DIC_Procedure_Declaration): Change the way the Ghost\n+\tmode is saved and restored.\n+\t(Build_Invariant_Procedure_Body):\n+\tChange the way the Ghost mode is saved and restored.\n+\t(Build_Invariant_Procedure_Declaration): Change the way the Ghost\n+\tmode is saved and restored.\n+\t(Make_Predicate_Call): Change the\n+\tway the Ghost mode is saved and restored.\n+\t* freeze.adb (Freeze_Entity): Change the way the Ghost mode is\n+\tsaved and restored.\n+\t* ghost.adb (Mark_And_Set_Ghost_Assignment): Remove parameter Mode\n+\tand its assignment.\n+\t(Mark_And_Set_Ghost_Body): Remove parameter\n+\tMode and its assignment.\n+\t(Mark_And_Set_Ghost_Completion):\n+\tRemove parameter Mode and its assignment.\n+\t(Mark_And_Set_Ghost_Declaration): Remove parameter Mode and its\n+\tassignment.\n+\t(Mark_And_Set_Ghost_Instantiation): Remove parameter\n+\tMode and its assignment.\n+\t(Mark_And_Set_Ghost_Procedure_Call):\n+\tRemove parameter Mode and its assignment.\n+\t(Set_Ghost_Mode):\n+\tRemove parameter Mode and its assignment.\n+\t* ghost.ads (Mark_And_Set_Ghost_Assignment): Remove parameter Mode\n+\tand update the comment on usage.\n+\t(Mark_And_Set_Ghost_Body):\n+\tRemove parameter Mode and update the comment on usage.\n+\t(Mark_And_Set_Ghost_Completion): Remove parameter Mode and\n+\tupdate the comment on usage.\n+\t(Mark_And_Set_Ghost_Declaration):\n+\tRemove parameter Mode and update the comment on usage.\n+\t(Mark_And_Set_Ghost_Instantiation): Remove parameter Mode and\n+\tupdate the comment on usage.\n+\t(Mark_And_Set_Ghost_Procedure_Call):\n+\tRemove parameter Mode and update the comment on usage.\n+\t(Set_Ghost_Mode): Remove parameter Mode and update the comment\n+\ton usage.\n+\t* lib.ads Remove obsolete fields SPARK_Mode_Pragma from various\n+\ttypes.\n+\t* lib-load.adb (Create_Dummy_Package_Unit): Remove the assignment\n+\tof obsolete field SPARK_Mode_Pragma.\n+\t(Load_Main_Source): Remove\n+\tthe assignment of obsolete field SPARK_Mode_Pragma.\n+\t(Load_Unit): Remove the assignment of obsolete field SPARK_Mode_Pragma.\n+\t* lib-writ.adb (Add_Preprocessing_Dependency): Remove\n+\tthe assignment of obsolete field SPARK_Mode_Pragma.\n+\t(Ensure_System_Dependency): Remove the assignment of obsolete\n+\tfield SPARK_Mode_Pragma.\n+\t* rtsfind.adb (Load_RTU): Add a warning about Ghost and SPARK\n+\tmode management. Change the way Ghost and SPARK modes are saved\n+\tand restored.\n+\t* sem.adb (Analyze): Change the way the Ghost mode is saved\n+\tand restored.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Change the way the\n+\tGhost mode is saved and restored.\n+\t(Process_Full_View): Change\n+\tthe way the Ghost mode is saved and restored.\n+\t* sem_ch5.adb (Analyze_Assignment): Change the way the Ghost\n+\tmode is saved and restored.\n+\t* sem_ch6.adb (Analyze_Procedure_Call): Change the way the Ghost\n+\tmode is saved and restored.\n+\t(Analyze_Subprogram_Body_Helper):\n+\tChange the way the Ghost mode is saved and restored.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Change the way the\n+\tGhost mode is saved and restored.\n+\t* sem_ch10.adb (Analyze_Subunit): Add a warning about SPARK mode\n+\tmanagement. Save the SPARK mode-related data prior to any changes\n+\tto the scope stack and contexts. The mode is then reinstalled\n+\tbefore the subunit is analyzed in order to restore the original\n+\tview of the subunit.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Update the\n+\twarning on region management.  Change the way the Ghost and\n+\tSPARK modes are saved and restored.\n+\t(Inline_Instance_Body):\n+\tAdd a warning about SPARK mode management. Code clean up.\n+\t(Analyze_Subprogram_Instantiation): Update the warning on region\n+\tmanagement.  Change the way the Ghost and SPARK modes are saved\n+\tand restored.\n+\t(Instantiate_Package_Body): Update the warning\n+\ton region management. Change the way the Ghost and SPARK modes\n+\tare saved and restored.\n+\t(Instantiate_Subprogram_Body): Update\n+\tthe warning on region management. Change the way the Ghost and\n+\tSPARK modes are saved and restored.\n+\t(Set_Instance_Env): Add a\n+\twarning about SPARK mode management. Change the way SPARK mode\n+\tis saved and restored.\n+\t* sem_ch13.adb (Build_Predicate_Functions):\n+\tChange the way the Ghost mode is saved and restored.\n+\t(Build_Predicate_Function_Declaration): Change the way the Ghost\n+\tmode is saved and restored.\n+\t* sem_elab.adb (Check_Elab_Calls): Add a warning about SPARK\n+\tmode management. Change the way SPARK mode is saved and restored.\n+\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part):\n+\tChange the way the Ghost mode is saved and restored.\n+\t(Analyze_Initial_Condition_In_Decl_Part): Change the way\n+\tthe Ghost mode is saved and restored.\n+\t(Analyze_Pragma):\n+\tChange the way the Ghost mode is saved and restored.\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Change the way the\n+\tGhost mode is saved and restored.\n+\t* sem_util.adb (Install_SPARK_Mode): New routine.\n+\t(Restore_SPARK_Mode): New routine.\n+\t(Save_SPARK_Mode_And_Set): Removed.\n+\t(Set_SPARK_Mode): New routine.\n+\t* sem_util.ads (Install_SPARK_Mode): New routine.\n+\t(Restore_SPARK_Mode): New routine.\n+\t(Save_SPARK_Mode_And_Set): Removed.\n+\t(Set_SPARK_Mode): New routine.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb, sem_util.ads (From_Nested_Package): New predicate"}, {"sha": "e4dc59ece284fc28af04f5ec3517c840b6d4c6f6", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 74, "deletions": 32, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -444,11 +444,18 @@ package body Contracts is\n    -- Analyze_Entry_Or_Subprogram_Body_Contract --\n    -----------------------------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Entry_Or_Subprogram_Body_Contract (Body_Id : Entity_Id) is\n       Body_Decl : constant Node_Id   := Unit_Declaration_Node (Body_Id);\n       Items     : constant Node_Id   := Contract (Body_Id);\n       Spec_Id   : constant Entity_Id := Unique_Defining_Entity (Body_Decl);\n-      Mode      : SPARK_Mode_Type;\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n \n    begin\n       --  When a subprogram body declaration is illegal, its defining entity is\n@@ -473,7 +480,7 @@ package body Contracts is\n       --  context. To remedy this, restore the original SPARK_Mode of the\n       --  related subprogram body.\n \n-      Save_SPARK_Mode_And_Set (Body_Id, Mode);\n+      Set_SPARK_Mode (Body_Id);\n \n       --  Ensure that the contract cases or postconditions mention 'Result or\n       --  define a post-state.\n@@ -499,7 +506,7 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      Restore_SPARK_Mode (Mode);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n \n       --  Capture all global references in a generic subprogram body now that\n       --  the contract has been analyzed.\n@@ -523,21 +530,28 @@ package body Contracts is\n    -- Analyze_Entry_Or_Subprogram_Contract --\n    ------------------------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Entry_Or_Subprogram_Contract\n      (Subp_Id   : Entity_Id;\n       Freeze_Id : Entity_Id := Empty)\n    is\n       Items     : constant Node_Id := Contract (Subp_Id);\n       Subp_Decl : constant Node_Id := Unit_Declaration_Node (Subp_Id);\n \n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n       Skip_Assert_Exprs : constant Boolean :=\n                             Ekind_In (Subp_Id, E_Entry, E_Entry_Family)\n                               and then not ASIS_Mode\n                               and then not GNATprove_Mode;\n \n       Depends  : Node_Id := Empty;\n       Global   : Node_Id := Empty;\n-      Mode     : SPARK_Mode_Type;\n       Prag     : Node_Id;\n       Prag_Nam : Name_Id;\n \n@@ -557,7 +571,7 @@ package body Contracts is\n       --  context. To remedy this, restore the original SPARK_Mode of the\n       --  related subprogram body.\n \n-      Save_SPARK_Mode_And_Set (Subp_Id, Mode);\n+      Set_SPARK_Mode (Subp_Id);\n \n       --  All subprograms carry a contract, but for some it is not significant\n       --  and should not be processed.\n@@ -667,7 +681,7 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      Restore_SPARK_Mode (Mode);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n \n       --  Capture all global references in a generic subprogram now that the\n       --  contract has been analyzed.\n@@ -683,21 +697,28 @@ package body Contracts is\n    -- Analyze_Object_Contract --\n    -----------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Object_Contract\n      (Obj_Id    : Entity_Id;\n       Freeze_Id : Entity_Id := Empty)\n    is\n-      Obj_Typ      : constant Entity_Id := Etype (Obj_Id);\n-      AR_Val       : Boolean := False;\n-      AW_Val       : Boolean := False;\n-      ER_Val       : Boolean := False;\n-      EW_Val       : Boolean := False;\n-      Items        : Node_Id;\n-      Mode         : SPARK_Mode_Type;\n-      Prag         : Node_Id;\n-      Ref_Elmt     : Elmt_Id;\n-      Restore_Mode : Boolean := False;\n-      Seen         : Boolean := False;\n+      Obj_Typ : constant Entity_Id := Etype (Obj_Id);\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n+      AR_Val   : Boolean := False;\n+      AW_Val   : Boolean := False;\n+      ER_Val   : Boolean := False;\n+      EW_Val   : Boolean := False;\n+      Items    : Node_Id;\n+      Prag     : Node_Id;\n+      Ref_Elmt : Elmt_Id;\n+      Seen     : Boolean := False;\n \n    begin\n       --  The loop parameter in an element iterator over a formal container\n@@ -728,8 +749,7 @@ package body Contracts is\n       if Is_Single_Concurrent_Object (Obj_Id)\n         and then Present (SPARK_Pragma (Obj_Id))\n       then\n-         Restore_Mode := True;\n-         Save_SPARK_Mode_And_Set (Obj_Id, Mode);\n+         Set_SPARK_Mode (Obj_Id);\n       end if;\n \n       --  Constant-related checks\n@@ -929,23 +949,29 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      if Restore_Mode then\n-         Restore_SPARK_Mode (Mode);\n-      end if;\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n    end Analyze_Object_Contract;\n \n    -----------------------------------\n    -- Analyze_Package_Body_Contract --\n    -----------------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Package_Body_Contract\n      (Body_Id   : Entity_Id;\n       Freeze_Id : Entity_Id := Empty)\n    is\n       Body_Decl : constant Node_Id   := Unit_Declaration_Node (Body_Id);\n       Items     : constant Node_Id   := Contract (Body_Id);\n       Spec_Id   : constant Entity_Id := Spec_Entity (Body_Id);\n-      Mode      : SPARK_Mode_Type;\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n       Ref_State : Node_Id;\n \n    begin\n@@ -964,7 +990,7 @@ package body Contracts is\n       --  context. To remedy this, restore the original SPARK_Mode of the\n       --  related package body.\n \n-      Save_SPARK_Mode_And_Set (Body_Id, Mode);\n+      Set_SPARK_Mode (Body_Id);\n \n       Ref_State := Get_Pragma (Body_Id, Pragma_Refined_State);\n \n@@ -978,7 +1004,7 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      Restore_SPARK_Mode (Mode);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n \n       --  Capture all global references in a generic package body now that the\n       --  contract has been analyzed.\n@@ -994,12 +1020,20 @@ package body Contracts is\n    -- Analyze_Package_Contract --\n    ------------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Package_Contract (Pack_Id : Entity_Id) is\n       Items     : constant Node_Id := Contract (Pack_Id);\n       Pack_Decl : constant Node_Id := Unit_Declaration_Node (Pack_Id);\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n       Init      : Node_Id := Empty;\n       Init_Cond : Node_Id := Empty;\n-      Mode      : SPARK_Mode_Type;\n       Prag      : Node_Id;\n       Prag_Nam  : Name_Id;\n \n@@ -1019,7 +1053,7 @@ package body Contracts is\n       --  context. To remedy this, restore the original SPARK_Mode of the\n       --  related package.\n \n-      Save_SPARK_Mode_And_Set (Pack_Id, Mode);\n+      Set_SPARK_Mode (Pack_Id);\n \n       if Present (Items) then\n \n@@ -1066,7 +1100,7 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      Restore_SPARK_Mode (Mode);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n \n       --  Capture all global references in a generic package now that the\n       --  contract has been analyzed.\n@@ -1204,10 +1238,18 @@ package body Contracts is\n    -- Analyze_Task_Contract --\n    ---------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Task_Contract (Task_Id : Entity_Id) is\n       Items : constant Node_Id := Contract (Task_Id);\n-      Mode  : SPARK_Mode_Type;\n-      Prag  : Node_Id;\n+\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data to restore on exit\n+\n+      Prag : Node_Id;\n \n    begin\n       --  Do not analyze a contract multiple times\n@@ -1225,7 +1267,7 @@ package body Contracts is\n       --  context. To remedy this, restore the original SPARK_Mode of the\n       --  related task unit.\n \n-      Save_SPARK_Mode_And_Set (Task_Id, Mode);\n+      Set_SPARK_Mode (Task_Id);\n \n       --  Analyze Global first, as Depends may mention items classified in the\n       --  global categorization.\n@@ -1248,7 +1290,7 @@ package body Contracts is\n       --  Restore the SPARK_Mode of the enclosing context after all delayed\n       --  pragmas have been analyzed.\n \n-      Restore_SPARK_Mode (Mode);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n    end Analyze_Task_Contract;\n \n    -------------------------------------------------"}, {"sha": "094f70e0eabe49d035f9d49d39fd0943e14325b0", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -7193,9 +7193,10 @@ package body Exp_Ch3 is\n \n       Def_Id : constant Entity_Id := Entity (N);\n \n-      Mode     : Ghost_Mode_Type;\n-      Mode_Set : Boolean := False;\n-      Result   : Boolean := False;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n+      Result : Boolean := False;\n \n    --  Start of processing for Freeze_Type\n \n@@ -7204,8 +7205,7 @@ package body Exp_Ch3 is\n       --  now to ensure that any nodes generated during freezing are properly\n       --  marked as Ghost.\n \n-      Set_Ghost_Mode (Def_Id, Mode);\n-      Mode_Set := True;\n+      Set_Ghost_Mode (Def_Id);\n \n       --  Process any remote access-to-class-wide types designating the type\n       --  being frozen.\n@@ -7548,17 +7548,13 @@ package body Exp_Ch3 is\n          Build_Invariant_Procedure_Body (Def_Id);\n       end if;\n \n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Restore_Ghost_Mode (Saved_GM);\n \n       return Result;\n \n    exception\n       when RE_Not_Available =>\n-         if Mode_Set then\n-            Restore_Ghost_Mode (Mode);\n-         end if;\n+         Restore_Ghost_Mode (Saved_GM);\n \n          return False;\n    end Freeze_Type;"}, {"sha": "96f62a0f4b401389d7280397134d26f2927c3a1b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4396,6 +4396,9 @@ package body Exp_Disp is\n       Name_TSD          : constant Name_Id :=\n                             New_External_Name (Tname, 'B', Suffix_Index => -1);\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       AI                 : Elmt_Id;\n       AI_Tag_Elmt        : Elmt_Id;\n       AI_Tag_Comp        : Elmt_Id;\n@@ -4408,7 +4411,6 @@ package body Exp_Disp is\n       ITable             : Node_Id;\n       I_Depth            : Nat := 0;\n       Iface_Table_Node   : Node_Id;\n-      Mode               : Ghost_Mode_Type;\n       Name_ITable        : Name_Id;\n       Nb_Predef_Prims    : Nat := 0;\n       Nb_Prim            : Nat := 0;\n@@ -4436,7 +4438,7 @@ package body Exp_Disp is\n       --  the mode now to ensure that any nodes generated during dispatch table\n       --  creation are properly marked as Ghost.\n \n-      Set_Ghost_Mode (Typ, Mode);\n+      Set_Ghost_Mode (Typ);\n \n       --  Handle cases in which there is no need to build the dispatch table\n \n@@ -6242,7 +6244,7 @@ package body Exp_Disp is\n       Register_CG_Node (Typ);\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n \n       return Result;\n    end Make_DT;"}, {"sha": "16e33e8ebb740be6d41a44dc7997c549bcf54b18", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1529,11 +1529,13 @@ package body Exp_Util is\n \n       Loc : constant Source_Ptr := Sloc (Typ);\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       DIC_Prag     : Node_Id;\n       DIC_Typ      : Entity_Id;\n       Dummy_1      : Entity_Id;\n       Dummy_2      : Entity_Id;\n-      Mode         : Ghost_Mode_Type;\n       Proc_Body    : Node_Id;\n       Proc_Body_Id : Entity_Id;\n       Proc_Decl    : Node_Id;\n@@ -1582,7 +1584,7 @@ package body Exp_Util is\n       --  The working type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the DIC procedure is properly marked as Ghost.\n \n-      Set_Ghost_Mode (Work_Typ, Mode);\n+      Set_Ghost_Mode (Work_Typ);\n \n       --  The working type must be either define a DIC pragma of its own or\n       --  inherit one from a parent type.\n@@ -1762,7 +1764,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Build_DIC_Procedure_Body;\n \n    -------------------------------------\n@@ -1776,9 +1778,11 @@ package body Exp_Util is\n    procedure Build_DIC_Procedure_Declaration (Typ : Entity_Id) is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       DIC_Prag  : Node_Id;\n       DIC_Typ   : Entity_Id;\n-      Mode      : Ghost_Mode_Type;\n       Proc_Decl : Node_Id;\n       Proc_Id   : Entity_Id;\n       Typ_Decl  : Node_Id;\n@@ -1835,7 +1839,7 @@ package body Exp_Util is\n       --  The working type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the DIC procedure is properly marked as Ghost.\n \n-      Set_Ghost_Mode (Work_Typ, Mode);\n+      Set_Ghost_Mode (Work_Typ);\n \n       --  The type must be either subject to a DIC pragma or inherit one from a\n       --  parent type.\n@@ -1959,7 +1963,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Build_DIC_Procedure_Declaration;\n \n    ------------------------------------\n@@ -2889,8 +2893,10 @@ package body Exp_Util is\n \n       --  Local variables\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Dummy        : Entity_Id;\n-      Mode         : Ghost_Mode_Type;\n       Priv_Item    : Node_Id;\n       Proc_Body    : Node_Id;\n       Proc_Body_Id : Entity_Id;\n@@ -2944,7 +2950,7 @@ package body Exp_Util is\n       --  The working type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the invariant procedure is properly marked as Ghost.\n \n-      Set_Ghost_Mode (Work_Typ, Mode);\n+      Set_Ghost_Mode (Work_Typ);\n \n       --  The type must either have invariants of its own, inherit class-wide\n       --  invariants from parent types or interfaces, or be an array or record\n@@ -3228,7 +3234,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Build_Invariant_Procedure_Body;\n \n    -------------------------------------------\n@@ -3245,7 +3251,9 @@ package body Exp_Util is\n    is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n-      Mode      : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Proc_Decl : Node_Id;\n       Proc_Id   : Entity_Id;\n       Proc_Nam  : Name_Id;\n@@ -3295,7 +3303,7 @@ package body Exp_Util is\n       --  The working type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the invariant procedure is properly marked as Ghost.\n \n-      Set_Ghost_Mode (Work_Typ, Mode);\n+      Set_Ghost_Mode (Work_Typ);\n \n       --  The type must either have invariants of its own, inherit class-wide\n       --  invariants from parent or interface types, or be an array or record\n@@ -3452,7 +3460,7 @@ package body Exp_Util is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Build_Invariant_Procedure_Declaration;\n \n    --------------------------\n@@ -9288,17 +9296,19 @@ package body Exp_Util is\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Call    : Node_Id;\n       Func_Id : Entity_Id;\n-      Mode    : Ghost_Mode_Type;\n \n    begin\n       pragma Assert (Present (Predicate_Function (Typ)));\n \n       --  The related type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the call is properly marked as Ghost.\n \n-      Set_Ghost_Mode (Typ, Mode);\n+      Set_Ghost_Mode (Typ);\n \n       --  Call special membership version if requested and available\n \n@@ -9315,7 +9325,8 @@ package body Exp_Util is\n           Name                   => New_Occurrence_Of (Func_Id, Loc),\n           Parameter_Associations => New_List (Relocate_Node (Expr)));\n \n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n+\n       return Call;\n    end Make_Predicate_Call;\n "}, {"sha": "259618d62e7f89e6e6314b1d287cc0914b7b3c57", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -82,7 +82,8 @@ package body Expander is\n    --  Ghost mode.\n \n    procedure Expand (N : Node_Id) is\n-      Mode : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    begin\n       --  If we were analyzing a default expression (or other spec expression)\n@@ -98,7 +99,7 @@ package body Expander is\n       --  Establish the Ghost mode of the context to ensure that any generated\n       --  nodes during expansion are marked as Ghost.\n \n-      Set_Ghost_Mode (N, Mode);\n+      Set_Ghost_Mode (N);\n \n       --  The GNATprove_Mode flag indicates that a light expansion for formal\n       --  verification should be used. This expansion is never done inside\n@@ -529,7 +530,7 @@ package body Expander is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Expand;\n \n    ---------------------------"}, {"sha": "890a6a7c9d0f0ab6b245c4ae404744b2f6f118c6", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -5107,7 +5107,8 @@ package body Freeze is\n \n       --  Local variables\n \n-      Mode : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    --  Start of processing for Freeze_Entity\n \n@@ -5116,7 +5117,7 @@ package body Freeze is\n       --  now to ensure that any nodes generated during freezing are properly\n       --  flagged as Ghost.\n \n-      Set_Ghost_Mode (E, Mode);\n+      Set_Ghost_Mode (E);\n \n       --  We are going to test for various reasons why this entity need not be\n       --  frozen here, but in the case of an Itype that's defined within a\n@@ -6723,7 +6724,8 @@ package body Freeze is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n+\n       return Result;\n    end Freeze_Entity;\n "}, {"sha": "0e65b7b21dbe6aa4457b3e2862ee05bf28fb4cab", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 8, "deletions": 51, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2014-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2014-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1099,17 +1099,10 @@ package body Ghost is\n    -- Mark_And_Set_Ghost_Assignment --\n    -----------------------------------\n \n-   procedure Mark_And_Set_Ghost_Assignment\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type)\n-   is\n+   procedure Mark_And_Set_Ghost_Assignment (N : Node_Id) is\n       Id : Entity_Id;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  An assignment statement becomes Ghost when its target denotes a Ghost\n       --  object. Install the Ghost mode of the target.\n \n@@ -1134,17 +1127,12 @@ package body Ghost is\n \n    procedure Mark_And_Set_Ghost_Body\n      (N       : Node_Id;\n-      Spec_Id : Entity_Id;\n-      Mode    : out Ghost_Mode_Type)\n+      Spec_Id : Entity_Id)\n    is\n       Body_Id : constant Entity_Id := Defining_Entity (N);\n       Policy  : Name_Id := No_Name;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  A body becomes Ghost when it is subject to aspect or pragma Ghost\n \n       if Is_Subject_To_Ghost (N) then\n@@ -1193,17 +1181,12 @@ package body Ghost is\n \n    procedure Mark_And_Set_Ghost_Completion\n      (N       : Node_Id;\n-      Prev_Id : Entity_Id;\n-      Mode    : out Ghost_Mode_Type)\n+      Prev_Id : Entity_Id)\n    is\n       Compl_Id : constant Entity_Id := Defining_Entity (N);\n       Policy   : Name_Id := No_Name;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  A completion elaborated in a Ghost region is automatically Ghost\n       --  (SPARK RM 6.9(2)).\n \n@@ -1243,18 +1226,11 @@ package body Ghost is\n    -- Mark_And_Set_Ghost_Declaration --\n    ------------------------------------\n \n-   procedure Mark_And_Set_Ghost_Declaration\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type)\n-   is\n+   procedure Mark_And_Set_Ghost_Declaration (N : Node_Id) is\n       Par_Id : Entity_Id;\n       Policy : Name_Id := No_Name;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  A declaration becomes Ghost when it is subject to aspect or pragma\n       --  Ghost.\n \n@@ -1309,16 +1285,11 @@ package body Ghost is\n \n    procedure Mark_And_Set_Ghost_Instantiation\n      (N      : Node_Id;\n-      Gen_Id : Entity_Id;\n-      Mode   : out Ghost_Mode_Type)\n+      Gen_Id : Entity_Id)\n    is\n       Policy : Name_Id := No_Name;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  An instantiation becomes Ghost when it is subject to pragma Ghost\n \n       if Is_Subject_To_Ghost (N) then\n@@ -1355,17 +1326,10 @@ package body Ghost is\n    -- Mark_And_Set_Ghost_Procedure_Call --\n    ---------------------------------------\n \n-   procedure Mark_And_Set_Ghost_Procedure_Call\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type)\n-   is\n+   procedure Mark_And_Set_Ghost_Procedure_Call (N : Node_Id) is\n       Id : Entity_Id;\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  A procedure call becomes Ghost when the procedure being invoked is\n       --  Ghost. Install the Ghost mode of the procedure.\n \n@@ -1695,10 +1659,7 @@ package body Ghost is\n    -- Set_Ghost_Mode --\n    --------------------\n \n-   procedure Set_Ghost_Mode\n-     (N    : Node_Or_Entity_Id;\n-      Mode : out Ghost_Mode_Type)\n-   is\n+   procedure Set_Ghost_Mode (N : Node_Or_Entity_Id) is\n       procedure Set_Ghost_Mode_From_Entity (Id : Entity_Id);\n       --  Install the Ghost mode of entity Id\n \n@@ -1724,10 +1685,6 @@ package body Ghost is\n    --  Start of processing for Set_Ghost_Mode\n \n    begin\n-      --  Save the previous Ghost mode in effect\n-\n-      Mode := Ghost_Mode;\n-\n       --  The Ghost mode of an assignment statement depends on the Ghost mode\n       --  of the target.\n "}, {"sha": "90983abcad43443c65798d8743d8728387e20f20", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2014-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2014-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -101,21 +101,17 @@ package Ghost is\n    procedure Lock;\n    --  Lock internal tables before calling backend\n \n-   procedure Mark_And_Set_Ghost_Assignment\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type);\n+   procedure Mark_And_Set_Ghost_Assignment (N : Node_Id);\n    --  Mark assignment statement N as Ghost when:\n    --\n    --    * The left hand side denotes a Ghost entity\n    --\n-   --  Install the Ghost mode of the assignment statement. Mode is the Ghost\n-   --  mode in effect prior to processing the assignment. This routine starts\n+   --  Install the Ghost mode of the assignment statement. This routine starts\n    --  a Ghost region and must be used in conjunction with Restore_Ghost_Mode.\n \n    procedure Mark_And_Set_Ghost_Body\n      (N       : Node_Id;\n-      Spec_Id : Entity_Id;\n-      Mode    : out Ghost_Mode_Type);\n+      Spec_Id : Entity_Id);\n    --  Mark package or subprogram body N as Ghost when:\n    --\n    --    * The body is subject to pragma Ghost\n@@ -125,28 +121,23 @@ package Ghost is\n    --\n    --    * The body appears within a Ghost region\n    --\n-   --  Install the Ghost mode of the body. Mode is the Ghost mode prior to\n-   --  processing the body. This routine starts a Ghost region and must be\n-   --  used in conjunction with Restore_Ghost_Mode.\n+   --  Install the Ghost mode of the body. This routine starts a Ghost region\n+   --  and must be used in conjunction with Restore_Ghost_Mode.\n \n    procedure Mark_And_Set_Ghost_Completion\n      (N       : Node_Id;\n-      Prev_Id : Entity_Id;\n-      Mode    : out Ghost_Mode_Type);\n+      Prev_Id : Entity_Id);\n    --  Mark completion N of a deferred constant or private type [extension]\n    --  Ghost when:\n    --\n    --    * The entity of the previous declaration denoted by Prev_Id is Ghost\n    --\n    --    * The completion appears within a Ghost region\n    --\n-   --  Install the Ghost mode of the completion. Mode is the Ghost mode prior\n-   --  to processing the completion. This routine starts a Ghost region and\n-   --  must be used in conjunction with Restore_Ghost_Mode.\n+   --  Install the Ghost mode of the completion. This routine starts a Ghost\n+   --  region and must be used in conjunction with Restore_Ghost_Mode.\n \n-   procedure Mark_And_Set_Ghost_Declaration\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type);\n+   procedure Mark_And_Set_Ghost_Declaration (N : Node_Id);\n    --  Mark declaration N as Ghost when:\n    --\n    --    * The declaration is subject to pragma Ghost\n@@ -156,14 +147,12 @@ package Ghost is\n    --\n    --    * The declaration appears within a Ghost region\n    --\n-   --  Install the Ghost mode of the declaration. Mode is the Ghost mode prior\n-   --  to processing the declaration. This routine starts a Ghost region and\n-   --  must be used in conjunction with Restore_Ghost_Mode.\n+   --  Install the Ghost mode of the declaration. This routine starts a Ghost\n+   --  region and must be used in conjunction with Restore_Ghost_Mode.\n \n    procedure Mark_And_Set_Ghost_Instantiation\n      (N      : Node_Id;\n-      Gen_Id : Entity_Id;\n-      Mode   : out Ghost_Mode_Type);\n+      Gen_Id : Entity_Id);\n    --  Mark instantiation N as Ghost when:\n    --\n    --    * The instantiation is subject to pragma Ghost\n@@ -172,20 +161,16 @@ package Ghost is\n    --\n    --    * The instantiation appears within a Ghost region\n    --\n-   --  Install the Ghost mode of the instantiation. Mode is the Ghost mode\n-   --  prior to processing the instantiation. This routine starts a Ghost\n+   --  Install the Ghost mode of the instantiation. This routine starts a Ghost\n    --  region and must be used in conjunction with Restore_Ghost_Mode.\n \n-   procedure Mark_And_Set_Ghost_Procedure_Call\n-     (N    : Node_Id;\n-      Mode : out Ghost_Mode_Type);\n+   procedure Mark_And_Set_Ghost_Procedure_Call (N : Node_Id);\n    --  Mark procedure call N as Ghost when:\n    --\n    --    * The procedure being invoked is a Ghost entity\n    --\n-   --  Install the Ghost mode of the procedure call. Mode is the Ghost mode\n-   --  prior to processing the procedure call. This routine starts a Ghost\n-   --  region and must be used in conjunction with Restore_Ghost_Mode.\n+   --  Install the Ghost mode of the procedure call. This routine starts a\n+   --  Ghost region and must be used in conjunction with Restore_Ghost_Mode.\n \n    procedure Mark_Ghost_Clause (N : Node_Id);\n    --  Mark use package, use type, or with clause N as Ghost when:\n@@ -220,12 +205,9 @@ package Ghost is\n    --  region denoted by Mode. This routine must be used in conjunction\n    --  with Mark_And_Set_xxx routines as well as Set_Ghost_Mode.\n \n-   procedure Set_Ghost_Mode\n-     (N    : Node_Or_Entity_Id;\n-      Mode : out Ghost_Mode_Type);\n-   --  Install the Ghost mode of arbitrary node N. Mode is the Ghost mode prior\n-   --  to processing the node. This routine starts a Ghost region and must be\n-   --  used in conjunction with Restore_Ghost_Mode.\n+   procedure Set_Ghost_Mode (N : Node_Or_Entity_Id);\n+   --  Install the Ghost mode of arbitrary node N. This routine starts a Ghost\n+   --  region and must be used in conjunction with Restore_Ghost_Mode.\n \n    procedure Set_Is_Ghost_Entity (Id : Entity_Id);\n    --  Set the relevant Ghost attributes of entity Id depending on the current"}, {"sha": "dc8deb571f58c135ef913b52f2a151e0b3cf06cc", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -227,8 +227,7 @@ package body Lib.Load is\n         Unit_File_Name    => Get_File_Name (Spec_Name, Subunit => False),\n         Unit_Name         => Spec_Name,\n         Version           => 0,\n-        OA_Setting        => 'O',\n-        SPARK_Mode_Pragma => Empty);\n+        OA_Setting        => 'O');\n \n       Set_Comes_From_Source_Default (Save_CS);\n       Set_Error_Posted (Cunit_Entity);\n@@ -334,8 +333,7 @@ package body Lib.Load is\n            Unit_File_Name    => Fname,\n            Unit_Name         => No_Unit_Name,\n            Version           => Version,\n-           OA_Setting        => 'O',\n-           SPARK_Mode_Pragma => Empty);\n+           OA_Setting        => 'O');\n       end if;\n    end Load_Main_Source;\n \n@@ -700,8 +698,7 @@ package body Lib.Load is\n               Unit_File_Name    => Fname,\n               Unit_Name         => Uname_Actual,\n               Version           => Source_Checksum (Src_Ind),\n-              OA_Setting        => 'O',\n-              SPARK_Mode_Pragma => Empty);\n+              OA_Setting        => 'O');\n \n             --  Parse the new unit\n "}, {"sha": "f69e4ac16ec49ce132a610a8527c8e55038d0870", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,8 +95,7 @@ package body Lib.Writ is\n          Serial_Number     => 0,\n          Version           => 0,\n          Error_Location    => No_Location,\n-         OA_Setting        => 'O',\n-         SPARK_Mode_Pragma => Empty);\n+         OA_Setting        => 'O');\n    end Add_Preprocessing_Dependency;\n \n    ------------------------------\n@@ -153,8 +152,7 @@ package body Lib.Writ is\n         Serial_Number     => 0,\n         Version           => 0,\n         Error_Location    => No_Location,\n-        OA_Setting        => 'O',\n-        SPARK_Mode_Pragma => Empty);\n+        OA_Setting        => 'O');\n \n       --  Parse system.ads so that the checksum is set right. Style checks are\n       --  not applied. The Ekind is set to ensure that this reference is always"}, {"sha": "54480e485bf66337cf141c33e01bc91a3477edde", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -811,7 +811,6 @@ private\n       Filler            : Boolean;\n       Loading           : Boolean;\n       OA_Setting        : Character;\n-      SPARK_Mode_Pragma : Node_Id;\n    end record;\n \n    --  The following representation clause ensures that the above record\n@@ -841,10 +840,9 @@ private\n       Filler            at 61 range 0 ..  7;\n       OA_Setting        at 62 range 0 ..  7;\n       Loading           at 63 range 0 ..  7;\n-      SPARK_Mode_Pragma at 64 range 0 .. 31;\n    end record;\n \n-   for Unit_Record'Size use 68 * 8;\n+   for Unit_Record'Size use 64 * 8;\n    --  This ensures that we did not leave out any fields\n \n    package Units is new Table.Table ("}, {"sha": "0c8a3ee43c0287ebc5c925f42e8b3e7c306b6376", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -864,6 +864,10 @@ package body Rtsfind is\n    -- Load_RTU --\n    --------------\n \n+   --  WARNING: This routine manages Ghost and SPARK regions. Return statements\n+   --  must be replaced by gotos which jump to the end of the routine in order\n+   --  to restore the Ghost and SPARK modes.\n+\n    procedure Load_RTU\n      (U_Id        : RTU_Id;\n       Id          : RE_Id   := RE_Null;\n@@ -926,7 +930,10 @@ package body Rtsfind is\n \n       --  Local variables\n \n-      Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save Ghost and SPARK mode-related data to restore on exit\n \n    --  Start of processing for Load_RTU\n \n@@ -940,6 +947,7 @@ package body Rtsfind is\n       --  Provide a clean environment for the unit\n \n       Install_Ghost_Mode (None);\n+      Install_SPARK_Mode (None, Empty);\n \n       --  Note if secondary stack is used\n \n@@ -1042,7 +1050,8 @@ package body Rtsfind is\n          Set_Is_Potentially_Use_Visible (U.Entity, True);\n       end if;\n \n-      Restore_Ghost_Mode (Save_Ghost_Mode);\n+      Restore_Ghost_Mode (Save_GM);\n+      Restore_SPARK_Mode (Save_SM, Save_SMP);\n    end Load_RTU;\n \n    --------------------"}, {"sha": "eb6c8c411647d5e8d7f2f02a01c76ae25c3e3155", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -102,8 +102,8 @@ package body Sem is\n    --  Ghost mode.\n \n    procedure Analyze (N : Node_Id) is\n-      Mode     : Ghost_Mode_Type;\n-      Mode_Set : Boolean := False;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    begin\n       Debug_A_Entry (\"analyzing  \", N);\n@@ -120,8 +120,7 @@ package body Sem is\n       --  marked as Ghost.\n \n       if Is_Declaration (N) then\n-         Mark_And_Set_Ghost_Declaration (N, Mode);\n-         Mode_Set := True;\n+         Mark_And_Set_Ghost_Declaration (N);\n       end if;\n \n       --  Otherwise processing depends on the node kind\n@@ -762,9 +761,7 @@ package body Sem is\n          Expand_SPARK_Potential_Renaming (N);\n       end if;\n \n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze;\n \n    --  Version with check(s) suppressed"}, {"sha": "c4ae58a20307eae94052663c124142d0a13df01e", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2058,6 +2058,10 @@ package body Sem_Ch10 is\n    --  context before analyzing the proper body itself. On exit, we remove only\n    --  the explicit context of the subunit.\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Analyze_Subunit (N : Node_Id) is\n       Lib_Unit : constant Node_Id   := Library_Unit (N);\n       Par_Unit : constant Entity_Id := Current_Scope;\n@@ -2290,6 +2294,12 @@ package body Sem_Ch10 is\n          Pop_Scope;\n       end Remove_Scope;\n \n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK mode-related data to restore on exit. Removing\n+      --  eclosing scopes and contexts to provide a clean environment for the\n+      --  context of the subunit will eliminate any previously set SPARK_Mode.\n+\n    --  Start of processing for Analyze_Subunit\n \n    begin\n@@ -2386,6 +2396,12 @@ package body Sem_Ch10 is\n       end if;\n \n       Generate_Parent_References (Unit (N), Par_Unit);\n+\n+      --  Reinstall the SPARK_Mode which was in effect prior to any scope and\n+      --  context manipulations.\n+\n+      Install_SPARK_Mode (Saved_SM, Saved_SMP);\n+\n       Analyze (Proper_Body (Unit (N)));\n       Remove_Context (N);\n "}, {"sha": "e5981370c5056eb9b0d41df3107f8ad12acf980f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 139, "deletions": 145, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -3598,49 +3598,17 @@ package body Sem_Ch12 is\n    -- Analyze_Package_Instantiation --\n    -----------------------------------\n \n-   --  WARNING: This routine manages Ghost regions. Return statements must be\n-   --  replaced by gotos which jump to the end of the routine and restore the\n-   --  Ghost mode.\n+   --  WARNING: This routine manages Ghost and SPARK regions. Return statements\n+   --  must be replaced by gotos which jump to the end of the routine in order\n+   --  to restore the Ghost and SPARK modes.\n \n    procedure Analyze_Package_Instantiation (N : Node_Id) is\n-      Loc    : constant Source_Ptr := Sloc (N);\n-      Gen_Id : constant Node_Id    := Name (N);\n-\n-      Act_Decl      : Node_Id;\n-      Act_Decl_Name : Node_Id;\n-      Act_Decl_Id   : Entity_Id;\n-      Act_Spec      : Node_Id;\n-      Act_Tree      : Node_Id;\n-\n-      Gen_Decl : Node_Id;\n-      Gen_Spec : Node_Id;\n-      Gen_Unit : Entity_Id;\n-\n-      Is_Actual_Pack : constant Boolean :=\n-                         Is_Internal (Defining_Entity (N));\n-\n-      Env_Installed     : Boolean := False;\n-      Parent_Installed  : Boolean := False;\n-      Renaming_List     : List_Id;\n-      Unit_Renaming     : Node_Id;\n-      Needs_Body        : Boolean;\n-      Inline_Now        : Boolean := False;\n       Has_Inline_Always : Boolean := False;\n \n-      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n-      --  Save flag Ignore_SPARK_Mode_Pragmas_In_Instance for restore on exit\n-\n-      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n-      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n-      --  Save the SPARK_Mode-related data for restore on exit\n-\n-      Save_Style_Check : constant Boolean := Style_Check;\n-      --  Save style check mode for restore on exit\n-\n       procedure Delay_Descriptors (E : Entity_Id);\n       --  Delay generation of subprogram descriptors for given entity\n \n-      function Might_Inline_Subp return Boolean;\n+      function Might_Inline_Subp (Gen_Unit : Entity_Id) return Boolean;\n       --  If inlining is active and the generic contains inlined subprograms,\n       --  we instantiate the body. This may cause superfluous instantiations,\n       --  but it is simpler than detecting the need for the body at the point\n@@ -3662,7 +3630,7 @@ package body Sem_Ch12 is\n       -- Might_Inline_Subp --\n       -----------------------\n \n-      function Might_Inline_Subp return Boolean is\n+      function Might_Inline_Subp (Gen_Unit : Entity_Id) return Boolean is\n          E : Entity_Id;\n \n       begin\n@@ -3691,8 +3659,35 @@ package body Sem_Ch12 is\n \n       --  Local declarations\n \n-      Mode     : Ghost_Mode_Type;\n-      Mode_Set : Boolean := False;\n+      Gen_Id         : constant Node_Id    := Name (N);\n+      Is_Actual_Pack : constant Boolean    :=\n+                         Is_Internal (Defining_Entity (N));\n+      Loc            : constant Source_Ptr := Sloc (N);\n+\n+      Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_ISMP : constant Boolean         :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP  : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n+\n+      Saved_Style_Check : constant Boolean := Style_Check;\n+      --  Save style check mode for restore on exit\n+\n+      Act_Decl         : Node_Id;\n+      Act_Decl_Name    : Node_Id;\n+      Act_Decl_Id      : Entity_Id;\n+      Act_Spec         : Node_Id;\n+      Act_Tree         : Node_Id;\n+      Env_Installed    : Boolean := False;\n+      Gen_Decl         : Node_Id;\n+      Gen_Spec         : Node_Id;\n+      Gen_Unit         : Entity_Id;\n+      Inline_Now       : Boolean := False;\n+      Needs_Body       : Boolean;\n+      Parent_Installed : Boolean := False;\n+      Renaming_List    : List_Id;\n+      Unit_Renaming    : Node_Id;\n \n       Vis_Prims_List : Elist_Id := No_Elist;\n       --  List of primitives made temporarily visible in the instantiation\n@@ -3771,8 +3766,7 @@ package body Sem_Ch12 is\n       --  any nodes generated during analysis and expansion are marked as\n       --  Ghost.\n \n-      Mark_And_Set_Ghost_Instantiation (N, Gen_Unit, Mode);\n-      Mode_Set := True;\n+      Mark_And_Set_Ghost_Instantiation (N, Gen_Unit);\n \n       --  Verify that it is the name of a generic package\n \n@@ -4049,7 +4043,7 @@ package body Sem_Ch12 is\n             if Expander_Active\n               and then (not Is_Child_Unit (Gen_Unit)\n                          or else not Is_Generic_Unit (Scope (Gen_Unit)))\n-              and then Might_Inline_Subp\n+              and then Might_Inline_Subp (Gen_Unit)\n               and then not Is_Actual_Pack\n             then\n                if not Back_End_Inlining\n@@ -4098,7 +4092,8 @@ package body Sem_Ch12 is\n               (Unit_Requires_Body (Gen_Unit)\n                 or else Enclosing_Body_Present\n                 or else Present (Corresponding_Body (Gen_Decl)))\n-               and then (Is_In_Main_Unit (N) or else Might_Inline_Subp)\n+               and then (Is_In_Main_Unit (N)\n+                          or else Might_Inline_Subp (Gen_Unit))\n                and then not Is_Actual_Pack\n                and then not Inline_Now\n                and then (Operating_Mode = Generate_Code\n@@ -4466,14 +4461,10 @@ package body Sem_Ch12 is\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n       end if;\n \n-      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-      SPARK_Mode        := Save_SM;\n-      SPARK_Mode_Pragma := Save_SMP;\n-      Style_Check       := Save_Style_Check;\n-\n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Style_Check := Saved_Style_Check;\n \n    exception\n       when Instantiation_Error =>\n@@ -4485,20 +4476,20 @@ package body Sem_Ch12 is\n             Restore_Env;\n          end if;\n \n-         Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-         SPARK_Mode        := Save_SM;\n-         SPARK_Mode_Pragma := Save_SMP;\n-         Style_Check       := Save_Style_Check;\n-\n-         if Mode_Set then\n-            Restore_Ghost_Mode (Mode);\n-         end if;\n+         Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+         Restore_Ghost_Mode (Saved_GM);\n+         Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+         Style_Check := Saved_Style_Check;\n    end Analyze_Package_Instantiation;\n \n    --------------------------\n    -- Inline_Instance_Body --\n    --------------------------\n \n+   --  WARNING: This routine manages SPARK regions. Return statements must be\n+   --  replaced by gotos which jump to the end of the routine and restore the\n+   --  SPARK mode.\n+\n    procedure Inline_Instance_Body\n      (N        : Node_Id;\n       Gen_Unit : Entity_Id;\n@@ -4509,26 +4500,27 @@ package body Sem_Ch12 is\n       Gen_Comp  : constant Entity_Id :=\n                     Cunit_Entity (Get_Source_Unit (Gen_Unit));\n \n-      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n-      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n-      --  Save all SPARK_Mode-related attributes as removing enclosing scopes\n-      --  to provide a clean environment for analysis of the inlined body will\n-      --  eliminate any previously set SPARK_Mode.\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK mode-related data to restore on exit. Removing\n+      --  enclosing scopes to provide a clean environment for analysis of\n+      --  the inlined body will eliminate any previously set SPARK_Mode.\n \n       Scope_Stack_Depth : constant Pos :=\n                             Scope_Stack.Last - Scope_Stack.First + 1;\n \n-      Use_Clauses  : array (1 .. Scope_Stack_Depth) of Node_Id;\n-      Instances    : array (1 .. Scope_Stack_Depth) of Entity_Id;\n       Inner_Scopes : array (1 .. Scope_Stack_Depth) of Entity_Id;\n-      Curr_Scope   : Entity_Id := Empty;\n-      List         : Elist_Id;\n-      Num_Inner    : Nat := 0;\n-      Num_Scopes   : Nat := 0;\n-      N_Instances  : Nat := 0;\n-      Removed      : Boolean := False;\n-      S            : Entity_Id;\n-      Vis          : Boolean;\n+      Instances    : array (1 .. Scope_Stack_Depth) of Entity_Id;\n+      Use_Clauses  : array (1 .. Scope_Stack_Depth) of Node_Id;\n+\n+      Curr_Scope  : Entity_Id := Empty;\n+      List        : Elist_Id;\n+      N_Instances : Nat := 0;\n+      Num_Inner   : Nat := 0;\n+      Num_Scopes  : Nat := 0;\n+      Removed     : Boolean := False;\n+      S           : Entity_Id;\n+      Vis         : Boolean;\n \n    begin\n       --  Case of generic unit defined in another unit. We must remove the\n@@ -4672,8 +4664,8 @@ package body Sem_Ch12 is\n                Version                  => Ada_Version,\n                Version_Pragma           => Ada_Version_Pragma,\n                Warnings                 => Save_Warnings,\n-               SPARK_Mode               => Save_SM,\n-               SPARK_Mode_Pragma        => Save_SMP)),\n+               SPARK_Mode               => Saved_SM,\n+               SPARK_Mode_Pragma        => Saved_SMP)),\n             Inlined_Body => True);\n \n          Pop_Scope;\n@@ -4812,7 +4804,6 @@ package body Sem_Ch12 is\n      (N    : Node_Id;\n       Subp : Entity_Id) return Boolean\n    is\n-\n       function Is_Inlined_Or_Child_Of_Inlined (E : Entity_Id) return Boolean;\n       --  Return True if E is an inlined subprogram, an inlined renaming or a\n       --  subprogram nested in an inlined subprogram. The inlining machinery\n@@ -4882,9 +4873,9 @@ package body Sem_Ch12 is\n    -- Analyze_Subprogram_Instantiation --\n    --------------------------------------\n \n-   --  WARNING: This routine manages Ghost regions. Return statements must be\n-   --  replaced by gotos which jump to the end of the routine and restore the\n-   --  Ghost mode.\n+   --  WARNING: This routine manages Ghost and SPARK regions. Return statements\n+   --  must be replaced by gotos which jump to the end of the routine in order\n+   --  to restore the Ghost and SPARK modes.\n \n    procedure Analyze_Subprogram_Instantiation\n      (N : Node_Id;\n@@ -5130,15 +5121,12 @@ package body Sem_Ch12 is\n \n       --  Local variables\n \n-      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n-      --  Save flag Ignore_SPARK_Mode_Pragmas_In_Instance for restore on exit\n-\n-      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n-      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n-      --  Save the SPARK_Mode-related data for restore on exit\n-\n-      Mode     : Ghost_Mode_Type;\n-      Mode_Set : Boolean := False;\n+      Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_ISMP : constant Boolean         :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP  : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n \n       Vis_Prims_List : Elist_Id := No_Elist;\n       --  List of primitives made temporarily visible in the instantiation\n@@ -5180,8 +5168,7 @@ package body Sem_Ch12 is\n       --  that any nodes generated during analysis and expansion are marked as\n       --  Ghost.\n \n-      Mark_And_Set_Ghost_Instantiation (N, Gen_Unit, Mode);\n-      Mode_Set := True;\n+      Mark_And_Set_Ghost_Instantiation (N, Gen_Unit);\n \n       Generate_Reference (Gen_Unit, Gen_Id);\n \n@@ -5446,13 +5433,9 @@ package body Sem_Ch12 is\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n       end if;\n \n-      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-      SPARK_Mode        := Save_SM;\n-      SPARK_Mode_Pragma := Save_SMP;\n-\n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n \n    exception\n       when Instantiation_Error =>\n@@ -5464,13 +5447,9 @@ package body Sem_Ch12 is\n             Restore_Env;\n          end if;\n \n-         Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-         SPARK_Mode        := Save_SM;\n-         SPARK_Mode_Pragma := Save_SMP;\n-\n-         if Mode_Set then\n-            Restore_Ghost_Mode (Mode);\n-         end if;\n+         Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+         Restore_Ghost_Mode (Saved_GM);\n+         Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------\n@@ -10847,9 +10826,9 @@ package body Sem_Ch12 is\n    -- Instantiate_Package_Body --\n    ------------------------------\n \n-   --  WARNING: This routine manages Ghost regions. Return statements must be\n-   --  replaced by gotos which jump to the end of the routine and restore the\n-   --  Ghost mode.\n+   --  WARNING: This routine manages Ghost and SPARK regions. Return statements\n+   --  must be replaced by gotos which jump to the end of the routine in order\n+   --  to restore the Ghost and SPARK modes.\n \n    procedure Instantiate_Package_Body\n      (Body_Info     : Pending_Body_Info;\n@@ -10865,9 +10844,9 @@ package body Sem_Ch12 is\n       Gen_Decl    : constant Node_Id    := Unit_Declaration_Node (Gen_Unit);\n       Loc         : constant Source_Ptr := Sloc (Inst_Node);\n \n-      Save_ISMP        : constant Boolean :=\n+      Saved_ISMP        : constant Boolean :=\n                            Ignore_SPARK_Mode_Pragmas_In_Instance;\n-      Save_Style_Check : constant Boolean := Style_Check;\n+      Saved_Style_Check : constant Boolean := Style_Check;\n \n       procedure Check_Initialized_Types;\n       --  In a generic package body, an entity of a generic private type may\n@@ -10939,15 +10918,18 @@ package body Sem_Ch12 is\n \n       --  Local variables\n \n-      Act_Body      : Node_Id;\n-      Act_Body_Id   : Entity_Id;\n-      Act_Body_Name : Node_Id;\n-      Gen_Body      : Node_Id;\n-      Gen_Body_Id   : Node_Id;\n-      Mode          : Ghost_Mode_Type;\n-      Par_Ent       : Entity_Id := Empty;\n-      Par_Vis       : Boolean   := False;\n-\n+      Saved_GM  : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n+\n+      Act_Body         : Node_Id;\n+      Act_Body_Id      : Entity_Id;\n+      Act_Body_Name    : Node_Id;\n+      Gen_Body         : Node_Id;\n+      Gen_Body_Id      : Node_Id;\n+      Par_Ent          : Entity_Id := Empty;\n+      Par_Vis          : Boolean   := False;\n       Parent_Installed : Boolean := False;\n \n       Vis_Prims_List : Elist_Id := No_Elist;\n@@ -10970,7 +10952,7 @@ package body Sem_Ch12 is\n       --  the mode now to ensure that any nodes generated during instantiation\n       --  are properly marked as Ghost.\n \n-      Set_Ghost_Mode (Act_Decl_Id, Mode);\n+      Set_Ghost_Mode (Act_Decl_Id);\n \n       Expander_Mode_Save_And_Set (Body_Info.Expander_Status);\n \n@@ -10984,8 +10966,10 @@ package body Sem_Ch12 is\n       Opt.Ada_Version          := Body_Info.Version;\n       Opt.Ada_Version_Pragma   := Body_Info.Version_Pragma;\n       Restore_Warnings (Body_Info.Warnings);\n-      Opt.SPARK_Mode           := Body_Info.SPARK_Mode;\n-      Opt.SPARK_Mode_Pragma    := Body_Info.SPARK_Mode_Pragma;\n+\n+      --  Install the SPARK mode which applies to the package body\n+\n+      Install_SPARK_Mode (Body_Info.SPARK_Mode, Body_Info.SPARK_Mode_Pragma);\n \n       if No (Gen_Body_Id) then\n \n@@ -11264,19 +11248,19 @@ package body Sem_Ch12 is\n       Expander_Mode_Restore;\n \n    <<Leave>>\n-      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-      Style_Check := Save_Style_Check;\n-\n-      Restore_Ghost_Mode (Mode);\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n+      Style_Check := Saved_Style_Check;\n    end Instantiate_Package_Body;\n \n    ---------------------------------\n    -- Instantiate_Subprogram_Body --\n    ---------------------------------\n \n-   --  WARNING: This routine manages Ghost regions. Return statements must be\n-   --  replaced by gotos which jump to the end of the routine and restore the\n-   --  Ghost mode.\n+   --  WARNING: This routine manages Ghost and SPARK regions. Return statements\n+   --  must be replaced by gotos which jump to the end of the routine in order\n+   --  to restore the Ghost and SPARK modes.\n \n    procedure Instantiate_Subprogram_Body\n      (Body_Info     : Pending_Body_Info;\n@@ -11292,16 +11276,20 @@ package body Sem_Ch12 is\n       Pack_Id     : constant Entity_Id  :=\n                       Defining_Unit_Name (Parent (Act_Decl));\n \n-      Saved_ISMP        : constant Boolean :=\n-                            Ignore_SPARK_Mode_Pragmas_In_Instance;\n-      Saved_Style_Check : constant Boolean := Style_Check;\n+      Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_ISMP : constant Boolean         :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Saved_SM   : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP  : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n+\n+      Saved_Style_Check : constant Boolean        := Style_Check;\n       Saved_Warnings    : constant Warning_Record := Save_Warnings;\n \n       Act_Body    : Node_Id;\n       Act_Body_Id : Entity_Id;\n       Gen_Body    : Node_Id;\n       Gen_Body_Id : Node_Id;\n-      Mode        : Ghost_Mode_Type;\n       Pack_Body   : Node_Id;\n       Par_Ent     : Entity_Id := Empty;\n       Par_Vis     : Boolean   := False;\n@@ -11324,7 +11312,7 @@ package body Sem_Ch12 is\n       --  the mode now to ensure that any nodes generated during instantiation\n       --  are properly marked as Ghost.\n \n-      Set_Ghost_Mode (Act_Decl_Id, Mode);\n+      Set_Ghost_Mode (Act_Decl_Id);\n \n       Expander_Mode_Save_And_Set (Body_Info.Expander_Status);\n \n@@ -11338,8 +11326,10 @@ package body Sem_Ch12 is\n       Opt.Ada_Version          := Body_Info.Version;\n       Opt.Ada_Version_Pragma   := Body_Info.Version_Pragma;\n       Restore_Warnings (Body_Info.Warnings);\n-      Opt.SPARK_Mode           := Body_Info.SPARK_Mode;\n-      Opt.SPARK_Mode_Pragma    := Body_Info.SPARK_Mode_Pragma;\n+\n+      --  Install the SPARK mode which applies to the subprogram body\n+\n+      Install_SPARK_Mode (Body_Info.SPARK_Mode, Body_Info.SPARK_Mode_Pragma);\n \n       if No (Gen_Body_Id) then\n \n@@ -11575,9 +11565,9 @@ package body Sem_Ch12 is\n \n    <<Leave>>\n       Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n+      Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n       Style_Check := Saved_Style_Check;\n-\n-      Restore_Ghost_Mode (Mode);\n    end Instantiate_Subprogram_Body;\n \n    ----------------------\n@@ -15413,13 +15403,18 @@ package body Sem_Ch12 is\n    -- Set_Instance_Env --\n    ----------------------\n \n+   --  WARNING: This routine manages SPARK regions\n+\n    procedure Set_Instance_Env\n      (Gen_Unit : Entity_Id;\n       Act_Unit : Entity_Id)\n    is\n-      Assertion_Status       : constant Boolean := Assertions_Enabled;\n-      Save_SPARK_Mode        : constant SPARK_Mode_Type := SPARK_Mode;\n-      Save_SPARK_Mode_Pragma : constant Node_Id := SPARK_Mode_Pragma;\n+      Saved_AE  : constant Boolean         := Assertions_Enabled;\n+      Saved_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Saved_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK mode-related data because utilizing the configuration\n+      --  values of pragmas and switches will eliminate any previously set\n+      --  SPARK_Mode.\n \n    begin\n       --  Regardless of the current mode, predefined units are analyzed in the\n@@ -15440,14 +15435,13 @@ package body Sem_Ch12 is\n          --  as is already the case for some numeric libraries.\n \n          if Ada_Version >= Ada_2012 then\n-            Assertions_Enabled := Assertion_Status;\n+            Assertions_Enabled := Saved_AE;\n          end if;\n \n-         --  SPARK_Mode for an instance is the one applicable at the point of\n+         --  Reinstall the SPARK_Mode which was in effect at the point of\n          --  instantiation.\n \n-         SPARK_Mode := Save_SPARK_Mode;\n-         SPARK_Mode_Pragma := Save_SPARK_Mode_Pragma;\n+         Install_SPARK_Mode (Saved_SM, Saved_SMP);\n       end if;\n \n       Current_Instantiated_Parent :="}, {"sha": "833770624e87000c93757b2247d9bf7061045ca0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -8566,7 +8566,8 @@ package body Sem_Ch13 is\n \n       --  Local variables\n \n-      Mode : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    --  Start of processing for Build_Predicate_Functions\n \n@@ -8583,7 +8584,7 @@ package body Sem_Ch13 is\n       --  The related type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the predicate functions are properly marked as Ghost.\n \n-      Set_Ghost_Mode (Typ, Mode);\n+      Set_Ghost_Mode (Typ);\n \n       --  Prepare to construct predicate expression\n \n@@ -8937,7 +8938,7 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Build_Predicate_Functions;\n \n    ------------------------------------------\n@@ -8953,16 +8954,18 @@ package body Sem_Ch13 is\n    is\n       Loc : constant Source_Ptr := Sloc (Typ);\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Func_Decl : Node_Id;\n       Func_Id   : Entity_Id;\n-      Mode      : Ghost_Mode_Type;\n       Spec      : Node_Id;\n \n    begin\n       --  The related type may be subject to pragma Ghost. Set the mode now to\n       --  ensure that the predicate functions are properly marked as Ghost.\n \n-      Set_Ghost_Mode (Typ, Mode);\n+      Set_Ghost_Mode (Typ);\n \n       Func_Id :=\n         Make_Defining_Identifier (Loc,\n@@ -8996,7 +8999,7 @@ package body Sem_Ch13 is\n       Insert_After (Parent (Typ), Func_Decl);\n       Analyze (Func_Decl);\n \n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n \n       return Func_Decl;\n    end Build_Predicate_Function_Declaration;"}, {"sha": "5379a856bd8780c1e732b051ed4f9d19e3d5f2d1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3688,8 +3688,9 @@ package body Sem_Ch3 is\n \n       --  Local variables\n \n-      Mode       : Ghost_Mode_Type;\n-      Mode_Set   : Boolean := False;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Related_Id : Entity_Id;\n \n    --  Start of processing for Analyze_Object_Declaration\n@@ -3760,8 +3761,7 @@ package body Sem_Ch3 is\n          --  The object declaration is Ghost when it completes a deferred Ghost\n          --  constant.\n \n-         Mark_And_Set_Ghost_Completion (N, Prev_Entity, Mode);\n-         Mode_Set := True;\n+         Mark_And_Set_Ghost_Completion (N, Prev_Entity);\n \n          Constant_Redeclaration (Id, N, T);\n \n@@ -4700,9 +4700,7 @@ package body Sem_Ch3 is\n          Check_No_Hidden_State (Id);\n       end if;\n \n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Object_Declaration;\n \n    ---------------------------\n@@ -19858,15 +19856,16 @@ package body Sem_Ch3 is\n \n       --  Local variables\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+\n       Full_Indic  : Node_Id;\n       Full_Parent : Entity_Id;\n-      Mode        : Ghost_Mode_Type;\n       Priv_Parent : Entity_Id;\n \n    --  Start of processing for Process_Full_View\n \n    begin\n-      Mark_And_Set_Ghost_Completion (N, Priv_T, Mode);\n+      Mark_And_Set_Ghost_Completion (N, Priv_T);\n \n       --  First some sanity checks that must be done after semantic\n       --  decoration of the full view and thus cannot be placed with other\n@@ -20519,7 +20518,7 @@ package body Sem_Ch3 is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Process_Full_View;\n \n    -----------------------------------"}, {"sha": "27c3a530915781aec7250721c62b9208c2b12f85", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -284,7 +284,8 @@ package body Sem_Ch5 is\n \n       --  Local variables\n \n-      Mode : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    --  Start of processing for Analyze_Assignment\n \n@@ -310,7 +311,7 @@ package body Sem_Ch5 is\n          Current_Assignment := Empty;\n       end if;\n \n-      Mark_And_Set_Ghost_Assignment (N, Mode);\n+      Mark_And_Set_Ghost_Assignment (N);\n       Analyze (Rhs);\n \n       --  Ensure that we never do an assignment on a variable marked as\n@@ -939,7 +940,7 @@ package body Sem_Ch5 is\n       Analyze_Dimension (N);\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n \n       --  If the right-hand side contains target names, expansion has been\n       --  disabled to prevent expansion that might move target names out of"}, {"sha": "300f6def70c87b7d29d86feeb4d3617749ec3b89", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1553,9 +1553,12 @@ package body Sem_Ch6 is\n       Actuals : constant List_Id    := Parameter_Associations (N);\n       Loc     : constant Source_Ptr := Sloc (N);\n       P       : constant Node_Id    := Name (N);\n-      Actual  : Node_Id;\n-      Mode    : Ghost_Mode_Type;\n-      New_N   : Node_Id;\n+\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n+      Actual : Node_Id;\n+      New_N  : Node_Id;\n \n    --  Start of processing for Analyze_Procedure_Call\n \n@@ -1598,7 +1601,7 @@ package body Sem_Ch6 is\n       --  Set the mode now to ensure that any nodes generated during analysis\n       --  and expansion are properly marked as Ghost.\n \n-      Mark_And_Set_Ghost_Procedure_Call (N, Mode);\n+      Mark_And_Set_Ghost_Procedure_Call (N);\n \n       --  Otherwise analyze the parameters\n \n@@ -1793,7 +1796,7 @@ package body Sem_Ch6 is\n       end if;\n \n    <<Leave>>\n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Procedure_Call;\n \n    ------------------------------\n@@ -3314,9 +3317,10 @@ package body Sem_Ch6 is\n \n       --  Local variables\n \n-      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n-      Mode      : Ghost_Mode_Type;\n-      Mode_Set  : Boolean := False;\n+      Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_ISMP : constant Boolean         :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n \n    --  Start of processing for Analyze_Subprogram_Body_Helper\n \n@@ -3368,8 +3372,7 @@ package body Sem_Ch6 is\n             --  the mode now to ensure that any nodes generated during analysis\n             --  and expansion are properly marked as Ghost.\n \n-            Mark_And_Set_Ghost_Body (N, Spec_Id, Mode);\n-            Mode_Set := True;\n+            Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n             Set_Is_Compilation_Unit (Body_Id, Is_Compilation_Unit (Spec_Id));\n             Set_Is_Child_Unit       (Body_Id, Is_Child_Unit       (Spec_Id));\n@@ -3414,8 +3417,7 @@ package body Sem_Ch6 is\n                --  Ghost. Set the mode now to ensure that any nodes generated\n                --  during analysis and expansion are properly marked as Ghost.\n \n-               Mark_And_Set_Ghost_Body (N, Spec_Id, Mode);\n-               Mode_Set := True;\n+               Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n             else\n                Spec_Id := Find_Corresponding_Spec (N);\n@@ -3425,8 +3427,7 @@ package body Sem_Ch6 is\n                --  Ghost. Set the mode now to ensure that any nodes generated\n                --  during analysis and expansion are properly marked as Ghost.\n \n-               Mark_And_Set_Ghost_Body (N, Spec_Id, Mode);\n-               Mode_Set := True;\n+               Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n                --  In GNATprove mode, if the body has no previous spec, create\n                --  one so that the inlining machinery can operate properly.\n@@ -3527,8 +3528,7 @@ package body Sem_Ch6 is\n             --  the mode now to ensure that any nodes generated during analysis\n             --  and expansion are properly marked as Ghost.\n \n-            Mark_And_Set_Ghost_Body (N, Spec_Id, Mode);\n-            Mode_Set := True;\n+            Mark_And_Set_Ghost_Body (N, Spec_Id);\n          end if;\n       end if;\n \n@@ -4447,11 +4447,8 @@ package body Sem_Ch6 is\n       end if;\n \n    <<Leave>>\n-      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-\n-      if Mode_Set then\n-         Restore_Ghost_Mode (Mode);\n-      end if;\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Subprogram_Body_Helper;\n \n    ------------------------------------"}, {"sha": "2174f2b08f61852fbcf7417c917e3a00ddf75bf4", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -539,12 +539,14 @@ package body Sem_Ch7 is\n \n       --  Local variables\n \n-      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Saved_GM   : constant Ghost_Mode_Type := Ghost_Mode;\n+      Saved_ISMP : constant Boolean         :=\n+                     Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      --  Save the Ghost and SPARK mode-related data to restore on exit\n \n       Body_Id          : Entity_Id;\n       HSS              : Node_Id;\n       Last_Spec_Entity : Entity_Id;\n-      Mode             : Ghost_Mode_Type;\n       New_N            : Node_Id;\n       Pack_Decl        : Node_Id;\n       Spec_Id          : Entity_Id;\n@@ -647,7 +649,7 @@ package body Sem_Ch7 is\n       --  the mode now to ensure that any nodes generated during analysis and\n       --  expansion are properly flagged as ignored Ghost.\n \n-      Mark_And_Set_Ghost_Body (N, Spec_Id, Mode);\n+      Mark_And_Set_Ghost_Body (N, Spec_Id);\n \n       Set_Is_Compilation_Unit (Body_Id, Is_Compilation_Unit (Spec_Id));\n       Style.Check_Identifier (Body_Id, Spec_Id);\n@@ -941,9 +943,8 @@ package body Sem_Ch7 is\n          end if;\n       end if;\n \n-      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n-\n-      Restore_Ghost_Mode (Mode);\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Package_Body_Helper;\n \n    ---------------------------------"}, {"sha": "26a6852cbe4ae43c034e92a3cc30b8b7bd6433fe", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -1937,8 +1937,11 @@ package body Sem_Elab is\n    -- Check_Elab_Calls --\n    ----------------------\n \n+   --  WARNING: This routine manages SPARK regions\n+\n    procedure Check_Elab_Calls is\n-      Save_SPARK_Mode : SPARK_Mode_Type;\n+      Saved_SM  : SPARK_Mode_Type;\n+      Saved_SMP : Node_Id;\n \n    begin\n       --  If expansion is disabled, do not generate any checks, unless we\n@@ -1966,9 +1969,10 @@ package body Sem_Elab is\n             From_Elab_Code := Delay_Check.Table (J).From_Elab_Code;\n             In_Task_Activation := Delay_Check.Table (J).In_Task_Activation;\n \n-            --  Set appropriate value of SPARK_Mode\n+            Saved_SM  := SPARK_Mode;\n+            Saved_SMP := SPARK_Mode_Pragma;\n \n-            Save_SPARK_Mode := SPARK_Mode;\n+            --  Set appropriate value of SPARK_Mode\n \n             if Delay_Check.Table (J).From_SPARK_Code then\n                SPARK_Mode := On;\n@@ -1980,7 +1984,7 @@ package body Sem_Elab is\n                Outer_Scope => Delay_Check.Table (J).Outer_Scope,\n                Orig_Ent    => Delay_Check.Table (J).Orig_Ent);\n \n-            SPARK_Mode := Save_SPARK_Mode;\n+            Restore_SPARK_Mode (Saved_SM, Saved_SMP);\n             Pop_Scope;\n          end loop;\n "}, {"sha": "da8bd89d5a48f4b6643dba28986a2dbd87745bb4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -472,8 +472,10 @@ package body Sem_Prag is\n \n       CCases : constant Node_Id := Expression (Get_Argument (N, Spec_Id));\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       CCase         : Node_Id;\n-      Mode          : Ghost_Mode_Type;\n       Restore_Scope : Boolean := False;\n \n    --  Start of processing for Analyze_Contract_Cases_In_Decl_Part\n@@ -490,7 +492,7 @@ package body Sem_Prag is\n       --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n-      Set_Ghost_Mode (N, Mode);\n+      Set_Ghost_Mode (N);\n \n       --  Single and multiple contract cases must appear in aggregate form. If\n       --  this is not the case, then either the parser of the analysis of the\n@@ -537,7 +539,8 @@ package body Sem_Prag is\n       end if;\n \n       Set_Is_Analyzed_Pragma (N);\n-      Restore_Ghost_Mode (Mode);\n+\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Contract_Cases_In_Decl_Part;\n \n    ----------------------------------\n@@ -2672,7 +2675,8 @@ package body Sem_Prag is\n       Pack_Id   : constant Entity_Id := Defining_Entity (Pack_Decl);\n       Expr      : constant Node_Id   := Expression (Get_Argument (N, Pack_Id));\n \n-      Mode : Ghost_Mode_Type;\n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n \n    begin\n       --  Do not analyze the pragma multiple times\n@@ -2686,7 +2690,7 @@ package body Sem_Prag is\n       --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n-      Set_Ghost_Mode (N, Mode);\n+      Set_Ghost_Mode (N);\n \n       --  The expression is preanalyzed because it has not been moved to its\n       --  final place yet. A direct analysis may generate side effects and this\n@@ -2695,7 +2699,7 @@ package body Sem_Prag is\n       Preanalyze_Assert_Expression (Expr, Standard_Boolean);\n       Set_Is_Analyzed_Pragma (N);\n \n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Initial_Condition_In_Decl_Part;\n \n    --------------------------------------\n@@ -12662,18 +12666,20 @@ package body Sem_Prag is\n          --  restore the Ghost mode.\n \n          when Pragma_Check => Check : declare\n+            Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+            --  Save the Ghost mode to restore on exit\n+\n             Cname : Name_Id;\n             Eloc  : Source_Ptr;\n             Expr  : Node_Id;\n-            Mode  : Ghost_Mode_Type;\n             Str   : Node_Id;\n \n          begin\n             --  Pragma Check is Ghost when it applies to a Ghost entity. Set\n             --  the mode now to ensure that any nodes generated during analysis\n             --  and expansion are marked as Ghost.\n \n-            Set_Ghost_Mode (N, Mode);\n+            Set_Ghost_Mode (N);\n \n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (2);\n@@ -12857,7 +12863,7 @@ package body Sem_Prag is\n                In_Assertion_Expr := In_Assertion_Expr - 1;\n             end if;\n \n-            Restore_Ghost_Mode (Mode);\n+            Restore_Ghost_Mode (Saved_GM);\n          end Check;\n \n          --------------------------\n@@ -24031,8 +24037,10 @@ package body Sem_Prag is\n       Spec_Id   : constant Entity_Id := Unique_Defining_Entity (Subp_Decl);\n       Expr      : constant Node_Id   := Expression (Get_Argument (N, Spec_Id));\n \n+      Saved_GM : constant Ghost_Mode_Type := Ghost_Mode;\n+      --  Save the Ghost mode to restore on exit\n+\n       Errors        : Nat;\n-      Mode          : Ghost_Mode_Type;\n       Restore_Scope : Boolean := False;\n \n    --  Start of processing for Analyze_Pre_Post_Condition_In_Decl_Part\n@@ -24049,7 +24057,7 @@ package body Sem_Prag is\n       --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n-      Set_Ghost_Mode (N, Mode);\n+      Set_Ghost_Mode (N);\n \n       --  Ensure that the subprogram and its formals are visible when analyzing\n       --  the expression of the pragma.\n@@ -24120,7 +24128,7 @@ package body Sem_Prag is\n       Check_Postcondition_Use_In_Inlined_Subprogram (N, Spec_Id);\n       Set_Is_Analyzed_Pragma (N);\n \n-      Restore_Ghost_Mode (Mode);\n+      Restore_Ghost_Mode (Saved_GM);\n    end Analyze_Pre_Post_Condition_In_Decl_Part;\n \n    ------------------------------------------"}, {"sha": "7c050d45e21ca756b257043f40b3c2d3c36d7a5b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -11694,6 +11694,16 @@ package body Sem_Util is\n       end loop;\n    end Install_Generic_Formals;\n \n+   ------------------------\n+   -- Install_SPARK_Mode --\n+   ------------------------\n+\n+   procedure Install_SPARK_Mode (Mode : SPARK_Mode_Type; Prag : Node_Id) is\n+   begin\n+      SPARK_Mode        := Mode;\n+      SPARK_Mode_Pragma := Prag;\n+   end Install_SPARK_Mode;\n+\n    -----------------------------\n    -- Is_Actual_Out_Parameter --\n    -----------------------------\n@@ -19830,9 +19840,13 @@ package body Sem_Util is\n    -- Restore_SPARK_Mode --\n    ------------------------\n \n-   procedure Restore_SPARK_Mode (Mode : SPARK_Mode_Type) is\n+   procedure Restore_SPARK_Mode\n+     (Mode : SPARK_Mode_Type;\n+      Prag : Node_Id)\n+   is\n    begin\n-      SPARK_Mode := Mode;\n+      SPARK_Mode        := Mode;\n+      SPARK_Mode_Pragma := Prag;\n    end Restore_SPARK_Mode;\n \n    --------------------------------\n@@ -20156,28 +20170,23 @@ package body Sem_Util is\n       end if;\n    end Same_Value;\n \n-   -----------------------------\n-   -- Save_SPARK_Mode_And_Set --\n-   -----------------------------\n+   --------------------\n+   -- Set_SPARK_Mode --\n+   --------------------\n \n-   procedure Save_SPARK_Mode_And_Set\n-     (Context : Entity_Id;\n-      Mode    : out SPARK_Mode_Type)\n-   is\n+   procedure Set_SPARK_Mode (Context : Entity_Id) is\n    begin\n-      --  Save the current mode in effect\n-\n-      Mode := SPARK_Mode;\n-\n       --  Do not consider illegal or partially decorated constructs\n \n       if Ekind (Context) = E_Void or else Error_Posted (Context) then\n          null;\n \n       elsif Present (SPARK_Pragma (Context)) then\n-         SPARK_Mode := Get_SPARK_Mode_From_Annotation (SPARK_Pragma (Context));\n+         Install_SPARK_Mode\n+           (Mode => Get_SPARK_Mode_From_Annotation (SPARK_Pragma (Context)),\n+            Prag => SPARK_Pragma (Context));\n       end if;\n-   end Save_SPARK_Mode_And_Set;\n+   end Set_SPARK_Mode;\n \n    -------------------------\n    -- Scalar_Part_Present --"}, {"sha": "c8a484d260b9df0d7e9e540b8c0fbe616475c77e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a8f9105771efaf9188cb1c6c979cea3f677c63/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f9a8f9105771efaf9188cb1c6c979cea3f677c63", "patch": "@@ -1331,6 +1331,9 @@ package Sem_Util is\n    --  Install both the generic formal parameters and the formal parameters of\n    --  generic subprogram Subp_Id into visibility.\n \n+   procedure Install_SPARK_Mode (Mode : SPARK_Mode_Type; Prag : Node_Id);\n+   --  Establish the SPARK_Mode and SPARK_Mode_Pragma currently in effect\n+\n    function Is_Actual_Out_Parameter (N : Node_Id) return Boolean;\n    --  Determines if N is an actual parameter of out mode in a subprogram call\n \n@@ -2209,9 +2212,11 @@ package Sem_Util is\n    procedure Reset_Analyzed_Flags (N : Node_Id);\n    --  Reset the Analyzed flags in all nodes of the tree whose root is N\n \n-   procedure Restore_SPARK_Mode (Mode : SPARK_Mode_Type);\n-   --  Set the current SPARK_Mode to whatever Mode denotes. This routime must\n-   --  be used in tandem with Save_SPARK_Mode_And_Set.\n+   procedure Restore_SPARK_Mode\n+     (Mode : SPARK_Mode_Type;\n+      Prag : Node_Id);\n+   --  Set the current SPARK_Mode to Mode and SPARK_Mode_Pragma to Prag. This\n+   --  routine must be used in tandem with Set_SPARK_Mode.\n \n    function Returns_Unconstrained_Type (Subp : Entity_Id) return Boolean;\n    --  Return true if Subp is a function that returns an unconstrained type\n@@ -2269,13 +2274,6 @@ package Sem_Util is\n    --  A result of False does not necessarily mean they have different values,\n    --  just that it is not possible to determine they have the same value.\n \n-   procedure Save_SPARK_Mode_And_Set\n-     (Context : Entity_Id;\n-      Mode    : out SPARK_Mode_Type);\n-   --  Save the current SPARK_Mode in effect in Mode. Establish the SPARK_Mode\n-   --  (if any) of a package or a subprogram denoted by Context. This routine\n-   --  must be used in tandem with Restore_SPARK_Mode.\n-\n    function Scalar_Part_Present (T : Entity_Id) return Boolean;\n    --  Tests if type T can be determined at compile time to have at least one\n    --  scalar part in the sense of the Valid_Scalars attribute. Returns True if\n@@ -2371,6 +2369,11 @@ package Sem_Util is\n    --  value from T2 to T1. It does NOT copy the RM_Size field, which must be\n    --  separately set if this is required to be copied also.\n \n+   procedure Set_SPARK_Mode (Context : Entity_Id);\n+   --  Establish the SPARK_Mode and SPARK_Mode_Pragma (if any) of a package or\n+   --  a subprogram denoted by Context. This routine must be used in tandem\n+   --  with Restore_SPARK_Mode.\n+\n    function Scope_Is_Transient return Boolean;\n    --  True if the current scope is transient\n "}]}