{"sha": "a30a2e43e4a357919ecfa916451966f8e32b5176", "node_id": "C_kwDOANBUbNoAKGEzMGEyZTQzZTRhMzU3OTE5ZWNmYTkxNjQ1MTk2NmY4ZTMyYjUxNzY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-12T18:45:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-13T11:45:31Z"}, "message": "libstdc++: Implement std::spanstream for C++23\n\nThis implements the <spanstream> header, as proposed for C++23 by P0448R4.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Add spanstream header.\n\t* include/Makefile.in: Regenerate.\n\t* include/precompiled/stdc++.h: Add spanstream header.\n\t* include/std/version (__cpp_lib_spanstream): Define.\n\t* include/std/spanstream: New file.\n\t* testsuite/27_io/spanstream/1.cc: New test.\n\t* testsuite/27_io/spanstream/version.cc: New test.", "tree": {"sha": "e7e8c7967c511027f3880259c7ab2b15ac901b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e8c7967c511027f3880259c7ab2b15ac901b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30a2e43e4a357919ecfa916451966f8e32b5176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30a2e43e4a357919ecfa916451966f8e32b5176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30a2e43e4a357919ecfa916451966f8e32b5176", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30a2e43e4a357919ecfa916451966f8e32b5176/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecdf414bd89e6ba251f6b3f494407139b4dbae0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdf414bd89e6ba251f6b3f494407139b4dbae0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdf414bd89e6ba251f6b3f494407139b4dbae0e"}], "stats": {"total": 520, "additions": 519, "deletions": 1}, "files": [{"sha": "25a8d9c8a4187d9bd0bd70377b33dca5c62c0ce4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -76,6 +76,7 @@ std_headers = \\\n \t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n+\t${std_srcdir}/spanstream \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/syncstream \\\n \t${std_srcdir}/stack \\"}, {"sha": "47a5d985049210191f26ebda98964242937dd585", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -426,6 +426,7 @@ std_headers = \\\n \t${std_srcdir}/shared_mutex \\\n \t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n+\t${std_srcdir}/spanstream \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/syncstream \\\n \t${std_srcdir}/stack \\"}, {"sha": "e1c10e612e8b1329fbd9350d38200ff7a5c28767", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -133,7 +133,7 @@\n #include <variant>\n #endif\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n #include <barrier>\n #include <bit>\n #include <compare>\n@@ -151,3 +151,7 @@\n #include <syncstream>\n #include <version>\n #endif\n+\n+#if __cplusplus > 202002L\n+#include <spanstream>\n+#endif"}, {"sha": "240866ff26fcc42df272ee007e9e518f6815b96d", "filename": "libstdc++-v3/include/std/spanstream", "status": "added", "additions": 446, "deletions": 0, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -0,0 +1,446 @@\n+// Streams based on std::span -*- C++ -*-\n+\n+// Copyright The GNU Toolchain Authors.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file spanstream\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_SPANSTREAM\n+#define _GLIBCXX_SPANSTREAM 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus > 202002L\n+#include <span>\n+#include <streambuf>\n+#include <istream>\n+#include <ostream>\n+#include <bits/ranges_base.h>\n+\n+#if __cpp_lib_span\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#define __cpp_lib_spanstream 202106L\n+\n+template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+  class basic_spanbuf\n+  : public basic_streambuf<_CharT, _Traits>\n+  {\n+    using __streambuf_type = basic_streambuf<_CharT, _Traits>;\n+\n+  public:\n+    using char_type   = _CharT;\n+    using int_type    = typename _Traits::int_type;\n+    using pos_type    = typename _Traits::pos_type;\n+    using off_type    = typename _Traits::off_type;\n+    using traits_type = _Traits;\n+\n+    // [spanbuf.ctor], constructors\n+    basic_spanbuf() : basic_spanbuf(ios_base::in | ios_base::out)\n+    { }\n+\n+    explicit\n+    basic_spanbuf(ios_base::openmode __which)\n+    : __streambuf_type(), _M_mode(__which)\n+    { }\n+\n+    explicit\n+    basic_spanbuf(std::span<_CharT> __s,\n+\t\t  ios_base::openmode __which = ios_base::in | ios_base::out)\n+    : __streambuf_type(), _M_mode(__which)\n+    { span(__s); }\n+\n+    basic_spanbuf(const basic_spanbuf&) = delete;\n+\n+    /// Move constructor. In this implementation `rhs` is left unchanged.\n+    basic_spanbuf(basic_spanbuf&& __rhs)\n+    : __streambuf_type(__rhs), _M_mode(__rhs._M_mode)\n+    { span(__rhs._M_buf); }\n+\n+    // [spanbuf.assign], assignment and swap\n+    basic_spanbuf& operator=(const basic_spanbuf&) = delete;\n+\n+    basic_spanbuf&\n+    operator=(basic_spanbuf&& __rhs)\n+    {\n+      basic_spanbuf(std::move(__rhs))->swap(*this);\n+      return *this;\n+    }\n+\n+    void\n+    swap(basic_spanbuf& __rhs)\n+    {\n+      __streambuf_type::swap(__rhs);\n+      std::swap(_M_mode, __rhs._M_mode);\n+      std::swap(_M_buf, __rhs._M_buf);\n+    }\n+\n+    // [spanbuf.members], member functions\n+    std::span<_CharT>\n+    span() const noexcept\n+    {\n+      if (_M_mode & ios_base::out)\n+\treturn {this->pbase(), this->pptr()};\n+      else\n+\treturn _M_buf;\n+    }\n+\n+    void\n+    span(std::span<_CharT> __s) noexcept\n+    {\n+      _M_buf = __s;\n+      if (_M_mode & ios_base::out)\n+\t{\n+\t  this->setp(__s.data(), __s.data() + __s.size());\n+\t  if (_M_mode & ios_base::ate)\n+\t    this->pbump(__s.size());\n+\t}\n+      if (_M_mode & ios_base::in)\n+\tthis->setg(__s.data(), __s.data(), __s.data() + __s.size());\n+    }\n+\n+  protected:\n+    // [spanbuf.virtuals], overridden virtual functions\n+    basic_streambuf<_CharT, _Traits>*\n+    setbuf(_CharT* __s, streamsize __n) override\n+    {\n+      span({__s, __n});\n+      return this;\n+    }\n+\n+    pos_type\n+    seekoff(off_type __off, ios_base::seekdir __way,\n+\t    ios_base::openmode __which = ios_base::in | ios_base::out) override\n+    {\n+      pos_type __ret =  pos_type(off_type(-1));\n+\n+      if (__way == ios_base::beg)\n+\t{\n+\t  if (0 <= __off && __off <= _M_buf.size())\n+\t    {\n+\t      if (__which & ios_base::in)\n+\t\tthis->setg(this->eback(), this->eback() + __off, this->egptr());\n+\n+\t      if (__which & ios_base::out)\n+\t\t{\n+\t\t  this->setp(this->pbase(), this->epptr());\n+\t\t  this->pbump(__off);\n+\t\t}\n+\n+\t      __ret = pos_type(__off);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  off_type __base;\n+\t  __which &= (ios_base::in|ios_base::out);\n+\n+\t  if (__which == ios_base::out)\n+\t    __base = this->pptr() - this->pbase();\n+\t  else if (__way == ios_base::cur)\n+\t    {\n+\t      if (__which == ios_base::in)\n+\t\t__base = this->gptr() - this->eback();\n+\t      else\n+\t\treturn __ret;\n+\t    }\n+\t  else if (__way == ios_base::end)\n+\t    __base = _M_buf.size();\n+\n+\t  if (__builtin_add_overflow(__base, __off, &__off))\n+\t    return __ret;\n+\n+\t  if (__off < 0 || __off > _M_buf.size())\n+\t    return __ret;\n+\n+\t  if (__which & ios_base::in)\n+\t    this->setg(this->eback(), this->eback() + __off, this->egptr());\n+\n+\t  if (__which & ios_base::out)\n+\t    {\n+\t      this->setp(this->pbase(), this->epptr());\n+\t      this->pbump(__off);\n+\t    }\n+\n+\t  __ret = pos_type(__off);\n+\n+\t}\n+      return __ret;\n+    }\n+\n+    pos_type\n+    seekpos(pos_type __sp,\n+\t    ios_base::openmode __which = ios_base::in | ios_base::out) override\n+    { return seekoff(off_type(__sp), ios_base::beg, __which); }\n+\n+  private:\n+\n+    ios_base::openmode _M_mode;\n+    std::span<_CharT> _M_buf;\n+  };\n+\n+template<typename _CharT, typename _Traits>\n+  inline void\n+  swap(basic_spanbuf<_CharT, _Traits>& __x,\n+       basic_spanbuf<_CharT, _Traits>& __y)\n+  { __x.swap(__y); }\n+\n+using spanbuf = basic_spanbuf<char>;\n+using wspanbuf = basic_spanbuf<wchar_t>;\n+\n+template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+  class basic_ispanstream\n+  : public basic_istream<_CharT, _Traits>\n+  {\n+    using __istream_type = basic_istream<_CharT, _Traits>;\n+\n+  public:\n+    using char_type   = _CharT;\n+    using int_type    = typename _Traits::int_type;\n+    using pos_type    = typename _Traits::pos_type;\n+    using off_type    = typename _Traits::off_type;\n+    using traits_type = _Traits;\n+\n+    // [ispanstream.ctor], constructors\n+    explicit\n+    basic_ispanstream(std::span<_CharT> __s,\n+\t\t      ios_base::openmode __which = ios_base::in)\n+    : __istream_type(std::__addressof(_M_sb)),\n+      _M_sb(__s, __which | ios_base::in)\n+    { }\n+\n+    basic_ispanstream(const basic_ispanstream&) = delete;\n+\n+    basic_ispanstream(basic_ispanstream&& __rhs)\n+    : __istream_type(std::move(__rhs)), _M_sb(std::move(__rhs._M_sb))\n+    {\n+      __istream_type::set_rdbuf(std::addressof(_M_sb));\n+    }\n+\n+    template<typename _Ros>\n+      requires ranges::borrowed_range<_Ros>\n+\t&& (!convertible_to<_Ros, std::span<_CharT>>)\n+\t&& convertible_to<_Ros, std::span<const _CharT>>\n+      explicit\n+      basic_ispanstream(_Ros&& __s)\n+      : __istream_type(std::__addressof(_M_sb)),\n+\t_M_sb(ios_base::in)\n+      {\n+\tstd::span<const _CharT> __sp(std::forward<_Ros>(__s));\n+\t_M_sb.span({const_cast<_CharT*>(__sp.data()), __sp.size()});\n+      }\n+\n+    // [ispanstream.assign], assignment and swap\n+    basic_ispanstream& operator=(const basic_ispanstream&) = delete;\n+    basic_ispanstream& operator=(basic_ispanstream&& __rhs) = default;\n+\n+    void\n+    swap(basic_ispanstream& __rhs)\n+    {\n+      __istream_type::swap(__rhs);\n+      _M_sb.swap(__rhs._M_sb);\n+    }\n+\n+    // [ispanstream.members], member functions\n+    basic_spanbuf<_CharT, _Traits>*\n+    rdbuf() const noexcept\n+    {\n+      return const_cast<basic_spanbuf<_CharT, _Traits>*>(std::__addressof(_M_sb));\n+    }\n+\n+    std::span<const _CharT>\n+    span() const noexcept\n+    { return _M_sb.span(); }\n+\n+    void\n+    span(std::span<_CharT> __s) noexcept\n+    { return _M_sb.span(__s); }\n+\n+    template<typename _Ros>\n+      requires ranges::borrowed_range<_Ros>\n+\t&& (!convertible_to<_Ros, std::span<_CharT>>)\n+\t&& convertible_to<_Ros, std::span<const _CharT>>\n+      void\n+      span(_Ros&& __s) noexcept\n+      {\n+\tstd::span<const _CharT> __sp(std::forward<_Ros>(__s));\n+\t_M_sb.span({const_cast<_CharT*>(__sp.data()), __sp.size()});\n+      }\n+\n+  private:\n+    basic_spanbuf<_CharT, _Traits> _M_sb;\n+  };\n+\n+template<typename _CharT, typename _Traits>\n+  inline void\n+  swap(basic_ispanstream<_CharT, _Traits>& __x,\n+       basic_ispanstream<_CharT, _Traits>& __y)\n+  { __x.swap(__y); }\n+\n+using ispanstream = basic_ispanstream<char>;\n+using wispanstream = basic_ispanstream<wchar_t>;\n+\n+template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+  class basic_ospanstream\n+  : public basic_ostream<_CharT, _Traits>\n+  {\n+    using __ostream_type = basic_ostream<_CharT, _Traits>;\n+\n+  public:\n+    using char_type   = _CharT;\n+    using int_type    = typename _Traits::int_type;\n+    using pos_type    = typename _Traits::pos_type;\n+    using off_type    = typename _Traits::off_type;\n+    using traits_type = _Traits;\n+\n+    // [ospanstream.ctor], constructors\n+    explicit\n+    basic_ospanstream(std::span<_CharT> __s,\n+\t\t      ios_base::openmode __which = ios_base::out)\n+    : __ostream_type(std::__addressof(_M_sb)),\n+      _M_sb(__s, __which | ios_base::in)\n+    { }\n+\n+    basic_ospanstream(const basic_ospanstream&) = delete;\n+\n+    basic_ospanstream(basic_ospanstream&& __rhs)\n+    : __ostream_type(std::move(__rhs)), _M_sb(std::move(__rhs._M_sb))\n+    {\n+      __ostream_type::set_rdbuf(std::addressof(_M_sb));\n+    }\n+\n+    // [ospanstream.assign], assignment and swap\n+    basic_ospanstream& operator=(const basic_ospanstream&) = delete;\n+    basic_ospanstream& operator=(basic_ospanstream&& __rhs) = default;\n+\n+    void\n+    swap(basic_ospanstream& __rhs)\n+    {\n+      __ostream_type::swap(__rhs);\n+      _M_sb.swap(__rhs._M_sb);\n+    }\n+\n+    // [ospanstream.members], member functions\n+    basic_spanbuf<_CharT, _Traits>*\n+    rdbuf() const noexcept\n+    {\n+      return const_cast<basic_spanbuf<_CharT, _Traits>*>(std::__addressof(_M_sb));\n+    }\n+\n+    std::span<_CharT>\n+    span() const noexcept\n+    { return _M_sb.span(); }\n+\n+    void\n+    span(std::span<_CharT> __s) noexcept\n+    { return _M_sb.span(__s); }\n+\n+  private:\n+    basic_spanbuf<_CharT, _Traits> _M_sb;\n+  };\n+\n+template<typename _CharT, typename _Traits>\n+  inline void\n+  swap(basic_ospanstream<_CharT, _Traits>& __x,\n+       basic_ospanstream<_CharT, _Traits>& __y)\n+  { __x.swap(__y); }\n+\n+using ospanstream = basic_ospanstream<char>;\n+using wospanstream = basic_ospanstream<wchar_t>;\n+\n+template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+  class basic_spanstream\n+  : public basic_iostream<_CharT, _Traits>\n+  {\n+    using __iostream_type = basic_iostream<_CharT, _Traits>;\n+\n+  public:\n+    using char_type   = _CharT;\n+    using int_type    = typename _Traits::int_type;\n+    using pos_type    = typename _Traits::pos_type;\n+    using off_type    = typename _Traits::off_type;\n+    using traits_type = _Traits;\n+\n+    // [spanstream.ctor], constructors\n+    explicit\n+    basic_spanstream(std::span<_CharT> __s,\n+\t\t     ios_base::openmode __which = ios_base::out | ios_base::in)\n+    : __iostream_type(std::__addressof(_M_sb)),\n+      _M_sb(__s, __which)\n+    { }\n+\n+    basic_spanstream(const basic_spanstream&) = delete;\n+\n+    basic_spanstream(basic_spanstream&& __rhs)\n+    : __iostream_type(std::move(__rhs)), _M_sb(std::move(__rhs._M_sb))\n+    {\n+      __iostream_type::set_rdbuf(std::addressof(_M_sb));\n+    }\n+\n+    // [spanstream.assign], assignment and swap\n+    basic_spanstream& operator=(const basic_spanstream&) = delete;\n+    basic_spanstream& operator=(basic_spanstream&& __rhs) = default;\n+\n+    void\n+    swap(basic_spanstream& __rhs)\n+    {\n+      __iostream_type::swap(__rhs);\n+      _M_sb.swap(__rhs._M_sb);\n+    }\n+\n+    // [spanstream.members], members\n+    basic_spanbuf<_CharT, _Traits>*\n+    rdbuf() const noexcept\n+    {\n+      return const_cast<basic_spanbuf<_CharT, _Traits>*>(std::__addressof(_M_sb));\n+    }\n+\n+    std::span<_CharT>\n+    span() const noexcept\n+    { return _M_sb.span(); }\n+\n+    void\n+    span(std::span<_CharT> __s) noexcept\n+    { return _M_sb.span(__s); }\n+\n+  private:\n+    basic_spanbuf<_CharT, _Traits> _M_sb;\n+  };\n+\n+template<typename _CharT, typename _Traits>\n+  inline void\n+  swap(basic_spanstream<_CharT, _Traits>& __x,\n+       basic_spanstream<_CharT, _Traits>& __y)\n+  { __x.swap(__y); }\n+\n+using spanstream = basic_spanstream<char>;\n+using wspanstream = basic_spanstream<wchar_t>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // __cpp_lib_span\n+#endif // C++23\n+#endif // _GLIBCXX_SPANSTREAM"}, {"sha": "0930de82efa1df0173367aa60ede53f863d85a61", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -296,6 +296,9 @@\n # define __cpp_lib_monadic_optional 202110L\n #endif\n #define __cpp_lib_move_only_function 202110L\n+#if __cpp_lib_span\n+# define __cpp_lib_spanstream 202106L\n+#endif\n #define __cpp_lib_string_contains 202011L\n #if _GLIBCXX_USE_CXX11_ABI // Only supported with cxx11-abi\n # define __cpp_lib_string_resize_and_overwrite 202110L"}, {"sha": "b66ee60ec92acf30bcd2f1bf59ec890d028da428", "filename": "libstdc++-v3/testsuite/27_io/spanstream/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2F1.cc?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <spanstream>\n+\n+#ifndef __cpp_lib_spanstream\n+# error \"Feature-test macro for spanstream missing in <spanstream>\"\n+#elif __cpp_lib_spanstream != 202106L\n+# error \"Feature-test macro for spanstream has wrong value in <spanstream>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+using std::ispanstream;\n+using std::ospanstream;\n+using std::span;\n+\n+void\n+test_input()\n+{\n+  // reading input from a fixed pre-arranged character buffer\n+  char input[] = \"10 20 30\";\n+  ispanstream is{span<char>{input}};\n+  int i;\n+  is >> i;\n+  VERIFY(10 == i);\n+  is >> i;\n+  VERIFY(20 == i);\n+  is >> i;\n+  VERIFY(30 == i);\n+  is >>i;\n+  VERIFY(!is);\n+}\n+\n+void\n+test_output()\n+{\n+  // writing to a fixed pre-arranged character buffer\n+  char output[30]{}; // zero-initialize array\n+  ospanstream os{span<char>{output}};\n+  os << 10 << 20 << 30;\n+  auto const sp = os.span();\n+  VERIFY(6 == sp.size());\n+  VERIFY(\"102030\" == std::string(sp.data(), sp.size()));\n+  VERIFY(static_cast<void*>(output) == sp.data()); // no copying of underlying data!\n+  VERIFY(\"102030\" == std::string(output)); // initialization guaranteed NUL termination\n+}\n+\n+int main()\n+{\n+  test_input();\n+  test_output();\n+}"}, {"sha": "62617550493b5e062866247e31eadd75b0d2ac96", "filename": "libstdc++-v3/testsuite/27_io/spanstream/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30a2e43e4a357919ecfa916451966f8e32b5176/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fspanstream%2Fversion.cc?ref=a30a2e43e4a357919ecfa916451966f8e32b5176", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_spanstream\n+# error \"Feature-test macro for spanstream missing in <version>\"\n+#elif __cpp_lib_spanstream != 202106L\n+# error \"Feature-test macro for spanstream has wrong value in <version>\"\n+#endif"}]}