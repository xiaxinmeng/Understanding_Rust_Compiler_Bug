{"sha": "152897b1529264336677bc782f882a5b09041ac3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyODk3YjE1MjkyNjQzMzY2NzdiYzc4MmY4ODJhNWIwOTA0MWFjMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-21T16:19:20Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-21T16:19:20Z"}, "message": "predict.c (estimate_probability): New heuristic...\n\n\t* predict.c (estimate_probability): New heuristic: if a jump\n\tbranches around a block with no successors, predict it taken.\n\tDisentangle control flow.\n\nFrom-SVN: r33308", "tree": {"sha": "35203b209db18c9660d4be98dfd9a892e8804de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35203b209db18c9660d4be98dfd9a892e8804de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152897b1529264336677bc782f882a5b09041ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152897b1529264336677bc782f882a5b09041ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152897b1529264336677bc782f882a5b09041ac3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152897b1529264336677bc782f882a5b09041ac3/comments", "author": null, "committer": null, "parents": [{"sha": "93bc735f86f93c55499225f3cbe0ba828d31b126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93bc735f86f93c55499225f3cbe0ba828d31b126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93bc735f86f93c55499225f3cbe0ba828d31b126"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "733d02d43e6064feb5483a4702be9b691d07b52b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152897b1529264336677bc782f882a5b09041ac3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152897b1529264336677bc782f882a5b09041ac3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=152897b1529264336677bc782f882a5b09041ac3", "patch": "@@ -1,3 +1,9 @@\n+2000-04-21  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* predict.c (estimate_probability): New heuristic: if a jump\n+\tbranches around a block with no successors, predict it taken.\n+\tDisentangle control flow.\n+\n 2000-04-20  Richard Henderson  <rth@cygnus.com>\n \n \t* loop.c (emit_iv_add_mult): Revert last change."}, {"sha": "7ed470929afbab10e868f9dfff85ac14dee85035", "filename": "gcc/predict.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152897b1529264336677bc782f882a5b09041ac3/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152897b1529264336677bc782f882a5b09041ac3/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=152897b1529264336677bc782f882a5b09041ac3", "patch": "@@ -104,18 +104,37 @@ estimate_probability (loops_info)\n       rtx last_insn = BLOCK_END (i);\n       rtx cond, earliest;\n       int prob = 0;\n+      edge e;\n \n       if (GET_CODE (last_insn) != JUMP_INSN\n \t  || ! condjump_p (last_insn) || simplejump_p (last_insn))\n \tcontinue;\n+      if (find_reg_note (last_insn, REG_BR_PROB, 0))\n+\tcontinue;\n       cond = get_condition (last_insn, &earliest);\n       if (! cond)\n \tcontinue;\n \n+      /* If the jump branches around a block with no successors,\n+\t predict it to be taken.  */\n+      prob = 0;\n+      for (e = BASIC_BLOCK (i)->succ; e; e = e->succ_next)\n+\tif ((e->flags & EDGE_FALLTHRU) && e->dest->succ == NULL)\n+\t  {\n+\t    prob = REG_BR_PROB_BASE;\n+\t    break;\n+\t  }\n+      if (prob)\n+\t{\n+\t  REG_NOTES (last_insn)\n+\t    = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n+\t\t\t\t REG_NOTES (last_insn));\n+\t  continue;\n+\t}\n+\n       /* Try \"pointer heuristic.\"\n \t A comparison ptr == 0 is predicted as false.\n \t Similarly, a comparison ptr1 == ptr2 is predicted as false.  */\n-      prob = 0;\n       switch (GET_CODE (cond))\n \t{\n \tcase EQ:\n@@ -137,10 +156,13 @@ estimate_probability (loops_info)\n \tdefault:\n \t  prob = 0;\n \t}\n-\tif (prob && ! find_reg_note (last_insn, REG_BR_PROB, 0))\n+      if (prob)\n+\t{\n \t  REG_NOTES (last_insn)\n \t    = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n \t\t\t\t REG_NOTES (last_insn));\n+\t  continue;\n+\t}\n \n       /* Try \"opcode heuristic.\"\n \t EQ tests are usually false and NE tests are usually true. Also,\n@@ -174,10 +196,9 @@ estimate_probability (loops_info)\n \tdefault:\n \t  prob = 0;\n \t}\n-      if (! find_reg_note (last_insn, REG_BR_PROB, 0))\n-\tREG_NOTES (last_insn)\n-\t  = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n-\t\t\t       REG_NOTES (last_insn));\n+      REG_NOTES (last_insn)\n+\t= gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n+\t\t\t     REG_NOTES (last_insn));\n     }\n }\n \f"}]}