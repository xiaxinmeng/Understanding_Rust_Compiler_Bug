{"sha": "4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4YTNhMzVkOGI3NGJhNjI5ZGZiMGQ1MmNmNjI5NmE4NGNjOWE2ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-01-04T18:22:52Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-01-04T18:22:52Z"}, "message": "constraints.md (wo constraint): New constraint for ISA 3.0 (power9).\n\n[gcc]\n2016-01-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/constraints.md (wo constraint): New constraint for\n\tISA 3.0 (power9).\n\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Add support\n\tfor wo constraint.\n\t(rs6000_init_hard_regno_mode_ok): Likewise.\n\n\t* config/rs6000/rs6000.h (r6000_reg_class_enum): Add support for\n\two constraint.\n\n\t* config/rs6000/altivec.md (altivec_vperm_<mode>): Clean up vperm\n\texpanders not to have constraints.  Add support for ISA 3.0 xxperm\n\tinstruction.  Add support for fusing xxlor with xxperm.\n\t(altivec_vperm_<mode>_internal): Likewise.\n\t(altivec_vperm_v8hiv16qi): Likewise.\n\t(altivec_vperm_<mode>v16q): Likewise.\n\t(altivec_vperm_<mode>_uns): Likewise.\n\t(vperm_v8hiv4si): Likewise.\n\t(vperm_v16qiv8hi): Likewise.\n\n\t* doc/md.texi (RS/6000 constraints): Document wo constraint.\n\n[gcc/testsuite]\n2016-01-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-permute.c: New test for xxperm code\n\tgeneration.\n\nFrom-SVN: r232060", "tree": {"sha": "848b6ddea1ebae2f393c4af0fd868bf8f235dd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/848b6ddea1ebae2f393c4af0fd868bf8f235dd51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/comments", "author": null, "committer": null, "parents": [{"sha": "f29fa917a5d0e7380f0a1d78a766f09689280293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29fa917a5d0e7380f0a1d78a766f09689280293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29fa917a5d0e7380f0a1d78a766f09689280293"}], "stats": {"total": 165, "additions": 123, "deletions": 42}, "files": [{"sha": "440143feb5afcf42d96f797e82d6874c72a440bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -1,3 +1,27 @@\n+2016-01-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/constraints.md (wo constraint): New constraint for\n+\tISA 3.0 (power9).\n+\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Add support\n+\tfor wo constraint.\n+\t(rs6000_init_hard_regno_mode_ok): Likewise.\n+\n+\t* config/rs6000/rs6000.h (r6000_reg_class_enum): Add support for\n+\two constraint.\n+\n+\t* config/rs6000/altivec.md (altivec_vperm_<mode>): Clean up vperm\n+\texpanders not to have constraints.  Add support for ISA 3.0 xxperm\n+\tinstruction.  Add support for fusing xxlor with xxperm.\n+\t(altivec_vperm_<mode>_internal): Likewise.\n+\t(altivec_vperm_v8hiv16qi): Likewise.\n+\t(altivec_vperm_<mode>v16q): Likewise.\n+\t(altivec_vperm_<mode>_uns): Likewise.\n+\t(vperm_v8hiv4si): Likewise.\n+\t(vperm_v16qiv8hi): Likewise.\n+\n+\t* doc/md.texi (RS/6000 constraints): Document wo constraint.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "d1f6acff97767e43461ba0220fd420a1f36d46ee", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 59, "deletions": 38, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -1933,10 +1933,10 @@\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_expand \"altivec_vperm_<mode>\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -1947,31 +1947,40 @@\n     }\n })\n \n+;; Slightly prefer vperm, since the target does not overlap the source\n (define_insn \"*altivec_vperm_<mode>_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo,?&wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0,wo\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo,wo\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n-  \"vperm %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  \"@\n+   vperm %0,%1,%2,%3\n+   xxperm %x0,%x2,%x3\n+   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4,4,8\")])\n \n (define_insn \"altivec_vperm_v8hiv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-   \t               (match_operand:V8HI 2 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v,?wo,?&wo\")\n+\t(unspec:V16QI [(match_operand:V8HI 1 \"register_operand\" \"v,0,wo\")\n+   \t               (match_operand:V8HI 2 \"register_operand\" \"v,wo,wo\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n-  \"vperm %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  \"@\n+   vperm %0,%1,%2,%3\n+   xxperm %x0,%x2,%x3\n+   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4,4,8\")])\n \n (define_expand \"altivec_vperm_<mode>_uns\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -1983,14 +1992,18 @@\n })\n \n (define_insn \"*altivec_vperm_<mode>_uns_internal\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo,?&wo\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,0,wo\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v,wo,wo\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n-  \"vperm %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  \"@\n+   vperm %0,%1,%2,%3\n+   xxperm %x0,%x2,%x3\n+   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4,4,8\")])\n \n (define_expand \"vec_permv16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n@@ -2778,24 +2791,32 @@\n   \"\")\n \n (define_insn \"vperm_v8hiv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                   (match_operand:V4SI 2 \"register_operand\" \"v\")\n-                   (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v,?wo,?&wo\")\n+        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v,0,wo\")\n+\t\t      (match_operand:V4SI 2 \"register_operand\" \"v,wo,wo\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n                   UNSPEC_VPERMSI))]\n   \"TARGET_ALTIVEC\"\n-  \"vperm %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  \"@\n+   vperm %0,%1,%2,%3\n+   xxperm %x0,%x2,%x3\n+   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4,4,8\")])\n \n (define_insn \"vperm_v16qiv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                   (match_operand:V8HI 2 \"register_operand\" \"v\")\n-                   (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v,?wo,?&wo\")\n+        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v,0,wo\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v,wo,wo\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v,wo,wo\")]\n                   UNSPEC_VPERMHI))]\n   \"TARGET_ALTIVEC\"\n-  \"vperm %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  \"@\n+   vperm %0,%1,%2,%3\n+   xxperm %x0,%x2,%x3\n+   xxlor %x0,%x1,%x1\\t\\t# xxperm fusion\\;xxperm %x0,%x2,%x3\"\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"length\" \"4,4,8\")])\n \n \n (define_expand \"vec_unpacku_hi_v16qi\""}, {"sha": "9eca7572c442f64f2b045f179d0d0242c3bf9c71", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -99,7 +99,8 @@\n ;; There is a mode_attr that resolves to wm for SDmode and wn for SFmode\n (define_register_constraint \"wn\" \"NO_REGS\" \"No register (NO_REGS).\")\n \n-;; wo is not currently used\n+(define_register_constraint \"wo\" \"rs6000_constraints[RS6000_CONSTRAINT_wo]\"\n+  \"VSX register if the -mpower9-vector option was used or NO_REGS.\")\n \n (define_register_constraint \"wp\" \"rs6000_constraints[RS6000_CONSTRAINT_wp]\"\n   \"VSX register to use for IEEE 128-bit fp TFmode, or NO_REGS.\")"}, {"sha": "cd5243adb0fe73ae716065dd7c6d04acc8da40e6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -2284,6 +2284,7 @@ rs6000_debug_reg_global (void)\n \t   \"wk reg_class = %s\\n\"\n \t   \"wl reg_class = %s\\n\"\n \t   \"wm reg_class = %s\\n\"\n+\t   \"wo reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n@@ -2311,6 +2312,7 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wk]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wm]],\n+\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wo]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n@@ -3019,7 +3021,11 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_P9_DFORM)\n     rs6000_constraints[RS6000_CONSTRAINT_wb] = ALTIVEC_REGS;\n \n-  /* Support for new direct moves.  */\n+  /* Support for ISA 3.0 (power9) vectors.  */\n+  if (TARGET_P9_VECTOR)\n+    rs6000_constraints[RS6000_CONSTRAINT_wo] = VSX_REGS;\n+\n+  /* Support for new direct moves (ISA 3.0 + 64bit).  */\n   if (TARGET_DIRECT_MOVE_128)\n     rs6000_constraints[RS6000_CONSTRAINT_we] = VSX_REGS;\n "}, {"sha": "6b0e64e693d3526b8716890d5a7a7f4e2ee0262b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -1535,6 +1535,7 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wk,\t\t/* FPR/VSX register for DFmode direct moves. */\n   RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n   RS6000_CONSTRAINT_wm,\t\t/* VSX register for direct move */\n+  RS6000_CONSTRAINT_wo,\t\t/* VSX register for power9 vector.  */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */"}, {"sha": "faf39106fb0485483d799e0a1569c1302ed18887", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -3102,8 +3102,8 @@ Any VSX register if the -mvsx option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n-@code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws}, @code{wt},\n-@code{wu}, @code{wv}, @code{ww}, or @code{wy})\n+@code{wl}, @code{wm}, @code{wo}, @code{wp}, @code{wq}, @code{ws},\n+@code{wt}, @code{wu}, @code{wv}, @code{ww}, or @code{wy})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3175,6 +3175,9 @@ VSX register if direct move instructions are enabled, or NO_REGS.\n @item wn\n No register (NO_REGS).\n \n+@item wo\n+VSX register to use for ISA 3.0 vector instructions, or NO_REGS.\n+\n @item wp\n VSX register to use for IEEE 128-bit floating point TFmode, or NO_REGS.\n "}, {"sha": "1953ba5337ba1f0e10d69301db246022c526fce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -1,3 +1,8 @@\n+2016-01-04  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-permute.c: New test for xxperm code\n+\tgeneration.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "3496d5eb4cae630056b0a9b0b52ea1e4be8b3dba", "filename": "gcc/testsuite/gcc.target/powerpc/p9-permute.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-permute.c?ref=4e8a3a35d8b74ba629dfb0d52cf6296a84cc9a6e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector long long\n+permute (vector long long *p, vector long long *q, vector unsigned char mask)\n+{\n+  vector long long a = *p;\n+  vector long long b = *q;\n+\n+  /* Force a, b to be in FPR registers.  */\n+  __asm__ (\" # a: %x0, b: %x1\" : \"+d\" (a), \"+d\" (b));\n+\n+  return vec_perm (a, b, mask);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"xxperm\" } } */\n+/* { dg-final { scan-assembler-not \"vperm\"  } } */"}]}