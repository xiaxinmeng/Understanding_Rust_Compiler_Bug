{"sha": "fc2655fb3082182075b288b58c93ac563ef661a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyNjU1ZmIzMDgyMTgyMDc1YjI4OGI1OGM5M2FjNTYzZWY2NjFhMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-09-15T15:44:22Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-09-15T15:44:22Z"}, "message": "arith.c (arith_power): Call gfc_free_expr in case of error.\n\n2012-09-15  Tobias Burnus  <burnus@net-b.de>\n\n        * arith.c (arith_power): Call gfc_free_expr in case of error.\n        * array.c (gfc_match_array_constructor): Initialize variable.\n        (gfc_resolve_character_array_constructor): Remove superfluous check.\n        (gfc_array_dimen_size): Add assert.\n        * check.c (numeric_check): Fix implicit typing.\n        * class.c (gfc_build_class_symbol): Add assert.\n        (finalize_component): Free memory.\n        * dump-parse-tree.c (show_namespace): Add assert.\n        * trans-io.c (transfer_namelist_element, transfer_expr): Avoid\n        memory leakage.\n        (gfc_trans_transfer): Add assert.\n        * trans.c (gfc_trans_runtime_check): Call va_end\n\nFrom-SVN: r191344", "tree": {"sha": "cbc423f1f72886520c3332a55320578a49eb12e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc423f1f72886520c3332a55320578a49eb12e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc2655fb3082182075b288b58c93ac563ef661a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2655fb3082182075b288b58c93ac563ef661a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2655fb3082182075b288b58c93ac563ef661a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2655fb3082182075b288b58c93ac563ef661a0/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd2805e11b7018a148a4f87201b4d85344b5aad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2805e11b7018a148a4f87201b4d85344b5aad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2805e11b7018a148a4f87201b4d85344b5aad4"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "4625c62280739f69f8d65ad60bbe398a58cd91dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -1,3 +1,18 @@\n+2012-09-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* arith.c (arith_power): Call gfc_free_expr in case of error.\n+\t* array.c (gfc_match_array_constructor): Initialize variable.\n+\t(gfc_resolve_character_array_constructor): Remove superfluous check.\n+\t(gfc_array_dimen_size): Add assert.\n+\t* check.c (numeric_check): Fix implicit typing.\n+\t* class.c (gfc_build_class_symbol): Add assert.\n+\t(finalize_component): Free memory.\n+\t* dump-parse-tree.c (show_namespace): Add assert.\n+\t* trans-io.c (transfer_namelist_element, transfer_expr): Avoid\n+\tmemory leakage.\n+\t(gfc_trans_transfer): Add assert.\n+\t* trans.c (gfc_trans_runtime_check): Call va_end\n+\n 2012-09-15  Tobias Burnus  <burnus@net-b.de>\n \n \t* match.c (lock_unlock_statement, sync_statement): Fix potential"}, {"sha": "e94566aa65cb637d28da3be55e67444e7a93ec20", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -906,7 +906,10 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t  if (gfc_notify_std (GFC_STD_F2003, \"Noninteger \"\n \t\t\t      \"exponent in an initialization \"\n \t\t\t      \"expression at %L\", &op2->where) == FAILURE)\n-\t    return ARITH_PROHIBIT;\n+\t    {\n+\t      gfc_free_expr (result);\n+\t      return ARITH_PROHIBIT;\n+\t    }\n \t}\n \n       if (mpfr_cmp_si (op1->value.real, 0) < 0)\n@@ -928,7 +931,10 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t    if (gfc_notify_std (GFC_STD_F2003, \"Noninteger \"\n \t\t\t\t\"exponent in an initialization \"\n \t\t\t\t\"expression at %L\", &op2->where) == FAILURE)\n-\t      return ARITH_PROHIBIT;\n+\t      {\n+\t\tgfc_free_expr (result);\n+\t\treturn ARITH_PROHIBIT;\n+\t      }\n \t  }\n \n \tmpc_pow (result->value.complex, op1->value.complex,"}, {"sha": "066ac1ea902c099e53a4e3a73bf9608d200a81e5", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -1074,6 +1074,7 @@ gfc_match_array_constructor (gfc_expr **result)\n   seen_ts = false;\n \n   /* Try to match an optional \"type-spec ::\"  */\n+  gfc_clear_ts (&ts);\n   if (gfc_match_decl_type_spec (&ts, 0) == MATCH_YES)\n     {\n       seen_ts = (gfc_match (\" ::\") == MATCH_YES);\n@@ -1973,7 +1974,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t      /* If gfc_extract_int above set current_length, we implicitly\n \t\t know the type is BT_INTEGER and it's EXPR_CONSTANT.  */\n \n-\t      has_ts = (expr->ts.u.cl && expr->ts.u.cl->length_from_typespec);\n+\t      has_ts = expr->ts.u.cl->length_from_typespec;\n \n \t      if (! cl\n \t\t  || (current_length != -1 && current_length != found_length))\n@@ -2225,13 +2226,15 @@ gfc_array_dimen_size (gfc_expr *array, int dimen, mpz_t *result)\n   gfc_ref *ref;\n   int i;\n \n+  gcc_assert (array != NULL);\n+\n   if (array->ts.type == BT_CLASS)\n     return FAILURE;\n \n   if (array->rank == -1)\n     return FAILURE;\n \n-  if (dimen < 0 || array == NULL || dimen > array->rank - 1)\n+  if (dimen < 0 || dimen > array->rank - 1)\n     gfc_internal_error (\"gfc_array_dimen_size(): Bad dimension\");\n \n   switch (array->expr_type)"}, {"sha": "58c5856795d2bc7ff84823f0822a41d578f38693", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -79,7 +79,7 @@ numeric_check (gfc_expr *e, int n)\n \n   /* If the expression has not got a type, check if its namespace can\n      offer a default type.  */\n-  if ((e->expr_type == EXPR_VARIABLE || e->expr_type == EXPR_VARIABLE)\n+  if ((e->expr_type == EXPR_VARIABLE || e->expr_type == EXPR_FUNCTION)\n \t&& e->symtree->n.sym->ts.type == BT_UNKNOWN\n \t&& gfc_set_default_type (e->symtree->n.sym, 0,\n \t\t\t\t e->symtree->n.sym->ns) == SUCCESS"}, {"sha": "2e347cb86701facc3c0ee2d648f5df0ba44bbc66", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -503,7 +503,9 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n   gfc_component *c;\n   int rank;\n \n-  if (as && *as && (*as)->type == AS_ASSUMED_SIZE)\n+  gcc_assert (as);\n+\n+  if (*as && (*as)->type == AS_ASSUMED_SIZE)\n     {\n       gfc_error (\"Assumed size polymorphic objects or components, such \"\n \t\t \"as that at %C, have not yet been implemented\");\n@@ -838,6 +840,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \n       for (c = comp->ts.u.derived->components; c; c = c->next)\n \tfinalize_component (e, c->ts.u.derived, c, stat, code);\n+      gfc_free_expr (e);\n     }\n }\n "}, {"sha": "a442625cb8a7105464333c7dd81477da3d910c4b", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -2248,67 +2248,63 @@ show_namespace (gfc_namespace *ns)\n   gfc_equiv *eq;\n   int i;\n \n+  gcc_assert (ns);\n   save = gfc_current_ns;\n \n   show_indent ();\n   fputs (\"Namespace:\", dumpfile);\n \n-  if (ns != NULL)\n+  i = 0;\n+  do\n     {\n-      i = 0;\n-      do\n-\t{\n-\t  int l = i;\n-\t  while (i < GFC_LETTERS - 1\n-\t\t && gfc_compare_types(&ns->default_type[i+1],\n-\t\t\t\t      &ns->default_type[l]))\n-\t    i++;\n-\n-\t  if (i > l)\n-\t    fprintf (dumpfile, \" %c-%c: \", l+'A', i+'A');\n-\t  else\n-\t    fprintf (dumpfile, \" %c: \", l+'A');\n+      int l = i;\n+      while (i < GFC_LETTERS - 1\n+\t     && gfc_compare_types (&ns->default_type[i+1],\n+\t\t\t\t   &ns->default_type[l]))\n+\ti++;\n+\n+      if (i > l)\n+\tfprintf (dumpfile, \" %c-%c: \", l+'A', i+'A');\n+      else\n+\tfprintf (dumpfile, \" %c: \", l+'A');\n \n-\t  show_typespec(&ns->default_type[l]);\n-\t  i++;\n-      } while (i < GFC_LETTERS);\n+      show_typespec(&ns->default_type[l]);\n+      i++;\n+    } while (i < GFC_LETTERS);\n \n-      if (ns->proc_name != NULL)\n-\t{\n-\t  show_indent ();\n-\t  fprintf (dumpfile, \"procedure name = %s\", ns->proc_name->name);\n-\t}\n+  if (ns->proc_name != NULL)\n+    {\n+      show_indent ();\n+      fprintf (dumpfile, \"procedure name = %s\", ns->proc_name->name);\n+    }\n \n-      ++show_level;\n-      gfc_current_ns = ns;\n-      gfc_traverse_symtree (ns->common_root, show_common);\n+  ++show_level;\n+  gfc_current_ns = ns;\n+  gfc_traverse_symtree (ns->common_root, show_common);\n \n-      gfc_traverse_symtree (ns->sym_root, show_symtree);\n+  gfc_traverse_symtree (ns->sym_root, show_symtree);\n \n-      for (op = GFC_INTRINSIC_BEGIN; op != GFC_INTRINSIC_END; op++)\n-\t{\n-\t  /* User operator interfaces */\n-\t  intr = ns->op[op];\n-\t  if (intr == NULL)\n-\t    continue;\n+  for (op = GFC_INTRINSIC_BEGIN; op != GFC_INTRINSIC_END; op++)\n+    {\n+      /* User operator interfaces */\n+      intr = ns->op[op];\n+      if (intr == NULL)\n+\tcontinue;\n \n-\t  show_indent ();\n-\t  fprintf (dumpfile, \"Operator interfaces for %s:\",\n-\t\t   gfc_op2string ((gfc_intrinsic_op) op));\n+      show_indent ();\n+      fprintf (dumpfile, \"Operator interfaces for %s:\",\n+\t       gfc_op2string ((gfc_intrinsic_op) op));\n \n-\t  for (; intr; intr = intr->next)\n-\t    fprintf (dumpfile, \" %s\", intr->sym->name);\n-\t}\n+      for (; intr; intr = intr->next)\n+\tfprintf (dumpfile, \" %s\", intr->sym->name);\n+    }\n \n-      if (ns->uop_root != NULL)\n-\t{\n-\t  show_indent ();\n-\t  fputs (\"User operators:\\n\", dumpfile);\n-\t  gfc_traverse_user_op (ns, show_uop);\n-\t}\n+  if (ns->uop_root != NULL)\n+    {\n+      show_indent ();\n+      fputs (\"User operators:\\n\", dumpfile);\n+      gfc_traverse_user_op (ns, show_uop);\n     }\n-  else\n-    ++show_level;\n   \n   for (eq = ns->equiv; eq; eq = eq->next)\n     show_equiv (eq);"}, {"sha": "e607e2debe5d2af47395f9886667a06cb861550e", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -1611,7 +1611,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n       gfc_add_expr_to_block (block, tmp);\n     }\n \n-  if (ts->type == BT_DERIVED)\n+  if (ts->type == BT_DERIVED && ts->u.derived->components)\n     {\n       gfc_component *cmp;\n \n@@ -2146,6 +2146,9 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       break;\n \n     case BT_DERIVED:\n+      if (ts->u.derived->components == NULL)\n+\treturn;\n+\n       /* Recurse into the elements of the derived type.  */\n       expr = gfc_evaluate_now (addr_expr, &se->pre);\n       expr = build_fold_indirect_ref_loc (input_location,\n@@ -2251,8 +2254,8 @@ gfc_trans_transfer (gfc_code * code)\n       if (expr->ref && !gfc_is_proc_ptr_comp (expr))\n \t{\n \t  for (ref = expr->ref; ref && ref->type != REF_ARRAY;\n-\t\t ref = ref->next);\n-\t  gcc_assert (ref->type == REF_ARRAY);\n+\t    ref = ref->next);\n+\t  gcc_assert (ref && ref->type == REF_ARRAY);\n \t}\n \n       if (expr->ts.type != BT_DERIVED"}, {"sha": "6365213b8f063682ef51e479d4a62ca3ac8b07b7", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2655fb3082182075b288b58c93ac563ef661a0/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=fc2655fb3082182075b288b58c93ac563ef661a0", "patch": "@@ -506,6 +506,7 @@ gfc_trans_runtime_check (bool error, bool once, tree cond, stmtblock_t * pblock,\n   gfc_add_expr_to_block (&block,\n \t\t\t trans_runtime_error_vararg (error, where,\n \t\t\t\t\t\t     msgid, ap));\n+  va_end (ap);\n \n   if (once)\n     gfc_add_modify (&block, tmpvar, boolean_false_node);"}]}