{"sha": "3994c6b11baaf85bd15199b0e1621430bf875859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk5NGM2YjExYmFhZjg1YmQxNTE5OWIwZTE2MjE0MzBiZjg3NTg1OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-24T06:39:20Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-24T06:39:20Z"}, "message": "gfortran.texi: Add second space after end-of-sentence period...\n\n2010-09-24  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.texi: Add second space after end-of-sentence period;\n        change / to /@/ to allow hyphenation of URLs.\n        (Standards): Remove duplicated OpenMP, update wording given that\n        Fortran 2008 now released.\n        (Fortran 2008 status): Update and add list of implemented features.\n\nFrom-SVN: r164584", "tree": {"sha": "c603a395118bec3d0d6dbf6136db630745d07215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c603a395118bec3d0d6dbf6136db630745d07215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3994c6b11baaf85bd15199b0e1621430bf875859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3994c6b11baaf85bd15199b0e1621430bf875859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3994c6b11baaf85bd15199b0e1621430bf875859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3994c6b11baaf85bd15199b0e1621430bf875859/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fd71fde8bf08fdbd7220791b0b411f1595bf810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd71fde8bf08fdbd7220791b0b411f1595bf810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd71fde8bf08fdbd7220791b0b411f1595bf810"}], "stats": {"total": 361, "additions": 221, "deletions": 140}, "files": [{"sha": "97875a5046f853b71a980529a8db47bbba4ee4fd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3994c6b11baaf85bd15199b0e1621430bf875859/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3994c6b11baaf85bd15199b0e1621430bf875859/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3994c6b11baaf85bd15199b0e1621430bf875859", "patch": "@@ -1,3 +1,11 @@\n+2010-09-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi: Add second space after end-of-sentence period;\n+\tchange / to /@/ to allow hyphenation of URLs.\n+\t(Standards): Remove duplicated OpenMP, update wording given that\n+\tFortran 2008 now released.\n+\t(Fortran 2008 status): Update and add list of implemented features.\n+\n 2010-09-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40571"}, {"sha": "540e2c8a3a7866677f8f3f9463d72844a17dffce", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 213, "deletions": 140, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3994c6b11baaf85bd15199b0e1621430bf875859/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3994c6b11baaf85bd15199b0e1621430bf875859/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=3994c6b11baaf85bd15199b0e1621430bf875859", "patch": "@@ -1,4 +1,4 @@\n-\\input texinfo  @c -*-texinfo-*-\n+\n @c %**start of header\n @setfilename gfortran.info\n @set copyrights-gfortran 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n@@ -158,7 +158,7 @@ Boston, MA 02110-1301, USA@*\n @cindex Introduction\n \n This manual documents the use of @command{gfortran}, \n-the GNU Fortran compiler. You can find in this manual how to invoke\n+the GNU Fortran compiler.  You can find in this manual how to invoke\n @command{gfortran}, as well as its features and incompatibilities.\n \n @ifset DEVELOPMENT\n@@ -208,7 +208,7 @@ Part II: Language Reference\n @c The following duplicates the text on the TexInfo table of contents.\n @iftex\n This manual documents the use of @command{gfortran}, the GNU Fortran\n-compiler. You can find in this manual how to invoke @command{gfortran},\n+compiler.  You can find in this manual how to invoke @command{gfortran},\n as well as its features and incompatibilities.\n \n @ifset DEVELOPMENT\n@@ -243,7 +243,7 @@ or alternative to, the unix @command{f95} command;\n \n The GNU Fortran compiler supports the Fortran 77, 90 and 95 standards\n completely, parts of the Fortran 2003 and Fortran 2008 standards, and\n-several vendor extensions. The development goal is to provide the\n+several vendor extensions.  The development goal is to provide the\n following features:\n \n @itemize @bullet\n@@ -364,11 +364,11 @@ Functionally, this is implemented with a driver program (@command{gcc})\n which provides the command-line interface for the compiler.  It calls\n the relevant compiler front-end program (e.g., @command{f951} for\n Fortran) for each file in the source code, and then calls the assembler\n-and linker as appropriate to produce the compiled output. In a copy of\n+and linker as appropriate to produce the compiled output.  In a copy of\n GCC which has been compiled with Fortran language support enabled,\n @command{gcc} will recognize files with @file{.f}, @file{.for}, @file{.ftn},\n @file{.f90}, @file{.f95}, @file{.f03} and @file{.f08} extensions as\n-Fortran source code, and compile it accordingly. A @command{gfortran}\n+Fortran source code, and compile it accordingly.  A @command{gfortran}\n driver program is also provided, which is identical to @command{gcc}\n except that it automatically links the Fortran runtime libraries into the\n compiled program.\n@@ -378,7 +378,7 @@ Source files with @file{.f}, @file{.for}, @file{.fpp}, @file{.ftn}, @file{.F},\n Source files with @file{.f90}, @file{.f95}, @file{.f03}, @file{.f08},\n @file{.F90}, @file{.F95}, @file{.F03} and @file{.F08} extensions are\n treated as free form.  The capitalized versions of either form are run\n-through preprocessing. Source files with the lower case @file{.fpp}\n+through preprocessing.  Source files with the lower case @file{.fpp}\n extension are also run through preprocessing.\n \n This manual specifically documents the Fortran front end, which handles\n@@ -404,28 +404,28 @@ Fortran compiler.\n \n Many Fortran compilers including GNU Fortran allow passing the source code\n through a C preprocessor (CPP; sometimes also called the Fortran preprocessor,\n-FPP) to allow for conditional compilation. In the case of GNU Fortran,\n-this is the GNU C Preprocessor in the traditional mode. On systems with\n+FPP) to allow for conditional compilation.  In the case of GNU Fortran,\n+this is the GNU C Preprocessor in the traditional mode.  On systems with\n case-preserving file names, the preprocessor is automatically invoked if the\n-filename extension is @code{.F}, @code{.FOR}, @code{.FTN}, @code{.fpp},\n-@code{.FPP}, @code{.F90}, @code{.F95}, @code{.F03} or @code{.F08}. To manually\n+filename extension is @file{.F}, @file{.FOR}, @file{.FTN}, @file{.fpp},\n+@file{.FPP}, @file{.F90}, @file{.F95}, @file{.F03} or @file{.F08}.  To manually\n invoke the preprocessor on any file, use @option{-cpp}, to disable\n preprocessing on files where the preprocessor is run automatically, use\n @option{-nocpp}.\n \n If a preprocessed file includes another file with the Fortran @code{INCLUDE}\n-statement, the included file is not preprocessed. To preprocess included\n+statement, the included file is not preprocessed.  To preprocess included\n files, use the equivalent preprocessor statement @code{#include}.\n \n If GNU Fortran invokes the preprocessor, @code{__GFORTRAN__}\n is defined and @code{__GNUC__}, @code{__GNUC_MINOR__} and\n @code{__GNUC_PATCHLEVEL__} can be used to determine the version of the\n-compiler. See @ref{Top,,Overview,cpp,The C Preprocessor} for details.\n+compiler.  See @ref{Top,,Overview,cpp,The C Preprocessor} for details.\n \n While CPP is the de-facto standard for preprocessing Fortran code,\n Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines\n Conditional Compilation, which is not widely used and not directly\n-supported by the GNU Fortran compiler. You can use the program coco\n+supported by the GNU Fortran compiler.  You can use the program coco\n to preprocess such files (@uref{http://www.daniellnagle.com/coco.html}).\n \n \n@@ -474,9 +474,8 @@ standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs,\n including a number of standard and non-standard extensions, and can be\n used on real-world programs.  In particular, the supported extensions\n include OpenMP, Cray-style pointers, and several Fortran 2003 and Fortran\n-2008 features such as enumeration, stream I/O, and some of the\n-enhancements to allocatable array support from TR 15581.  However, it is\n-still under development and has a few remaining rough edges.\n+2008 features, including TR 15581.  However, it is still under\n+development and has a few remaining rough edges.\n \n At present, the GNU Fortran compiler passes the\n @uref{http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html, \n@@ -491,7 +490,7 @@ large real-world programs, including\n @uref{http://mysite.verizon.net/serveall/moene.pdf, the HIRLAM\n weather-forecasting code} and\n @uref{http://www.theochem.uwa.edu.au/tonto/, the Tonto quantum \n-chemistry package}; see @url{http://gcc.gnu.org/wiki/GfortranApps} for an\n+chemistry package}; see @url{http://gcc.gnu.org/@/wiki/@/GfortranApps} for an\n extended list.\n \n Among other things, the GNU Fortran compiler is intended as a replacement\n@@ -521,25 +520,17 @@ future standards---in particular, Fortran 2003 and Fortran 2008.\n The GNU Fortran compiler implements\n ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n-the ISO/IEC TR-15581 enhancements to allocatable arrays, and\n-the @uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n-OpenMP Application Program Interface v2.5} specification.\n+the ISO/IEC TR-15581 enhancements to allocatable arrays.\n \n In the future, the GNU Fortran compiler will also support ISO/IEC\n-1539-1:2004 (Fortran 2003) and future Fortran standards. Partial support\n-of that standard is already provided; the current status of Fortran 2003\n-support is reported in the @ref{Fortran 2003 status} section of the\n-documentation.\n-\n-The next version of the Fortran standard (Fortran 2008) is currently\n-being developed and the GNU Fortran compiler supports some of its new\n-features. This support is based on the latest draft of the standard\n-(available from @url{http://www.nag.co.uk/sc22wg5/}) and no guarantee of\n-future compatibility is made, as the final standard might differ from the\n-draft. For more information, see the @ref{Fortran 2008 status} section.\n+1539-1:2004 (Fortran 2003), ISO/IEC 1539-1:2010 (Fortran 2008) and\n+future Fortran standards.  Partial support of the Fortran 2003 and\n+Fortran 2008 standard is already provided; the current status of the\n+support is reported in the @ref{Fortran 2003 status} and\n+@ref{Fortran 2008 status} sections of the documentation.\n \n Additionally, the GNU Fortran compilers supports the OpenMP specification\n-(version 3.0, @url{http://openmp.org/wp/openmp-specifications/}).\n+(version 3.0, @url{http://openmp.org/@/wp/@/openmp-specifications/}).\n \n @node Varying Length Character Strings\n @subsection Varying Length Character Strings\n@@ -548,9 +539,9 @@ Additionally, the GNU Fortran compilers supports the OpenMP specification\n @cindex strings, varying length\n \n The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000)\n-varying length character strings. While GNU Fortran currently does not\n+varying length character strings.  While GNU Fortran currently does not\n support such strings directly, there exist two Fortran implementations\n-for them, which work with GNU Fortran. They can be found at\n+for them, which work with GNU Fortran.  They can be found at\n @uref{http://www.fortran.com/@/iso_varying_string.f95} and at\n @uref{ftp://ftp.nag.co.uk/@/sc22wg5/@/ISO_VARYING_STRING/}.\n \n@@ -627,7 +618,7 @@ The default value is 0.\n \n This environment variable controls where library output is sent.\n If the first letter is @samp{y}, @samp{Y} or @samp{1}, standard\n-error is used. If the first letter is @samp{n}, @samp{N} or\n+error is used.  If the first letter is @samp{n}, @samp{N} or\n @samp{0}, standard output is used.\n \n @node GFORTRAN_TMPDIR\n@@ -643,7 +634,7 @@ If these are missing, the default is @file{/tmp}.\n \n This environment variable controls whether all I/O is unbuffered.  If\n the first letter is @samp{y}, @samp{Y} or @samp{1}, all I/O is\n-unbuffered. This will slow down small sequential reads and writes.  If\n+unbuffered.  This will slow down small sequential reads and writes.  If\n the first letter is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.\n This is the default.\n \n@@ -652,7 +643,7 @@ This is the default.\n \n The environment variable named @env{GFORTRAN_UNBUFFERED_PRECONNECTED} controls\n whether I/O on a preconnected unit (i.e.@: STDOUT or STDERR) is unbuffered.  If \n-the first letter is @samp{y}, @samp{Y} or @samp{1}, I/O is unbuffered. This\n+the first letter is @samp{y}, @samp{Y} or @samp{1}, I/O is unbuffered.  This\n will slow down small sequential reads and writes.  If the first letter\n is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.  This is the default.\n \n@@ -662,7 +653,7 @@ is @samp{n}, @samp{N} or @samp{0}, I/O is buffered.  This is the default.\n If the first letter is @samp{y}, @samp{Y} or @samp{1}, filename and\n line numbers for runtime errors are printed.  If the first letter is\n @samp{n}, @samp{N} or @samp{0}, don't print filename and line numbers\n-for runtime errors. The default is to print the location.\n+for runtime errors.  The default is to print the location.\n \n @node GFORTRAN_OPTIONAL_PLUS\n @section @env{GFORTRAN_OPTIONAL_PLUS}---Print leading + where permitted\n@@ -671,7 +662,7 @@ If the first letter is @samp{y}, @samp{Y} or @samp{1},\n a plus sign is printed\n where permitted by the Fortran standard.  If the first letter\n is @samp{n}, @samp{N} or @samp{0}, a plus sign is not printed\n-in most cases. Default is not to print plus signs.\n+in most cases.  Default is not to print plus signs.\n \n @node GFORTRAN_DEFAULT_RECL\n @section @env{GFORTRAN_DEFAULT_RECL}---Default record length for new files\n@@ -768,8 +759,8 @@ users who do not have the source code of their program available.\n \n If the @env{GFORTRAN_ERROR_DUMPCORE} variable is set to\n @samp{y}, @samp{Y} or @samp{1} (only the first letter is relevant)\n-then library run-time errors cause core dumps. To disable the core\n-dumps, set the variable to @samp{n}, @samp{N}, @samp{0}. Default\n+then library run-time errors cause core dumps.  To disable the core\n+dumps, set the variable to @samp{n}, @samp{N}, @samp{0}.  Default\n is not to core dump unless the @option{-fdump-core} compile option\n was used.\n \n@@ -780,7 +771,7 @@ If the @env{GFORTRAN_ERROR_BACKTRACE} variable is set to\n @samp{y}, @samp{Y} or @samp{1} (only the first letter is relevant)\n then a backtrace is printed when a run-time error occurs.\n To disable the backtracing, set the variable to\n-@samp{n}, @samp{N}, @samp{0}. Default is not to print a backtrace\n+@samp{n}, @samp{N}, @samp{0}.  Default is not to print a backtrace\n unless the @option{-fbacktrace} compile option\n was used.\n \n@@ -820,7 +811,7 @@ Intrinsics @code{command_argument_count}, @code{get_command},\n @item \n @cindex array, constructors\n @cindex @code{[...]}\n-Array constructors using square brackets. That is, @code{[...]} rather\n+Array constructors using square brackets.  That is, @code{[...]} rather\n than @code{(/.../)}.  Type-specification for array constructors like\n @code{(/ some-type :: ... /)}.\n \n@@ -938,21 +929,103 @@ Extension of derived-types (the @code{EXTENDS(...)} syntax).\n @node Fortran 2008 status\n @section Fortran 2008 status\n \n-The next version of the Fortran standard after Fortran 2003 is currently\n-being worked on by the Working Group 5 of Sub-Committee 22 of the Joint\n-Technical Committee 1 of the International Organization for\n-Standardization (ISO) and the International Electrotechnical Commission\n-(IEC). This group is known as @uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n-The next revision of the Fortran standard is informally referred to as\n-Fortran 2008, reflecting its planned release year. The GNU Fortran\n-compiler has support for some of the new features in Fortran 2008. This\n-support is based on the latest draft, available from\n-@url{http://www.nag.co.uk/sc22wg5/}. However, as the final standard may\n-differ from the drafts, no guarantee of backward compatibility can be\n-made and you should only use it for experimental purposes.\n+The latest version of the Fortran standard is ISO/IEC 1539-1:2010, informally\n+known as Fortran 2008.  The official version is available from International\n+Organization for Standardization (ISO) or its national member organizations.\n+The the final draft (FDIS) can be downloaded free of charge from\n+@url{http://www.nag.co.uk/@/sc22wg5/@/links.html}.  Fortran is developed by the\n+Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the\n+International Organization for Standardization and the International\n+Electrotechnical Commission (IEC).  This group is known as\n+@uref{http://www.nag.co.uk/sc22wg5/, WG5}.\n+\n+The GNU Fortran supports several of the new features of Fortran 2008; the\n+@uref{http://gcc.gnu.org/wiki/Fortran2008Status, wiki} has some information\n+about the current Fortran 2008 implementation status.  In particular, the\n+following is implemented.\n+\n+@itemize\n+@item The @option{-std=f2008} option and support for the file extensions \n+@file{.f08} and @file{.F08}.\n+\n+@item The @code{OPEN} statement now supports the @code{NEWUNIT=} option,\n+which returns a unique file unit, thus preventing inadvertent use of the\n+same unit in different parts of the program.\n+\n+@item The @code{g0} format descriptor and unlimited format items.\n+\n+@item The mathematical intrinsics @code{ASINH}, @code{ACOSH}, @code{ATANH},\n+@code{ERF}, @code{ERFC}, @code{GAMMA}, @code{LOG_GAMMA}, @code{BESSEL_J0},\n+@code{BESSEL_J1}, @code{BESSEL_JN}, @code{BESSEL_Y0}, @code{BESSEL_Y1},\n+@code{BESSEL_YN}, @code{HYPOT}, @code{NORM2}, and @code{ERFC_SCALED}.\n+\n+@item Using complex arguments with @code{TAN}, @code{SINH}, @code{COSH},\n+@code{TANH}, @code{ASIN}, @code{ACOS}, and @code{ATAN} is now possible;\n+@code{ATAN}(@var{Y},@var{X}) is now an alias for @code{ATAN2}(@var{Y},@var{X}).\n+\n+@item Support of the @code{PARITY} intrinsic functions.\n+\n+@item The following bit intrinsics: @code{LEADZ} and @code{TRAILZ} for\n+counting the number of leading and trailing zero bits, @code{POPCNT} and\n+@code{POPPAR} for counting the number of one bits and returning the parity;\n+@code{BGE}, @code{BGT}, @code{BLE}, and @code{BLT} for bitwise comparisons;\n+@code{DSHIFTL} and @code{DSHIFTR} for combined left and right shifts,\n+@code{MASKL} and @code{MASKR} for simple left and right justified masks,\n+@code{MERGE_BITS} for a bitwise merge using a mask, @code{SHIFTA},\n+@code{SHIFTL} and @code{SHIFTR} for shift operations, and the\n+transformational bit intrinsics @code{IALL}, @code{IANY} and @code{IPARITY}.\n+\n+@item Support of the @code{EXECUTE_COMMAND_LINE} intrinsic subroutine.\n+\n+@item Support for the @code{STORAGE_SIZE} intrinsic inquiry function.\n+\n+@item The @code{INT@{8,16,32@}} and @code{REAL@{32,64,128@}} kind type\n+parameters of the intrinsic module @code{ISO_FORTRAN_ENV}.\n+\n+@item Experimental coarray support (for one image only), use the\n+@option{-fcoarray=single} flag to enable it.\n+\n+@item The @code{BLOCK} construct is supported.\n+\n+@item The @code{STOP} and the new @code{ERROR STOP} statements now\n+support all constant expressions.\n+\n+@item Support for the @code{CONTIGUOUS} attribute.\n+\n+@item Support for @code{ALLOCATE} with @code{MOLD}.\n+\n+@item Support for the @code{IMPURE} attribute for procedures, which\n+allows for @code{ELEMENTAL} procedures without the restrictions of\n+@code{PURE}.\n+\n+@item Null pointers (including @code{NULL()}) and not-allocated variables\n+can be used as actual argument to optional non-pointer, non-allocatable\n+dummy arguments, denoting an absent argument.\n+\n+@item Non-pointer variables with @code{TARGET} attribute can be used as\n+actual argument to @code{POINTER} dummies with @code{INTENT(IN)}.\n+\n+@item Pointers including procedure pointers and those in a derived\n+type (pointer components) can now be initialized by a target instead\n+of only by @code{NULL}.\n+\n+@item The @code{EXIT} statement (with construct-name) can be now be\n+used to leave not only the @code{DO} but also the @code{ASSOCIATE},\n+@code{BLOCK}, @code{IF}, @code{SELECT CASE} and @code{SELECT TYPE}\n+constructs.\n+\n+@item Internal procedures can now be used as actual argument.\n+\n+@item Minor features: obsolesce diagnostics for @code{ENTRY} with\n+@option{-std=f2008}; a line may start with a semicolon; for internal\n+and module procedures @code{END} can be used instead of\n+@code{END SUBROUTINE} and @code{END FUNCTION}; @code{SELECTED_REAL_KIND}\n+now also takes a @code{RADIX} argument; intrinsic types are supported\n+for @code{TYPE}(@var{intrinsic-type-spec}); multiple type-bound procedures\n+can be declared in a single @code{PROCEDURE} statement; implied-shape\n+arrays are supported for named constants (@code{PARAMETER}).\n+@end itemize\n \n-The @uref{http://gcc.gnu.org/wiki/Fortran2008Status, wiki} has some information\n-about the current Fortran 2008 implementation status.\n \n \n @c ---------------------------------------------------------------------\n@@ -1025,7 +1098,7 @@ as follows.\n A @code{LOGICAL(KIND=N)} variable is represented as an\n @code{INTEGER(KIND=N)} variable, however, with only two permissible\n values: @code{1} for @code{.TRUE.} and @code{0} for\n-@code{.FALSE.}. Any other integer value results in undefined behavior.\n+@code{.FALSE.}.  Any other integer value results in undefined behavior.\n \n Note that for mixed-language programming using the\n @code{ISO_C_BINDING} feature, there is a @code{C_BOOL} kind that can\n@@ -1067,7 +1140,7 @@ extensions.\n @cindex extensions, implemented\n \n GNU Fortran implements a number of extensions over standard\n-Fortran. This chapter contains information on their syntax and\n+Fortran.  This chapter contains information on their syntax and\n meaning.  There are currently two categories of GNU Fortran\n extensions, those that provide functionality beyond that provided\n by any standard, and those that are supported by GNU Fortran\n@@ -1101,7 +1174,7 @@ without warning.\n @subsection Old-style kind specifications\n @cindex kind, old-style\n \n-GNU Fortran allows old-style kind specifications in declarations. These\n+GNU Fortran allows old-style kind specifications in declarations.  These\n look like:\n @smallexample\n       TYPESPEC*size x,y,z\n@@ -1182,7 +1255,7 @@ $END\n It should be noted that the default terminator is @samp{/} rather than\n @samp{&END}.\n \n-Querying of the namelist when inputting from stdin. After at least\n+Querying of the namelist when inputting from stdin.  After at least\n one space, entering @samp{?} sends to stdout the namelist name and the names of\n the variables in the namelist:\n @smallexample\n@@ -1282,15 +1355,15 @@ of the @code{READ} statement, and the output item lists of the\n @cindex BOZ literal constants\n \n Besides decimal constants, Fortran also supports binary (@code{b}),\n-octal (@code{o}) and hexadecimal (@code{z}) integer constants. The\n+octal (@code{o}) and hexadecimal (@code{z}) integer constants.  The\n syntax is: @samp{prefix quote digits quote}, were the prefix is\n either @code{b}, @code{o} or @code{z}, quote is either @code{'} or\n @code{\"} and the digits are for binary @code{0} or @code{1}, for\n octal between @code{0} and @code{7}, and for hexadecimal between\n-@code{0} and @code{F}. (Example: @code{b'01011101'}.)\n+@code{0} and @code{F}.  (Example: @code{b'01011101'}.)\n \n Up to Fortran 95, BOZ literals were only allowed to initialize\n-integer variables in DATA statements. Since Fortran 2003 BOZ literals\n+integer variables in DATA statements.  Since Fortran 2003 BOZ literals\n are also allowed as argument of @code{REAL}, @code{DBLE}, @code{INT}\n and @code{CMPLX}; the result is the same as if the integer BOZ\n literal had been converted by @code{TRANSFER} to, respectively,\n@@ -1300,7 +1373,7 @@ As GNU Fortran extension the intrinsic procedures @code{FLOAT},\n \n As an extension, GNU Fortran allows hexadecimal BOZ literal constants to\n be specified using the @code{X} prefix, in addition to the standard\n-@code{Z} prefix. The BOZ literal can also be specified by adding a\n+@code{Z} prefix.  The BOZ literal can also be specified by adding a\n suffix to the string, for example, @code{Z'ABC'} and @code{'ABC'Z} are\n equivalent.\n \n@@ -1310,7 +1383,7 @@ In DATA statements, in direct assignments, where the right-hand side\n only contains a BOZ literal constant, and for old-style initializers of\n the form @code{integer i /o'0173'/}, the constant is transferred\n as if @code{TRANSFER} had been used; for @code{COMPLEX} numbers, only\n-the real part is initialized unless @code{CMPLX} is used. In all other\n+the real part is initialized unless @code{CMPLX} is used.  In all other\n cases, the BOZ literal constant is converted to an @code{INTEGER} value with\n the largest decimal representation.  This value is then converted\n numerically to the type and kind of the variable in question.\n@@ -1494,10 +1567,10 @@ example:\n         ipt = loc(target)\n @end smallexample\n As long as @code{ipt} remains unchanged, @code{iarr} is now an alias for\n-@code{target}. The optimizer, however, will not detect this aliasing, so\n+@code{target}.  The optimizer, however, will not detect this aliasing, so\n it is unsafe to use @code{iarr} and @code{target} simultaneously.  Using\n a pointee in any way that violates the Fortran aliasing rules or\n-assumptions is illegal. It is the user's responsibility to avoid doing\n+assumptions is illegal.  It is the user's responsibility to avoid doing\n this; the compiler works under the assumption that no such aliasing\n occurs.\n \n@@ -1513,10 +1586,10 @@ will ``incorrectly'' optimize code with illegal aliasing.)\n There are a number of restrictions on the attributes that can be applied\n to Cray pointers and pointees.  Pointees may not have the\n @code{ALLOCATABLE}, @code{INTENT}, @code{OPTIONAL}, @code{DUMMY},\n-@code{TARGET}, @code{INTRINSIC}, or @code{POINTER} attributes. Pointers\n+@code{TARGET}, @code{INTRINSIC}, or @code{POINTER} attributes.  Pointers\n may not have the @code{DIMENSION}, @code{POINTER}, @code{TARGET},\n @code{ALLOCATABLE}, @code{EXTERNAL}, or @code{INTRINSIC} attributes, nor\n-may they be function results. Pointees may not occur in more than one\n+may they be function results.  Pointees may not occur in more than one\n pointer statement.  A pointee cannot be a pointer.  Pointees cannot occur\n in equivalence, common, or data statements.\n \n@@ -1610,7 +1683,7 @@ free-form source code; the @code{c$omp}, @code{*$omp} and @code{!$omp}\n directives in fixed form; the @code{!$} conditional compilation sentinels\n in free form; and the @code{c$}, @code{*$} and @code{!$} sentinels\n in fixed form, @command{gfortran} needs to be invoked with the\n-@option{-fopenmp}. This also arranges for automatic linking of the\n+@option{-fopenmp}.  This also arranges for automatic linking of the\n GNU OpenMP runtime library @ref{Top,,libgomp,libgomp,GNU OpenMP\n runtime library}.\n \n@@ -1636,16 +1709,16 @@ Please note:\n @itemize\n @item\n @option{-fopenmp} implies @option{-frecursive}, i.e., all local arrays\n-will be allocated on the stack. When porting existing code to OpenMP,\n+will be allocated on the stack.  When porting existing code to OpenMP,\n this may lead to surprising results, especially to segmentation faults\n if the stacksize is limited.\n \n @item\n On glibc-based systems, OpenMP enabled applications cannot be statically\n-linked due to limitations of the underlying pthreads-implementation. It\n+linked due to limitations of the underlying pthreads-implementation.  It\n might be possible to get a working solution if \n @command{-Wl,--whole-archive -lpthread -Wl,--no-whole-archive} is added\n-to the command line. However, this is not supported by @command{gcc} and\n+to the command line.  However, this is not supported by @command{gcc} and\n thus not recommended.\n @end itemize\n \n@@ -1660,9 +1733,9 @@ GNU Fortran supports argument list functions @code{%VAL}, @code{%REF}\n and @code{%LOC} statements, for backward compatibility with g77. \n It is recommended that these should be used only for code that is \n accessing facilities outside of GNU Fortran, such as operating system \n-or windowing facilities. It is best to constrain such uses to isolated \n+or windowing facilities.  It is best to constrain such uses to isolated \n portions of a program--portions that deal specifically and exclusively \n-with low-level, system-dependent facilities. Such portions might well \n+with low-level, system-dependent facilities.  Such portions might well \n provide a portable interface for use by the program as a whole, but are \n themselves not portable, and should be thoroughly tested each time they \n are rebuilt using a new compiler or version of a compiler.\n@@ -1731,7 +1804,7 @@ code that uses them running with the GNU Fortran compiler.\n \n Structures are user-defined aggregate data types; this functionality was\n standardized in Fortran 90 with an different syntax, under the name of\n-``derived types''. Here is an example of code using the non portable\n+``derived types''.  Here is an example of code using the non portable\n structure syntax:\n \n @example\n@@ -1809,7 +1882,7 @@ GNU Fortran doesn't support the @code{ENCODE} and @code{DECODE}\n statements.  These statements are best replaced by @code{READ} and\n @code{WRITE} statements involving internal files (@code{CHARACTER}\n variables and arrays), which have been part of the Fortran standard since\n-Fortran 77. For example, replace a code fragment like\n+Fortran 77.  For example, replace a code fragment like\n \n @smallexample\n       INTEGER*1 LINE(80)\n@@ -1857,10 +1930,10 @@ c     ... Code that sets A, B and C\n @cindex @code{FORMAT}\n \n A variable @code{FORMAT} expression is format statement which includes\n-angle brackets enclosing a Fortran expression: @code{FORMAT(I<N>)}. GNU\n-Fortran does not support this legacy extension. The effect of variable\n+angle brackets enclosing a Fortran expression: @code{FORMAT(I<N>)}.  GNU\n+Fortran does not support this legacy extension.  The effect of variable\n format expressions can be reproduced by using the more powerful (and\n-standard) combination of internal output and string formats. For example,\n+standard) combination of internal output and string formats.  For example,\n replace a code fragment like this:\n \n @smallexample\n@@ -1901,8 +1974,8 @@ c\n \n Some Fortran compilers, including @command{g77}, let the user declare\n complex functions with the syntax @code{COMPLEX FUNCTION name*16()}, as\n-well as @code{COMPLEX*16 FUNCTION name()}. Both are non-standard, legacy\n-extensions. @command{gfortran} accepts the latter form, which is more\n+well as @code{COMPLEX*16 FUNCTION name()}.  Both are non-standard, legacy\n+extensions.  @command{gfortran} accepts the latter form, which is more\n common, but not the former.\n \n \n@@ -1923,7 +1996,7 @@ common, but not the former.\n @end menu\n \n This chapter is about mixed-language interoperability, but also applies\n-if one links Fortran code compiled by different compilers. In most cases,\n+if one links Fortran code compiled by different compilers.  In most cases,\n use of the C Binding features of the Fortran 2003 standard is sufficient,\n and their use is highly recommended.\n \n@@ -1943,34 +2016,34 @@ and their use is highly recommended.\n Since Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a\n standardized way to generate procedure and derived-type\n declarations and global variables which are interoperable with C\n-(ISO/IEC 9899:1999). The @code{bind(C)} attribute has been added\n+(ISO/IEC 9899:1999).  The @code{bind(C)} attribute has been added\n to inform the compiler that a symbol shall be interoperable with C;\n-also, some constraints are added. Note, however, that not\n-all C features have a Fortran equivalent or vice versa. For instance,\n+also, some constraints are added.  Note, however, that not\n+all C features have a Fortran equivalent or vice versa.  For instance,\n neither C's unsigned integers nor C's functions with variable number\n of arguments have an equivalent in Fortran.\n \n Note that array dimensions are reversely ordered in C and that arrays in\n C always start with index 0 while in Fortran they start by default with\n-1. Thus, an array declaration @code{A(n,m)} in Fortran matches\n+1.  Thus, an array declaration @code{A(n,m)} in Fortran matches\n @code{A[m][n]} in C and accessing the element @code{A(i,j)} matches\n-@code{A[j-1][i-1]}. The element following @code{A(i,j)} (C: @code{A[j-1][i-1]};\n+@code{A[j-1][i-1]}.  The element following @code{A(i,j)} (C: @code{A[j-1][i-1]};\n assuming @math{i < n}) in memory is @code{A(i+1,j)} (C: @code{A[j-1][i]}).\n \n @node Intrinsic Types\n @subsection Intrinsic Types\n \n In order to ensure that exactly the same variable type and kind is used\n in C and Fortran, the named constants shall be used which are defined in the\n-@code{ISO_C_BINDING} intrinsic module. That module contains named constants\n+@code{ISO_C_BINDING} intrinsic module.  That module contains named constants\n for kind parameters and character named constants for the escape sequences\n-in C. For a list of the constants, see @ref{ISO_C_BINDING}.\n+in C.  For a list of the constants, see @ref{ISO_C_BINDING}.\n \n @node Derived Types and struct\n @subsection Derived Types and struct\n \n For compatibility of derived types with @code{struct}, one needs to use\n-the @code{BIND(C)} attribute in the type declaration. For instance, the\n+the @code{BIND(C)} attribute in the type declaration.  For instance, the\n following type declaration\n \n @smallexample\n@@ -1999,8 +2072,8 @@ matches the following @code{struct} declaration in C\n \n Derived types with the C binding attribute shall not have the @code{sequence}\n attribute, type parameters, the @code{extends} attribute, nor type-bound\n-procedures. Every component must be of interoperable type and kind and may not\n-have the @code{pointer} or @code{allocatable} attribute. The names of the\n+procedures.  Every component must be of interoperable type and kind and may not\n+have the @code{pointer} or @code{allocatable} attribute.  The names of the\n variables are irrelevant for interoperability.\n \n As there exist no direct Fortran equivalents, neither unions nor structs\n@@ -2010,7 +2083,7 @@ with bit field or variable-length array members are interoperable.\n @subsection Interoperable Global Variables\n \n Variables can be made accessible from C using the C binding attribute,\n-optionally together with specifying a binding name. Those variables\n+optionally together with specifying a binding name.  Those variables\n have to be declared in the declaration part of a @code{MODULE},\n be of interoperable type, and have neither the @code{pointer} nor\n the @code{allocatable} attribute.\n@@ -2026,22 +2099,22 @@ the @code{allocatable} attribute.\n \n Here, @code{_MyProject_flags} is the case-sensitive name of the variable\n as seen from C programs while @code{global_flag} is the case-insensitive\n-name as seen from Fortran. If no binding name is specified, as for\n+name as seen from Fortran.  If no binding name is specified, as for\n @var{tp}, the C binding name is the (lowercase) Fortran binding name.\n If a binding name is specified, only a single variable may be after the\n-double colon. Note of warning: You cannot use a global variable to\n+double colon.  Note of warning: You cannot use a global variable to\n access @var{errno} of the C library as the C standard allows it to be\n-a macro. Use the @code{IERRNO} intrinsic (GNU extension) instead.\n+a macro.  Use the @code{IERRNO} intrinsic (GNU extension) instead.\n \n @node Interoperable Subroutines and Functions\n @subsection Interoperable Subroutines and Functions\n \n Subroutines and functions have to have the @code{BIND(C)} attribute to\n-be compatible with C. The dummy argument declaration is relatively\n-straightforward. However, one needs to be careful because C uses\n+be compatible with C.  The dummy argument declaration is relatively\n+straightforward.  However, one needs to be careful because C uses\n call-by-value by default while Fortran behaves usually similar to\n-call-by-reference. Furthermore, strings and pointers are handled\n-differently. Note that only explicit size and assumed-size arrays are\n+call-by-reference.  Furthermore, strings and pointers are handled\n+differently.  Note that only explicit size and assumed-size arrays are\n supported but not assumed-shape or allocatable arrays.\n \n To pass a variable by value, use the @code{VALUE} attribute.\n@@ -2063,10 +2136,10 @@ matches the Fortran declaration\n Note that pointer arguments also frequently need the @code{VALUE} attribute,\n see @ref{Working with Pointers}.\n \n-Strings are handled quite differently in C and Fortran. In C a string\n+Strings are handled quite differently in C and Fortran.  In C a string\n is a @code{NUL}-terminated array of characters while in Fortran each string\n has a length associated with it and is thus not terminated (by e.g.\n-@code{NUL}). For example, if one wants to use the following C function,\n+@code{NUL}).  For example, if one wants to use the following C function,\n \n @smallexample\n   #include <stdio.h>\n@@ -2090,13 +2163,13 @@ to print ``Hello World'' from Fortran, one can call it using\n @end smallexample\n \n As the example shows, one needs to ensure that the\n-string is @code{NUL} terminated. Additionally, the dummy argument\n+string is @code{NUL} terminated.  Additionally, the dummy argument\n @var{string} of @code{print_C} is a length-one assumed-size\n-array; using @code{character(len=*)} is not allowed. The example\n+array; using @code{character(len=*)} is not allowed.  The example\n above uses @code{c_char_\"Hello World\"} to ensure the string\n literal has the right type; typically the default character\n kind and @code{c_char} are the same and thus @code{\"Hello World\"}\n-is equivalent. However, the standard does not guarantee this.\n+is equivalent.  However, the standard does not guarantee this.\n \n The use of strings is now further illustrated using the C library\n function @code{strncpy}, whose prototype is\n@@ -2106,7 +2179,7 @@ function @code{strncpy}, whose prototype is\n @end smallexample\n \n The function @code{strncpy} copies at most @var{n} characters from\n-string @var{s2} to @var{s1} and returns @var{s1}. In the following\n+string @var{s2} to @var{s1} and returns @var{s1}.  In the following\n example, we ignore the return value:\n \n @smallexample\n@@ -2136,7 +2209,7 @@ The intrinsic procedures are described in @ref{Intrinsic Procedures}.\n @subsection Working with Pointers\n \n C pointers are represented in Fortran via the special opaque derived type\n-@code{type(c_ptr)} (with private components). Thus one needs to\n+@code{type(c_ptr)} (with private components).  Thus one needs to\n use intrinsic conversion procedures to convert from or to C pointers.\n For example,\n \n@@ -2284,16 +2357,16 @@ END MODULE m\n @subsection Further Interoperability of Fortran with C\n \n Assumed-shape and allocatable arrays are passed using an array descriptor\n-(dope vector). The internal structure of the array descriptor used\n-by GNU Fortran is not yet documented and will change. There will also be\n+(dope vector).  The internal structure of the array descriptor used\n+by GNU Fortran is not yet documented and will change.  There will also be\n a Technical Report (TR 29113) which standardizes an interoperable\n-array descriptor. Until then, you can use the Chasm Language\n+array descriptor.  Until then, you can use the Chasm Language\n Interoperability Tools, @url{http://chasm-interop.sourceforge.net/},\n which provide an interface to GNU Fortran's array descriptor.\n \n The technical report 29113 will presumably also include support for\n C-interoperable @code{OPTIONAL} and for assumed-rank and assumed-type\n-dummy arguments. However, the TR has neither been approved nor implemented\n+dummy arguments.  However, the TR has neither been approved nor implemented\n in GNU Fortran; therefore, these features are not yet available.\n \n \n@@ -2302,10 +2375,10 @@ in GNU Fortran; therefore, these features are not yet available.\n @section GNU Fortran Compiler Directives\n \n The Fortran standard standard describes how a conforming program shall\n-behave; however, the exact implementation is not standardized. In order\n+behave; however, the exact implementation is not standardized.  In order\n to allow the user to choose specific implementation details, compiler\n directives can be used to set attributes of variables and procedures\n-which are not part of the standard. Whether a given attribute is\n+which are not part of the standard.  Whether a given attribute is\n supported and its exact effects depend on both the operating system and\n on the processor; see\n @ref{Top,,C Extensions,gcc,Using the GNU Compiler Collection (GCC)}\n@@ -2323,13 +2396,13 @@ instead using the stack\n \n Besides changing the calling convention, the attributes also influence\n the decoration of the symbol name, e.g., by a leading underscore or by\n-a trailing at-sign followed by the number of bytes on the stack. When\n+a trailing at-sign followed by the number of bytes on the stack.  When\n assigning a procedure to a procedure pointer, both should use the same\n calling convention.\n \n On some systems, procedures and global variables (module variables and\n @code{COMMON} blocks) need special handling to be accessible when they\n-are in a shared library. The following attributes are available:\n+are in a shared library.  The following attributes are available:\n \n @itemize\n @item @code{DLLEXPORT} -- provide a global pointer to a pointer in the DLL\n@@ -2364,14 +2437,14 @@ the same declaration part as the variable or procedure pointer.\n \n Even if you are doing mixed-language programming, it is very\n likely that you do not need to know or use the information in this\n-section. Since it is about the internal structure of GNU Fortran,\n+section.  Since it is about the internal structure of GNU Fortran,\n it may also change in GCC minor releases.\n \n When you compile a @code{PROGRAM} with GNU Fortran, a function\n with the name @code{main} (in the symbol table of the object file)\n is generated, which initializes the libgfortran library and then\n calls the actual program which uses the name @code{MAIN__}, for\n-historic reasons. If you link GNU Fortran compiled procedures\n+historic reasons.  If you link GNU Fortran compiled procedures\n to, e.g., a C or C++ program or to a Fortran program compiled by\n a different compiler, the libgfortran library is not initialized\n and thus a few intrinsic procedures do not work properly, e.g.\n@@ -2380,16 +2453,16 @@ those for obtaining the command-line arguments.\n Therefore, if your @code{PROGRAM} is not compiled with\n GNU Fortran and the GNU Fortran compiled procedures require\n intrinsics relying on the library initialization, you need to\n-initialize the library yourself. Using the default options,\n+initialize the library yourself.  Using the default options,\n gfortran calls @code{_gfortran_set_args} and\n-@code{_gfortran_set_options}. The initialization of the former\n+@code{_gfortran_set_options}.  The initialization of the former\n is needed if the called procedures access the command line\n (and for backtracing); the latter sets some flags based on the\n-standard chosen or to enable backtracing. In typical programs,\n+standard chosen or to enable backtracing.  In typical programs,\n it is not necessary to call any initialization function.\n \n If your @code{PROGRAM} is compiled with GNU Fortran, you shall\n-not call any of the following functions. The libgfortran\n+not call any of the following functions.  The libgfortran\n initialization functions are shown in C syntax but using C\n bindings they are also accessible from Fortran.\n \n@@ -2403,7 +2476,7 @@ bindings they are also accessible from Fortran.\n @item @emph{Description}:\n @code{_gfortran_set_args} saves the command-line arguments; this\n initialization is required if any of the command-line intrinsics\n-is called. Additionally, it shall be called if backtracing is\n+is called.  Additionally, it shall be called if backtracing is\n enabled (see @code{_gfortran_set_options}).\n \n @item @emph{Syntax}:\n@@ -2437,10 +2510,10 @@ int main (int argc, char *argv[])\n @item @emph{Description}:\n @code{_gfortran_set_options} sets several flags related to the Fortran\n standard to be used, whether backtracing or core dumps should be enabled\n-and whether range checks should be performed. The syntax allows for\n+and whether range checks should be performed.  The syntax allows for\n upward compatibility since the number of passed flags is specified; for\n-non-passed flags, the default value is used. See also\n-@pxref{Code Gen Options}. Please note that not all flags are actually\n+non-passed flags, the default value is used.  See also\n+@pxref{Code Gen Options}.  Please note that not all flags are actually\n used.\n \n @item @emph{Syntax}:\n@@ -2464,23 +2537,23 @@ Possible values are (bitwise or-ed) @code{GFC_STD_F77} (1),\n | GFC_STD_F95_DEL | GFC_STD_F95 | GFC_STD_F2003 | GFC_STD_F2008\n | GFC_STD_F2008_OBS | GFC_STD_F77 | GFC_STD_GNU | GFC_STD_LEGACY}.\n @item @var{option}[1] @tab Standard-warning flag; prints a warning to\n-standard error. Default: @code{GFC_STD_F95_DEL | GFC_STD_LEGACY}.\n+standard error.  Default: @code{GFC_STD_F95_DEL | GFC_STD_LEGACY}.\n @item @var{option}[2] @tab If non zero, enable pedantic checking.\n Default: off.\n @item @var{option}[3] @tab If non zero, enable core dumps on run-time\n-errors. Default: off.\n+errors.  Default: off.\n @item @var{option}[4] @tab If non zero, enable backtracing on run-time\n-errors. Default: off.\n+errors.  Default: off.\n Note: Installs a signal handler and requires command-line\n initialization using @code{_gfortran_set_args}.\n @item @var{option}[5] @tab If non zero, supports signed zeros.\n Default: enabled.\n-@item @var{option}[6] @tab Enables run-time checking. Possible values\n+@item @var{option}[6] @tab Enables run-time checking.  Possible values\n are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2),\n GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (16), GFC_RTCHECK_POINTER (32).\n Default: disabled.\n @item @var{option}[7] @tab If non zero, range checking is enabled.\n-Default: enabled. See -frange-check (@pxref{Code Gen Options}).\n+Default: enabled.  See -frange-check (@pxref{Code Gen Options}).\n @end multitable\n \n @item @emph{Example}:\n@@ -2541,7 +2614,7 @@ for unformatted files.\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{val} @tab Length of the record marker; valid values\n-are 4 and 8. Default is 4.\n+are 4 and 8.  Default is 4.\n @end multitable\n \n @item @emph{Example}:\n@@ -2565,7 +2638,7 @@ int main (int argc, char *argv[])\n @table @asis\n @item @emph{Description}:\n @code{_gfortran_set_fpe} sets the IEEE exceptions for which a\n-Floating Point Exception (FPE) should be raised. On most systems,\n+Floating Point Exception (FPE) should be raised.  On most systems,\n this will result in a SIGFPE signal being sent and the program\n being interrupted.\n \n@@ -2574,7 +2647,7 @@ being interrupted.\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{option}[0] @tab IEEE exceptions. Possible values are\n+@item @var{option}[0] @tab IEEE exceptions.  Possible values are\n (bitwise or-ed) zero (0, default) no trapping,\n @code{GFC_FPE_INVALID} (1), @code{GFC_FPE_DENORMAL} (2),\n @code{GFC_FPE_ZERO} (4), @code{GFC_FPE_OVERFLOW} (8),\n@@ -2603,7 +2676,7 @@ int main (int argc, char *argv[])\n @table @asis\n @item @emph{Description}:\n @code{_gfortran_set_max_subrecord_length} set the maximum length\n-for a subrecord. This option only makes sense for testing and\n+for a subrecord.  This option only makes sense for testing and\n debugging of unformatted I/O.\n \n @item @emph{Syntax}:\n@@ -2755,8 +2828,8 @@ keep code private on request.\n @item Bug hunting/squishing\n Find bugs and write more test cases! Test cases are especially very\n welcome, because it allows us to concentrate on fixing bugs instead of\n-isolating them. Going through the bugzilla database at\n-@url{http://gcc.gnu.org/bugzilla/} to reduce testcases posted there and\n+isolating them.  Going through the bugzilla database at\n+@url{http://gcc.gnu.org/@/bugzilla/} to reduce testcases posted there and\n add more information (for example, for which version does the testcase\n work, for which versions does it fail?) is also very helpful.\n \n@@ -2876,7 +2949,7 @@ Environment variable forcing standard output to be line buffered (unix).\n @node Option Index\n @unnumbered Option Index\n @command{gfortran}'s command line options are indexed here without any\n-initial @samp{-} or @samp{--}. Where an option has both positive and\n+initial @samp{-} or @samp{--}.  Where an option has both positive and\n negative forms (such as -foption and -fno-option), relevant entries in\n the manual are indexed under the most appropriate form; it may sometimes\n be useful to look up both forms."}]}