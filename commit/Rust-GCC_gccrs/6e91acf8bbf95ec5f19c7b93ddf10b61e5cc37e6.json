{"sha": "6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5MWFjZjhiYmY5NWVjNWYxOWM3YjkzZGRmMTBiNjFlNWNjMzdlNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-10-27T22:16:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-27T22:16:19Z"}, "message": "target-insns.def (oacc_fork, oacc_join): Define.\n\n\t* target-insns.def (oacc_fork, oacc_join): Define.\n\t* target.def (goacc.validate_dims): Adjust doc to avoid warning.\n\t(goacc.fork_join): New GOACC hook.\n\t* targhooks.h (default_goacc_fork_join): Declare.\n\t* omp-low.c (default_goacc_forkjoin): New.\n\t* doc/tm.texi.in (TARGET_GOACC_FORK_JOIN): Add.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r229465", "tree": {"sha": "f7d5ff7dcddc915999eca654a5d091ec5114edca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7d5ff7dcddc915999eca654a5d091ec5114edca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/comments", "author": null, "committer": null, "parents": [{"sha": "0956e359c48b8526e6159d2e88e7de294929576d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0956e359c48b8526e6159d2e88e7de294929576d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0956e359c48b8526e6159d2e88e7de294929576d"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "5011cafeed84a2c9723d940162eefbe3e479f287", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -1,3 +1,13 @@\n+2015-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* target-insns.def (oacc_fork, oacc_join): Define.\n+\t* target.def (goacc.validate_dims): Adjust doc to avoid warning.\n+\t(goacc.fork_join): New GOACC hook.\n+\t* targhooks.h (default_goacc_fork_join): Declare.\n+\t* omp-low.c (default_goacc_forkjoin): New.\n+\t* doc/tm.texi.in (TARGET_GOACC_FORK_JOIN): Add.\n+\t* doc/tm.texi: Regenerate.\n+\n 2015-10-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (oacc_init_rediction_array): New."}, {"sha": "4d23c23bc9c486120e13b7c931062de214a18edd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -5765,7 +5765,7 @@ usable.  In that case, the smaller the number is, the more desirable it is\n to use it.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_GOACC_VALIDATE_DIMS (tree @var{decl}, int @var{dims[]}, int @var{fn_level})\n+@deftypefn {Target Hook} bool TARGET_GOACC_VALIDATE_DIMS (tree @var{decl}, int *@var{dims}, int @var{fn_level})\n This hook should check the launch dimensions provided for an OpenACC\n compute region, or routine.  Defaulted values are represented as -1\n and non-constant values as 0. The @var{fn_level} is negative for the\n@@ -5777,6 +5777,14 @@ true, if changes have been made.  You must override this hook to\n provide dimensions larger than 1.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_GOACC_FORK_JOIN (gcall *@var{call}, const int *@var{dims}, bool @var{is_fork})\n+This hook should convert IFN_GOACC_FORK and IFN_GOACC_JOIN function\n+calls to target-specific gimple.  It is executed during the\n+oacc_device_lower pass.  It should return true, if the functions\n+should be deleted.  The default hook returns true, if there are no\n+RTL expanders for them.\n+@end deftypefn\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "afa00f7cd49eb20ddcccc95c781b6579050d06db", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -4262,6 +4262,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_GOACC_VALIDATE_DIMS\n \n+@hook TARGET_GOACC_FORK_JOIN\n+\n @node Anchored Addresses\n @section Anchored Addresses\n @cindex anchored addresses"}, {"sha": "ea6ccfe99025d559fbaae6f4fcfd1e1ccb88ebc4", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -17642,6 +17642,19 @@ oacc_validate_dims (tree fn, tree attrs, int *dims)\n   return fn_level;\n }\n \n+/* Default fork/join early expander.  Delete the function calls if\n+   there is no RTL expander.  */\n+\n+bool\n+default_goacc_fork_join (gcall *ARG_UNUSED (call),\n+\t\t\t const int *ARG_UNUSED (dims), bool is_fork)\n+{\n+  if (is_fork)\n+    return targetm.have_oacc_fork ();\n+  else\n+    return targetm.have_oacc_join ();\n+}\n+\n /* Main entry point for oacc transformations which run on the device\n    compiler after LTO, so we know what the target device is at this\n    point (including the host fallback).  */"}, {"sha": "41d488a16f920c88e67518533e55b18a38481fe6", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -64,6 +64,8 @@ DEF_TARGET_INSN (memory_barrier, (void))\n DEF_TARGET_INSN (movstr, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (nonlocal_goto, (rtx x0, rtx x1, rtx x2, rtx x3))\n DEF_TARGET_INSN (nonlocal_goto_receiver, (void))\n+DEF_TARGET_INSN (oacc_fork, (rtx x0, rtx x1, rtx x2))\n+DEF_TARGET_INSN (oacc_join, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (prefetch, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (probe_stack, (rtx x0))\n DEF_TARGET_INSN (probe_stack_address, (rtx x0))"}, {"sha": "bc4b5bd088534f896bb857acf216821b6e9ef87c", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -1655,9 +1655,19 @@ should fill in anything that needs to default to non-unity and verify\\n\\\n non-defaults.  Diagnostics should be issued as appropriate.  Return\\n\\\n true, if changes have been made.  You must override this hook to\\n\\\n provide dimensions larger than 1.\",\n-bool, (tree decl, int dims[], int fn_level),\n+bool, (tree decl, int *dims, int fn_level),\n default_goacc_validate_dims)\n \n+DEFHOOK\n+(fork_join,\n+\"This hook should convert IFN_GOACC_FORK and IFN_GOACC_JOIN function\\n\\\n+calls to target-specific gimple.  It is executed during the\\n\\\n+oacc_device_lower pass.  It should return true, if the functions\\n\\\n+should be deleted.  The default hook returns true, if there are no\\n\\\n+RTL expanders for them.\",\n+bool, (gcall *call, const int *dims, bool is_fork),\n+default_goacc_fork_join)\n+\n HOOK_VECTOR_END (goacc)\n \n /* Functions relating to vectorization.  */"}, {"sha": "36715c3893e813a8827c211da352da172ad09c6d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6e91acf8bbf95ec5f19c7b93ddf10b61e5cc37e6", "patch": "@@ -110,6 +110,7 @@ extern void default_destroy_cost_data (void *);\n \n /* OpenACC hooks.  */\n extern bool default_goacc_validate_dims (tree, int [], int);\n+extern bool default_goacc_fork_join (gcall *, const int [], bool);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */"}]}