{"sha": "b759ea284782b95cf0196c8e813e3ab7e1233c47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1OWVhMjg0NzgyYjk1Y2YwMTk2YzhlODEzZTNhYjdlMTIzM2M0Nw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-11-09T10:15:46Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-11-09T10:15:46Z"}, "message": "[PR87793] reject non-toplevel unspecs in debug loc exprs on x86\n\nBefore revision 254025, we'd reject UNSPECs in debug loc exprs.\nTARGET_CONST_NOT_OK_FOR_DEBUG_P still rejects that by default, on all\nports that override it, except for x86, that accepts @gotoff unspecs.\nWe can indeed accept them in top-level expressions, but not as\nsubexpressions: the assembler rejects the difference between two\n@gotoff symbols, for example.\n\nWe could simplify such a difference and drop the @gotoffs, provided\nthat the symbols are in the same section; we could also accept\n@gotoffs plus literal constants.  However, accepting those but\nrejecting such combinations as subexpressions would be ugly, and most\nlikely not worth the trouble: sym@gotoff+litconst hardly makes sense\nas a standalone expression, and the difference between @gotoffs should\nbe avoided to begin with, as follows.\n\nIdeally, the debug loc exprs would use the symbolic data in\nREG_EQUIV/REG_EQUAL notes, or delegitimized addresses, instead of\nsimplifying the difference between two legitimized addresses so that\nthe occurrences of the GOT register cancel each other.  That would\nrequire some more elaborate surgery in var-tracking and cselib than\nwould be appropriate at this stage.\n\nfor  gcc/ChangeLog\n\n\tPR target/87793\n\t* config/i386/i386.c (ix86_const_not_ok_for_debug_p): Reject\n\tnon-toplevel UNSPEC.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR target/87793\n\t* gcc.dg/pr87793.c: New.\n\nFrom-SVN: r265956", "tree": {"sha": "9e3182aa55b56ce57d525afb4fec66630be2ae02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3182aa55b56ce57d525afb4fec66630be2ae02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b759ea284782b95cf0196c8e813e3ab7e1233c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b759ea284782b95cf0196c8e813e3ab7e1233c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b759ea284782b95cf0196c8e813e3ab7e1233c47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b759ea284782b95cf0196c8e813e3ab7e1233c47/comments", "author": null, "committer": null, "parents": [{"sha": "aab162fb24bc03d8720da802ba08e3ab391627c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab162fb24bc03d8720da802ba08e3ab391627c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab162fb24bc03d8720da802ba08e3ab391627c0"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "21d9ae799a655caa7c4f98c078dc9ffe88f2976e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b759ea284782b95cf0196c8e813e3ab7e1233c47", "patch": "@@ -1,3 +1,9 @@\n+2018-11-09  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR target/87793\n+\t* config/i386/i386.c (ix86_const_not_ok_for_debug_p): Reject\n+\tnon-toplevel UNSPEC.\n+\n 2018-11-08  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (value_range::check): Do not access internals"}, {"sha": "711bec0cc9d7ce98abbf8a40517234f933f5edd9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b759ea284782b95cf0196c8e813e3ab7e1233c47", "patch": "@@ -17177,6 +17177,18 @@ ix86_const_not_ok_for_debug_p (rtx x)\n   if (SYMBOL_REF_P (x) && strcmp (XSTR (x, 0), GOT_SYMBOL_NAME) == 0)\n     return true;\n \n+  /* Reject UNSPECs within expressions.  We could accept symbol@gotoff\n+     + literal_constant, but that would hardly come up in practice,\n+     and it's not worth the trouble of having to reject that as an\n+     operand to pretty much anything else.  */\n+  if (UNARY_P (x)\n+      && GET_CODE (XEXP (x, 0)) == UNSPEC)\n+    return true;\n+  if (BINARY_P (x)\n+      && (GET_CODE (XEXP (x, 0)) == UNSPEC\n+\t  || GET_CODE (XEXP (x, 1)) == UNSPEC))\n+    return true;\n+\n   return false;\n }\n \f"}, {"sha": "9a7dfc26dfa3b65c99a03aaa7248fecae8950eae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b759ea284782b95cf0196c8e813e3ab7e1233c47", "patch": "@@ -1,3 +1,8 @@\n+2018-11-09  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR target/87793\n+\t* gcc.dg/pr87793.c: New.\n+\n 2018-11-09  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.target/arm/neon-vect-div-1.c: New test."}, {"sha": "3194313a265de8d6414fb7f0807129a371b44ad6", "filename": "gcc/testsuite/gcc.dg/pr87793.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87793.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b759ea284782b95cf0196c8e813e3ab7e1233c47/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87793.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87793.c?ref=b759ea284782b95cf0196c8e813e3ab7e1233c47", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fpic -Os -g\" } */\n+\n+struct fit_loadable_tbl {\n+\tint type;\n+\tvoid (*handler)(int data, int size);\n+};\n+\n+#define ll_entry_start(_type, _list)\t\t\t\t\t\\\n+({\t\t\t\t\t\t\t\t\t\\\n+\tstatic char start[0] __attribute__((aligned(4)))\t\t\\\n+\t\t__attribute__((unused, section(\".u_boot_list_2_\"#_list\"_1\")));\t\\\n+\t(_type *)&start;\t\t\t\t\t\t\\\n+})\n+\n+#define ll_entry_end(_type, _list)\t\t\t\t\t\\\n+({\t\t\t\t\t\t\t\t\t\\\n+\tstatic char end[0] __attribute__((aligned(4)))\t\t\t\\\n+\t\t__attribute__((unused, section(\".u_boot_list_2_\"#_list\"_3\")));\t\\\n+\t(_type *)&end;\t\t\t\t\t\t\t\\\n+})\n+\n+#define ll_entry_count(_type, _list)\t\t\t\t\t\\\n+\t({\t\t\t\t\t\t\t\t\\\n+\t\t_type *start = ll_entry_start(_type, _list);\t\t\\\n+\t\t_type *end = ll_entry_end(_type, _list);\t\t\\\n+\t\tunsigned int _ll_result = end - start;\t\t\t\\\n+\t\t_ll_result;\t\t\t\t\t\t\\\n+\t})\n+\n+void test(int img_type, int img_data, int img_len)\n+{\n+\tint i;\n+\tconst unsigned int count =\n+\t\tll_entry_count(struct fit_loadable_tbl, fit_loadable);\n+\tstruct fit_loadable_tbl *fit_loadable_handler =\n+\t\tll_entry_start(struct fit_loadable_tbl, fit_loadable);\n+\n+\tfor (i = 0; i < count; i++, fit_loadable_handler++)\n+\t\tif (fit_loadable_handler->type == img_type)\n+\t\t\tfit_loadable_handler->handler(img_data, img_len);\n+}"}]}