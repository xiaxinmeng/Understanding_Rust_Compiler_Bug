{"sha": "55fc79b2a65cc637d2dca823d80568de5de71c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmYzc5YjJhNjVjYzYzN2QyZGNhODIzZDgwNTY4ZGU1ZGU3MWMxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-05T08:15:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-05T08:15:09Z"}, "message": "re PR target/70525 (generating 'vpandn' without the mode suffix, gnu as fails to assemble (-mavx512bw))\n\n\tPR target/70525\n\t* config/i386/sse.md (*andnot<mode>3): Simplify assertions.\n\tUse vpandn<ssemodesuffix> for V16SI/V8DImode, vpandnq for\n\tV32HI/V64QImode, don't use <mask_operand3_1>, fix up formatting.\n\t(*andnot<mode>3_mask): Remove insn with VI12_AVX512VL iterator.\n\n\t* gcc.target/i386/pr70525.c: New test.\n\nFrom-SVN: r234739", "tree": {"sha": "086c37ba66a2af7b3a27e314c76014817444c964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/086c37ba66a2af7b3a27e314c76014817444c964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55fc79b2a65cc637d2dca823d80568de5de71c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fc79b2a65cc637d2dca823d80568de5de71c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55fc79b2a65cc637d2dca823d80568de5de71c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fc79b2a65cc637d2dca823d80568de5de71c1c/comments", "author": null, "committer": null, "parents": [{"sha": "62b233f22449de60755b07c16f16b1a020c0708c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b233f22449de60755b07c16f16b1a020c0708c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b233f22449de60755b07c16f16b1a020c0708c"}], "stats": {"total": 119, "additions": 75, "deletions": 44}, "files": [{"sha": "c0a8f729505b1c59e9660e2eea170f8929d5e5f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55fc79b2a65cc637d2dca823d80568de5de71c1c", "patch": "@@ -1,3 +1,11 @@\n+2016-04-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70525\n+\t* config/i386/sse.md (*andnot<mode>3): Simplify assertions.\n+\tUse vpandn<ssemodesuffix> for V16SI/V8DImode, vpandnq for\n+\tV32HI/V64QImode, don't use <mask_operand3_1>, fix up formatting.\n+\t(*andnot<mode>3_mask): Remove insn with VI12_AVX512VL iterator.\n+\n 2016-04-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70499\n@@ -9,7 +17,7 @@\n \tPR ipa/66223\n \t* ipa-devirt.c (maybe_record_node): Do not optimize cxa_pure_virtual\n \tcalls when sanitizing.\n-\t(possible_polymorphic_call_target_p)\" FIx formating.\n+\t(possible_polymorphic_call_target_p): Fix formating.\n \n 2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \t    Jakub Jelinek <jakub@redhat.com>"}, {"sha": "8e9d5ec7cd9e4d95acb7e652e0b7925a1f40fb1b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 43, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=55fc79b2a65cc637d2dca823d80568de5de71c1c", "patch": "@@ -11377,53 +11377,54 @@\n     case MODE_XI:\n       gcc_assert (TARGET_AVX512F);\n     case MODE_OI:\n-      gcc_assert (TARGET_AVX2 || TARGET_AVX512VL);\n+      gcc_assert (TARGET_AVX2);\n     case MODE_TI:\n-      gcc_assert (TARGET_SSE2 || TARGET_AVX512VL);\n+      gcc_assert (TARGET_SSE2);\n       switch (<MODE>mode)\n-      {\n-        case V16SImode:\n-        case V8DImode:\n-          if (TARGET_AVX512F)\n-          {\n-            tmp = \"pandn<ssemodesuffix>\";\n-            break;\n-          }\n-        case V8SImode:\n-        case V4DImode:\n-        case V4SImode:\n-        case V2DImode:\n-          if (TARGET_AVX512VL)\n-          {\n-            tmp = \"pandn<ssemodesuffix>\";\n-            break;\n-          }\n-        default:\n-          tmp = TARGET_AVX512VL ? \"pandnq\" : \"pandn\";\n-      }\n+\t{\n+\tcase V64QImode:\n+\tcase V32HImode:\n+\t  /* There is no vpandnb or vpandnw instruction, nor vpandn for\n+\t     512-bit vectors. Use vpandnq instead.  */\n+\t  tmp = \"pandnq\";\n+\t  break;\n+\tcase V16SImode:\n+\tcase V8DImode:\n+\t  tmp = \"pandn<ssemodesuffix>\";\n+\t  break;\n+\tcase V8SImode:\n+\tcase V4DImode:\n+\tcase V4SImode:\n+\tcase V2DImode:\n+\t  tmp = TARGET_AVX512VL ? \"pandn<ssemodesuffix>\" : \"pandn\";\n+\t  break;\n+\tdefault:\n+\t  tmp = TARGET_AVX512VL ? \"pandnq\" : \"pandn\";\n+\t  break;\n+\t}\n       break;\n \n-   case MODE_V16SF:\n+    case MODE_V16SF:\n       gcc_assert (TARGET_AVX512F);\n-   case MODE_V8SF:\n+    case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n-   case MODE_V4SF:\n+    case MODE_V4SF:\n       gcc_assert (TARGET_SSE);\n \n       tmp = \"andnps\";\n       break;\n \n-   default:\n+    default:\n       gcc_unreachable ();\n-   }\n+    }\n \n   switch (which_alternative)\n     {\n     case 0:\n       ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      ops = \"v%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n+      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n@@ -11473,21 +11474,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*andnot<mode>3_mask\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI12_AVX512VL\n-\t  (and:VI12_AVX512VL\n-\t    (not:VI12_AVX512VL\n-\t      (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\"))\n-\t    (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VI12_AVX512VL 3 \"vector_move_operand\" \"0C\")\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512BW\"\n-  \"vpandn<ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\";\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI 0 \"register_operand\")\n \t(any_logic:VI"}, {"sha": "f3d1a6e69198cad9f9a1072c1a054a07602a3806", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55fc79b2a65cc637d2dca823d80568de5de71c1c", "patch": "@@ -1,3 +1,8 @@\n+2016-04-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70525\n+\t* gcc.target/i386/pr70525.c: New test.\n+\n 2016-04-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70499"}, {"sha": "78ba752f94b2e81b65cd8656276502ebac905cb9", "filename": "gcc/testsuite/gcc.target/i386/pr70525.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70525.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fc79b2a65cc637d2dca823d80568de5de71c1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70525.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70525.c?ref=55fc79b2a65cc637d2dca823d80568de5de71c1c", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/70525 */\n+/* { dg-do assemble { target avx512bw } } */\n+/* { dg-options \"-O2 -mavx512bw -mno-avx512vl\" } */\n+\n+typedef char v64qi __attribute__ ((vector_size (64)));\n+typedef short v32hi __attribute__ ((vector_size (64)));\n+typedef int v16si __attribute__ ((vector_size (64)));\n+typedef long long v8di __attribute__ ((vector_size (64)));\n+\n+v64qi\n+f1 (v64qi x, v64qi y)\n+{\n+  return x & ~y;\n+}\n+\n+v32hi\n+f2 (v32hi x, v32hi y)\n+{\n+  return x & ~y;\n+}\n+\n+v16si\n+f3 (v16si x, v16si y)\n+{\n+  return x & ~y;\n+}\n+\n+v8di\n+f4 (v8di x, v8di y)\n+{\n+  return x & ~y;\n+}"}]}