{"sha": "393eda6a41b2b2319868f41a754148bf037f955e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZWRhNmE0MWIyYjIzMTk4NjhmNDFhNzU0MTQ4YmYwMzdmOTU1ZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-03-02T15:45:29Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-03-02T15:45:29Z"}, "message": "re PR c++/24924 (front end and preprocessor pedantic_errors settings should agree)\n\n2008-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org> \n\n\tPR 24924\n\t* c-common.c (flag_permissive): Delete.\n\t(constant_expression_warnings): Check flags first.\n\t(constant_expression_error): New.\n\t* c-common.h (flag_permissive): Delete.\n\t(constant_expression_error): Declare.\n\t* flags.h (flag_permissive): Declare. Update description.\n\t* diagnostic.c (pedwarn): Update.\n\t(permerror): New.\n\t* diagnostic.h: (pedantic_error_kind): Rename as pedantic_warning_kind.\n\t(permissive_error_kind): New.\n\t* toplev.c (flag_permissive): Define. Update description.\n\t* toplev.h (permissive_error_kind): Declare.\n\t* c-errors.c (pedwarn_c99): Use pedantic_warning_kind.\n\t(pedwarn_c90): Use pedantic_warning_kind.\n\t* c-opts.c (c_common_post_options): flag_permissive does not affect\n\tflag_pedantic_errors.\ncp/\n\t* class.c (finish_struct_anon): Use permerror instead of pedwarn.\n\t(check_field_decls): Likewise.\n\t(note_name_declared_in_class): Likewise.\n\t* call.c (build_new_op): Likewise.\n\t(convert_like_real): Likewise.\n\t(build_over_call): Likewise.\n\t* lex.c (unqualified_fn_lookup_error): Likewise.\n\t* parser.c (cp_parser_template_id): Likewise.\n\t* cvt.c (warn_ref_binding): Likewise.\n\t(convert_to_reference): Likewise.\n\t(ocp_convert): Likewise.\n\t(convert_to_void): Use error instead of pedwarn.\n\t* error.c (cp_cpp_error): Use pedantic_warning_kind.\n\t* decl.c (compute_array_index_type): Use constant_expression_error.\ntestsuite/\n\t* g++.dg/cpp/string-2.C: This is a warning now.\n\t* g++.dg/cpp/pedantic-errors.C: -pedantic-errors is not enabled by\n\tdefault, so add it.\n\nFrom-SVN: r132817", "tree": {"sha": "fe322a3045cc0749a70363f868657cbec06018f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe322a3045cc0749a70363f868657cbec06018f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393eda6a41b2b2319868f41a754148bf037f955e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393eda6a41b2b2319868f41a754148bf037f955e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393eda6a41b2b2319868f41a754148bf037f955e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393eda6a41b2b2319868f41a754148bf037f955e/comments", "author": null, "committer": null, "parents": [{"sha": "92331508a65e169b0eeb2928312a3394cefe0278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92331508a65e169b0eeb2928312a3394cefe0278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92331508a65e169b0eeb2928312a3394cefe0278"}], "stats": {"total": 208, "additions": 136, "deletions": 72}, "files": [{"sha": "c2200cb0a3a7c05a1482e7480ccb4d4045b4eb52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -1,3 +1,23 @@\n+2008-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 24924\n+\t* c-common.c (flag_permissive): Delete.\n+\t(constant_expression_warnings): Check flags first.\n+\t(constant_expression_error): New.\n+\t* c-common.h (flag_permissive): Delete.\n+\t(constant_expression_error): Declare.\n+\t* flags.h (flag_permissive): Declare. Update description.\n+\t* diagnostic.c (pedwarn): Update.\n+\t(permerror): New.\n+\t* diagnostic.h: (pedantic_error_kind): Rename as pedantic_warning_kind.\n+\t(permissive_error_kind): New.\n+\t* toplev.c (flag_permissive): Define. Update description.\n+\t* toplev.h (permissive_error_kind): Declare.\n+\t* c-errors.c (pedwarn_c99): Use pedantic_warning_kind.\n+\t(pedwarn_c90): Use pedantic_warning_kind.\n+\t* c-opts.c (c_common_post_options): flag_permissive does not affect\n+\tflag_pedantic_errors.\n+\n 2008-03-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* libgcc2.c (__addvSI3, __addvsi3, __addvDI3, __subvSI3,"}, {"sha": "f3de12a7359611c1498178cd2540a24299533388", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -443,11 +443,6 @@ int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n \n int flag_use_cxa_get_exception_ptr = 2;\n \n-/* Nonzero means make the default pedwarns warnings instead of errors.\n-   The value of this flag is ignored if -pedantic is specified.  */\n-\n-int flag_permissive;\n-\n /* Nonzero means to implement standard semantics for exception\n    specifications, calling unexpected if an exception is thrown that\n    doesn't match the specification.  Zero means to treat them as\n@@ -926,15 +921,26 @@ fix_string_type (tree value)\n \n void\n constant_expression_warning (tree value)\n+{\n+  if (warn_overflow && pedantic \n+      && (TREE_CODE (value) == INTEGER_CST || TREE_CODE (value) == REAL_CST\n+\t  || TREE_CODE (value) == FIXED_CST\n+\t  || TREE_CODE (value) == VECTOR_CST\n+\t  || TREE_CODE (value) == COMPLEX_CST)\n+      && TREE_OVERFLOW (value))\n+    pedwarn (\"overflow in constant expression\");\n+}\n+\n+/* The same as above but print an unconditional error.  */\n+void\n+constant_expression_error (tree value)\n {\n   if ((TREE_CODE (value) == INTEGER_CST || TREE_CODE (value) == REAL_CST\n        || TREE_CODE (value) == FIXED_CST\n        || TREE_CODE (value) == VECTOR_CST\n        || TREE_CODE (value) == COMPLEX_CST)\n-      && TREE_OVERFLOW (value)\n-      && warn_overflow\n-      && pedantic)\n-    pedwarn (\"overflow in constant expression\");\n+      && TREE_OVERFLOW (value))\n+    error (\"overflow in constant expression\");\n }\n \n /* Print a warning if an expression had overflow in folding and its"}, {"sha": "a072710c9ab6fcecac3290003d5c2b9423bee568", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -584,11 +584,6 @@ extern int flag_use_cxa_atexit;\n \n extern int flag_use_cxa_get_exception_ptr;\n \n-/* Nonzero means make the default pedwarns warnings instead of errors.\n-   The value of this flag is ignored if -pedantic is specified.  */\n-\n-extern int flag_permissive;\n-\n /* Nonzero means to implement standard semantics for exception\n    specifications, calling unexpected if an exception is thrown that\n    doesn't match the specification.  Zero means to treat them as\n@@ -688,6 +683,7 @@ extern void binary_op_error (enum tree_code, tree, tree);\n extern tree fix_string_type (tree);\n struct varray_head_tag;\n extern void constant_expression_warning (tree);\n+extern void constant_expression_error (tree);\n extern bool strict_aliasing_warning (tree, tree, tree);\n extern void empty_if_body_warning (tree, tree);\n extern void warnings_for_convert_and_check (tree, tree, tree);"}, {"sha": "dc47b764f39c6b6fee4bb8074b031d5aed672e55", "filename": "gcc/c-errors.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -38,7 +38,7 @@ pedwarn_c99 (const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-\t\t       flag_isoc99 ? pedantic_error_kind () : DK_WARNING);\n+\t\t       flag_isoc99 ? pedantic_warning_kind () : DK_WARNING);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n@@ -56,7 +56,7 @@ pedwarn_c90 (const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-\t\t       flag_isoc99 ? DK_WARNING : pedantic_error_kind ());\n+\t\t       flag_isoc99 ? DK_WARNING : pedantic_warning_kind ());\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }"}, {"sha": "69c4d5448853c245cbf00d01d1436c22b77c94ac", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -1107,18 +1107,6 @@ c_common_post_options (const char **pfilename)\n   /* Adjust various flags for C++ based on command-line settings.  */\n   if (c_dialect_cxx ())\n     {\n-      if (!flag_permissive)\n-\t{\n-\t  flag_pedantic_errors = 1;\n-\t  /* FIXME: For consistency pedantic_errors should have the\n-\t     same value in the front-end and in CPP. However, this\n-\t     will break existing applications. The right fix is\n-\t     disentagle flag_permissive from flag_pedantic_errors,\n-\t     create a new diagnostic function permerror that is\n-\t     controlled by flag_permissive and convert most C++\n-\t     pedwarns to this new function.\n-\t  cpp_opts->pedantic_errors = 1;  */\n-\t}\n       if (!flag_no_inline)\n \t{\n \t  flag_inline_trees = 1;"}, {"sha": "3c79d1dd91028f199a4c2928cee0fe75fc31e8c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -1,3 +1,21 @@\n+2008-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 24924\n+\t* class.c (finish_struct_anon): Use permerror instead of pedwarn.\n+\t(check_field_decls): Likewise.\n+\t(note_name_declared_in_class): Likewise.\n+\t* call.c (build_new_op): Likewise.\n+\t(convert_like_real): Likewise.\n+\t(build_over_call): Likewise.\n+\t* lex.c (unqualified_fn_lookup_error): Likewise.\n+\t* parser.c (cp_parser_template_id): Likewise.\n+\t* cvt.c (warn_ref_binding): Likewise.\n+\t(convert_to_reference): Likewise.\n+\t(ocp_convert): Likewise.\n+\t(convert_to_void): Use error instead of pedwarn.\n+\t* error.c (cp_cpp_error): Use pedantic_warning_kind.\n+\t* decl.c (compute_array_index_type): Use constant_expression_error.\n+\t\n 2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note"}, {"sha": "2ee82371f68baaf7674eef58bf5de1f29ebde1a0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -3857,10 +3857,10 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t  /* Look for an `operator++ (int)'.  If they didn't have\n \t     one, then we fall back to the old way of doing things.  */\n \t  if (flags & LOOKUP_COMPLAIN)\n-\t    pedwarn (\"no %<%D(int)%> declared for postfix %qs, \"\n-\t\t     \"trying prefix operator instead\",\n-\t\t     fnname,\n-\t\t     operator_name_info[code].name);\n+\t    permerror (\"no %<%D(int)%> declared for postfix %qs, \"\n+\t\t       \"trying prefix operator instead\",\n+\t\t       fnname,\n+\t\t       operator_name_info[code].name);\n \t  if (code == POSTINCREMENT_EXPR)\n \t    code = PREINCREMENT_EXPR;\n \t  else\n@@ -4343,9 +4343,9 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  else if (t->kind == ck_identity)\n \t    break;\n \t}\n-      pedwarn (\"invalid conversion from %qT to %qT\", TREE_TYPE (expr), totype);\n+      permerror (\"invalid conversion from %qT to %qT\", TREE_TYPE (expr), totype);\n       if (fn)\n-\tpedwarn (\"  initializing argument %P of %qD\", argnum, fn);\n+\tpermerror (\"  initializing argument %P of %qD\", argnum, fn);\n       return cp_convert (totype, expr);\n     }\n \n@@ -4955,7 +4955,7 @@ build_over_call (struct z_candidate *cand, int flags)\n       tree base_binfo;\n \n       if (convs[i]->bad_p)\n-\tpedwarn (\"passing %qT as %<this%> argument of %q#D discards qualifiers\",\n+\tpermerror (\"passing %qT as %<this%> argument of %q#D discards qualifiers\",\n \t\t TREE_TYPE (argtype), fn);\n \n       /* [class.mfct.nonstatic]: If a nonstatic member function of a class"}, {"sha": "500ddaac635b3780d5f094b1f98f1ebc74319f9f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -2493,27 +2493,27 @@ finish_struct_anon (tree t)\n \t      if (TREE_CODE (elt) != FIELD_DECL)\n \t\t{\n \t\t  if (is_union)\n-\t\t    pedwarn (\"%q+#D invalid; an anonymous union can \"\n-\t\t\t     \"only have non-static data members\", elt);\n+\t\t    permerror (\"%q+#D invalid; an anonymous union can \"\n+\t\t\t       \"only have non-static data members\", elt);\n \t\t  else\n-\t\t    pedwarn (\"%q+#D invalid; an anonymous struct can \"\n-\t\t\t     \"only have non-static data members\", elt);\n+\t\t    permerror (\"%q+#D invalid; an anonymous struct can \"\n+\t\t\t       \"only have non-static data members\", elt);\n \t\t  continue;\n \t\t}\n \n \t      if (TREE_PRIVATE (elt))\n \t\t{\n \t\t  if (is_union)\n-\t\t    pedwarn (\"private member %q+#D in anonymous union\", elt);\n+\t\t    permerror (\"private member %q+#D in anonymous union\", elt);\n \t\t  else\n-\t\t    pedwarn (\"private member %q+#D in anonymous struct\", elt);\n+\t\t    permerror (\"private member %q+#D in anonymous struct\", elt);\n \t\t}\n \t      else if (TREE_PROTECTED (elt))\n \t\t{\n \t\t  if (is_union)\n-\t\t    pedwarn (\"protected member %q+#D in anonymous union\", elt);\n+\t\t    permerror (\"protected member %q+#D in anonymous union\", elt);\n \t\t  else\n-\t\t    pedwarn (\"protected member %q+#D in anonymous struct\", elt);\n+\t\t    permerror (\"protected member %q+#D in anonymous struct\", elt);\n \t\t}\n \n \t      TREE_PRIVATE (elt) = TREE_PRIVATE (field);\n@@ -3044,7 +3044,7 @@ check_field_decls (tree t, tree *access_decls,\n \t user-defined constructor.  */\n       if (constructor_name_p (DECL_NAME (x), t)\n \t  && TYPE_HAS_USER_CONSTRUCTOR (t))\n-\tpedwarn (\"field %q+#D with same name as class\", x);\n+\tpermerror (\"field %q+#D with same name as class\", x);\n \n       /* We set DECL_C_BIT_FIELD in grokbitfield.\n \t If the type and width are valid, we'll also set DECL_BIT_FIELD.  */\n@@ -6072,10 +6072,10 @@ resolve_address_of_overloaded_function (tree target_type,\n       if (!(flags & tf_error))\n \treturn error_mark_node;\n \n-      pedwarn (\"assuming pointer to member %qD\", fn);\n+      permerror (\"assuming pointer to member %qD\", fn);\n       if (!explained)\n \t{\n-\t  pedwarn (\"(a pointer to member can only be formed with %<&%E%>)\", fn);\n+\t  inform (\"(a pointer to member can only be formed with %<&%E%>)\", fn);\n \t  explained = 1;\n \t}\n     }\n@@ -6435,8 +6435,8 @@ note_name_declared_in_class (tree name, tree decl)\n \t A name N used in a class S shall refer to the same declaration\n \t in its context and when re-evaluated in the completed scope of\n \t S.  */\n-      pedwarn (\"declaration of %q#D\", decl);\n-      pedwarn (\"changes meaning of %qD from %q+#D\",\n+      permerror (\"declaration of %q#D\", decl);\n+      permerror (\"changes meaning of %qD from %q+#D\",\n \t       DECL_NAME (OVL_CURRENT (decl)), (tree) n->value);\n     }\n }"}, {"sha": "ee5759d6b4f18d33ef6b8951c5ca90405b0a4947", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -379,7 +379,7 @@ warn_ref_binding (tree reftype, tree intype, tree decl)\n \t  msg = \"conversion to non-const reference type %q#T from\"\n \t    \" rvalue of type %qT\";\n \n-      pedwarn (msg, reftype, intype);\n+      permerror (msg, reftype, intype);\n     }\n }\n \n@@ -449,8 +449,8 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n \n \t  if (! (convtype & CONV_CONST)\n \t\t   && !at_least_as_qualified_p (ttl, ttr))\n-\t    pedwarn (\"conversion from %qT to %qT discards qualifiers\",\n-\t\t     ttr, reftype);\n+\t    permerror (\"conversion from %qT to %qT discards qualifiers\",\n+\t\t       ttr, reftype);\n \t}\n \n       return build_up_reference (reftype, expr, flags, decl);\n@@ -646,9 +646,9 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \t      || TREE_CODE (intype) == POINTER_TYPE))\n \t{\n \t  if (flags & LOOKUP_COMPLAIN)\n-\t    pedwarn (\"conversion from %q#T to %q#T\", intype, type);\n+\t    permerror (\"conversion from %q#T to %q#T\", intype, type);\n \n-\t  if (flag_pedantic_errors)\n+\t  if (!flag_permissive)\n \t    return error_mark_node;\n \t}\n       if (IS_AGGR_TYPE (intype))\n@@ -892,8 +892,8 @@ convert_to_void (tree expr, const char *implicit)\n       {\n \t/* [over.over] enumerates the places where we can take the address\n \t   of an overloaded function, and this is not one of them.  */\n-\tpedwarn (\"%s cannot resolve address of overloaded function\",\n-\t\t    implicit ? implicit : \"void cast\");\n+\terror (\"%s cannot resolve address of overloaded function\",\n+\t       implicit ? implicit : \"void cast\");\n \texpr = void_zero_node;\n       }\n     else if (implicit && probe == expr && is_overloaded_fn (probe))"}, {"sha": "32a0db820ce8b583e6063b450e959302c6173180", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -7028,12 +7028,7 @@ compute_array_index_type (tree name, tree size)\n     {\n       /* Check to see if the array bound overflowed.  Make that an\n \t error, no matter how generous we're being.  */\n-      int old_flag_pedantic_errors = flag_pedantic_errors;\n-      int old_pedantic = pedantic;\n-      pedantic = flag_pedantic_errors = 1;\n-      constant_expression_warning (size);\n-      pedantic = old_pedantic;\n-      flag_pedantic_errors = old_flag_pedantic_errors;\n+      constant_expression_error (size);\n \n       /* An array must have a positive number of elements.  */\n       if (INT_CST_LT (size, integer_zero_node))"}, {"sha": "97a1785019558772466cf33717dbbe75c13acb7f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -2651,7 +2651,7 @@ cp_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n       dlevel = DK_WARNING;\n       break;\n     case CPP_DL_PEDWARN:\n-      dlevel = pedantic_error_kind ();\n+      dlevel = pedantic_warning_kind ();\n       break;\n     case CPP_DL_ERROR:\n       dlevel = DK_ERROR;"}, {"sha": "06c0bc2ffe5e66a54e72ff7b2715c92e26190ea8", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -647,16 +647,16 @@ unqualified_fn_lookup_error (tree name)\n \t Note that we have the exact wording of the following message in\n \t the manual (trouble.texi, node \"Name lookup\"), so they need to\n \t be kept in synch.  */\n-      pedwarn (\"there are no arguments to %qD that depend on a template \"\n-\t       \"parameter, so a declaration of %qD must be available\",\n-\t       name, name);\n+      permerror (\"there are no arguments to %qD that depend on a template \"\n+\t\t \"parameter, so a declaration of %qD must be available\",\n+\t\t name, name);\n \n       if (!flag_permissive)\n \t{\n \t  static bool hint;\n \t  if (!hint)\n \t    {\n-\t      error (\"(if you use %<-fpermissive%>, G++ will accept your \"\n+\t      inform (\"(if you use %<-fpermissive%>, G++ will accept your \"\n \t\t     \"code, but allowing the use of an undeclared name is \"\n \t\t     \"deprecated)\");\n \t      hint = true;"}, {"sha": "3ffac730a272fed4135e371c55494d31a3c71a31", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -9775,7 +9775,7 @@ cp_parser_template_id (cp_parser *parser,\n \t}\n       /* Otherwise, emit an error about the invalid digraph, but continue\n \t parsing because we got our argument list.  */\n-      pedwarn (\"%<<::%> cannot begin a template-argument list\");\n+      permerror (\"%<<::%> cannot begin a template-argument list\");\n       inform (\"%<<:%> is an alternate spelling for %<[%>. Insert whitespace \"\n \t      \"between %<<%> and %<::%>\");\n       if (!flag_permissive)"}, {"sha": "298890471273fedb7130cca10d306635dd41dfb3", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -544,11 +544,31 @@ pedwarn (const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-\t\t       pedantic_error_kind ());\n+\t\t       pedantic_warning_kind ());\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n+/* A \"permissive\" error: issues an error unless -fpermissive was given\n+   on the command line, in which case it issues a warning.  Use this\n+   for things that really should be errors but we want to support\n+   legacy code.  */\n+\n+void\n+permerror (const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n+\t\t       permissive_error_kind ());\n+  diagnostic.option_index = OPT_fpermissive;\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+}\n+\n+\n /* A hard error: the code is definitely ill-formed, and an object file\n    will not be produced.  */\n void"}, {"sha": "a249574d4aa432d76f7d8344e992ff7a26641c1e", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -50,7 +50,8 @@ typedef struct diagnostic_info\n   int option_index;\n } diagnostic_info;\n \n-#define pedantic_error_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)\n+#define pedantic_warning_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)\n+#define permissive_error_kind() (flag_permissive ? DK_WARNING : DK_ERROR)\n \n \n /*  Forward declarations.  */"}, {"sha": "686691c21e07f239ea9f936d6cef57a91a2ef4c9", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -197,6 +197,10 @@ extern int flag_dump_unnumbered;\n \n extern int flag_pedantic_errors;\n \n+/* Nonzero means make permerror produce warnings instead of errors.  */\n+\n+extern int flag_permissive;\n+\n /* Nonzero if we are compiling code for a shared library, zero for\n    executable.  */\n "}, {"sha": "b8c03ce38efecbc7b84b49c469a0af2203f11698", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -1,3 +1,10 @@\n+2008-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org> \n+\n+\tPR 24924\n+\t* g++.dg/cpp/string-2.C: This is a warning now.\n+\t* g++.dg/cpp/pedantic-errors.C: -pedantic-errors is not enabled by\n+\tdefault, so add it.\n+\t\n 2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* g++.dg/cpp0x/auto1.C: New."}, {"sha": "1684749b28219e9120bd25cfd1a35d5a73edf556", "filename": "gcc/testsuite/g++.dg/cpp/pedantic-errors.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpedantic-errors.C?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c++98 -pedantic-errors\" } */\n+\n+#if 1   \n+#endif 1 /* { dg-error \"error: extra tokens at end of #endif directive\" } */"}, {"sha": "137c3de1931ac7c2734a3e85f7ca86f901dbc13f", "filename": "gcc/testsuite/g++.dg/cpp/string-2.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fstring-2.C?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -1,7 +1,6 @@\n-// Test diagnostics for interpreting strings: should be an error by\n-// default.\n+// Test diagnostics for interpreting strings: This is a pedwarn.\n // Origin: Joseph Myers <joseph@codesourcery.com>\n // { dg-do compile }\n // { dg-options \"\" }\n \n-const char *s = \"\\q\"; // { dg-error \"error: unknown escape sequence\" }\n+const char *s = \"\\q\"; // { dg-warning \"warning: unknown escape sequence\" }"}, {"sha": "58c19c5d37db1b5d85cfed517b0d2cc4ddc627ae", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -281,6 +281,10 @@ enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n \n int flag_pedantic_errors = 0;\n \n+/* Nonzero means make permerror produce warnings instead of errors.  */\n+\n+int flag_permissive = 0;\n+\n /* -dA causes debug commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the"}, {"sha": "45e464680ff13458e035e40ad18e9f9185c659c4", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393eda6a41b2b2319868f41a754148bf037f955e/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=393eda6a41b2b2319868f41a754148bf037f955e", "patch": "@@ -62,6 +62,7 @@ extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n extern void pedwarn (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void permerror (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);"}]}