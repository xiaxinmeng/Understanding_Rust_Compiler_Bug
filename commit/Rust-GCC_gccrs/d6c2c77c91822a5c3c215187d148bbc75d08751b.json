{"sha": "d6c2c77c91822a5c3c215187d148bbc75d08751b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjMmM3N2M5MTgyMmE1YzNjMjE1MTg3ZDE0OGJiYzc1ZDA4NzUxYg==", "commit": {"author": {"name": "Josh Conner", "email": "jconner@apple.com", "date": "2007-07-06T16:57:19Z"}, "committer": {"name": "Josh Conner", "email": "jconner@gcc.gnu.org", "date": "2007-07-06T16:57:19Z"}, "message": "re PR middle-end/32602 (Sibcall optimization fails to detect overlap)\n\n2007-07-06  Josh Conner  <jconner@apple.com>\n\n\tPR middle-end/32602\n\tPR middle-end/32603\n\t* calls.c (store_one_arg): Handle arguments which are partially\n\ton the stack when detecting argument overlap.\n\n2007-07-06  Josh Conner  <jconner@apple.com>\n\n\tPR middle-end/32602\n\t* gcc.dg/sibcall-8.c: New test.\n\n2007-07-06  Josh Conner  <jconner@apple.com>\n\n\tPR middle-end/32603\n\t* gcc.target/arm/sibcall-1.c: New test.\n\nFrom-SVN: r126422", "tree": {"sha": "8514e0658aa1d573c48ff13021ae810fdecfcc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8514e0658aa1d573c48ff13021ae810fdecfcc38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6c2c77c91822a5c3c215187d148bbc75d08751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c2c77c91822a5c3c215187d148bbc75d08751b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c2c77c91822a5c3c215187d148bbc75d08751b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c2c77c91822a5c3c215187d148bbc75d08751b/comments", "author": null, "committer": null, "parents": [{"sha": "bb9d1da7db4487a5aa836a0d5a39df8751201d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9d1da7db4487a5aa836a0d5a39df8751201d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9d1da7db4487a5aa836a0d5a39df8751201d25"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "36b080b04ebde24fafbf16b5cbd01f9c665871c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6c2c77c91822a5c3c215187d148bbc75d08751b", "patch": "@@ -1,3 +1,10 @@\n+2007-07-06  Josh Conner  <jconner@apple.com>\n+\n+\tPR middle-end/32602\n+\tPR middle-end/32603\n+\t* calls.c (store_one_arg): Handle arguments which are partially\n+\ton the stack when detecting argument overlap.\n+\n 2007-07-06  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* reload1.c (choose_reload_regs): Set reload_spill_index for regs"}, {"sha": "e6741c83fb33c5d61dff365a2bd19a4065b606ef", "filename": "gcc/calls.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d6c2c77c91822a5c3c215187d148bbc75d08751b", "patch": "@@ -4326,6 +4326,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \n \t      /* expand_call should ensure this.  */\n \t      gcc_assert (!arg->locate.offset.var\n+\t\t\t  && arg->locate.size.var == 0\n \t\t\t  && GET_CODE (size_rtx) == CONST_INT);\n \n \t      if (arg->locate.offset.constant > i)\n@@ -4335,7 +4336,21 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t\t}\n \t      else if (arg->locate.offset.constant < i)\n \t\t{\n-\t\t  if (i < arg->locate.offset.constant + INTVAL (size_rtx))\n+\t\t  /* Use arg->locate.size.constant instead of size_rtx\n+\t\t     because we only care about the part of the argument\n+\t\t     on the stack.  */\n+\t\t  if (i < (arg->locate.offset.constant\n+\t\t\t   + arg->locate.size.constant))\n+\t\t    sibcall_failure = 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Even though they appear to be at the same location,\n+\t\t     if part of the outgoing argument is in registers,\n+\t\t     they aren't really at the same location.  Check for\n+\t\t     this by making sure that the incoming size is the\n+\t\t     same as the outgoing size.  */\n+\t\t  if (arg->locate.size.constant != INTVAL (size_rtx))\n \t\t    sibcall_failure = 1;\n \t\t}\n \t    }"}, {"sha": "2e0437d994b0963163bebcd77ef683fa2d6201f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6c2c77c91822a5c3c215187d148bbc75d08751b", "patch": "@@ -1,3 +1,13 @@\n+2007-07-06  Josh Conner  <jconner@apple.com>\n+\n+\tPR middle-end/32602\n+\t* gcc.dg/sibcall-8.c: New test.\n+\n+2007-07-06  Josh Conner  <jconner@apple.com>\n+\n+\tPR middle-end/32603\n+\t* gcc.target/arm/sibcall-1.c: New test.\n+\n 2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/dfp/convert-dfp-round-thread.c: New test."}, {"sha": "767040fd04b4f32fabe77ac40acf5dbf118f476f", "filename": "gcc/testsuite/gcc.dg/sibcall-8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-8.c?ref=d6c2c77c91822a5c3c215187d148bbc75d08751b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n+\n+typedef struct {\n+  int data[4];\n+} arr16_t;\n+\n+int result = 0;\n+\n+void func2(int i, int j, arr16_t arr)\n+{\n+  result = (arr.data[0] != 1\n+\t    || arr.data[1] != 2\n+\t    || arr.data[2] != 3\n+\t    || arr.data[3] != 4);\n+}\n+\n+void func1(int i, int j, int k, arr16_t a)\n+{\n+  func2(i, j, a);\n+}\n+\n+int main(int argc, const char *argv[])\n+{\n+  arr16_t arr = {{1, 2, 3, 4}};\n+    \n+  func1(0, 0, 0, arr);\n+  return result;\n+}\n+"}, {"sha": "77c94fdd0f88c1e992b8b7f23a2e1cf4ed2c63c9", "filename": "gcc/testsuite/gcc.target/arm/sibcall-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6c2c77c91822a5c3c215187d148bbc75d08751b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsibcall-1.c?ref=d6c2c77c91822a5c3c215187d148bbc75d08751b", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target { arm32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#define noinline __attribute__((noinline))\n+\n+typedef struct {\n+  int data[4];\n+} arr16_t;\n+\n+int result = 0;\n+\n+void noinline func2 (int i, int j, arr16_t arr)\n+{\n+  result = (arr.data[0] != 1\n+\t    || arr.data[1] != 2\n+\t    || arr.data[2] != 3\n+\t    || arr.data[3] != 4);\n+}\n+\n+void func1 (int i, int j, int k, int l, int m, int n, arr16_t a)\n+{\n+  func2(i, j, a);\n+}\n+\n+int main(int argc, const char *argv[])\n+{\n+  arr16_t arr = {{1, 2, 3, 4}};\n+    \n+  func1(0, 0, 0, 0, 0, 0, arr);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tb\\tfunc2\\n\" } } */\n+"}]}