{"sha": "680e4202f23ce74f3b26c7f090b9d22a56765554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgwZTQyMDJmMjNjZTc0ZjNiMjZjN2YwOTBiOWQyMmE1Njc2NTU1NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T11:03:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T11:03:30Z"}, "message": "dojump: Improve float != comparisons on x86 [PR98212]\n\nThe x86 backend doesn't have EQ or NE floating point comparisons,\nso splits x != y into x unord y || x <> y.  The problem with that is\nthat unord comparison doesn't trap on qNaN operands but LTGT does.\nThe end effect is that it doesn't trap on qNaN operands, because x unord y\nwill be true for those and so LTGT will not be performed, but as the backend\nis currently unable to merge signalling and non-signalling comparisons (and\nafter all, with this exact exception it shouldn't unless the first one is\nsignalling and the second one is non-signalling) it means we end up with:\n        ucomiss %xmm1, %xmm0\n        jp      .L4\n        comiss  %xmm1, %xmm0\n        jne     .L4\n        ret\n        .p2align 4,,10\n        .p2align 3\n.L4:\n        xorl    %eax, %eax\n        jmp     foo\nwhere the comiss is the signalling comparison, but we already know that\nthe right flags bits are already computed by the ucomiss insn.\n\nThe following patch, if target supports UNEQ comparisons, splits NE\nas x unord y || !(x uneq y) instead, which in the end means we end up with\njust:\n        ucomiss %xmm1, %xmm0\n        jp      .L4\n        jne     .L4\n        ret\n        .p2align 4,,10\n        .p2align 3\n.L4:\n        jmp     foo\nbecause UNEQ is like UNORDERED non-signalling.\n\n2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/98212\n\t* dojump.c (do_compare_rtx_and_jump): When splitting NE and backend\n\tcan do UNEQ, prefer splitting x != y into x unord y || !(x uneq y)\n\tinstead of into x unord y || x ltgt y.\n\n\t* gcc.target/i386/pr98212.c: New test.", "tree": {"sha": "e246cb295db95cea8703e7efe822b6241a81ba82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e246cb295db95cea8703e7efe822b6241a81ba82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/680e4202f23ce74f3b26c7f090b9d22a56765554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/680e4202f23ce74f3b26c7f090b9d22a56765554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/680e4202f23ce74f3b26c7f090b9d22a56765554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/680e4202f23ce74f3b26c7f090b9d22a56765554/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66dea8899df6475d5cb289491dbbff307c16c1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dea8899df6475d5cb289491dbbff307c16c1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66dea8899df6475d5cb289491dbbff307c16c1a7"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "b12bcea7468af1ef5e127dd1e9af6c2bd7baf072", "filename": "gcc/dojump.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680e4202f23ce74f3b26c7f090b9d22a56765554/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680e4202f23ce74f3b26c7f090b9d22a56765554/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=680e4202f23ce74f3b26c7f090b9d22a56765554", "patch": "@@ -1168,6 +1168,23 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \t\t  profile_probability first_prob = prob.split (cprob);\n \t\t  do_compare_rtx_and_jump (op0, op1, first_code, unsignedp, mode,\n \t\t\t\t\t   size, NULL, if_true_label, first_prob);\n+\t\t  if (orig_code == NE && can_compare_p (UNEQ, mode, ccp_jump))\n+\t\t    {\n+\t\t      /* x != y can be split into x unord y || x ltgt y\n+\t\t\t or x unord y || !(x uneq y).  The latter has the\n+\t\t\t advantage that both comparisons are non-signalling and\n+\t\t\t so there is a higher chance that the RTL optimizations\n+\t\t\t merge the two comparisons into just one.  */\n+\t\t      code = UNEQ;\n+\t\t      prob = prob.invert ();\n+\t\t      if (! if_false_label)\n+\t\t\t{\n+\t\t\t  if (! dummy_label)\n+\t\t\t    dummy_label = gen_label_rtx ();\n+\t\t\t  if_false_label = dummy_label;\n+\t\t\t}\n+\t\t      std::swap (if_false_label, if_true_label);\n+\t\t    }\n \t\t}\n \t    }\n \t}"}, {"sha": "b8ed0236eeca5d357761ee1422470507574acb71", "filename": "gcc/testsuite/gcc.target/i386/pr98212.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680e4202f23ce74f3b26c7f090b9d22a56765554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98212.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680e4202f23ce74f3b26c7f090b9d22a56765554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98212.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98212.c?ref=680e4202f23ce74f3b26c7f090b9d22a56765554", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/98212 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse -mno-avx\" } */\n+/* { dg-final { scan-assembler-times \"\\tucomiss\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\tcomiss\\t\" } } */\n+\n+void foo (void);\n+\n+void\n+bar (float a, float b)\n+{\n+  if (a != b)\n+    foo ();\n+}\n+\n+void\n+baz (float a, float b)\n+{\n+  if (a == b)\n+    foo ();\n+}"}]}