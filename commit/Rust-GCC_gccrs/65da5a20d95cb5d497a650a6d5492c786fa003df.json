{"sha": "65da5a20d95cb5d497a650a6d5492c786fa003df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkYTVhMjBkOTVjYjVkNDk3YTY1MGE2ZDU0OTJjNzg2ZmEwMDNkZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-11T20:21:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-11T20:21:02Z"}, "message": "alpha.c (alpha_gimplify_va_arg_1): Remove post_p argument.\n\n        * config/alpha/alpha.c (alpha_gimplify_va_arg_1): Remove post_p\n        argument.  Use internal post for call to gimplify_expr.  Tidy\n        rounded type size computation.\n        (alpha_gimplify_va_arg): Use get_formal_tmp_var and\n        get_initialized_tmp_var.\n\nFrom-SVN: r82997", "tree": {"sha": "c006876d1b405982af8bc09b882a6818bc6e3532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c006876d1b405982af8bc09b882a6818bc6e3532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65da5a20d95cb5d497a650a6d5492c786fa003df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65da5a20d95cb5d497a650a6d5492c786fa003df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65da5a20d95cb5d497a650a6d5492c786fa003df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65da5a20d95cb5d497a650a6d5492c786fa003df/comments", "author": null, "committer": null, "parents": [{"sha": "07659e9789694eddd0ca9b6abf86f036b400ceb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07659e9789694eddd0ca9b6abf86f036b400ceb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07659e9789694eddd0ca9b6abf86f036b400ceb8"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "e657bfc75a7b8aa523a25652ed3a30d7766a5d15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65da5a20d95cb5d497a650a6d5492c786fa003df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65da5a20d95cb5d497a650a6d5492c786fa003df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65da5a20d95cb5d497a650a6d5492c786fa003df", "patch": "@@ -1,7 +1,15 @@\n+2004-06-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg_1): Remove post_p\n+\targument.  Use internal post for call to gimplify_expr.  Tidy\n+\trounded type size computation.\n+\t(alpha_gimplify_va_arg): Use get_formal_tmp_var and\n+\tget_initialized_tmp_var.\n+\n 2004-06-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* doc/install.texi (--enable-shared): Update libobjc's shared library status.\n-\tRemove reference to libf2c.\n+\t* doc/install.texi (--enable-shared): Update libobjc's shared library\n+\tstatus.  Remove reference to libf2c.\n \n 2004-06-11  Jason Merrill  <jason@redhat.com>\n "}, {"sha": "36b765ea69b3342ee00dc200f318f95d6721e9f5", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 29, "deletions": 39, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65da5a20d95cb5d497a650a6d5492c786fa003df/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65da5a20d95cb5d497a650a6d5492c786fa003df/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=65da5a20d95cb5d497a650a6d5492c786fa003df", "patch": "@@ -6292,25 +6292,11 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n }\n \n static tree\n-alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n-\t\t\t tree *pre_p, tree *post_p)\n+alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n {\n-  tree type_size, rounded_size, ptr_type, addend, t, addr;\n+  tree type_size, ptr_type, addend, t, addr, internal_post;\n   bool indirect;\n \n-  if (type == error_mark_node\n-      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n-      || TREE_OVERFLOW (type_size))\n-    rounded_size = size_zero_node;\n-  else\n-    rounded_size = fold (build (MULT_EXPR, sizetype,\n-\t\t\t\tfold (build (TRUNC_DIV_EXPR, sizetype,\n-\t\t\t\t\t     fold (build (PLUS_EXPR, sizetype,\n-\t\t\t\t\t\t\t  type_size,\n-\t\t\t\t\t\t\t  size_int (7))),\n-\t\t\t\t\t     size_int (8))),\n-\t\t\t\tsize_int (8)));\n-\n   /* If the type could not be passed in registers, skip the block\n      reserved for the registers.  */\n   if (MUST_PASS_IN_STACK (TYPE_MODE (type), type))\n@@ -6330,22 +6316,20 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n       type = ptr_type;\n       ptr_type = build_pointer_type (type);\n       indirect = true;\n-      rounded_size = size_int (UNITS_PER_WORD);\n     }\n   else if (TREE_CODE (type) == COMPLEX_TYPE)\n     {\n       tree real_part, imag_part, real_temp;\n-      tree post = NULL_TREE;\n \n-      real_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base, offset,\n-\t\t\t\t\t   pre_p, &post);\n-      /* Copy the value into a temporary, lest the formal temporary\n+      real_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base,\n+\t\t\t\t\t   offset, pre_p);\n+\n+      /* Copy the value into a new temporary, lest the formal temporary\n \t be reused out from under us.  */\n-      real_temp = get_initialized_tmp_var (real_part, pre_p, &post);\n-      append_to_statement_list (post, pre_p);\n+      real_temp = get_initialized_tmp_var (real_part, pre_p, NULL);\n \n-      imag_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base, offset,\n-\t\t\t\t\t   pre_p, post_p);\n+      imag_part = alpha_gimplify_va_arg_1 (TREE_TYPE (type), base,\n+\t\t\t\t\t   offset, pre_p);\n \n       return build (COMPLEX_EXPR, type, real_temp, imag_part);\n     }\n@@ -6366,12 +6350,21 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset,\n \t        fold_convert (ptr_type, addend));\n   if (indirect)\n     addr = build (INDIRECT_REF, type, addr);\n-  gimplify_expr (&addr, pre_p, post_p, is_gimple_val, fb_rvalue);\n-  append_to_statement_list (*post_p, pre_p);\n-  *post_p = NULL;\n+  internal_post = NULL;\n+  gimplify_expr (&addr, pre_p, &internal_post, is_gimple_val, fb_rvalue);\n+  append_to_statement_list (internal_post, pre_p);\n \n   /* Update the offset field.  */\n-  t = fold_convert (TREE_TYPE (offset), rounded_size);\n+  type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type));\n+  if (type_size == NULL || TREE_OVERFLOW (type_size))\n+    t = size_zero_node;\n+  else\n+    {\n+      t = size_binop (PLUS_EXPR, type_size, size_int (7));\n+      t = size_binop (TRUNC_DIV_EXPR, t, size_int (8));\n+      t = size_binop (MULT_EXPR, t, size_int (8));\n+    }\n+  t = fold_convert (TREE_TYPE (offset), t);\n   t = build (MODIFY_EXPR, void_type_node, offset,\n \t     build (PLUS_EXPR, TREE_TYPE (offset), offset, t));\n   gimplify_and_add (t, pre_p);\n@@ -6394,20 +6387,17 @@ alpha_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   offset_field = build (COMPONENT_REF, TREE_TYPE (offset_field),\n \t\t\tvalist, offset_field);\n \n-  base = create_tmp_var (TREE_TYPE (base_field), NULL);\n-  offset = create_tmp_var (lang_hooks.types.type_for_size (64, 0), NULL);\n-\n-  /* Pull the fields of the structure out into temporaries.  */\n-  t = build (MODIFY_EXPR, void_type_node, base, base_field);\n-  gimplify_and_add (t, pre_p);\n+  /* Pull the fields of the structure out into temporaries.  Since we never\n+     modify the base field, we can use a formal temporary.  Sign-extend the\n+     offset field so that it's the proper width for pointer arithmetic.  */\n+  base = get_formal_tmp_var (base_field, pre_p);\n \n-  t = build (MODIFY_EXPR, void_type_node, offset,\n-\t     fold_convert (TREE_TYPE (offset), offset_field));\n-  gimplify_and_add (t, pre_p);\n+  t = fold_convert (lang_hooks.types.type_for_size (64, 0), offset_field);\n+  offset = get_initialized_tmp_var (t, pre_p, NULL);\n \n   /* Find the value.  Note that this will be a stable indirection, or\n      a composite of stable indirections in the case of complex.  */\n-  r = alpha_gimplify_va_arg_1 (type, base, offset, pre_p, post_p);\n+  r = alpha_gimplify_va_arg_1 (type, base, offset, pre_p);\n \n   /* Stuff the offset temporary back into its field.  */\n   t = build (MODIFY_EXPR, void_type_node, offset_field,"}]}