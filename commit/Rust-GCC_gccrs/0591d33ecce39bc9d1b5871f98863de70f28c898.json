{"sha": "0591d33ecce39bc9d1b5871f98863de70f28c898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5MWQzM2VjY2UzOWJjOWQxYjU4NzFmOTg4NjNkZTcwZjI4Yzg5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-03-29T19:40:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-03-29T19:40:36Z"}, "message": "raw-string-1.c: Combine C and C++ raw string tests.\n\n\t* c-c++-common/raw-string-1.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-2.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-3.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-4.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-5.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-6.c: Combine C and C++ raw string tests.\n\t* c-c++-common/raw-string-7.c: Combine C and C++ raw string tests.\n\nFrom-SVN: r157803", "tree": {"sha": "43af618bef11a361fe74d38b16468f0f3f56f2af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43af618bef11a361fe74d38b16468f0f3f56f2af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0591d33ecce39bc9d1b5871f98863de70f28c898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0591d33ecce39bc9d1b5871f98863de70f28c898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0591d33ecce39bc9d1b5871f98863de70f28c898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0591d33ecce39bc9d1b5871f98863de70f28c898/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a71bc8d66a4cf65b4e43b4cf92f245711ee251"}], "stats": {"total": 621, "additions": 155, "deletions": 466}, "files": [{"sha": "e4d15c0c22e2aa00674d0b09b510b9134fd0e36b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -1,3 +1,13 @@\n+2010-03-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-c++-common/raw-string-1.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-2.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-3.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-4.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-5.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-6.c: Combine C and C++ raw string tests.\n+\t* c-c++-common/raw-string-7.c: Combine C and C++ raw string tests.\n+\n 2010-03-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43560"}, {"sha": "b790a317738ccf8020407f845f1def5b9b7d57d7", "filename": "gcc/testsuite/c-c++-common/raw-string-1.c", "status": "renamed", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -1,5 +1,14 @@\n // { dg-do run }\n-// { dg-options \"-std=c++0x\" }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+\n+typedef __CHAR16_TYPE__\tchar16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n \n const char s0[] = R\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb", "previous_filename": "gcc/testsuite/g++.dg/ext/raw-string-1.C"}, {"sha": "503bcf5d51797496ef2152cc2f590bbb4e82de2c", "filename": "gcc/testsuite/c-c++-common/raw-string-2.c", "status": "renamed", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -1,5 +1,14 @@\n // { dg-do run }\n-// { dg-options \"-std=c++0x\" }\n+// { dg-require-effective-target wchar }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+#ifndef __cplusplus\n+#include <wchar.h>\n+\n+typedef __CHAR16_TYPE__\tchar16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#endif\n \n #define R\n #define u", "previous_filename": "gcc/testsuite/g++.dg/ext/raw-string-2.C"}, {"sha": "df9e2755518df4efb6ad3c750877e247ba12ca27", "filename": "gcc/testsuite/c-c++-common/raw-string-3.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -0,0 +1,59 @@\n+// If not c++0x/gnu99, the {,u,u8,U,L}R prefix should be parsed as separate\n+// token.\n+// { dg-do compile }\n+// { dg-options \"\" { target c } }\n+// { dg-options \"-std=c++98\" { target c++ } }\n+\n+const void\t*s0\t= R\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 7 }\n+const void\t*s1\t= uR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 9 }\n+const void\t*s2\t= UR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 11 }\n+const void\t*s3\t= u8R\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 13 }\n+const void\t*s4\t= LR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 15 }\n+\n+const int\ti0\t= R'a';\t\t// { dg-error \"expected ',' or ';'\" }\n+\t\t// { dg-error \"was not declared\" \"\" { target c++ } 18 }\n+const int\ti1\t= uR'a';\t// { dg-error \"expected ',' or ';'\" }\n+\t\t// { dg-error \"was not declared\" \"\" { target c++ } 20 }\n+const int\ti2\t= UR'a';\t// { dg-error \"expected ',' or ';'\" }\n+\t\t// { dg-error \"was not declared\" \"\" { target c++ } 22 }\n+const int\ti3\t= u8R'a';\t// { dg-error \"expected ',' or ';'\" }\n+\t\t// { dg-error \"was not declared\" \"\" { target c++ } 24 }\n+const int\ti4\t= LR'a';\t// { dg-error \"expected ',' or ';'\" }\n+\t\t// { dg-error \"was not declared\" \"\" { target c++ } 26 }\n+\n+#define R\t\"a\"\n+#define uR\t\"b\"\n+#define UR\t\"c\"\n+#define u8R\t\"d\"\n+#define LR\t\"e\"\n+\n+const void\t*s5\t= R\"(a)\";\n+const void\t*s6\t= uR\"(a)\";\n+const void\t*s7\t= UR\"(a)\";\n+const void\t*s8\t= u8R\"(a)\";\n+const void\t*s9\t= LR\"(a)\";\n+\n+#undef R\n+#undef uR\n+#undef UR\n+#undef u8R\n+#undef LR\n+\n+#define R\t1 +\n+#define uR\t2 +\n+#define UR\t3 +\n+#define u8R\t4 +\n+#define LR\t5 +\n+\n+const int\ti5\t= R'a';\n+const int\ti6\t= uR'a';\n+const int\ti7\t= UR'a';\n+const int\ti8\t= u8R'a';\n+const int\ti9\t= LR'a';\n+\n+int main () {}"}, {"sha": "626e7f257ae10713f66c5e36f5a38fe6164a357e", "filename": "gcc/testsuite/c-c++-common/raw-string-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -0,0 +1,29 @@\n+// R is not applicable for character literals.\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+const int\ti0\t= R'a';\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 }\n+const int\ti1\t= uR'a';\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 }\n+const int\ti2\t= UR'a';\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 }\n+const int\ti3\t= u8R'a';\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 }\n+const int\ti4\t= LR'a';\t// { dg-error \"was not declared|undeclared\" }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 14 }\n+\n+#define R\t1 +\n+#define uR\t2 +\n+#define UR\t3 +\n+#define u8R\t4 +\n+#define LR\t5 +\n+\n+const int\ti5\t= R'a';\n+const int\ti6\t= uR'a';\n+const int\ti7\t= UR'a';\n+const int\ti8\t= u8R'a';\n+const int\ti9\t= LR'a';\n+\n+int main () {}"}, {"sha": "adcdb75baa34fb1b43636521c4913a1e02b1a072", "filename": "gcc/testsuite/c-c++-common/raw-string-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-5.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+const void *s0 = R\"0123456789abcdefg()0123456789abcdefg\";\n+\t// { dg-error \"raw string delimiter longer\" \"\" { target *-*-* } 5 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 5 }\n+const void *s1 = R\" () \";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 8 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 8 }\n+const void *s2 = R\"\t()\t\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 11 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 11 }\n+const void *s3 = R\")())\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 14 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 14 }\n+const void *s4 = R\"@()@\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 17 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 17 }\n+const void *s5 = R\"$()$\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 20 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 20 }\n+const void *s6 = R\"\\u0040()\\u0040\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 23 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 23 }\n+\n+int main () {}"}, {"sha": "a3ae422896be4acdee3a595e5153d1cc6732a8ce", "filename": "gcc/testsuite/c-c++-common/raw-string-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-6.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+const void *s0 = R\"ouch()ouCh\";\t// { dg-error \"at end of input\" }\n+\t// { dg-error \"unterminated raw string\" \"\" { target *-*-* } 5 }"}, {"sha": "0c556639ca2aaf3aca941136ec89a96b541afe50", "filename": "gcc/testsuite/c-c++-common/raw-string-7.c", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0591d33ecce39bc9d1b5871f98863de70f28c898/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-7.c?ref=0591d33ecce39bc9d1b5871f98863de70f28c898", "patch": "@@ -1,17 +1,18 @@\n // The trailing whitespace after \\ and before newline extension\n // breaks full compliance for raw strings.\n // { dg-do run { xfail *-*-* } }\n-// { dg-options \"-std=c++0x\" }\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n \n // Note, there is a single space after \\ on the following line.\n const char *s0 = R\"(\\ \n )\";\n-// { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 7 }\n+// { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 8 }\n \n // Note, there is a single tab after \\ on the following line.\n const char *s1 = R\"(\\\t\n )\";\n-// { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 12 }\n+// { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 13 }\n \n int\n main (void)", "previous_filename": "gcc/testsuite/g++.dg/ext/raw-string-7.C"}, {"sha": "bb2e0c71b55b1ca60a67c86c0dd9b89c2ccdc575", "filename": "gcc/testsuite/g++.dg/ext/raw-string-3.C", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,58 +0,0 @@\n-// If c++98, the {,u,u8,U,L}R prefix should be parsed as separate\n-// token.\n-// { dg-do compile }\n-// { dg-options \"-std=c++98\" }\n-\n-const void\t*s0\t= R\"(a)\";\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 }\n-const void\t*s1\t= uR\"(a)\";\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 }\n-const void\t*s2\t= UR\"(a)\";\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 }\n-const void\t*s3\t= u8R\"(a)\";\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 }\n-const void\t*s4\t= LR\"(a)\";\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 14 }\n-\n-const int\ti0\t= R'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 17 }\n-const int\ti1\t= uR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 19 }\n-const int\ti2\t= UR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 21 }\n-const int\ti3\t= u8R'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 23 }\n-const int\ti4\t= LR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 25 }\n-\n-#define R\t\"a\"\n-#define uR\t\"b\"\n-#define UR\t\"c\"\n-#define u8R\t\"d\"\n-#define LR\t\"e\"\n-\n-const void\t*s5\t= R\"(a)\";\n-const void\t*s6\t= uR\"(a)\";\n-const void\t*s7\t= UR\"(a)\";\n-const void\t*s8\t= u8R\"(a)\";\n-const void\t*s9\t= LR\"(a)\";\n-\n-#undef R\n-#undef uR\n-#undef UR\n-#undef u8R\n-#undef LR\n-\n-#define R\t1 +\n-#define uR\t2 +\n-#define UR\t3 +\n-#define u8R\t4 +\n-#define LR\t5 +\n-\n-const int\ti5\t= R'a';\n-const int\ti6\t= uR'a';\n-const int\ti7\t= UR'a';\n-const int\ti8\t= u8R'a';\n-const int\ti9\t= LR'a';\n-\n-int main () {}"}, {"sha": "03179befac81a4a50642cdd0369de7be61059c62", "filename": "gcc/testsuite/g++.dg/ext/raw-string-4.C", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-4.C?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,28 +0,0 @@\n-// R is not applicable for character literals.\n-// { dg-do compile }\n-// { dg-options \"-std=c++0x\" }\n-\n-const int\ti0\t= R'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 5 }\n-const int\ti1\t= uR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 7 }\n-const int\ti2\t= UR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 9 }\n-const int\ti3\t= u8R'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 11 }\n-const int\ti4\t= LR'a';\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 13 }\n-\n-#define R\t1 +\n-#define uR\t2 +\n-#define UR\t3 +\n-#define u8R\t4 +\n-#define LR\t5 +\n-\n-const int\ti5\t= R'a';\n-const int\ti6\t= uR'a';\n-const int\ti7\t= UR'a';\n-const int\ti8\t= u8R'a';\n-const int\ti9\t= LR'a';\n-\n-int main () {}"}, {"sha": "3808fcffea2c0770ff0576cf72dca7fd3bfcb99c", "filename": "gcc/testsuite/g++.dg/ext/raw-string-5.C", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,26 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++0x\" }\n-\n-const void *s0 = R\"0123456789abcdefg()0123456789abcdefg\";\n-\t// { dg-error \"raw string delimiter longer\" \"\" { target *-*-* } 4 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 4 }\n-const void *s1 = R\" () \";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 7 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 7 }\n-const void *s2 = R\"\t()\t\";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 10 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 10 }\n-const void *s3 = R\")())\";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 13 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 13 }\n-const void *s4 = R\"@()@\";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 16 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 16 }\n-const void *s5 = R\"$()$\";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 19 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 19 }\n-const void *s6 = R\"\\u0010()\\u0010\";\n-\t// { dg-error \"invalid character\" \"\" { target *-*-* } 22 }\n-\t// { dg-error \"stray\" \"\" { target *-*-* } 22 }\n-\n-int main () {}"}, {"sha": "7906d40a1b0822557f74469ea9d3bb34915ae161", "filename": "gcc/testsuite/g++.dg/ext/raw-string-6.C", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,5 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++0x\" }\n-\n-const void *s0 = R\"ouch()ouCh\";\t// { dg-error \"at end of input\" }\n-\t// { dg-error \"unterminated raw string\" \"\" { target *-*-* } 4 }"}, {"sha": "f556b3ff552b0195d8431c04166343eb4d259378", "filename": "gcc/testsuite/gcc.dg/raw-string-1.c", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-1.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,102 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target wchar } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-#include <wchar.h>\n-\n-typedef __CHAR16_TYPE__\tchar16_t;\n-typedef __CHAR32_TYPE__ char32_t;\n-\n-const char s0[] = R\"[a\\\n-\\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n-const char s1[] = \"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char s2[] = R\"*|*[a\\\n-b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char s3[] = \"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n-\n-const char t0[] = u8R\"[a\\\n-\\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n-const char t1[] = u8\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char t2[] = u8R\"*|*[a\\\n-b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char t3[] = u8\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n-\n-const char16_t u0[] = uR\"[a\\\n-\\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n-const char16_t u1[] = u\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char16_t u2[] = uR\"*|*[a\\\n-b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char16_t u3[] = u\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n-\n-const char32_t U0[] = UR\"[a\\\n-\\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n-const char32_t U1[] = U\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char32_t U2[] = UR\"*|*[a\\\n-b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char32_t U3[] = U\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n-\n-const wchar_t L0[] = LR\"[a\\\n-\\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n-const wchar_t L1[] = L\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const wchar_t L2[] = LR\"*|*[a\\\n-b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const wchar_t L3[] = L\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n-\n-int\n-main (void)\n-{\n-  if (sizeof (s0) != sizeof (s1)\n-      || __builtin_memcmp (s0, s1, sizeof (s0)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (s2) != sizeof (s3)\n-      || __builtin_memcmp (s2, s3, sizeof (s2)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (t0) != sizeof (t1)\n-      || __builtin_memcmp (t0, t1, sizeof (t0)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (t2) != sizeof (t3)\n-      || __builtin_memcmp (t2, t3, sizeof (t2)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (u0) != sizeof (u1)\n-      || __builtin_memcmp (u0, u1, sizeof (u0)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (u2) != sizeof (u3)\n-      || __builtin_memcmp (u2, u3, sizeof (u2)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (U0) != sizeof (U1)\n-      || __builtin_memcmp (U0, U1, sizeof (U0)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (U2) != sizeof (U3)\n-      || __builtin_memcmp (U2, U3, sizeof (U2)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (L0) != sizeof (L1)\n-      || __builtin_memcmp (L0, L1, sizeof (L0)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (L2) != sizeof (L3)\n-      || __builtin_memcmp (L2, L3, sizeof (L2)) != 0)\n-    __builtin_abort ();\n-  if (sizeof (R\"*[]*\") != 1\n-      || __builtin_memcmp (R\"*[]*\", \"\", 1) != 0)\n-    __builtin_abort ();\n-  return 0;\n-}"}, {"sha": "4517a0330c904ef97e0623212df6d09d7be34c54", "filename": "gcc/testsuite/gcc.dg/raw-string-2.c", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-2.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,110 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target wchar } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-#include <wchar.h>\n-\n-typedef __CHAR16_TYPE__\tchar16_t;\n-typedef __CHAR32_TYPE__ char32_t;\n-\n-#define R\n-#define u\n-#define uR\n-#define U\n-#define UR\n-#define u8\n-#define u8R\n-#define L\n-#define LR\n-\n-const char s00[] = R\"[a]\" \"[b]\";\n-const char s01[] = \"[a]\" R\"*[b]*\";\n-const char s02[] = R\"[a]\" R\"[b]\";\n-const char s03[] = R\"-[a]-\" u8\"[b]\";\n-const char s04[] = \"[a]\" u8R\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char s05[] = R\"[a]\" u8R\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char s06[] = u8R\";([a];(\" \"[b]\";\n-const char s07[] = u8\"[a]\" R\"[b]\";\n-const char s08[] = u8R\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char s09[] = u8R\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" u8\"[b]\";\n-const char s10[] = u8\"[a]\" u8R\"0123456789abcdef[b]0123456789abcdef\";\n-const char s11[] = u8R\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" u8R\"w[b]w\";\n-\n-const char16_t u03[] = R\"-[a]-\" u\"[b]\";\n-const char16_t u04[] = \"[a]\" uR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char16_t u05[] = R\"[a]\" uR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char16_t u06[] = uR\";([a];(\" \"[b]\";\n-const char16_t u07[] = u\"[a]\" R\"[b]\";\n-const char16_t u08[] = uR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char16_t u09[] = uR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" u\"[b]\";\n-const char16_t u10[] = u\"[a]\" uR\"0123456789abcdef[b]0123456789abcdef\";\n-const char16_t u11[] = uR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" uR\"w[b]w\";\n-\n-const char32_t U03[] = R\"-[a]-\" U\"[b]\";\n-const char32_t U04[] = \"[a]\" UR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char32_t U05[] = R\"[a]\" UR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char32_t U06[] = UR\";([a];(\" \"[b]\";\n-const char32_t U07[] = U\"[a]\" R\"[b]\";\n-const char32_t U08[] = UR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char32_t U09[] = UR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" U\"[b]\";\n-const char32_t U10[] = U\"[a]\" UR\"0123456789abcdef[b]0123456789abcdef\";\n-const char32_t U11[] = UR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" UR\"w[b]w\";\n-\n-const wchar_t L03[] = R\"-[a]-\" L\"[b]\";\n-const wchar_t L04[] = \"[a]\" LR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const wchar_t L05[] = R\"[a]\" LR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const wchar_t L06[] = LR\";([a];(\" \"[b]\";\n-const wchar_t L07[] = L\"[a]\" R\"[b]\";\n-const wchar_t L08[] = LR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const wchar_t L09[] = LR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" L\"[b]\";\n-const wchar_t L10[] = L\"[a]\" LR\"0123456789abcdef[b]0123456789abcdef\";\n-const wchar_t L11[] = LR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" LR\"w[b]w\";\n-\n-int\n-main (void)\n-{\n-#define TEST(str, val) \\\n-  if (sizeof (str) != sizeof (val) \\\n-      || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n-    __builtin_abort ()\n-  TEST (s00, \"a[b]\");\n-  TEST (s01, \"[a]b\");\n-  TEST (s02, \"ab\");\n-  TEST (s03, \"a[b]\");\n-  TEST (s04, \"[a]b\");\n-  TEST (s05, \"ab\");\n-  TEST (s06, \"a[b]\");\n-  TEST (s07, \"[a]b\");\n-  TEST (s08, \"ab\");\n-  TEST (s09, \"a[b]\");\n-  TEST (s10, \"[a]b\");\n-  TEST (s11, \"ab\");\n-  TEST (u03, u\"a[b]\");\n-  TEST (u04, u\"[a]b\");\n-  TEST (u05, u\"ab\");\n-  TEST (u06, u\"a[b]\");\n-  TEST (u07, u\"[a]b\");\n-  TEST (u08, u\"ab\");\n-  TEST (u09, u\"a[b]\");\n-  TEST (u10, u\"[a]b\");\n-  TEST (u11, u\"ab\");\n-  TEST (U03, U\"a[b]\");\n-  TEST (U04, U\"[a]b\");\n-  TEST (U05, U\"ab\");\n-  TEST (U06, U\"a[b]\");\n-  TEST (U07, U\"[a]b\");\n-  TEST (U08, U\"ab\");\n-  TEST (U09, U\"a[b]\");\n-  TEST (U10, U\"[a]b\");\n-  TEST (U11, U\"ab\");\n-  TEST (L03, L\"a[b]\");\n-  TEST (L04, L\"[a]b\");\n-  TEST (L05, L\"ab\");\n-  TEST (L06, L\"a[b]\");\n-  TEST (L07, L\"[a]b\");\n-  TEST (L08, L\"ab\");\n-  TEST (L09, L\"a[b]\");\n-  TEST (L10, L\"[a]b\");\n-  TEST (L11, L\"ab\");\n-  return 0;\n-}"}, {"sha": "9226411d2e0d883c705546e506ba8761ad7deb7c", "filename": "gcc/testsuite/gcc.dg/raw-string-3.c", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-3.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,53 +0,0 @@\n-/* If not gnu99, the {,u,u8,U,L}R prefix should be parsed as separate\n-   token. */\n-/* { dg-do compile } */\n-/* { dg-options \"\" } */\n-\n-const void\t*s0\t= R\"[a]\";\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 } */\n-const void\t*s1\t= uR\"[a]\";\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 } */\n-const void\t*s2\t= UR\"[a]\";\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 } */\n-const void\t*s3\t= u8R\"[a]\";\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 } */\n-const void\t*s4\t= LR\"[a]\";\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 14 } */\n-\n-const int\ti0\t= R'a';\t\t/* { dg-error \"expected ',' or ';'\" } */\n-const int\ti1\t= uR'a';\t/* { dg-error \"expected ',' or ';'\" } */\n-const int\ti2\t= UR'a';\t/* { dg-error \"expected ',' or ';'\" } */\n-const int\ti3\t= u8R'a';\t/* { dg-error \"expected ',' or ';'\" } */\n-const int\ti4\t= LR'a';\t/* { dg-error \"expected ',' or ';'\" } */\n-\n-#define R\t\"a\"\n-#define uR\t\"b\"\n-#define UR\t\"c\"\n-#define u8R\t\"d\"\n-#define LR\t\"e\"\n-\n-const void\t*s5\t= R\"[a]\";\n-const void\t*s6\t= uR\"[a]\";\n-const void\t*s7\t= UR\"[a]\";\n-const void\t*s8\t= u8R\"[a]\";\n-const void\t*s9\t= LR\"[a]\";\n-\n-#undef R\n-#undef uR\n-#undef UR\n-#undef u8R\n-#undef LR\n-\n-#define R\t1 +\n-#define uR\t2 +\n-#define UR\t3 +\n-#define u8R\t4 +\n-#define LR\t5 +\n-\n-const int\ti5\t= R'a';\n-const int\ti6\t= uR'a';\n-const int\ti7\t= UR'a';\n-const int\ti8\t= u8R'a';\n-const int\ti9\t= LR'a';\n-\n-int main () {}"}, {"sha": "24d56ed7464cd5adaf9d3fc013a122ecadab2c09", "filename": "gcc/testsuite/gcc.dg/raw-string-4.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-4.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,28 +0,0 @@\n-/* R is not applicable for character literals.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-const int\ti0\t= R'a';\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 5 } */\n-const int\ti1\t= uR'a';\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 7 } */\n-const int\ti2\t= UR'a';\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 9 } */\n-const int\ti3\t= u8R'a';\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 11 } */\n-const int\ti4\t= LR'a';\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 13 } */\n-\n-#define R\t1 +\n-#define uR\t2 +\n-#define UR\t3 +\n-#define u8R\t4 +\n-#define LR\t5 +\n-\n-const int\ti5\t= R'a';\n-const int\ti6\t= uR'a';\n-const int\ti7\t= UR'a';\n-const int\ti8\t= u8R'a';\n-const int\ti9\t= LR'a';\n-\n-int main () {}"}, {"sha": "3dbf97ded90820b6d09b6c7c48a35b7fb7873ce5", "filename": "gcc/testsuite/gcc.dg/raw-string-5.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-5.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,23 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-const void *s0 = R\"0123456789abcdefg[]0123456789abcdefg\";\n-\t/* { dg-error \"raw string delimiter longer\" \"\" { target *-*-* } 4 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 4 } */\n-const void *s1 = R\" [] \";\n-\t/* { dg-error \"invalid character\" \"\" { target *-*-* } 7 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 7 } */\n-const void *s2 = R\"\t[]\t\";\n-\t/* { dg-error \"invalid character\" \"\" { target *-*-* } 10 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 10 } */\n-const void *s3 = R\"][]]\";\n-\t/* { dg-error \"invalid character\" \"\" { target *-*-* } 13 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 13 } */\n-const void *s4 = R\"@[]@\";\n-\t/* { dg-error \"invalid character\" \"\" { target *-*-* } 16 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 16 } */\n-const void *s5 = R\"$[]$\";\n-\t/* { dg-error \"invalid character\" \"\" { target *-*-* } 19 } */\n-\t/* { dg-error \"stray\" \"\" { target *-*-* } 19 } */\n-\n-int main () {}"}, {"sha": "338087a25fde8058ca9c751993b7c47839fa62b7", "filename": "gcc/testsuite/gcc.dg/raw-string-6.c", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-6.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,5 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-const void *s0 = R\"ouch[]ouCh\";\t/* { dg-error \"expected expression at end of input\" } */\n-\t/* { dg-error \"unterminated raw string\" \"\" { target *-*-* } 4 } */"}, {"sha": "5bb4bec20856e77b320f88c8645665f9cb630930", "filename": "gcc/testsuite/gcc.dg/raw-string-7.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a71bc8d66a4cf65b4e43b4cf92f245711ee251/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fraw-string-7.c?ref=49a71bc8d66a4cf65b4e43b4cf92f245711ee251", "patch": "@@ -1,23 +0,0 @@\n-/* The trailing whitespace after \\ and before newline extension\n-   breaks full compliance for raw strings.  */\n-/* { dg-do run { xfail *-*-* } } */\n-/* { dg-options \"-std=gnu99\" } */\n-\n-/* Note, there is a single space after \\ on the following line.  */\n-const void *s0 = R\"[\\ \n-]\";\n-/* { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 7 } */\n-\n-/* Note, there is a single tab after \\ on the following line.  */\n-const void *s1 = R\"[\\\t\n-]\";\n-/* { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 12 } */\n-\n-int\n-main (void)\n-{\n-  if (__builtin_strcmp (s0, \"\\\\ \\n\") != 0\n-      || __builtin_strcmp (s1, \"\\\\\\t\\n\") != 0)\n-    __builtin_abort ();\n-  return 0;\n-}"}]}