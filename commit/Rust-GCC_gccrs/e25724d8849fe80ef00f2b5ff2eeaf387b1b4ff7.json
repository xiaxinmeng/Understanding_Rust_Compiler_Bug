{"sha": "e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1NzI0ZDg4NDlmZTgwZWYwMGYyYjVmZjJlZWFmMzg3YjFiNGZmNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@one.net.au", "date": "2001-04-13T05:12:12Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2001-04-13T05:12:12Z"}, "message": "elfos.h (SELECT_SECTION): Undef before defining.\n\n\t* elfos.h (SELECT_SECTION): Undef before defining.\n\t* pa-linux.h (LINUX_DEFAULT_ELF, PTRDIFF_TYPE, CPP_SPEC): Remove.\n\t(LIB_SPEC): Remove -lmilli.\n\t(DBX_REGISTER_NUMBER): Remove.\n\t(PREFERRED_DEBUGGING_TYPE, DWARF2_ASM_LINE_DEBUG_INFO,\n\t(DWARF2_UNWIND_INFO, ASM_SPEC, LINK_SPEC, FUNCTION_OK_FOR_SIBCALL,\n\tNO_PROFILE_COUNTERS, SELECT_RTX_SECTION, INCOMING_RETURN_ADDR_RTX,\n\tDWARF_FRAME_RETURN_COLUMN, STRING_ASM_OP, TEXT_SECTION_ASM_OP,\n\tDATA_SECTION_ASM_OP, BSS_SECTION_ASM_OP, ASM_FILE_START,\n\tASM_OUTPUT_DEF, ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT,\n\tASM_OUTPUT_LABEL, ASM_GLOBALIZE_LABEL, ASM_DECLARE_FUNCTION_NAME,\n\tTARGET_GAS): Define.\n\t* pa.c (output_arg_descriptor): Disable for TARGET_ELF32.\n\t(function_arg): If TARGET_ELF32, pass fp args in both general and fp\n\tregs if we don't have a prototype.\n\t* pa.md (canonicalize_funcptr_for_compare): Not for TARGET_ELF32.\n\t* pa.h (TARGET_ELF32): Default to 0 if undefined.\n\t(EH_RETURN_DATA_REGNO, EH_RETURN_STACKADJ_RTX,\n\tEH_RETURN_HANDLER_RTX): Define.\n\t* pa32-regs.h (DBX_REGISTER_NUMBER): Remove unnecessary test.\n\t(DWARF_FRAME_REGNUM): Define.\n\t* pa64-regs.h (DWARF_FRAME_REGNUM): Define.\n\t* pa32-linux.h: New file.\n\t* pa64-linux.h: New file.\n\nFrom-SVN: r41322", "tree": {"sha": "9ca4e20dd11d28df4fdfc41817b2c07ef6ce0a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca4e20dd11d28df4fdfc41817b2c07ef6ce0a41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/comments", "author": null, "committer": null, "parents": [{"sha": "380109278cf000f21e2b685649651827d8aa9fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380109278cf000f21e2b685649651827d8aa9fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380109278cf000f21e2b685649651827d8aa9fd2"}], "stats": {"total": 242, "additions": 206, "deletions": 36}, "files": [{"sha": "6ff34828222c4b5781d1f197d660b925c4d6ebcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -1,5 +1,30 @@\n 2001-04-13  Alan Modra  <amodra@one.net.au>\n \n+\t* elfos.h (SELECT_SECTION): Undef before defining.\n+\t* pa-linux.h (LINUX_DEFAULT_ELF, PTRDIFF_TYPE, CPP_SPEC): Remove.\n+\t(LIB_SPEC): Remove -lmilli.\n+\t(DBX_REGISTER_NUMBER): Remove.\n+\t(PREFERRED_DEBUGGING_TYPE, DWARF2_ASM_LINE_DEBUG_INFO,\n+\t(DWARF2_UNWIND_INFO, ASM_SPEC, LINK_SPEC, FUNCTION_OK_FOR_SIBCALL,\n+\tNO_PROFILE_COUNTERS, SELECT_RTX_SECTION, INCOMING_RETURN_ADDR_RTX,\n+\tDWARF_FRAME_RETURN_COLUMN, STRING_ASM_OP, TEXT_SECTION_ASM_OP,\n+\tDATA_SECTION_ASM_OP, BSS_SECTION_ASM_OP, ASM_FILE_START,\n+\tASM_OUTPUT_DEF, ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT,\n+\tASM_OUTPUT_LABEL, ASM_GLOBALIZE_LABEL, ASM_DECLARE_FUNCTION_NAME,\n+\tTARGET_GAS): Define.\n+\t* pa.c (output_arg_descriptor): Disable for TARGET_ELF32.\n+\t(function_arg): If TARGET_ELF32, pass fp args in both general and fp\n+\tregs if we don't have a prototype.\n+\t* pa.md (canonicalize_funcptr_for_compare): Not for TARGET_ELF32.\n+\t* pa.h (TARGET_ELF32): Default to 0 if undefined.\n+\t(EH_RETURN_DATA_REGNO, EH_RETURN_STACKADJ_RTX,\n+\tEH_RETURN_HANDLER_RTX): Define.\n+\t* pa32-regs.h (DBX_REGISTER_NUMBER): Remove unnecessary test.\n+\t(DWARF_FRAME_REGNUM): Define.\n+\t* pa64-regs.h (DWARF_FRAME_REGNUM): Define.\n+\t* pa32-linux.h: New file.\n+\t* pa64-linux.h: New file.\n+\n \t* pa-64.h (WCHAR_TYPE, WCHAR_TYPE_SIZE): Define.\n \t(ASM_OUTPUT_DOUBLE_INT): Format, protect macro with do..while.\n \t(LINK_SPEC, LIB_SPEC, MD_EXEC_PREFIX, MD_STARTFILE_PREFIX,"}, {"sha": "4573085ed9bc3ae4a387cfab51de725a9056d78c", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -494,6 +494,7 @@ dtors_section ()\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n+#undef SELECT_SECTION\n #define SELECT_SECTION(DECL, RELOC)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\\"}, {"sha": "baa1cf5b4a5d5cfe541afca897b410a2f1dedec9", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 154, "deletions": 31, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for PA_RISC with ELF format\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,38 +18,161 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* FIXME - this doesn't seem to be used anywhere */\n-#define LINUX_DEFAULT_ELF\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n+/* Use DWARF2 debugging info and unwind.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#define DWARF2_ASM_LINE_DEBUG_INFO 1\n+#define DWARF2_UNWIND_INFO 1\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D__ELF__ -Dunix -D__hppa__ -Dlinux -Asystem=unix -Asystem=posix -Acpu=hppa -Amachine=hppa -Amachine=bigendian\"\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\\\n- %{msnake:-D_PA_RISC1_1}\\\n- %{mpa-risc-1-1:-D_PA_RISC1_1}\"\n-\n #undef\tLIB_SPEC\n-#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} -lmilli\"\n-\n-/* How to renumber registers for dbx and gdb.\n-\n-   It is entirely possible linux will use a different numbering scheme.\n-   Until we know for sure, it's the same as hpux, osf & bsd, but we're\n-   ready if it needs to be different.\n-\n-   Registers 0  - 31 remain unchanged.\n-\n-   Registers 32 - 87 are mapped to 72 - 127\n-\n-   Register 88 is mapped to 32.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n-  ((REGNO) <= 31 ? (REGNO) :\t\t\t\t\t\t\\\n-   ((REGNO) > 31 && (REGNO) <= 87 ? (REGNO) + 40 : 32))\n+#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{v:-V} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n+\n+/* Define this for shared library support because it isn't in the main\n+   linux.h file.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!static: \\\n+      %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}} \\\n+      %{static:-static}}\"\n+\n+/* Sibcalls, stubs, and elf sections don't play well.  */\n+#undef FUNCTION_OK_FOR_SIBCALL\n+#define FUNCTION_OK_FOR_SIBCALL(x) 0\n+\n+/* glibc's profiling functions don't need gcc to allocate counters.  */\n+#define NO_PROFILE_COUNTERS 1\n+\n+/* Put plabels into the data section so we can relocate them.  */\n+#undef SELECT_RTX_SECTION\n+#define SELECT_RTX_SECTION(MODE,RTX)\t\\\n+  if (flag_pic && function_label_operand (RTX, MODE))\t\\\n+    data_section ();\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    readonly_data_section ();\n+\n+/* A C expression whose value is RTL representing the location of the\n+   incoming return address at the beginning of any function, before the\n+   prologue.  */\n+#define INCOMING_RETURN_ADDR_RTX  (gen_rtx_REG (word_mode, 2))\n+#define DWARF_FRAME_RETURN_COLUMN (DWARF_FRAME_REGNUM (2))\n+\n+/* Define the strings used for the special svr4 .type and .size directives.\n+   These strings generally do not vary from one system running svr4 to\n+   another, but if a given system (e.g. m88k running svr) needs to use\n+   different pseudo-op names for these, they may be overridden in the\n+   file which includes this one.  */\n+\n+#undef STRING_ASM_OP\n+#define STRING_ASM_OP   \".stringz\"\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n+\n+/* Output at beginning of assembler file.  We override the definition\n+   from <linux.h> so that we can get the proper .LEVEL directive. */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE) \\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (write_symbols != NO_DEBUG)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  output_file_directive (FILE, main_input_filename);\t\\\n+\t  fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", FILE);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\tfputs(\"\\t.LEVEL 2.0w\\n\", FILE);\t\t\t\t\\\n+      else if (TARGET_PA_20)\t\t\t\t\t\\\n+\tfputs(\"\\t.LEVEL 2.0\\n\", FILE);\t\t\t\t\\\n+      else if (TARGET_PA_11)\t\t\t\t\t\\\n+\tfputs(\"\\t.LEVEL 1.1\\n\", FILE);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tfputs(\"\\t.LEVEL 1.0\\n\", FILE);\t\t\t\t\\\n+      if (profile_flag)\t\t\t\t\t\t\\\n+\tfputs (\"\\t.IMPORT _mcount, CODE\\n\", FILE);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+   while (0)\n+\n+/* Output a definition */\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2) \\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\t%s\\t\", SET_ASM_OP);\t\t\t\\\n+      assemble_name (FILE, LABEL1);\t\t\t\t\\\n+      fprintf (FILE, \",\");\t\t\t\t\t\\\n+      assemble_name (FILE, LABEL2);\t\t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Define these to generate the Linux/ELF/SysV style of internal\n+   labels all the time - i.e. to be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL in <elfos.h>.  Compare these with the\n+   ones in pa.h and note the lack of dollar signs in these.  FIXME:\n+   shouldn't we fix pa.h to use ASM_GENERATE_INTERNAL_LABEL instead? */\n+\n+#undef ASM_OUTPUT_ADDR_VEC_ELT\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tstw %%r1,-16(%%r30)\\n\\tldil LR'.L%d,%%r1\\n\\tbe RR'.L%d(%%sr4,%%r1)\\n\\tldw -16(%%r30),%%r1\\n\", VALUE, VALUE);\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tstw %%r1,-16(%%r30)\\n\\tldw T'.L%d(%%r19),%%r1\\n\\tbv %%r0(%%r1)\\n\\tldw -16(%%r30),%%r1\\n\", VALUE);\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+\n+/* This is how to output the definition of a user-level label named NAME,\n+   such as the label on a static function or variable NAME.  */\n+\n+#undef ASM_OUTPUT_LABEL\n+#define ASM_OUTPUT_LABEL(FILE, NAME) \\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\\\n+      fputs (\":\\n\", FILE);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* NOTE: ASM_OUTPUT_INTERNAL_LABEL() is defined for us by elfos.h, and\n+   does what we want (i.e. uses colons).  It must be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL(), so do not define it here.  */\n+\n+#undef ASM_GLOBALIZE_LABEL\n+#define ASM_GLOBALIZE_LABEL(FILE, NAME) \\\n+  (fputs (\".globl \", FILE), assemble_name (FILE, NAME), fputs (\"\\n\", FILE))\n+\n+/* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n+   labels in a function declaration (since pa.c seems determined to do\n+   it differently)  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\\\n+      putc ('\\n', FILE);\t\t\t\t\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Linux always uses gas.  */\n+#undef TARGET_GAS\n+#define TARGET_GAS 1"}, {"sha": "c7d828e4ccee9e1800fbf4cc396af62afb1d12e7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -4552,8 +4552,8 @@ output_arg_descriptor (call_insn)\n   int regno;\n \n   /* We neither need nor want argument location descriptors for the\n-     64bit runtime environment.  */\n-  if (TARGET_64BIT)\n+     64bit runtime environment or the ELF32 environment.  */\n+  if (TARGET_64BIT || TARGET_ELF32)\n     return;\n \n   for (i = 0; i < 4; i++)\n@@ -7057,7 +7057,7 @@ function_arg (cum, mode, type, named, incoming)\n     }\n   /* Determine if the register needs to be passed in both general and\n      floating point registers.  */\n-  if ((TARGET_PORTABLE_RUNTIME || TARGET_64BIT)\n+  if ((TARGET_PORTABLE_RUNTIME || TARGET_64BIT || TARGET_ELF32)\n       /* If we are doing soft-float with portable runtime, then there\n \t is no need to worry about FP regs.  */\n       && ! TARGET_SOFT_FLOAT"}, {"sha": "74db8a43bf28de5b0c386ea2ed2395847dabebd3", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -171,6 +171,11 @@ extern int target_flags;\n #define TARGET_64BIT 0\n #endif\n \n+/* Generate code for ELF32 ABI. */\n+#ifndef TARGET_ELF32\n+#define TARGET_ELF32 0\n+#endif\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -516,6 +521,12 @@ extern void hppa_init_pic_save PARAMS ((void));\n /* Register in which address to store a structure value\n    is passed to a function.  */\n #define STRUCT_VALUE_REGNUM 28\n+\n+/* Describe how we implement __builtin_eh_return.  */\n+#define EH_RETURN_DATA_REGNO(N)\t\\\n+  ((N) < 3 ? (N) + 20 : (N) == 4 ? 31 : INVALID_REGNUM)\n+#define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, 29)\n+#define EH_RETURN_HANDLER_RTX\tgen_rtx_REG (Pmode, 2)\n \f\n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}, {"sha": "7a309eb6d9d1ba7e595d39fd8c5b55b83f2e89a5", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -7021,7 +7021,7 @@\n \t      (clobber (reg:SI 31))])\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n \t(reg:SI 29))]\n-  \"! TARGET_PORTABLE_RUNTIME && !TARGET_64BIT\"\n+  \"! TARGET_PORTABLE_RUNTIME && !TARGET_64BIT && !TARGET_ELF32\"\n   \"\n {\n   operands[2] = gen_reg_rtx (SImode);"}, {"sha": "206acf15af22da829038b523c9a24f782dbe0944", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -186,7 +186,12 @@\n \n #define DBX_REGISTER_NUMBER(REGNO) \\\n   ((REGNO) <= 31 ? (REGNO) :\t\t\t\t\t\t\\\n-   ((REGNO) > 31 && (REGNO) <= 87 ? (REGNO) + 40 : 32))\n+   ((REGNO) <= 87 ? (REGNO) + 40 : 32))\n+\n+/* We must not use the DBX register numbers for the DWARF 2 CFA column\n+   numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n+   Instead use the identity mapping.  */\n+#define DWARF_FRAME_REGNUM(REG) REG\n \n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants."}, {"sha": "59e383cc6aa21cc710eb117b6d235483938f8019", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=e25724d8849fe80ef00f2b5ff2eeaf387b1b4ff7", "patch": "@@ -176,6 +176,11 @@ Boston, MA 02111-1307, USA.  */\n   ((REGNO) <= 31 ? (REGNO) :\t\t\t\t\t\t\\\n    ((REGNO) > 31 && (REGNO) <= 60 ? (REGNO - 32) * 2 + 72 : 32))\n \n+/* We must not use the DBX register numbers for the DWARF 2 CFA column\n+   numbers because that maps to numbers beyond FIRST_PSEUDO_REGISTER.\n+   Instead use the identity mapping.  */\n+#define DWARF_FRAME_REGNUM(REG) REG\n+\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n "}]}