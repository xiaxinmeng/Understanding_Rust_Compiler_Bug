{"sha": "14745bcac0e7b90a5c671b1f9402a53e57ea6431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3NDViY2FjMGU3YjkwYTVjNjcxYjFmOTQwMmE1M2U1N2VhNjQzMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-14T18:48:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-14T18:48:38Z"}, "message": "re PR middle-end/62263 (Good codegen for bitwise rotate requires code that is technically undefined behavior)\n\n\tPR middle-end/62263\n\tPR middle-end/82498\n\t* tree-ssa-phiopt.c (value_replacement): Comment fix.  Handle\n\tup to 2 preparation statements for ASSIGN in MIDDLE_BB.\n\n\t* c-c++-common/rotate-8.c: Expect no PHIs in optimized dump.\n\nFrom-SVN: r253761", "tree": {"sha": "1351207df77987a4e690ad712748c6ac1b8091c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1351207df77987a4e690ad712748c6ac1b8091c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14745bcac0e7b90a5c671b1f9402a53e57ea6431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14745bcac0e7b90a5c671b1f9402a53e57ea6431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14745bcac0e7b90a5c671b1f9402a53e57ea6431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14745bcac0e7b90a5c671b1f9402a53e57ea6431/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc453086d255f5443d956874c0a95877913c759f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc453086d255f5443d956874c0a95877913c759f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc453086d255f5443d956874c0a95877913c759f"}], "stats": {"total": 125, "additions": 118, "deletions": 7}, "files": [{"sha": "1b3cacd832f1f25bb928160807c246587aa08b43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14745bcac0e7b90a5c671b1f9402a53e57ea6431", "patch": "@@ -1,5 +1,10 @@\n 2017-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/62263\n+\tPR middle-end/82498\n+\t* tree-ssa-phiopt.c (value_replacement): Comment fix.  Handle\n+\tup to 2 preparation statements for ASSIGN in MIDDLE_BB.\n+\n \tPR middle-end/62263\n \tPR middle-end/82498\n \t* tree-ssa-forwprop.c (simplify_rotate): Allow def_arg1[N]"}, {"sha": "609269a074121de41ce0dbbd5a63f1a9f4b754e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14745bcac0e7b90a5c671b1f9402a53e57ea6431", "patch": "@@ -1,5 +1,9 @@\n 2017-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/62263\n+\tPR middle-end/82498\n+\t* c-c++-common/rotate-8.c: Expect no PHIs in optimized dump.\n+\n \tPR middle-end/62263\n \tPR middle-end/82498\n \t* c-c++-common/rotate-5.c (f2): New function.  Move old"}, {"sha": "9ba3e940930215e92303aa31b9fddd30fa8fd278", "filename": "gcc/testsuite/c-c++-common/rotate-8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c?ref=14745bcac0e7b90a5c671b1f9402a53e57ea6431", "patch": "@@ -3,6 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n /* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 23 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"PHI <\" \"optimized\" } } */\n \n unsigned int\n f1 (unsigned int x, unsigned char y)"}, {"sha": "c3bdc9e09a7c571b257975062556494c9832e92d", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 108, "deletions": 7, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14745bcac0e7b90a5c671b1f9402a53e57ea6431/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=14745bcac0e7b90a5c671b1f9402a53e57ea6431", "patch": "@@ -995,11 +995,13 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \n     }\n \n-  /* Now optimize (x != 0) ? x + y : y to just y.\n-     The following condition is too restrictive, there can easily be another\n-     stmt in middle_bb, for instance a CONVERT_EXPR for the second argument.  */\n-  gimple *assign = last_and_only_stmt (middle_bb);\n-  if (!assign || gimple_code (assign) != GIMPLE_ASSIGN\n+  /* Now optimize (x != 0) ? x + y : y to just x + y.  */\n+  gsi = gsi_last_nondebug_bb (middle_bb);\n+  if (gsi_end_p (gsi))\n+    return 0;\n+\n+  gimple *assign = gsi_stmt (gsi);\n+  if (!is_gimple_assign (assign)\n       || gimple_assign_rhs_class (assign) != GIMPLE_BINARY_RHS\n       || (!INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n \t  && !POINTER_TYPE_P (TREE_TYPE (arg0))))\n@@ -1009,6 +1011,71 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n   if (!gimple_seq_empty_p (phi_nodes (middle_bb)))\n     return 0;\n \n+  /* Allow up to 2 cheap preparation statements that prepare argument\n+     for assign, e.g.:\n+      if (y_4 != 0)\n+\tgoto <bb 3>;\n+      else\n+\tgoto <bb 4>;\n+     <bb 3>:\n+      _1 = (int) y_4;\n+      iftmp.0_6 = x_5(D) r<< _1;\n+     <bb 4>:\n+      # iftmp.0_2 = PHI <iftmp.0_6(3), x_5(D)(2)>\n+     or:\n+      if (y_3(D) == 0)\n+\tgoto <bb 4>;\n+      else\n+\tgoto <bb 3>;\n+     <bb 3>:\n+      y_4 = y_3(D) & 31;\n+      _1 = (int) y_4;\n+      _6 = x_5(D) r<< _1;\n+     <bb 4>:\n+      # _2 = PHI <x_5(D)(2), _6(3)>  */\n+  gimple *prep_stmt[2] = { NULL, NULL };\n+  int prep_cnt;\n+  for (prep_cnt = 0; ; prep_cnt++)\n+    {\n+      gsi_prev_nondebug (&gsi);\n+      if (gsi_end_p (gsi))\n+\tbreak;\n+\n+      gimple *g = gsi_stmt (gsi);\n+      if (gimple_code (g) == GIMPLE_LABEL)\n+\tbreak;\n+\n+      if (prep_cnt == 2 || !is_gimple_assign (g))\n+\treturn 0;\n+\n+      tree lhs = gimple_assign_lhs (g);\n+      tree rhs1 = gimple_assign_rhs1 (g);\n+      use_operand_p use_p;\n+      gimple *use_stmt;\n+      if (TREE_CODE (lhs) != SSA_NAME\n+\t  || TREE_CODE (rhs1) != SSA_NAME\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t  || !single_imm_use (lhs, &use_p, &use_stmt)\n+\t  || use_stmt != (prep_cnt ? prep_stmt[prep_cnt - 1] : assign))\n+\treturn 0;\n+      switch (gimple_assign_rhs_code (g))\n+\t{\n+\tCASE_CONVERT:\n+\t  break;\n+\tcase PLUS_EXPR:\n+\tcase BIT_AND_EXPR:\n+\tcase BIT_IOR_EXPR:\n+\tcase BIT_XOR_EXPR:\n+\t  if (TREE_CODE (gimple_assign_rhs2 (g)) != INTEGER_CST)\n+\t    return 0;\n+\t  break;\n+\tdefault:\n+\t  return 0;\n+\t}\n+      prep_stmt[prep_cnt] = g;\n+    }\n+\n   /* Only transform if it removes the condition.  */\n   if (!single_non_singleton_phi_for_edges (phi_nodes (gimple_bb (phi)), e0, e1))\n     return 0;\n@@ -1019,7 +1086,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       && profile_status_for_fn (cfun) != PROFILE_ABSENT\n       && EDGE_PRED (middle_bb, 0)->probability < profile_probability::even ()\n       /* If assign is cheap, there is no point avoiding it.  */\n-      && estimate_num_insns (assign, &eni_time_weights)\n+      && estimate_num_insns (bb_seq (middle_bb), &eni_time_weights)\n \t >= 3 * estimate_num_insns (cond, &eni_time_weights))\n     return 0;\n \n@@ -1030,6 +1097,32 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n   tree cond_lhs = gimple_cond_lhs (cond);\n   tree cond_rhs = gimple_cond_rhs (cond);\n \n+  /* Propagate the cond_rhs constant through preparation stmts,\n+     make sure UB isn't invoked while doing that.  */\n+  for (int i = prep_cnt - 1; i >= 0; --i)\n+    {\n+      gimple *g = prep_stmt[i];\n+      tree grhs1 = gimple_assign_rhs1 (g);\n+      if (!operand_equal_for_phi_arg_p (cond_lhs, grhs1))\n+\treturn 0;\n+      cond_lhs = gimple_assign_lhs (g);\n+      cond_rhs = fold_convert (TREE_TYPE (grhs1), cond_rhs);\n+      if (TREE_CODE (cond_rhs) != INTEGER_CST\n+\t  || TREE_OVERFLOW (cond_rhs))\n+\treturn 0;\n+      if (gimple_assign_rhs_class (g) == GIMPLE_BINARY_RHS)\n+\t{\n+\t  cond_rhs = int_const_binop (gimple_assign_rhs_code (g), cond_rhs,\n+\t\t\t\t      gimple_assign_rhs2 (g));\n+\t  if (TREE_OVERFLOW (cond_rhs))\n+\t    return 0;\n+\t}\n+      cond_rhs = fold_convert (TREE_TYPE (cond_lhs), cond_rhs);\n+      if (TREE_CODE (cond_rhs) != INTEGER_CST\n+\t  || TREE_OVERFLOW (cond_rhs))\n+\treturn 0;\n+    }\n+\n   if (((code == NE_EXPR && e1 == false_edge)\n \t|| (code == EQ_EXPR && e1 == true_edge))\n       && arg0 == lhs\n@@ -1071,7 +1164,15 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t    duplicate_ssa_name_range_info (lhs, SSA_NAME_RANGE_TYPE (phires),\n \t\t\t\t\t   phires_range_info);\n \t}\n-      gimple_stmt_iterator gsi_from = gsi_for_stmt (assign);\n+      gimple_stmt_iterator gsi_from;\n+      for (int i = prep_cnt - 1; i >= 0; --i)\n+\t{\n+\t  tree plhs = gimple_assign_lhs (prep_stmt[i]);\n+\t  SSA_NAME_RANGE_INFO (plhs) = NULL;\n+\t  gsi_from = gsi_for_stmt (prep_stmt[i]);\n+\t  gsi_move_before (&gsi_from, &gsi);\n+\t}\n+      gsi_from = gsi_for_stmt (assign);\n       gsi_move_before (&gsi_from, &gsi);\n       replace_phi_edge_with_variable (cond_bb, e1, phi, lhs);\n       return 2;"}]}