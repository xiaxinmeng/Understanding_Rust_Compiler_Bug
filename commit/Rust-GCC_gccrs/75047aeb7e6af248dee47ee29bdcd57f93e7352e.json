{"sha": "75047aeb7e6af248dee47ee29bdcd57f93e7352e", "node_id": "C_kwDOANBUbNoAKDc1MDQ3YWViN2U2YWYyNDhkZWU0N2VlMjliZGNkNTdmOTNlNzM1MmU", "commit": {"author": {"name": "Christoph M\u00fcllner", "email": "christoph.muellner@vrull.eu", "date": "2022-12-04T23:38:56Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-03-15T09:01:16Z"}, "message": "riscv: thead: Add support for the XTheadFmv ISA extension\n\nThe XTheadFmv ISA extension provides instructions to move\ndata between 32-bit GP registers and 64-bit FP registers.\n\nCo-Developed-by: Xianmiao Qu <cooper.qu@linux.alibaba.com>\nSigned-off-by: Xianmiao Qu <cooper.qu@linux.alibaba.com>\nSigned-off-by: Christoph M\u00fcllner <christoph.muellner@vrull.eu>\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (TARGET_XTHEADFMV ? FP_REGS : NO_REGS)\n\tNew constraint \"th_f_fmv\".\n\t(TARGET_XTHEADFMV ? GR_REGS : NO_REGS): New constraint\n\t\"th_r_fmv\".\n\t* config/riscv/riscv.cc (riscv_split_doubleword_move):\n\tAdd split code for XTheadFmv.\n\t(riscv_secondary_memory_needed): XTheadFmv does not need\n\tsecondary memory.\n\t* config/riscv/riscv.md: Add new UNSPEC_XTHEADFMV and\n\tUNSPEC_XTHEADFMV_HW. Add support for XTheadFmv to\n\tmovdf_hardfloat_rv32.\n\t* config/riscv/thead.md (th_fmv_hw_w_x): New INSN.\n\t(th_fmv_x_w): New INSN.\n\t(th_fmv_x_hw): New INSN.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/xtheadfmv-fmv.c: New test.", "tree": {"sha": "a3e935a80c7a3aff48e028bbb64ee5c1cc24289b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e935a80c7a3aff48e028bbb64ee5c1cc24289b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75047aeb7e6af248dee47ee29bdcd57f93e7352e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75047aeb7e6af248dee47ee29bdcd57f93e7352e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75047aeb7e6af248dee47ee29bdcd57f93e7352e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75047aeb7e6af248dee47ee29bdcd57f93e7352e/comments", "author": {"login": "cmuellner", "id": 92810, "node_id": "MDQ6VXNlcjkyODEw", "avatar_url": "https://avatars.githubusercontent.com/u/92810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmuellner", "html_url": "https://github.com/cmuellner", "followers_url": "https://api.github.com/users/cmuellner/followers", "following_url": "https://api.github.com/users/cmuellner/following{/other_user}", "gists_url": "https://api.github.com/users/cmuellner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmuellner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmuellner/subscriptions", "organizations_url": "https://api.github.com/users/cmuellner/orgs", "repos_url": "https://api.github.com/users/cmuellner/repos", "events_url": "https://api.github.com/users/cmuellner/events{/privacy}", "received_events_url": "https://api.github.com/users/cmuellner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "c448e6b37e93093b09e7c4e9a2108292e09de324", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=75047aeb7e6af248dee47ee29bdcd57f93e7352e", "patch": "@@ -180,3 +180,11 @@\n   \"Vector duplicate memory operand\"\n   (and (match_code \"mem\")\n        (match_code \"reg\" \"0\")))\n+\n+;; Vendor ISA extension constraints.\n+\n+(define_register_constraint \"th_f_fmv\" \"TARGET_XTHEADFMV ? FP_REGS : NO_REGS\"\n+  \"A floating-point register for XTheadFmv.\")\n+\n+(define_register_constraint \"th_r_fmv\" \"TARGET_XTHEADFMV ? GR_REGS : NO_REGS\"\n+  \"An integer register for XTheadFmv.\")"}, {"sha": "2b56c52e1d30022edbcf16960f37bffa64b8797d", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=75047aeb7e6af248dee47ee29bdcd57f93e7352e", "patch": "@@ -2767,11 +2767,29 @@ riscv_split_64bit_move_p (rtx dest, rtx src)\n void\n riscv_split_doubleword_move (rtx dest, rtx src)\n {\n-  rtx low_dest;\n+  /* XTheadFmv has instructions for accessing the upper bits of a double.  */\n+  if (!TARGET_64BIT && TARGET_XTHEADFMV)\n+    {\n+      if (FP_REG_RTX_P (dest))\n+\t{\n+\t  rtx low_src = riscv_subword (src, false);\n+\t  rtx high_src = riscv_subword (src, true);\n+\t  emit_insn (gen_th_fmv_hw_w_x (dest, high_src, low_src));\n+\t  return;\n+\t}\n+      if (FP_REG_RTX_P (src))\n+\t{\n+\t  rtx low_dest = riscv_subword (dest, false);\n+\t  rtx high_dest = riscv_subword (dest, true);\n+\t  emit_insn (gen_th_fmv_x_w (low_dest, src));\n+\t  emit_insn (gen_th_fmv_x_hw (high_dest, src));\n+\t  return;\n+\t}\n+    }\n \n    /* The operation can be split into two normal moves.  Decide in\n       which order to do them.  */\n-   low_dest = riscv_subword (dest, false);\n+   rtx low_dest = riscv_subword (dest, false);\n    if (REG_P (low_dest) && reg_overlap_mentioned_p (low_dest, src))\n      {\n        riscv_emit_move (riscv_subword (dest, true), riscv_subword (src, true));\n@@ -5815,7 +5833,8 @@ riscv_secondary_memory_needed (machine_mode mode, reg_class_t class1,\n {\n   return (!riscv_v_ext_vector_mode_p (mode)\n \t  && GET_MODE_SIZE (mode).to_constant () > UNITS_PER_WORD\n-\t  && (class1 == FP_REGS) != (class2 == FP_REGS));\n+\t  && (class1 == FP_REGS) != (class2 == FP_REGS)\n+\t  && !TARGET_XTHEADFMV);\n }\n \n /* Implement TARGET_REGISTER_MOVE_COST.  */"}, {"sha": "863400cd447a2623128fa69972e5b70dd552dc2c", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=75047aeb7e6af248dee47ee29bdcd57f93e7352e", "patch": "@@ -100,6 +100,10 @@\n \n   ;; Zihintpause unspec\n   UNSPECV_PAUSE\n+\n+  ;; XTheadFmv unspec\n+  UNSPEC_XTHEADFMV\n+  UNSPEC_XTHEADFMV_HW\n ])\n \n (define_constants\n@@ -1865,16 +1869,17 @@\n     DONE;\n })\n \n+\n ;; In RV32, we lack fmv.x.d and fmv.d.x.  Go through memory instead.\n ;; (However, we can still use fcvt.d.w to zero a floating-point register.)\n (define_insn \"*movdf_hardfloat_rv32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,  *r,*r,*m\")\n-\t(match_operand:DF 1 \"move_operand\"         \" f,G,m,f,G,*r*G,*m,*r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*th_f_fmv,*th_r_fmv,  *r,*r,*m\")\n+\t(match_operand:DF 1 \"move_operand\"         \" f,G,m,f,G,*th_r_fmv,*th_f_fmv,*r*G,*m,*r\"))]\n   \"!TARGET_64BIT && TARGET_DOUBLE_FLOAT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n-  [(set_attr \"move_type\" \"fmove,mtc,fpload,fpstore,store,move,load,store\")\n+  [(set_attr \"move_type\" \"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*movdf_hardfloat_rv64\""}, {"sha": "b0a71d595fd0417cbf6cf1667f61a286f4adbf6f", "filename": "gcc/config/riscv/thead.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Fthead.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Fconfig%2Friscv%2Fthead.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fthead.md?ref=75047aeb7e6af248dee47ee29bdcd57f93e7352e", "patch": "@@ -139,6 +139,39 @@\n   [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n+;; XTheadFmv\n+\n+;; In RV32, we lack fmv.x.d and fmv.d.x, but XTheadFmv has instructions\n+;; that cover this case.\n+\n+(define_insn \"th_fmv_hw_w_x\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:SI 1 \"register_operand\" \"r\")\n+                (match_operand:SI 2 \"register_operand\" \"r\")]\n+     UNSPEC_XTHEADFMV))]\n+  \"!TARGET_64BIT && TARGET_XTHEADFMV\"\n+  \"fmv.w.x\\t%0,%2\\n\\tth.fmv.hw.x\\t%0,%1\"\n+  [(set_attr \"move_type\" \"move\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"th_fmv_x_w\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:DF 1 \"register_operand\" \"f\")]\n+     UNSPEC_XTHEADFMV))]\n+  \"!TARGET_64BIT && TARGET_XTHEADFMV\"\n+  \"fmv.x.w\\t%0,%1\"\n+  [(set_attr \"move_type\" \"move\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"th_fmv_x_hw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:DF 1 \"register_operand\" \"f\")]\n+     UNSPEC_XTHEADFMV_HW))]\n+  \"!TARGET_64BIT && TARGET_XTHEADFMV\"\n+  \"th.fmv.x.hw\\t%0,%1\"\n+  [(set_attr \"move_type\" \"move\")\n+   (set_attr \"mode\" \"DF\")])\n+\n ;; XTheadMac\n \n (define_insn \"*th_mula<mode>\""}, {"sha": "10d035e9e1d07efbec375cf36c168a4bee631d33", "filename": "gcc/testsuite/gcc.target/riscv/xtheadfmv-fmv.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadfmv-fmv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75047aeb7e6af248dee47ee29bdcd57f93e7352e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadfmv-fmv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadfmv-fmv.c?ref=75047aeb7e6af248dee47ee29bdcd57f93e7352e", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { rv32 } } } */\n+/* { dg-options \"-march=rv32gc_xtheadfmv\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+double\n+ll2d (long long ll)\n+{\n+  return *(double*)&ll;\n+}\n+\n+long long\n+d2ll (double d)\n+{\n+  return *(long long*)&d;\n+}\n+\n+/* { dg-final { scan-assembler \"fmv.w.x\" } } */\n+/* { dg-final { scan-assembler \"th.fmv.hw.x\" } } */\n+/* { dg-final { scan-assembler \"fmv.x.w\" } } */\n+/* { dg-final { scan-assembler \"th.fmv.x.hw\" } } */\n+/* { dg-final { scan-assembler-not \"sw\" } } */\n+/* { dg-final { scan-assembler-not \"fld\" } } */\n+/* { dg-final { scan-assembler-not \"fsd\" } } */\n+/* { dg-final { scan-assembler-not \"lw\" } } */"}]}