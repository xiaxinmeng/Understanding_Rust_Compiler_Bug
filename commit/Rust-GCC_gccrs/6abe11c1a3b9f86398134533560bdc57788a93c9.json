{"sha": "6abe11c1a3b9f86398134533560bdc57788a93c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiZTExYzFhM2I5Zjg2Mzk4MTM0NTMzNTYwYmRjNTc3ODhhOTNjOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-01-14T14:41:25Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-01-14T14:41:25Z"}, "message": "x86: Add 'V' register operand modifier\n\nAdd 'V', a special modifier which prints the name of the full integer\nregister without '%'.  For\n\nextern void (*func_p) (void);\n\nvoid\nfoo (void)\n{\n  asm (\"call __x86_indirect_thunk_%V0\" : : \"a\" (func_p));\n}\n\nit generates:\n\nfoo:\n\tmovq\tfunc_p(%rip), %rax\n\tcall\t__x86_indirect_thunk_rax\n\tret\n\ngcc/\n\n\t* config/i386/i386.c (print_reg): Print the name of the full\n\tinteger register without '%'.\n\t(ix86_print_operand): Handle 'V'.\n\t * doc/extend.texi: Document 'V' modifier.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/indirect-thunk-register-4.c: New test.\n\nFrom-SVN: r256663", "tree": {"sha": "3886085c187311388ba794ae35b93353a782f6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3886085c187311388ba794ae35b93353a782f6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6abe11c1a3b9f86398134533560bdc57788a93c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe11c1a3b9f86398134533560bdc57788a93c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abe11c1a3b9f86398134533560bdc57788a93c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe11c1a3b9f86398134533560bdc57788a93c9/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d543c04b795f8af4ebe5b3d5f38156ef4e5734f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d543c04b795f8af4ebe5b3d5f38156ef4e5734f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d543c04b795f8af4ebe5b3d5f38156ef4e5734f1"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "75de1b7fcdc1d765d4349022dd3b78c6a7c06a22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6abe11c1a3b9f86398134533560bdc57788a93c9", "patch": "@@ -1,3 +1,10 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (print_reg): Print the name of the full\n+\tinteger register without '%'.\n+\t(ix86_print_operand): Handle 'V'.\n+\t * doc/extend.texi: Document 'V' modifier.\n+\n 2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/constraints.md (Bs): Disallow memory operand for"}, {"sha": "4ae89017bdf6dc702449b3d509ea1bfda3382669", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6abe11c1a3b9f86398134533560bdc57788a93c9", "patch": "@@ -17655,6 +17655,7 @@ put_condition_code (enum rtx_code code, machine_mode mode, bool reverse,\n    If CODE is 'h', pretend the reg is the 'high' byte register.\n    If CODE is 'y', print \"st(0)\" instead of \"st\", if the reg is stack op.\n    If CODE is 'd', duplicate the operand for AVX instruction.\n+   If CODE is 'V', print naked full integer register name without %.\n  */\n \n void\n@@ -17665,7 +17666,7 @@ print_reg (rtx x, int code, FILE *file)\n   unsigned int regno;\n   bool duplicated;\n \n-  if (ASSEMBLER_DIALECT == ASM_ATT)\n+  if (ASSEMBLER_DIALECT == ASM_ATT && code != 'V')\n     putc ('%', file);\n \n   if (x == pc_rtx)\n@@ -17717,6 +17718,14 @@ print_reg (rtx x, int code, FILE *file)\n       return;\n     }\n \n+  if (code == 'V')\n+    {\n+      if (GENERAL_REGNO_P (regno))\n+\tmsize = GET_MODE_SIZE (word_mode);\n+      else\n+\terror (\"'V' modifier on non-integer register\");\n+    }\n+\n   duplicated = code == 'd' && TARGET_AVX;\n \n   switch (msize)\n@@ -17836,6 +17845,7 @@ print_reg (rtx x, int code, FILE *file)\n    & -- print some in-use local-dynamic symbol name.\n    H -- print a memory address offset by 8; used for sse high-parts\n    Y -- print condition for XOP pcom* instruction.\n+   V -- print naked full integer register name without %.\n    + -- print a branch hint as 'cs' or 'ds' prefix\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n    ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n@@ -18059,6 +18069,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \tcase 'X':\n \tcase 'P':\n \tcase 'p':\n+\tcase 'V':\n \t  break;\n \n \tcase 's':"}, {"sha": "dce808f1eab1ff734fb5acf97a2d8a6ea270a788", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6abe11c1a3b9f86398134533560bdc57788a93c9", "patch": "@@ -9292,6 +9292,9 @@ The table below shows the list of supported modifiers and their effects.\n @tab @code{2}\n @end multitable\n \n+@code{V} is a special modifier which prints the name of the full integer\n+register without @code{%}.\n+\n @anchor{x86floatingpointasmoperands}\n @subsubsection x86 Floating-Point @code{asm} Operands\n "}, {"sha": "9e3aeaff0793b1ce7dc0124304485725990a3fdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6abe11c1a3b9f86398134533560bdc57788a93c9", "patch": "@@ -1,3 +1,7 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/indirect-thunk-register-4.c: New test.\n+\n 2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/indirect-thunk-1.c (dg-options): Add"}, {"sha": "f0cd9b75be80a38bda3edca279608cd95f6e5298", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-register-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-register-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe11c1a3b9f86398134533560bdc57788a93c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-register-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-register-4.c?ref=6abe11c1a3b9f86398134533560bdc57788a93c9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=keep -fno-pic\" } */\n+\n+extern void (*func_p) (void);\n+\n+void\n+foo (void)\n+{\n+  asm(\"call __x86_indirect_thunk_%V0\" : : \"a\" (func_p));\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_rax\" { target { ! ia32 } } } } */"}]}