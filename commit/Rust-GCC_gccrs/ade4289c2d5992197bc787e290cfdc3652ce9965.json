{"sha": "ade4289c2d5992197bc787e290cfdc3652ce9965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlNDI4OWMyZDU5OTIxOTdiYzc4N2UyOTBjZmRjMzY1MmNlOTk2NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-06T18:50:45Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-06T18:50:45Z"}, "message": "Makfile.in: Remove traces of mbchar.\n\n\t* Makfile.in: Remove traces of mbchar.\n\t* c-parse.in (MULTIBYTE_CHARS): Remove.\n\t* config.in (MULTIBYTE_CHARS): Remove.\n\t* configure: Remove --enable-mbchar.\n\t* configure.in: Remove --enable-mbchar.\n\t* mbchar.c, mbchar.h: Remove.\n\t* system.h: Poison MULTIBYTE_CHARS.\n\t* config/linux-aout.h (MULTIBYTE_CHARS): Remove.\n\t* config/linux.h (MULTIBYTE_CHARS): Remove.\n\t* config/svr4.h (MULTIBYTE_CHARS): Remove.\n\t* config/sparc/linux.h (MULTIBYTE_CHARS): Remove.\n\nFrom-SVN: r69009", "tree": {"sha": "426cd99705aacb72bb06b9c7301ea3d740e6ad81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/426cd99705aacb72bb06b9c7301ea3d740e6ad81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ade4289c2d5992197bc787e290cfdc3652ce9965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade4289c2d5992197bc787e290cfdc3652ce9965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade4289c2d5992197bc787e290cfdc3652ce9965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade4289c2d5992197bc787e290cfdc3652ce9965/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11dc5cc6cf5e4402f3f449a6ea155a4748063708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11dc5cc6cf5e4402f3f449a6ea155a4748063708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11dc5cc6cf5e4402f3f449a6ea155a4748063708"}], "stats": {"total": 451, "additions": 16, "deletions": 435}, "files": [{"sha": "e0c44ebaa51cdc3d73d2e588741a227bf3d5286b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -1,3 +1,17 @@\n+2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makfile.in: Remove traces of mbchar.\n+\t* c-parse.in (MULTIBYTE_CHARS): Remove.\n+\t* config.in (MULTIBYTE_CHARS): Remove.\n+\t* configure: Remove --enable-mbchar.\n+\t* configure.in: Remove --enable-mbchar.\n+\t* mbchar.c, mbchar.h: Remove.\n+\t* system.h: Poison MULTIBYTE_CHARS.\n+\t* config/linux-aout.h (MULTIBYTE_CHARS): Remove.\n+\t* config/linux.h (MULTIBYTE_CHARS): Remove.\n+\t* config/svr4.h (MULTIBYTE_CHARS): Remove.\n+\t* config/sparc/linux.h (MULTIBYTE_CHARS): Remove.\n+\n 2003-07-06  Andreas Jaeger  <aj@suse.de>\n \n \t* varray.c (varray_check_failed): Fix typo."}, {"sha": "5ebb42bd1a06b7fc6d1f5e9da997d8d7798dfc71", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -813,7 +813,7 @@ OBJS = alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t   \\\n  haifa-sched.o hashtable.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n  integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n- loop.o mbchar.o optabs.o options.o opts.o params.o postreload.o predict.o \\\n+ loop.o optabs.o options.o opts.o params.o postreload.o predict.o\t   \\\n  print-rtl.o print-tree.o value-prof.o\t\t\t\t\t   \\\n  profile.o ra.o ra-build.o ra-colorize.o ra-debug.o ra-rewrite.o\t   \\\n  real.o recog.o reg-stack.o regclass.o regmove.o regrename.o\t\t   \\\n@@ -1283,7 +1283,6 @@ c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n     flags.h toplev.h $(C_COMMON_H) real.h\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n     function.h c-pragma.h toplev.h output.h $(GGC_H) $(TM_P_H) $(C_COMMON_H) gt-c-pragma.h\n-mbchar.o: mbchar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) mbchar.h\n graph.o: graph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h flags.h output.h \\\n     $(RTL_H) function.h hard-reg-set.h $(BASIC_BLOCK_H) graph.h\n sbitmap.o: sbitmap.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\"}, {"sha": "6eaa354c02bf1540ef5dfadd614ccd318858c84c", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -50,10 +50,6 @@ end ifc\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-#ifdef MULTIBYTE_CHARS\n-#include <locale.h>\n-#endif\n-\n ifobjc\n #include \"objc-act.h\"\n end ifobjc"}, {"sha": "27b807b117673169cd316d924bf7ee818a413e6d", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -335,10 +335,6 @@\n /* Define if valgrind's memcheck.h header is installed. */\n #undef HAVE_MEMCHECK_H\n \n-/* Define if you want the C and C++ compilers to support multibyte\n-   character sets for source code. */\n-#undef MULTIBYTE_CHARS\n-\n /* Always define this when using the GNU C Library */\n #undef _GNU_SOURCE\n "}, {"sha": "5701fd94ded63ca1b8047c0a675161b4fce34c20", "filename": "gcc/config/linux-aout.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-aout.h?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -22,14 +22,6 @@ Boston, MA 02111-1307, USA.  */\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later.  */\n-\n-#if 0\n-#undef MULTIBYTE_CHARS\n-#define MULTIBYTE_CHARS\t1\n-#endif\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC  \"%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}\"\n "}, {"sha": "75b403057e22c2eafeea4a08792ac7534f3df012", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -23,14 +23,6 @@ Boston, MA 02111-1307, USA.  */\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later.  */\n-\n-#if 0\n-#undef MULTIBYTE_CHARS\n-#define MULTIBYTE_CHARS 1\n-#endif\n-\n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n "}, {"sha": "a7a48e60c2d932597a908493d2b9522afb286794", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -35,14 +35,6 @@ Boston, MA 02111-1307, USA.  */\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later.  */\n-\n-#if 0\n-#undef MULTIBYTE_CHARS\n-#define MULTIBYTE_CHARS 1\n-#endif\n-\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n "}, {"sha": "714326a5f4328a3d2e4fd99e5c0c77c5eac6bef6", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -202,8 +202,4 @@ Boston, MA 02111-1307, USA.\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-/* This causes trouble, because it requires the host machine\n-   to support ANSI C.  */\n-/* #define MULTIBYTE_CHARS */\n-\n #define TARGET_HAS_F_SETLKW"}, {"sha": "b685553bdcc77da439af5e7acee41267f634cf0a", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -51,8 +51,6 @@ ac_help=\"$ac_help\n   --enable-multilib       enable library support for multiple ABIs\"\n ac_help=\"$ac_help\n   --enable-__cxa_atexit   enable __cxa_atexit for C++\"\n-ac_help=\"$ac_help\n-  --enable-c-mbchar       enable multibyte characters for C and C++\"\n ac_help=\"$ac_help\n   --enable-threads        enable thread usage for target GCC\n   --enable-threads=LIB    use LIB thread package for target GCC\"\n@@ -2147,19 +2145,6 @@ if test \"${enable___cxa_atexit+set}\" = set; then\n fi\n \n \n-# Enable Multibyte Characters for C/C++\n-# Check whether --enable-c-mbchar or --disable-c-mbchar was given.\n-if test \"${enable_c_mbchar+set}\" = set; then\n-  enableval=\"$enable_c_mbchar\"\n-  if test x$enable_c_mbchar != xno; then\n-  cat >> confdefs.h <<\\EOF\n-#define MULTIBYTE_CHARS 1\n-EOF\n-\n-fi\n-fi\n-\n-  \n # Enable threads\n # Pass with no value to take the default\n # Pass with a value to specify a thread package"}, {"sha": "869ce8d356771c92fd8b8ea093bc058359476f38", "filename": "gcc/configure.in", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -469,15 +469,6 @@ AC_ARG_ENABLE(__cxa_atexit,\n [  --enable-__cxa_atexit   enable __cxa_atexit for C++],\n [], [])\n \n-# Enable Multibyte Characters for C/C++\n-AC_ARG_ENABLE(c-mbchar,\n-[  --enable-c-mbchar       enable multibyte characters for C and C++],\n-if test x$enable_c_mbchar != xno; then\n-  AC_DEFINE(MULTIBYTE_CHARS, 1,\n-  [Define if you want the C and C++ compilers to support multibyte\n-   character sets for source code.])\n-fi)\n-  \n # Enable threads\n # Pass with no value to take the default\n # Pass with a value to specify a thread package"}, {"sha": "81b87540a2caa101a2f096004256e26c9c8d655c", "filename": "gcc/mbchar.c", "status": "removed", "additions": 0, "deletions": 331, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc5cc6cf5e4402f3f449a6ea155a4748063708/gcc%2Fmbchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc5cc6cf5e4402f3f449a6ea155a4748063708/gcc%2Fmbchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmbchar.c?ref=11dc5cc6cf5e4402f3f449a6ea155a4748063708", "patch": "@@ -1,331 +0,0 @@\n-/* Multibyte Character Functions.\n-   Copyright (C) 1998, 2003 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-/* Note regarding cross compilation:\n-\n-   In general, translation of multibyte characters to wide characters can\n-   only work in a native compiler since the translation function (mbtowc)\n-   needs to know about both the source and target character encoding.  However,\n-   this particular implementation for JIS, SJIS and EUCJP source characters\n-   will work for any compiler with a newlib target.  Other targets may also\n-   work provided that their wchar_t implementation is 2 bytes and the encoding\n-   leaves the source character values unchanged (except for removing the\n-   state shifting markers).  */\n-\n-#include \"config.h\"\n-#ifdef MULTIBYTE_CHARS\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"mbchar.h\"\n-#include <locale.h>\n-\n-typedef enum {ESCAPE, DOLLAR, BRACKET, AT, B, J, NUL, JIS_CHAR, OTHER,\n-\t      JIS_C_NUM} JIS_CHAR_TYPE;\n-\n-typedef enum {ASCII, A_ESC, A_ESC_DL, JIS, JIS_1, JIS_2, J_ESC, J_ESC_BR,\n-\t     J2_ESC, J2_ESC_BR, INV, JIS_S_NUM} JIS_STATE;\n-\n-typedef enum {COPYA, COPYJ, COPYJ2, MAKE_A, MAKE_J, NOOP,\n-\t      EMPTY, ERROR} JIS_ACTION;\n-\n-/* State/action tables for processing JIS encoding:\n-\n-   Where possible, switches to JIS are grouped with proceding JIS characters\n-   and switches to ASCII are grouped with preceding JIS characters.\n-   Thus, maximum returned length is:\n-     2 (switch to JIS) + 2 (JIS characters) + 2 (switch back to ASCII) = 6.  */\n-\n-static const JIS_STATE JIS_state_table[JIS_S_NUM][JIS_C_NUM] = {\n-/*            ESCAPE DOLLAR   BRACKET   AT     B      J     NUL JIS_CHAR OTH*/\n-/*ASCII*/   { A_ESC, ASCII,   ASCII,    ASCII, ASCII, ASCII, ASCII,ASCII,ASCII},\n-/*A_ESC*/   { ASCII, A_ESC_DL,ASCII,    ASCII, ASCII, ASCII, ASCII,ASCII,ASCII},\n-/*A_ESC_DL*/{ ASCII, ASCII,   ASCII,    JIS,   JIS,   ASCII, ASCII,ASCII,ASCII},\n-/*JIS*/     { J_ESC, JIS_1,   JIS_1,    JIS_1, JIS_1, JIS_1, INV,  JIS_1,INV },\n-/*JIS_1*/   { INV,   JIS_2,   JIS_2,    JIS_2, JIS_2, JIS_2, INV,  JIS_2,INV },\n-/*JIS_2*/   { J2_ESC,JIS,     JIS,      JIS,   JIS,   JIS,   INV,  JIS,  JIS },\n-/*J_ESC*/   { INV,   INV,     J_ESC_BR, INV,   INV,   INV,   INV,  INV,  INV },\n-/*J_ESC_BR*/{ INV,   INV,     INV,      INV,   ASCII, ASCII, INV,  INV,  INV },\n-/*J2_ESC*/  { INV,   INV,     J2_ESC_BR,INV,   INV,   INV,   INV,  INV,  INV },\n-/*J2_ESC_BR*/{INV,   INV,     INV,      INV,   ASCII, ASCII, INV,  INV,  INV },\n-};\n-\n-static const JIS_ACTION JIS_action_table[JIS_S_NUM][JIS_C_NUM] = {\n-/*            ESCAPE DOLLAR BRACKET AT     B       J      NUL  JIS_CHAR OTH */\n-/*ASCII */   {NOOP,  COPYA, COPYA, COPYA,  COPYA,  COPYA, EMPTY, COPYA, COPYA},\n-/*A_ESC */   {COPYA, NOOP,  COPYA, COPYA,  COPYA,  COPYA, COPYA, COPYA, COPYA},\n-/*A_ESC_DL */{COPYA, COPYA, COPYA, MAKE_J, MAKE_J, COPYA, COPYA, COPYA, COPYA},\n-/*JIS */     {NOOP,  NOOP,  NOOP,  NOOP,   NOOP,   NOOP,  ERROR, NOOP,  ERROR},\n-/*JIS_1 */   {ERROR, NOOP,  NOOP,  NOOP,   NOOP,   NOOP,  ERROR, NOOP,  ERROR},\n-/*JIS_2 */   {NOOP,  COPYJ2,COPYJ2,COPYJ2, COPYJ2, COPYJ2,ERROR, COPYJ2,COPYJ2},\n-/*J_ESC */   {ERROR, ERROR, NOOP,  ERROR,  ERROR,  ERROR, ERROR, ERROR, ERROR},\n-/*J_ESC_BR */{ERROR, ERROR, ERROR, ERROR,  NOOP,   NOOP,  ERROR, ERROR, ERROR},\n-/*J2_ESC */  {ERROR, ERROR, NOOP,  ERROR,  ERROR,  ERROR, ERROR, ERROR, ERROR},\n-/*J2_ESC_BR*/{ERROR, ERROR, ERROR, ERROR,  COPYJ,  COPYJ, ERROR, ERROR, ERROR},\n-};\n-\n-\n-const char *literal_codeset = NULL;\n-\n-/* Store into *PWC (if PWC is not null) the wide character\n-   corresponding to the multibyte character at the start of the\n-   buffer S of size N.  Return the number of bytes in the multibyte\n-   character.  Return -1 if the bytes do not form a valid character,\n-   or 0 if S is null or points to a null byte.\n-\n-   This function behaves like the Standard C function mbtowc, except\n-   it treats locale names of the form \"C-...\" specially.  */\n-\n-int\n-local_mbtowc (wchar_t *pwc, const char *s, size_t n)\n-{\n-  static JIS_STATE save_state = ASCII;\n-  JIS_STATE curr_state = save_state;\n-  const unsigned char *t = (const unsigned char *) s;\n-\n-  if (s != NULL && n == 0)\n-    return -1;\n-\n-  if (literal_codeset == NULL || strlen (literal_codeset) <= 1)\n-    /* This must be the \"C\" locale or unknown locale -- fall thru */\n-    ;\n-  else if (! strcmp (literal_codeset, \"C-SJIS\"))\n-    {\n-      int char1;\n-      if (s == NULL)\n-\t/* Not state-dependent.  */\n-        return 0;\n-\n-      char1 = *t;\n-      if (ISSJIS1 (char1))\n-        {\n-          int char2 = t[1];\n-\n-          if (n <= 1)\n-            return -1;\n-\n-          if (ISSJIS2 (char2))\n-            {\n-\t      if (pwc != NULL)\n-\t\t*pwc = (((wchar_t) *t) << 8) + (wchar_t) (*(t + 1));\n-              return 2;\n-            }\n-\n-\t  return -1;\n-        }\n-\n-      if (pwc != NULL)\n-\t*pwc = (wchar_t) *t;\n-\n-      if (*t == '\\0')\n-\treturn 0;\n-\n-      return 1;\n-    }\n-  else if (! strcmp (literal_codeset, \"C-EUCJP\"))\n-    {\n-      int char1;\n-\n-      if (s == NULL)\n-\t/* Not state-dependent.  */\n-        return 0;\n-\n-      char1 = *t;\n-      if (ISEUCJP (char1))\n-        {\n-          int char2 = t[1];\n-\n-          if (n <= 1)\n-            return -1;\n-\n-          if (ISEUCJP (char2))\n-            {\n-\t      if (pwc != NULL)\n-\t\t*pwc = (((wchar_t) *t) << 8) + (wchar_t) (*(t + 1));\n-              return 2;\n-            }\n-\n-\t  return -1;\n-        }\n-\n-      if (pwc != NULL)\n-\t*pwc = (wchar_t) *t;\n-\n-      if (*t == '\\0')\n-\treturn 0;\n-\n-      return 1;\n-    }\n-  else if (! strcmp (literal_codeset, \"C-JIS\"))\n-    {\n-      JIS_ACTION action;\n-      JIS_CHAR_TYPE ch;\n-      const unsigned char *ptr;\n-      size_t i, curr_ch;\n-\n-      if (s == NULL)\n-\t{\n-\t  save_state = ASCII;\n-\t  /* State-dependent.  */\n-\t  return 1;\n-\t}\n-\n-      ptr = t;\n-\n-      for (i = 0; i < n; i++)\n-        {\n-          curr_ch = t[i];\n-          switch (curr_ch)\n-            {\n-\t    case JIS_ESC_CHAR:\n-              ch = ESCAPE;\n-              break;\n-\t    case '$':\n-              ch = DOLLAR;\n-              break;\n-            case '@':\n-              ch = AT;\n-              break;\n-            case '(':\n-\t      ch = BRACKET;\n-              break;\n-            case 'B':\n-              ch = B;\n-              break;\n-            case 'J':\n-              ch = J;\n-              break;\n-            case '\\0':\n-              ch = NUL;\n-              break;\n-            default:\n-              if (ISJIS (curr_ch))\n-                ch = JIS_CHAR;\n-              else\n-                ch = OTHER;\n-\t    }\n-\n-          action = JIS_action_table[curr_state][ch];\n-          curr_state = JIS_state_table[curr_state][ch];\n-\n-          switch (action)\n-            {\n-            case NOOP:\n-              break;\n-\n-            case EMPTY:\n-\t      if (pwc != NULL)\n-\t\t*pwc = (wchar_t) 0;\n-\n-\t      save_state = curr_state;\n-              return i;\n-\n-            case COPYA:\n-\t      if (pwc != NULL)\n-\t\t*pwc = (wchar_t) *ptr;\n-\t      save_state = curr_state;\n-              return i + 1;\n-\n-            case COPYJ:\n-\t      if (pwc != NULL)\n-\t\t*pwc = (((wchar_t) *ptr) << 8) + (wchar_t) (*(ptr + 1));\n-\n-\t      save_state = curr_state;\n-              return i + 1;\n-\n-            case COPYJ2:\n-\t      if (pwc != NULL)\n-\t\t*pwc = (((wchar_t) *ptr) << 8) + (wchar_t) (*(ptr + 1));\n-\n-\t      save_state = curr_state;\n-              return ptr - t + 2;\n-\n-            case MAKE_A:\n-            case MAKE_J:\n-              ptr = (const unsigned char *) (t + i + 1);\n-              break;\n-\n-            case ERROR:\n-            default:\n-              return -1;\n-            }\n-        }\n-\n-      /* More than n bytes needed.  */\n-      return -1;\n-    }\n-\n-#ifdef CROSS_COMPILE\n-  if (s == NULL)\n-    /* Not state-dependent.  */\n-    return 0;\n-\n-  if (pwc != NULL)\n-    *pwc = *s;\n-  return 1;\n-#else\n-\n-  /* This must be the \"C\" locale or unknown locale.  */\n-  return mbtowc (pwc, s, n);\n-#endif\n-}\n-\n-/* Return the number of bytes in the multibyte character at the start\n-   of the buffer S of size N.  Return -1 if the bytes do not form a\n-   valid character, or 0 if S is null or points to a null byte.\n-\n-   This function behaves like the Standard C function mblen, except\n-   it treats locale names of the form \"C-...\" specially.  */\n-\n-int\n-local_mblen (const char *s, size_t n)\n-{\n-  return local_mbtowc (NULL, s, n);\n-}\n-\n-/* Return the maximum mumber of bytes in a multibyte character.\n-\n-   This function returns the same value as the Standard C macro MB_CUR_MAX,\n-   except it treats locale names of the form \"C-...\" specially.  */\n-\n-int\n-local_mb_cur_max (void)\n-{\n-  if (literal_codeset == NULL || strlen (literal_codeset) <= 1)\n-    ;\n-  else if (! strcmp (literal_codeset, \"C-SJIS\"))\n-    return 2;\n-  else if (! strcmp (literal_codeset, \"C-EUCJP\"))\n-    return 2;\n-  else if (! strcmp (literal_codeset, \"C-JIS\"))\n-    return 8; /* 3 + 2 + 3 */\n-\n-#ifdef CROSS_COMPILE\n-  return 1;\n-#else\n-  if (MB_CUR_MAX > 0)\n-    return MB_CUR_MAX;\n-\n-  return 1; /* default */\n-#endif\n-}\n-#else  /* MULTIBYTE_CHARS */\n-extern int dummy;  /* silence 'ANSI C forbids an empty source file' warning */\n-#endif /* MULTIBYTE_CHARS */"}, {"sha": "3846a8cfbbdb933346aa68cb62ab2a6f196b5b0d", "filename": "gcc/mbchar.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11dc5cc6cf5e4402f3f449a6ea155a4748063708/gcc%2Fmbchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11dc5cc6cf5e4402f3f449a6ea155a4748063708/gcc%2Fmbchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmbchar.h?ref=11dc5cc6cf5e4402f3f449a6ea155a4748063708", "patch": "@@ -1,41 +0,0 @@\n-/* Various declarations for functions found in mbchar.c\n-   Copyright (C) 1998, 1999, 2000, 2003 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-#ifndef GCC_MBCHAR_H\n-#define GCC_MBCHAR_H\n-\n-#ifdef MULTIBYTE_CHARS\n-\n-/* Escape character used for JIS encoding */\n-#define JIS_ESC_CHAR 0x1b\n-\n-#define ISSJIS1(c)   (((c) >= 0x81 && (c) <= 0x9f) || ((c) >= 0xe0 && (c) <= 0xef))\n-#define ISSJIS2(c)   (((c) >= 0x40 && (c) <= 0x7e) || ((c) >= 0x80 && (c) <= 0xfc))\n-#define ISEUCJP(c)   ((c) >= 0xa1 && (c) <= 0xfe)\n-#define ISJIS(c)     ((c) >= 0x21 && (c) <= 0x7e)\n-\n-extern int local_mbtowc (wchar_t *, const char *, size_t);\n-extern int local_mblen (const char *, size_t);\n-extern int local_mb_cur_max (void);\n-\n-/* The locale being used for multibyte characters in string/char literals.  */\n-extern const char *literal_codeset;\n-#endif /* MULTIBYTE_CHARS */\n-#endif /* ! GCC_MBCHAR_H */"}, {"sha": "37d68f5f572a789b0028d417db41a9a74bd1eae3", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ade4289c2d5992197bc787e290cfdc3652ce9965/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=ade4289c2d5992197bc787e290cfdc3652ce9965", "patch": "@@ -607,7 +607,7 @@ typedef char _Bool;\n \tDBX_LBRAC_FIRST DBX_OUTPUT_ENUM DBX_OUTPUT_SOURCE_FILENAME\t   \\\n \tDBX_WORKING_DIRECTORY INSN_CACHE_DEPTH INSN_CACHE_SIZE\t\t   \\\n \tINSN_CACHE_LINE_WIDTH INIT_SECTION_PREAMBLE NEED_ATEXIT ON_EXIT\t   \\\n-\tEXIT_BODY OBJECT_FORMAT_ROSE\n+\tEXIT_BODY OBJECT_FORMAT_ROSE MULTIBYTE_CHARS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}