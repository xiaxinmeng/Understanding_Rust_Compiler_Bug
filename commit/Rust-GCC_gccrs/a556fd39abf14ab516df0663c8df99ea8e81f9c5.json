{"sha": "a556fd39abf14ab516df0663c8df99ea8e81f9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1NmZkMzlhYmYxNGFiNTE2ZGYwNjYzYzhkZjk5ZWE4ZTgxZjljNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-03T06:43:59Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-03T06:43:59Z"}, "message": "alpha.c, [...]: Use const0_rtx instead of GEN_INT (0).\n\n\t* config/alpha/alpha.c, config/arm/arm.c, config/c4x/c4x.c,\n\tconfig/fr30/fr30.md, config/frv/frv.c, config/frv/frv.md,\n\tconfig/h8300/h8300.c, config/ia64/ia64.c, config/ip2k/ip2k.md,\n\tconfig/m32r/m32r.md, config/m68hc11/m68hc11.c,\n\tconfig/mips/mips.md, config/mmix/mmix.c,\n\tconfig/mn10300/mn10300.c, config/mn10300/mn10300.md,\n\tconfig/ns32k/ns32k.c, config/pa/pa.md, config/pdp11/pdp11.c,\n\tconfig/rs6000/altivec.md, config/s390/s390.c,\n\tconfig/s390/s390.h, config/s390/s390.md, config/sh/sh.c,\n\tconfig/sh/sh.h, config/sh/sh.md, config/stormy16/stormy16.c:\n\tUse const0_rtx instead of GEN_INT (0).  Do the same for other\n\tconstants that are readily available.\n\nFrom-SVN: r77161", "tree": {"sha": "e7887eeaccba2a41785ef04ceaa22b3bd673be59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7887eeaccba2a41785ef04ceaa22b3bd673be59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a556fd39abf14ab516df0663c8df99ea8e81f9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a556fd39abf14ab516df0663c8df99ea8e81f9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a556fd39abf14ab516df0663c8df99ea8e81f9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a556fd39abf14ab516df0663c8df99ea8e81f9c5/comments", "author": null, "committer": null, "parents": [{"sha": "60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c81c899553a6673c4b2e6f0ba26c7b56abbf9c"}], "stats": {"total": 157, "additions": 86, "deletions": 71}, "files": [{"sha": "d59d46ac91101c1359b9d8477b2c495ea5cac7ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1,3 +1,18 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.c, config/arm/arm.c, config/c4x/c4x.c,\n+\tconfig/fr30/fr30.md, config/frv/frv.c, config/frv/frv.md,\n+\tconfig/h8300/h8300.c, config/ia64/ia64.c, config/ip2k/ip2k.md,\n+\tconfig/m32r/m32r.md, config/m68hc11/m68hc11.c,\n+\tconfig/mips/mips.md, config/mmix/mmix.c,\n+\tconfig/mn10300/mn10300.c, config/mn10300/mn10300.md,\n+\tconfig/ns32k/ns32k.c, config/pa/pa.md, config/pdp11/pdp11.c,\n+\tconfig/rs6000/altivec.md, config/s390/s390.c,\n+\tconfig/s390/s390.h, config/s390/s390.md, config/sh/sh.c,\n+\tconfig/sh/sh.h, config/sh/sh.md, config/stormy16/stormy16.c:\n+\tUse const0_rtx instead of GEN_INT (0).  Do the same for other\n+\tconstants that are readily available.\n+\n 2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doloop.c, optabs.c, regmove.c, sched-deps.c,"}, {"sha": "7038c3e2256dc929d227f8eee3edc655f27126f7", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -6100,7 +6100,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n \t  (VOIDmode,\n \t   gen_rtvec (2,\n \t\t      gen_rtx_EXPR_LIST (VOIDmode, gen_rtx_REG (cmode, 32),\n-\t\t\t\t         GEN_INT (0)),\n+\t\t\t\t         const0_rtx),\n \t\t      gen_rtx_EXPR_LIST (VOIDmode, gen_rtx_REG (cmode, 33),\n \t\t\t\t         GEN_INT (GET_MODE_SIZE (cmode)))));\n       }\n@@ -7845,7 +7845,7 @@ alpha_expand_epilogue (void)\n \n \t  emit_insn (gen_blockage ());\n \t  FRP (emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n-\t\t\t\t      hard_frame_pointer_rtx, GEN_INT (-1))));\n+\t\t\t\t      hard_frame_pointer_rtx, constm1_rtx)));\n         }\n     }\n }\n@@ -9685,7 +9685,7 @@ unicosmk_gen_dsib (unsigned long *imaskP)\n          have a frame.  */\n \n       FRP (emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n-                                  hard_frame_pointer_rtx, GEN_INT (1))));\n+                                  hard_frame_pointer_rtx, const1_rtx)));\n     }\n }\n "}, {"sha": "0be109460519a604a26a72595302887805aff225", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -5455,7 +5455,7 @@ arm_gen_movstrqi (rtx *operands)\n \t    {\n \t      rtx tmp = gen_reg_rtx (SImode);\n \n-\t      emit_insn (gen_addsi3 (dst, dst, GEN_INT (2)));\n+\t      emit_insn (gen_addsi3 (dst, dst, const2_rtx));\n \t      emit_insn (gen_lshrsi3 (tmp, part_bytes_reg, GEN_INT (16)));\n \t      part_bytes_reg = tmp;\n \t    }"}, {"sha": "0d06a12a9fd28a0a4301c348c9753968a6fbbae3", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1077,7 +1077,7 @@ c4x_expand_epilogue(void)\n \t\t\t\t\t gen_rtx_PLUS \n \t\t\t\t\t (QImode, gen_rtx_REG (QImode,\n \t\t\t\t\t\t\t       AR3_REGNO),\n-\t\t\t\t\t  GEN_INT(-1)))));\n+\t\t\t\t\t  constm1_rtx))));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      \n \t      /* We already have the return value and the fp,\n@@ -2359,8 +2359,8 @@ c4x_rptb_insert (rtx insn)\n     {\n       /* We can not use the rptb insn.  Replace it so reorg can use\n          the delay slots of the jump insn.  */\n-      emit_insn_before (gen_addqi3 (count_reg, count_reg, GEN_INT (-1)), insn);\n-      emit_insn_before (gen_cmpqi (count_reg, GEN_INT (0)), insn);\n+      emit_insn_before (gen_addqi3 (count_reg, count_reg, constm1_rtx), insn);\n+      emit_insn_before (gen_cmpqi (count_reg, const0_rtx), insn);\n       emit_insn_before (gen_bge (start_label), insn);\n       LABEL_NUSES (start_label)++;\n       delete_insn (insn);"}, {"sha": "071299e1dc9bbaddb2d2217f2c8771f8f582f9ec", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -810,22 +810,22 @@\n         {\n \t  rtx reg = gen_rtx_REG (SImode, 0/*COMPILER_SCRATCH_REGISTER*/);\n \t  \n-\t  emit_insn (gen_movsi (reg, GEN_INT (0)));\n+\t  emit_insn (gen_movsi (reg, const0_rtx));\n \t  emit_insn (gen_subsi3 (reg, reg, operands[0]));\n \t  emit_insn (gen_movsi (operands[0], reg));\n \t}\n       else\n \t{\n \t  rtx reg = gen_reg_rtx (SImode);\n \t\n-\t  emit_insn (gen_movsi (reg, GEN_INT (0)));\n+\t  emit_insn (gen_movsi (reg, const0_rtx));\n \t  emit_insn (gen_subsi3 (reg, reg, operands[0]));\n \t  emit_insn (gen_movsi (operands[0], reg));\n \t}\n     }\n   else\n     {\n-      emit_insn (gen_movsi_internal (operands[0], GEN_INT (0)));\n+      emit_insn (gen_movsi_internal (operands[0], const0_rtx));\n       emit_insn (gen_subsi3 (operands[0], operands[0], operands[1]));\n     }\n   DONE;\n@@ -921,20 +921,20 @@\n         {\n \t  rtx reg = gen_rtx_REG (SImode, 0/*COMPILER_SCRATCH_REGISTER*/);\n \t  \n-\t  emit_insn (gen_movsi (reg, GEN_INT (-1)));\n+\t  emit_insn (gen_movsi (reg, constm1_rtx));\n \t  emit_insn (gen_xorsi3 (operands[0], operands[0], reg));\n \t}\n       else\n \t{\n \t  rtx reg = gen_reg_rtx (SImode);\n \t\n-\t  emit_insn (gen_movsi (reg, GEN_INT (-1)));\n+\t  emit_insn (gen_movsi (reg, constm1_rtx));\n \t  emit_insn (gen_xorsi3 (operands[0], operands[0], reg));\n \t}\n     }\n   else\n     {\n-      emit_insn (gen_movsi_internal (operands[0], GEN_INT (-1)));\n+      emit_insn (gen_movsi_internal (operands[0], constm1_rtx));\n       emit_insn (gen_xorsi3 (operands[0], operands[1], operands[0]));\n     }\n   DONE;"}, {"sha": "32c2d27d6e3f3ebf26a91afbb638e68133d26cab", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -9201,7 +9201,7 @@ frv_expand_mclracc_builtin (tree arglist)\n static rtx\n frv_expand_noargs_builtin (enum insn_code icode)\n {\n-  rtx pat = GEN_FCN (icode) (GEN_INT (0));\n+  rtx pat = GEN_FCN (icode) (const0_rtx);\n   if (pat)\n     emit_insn (pat);\n "}, {"sha": "e3c9520a1ee6ecf63af11220351ad9c4d58ce710", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -5502,7 +5502,7 @@\n \n   /* Scale index-low by wordsize.  */\n   scale = gen_reg_rtx (SImode);\n-  emit_insn (gen_ashlsi3 (scale, indx, GEN_INT (2)));\n+  emit_insn (gen_ashlsi3 (scale, indx, const2_rtx));\n \n   /* Load the address, add the start of the table back in,\n      and jump to it.  */"}, {"sha": "bcf25ccf0ad72a4a4c384fe8686f8db391a25918", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -3867,7 +3867,7 @@ expand_a_rotate (enum rtx_code code, rtx operands[])\n \n       /* If the rotate amount is less than or equal to 0,\n \t we go out of the loop.  */\n-      emit_cmp_and_jump_insns (rotate_amount, GEN_INT (0), LE, NULL_RTX,\n+      emit_cmp_and_jump_insns (rotate_amount, const0_rtx, LE, NULL_RTX,\n \t\t\t       QImode, 0, end_label);\n \n       /* Initialize the loop counter.  */\n@@ -3876,16 +3876,16 @@ expand_a_rotate (enum rtx_code code, rtx operands[])\n       emit_label (start_label);\n \n       /* Rotate by one bit.  */\n-      tmp = gen_rtx_fmt_ee (code, mode, dst, GEN_INT (1));\n+      tmp = gen_rtx_fmt_ee (code, mode, dst, const1_rtx);\n       emit_insn (gen_rtx_SET (mode, dst, tmp));\n \n       /* Decrement the counter by 1.  */\n-      tmp = gen_rtx_PLUS (QImode, counter, GEN_INT (-1));\n+      tmp = gen_rtx_PLUS (QImode, counter, constm1_rtx);\n       emit_insn (gen_rtx_SET (VOIDmode, counter, tmp));\n \n       /* If the loop counter is nonzero, we go back to the beginning\n \t of the loop.  */\n-      emit_cmp_and_jump_insns (counter, GEN_INT (0), NE, NULL_RTX, QImode, 1,\n+      emit_cmp_and_jump_insns (counter, const0_rtx, NE, NULL_RTX, QImode, 1,\n \t\t\t       start_label);\n \n       emit_label (end_label);"}, {"sha": "e7ad9e71301f1cdcb805d366a6744c1fdf3915c0", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -3180,9 +3180,9 @@ ia64_expand_epilogue (int sibcall_p)\n \t It is unclear how to compute that number here.  */\n       if (current_frame_info.n_input_regs != 0)\n \temit_insn (gen_alloc (gen_rtx_REG (DImode, fp),\n-\t\t\t      GEN_INT (0), GEN_INT (0),\n+\t\t\t      const0_rtx, const0_rtx,\n \t\t\t      GEN_INT (current_frame_info.n_input_regs),\n-\t\t\t      GEN_INT (0)));\n+\t\t\t      const0_rtx));\n     }\n }\n \n@@ -7151,7 +7151,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t\t       onto MFI because we will add nops before the\n \t\t       insn.  It simplifies subsequent code a lot.  */\n \t\t    PATTERN (last)\n-\t\t      = gen_bundle_selector (GEN_INT (2)); /* -> MFI */\n+\t\t      = gen_bundle_selector (const2_rtx); /* -> MFI */\n \t\t  break;\n \t\t}\n \t      else if (recog_memoized (last) != CODE_FOR_insn_group_barrier)\n@@ -7177,7 +7177,7 @@ bundling (FILE *dump, int verbose, rtx prev_head_insn, rtx tail)\n \t    for (i = add_cycles [INSN_UID (insn)]; i > 0; i--)\n \t      {\n \t\t/* Insert \"MII;\" template.  */\n-\t\tia64_emit_insn_before (gen_bundle_selector (GEN_INT (0)),\n+\t\tia64_emit_insn_before (gen_bundle_selector (const0_rtx),\n \t\t\t\t       insn);\n \t\tia64_emit_insn_before (gen_nop (), insn);\n \t\tia64_emit_insn_before (gen_nop (), insn);"}, {"sha": "5e2dcf1f9e33e89add7144a8013f87e2c00a3f58", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1087,7 +1087,7 @@\n \t  instructions. */\n        if (! nonimmediate_operand (operands[1], HImode))\n          operands[1] = copy_to_mode_reg (HImode, operands[1]);\n-       emit_insn (gen_ashlhi3 (operands[0], operands[1], GEN_INT (1)));\n+       emit_insn (gen_ashlhi3 (operands[0], operands[1], const1_rtx));\n        DONE;\n      }\n   \")\n@@ -3154,13 +3154,13 @@\n     if (INTVAL (operands[2]) == 16)\n       {\n         emit_insn (gen_movhi (operands[3], operands[5]));\n-        emit_insn (gen_movhi (operands[4], GEN_INT (0)));\n+        emit_insn (gen_movhi (operands[4], const0_rtx));\n       }\n     else\n       {\n         operands[6] = GEN_INT (INTVAL (operands[2]) - 16);\n \temit_insn (gen_ashlhi3 (operands[3], operands[5], operands[6]));\n-        emit_insn (gen_movhi (operands[4], GEN_INT (0)));\n+        emit_insn (gen_movhi (operands[4], const0_rtx));\n       }\n   }\")\n \n@@ -3388,18 +3388,18 @@\n \temit_insn (gen_movhi (operands[7], operands[11]));\n \temit_insn (gen_movhi (operands[8], operands[12]));\n \temit_insn (gen_movhi (operands[9], operands[13]));\n-\temit_insn (gen_movhi (operands[10], GEN_INT (0)));\n+\temit_insn (gen_movhi (operands[10], const0_rtx));\n       }\n     else if (INTVAL (operands[2]) == 32)\n       {\n         emit_insn (gen_movsi (operands[3], operands[5]));\n-        emit_insn (gen_movsi (operands[4], GEN_INT (0)));\n+        emit_insn (gen_movsi (operands[4], const0_rtx));\n       }\n     else\n       {\n         operands[6] = GEN_INT (INTVAL (operands[2]) - 32);\n \temit_insn (gen_ashlsi3 (operands[3], operands[5], operands[6]));\n-        emit_insn (gen_movsi (operands[4], GEN_INT (0)));\n+        emit_insn (gen_movsi (operands[4], const0_rtx));\n       }\n   }\")\n \n@@ -3896,7 +3896,7 @@\n         operands[6] = GEN_INT (INTVAL (operands[2]) - 8);\n \temit_insn (gen_lshrqi3 (operands[4], operands[5], operands[6]));\n       }\n-    emit_insn (gen_movqi (operands[3], GEN_INT (0)));\n+    emit_insn (gen_movqi (operands[3], const0_rtx));\n   }\")\n \n (define_insn \"lshrhi3\" ;\t\t\t      0   1   2  3   4\n@@ -4027,7 +4027,7 @@\n         operands[6] = GEN_INT (INTVAL (operands[2]) - 16);\n \temit_insn (gen_lshrhi3 (operands[4], operands[5], operands[6]));\n       }\n-    emit_insn (gen_movhi (operands[3], GEN_INT (0)));\n+    emit_insn (gen_movhi (operands[3], const0_rtx));\n   }\")\n \n ;; This occurs frequently in supporting FP among other things,\n@@ -4258,18 +4258,18 @@\n \temit_insn (gen_movhi (operands[10], operands[11]));\n \temit_insn (gen_movhi (operands[9], operands[12]));\n \temit_insn (gen_movhi (operands[8], operands[13]));\n-\temit_insn (gen_movhi (operands[7], GEN_INT(0)));\n+\temit_insn (gen_movhi (operands[7], const0_rtx));\n       }\n     else if (INTVAL (operands[2]) == 32)\n       {\n         emit_insn (gen_movsi (operands[4], operands[5]));\n-        emit_insn (gen_movsi (operands[3], GEN_INT (0)));\n+        emit_insn (gen_movsi (operands[3], const0_rtx));\n       }\n     else\n       {\n         operands[6] = GEN_INT (INTVAL (operands[2]) - 32);\n \temit_insn (gen_lshrsi3 (operands[4], operands[5], operands[6]));\n-        emit_insn (gen_movsi (operands[3], GEN_INT (0)));\n+        emit_insn (gen_movsi (operands[3], const0_rtx));\n       }\n   }\")\n "}, {"sha": "88801363699cfeda2a3907eff2ec34f2064af61d", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1743,7 +1743,7 @@\n   rtx op1 = operands[1];\n \n   start_sequence ();\n-  emit_insn (gen_cmp_ltusi_insn (op1, GEN_INT (1)));\n+  emit_insn (gen_cmp_ltusi_insn (op1, const1_rtx));\n   emit_insn (gen_movcc_insn (op0));\n   operands[3] = get_insns ();\n   end_sequence ();\n@@ -1797,7 +1797,7 @@\n   else\n     emit_insn (gen_xorsi3 (op3, op1, op2));\n \n-  emit_insn (gen_cmp_ltusi_insn (op3, GEN_INT (1)));\n+  emit_insn (gen_cmp_ltusi_insn (op3, const1_rtx));\n   emit_insn (gen_movcc_insn (op0));\n   operands[4] = get_insns ();\n   end_sequence ();\n@@ -1932,7 +1932,7 @@\n       HOST_WIDE_INT value = INTVAL (op2);\n       if (value >= 2147483647)\n \t{\n-\t  emit_move_insn (op0, GEN_INT (1));\n+\t  emit_move_insn (op0, const1_rtx);\n \t  DONE;\n \t}\n \n@@ -2153,7 +2153,7 @@\n       HOST_WIDE_INT value = INTVAL (op2);\n       if (value >= 2147483647)\n \t{\n-\t  emit_move_insn (op0, GEN_INT (1));\n+\t  emit_move_insn (op0, const1_rtx);\n \t  DONE;\n \t}\n "}, {"sha": "188c8994740f5ff7a6a75c9a458f74c471fbc4a8", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1690,7 +1690,7 @@ expand_prologue (void)\n \n       if (size & 1)\n \temit_insn (gen_addhi3 (stack_pointer_rtx,\n-\t\t\t       stack_pointer_rtx, GEN_INT (-1)));\n+\t\t\t       stack_pointer_rtx, constm1_rtx));\n     }\n \n   /* Create the frame pointer.  */\n@@ -1776,7 +1776,7 @@ expand_epilogue (void)\n \temit_move_after_reload (scratch, stack_pop_word, scratch);\n       if (size & 1)\n \temit_insn (gen_addhi3 (stack_pointer_rtx,\n-\t\t\t       stack_pointer_rtx, GEN_INT (1)));\n+\t\t\t       stack_pointer_rtx, const1_rtx));\n     }\n \n   /* For an interrupt handler, restore ZTMP, ZREG and XYREG.  */\n@@ -1807,7 +1807,7 @@ expand_epilogue (void)\n \t}\n       emit_move_after_reload (gen_rtx_MEM (HImode,\n \t\t\t\t       gen_rtx_PLUS (HImode, addr_reg,\n-\t\t\t\t\t\tGEN_INT (1))), d_reg, 0);\n+\t\t\t\t\t\tconst1_rtx)), d_reg, 0);\n       if (return_size > HARD_REG_SIZE)\n \temit_move_after_reload (gen_rtx_MEM (HImode,\n \t\t\t\t\t gen_rtx_PLUS (HImode, addr_reg,"}, {"sha": "caf88e2a71ae92ae4c18ee240cffcb88b88a63d8", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -4417,7 +4417,7 @@ dsrl\\t%3,%3,1\\n\\\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n \n   if (val < 0)\n-    operands[2] = GEN_INT (0);\n+    operands[2] = const0_rtx;\n   else if (val >= 32 * 8)\n     {\n       int off = val & 7;\n@@ -4540,7 +4540,7 @@ dsrl\\t%3,%3,1\\n\\\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n \n   if (val < 0)\n-    operands[2] = GEN_INT (0);\n+    operands[2] = const0_rtx;\n   else if (val >= 32 * 4)\n     {\n       int off = val & 3;\n@@ -4839,7 +4839,7 @@ dsrl\\t%3,%3,1\\n\\\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n \n   if (val < 0)\n-    operands[2] = GEN_INT (0);\n+    operands[2] = const0_rtx;\n   else if (val >= 32 * 2)\n     {\n       int off = val & 1;\n@@ -4943,7 +4943,7 @@ dsrl\\t%3,%3,1\\n\\\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n \n   if (val < 0)\n-    operands[2] = GEN_INT (0);\n+    operands[2] = const0_rtx;\n   else\n     {\n       operands[1] = GEN_INT (0x7f);"}, {"sha": "4827c85402a890fa6e2232f3a81b96051b2db1ec", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -662,7 +662,7 @@ mmix_function_outgoing_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n   vec[nregs - 1]\n     = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t gen_rtx_REG (cmode, first_val_regnum + nregs - 1),\n-\t\t\t GEN_INT (0));\n+\t\t\t const0_rtx);\n \n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nregs, vec));\n }"}, {"sha": "f7811390d4726e18d46be7a274eccafe457990fe", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -366,7 +366,7 @@ print_operand (FILE *file, rtx x, int code)\n       case 'A':\n \tfputc ('(', file);\n \tif (GET_CODE (XEXP (x, 0)) == REG)\n-\t  output_address (gen_rtx_PLUS (SImode, XEXP (x, 0), GEN_INT (0)));\n+\t  output_address (gen_rtx_PLUS (SImode, XEXP (x, 0), const0_rtx));\n \telse\n \t  output_address (XEXP (x, 0));\n \tfputc (')', file);"}, {"sha": "4e8e9b7736444d37ec23633e22ae14e3a377bf7a", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1074,7 +1074,7 @@\n {\n   rtx target = gen_reg_rtx (SImode);\n \n-  emit_move_insn (target, GEN_INT (0));\n+  emit_move_insn (target, const0_rtx);\n   emit_insn (gen_subsi3 (target, target, operands[1]));\n   emit_move_insn (operands[0], target);\n   DONE;\n@@ -1772,7 +1772,7 @@\n   emit_move_insn (index, plus_constant (operands[0], - INTVAL (operands[1])));\n   emit_insn (gen_cmpsi (index, operands[2]));\n   emit_jump_insn (gen_bgtu (operands[4]));\n-  emit_move_insn (index, gen_rtx_ASHIFT (SImode, index, GEN_INT (2)));\n+  emit_move_insn (index, gen_rtx_ASHIFT (SImode, index, const2_rtx));\n   emit_move_insn (addr, gen_rtx_MEM (SImode,\n \t\t\t\t     gen_rtx_PLUS (SImode, table, index)));\n   if (flag_pic)"}, {"sha": "e6e028fdd487efdc39059d0c1be1c4b1aacdd019", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -922,7 +922,7 @@ expand_block_move (rtx operands[])\n   else if (align == UNITS_PER_WORD)\n     {\n       /* insns to copy by words */\n-      emit_insn (gen_lshrsi3 (count_reg, bytes_rtx, GEN_INT (2)));\n+      emit_insn (gen_lshrsi3 (count_reg, bytes_rtx, const2_rtx));\n       emit_insn (gen_movstrsi1 (GEN_INT (4)));\n       if (constp)\n \t{\n@@ -963,7 +963,7 @@ expand_block_move (rtx operands[])\n \temit_label (aligned_label);\n \n       /* insns to copy by words */\n-      emit_insn (gen_lshrsi3 (count_reg, bytes_reg, GEN_INT (2)));\n+      emit_insn (gen_lshrsi3 (count_reg, bytes_reg, const2_rtx));\n       emit_insn (gen_movstrsi1 (GEN_INT (4)));\n \n       /* insns to copy rest */"}, {"sha": "4f060e3191edbfed9f7ef56c1aba308660156fcb", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -4877,7 +4877,7 @@\n   if (intval % 2 == 0 && cint_ok_for_move (intval / 2))\n     {\n       operands[2] = GEN_INT (intval / 2);\n-      operands[3] = GEN_INT (2);\n+      operands[3] = const2_rtx;\n     }\n   else if (intval % 4 == 0 && cint_ok_for_move (intval / 4))\n     {"}, {"sha": "1b438d68970a563bdddebc59d425ff5a2d9200d0", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -702,7 +702,7 @@ output_move_quad (rtx *operands)\n \t}\n       else if (GET_CODE(operands[1]) == CONST_INT)\n \t{\n-\t  latehalf[1] = GEN_INT (0);\n+\t  latehalf[1] = const0_rtx;\n \t}\n       else\n \tabort();"}, {"sha": "aa04071a8944b992d8d9f62812e5a830bc0e03df", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -571,7 +571,7 @@\n \n   /* Generate [-0.0, -0.0, -0.0, -0.0].  */\n   neg0 = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_altivec_vspltisw_v4sf (neg0, GEN_INT (-1)));\n+  emit_insn (gen_altivec_vspltisw_v4sf (neg0, constm1_rtx));\n   emit_insn (gen_altivec_vslw_v4sf (neg0, neg0, neg0));\n \n   /* Use the multiply-add.  */"}, {"sha": "1aafdc6492ad71f09cadd5b2442125b5d823b88b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -2519,7 +2519,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n                           int even = INTVAL (op1) - 1;\n                           op0 = gen_rtx_PLUS (Pmode, op0, GEN_INT (even));\n \t\t\t  op0 = gen_rtx_CONST (Pmode, op0);\n-                          op1 = GEN_INT (1);\n+                          op1 = const1_rtx;\n                         }\n \n                       emit_move_insn (temp, op0);"}, {"sha": "7f6fa5c2fb6289161476f70f3db9aa837429812e", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -594,7 +594,7 @@ extern int current_function_outgoing_args_size;\n   s390_return_addr_rtx ((COUNT), DYNAMIC_CHAIN_ADDRESS ((FRAME)))\n \n /* In 31-bit mode, we need to mask off the high bit of return addresses.  */\n-#define MASK_RETURN_ADDR (TARGET_64BIT ? GEN_INT (-1) : GEN_INT (0x7fffffff))\n+#define MASK_RETURN_ADDR (TARGET_64BIT ? constm1_rtx : GEN_INT (0x7fffffff))\n \n \n /* Exception handling.  */"}, {"sha": "2ebee93437631f733cc0e09a0baaee3d4c5ad5f1", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -547,15 +547,15 @@\n   [(set (reg 33)\n         (compare (match_operand:HI 0 \"register_operand\" \"d\")\n                  (match_operand:HI 1 \"immediate_operand\" \"n\")))]\n-  \"s390_match_ccmode (insn, s390_tm_ccmode (GEN_INT (-1), operands[1], 1))\"\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (constm1_rtx, operands[1], 1))\"\n   \"tml\\t%0,65535\"\n   [(set_attr \"op_type\" \"RX\")])\n \n (define_insn \"*tmqi_full\"\n   [(set (reg 33)\n         (compare (match_operand:QI 0 \"register_operand\" \"d\")\n                  (match_operand:QI 1 \"immediate_operand\" \"n\")))]\n-  \"s390_match_ccmode (insn, s390_tm_ccmode (GEN_INT (-1), operands[1], 1))\"\n+  \"s390_match_ccmode (insn, s390_tm_ccmode (constm1_rtx, operands[1], 1))\"\n   \"tml\\t%0,255\"\n   [(set_attr \"op_type\" \"RI\")])\n \n@@ -6822,7 +6822,7 @@\n    if (TARGET_64BIT)\n        emit_insn (gen_ashldi3 (index, index, GEN_INT (3)));\n    else\n-       emit_insn (gen_ashlsi3 (index, index, GEN_INT (2)));\n+       emit_insn (gen_ashlsi3 (index, index, const2_rtx));\n \n    emit_move_insn (base, gen_rtx_LABEL_REF (Pmode, operands[3]));\n "}, {"sha": "caebf93d62dba777a8252362480bc707fea593b4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -2427,7 +2427,7 @@ gen_shl_sext (rtx dest, rtx left_rtx, rtx size_rtx, rtx source)\n \t\t  {\n \t\t    operands[2] = GEN_INT (shift2 + 1);\n \t\t    gen_shifty_op (ASHIFT, operands);\n-\t\t    operands[2] = GEN_INT (1);\n+\t\t    operands[2] = const1_rtx;\n \t\t    gen_shifty_op (ASHIFTRT, operands);\n \t\t    break;\n \t\t  }\n@@ -2481,7 +2481,7 @@ gen_shl_sext (rtx dest, rtx left_rtx, rtx size_rtx, rtx source)\n       operands[2] = kind == 7 ? GEN_INT (left + 1) : left_rtx;\n       gen_shifty_op (ASHIFT, operands);\n       if (kind == 7)\n-\temit_insn (gen_ashrsi3_k (dest, dest, GEN_INT (1)));\n+\temit_insn (gen_ashrsi3_k (dest, dest, const1_rtx));\n       break;\n     default:\n       return -1;\n@@ -3375,7 +3375,7 @@ gen_block_redirect (rtx jump, int addr, int need_block)\n \treturn prev;\n       /* Reorg even does nasty things with return insns that cause branches\n \t to go out of range - see find_end_label and callers.  */\n-      return emit_insn_before (gen_block_branch_redirect (GEN_INT (0)) , jump);\n+      return emit_insn_before (gen_block_branch_redirect (const0_rtx) , jump);\n     }\n   /* We can't use JUMP_LABEL here because it might be undefined\n      when not optimizing.  */\n@@ -8413,14 +8413,14 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \t\t\t\t movishori));\n       emit_insn (gen_rotrdi3_mextr (quad0, quad0,\n \t\t\t\t    GEN_INT (TARGET_LITTLE_ENDIAN ? 24 : 56)));\n-      emit_insn (gen_ashldi3_media (quad0, quad0, GEN_INT (2)));\n+      emit_insn (gen_ashldi3_media (quad0, quad0, const2_rtx));\n       emit_move_insn (gen_rtx_MEM (DImode, tramp), quad0);\n       emit_insn (gen_mshflo_w_x (gen_rtx_SUBREG (V4HImode, cxtload, 0),\n \t\t\t\t gen_rtx_SUBREG (V2HImode, cxt, 0),\n \t\t\t\t movishori));\n       emit_insn (gen_rotrdi3_mextr (cxtload, cxtload,\n \t\t\t\t    GEN_INT (TARGET_LITTLE_ENDIAN ? 24 : 56)));\n-      emit_insn (gen_ashldi3_media (cxtload, cxtload, GEN_INT (2)));\n+      emit_insn (gen_ashldi3_media (cxtload, cxtload, const2_rtx));\n       if (TARGET_LITTLE_ENDIAN)\n \t{\n \t  emit_insn (gen_mshflo_l_di (quad1, ptabs, cxtload));\n@@ -9171,7 +9171,7 @@ sh_expand_t_scc (enum rtx_code code, rtx target)\n     {\n       emit_insn (gen_rtx_CLOBBER (VOIDmode, result));\n       emit_insn (gen_subc (result, result, result));\n-      emit_insn (gen_addsi3 (result, result, GEN_INT (1)));\n+      emit_insn (gen_addsi3 (result, result, const1_rtx));\n     }\n   else if (code == EQ || code == NE)\n     emit_insn (gen_move_insn (result, GEN_INT (code == NE)));"}, {"sha": "b83a24eb568cd9956c5a13ab00c6d13f1d2771bb", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -2097,7 +2097,7 @@ struct sh_args {\n #define TRAMPOLINE_ADJUST_ADDRESS(TRAMP) do\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n-    (TRAMP) = expand_simple_binop (Pmode, PLUS, (TRAMP), GEN_INT (1),\t\\\n+    (TRAMP) = expand_simple_binop (Pmode, PLUS, (TRAMP), const1_rtx,\t\\\n \t\t\t\t   gen_reg_rtx (Pmode), 0,\t\t\\\n \t\t\t\t   OPTAB_LIB_WIDEN);\t\t\t\\\n } while (0)"}, {"sha": "73cd17d9e5c633fcda1ef8fac5550daad1e4554c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -4059,7 +4059,7 @@\n \t  if ((HOST_WIDE_INT) val2 < 0 && CONST_OK_FOR_I16 (val2))\n \t    {\n \t      operands[1] = gen_mshflo_l_di (operands[0], operands[0],\n-\t\t\t\t\t     GEN_INT (0));\n+\t\t\t\t\t     const0_rtx);\n \t      break;\n \t    }\n \t}\n@@ -9242,7 +9242,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \t  emit_insn (gen_lshrsi3_k (shift_reg, shift_reg, GEN_INT (8)));\n \t  qi_val = gen_rtx_SUBREG (QImode, shift_reg, 3);\n \t}\n-      emit_insn (gen_addsi3 (addr_target, addr_target, GEN_INT (-1)));\n+      emit_insn (gen_addsi3 (addr_target, addr_target, constm1_rtx));\n       emit_insn (gen_movqi (operands[0], qi_val));\n     }\n \n@@ -10669,7 +10669,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   rtx scratch = gen_reg_rtx (DImode);\n   rtx last;\n \n-  emit_insn (gen_adddi3 (scratch, operands[1], GEN_INT (-1)));\n+  emit_insn (gen_adddi3 (scratch, operands[1], constm1_rtx));\n   emit_insn (gen_xordi3 (scratch, operands[1], scratch));\n   emit_insn (gen_lshrdi3_media (scratch, scratch, const1_rtx));\n   emit_insn (gen_nsbdi (scratch, scratch));\n@@ -10694,7 +10694,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n   emit_insn (gen_adddi3 (discratch,\n \t\t\t simplify_gen_subreg (DImode, operands[1], SImode, 0),\n-\t\t\t GEN_INT (-1)));\n+\t\t\t constm1_rtx));\n   emit_insn (gen_andcdi3 (discratch,\n \t\t\t  simplify_gen_subreg (DImode, operands[1], SImode, 0),\n \t\t\t  discratch));"}, {"sha": "867cd2129a2039f29cac6f5afd88c9494a3798b6", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a556fd39abf14ab516df0663c8df99ea8e81f9c5/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=a556fd39abf14ab516df0663c8df99ea8e81f9c5", "patch": "@@ -1696,7 +1696,7 @@ xstormy16_expand_casesi (rtx index, rtx lower_bound, rtx range,\n   emit_cmp_and_jump_insns (index, range, GTU, NULL_RTX, SImode, 1,\n \t\t\t   default_label);\n   int_index = gen_lowpart_common (HImode, index);\n-  emit_insn (gen_ashlhi3 (int_index, int_index, GEN_INT (2)));\n+  emit_insn (gen_ashlhi3 (int_index, int_index, const2_rtx));\n   emit_jump_insn (gen_tablejump_pcrel (int_index, table));\n }\n "}]}