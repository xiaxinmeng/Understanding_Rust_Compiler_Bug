{"sha": "34dd397b05402820fbb3d790bbf6a7e668acb3b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkZDM5N2IwNTQwMjgyMGZiYjNkNzkwYmJmNmE3ZTY2OGFjYjNiNw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-20T10:18:08Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-20T10:18:08Z"}, "message": "arm.h (EMIT_EABI_ATTRIBUTE): Remove.\n\n\t* config/arm/arm.h (EMIT_EABI_ATTRIBUTE): Remove.\n\t* config/arm/arm.c: Do not include c-pragma.h.\n\t(arm_emit_eabi_attribute): New function based on EMIT_EABI_ATTRIBUTE.\n\t(arm_file_start): Replace uses of EMIT_EABI_ATTRIBUTE with calls\n\tto arm_emit_eabi_attribute.\n\t* arm-c.c: Do not include output.h.\n\t(arm_output_c_attributes): Replace use of EMIT_EABI_ATTRIBUTE with a\n\tcall to arm_emit_eabi_attribute.\n\t* config/arm/arm-protos.h (arm_emit_eabi_attribute): Prototype it.\n\nFrom-SVN: r188823", "tree": {"sha": "86c9cfaa3b8f55c5cbf38718712c004b62913340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c9cfaa3b8f55c5cbf38718712c004b62913340"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34dd397b05402820fbb3d790bbf6a7e668acb3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dd397b05402820fbb3d790bbf6a7e668acb3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34dd397b05402820fbb3d790bbf6a7e668acb3b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dd397b05402820fbb3d790bbf6a7e668acb3b7/comments", "author": null, "committer": null, "parents": [{"sha": "f89dcfd816b93c32c2332bd39b4df0020821ee7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89dcfd816b93c32c2332bd39b4df0020821ee7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89dcfd816b93c32c2332bd39b4df0020821ee7a"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "623635d89ac8ad39df196ae3f202ce1c7c3d1de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34dd397b05402820fbb3d790bbf6a7e668acb3b7", "patch": "@@ -1,3 +1,15 @@\n+2012-06-20  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* config/arm/arm.h (EMIT_EABI_ATTRIBUTE): Remove.\n+\t* config/arm/arm.c: Do not include c-pragma.h.\n+\t(arm_emit_eabi_attribute): New function based on EMIT_EABI_ATTRIBUTE.\n+\t(arm_file_start): Replace uses of EMIT_EABI_ATTRIBUTE with calls\n+\tto arm_emit_eabi_attribute.\n+\t* arm-c.c: Do not include output.h.\n+\t(arm_output_c_attributes): Replace use of EMIT_EABI_ATTRIBUTE with a\n+\tcall to arm_emit_eabi_attribute.\n+\t* config/arm/arm-protos.h (arm_emit_eabi_attribute): Prototype it.\n+\n 2012-06-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p):"}, {"sha": "cfe97c7ec0dc2cb169837df094763320bfb52b55", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=34dd397b05402820fbb3d790bbf6a7e668acb3b7", "patch": "@@ -22,7 +22,6 @@\n #include \"tm.h\"\n #include \"tm_p.h\"\n #include \"tree.h\"\n-#include \"output.h\"\n #include \"c-family/c-common.h\"\n \n /* Output C specific EABI object attributes.  These can not be done in\n@@ -31,8 +30,8 @@\n static void\n arm_output_c_attributes (void)\n {\n-  EMIT_EABI_ATTRIBUTE (Tag_ABI_PCS_wchar_t, 18,\n-\t\t       (int)(TYPE_PRECISION (wchar_type_node) / BITS_PER_UNIT));\n+  int wchar_size = (int)(TYPE_PRECISION (wchar_type_node) / BITS_PER_UNIT);\n+  arm_emit_eabi_attribute (\"Tag_ABI_PCS_wchar_t\", 18, wchar_size);\n }\n \n "}, {"sha": "ba5802e8cb2e9aef21816c1d312e46a717382c94", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=34dd397b05402820fbb3d790bbf6a7e668acb3b7", "patch": "@@ -260,4 +260,6 @@ extern bool arm_expand_vec_perm_const (rtx target, rtx op0, rtx op1, rtx sel);\n \n extern bool arm_autoinc_modes_ok_p (enum machine_mode, enum arm_auto_incmodes);\n \n+extern void arm_emit_eabi_attribute (const char *, int, int);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "b7ae20f73cae31ac15f2a3afd9633734dd21d3de", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=34dd397b05402820fbb3d790bbf6a7e668acb3b7", "patch": "@@ -45,7 +45,6 @@\n #include \"cgraph.h\"\n #include \"ggc.h\"\n #include \"except.h\"\n-#include \"c-family/c-pragma.h\"\t/* ??? */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -23580,6 +23579,23 @@ arm_asm_output_labelref (FILE *stream, const char *name)\n     asm_fprintf (stream, \"%U%s\", name);\n }\n \n+/* This function is used to emit an EABI tag and its associated value.\n+   We emit the numerical value of the tag in case the assembler does not\n+   support textual tags.  (Eg gas prior to 2.20).  If requested we include\n+   the tag name in a comment so that anyone reading the assembler output\n+   will know which tag is being set.\n+\n+   This function is not static because arm-c.c needs it too.  */\n+\n+void\n+arm_emit_eabi_attribute (const char *name, int num, int val)\n+{\n+  asm_fprintf (asm_out_file, \"\\t.eabi_attribute %d, %d\", num, val);\n+  if (flag_verbose_asm || flag_debug_asm)\n+    asm_fprintf (asm_out_file, \"\\t%s %s\", ASM_COMMENT_START, name);\n+  asm_fprintf (asm_out_file, \"\\n\");\n+}\n+\n static void\n arm_file_start (void)\n {\n@@ -23611,9 +23627,9 @@ arm_file_start (void)\n \t  if (arm_fpu_desc->model == ARM_FP_MODEL_VFP)\n \t    {\n \t      if (TARGET_HARD_FLOAT)\n-\t\tEMIT_EABI_ATTRIBUTE (Tag_ABI_HardFP_use, 27, 3);\n+\t\tarm_emit_eabi_attribute (\"Tag_ABI_HardFP_use\", 27, 3);\n \t      if (TARGET_HARD_FLOAT_ABI)\n-\t\tEMIT_EABI_ATTRIBUTE (Tag_ABI_VFP_args, 28, 1);\n+\t\tarm_emit_eabi_attribute (\"Tag_ABI_VFP_args\", 28, 1);\n \t    }\n \t}\n       asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", fpu_name);\n@@ -23623,22 +23639,23 @@ arm_file_start (void)\n \t Conservatively record the setting that would have been used.  */\n \n       if (flag_rounding_math)\n-\tEMIT_EABI_ATTRIBUTE (Tag_ABI_FP_rounding, 19, 1);\n+\tarm_emit_eabi_attribute (\"Tag_ABI_FP_rounding\", 19, 1);\n \n       if (!flag_unsafe_math_optimizations)\n \t{\n-\t  EMIT_EABI_ATTRIBUTE (Tag_ABI_FP_denormal, 20, 1);\n-\t  EMIT_EABI_ATTRIBUTE (Tag_ABI_FP_exceptions, 21, 1);\n+\t  arm_emit_eabi_attribute (\"Tag_ABI_FP_denormal\", 20, 1);\n+\t  arm_emit_eabi_attribute (\"Tag_ABI_FP_exceptions\", 21, 1);\n \t}\n       if (flag_signaling_nans)\n-\tEMIT_EABI_ATTRIBUTE (Tag_ABI_FP_user_exceptions, 22, 1);\n+\tarm_emit_eabi_attribute (\"Tag_ABI_FP_user_exceptions\", 22, 1);\n \n-      EMIT_EABI_ATTRIBUTE (Tag_ABI_FP_number_model, 23,\n+      arm_emit_eabi_attribute (\"Tag_ABI_FP_number_model\", 23,\n \t\t\t   flag_finite_math_only ? 1 : 3);\n \n-      EMIT_EABI_ATTRIBUTE (Tag_ABI_align8_needed, 24, 1);\n-      EMIT_EABI_ATTRIBUTE (Tag_ABI_align8_preserved, 25, 1);\n-      EMIT_EABI_ATTRIBUTE (Tag_ABI_enum_size, 26, flag_short_enums ? 1 : 2);\n+      arm_emit_eabi_attribute (\"Tag_ABI_align8_needed\", 24, 1);\n+      arm_emit_eabi_attribute (\"Tag_ABI_align8_preserved\", 25, 1);\n+      arm_emit_eabi_attribute (\"Tag_ABI_enum_size\", 26,\n+\t\t\t       flag_short_enums ? 1 : 2);\n \n       /* Tag_ABI_optimization_goals.  */\n       if (optimize_size)\n@@ -23649,12 +23666,14 @@ arm_file_start (void)\n \tval = 1;\n       else\n \tval = 6;\n-      EMIT_EABI_ATTRIBUTE (Tag_ABI_optimization_goals, 30, val);\n+      arm_emit_eabi_attribute (\"Tag_ABI_optimization_goals\", 30, val);\n \n-      EMIT_EABI_ATTRIBUTE (Tag_CPU_unaligned_access, 34, unaligned_access);\n+      arm_emit_eabi_attribute (\"Tag_CPU_unaligned_access\", 34,\n+\t\t\t       unaligned_access);\n \n       if (arm_fp16_format)\n-\tEMIT_EABI_ATTRIBUTE (Tag_ABI_FP_16bit_format, 38, (int) arm_fp16_format);\n+\tarm_emit_eabi_attribute (\"Tag_ABI_FP_16bit_format\", 38,\n+\t\t\t     (int) arm_fp16_format);\n \n       if (arm_lang_output_object_attributes_hook)\n \tarm_lang_output_object_attributes_hook();"}, {"sha": "27f0f3eff1e2c1828c4368165eeaf13ba28141f6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34dd397b05402820fbb3d790bbf6a7e668acb3b7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=34dd397b05402820fbb3d790bbf6a7e668acb3b7", "patch": "@@ -2191,21 +2191,6 @@ extern int making_const_table;\n    \" %{mcpu=generic-*:-march=%*;\"\t\t\t\t\\\n    \"   :%{mcpu=*:-mcpu=%*} %{march=*:-march=%*}}\"\n \n-/* This macro is used to emit an EABI tag and its associated value.\n-   We emit the numerical value of the tag in case the assembler does not\n-   support textual tags.  (Eg gas prior to 2.20).  If requested we include\n-   the tag name in a comment so that anyone reading the assembler output\n-   will know which tag is being set.  */\n-#define EMIT_EABI_ATTRIBUTE(NAME,NUM,VAL)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      asm_fprintf (asm_out_file, \"\\t.eabi_attribute %d, %d\", NUM, VAL); \\\n-      if (flag_verbose_asm || flag_debug_asm)\t\t\t\t\\\n-\tasm_fprintf (asm_out_file, \"\\t%s \" #NAME, ASM_COMMENT_START);\t\\\n-      asm_fprintf (asm_out_file, \"\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* -mcpu=native handling only makes sense with compiler running on\n    an ARM chip.  */\n #if defined(__arm__)"}]}