{"sha": "26d949c8c7a757df891ce79162b9bf15087418c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkOTQ5YzhjN2E3NTdkZjg5MWNlNzkxNjJiOWJmMTUwODc0MThjNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-24T21:31:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-27T14:43:23Z"}, "message": "analyzer: fix build with gcc 4.4 (PR 93276)\n\nThis patch fixes various build failures seen with gcc 4.4\n\ngcc prior to 4.6 complains about:\n\n  error: #pragma GCC diagnostic not allowed inside functions\n\nfor various uses of PUSH_IGNORE_WFORMAT and POP_IGNORE_WFORMAT.\nThis patch makes them a no-op with such compilers.\n\nThe patch also fixes various errors with template base initializers\nand redundant uses of \"typename\" that older g++ implementations\ncan't cope with.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93276\n\t* analyzer.h (PUSH_IGNORE_WFORMAT, POP_IGNORE_WFORMAT): Guard these\n\tmacros with GCC_VERSION >= 4006, making them no-op otherwise.\n\t* engine.cc (exploded_edge::exploded_edge): Specify template for\n\tbase class initializer.\n\t(exploded_graph::add_edge): Specify template when chaining up to\n\tbase class add_edge implementation.\n\t(viz_callgraph_node::dump_dot): Drop redundant \"typename\".\n\t(viz_callgraph_edge::viz_callgraph_edge): Specify template for\n\tbase class initializer.\n\t* program-state.cc (sm_state_map::clone_with_remapping): Drop\n\tredundant \"typename\".\n\t(sm_state_map::print): Likewise.\n\t(sm_state_map::hash): Likewise.\n\t(sm_state_map::operator==): Likewise.\n\t(sm_state_map::remap_svalue_ids): Likewise.\n\t(sm_state_map::on_svalue_purge): Likewise.\n\t(sm_state_map::validate): Likewise.\n\t* program-state.h (sm_state_map::iterator_t): Likewise.\n\t* supergraph.h (superedge::superedge): Specify template for base\n\tclass initializer.\n\ngcc/ChangeLog:\n\tPR analyzer/93276\n\t* digraph.cc (test_edge::test_edge): Specify template for base\n\tclass initializer.", "tree": {"sha": "0916fe8fd3b6adc1f3fabde821a2cf7a037608d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0916fe8fd3b6adc1f3fabde821a2cf7a037608d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d949c8c7a757df891ce79162b9bf15087418c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d949c8c7a757df891ce79162b9bf15087418c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d949c8c7a757df891ce79162b9bf15087418c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d949c8c7a757df891ce79162b9bf15087418c6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaa1640b3543c7c3a1f3a788bc449a3638cb780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feaa1640b3543c7c3a1f3a788bc449a3638cb780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feaa1640b3543c7c3a1f3a788bc449a3638cb780"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "1759f1bffe6ffa93985ab3dba98cc2c22b518565", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -1,3 +1,9 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93276\n+\t* digraph.cc (test_edge::test_edge): Specify template for base\n+\tclass initializer.\n+\n 2020-01-27  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_rtx_costs): Update mul64 cost."}, {"sha": "359ea14a7487b940fc0d11a87ea321dc5e67c072", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -1,3 +1,27 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93276\n+\t* analyzer.h (PUSH_IGNORE_WFORMAT, POP_IGNORE_WFORMAT): Guard these\n+\tmacros with GCC_VERSION >= 4006, making them no-op otherwise.\n+\t* engine.cc (exploded_edge::exploded_edge): Specify template for\n+\tbase class initializer.\n+\t(exploded_graph::add_edge): Specify template when chaining up to\n+\tbase class add_edge implementation.\n+\t(viz_callgraph_node::dump_dot): Drop redundant \"typename\".\n+\t(viz_callgraph_edge::viz_callgraph_edge): Specify template for\n+\tbase class initializer.\n+\t* program-state.cc (sm_state_map::clone_with_remapping): Drop\n+\tredundant \"typename\".\n+\t(sm_state_map::print): Likewise.\n+\t(sm_state_map::hash): Likewise.\n+\t(sm_state_map::operator==): Likewise.\n+\t(sm_state_map::remap_svalue_ids): Likewise.\n+\t(sm_state_map::on_svalue_purge): Likewise.\n+\t(sm_state_map::validate): Likewise.\n+\t* program-state.h (sm_state_map::iterator_t): Likewise.\n+\t* supergraph.h (superedge::superedge): Specify template for base\n+\tclass initializer.\n+\n 2020-01-23  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93375"}, {"sha": "9746c9e0123585520a1a906a17125e7fb6cd0a9b", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -98,17 +98,21 @@ class auto_cfun\n   ~auto_cfun () { pop_cfun (); }\n };\n \n-/* Begin suppressing -Wformat and -Wformat-extra-args.  */\n+/* Macros for temporarily suppressing -Wformat and -Wformat-extra-args,\n+   for those versions of GCC that support pragmas within a function\n+   (4.6 onwards).  */\n \n-#define PUSH_IGNORE_WFORMAT \\\n+#if GCC_VERSION >= 4006\n+# define PUSH_IGNORE_WFORMAT \\\n   _Pragma(\"GCC diagnostic push\") \\\n   _Pragma(\"GCC diagnostic ignored \\\"-Wformat\\\"\") \\\n   _Pragma(\"GCC diagnostic ignored \\\"-Wformat-extra-args\\\"\")\n-\n-/* Finish suppressing -Wformat and -Wformat-extra-args.  */\n-\n-#define POP_IGNORE_WFORMAT \\\n+# define POP_IGNORE_WFORMAT \\\n   _Pragma(\"GCC diagnostic pop\")\n+#else\n+# define PUSH_IGNORE_WFORMAT\n+# define POP_IGNORE_WFORMAT\n+#endif\n \n /* A template for creating hash traits for a POD type.  */\n "}, {"sha": "a2587a33a66e002ef0b40d9edebd5314326aae02", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -1377,15 +1377,15 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n       dst_stack_depth, this));\n }\n \n-/* class exploded_edge : public dedge.  */\n+/* class exploded_edge : public dedge<eg_traits>.  */\n \n /* exploded_edge's ctor.  */\n \n exploded_edge::exploded_edge (exploded_node *src, exploded_node *dest,\n \t\t\t      const superedge *sedge,\n \t\t\t      const state_change &change,\n \t\t\t      custom_info_t *custom_info)\n-: dedge (src, dest), m_sedge (sedge), m_change (change),\n+: dedge<eg_traits> (src, dest), m_sedge (sedge), m_change (change),\n   m_custom_info (custom_info)\n {\n   change.validate (dest->get_state ());\n@@ -1991,7 +1991,7 @@ exploded_graph::add_edge (exploded_node *src, exploded_node *dest,\n \t\t\t  exploded_edge::custom_info_t *custom_info)\n {\n   exploded_edge *e = new exploded_edge (src, dest, sedge, change, custom_info);\n-  digraph::add_edge (e);\n+  digraph<eg_traits>::add_edge (e);\n   return e;\n }\n \n@@ -3332,7 +3332,7 @@ class viz_callgraph_node : public dnode<viz_callgraph_traits>\n \t// TODO: also show the per-callstring breakdown\n \tconst exploded_graph::call_string_data_map_t *per_cs_data\n \t  = args.m_eg->get_per_call_string_data ();\n-\tfor (typename exploded_graph::call_string_data_map_t::iterator iter\n+\tfor (exploded_graph::call_string_data_map_t::iterator iter\n \t       = per_cs_data->begin ();\n \t     iter != per_cs_data->end ();\n \t     ++iter)\n@@ -3391,7 +3391,7 @@ class viz_callgraph_edge : public dedge<viz_callgraph_traits>\n public:\n   viz_callgraph_edge (viz_callgraph_node *src, viz_callgraph_node *dest,\n \t\t     const call_superedge *call_sedge)\n-  : dedge (src, dest),\n+  : dedge<viz_callgraph_traits> (src, dest),\n     m_call_sedge (call_sedge)\n   {}\n "}, {"sha": "a9e300fba0fffea5e597991fb2ee29c0fdc33fe3", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -87,7 +87,7 @@ sm_state_map::clone_with_remapping (const one_way_svalue_id_map &id_map) const\n {\n   sm_state_map *result = new sm_state_map ();\n   result->m_global_state = m_global_state;\n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -121,7 +121,7 @@ sm_state_map::print (const state_machine &sm, pretty_printer *pp) const\n       pp_printf (pp, \"global: %s\", sm.get_state_name (m_global_state));\n       first = false;\n     }\n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -172,7 +172,7 @@ sm_state_map::hash () const\n   /* Accumulate the result by xoring a hash for each slot, so that the\n      result doesn't depend on the ordering of the slots in the map.  */\n \n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -199,7 +199,7 @@ sm_state_map::operator== (const sm_state_map &other) const\n   if (m_map.elements () != other.m_map.elements ())\n     return false;\n \n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -395,7 +395,7 @@ sm_state_map::remap_svalue_ids (const svalue_id_map &map)\n   map_t tmp_map;\n \n   /* Build an intermediate map, using the new sids.  */\n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -411,7 +411,7 @@ sm_state_map::remap_svalue_ids (const svalue_id_map &map)\n   m_map.empty ();\n \n   /* Copy over from intermediate map.  */\n-  for (typename map_t::iterator iter = tmp_map.begin ();\n+  for (map_t::iterator iter = tmp_map.begin ();\n        iter != tmp_map.end ();\n        ++iter)\n     {\n@@ -437,7 +437,7 @@ sm_state_map::on_svalue_purge (const state_machine &sm,\n   /* TODO: ideally remove the slot directly; for now\n      do it in two stages.  */\n   auto_vec<svalue_id> to_remove;\n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {\n@@ -507,7 +507,7 @@ sm_state_map::validate (const state_machine &sm,\n   return;\n #endif\n \n-  for (typename map_t::iterator iter = m_map.begin ();\n+  for (map_t::iterator iter = m_map.begin ();\n        iter != m_map.end ();\n        ++iter)\n     {"}, {"sha": "adc71a4eda2a4097aa80a159d11f374b318c2ad6", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -132,7 +132,7 @@ class sm_state_map\n     svalue_id m_origin;\n   };\n   typedef hash_map <svalue_id, entry_t> map_t;\n-  typedef typename map_t::iterator iterator_t;\n+  typedef map_t::iterator iterator_t;\n \n   sm_state_map ();\n "}, {"sha": "0eac0b8bfc9b3614ecfb6bb28391846e1dd7f672", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -304,7 +304,7 @@ class superedge : public dedge<supergraph_traits>\n \n  protected:\n   superedge (supernode *src, supernode *dest, enum edge_kind kind)\n-  : dedge (src, dest),\n+  : dedge<supergraph_traits> (src, dest),\n     m_kind (kind)\n   {}\n "}, {"sha": "31b3e19851f62740350d6c152b90875a8e8e00a8", "filename": "gcc/digraph.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fdigraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d949c8c7a757df891ce79162b9bf15087418c6/gcc%2Fdigraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdigraph.cc?ref=26d949c8c7a757df891ce79162b9bf15087418c6", "patch": "@@ -62,7 +62,7 @@ struct test_node : public dnode<test_graph_traits>\n struct test_edge : public dedge<test_graph_traits>\n {\n   test_edge (node_t *src, node_t *dest)\n-  : dedge (src, dest)\n+  : dedge<test_graph_traits> (src, dest)\n   {}\n \n   void dump_dot (graphviz_out *gv, const dump_args_t &) const OVERRIDE"}]}