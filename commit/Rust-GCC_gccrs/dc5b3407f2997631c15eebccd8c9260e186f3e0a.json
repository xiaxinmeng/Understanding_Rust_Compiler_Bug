{"sha": "dc5b3407f2997631c15eebccd8c9260e186f3e0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1YjM0MDdmMjk5NzYzMWMxNWVlYmNjZDhjOTI2MGUxODZmM2UwYQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2008-11-20T08:05:12Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2008-11-20T08:05:12Z"}, "message": "re PR rtl-optimization/32283 (Missed induction variable optimization)\n\n\tPR rtl-optimization/32283\n\t* tree-ssa-loop-niter.c (scev_probably_wraps_p): Use type of the base\n\tof the induction variable to decide whether it may wrap.\n\t* tree-ssa-loop-ivopts.c (rewrite_use_compare): Emit the initialization\n\tof the bound before the loop.\n\t* simplify-rtx.c (simplify_binary_operation_1): Add two simplifications\n\tregarding AND.\n\t(simplify_plus_minus): Only fail if no simplification is possible.\n\t* loop-iv.c (simple_rhs_p): Consider reg + reg and reg << cst simple.\n\nFrom-SVN: r142035", "tree": {"sha": "049852a66bb3c2b176b99851ac916058e794f7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049852a66bb3c2b176b99851ac916058e794f7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc5b3407f2997631c15eebccd8c9260e186f3e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5b3407f2997631c15eebccd8c9260e186f3e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5b3407f2997631c15eebccd8c9260e186f3e0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5b3407f2997631c15eebccd8c9260e186f3e0a/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9487002a446cc5f4c777a77afe7c6eaecfec4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9487002a446cc5f4c777a77afe7c6eaecfec4d0"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "8731154e13185e2c33c96445a6d5ae24a82e36f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc5b3407f2997631c15eebccd8c9260e186f3e0a", "patch": "@@ -1,3 +1,15 @@\n+2008-11-19  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR rtl-optimization/32283\n+\t* tree-ssa-loop-niter.c (scev_probably_wraps_p): Use type of the base\n+\tof the induction variable to decide whether it may wrap.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_compare): Emit the initialization\n+\tof the bound before the loop.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Add two simplifications\n+\tregarding AND.\n+\t(simplify_plus_minus): Only fail if no simplification is possible.\n+\t* loop-iv.c (simple_rhs_p): Consider reg + reg and reg << cst simple.\n+\n 2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36631"}, {"sha": "3723dbd463aa29e4e0efc6d88c104a1bd960f035", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=dc5b3407f2997631c15eebccd8c9260e186f3e0a", "patch": "@@ -1337,13 +1337,26 @@ simple_rhs_p (rtx rhs)\n     case MINUS:\n       op0 = XEXP (rhs, 0);\n       op1 = XEXP (rhs, 1);\n-      /* Allow reg + const sets only.  */\n-      if (REG_P (op0) && !HARD_REGISTER_P (op0) && CONSTANT_P (op1))\n-\treturn true;\n-      if (REG_P (op1) && !HARD_REGISTER_P (op1) && CONSTANT_P (op0))\n-\treturn true;\n+      /* Allow reg + const and reg + reg.  */\n+      if (!(REG_P (op0) && !HARD_REGISTER_P (op0))\n+\t  && !CONSTANT_P (op0))\n+\treturn false;\n+      if (!(REG_P (op1) && !HARD_REGISTER_P (op1))\n+\t  && !CONSTANT_P (op1))\n+\treturn false;\n \n-      return false;\n+      return true;\n+\n+    case ASHIFT:\n+      op0 = XEXP (rhs, 0);\n+      op1 = XEXP (rhs, 1);\n+      /* Allow reg << const.  */\n+      if (!(REG_P (op0) && !HARD_REGISTER_P (op0)))\n+\treturn false;\n+      if (!CONSTANT_P (op1))\n+\treturn false;\n+\n+      return true;\n \n     default:\n       return false;"}, {"sha": "16d0d48688d3aeb9860f36ac485654ce64af9d4a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=dc5b3407f2997631c15eebccd8c9260e186f3e0a", "patch": "@@ -2304,12 +2304,19 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n     case AND:\n       if (trueop1 == CONST0_RTX (mode) && ! side_effects_p (op0))\n \treturn trueop1;\n-      /* If we are turning off bits already known off in OP0, we need\n-\t not do an AND.  */\n       if (GET_CODE (trueop1) == CONST_INT\n-\t  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n-\t  && (nonzero_bits (trueop0, mode) & ~INTVAL (trueop1)) == 0)\n-\treturn op0;\n+\t  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+\t{\n+\t  HOST_WIDE_INT nzop0 = nonzero_bits (trueop0, mode);\n+\t  HOST_WIDE_INT val1 = INTVAL (trueop1);\n+\t  /* If we are turning off bits already known off in OP0, we need\n+\t     not do an AND.  */\n+\t  if ((nzop0 & ~val1) == 0)\n+\t    return op0;\n+\t  /* If we are clearing all the nonzero bits, the result is zero.  */\n+\t  if ((val1 & nzop0) == 0 && !side_effects_p (op0))\n+\t    return CONST0_RTX (mode);\n+\t}\n       if (rtx_equal_p (trueop0, trueop1) && ! side_effects_p (op0)\n \t  && GET_MODE_CLASS (mode) != MODE_CC)\n \treturn op0;\n@@ -2391,7 +2398,9 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t ((A & N) + B) & M -> (A + B) & M\n \t Similarly if (N & M) == 0,\n \t ((A | N) + B) & M -> (A + B) & M\n-\t and for - instead of + and/or ^ instead of |.  */\n+\t and for - instead of + and/or ^ instead of |.\n+         Also, if (N & M) == 0, then\n+\t (A +- N) & M -> A & M.  */\n       if (GET_CODE (trueop1) == CONST_INT\n \t  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n \t  && ~INTVAL (trueop1)\n@@ -2404,6 +2413,10 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  pmop[0] = XEXP (op0, 0);\n \t  pmop[1] = XEXP (op0, 1);\n \n+\t  if (GET_CODE (pmop[1]) == CONST_INT\n+\t      && (INTVAL (pmop[1]) & INTVAL (trueop1)) == 0)\n+\t    return simplify_gen_binary (AND, mode, pmop[0], op1);\n+\n \t  for (which = 0; which < 2; which++)\n \t    {\n \t      tem = pmop[which];\n@@ -3591,10 +3604,6 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n           ops[j + 1] = save;\n         }\n \n-      /* This is only useful the first time through.  */\n-      if (!canonicalized)\n-        return NULL_RTX;\n-\n       changed = 0;\n       for (i = n_ops - 1; i > 0; i--)\n \tfor (j = i - 1; j >= 0; j--)\n@@ -3650,10 +3659,15 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t\t    ops[i].neg = lneg;\n \t\t    ops[j].op = NULL_RTX;\n \t\t    changed = 1;\n+\t\t    canonicalized = 1;\n \t\t  }\n \t      }\n \t  }\n \n+      /* If nothing changed, fail.  */\n+      if (!canonicalized)\n+        return NULL_RTX;\n+\n       /* Pack all the operands to the lower-numbered entries.  */\n       for (i = 0, j = 0; j < n_ops; j++)\n         if (ops[j].op)"}, {"sha": "aa0472ea364eb98ae4476e3e3ecd6731af983137", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=dc5b3407f2997631c15eebccd8c9260e186f3e0a", "patch": "@@ -5323,11 +5323,15 @@ rewrite_use_compare (struct ivopts_data *data,\n     {\n       tree var = var_at_stmt (data->current_loop, cand, use->stmt);\n       tree var_type = TREE_TYPE (var);\n+      gimple_seq stmts;\n \n       compare = iv_elimination_compare (data, use);\n       bound = unshare_expr (fold_convert (var_type, bound));\n-      op = force_gimple_operand_gsi (&bsi, bound, true, NULL_TREE,\n-\t\t\t\t     true, GSI_SAME_STMT);\n+      op = force_gimple_operand (bound, &stmts, true, NULL_TREE);\n+      if (stmts)\n+\tgsi_insert_seq_on_edge_immediate (\n+\t\tloop_preheader_edge (data->current_loop),\n+\t\tstmts);\n \n       gimple_cond_set_lhs (use->stmt, var);\n       gimple_cond_set_code (use->stmt, compare);"}, {"sha": "13b10c9f1c41477d2ab4693131ea8f1159b03b30", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5b3407f2997631c15eebccd8c9260e186f3e0a/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=dc5b3407f2997631c15eebccd8c9260e186f3e0a", "patch": "@@ -3053,7 +3053,7 @@ scev_probably_wraps_p (tree base, tree step,\n \n   /* If we can use the fact that signed and pointer arithmetics does not\n      wrap, we are done.  */\n-  if (use_overflow_semantics && nowrap_type_p (type))\n+  if (use_overflow_semantics && nowrap_type_p (TREE_TYPE (base)))\n     return false;\n \n   /* To be able to use estimates on number of iterations of the loop,"}]}