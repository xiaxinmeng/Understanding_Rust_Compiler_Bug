{"sha": "56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlZmRiNDU5NmYyZGQ5YWE1NjhjNmExNjBlODEyMjJjMWQyYTIzYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-26T21:48:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-05-26T21:48:49Z"}, "message": "compiler: identify array index expressions in lvalue context\n    \n    Update the Mark_lvalue_varexprs visitor class (used in\n    Assignment_statement::do_get_backend) to identify\n    Array_index_expression's that appear on the left hand side of\n    assignments, then pass this context info on when invoking\n    Array_type::get_value_pointer.\n    \n    Reviewed-on: https://go-review.googlesource.com/44170\n\nFrom-SVN: r248528", "tree": {"sha": "5dd97bb1dc4d0746fb05a9875ebb62a6b3e3df85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd97bb1dc4d0746fb05a9875ebb62a6b3e3df85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/comments", "author": null, "committer": null, "parents": [{"sha": "7d66e2655f500058cc7c82f855a23838af598ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d66e2655f500058cc7c82f855a23838af598ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d66e2655f500058cc7c82f855a23838af598ac5"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "07127b00e77a41edc682e093faef6a18d3b6ecf6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -1,4 +1,4 @@\n-ec49c69df1df4d62f3751fcd7e930d6508d67bf2\n+884df09c3da0f39309ab13f2ad401628fb933050\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "fec206d4462864d11c5c3f21c6393095f54c3b4b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -6470,7 +6470,8 @@ Expression::comparison(Translate_context* context, Type* result_type,\n \t  && left_type->array_type()->length() == NULL)\n \t{\n \t  Array_type* at = left_type->array_type();\n-          left = at->get_value_pointer(context->gogo(), left);\n+          bool is_lvalue = false;\n+          left = at->get_value_pointer(context->gogo(), left, is_lvalue);\n \t}\n       else if (left_type->interface_type() != NULL)\n \t{\n@@ -11067,7 +11068,8 @@ Array_index_expression::do_get_backend(Translate_context* context)\n \t{\n \t  // Slice.\n \t  Expression* valptr =\n-              array_type->get_value_pointer(gogo, this->array_);\n+              array_type->get_value_pointer(gogo, this->array_,\n+                                            this->is_lvalue_);\n \t  Bexpression* ptr = valptr->get_backend(context);\n           ptr = gogo->backend()->pointer_offset_expression(ptr, start, loc);\n \n@@ -11143,7 +11145,8 @@ Array_index_expression::do_get_backend(Translate_context* context)\n   Bexpression* offset = gogo->backend()->conditional_expression(bfn, int_btype,\n \t\t\t\t\t\t\t\tcond, zero,\n \t\t\t\t\t\t\t\tstart, loc);\n-  Expression* valptr = array_type->get_value_pointer(gogo, this->array_);\n+  Expression* valptr = array_type->get_value_pointer(gogo, this->array_,\n+                                                     this->is_lvalue_);\n   Bexpression* val = valptr->get_backend(context);\n   val = gogo->backend()->pointer_offset_expression(val, offset, loc);\n "}, {"sha": "5567605b151af91193c4429c43f38a608138ba47", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -2654,7 +2654,8 @@ class Array_index_expression : public Expression\n   Array_index_expression(Expression* array, Expression* start,\n \t\t\t Expression* end, Expression* cap, Location location)\n     : Expression(EXPRESSION_ARRAY_INDEX, location),\n-      array_(array), start_(start), end_(end), cap_(cap), type_(NULL)\n+      array_(array), start_(start), end_(end), cap_(cap), type_(NULL),\n+      is_lvalue_(false)\n   { }\n \n   // Return the array.\n@@ -2686,6 +2687,18 @@ class Array_index_expression : public Expression\n   end() const\n   { return this->end_; }\n \n+  // Return whether this array index expression appears in an lvalue\n+  // (left hand side of assignment) context.\n+  bool\n+  is_lvalue() const\n+  { return this->is_lvalue_; }\n+\n+  // Update this array index expression to indicate that it appears\n+  // in a left-hand-side or lvalue context.\n+  void\n+  set_is_lvalue()\n+  { this->is_lvalue_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -2753,6 +2766,8 @@ class Array_index_expression : public Expression\n   Expression* cap_;\n   // The type of the expression.\n   Type* type_;\n+  // Whether expr appears in an lvalue context.\n+  bool is_lvalue_;\n };\n \n // A string index.  This is used for both indexing and slicing."}, {"sha": "ae3873ed189aae4e923bc04e5fabb4121e4c43f2", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -903,6 +903,7 @@ int Mark_lvalue_varexprs::expression(Expression** ppexpr)\n   if (aie != NULL)\n     {\n       Mark_lvalue_varexprs mlve;\n+      aie->set_is_lvalue();\n       aie->array()->traverse_subexpressions(&mlve);\n       return TRAVERSE_EXIT;\n     }"}, {"sha": "a3ec52c45cc311b5df373d0f802e53096ed0ee66", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -7611,7 +7611,7 @@ Array_type::finish_backend_element(Gogo* gogo)\n // Return an expression for a pointer to the values in ARRAY.\n \n Expression*\n-Array_type::get_value_pointer(Gogo*, Expression* array) const\n+Array_type::get_value_pointer(Gogo*, Expression* array, bool is_lvalue) const\n {\n   if (this->length() != NULL)\n     {\n@@ -7624,6 +7624,19 @@ Array_type::get_value_pointer(Gogo*, Expression* array) const\n     }\n \n   // Slice.\n+\n+  if (is_lvalue)\n+    {\n+      Temporary_reference_expression* tref =\n+          array->temporary_reference_expression();\n+      if (tref != NULL)\n+        {\n+          tref = tref->copy()->temporary_reference_expression();\n+          tref->set_is_lvalue();\n+          array = tref;\n+        }\n+    }\n+\n   return Expression::make_slice_info(array,\n                                      Expression::SLICE_INFO_VALUE_POINTER,\n                                      array->location());"}, {"sha": "53d6a2cd84f1a3a7bd858ffa9eed740b93c30e26", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56efdb4596f2dd9aa568c6a160e81222c1d2a23c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=56efdb4596f2dd9aa568c6a160e81222c1d2a23c", "patch": "@@ -2517,7 +2517,7 @@ class Array_type : public Type\n \n   // Return an expression for the pointer to the values in an array.\n   Expression*\n-  get_value_pointer(Gogo*, Expression* array) const;\n+  get_value_pointer(Gogo*, Expression* array, bool is_lvalue) const;\n \n   // Return an expression for the length of an array with this type.\n   Expression*"}]}