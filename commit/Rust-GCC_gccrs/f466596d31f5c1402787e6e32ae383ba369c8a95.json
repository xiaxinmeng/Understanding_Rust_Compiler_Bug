{"sha": "f466596d31f5c1402787e6e32ae383ba369c8a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2NjU5NmQzMWY1YzE0MDI3ODdlNmUzMmFlMzgzYmEzNjljOGE5NQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2019-10-10T15:21:27Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2019-10-10T15:21:27Z"}, "message": "re PR target/88630 (Incorrect float negating together with convertion to int on ST-40)\n\ngcc/\n\tPR target/88630\n\t* config/sh/sh.h (TARGET_FPU_SH4_300): New macro.\n\t* config/sh/sh.c (sh_option_override): Enable fsca and fsrra insns\n\talso for TARGET_FPU_SH4_300.\n\t(sh_emit_mode_set): Check for TARGET_FPU_SH4_300 instead of\n\tTARGET_SH4_300.\n\t* config/sh/sh.md (toggle_pr): Add TARGET_FPU_SH4_300 condition.\n\t(negsf2): Expand to either negsf2_fpscr or negsf2_no_fpscr.\n\t(*negsf2_i): Split into ...\n\t(negsf2_fpscr, negsf2_no_fpscr): ... these new patterns.\n\t(abssf2): Expand to either abssf2_fpsc or abssf2_no_fpsc.\n\t(**abssf2_i): Split into ...\n\t(abssf2_fpscr, abssf2_no_fpscr): ... these new patterns.\n\t(negdf2): Expand to either negdf2_fpscr or negdf2_no_fpscr.\n\t(*negdf2_i): Split into ...\n\t(negdf2_fpscr, negdf2_no_fpscr): ... these new patterns.\n\t(absdf2): Expand to either absdf2_fpscr or absdf2_no_fpsc.\n\t(**abssf2_i): Split into ...\n\t(absdf2_fpscr, absdf2_no_fpscr): ... these new patterns.\n\nFrom-SVN: r276809", "tree": {"sha": "a8c691c496fa357325bd07decbcc9260da6d808f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8c691c496fa357325bd07decbcc9260da6d808f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f466596d31f5c1402787e6e32ae383ba369c8a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f466596d31f5c1402787e6e32ae383ba369c8a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f466596d31f5c1402787e6e32ae383ba369c8a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f466596d31f5c1402787e6e32ae383ba369c8a95/comments", "author": null, "committer": null, "parents": [{"sha": "73dc68b9226a262bd193fb15592d378dd9768822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dc68b9226a262bd193fb15592d378dd9768822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73dc68b9226a262bd193fb15592d378dd9768822"}], "stats": {"total": 122, "additions": 106, "deletions": 16}, "files": [{"sha": "f78c4c8c773c8f32cf56f4fba0f21a1c8f06afb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f466596d31f5c1402787e6e32ae383ba369c8a95", "patch": "@@ -1,3 +1,25 @@\n+2019-10-10  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/88630\n+\t* config/sh/sh.h (TARGET_FPU_SH4_300): New macro.\n+\t* config/sh/sh.c (sh_option_override): Enable fsca and fsrra insns\n+\talso for TARGET_FPU_SH4_300.\n+\t(sh_emit_mode_set): Check for TARGET_FPU_SH4_300 instead of\n+\tTARGET_SH4_300.\n+\t* config/sh/sh.md (toggle_pr): Add TARGET_FPU_SH4_300 condition.\n+\t(negsf2): Expand to either negsf2_fpscr or negsf2_no_fpscr.\n+\t(*negsf2_i): Split into ...\n+\t(negsf2_fpscr, negsf2_no_fpscr): ... these new patterns.\n+\t(abssf2): Expand to either abssf2_fpsc or abssf2_no_fpsc.\n+\t(**abssf2_i): Split into ...\n+\t(abssf2_fpscr, abssf2_no_fpscr): ... these new patterns.\n+\t(negdf2): Expand to either negdf2_fpscr or negdf2_no_fpscr.\n+\t(*negdf2_i): Split into ...\n+\t(negdf2_fpscr, negdf2_no_fpscr): ... these new patterns.\n+\t(absdf2): Expand to either absdf2_fpscr or absdf2_no_fpsc.\n+\t(**abssf2_i): Split into ...\n+\t(absdf2_fpscr, absdf2_no_fpscr): ... these new patterns.\n+\n 2019-10-10  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/92046"}, {"sha": "521bc0966ccb6d66a49b76e3b917c824e7d8a794", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f466596d31f5c1402787e6e32ae383ba369c8a95", "patch": "@@ -958,11 +958,13 @@ sh_option_override (void)\n   if (flag_unsafe_math_optimizations)\n     {\n       /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSCA == 0 && TARGET_SH4A_FP)\n+      if (global_options_set.x_TARGET_FSCA == 0\n+\t  && (TARGET_SH4A_FP || TARGET_FPU_SH4_300))\n \tTARGET_FSCA = 1;\n \n       /* Enable fsrra insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSRRA == 0 && TARGET_SH4A_FP)\n+      if (global_options_set.x_TARGET_FSRRA == 0\n+\t  && (TARGET_SH4A_FP || TARGET_FPU_SH4_300))\n \tTARGET_FSRRA = 1;\n     }\n \n@@ -12490,7 +12492,7 @@ static void\n sh_emit_mode_set (int entity ATTRIBUTE_UNUSED, int mode,\n \t\t  int prev_mode, HARD_REG_SET regs_live ATTRIBUTE_UNUSED)\n {\n-  if ((TARGET_SH4A_FP || TARGET_SH4_300)\n+  if ((TARGET_SH4A_FP || TARGET_FPU_SH4_300)\n       && prev_mode != FP_MODE_NONE && prev_mode != mode)\n     {\n       emit_insn (gen_toggle_pr ());"}, {"sha": "cacc674f0b2d36a3c58b9107d3b795d74085e5ad", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f466596d31f5c1402787e6e32ae383ba369c8a95", "patch": "@@ -69,6 +69,8 @@ extern int code_for_indirect_jump_scratch;\n    FPU is disabled (which makes it compatible with SH4al-dsp).  */\n #define TARGET_SH4A_FP (TARGET_SH4A && TARGET_FPU_ANY)\n \n+/* True if the FPU is a SH4-300 variant.  */\n+#define TARGET_FPU_SH4_300 (TARGET_FPU_ANY && TARGET_SH4_300)\n \n /* This is not used by the SH2E calling convention  */\n #define TARGET_VARARGS_PRETEND_ARGS(FUN_DECL) \\"}, {"sha": "e687cf22a393ee644d57c92d2d235b9e4b3b8bbb", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 77, "deletions": 13, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f466596d31f5c1402787e6e32ae383ba369c8a95/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f466596d31f5c1402787e6e32ae383ba369c8a95", "patch": "@@ -9163,7 +9163,7 @@\n \t(xor:SI (reg:SI FPSCR_REG) (const_int FPSCR_PR)))\n    (set (reg:SI FPSCR_MODES_REG)\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n-  \"TARGET_SH4A_FP\"\n+  \"TARGET_SH4A_FP || TARGET_FPU_SH4_300\"\n   \"fpchg\"\n   [(set_attr \"type\" \"fpscr_toggle\")])\n \n@@ -9391,15 +9391,31 @@\n (define_expand \"negsf2\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\")\n \t(neg:SF (match_operand:SF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_SH2E\")\n+  \"TARGET_FPU_ANY\"\n+{\n+  if (TARGET_FPU_SH4_300)\n+    emit_insn (gen_negsf2_fpscr (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_negsf2_no_fpscr (operands[0], operands[1]));\n+  DONE;\n+})\n \n-(define_insn \"*negsf2_i\"\n+(define_insn \"negsf2_no_fpscr\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"TARGET_SH2E\"\n+  \"TARGET_FPU_ANY && !TARGET_FPU_SH4_300\"\n   \"fneg\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n+(define_insn \"negsf2_fpscr\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(neg:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_FPU_SH4_300\"\n+  \"fneg\t%0\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"fp_mode\" \"single\")])\n+\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"\")))]\n@@ -9489,15 +9505,31 @@\n (define_expand \"abssf2\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\")\n \t(abs:SF (match_operand:SF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_SH2E\")\n+  \"TARGET_FPU_ANY\"\n+{\n+  if (TARGET_FPU_SH4_300)\n+    emit_insn (gen_abssf2_fpscr (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_abssf2_no_fpscr (operands[0], operands[1]));\n+  DONE;\n+})\n \n-(define_insn \"*abssf2_i\"\n+(define_insn \"abssf2_no_fpscr\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"TARGET_SH2E\"\n+  \"TARGET_FPU_ANY && !TARGET_FPU_SH4_300\"\n   \"fabs\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n+(define_insn \"abssf2_fpscr\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(abs:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_FPU_SH4_300\"\n+  \"fabs\t%0\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"fp_mode\" \"single\")])\n+\n (define_expand \"adddf3\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"\")\n@@ -9673,12 +9705,28 @@\n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\")\n \t(neg:DF (match_operand:DF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_FPU_DOUBLE\")\n+  \"TARGET_FPU_DOUBLE\"\n+{\n+  if (TARGET_FPU_SH4_300)\n+    emit_insn (gen_negdf2_fpscr (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_negdf2_no_fpscr (operands[0], operands[1]));\n+  DONE;\n+})\n \n-(define_insn \"*negdf2_i\"\n+(define_insn \"negdf2_fpscr\"\n+  [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(neg:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_FPU_SH4_300\"\n+  \"fneg\t%0\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"fp_mode\" \"double\")])\n+\n+(define_insn \"negdf2_no_fpscr\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"TARGET_FPU_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE && !TARGET_FPU_SH4_300\"\n   \"fneg\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n@@ -9704,15 +9752,31 @@\n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\")\n \t(abs:DF (match_operand:DF 1 \"fp_arith_reg_operand\")))]\n-  \"TARGET_FPU_DOUBLE\")\n+  \"TARGET_FPU_DOUBLE\"\n+{\n+  if (TARGET_FPU_SH4_300)\n+    emit_insn (gen_absdf2_fpscr (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_absdf2_no_fpscr (operands[0], operands[1]));\n+  DONE;\n+})\n \n-(define_insn \"*absdf2_i\"\n+(define_insn \"absdf2_no_fpscr\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))]\n-  \"TARGET_FPU_DOUBLE\"\n+  \"TARGET_FPU_DOUBLE && !TARGET_FPU_SH4_300\"\n   \"fabs\t%0\"\n   [(set_attr \"type\" \"fmove\")])\n \n+(define_insn \"absdf2_fpscr\"\n+  [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(abs:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_FPU_SH4_300\"\n+  \"fabs\t%0\"\n+  [(set_attr \"type\" \"fmove\")\n+   (set_attr \"fp_mode\" \"double\")])\n+\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"\")))]"}]}