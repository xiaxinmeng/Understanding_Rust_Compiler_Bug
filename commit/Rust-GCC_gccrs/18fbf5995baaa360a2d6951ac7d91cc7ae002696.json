{"sha": "18fbf5995baaa360a2d6951ac7d91cc7ae002696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmYmY1OTk1YmFhYTM2MGEyZDY5NTFhYzdkOTFjYzdhZTAwMjY5Ng==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-10-27T16:08:48Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-27T16:08:48Z"}, "message": "configure.ac: Don't test for [build] __cxa_atexit when building a cross compiler.\n\n\t* configure.ac: Don't test for [build] __cxa_atexit when building a\n\tcross compiler.\n\t* configure: Regenerate.\n\nFrom-SVN: r89684", "tree": {"sha": "76dbd3e55a694f789e3d6a20e1c10f46261a7f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76dbd3e55a694f789e3d6a20e1c10f46261a7f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fbf5995baaa360a2d6951ac7d91cc7ae002696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fbf5995baaa360a2d6951ac7d91cc7ae002696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fbf5995baaa360a2d6951ac7d91cc7ae002696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fbf5995baaa360a2d6951ac7d91cc7ae002696/comments", "author": null, "committer": null, "parents": [{"sha": "57991ebac2ab38cf53fcda989db5825f92411534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57991ebac2ab38cf53fcda989db5825f92411534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57991ebac2ab38cf53fcda989db5825f92411534"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "68fc9443ea181091d01dc1ab96aaf39553a7656b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18fbf5995baaa360a2d6951ac7d91cc7ae002696", "patch": "@@ -1,3 +1,9 @@\n+2004-10-27  Paul Brook  <paul@codesourcery.com>\n+\n+\t* configure.ac: Don't test for [build] __cxa_atexit when building a\n+\tcross compiler.\n+\t* configure: Regenerate.\n+\n 2004-10-27  Paul Brook  <paul@codeosurcery.com>\n \n \t* configure.ac: Use build_exeext not host_exeext when lookin for"}, {"sha": "117fb03d8ca33eb7d1e0da955f6aed3326236163", "filename": "gcc/configure", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=18fbf5995baaa360a2d6951ac7d91cc7ae002696", "patch": "@@ -12005,9 +12005,11 @@ fi\n # UNSORTED\n # --------\n \n+use_cxa_atexit=no\n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n-   echo \"$as_me:$LINENO: checking for __cxa_atexit\" >&5\n+  if test x$host = x$target; then\n+    echo \"$as_me:$LINENO: checking for __cxa_atexit\" >&5\n echo $ECHO_N \"checking for __cxa_atexit... $ECHO_C\" >&6\n if test \"${ac_cv_func___cxa_atexit+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n@@ -12098,15 +12100,23 @@ fi\n echo \"$as_me:$LINENO: result: $ac_cv_func___cxa_atexit\" >&5\n echo \"${ECHO_T}$ac_cv_func___cxa_atexit\" >&6\n if test $ac_cv_func___cxa_atexit = yes; then\n+  use_cxa_atexit=yes\n+else\n+  echo \"__cxa_atexit can't be enabled on this target\"\n+fi\n+\n+  else\n+    # We can't check for __cxa_atexit when building a cross, so assume\n+    # it is available\n+    use_cxa_atexit=yes\n+  fi\n+  if test x$use_cxa_atexit = xyes; then\n \n cat >>confdefs.h <<\\_ACEOF\n #define DEFAULT_USE_CXA_ATEXIT 1\n _ACEOF\n \n-else\n-  echo \"__cxa_atexit can't be enabled on this target\"\n-fi\n-\n+  fi\n fi\n \n # Look for a file containing extra machine modes."}, {"sha": "6f388754da1ca32b159ae60c3808700463e81468", "filename": "gcc/configure.ac", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fbf5995baaa360a2d6951ac7d91cc7ae002696/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=18fbf5995baaa360a2d6951ac7d91cc7ae002696", "patch": "@@ -1295,15 +1295,24 @@ AC_SUBST(gthread_flags)\n # UNSORTED\n # --------\n \n+use_cxa_atexit=no\n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n-   AC_CHECK_FUNC(__cxa_atexit,\n-\t[AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 1,\n-   \t[Define if you want to use __cxa_atexit, rather than atexit, to\n-   \tregister C++ destructors for local statics and global objects.\n-   \tThis is essential for fully standards-compliant handling of\n-   \tdestructors, but requires __cxa_atexit in libc.])],\n-\techo \"__cxa_atexit can't be enabled on this target\")\n+  if test x$host = x$target; then\n+    AC_CHECK_FUNC(__cxa_atexit,[use_cxa_atexit=yes],\n+\t[echo \"__cxa_atexit can't be enabled on this target\"])\n+  else\n+    # We can't check for __cxa_atexit when building a cross, so assume\n+    # it is available \n+    use_cxa_atexit=yes\n+  fi\n+  if test x$use_cxa_atexit = xyes; then\n+    AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 1,\n+      [Define if you want to use __cxa_atexit, rather than atexit, to\n+      register C++ destructors for local statics and global objects.\n+      This is essential for fully standards-compliant handling of\n+      destructors, but requires __cxa_atexit in libc.])\n+  fi\n fi\n \n # Look for a file containing extra machine modes."}]}