{"sha": "50752b751fff56e7e2c74024bae659d5e9dea50f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3NTJiNzUxZmZmNTZlN2UyYzc0MDI0YmFlNjU5ZDVlOWRlYTUwZg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T12:41:39Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T14:38:00Z"}, "message": "aarch64: Use memcpy to copy vector tables in vst1[q]_x2 intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vst1[q]_x2\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are not generated for the vst1q_x2 intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vst1_s64_x2): Use\n\t__builtin_memcpy instead of constructing\n\t__builtin_aarch64_simd_oi one vector at a time.\n\t(vst1_u64_x2): Likewise.\n\t(vst1_f64_x2): Likewise.\n\t(vst1_s8_x2): Likewise.\n\t(vst1_p8_x2): Likewise.\n\t(vst1_s16_x2): Likewise.\n\t(vst1_p16_x2): Likewise.\n\t(vst1_s32_x2): Likewise.\n\t(vst1_u8_x2): Likewise.\n\t(vst1_u16_x2): Likewise.\n\t(vst1_u32_x2): Likewise.\n\t(vst1_f16_x2): Likewise.\n\t(vst1_f32_x2): Likewise.\n\t(vst1_p64_x2): Likewise.\n\t(vst1q_s8_x2): Likewise.\n\t(vst1q_p8_x2): Likewise.\n\t(vst1q_s16_x2): Likewise.\n\t(vst1q_p16_x2): Likewise.\n\t(vst1q_s32_x2): Likewise.\n\t(vst1q_s64_x2): Likewise.\n\t(vst1q_u8_x2): Likewise.\n\t(vst1q_u16_x2): Likewise.\n\t(vst1q_u32_x2): Likewise.\n\t(vst1q_u64_x2): Likewise.\n\t(vst1q_f16_x2): Likewise.\n\t(vst1q_f32_x2): Likewise.\n\t(vst1q_f64_x2): Likewise.\n\t(vst1q_p64_x2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n\ttests.", "tree": {"sha": "8bc4b01e0715f1cce9e1ab2abbb8ffe2266f514d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc4b01e0715f1cce9e1ab2abbb8ffe2266f514d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50752b751fff56e7e2c74024bae659d5e9dea50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50752b751fff56e7e2c74024bae659d5e9dea50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50752b751fff56e7e2c74024bae659d5e9dea50f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50752b751fff56e7e2c74024bae659d5e9dea50f/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf6e2c21be84a478bcef4cced49879879a1104c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf6e2c21be84a478bcef4cced49879879a1104c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf6e2c21be84a478bcef4cced49879879a1104c"}], "stats": {"total": 105, "additions": 44, "deletions": 61}, "files": [{"sha": "752397418afba8d17362f904556e7d2e88872eb8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 28, "deletions": 60, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50752b751fff56e7e2c74024bae659d5e9dea50f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50752b751fff56e7e2c74024bae659d5e9dea50f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=50752b751fff56e7e2c74024bae659d5e9dea50f", "patch": "@@ -26276,8 +26276,7 @@ vst1_s64_x2 (int64_t * __a, int64x1x2_t __val)\n     = vcombine_s64 (__val.val[0], vcreate_s64 (__AARCH64_INT64_C (0)));\n   __temp.val[1]\n     = vcombine_s64 (__val.val[1], vcreate_s64 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -26291,8 +26290,7 @@ vst1_u64_x2 (uint64_t * __a, uint64x1x2_t __val)\n     = vcombine_u64 (__val.val[0], vcreate_u64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1]\n     = vcombine_u64 (__val.val[1], vcreate_u64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -26306,8 +26304,7 @@ vst1_f64_x2 (float64_t * __a, float64x1x2_t __val)\n     = vcombine_f64 (__val.val[0], vcreate_f64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1]\n     = vcombine_f64 (__val.val[1], vcreate_f64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -26321,8 +26318,7 @@ vst1_s8_x2 (int8_t * __a, int8x8x2_t __val)\n     = vcombine_s8 (__val.val[0], vcreate_s8 (__AARCH64_INT64_C (0)));\n   __temp.val[1]\n     = vcombine_s8 (__val.val[1], vcreate_s8 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26336,8 +26332,7 @@ vst1_p8_x2 (poly8_t * __a, poly8x8x2_t __val)\n     = vcombine_p8 (__val.val[0], vcreate_p8 (__AARCH64_UINT64_C (0)));\n   __temp.val[1]\n     = vcombine_p8 (__val.val[1], vcreate_p8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26351,8 +26346,7 @@ vst1_s16_x2 (int16_t * __a, int16x4x2_t __val)\n     = vcombine_s16 (__val.val[0], vcreate_s16 (__AARCH64_INT64_C (0)));\n   __temp.val[1]\n     = vcombine_s16 (__val.val[1], vcreate_s16 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26366,8 +26360,7 @@ vst1_p16_x2 (poly16_t * __a, poly16x4x2_t __val)\n     = vcombine_p16 (__val.val[0], vcreate_p16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1]\n     = vcombine_p16 (__val.val[1], vcreate_p16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26381,8 +26374,7 @@ vst1_s32_x2 (int32_t * __a, int32x2x2_t __val)\n     = vcombine_s32 (__val.val[0], vcreate_s32 (__AARCH64_INT64_C (0)));\n   __temp.val[1]\n     = vcombine_s32 (__val.val[1], vcreate_s32 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -26394,8 +26386,7 @@ vst1_u8_x2 (uint8_t * __a, uint8x8x2_t __val)\n   uint8x16x2_t __temp;\n   __temp.val[0] = vcombine_u8 (__val.val[0], vcreate_u8 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u8 (__val.val[1], vcreate_u8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26407,8 +26398,7 @@ vst1_u16_x2 (uint16_t * __a, uint16x4x2_t __val)\n   uint16x8x2_t __temp;\n   __temp.val[0] = vcombine_u16 (__val.val[0], vcreate_u16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u16 (__val.val[1], vcreate_u16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26420,8 +26410,7 @@ vst1_u32_x2 (uint32_t * __a, uint32x2x2_t __val)\n   uint32x4x2_t __temp;\n   __temp.val[0] = vcombine_u32 (__val.val[0], vcreate_u32 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_u32 (__val.val[1], vcreate_u32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -26433,8 +26422,7 @@ vst1_f16_x2 (float16_t * __a, float16x4x2_t __val)\n   float16x8x2_t __temp;\n   __temp.val[0] = vcombine_f16 (__val.val[0], vcreate_f16 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_f16 (__val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v4hf (__a, __o);\n }\n \n@@ -26446,8 +26434,7 @@ vst1_f32_x2 (float32_t * __a, float32x2x2_t __val)\n   float32x4x2_t __temp;\n   __temp.val[0] = vcombine_f32 (__val.val[0], vcreate_f32 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_f32 (__val.val[1], vcreate_f32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2v2sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -26459,10 +26446,7 @@ vst1_p64_x2 (poly64_t * __a, poly64x1x2_t __val)\n   poly64x2x2_t __temp;\n   __temp.val[0] = vcombine_p64 (__val.val[0], vcreate_p64 (__AARCH64_UINT64_C (0)));\n   __temp.val[1] = vcombine_p64 (__val.val[1], vcreate_p64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st1x2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -26471,8 +26455,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_s8_x2 (int8_t * __a, int8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26481,8 +26464,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p8_x2 (poly8_t * __a, poly8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26491,8 +26473,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_s16_x2 (int16_t * __a, int16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26501,8 +26482,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p16_x2 (poly16_t * __a, poly16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26511,8 +26491,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_s32_x2 (int32_t * __a, int32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -26521,8 +26500,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_s64_x2 (int64_t * __a, int64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -26531,8 +26509,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u8_x2 (uint8_t * __a, uint8x16x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -26541,8 +26518,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u16_x2 (uint16_t * __a, uint16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hi (__o, (int16x8_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -26551,8 +26527,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u32_x2 (uint32_t * __a, uint32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4si (__o, (int32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -26561,8 +26536,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u64_x2 (uint64_t * __a, uint64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di (__o, (int64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -26571,8 +26545,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_f16_x2 (float16_t * __a, float16x8x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv8hf (__o, __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v8hf (__a, __o);\n }\n \n@@ -26581,8 +26554,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_f32_x2 (float32_t * __a, float32x4x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv4sf (__o, (float32x4_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v4sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -26591,8 +26563,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_f64_x2 (float64_t * __a, float64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2df (__o, (float64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v2df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -26601,10 +26572,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p64_x2 (poly64_t * __a, poly64x2x2_t __val)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[1], 1);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st1x2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n "}, {"sha": "60c53bc27f8378c78b119576ed19fde0e5743894", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50752b751fff56e7e2c74024bae659d5e9dea50f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50752b751fff56e7e2c74024bae659d5e9dea50f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=50752b751fff56e7e2c74024bae659d5e9dea50f", "patch": "@@ -160,6 +160,21 @@ TEST_ST1xN (vst1q, uint64x2x4_t, uint64_t*, u64, x4);\n TEST_ST1xN (vst1q, poly64x2x4_t, poly64_t*, p64, x4);\n TEST_ST1xN (vst1q, float64x2x4_t, float64_t*, f64, x4);\n \n+TEST_ST1xN (vst1q, int8x16x2_t, int8_t*, s8, x2);\n+TEST_ST1xN (vst1q, uint8x16x2_t, uint8_t*, u8, x2);\n+TEST_ST1xN (vst1q, poly8x16x2_t, poly8_t*, p8, x2);\n+TEST_ST1xN (vst1q, int16x8x2_t, int16_t*, s16, x2);\n+TEST_ST1xN (vst1q, uint16x8x2_t, uint16_t*, u16, x2);\n+TEST_ST1xN (vst1q, poly16x8x2_t, poly16_t*, p16, x2);\n+TEST_ST1xN (vst1q, float16x8x2_t, float16_t*, f16, x2);\n+TEST_ST1xN (vst1q, int32x4x2_t, int32_t*, s32, x2);\n+TEST_ST1xN (vst1q, uint32x4x2_t, uint32_t*, u32, x2);\n+TEST_ST1xN (vst1q, float32x4x2_t, float32_t*, f32, x2);\n+TEST_ST1xN (vst1q, int64x2x2_t, int64_t*, s64, x2);\n+TEST_ST1xN (vst1q, uint64x2x2_t, uint64_t*, u64, x2);\n+TEST_ST1xN (vst1q, poly64x2x2_t, poly64_t*, p64, x2);\n+TEST_ST1xN (vst1q, float64x2x2_t, float64_t*, f64, x2);\n+\n #define TEST_ST1x3(name, tbltype, ptrtype, ts, xn) \\\n   void test_ ## name ## _ ## ts ## _ ## xn (ptrtype a, int8x8_t dummy, \\\n \t\t\t\t\t    tbltype b) \\\n@@ -189,4 +204,4 @@ TEST_ST1x3 (vst1q, float64x2x3_t, float64_t*, f64, x3);\n /* { dg-final { scan-assembler-times \"st4\\\\t\" 14} }  */\n /* { dg-final { scan-assembler-times \"st3\\\\t\" 14} }  */\n /* { dg-final { scan-assembler-times \"st2\\\\t\" 14} }  */\n-/* { dg-final { scan-assembler-times \"st1\\\\t\" 28} }  */\n+/* { dg-final { scan-assembler-times \"st1\\\\t\" 42} }  */"}]}