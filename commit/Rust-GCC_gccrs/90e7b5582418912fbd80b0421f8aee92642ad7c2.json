{"sha": "90e7b5582418912fbd80b0421f8aee92642ad7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlN2I1NTgyNDE4OTEyZmJkODBiMDQyMWY4YWVlOTI2NDJhZDdjMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T10:55:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T10:55:10Z"}, "message": "[multiple changes]\n\n2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_unst.adb (Unnest_Subprogram): Complete previous\n\tchange and update comments.\n\n2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Check_Function_With_Address_Parameter):\n\tA subprogram that has an Address parameter and is declared in a Pure\n\tpackage is not considered Pure, because the parameter may be used as a\n\tpointer and the referenced data may change even if the address value\n\titself does not.\n\t* freeze.adb (Freeze_Subprogram): use it.\n\t* exp_ch6.adb (Expand_N_Subprogram_Body): Use it.\n\nFrom-SVN: r229234", "tree": {"sha": "db1a53401009ca517b9063eaaeae05844642654e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db1a53401009ca517b9063eaaeae05844642654e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e7b5582418912fbd80b0421f8aee92642ad7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e7b5582418912fbd80b0421f8aee92642ad7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e7b5582418912fbd80b0421f8aee92642ad7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e7b5582418912fbd80b0421f8aee92642ad7c2/comments", "author": null, "committer": null, "parents": [{"sha": "45fbea4f6603667baa877577a5ccf6326c53babd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45fbea4f6603667baa877577a5ccf6326c53babd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45fbea4f6603667baa877577a5ccf6326c53babd"}], "stats": {"total": 143, "additions": 94, "deletions": 49}, "files": [{"sha": "8fa3e22a0381068abaa97525ce870412b1603bd1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -1,3 +1,18 @@\n+2015-10-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram): Complete previous\n+\tchange and update comments.\n+\n+2015-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Check_Function_With_Address_Parameter):\n+\tA subprogram that has an Address parameter and is declared in a Pure\n+\tpackage is not considered Pure, because the parameter may be used as a\n+\tpointer and the referenced data may change even if the address value\n+\titself does not.\n+\t* freeze.adb (Freeze_Subprogram): use it.\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body): Use it.\n+\n 2015-10-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* tracebak.c: Fallback to generic unwinder for gcc-sjlj on x86 &"}, {"sha": "407ecef7b1e0a78daf292e8db66dfe6d5d74fa70", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 17, "deletions": 45, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -5035,6 +5035,23 @@ package body Exp_Ch6 is\n          Spec_Id := Body_Id;\n       end if;\n \n+      --  If this is a Pure function which has any parameters whose root type\n+      --  is System.Address, reset the Pure indication.\n+      --  This check is also performed when the subprogram is frozen, but we\n+      --  repeat it on the body so that the indication is consistent, and so\n+      --  it applies as well to bodies without separate specifications.\n+\n+      if Is_Pure (Spec_Id)\n+        and then Is_Subprogram (Spec_Id)\n+        and then not Has_Pragma_Pure_Function (Spec_Id)\n+      then\n+         Check_Function_With_Address_Parameter (Spec_Id);\n+\n+         if Spec_Id /= Body_Id then\n+            Set_Is_Pure (Body_Id, Is_Pure (Spec_Id));\n+         end if;\n+      end if;\n+\n       --  The subprogram body is Ghost when it is stand alone and subject to\n       --  pragma Ghost or the corresponding spec is Ghost. To accomodate both\n       --  cases, set the mode now to ensure that any nodes generated during\n@@ -5113,51 +5130,6 @@ package body Exp_Ch6 is\n          end if;\n       end if;\n \n-      --  If this is a Pure function which has any parameters whose root type\n-      --  is System.Address, reset the Pure indication, since it will likely\n-      --  cause incorrect code to be generated as the parameter is probably\n-      --  a pointer, and the fact that the same pointer is passed does not mean\n-      --  that the same value is being referenced.\n-\n-      --  Note that if the programmer gave an explicit Pure_Function pragma,\n-      --  then we believe the programmer, and leave the subprogram Pure.\n-\n-      --  This code should probably be at the freeze point, so that it happens\n-      --  even on a -gnatc (or more importantly -gnatt) compile, so that the\n-      --  semantic tree has Is_Pure set properly ???\n-\n-      if Is_Pure (Spec_Id)\n-        and then Is_Subprogram (Spec_Id)\n-        and then not Has_Pragma_Pure_Function (Spec_Id)\n-      then\n-         declare\n-            F : Entity_Id;\n-\n-         begin\n-            F := First_Formal (Spec_Id);\n-            while Present (F) loop\n-               if Is_Descendent_Of_Address (Etype (F))\n-\n-                 --  Note that this test is being made in the body of the\n-                 --  subprogram, not the spec, so we are testing the full\n-                 --  type for being limited here, as required.\n-\n-                 or else Is_Limited_Type (Etype (F))\n-               then\n-                  Set_Is_Pure (Spec_Id, False);\n-\n-                  if Spec_Id /= Body_Id then\n-                     Set_Is_Pure (Body_Id, False);\n-                  end if;\n-\n-                  exit;\n-               end if;\n-\n-               Next_Formal (F);\n-            end loop;\n-         end;\n-      end if;\n-\n       --  Initialize any scalar OUT args if Initialize/Normalize_Scalars\n \n       if Init_Or_Norm_Scalars and then Is_Subprogram (Spec_Id) then"}, {"sha": "bbd11f97295db6aa7c49a0ab7c60b812b483eb52", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -1261,15 +1261,20 @@ package body Exp_Unst is\n \n                      Push_Scope (STJ.Ent);\n                      Analyze (Decl_ARECnT,  Suppress => All_Checks);\n+\n+                     --  Note that we need to call Set_Suppress_Initialization\n+                     --  after Decl_ARECnT has been analyzed, but before\n+                     --  analyzing Decl_ARECnP so that the flag is properly\n+                     --  taking into account.\n+\n+                     Set_Suppress_Initialization (STJ.ARECnT);\n+\n                      Analyze (Decl_ARECnPT, Suppress => All_Checks);\n                      Analyze (Decl_ARECn,   Suppress => All_Checks);\n                      Analyze (Decl_ARECnP,  Suppress => All_Checks);\n \n-                     Set_Suppress_Initialization\n-                       (Defining_Identifier (Decl_ARECnT));\n-\n                      if Present (Decl_Assign) then\n-                        Analyze (Decl_Assign,  Suppress => All_Checks);\n+                        Analyze (Decl_Assign, Suppress => All_Checks);\n                      end if;\n \n                      Pop_Scope;"}, {"sha": "91ff7a0eaae3182087151e589ff9fcf76c7b82fe", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -36,6 +36,7 @@ with Exp_Disp; use Exp_Disp;\n with Exp_Pakd; use Exp_Pakd;\n with Exp_Util; use Exp_Util;\n with Exp_Tss;  use Exp_Tss;\n+with Fname;    use Fname;\n with Ghost;    use Ghost;\n with Layout;   use Layout;\n with Lib;      use Lib;\n@@ -7610,6 +7611,22 @@ package body Freeze is\n          Set_Is_Pure (E, False);\n       end if;\n \n+      --  We also reset the Pure indication on a subprogram with an Address\n+      --  parameter, because the parameter may be used as a pointer and the\n+      --  referenced data may change even if the address value does not.\n+\n+      --  Note that if the programmer gave an explicit Pure_Function pragma,\n+      --  then we believe the programmer, and leave the subprogram Pure.\n+      --  We also suppress this check on run-time files.\n+\n+      if Is_Pure (E)\n+        and then Is_Subprogram (E)\n+        and then not Has_Pragma_Pure_Function (E)\n+        and then not Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit))\n+      then\n+         Check_Function_With_Address_Parameter (E);\n+      end if;\n+\n       --  For non-foreign convention subprograms, this is where we create\n       --  the extra formals (for accessibility level and constrained bit\n       --  information). We delay this till the freeze point precisely so"}, {"sha": "476802ebb2bab0e36adbeb1811d805fe5c35c710", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -2091,6 +2091,34 @@ package body Sem_Util is\n       end if;\n    end Check_Fully_Declared;\n \n+   -------------------------------------------\n+   -- Check_Function_With_Address_Parameter --\n+   -------------------------------------------\n+\n+   procedure Check_Function_With_Address_Parameter (Subp_Id : Entity_Id) is\n+      F : Entity_Id;\n+      T : Entity_Id;\n+\n+   begin\n+      F := First_Formal (Subp_Id);\n+      while Present (F) loop\n+         T := Etype (F);\n+\n+         if Is_Private_Type (T) and then Present (Full_View (T)) then\n+            T := Full_View (T);\n+         end if;\n+\n+         if Is_Descendent_Of_Address (T)\n+           or else Is_Limited_Type (T)\n+         then\n+            Set_Is_Pure (Subp_Id, False);\n+            exit;\n+         end if;\n+\n+         Next_Formal (F);\n+      end loop;\n+   end Check_Function_With_Address_Parameter;\n+\n    -------------------------------------\n    -- Check_Function_Writable_Actuals --\n    -------------------------------------"}, {"sha": "d05c42b9bcaa68a847ccc03aa503a8f1127024d7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e7b5582418912fbd80b0421f8aee92642ad7c2/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=90e7b5582418912fbd80b0421f8aee92642ad7c2", "patch": "@@ -322,6 +322,14 @@ package Sem_Util is\n    --  N is one of the statement forms that is a potentially blocking\n    --  operation. If it appears within a protected action, emit warning.\n \n+   procedure Check_Function_With_Address_Parameter (Subp_Id : Entity_Id);\n+   --  A subprogram that has an Address parameter and is declared in a Pure\n+   --  package is not considered Pure, because the parameter may be used as a\n+   --  pointer and the referenced data may change even if the address value\n+   --  itself does not.\n+   --  If the programmer gave an explicit Pure_Function pragma, then we respect\n+   --  the pragma and leave the subprogram Pure.\n+\n    procedure Check_Result_And_Post_State (Subp_Id : Entity_Id);\n    --  Determine whether the contract of subprogram Subp_Id mentions attribute\n    --  'Result and it contains an expression that evaluates differently in pre-"}]}