{"sha": "1cb65b1207c73ab169f920e922d619b749bc9952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiNjViMTIwN2M3M2FiMTY5ZjkyMGU5MjJkNjE5Yjc0OWJjOTk1Mg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-02-29T20:45:31Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-02-29T20:46:15Z"}, "message": "coroutines: Add a test for non-trivial await_resume return type.\n\nImprove test coverage.\n\ngcc/testsuite/ChangeLog:\n\n2020-02-29  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* g++.dg/coroutines/coro1-ret-int-yield-int.h: Add templated\n\tawaitable.\n\t* g++.dg/coroutines/torture/co-await-15-return-non-triv.C: New test.", "tree": {"sha": "493c91d2f1ed29b2bba58413a88c630b269c02fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/493c91d2f1ed29b2bba58413a88c630b269c02fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb65b1207c73ab169f920e922d619b749bc9952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb65b1207c73ab169f920e922d619b749bc9952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb65b1207c73ab169f920e922d619b749bc9952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb65b1207c73ab169f920e922d619b749bc9952/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dbc54958321d296ca4e283f26f279f6a5342a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dbc54958321d296ca4e283f26f279f6a5342a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7dbc54958321d296ca4e283f26f279f6a5342a7"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "e38f2c80e1e10929c7e3435361fcedbf45786534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cb65b1207c73ab169f920e922d619b749bc9952", "patch": "@@ -1,3 +1,9 @@\n+2020-02-29 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/coro1-ret-int-yield-int.h: Add templated\n+\tawaitable.\n+\t* g++.dg/coroutines/torture/co-await-15-return-non-triv.C: New test.\n+\n 2020-02-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR ada/91100"}, {"sha": "67ac197fee449b33718fade6133bb4d036dcd1e3", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-ret-int-yield-int.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h?ref=1cb65b1207c73ab169f920e922d619b749bc9952", "patch": "@@ -78,6 +78,16 @@ struct coro1 {\n     int& await_resume() const noexcept { PRINT (\"susp-always-resume-intprt\"); return x;}\n   };\n \n+  template <typename _AwaitType>\n+  struct suspend_always_tmpl_awaiter {\n+    _AwaitType x;\n+    suspend_always_tmpl_awaiter(_AwaitType __x) : x(__x) {}\n+    ~suspend_always_tmpl_awaiter() {}\n+    bool await_ready() const noexcept { return false; }\n+    void await_suspend(coro::coroutine_handle<>) const noexcept { PRINT (\"suspend_always_tmpl_awaiter\");}\n+    _AwaitType await_resume() const noexcept { PRINT (\"suspend_always_tmpl_awaiter\"); return x;}\n+  };\n+\n   struct promise_type {\n \n   promise_type() : vv(-1) {  PRINT (\"Created Promise\"); }"}, {"sha": "70c974bc56a6cd413180927b93d86615e0a880d6", "filename": "gcc/testsuite/g++.dg/coroutines/torture/co-await-15-return-non-triv.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-return-non-triv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb65b1207c73ab169f920e922d619b749bc9952/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-return-non-triv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-15-return-non-triv.C?ref=1cb65b1207c73ab169f920e922d619b749bc9952", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-do run }\n+\n+/* Check that we handle await_resume for a non-trivial type.  */\n+\n+#include \"../coro.h\"\n+\n+// boiler-plate for tests of codegen\n+#include \"../coro1-ret-int-yield-int.h\"\n+\n+coro1\n+f ()\n+{\n+  struct test {\n+    int a;\n+    ~test () {}\n+  };\n+  test input{5};\n+  test res = co_await coro1::suspend_always_tmpl_awaiter<test>(input);\n+  co_return res.a + 10;\n+}\n+\n+int main ()\n+{\n+  PRINT (\"main: create coro1\");\n+  struct coro1 f_coro = f ();\n+\n+  if (f_coro.handle.done())\n+    {\n+      PRINT (\"main: we should not be 'done' [1]\");\n+      abort ();\n+    }\n+  PRINT (\"main: resuming [1] initial suspend\");\n+  f_coro.handle.resume();\n+  PRINT (\"main: resuming [2] co_await suspend_always_tmpl_awaiter\");\n+  f_coro.handle.resume();\n+\n+  /* we should now have returned with the co_return (15) */\n+  if (!f_coro.handle.done())\n+    {\n+      PRINT (\"main: we should be 'done' \");\n+      abort ();\n+    }\n+  int y = f_coro.handle.promise().get_value();\n+  if (y != 15)\n+    {\n+      PRINTF (\"main: y is wrong : %d, should be 15\\n\", y);\n+      abort ();\n+    }\n+  PRINT (\"main: done\");\n+  return 0;\n+}"}]}