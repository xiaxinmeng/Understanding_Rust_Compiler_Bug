{"sha": "2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZGI2NDVmMmFlZjQ4ZDdjYmI3MGJmNWRkYjhiZjBhNDM0MjAxOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-01-19T06:43:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-19T06:43:54Z"}, "message": "re PR tree-optimization/69320 (wrong code generation at -O2 and higher)\n\n2016-01-18  Jeff Law  <law@redhat.com>\n\n\tPR tree-optimization/69320\n\t* tree-ssa-dom.c (record_edge_info): For comparisons against a boolean\n\tranged object, do nothing if the RHS constant is not [0..1].\n\t(optimize_stmt): Comparing a boolean ranged object against a\n\tconstant outside [0..1] results in a compile-time constant.\n\n\t* tree-ssanames.c (ssa_name_has_boolean_range): Remove unnecessary\n\ttest.\n\n\tPR tree-optimization/69320\n\t* gcc.c-torture/pr69320-1.c: New test.\n\t* gcc.c-torture/pr69320-2.c: New test.\n\t* gcc.c-torture/pr69320-3.c: New test.\n\t* gcc.c-torture/pr69320-4.c: New test.\n\nFrom-SVN: r232548", "tree": {"sha": "01f06939e38904f487d71de67d847c5e7cc30273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f06939e38904f487d71de67d847c5e7cc30273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/comments", "author": null, "committer": null, "parents": [{"sha": "17c15cb932563bb814865c39abc2b952c7707f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c15cb932563bb814865c39abc2b952c7707f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c15cb932563bb814865c39abc2b952c7707f79"}], "stats": {"total": 150, "additions": 144, "deletions": 6}, "files": [{"sha": "b39f864c3238a2964f759577a03b6e25856a9d5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -1,3 +1,14 @@\n+2016-01-18  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69320\n+\t* tree-ssa-dom.c (record_edge_info): For comparisons against a boolean\n+\tranged object, do nothing if the RHS constant is not [0..1].\n+\t(optimize_stmt): Comparing a boolean ranged object against a\n+\tconstant outside [0..1] results in a compile-time constant.\n+\n+\t* tree-ssanames.c (ssa_name_has_boolean_range): Remove unnecessary\n+\ttest.\n+\n 2016-01-18  Sandra Loosemore <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Invoking GCC): Add new section to menu."}, {"sha": "fc476b96b8062f283585bb5af00e50133481f44c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -1,3 +1,11 @@\n+2016-01-15  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/69320\n+\t* gcc.c-torture/pr69320-1.c: New test.\n+\t* gcc.c-torture/pr69320-2.c: New test.\n+\t* gcc.c-torture/pr69320-3.c: New test.\n+\t* gcc.c-torture/pr69320-4.c: New test.\n+\n 2016-01-18  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/11858"}, {"sha": "0aba2fc4b19d7b659f4cc7ea56245d27fc588c83", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69320-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-1.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -0,0 +1,20 @@\n+#include <stdlib.h>\n+int a, b, d, f;\n+char c;\n+static int *e = &d;\n+int main() {\n+  int g = -1L;\n+  *e = g;\n+  c = 4;\n+  for (; c >= 14; c++)\n+    *e = 1;\n+  f = a == 0;\n+  *e ^= f;\n+  int h = ~d;\n+  if (d)\n+    b = h;\n+  if (h)\n+    exit (0);\n+  abort ();\n+}\n+"}, {"sha": "b85672ce5289e29b41ee383d5fd5c002cf4bc46a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69320-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-2.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -0,0 +1,35 @@\n+\n+#include <stdlib.h>\n+\n+int a, *c, d, e, g, f;\n+short b;\n+\n+int \n+fn1 ()\n+{\n+  int h = d != 10;\n+  if (h > g)\n+     asm volatile (\"\" : : : \"memory\");\n+  if (h == 10)\n+    {\n+      int *i = 0;\n+      a = 0;\n+      for (; a < 7; a++)\n+\tfor (; *i;)\n+\t  ;\n+    }\n+  else\n+    {\n+      b = e / h;\n+      return f;\n+    }\n+  c = &h;\n+  abort ();\n+}\n+\n+int\n+main ()\n+{\n+  fn1 ();\n+  exit (0);\n+}"}, {"sha": "213c93f4d08c73668a54c73585e3374a74328399", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69320-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-3.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -0,0 +1,17 @@\n+#include <stdlib.h>\n+\n+static int a[40] = {7, 5, 3, 3, 0, 0, 3};\n+short b;\n+int c = 5;\n+int main() {\n+  b = 0;\n+  for (; b <= 3; b++)\n+    if (a[b + 6] ^ (0 || c))\n+      ;\n+    else\n+      break;\n+  if (b != 4)\n+    abort ();\n+  exit (0);\n+}\n+"}, {"sha": "356cd0f852898761c0cf788d6db02cd45473e251", "filename": "gcc/testsuite/gcc.c-torture/execute/pr69320-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr69320-4.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -0,0 +1,18 @@\n+#include <stdlib.h>\n+\n+int a;\n+char b, d;\n+short c;\n+short fn1(int p1, int p2) { return p2 >= 2 ? p1 : p1 > p2; }\n+\n+int main() {\n+  int *e = &a, *f = &a;\n+  b = 1;\n+  for (; b <= 9; b++) {\n+    c = *e != 5 || d;\n+    *f = fn1(c || b, a);\n+  }\n+  if ((long long) a != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "3eeaa9cdcf9d7ccce09be13c18befaffd269853f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -387,11 +387,16 @@ record_edge_info (basic_block bb)\n \n           /* Special case comparing booleans against a constant as we\n              know the value of OP0 on both arms of the branch.  i.e., we\n-             can record an equivalence for OP0 rather than COND.  */\n-          if ((code == EQ_EXPR || code == NE_EXPR)\n-              && TREE_CODE (op0) == SSA_NAME\n+             can record an equivalence for OP0 rather than COND. \n+\n+\t     However, don't do this if the constant isn't zero or one.\n+\t     Such conditionals will get optimized more thoroughly during\n+\t     the domwalk.  */\n+\t  if ((code == EQ_EXPR || code == NE_EXPR)\n+\t      && TREE_CODE (op0) == SSA_NAME\n \t      && ssa_name_has_boolean_range (op0)\n-              && is_gimple_min_invariant (op1))\n+\t      && is_gimple_min_invariant (op1)\n+\t      && (integer_zerop (op1) || integer_onep (op1)))\n             {\n \t      tree true_val = constant_boolean_node (true, TREE_TYPE (op0));\n \t      tree false_val = constant_boolean_node (false, TREE_TYPE (op0));\n@@ -1828,6 +1833,31 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si,\n \t    }\n \t}\n \n+      if (gimple_code (stmt) == GIMPLE_COND)\n+\t{\n+\t  tree lhs = gimple_cond_lhs (stmt);\n+\t  tree rhs = gimple_cond_rhs (stmt);\n+\n+\t  /* If the LHS has a range [0..1] and the RHS has a range ~[0..1],\n+\t     then this conditional is computable at compile time.  We can just\n+\t     shove either 0 or 1 into the LHS, mark the statement as modified\n+\t     and all the right things will just happen below.\n+\n+\t     Note this would apply to any case where LHS has a range\n+\t     narrower than its type implies and RHS is outside that\n+\t     narrower range.  Future work.  */\n+\t  if (TREE_CODE (lhs) == SSA_NAME\n+\t      && ssa_name_has_boolean_range (lhs)\n+\t      && TREE_CODE (rhs) == INTEGER_CST\n+\t      && ! (integer_zerop (rhs) || integer_onep (rhs)))\n+\t    {\n+\t      gimple_cond_set_lhs (as_a <gcond *> (stmt),\n+\t\t\t\t   fold_convert (TREE_TYPE (lhs),\n+\t\t\t\t\t\t integer_zero_node));\n+\t      gimple_set_modified (stmt, true);\n+\t    }\n+\t}\n+\n       update_stmt_if_modified (stmt);\n       eliminate_redundant_computations (&si, const_and_copies,\n \t\t\t\t\tavail_exprs_stack);"}, {"sha": "ed87f3ee7d429b53323ffcd1a4492638944a84e1", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=2bedb645f2aef48d7cbb70bf5ddb8bf0a4342019", "patch": "@@ -437,8 +437,7 @@ ssa_name_has_boolean_range (tree op)\n      only takes on values [0..1] as determined by VRP\n      analysis.  */\n   if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n-      && (TYPE_PRECISION (TREE_TYPE (op)) > 1\n-\t  || TYPE_UNSIGNED (TREE_TYPE (op)))\n+      && (TYPE_PRECISION (TREE_TYPE (op)) > 1)\n       && wi::eq_p (get_nonzero_bits (op), 1))\n     return true;\n "}]}