{"sha": "e8d0820644097f0fc200364f799ff1c2766bd1ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkMDgyMDY0NDA5N2YwZmMyMDAzNjRmNzk5ZmYxYzI3NjZiZDFhYw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-11T13:55:10Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-11T13:55:10Z"}, "message": "sse.md (VI248_AVX2_8_AVX512F): New.\n\n        * config/i386/sse.md (VI248_AVX2_8_AVX512F): New.\n        (VI124_256): Changed to ...\n        (VI124_256_48_512): This.\n        (ssepackmode): Extended with wider modes.\n        (<code><mode>3): Changed iterator.\n        (*avx2_<code><mode>3): Ditto.\n        (vec_pack_trunc_<mode>): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203437", "tree": {"sha": "3c12d522668603d76505f5bad096ddcc640db886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c12d522668603d76505f5bad096ddcc640db886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d0820644097f0fc200364f799ff1c2766bd1ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d0820644097f0fc200364f799ff1c2766bd1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d0820644097f0fc200364f799ff1c2766bd1ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d0820644097f0fc200364f799ff1c2766bd1ac/comments", "author": null, "committer": null, "parents": [{"sha": "16821545992c27617e3e62b3788468d7ffba78a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16821545992c27617e3e62b3788468d7ffba78a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16821545992c27617e3e62b3788468d7ffba78a0"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "7a694c064fc00b55a3da492893d2a191b8031a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d0820644097f0fc200364f799ff1c2766bd1ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d0820644097f0fc200364f799ff1c2766bd1ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8d0820644097f0fc200364f799ff1c2766bd1ac", "patch": "@@ -1,3 +1,21 @@\n+2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (VI248_AVX2_8_AVX512F): New.\n+\t(VI124_256): Changed to ...\n+\t(VI124_256_48_512): This.\n+\t(ssepackmode): Extended with wider modes.\n+\t(<code><mode>3): Changed iterator.\n+\t(*avx2_<code><mode>3): Ditto.\n+\t(vec_pack_trunc_<mode>): Ditto.\n+\n 2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "a3806906cc6329ba1eae493c1419717ee188d2c7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d0820644097f0fc200364f799ff1c2766bd1ac/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d0820644097f0fc200364f799ff1c2766bd1ac/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e8d0820644097f0fc200364f799ff1c2766bd1ac", "patch": "@@ -257,6 +257,11 @@\n    (V8SI \"TARGET_AVX2\") V4SI\n    (V4DI \"TARGET_AVX2\") V2DI])\n \n+(define_mode_iterator VI248_AVX2_8_AVX512F\n+  [(V16HI \"TARGET_AVX2\") V8HI\n+   (V8SI \"TARGET_AVX2\") V4SI\n+   (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n+\n (define_mode_iterator VI48_AVX2_48_AVX512F\n   [(V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n@@ -341,8 +346,9 @@\n (define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n (define_mode_iterator VI48_128 [V4SI V2DI])\n \n-;; Random 256bit vector integer mode combinations\n-(define_mode_iterator VI124_256 [V32QI V16HI V8SI])\n+;; Various 256bit and 512 vector integer mode combinations\n+(define_mode_iterator VI124_256_48_512\n+  [V32QI V16HI V8SI (V8DI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")])\n (define_mode_iterator VI48_256 [V8SI V4DI])\n \n ;; Int-float size matches\n@@ -503,7 +509,8 @@\n \n (define_mode_attr ssepackmode\n   [(V8HI \"V16QI\") (V4SI \"V8HI\") (V2DI \"V4SI\")\n-   (V16HI \"V32QI\") (V8SI \"V16HI\") (V4DI \"V8SI\")])\n+   (V16HI \"V32QI\") (V8SI \"V16HI\") (V4DI \"V8SI\")\n+   (V32HI \"V64QI\") (V16SI \"V32HI\") (V8DI \"V16SI\")])\n \n ;; Mapping of the max integer size for xop rotate immediate constraint\n (define_mode_attr sserotatemax\n@@ -6114,23 +6121,23 @@\n \n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\")\n-\t(maxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\")))]\n+  [(set (match_operand:VI124_256_48_512 0 \"register_operand\")\n+\t(maxmin:VI124_256_48_512\n+\t  (match_operand:VI124_256_48_512 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI124_256_48_512 2 \"nonimmediate_operand\")))]\n   \"TARGET_AVX2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*avx2_<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"=v\")\n-\t(maxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%v\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"vm\")))]\n+  [(set (match_operand:VI124_256_48_512 0 \"register_operand\" \"=v\")\n+\t(maxmin:VI124_256_48_512\n+\t  (match_operand:VI124_256_48_512 1 \"nonimmediate_operand\" \"%v\")\n+\t  (match_operand:VI124_256_48_512 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_expand \"<code><mode>3\"\n@@ -6777,8 +6784,8 @@\n \n (define_expand \"vec_pack_trunc_<mode>\"\n   [(match_operand:<ssepackmode> 0 \"register_operand\")\n-   (match_operand:VI248_AVX2 1 \"register_operand\")\n-   (match_operand:VI248_AVX2 2 \"register_operand\")]\n+   (match_operand:VI248_AVX2_8_AVX512F 1 \"register_operand\")\n+   (match_operand:VI248_AVX2_8_AVX512F 2 \"register_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx op1 = gen_lowpart (<ssepackmode>mode, operands[1]);"}]}