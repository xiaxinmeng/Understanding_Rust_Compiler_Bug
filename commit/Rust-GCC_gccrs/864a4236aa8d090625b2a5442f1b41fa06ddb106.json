{"sha": "864a4236aa8d090625b2a5442f1b41fa06ddb106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0YTQyMzZhYThkMDkwNjI1YjJhNTQ0MmYxYjQxZmEwNmRkYjEwNg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-29T08:56:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:56:40Z"}, "message": "atree.ads, atree.adb (Copy_Separate_List): New function that applies Copy_Separate_Tree to a list of nodes.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* atree.ads, atree.adb (Copy_Separate_List): New function that applies\n\tCopy_Separate_Tree to a list of nodes. Used to create disjoint copies\n\tof statement lists that may contain local declarations.\n\t(Expand_N_Timed_Entry_Call): Use Copy_Separate_List to duplicate the\n\ttriggering statements needed for the expansion of this construct, when\n\tthe trigger is a dispatching call to a synchronized primitive.\n\nFrom-SVN: r178169", "tree": {"sha": "053d7f2627ce5d5732ccbfc23c0ee805a8600855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053d7f2627ce5d5732ccbfc23c0ee805a8600855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/864a4236aa8d090625b2a5442f1b41fa06ddb106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864a4236aa8d090625b2a5442f1b41fa06ddb106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864a4236aa8d090625b2a5442f1b41fa06ddb106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864a4236aa8d090625b2a5442f1b41fa06ddb106/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f394c1d9bbd3a480f4abfbc0aca8a4e755211a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f394c1d9bbd3a480f4abfbc0aca8a4e755211a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f394c1d9bbd3a480f4abfbc0aca8a4e755211a8"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "4450cbaccf80d368488416501b95475dc26eb4c8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=864a4236aa8d090625b2a5442f1b41fa06ddb106", "patch": "@@ -1,3 +1,12 @@\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* atree.ads, atree.adb (Copy_Separate_List): New function that applies\n+\tCopy_Separate_Tree to a list of nodes. Used to create disjoint copies\n+\tof statement lists that may contain local declarations.\n+\t(Expand_N_Timed_Entry_Call): Use Copy_Separate_List to duplicate the\n+\ttriggering statements needed for the expansion of this construct, when\n+\tthe trigger is a dispatching call to a synchronized primitive.\n+\n 2011-08-29  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_rm.texi: Add doc for 'Elab_Subp_Body."}, {"sha": "17c6814fb90917fc9018e3a0902c698edbf97657", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=864a4236aa8d090625b2a5442f1b41fa06ddb106", "patch": "@@ -645,6 +645,24 @@ package body Atree is\n       end if;\n    end Copy_Node;\n \n+   ------------------------\n+   -- Copy_Separate_List --\n+   ------------------------\n+\n+   function Copy_Separate_List (Source : List_Id) return List_Id is\n+      Result : constant List_Id := New_List;\n+      Nod    : Node_Id;\n+\n+   begin\n+      Nod := First (Source);\n+      while Present (Nod) loop\n+         Append (Copy_Separate_Tree (Nod), Result);\n+         Next (Nod);\n+      end loop;\n+\n+      return Result;\n+   end Copy_Separate_List;\n+\n    ------------------------\n    -- Copy_Separate_Tree --\n    ------------------------\n@@ -766,8 +784,8 @@ package body Atree is\n          Set_Field4 (New_Id, Possible_Copy (Field4 (New_Id)));\n          Set_Field5 (New_Id, Possible_Copy (Field5 (New_Id)));\n \n-         --  Set Entity field to Empty\n-         --  Why is this done??? and why is it always right to do it???\n+         --  Set Entity field to Empty to ensure that no entity references\n+         --  are shared between the two, if the source is already analyzed.\n \n          if Nkind (New_Id) in N_Has_Entity\n            or else Nkind (New_Id) = N_Freeze_Entity"}, {"sha": "e75a95f5cf64447fd979f24a6b1df6ad2a79d746", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=864a4236aa8d090625b2a5442f1b41fa06ddb106", "patch": "@@ -429,16 +429,20 @@ package Atree is\n    --  Source to be Empty, in which case Relocate_Node simply returns\n    --  Empty as the result.\n \n+   function Copy_Separate_List (Source : List_Id) return List_Id;\n+   --  Apply the following to a list of nodes\n+\n    function Copy_Separate_Tree (Source : Node_Id) return Node_Id;\n    --  Given a node that is the root of a subtree, Copy_Separate_Tree copies\n    --  the entire syntactic subtree, including recursively any descendants\n    --  whose parent field references a copied node (descendants not linked to\n    --  a copied node by the parent field are also copied.) The parent pointers\n    --  in the copy are properly set. Copy_Separate_Tree (Empty/Error) returns\n-   --  Empty/Error. The semantic fields are not copied and the new subtree\n-   --  does not share any entity with source subtree.\n-   --  But the code *does* copy semantic fields, and the description above\n-   --  is in any case unclear on this point ??? (RBKD)\n+   --  Empty/Error. The new subtree does not share entities with the source,\n+   --  but has new entities with the same name. Most of the time this routine\n+   --  is called on an unanalyzed tree, and no semantic information is copied.\n+   --  However, to ensure that no entities are shared between the two when the\n+   --  source is already analyzed, entity fields in the copy are zeroed out.\n \n    procedure Exchange_Entities (E1 : Entity_Id; E2 : Entity_Id);\n    --  Exchange the contents of two entities. The parent pointers are switched\n@@ -449,16 +453,15 @@ package Atree is\n    --  two entities may be list members.\n \n    function Extend_Node (Node : Node_Id) return Entity_Id;\n-   --  This function returns a copy of its input node with an extension\n-   --  added. The fields of the extension are set to Empty. Due to the way\n-   --  extensions are handled (as four consecutive array elements), it may\n-   --  be necessary to reallocate the node, so that the returned value is\n-   --  not the same as the input value, but where possible the returned\n-   --  value will be the same as the input value (i.e. the extension will\n-   --  occur in place). It is the caller's responsibility to ensure that\n-   --  any pointers to the original node are appropriately updated. This\n-   --  function is used only by Sinfo.CN to change nodes into their\n-   --  corresponding entities.\n+   --  This function returns a copy of its input node with an extension added.\n+   --  The fields of the extension are set to Empty. Due to the way extensions\n+   --  are handled (as four consecutive array elements), it may be necessary\n+   --  to reallocate the node, so that the returned value is not the same as\n+   --  the input value, but where possible the returned value will be the same\n+   --  as the input value (i.e. the extension will occur in place). It is the\n+   --  caller's responsibility to ensure that any pointers to the original node\n+   --  are appropriately updated. This function is used only by Sinfo.CN to\n+   --  change nodes into their corresponding entities.\n \n    type Report_Proc is access procedure (Target : Node_Id; Source : Node_Id);\n \n@@ -475,7 +478,7 @@ package Atree is\n    --  the results of Process calls. See below for details.\n \n    generic\n-     with function Process (N : Node_Id) return Traverse_Result is <>;\n+      with function Process (N : Node_Id) return Traverse_Result is <>;\n    function Traverse_Func (Node : Node_Id) return Traverse_Final_Result;\n    --  This is a generic function that, given the parent node for a subtree,\n    --  traverses all syntactic nodes of this tree, calling the given function\n@@ -501,7 +504,7 @@ package Atree is\n    --  all calls to process returned either OK, OK_Orig, or Skip).\n \n    generic\n-     with function Process (N : Node_Id) return Traverse_Result is <>;\n+      with function Process (N : Node_Id) return Traverse_Result is <>;\n    procedure Traverse_Proc (Node : Node_Id);\n    pragma Inline (Traverse_Proc);\n    --  This is the same as Traverse_Func except that no result is returned,"}, {"sha": "b0860bc0b96f25c5aeca974947ba98b156f509d3", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864a4236aa8d090625b2a5442f1b41fa06ddb106/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=864a4236aa8d090625b2a5442f1b41fa06ddb106", "patch": "@@ -10990,6 +10990,11 @@ package body Exp_Ch9 is\n    --          end if;\n    --       end if;\n    --    end;\n+   --\n+   --  The triggering statement and the timed statements have not been\n+   --  analyzed yet (see Analyzed_Timed_Entry_Call).  They may contain local\n+   --  declarations, and therefore the copies that are made during expansion\n+   --  must be disjoint, as for any other inlining.\n \n    procedure Expand_N_Timed_Entry_Call (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n@@ -11284,7 +11289,7 @@ package body Exp_Ch9 is\n          --       <timed-statements>\n          --    end if;\n \n-         N_Stats := New_Copy_List_Tree (E_Stats);\n+         N_Stats := Copy_Separate_List (E_Stats);\n \n          Prepend_To (N_Stats,\n            Make_If_Statement (Loc,\n@@ -11327,7 +11332,7 @@ package body Exp_Ch9 is\n          --    <dispatching-call>;\n          --    <triggering-statements>\n \n-         Lim_Typ_Stmts := New_Copy_List_Tree (E_Stats);\n+         Lim_Typ_Stmts := Copy_Separate_List (E_Stats);\n          Prepend_To (Lim_Typ_Stmts, New_Copy_Tree (E_Call));\n \n          --  Generate:"}]}