{"sha": "cb97d97deebd67dc9988b51210f1432ecb924145", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5N2Q5N2RlZWJkNjdkYzk5ODhiNTEyMTBmMTQzMmVjYjkyNDE0NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-12-08T12:01:59Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-12-08T12:01:59Z"}, "message": "c-lex.c (c_lex): Peek a token ahead for a string to concatenate...\n\n\t* c-lex.c (c_lex): Peek a token ahead for a string to concatenate,\n\tusing combine_strings to do the concatenation.\n\t* c-parse.in: Replace uses of the string non-terminal with STRING.\n\tDon't attempt string concatenation.\n\t(OBJC_STRING): New terminal.\n\t(string): Remove non-terminal.\n\t(_yylex): Call combine_strings on function names.  Generate\n\tOBJC_STRING terminals; don't pass '@' on to yacc.\n\t* c-typeck.c (simple_asm_stmt): Don't concatenate strings here.\n\t(build_asm_stmt): Similarly.\ncp:\n\t* parse.y: Replace uses of the string non-terminal with STRING.\n\tDon't perform string concatentaion here.\n\t(string): Remove non-terminal.\n\t* semantics.c (finish_asm_stmt): Don't concatenate strings here.\n\nFrom-SVN: r47792", "tree": {"sha": "af1bbb1acd95fad4ba7823197532eaeafdd00ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af1bbb1acd95fad4ba7823197532eaeafdd00ff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb97d97deebd67dc9988b51210f1432ecb924145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb97d97deebd67dc9988b51210f1432ecb924145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb97d97deebd67dc9988b51210f1432ecb924145", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb97d97deebd67dc9988b51210f1432ecb924145/comments", "author": null, "committer": null, "parents": [{"sha": "18d6067bcd57dcc02099060cf91717faaca0b05b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d6067bcd57dcc02099060cf91717faaca0b05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d6067bcd57dcc02099060cf91717faaca0b05b"}], "stats": {"total": 213, "additions": 114, "deletions": 99}, "files": [{"sha": "6d7d6b62016f176d84cbf06073f0d2eff74d6a1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -1,3 +1,16 @@\n+2001-12-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-lex.c (c_lex): Peek a token ahead for a string to concatenate,\n+\tusing combine_strings to do the concatenation.\n+\t* c-parse.in: Replace uses of the string non-terminal with STRING.\n+\tDon't attempt string concatenation.\n+\t(OBJC_STRING): New terminal.\n+\t(string): Remove non-terminal.\n+\t(_yylex): Call combine_strings on function names.  Generate\n+\tOBJC_STRING terminals; don't pass '@' on to yacc.\n+\t* c-typeck.c (simple_asm_stmt): Don't concatenate strings here.\n+\t(build_asm_stmt): Similarly.\n+\n 2001-12-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rtlanal.c (get_jump_table_offset): Delete unused variable."}, {"sha": "84d64f16768f13dc905e8e17584a6966591d330e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -762,6 +762,7 @@ c_lex (value)\n      tree *value;\n {\n   const cpp_token *tok;\n+  enum cpp_ttype result;\n \n   retry:\n   timevar_push (TV_CPP);\n@@ -776,7 +777,9 @@ c_lex (value)\n   lineno = src_lineno;\n \n   *value = NULL_TREE;\n-  switch (tok->type)\n+  result = tok->type;\n+\n+  switch (result)\n     {\n     case CPP_OPEN_BRACE:  indent_level++;  break;\n     case CPP_CLOSE_BRACE: indent_level--;  break;\n@@ -804,8 +807,48 @@ c_lex (value)\n \n     case CPP_STRING:\n     case CPP_WSTRING:\n-      *value = lex_string ((const char *)tok->val.str.text,\n-\t\t\t   tok->val.str.len, tok->type == CPP_WSTRING);\n+      {\n+\ttree full_str = NULL_TREE;\n+\n+\tdo\n+\t  {\n+\t    /* Translate escape sequences in this string, then append it.  */\n+\t    tree str = lex_string ((const char *) tok->val.str.text,\n+\t\t\t\t   tok->val.str.len,\n+\t\t\t\t   tok->type == CPP_WSTRING);\n+\n+\t    if (full_str && c_language == clk_c && warn_traditional\n+\t\t&& !in_system_header)\n+\t      {\n+\t\tstatic int last_lineno;\n+\t\tstatic const char *last_input_filename;\n+\n+\t\tif (lineno != last_lineno || !last_input_filename\n+\t\t    || strcmp (last_input_filename, input_filename))\n+\t\t  {\n+\t\t    warning (\"traditional C rejects string concatenation\");\n+\t\t    last_lineno = lineno;\n+\t\t    last_input_filename = input_filename;\n+\t\t  }\n+\t      }\n+\n+\t    full_str = chainon (full_str, str);\n+\n+\t    /* Wide and non-wide give a wide result.  */\n+\t    if (tok->type == CPP_WSTRING)\n+\t      result = CPP_WSTRING;\n+\n+\t    /* Look ahead for another string token.  */\n+\t    do\n+\t      tok = cpp_get_token (parse_in);\n+\t    while (tok->type == CPP_PADDING);\n+\t  }\n+\twhile (tok->type == CPP_STRING || tok->type == CPP_WSTRING);\n+\n+\t_cpp_backup_tokens (parse_in, 1);\n+\n+\t*value = combine_strings (full_str);\n+      }\n       break;\n \n       /* These tokens should not be visible outside cpplib.  */\n@@ -817,7 +860,7 @@ c_lex (value)\n     default: break;\n     }\n \n-  return tok->type;\n+  return result;\n }\n \n #define ERROR(msgid) do { error(msgid); goto syntax_error; } while(0)"}, {"sha": "fadef4e23ee48ce06c5045a5b64f70494638aee1", "filename": "gcc/c-parse.in", "status": "modified", "additions": 29, "deletions": 60, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -99,9 +99,8 @@ end ifobjc\n    yylval is the node for the constant.  */\n %token CONSTANT\n \n-/* String constants in raw form.\n-   yylval is a STRING_CST node.  */\n-%token STRING\n+/* String constants as arrays of the appropriate character type.  */\n+%token STRING OBJC_STRING\n \n /* \"...\", used for functions with variable arglists.  */\n %token ELLIPSIS\n@@ -151,7 +150,7 @@ end ifobjc\n %type <ttype> BREAK CONTINUE RETURN GOTO ASM_KEYWORD SIZEOF TYPEOF ALIGNOF\n \n %type <ttype> identifier IDENTIFIER TYPENAME CONSTANT expr nonnull_exprlist exprlist\n-%type <ttype> expr_no_commas cast_expr unary_expr primary string STRING\n+%type <ttype> expr_no_commas cast_expr unary_expr primary STRING\n %type <ttype> declspecs_nosc_nots_nosa_noea declspecs_nosc_nots_nosa_ea\n %type <ttype> declspecs_nosc_nots_sa_noea declspecs_nosc_nots_sa_ea\n %type <ttype> declspecs_nosc_ts_nosa_noea declspecs_nosc_ts_nosa_ea\n@@ -204,6 +203,8 @@ end ifobjc\n %type <lineno> save_lineno\n \f\n ifobjc\n+%token OBJC_STRING\n+\n /* the Objective-C nonterminals */\n \n %type <ttype> ivar_decl_list ivar_decls ivar_decl ivars ivar_declarator\n@@ -214,7 +215,7 @@ ifobjc\n %type <ttype> selectorarg keywordnamelist keywordname objcencodeexpr\n %type <ttype> objc_string non_empty_protocolrefs protocolrefs identifier_list objcprotocolexpr\n \n-%type <ttype> CLASSNAME OBJECTNAME\n+%type <ttype> CLASSNAME OBJECTNAME OBJC_STRING\n end ifobjc\n \f\n %{\n@@ -618,8 +619,8 @@ primary:\n \t\t  $$ = build_external_ref ($1, yychar == '(');\n \t\t}\n \t| CONSTANT\n-\t| string\n-\t\t{ $$ = combine_strings ($1); }\n+\t| STRING\n+\t\t{ $$ = $1; }\n \t| VAR_FUNC_NAME\n \t\t{ $$ = fname_decl (C_RID_CODE ($$), $$); }\n \t| '(' typename ')' '{' \n@@ -709,37 +710,13 @@ ifobjc\n end ifobjc\n \t;\n \n-/* Produces a STRING_CST with perhaps more STRING_CSTs chained onto it.  */\n-string:\n-\t  STRING\n-\t| string STRING\n-\t\t{\n-ifc\n-                  static int last_lineno = 0;\n-                  static const char *last_input_filename = 0;\n-end ifc\n-                  $$ = chainon ($1, $2);\n-ifc\n-\t\t  if (warn_traditional && !in_system_header\n-\t\t      && (lineno != last_lineno || !last_input_filename ||\n-\t\t\t  strcmp (last_input_filename, input_filename)))\n-\t\t    {\n-\t\t      warning (\"traditional C rejects string concatenation\");\n-\t\t      last_lineno = lineno;\n-\t\t      last_input_filename = input_filename;\n-\t\t    }\n-end ifc\n-\t\t}\n-\t;\n-\n ifobjc\n-/* Produces an STRING_CST with perhaps more STRING_CSTs chained\n-   onto it, which is to be read as an ObjC string object.  */\n+/* Chains ObjC string objects together.  */\n objc_string:\n-\t  '@' STRING\n-\t\t{ $$ = $2; }\n-\t| objc_string '@' STRING\n-\t\t{ $$ = chainon ($1, $3); }\n+\t  OBJC_STRING\n+\t\t{ $$ = $1; }\n+\t| objc_string OBJC_STRING\n+\t\t{ $$ = chainon ($1, $2); }\n \t;\n end ifobjc\n \n@@ -1372,10 +1349,8 @@ notype_initdecls:\n maybeasm:\n \t  /* empty */\n \t\t{ $$ = NULL_TREE; }\n-\t| ASM_KEYWORD '(' string ')'\n-\t\t{ if (TREE_CHAIN ($3)) $3 = combine_strings ($3);\n-\t\t  $$ = $3;\n-\t\t}\n+\t| ASM_KEYWORD '(' STRING ')'\n+\t\t{ $$ = $3; }\n \t;\n \n initdcl:\n@@ -2433,10 +2408,10 @@ asm_operand:\n \t;\n \n asm_clobbers:\n-\t  string\n-\t\t{ $$ = tree_cons (NULL_TREE, combine_strings ($1), NULL_TREE); }\n-\t| asm_clobbers ',' string\n-\t\t{ $$ = tree_cons (NULL_TREE, combine_strings ($3), $1); }\n+\t  STRING\n+\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE); }\n+\t| asm_clobbers ',' STRING\n+\t\t{ $$ = tree_cons (NULL_TREE, $3, $1); }\n \t;\n \f\n /* This is what appears inside the parens in a function declarator.\n@@ -3578,7 +3553,8 @@ end ifobjc\n \t       to string constants.  */\n \t    const char *name = fname_string (rid_code);\n \t  \n-\t    yylval.ttype = build_string (strlen (name) + 1, name);\n+\t    yylval.ttype\n+\t      = combine_strings (build_string (strlen (name) + 1, name));\n \t    last_token = CPP_STRING;  /* so yyerror won't choke */\n \t    return STRING;\n \t  }\n@@ -3695,23 +3671,16 @@ _yylex ()\n \t special significance.  */\n     case CPP_ATSIGN:\n ifobjc\n-      {\n-\ttree after_at;\n-\tenum cpp_ttype after_at_type;\n+\tlast_token = c_lex (&yylval.ttype);\n \n-\tafter_at_type = c_lex (&after_at);\n+\tif (last_token == CPP_NAME\n+\t    && C_IS_RESERVED_WORD (yylval.ttype)\n+\t    && OBJC_IS_AT_KEYWORD (C_RID_CODE (yylval.ttype)))\n+\t  return rid_to_yy [(int) C_RID_CODE (yylval.ttype)];\n+\telse if (last_token == CPP_STRING || last_token == CPP_WSTRING)\n+\t  return OBJC_STRING;\n \n-\tif (after_at_type == CPP_NAME\n-\t    && C_IS_RESERVED_WORD (after_at)\n-\t    && OBJC_IS_AT_KEYWORD (C_RID_CODE (after_at)))\n-\t  {\n-\t    yylval.ttype = after_at;\n-\t    last_token = after_at_type;\n-\t    return rid_to_yy [(int) C_RID_CODE (after_at)];\n-\t  }\n-\t_cpp_backup_tokens (parse_in, 1);\n-\treturn '@';\n-      }\n+\t/* Fall through...  */\n end ifobjc\n \n       /* These tokens are C++ specific (and will not be generated"}, {"sha": "df7606ef8b5269345b55b9c2a2510335e0cdb542", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -6832,8 +6832,6 @@ simple_asm_stmt (expr)\n     {\n       tree stmt;\n \n-      if (TREE_CHAIN (expr))\n-\texpr = combine_strings (expr);\n       stmt = add_stmt (build_stmt (ASM_STMT, NULL_TREE, expr,\n \t\t\t\t   NULL_TREE, NULL_TREE,\n \t\t\t\t   NULL_TREE));\n@@ -6858,8 +6856,6 @@ build_asm_stmt (cv_qualifier, string, outputs, inputs, clobbers)\n {\n   tree tail;\n \n-  if (TREE_CHAIN (string))\n-    string = combine_strings (string);\n   if (TREE_CODE (string) != STRING_CST)\n     {\n       error (\"asm template is not a string constant\");"}, {"sha": "8329fb3fc8e9c7fcd64a4356b06d599f321c8313", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -1,3 +1,10 @@\n+2001-12-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* parse.y: Replace uses of the string non-terminal with STRING.\n+\tDon't perform string concatentaion here.\n+\t(string): Remove non-terminal.\n+\t* semantics.c (finish_asm_stmt): Don't concatenate strings here.\n+\n 2001-12-05  Jason Merrill  <jason@redhat.com>\n \n \t* cp-lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING): Define."}, {"sha": "e5bedd3ed1dba8e2642953ec2d68e8dc335c8398", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -259,8 +259,7 @@ cp_parse_init ()\n    yylval contains an IDENTIFIER_NODE which indicates which one.  */\n %token VAR_FUNC_NAME\n \n-/* String constants in raw form.\n-   yylval is a STRING_CST node.  */\n+/* String constants as arrays of a suitable type.  */\n %token STRING\n \n /* \"...\", used for functions with variable arglists.  */\n@@ -329,7 +328,7 @@ cp_parse_init ()\n %type <ttype> PFUNCNAME maybe_identifier\n %type <ttype> paren_expr_or_null nontrivial_exprlist SELFNAME\n %type <ttype> expr_no_commas expr_no_comma_rangle\n-%type <ttype> cast_expr unary_expr primary string STRING\n+%type <ttype> cast_expr unary_expr primary STRING\n %type <ttype> reserved_declspecs boolean.literal\n %type <ttype> reserved_typespecquals\n %type <ttype> SCSPEC TYPESPEC CV_QUALIFIER maybe_cv_qualifier\n@@ -497,9 +496,8 @@ extdef:\n \t\t{ do_pending_inlines (); }\n \t| template_def\n \t\t{ do_pending_inlines (); }\n-\t| asm_keyword '(' string ')' ';'\n-\t\t{ if (TREE_CHAIN ($3)) $3 = combine_strings ($3);\n-\t\t  assemble_asm ($3); }\n+\t| asm_keyword '(' STRING ')' ';'\n+\t\t{ assemble_asm ($3); }\n \t| extern_lang_string '{' extdefs_opt '}'\n \t\t{ pop_lang_context (); }\n \t| extern_lang_string .hush_warning fndef .warning_ok eat_saved_input\n@@ -1547,9 +1545,8 @@ primary:\n \t\t}\t\t\n \t| CONSTANT\n \t| boolean.literal\n-\t| string\n+\t| STRING\n \t\t{\n-\t\t  $$ = combine_strings ($$);\n \t\t  /* combine_strings doesn't set up TYPE_MAIN_VARIANT of\n \t\t     a const array the way we want, so fix it.  */\n \t\t  if (flag_const_strings)\n@@ -1751,13 +1748,6 @@ boolean.literal:\n \t\t{ $$ = boolean_false_node; }\n \t;\n \n-/* Produces a STRING_CST with perhaps more STRING_CSTs chained onto it.  */\n-string:\n-\t  STRING\n-\t| string STRING\n-\t\t{ $$ = chainon ($$, $2); }\n-\t;\n-\n nodecls:\n \t  /* empty */\n \t\t{\n@@ -2041,8 +2031,8 @@ nomods_initdecls:\n maybeasm:\n \t  /* empty */\n \t\t{ $$ = NULL_TREE; }\n-\t| asm_keyword '(' string ')'\n-\t\t{ if (TREE_CHAIN ($3)) $3 = combine_strings ($3); $$ = $3; }\n+\t| asm_keyword '(' STRING ')'\n+\t\t{ $$ = $3; }\n \t;\n \n initdcl:\n@@ -3439,27 +3429,27 @@ simple_stmt:\n                 { $$ = finish_return_stmt (NULL_TREE); }\n \t| RETURN_KEYWORD expr ';'\n                 { $$ = finish_return_stmt ($2); }\n-\t| asm_keyword maybe_cv_qualifier '(' string ')' ';'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, NULL_TREE, NULL_TREE,\n \t\t\t\t\tNULL_TREE);\n \t\t  ASM_INPUT_P ($$) = 1; }\n \t/* This is the case with just output operands.  */\n-\t| asm_keyword maybe_cv_qualifier '(' string ':' asm_operands ')' ';'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING ':' asm_operands ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, $6, NULL_TREE, NULL_TREE); }\n \t/* This is the case with input operands as well.  */\n-\t| asm_keyword maybe_cv_qualifier '(' string ':' asm_operands ':'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING ':' asm_operands ':'\n \t  asm_operands ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, $6, $8, NULL_TREE); }\n-\t| asm_keyword maybe_cv_qualifier '(' string SCOPE asm_operands ')' ';'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING SCOPE asm_operands ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, NULL_TREE, $6, NULL_TREE); }\n \t/* This is the case with clobbered registers as well.  */\n-\t| asm_keyword maybe_cv_qualifier '(' string ':' asm_operands ':'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING ':' asm_operands ':'\n \t  asm_operands ':' asm_clobbers ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, $6, $8, $10); }\n-\t| asm_keyword maybe_cv_qualifier '(' string SCOPE asm_operands ':'\n+\t| asm_keyword maybe_cv_qualifier '(' STRING SCOPE asm_operands ':'\n \t  asm_clobbers ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, NULL_TREE, $6, $8); }\n-\t| asm_keyword maybe_cv_qualifier '(' string ':' asm_operands SCOPE\n+\t| asm_keyword maybe_cv_qualifier '(' STRING ':' asm_operands SCOPE\n \t  asm_clobbers ')' ';'\n \t\t{ $$ = finish_asm_stmt ($2, $4, $6, NULL_TREE, $8); }\n \t| GOTO '*' expr ';'\n@@ -3614,10 +3604,10 @@ asm_operand:\n \t;\n \n asm_clobbers:\n-\t  string\n-\t\t{ $$ = tree_cons (NULL_TREE, combine_strings ($1), NULL_TREE);}\n-\t| asm_clobbers ',' string\n-\t\t{ $$ = tree_cons (NULL_TREE, combine_strings ($3), $1); }\n+\t  STRING\n+\t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE);}\n+\t| asm_clobbers ',' STRING\n+\t\t{ $$ = tree_cons (NULL_TREE, $3, $1); }\n \t;\n \n /* This is what appears inside the parens in a function declarator."}, {"sha": "75cfa6965b1b7c1aee2342c219400284717bd0d7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb97d97deebd67dc9988b51210f1432ecb924145/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cb97d97deebd67dc9988b51210f1432ecb924145", "patch": "@@ -883,9 +883,6 @@ finish_asm_stmt (cv_qualifier, string, output_operands,\n   tree r;\n   tree t;\n \n-  if (TREE_CHAIN (string))\n-    string = combine_strings (string);\n-\n   if (cv_qualifier != NULL_TREE\n       && cv_qualifier != ridpointers[(int) RID_VOLATILE])\n     {"}]}