{"sha": "9649031577028310e853025672c71dfb500494f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0OTAzMTU3NzAyODMxMGU4NTMwMjU2NzJjNzFkZmI1MDA0OTRmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-04T08:37:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-04T09:02:01Z"}, "message": "openmp: allocate clause vs. *reduction array sections [PR97670]\n\nThis patch finds the base expression of reduction array sections and uses it\nin checks whether allocate clause lists only variables that have been privatized.\nAlso fixes a pasto that caused an ICE.\n\n2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/97670\ngcc/c-family/\n\t* c-omp.c (c_omp_split_clauses): Look through array reductions to find\n\tunderlying decl to clear in the allocate_head bitmap.\ngcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): Look through array reductions to\n\tfind underlying decl to clear in the aligned_head bitmap.\ngcc/cp/\n\t* semantics.c (finish_omp_clauses): Look through array reductions to\n\tfind underlying decl to clear in the aligned_head bitmap.  Use\n\tDECL_UID (t) instead of DECL_UID (OMP_CLAUSE_DECL (c)) when clearing\n\tin the bitmap.  Only diagnose errors about allocate vars not being\n\tprivatized on the same construct on allocate clause if it has\n\ta DECL_P OMP_CLAUSE_DECL.\ngcc/testsuite/\n\t* c-c++-common/gomp/allocate-4.c: New test.\n\t* g++.dg/gomp/allocate-2.C: New test.\n\t* g++.dg/gomp/allocate-3.C: New test.", "tree": {"sha": "77628998c8b1cfcf5d767872248ff33542eff532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77628998c8b1cfcf5d767872248ff33542eff532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9649031577028310e853025672c71dfb500494f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649031577028310e853025672c71dfb500494f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9649031577028310e853025672c71dfb500494f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9649031577028310e853025672c71dfb500494f0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7988c76ebacd66741110886c3dc7a4f0245ba9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7988c76ebacd66741110886c3dc7a4f0245ba9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7988c76ebacd66741110886c3dc7a4f0245ba9b5"}], "stats": {"total": 356, "additions": 340, "deletions": 16}, "files": [{"sha": "da5564be5badc6a8903a511f2fd87c6081181e81", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -2289,13 +2289,36 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t    for (c = cclauses[i]; c; c = OMP_CLAUSE_CHAIN (c))\n \t      switch (OMP_CLAUSE_CODE (c))\n \t\t{\n+\t\tcase OMP_CLAUSE_REDUCTION:\n+\t\tcase OMP_CLAUSE_IN_REDUCTION:\n+\t\tcase OMP_CLAUSE_TASK_REDUCTION:\n+\t\t  if (TREE_CODE (OMP_CLAUSE_DECL (c)) == MEM_REF)\n+\t\t    {\n+\t\t      tree t = TREE_OPERAND (OMP_CLAUSE_DECL (c), 0);\n+\t\t      if (TREE_CODE (t) == POINTER_PLUS_EXPR)\n+\t\t\tt = TREE_OPERAND (t, 0);\n+\t\t      if (TREE_CODE (t) == ADDR_EXPR\n+\t\t\t  || TREE_CODE (t) == INDIRECT_REF)\n+\t\t\tt = TREE_OPERAND (t, 0);\n+\t\t      if (DECL_P (t))\n+\t\t\tbitmap_clear_bit (&allocate_head, DECL_UID (t));\n+\t\t      break;\n+\t\t    }\n+\t\t  else if (TREE_CODE (OMP_CLAUSE_DECL (c)) == TREE_LIST)\n+\t\t    {\n+\t\t      tree t;\n+\t\t      for (t = OMP_CLAUSE_DECL (c);\n+\t\t\t   TREE_CODE (t) == TREE_LIST; t = TREE_CHAIN (t))\n+\t\t\t;\n+\t\t      if (DECL_P (t))\n+\t\t\tbitmap_clear_bit (&allocate_head, DECL_UID (t));\n+\t\t      break;\n+\t\t    }\n+\t\t  /* FALLTHRU */\n \t\tcase OMP_CLAUSE_PRIVATE:\n \t\tcase OMP_CLAUSE_FIRSTPRIVATE:\n \t\tcase OMP_CLAUSE_LASTPRIVATE:\n \t\tcase OMP_CLAUSE_LINEAR:\n-\t\tcase OMP_CLAUSE_REDUCTION:\n-\t\tcase OMP_CLAUSE_IN_REDUCTION:\n-\t\tcase OMP_CLAUSE_TASK_REDUCTION:\n \t\t  if (DECL_P (OMP_CLAUSE_DECL (c)))\n \t\t    bitmap_clear_bit (&allocate_head,\n \t\t\t\t      DECL_UID (OMP_CLAUSE_DECL (c)));"}, {"sha": "2bf46f44c6e379d74343395edb3fdd6ae6f646ff", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -15153,13 +15153,26 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tif (allocate_seen)\n \t  switch (OMP_CLAUSE_CODE (c))\n \t    {\n+\t    case OMP_CLAUSE_REDUCTION:\n+\t    case OMP_CLAUSE_IN_REDUCTION:\n+\t    case OMP_CLAUSE_TASK_REDUCTION:\n+\t      if (TREE_CODE (OMP_CLAUSE_DECL (c)) == MEM_REF)\n+\t\t{\n+\t\t  t = TREE_OPERAND (OMP_CLAUSE_DECL (c), 0);\n+\t\t  if (TREE_CODE (t) == POINTER_PLUS_EXPR)\n+\t\t    t = TREE_OPERAND (t, 0);\n+\t\t  if (TREE_CODE (t) == ADDR_EXPR\n+\t\t      || TREE_CODE (t) == INDIRECT_REF)\n+\t\t    t = TREE_OPERAND (t, 0);\n+\t\t  if (DECL_P (t))\n+\t\t    bitmap_clear_bit (&aligned_head, DECL_UID (t));\n+\t\t  break;\n+\t\t}\n+\t      /* FALLTHRU */\n \t    case OMP_CLAUSE_PRIVATE:\n \t    case OMP_CLAUSE_FIRSTPRIVATE:\n \t    case OMP_CLAUSE_LASTPRIVATE:\n \t    case OMP_CLAUSE_LINEAR:\n-\t    case OMP_CLAUSE_REDUCTION:\n-\t    case OMP_CLAUSE_IN_REDUCTION:\n-\t    case OMP_CLAUSE_TASK_REDUCTION:\n \t      if (DECL_P (OMP_CLAUSE_DECL (c)))\n \t\tbitmap_clear_bit (&aligned_head,\n \t\t\t\t  DECL_UID (OMP_CLAUSE_DECL (c)));"}, {"sha": "a550db694881714c080d30262ad55265f89345d2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -8190,17 +8190,11 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t}\n \n       t = OMP_CLAUSE_DECL (c);\n-      if (processing_template_decl\n-\t  && !VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n-\t{\n-\t  pc = &OMP_CLAUSE_CHAIN (c);\n-\t  continue;\n-\t}\n-\n       switch (c_kind)\n \t{\n \tcase OMP_CLAUSE_LASTPRIVATE:\n-\t  if (!bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n+\t  if (DECL_P (t)\n+\t      && !bitmap_bit_p (&firstprivate_head, DECL_UID (t)))\n \t    {\n \t      need_default_ctor = true;\n \t      need_dtor = true;\n@@ -8210,6 +8204,34 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_REDUCTION:\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n+\t  if (allocate_seen)\n+\t    {\n+\t      if (TREE_CODE (t) == MEM_REF)\n+\t\t{\n+\t\t  t = TREE_OPERAND (t, 0);\n+\t\t  if (TREE_CODE (t) == POINTER_PLUS_EXPR)\n+\t\t    t = TREE_OPERAND (t, 0);\n+\t\t  if (TREE_CODE (t) == ADDR_EXPR\n+\t\t      || TREE_CODE (t) == INDIRECT_REF)\n+\t\t    t = TREE_OPERAND (t, 0);\n+\t\t  if (DECL_P (t))\n+\t\t    bitmap_clear_bit (&aligned_head, DECL_UID (t));\n+\t\t}\n+\t      else if (TREE_CODE (t) == TREE_LIST)\n+\t\t{\n+\t\t  while (TREE_CODE (t) == TREE_LIST)\n+\t\t    t = TREE_CHAIN (t);\n+\t\t  if (DECL_P (t))\n+\t\t    bitmap_clear_bit (&aligned_head, DECL_UID (t));\n+\t\t  t = OMP_CLAUSE_DECL (c);\n+\t\t}\n+\t      else if (DECL_P (t))\n+\t\tbitmap_clear_bit (&aligned_head, DECL_UID (t));\n+\t      t = OMP_CLAUSE_DECL (c);\n+\t    }\n+\t  if (processing_template_decl\n+\t      && !VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+\t    break;\n \t  if (finish_omp_reduction_clause (c, &need_default_ctor,\n \t\t\t\t\t   &need_dtor))\n \t    remove = true;\n@@ -8218,6 +8240,9 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  break;\n \n \tcase OMP_CLAUSE_COPYIN:\n+\t  if (processing_template_decl\n+\t      && !VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+\t    break;\n \t  if (!VAR_P (t) || !CP_DECL_THREAD_LOCAL_P (t))\n \t    {\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n@@ -8230,6 +8255,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  break;\n \t}\n \n+      if (processing_template_decl\n+\t  && !VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+\t{\n+\t  pc = &OMP_CLAUSE_CHAIN (c);\n+\t  continue;\n+\t}\n+\n       if (need_complete_type || need_copy_assignment)\n \t{\n \t  t = require_complete_type (t);\n@@ -8247,8 +8279,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t  if (allocate_seen\n \t      && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_SHARED\n \t      && DECL_P (t))\n-\t    bitmap_clear_bit (&aligned_head,\n-\t\t\t      DECL_UID (OMP_CLAUSE_DECL (c)));\n+\t    bitmap_clear_bit (&aligned_head, DECL_UID (t));\n \t    \n \t  if (VAR_P (t) && CP_DECL_THREAD_LOCAL_P (t))\n \t    share_name = \"threadprivate\";\n@@ -8349,6 +8380,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tbool remove = false;\n \tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_ALLOCATE\n \t    && !OMP_CLAUSE_ALLOCATE_COMBINED (c)\n+\t    && DECL_P (OMP_CLAUSE_DECL (c))\n \t    && bitmap_bit_p (&aligned_head, DECL_UID (OMP_CLAUSE_DECL (c))))\n \t  {\n \t    error_at (OMP_CLAUSE_LOCATION (c),"}, {"sha": "4e0f44a7317410cf7e7095ce89e47c180ab9dbf4", "filename": "gcc/testsuite/c-c++-common/gomp/allocate-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fallocate-4.c?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -0,0 +1,39 @@\n+void\n+foo (void)\n+{\n+  int s[4] = { 0, 0, 0, 0 };\n+  int *p = s;\n+#pragma omp parallel reduction (+: s) allocate(s)\n+  s[0]++;\n+#pragma omp parallel reduction (+: s[0:3]) allocate(s)\n+  s[0]++;\n+#pragma omp parallel reduction (+: s[2:2]) allocate(s)\n+  s[2]++;\n+#pragma omp parallel reduction (+: p[:2]) allocate(p)\n+  p[0]++;\n+#pragma omp parallel reduction (+: p[2:2]) allocate(p)\n+  p[2]++;\n+}\n+\n+void\n+bar (void)\n+{\n+  int s[4] = { 0, 0, 0, 0 };\n+  int *p = s;\n+  int i;\n+#pragma omp teams distribute parallel for reduction (+: s) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s[0:3]) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s[2:2]) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[2]++;\n+#pragma omp teams distribute parallel for reduction (+: p[:2]) allocate(p)\n+  for (i = 0; i < 64; i++)\n+    p[0]++;\n+#pragma omp teams distribute parallel for reduction (+: p[2:2]) allocate(p)\n+  for (i = 0; i < 64; i++)\n+    p[2]++;\n+}"}, {"sha": "b8cf480cf10bc46a823add7c1cb9d0cb60f55cc8", "filename": "gcc/testsuite/g++.dg/gomp/allocate-2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-2.C?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/97670\n+\n+struct S { int s; };\n+\n+void\n+foo ()\n+{\n+  S s[1] = { S () };\n+#pragma omp parallel reduction (+: s) allocate(s)\t// { dg-error \"user defined reduction not found for 's'\" }\n+  s[0].s++;\n+}"}, {"sha": "e778314f07e750d9b28bd34a65662e83e7a64afc", "filename": "gcc/testsuite/g++.dg/gomp/allocate-3.C", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9649031577028310e853025672c71dfb500494f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fallocate-3.C?ref=9649031577028310e853025672c71dfb500494f0", "patch": "@@ -0,0 +1,206 @@\n+template <typename T>\n+void\n+foo (T &x, T (&y)[4], T *&z, int &u, int (&v)[4], int *&w)\n+{\n+  T s[4] = { 0, 0, 0, 0 };\n+  T *p = s;\n+#pragma omp parallel reduction (+: s) allocate(s)\n+  s[0]++;\n+#pragma omp parallel reduction (+: s[0:3]) allocate(s)\n+  s[0]++;\n+#pragma omp parallel reduction (+: s[2:2]) allocate(s)\n+  s[2]++;\n+#pragma omp parallel reduction (+: p[:2]) allocate(p)\n+  p[0]++;\n+#pragma omp parallel reduction (+: p[2:2]) allocate(p)\n+  p[2]++;\n+  int s2[4] = { 0, 0, 0, 0 };\n+  int *p2 = s2;\n+#pragma omp parallel reduction (+: s2) allocate(s2)\n+  s2[0]++;\n+#pragma omp parallel reduction (+: s2[0:3]) allocate(s2)\n+  s2[0]++;\n+#pragma omp parallel reduction (+: s2[2:2]) allocate(s2)\n+  s2[2]++;\n+#pragma omp parallel reduction (+: p2[:2]) allocate(p2)\n+  p2[0]++;\n+#pragma omp parallel reduction (+: p2[2:2]) allocate(p2)\n+  p2[2]++;\n+#pragma omp parallel reduction (+: x) allocate(x)\n+  x++;\n+#pragma omp parallel reduction (+: y) allocate(y)\n+  y[0]++;\n+#pragma omp parallel reduction (+: y[0:3]) allocate(y)\n+  y[0]++;\n+#pragma omp parallel reduction (+: y[2:2]) allocate(y)\n+  y[2]++;\n+#pragma omp parallel reduction (+: z[:2]) allocate(z)\n+  z[0]++;\n+#pragma omp parallel reduction (+: z[2:2]) allocate(z)\n+  z[2]++;\n+#pragma omp parallel reduction (+: u) allocate(u)\n+  u++;\n+#pragma omp parallel reduction (+: v) allocate(v)\n+  v[0]++;\n+#pragma omp parallel reduction (+: v[0:3]) allocate(v)\n+  v[0]++;\n+#pragma omp parallel reduction (+: v[2:2]) allocate(v)\n+  v[2]++;\n+#pragma omp parallel reduction (+: w[:2]) allocate(w)\n+  w[0]++;\n+#pragma omp parallel reduction (+: w[2:2]) allocate(w)\n+  w[2]++;\n+}\n+\n+template <typename T>\n+void\n+bar (T &x, T (&y)[4], T *&z, int &u, int (&v)[4], int *&w)\n+{\n+  T s[4] = { 0, 0, 0, 0 };\n+  T *p = s;\n+  int i;\n+#pragma omp teams distribute parallel for reduction (+: s) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s[0:3]) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s[2:2]) allocate(s)\n+  for (i = 0; i < 64; i++)\n+    s[2]++;\n+#pragma omp teams distribute parallel for reduction (+: p[:2]) allocate(p)\n+  for (i = 0; i < 64; i++)\n+    p[0]++;\n+#pragma omp teams distribute parallel for reduction (+: p[2:2]) allocate(p)\n+  for (i = 0; i < 64; i++)\n+    p[2]++;\n+  int s2[4] = { 0, 0, 0, 0 };\n+  int *p2 = s2;\n+#pragma omp teams distribute parallel for reduction (+: s2) allocate(s2)\n+  for (i = 0; i < 64; i++)\n+    s2[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s2[0:3]) allocate(s2)\n+  for (i = 0; i < 64; i++)\n+    s2[0]++;\n+#pragma omp teams distribute parallel for reduction (+: s2[2:2]) allocate(s2)\n+  for (i = 0; i < 64; i++)\n+    s2[2]++;\n+#pragma omp teams distribute parallel for reduction (+: p2[:2]) allocate(p2)\n+  for (i = 0; i < 64; i++)\n+    p2[0]++;\n+#pragma omp teams distribute parallel for reduction (+: p2[2:2]) allocate(p2)\n+  for (i = 0; i < 64; i++)\n+    p2[2]++;\n+#pragma omp teams distribute parallel for reduction (+: x) allocate(x)\n+  for (i = 0; i < 64; i++)\n+    x++;\n+#pragma omp teams distribute parallel for reduction (+: y) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[0]++;\n+#pragma omp teams distribute parallel for reduction (+: y[0:3]) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[0]++;\n+#pragma omp teams distribute parallel for reduction (+: y[2:2]) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[2]++;\n+#pragma omp teams distribute parallel for reduction (+: z[:2]) allocate(z)\n+  for (i = 0; i < 64; i++)\n+    z[0]++;\n+#pragma omp teams distribute parallel for reduction (+: z[2:2]) allocate(z)\n+  for (i = 0; i < 64; i++)\n+    z[2]++;\n+#pragma omp teams distribute parallel for reduction (+: u) allocate(u)\n+  for (i = 0; i < 64; i++)\n+    u++;\n+#pragma omp teams distribute parallel for reduction (+: v) allocate(v)\n+  for (i = 0; i < 64; i++)\n+    v[0]++;\n+#pragma omp teams distribute parallel for reduction (+: v[0:3]) allocate(v)\n+  for (i = 0; i < 64; i++)\n+    v[0]++;\n+#pragma omp teams distribute parallel for reduction (+: v[2:2]) allocate(v)\n+  for (i = 0; i < 64; i++)\n+    v[2]++;\n+#pragma omp teams distribute parallel for reduction (+: w[:2]) allocate(w)\n+  for (i = 0; i < 64; i++)\n+    w[0]++;\n+#pragma omp teams distribute parallel for reduction (+: w[2:2]) allocate(w)\n+  for (i = 0; i < 64; i++)\n+    w[2]++;\n+}\n+\n+void\n+baz (long int &x, long int (&y)[4], long int *&z)\n+{\n+#pragma omp parallel reduction (+: x) allocate(x)\n+  x++;\n+#pragma omp parallel reduction (+: y) allocate(y)\n+  y[0]++;\n+#pragma omp parallel reduction (+: y[0:3]) allocate(y)\n+  y[0]++;\n+#pragma omp parallel reduction (+: y[2:2]) allocate(y)\n+  y[2]++;\n+#pragma omp parallel reduction (+: z[:2]) allocate(z)\n+  z[0]++;\n+#pragma omp parallel reduction (+: z[2:2]) allocate(z)\n+  z[2]++;\n+}\n+\n+void\n+qux (long long int &x, long long int (&y)[4], long long int *&z)\n+{\n+  int i;\n+#pragma omp teams distribute parallel for reduction (+: x) allocate(x)\n+  for (i = 0; i < 64; i++)\n+    x++;\n+#pragma omp teams distribute parallel for reduction (+: y) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[0]++;\n+#pragma omp teams distribute parallel for reduction (+: y[0:3]) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[0]++;\n+#pragma omp teams distribute parallel for reduction (+: y[2:2]) allocate(y)\n+  for (i = 0; i < 64; i++)\n+    y[2]++;\n+#pragma omp teams distribute parallel for reduction (+: z[:2]) allocate(z)\n+  for (i = 0; i < 64; i++)\n+    z[0]++;\n+#pragma omp teams distribute parallel for reduction (+: z[2:2]) allocate(z)\n+  for (i = 0; i < 64; i++)\n+    z[2]++;\n+}\n+\n+void\n+test ()\n+{\n+  long int x = 0;\n+  long int y[4] = { 0, 0, 0, 0 };\n+  long int *z = y;\n+  int u = 0;\n+  int v[4] = { 0, 0, 0, 0 };\n+  int *w = v;\n+  long long int x2 = 0;\n+  long long int y2[4] = { 0, 0, 0, 0 };\n+  long long int *z2 = y2;\n+  foo (x, y, z, u, v, w);\n+  bar (x2, y2, z2, u, v, w);\n+}\n+\n+namespace N\n+{\n+  int a;\n+  void foo ()\n+  {\n+    int i;\n+    #pragma omp parallel firstprivate (N::a) allocate (a)\n+    a++;\n+    #pragma omp parallel firstprivate (a) allocate (N::a)\n+    a++;\n+    #pragma omp teams distribute parallel for firstprivate (N::a) allocate (a)\n+    for (i = 0; i < 64; i++)\n+      a++;\n+    #pragma omp teams distribute parallel for firstprivate (a) allocate (N::a)\n+    for (i = 0; i < 64; i++)\n+      a++;\n+  }\n+}"}]}