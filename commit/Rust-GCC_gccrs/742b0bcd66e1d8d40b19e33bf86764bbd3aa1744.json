{"sha": "742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyYjBiY2Q2NmUxZDhkNDBiMTllMzNiZjg2NzY0YmJkM2FhMTc0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-02T18:44:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-08-02T18:44:58Z"}, "message": "PR c++/51213 (again)\n\n/cp\n2012-08-02  Jason Merrill  <jason@redhat.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51213 (again)\n\t* pt.c (type_unification_real): Call push_deferring_access_checks /\n\tpop_deferring_access_checks around the substitution of default\n\ttemplate args.\n\t(instantiate_template_1): When the specialization returned by\n\tretrieve_specialization has FNDECL_HAS_ACCESS_ERRORS set and we\n\tare in a SFINAE context, simply return error_mark_node.\n\t* cp-tree.h (FNDECL_RECHECK_ACCESS_P): Rename FNDECL_HAS_ACCESS_ERRORS.\n\n/testsuite\n2012-08-02  Jason Merrill  <jason@redhat.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51213 (again)\n\t* g++.dg/cpp0x/sfinae37.C: Extend.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r190093", "tree": {"sha": "8dcb8f70665b36034a058e9049699008a55f672e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dcb8f70665b36034a058e9049699008a55f672e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "328ece7de3d6903fd6e2c909e1efe1eea59fc8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328ece7de3d6903fd6e2c909e1efe1eea59fc8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328ece7de3d6903fd6e2c909e1efe1eea59fc8ec"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "92c9db1a99e2c5eecb1a29ed8da1db26efa67707", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "patch": "@@ -1,3 +1,15 @@\n+2012-08-02  Jason Merrill  <jason@redhat.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51213 (again)\n+\t* pt.c (type_unification_real): Call push_deferring_access_checks /\n+\tpop_deferring_access_checks around the substitution of default\n+\ttemplate args.\n+\t(instantiate_template_1): When the specialization returned by\n+\tretrieve_specialization has FNDECL_HAS_ACCESS_ERRORS set and we\n+\tare in a SFINAE context, simply return error_mark_node.\n+\t* cp-tree.h (FNDECL_RECHECK_ACCESS_P): Rename FNDECL_HAS_ACCESS_ERRORS.\n+\n 2012-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (check_default_tmpl_args): Change is_primary and is_partial"}, {"sha": "e40f11482e7323a67fc2de05efaa6235f74c1ae6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "patch": "@@ -729,10 +729,10 @@ DEF_VEC_ALLOC_O (qualified_typedef_usage_t,gc);\n /* Non-zero if this template specialization has access violations that\n    should be rechecked when the function is instantiated outside argument\n    deduction.  */\n-#define TINFO_RECHECK_ACCESS_P(NODE) \\\n+#define TINFO_HAS_ACCESS_ERRORS(NODE) \\\n   (TREE_LANG_FLAG_0 (TEMPLATE_INFO_CHECK (NODE)))\n-#define FNDECL_RECHECK_ACCESS_P(NODE) \\\n-  (TINFO_RECHECK_ACCESS_P (DECL_TEMPLATE_INFO (NODE)))\n+#define FNDECL_HAS_ACCESS_ERRORS(NODE) \\\n+  (TINFO_HAS_ACCESS_ERRORS (DECL_TEMPLATE_INFO (NODE)))\n \n struct GTY(()) tree_template_info {\n   struct tree_common common;"}, {"sha": "2ae576d7f18f636f44aebd12a9ad584dcafe9da1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "patch": "@@ -14363,8 +14363,12 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \n   if (spec != NULL_TREE)\n     {\n-      if (FNDECL_RECHECK_ACCESS_P (spec) && (complain & tf_error))\n-\trecheck_decl_substitution (spec, gen_tmpl, targ_ptr);\n+      if (FNDECL_HAS_ACCESS_ERRORS (spec))\n+\t{\n+\t  if (complain & tf_error)\n+\t    recheck_decl_substitution (spec, gen_tmpl, targ_ptr);\n+\t  return error_mark_node;\n+\t}\n       return spec;\n     }\n \n@@ -14426,7 +14430,7 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \t{\n \t  /* Remember to reinstantiate when we're out of SFINAE so the user\n \t     can see the errors.  */\n-\t  FNDECL_RECHECK_ACCESS_P (fndecl) = true;\n+\t  FNDECL_HAS_ACCESS_ERRORS (fndecl) = true;\n \t}\n       return error_mark_node;\n     }\n@@ -15122,9 +15126,11 @@ type_unification_real (tree tparms,\n \t      location_t save_loc = input_location;\n \t      if (DECL_P (parm))\n \t\tinput_location = DECL_SOURCE_LOCATION (parm);\n+\t      push_deferring_access_checks (dk_no_deferred);\n \t      arg = tsubst_template_arg (arg, targs, complain, NULL_TREE);\n \t      arg = convert_template_argument (parm, arg, targs, complain,\n \t\t\t\t\t       i, NULL_TREE);\n+\t      pop_deferring_access_checks ();\n \t      input_location = save_loc;\n \t      if (arg == error_mark_node)\n \t\treturn 1;"}, {"sha": "14659cd123e46809e6d5fdb5a553c76113ae4aa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "patch": "@@ -1,3 +1,9 @@\n+2012-08-02  Jason Merrill  <jason@redhat.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51213 (again)\n+\t* g++.dg/cpp0x/sfinae37.C: Extend.\n+\n 2012-08-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50672"}, {"sha": "e89106aac34060513ecf9d17e2b6ad70176730c5", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae37.C", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b0bcd66e1d8d40b19e33bf86764bbd3aa1744/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae37.C?ref=742b0bcd66e1d8d40b19e33bf86764bbd3aa1744", "patch": "@@ -5,6 +5,12 @@ class C {\n   typedef int type;\n };\n \n+template<int>\n+struct I;\n+\n+template<>\n+struct I<2> { };\n+\n template<class T, class = typename T::type>\n auto f(int) -> char;\n \n@@ -13,10 +19,18 @@ auto f(...) -> char (&)[2];\n \n static_assert(sizeof(f<C>(0)) == 2, \"Ouch\");\n \n+typedef int testf[sizeof(f<C>(0)) == 2 ? 1 : -1];\n+\n+I<sizeof(f<C>(0))> vf;\n+\n template<class T>\n auto g(int) -> decltype(typename T::type(), char());\n \n template<class>\n auto g(...) -> char (&)[2];\n \n static_assert(sizeof(g<C>(0)) == 2, \"Ouch\");\n+\n+typedef int testg[sizeof(g<C>(0)) == 2 ? 1 : -1];\n+\n+I<sizeof(g<C>(0))> vg;"}]}