{"sha": "e65757f3598cd955c6880b2809fe5e8930bca208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1NzU3ZjM1OThjZDk1NWM2ODgwYjI4MDlmZTVlODkzMGJjYTIwOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-28T13:24:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-28T13:24:53Z"}, "message": "re PR tree-optimization/66142 (Loop is not vectorized because not sufficient support for GOMP_SIMD_LANE)\n\n2015-05-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66142\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle non-GIMPLE\n\tvalues better in memcpy destination handling.  Handle non-aliasing\n\twe discover here.\n\n\t* gcc.dg/tree-ssa/ssa-fre-44.c: Fixup.\n\nFrom-SVN: r223816", "tree": {"sha": "a9fb668a678f9845ed0e70130ed84e4cbe23ffd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9fb668a678f9845ed0e70130ed84e4cbe23ffd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65757f3598cd955c6880b2809fe5e8930bca208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65757f3598cd955c6880b2809fe5e8930bca208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65757f3598cd955c6880b2809fe5e8930bca208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65757f3598cd955c6880b2809fe5e8930bca208/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3b1cbddab28e0b7188257f59acbbec5d47f1eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b1cbddab28e0b7188257f59acbbec5d47f1eb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b1cbddab28e0b7188257f59acbbec5d47f1eb5"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "9e8110443aa8ada0df86345b7e5745c270b0e8bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65757f3598cd955c6880b2809fe5e8930bca208", "patch": "@@ -1,3 +1,10 @@\n+2015-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66142\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle non-GIMPLE\n+\tvalues better in memcpy destination handling.  Handle non-aliasing\n+\twe discover here.\n+\n 2015-05-28  Lawrence Vel\u00e1zquez  <vq@larryv.me>\n \n \tPR target/63810"}, {"sha": "ddc74fc274c4bdae50a0afc998d28d6b97111757", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e65757f3598cd955c6880b2809fe5e8930bca208", "patch": "@@ -1,3 +1,8 @@\n+2015-05-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66142\n+\t* gcc.dg/tree-ssa/ssa-fre-44.c: Fixup.\n+\n 2015-05-28  Lawrence Vel\u00e1zquez  <vq@larryv.me>\n \n \tPR target/63810"}, {"sha": "7d5f7137295a1820a544c62708bc43a415a80236", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-44.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-44.c?ref=e65757f3598cd955c6880b2809fe5e8930bca208", "patch": "@@ -39,7 +39,6 @@ f3 (struct B *x, int y)\n   struct A *q = &x[y].u;\n   __builtin_memcpy (&q->x, &p.x, sizeof (float));\n   __builtin_memcpy (&q->y, &p.y, sizeof (float));\n-  *q = p;\n   float f = x[y].u.x + x[y].u.y;\n   bar (&p);\n   return f;"}, {"sha": "9d2345f41c406f8f047e33f10d4080373ba8172e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65757f3598cd955c6880b2809fe5e8930bca208/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e65757f3598cd955c6880b2809fe5e8930bca208", "patch": "@@ -2028,7 +2028,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       lhs = gimple_call_arg (def_stmt, 0);\n       lhs_offset = 0;\n       if (TREE_CODE (lhs) == SSA_NAME)\n-\tlhs = SSA_VAL (lhs);\n+\t{\n+\t  lhs = SSA_VAL (lhs);\n+\t  if (TREE_CODE (lhs) == SSA_NAME)\n+\t    {\n+\t      gimple def_stmt = SSA_NAME_DEF_STMT (lhs);\n+\t      if (gimple_assign_single_p (def_stmt)\n+\t\t  && gimple_assign_rhs_code (def_stmt) == ADDR_EXPR)\n+\t\tlhs = gimple_assign_rhs1 (def_stmt);\n+\t    }\n+\t}\n       if (TREE_CODE (lhs) == ADDR_EXPR)\n \t{\n \t  tree tem = get_addr_base_and_unit_offset (TREE_OPERAND (lhs, 0),\n@@ -2039,6 +2048,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t      && tree_fits_uhwi_p (TREE_OPERAND (tem, 1)))\n \t    {\n \t      lhs = TREE_OPERAND (tem, 0);\n+\t      if (TREE_CODE (lhs) == SSA_NAME)\n+\t\tlhs = SSA_VAL (lhs);\n \t      lhs_offset += tree_to_uhwi (TREE_OPERAND (tem, 1));\n \t    }\n \t  else if (DECL_P (tem))\n@@ -2089,10 +2100,15 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t\t  || TREE_OPERAND (lhs, 0) != base)))\n \treturn (void *)-1;\n \n-      /* And the access has to be contained within the memcpy destination.  */\n       at = offset / BITS_PER_UNIT;\n       if (TREE_CODE (base) == MEM_REF)\n \tat += tree_to_uhwi (TREE_OPERAND (base, 1));\n+      /* If the access is completely outside of the memcpy destination\n+\t area there is no aliasing.  */\n+      if (lhs_offset >= at + maxsize / BITS_PER_UNIT\n+\t  || lhs_offset + copy_size <= at)\n+\treturn NULL;\n+      /* And the access has to be contained within the memcpy destination.  */\n       if (lhs_offset > at\n \t  || lhs_offset + copy_size < at + maxsize / BITS_PER_UNIT)\n \treturn (void *)-1;"}]}