{"sha": "f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyNDJlYzBkM2YxYmIxM2M3OGVmM2MyMWUwMzU0ZDg0ZmU1NzIyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-04T22:20:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-04T22:20:49Z"}, "message": "libstdc++: Remove workarounds for constrained nested class templates\n\nWith PR c++/92078 and PR c++/92103 both fixed, nested class templates\ncan now be constrained. That means a number of namespace-scope helpers\ncan be moved to the class scope, so they're only visible where they're\nneeded.\n\n\t* include/bits/iterator_concepts.h (__detail::__ptr, __detail::__ref)\n\t(__detail::__cat, __detail::__diff): Move to class scope in the\n\trelevant __iterator_traits specializations.\n\t(__iterator_traits<>): Use nested class templates instead of ones from\n\tnamespace __detail.\n\t* include/bits/stl_iterator.h (__detail::__common_iter_ptr): Move to\n\tclass scope in iterator_traits<common_iterator<I, S>>.\n\t(iterator_traits<common_iterator<I, S>>): Use nested class template\n\tinstead of __detail::__common_iter_ptr.", "tree": {"sha": "1cda192a6b07a09edcc723f210b8a0f51483cb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cda192a6b07a09edcc723f210b8a0f51483cb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b825a22890740f341eae566af27e18e528cd29a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b825a22890740f341eae566af27e18e528cd29a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b825a22890740f341eae566af27e18e528cd29a7"}], "stats": {"total": 191, "additions": 97, "deletions": 94}, "files": [{"sha": "e56abe2be6c35ef1daf107c7e58a66302d61d067", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 80, "deletions": 73, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "patch": "@@ -320,84 +320,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _Iter>\n       concept __iter_without_nested_types = !__iter_with_nested_types<_Iter>;\n-\n-    // FIXME: These have to be at namespace-scope because of PR 92103.\n-    template<typename _Iter, bool __use_arrow = false>\n-      struct __ptr\n-      { using type = void; };\n-\n-    template<typename _Iter> requires requires { typename _Iter::pointer; }\n-      struct __ptr<_Iter, true>\n-      { using type = typename _Iter::pointer; };\n-\n-    template<typename _Iter> requires requires { typename _Iter::pointer; }\n-      struct __ptr<_Iter, false>\n-      { using type = typename _Iter::pointer; };\n-\n-    template<typename _Iter>\n-      requires (!requires { typename _Iter::pointer; }\n-\t  && requires(_Iter& __it) { __it.operator->(); })\n-      struct __ptr<_Iter, true>\n-      { using type = decltype(std::declval<_Iter&>().operator->()); };\n-\n-    template<typename _Iter>\n-      struct __ref\n-      { using type = iter_reference_t<_Iter>; };\n-\n-    template<typename _Iter> requires requires { typename _Iter::reference; }\n-      struct __ref<_Iter>\n-      { using type = typename _Iter::reference; };\n-\n-    template<typename _Iter>\n-      struct __cat\n-      { using type = input_iterator_tag; };\n-\n-    template<typename _Iter>\n-      requires requires { typename _Iter::iterator_category; }\n-      struct __cat<_Iter>\n-      { using type = typename _Iter::iterator_category; };\n-\n-    template<typename _Iter>\n-      requires (!requires { typename _Iter::iterator_category; }\n-\t\t&& __detail::__cpp17_randacc_iterator<_Iter>)\n-      struct __cat<_Iter>\n-      { using type = random_access_iterator_tag; };\n-\n-    template<typename _Iter>\n-      requires (!requires { typename _Iter::iterator_category; }\n-\t\t&& __detail::__cpp17_bidi_iterator<_Iter>)\n-      struct __cat<_Iter>\n-      { using type = bidirectional_iterator_tag; };\n-\n-    template<typename _Iter>\n-      requires (!requires { typename _Iter::iterator_category; }\n-\t\t&& __detail::__cpp17_fwd_iterator<_Iter>)\n-      struct __cat<_Iter>\n-      { using type = forward_iterator_tag; };\n-\n-    template<typename _Iter>\n-      struct __diff\n-      { using type = void; };\n-\n-    template<typename _Iter>\n-      requires requires {\n-\ttypename incrementable_traits<_Iter>::difference_type;\n-      }\n-      struct __diff<_Iter>\n-      {\n-\tusing type = typename incrementable_traits<_Iter>::difference_type;\n-      };\n-\n   } // namespace __detail\n \n   template<typename _Iterator>\n     requires __detail::__iter_with_nested_types<_Iterator>\n     struct __iterator_traits<_Iterator, void>\n     {\n+    private:\n+      template<typename _Iter>\n+\tstruct __ptr\n+\t{ using type = void; };\n+\n+      template<typename _Iter> requires requires { typename _Iter::pointer; }\n+\tstruct __ptr<_Iter>\n+\t{ using type = typename _Iter::pointer; };\n+\n+    public:\n       using iterator_category = typename _Iterator::iterator_category;\n       using value_type\t      = typename _Iterator::value_type;\n       using difference_type   = typename _Iterator::difference_type;\n-      using pointer\t      = typename __detail::__ptr<_Iterator>::type;\n+      using pointer\t      = typename __ptr<_Iterator>::type;\n       using reference\t      = typename _Iterator::reference;\n     };\n \n@@ -406,23 +348,88 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      && __detail::__cpp17_input_iterator<_Iterator>\n     struct __iterator_traits<_Iterator, void>\n     {\n-      using iterator_category = typename __detail::__cat<_Iterator>::type;\n+    private:\n+      template<typename _Iter>\n+\tstruct __cat\n+\t{ using type = input_iterator_tag; };\n+\n+      template<typename _Iter>\n+\trequires requires { typename _Iter::iterator_category; }\n+\tstruct __cat<_Iter>\n+\t{ using type = typename _Iter::iterator_category; };\n+\n+      template<typename _Iter>\n+\trequires (!requires { typename _Iter::iterator_category; }\n+\t\t  && __detail::__cpp17_randacc_iterator<_Iter>)\n+\tstruct __cat<_Iter>\n+\t{ using type = random_access_iterator_tag; };\n+\n+      template<typename _Iter>\n+\trequires (!requires { typename _Iter::iterator_category; }\n+\t\t  && __detail::__cpp17_bidi_iterator<_Iter>)\n+\tstruct __cat<_Iter>\n+\t{ using type = bidirectional_iterator_tag; };\n+\n+      template<typename _Iter>\n+\trequires (!requires { typename _Iter::iterator_category; }\n+\t\t  && __detail::__cpp17_fwd_iterator<_Iter>)\n+\tstruct __cat<_Iter>\n+\t{ using type = forward_iterator_tag; };\n+\n+      template<typename _Iter>\n+\tstruct __ptr\n+\t{ using type = void; };\n+\n+      template<typename _Iter> requires requires { typename _Iter::pointer; }\n+\tstruct __ptr<_Iter>\n+\t{ using type = typename _Iter::pointer; };\n+\n+      template<typename _Iter>\n+\trequires (!requires { typename _Iter::pointer; }\n+\t    && requires(_Iter& __it) { __it.operator->(); })\n+\tstruct __ptr<_Iter>\n+\t{ using type = decltype(std::declval<_Iter&>().operator->()); };\n+\n+      template<typename _Iter>\n+\tstruct __ref\n+\t{ using type = iter_reference_t<_Iter>; };\n+\n+      template<typename _Iter> requires requires { typename _Iter::reference; }\n+\tstruct __ref<_Iter>\n+\t{ using type = typename _Iter::reference; };\n+\n+    public:\n+      using iterator_category = typename __cat<_Iterator>::type;\n       using value_type\n \t= typename indirectly_readable_traits<_Iterator>::value_type;\n       using difference_type\n \t= typename incrementable_traits<_Iterator>::difference_type;\n-      using pointer\t      = typename __detail::__ptr<_Iterator, true>::type;\n-      using reference\t      = typename __detail::__ref<_Iterator>::type;\n+      using pointer\t      = typename __ptr<_Iterator>::type;\n+      using reference\t      = typename __ref<_Iterator>::type;\n     };\n \n   template<typename _Iterator>\n     requires __detail::__iter_without_nested_types<_Iterator>\n \t      && __detail::__cpp17_iterator<_Iterator>\n     struct __iterator_traits<_Iterator, void>\n     {\n+    private:\n+      template<typename _Iter>\n+\tstruct __diff\n+\t{ using type = void; };\n+\n+      template<typename _Iter>\n+\trequires requires\n+\t{ typename incrementable_traits<_Iter>::difference_type; }\n+\tstruct __diff<_Iter>\n+\t{\n+\t  using type = typename incrementable_traits<_Iter>::difference_type;\n+\t};\n+\n+    public:\n       using iterator_category = output_iterator_tag;\n       using value_type\t      = void;\n-      using difference_type   = typename __detail::__diff<_Iterator>::type;\n+      using difference_type   = typename __diff<_Iterator>::type;\n       using pointer\t      = void;\n       using reference\t      = void;\n     };"}, {"sha": "72907813bf5b2f83c9f867a221f1e339dfcca66b", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2242ec0d3f1bb13c78ef3c21e0354d84fe57222/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f2242ec0d3f1bb13c78ef3c21e0354d84fe57222", "patch": "@@ -1903,37 +1903,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using difference_type = iter_difference_t<_It>;\n     };\n \n-  namespace __detail\n-  {\n-    // FIXME: This has to be at namespace-scope because of PR 92103.\n-    template<typename _It, typename _Sent>\n-      struct __common_iter_ptr\n-      {\n-\tusing type = void;\n-      };\n-\n-    template<typename _It, typename _Sent>\n-      requires __detail::__common_iter_has_arrow<_It>\n-      struct __common_iter_ptr<_It, _Sent>\n-      {\n-\tusing common_iterator = std::common_iterator<_It, _Sent>;\n-\n-\tusing type\n-\t  = decltype(std::declval<const common_iterator&>().operator->());\n-      };\n-  } // namespace __detail\n-\n   template<input_iterator _It, typename _Sent>\n     struct iterator_traits<common_iterator<_It, _Sent>>\n     {\n+    private:\n+      template<typename _Iter>\n+\tstruct __ptr\n+\t{\n+\t  using type = void;\n+\t};\n+\n+      template<typename _Iter>\n+\trequires __detail::__common_iter_has_arrow<_Iter>\n+\tstruct __ptr<_Iter>\n+\t{\n+\t  using _CIter = common_iterator<_Iter, _Sent>;\n+\t  using type = decltype(std::declval<const _CIter&>().operator->());\n+\t};\n+\n+    public:\n       using iterator_concept = conditional_t<forward_iterator<_It>,\n \t    forward_iterator_tag, input_iterator_tag>;\n       using iterator_category = __detail::__clamp_iter_cat<\n \ttypename iterator_traits<_It>::iterator_category,\n \tforward_iterator_tag, input_iterator_tag>;\n       using value_type = iter_value_t<_It>;\n       using difference_type = iter_difference_t<_It>;\n-      using pointer = typename __detail::__common_iter_ptr<_It, _Sent>::type;\n+      using pointer = typename __ptr<_It>::type;\n       using reference = iter_reference_t<_It>;\n     };\n "}]}