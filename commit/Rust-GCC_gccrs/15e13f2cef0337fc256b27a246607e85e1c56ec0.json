{"sha": "15e13f2cef0337fc256b27a246607e85e1c56ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlMTNmMmNlZjAzMzdmYzI1NmIyN2EyNDY2MDdlODVlMWM1NmVjMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T19:05:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T19:05:11Z"}, "message": "(save_constants): Make (address (const ..)) to record both modes.\n\n(copy_for_inline, copy_rtx_and_substitute, restore_constants): Use\nboth modes when restoring constant pool entry for ADDRESS.\n\nFrom-SVN: r13512", "tree": {"sha": "7681942840d57750e4a3622f1d462459660f0d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7681942840d57750e4a3622f1d462459660f0d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e13f2cef0337fc256b27a246607e85e1c56ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e13f2cef0337fc256b27a246607e85e1c56ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e13f2cef0337fc256b27a246607e85e1c56ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e13f2cef0337fc256b27a246607e85e1c56ec0/comments", "author": null, "committer": null, "parents": [{"sha": "d7dc4377ee1b113435389029c611b90629688d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7dc4377ee1b113435389029c611b90629688d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7dc4377ee1b113435389029c611b90629688d1b"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "5d22dc8d2d0dff53babcec99b8e705b17a197508", "filename": "gcc/integrate.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e13f2cef0337fc256b27a246607e85e1c56ec0/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e13f2cef0337fc256b27a246607e85e1c56ec0/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=15e13f2cef0337fc256b27a246607e85e1c56ec0", "patch": "@@ -1,5 +1,5 @@\n /* Procedure integration for GNU CC.\n-   Copyright (C) 1988, 91, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 91, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -842,8 +842,8 @@ save_for_inline_nocopy (fndecl)\n    pool.  Replace each with a CONST that has the mode of the original\n    constant, contains the constant, and has RTX_INTEGRATED_P set.\n    Similarly, constant pool addresses not enclosed in a MEM are replaced\n-   with an ADDRESS rtx which also gives the constant, mode, and has\n-   RTX_INTEGRATED_P set.  */\n+   with an ADDRESS and CONST rtx which also gives the constant, its\n+   mode, the mode of the address, and has RTX_INTEGRATED_P set.  */\n \n static void\n save_constants (px)\n@@ -882,7 +882,9 @@ save_constants (px)\n   else if (GET_CODE (x) == SYMBOL_REF\n \t   && CONSTANT_POOL_ADDRESS_P (x))\n     {\n-      *px = gen_rtx (ADDRESS, get_pool_mode (x), get_pool_constant (x));\n+      *px = gen_rtx (ADDRESS, GET_MODE (x),\n+\t\t     gen_rtx (CONST, get_pool_mode (x),\n+\t\t\t      get_pool_constant (x)));\n       save_constants (&XEXP (*px, 0));\n       RTX_INTEGRATED_P (*px) = 1;\n     }\n@@ -949,6 +951,7 @@ copy_for_inline (orig)\n      rtx orig;\n {\n   register rtx x = orig;\n+  register rtx new;\n   register int i;\n   register enum rtx_code code;\n   register char *format_ptr;\n@@ -994,9 +997,8 @@ copy_for_inline (orig)\n       /* Get constant pool entry, but access in different mode.  */\n       if (RTX_INTEGRATED_P (x))\n \t{\n-\t  rtx new\n-\t    = force_const_mem (GET_MODE (SUBREG_REG (x)),\n-\t\t\t       copy_for_inline (XEXP (SUBREG_REG (x), 0)));\n+\t  new = force_const_mem (GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t copy_for_inline (XEXP (SUBREG_REG (x), 0)));\n \n \t  PUT_MODE (new, GET_MODE (x));\n \t  return validize_mem (new);\n@@ -1009,8 +1011,16 @@ copy_for_inline (orig)\n       if (! RTX_INTEGRATED_P (x))\n \tabort ();\n \n-      return XEXP (force_const_mem (GET_MODE (x),\n-\t\t\t\t    copy_for_inline (XEXP (x, 0))), 0);\n+      new = force_const_mem (GET_MODE (XEXP (x, 0)),\n+\t\t\t     copy_for_inline (XEXP (XEXP (x, 0), 0)));\n+      new = XEXP (new, 0);\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (new) != GET_MODE (x))\n+\tnew = convert_memory_address (GET_MODE (x), new);\n+#endif\n+\n+      return new;\n \n     case ASM_OPERANDS:\n       /* If a single asm insn contains multiple output operands\n@@ -2335,7 +2345,7 @@ copy_rtx_and_substitute (orig, map)\n \t{\n \t  rtx constant = get_pool_constant (orig);\n \t  if (GET_CODE (constant) == LABEL_REF)\n-\t    return XEXP (force_const_mem (Pmode, \n+\t    return XEXP (force_const_mem (GET_MODE (orig),\n \t\t\t\t\t  copy_rtx_and_substitute (constant,\n \t\t\t\t\t\t\t\t   map)),\n \t\t\t 0);\n@@ -2382,8 +2392,10 @@ copy_rtx_and_substitute (orig, map)\n       if (! RTX_INTEGRATED_P (orig))\n \tabort ();\n \n-      temp = force_const_mem (GET_MODE (orig),\n-\t\t\t      copy_rtx_and_substitute (XEXP (orig, 0), map));\n+      temp\n+\t= force_const_mem (GET_MODE (XEXP (orig, 0)),\n+\t\t\t   copy_rtx_and_substitute (XEXP (XEXP (orig, 0), 0),\n+\t\t\t\t\t\t    map));\n \n #if 0\n       /* Legitimizing the address here is incorrect.\n@@ -2408,7 +2420,14 @@ copy_rtx_and_substitute (orig, map)\n \ttemp = change_address (temp, GET_MODE (temp), XEXP (temp, 0));\n #endif\n \n-      return XEXP (temp, 0);\n+      temp = XEXP (temp, 0);\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (temp) != GET_MODE (orig))\n+\ttemp = convert_memory_address (GET_MODE (orig), temp);\n+#endif\n+\n+      return temp;\n \n     case ASM_OPERANDS:\n       /* If a single asm insn contains multiple output operands\n@@ -2946,8 +2965,16 @@ restore_constants (px)\n     }\n   else if (RTX_INTEGRATED_P (x) && GET_CODE (x) == ADDRESS)\n     {\n-      restore_constants (&XEXP (x, 0));\n-      *px = XEXP (force_const_mem (GET_MODE (x), XEXP (x, 0)), 0);\n+      rtx new = XEXP (force_const_mem (GET_MODE (XEXP (x, 0)),\n+\t\t\t\t       XEXP (XEXP (x, 0), 0)),\n+\t\t      0);\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (new) != GET_MODE (x))\n+\tnew = convert_memory_address (GET_MODE (x), new);\n+#endif\n+\n+      *px = new;\n     }\n   else\n     {"}]}