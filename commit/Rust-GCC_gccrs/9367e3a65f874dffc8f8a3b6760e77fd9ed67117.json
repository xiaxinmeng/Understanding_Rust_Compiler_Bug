{"sha": "9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "node_id": "C_kwDOANBUbNoAKDkzNjdlM2E2NWY4NzRkZmZjOGY4YTNiNjc2MGU3N2ZkOWVkNjcxMTc", "commit": {"author": {"name": "Kewen.Lin", "email": "linkw@gcc.gnu.org", "date": "2022-08-16T05:24:07Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-08-16T05:24:07Z"}, "message": "rs6000: Adjust mov optabs for opaque modes [PR103353]\n\nAs PR103353 shows, we may want to continue to expand built-in\nfunction __builtin_vsx_lxvp, even if we have already emitted\nerror messages about some missing required conditions.  As\nshown in that PR, without one explicit mov optab on OOmode\nprovided, it would call emit_move_insn recursively.\n\nSo this patch is to allow the mov pattern to be generated during\nexpanding phase if compiler has already seen errors.\n\n\tPR target/103353\n\ngcc/ChangeLog:\n\n\t* config/rs6000/mma.md (define_expand movoo): Move TARGET_MMA condition\n\tcheck to preparation statements and add handlings for !TARGET_MMA.\n\t(define_expand movxo): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr103353.c: New test.", "tree": {"sha": "345d19f64aa9ef58719fb6f23abea26654e9a2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/345d19f64aa9ef58719fb6f23abea26654e9a2ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9367e3a65f874dffc8f8a3b6760e77fd9ed67117/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "032f4263cb0bc7f92de6caaa5e918d2ab5b0b956", "filename": "gcc/config/rs6000/mma.md", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9367e3a65f874dffc8f8a3b6760e77fd9ed67117/gcc%2Fconfig%2Frs6000%2Fmma.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9367e3a65f874dffc8f8a3b6760e77fd9ed67117/gcc%2Fconfig%2Frs6000%2Fmma.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmma.md?ref=9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "patch": "@@ -268,10 +268,25 @@\n (define_expand \"movoo\"\n   [(set (match_operand:OO 0 \"nonimmediate_operand\")\n \t(match_operand:OO 1 \"input_operand\"))]\n-  \"TARGET_MMA\"\n+  \"\"\n {\n-  rs6000_emit_move (operands[0], operands[1], OOmode);\n-  DONE;\n+  if (TARGET_MMA)\n+    {\n+      rs6000_emit_move (operands[0], operands[1], OOmode);\n+      DONE;\n+    }\n+  else if (currently_expanding_to_rtl && seen_error ())\n+    {\n+      /* PR103353 shows we may want to continue to expand the __builtin_vsx_lxvp\n+\t built-in function, even if we have already emitted error messages about\n+\t some missing required conditions.  As shown in that PR, without one\n+\t explicit mov optab on OOmode provided, it would call emit_move_insn\n+\t recursively.  So we allow this pattern to be generated when we are\n+\t expanding to RTL and have seen errors.  It would not cause further ICEs\n+\t as the compilation would stop soon after expanding.  */\n+    }\n+  else\n+    gcc_unreachable ();\n })\n \n (define_insn_and_split \"*movoo\"\n@@ -300,10 +315,22 @@\n (define_expand \"movxo\"\n   [(set (match_operand:XO 0 \"nonimmediate_operand\")\n \t(match_operand:XO 1 \"input_operand\"))]\n-  \"TARGET_MMA\"\n+  \"\"\n {\n-  rs6000_emit_move (operands[0], operands[1], XOmode);\n-  DONE;\n+  if (TARGET_MMA)\n+    {\n+      rs6000_emit_move (operands[0], operands[1], XOmode);\n+      DONE;\n+    }\n+  else if (currently_expanding_to_rtl && seen_error ())\n+    {\n+      /* PR103353 shows we may want to continue to expand the __builtin_vsx_lxvp\n+\t built-in function, even if we have already emitted error messages about\n+\t some missing required conditions.  So do the same handlings for XOmode\n+\t as OOmode here.  */\n+    }\n+  else\n+    gcc_unreachable ();\n })\n \n (define_insn_and_split \"*movxo\""}, {"sha": "5d519fb1b7ba3fde934164dffadcc2064fb34ad1", "filename": "gcc/testsuite/gcc.target/powerpc/pr103353.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9367e3a65f874dffc8f8a3b6760e77fd9ed67117/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103353.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9367e3a65f874dffc8f8a3b6760e77fd9ed67117/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103353.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr103353.c?ref=9367e3a65f874dffc8f8a3b6760e77fd9ed67117", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* If the default cpu type is power10 or later, MMA is enabled by default.\n+   To keep the test point available all the time, this case specifies\n+   -mdejagnu-cpu=power6 to make it be tested without MMA.  */\n+/* { dg-options \"-maltivec -mdejagnu-cpu=power6\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on MMA\n+   requirement since they could be fragile and are not test points\n+   of this case.  */\n+/* { dg-excess-errors \"pr103353\" } */\n+\n+void\n+foo (__vector_pair *dst, double *x)\n+{\n+  dst[0] = __builtin_vsx_lxvp (0, (__vector_pair *)(void *)x);\n+}\n+\n+void\n+bar (__vector_pair *src, double *x)\n+{\n+  __builtin_vsx_stxvp (src[0], 0, (__vector_pair *)(void *)x);\n+}"}]}