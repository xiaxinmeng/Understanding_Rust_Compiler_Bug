{"sha": "359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5ZGE2N2Q4YWE3NjYxZTI1ZmZmODRiZmM2NWE0ZmY1MmY3ZDg0Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-03-31T12:41:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-03-31T12:41:03Z"}, "message": "flow.c (find_basic_blocks): New argument `do_cleanup'.\n\n        * flow.c (find_basic_blocks): New argument `do_cleanup'.\n        Conditionally call delete_unreachable_blocks.\n        (free_basic_block_vars): Zero ENTRY/EXIT data.\n        (allocate_for_life_analysis): Kill.  Split into...\n        (allocate_bb_life_data, allocate_reg_life_data): ... new functions.\n        (life_analysis_1): Update.\n        * gcse.c (gcse_main): Update find_basic_blocks call.\n        * toplev.c (rest_of_compilation): Likewise.\n        * stupid.c (stupid_life_analysis): Update life data calls.\n        * rtl.h, output.h: Update prototypes.\n\nFrom-SVN: r26090", "tree": {"sha": "db616f128a966c259f3fcaed1815905fa9d0605d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db616f128a966c259f3fcaed1815905fa9d0605d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/comments", "author": null, "committer": null, "parents": [{"sha": "42493273de48c914e4235c83c586f7aa4b8a0ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42493273de48c914e4235c83c586f7aa4b8a0ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42493273de48c914e4235c83c586f7aa4b8a0ff0"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "29ad2683c86a8f9d0b0ef38cd3c399dd6f0b1fda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -1,3 +1,16 @@\n+Wed Mar 31 12:32:43 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (find_basic_blocks): New argument `do_cleanup'.\n+\tConditionally call delete_unreachable_blocks.\n+\t(free_basic_block_vars): Zero ENTRY/EXIT data.\n+\t(allocate_for_life_analysis): Kill.  Split into...\n+\t(allocate_bb_life_data, allocate_reg_life_data): ... new functions.\n+\t(life_analysis_1): Update.\n+\t* gcse.c (gcse_main): Update find_basic_blocks call.\n+\t* toplev.c (rest_of_compilation): Likewise.\n+\t* stupid.c (stupid_life_analysis): Update life data calls.\n+\t* rtl.h, output.h: Update prototypes.\n+\n Wed Mar 31 12:10:00 1999  Bruce Korb <ddsinc09@ix.netcom.com>\n \n \t* inclhack.def (several): added spaces in tests to ensure"}, {"sha": "0d2f486ab39082136497dec083a72302b3ddc634", "filename": "gcc/flow.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -340,10 +340,11 @@ static void invalidate_mems_from_autoinc\tPROTO ((rtx));\n    numbers in use.  */\n \n void\n-find_basic_blocks (f, nregs, file)\n+find_basic_blocks (f, nregs, file, do_cleanup)\n      rtx f;\n      int nregs ATTRIBUTE_UNUSED;\n      FILE *file ATTRIBUTE_UNUSED;\n+     int do_cleanup;\n {\n   rtx *bb_eh_end;\n   int max_uid;\n@@ -402,9 +403,9 @@ find_basic_blocks (f, nregs, file)\n   make_edges (label_value_list, bb_eh_end);\n \n   /* Delete unreachable blocks.  */\n-  /* ??? Do this conditionally, or make this another entry point?  */\n \n-  delete_unreachable_blocks ();\n+  if (do_cleanup)\n+    delete_unreachable_blocks ();\n \n   /* Mark critical edges.  */\n \n@@ -2097,6 +2098,11 @@ free_basic_block_vars (keep_head_end_p)\n       clear_edges ();\n       VARRAY_FREE (basic_block_info);\n       n_basic_blocks = 0;\n+\n+      ENTRY_BLOCK_PTR->aux = NULL;\n+      ENTRY_BLOCK_PTR->global_live_at_end = NULL;\n+      EXIT_BLOCK_PTR->aux = NULL;\n+      EXIT_BLOCK_PTR->global_live_at_start = NULL;\n     }\n }\n \n@@ -2298,7 +2304,8 @@ life_analysis_1 (f, nregs)\n   /* Allocate and zero out many data structures\n      that will record the data from lifetime analysis.  */\n \n-  allocate_for_life_analysis ();\n+  allocate_reg_life_data ();\n+  allocate_bb_life_data ();\n \n   reg_next_use = (rtx *) alloca (nregs * sizeof (rtx));\n   memset (reg_next_use, 0, nregs * sizeof (rtx));\n@@ -2511,21 +2518,10 @@ life_analysis_1 (f, nregs)\n    of life analysis.  Not static since used also for stupid life analysis.  */\n \n void\n-allocate_for_life_analysis ()\n+allocate_bb_life_data ()\n {\n   register int i;\n \n-  /* Recalculate the register space, in case it has grown.  Old style\n-     vector oriented regsets would set regset_{size,bytes} here also.  */\n-  allocate_reg_info (max_regno, FALSE, FALSE);\n-\n-  /* Because both reg_scan and flow_analysis want to set up the REG_N_SETS\n-     information, explicitly reset it here.  The allocation should have\n-     already happened on the previous reg_scan pass.  Make sure in case\n-     some more registers were allocated.  */\n-  for (i = 0; i < max_regno; i++)\n-    REG_N_SETS (i) = 0;\n-\n   for (i = 0; i < n_basic_blocks; i++)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n@@ -2541,7 +2537,23 @@ allocate_for_life_analysis ()\n     = OBSTACK_ALLOC_REG_SET (function_obstack);\n \n   regs_live_at_setjmp = OBSTACK_ALLOC_REG_SET (function_obstack);\n-  CLEAR_REG_SET (regs_live_at_setjmp);\n+}\n+\n+void\n+allocate_reg_life_data ()\n+{\n+  int i;\n+\n+  /* Recalculate the register space, in case it has grown.  Old style\n+     vector oriented regsets would set regset_{size,bytes} here also.  */\n+  allocate_reg_info (max_regno, FALSE, FALSE);\n+\n+  /* Because both reg_scan and flow_analysis want to set up the REG_N_SETS\n+     information, explicitly reset it here.  The allocation should have\n+     already happened on the previous reg_scan pass.  Make sure in case\n+     some more registers were allocated.  */\n+  for (i = 0; i < max_regno; i++)\n+    REG_N_SETS (i) = 0;\n }\n \n /* Make each element of VECTOR point at a regset.  The vector has"}, {"sha": "dab5ddf34307669ed4437528b7ab86d094f67b26", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -644,7 +644,7 @@ gcse_main (f, file)\n   /* Identify the basic block information for this function, including\n      successors and predecessors.  */\n   max_gcse_regno = max_reg_num ();\n-  find_basic_blocks (f, max_gcse_regno, file);\n+  find_basic_blocks (f, max_gcse_regno, file, 1);\n \n   /* Return if there's nothing to do.  */\n   if (n_basic_blocks <= 1)"}, {"sha": "91708ae7d368363052bfc2cb13650255b0dfccbb", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -128,7 +128,7 @@ extern void allocate_for_life_analysis\tPROTO((void));\n extern int regno_uninitialized\t\tPROTO((int));\n extern int regno_clobbered_at_setjmp\tPROTO((int));\n extern void dump_flow_info\t\tPROTO((FILE *));\n-extern void find_basic_blocks         PROTO((rtx, int, FILE *));\n+extern void find_basic_blocks         PROTO((rtx, int, FILE *, int));\n extern void free_basic_block_vars     PROTO((int));\n extern void set_block_num             PROTO((rtx, int));\n extern void life_analysis             PROTO((rtx, int, FILE *));"}, {"sha": "60eadc556aa48c85fc176c1a3ba3c41d08f9f6a2", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -1438,7 +1438,8 @@ extern void stupid_life_analysis\tPROTO ((rtx, int, FILE *));\n #endif\n \n /* In flow.c */\n-extern void allocate_for_life_analysis\tPROTO ((void));\n+extern void allocate_bb_life_data\tPROTO ((void));\n+extern void allocate_reg_life_data\tPROTO ((void));\n extern void recompute_reg_usage\t\tPROTO ((rtx, int));\n #ifdef BUFSIZ\n extern void dump_flow_info\t\tPROTO ((FILE *));"}, {"sha": "a0368bec3cacb808d8866a17e9dc1289ba44df19", "filename": "gcc/stupid.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -253,7 +253,8 @@ stupid_life_analysis (f, nregs, file)\n   /* Allocate and zero out many data structures\n      that will record the data from lifetime analysis.  */\n \n-  allocate_for_life_analysis ();\n+  allocate_reg_life_data ();\n+  allocate_bb_life_data ();\n \n   for (i = 0; i < max_regno; i++)\n     REG_N_DEATHS (i) = 1;"}, {"sha": "cf2e8f0cb4bc1ba2d63ef41188d387c1111fdc98", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359da67d8aa7661e25fff84bfc65a4ff52f7d84b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=359da67d8aa7661e25fff84bfc65a4ff52f7d84b", "patch": "@@ -3978,7 +3978,7 @@ rest_of_compilation (decl)\n       TIMEVAR\n \t(flow_time,\n \t {\n-\t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n+\t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file, 1);\n \t   life_analysis (insns, max_reg_num (), rtl_dump_file);\n \t });\n \n@@ -4152,7 +4152,7 @@ rest_of_compilation (decl)\n       TIMEVAR\n \t(flow2_time,\n \t {\n-\t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n+\t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file, 1);\n \t   life_analysis (insns, max_reg_num (), rtl_dump_file);\n \t });\n     }"}]}