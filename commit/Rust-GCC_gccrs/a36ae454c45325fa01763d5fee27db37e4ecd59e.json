{"sha": "a36ae454c45325fa01763d5fee27db37e4ecd59e", "node_id": "C_kwDOANBUbNoAKGEzNmFlNDU0YzQ1MzI1ZmEwMTc2M2Q1ZmVlMjdkYjM3ZTRlY2Q1OWU", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-03-03T18:59:24Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-03-03T18:59:24Z"}, "message": "[arm] adjust expectations for armv8_2-fp16-move-[12].c\n\nCommit 3a7ba8fd0cda387809e4902328af2473662b6a4a, a patch for\ntree-ssa-sink, enabled the removal of basic blocks in ways that\naffected the generated code for both of these tests, deviating from\nthe expectations of the tests.\n\nThe simplest case is that of -2, in which the edge unsplitting ends up\nenabling a conditional return rather than a conditional branch to a\nset-and-return block.  That looks like an improvement to me, but the\ncondition in which the branch or the return takes place can be\nreasonably reversed (and, with the current code, it is), I've relaxed\nthe pattern in the test so as to accept reversed and unreversed\nconditions applied to return or branch opcodes.\n\nThe situation in -1 is a little more elaborate: conditional branches\nbased on FP compares in test_select_[78] are initially expanded with\nCCFPE compare-and-cbranch on G{T,E}, but when ce2 turns those into a\ncmove, because now we have a different fallthrough block, the\ncondition is reversed, and that lands us with a compare-and-cmove\nsequence that needs CCFP for UNL{E,T}.  The insn output reverses the\ncondition and swaps the cmove input operands, so the vcmp and vsel\ninsns come out the same except for the missing 'e' (for the compare\nmode) in vcmp, so, since such reversals could have happened to any of\nthe tests depending on legitimate basic block layout, I've combined\nthe vcmp and vcmpe counts.\n\nI see room for improving cmove sequence generation, e.g. trying direct\nand reversed conditions and selecting the cheapest one (which would\nrequire CCFP conditions to be modeled as more expensive than CCFPE),\nor for some other machine-specific (peephole2?) optimization to turn\nCCFP-requiring compare and cmove into CCFPE compare and swapped-inputs\ncmove, but I haven't tried that.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/arm/armv8_2-fp16-move-1.c: Combine vcmp and vcmpe\n\texpected counts into a single pattern.\n\t* gcc.target/arm/armv8_2-fp16-move-2.c: Accept conditional\n\treturn and reversed conditions.", "tree": {"sha": "689c6cfb551772f3e05de8c7b252ccad0436b579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/689c6cfb551772f3e05de8c7b252ccad0436b579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a36ae454c45325fa01763d5fee27db37e4ecd59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36ae454c45325fa01763d5fee27db37e4ecd59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36ae454c45325fa01763d5fee27db37e4ecd59e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36ae454c45325fa01763d5fee27db37e4ecd59e/comments", "author": null, "committer": null, "parents": [{"sha": "cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9cc5a9a5fb0c16532a16b87fbd155037a7ed89"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "444c4a3353555f22828cbbeb6802a3f1a39c9df7", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-move-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36ae454c45325fa01763d5fee27db37e4ecd59e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36ae454c45325fa01763d5fee27db37e4ecd59e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-1.c?ref=a36ae454c45325fa01763d5fee27db37e4ecd59e", "patch": "@@ -196,5 +196,4 @@ test_compare_5 (__fp16 a, __fp16 b)\n /* { dg-final { scan-assembler-not {vcmp\\.f16} } }  */\n /* { dg-final { scan-assembler-not {vcmpe\\.f16} } }  */\n \n-/* { dg-final { scan-assembler-times {vcmp\\.f32} 4 } }  */\n-/* { dg-final { scan-assembler-times {vcmpe\\.f32} 8 } }  */\n+/* { dg-final { scan-assembler-times {vcmpe?\\.f32} 12 } }  */"}, {"sha": "dff57ac8147c2d3f450f7327c6999d2896c9e58c", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-move-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36ae454c45325fa01763d5fee27db37e4ecd59e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36ae454c45325fa01763d5fee27db37e4ecd59e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-move-2.c?ref=a36ae454c45325fa01763d5fee27db37e4ecd59e", "patch": "@@ -8,4 +8,4 @@ test_select (__fp16 a, __fp16 b, __fp16 c)\n {\n   return (a < b) ? b : c;\n }\n-/* { dg-final { scan-assembler \"bmi\" } } */\n+/* { dg-final { scan-assembler \"bx?(mi|pl)\" } } */"}]}