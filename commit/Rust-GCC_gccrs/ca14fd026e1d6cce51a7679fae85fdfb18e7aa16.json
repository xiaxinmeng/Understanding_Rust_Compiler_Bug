{"sha": "ca14fd026e1d6cce51a7679fae85fdfb18e7aa16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExNGZkMDI2ZTFkNmNjZTUxYTc2NzlmYWU4NWZkZmIxOGU3YWExNg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-10-15T13:57:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:57:17Z"}, "message": "sem_disp.adb (Find_Controlling_Arg): Examine the call node before examining its original form...\n\n2007-10-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_disp.adb (Find_Controlling_Arg): Examine the call node before\n\texamining its original form, to handle properly operator calls that\n\thave been rewritten.\n\nFrom-SVN: r129337", "tree": {"sha": "4f1dba856298f6524ce033b13b4fe152243e281e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f1dba856298f6524ce033b13b4fe152243e281e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81db9d770d61ae347a11c79a1f60c134fe729c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81db9d770d61ae347a11c79a1f60c134fe729c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81db9d770d61ae347a11c79a1f60c134fe729c85"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "37eb9ed4196dd81b416b66bd9d347988fdb99e9a", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca14fd026e1d6cce51a7679fae85fdfb18e7aa16/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=ca14fd026e1d6cce51a7679fae85fdfb18e7aa16", "patch": "@@ -1132,9 +1132,21 @@ package body Sem_Disp is\n          return Find_Controlling_Arg (Expression (Orig_Node));\n       end if;\n \n-      --  Dispatching on result case\n+      --  Dispatching on result case. If expansion is disabled, the node still\n+      --  has the structure of a function call. However, if the function name\n+      --  is an operator and the call was given in infix form, the original\n+      --  node has no controlling result and we must examine the current node.\n+\n+      if Nkind (N) = N_Function_Call\n+        and then Present (Controlling_Argument (N))\n+        and then Has_Controlling_Result (Entity (Name (N)))\n+      then\n+         return Controlling_Argument (N);\n \n-      if Nkind (Orig_Node) = N_Function_Call\n+      --  If expansion is enabled, the call may have been transformed into\n+      --  an indirect call, and we need to recover the original node.\n+\n+      elsif Nkind (Orig_Node) = N_Function_Call\n         and then Present (Controlling_Argument (Orig_Node))\n         and then Has_Controlling_Result (Entity (Name (Orig_Node)))\n       then"}]}