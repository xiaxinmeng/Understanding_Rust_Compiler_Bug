{"sha": "88ff8916c7cbbf0810255d8db096fd69cd4d1105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmZjg5MTZjN2NiYmYwODEwMjU1ZDhkYjA5NmZkNjljZDRkMTEwNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:28:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:28:02Z"}, "message": "[multiple changes]\n\n2013-04-11  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Minor clean ups.\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* nlists.ads, nlists.adb, treepr.adb, treepr.ads: Move debugging\n\tfunction p from Nlists to Treepr.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_disp.adb (Check_Dispatching_Context): If the context is\n\ta contract for a null procedure defer error reporting until\n\tpostcondition body is created.\n\t* exp_ch13.adb (Expand_N_Freeze_Entity): If the entity is a\n\tnull procedure, complete the analysis of its contracts so that\n\tcalls within classwide conditions are properly rewritten as\n\tdispatching calls.\n\nFrom-SVN: r197794", "tree": {"sha": "5c62e93600e39467b13c88abd5f5aa9559fe8861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c62e93600e39467b13c88abd5f5aa9559fe8861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ff8916c7cbbf0810255d8db096fd69cd4d1105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ff8916c7cbbf0810255d8db096fd69cd4d1105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ff8916c7cbbf0810255d8db096fd69cd4d1105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ff8916c7cbbf0810255d8db096fd69cd4d1105/comments", "author": null, "committer": null, "parents": [{"sha": "327900c7f5b09f16f9199a425d96c93a2c73cc93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327900c7f5b09f16f9199a425d96c93a2c73cc93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327900c7f5b09f16f9199a425d96c93a2c73cc93"}], "stats": {"total": 144, "additions": 97, "deletions": 47}, "files": [{"sha": "8ac9c7de1c8479f7dabe554ca7d6f9f3c0d2305e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -1,3 +1,22 @@\n+2013-04-11  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor clean ups.\n+\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* nlists.ads, nlists.adb, treepr.adb, treepr.ads: Move debugging\n+\tfunction p from Nlists to Treepr.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Context): If the context is\n+\ta contract for a null procedure defer error reporting until\n+\tpostcondition body is created.\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): If the entity is a\n+\tnull procedure, complete the analysis of its contracts so that\n+\tcalls within classwide conditions are properly rewritten as\n+\tdispatching calls.\n+\n 2013-04-11  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch10.adb, sem_ch12.adb: Minor reformatting."}, {"sha": "ba36805e24fc761ec52866dd5a19a6886d2a3abd", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,6 +43,7 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n@@ -553,6 +554,28 @@ package body Exp_Ch13 is\n                end;\n \n             else\n+               --  If the action is the generated body of a null subprogram,\n+               --  analyze the expressions in its delayed aspects, because we\n+               --  may not have reached the end of the declarative list when\n+               --  delayed aspects are normally analyzed. This ensures that\n+               --  dispatching calls are properly rewritten when the inner\n+               --  postcondition procedure is analyzed.\n+\n+               if Is_Subprogram (E)\n+                 and then Nkind (Parent (E)) = N_Procedure_Specification\n+                 and then Null_Present (Parent (E))\n+               then\n+                  declare\n+                     Prag : Node_Id;\n+                  begin\n+                     Prag := Spec_PPC_List (Contract (E));\n+                     while Present (Prag) loop\n+                        Analyze_PPC_In_Decl_Part (Prag, E);\n+                        Prag := Next_Pragma (Prag);\n+                     end loop;\n+                  end;\n+               end if;\n+\n                Analyze (Decl, Suppress => All_Checks);\n             end if;\n "}, {"sha": "5a456cc0976f5300fb65b16785450e73db3cbf98", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -454,18 +454,6 @@ Stack Related Facilities\n * Static Stack Usage Analysis::\n * Dynamic Stack Usage Analysis::\n \n-Some Useful Memory Pools\n-\n-The GNAT Debug Pool Facility\n-\n-@ifclear vms\n-The gnatmem Tool\n-\n-* Running gnatmem::\n-* Switches for gnatmem::\n-* Example of gnatmem Usage::\n-@end ifclear\n-\n Verifying Properties Using gnatcheck\n \n Sample Bodies Using gnatstub"}, {"sha": "41b5ac2e08c75b3175ac65f422fc8af908ba73bd", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -987,21 +987,6 @@ package body Nlists is\n       return Int (Lists.Last) - Int (Lists.First) + 1;\n    end Num_Lists;\n \n-   -------\n-   -- p --\n-   -------\n-\n-   function p (U : Union_Id) return Node_Or_Entity_Id is\n-   begin\n-      if U in Node_Range then\n-         return Parent (Node_Or_Entity_Id (U));\n-      elsif U in List_Range then\n-         return Parent (List_Id (U));\n-      else\n-         return 99_999_999;\n-      end if;\n-   end p;\n-\n    ------------\n    -- Parent --\n    ------------"}, {"sha": "5fd66ded7ff4c6f063a805aa7225f2fd77c636a8", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -363,12 +363,4 @@ package Nlists is\n    --  These functions return the addresses of the Next_Node and Prev_Node\n    --  tables (used in Back_End for Gigi).\n \n-   function p (U : Union_Id) return Node_Or_Entity_Id;\n-   --  This function is intended for use from the debugger, it determines\n-   --  whether U is a Node_Id or List_Id, and calls the appropriate Parent\n-   --  function and returns the parent Node in either case. This is shorter\n-   --  to type, and avoids the overloading problem of using Parent. It\n-   --  should NEVER be used except from the debugger. If p is called with\n-   --  other than a node or list id value, it returns 99_999_999.\n-\n end Nlists;"}, {"sha": "db266e874ada8f77f299c53150b3c3e55b6bea5b", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -536,6 +536,21 @@ package body Sem_Disp is\n                Set_Entity (Name (N), Alias (Subp));\n                return;\n \n+            --  An obscure special case: a null procedure may have a class-\n+            --  wide pre/postcondition that includes a call to an abstract\n+            --  subp. Calls within the expression may not have been rewritten\n+            --  as dispatching calls yet, because the null body appears in\n+            --  the current declarative part. The expression will be properly\n+            --  rewritten/reanalyzed when the postcondition procedure is built.\n+\n+            elsif In_Spec_Expression\n+              and then Is_Subprogram (Current_Scope)\n+              and then\n+                Nkind (Parent (Current_Scope)) = N_Procedure_Specification\n+              and then Null_Present (Parent (Current_Scope))\n+            then\n+               null;\n+\n             else\n                --  We need to determine whether the context of the call\n                --  provides a tag to make the call dispatching. This requires"}, {"sha": "4de6b8529f1df5b5b91fb4def4d23bafe29f8cd4", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -215,6 +215,27 @@ package body Treepr is\n    --  descendents are to be printed. Prefix_Str is to be added to all\n    --  printed lines.\n \n+   -------\n+   -- p --\n+   -------\n+\n+   function p (N : Union_Id) return Node_Or_Entity_Id is\n+   begin\n+      case N is\n+         when List_Low_Bound .. List_High_Bound - 1 =>\n+            return Nlists.Parent (List_Id (N));\n+\n+         when Node_Range =>\n+            return Atree.Parent (Node_Or_Entity_Id (N));\n+\n+         when others =>\n+            Write_Int (Int (N));\n+            Write_Str (\" is not a Node_Id or List_Id value\");\n+            Write_Eol;\n+            return Empty;\n+      end case;\n+   end p;\n+\n    --------\n    -- pe --\n    --------"}, {"sha": "d33e93bb21eb1a681f47c753ec95225b884be108", "filename": "gcc/ada/treepr.ads", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Ftreepr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ff8916c7cbbf0810255d8db096fd69cd4d1105/gcc%2Fada%2Ftreepr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.ads?ref=88ff8916c7cbbf0810255d8db096fd69cd4d1105", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,16 +62,27 @@ package Treepr is\n \n    --  The following debugging procedures are intended to be called from gdb\n \n+   function p (N : Union_Id) return Node_Or_Entity_Id;\n+   pragma Export (Ada, p);\n+   --  Returns parent of a list or node (depending on the value of N). If N\n+   --  is neither a list nor a node id, then prints a message to that effect\n+   --  and returns Empty.\n+\n+   procedure pn (N : Union_Id);\n+   --  Prints a node, node list, uint, or anything else that falls under\n+   --  the definition of Union_Id. Historically this was only for printing\n+   --  nodes, hence the name.\n+\n    procedure pp (N : Union_Id);\n    pragma Export (Ada, pp);\n-   --  Prints a node, node list, uint, or anything else that falls under\n-   --  Union_Id.\n+   --  Identical to pn, present for historical reasons\n \n    procedure ppp (N : Node_Id);\n    pragma Export (Ada, ppp);\n    --  Same as Print_Node_Subtree\n \n-   --  The following are no longer needed; you can use pp or ppp instead\n+   --  The following are no longer really needed, now that pn will print\n+   --  anything you throw at it!\n \n    procedure pe (E : Elist_Id);\n    pragma Export (Ada, pe);\n@@ -84,10 +95,6 @@ package Treepr is\n    --  on the left and add a minus sign. This just saves some typing in the\n    --  debugger.\n \n-   procedure pn (N : Union_Id);\n-   pragma Export (Ada, pn);\n-   --  Same as pp\n-\n    procedure pt (N : Node_Id);\n    pragma Export (Ada, pt);\n    --  Same as ppp"}]}