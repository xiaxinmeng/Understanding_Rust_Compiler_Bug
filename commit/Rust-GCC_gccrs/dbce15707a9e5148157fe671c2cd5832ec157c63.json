{"sha": "dbce15707a9e5148157fe671c2cd5832ec157c63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjZTE1NzA3YTllNTE0ODE1N2ZlNjcxYzJjZDU4MzJlYzE1N2M2Mw==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2005-03-07T21:14:12Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2005-03-07T21:14:12Z"}, "message": "Various fixes to allow us to again build if --enable-mapped-location:\n\n\t* c-decl.c (finish_function): Use SET_EXPR_LOCATION instead of\n\tunavailable annotate_with_file_line, if USE_MAPPED_LOCATION.\n\t* tree-cfg.c (remove_bb): If USE_MAPPED_LOCATION, change type of\n\tlocal variable loc. Change logic appropriately.\n\t* tree-vect-transform.c (vect_finish_stmt_generation): Use\n\tEXPR_LOCATION rather than EXPR_LOCUS if USE_MAPPED_LOCATION.\n\t* c-parser.c (c_parser_for_statement): Initialize loc variable.\n\t* tree.h (DECL_IS_BUILTIN): Temporarily revert definition of\n\tDECL_IS_BUILTIN in the USE_MAPPED_LOCATION because of jc1 issues.\n\nFrom-SVN: r96045", "tree": {"sha": "413d97c6eb6d9cb6750a5233f116bf870414d6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/413d97c6eb6d9cb6750a5233f116bf870414d6b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbce15707a9e5148157fe671c2cd5832ec157c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbce15707a9e5148157fe671c2cd5832ec157c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbce15707a9e5148157fe671c2cd5832ec157c63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbce15707a9e5148157fe671c2cd5832ec157c63/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2da2c9a68c574b4598768ff414d8b19ccc34f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2da2c9a68c574b4598768ff414d8b19ccc34f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2da2c9a68c574b4598768ff414d8b19ccc34f3c"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "dc3a09efc8484613ebcacf6076a18d02d1e8132b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -1,3 +1,16 @@\n+2005-03-07  Per Bothner  <per@bothner.com>\n+\n+\tVarious fixes to allow us to again build if --enable-mapped-location:\n+\t* c-decl.c (finish_function): Use SET_EXPR_LOCATION instead of\n+\tunavailable annotate_with_file_line, if USE_MAPPED_LOCATION.\n+\t* tree-cfg.c (remove_bb): If USE_MAPPED_LOCATION, change type of\n+\tlocal variable loc. Change logic appropriately.\n+\t* tree-vect-transform.c (vect_finish_stmt_generation): Use\n+\tEXPR_LOCATION rather than EXPR_LOCUS if USE_MAPPED_LOCATION.\t\n+\t* c-parser.c (c_parser_for_statement): Initialize loc variable.\n+\t* tree.h (DECL_IS_BUILTIN): Temporarily revert definition of\n+\tDECL_IS_BUILTIN in the USE_MAPPED_LOCATION because of jc1 issues.\n+\n 2005-03-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR rtl-optimization/19683"}, {"sha": "42f8bad4254ab1d64b402c6618135b587c499498", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -6335,7 +6335,11 @@ finish_function (void)\n \t      /* Hack.  We don't want the middle-end to warn that this\n \t\t return is unreachable, so put the statement on the\n \t\t special line 0.  */\n+#ifdef USE_MAPPED_LOCATION\n+\t      SET_EXPR_LOCATION (stmt, UNKNOWN_LOCATION);\n+#else\n \t      annotate_with_file_line (stmt, input_filename, 0);\n+#endif\n \t    }\n \t}\n     }"}, {"sha": "94874226514c04b87525f10e0e4f5b71cd97f7fc", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -3760,7 +3760,7 @@ static void\n c_parser_for_statement (c_parser *parser)\n {\n   tree block, cond, incr, save_break, save_cont, body;\n-  location_t loc;\n+  location_t loc = UNKNOWN_LOCATION;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_FOR));\n   c_parser_consume_token (parser);\n   block = c_begin_compound_stmt (flag_isoc99);"}, {"sha": "205b5c0e82e7a57019d9184bba51f5a9bf531cde", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -2013,7 +2013,11 @@ static void\n remove_bb (basic_block bb)\n {\n   block_stmt_iterator i;\n+#ifdef USE_MAPPED_LOCATION\n+  source_location loc = UNKNOWN_LOCATION;\n+#else\n   source_locus loc = 0;\n+#endif\n \n   if (dump_file)\n     {\n@@ -2052,26 +2056,27 @@ remove_bb (basic_block bb)\n \t program that are indeed unreachable.  */\n       if (TREE_CODE (stmt) != GOTO_EXPR && EXPR_HAS_LOCATION (stmt) && !loc)\n \t{\n-\t  source_locus t;\n-\n #ifdef USE_MAPPED_LOCATION\n-\t  t = EXPR_LOCATION (stmt);\n+\t  if (EXPR_HAS_LOCATION (stmt))\n+\t    loc = EXPR_LOCATION (stmt);\n #else\n+\t  source_locus t;\n \t  t = EXPR_LOCUS (stmt);\n-#endif\n \t  if (t && LOCATION_LINE (*t) > 0)\n \t    loc = t;\n+#endif\n \t}\n     }\n \n   /* If requested, give a warning that the first statement in the\n      block is unreachable.  We walk statements backwards in the\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n-  if (warn_notreached && loc)\n #ifdef USE_MAPPED_LOCATION\n+  if (warn_notreached && loc != UNKNOWN_LOCATION)\n     warning (\"%Hwill never be executed\", &loc);\n #else\n+  if (warn_notreached && loc)\n     warning (\"%Hwill never be executed\", loc);\n #endif\n "}, {"sha": "891387a37a2cfa4e4a35165b88ae0af3acba18e6", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -661,7 +661,7 @@ vect_finish_stmt_generation (tree stmt, tree vec_stmt, block_stmt_iterator *bsi)\n #endif\n \n #ifdef USE_MAPPED_LOCATION\n-  SET_EXPR_LOCATION (vec_stmt, EXPR_LOCUS (stmt));\n+  SET_EXPR_LOCATION (vec_stmt, EXPR_LOCATION (stmt));\n #else\n   SET_EXPR_LOCUS (vec_stmt, EXPR_LOCUS (stmt));\n #endif"}, {"sha": "34394f13eeb1fd1746eb2ee720302b2e34607c18", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbce15707a9e5148157fe671c2cd5832ec157c63/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dbce15707a9e5148157fe671c2cd5832ec157c63", "patch": "@@ -1952,7 +1952,11 @@ struct tree_binfo GTY (())\n #define DECL_SOURCE_LOCATION(NODE) (DECL_CHECK (NODE)->decl.locus)\n #define DECL_SOURCE_FILE(NODE) LOCATION_FILE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_SOURCE_LINE(NODE) LOCATION_LINE (DECL_SOURCE_LOCATION (NODE))\n-#ifdef USE_MAPPED_LOCATION\n+#if 0\n+/* Should be: #ifdef USE_MAPPED_LOCATION\n+   However, there appears to be a jc1 bug that this would expose.\n+   (It prevents bookstrapping because dwarf2out tries to emit a\n+   non-found class.) FIXME. */\n #define DECL_IS_BUILTIN(DECL) \\\n   (DECL_SOURCE_LOCATION (DECL) <= BUILTINS_LOCATION)\n #else"}]}