{"sha": "435bcccda66129794b2a60c627c83cbe9d0c4de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1YmNjY2RhNjYxMjk3OTRiMmE2MGM2MjdjODNjYmU5ZDBjNGRlMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-20T23:29:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-20T23:29:10Z"}, "message": "compiler: Handle _ with explicit type correctly.\n\nFrom-SVN: r183358", "tree": {"sha": "45ad88a8af609cae499c56deb69918d423c12114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ad88a8af609cae499c56deb69918d423c12114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435bcccda66129794b2a60c627c83cbe9d0c4de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435bcccda66129794b2a60c627c83cbe9d0c4de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435bcccda66129794b2a60c627c83cbe9d0c4de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435bcccda66129794b2a60c627c83cbe9d0c4de1/comments", "author": null, "committer": null, "parents": [{"sha": "82294ec1a9a71e57dc4821649643026d27860701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82294ec1a9a71e57dc4821649643026d27860701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82294ec1a9a71e57dc4821649643026d27860701"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "49e42de7738b2b3218dee9e2379024d97b06d414", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435bcccda66129794b2a60c627c83cbe9d0c4de1/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435bcccda66129794b2a60c627c83cbe9d0c4de1/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=435bcccda66129794b2a60c627c83cbe9d0c4de1", "patch": "@@ -1883,10 +1883,23 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n     {\n       if (!type_from_init && init != NULL)\n \t{\n-\t  if (!this->gogo_->in_global_scope())\n+\t  if (this->gogo_->in_global_scope())\n+\t    return this->create_dummy_global(type, init, location);\n+\t  else if (type == NULL)\n \t    this->gogo_->add_statement(Statement::make_statement(init, true));\n \t  else\n-\t    return this->create_dummy_global(type, init, location);\n+\t    {\n+\t      // With both a type and an initializer, create a dummy\n+\t      // variable so that we will check whether the\n+\t      // initializer can be assigned to the type.\n+\t      Variable* var = new Variable(type, init, false, false, false,\n+\t\t\t\t\t   location);\n+\t      static int count;\n+\t      char buf[30];\n+\t      snprintf(buf, sizeof buf, \"sink$%d\", count);\n+\t      ++count;\n+\t      return this->gogo_->add_variable(buf, var);\n+\t    }\n \t}\n       return this->gogo_->add_sink();\n     }"}]}