{"sha": "11f10e6b1f34001a5abd7b0046c28610b058b1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmMTBlNmIxZjM0MDAxYTVhYmQ3YjAwNDZjMjg2MTBiMDU4YjFmZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-09-23T20:03:30Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-09-23T20:03:30Z"}, "message": "locale_facets.tcc: Tweak to avoid warnings.\n\n\n2003-09-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc: Tweak to avoid warnings.\n\t* testsuite/testsuite_hooks.h: Same.\n\t* testsuite/*/*.cc: Same.\n\nFrom-SVN: r71693", "tree": {"sha": "743380001d2341c199e3740ca7296f1783cef17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743380001d2341c199e3740ca7296f1783cef17c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f10e6b1f34001a5abd7b0046c28610b058b1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f10e6b1f34001a5abd7b0046c28610b058b1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f10e6b1f34001a5abd7b0046c28610b058b1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f10e6b1f34001a5abd7b0046c28610b058b1ff/comments", "author": null, "committer": null, "parents": [{"sha": "1593ad2eddcadbfcefe8ff4abecffb724d71aedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1593ad2eddcadbfcefe8ff4abecffb724d71aedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1593ad2eddcadbfcefe8ff4abecffb724d71aedb"}], "stats": {"total": 3605, "additions": 1309, "deletions": 2296}, "files": [{"sha": "224cc60d3a32ee9e8ca4d14022aa69d92d86368a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,3 +1,9 @@\n+2003-09-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc: Tweak to avoid warnings.\n+\t* testsuite/testsuite_hooks.h: Same.\n+\t* testsuite/*/*.cc: Same.\n+\n 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n \n \t* include/bits/istream.tcc (basic_istream::read,"}, {"sha": "f0e41123e771046ea8023f3bcd1eb5caf45a3614", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -105,7 +105,7 @@ namespace std\n \tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n \tif (!__caches[__i])\n \t  {\n-\t    __numpunct_cache<_CharT>* __tmp;\n+\t    __numpunct_cache<_CharT>* __tmp = NULL;\n \t    try\n \t      {\n \t\t__tmp = new __numpunct_cache<_CharT>;"}, {"sha": "a8d19cf722bcebce941ff1092c6495be14fe11b3", "filename": "libstdc++-v3/testsuite/17_intro/header_cerrno.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cerrno.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cerrno.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cerrno.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,12 +24,13 @@\n \n namespace gnu\n {\n-  void test01()\n+  int test01()\n   { \n     int i = errno;\n #ifndef errno\n     #error \"errno_must_be_a_macro\"\n #endif\n+    return i;\n   }\n }\n   "}, {"sha": "35b1ceef32d8a9b6fe8f5082318bef4cf26cbd1e", "filename": "libstdc++-v3/testsuite/17_intro/header_ciso646.cc", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1593ad2eddcadbfcefe8ff4abecffb724d71aedb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1593ad2eddcadbfcefe8ff4abecffb724d71aedb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc?ref=1593ad2eddcadbfcefe8ff4abecffb724d71aedb", "patch": "@@ -1,119 +0,0 @@\n-// 1999-05-20 bkoz\n-\n-// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 17.4.1.2 Headers, ciso646\n-\n-// { dg-do link }\n-\n-#include <ciso646>\n-#include <testsuite_hooks.h>\n-\n-\n-// 2.11 Keywords\n-// alternative representations\n-// and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, xor_eq\n-\n-// C 2.2.2 Header <iso646.h> \n-// The tokens (as above) are keywords and do not appear as macros in <ciso646>.\n-\n-// Test for macros.\n-bool test01() \n-{\n-  bool test = true;\n-\n-#if 0\n-\n-#ifdef and\n-  test = false;\n-#endif\n-\n-#ifdef and_eq\n-  test = false;\n-#endif\n-\n-#ifdef bitand\n-  test = false;\n-#endif\n-\n-#ifdef bitor\n-  test = false;\n-#endif\n-\n-#ifdef compl\n-  test = false;\n-#endif\n-\n-#ifdef not_eq\n-  test = false;\n-#endif\n-\n-#ifdef not_or\n-  test = false;\n-#endif\n-\n-#ifdef or\n-  test = false;\n-#endif\n-\n-#ifdef or_eq\n-  test = false;\n-#endif\n-\n-#ifdef xor\n-  test = false;\n-#endif\n-\n-#ifdef xor_eq\n-  test = false;\n-#endif\n-\n-#endif\n-\n-  return test;\n-}\n-\n-\n-// Equivalance in usage.\n-bool test02()\n-{\n-  bool test = true;\n-\n-  bool arg1 = true;\n-  bool arg2 = false;\n-  int  int1 = 45;\n-  int  int2 = 0;\n-  \n-  VERIFY( arg1 && int1 );\n-  VERIFY( arg1 and int1 );\n-\n-  VERIFY( (arg1 && arg2) == (arg1 and arg2) );\n-  VERIFY( (arg1 && int1) == (arg1 and int1) );\n-\n-  return test;\n-}\n-\n-\n-int main(void)\n-{\n-  test01();\n-  test02();\n-\n-  return 0;\n-}"}, {"sha": "1cbb630e752ec5923623cc4fc34866bd12106023", "filename": "libstdc++-v3/testsuite/17_intro/header_csetjmp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_csetjmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_csetjmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_csetjmp.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,7 +27,7 @@ namespace gnu\n   void test01()\n   { \n     std::jmp_buf env;\n-    int i = setjmp(env);\n+    int i __attribute__((unused)) = setjmp(env);\n #ifndef setjmp\n     #error \"setjmp_must_be_a_macro\"\n #endif"}, {"sha": "9e82930976eb8d4606743cc520e25f61aec19d12", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdarg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdarg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdarg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdarg.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@ namespace gnu\n {\n   void test01()\n   { \n-    std::va_list list;\n+    std::va_list __attribute__((unused)) list;\n #ifndef va_arg\n     #error \"va_arg_must_be_a_macro\"\n #endif"}, {"sha": "69f83f07f3a69090ebff3d2f195226435e03c53e", "filename": "libstdc++-v3/testsuite/17_intro/header_cstddef.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstddef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstddef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstddef.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-02-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,7 +32,7 @@ namespace gnu\n \n   void test01()\n   { \n-    std::size_t i = offsetof(struct test_type, i);\n+    std::size_t i __attribute__((unused)) = offsetof(struct test_type, i);\n #ifndef offsetof\n     #error \"offsetof_must_be_a_macro\"\n #endif"}, {"sha": "a7be009f9c4eb7680c6394b5a64c626fa8c8b228", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdio.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdio.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,6 +25,6 @@\n int main(void)\n {\n   // Make sure size_t is in namespace std\n-  std::size_t i = 5;\n+  std::size_t i __attribute__((unused)) = 5;\n   return 0;\n }"}, {"sha": "377bd60ace4801650c4fe675bfd82ad5f6d5d5be", "filename": "libstdc++-v3/testsuite/17_intro/header_cstdlib.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstdlib.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,15 +25,15 @@\n // libstdc++/2190\n void test01()\n {\n-  long a = std::abs(1L);\n+  long a __attribute__((unused)) = std::abs(1L);\n   std::div(2L, 1L);\n-  std::ldiv_t b;\n+  std::ldiv_t b __attribute__((unused));\n }\n \n void test02()\n {\n   // Make sure size_t is in namespace std.\n-  std::size_t i = 5;\n+  std::size_t i __attribute__((unused)) = 5;\n }\n \n int main()"}, {"sha": "3085763954b2a33e4c3e197a378b25f8a4a5d337", "filename": "libstdc++-v3/testsuite/17_intro/header_cstring.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cstring.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,6 +26,6 @@\n int main(void)\n {\n   // Make sure size_t is in namespace std\n-  std::size_t i = std::strlen(\"tibet shop/san francisco (415) 982-0326\");\n+  std::size_t i __attribute__((unused)) = std::strlen(\"tibet shop/san francisco (415) 982-0326\");\n   return 0;\n }"}, {"sha": "1b97d645ec7116a37a1c6ecad6cd9ee72f690fc7", "filename": "libstdc++-v3/testsuite/17_intro/header_ctime.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ctime.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,10 +22,9 @@\n \n #include <ctime>\n \n-\n int main(void)\n {\n   // Make sure size_t is in namespace std\n-  std::size_t i = 5;\n+  std::size_t i __attribute__((unused)) = 5;\n   return 0;\n }"}, {"sha": "dc2eefe14319077904cff8fae4467aae369ac293", "filename": "libstdc++-v3/testsuite/17_intro/header_cwchar.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_cwchar.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-01 bkoz\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,9 +25,9 @@\n int main(void)\n {\n   // Make sure size_t is in namespace std\n-  std::size_t i = 5;\n+  std::size_t i __attribute__((unused)) = 5;\n \n-  std::tm mytime;\n+  std::tm  __attribute__((unused)) mytime;\n \n   return 0;\n }"}, {"sha": "a96cdf55453fda478f00d9aaf01f192cec036787", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -62,7 +62,7 @@ DEFINE_EXTREMA(long double, LDBL_MIN, LDBL_MAX);\n template<typename T>\n void test_extrema()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   T limits_min = std::numeric_limits<T>::min();\n   T limits_max = std::numeric_limits<T>::max();\n   T extrema_min = extrema<T>::min;\n@@ -74,7 +74,7 @@ void test_extrema()\n template<typename T>\n void test_epsilon()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   T epsilon = std::numeric_limits<T>::epsilon();\n   T one = 1;\n \n@@ -89,7 +89,7 @@ void test_epsilon()\n \n void test_sign()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   VERIFY( std::numeric_limits<char>::is_signed == char_is_signed );\n   VERIFY( std::numeric_limits<signed char>::is_signed == true );\n   VERIFY( std::numeric_limits<unsigned char>::is_signed == false );\n@@ -200,7 +200,7 @@ struct B\n \n bool test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::numeric_limits< A<B> > obj;\n \n   VERIFY( !obj.is_specialized );\n@@ -244,16 +244,16 @@ void test02()\n   typedef std::numeric_limits<B> b_nl_type;\n   \n   // Should probably do all of them...\n-  const int* pi1 = &b_nl_type::digits;\n-  const int* pi2 = &b_nl_type::digits10;\n-  const int* pi3 = &b_nl_type::max_exponent10;\n-  const bool* pb1 = &b_nl_type::traps;\n+  const int* __attribute__((unused)) pi1 = &b_nl_type::digits;\n+  const int* __attribute__((unused)) pi2 = &b_nl_type::digits10;\n+  const int* __attribute__((unused)) pi3 = &b_nl_type::max_exponent10;\n+  const bool* __attribute__((unused)) pb1 = &b_nl_type::traps;\n }\n \n // libstdc++/5045\n bool test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   VERIFY( std::numeric_limits<bool>::digits10 == 0 );\n   if (__CHAR_BIT__ == 8)\n@@ -282,7 +282,7 @@ bool test03()\n // libstdc++/8949\n bool test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   VERIFY( !std::numeric_limits<short>::is_iec559 );\n   VERIFY( !std::numeric_limits<unsigned short>::is_iec559 );"}, {"sha": "30595f0f76a0e7e0c9d3ee565e67be3f7fbfe908", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexceptions.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexceptions.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n // libstdc++/1972\n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string s(\"lack of sunlight, no water error\");\n \n   // 1\n@@ -41,7 +41,7 @@ void test01()\n \n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string s(\"lack of sunlight error\");\n   std::domain_error x(s);\n   \n@@ -57,7 +57,7 @@ class fuzzy_logic : public std::logic_error\n \n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   try\n     { throw fuzzy_logic(); }\n   catch(const fuzzy_logic& obj)\n@@ -78,7 +78,7 @@ void allocate_on_stack(void)\n }\n void test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::string s(\"CA ISO emergency once again:immediate power down\");\n   const char* strlit1 = \"wish I lived in Palo Alto\";\n   const char* strlit2 = \"...or Santa Barbara\";"}, {"sha": "4170a9d9a966c1ca039600fbd86b2d98a9ab98fe", "filename": "libstdc++-v3/testsuite/20_util/allocator_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_members.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -45,7 +45,7 @@ void operator delete(void *v) throw()\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::allocator<gnu> obj;\n \n   // XXX These should work for various size allocation and\n@@ -61,7 +61,7 @@ void test01()\n // libstdc++/8230\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   try \n     {\n       std::allocator<int> alloc;"}, {"sha": "110d4b2d4bf055a20838979be58fc48a5faa8f6b", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,8 +60,8 @@ struct reset_count_struct\n int\n test01()\n {\n-  reset_count_struct reset;\n-  bool test = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n \n   std::auto_ptr<A> A_default;\n   VERIFY( A_default.get() == 0 );\n@@ -91,8 +91,8 @@ test01()\n int\n test02()\n {\n-  reset_count_struct reset;\n-  bool test = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n \n   std::auto_ptr<A> A_from_A(new A);\n   std::auto_ptr<B> B_from_B(new B);\n@@ -115,8 +115,8 @@ test02()\n int\n test03()\n {\n-  reset_count_struct reset;\n-  bool test = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n \n   std::auto_ptr<A> A_from_ptr_A;\n   std::auto_ptr<A> A_from_ptr_B;\n@@ -141,8 +141,8 @@ test03()\n int\n test04()\n {\n-  reset_count_struct reset;\n-  bool test = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n \n   {/*lifetine scope*/\n     std::auto_ptr<A> A_from_A(new A);\n@@ -171,8 +171,8 @@ class pimpl\n int \n test05()\n {\n-  bool test = true;\n-  reset_count_struct reset;\n+  bool test __attribute__((unused)) = true;\n+  reset_count_struct __attribute__((unused)) reset;\n \n   pimpl<A>();\n   pimpl<B>();\n@@ -190,8 +190,8 @@ test05()\n int\n test06()\n {\n-  reset_count_struct reset;\n-  bool test = true;\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n \n   std::auto_ptr<A> A_from_A(new A);\n   std::auto_ptr<A> A_from_A_ptr(A_from_A.release());\n@@ -231,8 +231,8 @@ static void drain(std::auto_ptr<T>)\n int\n test07()\n {\n-  bool test = true;\n-  reset_count_struct reset;\n+  bool test __attribute__((unused)) = true;\n+  reset_count_struct __attribute__((unused)) reset;\n \n   drain(source<A>());\n   // The resolution of core issue 84, now a DR, breaks this call."}, {"sha": "a12d3b68146327b13d3b4b8b8a635e6957ba82f5", "filename": "libstdc++-v3/testsuite/20_util/binders.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbinders.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,8 +27,8 @@\n class Elem \n { \n public: \n-  void print(int i) const { } \n-  void modify(int i) { } \n+  void print(int) const { } \n+  void modify(int) { } \n }; \n \n // libstdc++/3113"}, {"sha": "085937f435fc2db524f114109d831c8fd12316b0", "filename": "libstdc++-v3/testsuite/20_util/pairs.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpairs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpairs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpairs.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -46,7 +46,7 @@ template<typename T>\n // heterogeneous\n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::pair<bool, long> p_bl_1(true, 433);\n   std::pair<bool, long> p_bl_2 = std::make_pair(true, 433);\n@@ -75,7 +75,7 @@ void test01()\n // homogeneous\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::pair<bool, bool> p_bb_1(true, false);\n   std::pair<bool, bool> p_bb_2 = std::make_pair(true, false);\n@@ -87,7 +87,7 @@ void test02()\n // const\n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   const std::pair<bool, long> p_bl_1(true, 433);\n   const std::pair<bool, long> p_bl_2 = std::make_pair(true, 433);\n@@ -116,7 +116,7 @@ void test03()\n // const&\n void test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const gnu_obj& obj1 = gnu_obj(5);\n   const std::pair<const char*, gnu_obj> p_sg_1(\"enlightenment\", obj1);\n   const std::pair<const char*, gnu_obj> p_sg_2 = "}, {"sha": "c79e5400581268dbc24414fa17c29abb42103264", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,6 +1,6 @@\n // 2001-06-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,7 +31,7 @@ void test01()\n   typedef raw_storage_iterator<long*, long> test_iterator;\n   typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n   test_iterator rs_it(&l);\n-  base_iterator* base = &rs_it;\n+  base_iterator* base __attribute__((unused)) = &rs_it;\n \n   // Check for required typedefs\n   typedef test_iterator::value_type value_type;"}, {"sha": "e83a82efcf885508ae851f3ad173dd93291625d1", "filename": "libstdc++-v3/testsuite/20_util/temporary_buffer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftemporary_buffer.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ struct junk { char j[12]; };\n \n int main(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::pair<junk*,ptrdiff_t>  results = std::get_temporary_buffer<junk>(5);\n "}, {"sha": "8fd48e555b99ad87c9ed037c03456f4163ce1ab6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/char/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,12 +26,11 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const char str_lit01[] = \"point bolivar, texas\";\n   const std::string str01(str_lit01);"}, {"sha": "194e09d21841c9a562389c222bf76ac53f223ecc", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/append/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fappend%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,12 +26,11 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const wchar_t str_lit01[] = L\"point bolivar, texas\";\n   const std::wstring str01(str_lit01);"}, {"sha": "1aa8a67809d0bb3449a2ad270a793803c554395f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void\n test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n "}, {"sha": "9635b1b47ffc71993779f47fe7c2005b5435b05d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void\n test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n   "}, {"sha": "0c08fe7c72e362fd31f2bafce75afbe703e2e3ea", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n void\n test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n  "}, {"sha": "377e35bf7b52944b818366db258b50f6475303b9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void\n test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n "}, {"sha": "7064d1f935f41fe1451a7f518c76c0130e50361a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void\n test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n   "}, {"sha": "0d46ebe653d6abcd3a329b5242ebac79d4bb7c68", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/assign/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fassign%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n void\n test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   using namespace std;\n  "}, {"sha": "c37e01fb04644b5c974751a3ebaeed31aa8eced2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -125,7 +125,7 @@ namespace std\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // non POD types : resize, capacity, reserve\n   std::basic_string< A<B> > str02;\n@@ -140,7 +140,7 @@ void test01()\n   VERIFY( sz04 >= 100 );\n   str02.reserve();\n   sz03 = str02.capacity();\n-  VERIFY( sz03 >= 0 );\n+  VERIFY( sz03 > 0 );\n \n   sz03 = str02.size() + 5;\n   str02.resize(sz03);"}, {"sha": "649c5418ba6cd21260c2222cb8d94f40c98d7258", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/1.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n void test01()\n {\n   // POD types : resize, capacity, reserve\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string str01;\n   typedef std::string::size_type size_type_s;\n \n@@ -37,7 +37,7 @@ void test01()\n   VERIFY( sz02 >= 100 );\n   str01.reserve();\n   sz01 = str01.capacity();\n-  VERIFY( sz01 >= 0 );\n+  VERIFY( sz01 > 0 );\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);\n@@ -79,9 +79,7 @@ void test01()\n     \n   // trickster allocator issues involved with these:\n   std::string str3 = \"8-chars_8-chars_\";\n-  const char* p3 = str3.c_str();\n   std::string str4 = str3 + \"7-chars\";\n-  const char* p4 = str3.c_str();\n   \n   sz01 = str01.size();\n   sz02 = str01.max_size();  "}, {"sha": "b88597486bdd39792cd69732f6df1fd9c3fb64bb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n // http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::string str01 = \"twelve chars\";\n   // str01 becomes shared"}, {"sha": "f10a25578a01acb3f2a91dcf6449a1c21e78c6c5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n void test01()\n {\n   // POD types : resize, capacity, reserve\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring str01;\n   typedef std::wstring::size_type size_type_s;\n \n@@ -37,7 +37,7 @@ void test01()\n   VERIFY( sz02 >= 100 );\n   str01.reserve();\n   sz01 = str01.capacity();\n-  VERIFY( sz01 >= 0 );\n+  VERIFY( sz01 > 0 );\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);\n@@ -79,9 +79,7 @@ void test01()\n     \n   // trickster allocator issues involved with these:\n   std::wstring str3 = L\"8-chars_8-chars_\";\n-  const wchar_t* p3 = str3.c_str();\n   std::wstring str4 = str3 + L\"7-chars\";\n-  const wchar_t* p4 = str3.c_str();\n   \n   sz01 = str01.size();\n   sz02 = str01.max_size();  "}, {"sha": "e611567ecd5e24316b24e1b09838a17ebe3975f4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n // http://gcc.gnu.org/ml/libstdc++/2001-11/msg00150.html\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::wstring str01 = L\"twelve chars\";\n   // str01 becomes shared"}, {"sha": "996f8ad0d32bffa9178988284a895f5ee8ca525a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,11 +27,11 @@\n \n void test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::iterator citerator;\n   csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const char str_lit01[] = \"rodeo beach, marin\";\n   const std::string str01(str_lit01);"}, {"sha": "85c82ba78cf157866e30987cb01c238f32f98fed", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // template<typename _InputIter>\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)"}, {"sha": "fc86271d0bc05b4da4a8e89ca71359345510b371", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n \n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char* with_nulls = \"This contains \\0 a zero byte.\";\n \n   // These are tests to see how basic_string handles data with NUL"}, {"sha": "020eff6f229f02fa3a77a4c3990fee3112b07b2a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n // http://gcc.gnu.org/ml/libstdc++/2002-06/msg00025.html\n void test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::string str01(\"portofino\");\n "}, {"sha": "0aecd998e337b3eb39b9dda8671787a06b850c69", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n // libstdc++/8347\n void test05()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::vector<char> empty;\n   std::string empty2(empty.begin(), empty.end());"}, {"sha": "45715fd5c14f80c87e9cd42ac5d9cf9cdddca98e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,11 +27,11 @@\n \n void test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::iterator citerator;\n   csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const wchar_t str_lit01[] = L\"rodeo beach, marin\";\n   const std::wstring str01(str_lit01);"}, {"sha": "c7b6422675aa143248bd5524c0ba134cc8602565", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // template<typename _InputIter>\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)"}, {"sha": "882e22c59df1c838a6ded136cab1f08f4f8bc984", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n \n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const wchar_t* with_nulls = L\"This contains \\0 a zero byte.\";\n \n   // These are tests to see how basic_string handles data with NUL"}, {"sha": "9140ff759e4b0656e26611c53dbef9bffc4e5dbd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n // http://gcc.gnu.org/ml/libstdc++/2002-06/msg00025.html\n void test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::wstring str01(L\"portofino\");\n "}, {"sha": "a426f292c8882417a16d2dc1b188808ae89c0b86", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n // libstdc++/8347\n void test05()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::vector<wchar_t> empty;\n   std::wstring empty2(empty.begin(), empty.end());"}, {"sha": "556039e6e1ddbb77e5e183ae3de8ce6f5edfdb09", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,11 +26,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n   csize_type csz01, csz02;\n \n   const std::string str01(\"tamarindo, costa rica\");\n@@ -56,7 +55,7 @@ bool test01(void)\n   cref cref3 = str01.at(csz01 - 1);\n   VERIFY( cref3 == 'a' );\n   try {\n-    cref cref4 = str01.at(csz01);\n+    str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n@@ -71,7 +70,7 @@ bool test01(void)\n   ref ref3 = str02.at(csz02 - 1);\n   VERIFY( ref3 == 'a' );\n   try {\n-    ref ref4 = str02.at(csz02);\n+    str02.at(csz02);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {"}, {"sha": "34c1772d4ceb59819ad6d6083a3c2e558ebc5f0f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,11 +29,10 @@\n // underlying string implementation, of course.\n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::iterator siterator;\n   typedef std::string::reverse_iterator sriterator;\n-  csize_type npos = std::string::npos;\n   csize_type csz01, csz02;\n   siterator it1;\n   sriterator rit1;  "}, {"sha": "fec27bb5ef2b3dfd47f193a8f8f321aa5eefb924", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/3.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,12 +28,10 @@\n // iterators, namely insert and erase.\n bool test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::iterator siterator;\n   typedef std::string::reverse_iterator sriterator;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n   siterator it1;\n   sriterator rit1;  \n "}, {"sha": "11f5921eda2418c0f5d427c729aece529756b74d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,11 +26,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n   csize_type csz01, csz02;\n \n   const std::wstring str01(L\"tamarindo, costa rica\");\n@@ -56,7 +55,7 @@ bool test01(void)\n   cref cref3 = str01.at(csz01 - 1);\n   VERIFY( cref3 == L'a' );\n   try {\n-    cref cref4 = str01.at(csz01);\n+    str01.at(csz01);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n@@ -71,7 +70,7 @@ bool test01(void)\n   ref ref3 = str02.at(csz02 - 1);\n   VERIFY( ref3 == L'a' );\n   try {\n-    ref ref4 = str02.at(csz02);\n+    str02.at(csz02);\n     VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {"}, {"sha": "a8e86fbf5822366a5196dcbe21ef989d919f6d8c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,11 +29,10 @@\n // underlying string implementation, of course.\n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::iterator siterator;\n   typedef std::wstring::reverse_iterator sriterator;\n-  csize_type npos = std::wstring::npos;\n   csize_type csz01, csz02;\n   siterator it1;\n   sriterator rit1;  "}, {"sha": "defd0875a8bbb709116fd5bbb90fb4ee926d0dd9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,12 +28,10 @@\n // iterators, namely insert and erase.\n bool test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::iterator siterator;\n   typedef std::wstring::reverse_iterator sriterator;\n-  csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n   siterator it1;\n   sriterator rit1;  \n "}, {"sha": "485ef4f1fc1128d2caeda56ea44f97195702e383", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;"}, {"sha": "6874f833ea58f37626c1673027072b90f8845e8e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   csize_type npos = std::string::npos;\n   csize_type csz01, csz02;"}, {"sha": "24b73333744a80d72bd5048b2daf132e6e32853c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test03(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   csize_type npos = std::string::npos;\n   csize_type csz01;"}, {"sha": "11d14e59b189c5a47d19a4b57687fbd473483bff", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;"}, {"sha": "a0f0466e105bdaedff9330c3ef1a8d2d519a3e8a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   csize_type npos = std::wstring::npos;\n   csize_type csz01, csz02;"}, {"sha": "6964e013f30a349ad7da57030abd46754d8ecac9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/find/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Ffind%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n bool test03(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   csize_type npos = std::wstring::npos;\n   csize_type csz01;"}, {"sha": "e1c5402507598894be58ca9b6d3442e12a53af19", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/char/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,10 +26,9 @@\n \n int test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::iterator citerator;\n-  csize_type npos = std::string::npos;\n   csize_type csz01, csz02;\n \n   const std::string str01(\"rodeo beach, marin\");"}, {"sha": "44384533a1872398519d133545158365f5988467", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n // but now s points inside the _Rep\n int test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::string str01;\n   const char* title = \"Everything was beautiful, and nothing hurt\";"}, {"sha": "2e6fdfd2c7023208a129e174592ae9ad287d8cb3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,10 +26,9 @@\n \n int test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::iterator citerator;\n-  csize_type npos = std::wstring::npos;\n   csize_type csz01, csz02;\n \n   const std::wstring str01(L\"rodeo beach, marin\");"}, {"sha": "a1a5389656a3537bde1dce310aeb1d5a9a458c32", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/insert/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finsert%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n // but now s points inside the _Rep\n int test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::wstring str01;\n   const wchar_t* title = L\"Everything was beautiful, and nothing hurt\";"}, {"sha": "fb2721782c9215c8bcc190346e76fc327709b644", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -33,12 +33,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n \n   const std::string str01(\"sailing grand traverse bay\\n\"\n \t       \"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");"}, {"sha": "1fbc3d05dc890cd6ca78997298c8e8cc087a52cb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/4.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,11 +30,11 @@\n \n // testing basic_stringbuf::xsputn via stress testing with large strings\n // based on a bug report libstdc++ 9\n-void test04(int size)\n+void test04(std::size_t size)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string str(size, 's');\n-  int expected_size = 2 * (size + 1);\n+  std::size_t expected_size = 2 * (size + 1);\n   std::ostringstream oss(str);\n   \n   // sanity checks"}, {"sha": "7ba1cecea818e6047d95c83acbc39ecf6a2745bc", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/5.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,9 +32,9 @@\n // testing basic_filebuf::xsputn via stress testing with large strings\n // based on a bug report libstdc++ 9\n // mode == out\n-void test05(int size)\n+void test05(std::size_t size)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char filename[] = \"inserters_extractors-1.txt\";\n   const char fillc = 'f';\n   std::ofstream ofs(filename);\n@@ -60,7 +60,7 @@ void test05(int size)\n \n   // sanity check on the written file\n   std::ifstream ifs(filename);\n-  int count = 0;\n+  std::size_t count = 0;\n   char c;\n   while (count <= (2 * size) + 4)\n     {"}, {"sha": "b074ff2d44c9a39b4cf01785a6f1874f67e4816b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -33,7 +33,7 @@\n // http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00049.html\n void test06(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef std::string::size_type size_type;\n   std::string str01(\"@silent\");"}, {"sha": "02a2de8f051e74b0db85fcf8ff5fa2c99bc02399", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@\n // NB: this is a defect in the standard.\n void test07(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::string name(\"z6.cc\");\n   std::istringstream iss (name);\n   int i = 0;"}, {"sha": "4d5556661d488a8efe739b0a118c246c6b1f6a01", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@ void test08()\n {\n   using namespace std;\n \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   istringstream istrm(\"enero:2001\");\n   int \t\tyear;\n   char \t\tsep;"}, {"sha": "6755af3f4e1bb219ca363e5e41eee646794e6a11", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/9.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F9.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@\n // libstdc++/2830\n void test09()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string blanks( 3, '\\0');\n   std::string foo = \"peace\";\n   foo += blanks;"}, {"sha": "e77dbc1dc1d0ebee079d0b9bc7126db402f5425b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -33,12 +33,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n \n   const std::wstring str01(L\"sailing grand traverse bay\\n\"\n \t       L\"\\t\\t\\t    from Elk Rapids to the point reminds me of miles\");"}, {"sha": "ba4f84cead1f90eeab49903b00e227324c52aa8c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/4.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,11 +30,11 @@\n \n // testing basic_stringbuf::xsputn via stress testing with large strings\n // based on a bug report libstdc++ 9\n-void test04(int size)\n+void test04(std::size_t size)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring str(size, L's');\n-  int expected_size = 2 * (size + 1);\n+  std::size_t expected_size = 2 * (size + 1);\n   std::wostringstream oss(str);\n   \n   // sanity checks"}, {"sha": "9a88091fd8f8bde0e5dd57e6c3d03563c4d3566f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/5.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,9 +32,9 @@\n // testing basic_filebuf::xsputn via stress testing with large strings\n // based on a bug report libstdc++ 9\n // mode == out\n-void test05(int size)\n+void test05(std::size_t size)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char filename[] = \"inserters_extractors-1.txt\";\n   const wchar_t fillc = L'f';\n   std::wofstream ofs(filename);\n@@ -60,7 +60,7 @@ void test05(int size)\n \n   // sanity check on the written file\n   std::wifstream ifs(filename);\n-  int count = 0;\n+  std::size_t count = 0;\n   wchar_t c;\n   while (count <= (2 * size) + 4)\n     {"}, {"sha": "33699eb974a27daa3f1e76ea2b7479a2cbe4b56a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -33,7 +33,7 @@\n // http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00049.html\n void test06(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef std::wstring::size_type size_type;\n   std::wstring str01(L\"@silent\");"}, {"sha": "1971e959af39f09993264c0e859630793499677c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@\n // NB: this is a defect in the standard.\n void test07(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::wstring name(L\"z6.cc\");\n   std::wistringstream iss(name);\n   int i = 0;"}, {"sha": "24aef6f6f18ca42a1e48326476778d3ec6536504", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@ void test08()\n {\n   using namespace std;\n \n-  bool \t\t test = true;\n+  bool test __attribute__((unused)) = true;\n   wistringstream istrm(L\"enero:2001\");\n   int \t\t year;\n   wchar_t\t sep;"}, {"sha": "d83a17c3cac918dcb7466a1799f5112c55cdb2db", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/9.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F9.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@\n // libstdc++/2830\n void test09()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring blanks(3, L'\\0');\n   std::wstring foo = L\"peace\";\n   foo += blanks;"}, {"sha": "b7337b2fd8d250c6ca391c40714e48e4640b9847", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n \n int test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::string str1;\n   std::string str2;\n@@ -35,11 +35,11 @@ int test01(void)\n   // 1:8-chars_8-chars_\n   // 2:8-chars_8-chars_\n   str1 = std::string(\"8-chars_\") + \"8-chars_\";\n-  const char* p1 = str1.c_str();\n+  str1.c_str();\n   // printf(\"1:%s\\n\", str1.c_str());\n   str2 = str1 + \"7-chars\";\n   // printf(\"2:%s\\n\", str1.c_str()); //str1 is gone\n-  const char* p2 = str1.c_str();\n+  str1.c_str();\n   return 0;\n }\n "}, {"sha": "c60985e4e2ab0cb78176ea92427b69268addae88", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -115,7 +115,7 @@ template<class charT, class traits, class Allocator>\n \n int test01(void)\n {\n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   std::string \tstr_0(\"costa rica\");\n   std::string \tstr_1(\"costa marbella\");\n   std::string \tstr_2(\"cost\");"}, {"sha": "98b42f9f769f14443f9af1380413079851da14f3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n \n int test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::wstring str1;\n   std::wstring str2;\n@@ -35,11 +35,11 @@ int test01(void)\n   // 1:8-chars_8-chars_\n   // 2:8-chars_8-chars_\n   str1 = std::wstring(L\"8-chars_\") + L\"8-chars_\";\n-  const wchar_t* p1 = str1.c_str();\n+  str1.c_str();\n   // wprintf(\"1:%s\\n\", str1.c_str());\n   str2 = str1 + L\"7-chars\";\n   // wprintf(\"2:%s\\n\", str1.c_str()); //str1 is gone\n-  const wchar_t* p2 = str1.c_str();\n+  str1.c_str();\n   return 0;\n }\n "}, {"sha": "86ac5dbbf4674b86a6ca45237b66fb687355cf66", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operators/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperators%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -115,7 +115,7 @@ template<class charT, class traits, class Allocator>\n \n int test01(void)\n {\n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring \tstr_0(L\"costa rica\");\n   std::wstring \tstr_1(L\"costa marbella\");\n   std::wstring \tstr_2(L\"cost\");"}, {"sha": "4971324285538c010ea94d7b8c9800b8493a8085", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,12 +25,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n \n   const char str_lit01[] = \"ventura, california\";\n   const std::string str01(str_lit01);"}, {"sha": "08efb962c9e321cfcf981cf801f923ff1c935b98", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n void\n test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char* strlit = \"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n   std::string aux = strlit;\n   aux.replace(aux.begin()+5, aux.begin()+20,"}, {"sha": "81cde7bceef1cfad2d975b124d430f5a12e696ad", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void\n test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char* title01 = \"nine types of ambiguity\";\n   const char* title02 = \"ultra\";\n   std::string str01 = title01;"}, {"sha": "14a294221d6643eb2ca539b523ac8ba8011f043c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n void\n test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string str01 = \"geogaddi\";\n   std::string str02;\n "}, {"sha": "4e1837f89b29d4353b17ee5d2da171a540a7f2c5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void\n test05()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string str01 = \"londinium\";\n   std::string str02 = \"cydonia\";\n "}, {"sha": "8d2209da497a5df28d50f5b1b46617caa1dea917", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,12 +25,10 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n \n   const wchar_t str_lit01[] = L\"ventura, california\";\n   const std::wstring str01(str_lit01);"}, {"sha": "2ee38141ca2e39e89c57f27ba5f651cf0dca8877", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void\n test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const wchar_t* strlit = L\"../the long pier/Hanalei Bay/Kauai/Hawaii\";\n   std::wstring aux = strlit;\n   aux.replace(aux.begin()+5, aux.begin()+20,"}, {"sha": "b50af79b0ad370479b2de7e05dc66372ed44dc65", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void\n test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const wchar_t* title01 = L\"nine types of ambiguity\";\n   const wchar_t* title02 = L\"ultra\";\n   std::wstring str01 = title01;"}, {"sha": "d11dec82fd2d69e5d13a5f884d37a85784f13f64", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n void\n test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring str01 = L\"geogaddi\";\n   std::wstring str02;\n "}, {"sha": "1f8d4d9feb4d7d215554074e550d14cf5c4bc871", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/replace/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Freplace%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void\n test05()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring str01 = L\"londinium\";\n   std::wstring str02 = L\"cydonia\";\n "}, {"sha": "42913dc3b4d97d3850bd85b017621df3b35229da", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.2 basic_string rfind\n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;"}, {"sha": "1f0f5a3367ed545e486e598b9841063e82fd5ca7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.4 basic_string::find_last_of\n bool test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::string z(\"ab\");\n   std::string::size_type pos;\n   pos = z.find_last_of(\"ab\");"}, {"sha": "9c3bec96facb836b0557c2bab657880d608d95ee", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.6 basic_string::find_last_not_of\n bool test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   std::string::size_type pos;\n   csize_type npos = std::string::npos;"}, {"sha": "46077a8550fdf0eea6a22852ab53dfb3a118a1ed", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.2 basic_string rfind\n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;"}, {"sha": "af012b9d06957d3a39a8cd169e56bbd41a1016e9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.4 basic_string::find_last_of\n bool test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::wstring::size_type pos;\n   std::wstring z(L\"ab\");\n   pos = z.find_last_of(L\"ab\");"}, {"sha": "7c564e769e7019e9897a05c86b10ddc7f8d700b7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/rfind/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frfind%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -24,7 +24,7 @@\n // 21.3.6.6 basic_string::find_last_not_of\n bool test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   std::wstring::size_type pos;\n   csize_type npos = std::wstring::npos;"}, {"sha": "b1ed63d60aed3c212668a06c8cb3e02c6a3eb889", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/substr/char/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,12 +26,11 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::string::size_type csize_type;\n   typedef std::string::const_reference cref;\n   typedef std::string::reference ref;\n-  csize_type npos = std::string::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const char str_lit01[] = \"rockaway, pacifica\";\n   const std::string str01(str_lit01);"}, {"sha": "da00f1c507bd467358f6dd578fa86bd305803f3d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/substr/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fsubstr%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,12 +26,11 @@\n \n bool test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef std::wstring::size_type csize_type;\n   typedef std::wstring::const_reference cref;\n   typedef std::wstring::reference ref;\n-  csize_type npos = std::wstring::npos;\n-  csize_type csz01, csz02;\n+  csize_type csz01;\n \n   const wchar_t str_lit01[] = L\"rockaway, pacifica\";\n   const std::wstring str01(str_lit01);"}, {"sha": "c18b4238a6e9066da5d515b1bdbcb364e26cdd4d", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   char c = 'a';\n   const char cc = 'b';\n   char* c1 = &c;"}, {"sha": "2eaac5e7d357744ef17297ccba5a4a1eb4e57755", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/char/2.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,14 +31,15 @@ void test02()\n   const char* ccarray2 = \"san francisco sunny-day park inspectors\";\n   char carray[50];\n   strcpy(carray, ccarray1);\n-  void* v = carray;\n   const void* cv = ccarray1;\n- \n-  memchr(cv, '/', 3);\n-  strchr(ccarray1, '/');\n-  strpbrk(ccarray1, ccarray2);\n-  strrchr(ccarray1, 'c');\n-  strstr(carray, carray);\n+  void* v;\n+  char* c;\n+\n+  v = memchr(cv, '/', 3);\n+  c = strchr(ccarray1, '/');\n+  c = strrchr(ccarray1, 'c');\n+  c = strpbrk(ccarray1, ccarray2);\n+  c = strstr(carray, carray);\n }\n \n int main()"}, {"sha": "7c4395aea3dd24e77713a5626faaef7c6d8cb86e", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   wchar_t c = L'a';\n   const wchar_t cc = L'b';\n   wchar_t* c1 = &c;"}, {"sha": "19a7ebe30421036108a0531708571a2e128c2263", "filename": "libstdc++-v3/testsuite/21_strings/c_strings/wchar_t/2.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,12 +32,13 @@ void test02()\n   const wchar_t* ccarray2 = L\"san francisco sunny-day park inspectors\";\n   wchar_t carray[50];\n   wcscpy(carray, ccarray1);\n- \n-  wmemchr(ccarray1, L'/', 3);\n-  wcschr(ccarray1, L'/');\n-  wcspbrk(ccarray1, ccarray2);\n-  wcsrchr(ccarray1, L'c');\n-  wcsstr(carray, carray);\n+  wchar_t* w;\n+\n+  w = wmemchr(ccarray1, L'/', 3);\n+  w = wcschr(ccarray1, L'/');\n+  w = wcspbrk(ccarray1, ccarray2);\n+  w = wcsrchr(ccarray1, L'c');\n+  w = wcsstr(carray, carray);\n }\n \n int main()"}, {"sha": "4ef29f20d35ba94579d94e0cc29d8435cf493807", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n void test01(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::string str_01(\"zuma beach\");\n   const std::string str_02(\"montara and ocean beach\");\n  "}, {"sha": "b38b3cff177c8fe3bc3ca117361ecaca8f862e8a", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/short/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fshort%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@\n \n void test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n  \n   // 21.1.1 character traits requirements\n "}, {"sha": "d4a64ae4a10bbb4bc7946d0a1a690d68a0a7250d", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -25,7 +25,7 @@\n \n void test02(void)\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::wstring str_01(L\"zuma beach\");\n   const std::wstring str_02(L\"montara and ocean beach\");\n  "}, {"sha": "5d34aae47793eabefc193313442d1dda0d2c6e3d", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/typedefs/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Ftypedefs%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ int main()\n   // 21.1.3: char_traits<char>::int_type == int\n   // dg-options -ansi -pedantic-err\n   std::char_traits<char>::int_type* p = 0;\n-  int* q = p;                   // dg-do compile\n+  int* q __attribute__((unused)) = p;                   // dg-do compile\n \n   return 0;\n }"}, {"sha": "1c46d583c419a293ff3cd13590ee6b12254fad5e", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::codecvt<char, char, mbstate_t> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::intern_type intern_type;"}, {"sha": "060b3683a52098f6e34fd9b22ad7ab68843fecf6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/char/1.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,16 +31,12 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n-  const char* \t\tc_lit = \"black pearl jasmine tea\";\n-  const char* \t        from_next;\n+  bool test __attribute__((unused)) = true;\n   int \t\t\tsize = 25;\n   char* \t\tc_arr = new char[size];\n   char*                 c_ref = new char[size];\n-  char*\t\t\tto_next;\n \n   locale \t\tloc = locale::classic();\n-  c_codecvt::state_type state;\n   const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n \n   // According to the resolution of DR19 (see also libstd++/9168), in"}, {"sha": "13fc3838c73af5d6dcd3043c7d51a328cb8999eb", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc;"}, {"sha": "da377b57a454e09a94ab58406704b0b400f72258", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-1\");"}, {"sha": "6830d301036c9ef6d9a505573527f8456330ad0b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-15\");"}, {"sha": "ecb007531753ed5f8eb2503b9f56fd14cf5211f2", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.UTF-8\");"}, {"sha": "76428bff18082357a629b7e5793283a66f55e9a9", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/char/1.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,16 +31,12 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n-  const char* \t\tc_lit = \"black pearl jasmine tea\";\n-  const char* \t        from_next;\n+  bool test __attribute__((unused)) = true;\n   int \t\t\tsize = 25;\n   char* \t\tc_arr = new char[size];\n   char*                 c_ref = new char[size];\n-  char*\t\t\tto_next;\n \n   locale \t\tloc = locale::classic();\n-  c_codecvt::state_type state;\n   const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n \n   // According to the resolution of DR19 (see also libstd++/9168), in"}, {"sha": "1b86fb7a8ddcc410f9b67e6d3a5b136588e91fe7", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n {\n   using namespace std;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale \t\tloc_c = locale::classic();\n   const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc_c); "}, {"sha": "815cfd3ec282034017a590aca520c18083c84245", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test02()\n {\n   using namespace std;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-1\");\n   locale::global(loc);"}, {"sha": "d456868b85d361a254e1b066509294cba530413d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test03()\n {\n   using namespace std;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-15\");\n   locale::global(loc);"}, {"sha": "d996797a8beac738c2477b19f27fc1dc87f59965", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test04()\n {\n   using namespace std;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.UTF-8\");\n   locale::global(loc);"}, {"sha": "bbc6397ce3735c9b096a01a60c8e98d5a5c53d86", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const char* \t\tc_lit = \"black pearl jasmine tea\";\n   const char* \t        from_next;\n   int \t\t\tsize = 25;"}, {"sha": "d8c2e8fe42adcfc039bd95baa1d4b5b14285c51c", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test01()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   const ext_type*       efrom_next;\n   const int_type* \ti_lit = L\"black pearl jasmine tea\";"}, {"sha": "c1e025cff4b18fb2526095d0536aa38528af5234", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test02()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "361f2c7c418d2c4e1daa62416c3f909b8d6ecbfc", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test03()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "14b67284b8cf192c54f27fad8d558d8fa8ce487d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ void test04()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "aa0879d393db5f48a1143bee5146f3606660e4f6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ void test05()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type \te_lit[] = { '\\0', '\\0', 'f', '\\0' };\n   const ext_type*       efrom_next;\n   const int_type \ti_lit[] = { L'\\0', L'\\0', L'f', L'\\0' };"}, {"sha": "1eed2880dbc65e23e114f7a918ecf97a6ace75f1", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ void test06()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   const ext_type*       efrom_next;\n   const int_type* \ti_lit = L\"black pearl jasmine tea\";"}, {"sha": "8689be233faf634de4129db79824916742fa2d6f", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test07()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"a\\xc0\\xff\";\n   const ext_type*       efrom_next;\n   const int_type* \ti_lit = L\"a\";"}, {"sha": "ee4d82bae63f03839f1fb0bcfbaaf957457dc7a0", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test08()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "ed6e68849a7db0d6448fc8f4cbc98ceb219a7dbf", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/9.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F9.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test09()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<wchar_t>\t\t\tint_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n@@ -118,7 +118,7 @@ void test09()\n   // in\n   w_codecvt::state_type state01;\n   zero_state(state01);\n-  result r1;\n+  result r1 = codecvt_base::error;\n \n   for (int i = 0; i <= esize; ++i)\n     {"}, {"sha": "085952863c2ab0412edc28ab21808efc48249c53", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const char* \t\tc_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = 25;\n "}, {"sha": "5e5023af8509d1d73cdc6b96fed1d110c2986e3d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -49,7 +49,7 @@ void test02()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const char* \t\tc_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = 25;\n "}, {"sha": "bc228755a0d537ecbb668b9d6899ed45d05513fc", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -44,7 +44,7 @@ void test01()\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n "}, {"sha": "a969ef6123593331b6a86686ad8ced5a5cfe9b07", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -44,7 +44,7 @@ void test02()\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "3512e8ce265c768ee54d8d5b7e3a8fa0733f2a65", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -44,7 +44,7 @@ void test03()\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "ca742c3024026bcaf8bec6da3263eb28a1594fcb", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -45,7 +45,7 @@ void test04()\n   typedef wchar_t\t\t\t\tint_type;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\"\n@@ -72,7 +72,6 @@ void test04()\n     \"\\x80\\x80\\x80\\xfc\\x90\\x80\\x80\\x80\\x80\\xfc\\xa0\\x80\\x80\\x80\\x80\"\n     \"\\xfd\\x80\\x80\\x80\\x80\\x80\";\n \n-  const ext_type*       efrom_next;\n   const int_type \ti_lit[] = {\n     0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n     0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "2921a9d9bfdc7ce4d73b570e441a72290a9dcca6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -44,7 +44,7 @@ void test05()\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type \te_lit[] = { '\\0', '\\0', 'f', '\\0' };\n   int \t\t\tsize = sizeof(e_lit);\n "}, {"sha": "a0700c1892014673bf1657eec4cf11056eeb47dc", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -62,7 +62,7 @@ void test06()\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n "}, {"sha": "5f35a0f2b1a7e0cbe2ce0e52a6da832bb41905ca", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,9 +47,8 @@ void test07()\n   typedef wchar_t\t\t\t\tint_type;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"a\\xc0\\xff\";\n-  const ext_type*       efrom_next;\n   int \t\t\tsize = strlen(e_lit);\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.UTF-8\");"}, {"sha": "2880ec5263648d4a6ed5f4940d64511ce853e99f", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/char/1.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,16 +31,11 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n-  const char* \t\tc_lit = \"black pearl jasmine tea\";\n-  const char* \t        from_next;\n+  bool test __attribute__((unused)) = true;\n   int \t\t\tsize = 25;\n   char* \t\tc_arr = new char[size];\n   char*                 c_ref = new char[size];\n-  char*\t\t\tto_next;\n-\n   locale \t\tloc = locale::classic();\n-  c_codecvt::state_type state;\n   const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n \n   // According to the resolution of DR19 (see also libstd++/9168), in"}, {"sha": "ad8cc24c60cbfc2f3ac6aeb994f9d9a629f085cf", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale \t\tloc_c = locale::classic();"}, {"sha": "57d471e77989822ec212f152defa9ffb5049cb10", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale  loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-1\");"}, {"sha": "229692b5f733ce29b67c413c1ce28ea957a226e3", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-15\");"}, {"sha": "7533e4c06591dca641f31987c8d008bd99814d0c", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.UTF-8\");"}, {"sha": "1dddbb207c76aeb968c2f2ef3533d0323239dab6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const char* \t\tc_lit = \"black pearl jasmine tea\";\n   const char* \t        from_next;\n   int \t\t\tsize = 25;"}, {"sha": "75eb2ff0817522a1ccd01949d4540ab409a47d93", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test01()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   const int_type* \ti_lit = L\"black pearl jasmine tea\";\n   const int_type*       ifrom_next;"}, {"sha": "cffff049c2841fc5afdb197bf15e048660986f15", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test02()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "c421488d1c40db730ceb300323c3a626111535a1", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test03()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "fabb941b021ae2d5f245ddadd889b788d6eefcdd", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test04()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit =\n     \"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     \"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "55ba7eff90062081e383d1ebf3e99e5fed283eab", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ void test05()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type \te_lit[] = { '\\0', '\\0', 'f', '\\0' };\n   const int_type \ti_lit[] = { L'\\0', L'\\0', L'f', L'\\0' };\n   const int_type*       ifrom_next;"}, {"sha": "a44746ff02d7c3c3fa92427a8139560fd2db2a98", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ void test06()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   const int_type* \ti_lit = L\"black pearl jasmine tea\";\n   const int_type*       ifrom_next;"}, {"sha": "2a469c65c30dee4b91d61449c0ee7dea3887c0c6", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test03()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"a\";\n   const int_type \ti_lit[] = { L'a', 0x20ac, 0x0 };\n   const int_type*       ifrom_next;"}, {"sha": "705f43afd6f1692bc1769cd2c3f3b63675e359a7", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -119,7 +119,7 @@ void test01()\n   typedef __enc_traits\t\t\t\tenc_type;\n   typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n "}, {"sha": "ad31f9ae2fcb25b8cf9932bc0be0dc78a2108022", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/char.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -126,7 +126,7 @@ void test01()\n   typedef char_traits<int_type>\t\t\tint_traits;\n   typedef char_traits<ext_type>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n \n@@ -215,7 +215,7 @@ void test02()\n   typedef char_traits<int_type>\t\t\tint_traits;\n   typedef char_traits<ext_type>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n "}, {"sha": "5793b33aa77ad9b7660f521a493da37c1131be52", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/wchar_t.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -103,7 +103,7 @@ void test01()\n   typedef char_traits<int_type>\t\t\tint_traits;\n   typedef char_traits<ext_type>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   int \t\t\tsize = 23;\n   char  e_lit_base[96] __attribute__((aligned(__alignof__(ext_type)))) =\n   {\n@@ -155,8 +155,8 @@ void test01()\n   unicode_codecvt::state_type state02(\"UCS-2BE\", \"UCS-4BE\", 0, 0);\n   initialize_state(state02);  \n   result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n-\t\t       e_arr, e_arr + size, eto_next);\n-  // XXX   VERIFY( r2 == codecvt_base::ok );\n+\t\t       e_arr, e_arr + size, eto_next);   \n+  VERIFY( r2 == codecvt_base::ok ); // XXX?\n   VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n   VERIFY( ifrom_next == i_lit + size );\n   VERIFY( eto_next == e_arr + size );"}, {"sha": "25a36ef5ee9f5d287e2fe87f04d9e03bd4462698", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test01()\n   typedef codecvt_base::result\t\t\tresult;\n   typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const char* \t\tc_lit = \"black pearl jasmine tea\";\n   const char* \t        from_next;\n   int \t\t\tsize = 25;"}, {"sha": "8410a358c4cd081fee893c97b5f62d9cfc765557", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -46,7 +46,7 @@ void test01()\n   typedef wchar_t\t\t\t\tint_type;\n   typedef char\t\t\t\t\text_type;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n   int \t\t\tsize = strlen(e_lit);\n   ext_type* \t\te_arr = new ext_type[size + 1];"}, {"sha": "dce60f81a26a4f60d5b9fa07c65444acea5af58b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test02()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const int_type* \ti_lit =\n     L\"\\x1\\x2\\x3\\x4\\x5\\x6\\x7\\x8\\x9\\xa\\xb\\xc\\xd\\xe\\xf\\x10\\x11\\x12\\x13\"\n     L\"\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20!\\\"#$%&\""}, {"sha": "e327ef867312fa1851b986bab7b13cd30e643a7a", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test03()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const int_type \ti_lit[] = {\n     0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n     0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "d4dc56051af5d27a7beb7631e24a18ac15c727b5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test04()\n   typedef char\t\t\t\t\text_type;\n   typedef char_traits<char>\t\t\text_traits;\n \n-  bool \t\t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const int_type \ti_lit[] = {\n     0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,\n     0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "2f6415fcd67dd7c7344eb8f1884db12cea50de40", "filename": "libstdc++-v3/testsuite/22_locale/collate/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::messages<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "62e9510d3682a93a0321dd7e702f18c7644ad4f2", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/1.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -43,9 +43,6 @@ void test01()\n \n   // cache the collate facets\n   const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n-  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n-  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n-  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n \n   // int compare(const charT*, const charT*, const charT*, const charT*) const\n "}, {"sha": "d0bad93196bd2d712defb94963b3e4ac2e2eb507", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/2.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,22 +42,17 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n-  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n-  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n   const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n \n   // int compare(const charT*, const charT*, const charT*, const charT*) const\n \n   const char* strlit1 = \"monkey picked tikuanyin oolong\";\n-  const char* strlit2 = \"imperial tea court green oolong\";\n   const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n \n   int i1;\n   int i2;\n   int size1 = char_traits<char>::length(strlit1) - 1;\n-  int size2 = char_traits<char>::length(strlit2) - 1;\n   int size3 = char_traits<char>::length(strlit3) - 1;\n   int size4 = char_traits<char>::length(strlit4) - 1;\n "}, {"sha": "7de98aa7925df4d6958b99447ba966ad79020127", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "995c5b4f699dd6eaede36976f66e181d77449fa3", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -43,9 +43,6 @@ void test01()\n \n   // cache the collate facets\n   const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n-  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n-  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n-  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n \n   // int compare(const charT*, const charT*, const charT*, const charT*) const\n "}, {"sha": "fd4aee7a01614e9af8c76ec3be50f5899dbe31e7", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -33,7 +33,7 @@ void test02()\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -46,22 +46,17 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n-  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n-  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n   const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n \n   // int compare(const charT*, const charT*, const charT*, const charT*) const\n \n   const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n-  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n   const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n \n   int i1;\n   int i2;\n   int size1 = char_traits<wchar_t>::length(strlit1) - 1;\n-  int size2 = char_traits<wchar_t>::length(strlit2) - 1;\n   int size3 = char_traits<wchar_t>::length(strlit3) - 1;\n   int size4 = char_traits<wchar_t>::length(strlit4) - 1;\n "}, {"sha": "209f7f835e3194636ed42cd9735cb5e58fb9b9e6", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "e8d9d8ef0a1deced32e13981108fb4efc22358c3", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -26,7 +26,7 @@\n // Check \"C\" locale.\n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::string str1(\"fffff\");\n   std::string str2(\"ffffffffffff\");"}, {"sha": "236d21e128da8d83498a6069fc060db3a3c62f03", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/2.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,19 +42,12 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n-  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n-  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n   const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n \n   // long hash(const charT*, const charT*) cosnt\n-  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n-  const char* strlit2 = \"imperial tea court green oolong\";\n   const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n \n-  int i1;\n-  int i2;\n   long l1;\n   long l2;\n   int size3 = char_traits<char>::length(strlit4) - 1;"}, {"sha": "fad5848e46defba08028285d708fc73f54ccc700", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void test01()\n {\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   string_type str1(L\"fffff\");\n   string_type str2(L\"ffffffffffff\");"}, {"sha": "280180322278e39d3a51b68c30b5241b13b73b5e", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n {\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -45,19 +45,12 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n-  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n-  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n   const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n \n   // long hash(const charT*, const charT*) cosnt\n-  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n-  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n   const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n \n-  int i1;\n-  int i2;\n   long l1;\n   long l2;\n   int size3 = char_traits<wchar_t>::length(strlit4) - 1;"}, {"sha": "9dfc00ffaf47ff12b82ad56b7cd584a2536569db", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/2.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void test02()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,14 +41,9 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n-  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n-  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n   const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n \n   // long hash(const charT*, const charT*) cosnt\n-  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n-  const char* strlit2 = \"imperial tea court green oolong\";\n   const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n "}, {"sha": "dab1f081b0dae73de549cdb432a80a901bf5fa1d", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void test03()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "d21d39964920b0161682ee424262b8315f9e7795", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -45,14 +45,9 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the collate facets\n-  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n-  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n-  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n   const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n \n   // long hash(const charT*, const charT*) cosnt\n-  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n-  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n   const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n   const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n "}, {"sha": "fdd88f70885512797f45647936cb640a966c1222", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void test03()\n   using namespace std;\n   typedef std::collate<wchar_t>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "be4524f9ca6532f060a81472ee1a3d5bf1bd242b", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void test01()\n   using namespace std;\n   typedef std::collate<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str;\n   locale loc_c = locale::classic();\n \n@@ -41,7 +41,6 @@ void test01()\n   VERIFY( loc_de != loc_byname );\n \n   // cache the collate facets\n-  const collate<char>& coll_byname = use_facet<collate<char> >(loc_byname); \n   const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n \n   // Check German \"de_DE\" locale."}, {"sha": "adda6fd548d90d7042d183de2b389e062d3c29c2", "filename": "libstdc++-v3/testsuite/22_locale/ctype/1.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -141,14 +141,15 @@ test01()\n \n   ctype_base::mask m01;\n   ctype_base::mask m02;\n-  \n+  ctype_base::mask res;\n+\n   m01 = ctype_base::space;\n   m02 = ctype_base::xdigit;\n \n-  m01 & m02;\n-  m01 | m02;\n-  m01 ^ m02;\n-  ~m01;\n+  res = m01 & m02;\n+  res = m01 | m02;\n+  res = m01 ^ m02;\n+  res = ~m01;\n   m01 &= m02;\n   m01 |= m02;\n   m01 ^= m02;"}, {"sha": "d21ee946d7a37ba3caba698ae0dba739cbc77ba7", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -51,7 +51,7 @@ class comma_ctype: public std::ctype<char>\n void test01()\n {\n   using namespace std;\n-  bool test = true; \n+  bool test __attribute__((unused)) = true; \n \n   comma_ctype obj;\n   const ctype_base::mask* tmp = obj.get_classic_table();"}, {"sha": "523044f6d32214c5c08f54d93373dcc52f314f99", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -35,24 +35,19 @@ class gnu_ctype: public std::ctype<char_type> { };\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char_type strlit00[] = \"manilla, cebu, tandag PHILIPPINES\";\n   const char_type strlit01[] = \"MANILLA, CEBU, TANDAG PHILIPPINES\";\n-  const char_type strlit02[] = \"manilla, cebu, tandag philippines\";\n   const char_type c00 = 'S';\n   const char_type c10 = 's';\n   const char_type c20 = '9';\n   const char_type c30 = ' ';\n   const char_type c40 = '!';\n   const char_type c50 = 'F';\n   const char_type c60 = 'f';\n-  const char_type c70 = 'X';\n   const char_type c80 = 'x';\n \n   gnu_ctype gctype;\n-  char_type c100;\n-  int len = std::char_traits<char_type>::length(strlit00);\n-  char_type c_array[len + 1];\n \n   // sanity check ctype_base::mask members\n   int i01 = std::ctype_base::space;\n@@ -66,7 +61,6 @@ void test01()\n   int i09 = std::ctype_base::graph;\n   int i10 = std::ctype_base::print;\n   int i11 = std::ctype_base::cntrl;\n-  int i12 = sizeof(std::ctype_base::mask);\n   VERIFY ( i01 != i02);\n   VERIFY ( i02 != i03);\n   VERIFY ( i03 != i04);"}, {"sha": "0211607de8f4f62762e7b109e099475b6e731990", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -41,7 +41,7 @@ void test02()\n   typedef ctype_base::mask \tmask;\n   typedef vector<mask> \t\tvector_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   //  const int max = numeric_limits<char>::max();\n   const int max = 255;"}, {"sha": "9ddeadb1f0334488eebf1849267f80ecad9c9215", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -35,7 +35,7 @@ typedef char char_type;\n // Per Liboriussen <liborius@stofanet.dk>\n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   std::ctype_base::mask maskdata[256];\n   for (int i = 0; i < 256; ++i)\n     maskdata[i] = std::ctype_base::alpha;"}, {"sha": "29fdfe97c7eb412ed5fef1927bf90f1a03122a80", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -35,24 +35,19 @@ class gnu_ctype: public std::ctype<char_type> { };\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n   const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n-  const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n   const char_type c00 = L'S';\n   const char_type c10 = L's';\n   const char_type c20 = L'9';\n   const char_type c30 = L' ';\n   const char_type c40 = L'!';\n   const char_type c50 = L'F';\n   const char_type c60 = L'f';\n-  const char_type c70 = L'X';\n   const char_type c80 = L'x';\n \n   gnu_ctype gctype;\n-  char_type c100;\n-  int len = std::char_traits<char_type>::length(strlit00);\n-  char_type c_array[len + 1];\n \n   // sanity check ctype_base::mask members\n   int i01 = std::ctype_base::space;\n@@ -66,7 +61,6 @@ void test01()\n   int i09 = std::ctype_base::graph;\n   int i10 = std::ctype_base::print;\n   int i11 = std::ctype_base::cntrl;\n-  int i12 = sizeof(std::ctype_base::mask);\n   VERIFY ( i01 != i02);\n   VERIFY ( i02 != i03);\n   VERIFY ( i03 != i04);\n@@ -100,7 +94,6 @@ void test01()\n   std::ctype_base::mask m02[13];\n   const char_type* cc0 = strlit00;\n   const char_type* cc1 = NULL;\n-  const char_type* cc2 = NULL;\n \n   cc0 = strlit00;\n   m01[0] = m00;"}, {"sha": "df028783f85be1613bdaa5653818570d80d22019", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -41,7 +41,7 @@ void test02()\n   typedef ctype_base::mask \tmask;\n   typedef vector<mask> \t\tvector_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   //  const int max = numeric_limits<char>::max();\n   const int max = 255;"}, {"sha": "6643803a1a1aaa8a2f706812db2cc190f8408087", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -39,7 +39,7 @@ void test01()\n   using namespace std;\n   typedef char \twide_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char dfault = '?';\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n@@ -49,7 +49,7 @@ void test01()\n   vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n   \n   // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     {\n       char c = ctype_c.narrow(wide[i], dfault);\n       VERIFY( c == narrow[i] );\n@@ -58,7 +58,7 @@ void test01()\n   // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n   ctype_c.narrow(&wide[0], &wide[0] + wide.length(), dfault, &narrow_chars[0]);\n   VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     VERIFY( narrow_chars[i] == narrow[i] );\n }\n "}, {"sha": "1f0e1619afc1467428303c9ee6cefe414a648cc4", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -38,7 +38,7 @@ void test02()\n   using namespace std;\n   typedef char \twide_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char dfault = '?';\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n@@ -53,7 +53,7 @@ void test02()\n   vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n \n   // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     {\n       char c = ctype_c.narrow(wide[i], dfault);\n       VERIFY( c == narrow[i] );\n@@ -62,7 +62,7 @@ void test02()\n   // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n   ctype_c.narrow(&wide[0], &wide[0] + wide.length(), dfault, &narrow_chars[0]);\n   VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     VERIFY( narrow_chars[i] == narrow[i] );\n }\n "}, {"sha": "a9d30f44cc2ae4a3bbb0ad1ac17977c2b5b64413", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -39,7 +39,7 @@ void test01()\n   using namespace std;\n   typedef wchar_t \twide_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char dfault = '?';\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n@@ -49,7 +49,7 @@ void test01()\n   vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n   \n   // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     {\n       char c = ctype_c.narrow(wide[i], dfault);\n       VERIFY( c == narrow[i] );\n@@ -58,7 +58,7 @@ void test01()\n   // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n   ctype_c.narrow(&wide[0], &wide[0] + wide.length(), dfault, &narrow_chars[0]);\n   VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     VERIFY( narrow_chars[i] == narrow[i] );\n }\n "}, {"sha": "5422a5685a9041d967f463594770a921c8c3f7a0", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/2.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -38,7 +38,7 @@ void test02()\n   using namespace std;\n   typedef wchar_t \twide_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char dfault = '?';\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n@@ -53,7 +53,7 @@ void test02()\n   vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n \n   // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     {\n       char c = ctype_c.narrow(wide[i], dfault);\n       VERIFY( c == narrow[i] );\n@@ -62,7 +62,7 @@ void test02()\n   // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n   ctype_c.narrow(&wide[0], &wide[0] + wide.length(), dfault, &narrow_chars[0]);\n   VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n+  for (size_t i = 0; i < wide.length(); ++i)\n     VERIFY( narrow_chars[i] == narrow[i] );\n }\n "}, {"sha": "1e00a840a2bdd90d99ac4a3eabb476f0f447986d", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -36,7 +36,7 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n   const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);"}, {"sha": "86ca5cc2f01c915f79d506d51acef204306094b4", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -50,7 +50,7 @@ class gnu_ctype: public std::ctype<char_type> { };\n // Sanity check scan_is() and scan_not().\n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   const char_type *const ca = \"aaaaa\";\n   const char_type *const cz = \"zzzzz\";"}, {"sha": "dead79ea2f672f33a681d164ca569b6224101167", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -51,7 +51,7 @@ class gnu_ctype: public std::ctype<char_type> { };\n // Sanity check scan_is() and scan_not().\n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   const char_type *const ca = L\"aaaaa\";\n   const char_type *const cz = L\"zzzzz\";"}, {"sha": "504eb89d54075d3b10961bac1d49dd5df87e5790", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/char/1.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -35,19 +35,12 @@ class gnu_ctype: public std::ctype<char_type> { };\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char_type strlit00[] = \"manilla, cebu, tandag PHILIPPINES\";\n   const char_type strlit01[] = \"MANILLA, CEBU, TANDAG PHILIPPINES\";\n   const char_type strlit02[] = \"manilla, cebu, tandag philippines\";\n   const char_type c00 = 'S';\n   const char_type c10 = 's';\n-  const char_type c20 = '9';\n-  const char_type c30 = ' ';\n-  const char_type c40 = '!';\n-  const char_type c50 = 'F';\n-  const char_type c60 = 'f';\n-  const char_type c70 = 'X';\n-  const char_type c80 = 'x';\n \n   gnu_ctype gctype;\n   char_type c100;\n@@ -66,7 +59,6 @@ void test01()\n   int i09 = std::ctype_base::graph;\n   int i10 = std::ctype_base::print;\n   int i11 = std::ctype_base::cntrl;\n-  int i12 = sizeof(std::ctype_base::mask);\n   VERIFY ( i01 != i02);\n   VERIFY ( i02 != i03);\n   VERIFY ( i03 != i04);"}, {"sha": "9d446c791ca7c5f439287bebd10e6be106277777", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -35,19 +35,12 @@ class gnu_ctype: public std::ctype<char_type> { };\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const char_type strlit00[] = L\"manilla, cebu, tandag PHILIPPINES\";\n   const char_type strlit01[] = L\"MANILLA, CEBU, TANDAG PHILIPPINES\";\n   const char_type strlit02[] = L\"manilla, cebu, tandag philippines\";\n   const char_type c00 = L'S';\n   const char_type c10 = L's';\n-  const char_type c20 = L'9';\n-  const char_type c30 = L' ';\n-  const char_type c40 = L'!';\n-  const char_type c50 = L'F';\n-  const char_type c60 = L'f';\n-  const char_type c70 = L'X';\n-  const char_type c80 = L'x';\n \n   gnu_ctype gctype;\n   char_type c100;\n@@ -66,7 +59,6 @@ void test01()\n   int i09 = std::ctype_base::graph;\n   int i10 = std::ctype_base::print;\n   int i11 = std::ctype_base::cntrl;\n-  int i12 = sizeof(std::ctype_base::mask);\n   VERIFY ( i01 != i02);\n   VERIFY ( i02 != i03);\n   VERIFY ( i03 != i04);"}, {"sha": "e4ac43ab6cfa04e1a9d1b2eef6d33c893cbc0c32", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/char/1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -38,8 +38,7 @@ void test01()\n   using namespace std;\n   typedef char wide_type;\n \n-  bool test = true;\n-  const char dfault = '?';\n+  bool test __attribute__((unused)) = true;\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n \n@@ -48,15 +47,15 @@ void test01()\n   vector<wide_type> \t\twide_chars(narrow.length() + 1);\n   \n   // widen(char c) const\n-  for (int i = 0; i < narrow.length(); ++i)\n+  for (size_t i = 0; i < narrow.length(); ++i)\n     {\n       char c = ctype_c.widen(narrow[i]);\n       VERIFY( c == wide[i] );\n     }\n \n   // widen(const char* low, const char* high, charT* dest) const\n   ctype_c.widen(&narrow[0], &narrow[0] + narrow.length(), &wide_chars[0]);  \n-  for (int i = 0; i < narrow.length(); ++i)\n+  for (size_t i = 0; i < narrow.length(); ++i)\n     VERIFY( wide_chars[i] == wide[i] );\n }\n "}, {"sha": "7e2377475e0d593b437b00d7695b0a1f066de2eb", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -38,8 +38,7 @@ void test01()\n   using namespace std;\n   typedef wchar_t wide_type;\n \n-  bool test = true;\n-  const char dfault = '?';\n+  bool test __attribute__((unused)) = true;\n   const locale loc_c = locale::classic();\n   const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n \n@@ -48,15 +47,15 @@ void test01()\n   vector<wide_type> \t\twide_chars(narrow.length() + 1);\n   \n   // widen(char c) const\n-  for (int i = 0; i < narrow.length(); ++i)\n+  for (size_t i = 0; i < narrow.length(); ++i)\n     {\n       char c = ctype_c.widen(narrow[i]);\n       VERIFY( c == wide[i] );\n     }\n \n   // widen(const char* low, const char* high, charT* dest) const\n   ctype_c.widen(&narrow[0], &narrow[0] + narrow.length(), &wide_chars[0]);  \n-  for (int i = 0; i < narrow.length(); ++i)\n+  for (size_t i = 0; i < narrow.length(); ++i)\n     VERIFY( wide_chars[i] == wide[i] );\n }\n "}, {"sha": "0cb05dd930a892e994fbea3d7917c5208f9d56bd", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -36,7 +36,7 @@\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"en_US.ISO-8859-1\");\n   const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);"}, {"sha": "8d6f1f3c7ae78ffdeb93d4c39e2e0d0d8875b612", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -36,7 +36,7 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc = __gnu_test::try_named_locale(\"se_NO.UTF-8\");\n   const ctype<wchar_t>& wct = use_facet<ctype<wchar_t> >(loc);"}, {"sha": "83609561cc3824e297b6ca6b80f07fbf2428c10a", "filename": "libstdc++-v3/testsuite/22_locale/facet/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -172,7 +172,7 @@ std::locale::id gnu_facet::id;\n \n void test01()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const std::string name_no(\"*\");\n   const std::string name_c(\"C\");\n "}, {"sha": "f3059ee05b7f41f663bae6b7e2be68ce1e6305d9", "filename": "libstdc++-v3/testsuite/22_locale/facet/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -46,7 +46,7 @@ typedef surf facet_type;\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // 1: Destroyed when out of scope.\n   VERIFY( counter == 0 );"}, {"sha": "c82c4d3c77ffa68b272e28854c97e30415784682", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // construct a locale object with the C facet\n   const locale& \tcloc = locale::classic();\n@@ -45,17 +45,17 @@ void test01()\n   VERIFY( has_facet<gnu_codecvt>(loc) );\n \n   try \n-    { const ccodecvt& cvt01 = use_facet<ccodecvt>(cloc); }\n+    { const ccodecvt& cvt01 __attribute__((unused)) = use_facet<ccodecvt>(cloc); }\n   catch(...)\n     { VERIFY( false ); }\n \n   try\n-    { const gnu_codecvt& cvt02 = use_facet<gnu_codecvt>(loc); } \n+    { const gnu_codecvt& cvt02 __attribute__((unused)) = use_facet<gnu_codecvt>(loc); } \n   catch(...)\n     { VERIFY( false ); }\n \n   try \n-    { const ccodecvt& cvt03 = use_facet<gnu_codecvt>(cloc); }\n+    { const ccodecvt& cvt03 __attribute__((unused)) = use_facet<gnu_codecvt>(cloc); }\n   catch(bad_cast& obj)\n     { VERIFY( true ); }\n   catch(...)"}, {"sha": "af51d3313d602593160ea0f915db83cc1c4cb4e1", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -110,7 +110,7 @@ void test01()\n   typedef __enc_traits\t\t\t\tenc_type;\n   typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str1, str2;\n \n   // construct a locale object with the C facet"}, {"sha": "9343535a8ad5bd68bdfad588fd9a2930ded17995", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n // libstdc++/7811\n void test03()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n #ifdef _GLIBCXX_HAVE_SETENV \n   const char* LC_ALL_orig = getenv(\"LC_ALL\");\n   if (!setenv(\"LC_ALL\", \"it_IT\", 1))"}, {"sha": "697b4a49c677be6056bfa6e800624db53c58977f", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n // More tests for locale(\"\") == POSIX locale::name. \n void test04()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   using namespace std;\n \n #ifdef _GLIBCXX_HAVE_SETENV"}, {"sha": "07682e5b60a4cd8eeed0708e9e47435a95c326f4", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/6.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void\n test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const string name_c(\"C\");\n   const string str_unnamed(\"*\");\n   string str;\n@@ -46,10 +46,6 @@ test01()\n   VERIFY( has_facet<numpunct<char> >(loc_1) );\n   VERIFY( has_facet<numpunct<char> >(loc_c) );\n   \n-  // extract facet\n-  const numpunct<char>&\tf_nump_1 = use_facet<numpunct<char> >(loc_1); \n-  const numpunct<char>&\tf_nump_c = use_facet<numpunct<char> >(loc_c); \n-\n   // attempt to re-synthesize classic locale\n   locale\t\tloc_2 = loc_1.combine<numpunct<char> >(loc_c);\n   VERIFY( loc_2.name() == str_unnamed );"}, {"sha": "8b4aafe14f44407c4c91c321159e94b59632d24a", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void\n test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   const string name_c(\"C\");\n   const string name_no(\"*\");\n   string str;"}, {"sha": "ce7b2695ee8e3f086845968dcbde3b85b76c17da", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/7222-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-c.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n // libstdc++/7222\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::locale loc_c1(\"C\");\n   std::locale loc_c2(\"C\");"}, {"sha": "4524a070b7a40650899372d2b2fe39e936765c0c", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/7222-env.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7222-env.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n // libstdc++/7222\n void test02()\n {\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   std::locale loc_1 = __gnu_test::try_named_locale(\"\");\n   std::locale loc_2 = __gnu_test::try_named_locale(\"\");"}, {"sha": "5d4fd272f99994659feac681ddc214e1e31bb212", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@ void\n test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   const locale l1(\"C\");\n   const locale l2 ="}, {"sha": "e5524dd04c9cf103a2a115c754611bf45c779b63", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ class gnu_codecvt: public ccodecvt { };\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   string str1, str2;\n "}, {"sha": "653eaaf99d6d9687cfb7b6d6bcb306cc1b4d8ea5", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   \n   const string ph(\"en_PH\");\n   const string mx(\"es_MX\");"}, {"sha": "5e3ecedee42501c6fb08a59e66811006847b0d23", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -43,7 +43,7 @@ typedef surf facet_type;\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   string name;\n   locale global_orig;"}, {"sha": "003da9a35d496aad3e282911fa0e81a69caee90e", "filename": "libstdc++-v3/testsuite/22_locale/locale/operations/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -31,7 +31,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str1, str2;\n \n   // construct a locale object with the C facet"}, {"sha": "aa5db2ac520f2f089bd382a70da02a89be98fc1c", "filename": "libstdc++-v3/testsuite/22_locale/locale/operations/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -38,7 +38,7 @@ class gnu_collate: public std::collate<char>\n void test02()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   \n   // Sanity check.\n   locale loc_c = locale::classic();"}, {"sha": "c1281eda3ac50da92bacb558f5c30c582d8a9366", "filename": "libstdc++-v3/testsuite/22_locale/messages/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,8 +30,8 @@ void test01()\n   typedef std::locale::facet base_type1;\n   typedef std::messages_base base_type2;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type1* base1 = &obj;\n-  const base_type2* base2 = &obj;\n+  const base_type1* base1 __attribute__((unused)) = &obj;\n+  const base_type2* base2 __attribute__((unused)) = &obj;\n \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "9a3a1c93ab181a2dcb663ba73414313d1127445b", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/1.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::messages<char>::catalog catalog;\n   typedef std::messages<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n   const char* dir = LOCALEDIR;\n \n@@ -44,9 +44,6 @@ void test01()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the messages facets\n-  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n-  const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n-  const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n   const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n \n   // catalog open(const string&, const locale&) const;"}, {"sha": "c9cae5053f37b8498222c5415967ac8b773656b5", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/2.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   typedef std::messages<char>::catalog catalog;\n   typedef std::messages<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n   const char* dir = LOCALEDIR;\n \n@@ -44,10 +44,7 @@ void test02()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the messages facets\n-  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n-  const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n   const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n-  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n \n   // catalog open(const string&, const locale&) const;\n   // string_type get(catalog, int, int, const string_type& ) const; "}, {"sha": "8d00eb5a88284a2a71f571c773245e0973ddf077", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/3.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   typedef std::messages<char>::catalog catalog;\n   typedef std::messages<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n   const char* dir = LOCALEDIR;\n \n@@ -44,10 +44,8 @@ void test03()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the messages facets\n-  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n   const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n   const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n-  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n \n   // catalog open(const string&, const locale&) const;\n   // string_type get(catalog, int, int, const string_type& ) const; "}, {"sha": "3072383a9883b5013d3c248d2feee6650bf2011e", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::messages<char>::catalog catalog;\n   typedef std::messages<char>::string_type string_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str;\n   // This is defined through CXXFLAGS in scripts/testsuite_flags[.in].\n   const char* dir = LOCALEDIR;"}, {"sha": "f3b7232f6302efc6d353633eb0abb5ff066fddeb", "filename": "libstdc++-v3/testsuite/22_locale/money_get/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::money_get<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "39dca1df9091dd59c50a0b9021441d672ac1f71e", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test01()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test01()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "17825d546b226f97c45a2d63eeefbe0dda7b03d7", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/11528.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11528.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11528.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F11528.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test01()\n   using namespace std;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc_us = __gnu_test::try_named_locale(\"en_US\");\n "}, {"sha": "422a53340eb82a8bd20119b8b44c9626c4bd8349", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/2.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test02()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "5904ee112d878e5fa9404e65dfe9f96d397f8c84", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/3.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test03()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,25 +47,13 @@ void test03()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;\n \n   // total EPA budget FY 2002\n   const long double  digits1 = 720000000000.0;\n \n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n-  \n   iterator_type end;\n   istringstream iss;\n   iss.imbue(loc_de);"}, {"sha": "a80060aebe0a4d344536183860fa95b3c6007af1", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/4.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test04()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,22 +47,10 @@ void test04()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;\n \n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n   // input less than frac_digits\n   const long double digits4 = -1.0;\n   "}, {"sha": "e51d4464de504b3b70886c4ab650e4b76a75b0d4", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/5.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,14 +27,13 @@\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check money_get works with other iterators besides streambuf\n   // input iterators.\n   typedef string::const_iterator iter_type;\n   typedef money_get<char, iter_type> mon_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n   const string str = \"0.01Eleanor Roosevelt\";"}, {"sha": "8c03e8245ffcc18cedac164272f40512215f431b", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -54,7 +54,7 @@ void test06()\n   using namespace std;\n   typedef istreambuf_iterator<char> InIt;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc(locale::classic(), new My_money_io);\n "}, {"sha": "c21a9dfad747ac2e66b3c047cfebe77fb19f44f1", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test07()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef istreambuf_iterator<char> InIt;\n   InIt iend1, iend2, iend3;"}, {"sha": "01a93381557d9ef795cb16ff631f67d80f8bc328", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -68,7 +68,7 @@ void test08()\n   typedef istreambuf_iterator<char> InIt;\n \n   bool intl = false;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   ios_base::iostate err;\n \n   locale loc_a(locale::classic(), new My_money_io_a);"}, {"sha": "0a7f90b63663696124c345e60da67c6eccfdc159", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test01()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test01()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;"}, {"sha": "8649db41187890b7ce46b46c8148853ee787dcfe", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/11528.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11528.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11528.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F11528.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test01()\n   using namespace std;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc_us = __gnu_test::try_named_locale(\"en_US\");\n "}, {"sha": "f59cef7a9294b112ac34383035f4c2062808a5cc", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test02()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;"}, {"sha": "d0c8b06b6f331ceb0d6d63aafca2cfd01606649c", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test03()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,24 +47,12 @@ void test03()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;\n \n   // total EPA budget FY 2002\n   const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n   \n   iterator_type end;\n   wistringstream iss;"}, {"sha": "8861ce46cf557b5fafaf361463e3bfc2971e4ebf", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test04()\n   typedef money_base::pattern pattern;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,22 +47,10 @@ void test04()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;\n \n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n   // input less than frac_digits\n   const long double digits4 = -1.0;\n   "}, {"sha": "89b724c0307cce66ea0ce13ddbe1466acc055ea7", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,14 +27,13 @@\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check money_get works with other iterators besides streambuf\n   // input iterators.\n   typedef wstring::const_iterator iter_type;\n   typedef money_get<wchar_t, iter_type> mon_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n   const wstring str = L\"0.01Eleanor Roosevelt\";"}, {"sha": "5d40fab761fefa4c574730c0502ac723ef26aec1", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -54,7 +54,7 @@ void test06()\n   using namespace std;\n   typedef istreambuf_iterator<wchar_t> InIt;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc(locale::classic(), new My_money_io);\n "}, {"sha": "c9cf0662e25ef69888e998c017295411274597b5", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test07()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef istreambuf_iterator<wchar_t> InIt;\n   InIt iend1, iend2, iend3;"}, {"sha": "aeaa257378055781bf3b5099d8b74611f50d380a", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -68,7 +68,7 @@ void test08()\n   typedef istreambuf_iterator<wchar_t> InIt;\n \n   bool intl = false;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   ios_base::iostate err;\n \n   locale loc_a(locale::classic(), new My_money_io_a);"}, {"sha": "ed6c58c54087eb11a7047b5dea84418aa12e6b20", "filename": "libstdc++-v3/testsuite/22_locale/money_put/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::money_put<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "2692bb4d196d90c4121f24b5f542875bfb459b29", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test01()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test01()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "35882b64d5d1ec1686e63622718b01eb8c4a4707", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/2.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test02()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "1a1ca33d7a94a7a37f11b190b919109cb1c3dc0f", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/3.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test03()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,24 +47,12 @@ void test03()\n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;\n \n   // total EPA budget FY 2002\n   const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n   \n   // cache the money_put facet\n   ostringstream oss;"}, {"sha": "0790ac60f4a37bf278b6883d85867787956a6b84", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/4.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,14 +27,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check money_put works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef string::iterator iter_type;\n   typedef money_put<char, iter_type> mon_put_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n   // woman, art, thief (stole the blues)"}, {"sha": "4554d72c8d5312483dac8a337fc6890b3bebdff2", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -45,7 +45,7 @@ struct My_money_io : public std::moneypunct<char,false>\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef ostreambuf_iterator<char> OutIt;\n \n   locale loc(locale::classic(), new My_money_io);"}, {"sha": "5177c76744a25d823027e90bfbc097c5e34fc231", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@ struct My_money_io_2 : public std::moneypunct<char,false>\n void test06()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef ostreambuf_iterator<char> OutIt;\n \n   locale loc(locale::classic(), new My_money_io_2);"}, {"sha": "f8f97fa691a3f1318bfe35b6e987cea7e0feb894", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test01()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test01()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;"}, {"sha": "f0e7ea1aabe321897e32ee7ab461424183ebdb43", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test02()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,12 +47,6 @@ void test02()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;"}, {"sha": "cd79e54d66d5087288e704dd825bd7fc4d90605a", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -32,7 +32,7 @@ void test03()\n   typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -47,24 +47,12 @@ void test03()\n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n \n   // sanity check the data is correct.\n   const wstring empty;\n \n   // total EPA budget FY 2002\n   const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n   \n   // cache the money_put facet\n   wostringstream oss;"}, {"sha": "d288dee60abd149a4e81541e2a9ab6bd3262981c", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,14 +27,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check money_put works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef wstring::iterator iter_type;\n   typedef money_put<wchar_t, iter_type> mon_put_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n   // woman, art, thief (stole the blues)"}, {"sha": "40b4092eb5fb149207edcf5517552d68df8c2794", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -45,7 +45,7 @@ struct My_money_io : public std::moneypunct<wchar_t,false>\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef ostreambuf_iterator<wchar_t> OutIt;\n \n   locale loc(locale::classic(), new My_money_io);"}, {"sha": "255aa6e56fc11d0865062c6953a3eab45908bac5", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -34,7 +34,7 @@ struct My_money_io_2 : public std::moneypunct<wchar_t,false>\n void test06()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef ostreambuf_iterator<wchar_t> OutIt;\n \n   locale loc(locale::classic(), new My_money_io_2);"}, {"sha": "d74b1d69b4d94da257744f6702be016409486ce6", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef std::moneypunct<char, true> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "e00a427a2becd659e9f654a6ca9a625ebed97fe7", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test02()\n   typedef std::moneypunct<char, false> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "7c8ca599f62577fa3a1f15bc93b9c980a6f07da8", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef money_base::part part;\n   typedef money_base::pattern pattern;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "70e4516d0ff780b23b37e89cc673fff7fbcb9a8f", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test02()\n   typedef money_base::part part;\n   typedef money_base::pattern pattern;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,7 +42,6 @@ void test02()\n   const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n   const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n   const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monp_de_f = use_facet<__money_false>(loc_de); \n \n   // quick sanity check for data.\n   char q1 = monp_c_t.decimal_point();"}, {"sha": "2d26611c6465557abd61d3d888d71956bc35f500", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef money_base::part part;\n   typedef money_base::pattern pattern;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();"}, {"sha": "dc1d9706123d657057d1d628349e97e259d54642", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test02()\n   typedef money_base::part part;\n   typedef money_base::pattern pattern;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,7 +42,6 @@ void test02()\n   const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n   const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n   const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monp_de_f = use_facet<__money_false>(loc_de); \n \n   // quick sanity check for data.\n   wchar_t q1 = monp_c_t.decimal_point();"}, {"sha": "2cdef4b1abc1385ebf6a8b82c72333d7ded7a706", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef money_base::part part;\n   typedef money_base::pattern pattern;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str;\n \n   locale loc_de = __gnu_test::try_named_locale(\"de_DE\");"}, {"sha": "a9081bbf5704fe324c7c6494876823b63a9fcc6c", "filename": "libstdc++-v3/testsuite/22_locale/num_get/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::num_get<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "e42e7b4ce744d438e13d4463102b1dc910c25d7f", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/1.cc", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,18 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const string empty;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n   unsigned long ul;\n   double d1 =  1.02345e+308;\n   double d2 = 3.15e-308;\n   double d;\n   long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n   long double ld;\n   void* v;\n   const void* cv = &ul2;\n@@ -148,7 +138,6 @@ void test01()\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n   long long ll;\n \n   iss.str(\"9.223.372.036.854.775.807\");"}, {"sha": "35200f8762fa85e4539022dbefef77efb28b8e1f", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/2.cc", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,31 +41,17 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const string empty;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n   unsigned long ul;\n   double d1 =  1.02345e+308;\n   double d2 = 3.15e-308;\n   double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n \n   // cache the num_get facet\n   istringstream iss;"}, {"sha": "8048dd39a7508caa08042e4102f9eaa2b35f5213", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/3.cc", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,38 +41,18 @@ void test03()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const string empty;\n-  char c;\n \n-  bool b1 = true;\n-  bool b0 = false;\n   long l1 = 2147483647;\n   long l2 = -2147483647;\n   long l;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  unsigned long ul;\n-  double d1 =  1.02345e+308;\n-  double d2 = 3.15e-308;\n-  double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n \n   // cache the num_get facet\n   istringstream iss;\n   iss.imbue(loc_hk);\n   const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = ios_base::goodbit;\n \n   // HK"}, {"sha": "f7c4cb044dc86b87b8f32f944e1e4cd38b17a012", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/4.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,14 +29,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check num_get works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef string::const_iterator iter_type;\n   typedef num_get<char, iter_type> num_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = ios_base::goodbit;\n   const locale loc_c = locale::classic();\n   const string str(\"20000106 Elizabeth Durack\");"}, {"sha": "ad43c9d79cf702a0e2d8da64cf9f7172603ac9d5", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test05()\n {\n   using namespace std;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n  \n   unsigned long ul;\n "}, {"sha": "ccf51d3dbd610677302ee354a37a21c7e43c5f83", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test06()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   double d = 0.0;\n "}, {"sha": "79fc4291c1cdc8808fa8a2737b3da092c6881d6b", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,18 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const wstring empty;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n   unsigned long ul;\n   double d1 =  1.02345e+308;\n   double d2 = 3.15e-308;\n   double d;\n   long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n   long double ld;\n   void* v;\n   const void* cv = &ul2;\n@@ -147,7 +137,6 @@ void test01()\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n   long long ll;\n \n   iss.str(L\"9.223.372.036.854.775.807\");"}, {"sha": "ec1b338b1da0d795ebc70a4c08e78414008ed937", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,31 +41,17 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const wstring empty;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n   unsigned long ul;\n   double d1 =  1.02345e+308;\n   double d2 = 3.15e-308;\n   double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n \n   // cache the num_get facet\n   wistringstream iss;"}, {"sha": "fbe887bee908372eb46b03b8ad5b8f2174d294c4", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,38 +41,18 @@ void test03()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const wstring empty;\n-  char c;\n \n-  bool b1 = true;\n-  bool b0 = false;\n   long l1 = 2147483647;\n   long l2 = -2147483647;\n   long l;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  unsigned long ul;\n-  double d1 =  1.02345e+308;\n-  double d2 = 3.15e-308;\n-  double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n \n   // cache the num_get facet\n   wistringstream iss;\n   iss.imbue(loc_hk);\n   const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = ios_base::goodbit;\n \n   // HK"}, {"sha": "9b956571d02fea39da3c6ee065d555bc67057aa0", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,14 +29,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check num_get works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef wstring::const_iterator iter_type;\n   typedef num_get<wchar_t, iter_type> num_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = ios_base::goodbit;\n   const locale loc_c = locale::classic();\n   const wstring str(L\"20000106 Elizabeth Durack\");"}, {"sha": "618b74ceaa0d1fbc0d27f81b5e79af019b59ec91", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test05()\n {\n   using namespace std;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n  \n   unsigned long ul;\n "}, {"sha": "fac26fe173aac99a24c3ceeb0aa0516e039f46b5", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test06()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   double d = 0.0;\n "}, {"sha": "b520007f740fd98ff4e58c1459f4670c7e70f6ed", "filename": "libstdc++-v3/testsuite/22_locale/num_put/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::num_put<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "879337a0d6252d86692ac0c78854e618bd0dbd84", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/1.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,22 +42,16 @@ void test01()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n   const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n \n   // sanity check the data is correct.\n   const string empty;\n   string result1;\n   string result2;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n   unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n   double d1 =  1.7976931348623157e+308;\n   double d2 = 2.2250738585072014e-308;\n   long double ld1 = 1.7976931348623157e+308;\n@@ -157,7 +151,6 @@ void test01()\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n \n   oss.str(empty);\n   oss.clear();"}, {"sha": "6b6eb3e3f12293c17bbda3a112fbee69f79d9e02", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/2.cc", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,15 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const string empty;\n   string result1;\n   string result2;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n \n   // cache the num_put facet\n   ostringstream oss;"}, {"sha": "064e2d79dcb73cc0e155467ca7a7165f8f3fa5a8", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/3.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,13 @@ void test03()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const string empty;\n   string result1;\n   string result2;\n-  char c;\n \n-  bool b1 = true;\n-  bool b0 = false;\n   long l1 = 2147483647;\n   long l2 = -2147483647;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n \n   // cache the num_put facet\n   ostringstream oss;"}, {"sha": "e7b139b0270fe197c95faa01c963684bba9a0f85", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/4.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,15 +27,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check num_put works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef string::iterator iter_type;\n   typedef char_traits<char> traits;\n   typedef num_put<char, iter_type> num_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   const locale loc_c = locale::classic();\n   const string str(\"1798 Lady Elgin\");\n   const string str2(\"0 true 0xbffff74c Mary Nisbet\");"}, {"sha": "467ecf9e43f48a770dc994c5f537bd9604e6fa21", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // A locale that expects grouping.\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE\");"}, {"sha": "4675fc421113252f17c19b217977d385ae749580", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   ostringstream oss1, oss2;\n   const num_put<char>& np1 = use_facet<num_put<char> >(oss1.getloc());"}, {"sha": "8299be9d8ab912812906fb4c5964c2a4ad1fd630", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef num_put<char> np_t;\n "}, {"sha": "86a02a6e4083bb30c1764a0f503bf5030118f69e", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   using namespace std;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -42,22 +42,16 @@ void test01()\n   VERIFY( loc_de != loc_fr );\n \n   // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de);\n+ \n   // sanity check the data is correct.\n   const wstring empty;\n   wstring result1;\n   wstring result2;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n   unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n   double d1 =  1.7976931348623157e+308;\n   double d2 = 2.2250738585072014e-308;\n   long double ld1 = 1.7976931348623157e+308;\n@@ -157,7 +151,6 @@ void test01()\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n \n   oss.str(empty);\n   oss.clear();"}, {"sha": "563bf96c8257de816712918141f547fafcc83e42", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test02()\n   using namespace std;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,15 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const wstring empty;\n   wstring result1;\n   wstring result2;\n-  char c;\n \n   bool b1 = true;\n   bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n   unsigned long ul1 = 1294967294;\n   unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n \n   // cache the num_put facet\n   wostringstream oss;"}, {"sha": "3c4728ce46c744a47378fe66b65cc9824c102118", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test03()\n   using namespace std;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,28 +41,13 @@ void test03()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n   // sanity check the data is correct.\n   const wstring empty;\n   wstring result1;\n   wstring result2;\n-  char c;\n \n-  bool b1 = true;\n-  bool b0 = false;\n   long l1 = 2147483647;\n   long l2 = -2147483647;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n \n   // cache the num_put facet\n   wostringstream oss;"}, {"sha": "3fc65175492e859f2b4f33309cf3dac7d464440d", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/4.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,15 +27,13 @@\n void test04()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check num_put works with other iterators besides streambuf\n   // output iterators. (As long as output_iterator requirements are met.)\n   typedef wstring::iterator iter_type;\n   typedef char_traits<wchar_t> traits;\n   typedef num_put<wchar_t, iter_type> num_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   const locale loc_c = locale::classic();\n   const wstring str(L\"1798 Lady Elgin\");\n   const wstring str2(L\"0 true 0xbffff74c Mary Nisbet\");"}, {"sha": "51bcbff6c86f9729fc0c6f05ffc4439c7a4013f8", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/5.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@\n void test05()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // A locale that expects grouping.\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE\");"}, {"sha": "88ceb0d97827cac556ee1f39cfd3d162f40ba5b8", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -28,7 +28,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   wostringstream woss1, woss2;\n   const num_put<wchar_t>& np1 = use_facet<num_put<wchar_t> >(woss1.getloc());"}, {"sha": "d8cee64f68fd5ece95c8daeead6fccbba2c0572c", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/7.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F7.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   typedef num_put<wchar_t> npw_t;\n "}, {"sha": "955eaef45f1cba5f8bfe3b23e8461b0dd47a3c1e", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -29,7 +29,7 @@ void test01()\n   typedef std::numpunct<char> test_type;\n   typedef std::locale::facet base_type;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n+  const base_type* base __attribute__((unused)) = &obj;\n }\n \n int main()"}, {"sha": "111ad527a742f7bb5f48c35d61a8946622ed6d07", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/1.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test01()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,9 +41,6 @@ void test01()\n \n   // cache the numpunct facets\n   const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& nump_us = use_facet<numpunct<char> >(loc_us); \n-  const numpunct<char>& nump_fr = use_facet<numpunct<char> >(loc_fr); \n-  const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n \n   // sanity check the data is correct.\n   char dp1 = nump_c.decimal_point();"}, {"sha": "cbff78e57409ff671038806747b77136ed3f6687", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/2.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test02()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -46,8 +46,6 @@ void test02()\n   const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n \n   // sanity check the data is correct.\n-  char dp1 = nump_c.decimal_point();\n-  char th1 = nump_c.thousands_sep();\n   string g1 = nump_c.grouping();\n   string t1 = nump_c.truename();\n   string f1 = nump_c.falsename();"}, {"sha": "57a6de733e8b24c43c8bb6f4a973f6c5308c5101", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/cache_1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const string \tbasestr(\"true\");\n   const string \tderivedstr(\"truest\");\n "}, {"sha": "6be2ec04f8834ad6ea71772e6a6030950a172b9a", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/cache_2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -46,7 +46,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const string \tempty;\n   const string \tbasestr(\"true\");\n   const string \tderivedstr(\"truest\");"}, {"sha": "da6a149d30732d8c4958226bd437f26f7f2e69bc", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -36,7 +36,7 @@ namespace std\n {\n   template<>\n     void\n-    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale __cloc)\n+    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale)\n     {\n       if (!_M_data)\n \t_M_data = new __numpunct_cache<podchar_type>;\n@@ -92,7 +92,7 @@ void test01()\n   typedef basic_stringbuf<podchar_type> \tstringbuf_type;\n   typedef basic_ostream<podchar_type> \t\tostream_type;\n   \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Pre-cache sanity check.\n   const locale \tloc(locale::classic(), new numpunct<podchar_type>);"}, {"sha": "10b5dedfe0cf32fd0f017e986925a26d04bd97a7", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/2.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -37,24 +37,24 @@ namespace std\n   template<>\n     bool \n     ctype<podchar_type>::\n-    do_is(mask __m, char_type __c) const { return true; }\n+    do_is(mask, char_type) const { return true; }\n \n   template<>\n     const podchar_type*\n     ctype<podchar_type>::\n-    do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n+    do_is(const char_type* __lo, const char_type*, mask*) const\n     { return __lo; }\n \n   template<>\n     const podchar_type*\n     ctype<podchar_type>::\n-    do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n+    do_scan_is(mask, const char_type* __lo, const char_type*) const\n     { return __lo; }\n \n   template<>\n     const podchar_type*\n     ctype<podchar_type>::\n-    do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+    do_scan_not(mask, const char_type* __lo, const char_type*) const\n     { return __lo; }\n \n   template<>\n@@ -66,7 +66,7 @@ namespace std\n   template<>\n     const podchar_type*\n     ctype<podchar_type>::\n-    do_toupper(char_type* __lo, const char_type* __hi) const\n+    do_toupper(char_type*, const char_type* __hi) const\n     { return __hi; }\n \n   template<>\n@@ -78,7 +78,7 @@ namespace std\n   template<>\n     const podchar_type*\n     ctype<podchar_type>::\n-    do_tolower(char_type* __lo, const char_type* __hi) const\n+    do_tolower(char_type*, const char_type* __hi) const\n     { return __hi; }\n \n   template<>\n@@ -114,7 +114,7 @@ namespace std\n     const podchar_type*\n     ctype<podchar_type>::\n     do_narrow(const podchar_type* __lo, const podchar_type* __hi, \n-\t      char __dfault, char* __dest) const\n+\t      char, char* __dest) const\n     {\n       while (__lo < __hi)\n \t{\n@@ -130,7 +130,7 @@ namespace std\n \n   template<>\n     void\n-    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale __cloc)\n+    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale)\n     {\n       if (!_M_data)\n \t_M_data = new __numpunct_cache<podchar_type>;"}, {"sha": "5d60b6cb7e02bf59af5deeea877a5dbdb101699c", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test01()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -41,9 +41,6 @@ void test01()\n \n   // cache the numpunct facets\n   const numpunct<wchar_t>& nump_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& nump_us = use_facet<numpunct<wchar_t> >(loc_us); \n-  const numpunct<wchar_t>& nump_fr = use_facet<numpunct<wchar_t> >(loc_fr); \n-  const numpunct<wchar_t>& nump_de = use_facet<numpunct<wchar_t> >(loc_de); \n \n   // sanity check the data is correct.\n   wchar_t dp1 = nump_c.decimal_point();"}, {"sha": "94e4b1d341f882cefcac694a99750b8b5be5e4b9", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/2.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test02()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n@@ -46,8 +46,6 @@ void test02()\n   const numpunct<wchar_t>& nump_de = use_facet<numpunct<wchar_t> >(loc_de); \n \n   // sanity check the data is correct.\n-  wchar_t dp1 = nump_c.decimal_point();\n-  wchar_t th1 = nump_c.thousands_sep();\n   string g1 = nump_c.grouping();\n   wstring t1 = nump_c.truename();\n   wstring f1 = nump_c.falsename();"}, {"sha": "fc96d05c54f3987103da947a4121740676c205a8", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/cache_1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -47,7 +47,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const wstring \tbasestr(L\"true\");\n   const wstring \tderivedstr(L\"truest\");\n "}, {"sha": "09661c9482d5530ce7281c4a956e838ff087468b", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/cache_2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -46,7 +46,7 @@ void test01()\n {\n   using namespace std;\n \n-  bool \t\ttest = true;\n+  bool test __attribute__((unused)) = true;\n   const wstring \tempty;\n   const wstring \tbasestr(L\"true\");\n   const wstring \tderivedstr(L\"truest\");"}, {"sha": "171149ec76750ba49d11bfc00363d9f44d42ce8e", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test01()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   string str;\n \n   locale loc_de = __gnu_test::try_named_locale(\"de_DE\");"}, {"sha": "57e7f3019845e92265a69b19036562bf97f7c446", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@ void test02()\n {\n   using namespace std;\n   \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   locale loc_it = __gnu_test::try_named_locale(\"it_IT\");\n "}, {"sha": "d6de6422c3acd90149395a47dfab01b7cf42c149", "filename": "libstdc++-v3/testsuite/22_locale/time_get/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,8 +30,8 @@ void test01()\n   typedef std::locale::facet base_type1;\n   typedef std::time_base base_type2;\n   const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type1* base1 = &obj;\n-  const base_type2* base2 = &obj;\n+  const base_type1* base1 __attribute__((unused)) = &obj;\n+  const base_type2* base2 __attribute__((unused)) = &obj;\n   \n   // Check for required typedefs\n   typedef test_type::char_type char_type;"}, {"sha": "4eb2a3149e007803ee26b370d0c93416b754eefc", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/char/1.cc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -1,5 +1,4 @@\n // 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n // Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -27,7 +26,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<char> iterator_type;\n \n@@ -41,13 +40,7 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n-  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n-  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n-  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n-\n-  const string empty;\n+   const string empty;\n \n   // create an ostream-derived object, cache the time_get facet\n   iterator_type end;"}, {"sha": "3916275ae7367b853d69021931921b8f4ec9603b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,7 +27,7 @@\n void test01()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n@@ -41,12 +41,6 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n-  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n-  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n-  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n-\n   const string empty;\n \n   // create an ostream-derived object, cache the time_get facet"}, {"sha": "0aa5ddcc0fad9d56fa358575ba36287dcfa1b55d", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/1.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction and sanity checks.\n   locale loc_c = locale::classic();\n@@ -42,12 +42,6 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n-  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n-  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n-  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n-\n   const string empty;\n \n   // create an ostream-derived object, cache the time_get facet\n@@ -61,11 +55,7 @@ void test01()\n   ios_base::iostate errorstate = good;\n \n   // create \"C\" time objects\n-  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n-  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n-                    \"%w %W %x %X %y %Y %Z %%\";\n-  const char* date = \"%A, the second of %B\";\n-  const char* date_ex = \"%Ex\";\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n \n   // iter_type \n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const"}, {"sha": "9860b43a6151de4ca35e6cf9c591d2c7ed161a4e", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/2.cc", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test02()\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<char> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction and sanity checks.\n   locale loc_c = locale::classic();\n@@ -42,12 +42,6 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n-  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n-  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n-  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n-\n   const string empty;\n \n   // create an ostream-derived object, cache the time_get facet\n@@ -60,11 +54,7 @@ void test02()\n   ios_base::iostate errorstate = good;\n \n   // create \"C\" time objects\n-  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n-  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n-                    \"%w %W %x %X %y %Y %Z %%\";\n-  const char* date = \"%A, the second of %B\";\n-  const char* date_ex = \"%Ex\";\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n \n   // iter_type \n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n@@ -73,7 +63,6 @@ void test02()\n   iss.imbue(loc_c);\n   iss.str(\"04/04/71\");\n   iterator_type is_it01(iss);\n-  tm time01;\n   errorstate = good;\n \n   // inspection of named locales, de_DE"}, {"sha": "3c786116bc31fb0ece915696d1ab5b4ca365323b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/3.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,19 +27,18 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check time_get works with other iterators besides streambuf\n   // input iterators.\n   typedef string::const_iterator iter_type;\n   typedef time_get<char, iter_type> time_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n \n   // Create \"C\" time objects\n-  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2, 0, 0 };\n   tm tm1;\n \n   istringstream iss; "}, {"sha": "4affdf1796a94034462d7028da66bfe5ae0c82bd", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test01()\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction and sanity checks.\n   locale loc_c = locale::classic();\n@@ -42,12 +42,6 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n-  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n-  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n-  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n-\n   const wstring empty;\n \n   // create an ostream-derived object, cache the time_get facet\n@@ -61,11 +55,7 @@ void test01()\n   ios_base::iostate errorstate = good;\n \n   // create \"C\" time objects\n-  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n-  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n-                    L\"%w %W %x %X %y %Y %Z %%\";\n-  const wchar_t* date = L\"%A, the second of %B\";\n-  const wchar_t* date_ex = L\"%Ex\";\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n \n   // iter_type \n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const"}, {"sha": "59695724138a4a40e59307ecbf60e30409e2f736", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -30,7 +30,7 @@ void test02()\n   typedef time_base::dateorder dateorder;\n   typedef istreambuf_iterator<wchar_t> iterator_type;\n \n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // basic construction and sanity checks.\n   locale loc_c = locale::classic();\n@@ -42,12 +42,6 @@ void test02()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the __timepunct facets, for quicker gdb inspection\n-  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n-  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n-  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n-  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n-\n   const wstring empty;\n \n   // create an ostream-derived object, cache the time_get facet\n@@ -60,11 +54,7 @@ void test02()\n   ios_base::iostate errorstate = good;\n \n   // create \"C\" time objects\n-  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n-  const wchar_t* all = L\"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n-                    L\"%w %W %x %X %y %Y %Z %%\";\n-  const wchar_t* date = L\"%A, the second of %B\";\n-  const wchar_t* date_ex = L\"%Ex\";\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n \n   // iter_type \n   // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n@@ -73,7 +63,6 @@ void test02()\n   iss.imbue(loc_c);\n   iss.str(L\"04/04/71\");\n   iterator_type is_it01(iss);\n-  tm time01;\n   errorstate = good;\n \n   // inspection of named locales, de_DE"}, {"sha": "6b4facc99f0eea7aca62a669b7306e7058902bee", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/3.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f10e6b1f34001a5abd7b0046c28610b058b1ff/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc?ref=11f10e6b1f34001a5abd7b0046c28610b058b1ff", "patch": "@@ -27,19 +27,18 @@\n void test03()\n {\n   using namespace std;\n-  bool test = true;\n+  bool test __attribute__((unused)) = true;\n \n   // Check time_get works with other iterators besides streambuf\n   // input iterators.\n   typedef wstring::const_iterator iter_type;\n   typedef time_get<wchar_t, iter_type> time_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n   ios_base::iostate err = goodbit;\n   const locale loc_c = locale::classic();\n \n   // Create \"C\" time objects\n-  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2, 0, 0 };\n   tm tm1;\n \n   istringstream iss; "}]}