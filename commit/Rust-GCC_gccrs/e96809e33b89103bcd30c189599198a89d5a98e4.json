{"sha": "e96809e33b89103bcd30c189599198a89d5a98e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2ODA5ZTMzYjg5MTAzYmNkMzBjMTg5NTk5MTk4YTg5ZDVhOThlNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-09-12T20:55:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-09-12T20:55:55Z"}, "message": "Fix aligned-new tests on m68k.\n\n\t* c-common.c (check_cxx_fundamental_alignment_constraints): Fix\n\tbit/byte confusion, allow large alignment for types.\n\nFrom-SVN: r240100", "tree": {"sha": "e98f4d24a4d7b19636f8622049a29ff5007747fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98f4d24a4d7b19636f8622049a29ff5007747fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e96809e33b89103bcd30c189599198a89d5a98e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96809e33b89103bcd30c189599198a89d5a98e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e96809e33b89103bcd30c189599198a89d5a98e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e96809e33b89103bcd30c189599198a89d5a98e4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1d55bf7870cac0625640e95450143fdacca7c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d55bf7870cac0625640e95450143fdacca7c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d55bf7870cac0625640e95450143fdacca7c35"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "bfa606b3191029b5ce9e8009f0276f7934d5dd3f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96809e33b89103bcd30c189599198a89d5a98e4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96809e33b89103bcd30c189599198a89d5a98e4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e96809e33b89103bcd30c189599198a89d5a98e4", "patch": "@@ -1,3 +1,8 @@\n+2016-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (check_cxx_fundamental_alignment_constraints): Fix\n+\tbit/byte confusion, allow large alignment for types.\n+\n 2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77496"}, {"sha": "9b5e016191325445cec06b321535e043681aeb7d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e96809e33b89103bcd30c189599198a89d5a98e4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e96809e33b89103bcd30c189599198a89d5a98e4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e96809e33b89103bcd30c189599198a89d5a98e4", "patch": "@@ -7836,8 +7836,7 @@ check_user_alignment (const_tree align, bool allow_zero)\n   return i;\n }\n \n-/* \n-   If in c++-11, check if the c++-11 alignment constraint with respect\n+/* If in c++-11, check if the c++-11 alignment constraint with respect\n    to fundamental alignment (in [dcl.align]) are satisfied.  If not in\n    c++-11 mode, does nothing.\n \n@@ -7862,7 +7861,7 @@ check_cxx_fundamental_alignment_constraints (tree node,\n \t\t\t\t\t     int flags)\n {\n   bool alignment_too_large_p = false;\n-  unsigned requested_alignment = 1U << align_log;\n+  unsigned requested_alignment = (1U << align_log) * BITS_PER_UNIT;\n   unsigned max_align = 0;\n \n   if ((!(flags & ATTR_FLAG_CXX11) && !warn_cxx_compat)\n@@ -7906,15 +7905,19 @@ check_cxx_fundamental_alignment_constraints (tree node,\n     }\n   else if (TYPE_P (node))\n     {\n-      /* Let's be liberal for types.  */\n-      if (requested_alignment > (max_align = BIGGEST_ALIGNMENT))\n+      /* Let's be liberal for types.  BIGGEST_ALIGNMENT is the largest\n+\t alignment a built-in type can require, MAX_OFILE_ALIGNMENT is the\n+\t largest alignment the object file can represent, but a type that is\n+\t only allocated dynamically could request even larger alignment.  So\n+\t only limit type alignment to what TYPE_ALIGN can represent.  */\n+      if (requested_alignment > (max_align = 8U << 28))\n \talignment_too_large_p = true;\n     }\n \n   if (alignment_too_large_p)\n     pedwarn (input_location, OPT_Wattributes,\n \t     \"requested alignment %d is larger than %d\",\n-\t     requested_alignment, max_align);\n+\t     requested_alignment / BITS_PER_UNIT, max_align / BITS_PER_UNIT);\n \n   return !alignment_too_large_p;\n }"}]}