{"sha": "495db1a1155904059e4239dc124c85717245d761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1ZGIxYTExNTU5MDQwNTllNDIzOWRjMTI0Yzg1NzE3MjQ1ZDc2MQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2006-04-25T12:11:25Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2006-04-25T12:11:25Z"}, "message": "expmed.c (store_bit_field): Handle paradoxical subregs on big endian machines.\n\n2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* expmed.c (store_bit_field): Handle paradoxical subregs on big endian\n\tmachines.\n\n2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* gcc.dg/20060425-1.c: New testcase.\n\nFrom-SVN: r113248", "tree": {"sha": "d52d7694a2925756c7a06010431f2e6f09f3fa68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52d7694a2925756c7a06010431f2e6f09f3fa68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/495db1a1155904059e4239dc124c85717245d761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495db1a1155904059e4239dc124c85717245d761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495db1a1155904059e4239dc124c85717245d761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495db1a1155904059e4239dc124c85717245d761/comments", "author": null, "committer": null, "parents": [{"sha": "6d75cd5f57c4d23cdbd5acf9da32daf5265c07af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d75cd5f57c4d23cdbd5acf9da32daf5265c07af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d75cd5f57c4d23cdbd5acf9da32daf5265c07af"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "eb38288dd3ba93ac43f366337c841f9c498ac589", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495db1a1155904059e4239dc124c85717245d761/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495db1a1155904059e4239dc124c85717245d761/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=495db1a1155904059e4239dc124c85717245d761", "patch": "@@ -1,3 +1,8 @@\n+2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* expmed.c (store_bit_field): Handle paradoxical subregs on big endian\n+\tmachines.\n+\n 2006-04-25  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* genmodes.c (make_vector_mode): Allow making VECTOR_MODE_INT of a"}, {"sha": "31b8241f29b3fab536276b47cffa66b9f8b427c0", "filename": "gcc/expmed.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495db1a1155904059e4239dc124c85717245d761/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495db1a1155904059e4239dc124c85717245d761/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=495db1a1155904059e4239dc124c85717245d761", "patch": "@@ -363,7 +363,25 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t meaningful at a much higher level; when structures are copied\n \t between memory and regs, the higher-numbered regs\n \t always get higher addresses.  */\n-      bitnum += SUBREG_BYTE (op0) * BITS_PER_UNIT;\n+      int inner_mode_size = GET_MODE_SIZE (GET_MODE (SUBREG_REG (op0)));\n+      int outer_mode_size = GET_MODE_SIZE (GET_MODE (op0));\n+      \n+      byte_offset = 0;\n+\n+      /* Paradoxical subregs need special handling on big endian machines.  */\n+      if (SUBREG_BYTE (op0) == 0 && inner_mode_size < outer_mode_size)\n+\t{\n+\t  int difference = inner_mode_size - outer_mode_size;\n+\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    byte_offset += (difference / UNITS_PER_WORD) * UNITS_PER_WORD;\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    byte_offset += difference % UNITS_PER_WORD;\n+\t}\n+      else\n+\tbyte_offset = SUBREG_BYTE (op0);\n+\n+      bitnum += byte_offset * BITS_PER_UNIT;\n       op0 = SUBREG_REG (op0);\n     }\n "}, {"sha": "f29ab274c5e304b3feff6d1cacbde4a1bdf4cf7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495db1a1155904059e4239dc124c85717245d761/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495db1a1155904059e4239dc124c85717245d761/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=495db1a1155904059e4239dc124c85717245d761", "patch": "@@ -1,3 +1,7 @@\n+2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* gcc.dg/20060425-1.c: New testcase.\n+\n 2006-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/26865"}, {"sha": "7d899b2bba69470b1976283dd5b754007b15cce3", "filename": "gcc/testsuite/gcc.dg/20060425-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495db1a1155904059e4239dc124c85717245d761/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495db1a1155904059e4239dc124c85717245d761/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20060425-1.c?ref=495db1a1155904059e4239dc124c85717245d761", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+/* This failed because if conversion didn't handle insv patterns properly.  */\n+\n+void abort (void);\n+\n+union y\n+{\n+  int a;\n+  unsigned short b;\n+};\n+\n+void __attribute__ ((noinline))\n+bar (unsigned short u, union y v)\n+{\n+  if (u != 1)\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline))\n+foo (int check)\n+{\n+  union y x;\n+\n+  if (check != 0)\n+    x.b = 1;\n+  else\n+    x.b = 2;\n+  bar (x.b, x);\n+}\n+\n+int\n+main ()\n+{\n+  foo (1);\n+  return 0;\n+}"}]}