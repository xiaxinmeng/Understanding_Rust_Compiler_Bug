{"sha": "5bf31c642ec176701629edc19504b79be3c12ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmMzFjNjQyZWMxNzY3MDE2MjllZGMxOTUwNGI3OWJlM2MxMmVlNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2018-04-17T08:48:41Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2018-04-17T08:48:41Z"}, "message": "Call expand_all_artificial_thunks in ipa-cp if necessary\n\n2018-04-17  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/85421\n\t* ipa-cp.c (create_specialized_node): Call\n\texpand_all_artificial_thunks if necessary.\n\n\ttestsuite/\n\t* g++.dg/ipa/pr85421.C: New test.\n\nFrom-SVN: r259432", "tree": {"sha": "7c5d23f3669faed876def088a0135a7f05806c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5d23f3669faed876def088a0135a7f05806c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf31c642ec176701629edc19504b79be3c12ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf31c642ec176701629edc19504b79be3c12ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf31c642ec176701629edc19504b79be3c12ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf31c642ec176701629edc19504b79be3c12ee5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1236cd666661babbcf37820e8e2118e39f476632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1236cd666661babbcf37820e8e2118e39f476632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1236cd666661babbcf37820e8e2118e39f476632"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "21966a39d8e524a47c6569fbffece51aef59915c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bf31c642ec176701629edc19504b79be3c12ee5", "patch": "@@ -1,3 +1,9 @@\n+2018-04-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/85421\n+\t* ipa-cp.c (create_specialized_node): Call\n+\texpand_all_artificial_thunks if necessary.\n+\n 2018-04-17  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/85405"}, {"sha": "4e0e20af409e305be540491fe868aad87852de12", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=5bf31c642ec176701629edc19504b79be3c12ee5", "patch": "@@ -3863,13 +3863,16 @@ create_specialized_node (struct cgraph_node *node,\n   new_node = node->create_virtual_clone (callers, replace_trees,\n \t\t\t\t\t args_to_skip, \"constprop\");\n \n+  bool have_self_recursive_calls = !self_recursive_calls.is_empty ();\n   for (unsigned j = 0; j < self_recursive_calls.length (); j++)\n     {\n       cgraph_edge *cs = next_edge_clone[self_recursive_calls[j]->uid];\n       gcc_checking_assert (cs);\n       gcc_assert (cs->caller == new_node);\n       cs->redirect_callee_duplicating_thunks (new_node);\n     }\n+  if (have_self_recursive_calls)\n+    new_node->expand_all_artificial_thunks ();\n \n   ipa_set_node_agg_value_chain (new_node, aggvals);\n   for (av = aggvals; av; av = av->next)"}, {"sha": "9e44409cb7af099834842547b0dc0eedc89ad175", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bf31c642ec176701629edc19504b79be3c12ee5", "patch": "@@ -1,3 +1,8 @@\n+2018-04-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/85421\n+\t* g++.dg/ipa/pr85421.C: New test.\n+\n 2018-04-17  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/85405"}, {"sha": "517d99ae8f46def1915c10f863869e16618bc9bc", "filename": "gcc/testsuite/g++.dg/ipa/pr85421.C", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85421.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf31c642ec176701629edc19504b79be3c12ee5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85421.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr85421.C?ref=5bf31c642ec176701629edc19504b79be3c12ee5", "patch": "@@ -0,0 +1,131 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -std=gnu++1y -w\" }\n+\n+namespace {\n+template <typename b> b c(b);\n+template <typename d, typename, template <typename> class> struct f {\n+  using g = d;\n+};\n+template <typename d, template <typename> class aa> using h = f<d, void, aa>;\n+template <typename d, template <typename> class aa>\n+using i = typename h<d, aa>::g;\n+template <typename b> struct j { typedef b k; };\n+} // namespace\n+namespace l {\n+template <typename b> class m {\n+public:\n+  typedef b k;\n+};\n+} // namespace l\n+namespace a {\n+template <typename b> using n = l::m<b>;\n+template <typename b> class ac : public n<b> {};\n+struct s {\n+  template <typename b> using ad = typename b::e;\n+};\n+template <typename o> struct p : s {\n+  typedef typename o::k k;\n+  using ag = i<k *, ad>;\n+};\n+} // namespace a\n+namespace l {\n+template <typename o> struct t : a::p<o> {};\n+} // namespace l\n+namespace a {\n+template <bool> struct al {\n+  template <typename am> static void an(am ao, am) { c(*ao); }\n+};\n+template <typename am> void aq(am ao, am ap) {\n+  typedef typename j<am>::k ar;\n+  al<__has_trivial_destructor(ar)>::an(ao, ap);\n+}\n+namespace {\n+typedef char au;\n+}\n+} // namespace a\n+typedef char av;\n+typedef int aw;\n+typedef av ay;\n+typedef aw az;\n+namespace a {\n+template <typename, typename o> struct ba {\n+  typedef typename l::t<o>::ag ag;\n+  struct {\n+    ag bb;\n+    ag bc;\n+  } bd;\n+};\n+template <typename b, typename o = ac<b>> class be : ba<b, o> {\n+  typedef ba<b, o> bf;\n+  typedef typename bf::ag ag;\n+\n+public:\n+  void bh() { bi(this->bd.bb); }\n+  void bi(ag bj) { aq(bj, this->bd.bc); }\n+};\n+} // namespace a\n+namespace bk {\n+enum bl {};\n+enum bn { bo };\n+class q {\n+public:\n+  static a::au bp(bn);\n+  static bool bq(a::au *br, bn g) { return bs(br, g); }\n+  static bl bs(a::au *br, bn g) {\n+    if (br) {\n+      auto bt = bp(g);\n+      if (bt)\n+        return bl();\n+    }\n+  }\n+};\n+template <typename, typename> class bu {};\n+} // namespace bk\n+namespace bv {\n+namespace bw {\n+class bx;\n+}\n+} // namespace bv\n+namespace bk {\n+enum by { bz };\n+struct ca;\n+class cb {\n+public:\n+  class cc {\n+  public:\n+    virtual void cd(by) = 0;\n+  };\n+  virtual bu<ca, by> e();\n+  cc *cf;\n+};\n+class cg {\n+public:\n+  ~cg() { q::bq(ch, bo); }\n+  a::au *ch;\n+};\n+class ci {\n+  cg cj;\n+};\n+namespace ck {\n+enum cl : ay;\n+}\n+class r : ci {};\n+class cn {\n+public:\n+  ck::cl co();\n+};\n+by cp(ck::cl);\n+class cq : cb, cb::cc {\n+  bu<ca, by> ce(bv::bw::bx &, az) noexcept;\n+  void cd(by);\n+  void cr(bv::bw::bx &, az, cb::cc *) noexcept;\n+  cn cs;\n+  a::be<r> ct;\n+};\n+} // namespace bk\n+using bv::bw::bx;\n+namespace bk {\n+bu<ca, by> cq::ce(bx &, az) noexcept { ct.bh(); }\n+void cq::cr(bx &, az, cb::cc *) noexcept { cd(bz); }\n+void cq::cd(by) { cf->cd(cp(cs.co())); }\n+} // namespace bk"}]}