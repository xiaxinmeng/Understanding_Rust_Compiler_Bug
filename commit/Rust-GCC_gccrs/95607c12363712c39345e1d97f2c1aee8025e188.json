{"sha": "95607c12363712c39345e1d97f2c1aee8025e188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2MDdjMTIzNjM3MTJjMzkzNDVlMWQ5N2YyYzFhZWU4MDI1ZTE4OA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-01-29T16:57:02Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-01-31T11:12:06Z"}, "message": "Zero-initialise masked load destinations\n\nFixes an execution failure in testcase gfortran.dg/assumed_rank_1.f90.\n\n2020-01-30  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (gather<mode>_exec): Move contents ...\n\t(mask_gather_load<mode>): ... here, and zero-initialize the\n\tdestination.\n\t(maskload<mode>di): Zero-initialize the destination.\n\t* config/gcn/gcn.c:", "tree": {"sha": "56adf1d4dc38b20ae5966965d8c15a57fb79fbff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56adf1d4dc38b20ae5966965d8c15a57fb79fbff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95607c12363712c39345e1d97f2c1aee8025e188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95607c12363712c39345e1d97f2c1aee8025e188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95607c12363712c39345e1d97f2c1aee8025e188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95607c12363712c39345e1d97f2c1aee8025e188/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f36563ef655db48d5fda60cd7f3eac9650dade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f36563ef655db48d5fda60cd7f3eac9650dade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f36563ef655db48d5fda60cd7f3eac9650dade"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "163afbae7789cd11238e1e7d99deb838833f0e5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95607c12363712c39345e1d97f2c1aee8025e188", "patch": "@@ -1,3 +1,11 @@\n+2020-01-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (gather<mode>_exec): Move contents ...\n+\t(mask_gather_load<mode>): ... here, and zero-initialize the\n+\tdestination.\n+\t(maskload<mode>di): Zero-initialize the destination.\n+\t* config/gcn/gcn.c:\n+\n 2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93356"}, {"sha": "4aad835b2efc6416866a55c8f3ccd1c95ba98150", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=95607c12363712c39345e1d97f2c1aee8025e188", "patch": "@@ -701,34 +701,6 @@\n     DONE;\n   })\n \n-(define_expand \"gather<mode>_exec\"\n-  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n-   (match_operand:DI 1 \"register_operand\")\n-   (match_operand:V64SI 2 \"register_operand\")\n-   (match_operand 3 \"immediate_operand\")\n-   (match_operand:SI 4 \"gcn_alu_operand\")\n-   (match_operand:DI 5 \"gcn_exec_reg_operand\")]\n-  \"\"\n-  {\n-    rtx undefmode = gcn_gen_undef (<MODE>mode);\n-\n-    rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[1],\n-\t\t\t\t\t  operands[2], operands[4],\n-\t\t\t\t\t  INTVAL (operands[3]), operands[5]);\n-\n-    if (GET_MODE (addr) == V64DImode)\n-      emit_insn (gen_gather<mode>_insn_1offset_exec (operands[0], addr,\n-\t\t\t\t\t\t     const0_rtx, const0_rtx,\n-\t\t\t\t\t\t     const0_rtx, undefmode,\n-\t\t\t\t\t\t     operands[5]));\n-    else\n-      emit_insn (gen_gather<mode>_insn_2offsets_exec (operands[0], operands[1],\n-\t\t\t\t\t\t      addr, const0_rtx,\n-\t\t\t\t\t\t      const0_rtx, const0_rtx,\n-\t\t\t\t\t\t      undefmode, operands[5]));\n-    DONE;\n-  })\n-\n ; Allow any address expression\n (define_expand \"gather<mode>_expr<exec>\"\n   [(set (match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n@@ -2801,9 +2773,12 @@\n \t\t(<MODE>mode, exec, operands[1], gen_rtx_SCRATCH (V64DImode));\n     rtx as = gen_rtx_CONST_INT (VOIDmode, MEM_ADDR_SPACE (operands[1]));\n     rtx v = gen_rtx_CONST_INT (VOIDmode, MEM_VOLATILE_P (operands[1]));\n-    rtx undef = gcn_gen_undef (<MODE>mode);\n-    emit_insn (gen_gather<mode>_expr_exec (operands[0], addr, as, v, undef,\n-\t\t\t\t\t   exec));\n+\n+    /* Masked lanes are required to hold zero.  */\n+    emit_move_insn (operands[0], gcn_vec_constant (<MODE>mode, 0));\n+\n+    emit_insn (gen_gather<mode>_expr_exec (operands[0], addr, as, v,\n+\t\t\t\t\t   operands[0], exec));\n     DONE;\n   })\n \n@@ -2843,8 +2818,23 @@\n \toperands[2] = tmp;\n       }\n \n-    emit_insn (gen_gather<mode>_exec (operands[0], operands[1], operands[2],\n-\t\t\t\t      operands[3], operands[4], exec));\n+    rtx addr = gcn_expand_scaled_offsets (DEFAULT_ADDR_SPACE, operands[1],\n+\t\t\t\t\t  operands[2], operands[4],\n+\t\t\t\t\t  INTVAL (operands[3]), exec);\n+\n+    /* Masked lanes are required to hold zero.  */\n+    emit_move_insn (operands[0], gcn_vec_constant (<MODE>mode, 0));\n+\n+    if (GET_MODE (addr) == V64DImode)\n+      emit_insn (gen_gather<mode>_insn_1offset_exec (operands[0], addr,\n+\t\t\t\t\t\t     const0_rtx, const0_rtx,\n+\t\t\t\t\t\t     const0_rtx, operands[0],\n+\t\t\t\t\t\t     exec));\n+    else\n+      emit_insn (gen_gather<mode>_insn_2offsets_exec (operands[0], operands[1],\n+\t\t\t\t\t\t      addr, const0_rtx,\n+\t\t\t\t\t\t      const0_rtx, const0_rtx,\n+\t\t\t\t\t\t      operands[0], exec));\n     DONE;\n   })\n "}, {"sha": "16c3aa2567eecc036c4c40c8c4bcf45cffff399f", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95607c12363712c39345e1d97f2c1aee8025e188/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=95607c12363712c39345e1d97f2c1aee8025e188", "patch": "@@ -992,9 +992,19 @@ gcn_vec_constant (machine_mode mode, int a)\n     return CONST2_RTX (mode);*/\n \n   int units = GET_MODE_NUNITS (mode);\n-  rtx tem = gen_int_mode (a, GET_MODE_INNER (mode));\n-  rtvec v = rtvec_alloc (units);\n+  machine_mode innermode = GET_MODE_INNER (mode);\n+\n+  rtx tem;\n+  if (FLOAT_MODE_P (innermode))\n+    {\n+      REAL_VALUE_TYPE rv;\n+      real_from_integer (&rv, NULL, a, SIGNED);\n+      tem = const_double_from_real_value (rv, innermode);\n+    }\n+  else\n+    tem = gen_int_mode (a, innermode);\n \n+  rtvec v = rtvec_alloc (units);\n   for (int i = 0; i < units; ++i)\n     RTVEC_ELT (v, i) = tem;\n "}]}