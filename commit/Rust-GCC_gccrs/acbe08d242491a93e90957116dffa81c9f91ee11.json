{"sha": "acbe08d242491a93e90957116dffa81c9f91ee11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiZTA4ZDI0MjQ5MWE5M2U5MDk1NzExNmRmZmE4MWM5ZjkxZWUxMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-03T15:14:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-03T15:14:50Z"}, "message": "compiler: Don't insert promoted methods that conflict with fields.\n\nFrom-SVN: r215856", "tree": {"sha": "a72439f08ce92599a1d3699206a5d293f6fff94d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72439f08ce92599a1d3699206a5d293f6fff94d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbe08d242491a93e90957116dffa81c9f91ee11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbe08d242491a93e90957116dffa81c9f91ee11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbe08d242491a93e90957116dffa81c9f91ee11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbe08d242491a93e90957116dffa81c9f91ee11/comments", "author": null, "committer": null, "parents": [{"sha": "c6d129b0eaf2fb46b289b774057f5f04f23057f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d129b0eaf2fb46b289b774057f5f04f23057f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d129b0eaf2fb46b289b774057f5f04f23057f0"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "99b9421b36adb03dc1691ad2f334227cbe3de213", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbe08d242491a93e90957116dffa81c9f91ee11/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbe08d242491a93e90957116dffa81c9f91ee11/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=acbe08d242491a93e90957116dffa81c9f91ee11", "patch": "@@ -9387,9 +9387,14 @@ void\n Type::finalize_methods(Gogo* gogo, const Type* type, Location location,\n \t\t       Methods** all_methods)\n {\n-  *all_methods = NULL;\n+  *all_methods = new Methods();\n   std::vector<const Named_type*> seen;\n-  Type::add_methods_for_type(type, NULL, 0, false, false, &seen, all_methods);\n+  Type::add_methods_for_type(type, NULL, 0, false, false, &seen, *all_methods);\n+  if ((*all_methods)->empty())\n+    {\n+      delete *all_methods;\n+      *all_methods = NULL;\n+    }\n   Type::build_stub_methods(gogo, type, *all_methods, location);\n }\n \n@@ -9408,7 +9413,7 @@ Type::add_methods_for_type(const Type* type,\n \t\t\t   bool is_embedded_pointer,\n \t\t\t   bool needs_stub_method,\n \t\t\t   std::vector<const Named_type*>* seen,\n-\t\t\t   Methods** methods)\n+\t\t\t   Methods* methods)\n {\n   // Pointer types may not have methods.\n   if (type->points_to() != NULL)\n@@ -9457,15 +9462,12 @@ Type::add_local_methods_for_type(const Named_type* nt,\n \t\t\t\t unsigned int depth,\n \t\t\t\t bool is_embedded_pointer,\n \t\t\t\t bool needs_stub_method,\n-\t\t\t\t Methods** methods)\n+\t\t\t\t Methods* methods)\n {\n   const Bindings* local_methods = nt->local_methods();\n   if (local_methods == NULL)\n     return;\n \n-  if (*methods == NULL)\n-    *methods = new Methods();\n-\n   for (Bindings::const_declarations_iterator p =\n \t local_methods->begin_declarations();\n        p != local_methods->end_declarations();\n@@ -9476,7 +9478,7 @@ Type::add_local_methods_for_type(const Named_type* nt,\n \t\t\t      || !Type::method_expects_pointer(no));\n       Method* m = new Named_method(no, field_indexes, depth, is_value_method,\n \t\t\t\t   (needs_stub_method || depth > 0));\n-      if (!(*methods)->insert(no->name(), m))\n+      if (!methods->insert(no->name(), m))\n \tdelete m;\n     }\n }\n@@ -9492,7 +9494,7 @@ Type::add_embedded_methods_for_type(const Type* type,\n \t\t\t\t    bool is_embedded_pointer,\n \t\t\t\t    bool needs_stub_method,\n \t\t\t\t    std::vector<const Named_type*>* seen,\n-\t\t\t\t    Methods** methods)\n+\t\t\t\t    Methods* methods)\n {\n   // Look for anonymous fields in TYPE.  TYPE has fields if it is a\n   // struct.\n@@ -9530,13 +9532,35 @@ Type::add_embedded_methods_for_type(const Type* type,\n       sub_field_indexes->next = field_indexes;\n       sub_field_indexes->field_index = i;\n \n+      Methods tmp_methods;\n       Type::add_methods_for_type(fnt, sub_field_indexes, depth + 1,\n \t\t\t\t (is_embedded_pointer || is_pointer),\n \t\t\t\t (needs_stub_method\n \t\t\t\t  || is_pointer\n \t\t\t\t  || i > 0),\n \t\t\t\t seen,\n-\t\t\t\t methods);\n+\t\t\t\t &tmp_methods);\n+      // Check if there are promoted methods that conflict with field names and\n+      // don't add them to the method map.\n+      for (Methods::const_iterator p = tmp_methods.begin();\n+\t   p != tmp_methods.end();\n+\t   ++p)\n+\t{\n+\t  bool found = false;\n+\t  for (Struct_field_list::const_iterator fp = fields->begin();\n+\t       fp != fields->end();\n+\t       ++fp)\n+\t    {\n+\t      if (fp->field_name() == p->first)\n+\t\t{\n+\t\t  found = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (!found &&\n+\t      !methods->insert(p->first, p->second))\n+\t    delete p->second;\n+\t}\n     }\n }\n \n@@ -9548,7 +9572,7 @@ void\n Type::add_interface_methods_for_type(const Type* type,\n \t\t\t\t     const Method::Field_indexes* field_indexes,\n \t\t\t\t     unsigned int depth,\n-\t\t\t\t     Methods** methods)\n+\t\t\t\t     Methods* methods)\n {\n   const Interface_type* it = type->interface_type();\n   if (it == NULL)\n@@ -9558,9 +9582,6 @@ Type::add_interface_methods_for_type(const Type* type,\n   if (imethods == NULL)\n     return;\n \n-  if (*methods == NULL)\n-    *methods = new Methods();\n-\n   for (Typed_identifier_list::const_iterator pm = imethods->begin();\n        pm != imethods->end();\n        ++pm)\n@@ -9576,7 +9597,7 @@ Type::add_interface_methods_for_type(const Type* type,\n       fntype = fntype->copy_with_receiver(const_cast<Type*>(type));\n       Method* m = new Interface_method(pm->name(), pm->location(), fntype,\n \t\t\t\t       field_indexes, depth);\n-      if (!(*methods)->insert(pm->name(), m))\n+      if (!methods->insert(pm->name(), m))\n \tdelete m;\n     }\n }"}, {"sha": "2173bab8353c494a64874c0cbc55c7e523447b53", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbe08d242491a93e90957116dffa81c9f91ee11/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbe08d242491a93e90957116dffa81c9f91ee11/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=acbe08d242491a93e90957116dffa81c9f91ee11", "patch": "@@ -384,6 +384,10 @@ class Methods\n   find(const std::string& name) const\n   { return this->methods_.find(name); }\n \n+  bool\n+  empty() const\n+  { return this->methods_.empty(); }\n+\n  private:\n   Method_map methods_;\n };\n@@ -1228,24 +1232,24 @@ class Type\n   add_methods_for_type(const Type* type, const Method::Field_indexes*,\n \t\t       unsigned int depth, bool, bool,\n \t\t       std::vector<const Named_type*>*,\n-\t\t       Methods**);\n+\t\t       Methods*);\n \n   static void\n   add_local_methods_for_type(const Named_type* type,\n \t\t\t     const Method::Field_indexes*,\n-\t\t\t     unsigned int depth, bool, bool, Methods**);\n+\t\t\t     unsigned int depth, bool, bool, Methods*);\n \n   static void\n   add_embedded_methods_for_type(const Type* type,\n \t\t\t\tconst Method::Field_indexes*,\n \t\t\t\tunsigned int depth, bool, bool,\n \t\t\t\tstd::vector<const Named_type*>*,\n-\t\t\t\tMethods**);\n+\t\t\t\tMethods*);\n \n   static void\n   add_interface_methods_for_type(const Type* type,\n \t\t\t\t const Method::Field_indexes*,\n-\t\t\t\t unsigned int depth, Methods**);\n+\t\t\t\t unsigned int depth, Methods*);\n \n   // Build stub methods for a type.\n   static void"}]}