{"sha": "33160237cba68041242b7faf782ab35a5106224f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxNjAyMzdjYmE2ODA0MTI0MmI3ZmFmNzgyYWIzNWE1MTA2MjI0Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-06-06T10:24:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:24:22Z"}, "message": "exp_ch13.adb (Expand_N_Attribute_Definition_Clause, [...]): If the initialization is the equivalent aggregate of the initialization...\n\n2007-04-20  Ed Schonberg  <schonberg@adacore.com>\n\t    Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch13.adb (Expand_N_Attribute_Definition_Clause, case 'Address):\n\tIf the initialization is the equivalent aggregate of the initialization\n\tprocedure of the type, do not remove it.\n\t(Expand_N_Attribute_Definition_Clause): Exclude access variables\n\tinitialized to null from having their expression reset to empty and\n\tnote this exception in the comment.\n\nFrom-SVN: r125394", "tree": {"sha": "bdff9c3d3220741851fced6fae63fc3e5b1cbea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdff9c3d3220741851fced6fae63fc3e5b1cbea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33160237cba68041242b7faf782ab35a5106224f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33160237cba68041242b7faf782ab35a5106224f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33160237cba68041242b7faf782ab35a5106224f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33160237cba68041242b7faf782ab35a5106224f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31104818b707112ad18f985f4d1ab3689bf6625e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31104818b707112ad18f985f4d1ab3689bf6625e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31104818b707112ad18f985f4d1ab3689bf6625e"}], "stats": {"total": 125, "additions": 23, "deletions": 102}, "files": [{"sha": "a9dc657daed6a81f1d5698554a32fdf17c768ae7", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 23, "deletions": 102, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33160237cba68041242b7faf782ab35a5106224f/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33160237cba68041242b7faf782ab35a5106224f/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=33160237cba68041242b7faf782ab35a5106224f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,12 +27,12 @@\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n-with Exp_Atag; use Exp_Atag;\n with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Imgv; use Exp_Imgv;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Rtsfind;  use Rtsfind;\n@@ -44,17 +44,11 @@ with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n-with Stringt;  use Stringt;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n package body Exp_Ch13 is\n \n-   procedure Expand_External_Tag_Definition (N : Node_Id);\n-   --  The code to assign and register an external tag must be elaborated\n-   --  after the dispatch table has been created, so the expansion of the\n-   --  attribute definition node is delayed until after the type is frozen.\n-\n    ------------------------------------------\n    -- Expand_N_Attribute_Definition_Clause --\n    ------------------------------------------\n@@ -89,17 +83,33 @@ package body Exp_Ch13 is\n             --  inappropriate for variable to which an address clause is\n             --  applied. The expression may itself have been rewritten if the\n             --  type is packed array, so we need to examine whether the\n-            --  original node is in the source.\n+            --  original node is in the source. An exception though is the case\n+            --  of an access variable which is default initialized to null, and\n+            --  such initialization is retained.\n+            --  Furthermore, if the initialization is the  equivalent aggregate\n+            --  of the type initialization procedure, it replaces an implicit\n+            --  call to the init proc, and must be respected. Note that for\n+            --  packed types we do not build equivalent aggregates.\n \n             declare\n                Decl : constant Node_Id := Declaration_Node (Ent);\n+               Typ  : constant Entity_Id := Etype (Ent);\n+\n             begin\n                if Nkind (Decl) = N_Object_Declaration\n                   and then Present (Expression (Decl))\n+                  and then Nkind (Expression (Decl)) /= N_Null\n                   and then\n                    not Comes_From_Source (Original_Node (Expression (Decl)))\n                then\n-                  Set_Expression (Decl, Empty);\n+                  if Present (Base_Init_Proc (Typ))\n+                    and then\n+                      Present (Static_Initialization (Base_Init_Proc (Typ)))\n+                  then\n+                     null;\n+                  else\n+                     Set_Expression (Decl, Empty);\n+                  end if;\n                end if;\n             end;\n \n@@ -159,78 +169,8 @@ package body Exp_Ch13 is\n             null;\n \n       end case;\n-\n    end Expand_N_Attribute_Definition_Clause;\n \n-   -------------------------------------\n-   -- Expand_External_Tag_Definition --\n-   -------------------------------------\n-\n-   procedure Expand_External_Tag_Definition (N : Node_Id) is\n-      Loc     : constant Source_Ptr := Sloc (N);\n-      Ent     : constant Entity_Id  := Entity (Name (N));\n-      Old_Val : constant String_Id  := Strval (Expr_Value_S (Expression (N)));\n-      New_Val : String_Id;\n-      E       : Entity_Id;\n-\n-   begin\n-      --  For the rep clause \"for x'external_tag use y\" generate:\n-\n-      --     xV : constant string := y;\n-      --     Set_External_Tag (x'tag, xV'Address);\n-      --     Register_Tag (x'tag);\n-\n-      --  note that register_tag has been delayed up to now because\n-      --  the external_tag must be set before registering.\n-\n-      --  Create a new nul terminated string if it is not already\n-\n-      if String_Length (Old_Val) > 0\n-        and then Get_String_Char (Old_Val, String_Length (Old_Val)) = 0\n-      then\n-         New_Val := Old_Val;\n-      else\n-         Start_String (Old_Val);\n-         Store_String_Char (Get_Char_Code (ASCII.NUL));\n-         New_Val := End_String;\n-      end if;\n-\n-      E :=\n-        Make_Defining_Identifier (Loc,\n-          New_External_Name (Chars (Ent), 'A'));\n-\n-      --  The generated actions must be elaborated at the subsequent\n-      --  freeze point, not at the point of the attribute definition.\n-\n-      Append_Freeze_Action (Ent,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => E,\n-          Constant_Present    => True,\n-          Object_Definition   =>\n-            New_Reference_To (Standard_String, Loc),\n-          Expression          =>\n-            Make_String_Literal (Loc, Strval => New_Val)));\n-\n-      Append_Freeze_Actions (Ent, New_List (\n-\n-        Build_Set_External_Tag (Loc,\n-          Tag_Node =>\n-            Make_Attribute_Reference (Loc,\n-              Attribute_Name => Name_Tag,\n-              Prefix         => New_Occurrence_Of (Ent, Loc)),\n-          Value_Node =>\n-            Make_Attribute_Reference (Loc,\n-              Attribute_Name => Name_Address,\n-              Prefix         => New_Occurrence_Of (E, Loc))),\n-\n-        Make_Procedure_Call_Statement (Loc,\n-          Name => New_Reference_To (RTE (RE_Register_Tag), Loc),\n-          Parameter_Associations => New_List (\n-            Make_Attribute_Reference (Loc,\n-              Attribute_Name => Name_Tag,\n-              Prefix         => New_Occurrence_Of (Ent, Loc))))));\n-   end Expand_External_Tag_Definition;\n-\n    ----------------------------\n    -- Expand_N_Freeze_Entity --\n    ----------------------------\n@@ -295,7 +235,7 @@ package body Exp_Ch13 is\n       --  visibility before freezing the entity and related subprograms.\n \n       if In_Other_Scope then\n-         New_Scope (E_Scope);\n+         Push_Scope (E_Scope);\n          Install_Visible_Declarations (E_Scope);\n \n          if Ekind (E_Scope) = E_Package         or else\n@@ -312,7 +252,7 @@ package body Exp_Ch13 is\n       --  can properly override any corresponding inherited operations.\n \n       elsif In_Outer_Scope then\n-         New_Scope (E_Scope);\n+         Push_Scope (E_Scope);\n       end if;\n \n       --  If type, freeze the type\n@@ -324,25 +264,6 @@ package body Exp_Ch13 is\n \n          if Is_Enumeration_Type (E) then\n             Build_Enumeration_Image_Tables (E, N);\n-\n-         elsif Is_Tagged_Type (E)\n-           and then Is_First_Subtype (E)\n-         then\n-            --  Check for a definition of External_Tag, whose expansion must\n-            --  be delayed until the dispatch table is built. The clause\n-            --  is considered only if it applies to this specific tagged\n-            --  type, as opposed to one of its ancestors.\n-\n-            declare\n-               Def : constant Node_Id :=\n-                       Get_Attribute_Definition_Clause\n-                         (E, Attribute_External_Tag);\n-\n-            begin\n-               if Present (Def) and then Entity (Name (Def)) = E then\n-                  Expand_External_Tag_Definition (Def);\n-               end if;\n-            end;\n          end if;\n \n       --  If subprogram, freeze the subprogram\n@@ -384,7 +305,7 @@ package body Exp_Ch13 is\n               and then Present (Corresponding_Spec (Decl))\n               and then Scope (Corresponding_Spec (Decl)) /= Current_Scope\n             then\n-               New_Scope (Scope (Corresponding_Spec (Decl)));\n+               Push_Scope (Scope (Corresponding_Spec (Decl)));\n                Analyze (Decl, Suppress => All_Checks);\n                Pop_Scope;\n "}]}