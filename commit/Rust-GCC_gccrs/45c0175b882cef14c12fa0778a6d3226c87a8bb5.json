{"sha": "45c0175b882cef14c12fa0778a6d3226c87a8bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjMDE3NWI4ODJjZWYxNGMxMmZhMDc3OGE2ZDMyMjZjODdhOGJiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-05T11:30:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-05T11:30:40Z"}, "message": "tree.c (integer_zerop): Handle VECTOR_CSTs.\n\n2012-03-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (integer_zerop): Handle VECTOR_CSTs.\n\t(integer_onep): Likewise.\n\t(integer_all_onesp): Likewise.\n\nFrom-SVN: r184923", "tree": {"sha": "9bf6a96d174a065bab2498da5d8deaaabca275dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf6a96d174a065bab2498da5d8deaaabca275dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45c0175b882cef14c12fa0778a6d3226c87a8bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c0175b882cef14c12fa0778a6d3226c87a8bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c0175b882cef14c12fa0778a6d3226c87a8bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c0175b882cef14c12fa0778a6d3226c87a8bb5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d84f3a058b23726afe83d314b87b06b8e1cfd1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84f3a058b23726afe83d314b87b06b8e1cfd1be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84f3a058b23726afe83d314b87b06b8e1cfd1be"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "a7736fdfe9bab16aee85331dbe967e7880e39202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c0175b882cef14c12fa0778a6d3226c87a8bb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c0175b882cef14c12fa0778a6d3226c87a8bb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45c0175b882cef14c12fa0778a6d3226c87a8bb5", "patch": "@@ -1,3 +1,9 @@\n+2012-03-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (integer_zerop): Handle VECTOR_CSTs.\n+\t(integer_onep): Likewise.\n+\t(integer_all_onesp): Likewise.\n+\n 2012-03-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (*umaddqihi4.2): New insn-and-split."}, {"sha": "3b8f6785a12e2e5f887b9318d9e195fdb7b38e30", "filename": "gcc/tree.c", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c0175b882cef14c12fa0778a6d3226c87a8bb5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c0175b882cef14c12fa0778a6d3226c87a8bb5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=45c0175b882cef14c12fa0778a6d3226c87a8bb5", "patch": "@@ -1714,12 +1714,25 @@ integer_zerop (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == INTEGER_CST\n-\t   && TREE_INT_CST_LOW (expr) == 0\n-\t   && TREE_INT_CST_HIGH (expr) == 0)\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && integer_zerop (TREE_REALPART (expr))\n-\t      && integer_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case INTEGER_CST:\n+      return (TREE_INT_CST_LOW (expr) == 0\n+\t      && TREE_INT_CST_HIGH (expr) == 0);\n+    case COMPLEX_CST:\n+      return (integer_zerop (TREE_REALPART (expr))\n+\t      && integer_zerop (TREE_IMAGPART (expr)));\n+    case VECTOR_CST:\n+      {\n+\ttree elt;\n+\tfor (elt = TREE_VECTOR_CST_ELTS (expr); elt; elt = TREE_CHAIN (elt))\n+\t  if (!integer_zerop (TREE_VALUE (elt)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Return 1 if EXPR is the integer constant one or the corresponding\n@@ -1730,12 +1743,25 @@ integer_onep (const_tree expr)\n {\n   STRIP_NOPS (expr);\n \n-  return ((TREE_CODE (expr) == INTEGER_CST\n-\t   && TREE_INT_CST_LOW (expr) == 1\n-\t   && TREE_INT_CST_HIGH (expr) == 0)\n-\t  || (TREE_CODE (expr) == COMPLEX_CST\n-\t      && integer_onep (TREE_REALPART (expr))\n-\t      && integer_zerop (TREE_IMAGPART (expr))));\n+  switch (TREE_CODE (expr))\n+    {\n+    case INTEGER_CST:\n+      return (TREE_INT_CST_LOW (expr) == 1\n+\t      && TREE_INT_CST_HIGH (expr) == 0);\n+    case COMPLEX_CST:\n+      return (integer_onep (TREE_REALPART (expr))\n+\t      && integer_zerop (TREE_IMAGPART (expr)));\n+    case VECTOR_CST:\n+      {\n+\ttree elt;\n+\tfor (elt = TREE_VECTOR_CST_ELTS (expr); elt; elt = TREE_CHAIN (elt))\n+\t  if (!integer_onep (TREE_VALUE (elt)))\n+\t    return false;\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n }\n \n /* Return 1 if EXPR is an integer containing all 1's in as much precision as\n@@ -1754,6 +1780,15 @@ integer_all_onesp (const_tree expr)\n       && integer_zerop (TREE_IMAGPART (expr)))\n     return 1;\n \n+  else if (TREE_CODE (expr) == VECTOR_CST)\n+    {\n+      tree elt;\n+      for (elt = TREE_VECTOR_CST_ELTS (expr); elt; elt = TREE_CHAIN (elt))\n+\tif (!integer_all_onesp (TREE_VALUE (elt)))\n+\t  return 0;\n+      return 1;\n+    }\n+\n   else if (TREE_CODE (expr) != INTEGER_CST)\n     return 0;\n "}]}