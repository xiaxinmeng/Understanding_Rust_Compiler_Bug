{"sha": "3e52eaab8c57ad06bcd553f140923a34e5749991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1MmVhYWI4YzU3YWQwNmJjZDU1M2YxNDA5MjNhMzRlNTc0OTk5MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-01T22:11:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-01T23:10:17Z"}, "message": "compiler: set varargs correctly for type of method expression\n\nFixes golang/go#41737\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/258977", "tree": {"sha": "aefb9c7afe93c5278b9850695b7bd04af33cd99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aefb9c7afe93c5278b9850695b7bd04af33cd99b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e52eaab8c57ad06bcd553f140923a34e5749991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e52eaab8c57ad06bcd553f140923a34e5749991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e52eaab8c57ad06bcd553f140923a34e5749991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e52eaab8c57ad06bcd553f140923a34e5749991/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c69e61f4307865b95151006e480ae2022b30454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c69e61f4307865b95151006e480ae2022b30454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c69e61f4307865b95151006e480ae2022b30454"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "94827406df1915bbd84d948708e7ac1a855fb477", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e52eaab8c57ad06bcd553f140923a34e5749991/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e52eaab8c57ad06bcd553f140923a34e5749991/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3e52eaab8c57ad06bcd553f140923a34e5749991", "patch": "@@ -1,4 +1,4 @@\n-c9c084bce713e258721e12041a351ec8ad33ad17\n+801c458a562d22260ff176c26d65639dd32c8a90\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e7a742f636650be420a7d46e3c7f2c88bc2552ab", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e52eaab8c57ad06bcd553f140923a34e5749991/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e52eaab8c57ad06bcd553f140923a34e5749991/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=3e52eaab8c57ad06bcd553f140923a34e5749991", "patch": "@@ -5350,8 +5350,12 @@ Function_type::copy_with_receiver_as_param(bool want_pointer_receiver) const\n \t   ++p)\n \tnew_params->push_back(*p);\n     }\n-  return Type::make_function_type(NULL, new_params, this->results_,\n-\t\t\t\t  this->location_);\n+  Function_type* ret = Type::make_function_type(NULL, new_params,\n+\t\t\t\t\t\tthis->results_,\n+\t\t\t\t\t\tthis->location_);\n+  if (this->is_varargs_)\n+    ret->set_is_varargs();\n+  return ret;\n }\n \n // Make a copy of a function type ignoring any receiver and adding a"}, {"sha": "68efab6e145acbb9ef768cc11718a00186c2c1af", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e52eaab8c57ad06bcd553f140923a34e5749991/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e52eaab8c57ad06bcd553f140923a34e5749991/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=3e52eaab8c57ad06bcd553f140923a34e5749991", "patch": "@@ -2396,8 +2396,14 @@ func TestVariadicMethodValue(t *testing.T) {\n \tpoints := []Point{{20, 21}, {22, 23}, {24, 25}}\n \twant := int64(p.TotalDist(points[0], points[1], points[2]))\n \n+\t// Variadic method of type.\n+\ttfunc := TypeOf((func(Point, ...Point) int)(nil))\n+\tif tt := TypeOf(p).Method(4).Type; tt != tfunc {\n+\t\tt.Errorf(\"Variadic Method Type from TypeOf is %s; want %s\", tt, tfunc)\n+\t}\n+\n \t// Curried method of value.\n-\ttfunc := TypeOf((func(...Point) int)(nil))\n+\ttfunc = TypeOf((func(...Point) int)(nil))\n \tv := ValueOf(p).Method(4)\n \tif tt := v.Type(); tt != tfunc {\n \t\tt.Errorf(\"Variadic Method Type is %s; want %s\", tt, tfunc)"}]}