{"sha": "1774ff486a3352c52e4faa9a9096bac43d675a4e", "node_id": "C_kwDOANBUbNoAKDE3NzRmZjQ4NmEzMzUyYzUyZTRmYWE5YTkwOTZiYWM0M2Q2NzVhNGU", "commit": {"author": {"name": "M V V S Manoj Kumar", "email": "mvvsmanojkumar@gmail.com", "date": "2023-02-17T18:09:56Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-20T09:22:40Z"}, "message": "Added AST Node AST::InlineAsm\n\nAddresses #1567\nCreated a AST node InlineAsm similar to the one found in rustc.\nAs there is no Symbol struct/class in gccrs I have made every instance\nof Symbol a string.\n\nSigned-off-by: M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-full-decls.h (class InlineAsm):Added class declaration.\n\t* ast/rust-expr.h (class InlineAsm):Added class definition.", "tree": {"sha": "95e8dbc2210b7393fb0af5d83e7896479f945439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e8dbc2210b7393fb0af5d83e7896479f945439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1774ff486a3352c52e4faa9a9096bac43d675a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1774ff486a3352c52e4faa9a9096bac43d675a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1774ff486a3352c52e4faa9a9096bac43d675a4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1774ff486a3352c52e4faa9a9096bac43d675a4e/comments", "author": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5752164328fb2f101a88c6d298dd517436a140ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752164328fb2f101a88c6d298dd517436a140ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5752164328fb2f101a88c6d298dd517436a140ba"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "64341d326416e8f37c7b0fc7224a2fd5c94ed5df", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1774ff486a3352c52e4faa9a9096bac43d675a4e/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1774ff486a3352c52e4faa9a9096bac43d675a4e/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=1774ff486a3352c52e4faa9a9096bac43d675a4e", "patch": "@@ -149,6 +149,7 @@ struct MatchCase;\n class MatchExpr;\n class AwaitExpr;\n class AsyncBlockExpr;\n+class InlineAsm;\n \n // rust-stmt.h\n class EmptyStmt;"}, {"sha": "f5461848009040a07c437ea1c937c6f05dd2ba72", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1774ff486a3352c52e4faa9a9096bac43d675a4e/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1774ff486a3352c52e4faa9a9096bac43d675a4e/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=1774ff486a3352c52e4faa9a9096bac43d675a4e", "patch": "@@ -4634,6 +4634,144 @@ class AsyncBlockExpr : public ExprWithBlock\n     return new AsyncBlockExpr (*this);\n   }\n };\n+\n+// Inline Assembly Node\n+class InlineAsm : public ExprWithoutBlock\n+{\n+  // Inline-assembly specific options\n+  enum InlineAsmOptions\n+  {\n+    PURE = 1 << 0,\n+    NOMEM = 1 << 1,\n+    READONLY = 1 << 2,\n+    PRESERVES_FLAGS = 1 << 3,\n+    NORETURN = 1 << 4,\n+    NOSTACK = 1 << 5,\n+    ATT_SYNTAX = 1 << 6,\n+    RAW = 1 << 7,\n+    MAY_UNWIND = 1 << 8,\n+  };\n+\n+  struct AnonConst\n+  {\n+    NodeId id;\n+    std::unique_ptr<Expr> value;\n+  };\n+\n+  struct InlineAsmRegOrRegClass\n+  {\n+    enum Type\n+    {\n+      Reg,\n+      RegClass,\n+    };\n+\n+    struct Reg\n+    {\n+      std::string Symbol;\n+    };\n+\n+    struct RegClass\n+    {\n+      std::string Symbol;\n+    };\n+\n+    Identifier name;\n+    Location locus;\n+  };\n+\n+  struct InlineAsmOperand\n+  {\n+    enum RegisterType\n+    {\n+      In,\n+      Out,\n+      InOut,\n+      SplitInOut,\n+      Const,\n+      Sym,\n+    };\n+\n+    struct In\n+    {\n+      InlineAsmRegOrRegClass reg;\n+      std::unique_ptr<Expr> expr;\n+    };\n+\n+    struct Out\n+    {\n+      InlineAsmRegOrRegClass reg;\n+      bool late;\n+      std::unique_ptr<Expr> expr; // can be null\n+    };\n+\n+    struct InOut\n+    {\n+      InlineAsmRegOrRegClass reg;\n+      bool late;\n+      std::unique_ptr<Expr> expr; // this can't be null\n+    };\n+\n+    struct SplitInOut\n+    {\n+      InlineAsmRegOrRegClass reg;\n+      bool late;\n+      std::unique_ptr<Expr> in_expr;\n+      std::unique_ptr<Expr> out_expr; // could be null\n+    };\n+\n+    struct Const\n+    {\n+      AnonConst anon_const;\n+    };\n+\n+    struct Sym\n+    {\n+      std::unique_ptr<Expr> sym;\n+    };\n+    Location locus;\n+  };\n+\n+  struct InlineAsmPlaceHolder\n+  {\n+    size_t operand_idx;\n+    char modifier; // can be null\n+    Location locus;\n+  };\n+\n+  struct InlineAsmTemplatePiece\n+  {\n+    bool is_placeholder;\n+    union\n+    {\n+      std::string string;\n+      InlineAsmPlaceHolder placeholder;\n+    };\n+  };\n+\n+  struct TupleClobber\n+  {\n+    // as gccrs still doesen't contain a symbol class I have put them as strings\n+    std::string symbol;\n+    Location loc;\n+  };\n+\n+  struct TupleTemplateStr\n+  {\n+    // as gccrs still doesen't contain a symbol class I have put them as strings\n+    std::string symbol;\n+    std::string optional_symbol;\n+    Location loc;\n+  };\n+\n+public:\n+  std::vector<InlineAsmTemplatePiece> template_;\n+  std::vector<TupleTemplateStr> template_strs;\n+  std::vector<InlineAsmOperand> operands;\n+  TupleClobber clobber_abi;\n+  InlineAsmOptions options;\n+  std::vector<Location> line_spans;\n+};\n } // namespace AST\n } // namespace Rust\n "}]}