{"sha": "f701ad5352c7bc8dad53a1ee7f666c8365b35307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwMWFkNTM1MmM3YmM4ZGFkNTNhMWVlN2Y2NjZjODM2NWIzNTMwNw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-20T23:58:33Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-23T14:47:34Z"}, "message": "This brings arrays back into the new framework. It resolves ArrayType\nArrayExpr, ArrayExprElems and ArrayIndexExpr. Still need to do\nArrayElemsCopied.\n\nI expect there to be some changes to cleanup the rust-tyty-resolver\nthis code is to resolve all ribs within a scope but its getting a bit\nhairy in there now.", "tree": {"sha": "c31ad210626efa0fdfd6f0be109439a1429b003d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31ad210626efa0fdfd6f0be109439a1429b003d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f701ad5352c7bc8dad53a1ee7f666c8365b35307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f701ad5352c7bc8dad53a1ee7f666c8365b35307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f701ad5352c7bc8dad53a1ee7f666c8365b35307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f701ad5352c7bc8dad53a1ee7f666c8365b35307/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2fbb5e48f6218035d7bde1336345cebf120d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2fbb5e48f6218035d7bde1336345cebf120d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2fbb5e48f6218035d7bde1336345cebf120d3e"}], "stats": {"total": 472, "additions": 442, "deletions": 30}, "files": [{"sha": "cc874980afa1ee5c3c2a05daef9626441151899f", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -952,9 +952,15 @@ class ArrayElems\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  NodeId get_node_id () const { return node_id; }\n+\n protected:\n+  ArrayElems () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n+\n   // pure virtual clone implementation\n   virtual ArrayElems *clone_array_elems_impl () const = 0;\n+\n+  NodeId node_id;\n };\n \n // Value array elements\n@@ -966,7 +972,7 @@ class ArrayElemsValues : public ArrayElems\n \n public:\n   ArrayElemsValues (std::vector<std::unique_ptr<Expr> > elems)\n-    : values (std::move (elems))\n+    : ArrayElems (), values (std::move (elems))\n   {}\n \n   // copy constructor with vector clone\n@@ -1032,7 +1038,7 @@ class ArrayElemsCopied : public ArrayElems\n   // Constructor requires pointers for polymorphism\n   ArrayElemsCopied (std::unique_ptr<Expr> copied_elem,\n \t\t    std::unique_ptr<Expr> copy_amount)\n-    : elem_to_copy (std::move (copied_elem)),\n+    : ArrayElems (), elem_to_copy (std::move (copied_elem)),\n       num_copies (std::move (copy_amount))\n   {}\n \n@@ -1091,10 +1097,6 @@ class ArrayExpr : public ExprWithoutBlock\n   // TODO: find another way to store this to save memory?\n   bool marked_for_strip = false;\n \n-  // this is a reference to what the inferred type is based on\n-  // this init expression\n-  Type *inferredType;\n-\n public:\n   std::string as_string () const override;\n \n@@ -1159,9 +1161,6 @@ class ArrayExpr : public ExprWithoutBlock\n     return internal_elements;\n   }\n \n-  Type *get_inferred_type () { return inferredType; }\n-  void set_inferred_type (Type *type) { inferredType = type; }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "5736bf2978155ac5fa63576c4e9985a217ac591f", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -211,6 +211,19 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::FnType &type) override { gcc_unreachable (); }\n \n+  void visit (TyTy::ArrayType &type) override\n+  {\n+    mpz_t ival;\n+    mpz_init_set_ui (ival, type.get_capacity ());\n+\n+    Btype *capacity_type = ctx->get_backend ()->integer_type (true, 32);\n+    Bexpression *length\n+      = ctx->get_backend ()->integer_constant_expression (capacity_type, ival);\n+\n+    Btype *element_type = TyTyResolveCompile::compile (ctx, type.get_type ());\n+    translated = ctx->get_backend ()->array_type (element_type, length);\n+  }\n+\n   void visit (TyTy::BoolType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n@@ -221,9 +234,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::IntType &type) override\n   {\n-    printf (\"type [%s] has ref: %u\\n\", type.as_string ().c_str (),\n-\t    type.get_ref ());\n-\n     ::Btype *compiled_type = nullptr;\n     bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n     rust_assert (ok);"}, {"sha": "6ea97eee4d42b2275f363b30809836fd20b9095b", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -169,6 +169,48 @@ class CompileExpr : public HIRCompileBase\n     ctx->add_statement (assignment);\n   }\n \n+  void visit (HIR::ArrayIndexExpr &expr)\n+  {\n+    Bexpression *array = CompileExpr::Compile (expr.get_array_expr (), ctx);\n+    Bexpression *index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n+    translated\n+      = ctx->get_backend ()->array_index_expression (array, index,\n+\t\t\t\t\t\t     expr.get_locus ());\n+  }\n+\n+  void visit (HIR::ArrayExpr &expr)\n+  {\n+    TyTy::TyBase *tyty = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t &tyty))\n+      {\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"did not resolve type for this array expr\");\n+\treturn;\n+      }\n+\n+    Btype *array_type = TyTyResolveCompile::compile (ctx, tyty);\n+\n+    expr.get_internal_elements ()->accept_vis (*this);\n+    std::vector<unsigned long> indexes;\n+    for (size_t i = 0; i < constructor.size (); i++)\n+      indexes.push_back (i);\n+\n+    translated\n+      = ctx->get_backend ()->array_constructor_expression (array_type, indexes,\n+\t\t\t\t\t\t\t   constructor,\n+\t\t\t\t\t\t\t   expr.get_locus ());\n+  }\n+\n+  void visit (HIR::ArrayElemsValues &elems)\n+  {\n+    elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n+      Bexpression *translated_expr = CompileExpr::Compile (e, ctx);\n+      constructor.push_back (translated_expr);\n+      return true;\n+    });\n+  }\n+\n   void visit (HIR::ArithmeticOrLogicalExpr &expr)\n   {\n     Operator op;\n@@ -303,6 +345,7 @@ class CompileExpr : public HIRCompileBase\n   CompileExpr (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n \n   Bexpression *translated;\n+  std::vector<Bexpression *> constructor;\n };\n \n } // namespace Compile"}, {"sha": "b9199059b34531a67e03dee32d6df67bd34e5f41", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -156,6 +156,63 @@ class ASTLoweringExpr : public ASTLoweringBase\n       = new HIR::IdentifierExpr (mapping, expr.as_string (), expr.get_locus ());\n   }\n \n+  void visit (AST::ArrayExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+    std::vector<HIR::Attribute> inner_attribs;\n+\n+    expr.get_array_elems ()->accept_vis (*this);\n+    rust_assert (translated_array_elems != nullptr);\n+    HIR::ArrayElems *elems = translated_array_elems;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::ArrayExpr (mapping, std::unique_ptr<HIR::ArrayElems> (elems),\n+\t\t\t    inner_attribs, outer_attribs, expr.get_locus ());\n+  }\n+\n+  void visit (AST::ArrayIndexExpr &expr)\n+  {\n+    std::vector<Attribute> outer_attribs;\n+    HIR::Expr *array_expr\n+      = ASTLoweringExpr::translate (expr.get_array_expr ().get ());\n+    HIR::Expr *array_index_expr\n+      = ASTLoweringExpr::translate (expr.get_index_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::ArrayIndexExpr (mapping,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (array_expr),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (array_index_expr),\n+\t\t\t\t outer_attribs, expr.get_locus ());\n+  }\n+\n+  void visit (AST::ArrayElemsValues &elems)\n+  {\n+    std::vector<std::unique_ptr<HIR::Expr> > elements;\n+    elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n+      HIR::Expr *translated_elem = ASTLoweringExpr::translate (elem);\n+      elements.push_back (std::unique_ptr<HIR::Expr> (translated_elem));\n+      return true;\n+    });\n+\n+    translated_array_elems = new HIR::ArrayElemsValues (std::move (elements));\n+  }\n+\n+  void visit (AST::ArrayElemsCopied &elems)\n+  {\n+    // TODO\n+    gcc_unreachable ();\n+  }\n+\n   void visit (AST::LiteralExpr &expr)\n   {\n     HIR::Literal::LitType type = HIR::Literal::LitType::CHAR;\n@@ -324,9 +381,10 @@ class ASTLoweringExpr : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringExpr () : translated (nullptr) {}\n+  ASTLoweringExpr () : translated (nullptr), translated_array_elems (nullptr) {}\n \n   HIR::Expr *translated;\n+  HIR::ArrayElems *translated_array_elems;\n };\n \n } // namespace HIR"}, {"sha": "2e14ad2b62bb7ec13bd51ae5b406c3d134eb5d39", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast-lower-base.h\"\n #include \"rust-diagnostics.h\"\n+#include \"rust-ast-lower-expr.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -77,6 +78,27 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t       translated);\n   }\n \n+  void visit (AST::ArrayType &type)\n+  {\n+    HIR::Type *translated_type\n+      = ASTLoweringType::translate (type.get_elem_type ().get ());\n+    HIR::Expr *array_size\n+      = ASTLoweringExpr::translate (type.get_size_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated\n+      = new HIR::ArrayType (mapping,\n+\t\t\t    std::unique_ptr<HIR::Type> (translated_type),\n+\t\t\t    std::unique_ptr<HIR::Expr> (array_size),\n+\t\t\t    type.get_locus ());\n+    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+  }\n+\n private:\n   ASTLoweringType () : translated (nullptr) {}\n "}, {"sha": "7c32ac23bf6d8d0669d96c6e6320302ac3dd81c7", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -912,6 +912,8 @@ class ArrayElems\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n+  virtual size_t get_num_elements () const = 0;\n+\n protected:\n   // pure virtual clone implementation\n   virtual ArrayElems *clone_array_elems_impl () const = 0;\n@@ -955,7 +957,7 @@ class ArrayElemsValues : public ArrayElems\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  size_t get_num_values () const { return values.size (); }\n+  size_t get_num_elements () const override { return values.size (); }\n \n   void iterate (std::function<bool (Expr *)> cb)\n   {\n@@ -1012,6 +1014,8 @@ class ArrayElemsCopied : public ArrayElems\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  size_t get_num_elements () const override { return 0; }\n+\n protected:\n   ArrayElemsCopied *clone_array_elems_impl () const override\n   {\n@@ -1027,10 +1031,6 @@ class ArrayExpr : public ExprWithoutBlock\n \n   Location locus;\n \n-  // this is a reference to what the inferred type is based on\n-  // this init expression\n-  Type *inferredType;\n-\n public:\n   std::string as_string () const override;\n \n@@ -1082,9 +1082,6 @@ class ArrayExpr : public ExprWithoutBlock\n \n   ArrayElems *get_internal_elements () { return internal_elements.get (); };\n \n-  Type *get_inferred_type () { return inferredType; }\n-  void set_inferred_type (Type *type) { inferredType = type; }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "54d33a86d0cc8d586ba4f037f5baecbe98d97eea", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -129,6 +129,31 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::BlockExpr &expr);\n \n+  void visit (AST::ArrayElemsValues &elems)\n+  {\n+    elems.iterate ([&] (AST::Expr *elem) mutable -> bool {\n+      ResolveExpr::go (elem, elems.get_node_id ());\n+      return true;\n+    });\n+  }\n+\n+  void visit (AST::ArrayExpr &expr)\n+  {\n+    expr.get_array_elems ()->accept_vis (*this);\n+  }\n+\n+  void visit (AST::ArrayIndexExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_array_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_index_expr ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::ArrayElemsCopied &elems)\n+  {\n+    // TODO\n+    gcc_unreachable ();\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "9d408a92b1b2d649eb127e1141e0cbd5e97a95f6", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -42,7 +42,7 @@ class ResolveType : public ResolverBase\n \n   ~ResolveType () {}\n \n-  virtual void visit (AST::TypePath &path)\n+  void visit (AST::TypePath &path)\n   {\n     // this will need changed to handle mod/crate/use globs and look\n     // at the segments in granularity\n@@ -56,6 +56,11 @@ class ResolveType : public ResolverBase\n       }\n   }\n \n+  void visit (AST::ArrayType &type)\n+  {\n+    type.get_elem_type ()->accept_vis (*this);\n+  }\n+\n private:\n   ResolveType (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "210eff3cd3060dea1f673d5693cbb18a7fa28447", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -23,6 +23,8 @@\n #include <mpfr.h>\n #include <mpc.h>\n \n+#include \"rust-location.h\"\n+#include \"rust-linemap.h\"\n #include \"operator.h\"\n \n extern bool"}, {"sha": "999523fac7c64d7fe9340124777e38eac5c85cd3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-hir-full.h\"\n #include \"rust-tyty.h\"\n #include \"rust-tyty-call.h\"\n+#include \"rust-tyty-resolver.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -219,10 +220,63 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::BlockExpr &expr);\n \n+  void visit (HIR::ArrayIndexExpr &expr)\n+  {\n+    // check the index\n+    TyTy::IntType size_ty (expr.get_index_expr ()->get_mappings ().get_hirid (),\n+\t\t\t   TyTy::IntType::I32);\n+    auto resolved\n+      = size_ty.combine (TypeCheckExpr::Resolve (expr.get_index_expr ()));\n+    context->insert_type (expr.get_index_expr ()->get_mappings ().get_hirid (),\n+\t\t\t  resolved);\n+\n+    expr.get_array_expr ()->accept_vis (*this);\n+    rust_assert (infered != nullptr);\n+    printf (\"Resolved array-index 1  [%u] -> %s\\n\",\n+\t    expr.get_mappings ().get_hirid (), infered->as_string ().c_str ());\n+    // extract the element type out now from the base type\n+    infered = TyTyExtractorArray::ExtractElementTypeFromArray (infered);\n+\n+    printf (\"Resolved array-index 2  [%u] -> %s\\n\",\n+\t    expr.get_mappings ().get_hirid (), infered->as_string ().c_str ());\n+    printf (\"array-expr node [%u]\\n\",\n+\t    expr.get_array_expr ()->get_mappings ().get_hirid ());\n+  }\n+\n+  void visit (HIR::ArrayExpr &expr)\n+  {\n+    HIR::ArrayElems *elements = expr.get_internal_elements ();\n+    size_t num_elems = elements->get_num_elements ();\n+\n+    elements->accept_vis (*this);\n+    rust_assert (infered_array_elems != nullptr);\n+\n+    infered = new TyTy::ArrayType (expr.get_mappings ().get_hirid (), num_elems,\n+\t\t\t\t   infered_array_elems);\n+  }\n+\n+  void visit (HIR::ArrayElemsValues &elems)\n+  {\n+    std::vector<TyTy::TyBase *> types;\n+    elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n+      types.push_back (TypeCheckExpr::Resolve (e));\n+      return true;\n+    });\n+\n+    infered_array_elems = types[0];\n+    for (size_t i = 1; i < types.size (); i++)\n+      {\n+\tinfered_array_elems = infered_array_elems->combine (types.at (i));\n+      }\n+  }\n+\n private:\n-  TypeCheckExpr () : TypeCheckBase (), infered (nullptr) {}\n+  TypeCheckExpr ()\n+    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)\n+  {}\n \n   TyTy::TyBase *infered;\n+  TyTy::TyBase *infered_array_elems;\n };\n \n } // namespace Resolver"}, {"sha": "dbf6583b4fc31708e04cefed8fafc95110308baf", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -59,8 +59,15 @@ class TypeCheckStmt : public TypeCheckBase\n     // let x:i32 = 123;\n     if (specified_ty != nullptr && init_expr_ty != nullptr)\n       {\n-\tcontext->insert_type (stmt.get_mappings ().get_hirid (),\n-\t\t\t      specified_ty->combine (init_expr_ty));\n+\tauto combined = specified_ty->combine (init_expr_ty);\n+\tif (combined == nullptr)\n+\t  {\n+\t    rust_fatal_error (stmt.get_locus (),\n+\t\t\t      \"failure in setting up let stmt type\");\n+\t    return;\n+\t  }\n+\n+\tcontext->insert_type (stmt.get_mappings ().get_hirid (), combined);\n       }\n     else\n       {"}, {"sha": "21d6c23267f4f1d563c382b7ce836fd502333cac", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -25,6 +25,42 @@\n namespace Rust {\n namespace Resolver {\n \n+class ArrayCapacityConstant : public TypeCheckBase\n+{\n+public:\n+  static bool fold (HIR::Expr *expr, size_t *folded_result)\n+  {\n+    ArrayCapacityConstant folder;\n+    expr->accept_vis (folder);\n+    *folded_result = folder.result;\n+    return folder.ok;\n+  }\n+\n+  virtual ~ArrayCapacityConstant () {}\n+\n+  void visit (HIR::LiteralExpr &expr)\n+  {\n+    switch (expr.get_lit_type ())\n+      {\n+\tcase HIR::Literal::LitType::INT: {\n+\t  ok = true;\n+\t  std::stringstream ss (expr.as_string ());\n+\t  ss >> result;\n+\t}\n+\tbreak;\n+\n+      default:\n+\treturn;\n+      }\n+  }\n+\n+private:\n+  ArrayCapacityConstant () : TypeCheckBase (), ok (false), result (-1) {}\n+\n+  bool ok;\n+  size_t result;\n+}; // namespace Resolver\n+\n class TypeCheckType : public TypeCheckBase\n {\n public:\n@@ -40,7 +76,7 @@ class TypeCheckType : public TypeCheckBase\n     return resolver.translated;\n   }\n \n-  virtual void visit (HIR::TypePath &path)\n+  void visit (HIR::TypePath &path)\n   {\n     // check if this is already defined or not\n     if (context->lookup_type (path.get_mappings ().get_hirid (), &translated))\n@@ -70,6 +106,21 @@ class TypeCheckType : public TypeCheckBase\n     gcc_unreachable ();\n   }\n \n+  void visit (HIR::ArrayType &type)\n+  {\n+    size_t capacity;\n+    if (!ArrayCapacityConstant::fold (type.get_size_expr (), &capacity))\n+      {\n+\trust_error_at (type.get_size_expr ()->get_locus_slow (),\n+\t\t       \"non-constant value\");\n+\treturn;\n+      }\n+\n+    TyTy::TyBase *base = TypeCheckType::Resolve (type.get_element_type ());\n+    translated\n+      = new TyTy::ArrayType (type.get_mappings ().get_hirid (), capacity, base);\n+  }\n+\n private:\n   TypeCheckType () : TypeCheckBase (), translated (nullptr) {}\n "}, {"sha": "2851a1ee26117b85f60a66e2b56f9e901b754be4", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-name-resolver.h\"\n #include \"rust-hir-type-check.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-tyty-visitor.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -63,9 +64,25 @@ class TyTyResolver\n \t  TyTy::TyBase *resolved = nullptr;\n \t  if (!context->lookup_type (hir_node_ref, &resolved))\n \t    {\n-\t      rust_fatal_error (mappings->lookup_location (hir_node_ref),\n-\t\t\t\t\"failed to lookup type for reference\");\n-\t      return false;\n+\t      // this could be an array/adt type\n+\t      Definition d;\n+\t      bool ok = resolver->lookup_definition (ref_node, &d);\n+\t      rust_assert (ok);\n+\n+\t      ok = mappings->lookup_node_to_hir (mappings->get_current_crate (),\n+\t\t\t\t\t\t d.parent, &hir_node_ref);\n+\t      rust_assert (ok);\n+\n+\t      printf (\"failed lets try [%u]\\n\", hir_node_ref);\n+\n+\t      if (!context->lookup_type (hir_node_ref, &resolved))\n+\t\t{\n+\t\t  rust_fatal_error (\n+\t\t    mappings->lookup_location (hir_node_ref),\n+\t\t    \"failed to lookup type for reference at node [%u]\",\n+\t\t    hir_node_ref);\n+\t\t  return false;\n+\t\t}\n \t    }\n \n \t  gathered_types.push_back (resolved);\n@@ -85,6 +102,11 @@ class TyTyResolver\n \t\t\t\t &resolved_type);\n       rust_assert (ok);\n \n+      if (!resolved_type->is_unit ())\n+\t{\n+\t  return true;\n+\t}\n+\n       auto resolved_tyty = resolved_type;\n       for (auto it : gathered_types)\n \t{\n@@ -120,8 +142,28 @@ class TyTyResolver\n   TypeCheckContext *context;\n };\n \n-} // namespace Resolver\n+class TyTyExtractorArray : public TyTy::TyVisitor\n+{\n+public:\n+  static TyTy::TyBase *ExtractElementTypeFromArray (TyTy::TyBase *base)\n+  {\n+    TyTyExtractorArray e;\n+    base->accept_vis (e);\n+    rust_assert (e.extracted != nullptr);\n+    return e.extracted;\n+  }\n+\n+  virtual ~TyTyExtractorArray () {}\n+\n+  void visit (TyTy::ArrayType &type) override { extracted = type.get_type (); }\n+\n+private:\n+  TyTyExtractorArray () : extracted (nullptr) {}\n+\n+  TyTy::TyBase *extracted;\n+};\n \n+} // namespace Resolver\n } // namespace Rust\n \n #endif // RUST_TYTY_RESOLVER"}, {"sha": "97ee8954263b1387bf5a9ba711418b8f56725dbf", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -60,6 +60,13 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (ArrayType &type) override\n+  {\n+    Location locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (BoolType &type) override\n   {\n     Location locus = mappings->lookup_location (type.get_ref ());\n@@ -181,6 +188,45 @@ class ParamRules : protected BaseRules\n   TyBase *resolved;\n };\n \n+class ArrayRules : protected BaseRules\n+{\n+public:\n+  ArrayRules (ArrayType *base)\n+    : BaseRules (base), base (base), resolved (nullptr)\n+  {}\n+\n+  ~ArrayRules () {}\n+\n+  TyBase *combine (TyBase *other)\n+  {\n+    other->accept_vis (*this);\n+    return resolved;\n+  }\n+\n+  void visit (ArrayType &type) override\n+  {\n+    // check base type\n+    auto base_resolved = base->get_type ()->combine (type.get_type ());\n+    if (base_resolved == nullptr)\n+      return;\n+\n+    // need to check the base types and capacity\n+    if (type.get_capacity () != base->get_capacity ())\n+      {\n+\tLocation locus = mappings->lookup_location (type.get_ref ());\n+\trust_error_at (locus, \"mismatch in array capacity\");\n+\treturn;\n+      }\n+\n+    resolved\n+      = new ArrayType (type.get_ref (), type.get_capacity (), base_resolved);\n+  }\n+\n+private:\n+  ArrayType *base;\n+  TyBase *resolved;\n+};\n+\n class BoolRules : protected BaseRules\n {\n public:"}, {"sha": "427190ff0001cd658ed5064d22efdc5ebf3f34bf", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -31,6 +31,7 @@ class TyVisitor\n   virtual void visit (InferType &type) {}\n   virtual void visit (FnType &type) {}\n   virtual void visit (ParamType &type) {}\n+  virtual void visit (ArrayType &type) {}\n   virtual void visit (BoolType &type) {}\n   virtual void visit (IntType &type) {}\n   virtual void visit (UintType &type) {}"}, {"sha": "2023523ccddc5a558623c76922f8635df1f99fe6", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -109,6 +109,25 @@ ParamType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+void\n+ArrayType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+ArrayType::as_string () const\n+{\n+  return \"[\" + type->as_string () + \":\" + std::to_string (capacity) + \"]\";\n+}\n+\n+TyBase *\n+ArrayType::combine (TyBase *other)\n+{\n+  ArrayRules r (this);\n+  return r.combine (other);\n+}\n+\n void\n BoolType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "b9dc268722c4f4cfdc74559800e0d6c15afbc25f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -143,6 +143,28 @@ class FnType : public TyBase\n   TyBase *type;\n };\n \n+class ArrayType : public TyBase\n+{\n+public:\n+  ArrayType (HirId ref, size_t capacity, TyBase *type)\n+    : TyBase (ref, TypeKind::ARRAY), capacity (capacity), type (type)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  size_t get_capacity () const { return capacity; }\n+\n+  TyBase *get_type () { return type; }\n+\n+private:\n+  size_t capacity;\n+  TyBase *type;\n+};\n+\n class BoolType : public TyBase\n {\n public:"}, {"sha": "8e123e2cbd52a06d934b8d2b1549a45d9ac2b241", "filename": "gcc/testsuite/rust.test/compilable/type_infer4.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f701ad5352c7bc8dad53a1ee7f666c8365b35307/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftype_infer4.rs?ref=f701ad5352c7bc8dad53a1ee7f666c8365b35307", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let xy = [6, 7, 8];\n+\n+    let a = xs[0];\n+    let b = xy[2];\n+    let mut c;\n+    c = xs[0];\n+}"}]}