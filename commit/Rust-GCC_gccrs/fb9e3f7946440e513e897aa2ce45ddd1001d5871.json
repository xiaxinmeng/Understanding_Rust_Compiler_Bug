{"sha": "fb9e3f7946440e513e897aa2ce45ddd1001d5871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5ZTNmNzk0NjQ0MGU1MTNlODk3YWEyY2U0NWRkZDEwMDFkNTg3MQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-08-09T02:33:34Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2020-08-09T02:33:34Z"}, "message": "gcc.dg/pr44194-1.c: Skip for mmix.\n\nThe test makes sense only for targets that return the\n\"struct { int a, b, c; }\" in registers (not in memory).\n\nStarting a skip-construct is IMHO better than another iteration of\nthat obscuring \"{ ... && { !  mytarget-*-* } }\".  New targets can just\nappend to the list without additional {}:s.  I chose not to \"convert\"\nany of the previous exclusions, as without targets to test, I'd surely\nmess up {}-pairs.\n\nA new effective_target would be even better, but such a\ncheck_effective_target_returns_struct_in_memory (or complementary,\n_in_registers) would surely have to be parametrized on the size and\ntype of the returned blob.\n\nMaybe best to restrict to just x86_64, as seems to have been the\noriginal problem target.\n\ngcc/testsuite:\n\t* gcc.dg/pr44194-1.c: Skip for mmix.", "tree": {"sha": "52f3d81229e1c4f125ba022ec66e9beb09b0507f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f3d81229e1c4f125ba022ec66e9beb09b0507f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9e3f7946440e513e897aa2ce45ddd1001d5871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9e3f7946440e513e897aa2ce45ddd1001d5871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9e3f7946440e513e897aa2ce45ddd1001d5871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9e3f7946440e513e897aa2ce45ddd1001d5871/comments", "author": null, "committer": null, "parents": [{"sha": "bc0ca715c2968b0b09ce170adc9ab0b88b2a3922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0ca715c2968b0b09ce170adc9ab0b88b2a3922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0ca715c2968b0b09ce170adc9ab0b88b2a3922"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "a38270b792391766e84f648db61ae708c1e5acc4", "filename": "gcc/testsuite/gcc.dg/pr44194-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9e3f7946440e513e897aa2ce45ddd1001d5871/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44194-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9e3f7946440e513e897aa2ce45ddd1001d5871/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44194-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44194-1.c?ref=fb9e3f7946440e513e897aa2ce45ddd1001d5871", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile { target { { { { { { { { { { i?86-*-* x86_64-*-* } && x32 } || lp64 } && { ! s390*-*-* } } && { ! hppa*64*-*-* } } && { ! alpha*-*-* } } && { { ! powerpc*-*-linux* } || powerpc_elfv2 } } && { ! nvptx-*-* } } } } } } */\n+/* { dg-skip-if \"returns that struct in memory\" { mmix-*-* } } */\n /* { dg-options \"-O2 -fdump-rtl-dse1 -fdump-rtl-final\" } */\n \n /* Restrict to 64-bit targets since 32-bit targets usually return small"}]}