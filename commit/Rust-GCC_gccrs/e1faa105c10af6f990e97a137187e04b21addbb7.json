{"sha": "e1faa105c10af6f990e97a137187e04b21addbb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmYWExMDVjMTBhZjZmOTkwZTk3YTEzNzE4N2UwNGIyMWFkZGJiNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-06T21:18:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-06T21:18:42Z"}, "message": "re PR c++/15946 (Unhelpful error message when \"typename\" is omitted)\n\n\tPR c++/15946\n\t* parser.c (cp_parser_check_template_parameters): Don't talk about\n\tspecialization at function scope.\n\t(cp_parser_diagnose_invalid_type_name): Handle dependent scope.\n\t(cp_parser_parse_and_diagnose_invalid_type_name): Likewise.\n\t(cp_parser_expression_statement): Suggest typename.\n\t* error.c (dump_decl) [SCOPE_REF]: Print the type here.\n\t(dump_expr) [SCOPE_REF]: Call it.\n\t(dump_type) [UNBOUND_CLASS_TEMPLATE]: Check TFF_UNQUALIFIED_NAME.\n\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Print class template\n\targs.\n\nFrom-SVN: r153978", "tree": {"sha": "1fe0df5266124ea89ffc21c4d73fd145d1248d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe0df5266124ea89ffc21c4d73fd145d1248d5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1faa105c10af6f990e97a137187e04b21addbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1faa105c10af6f990e97a137187e04b21addbb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1faa105c10af6f990e97a137187e04b21addbb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1faa105c10af6f990e97a137187e04b21addbb7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c3905fc17fbaad4a0a3753fb166161154119e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3905fc17fbaad4a0a3753fb166161154119e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3905fc17fbaad4a0a3753fb166161154119e0b"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "4db5aac1fbf65fa17113c5a4c7b93f17366186e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -1,5 +1,17 @@\n 2009-11-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/15946\n+\t* parser.c (cp_parser_check_template_parameters): Don't talk about\n+\tspecialization at function scope.\n+\t(cp_parser_diagnose_invalid_type_name): Handle dependent scope.\n+\t(cp_parser_parse_and_diagnose_invalid_type_name): Likewise.\n+\t(cp_parser_expression_statement): Suggest typename.\n+\t* error.c (dump_decl) [SCOPE_REF]: Print the type here.\n+\t(dump_expr) [SCOPE_REF]: Call it.\n+\t(dump_type) [UNBOUND_CLASS_TEMPLATE]: Check TFF_UNQUALIFIED_NAME.\n+\t* cxx-pretty-print.c (pp_cxx_unqualified_id): Print class template\n+\targs.\n+\n \tPR c++/9381\n \t* decl2.c (build_memfn_type): Preserve attributes.\n \t(cp_reconstruct_complex_type): Likewise."}, {"sha": "4851af901f7e5af05e13cf3805dfd88bdb357ef8", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -200,6 +200,12 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n     case TYPENAME_TYPE:\n     case UNBOUND_CLASS_TEMPLATE:\n       pp_cxx_unqualified_id (pp, TYPE_NAME (t));\n+      if (CLASS_TYPE_P (t) && CLASSTYPE_USE_TEMPLATE (t))\n+\t{\n+\t  pp_cxx_begin_template_argument_list (pp);\n+\t  pp_cxx_template_argument_list (pp, CLASSTYPE_TI_ARGS (t));\n+\t  pp_cxx_end_template_argument_list (pp);\n+\t}\n       break;\n \n     case BIT_NOT_EXPR:"}, {"sha": "f4232075119b32dafd39d41e156244712f2d8f90", "filename": "gcc/cp/error.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -466,8 +466,11 @@ dump_type (tree t, int flags)\n       break;\n \n     case UNBOUND_CLASS_TEMPLATE:\n-      dump_type (TYPE_CONTEXT (t), flags);\n-      pp_cxx_colon_colon (cxx_pp);\n+      if (! (flags & TFF_UNQUALIFIED_NAME))\n+\t{\n+\t  dump_type (TYPE_CONTEXT (t), flags);\n+\t  pp_cxx_colon_colon (cxx_pp);\n+\t}\n       pp_cxx_ws_string (cxx_pp, \"template\");\n       dump_type (DECL_NAME (TYPE_NAME (t)), flags);\n       break;\n@@ -947,7 +950,9 @@ dump_decl (tree t, int flags)\n       break;\n \n     case SCOPE_REF:\n-      pp_expression (cxx_pp, t);\n+      dump_type (TREE_OPERAND (t, 0), flags);\n+      pp_string (cxx_pp, \"::\");\n+      dump_decl (TREE_OPERAND (t, 1), flags|TFF_UNQUALIFIED_NAME);\n       break;\n \n     case ARRAY_REF:\n@@ -2219,6 +2224,9 @@ dump_expr (tree t, int flags)\n       break;\n \n     case SCOPE_REF:\n+      dump_decl (t, flags);\n+      break;\n+\n     case EXPR_PACK_EXPANSION:\n     case TYPEID_EXPR:\n     case MEMBER_REF:"}, {"sha": "47f5f13f1d38f684608dce09237574ff925dace1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -2400,6 +2400,11 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser,\n       if (TREE_CODE (parser->scope) == NAMESPACE_DECL)\n \terror_at (location, \"%qE in namespace %qE does not name a type\",\n \t\t  id, parser->scope);\n+      else if (TYPE_P (parser->scope)\n+\t       && dependent_scope_p (parser->scope))\n+\terror_at (location, \"need %<typename%> before %<%T::%E%> to name \"\n+\t\t  \"a type in dependent scope %qT\",\n+\t\t  parser->scope, id, parser->scope);\n       else if (TYPE_P (parser->scope))\n \terror_at (location, \"%qE in class %qT does not name a type\",\n \t\t  id, parser->scope);\n@@ -2433,11 +2438,8 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n \t\t\t\t/*declarator_p=*/true,\n \t\t\t\t/*optional_p=*/false);\n   /* After the id-expression, there should be a plain identifier,\n-     otherwise this is not a simple variable declaration. Also, if\n-     the scope is dependent, we cannot do much.  */\n+     otherwise this is not a simple variable declaration.  */\n   if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n-      || (parser->scope && TYPE_P (parser->scope)\n-\t  && dependent_type_p (parser->scope))\n       || TREE_CODE (id) == TYPE_DECL)\n     {\n       cp_parser_abort_tentative_parse (parser);\n@@ -7760,12 +7762,21 @@ static tree\n cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n {\n   tree statement = NULL_TREE;\n+  cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n   /* If the next token is a ';', then there is no expression\n      statement.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n     statement = cp_parser_expression (parser, /*cast_p=*/false, NULL);\n \n+  /* Give a helpful message for \"A<T>::type t;\"  */\n+  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)\n+      && !cp_parser_uncommitted_to_tentative_parse_p (parser)\n+      && TREE_CODE (statement) == SCOPE_REF)\n+    error_at (token->location, \"need %<typename%> before %qE to name \"\n+\t      \"a type in dependent scope %qT\",\n+\t      statement, TREE_OPERAND (statement, 0));\n+\n   /* Consume the final `;'.  */\n   cp_parser_consume_semicolon_at_end_of_statement (parser);\n \n@@ -18197,11 +18208,15 @@ cp_parser_check_template_parameters (cp_parser* parser,\n        template <class T> void S<T>::R<T>::f ();  */\n   if (parser->num_template_parameter_lists < num_templates)\n     {\n-      if (declarator)\n+      if (declarator && !current_function_decl)\n \terror_at (location, \"specializing member %<%T::%E%> \"\n \t\t  \"requires %<template<>%> syntax\", \n \t\t  declarator->u.id.qualifying_scope,\n \t\t  declarator->u.id.unqualified_name);\n+      else if (declarator)\n+\terror_at (location, \"invalid declaration of %<%T::%E%>\",\n+\t\t  declarator->u.id.qualifying_scope,\n+\t\t  declarator->u.id.unqualified_name);\n       else \n \terror_at (location, \"too few template-parameter-lists\");\n       return false;"}, {"sha": "77cf10c03cf35a6015b32c4b2e0488a674a2e329", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -1,5 +1,9 @@\n 2009-11-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/15946\n+\t* g++.dg/parse/error36.C: New.\n+\t* g++.old-deja/g++.other/typename1.C: Adjust.\n+\n \tPR c++/9381\n \t* g++.dg/abi/regparm1.C: New.\n "}, {"sha": "92101e9c99f1e7dae7f2a5def197da4974eb7047", "filename": "gcc/testsuite/g++.dg/parse/error36.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -0,0 +1,17 @@\n+// Test for helpful error message about missing typename.\n+\n+template <class T> struct A { typedef T foo; typedef T bar; };\n+template <class T>\n+void f(T t)\n+{\n+  typedef A<T>::foo type;\t// { dg-error \"typename\" }\n+  A<T>::bar b;\t\t\t// { dg-error \"typename\" }\n+} // { dg-error \"expected ';'\" \"\" { target *-*-* } 8 }\n+\n+template <class T> struct B\n+{\n+  void f()\n+  {\n+    A<T>::baz z;\t\t// { dg-error \"typename\" }\n+  } // { dg-error \"expected ';'\" \"\" { target *-*-* } 15 }\n+};"}, {"sha": "cd8d46d1e4f81a43bb90c1949b24250de6bb18aa", "filename": "gcc/testsuite/g++.dg/template/error26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror26.C?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -2,4 +2,4 @@\n \n template<typename> struct A;\n \n-template<typename T> void foo (A<&T::template i>); // { dg-error \"T::template i|mismatch|& T::i\" }\n+template<typename T> void foo (A<&T::template i>); // { dg-error \"T:: ?template i|mismatch|& T::i\" }"}, {"sha": "4bf3de39f84a69ae47bb9261aec68a0dd286187a", "filename": "gcc/testsuite/g++.old-deja/g++.other/typename1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faa105c10af6f990e97a137187e04b21addbb7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypename1.C?ref=e1faa105c10af6f990e97a137187e04b21addbb7", "patch": "@@ -13,5 +13,5 @@ public:\n template<class T>\n void f()\n {\n-  Vector<T>::iterator i = 0; // { dg-error \"expected\" } missing typename\n-}\n+  Vector<T>::iterator i = 0; // { dg-error \"typename\" } missing typename\n+} // { dg-error \"expected\" \"\" { target *-*-* } 16 }"}]}