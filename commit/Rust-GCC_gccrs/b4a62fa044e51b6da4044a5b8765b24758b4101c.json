{"sha": "b4a62fa044e51b6da4044a5b8765b24758b4101c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhNjJmYTA0NGU1MWI2ZGE0MDQ0YTViODc2NWIyNDc1OGI0MTAxYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "boessen@de.ibm.com", "date": "2003-10-17T20:20:37Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-10-17T20:20:37Z"}, "message": "altivec.md (\"altivec_dst\", [...]): Use a memory_operand.\n\n2003-10-17  Segher Boessenkool  <boessen@de.ibm.com>\n            Hartmut Penner  <hpenner@de.ibm.com>\n\n        * config/rs6000/altivec.md (\"altivec_dst\", \"altivec_dstt\",\n        \"altivec_dstst\", \"altivec_dststt\", \"altivec_lvsl\", \"altivec_lvsr\",\n        \"altivec_lvebx\", \"altivec_lvehx\", \"altivec_lvewx\", \"altivec_lvxl\",\n        \"altivec_lvx\", \"altivec_stvx\", \"altivec_stvxl\", \"altivec_stvebx\",\n        \"altivec_stvehx\", \"altivec_stvewx\"): Use a memory_operand.\n        * config/rs6000/rs6000.c (altivec_expand_lv_builtin): New function.\n        (altivec_expand_stv_builtin): Adjust for the memory_operand.\n        (altivec_expand_builtin): Call altivec_expand_lv_builtin.\n        (altivec_init_builtins): Use `long int' for memory offsets.\n\nCo-Authored-By: Hartmut Penner <hpenner@de.ibm.com>\n\nFrom-SVN: r72621", "tree": {"sha": "57c12dcc9bcc290a90b0e8e6e24bbd8dca11edd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57c12dcc9bcc290a90b0e8e6e24bbd8dca11edd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a62fa044e51b6da4044a5b8765b24758b4101c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a62fa044e51b6da4044a5b8765b24758b4101c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a62fa044e51b6da4044a5b8765b24758b4101c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a62fa044e51b6da4044a5b8765b24758b4101c/comments", "author": null, "committer": null, "parents": [{"sha": "ef050c9e232a0473f52f02dfbd84f8252fa888c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef050c9e232a0473f52f02dfbd84f8252fa888c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef050c9e232a0473f52f02dfbd84f8252fa888c5"}], "stats": {"total": 256, "additions": 151, "deletions": 105}, "files": [{"sha": "ebeeda4bba700d273968bfdd3fbd52bdd1b2b145", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4a62fa044e51b6da4044a5b8765b24758b4101c", "patch": "@@ -1,3 +1,16 @@\n+2003-10-17  Segher Boessenkool  <boessen@de.ibm.com>\n+\t    Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* config/rs6000/altivec.md (\"altivec_dst\", \"altivec_dstt\",\n+\t\"altivec_dstst\", \"altivec_dststt\", \"altivec_lvsl\", \"altivec_lvsr\",\n+\t\"altivec_lvebx\", \"altivec_lvehx\", \"altivec_lvewx\", \"altivec_lvxl\",\n+\t\"altivec_lvx\", \"altivec_stvx\", \"altivec_stvxl\", \"altivec_stvebx\",\n+\t\"altivec_stvehx\", \"altivec_stvewx\"): Use a memory_operand.\n+\t* config/rs6000/rs6000.c (altivec_expand_lv_builtin): New function.\n+\t(altivec_expand_stv_builtin): Adjust for the memory_operand.\n+\t(altivec_expand_builtin): Call altivec_expand_lv_builtin.\n+\t(altivec_init_builtins): Use `long int' for memory offsets.\n+\n 2003-10-17  Jan Hubicka  <jh@suse.cz>\n \n \t* opts.c  (common_handle_option): Handle OPT_fweb"}, {"sha": "329e3b9b5b60b345272458d54c774227b9bbc095", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 37, "deletions": 62, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=b4a62fa044e51b6da4044a5b8765b24758b4101c", "patch": "@@ -1835,51 +1835,49 @@\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_dst\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+  [(unspec [(match_operand:V4SI 0 \"memory_operand\" \"Q\")\n \t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 190)]\n   \"TARGET_ALTIVEC\"\n-  \"dst %0,%1,%2\"\n+  \"dst %P0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_dstt\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+  [(unspec [(match_operand:V4SI 0 \"memory_operand\" \"Q\")\n \t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 191)]\n   \"TARGET_ALTIVEC\"\n-  \"dstt %0,%1,%2\"\n+  \"dstt %P0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_dstst\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+  [(unspec [(match_operand:V4SI 0 \"memory_operand\" \"Q\")\n \t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 192)]\n   \"TARGET_ALTIVEC\"\n-  \"dstst %0,%1,%2\"\n+  \"dstst %P0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_dststt\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+  [(unspec [(match_operand:V4SI 0 \"memory_operand\" \"Q\")\n \t    (match_operand:SI 1 \"register_operand\" \"r\")\n \t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 193)]\n   \"TARGET_ALTIVEC\"\n-  \"dststt %0,%1,%2\"\n+  \"dststt %P0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_lvsl\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t       (match_operand:SI 2 \"register_operand\" \"r\")] 194))]\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"m\")] 194))]\n   \"TARGET_ALTIVEC\"\n-  \"lvsl %0,%1,%2\"\n+  \"lvsl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvsr\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t       (match_operand:SI 2 \"register_operand\" \"r\")] 195))]\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"m\")] 195))]\n   \"TARGET_ALTIVEC\"\n-  \"lvsr %0,%1,%2\"\n+  \"lvsr %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n ;; Parallel some of the LVE* and STV*'s with unspecs because some have\n@@ -1888,112 +1886,89 @@\n (define_insn \"altivec_lvebx\"\n   [(parallel\n     [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t  (mem:V16QI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\"))))\n+\t  (match_operand:V16QI 1 \"memory_operand\" \"m\"))\n      (unspec [(const_int 0)] 196)])]\n   \"TARGET_ALTIVEC\"\n-  \"lvebx %0,%1,%2\"\n+  \"lvebx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvehx\"\n   [(parallel\n     [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-\t  (mem:V8HI\n-\t   (and:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t   (const_int -2))))\n+\t  (match_operand:V8HI 1 \"memory_operand\" \"m\"))\n      (unspec [(const_int 0)] 197)])]\n   \"TARGET_ALTIVEC\"\n-  \"lvehx %0,%1,%2\"\n+  \"lvehx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvewx\"\n   [(parallel\n     [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t  (mem:V4SI\n-\t   (and:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t   (const_int -4))))\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"m\"))\n      (unspec [(const_int 0)] 198)])]\n   \"TARGET_ALTIVEC\"\n-  \"lvewx %0,%1,%2\"\n+  \"lvewx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvxl\"\n   [(parallel\n     [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t  (mem:V4SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\"))))\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"m\"))\n      (unspec [(const_int 0)] 213)])]\n   \"TARGET_ALTIVEC\"\n-  \"lvxl %0,%1,%2\"\n+  \"lvxl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(mem:V4SI (plus:SI (match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t(match_operand:V4SI 1 \"memory_operand\" \"m\"))]\n   \"TARGET_ALTIVEC\"\n-  \"lvx %0,%1,%2\"\n+  \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_stvx\"\n   [(parallel\n-    [(set (mem:V4SI\n-\t   (and:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (const_int -16)))\n-\t  (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] 201)])]\n   \"TARGET_ALTIVEC\"\n-  \"stvx %2,%0,%1\"\n+  \"stvx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvxl\"\n   [(parallel\n-    [(set (mem:V4SI\n-\t   (and:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (const_int -16)))\n-\t  (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] 202)])]\n   \"TARGET_ALTIVEC\"\n-  \"stvxl %2,%0,%1\"\n+  \"stvxl %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvebx\"\n   [(parallel\n-    [(set (mem:V16QI\n-\t   (plus:SI (match_operand:SI 0 \"register_operand\" \"b\")\n-\t\t    (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t  (match_operand:V16QI 2 \"register_operand\" \"v\"))\n+    [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] 203)])]\n   \"TARGET_ALTIVEC\"\n-  \"stvebx %2,%0,%1\"\n+  \"stvebx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvehx\"\n   [(parallel\n-    [(set (mem:V8HI\n-\t   (and:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (const_int -2)))\n-\t  (match_operand:V8HI 2 \"register_operand\" \"v\"))\n+    [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n+\t  (match_operand:V8HI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] 204)])]\n   \"TARGET_ALTIVEC\"\n-  \"stvehx %2,%0,%1\"\n+  \"stvehx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvewx\"\n   [(parallel\n-    [(set (mem:V4SI\n-\t   (and:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"b\")\n-\t\t\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t   (const_int -4)))\n-\t  (match_operand:V4SI 2 \"register_operand\" \"v\"))\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] 205)])]\n   \"TARGET_ALTIVEC\"\n-  \"stvewx %2,%0,%1\"\n+  \"stvewx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"absv16qi2\""}, {"sha": "1639fead259118fe3558f90d1d3dfed04d6d8349", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 101, "deletions": 43, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a62fa044e51b6da4044a5b8765b24758b4101c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b4a62fa044e51b6da4044a5b8765b24758b4101c", "patch": "@@ -310,6 +310,7 @@ static rtx altivec_expand_dst_builtin (tree, rtx, bool *);\n static rtx altivec_expand_abs_builtin (enum insn_code, tree, rtx);\n static rtx altivec_expand_predicate_builtin (enum insn_code, \n \t\t\t\t\t    const char *, tree, rtx);\n+static rtx altivec_expand_lv_builtin (enum insn_code, tree, rtx);\n static rtx altivec_expand_stv_builtin (enum insn_code, tree);\n static void rs6000_parse_abi_options (void);\n static void rs6000_parse_alignment_option (void);\n@@ -5224,6 +5225,55 @@ altivec_expand_predicate_builtin (enum insn_code icode, const char *opcode,\n   return target;\n }\n \n+static rtx\n+altivec_expand_lv_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat, addr;\n+  tree arg0 = TREE_VALUE (arglist);\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = Pmode;\n+  enum machine_mode mode1 = Pmode;\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  op1 = copy_to_mode_reg (mode1, op1); \n+\n+  if (op0 == const0_rtx)\n+    {\n+      addr = gen_rtx_MEM (tmode, op1);\n+    }\n+  else\n+    {\n+      op0 = copy_to_mode_reg (mode0, op0);\n+      addr = gen_rtx_MEM (tmode, gen_rtx_PLUS (Pmode, op0, op1));\n+    }\n+\n+  pat = GEN_FCN (icode) (target, addr);\n+\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n static rtx\n altivec_expand_stv_builtin (enum insn_code icode, tree arglist)\n {\n@@ -5233,25 +5283,33 @@ altivec_expand_stv_builtin (enum insn_code icode, tree arglist)\n   rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n   rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n   rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n-  rtx pat;\n-  enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode2 = insn_data[icode].operand[2].mode;\n+  rtx pat, addr;\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode1 = Pmode;\n+  enum machine_mode mode2 = Pmode;\n \n   /* Invalid arguments.  Bail before doing anything stoopid!  */\n   if (arg0 == error_mark_node\n       || arg1 == error_mark_node\n       || arg2 == error_mark_node)\n     return const0_rtx;\n \n-  if (! (*insn_data[icode].operand[2].predicate) (op0, mode2))\n-    op0 = copy_to_mode_reg (mode2, op0);\n-  if (! (*insn_data[icode].operand[0].predicate) (op1, mode0))\n-    op1 = copy_to_mode_reg (mode0, op1);\n-  if (! (*insn_data[icode].operand[1].predicate) (op2, mode1))\n-    op2 = copy_to_mode_reg (mode1, op2);\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, tmode))\n+    op0 = copy_to_mode_reg (tmode, op0);\n+\n+  op2 = copy_to_mode_reg (mode2, op2); \n+\n+  if (op1 == const0_rtx)\n+    {\n+      addr = gen_rtx_MEM (tmode, op2);\n+    }\n+  else\n+    {\n+      op1 = copy_to_mode_reg (mode1, op1);\n+      addr = gen_rtx_MEM (tmode, gen_rtx_PLUS (Pmode, op1, op2));\n+    }\n \n-  pat = GEN_FCN (icode) (op1, op2, op0);\n+  pat = GEN_FCN (icode) (addr, op0);\n   if (pat)\n     emit_insn (pat);\n   return NULL_RTX;\n@@ -5466,7 +5524,7 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t  }\n \n \tif (! (*insn_data[d->icode].operand[0].predicate) (op0, mode0))\n-\t  op0 = copy_to_mode_reg (mode0, op0);\n+\t  op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n \tif (! (*insn_data[d->icode].operand[1].predicate) (op1, mode1))\n \t  op1 = copy_to_mode_reg (mode1, op1);\n \n@@ -5601,25 +5659,25 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n   switch (fcode)\n     {\n     case ALTIVEC_BUILTIN_LVSL:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvsl,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvsl,\n \t\t\t\t\t   arglist, target);\n     case ALTIVEC_BUILTIN_LVSR:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvsr,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvsr,\n \t\t\t\t\t  arglist, target);\n     case ALTIVEC_BUILTIN_LVEBX:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvebx,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvebx,\n \t\t\t\t\t  arglist, target);\n     case ALTIVEC_BUILTIN_LVEHX:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvehx,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvehx,\n \t\t\t\t\t  arglist, target);\n     case ALTIVEC_BUILTIN_LVEWX:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvewx,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvewx,\n \t\t\t\t\t  arglist, target);\n     case ALTIVEC_BUILTIN_LVXL:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvxl,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl,\n \t\t\t\t\t  arglist, target);\n     case ALTIVEC_BUILTIN_LVX:\n-      return rs6000_expand_binop_builtin (CODE_FOR_altivec_lvx,\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx,\n \t\t\t\t\t  arglist, target);\n     default:\n       break;\n@@ -6330,27 +6388,27 @@ altivec_init_builtins (void)\n   tree void_ftype_qi\n     = build_function_type_list (void_type_node, char_type_node, NULL_TREE);\n \n-  tree v16qi_ftype_int_pcvoid\n+  tree v16qi_ftype_long_pcvoid\n     = build_function_type_list (V16QI_type_node,\n-\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n-  tree v8hi_ftype_int_pcvoid\n+\t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n+  tree v8hi_ftype_long_pcvoid\n     = build_function_type_list (V8HI_type_node,\n-\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n-  tree v4si_ftype_int_pcvoid\n+\t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n+  tree v4si_ftype_long_pcvoid\n     = build_function_type_list (V4SI_type_node,\n-\t\t\t\tinteger_type_node, pcvoid_type_node, NULL_TREE);\n+\t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n \n-  tree void_ftype_v4si_int_pvoid\n+  tree void_ftype_v4si_long_pvoid\n     = build_function_type_list (void_type_node,\n-\t\t\t\tV4SI_type_node, integer_type_node,\n+\t\t\t\tV4SI_type_node, long_integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n-  tree void_ftype_v16qi_int_pvoid\n+  tree void_ftype_v16qi_long_pvoid\n     = build_function_type_list (void_type_node,\n-\t\t\t\tV16QI_type_node, integer_type_node,\n+\t\t\t\tV16QI_type_node, long_integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n-  tree void_ftype_v8hi_int_pvoid\n+  tree void_ftype_v8hi_long_pvoid\n     = build_function_type_list (void_type_node,\n-\t\t\t\tV8HI_type_node, integer_type_node,\n+\t\t\t\tV8HI_type_node, long_integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n   tree int_ftype_int_v8hi_v8hi\n     = build_function_type_list (integer_type_node,\n@@ -6397,18 +6455,18 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mfvscr\", v8hi_ftype_void, ALTIVEC_BUILTIN_MFVSCR);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dssall\", void_ftype_void, ALTIVEC_BUILTIN_DSSALL);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dss\", void_ftype_qi, ALTIVEC_BUILTIN_DSS);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVSL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVSR);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEBX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEHX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVEWX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVXL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_int_pcvoid, ALTIVEC_BUILTIN_LVX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVEWX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVXL);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_int_pvoid, ALTIVEC_BUILTIN_STVEBX);\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_int_pvoid, ALTIVEC_BUILTIN_STVEHX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVSL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVSR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvebx\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvehx\", v8hi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVEHX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvewx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvxl\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVXL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvx\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVXL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_long_pvoid, ALTIVEC_BUILTIN_STVEHX);\n \n   /* Add the DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;"}]}