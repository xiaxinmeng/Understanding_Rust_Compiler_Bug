{"sha": "ab05af624e3e26f60ab3dac1000af027fab9c273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwNWFmNjI0ZTNlMjZmNjBhYjNkYWMxMDAwYWYwMjdmYWI5YzI3Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-14T12:17:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-14T12:17:05Z"}, "message": "re PR middle-end/65758 (191.fma3d in SPEC CPU 200 failed to build)\n\n2015-04-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65758\n\t* tree-ssa-ccp.c (get_value_from_alignment): Adjust mask test\n\tagainst -1.\n\t(ccp_lattice_meet): Likewise.\n\t(bit_value_unop): Likewise.\n\t(bit_value_binop): Likewise.\n\t(bit_value_assume_aligned): Likewise.\n\n\t* gfortran.fortran-torture/compile/pr65758.f90: New testcase.\n\nFrom-SVN: r222085", "tree": {"sha": "bb973c45b1420669737e687b56a3379b0d5f40e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb973c45b1420669737e687b56a3379b0d5f40e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab05af624e3e26f60ab3dac1000af027fab9c273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab05af624e3e26f60ab3dac1000af027fab9c273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab05af624e3e26f60ab3dac1000af027fab9c273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab05af624e3e26f60ab3dac1000af027fab9c273/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "703fa2e60966cc14ea7c994ec106957fc3558263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703fa2e60966cc14ea7c994ec106957fc3558263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703fa2e60966cc14ea7c994ec106957fc3558263"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "8538b25b98afc1c0e18965035d0a5de3f7f16449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab05af624e3e26f60ab3dac1000af027fab9c273", "patch": "@@ -1,3 +1,13 @@\n+2015-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65758\n+\t* tree-ssa-ccp.c (get_value_from_alignment): Adjust mask test\n+\tagainst -1.\n+\t(ccp_lattice_meet): Likewise.\n+\t(bit_value_unop): Likewise.\n+\t(bit_value_binop): Likewise.\n+\t(bit_value_assume_aligned): Likewise.\n+\n 2015-04-14  Christian Bruel  <christian.bruel@st.com>\n \n \t* execute_dwarf2_frame (dw_frame_pointer_regnum): Reinitialize for each"}, {"sha": "6d2d5de123197027cf19a3c78ae8ccd52538d503", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab05af624e3e26f60ab3dac1000af027fab9c273", "patch": "@@ -1,3 +1,8 @@\n+2015-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65758\n+\t* gfortran.fortran-torture/compile/pr65758.f90: New testcase.\n+\n 2015-04-14  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/65648"}, {"sha": "59409c6b7cfd114b9f36e400f45de70c27296422", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr65758.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr65758.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr65758.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr65758.f90?ref=ab05af624e3e26f60ab3dac1000af027fab9c273", "patch": "@@ -0,0 +1,20 @@\n+      SUBROUTINE USER_MESSAGE (MESSAGE)\n+      CHARACTER MSGL*1\n+      CHARACTER, INTENT(IN) :: MESSAGE*(*)\n+      CHARACTER(21)  :: LEADER(4)\n+      CHARACTER(132) :: MSG_TEXT*132\n+      LOGICAL, SAVE  :: FIRST\n+ 100  IR = MIN (LM, IL+INDEX(MESSAGE(MIN(LM,IL+1):LM)//MSGL,MSGL))\n+      IF (FIRST) THEN\n+        IF (INDEX(MESSAGE(IL:IR),'WARN') .NE. 0) THEN\n+          K = 2\n+        ELSE IF (INDEX(MESSAGE(IL:IR),'INFORM') .NE. 0) THEN\n+          K = 3\n+          GO TO 100\n+        ENDIF\n+      ELSE\n+        IF (MESSAGE(IR:IR) .EQ. MSGL) THEN\n+          MSG_TEXT = LEADER(K)//MESSAGE(IL+1:IR-1)\n+        ENDIF\n+      ENDIF\n+      END"}, {"sha": "eeae4bfcd35ec177b33f968f7db36d1b2e2e1361", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab05af624e3e26f60ab3dac1000af027fab9c273/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ab05af624e3e26f60ab3dac1000af027fab9c273", "patch": "@@ -585,7 +585,8 @@ get_value_from_alignment (tree expr)\n   val.mask = (POINTER_TYPE_P (type) || TYPE_UNSIGNED (type)\n \t      ? wi::mask <widest_int> (TYPE_PRECISION (type), false)\n \t      : -1).and_not (align / BITS_PER_UNIT - 1);\n-  val.lattice_val = val.mask == -1 ? VARYING : CONSTANT;\n+  val.lattice_val\n+    = wi::sext (val.mask, TYPE_PRECISION (type)) == -1 ? VARYING : CONSTANT;\n   if (val.lattice_val == CONSTANT)\n     val.value = build_int_cstu (type, bitpos / BITS_PER_UNIT);\n   else\n@@ -990,7 +991,7 @@ ccp_lattice_meet (ccp_prop_value_t *val1, ccp_prop_value_t *val2)\n       val1->mask = (val1->mask | val2->mask\n \t\t    | (wi::to_widest (val1->value)\n \t\t       ^ wi::to_widest (val2->value)));\n-      if (val1->mask == -1)\n+      if (wi::sext (val1->mask, TYPE_PRECISION (TREE_TYPE (val1->value))) == -1)\n \t{\n \t  val1->lattice_val = VARYING;\n \t  val1->value = NULL_TREE;\n@@ -1499,10 +1500,10 @@ bit_value_unop (enum tree_code code, tree type, tree rhs)\n \n   gcc_assert ((rval.lattice_val == CONSTANT\n \t       && TREE_CODE (rval.value) == INTEGER_CST)\n-\t      || rval.mask == -1);\n+\t      || wi::sext (rval.mask, TYPE_PRECISION (TREE_TYPE (rhs))) == -1);\n   bit_value_unop_1 (code, type, &value, &mask,\n \t\t    TREE_TYPE (rhs), value_to_wide_int (rval), rval.mask);\n-  if (mask != -1)\n+  if (wi::sext (mask, TYPE_PRECISION (type)) != -1)\n     {\n       val.lattice_val = CONSTANT;\n       val.mask = mask;\n@@ -1540,14 +1541,16 @@ bit_value_binop (enum tree_code code, tree type, tree rhs1, tree rhs2)\n \n   gcc_assert ((r1val.lattice_val == CONSTANT\n \t       && TREE_CODE (r1val.value) == INTEGER_CST)\n-\t      || r1val.mask == -1);\n+\t      || wi::sext (r1val.mask,\n+\t\t\t   TYPE_PRECISION (TREE_TYPE (rhs1))) == -1);\n   gcc_assert ((r2val.lattice_val == CONSTANT\n \t       && TREE_CODE (r2val.value) == INTEGER_CST)\n-\t      || r2val.mask == -1);\n+\t      || wi::sext (r2val.mask,\n+\t\t\t   TYPE_PRECISION (TREE_TYPE (rhs2))) == -1);\n   bit_value_binop_1 (code, type, &value, &mask,\n \t\t     TREE_TYPE (rhs1), value_to_wide_int (r1val), r1val.mask,\n \t\t     TREE_TYPE (rhs2), value_to_wide_int (r2val), r2val.mask);\n-  if (mask != -1)\n+  if (wi::sext (mask, TYPE_PRECISION (type)) != -1)\n     {\n       val.lattice_val = CONSTANT;\n       val.mask = mask;\n@@ -1596,7 +1599,7 @@ bit_value_assume_aligned (gimple stmt, tree attr, ccp_prop_value_t ptrval,\n     return ptrval;\n   gcc_assert ((ptrval.lattice_val == CONSTANT\n \t       && TREE_CODE (ptrval.value) == INTEGER_CST)\n-\t      || ptrval.mask == -1);\n+\t      || wi::sext (ptrval.mask, TYPE_PRECISION (type)) == -1);\n   if (attr == NULL_TREE)\n     {\n       /* Get aligni and misaligni from __builtin_assume_aligned.  */\n@@ -1648,7 +1651,7 @@ bit_value_assume_aligned (gimple stmt, tree attr, ccp_prop_value_t ptrval,\n   bit_value_binop_1 (BIT_AND_EXPR, type, &value, &mask,\n \t\t     type, value_to_wide_int (ptrval), ptrval.mask,\n \t\t     type, value_to_wide_int (alignval), alignval.mask);\n-  if (mask != -1)\n+  if (wi::sext (mask, TYPE_PRECISION (type)) != -1)\n     {\n       val.lattice_val = CONSTANT;\n       val.mask = mask;"}]}