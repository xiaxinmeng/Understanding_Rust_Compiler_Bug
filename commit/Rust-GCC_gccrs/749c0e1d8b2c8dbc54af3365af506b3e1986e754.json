{"sha": "749c0e1d8b2c8dbc54af3365af506b3e1986e754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5YzBlMWQ4YjJjOGRiYzU0YWYzMzY1YWY1MDZiM2UxOTg2ZTc1NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-03T11:27:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-03T11:27:40Z"}, "message": "PR libstdc++/59439 optimize uses of classic (\"C\") std::locale\n\nThe global locale::_Impl that represents the \"C\" locale is never\ndestroyed, so there is no need to keep track of reference count updates\nfor that object. This greatly reduce contention between threads that\nrefer to the classic locale. Since the global std::locale initially uses\nthe classic locale, this benefits the common case for any code using the\nglobal locale, such as construction/destruction of iostream objects.\n\nAll these updates are done inside libstdc++.so so there's no need to\nworry about users' objects having inlined old versions of the code which\nstill update the reference count for the classic locale.\n\n\tPR libstdc++/59439\n\t* src/c++98/locale.cc (locale::locale(const locale&)): Bypass\n\treference count updates for the classic locale.\n\t(locale::~locale()): Likewise.\n\t(locale::operator=(const locale&)): Likewise.\n\t* src/c++98/locale_init.cc (locale::locale()): Likewise.\n\t(locale::global(const locale&)): Likewise.\n\nFrom-SVN: r264811", "tree": {"sha": "08e082060cf8f5dbfadf13f7fa2bf8ab8121357f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08e082060cf8f5dbfadf13f7fa2bf8ab8121357f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/749c0e1d8b2c8dbc54af3365af506b3e1986e754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749c0e1d8b2c8dbc54af3365af506b3e1986e754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749c0e1d8b2c8dbc54af3365af506b3e1986e754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749c0e1d8b2c8dbc54af3365af506b3e1986e754/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7df9e44c68164cfdd0dcc8d848d480054c4e6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7df9e44c68164cfdd0dcc8d848d480054c4e6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7df9e44c68164cfdd0dcc8d848d480054c4e6b3"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "84e61ca955c047c71f63c4d5fdb4b91d39694a50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=749c0e1d8b2c8dbc54af3365af506b3e1986e754", "patch": "@@ -1,3 +1,13 @@\n+2018-10-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59439\n+\t* src/c++98/locale.cc (locale::locale(const locale&)): Bypass\n+\treference count updates for the classic locale.\n+\t(locale::~locale()): Likewise.\n+\t(locale::operator=(const locale&)): Likewise.\n+\t* src/c++98/locale_init.cc (locale::locale()): Likewise.\n+\t(locale::global(const locale&)): Likewise.\n+\n 2018-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/map.h"}, {"sha": "fe06d29703907e27e86bcbd94fdf54083eead3e9", "filename": "libstdc++-v3/src/c++98/locale.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc?ref=749c0e1d8b2c8dbc54af3365af506b3e1986e754", "patch": "@@ -77,7 +77,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   locale::locale(const locale& __other) throw()\n   : _M_impl(__other._M_impl)\n-  { _M_impl->_M_add_reference(); }\n+  {\n+    if (_M_impl != _S_classic)\n+      _M_impl->_M_add_reference();\n+  }\n \n   // This is used to initialize global and classic locales, and\n   // assumes that the _Impl objects are constructed correctly.\n@@ -86,7 +89,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { }\n \n   locale::~locale() throw()\n-  { _M_impl->_M_remove_reference(); }\n+  {\n+    if (_M_impl != _S_classic)\n+      _M_impl->_M_remove_reference();\n+  }\n \n   bool\n   locale::operator==(const locale& __rhs) const throw()\n@@ -112,8 +118,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   const locale&\n   locale::operator=(const locale& __other) throw()\n   {\n-    __other._M_impl->_M_add_reference();\n-    _M_impl->_M_remove_reference();\n+    if (__other._M_impl != _S_classic)\n+      __other._M_impl->_M_add_reference();\n+    if (_M_impl != _S_classic)\n+      _M_impl->_M_remove_reference();\n     _M_impl = __other._M_impl;\n     return *this;\n   }"}, {"sha": "b580a9f9d587ef07020b0d418502d89d89ccbf82", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/749c0e1d8b2c8dbc54af3365af506b3e1986e754/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=749c0e1d8b2c8dbc54af3365af506b3e1986e754", "patch": "@@ -257,9 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     //   fall back to lock protected access to both _S_global and\n     //   its reference count.\n     _M_impl = _S_global;\n-    if (_M_impl == _S_classic)\n-      _M_impl->_M_add_reference();\n-    else\n+    if (_M_impl != _S_classic)\n       {\n         __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n         _S_global->_M_add_reference();\n@@ -275,7 +273,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __gnu_cxx::__scoped_lock sentry(get_locale_mutex());\n       __old = _S_global;\n-      __other._M_impl->_M_add_reference();\n+      if (__other._M_impl != _S_classic)\n+\t__other._M_impl->_M_add_reference();\n       _S_global = __other._M_impl;\n       const string __other_name = __other.name();\n       if (__other_name != \"*\")\n@@ -284,7 +283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Reference count sanity check: one reference removed for the\n     // subsition of __other locale, one added by return-by-value. Net\n-    // difference: zero. When the returned locale object's destrutor\n+    // difference: zero. When the returned locale object's destructor\n     // is called, then the reference count is decremented and possibly\n     // destroyed.\n     return locale(__old);"}]}