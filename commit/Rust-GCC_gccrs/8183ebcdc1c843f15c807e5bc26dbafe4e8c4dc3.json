{"sha": "8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4M2ViY2RjMWM4NDNmMTVjODA3ZTViYzI2ZGJhZmU0ZThjNGRjMw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-09-07T18:43:16Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-09-08T20:26:42Z"}, "message": "openacc: Fix atomic_capture-2.c iteration-ordering issues\n\nThe test case was written with assumptions about loop iteration ordering\nthat are not guaranteed by OpenACC and do not apply on all targets,\nin particular AMD GCN. This patch removes those assumptions.\n\n2020-09-08  Julian Brown  <julian@codesourcery.com>\n\nlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/atomic_capture-2.c: Remove\n\titeration-ordering assumptions.", "tree": {"sha": "076fc447aecedd26bf0fb5252c2caa5bc36ba3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076fc447aecedd26bf0fb5252c2caa5bc36ba3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e929d65b48ad5583e995d872ca5de95b23de4d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e929d65b48ad5583e995d872ca5de95b23de4d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e929d65b48ad5583e995d872ca5de95b23de4d72"}], "stats": {"total": 92, "additions": 43, "deletions": 49}, "files": [{"sha": "4f83f03899def76b048ba728e514a6b6546e611c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/atomic_capture-2.c", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fatomic_capture-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fatomic_capture-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fatomic_capture-2.c?ref=8183ebcdc1c843f15c807e5bc26dbafe4e8c4dc3", "patch": "@@ -37,11 +37,9 @@ main(int argc, char **argv)\n       imin = idata[i] < imin ? idata[i] : imin;\n     }\n \n-  if (imax != 1234 || imin != 0)\n+  if (imax != 1234 || imin < 0 || imin > 1)\n     abort ();\n \n-  return 0;\n-\n   igot = 0;\n   iexp = 32;\n \n@@ -443,17 +441,16 @@ main(int argc, char **argv)\n     }\n   }\n \n+  int ones = 0, zeros = 0;\n+\n   for (i = 0; i < N; i++)\n-    if (i % 2 == 0)\n-      {\n-\tif (idata[i] != 1)\n-\t  abort ();\n-      }\n-    else\n-      {\n-\tif (idata[i] != 0)\n-\t  abort ();\n-      }\n+    if (idata[i] == 1)\n+      ones++;\n+    else if (idata[i] == 0)\n+      zeros++;\n+\n+  if (ones != N / 2 || zeros != N / 2)\n+    abort ();\n \n   if (iexp != igot)\n     abort ();\n@@ -491,17 +488,16 @@ main(int argc, char **argv)\n       }\n   }\n \n+  ones = zeros = 0;\n+\n   for (i = 0; i < N; i++)\n-    if (i % 2 == 0)\n-      {\n-\tif (idata[i] != 0)\n-\t  abort ();\n-      }\n-    else\n-      {\n-\tif (idata[i] != 1)\n-\t  abort ();\n-      }\n+    if (idata[i] == 1)\n+      ones++;\n+    else if (idata[i] == 0)\n+      zeros++;\n+\n+  if (ones != N / 2 || zeros != N / 2)\n+    abort ();\n \n   if (iexp != igot)\n     abort ();\n@@ -579,15 +575,15 @@ main(int argc, char **argv)\n   if (lexp != lgot)\n     abort ();\n \n-  lgot = 2LL;\n+  lgot = 2LL << N;\n   lexp = 2LL;\n \n #pragma acc data copy (lgot, ldata[0:N])\n   {\n #pragma acc parallel loop\n     for (i = 0; i < N; i++)\n       {\n-        long long expr = 1LL << N;\n+\tlong long expr = 2LL;\n \n #pragma acc atomic capture\n         { lgot = lgot / expr; ldata[i] = lgot; }\n@@ -1450,17 +1446,16 @@ main(int argc, char **argv)\n       }\n   }\n \n+  ones = zeros = 0;\n+\n   for (i = 0; i < N; i++)\n-    if (i % 2 == 0)\n-      {\n-\tif (fdata[i] != 1.0)\n-\t  abort ();\n-      }\n-    else\n-      {\n-\tif (fdata[i] != 0.0)\n-\t  abort ();\n-      }\n+    if (fdata[i] == 1.0)\n+      ones++;\n+    else if (fdata[i] == 0.0)\n+      zeros++;\n+\n+  if (ones != N / 2 || zeros != N / 2)\n+    abort ();\n \n   if (fexp != fgot)\n     abort ();\n@@ -1498,17 +1493,16 @@ main(int argc, char **argv)\n       }\n   }\n \n+  ones = zeros = 0;\n+\n   for (i = 0; i < N; i++)\n-    if (i % 2 == 0)\n-      {\n-\tif (fdata[i] != 0.0)\n-\t  abort ();\n-      }\n-    else\n-      {\n-\tif (fdata[i] != 1.0)\n-\t  abort ();\n-      }\n+    if (fdata[i] == 1.0)\n+      ones++;\n+    else if (fdata[i] == 0.0)\n+      zeros++;\n+\n+  if (ones != N / 2 || zeros != N / 2)\n+    abort ();\n \n   if (fexp != fgot)\n     abort ();\n@@ -1569,7 +1563,7 @@ main(int argc, char **argv)\n     abort ();\n \n   fgot = 8192.0*8192.0*64.0;\n-  fexp = 1.0;\n+  fexp = fgot;\n \n #pragma acc data copy (fgot, fdata[0:N])\n   {\n@@ -1586,15 +1580,15 @@ main(int argc, char **argv)\n   if (fexp != fgot)\n     abort ();\n \n-  fgot = 4.0;\n-  fexp = 4.0;\n+  fgot = 2.0 * (1LL << N);\n+  fexp = 2.0;\n \n #pragma acc data copy (fgot, fdata[0:N])\n   {\n #pragma acc parallel loop\n     for (i = 0; i < N; i++)\n       {\n-        long long expr = 1LL << N;\n+\tlong long expr = 2LL;\n \n #pragma acc atomic capture\n         { fgot = fgot / expr; fdata[i] = fgot; }"}]}