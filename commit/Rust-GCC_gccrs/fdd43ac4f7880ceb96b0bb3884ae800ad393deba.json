{"sha": "fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkNDNhYzRmNzg4MGNlYjk2YjBiYjM4ODRhZTgwMGFkMzkzZGViYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-02T12:23:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-02T12:23:20Z"}, "message": "tree-scalar-evolution.c (scev_info_hasher): Remove.\n\n2013-05-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-scalar-evolution.c (scev_info_hasher): Remove.\n\t(struct instantiate_cache_entry): New type.\n\t(struct instantiate_cache_entry_hasher): New hashtable descriptor.\n\t(struct instantiate_cache_type): New type.\n\t(set_instantiated_value, get_instantiated_value): Remove.\n\t(get_instantiated_value_entry): New function.\n\t(instantiate_scev_name): Use the new cache and adjust.\n\t(instantiate_scev_poly): Adjust.\n\t(instantiate_scev_binary): Likewise.\n\t(instantiate_array_ref): Likewise.\n\t(instantiate_scev_convert): Likewise.\n\t(instantiate_scev_not): Likewise.\n\t(instantiate_scev_3): Likewise.\n\t(instantiate_scev_2): Likewise.\n\t(instantiate_scev_r): Likewise.\n\t(instantiate_scev): Likewise.\n\t(resolve_mixers): Likewise.\n\nFrom-SVN: r198523", "tree": {"sha": "3b34c427ff5142a1dab686ad76d0a3a8626583f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b34c427ff5142a1dab686ad76d0a3a8626583f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd43ac4f7880ceb96b0bb3884ae800ad393deba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b273e79b19133a3b2098bac794c1da5c29809a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b273e79b19133a3b2098bac794c1da5c29809a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b273e79b19133a3b2098bac794c1da5c29809a09"}], "stats": {"total": 193, "additions": 111, "deletions": 82}, "files": [{"sha": "2acb27434eb1c7327ce4030dd9f6204df0028217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd43ac4f7880ceb96b0bb3884ae800ad393deba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd43ac4f7880ceb96b0bb3884ae800ad393deba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "patch": "@@ -1,3 +1,23 @@\n+2013-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-scalar-evolution.c (scev_info_hasher): Remove.\n+\t(struct instantiate_cache_entry): New type.\n+\t(struct instantiate_cache_entry_hasher): New hashtable descriptor.\n+\t(struct instantiate_cache_type): New type.\n+\t(set_instantiated_value, get_instantiated_value): Remove.\n+\t(get_instantiated_value_entry): New function.\n+\t(instantiate_scev_name): Use the new cache and adjust.\n+\t(instantiate_scev_poly): Adjust.\n+\t(instantiate_scev_binary): Likewise.\n+\t(instantiate_array_ref): Likewise.\n+\t(instantiate_scev_convert): Likewise.\n+\t(instantiate_scev_not): Likewise.\n+\t(instantiate_scev_3): Likewise.\n+\t(instantiate_scev_2): Likewise.\n+\t(instantiate_scev_r): Likewise.\n+\t(instantiate_scev): Likewise.\n+\t(resolve_mixers): Likewise.\n+\n 2013-05-01  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/57091"}, {"sha": "de2d7d853a5416711320fd37d5a6a39b03ea8755", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 91, "deletions": 82, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd43ac4f7880ceb96b0bb3884ae800ad393deba/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd43ac4f7880ceb96b0bb3884ae800ad393deba/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=fdd43ac4f7880ceb96b0bb3884ae800ad393deba", "patch": "@@ -344,38 +344,6 @@ del_scev_info (void *e)\n   ggc_free (e);\n }\n \n-/* Hashtable helpers.  */\n-\n-struct scev_info_hasher\n-{\n-  typedef scev_info_str value_type;\n-  typedef scev_info_str compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n-  static inline void remove (value_type *);\n-};\n-\n-inline hashval_t\n-scev_info_hasher::hash (const value_type *elt)\n-{\n-  return hash_scev_info (elt);\n-}\n-\n-inline bool\n-scev_info_hasher::equal (const value_type *elt1, const compare_type *elt2)\n-{\n-  return eq_scev_info (elt1, elt2);\n-}\n-\n-/* Deletes database element E.  */\n-\n-inline void\n-scev_info_hasher::remove (value_type *e)\n-{\n-  del_scev_info (e);\n-}\n-\n-typedef hash_table <scev_info_hasher> scev_info_hash_table_type;\n \n /* Get the scalar evolution of VAR for INSTANTIATED_BELOW basic block.\n    A first query on VAR returns chrec_not_analyzed_yet.  */\n@@ -2078,43 +2046,87 @@ analyze_scalar_evolution_in_loop (struct loop *wrto_loop, struct loop *use_loop,\n     }\n }\n \n-/* Returns from CACHE the value for VERSION instantiated below\n-   INSTANTIATED_BELOW block.  */\n \n-static tree\n-get_instantiated_value (scev_info_hash_table_type cache,\n-\t\t\tbasic_block instantiated_below, tree version)\n+/* Hashtable helpers for a temporary hash-table used when\n+   instantiating a CHREC or resolving mixers.  For this use\n+   instantiated_below is always the same.  */\n+\n+struct instantiate_cache_entry\n {\n-  struct scev_info_str *info, pattern;\n+  tree name;\n+  tree chrec;\n+};\n \n-  pattern.var = version;\n-  pattern.instantiated_below = instantiated_below;\n-  info = cache.find (&pattern);\n+struct instantiate_cache_entry_hasher : typed_noop_remove <uintptr_t>\n+{\n+  typedef uintptr_t value_type;\n+  typedef instantiate_cache_entry compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+};\n \n-  if (info)\n-    return info->chrec;\n-  else\n-    return NULL_TREE;\n+struct instantiate_cache_type\n+{\n+  hash_table <instantiate_cache_entry_hasher> htab;\n+  vec<instantiate_cache_entry> entries;\n+\n+  ~instantiate_cache_type ();\n+};\n+\n+instantiate_cache_type::~instantiate_cache_type ()\n+{\n+  if (htab.is_created ())\n+    {\n+      htab.dispose ();\n+      entries.release ();\n+    }\n }\n \n-/* Sets in CACHE the value of VERSION instantiated below basic block\n-   INSTANTIATED_BELOW to VAL.  */\n+static instantiate_cache_type *ctbl;\n \n-static void\n-set_instantiated_value (scev_info_hash_table_type cache,\n-\t\t\tbasic_block instantiated_below, tree version, tree val)\n+inline hashval_t\n+instantiate_cache_entry_hasher::hash (const value_type *idx)\n {\n-  struct scev_info_str *info, pattern;\n-  scev_info_str **slot;\n+  instantiate_cache_entry *elt\n+    = &ctbl->entries[reinterpret_cast <uintptr_t> (idx) - 2];\n+  return SSA_NAME_VERSION (elt->name);\n+}\n+\n+inline bool\n+instantiate_cache_entry_hasher::equal (const value_type *idx1,\n+\t\t\t\t       const compare_type *elt2)\n+{\n+  compare_type *elt1 = &ctbl->entries[reinterpret_cast <uintptr_t> (idx1) - 2];\n+  return elt1->name == elt2->name;\n+}\n \n-  pattern.var = version;\n-  pattern.instantiated_below = instantiated_below;\n-  slot = cache.find_slot (&pattern, INSERT);\n+/* Returns from CACHE a pointer to the cached chrec for NAME.  */\n \n+static tree *\n+get_instantiated_value_entry (instantiate_cache_type &cache, tree name)\n+{\n+  struct instantiate_cache_entry e;\n+  uintptr_t **slot;\n+\n+  if (!cache.htab.is_created ())\n+    {\n+      cache.htab.create (10);\n+      cache.entries.create (10);\n+    }\n+\n+  ctbl = &cache;\n+\n+  e.name = name;\n+  slot = cache.htab.find_slot_with_hash (&e, SSA_NAME_VERSION (name), INSERT);\n   if (!*slot)\n-    *slot = new_scev_info_str (instantiated_below, version);\n-  info = *slot;\n-  info->chrec = val;\n+    {\n+      e.chrec = chrec_not_analyzed_yet;\n+      cache.entries.safe_push (e);\n+      *slot = reinterpret_cast <uintptr_t *>\n+\t  ((uintptr_t) cache.entries.length () + 1);\n+    }\n+\n+  return &cache.entries[reinterpret_cast <uintptr_t> (*slot) - 2].chrec;\n }\n \n /* Return the closed_loop_phi node for VAR.  If there is none, return\n@@ -2148,7 +2160,7 @@ loop_closed_phi_def (tree var)\n }\n \n static tree instantiate_scev_r (basic_block, struct loop *, struct loop *,\n-\t\t\t\ttree, bool, scev_info_hash_table_type, int);\n+\t\t\t\ttree, bool, instantiate_cache_type &, int);\n \n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n@@ -2168,7 +2180,7 @@ static tree\n instantiate_scev_name (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *inner_loop,\n \t\t       tree chrec,\n-\t\t       bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t       bool fold_conversions, instantiate_cache_type &cache,\n \t\t       int size_expr)\n {\n   tree res;\n@@ -2191,12 +2203,13 @@ instantiate_scev_name (basic_block instantiate_below,\n \n      | a_2 -> {0, +, 1, +, a_2}_1  */\n \n-  res = get_instantiated_value (cache, instantiate_below, chrec);\n-  if (res)\n-    return res;\n+  tree *si;\n+  si = get_instantiated_value_entry (cache, chrec);\n+  if (*si != chrec_not_analyzed_yet)\n+    return *si;\n \n-  res = chrec_dont_know;\n-  set_instantiated_value (cache, instantiate_below, chrec, res);\n+  /* On recursion return chrec_dont_know.  */\n+  *si = chrec_dont_know;\n \n   def_loop = find_common_loop (evolution_loop, def_bb->loop_father);\n \n@@ -2249,7 +2262,7 @@ instantiate_scev_name (basic_block instantiate_below,\n     }\n \n   /* Store the correct value to the cache.  */\n-  set_instantiated_value (cache, instantiate_below, chrec, res);\n+  *si = res;\n   return res;\n }\n \n@@ -2271,7 +2284,7 @@ static tree\n instantiate_scev_poly (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *,\n \t\t       tree chrec,\n-\t\t       bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t       bool fold_conversions, instantiate_cache_type &cache,\n \t\t       int size_expr)\n {\n   tree op1;\n@@ -2318,7 +2331,8 @@ instantiate_scev_binary (basic_block instantiate_below,\n \t\t\t struct loop *evolution_loop, struct loop *inner_loop,\n \t\t\t tree chrec, enum tree_code code,\n \t\t\t tree type, tree c0, tree c1,\n-\t\t\t bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t\t bool fold_conversions,\n+\t\t\t instantiate_cache_type &cache,\n \t\t\t int size_expr)\n {\n   tree op1;\n@@ -2378,7 +2392,7 @@ static tree\n instantiate_array_ref (basic_block instantiate_below,\n \t\t       struct loop *evolution_loop, struct loop *inner_loop,\n \t\t       tree chrec,\n-\t\t       bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t       bool fold_conversions, instantiate_cache_type &cache,\n \t\t       int size_expr)\n {\n   tree res;\n@@ -2419,7 +2433,7 @@ instantiate_scev_convert (basic_block instantiate_below,\n \t\t\t  tree chrec,\n \t\t\t  tree type, tree op,\n \t\t\t  bool fold_conversions,\n-\t\t\t  scev_info_hash_table_type cache, int size_expr)\n+\t\t\t  instantiate_cache_type &cache, int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t inner_loop, op,\n@@ -2468,7 +2482,7 @@ instantiate_scev_not (basic_block instantiate_below,\n \t\t      struct loop *evolution_loop, struct loop *inner_loop,\n \t\t      tree chrec,\n \t\t      enum tree_code code, tree type, tree op,\n-\t\t      bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t      bool fold_conversions, instantiate_cache_type &cache,\n \t\t      int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n@@ -2518,7 +2532,7 @@ static tree\n instantiate_scev_3 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t    bool fold_conversions, instantiate_cache_type &cache,\n \t\t    int size_expr)\n {\n   tree op1, op2;\n@@ -2567,7 +2581,7 @@ static tree\n instantiate_scev_2 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t    bool fold_conversions, instantiate_cache_type &cache,\n \t\t    int size_expr)\n {\n   tree op1;\n@@ -2608,7 +2622,7 @@ static tree\n instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t    bool fold_conversions, instantiate_cache_type &cache,\n \t\t    int size_expr)\n {\n   tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n@@ -2642,7 +2656,7 @@ static tree\n instantiate_scev_r (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, struct loop *inner_loop,\n \t\t    tree chrec,\n-\t\t    bool fold_conversions, scev_info_hash_table_type cache,\n+\t\t    bool fold_conversions, instantiate_cache_type &cache,\n \t\t    int size_expr)\n {\n   /* Give up if the expression is larger than the MAX that we allow.  */\n@@ -2749,8 +2763,7 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n \t\t  tree chrec)\n {\n   tree res;\n-  scev_info_hash_table_type cache;\n-  cache.create (10);\n+  instantiate_cache_type cache;\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -2772,8 +2785,6 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n       fprintf (dump_file, \"))\\n\");\n     }\n \n-  cache.dispose ();\n-\n   return res;\n }\n \n@@ -2785,11 +2796,9 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n-  scev_info_hash_table_type cache;\n-  cache.create (10);\n+  instantiate_cache_type cache;\n   tree ret = instantiate_scev_r (block_before_loop (loop), loop, NULL,\n \t\t\t\t chrec, true, cache, 0);\n-  cache.dispose ();\n   return ret;\n }\n "}]}