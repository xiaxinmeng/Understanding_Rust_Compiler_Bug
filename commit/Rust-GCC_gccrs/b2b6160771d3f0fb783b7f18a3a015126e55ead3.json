{"sha": "b2b6160771d3f0fb783b7f18a3a015126e55ead3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiNjE2MDc3MWQzZjBmYjc4M2I3ZjE4YTNhMDE1MTI2ZTU1ZWFkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-08-09T18:10:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-08-09T18:10:18Z"}, "message": "mips.h (FUNCTION_NAME_ALREADY_DECLARED): Delete.\n\ngcc/\n2008-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n\t    Daniel Jacobowitz  <dan@codesourcery.com>\n\n\t* config/mips/mips.h (FUNCTION_NAME_ALREADY_DECLARED): Delete.\n\t* config/mips/linux.h (ASM_DECLARE_FUNCTION_NAME): Delete.\n\t(ASM_DECLARE_FUNCTION_SIZE, FUNCTION_NAME_ALREADY_DECLARED): Delete.\n\t* config/mips/mips.c (mips_start_function_definition): New function.\n\t(mips_end_function_definition): Likewise.\n\t(mips_output_function_prologue): Use mips_start_function_definition.\n\t(mips_output_function_epilogue): Use mips_end_function_definition.\n\t(build_mips16_function_stub): Use mips_start_function_definition\n\tand mips_end_function_definition.\n\t(build_mips16_call_stub): Likewise.\n\nCo-Authored-By: Daniel Jacobowitz <dan@codesourcery.com>\n\nFrom-SVN: r138908", "tree": {"sha": "7422b65d4002cbc7cb1349eca463a1a3ba449abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7422b65d4002cbc7cb1349eca463a1a3ba449abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b6160771d3f0fb783b7f18a3a015126e55ead3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b6160771d3f0fb783b7f18a3a015126e55ead3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b6160771d3f0fb783b7f18a3a015126e55ead3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b6160771d3f0fb783b7f18a3a015126e55ead3/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c9577becf922e261c901a1108ee0cb58aa73d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9577becf922e261c901a1108ee0cb58aa73d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9577becf922e261c901a1108ee0cb58aa73d58"}], "stats": {"total": 182, "additions": 71, "deletions": 111}, "files": [{"sha": "4972a7bad62e7c17e3564bd7300e8f42382dc91b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b6160771d3f0fb783b7f18a3a015126e55ead3", "patch": "@@ -1,3 +1,17 @@\n+2008-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\t    Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/mips/mips.h (FUNCTION_NAME_ALREADY_DECLARED): Delete.\n+\t* config/mips/linux.h (ASM_DECLARE_FUNCTION_NAME): Delete.\n+\t(ASM_DECLARE_FUNCTION_SIZE, FUNCTION_NAME_ALREADY_DECLARED): Delete.\n+\t* config/mips/mips.c (mips_start_function_definition): New function.\n+\t(mips_end_function_definition): Likewise.\n+\t(mips_output_function_prologue): Use mips_start_function_definition.\n+\t(mips_output_function_epilogue): Use mips_end_function_definition.\n+\t(build_mips16_function_stub): Use mips_start_function_definition\n+\tand mips_end_function_definition.\n+\t(build_mips16_call_stub): Likewise.\n+\n 2008-08-09  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (gimple_build_call_1): Deal with FUNCTION_DECL fn."}, {"sha": "90cf63df23c18521990100255dd58a01dfe24d35", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=b2b6160771d3f0fb783b7f18a3a015126e55ead3", "patch": "@@ -96,36 +96,6 @@ along with GCC; see the file COPYING3.  If not see\n \tfputc ( '\\n', FILE);\t\t\t\t\t\t\\\n  } while (0)\n \n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t.ent\\t\", STREAM);\t\t\t\t\t\\\n-\tassemble_name (STREAM, NAME);\t\t\t\t\t\\\n-\tputc ('\\n', STREAM);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_TYPE_DIRECTIVE (STREAM, NAME, \"function\");\t\t\\\n-    assemble_name (STREAM, NAME);\t\t\t\t\t\\\n-    fputs (\":\\n\", STREAM);\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t.end\\t\", STREAM);\t\t\t\t\t\\\n-\tassemble_name (STREAM, NAME);\t\t\t\t\t\\\n-\tputc ('\\n', STREAM);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Tell function_prologue in mips.c that we have already output the .ent/.end\n-   pseudo-ops.  */\n-#undef FUNCTION_NAME_ALREADY_DECLARED\n-#define FUNCTION_NAME_ALREADY_DECLARED 1\n-\n /* The glibc _mcount stub will save $v0 for us.  Don't mess with saving\n    it, since ASM_OUTPUT_REG_PUSH/ASM_OUTPUT_REG_POP do not work in the\n    presence of $gp-relative calls.  */"}, {"sha": "8429d153b46b8874720d238c544a8c27beea9b2d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 57, "deletions": 77, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b2b6160771d3f0fb783b7f18a3a015126e55ead3", "patch": "@@ -5170,6 +5170,44 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   return addr;\n }\n \f\n+/* Start a definition of function NAME.  MIPS16_P indicates whether the\n+   function contains MIPS16 code.  */\n+\n+static void\n+mips_start_function_definition (const char *name, bool mips16_p)\n+{\n+  if (mips16_p)\n+    fprintf (asm_out_file, \"\\t.set\\tmips16\\n\");\n+  else\n+    fprintf (asm_out_file, \"\\t.set\\tnomips16\\n\");\n+\n+  if (!flag_inhibit_size_directive)\n+    {\n+      fputs (\"\\t.ent\\t\", asm_out_file);\n+      assemble_name (asm_out_file, name);\n+      fputs (\"\\n\", asm_out_file);\n+    }\n+\n+  ASM_OUTPUT_TYPE_DIRECTIVE (asm_out_file, name, \"function\");\n+\n+  /* Start the definition proper.  */\n+  assemble_name (asm_out_file, name);\n+  fputs (\":\\n\", asm_out_file);\n+}\n+\n+/* End a function definition started by mips_start_function_definition.  */\n+\n+static void\n+mips_end_function_definition (const char *name)\n+{\n+  if (!flag_inhibit_size_directive)\n+    {\n+      fputs (\"\\t.end\\t\", asm_out_file);\n+      assemble_name (asm_out_file, name);\n+      fputs (\"\\n\", asm_out_file);\n+    }\n+}\n+\f\n /* A chained list of functions for which mips16_build_call_stub has already\n    generated a stub.  NAME is the name of the function and FP_RET_P is true\n    if the function returns a value in floating-point registers.  */\n@@ -5315,24 +5353,9 @@ mips16_build_function_stub (void)\n     }\n   fprintf (asm_out_file, \")\\n\");\n \n-  /* Write the preamble leading up to the function declaration.  */\n-  fprintf (asm_out_file, \"\\t.set\\tnomips16\\n\");\n-  switch_to_section (function_section (stubdecl));\n-  ASM_OUTPUT_ALIGN (asm_out_file,\n-\t\t    floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT));\n-\n-  /* ??? If FUNCTION_NAME_ALREADY_DECLARED is defined, then we are\n-     within a .ent, and we cannot emit another .ent.  */\n-  if (!FUNCTION_NAME_ALREADY_DECLARED)\n-    {\n-      fputs (\"\\t.ent\\t\", asm_out_file);\n-      assemble_name (asm_out_file, stubname);\n-      fputs (\"\\n\", asm_out_file);\n-    }\n-\n-  /* Start the definition proper.  */\n-  assemble_name (asm_out_file, stubname);\n-  fputs (\":\\n\", asm_out_file);\n+  /* Start the function definition.  */\n+  assemble_start_function (stubdecl, stubname);\n+  mips_start_function_definition (stubname, false);\n \n   /* Load the address of the MIPS16 function into $at.  Do this first so\n      that targets with coprocessor interlocks can use an MFC1 to fill the\n@@ -5349,12 +5372,7 @@ mips16_build_function_stub (void)\n   fprintf (asm_out_file, \"\\tjr\\t%s\\n\", reg_names[GP_REG_FIRST + 1]);\n   fprintf (asm_out_file, \"\\t.set\\tat\\n\");\n \n-  if (!FUNCTION_NAME_ALREADY_DECLARED)\n-    {\n-      fputs (\"\\t.end\\t\", asm_out_file);\n-      assemble_name (asm_out_file, stubname);\n-      fputs (\"\\n\", asm_out_file);\n-    }\n+  mips_end_function_definition (stubname);\n \n   switch_to_section (function_section (current_function_decl));\n }\n@@ -5534,19 +5552,9 @@ mips16_build_call_stub (rtx retval, rtx fn, rtx args_size, int fp_code)\n \t}\n       fprintf (asm_out_file, \")\\n\");\n \n-      /* Write the preamble leading up to the function declaration.  */\n-      fprintf (asm_out_file, \"\\t.set\\tnomips16\\n\");\n+      /* Start the function definition.  */\n       assemble_start_function (stubdecl, stubname);\n-\n-      if (!FUNCTION_NAME_ALREADY_DECLARED)\n-\t{\n-\t  fputs (\"\\t.ent\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, stubname);\n-\t  fputs (\"\\n\", asm_out_file);\n-\n-\t  assemble_name (asm_out_file, stubname);\n-\t  fputs (\":\\n\", asm_out_file);\n-\t}\n+      mips_start_function_definition (stubname, false);\n \n       if (!fp_ret_p)\n \t{\n@@ -5621,12 +5629,7 @@ mips16_build_call_stub (rtx retval, rtx fn, rtx args_size, int fp_code)\n       ASM_DECLARE_FUNCTION_SIZE (asm_out_file, stubname, stubdecl);\n #endif\n \n-      if (!FUNCTION_NAME_ALREADY_DECLARED)\n-\t{\n-\t  fputs (\"\\t.end\\t\", asm_out_file);\n-\t  assemble_name (asm_out_file, stubname);\n-\t  fputs (\"\\n\", asm_out_file);\n-\t}\n+      mips_end_function_definition (stubname);\n \n       /* Record this stub.  */\n       l = XNEW (struct mips16_stub);\n@@ -8395,29 +8398,11 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       && crtl->args.info.fp_code != 0)\n     mips16_build_function_stub ();\n \n-  /* Select the MIPS16 mode for this function.  */\n-  if (TARGET_MIPS16)\n-    fprintf (file, \"\\t.set\\tmips16\\n\");\n-  else\n-    fprintf (file, \"\\t.set\\tnomips16\\n\");\n-\n-  if (!FUNCTION_NAME_ALREADY_DECLARED)\n-    {\n-      /* Get the function name the same way that toplev.c does before calling\n-\t assemble_start_function.  This is needed so that the name used here\n-\t exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n-      fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n-\n-      if (!flag_inhibit_size_directive)\n-\t{\n-\t  fputs (\"\\t.ent\\t\", file);\n-\t  assemble_name (file, fnname);\n-\t  fputs (\"\\n\", file);\n-\t}\n-\n-      assemble_name (file, fnname);\n-      fputs (\":\\n\", file);\n-    }\n+  /* Get the function name the same way that toplev.c does before calling\n+     assemble_start_function.  This is needed so that the name used here\n+     exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n+  fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+  mips_start_function_definition (fnname, TARGET_MIPS16);\n \n   /* Stop mips_file_end from treating this function as external.  */\n   if (TARGET_IRIX && mips_abi == ABI_32)\n@@ -8484,6 +8469,8 @@ static void\n mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \t\t\t       HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n+  const char *fnname;\n+\n   /* Reinstate the normal $gp.  */\n   SET_REGNO (pic_offset_table_rtx, GLOBAL_POINTER_REGNUM);\n   mips_output_cplocal ();\n@@ -8496,18 +8483,11 @@ mips_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n       set_noreorder = set_nomacro = 0;\n     }\n \n-  if (!FUNCTION_NAME_ALREADY_DECLARED && !flag_inhibit_size_directive)\n-    {\n-      const char *fnname;\n-\n-      /* Get the function name the same way that toplev.c does before calling\n-\t assemble_start_function.  This is needed so that the name used here\n-\t exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n-      fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n-      fputs (\"\\t.end\\t\", file);\n-      assemble_name (file, fnname);\n-      fputs (\"\\n\", file);\n-    }\n+  /* Get the function name the same way that toplev.c does before calling\n+     assemble_start_function.  This is needed so that the name used here\n+     exactly matches the name used in ASM_DECLARE_FUNCTION_NAME.  */\n+  fnname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+  mips_end_function_definition (fnname);\n }\n \f\n /* Save register REG to MEM.  Make the instruction frame-related.  */"}, {"sha": "815a5296d16909013d25947eb5efd756e6b44912", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b6160771d3f0fb783b7f18a3a015126e55ead3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b2b6160771d3f0fb783b7f18a3a015126e55ead3", "patch": "@@ -2703,10 +2703,6 @@ while (0)\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\n \n-#ifndef FUNCTION_NAME_ALREADY_DECLARED\n-#define FUNCTION_NAME_ALREADY_DECLARED 0\n-#endif\n-\n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class."}]}