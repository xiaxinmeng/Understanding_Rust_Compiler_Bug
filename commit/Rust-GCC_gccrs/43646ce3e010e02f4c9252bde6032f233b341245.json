{"sha": "43646ce3e010e02f4c9252bde6032f233b341245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2NDZjZTNlMDEwZTAyZjRjOTI1MmJkZTYwMzJmMjMzYjM0MTI0NQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-01-22T17:56:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-01-22T17:56:02Z"}, "message": "[arm] Further fixes for PR88469\n\nA bitfield that is exactly the same size as an integral type and\nnaturally aligned will have DECL_BIT_FIELD cleared.  So we need to\ncheck DECL_BIT_FIELD_TYPE to be sure whether or not the underlying\ntype was declared with a bitfield declaration.\n\nI've also added a test for bitfields that are based on overaligned types.\n\n\tPR target/88469\ngcc:\n\t* config/arm/arm.c (arm_needs_double_word_align): Check\n\tDECL_BIT_FIELD_TYPE.\n\ngcc/testsuite:\n\t* gcc.target/arm/aapcs/bitfield2.c: New test.\n\t* gcc.target/arm/aapcs/bitfield3.c: New test.\n\nFrom-SVN: r268160", "tree": {"sha": "6c0bf94fc846c397921e236d689a06cc36b8dbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c0bf94fc846c397921e236d689a06cc36b8dbbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43646ce3e010e02f4c9252bde6032f233b341245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43646ce3e010e02f4c9252bde6032f233b341245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43646ce3e010e02f4c9252bde6032f233b341245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43646ce3e010e02f4c9252bde6032f233b341245/comments", "author": null, "committer": null, "parents": [{"sha": "df69e824488337a4a85f8a4893e0f0081f45cd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df69e824488337a4a85f8a4893e0f0081f45cd72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df69e824488337a4a85f8a4893e0f0081f45cd72"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "84f9622af27be38b556a9806299960805df989b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43646ce3e010e02f4c9252bde6032f233b341245", "patch": "@@ -1,3 +1,9 @@\n+2019-01-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/88469\n+\t* config/arm/arm.c (arm_needs_double_word_align): Check\n+\tDECL_BIT_FIELD_TYPE.\n+\n 2019-01-22  Hongtao Liu  <hongtao.liu@intel.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "16e22eed871ca34d56c83c334688e5a95970638e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=43646ce3e010e02f4c9252bde6032f233b341245", "patch": "@@ -6634,7 +6634,7 @@ arm_needs_doubleword_align (machine_mode mode, const_tree type)\n \t  ret = -1;\n       }\n     else if (TREE_CODE (field) == FIELD_DECL\n-\t     && DECL_BIT_FIELD (field)\n+\t     && DECL_BIT_FIELD_TYPE (field)\n \t     && TYPE_ALIGN (DECL_BIT_FIELD_TYPE (field)) > PARM_BOUNDARY)\n       ret2 = 1;\n "}, {"sha": "851e3914ac3815c4900645ded272e73f1f282560", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43646ce3e010e02f4c9252bde6032f233b341245", "patch": "@@ -1,3 +1,9 @@\n+2019-01-22  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/88469\n+\t* gcc.target/arm/aapcs/bitfield2.c: New test.\n+\t* gcc.target/arm/aapcs/bitfield3.c: New test.\n+\n 2019-01-22  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR rtl-optimization/87763"}, {"sha": "9cbe2b08962598e6825b708f6c403e58f01a42a4", "filename": "gcc/testsuite/gcc.target/arm/aapcs/bitfield2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield2.c?ref=43646ce3e010e02f4c9252bde6032f233b341245", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"bitfield2.c\"\n+\n+typedef unsigned int alint __attribute__((aligned (8)));\n+\n+struct bf\n+{\n+  alint a: 17;\n+  alint b: 15;\n+} v = {1, 1};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, R0)\n+  ARG (int, 9, R1)\n+  ARG (int, 11, R2)\n+  /* Alignment of the bitfield type should affect alignment of the overall\n+     type, so R3 not used.  */\n+  LAST_ARG (struct bf, v, STACK)\n+#endif"}, {"sha": "0386e669c2d6a267a9f5f7654a942b94822bee0e", "filename": "gcc/testsuite/gcc.target/arm/aapcs/bitfield3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43646ce3e010e02f4c9252bde6032f233b341245/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Faapcs%2Fbitfield3.c?ref=43646ce3e010e02f4c9252bde6032f233b341245", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (alignment).  */\n+\n+/* { dg-do run { target arm_eabi } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"bitfield3.c\"\n+\n+struct bf\n+{\n+  /* Internally this may be mapped to unsigned short.  Ensure we still\n+     check the original declaration.  */\n+  unsigned long long a: 16;\n+  unsigned b: 3;\n+} v = {1, 3};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 7, R0)\n+  ARG (int, 9, R1)\n+  ARG (int, 11, R2)\n+  /* Alignment of the bitfield type should affect alignment of the overall\n+     type, so R3 not used.  */\n+  LAST_ARG (struct bf, v, STACK)\n+#endif"}]}