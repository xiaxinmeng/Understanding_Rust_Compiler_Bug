{"sha": "700686faf4b0dd347b1dc735569b9fdfaef925d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwNjg2ZmFmNGIwZGQzNDdiMWRjNzM1NTY5YjlmZGZhZWY5MjVkNg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-08-25T20:38:53Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-08-25T20:38:53Z"}, "message": "c-typeck.c (build_c_cast): In ObjC...\n\n[gcc/ChangeLog]\n2004-08-25  Ziemowit Laski  <zlaski@apple.com>\n\n       * c-typeck.c (build_c_cast): In ObjC, always preserve (and silently\n       accept) a cast from one Objective-C pointer type to another.\n\n[gcc/testsuite/ChangeLog]\n2004-08-25  Ziemowit Laski  <zlaski@apple.com>\n\n       * objc.dg/proto-lossage-4.m: New test.\n\nFrom-SVN: r86574", "tree": {"sha": "5a71064f01f5b0959334497b3c0bb29d785e0b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a71064f01f5b0959334497b3c0bb29d785e0b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700686faf4b0dd347b1dc735569b9fdfaef925d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700686faf4b0dd347b1dc735569b9fdfaef925d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700686faf4b0dd347b1dc735569b9fdfaef925d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700686faf4b0dd347b1dc735569b9fdfaef925d6/comments", "author": null, "committer": null, "parents": [{"sha": "7fb654efba6e0dfca691fe90376bef89d4d668e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb654efba6e0dfca691fe90376bef89d4d668e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb654efba6e0dfca691fe90376bef89d4d668e5"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "3ce3e7b1a1dfff35b6c5f50f95b6c6dcee400e19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=700686faf4b0dd347b1dc735569b9fdfaef925d6", "patch": "@@ -1,3 +1,8 @@\n+2004-08-25  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-typeck.c (build_c_cast): In ObjC, always preserve (and silently\n+\taccept) a cast from one Objective-C pointer type to another.\n+\n 2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* doc/install.texi: Document that libstdc++-v3 requires"}, {"sha": "ca6e9f372a733ea2b2748d1059d7c409c25dbc41", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=700686faf4b0dd347b1dc735569b9fdfaef925d6", "patch": "@@ -2922,8 +2922,10 @@ build_c_cast (tree type, tree expr)\n   /* The ObjC front-end uses TYPE_MAIN_VARIANT to tie together types differing\n      only in <protocol> qualifications.  But when constructing cast expressions,\n      the protocols do matter and must be kept around.  */\n-  if (!c_dialect_objc () || !objc_is_object_ptr (type))\n-    type = TYPE_MAIN_VARIANT (type);\n+  if (objc_is_object_ptr (type) && objc_is_object_ptr (TREE_TYPE (expr)))\n+    return build1 (NOP_EXPR, type, expr);\n+\n+  type = TYPE_MAIN_VARIANT (type);\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {"}, {"sha": "ec0349e33e7d97904369b86e59c4e8781b2fe93d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=700686faf4b0dd347b1dc735569b9fdfaef925d6", "patch": "@@ -1,3 +1,7 @@\n+2004-08-25  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc.dg/proto-lossage-4.m: New test.\n+\n 2004-08-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17155"}, {"sha": "5bd25a406f7bc1f74e3a8f1e2f1c84c710eb217d", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700686faf4b0dd347b1dc735569b9fdfaef925d6/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=700686faf4b0dd347b1dc735569b9fdfaef925d6", "patch": "@@ -0,0 +1,51 @@\n+/* Test for situations in which protocol conformance information\n+   may be lost while casting.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-do compile } */\n+\n+/* One-line substitute for objc/objc.h */\n+typedef struct objc_object { struct objc_class *class_pointer; } *id;\n+\n+@protocol Proto\n+- (int)someValue;\n+@end\n+\n+@interface Obj\n+- (int)anotherValue;\n+@end\n+\n+int foo(void) {\n+  int receiver = 2;\n+  Obj *objrcvr;\n+  Obj <Proto> *objrcvr2;\n+\n+  receiver += [receiver someValue]; /* { dg-warning \"invalid receiver type .int( )?.\" } */\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 22 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 22 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 22 } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 22 } */\n+\n+  receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .int( )?.\" } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 28 } */\n+  \n+  receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 31 } */\n+\n+  receiver += [(Obj *)receiver anotherValue];\n+  receiver += [(Obj <Proto> *)receiver someValue];\n+  receiver += [(Obj <Proto> *)receiver anotherValue];\n+  receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 37 } */\n+\n+  receiver += [objrcvr anotherValue];\n+  receiver += [(Obj <Proto> *)objrcvr someValue];\n+  receiver += [(Obj <Proto> *)objrcvr anotherValue];\n+  receiver += [objrcvr2 someValue];\n+  receiver += [objrcvr2 anotherValue];\n+  receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n+/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } 45 } */\n+\n+  receiver += [(Obj *)objrcvr2 anotherValue];\n+\n+  return receiver;\n+}"}]}