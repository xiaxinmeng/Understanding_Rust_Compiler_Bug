{"sha": "1d74252db852527360f1357ed06d573d47122e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3NDI1MmRiODUyNTI3MzYwZjEzNTdlZDA2ZDU3M2Q0NzEyMmUyNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:10:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:10:46Z"}, "message": "[multiple changes]\n\n2015-11-18  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-os_lib.ads, s-os_lib.adb(Normalize_Pathname): Support the case of\n\tan unresolved Directory argument, by recursively resolving it\n\tagainst the current dir.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Process_Formals): A function declaration that\n\treturns a class-wide type must have freeing deferred, so that it\n\tis not frozen before the class-wide type and its root type are\n\tfrozen. This is significant when there may be a limited view of\n\tthe class_wide type in another package.\n\nFrom-SVN: r230526", "tree": {"sha": "4c2efbdae3e6b08c28b5cf85d82522a042742e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2efbdae3e6b08c28b5cf85d82522a042742e98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d74252db852527360f1357ed06d573d47122e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d74252db852527360f1357ed06d573d47122e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d74252db852527360f1357ed06d573d47122e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d74252db852527360f1357ed06d573d47122e24/comments", "author": null, "committer": null, "parents": [{"sha": "2f54ef3d56ff1e68036e389bb50a654474fe1a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f54ef3d56ff1e68036e389bb50a654474fe1a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f54ef3d56ff1e68036e389bb50a654474fe1a00"}], "stats": {"total": 88, "additions": 56, "deletions": 32}, "files": [{"sha": "39e407bada368be52e5b3c88480034d430d54818", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d74252db852527360f1357ed06d573d47122e24", "patch": "@@ -1,3 +1,17 @@\n+2015-11-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-os_lib.ads, s-os_lib.adb(Normalize_Pathname): Support the case of\n+\tan unresolved Directory argument, by recursively resolving it\n+\tagainst the current dir.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Process_Formals): A function declaration that\n+\treturns a class-wide type must have freeing deferred, so that it\n+\tis not frozen before the class-wide type and its root type are\n+\tfrozen. This is significant when there may be a limited view of\n+\tthe class_wide type in another package.\n+\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb (Has_Non_Null_Refinement): Rename to"}, {"sha": "83c20a9bf4683ed5c9a62d64b7c388f8b807db15", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=1d74252db852527360f1357ed06d573d47122e24", "patch": "@@ -2081,33 +2081,34 @@ package body System.OS_Lib is\n       -------------------\n \n       function Get_Directory (Dir : String) return String is\n-         Result : String (1 .. Dir'Length + 1);\n-         Length : constant Natural := Dir'Length;\n-\n       begin\n          --  Directory given, add directory separator if needed\n \n-         if Length > 0 then\n-            Result (1 .. Length) := Dir;\n+         if Dir'Length > 0 then\n+            declare\n+               Result : String   :=\n+                          Normalize_Pathname (Dir, \"\") & Directory_Separator;\n+               Last   : Positive := Result'Last - 1;\n \n-            --  On Windows, change all '/' to '\\'\n+            begin\n+               --  On Windows, change all '/' to '\\'\n+\n+               if On_Windows then\n+                  for J in Result'First .. Last - 1 loop\n+                     if Result (J) = '/' then\n+                        Result (J) := Directory_Separator;\n+                     end if;\n+                  end loop;\n+               end if;\n \n-            if On_Windows then\n-               for J in 1 .. Length loop\n-                  if Result (J) = '/' then\n-                     Result (J) := Directory_Separator;\n-                  end if;\n-               end loop;\n-            end if;\n+               --  Include additional directory separator, if needed\n \n-            --  Add directory separator, if needed\n+               if Result (Last) /= Directory_Separator then\n+                  Last := Last + 1;\n+               end if;\n \n-            if Result (Length) = Directory_Separator then\n-               return Result (1 .. Length);\n-            else\n-               Result (Result'Length) := Directory_Separator;\n-               return Result;\n-            end if;\n+               return Result (Result'First .. Last);\n+            end;\n \n          --  Directory name not given, get current directory\n "}, {"sha": "985f492ebef304e26665e92544c904d4d2289f0c", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=1d74252db852527360f1357ed06d573d47122e24", "patch": "@@ -505,19 +505,17 @@ package System.OS_Lib is\n       Resolve_Links  : Boolean := True;\n       Case_Sensitive : Boolean := True) return String;\n    --  Returns a file name as an absolute path name, resolving all relative\n-   --  directories, and symbolic links. The parameter Directory is a fully\n-   --  resolved path name for a directory, or the empty string (the default).\n-   --  Name is the name of a file, which is either relative to the given\n-   --  directory name, if Directory is non-null, or to the current working\n-   --  directory if Directory is null. The result returned is the normalized\n-   --  name of the file. For most cases, if two file names designate the same\n-   --  file through different paths, Normalize_Pathname will return the same\n-   --  canonical name in both cases. However, there are cases when this is not\n-   --  true; for example, this is not true in Unix for two hard links\n-   --  designating the same file.\n+   --  directories, and symbolic links. If Name is a relative path, it is\n+   --  interpreted relative to Directory, or to the current directory if\n+   --  Directory is the empty string (the default). The result returned is\n+   --  the normalized name of the file, containing no \".\" or \"..\" components,\n+   --  and no duplicated directory separators. For most cases, if two file\n+   --  names designate the same file through different paths,\n+   --  Normalize_Pathname will return the same canonical name in both cases.\n+   --  However, there are cases when this is not true; for example, this is\n+   --  not true in Unix for two hard links designating the same file.\n    --\n-   --  On Windows, the returned path will start with a drive letter except\n-   --  when Directory is not empty and does not include a drive letter. If\n+   --  On Windows, the returned path will start with a drive letter. If\n    --  Directory is empty (the default) and Name is a relative path or an\n    --  absolute path without drive letter, the letter of the current drive\n    --  will start the returned path. If Case_Sensitive is True (the default),"}, {"sha": "a4e15bc49d66581356f74884417cfca711194502", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d74252db852527360f1357ed06d573d47122e24/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1d74252db852527360f1357ed06d573d47122e24", "patch": "@@ -10423,6 +10423,17 @@ package body Sem_Ch6 is\n \n       if Nkind (Related_Nod) = N_Function_Specification then\n          Analyze_Return_Type (Related_Nod);\n+\n+         --  If return type is class-wide, subprogram freezing may be\n+         --  delayed as well.\n+\n+         if Is_Class_Wide_Type (Etype (Current_Scope))\n+           and then not Is_Thunk (Current_Scope)\n+           and then Nkind (Unit_Declaration_Node (Current_Scope)) =\n+             N_Subprogram_Declaration\n+         then\n+            Set_Has_Delayed_Freeze (Current_Scope);\n+         end if;\n       end if;\n \n       --  Now set the kind (mode) of each formal"}]}