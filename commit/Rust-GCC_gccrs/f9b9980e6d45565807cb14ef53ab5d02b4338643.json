{"sha": "f9b9980e6d45565807cb14ef53ab5d02b4338643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliOTk4MGU2ZDQ1NTY1ODA3Y2IxNGVmNTNhYjVkMDJiNDMzODY0Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-10-07T08:49:36Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-10-07T08:49:36Z"}, "message": "arm.md (cmpsi2_addneg): New ARM pattern.\n\n* arm.md (cmpsi2_addneg): New ARM pattern. Add peephole2 to generate\nit.\n(cbranchne_decr1): New Thumb pattern.\n* arm.c (arm_addimm_operand): New insn predicate.\n* arm-protos.h: Add a prototype for it.\n* arm.h (PREDICATE_CODES): Add it.\n\nFrom-SVN: r72188", "tree": {"sha": "94033a97e8335ca491ff5dd3f927129749d163e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94033a97e8335ca491ff5dd3f927129749d163e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9b9980e6d45565807cb14ef53ab5d02b4338643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b9980e6d45565807cb14ef53ab5d02b4338643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b9980e6d45565807cb14ef53ab5d02b4338643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b9980e6d45565807cb14ef53ab5d02b4338643/comments", "author": null, "committer": null, "parents": [{"sha": "79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ae11c4a302d90b678ed23fe4ccfb6a163a19fc"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "f8e3e054510fd310f4c271eeeecf2cec06348ac0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9b9980e6d45565807cb14ef53ab5d02b4338643", "patch": "@@ -1,3 +1,12 @@\n+2003-10-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (cmpsi2_addneg): New ARM pattern. Add peephole2 to generate\n+\tit.\n+\t(cbranchne_decr1): New Thumb pattern.\n+\t* arm.c (arm_addimm_operand): New insn predicate.\n+\t* arm-protos.h: Add a prototype for it.\n+\t* arm.h (PREDICATE_CODES): Add it.\n+\n 2003-10-07  Dorit Naishlos <dorit@il.ibm.com>\n \n \t* sched-int.h (sched_info): New field "}, {"sha": "c16deb63a240028234a1b9671bd7edbaaaf1eb03", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=f9b9980e6d45565807cb14ef53ab5d02b4338643", "patch": "@@ -65,6 +65,7 @@ extern int arm_reload_memory_operand (rtx, enum machine_mode);\n extern int arm_rhs_operand (rtx, enum machine_mode);\n extern int arm_rhsm_operand (rtx, enum machine_mode);\n extern int arm_add_operand (rtx, enum machine_mode);\n+extern int arm_addimm_operand (rtx, enum machine_mode);\n extern int arm_not_operand (rtx, enum machine_mode);\n extern int offsettable_memory_operand (rtx, enum machine_mode);\n extern int alignable_memory_operand (rtx, enum machine_mode);"}, {"sha": "f2441a0ee220a45ba79371da8a422557cd8af5da", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f9b9980e6d45565807cb14ef53ab5d02b4338643", "patch": "@@ -3750,6 +3750,15 @@ arm_add_operand (rtx op, enum machine_mode mode)\n \t\t  || const_ok_for_arm (-INTVAL (op)))));\n }\n \n+/* Return TRUE for valid ARM constants (or when valid if negated).  */\n+int\n+arm_addimm_operand (rtx op, enum machine_mode mode)\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && (const_ok_for_arm (INTVAL (op))\n+\t      || const_ok_for_arm (-INTVAL (op))));\n+}\n+\n int\n arm_not_operand (rtx op, enum machine_mode mode)\n {"}, {"sha": "77debec618d8fbdd4ace281aa4cc12030741c633", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f9b9980e6d45565807cb14ef53ab5d02b4338643", "patch": "@@ -2681,6 +2681,7 @@ extern int making_const_table;\n   {\"arm_hard_register_operand\", {REG}},\t\t\t\t\t\\\n   {\"f_register_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"arm_add_operand\",    {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"arm_addimm_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"fpa_add_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"fpa_rhs_operand\",    {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"arm_rhs_operand\",    {SUBREG, REG, CONST_INT}},\t\t\t\\"}, {"sha": "177d54b89aa3cd325468c5bcdf9cb05e0702ea93", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b9980e6d45565807cb14ef53ab5d02b4338643/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f9b9980e6d45565807cb14ef53ab5d02b4338643", "patch": "@@ -667,6 +667,60 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n+;; This is the canonicalization of addsi3_compare0_for_combiner when the\n+;; addend is a constant.\n+(define_insn \"*cmpsi2_addneg\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t (match_operand:SI 2 \"arm_addimm_operand\" \"I,L\")))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(plus:SI (match_dup 1)\n+\t\t (match_operand:SI 3 \"arm_addimm_operand\" \"L,I\")))]\n+  \"TARGET_ARM && INTVAL (operands[2]) == -INTVAL (operands[3])\"\n+  \"@\n+   sub%?s\\\\t%0, %1, %2\n+   add%?s\\\\t%0, %1, #%n2\"\n+  [(set_attr \"conds\" \"set\")]\n+)\n+\n+;; Convert the sequence\n+;;  sub  rd, rn, #1\n+;;  cmn  rd, #1\t(equivalent to cmp rd, #-1)\n+;;  bne  dest\n+;; into\n+;;  subs rd, rn, #1\n+;;  bcs  dest\t((unsigned)rn >= 1)\n+;; similarly for the beq variant using bcc.\n+;; This is a common looping idiom (while (n--))\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t (const_int -1)))\n+   (set (match_operand 2 \"cc_register\" \"\")\n+\t(compare (match_dup 0) (const_int -1)))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"equality_operator\"\n+\t\t       [(match_dup 2) (const_int 0)])\n+\t\t      (match_operand 4 \"\" \"\")\n+\t\t      (match_operand 5 \"\" \"\")))]\n+  \"TARGET_ARM && peep2_reg_dead_p (3, operands[2])\"\n+  [(parallel[\n+    (set (match_dup 2)\n+\t (compare:CC\n+\t  (match_dup 1) (const_int 1)))\n+    (set (match_dup 0) (plus:SI (match_dup 1) (const_int -1)))])\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(match_dup 2) (const_int 0)])\n+\t\t      (match_dup 4)\n+\t\t      (match_dup 5)))]\n+  \"operands[2] = gen_rtx_REG (CCmode, CC_REGNUM);\n+   operands[3] = gen_rtx_fmt_ee ((GET_CODE (operands[3]) == NE\n+\t\t\t\t  ? GEU : LTU),\n+\t\t\t\t VOIDmode, \n+\t\t\t\t operands[2], const0_rtx);\"\n+)\n+\n ;; The next four insns work because they compare the result with one of\n ;; the operands, and we know that the use of the condition code is\n ;; either GEU or LTU, so we can use the carry flag from the addition\n@@ -5192,6 +5246,108 @@\n \t\t(const_int 8))))]\n )\n \n+(define_insn \"*cbranchne_decr1\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"equality_operator\"\n+\t\t       [(match_operand:SI 2 \"s_register_operand\" \"l,l,1,l\")\n+\t\t        (const_int 0)])\n+\t\t      (label_ref (match_operand 4 \"\" \"\"))\n+\t\t      (pc)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,?h,?m,?m\")\n+\t(plus:SI (match_dup 2) (const_int -1)))\n+   (clobber (match_scratch:SI 1 \"=X,l,&l,&l\"))]\n+  \"TARGET_THUMB\"\n+  \"*\n+   {\n+     rtx cond[2];\n+     cond[0] = gen_rtx_fmt_ee ((GET_CODE (operands[3]) == NE\n+\t\t\t\t? GEU : LTU),\n+\t\t\t       VOIDmode, NULL, NULL);\n+     cond[1] = operands[4];\n+\n+     if (which_alternative == 0)\n+       output_asm_insn (\\\"sub\\\\t%0, %2, #1\\\", operands);\n+     else if (which_alternative == 1)\n+       {\n+\t /* We must provide an alternative for a hi reg because reload \n+\t    cannot handle output reloads on a jump instruction, but we\n+\t    can't subtract into that.  Fortunately a mov from lo to hi\n+\t    does not clobber the condition codes.  */\n+\t output_asm_insn (\\\"sub\\\\t%1, %2, #1\\\", operands);\n+\t output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n+       }\n+     else\n+       {\n+\t /* Similarly, but the target is memory.  */\n+\t output_asm_insn (\\\"sub\\\\t%1, %2, #1\\\", operands);\n+\t output_asm_insn (\\\"str\\\\t%1, %0\\\", operands);\n+       }\n+\n+     switch (get_attr_length (insn) - (which_alternative ? 2 : 0))\n+       {\n+\t case 4:\n+\t   output_asm_insn (\\\"b%d0\\\\t%l1\\\", &cond);\n+\t   return \\\"\\\";\n+\t case 6:\n+\t   output_asm_insn (\\\"b%D0\\\\t.LCB%=\\\", &cond);\n+\t   return \\\"b\\\\t%l4\\\\t%@long jump\\\\n.LCB%=:\\\";\n+\t default:\n+\t   output_asm_insn (\\\"b%D0\\\\t.LCB%=\\\", &cond);\n+\t   return \\\"bl\\\\t%l4\\\\t%@far jump\\\\n.LCB%=:\\\";\n+       }\n+   }\n+  \"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (ior (and (eq (symbol_ref (\"which_alternative\"))\n+\t                  (const_int 0))\n+\t\t      (eq_attr \"length\" \"8\"))\n+\t\t (eq_attr \"length\" \"10\"))\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set_attr_alternative \"length\"\n+      [\n+       ;; Alternative 0\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -250))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 4)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2040))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 6)\n+\t   (const_int 8)))\n+       ;; Alternative 1\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 6)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 8)\n+\t   (const_int 10)))\n+       ;; Alternative 2\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 6)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 8)\n+\t   (const_int 10)))\n+       ;; Alternative 3\n+       (if_then_else\n+\t (and (ge (minus (match_dup 4) (pc)) (const_int -248))\n+\t      (le (minus (match_dup 4) (pc)) (const_int 256)))\n+\t (const_int 6)\n+\t (if_then_else\n+\t   (and (ge (minus (match_dup 4) (pc)) (const_int -2038))\n+\t\t(le (minus (match_dup 4) (pc)) (const_int 2048)))\n+\t   (const_int 8)\n+\t   (const_int 10)))])]\n+)\n \n ;; Comparison and test insns\n "}]}