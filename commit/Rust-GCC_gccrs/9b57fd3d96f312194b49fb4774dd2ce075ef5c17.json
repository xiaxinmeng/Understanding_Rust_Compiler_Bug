{"sha": "9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1N2ZkM2Q5NmYzMTIxOTRiNDlmYjQ3NzRkZDJjZTA3NWVmNWMxNw==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2018-06-21T09:08:43Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2018-06-21T09:08:43Z"}, "message": "[AArch64][PATCH 2/2] Combine AES instructions with xor and zero operands\n\ngcc\n2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/aarch64/aarch64-simd.md\n\t(*aarch64_crypto_aes<aes_op>v16qi_xor_combine): New.\n\ngcc/testsuite\n2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc/gcc.target/aarch64/aes_xor_combine.c: New test.\n\nFrom-SVN: r261836", "tree": {"sha": "d41a355d938e568d5295b935212277cda8feb385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d41a355d938e568d5295b935212277cda8feb385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff02988392adfa1514e9c3495731b719f5228d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff02988392adfa1514e9c3495731b719f5228d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff02988392adfa1514e9c3495731b719f5228d5b"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "1e851db45c6a4a65e38604580c981a2a581fcadf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "patch": "@@ -1,3 +1,8 @@\n+2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_crypto_aes<aes_op>v16qi_xor_combine): New.\n+\n 2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aes_op>v16qi):"}, {"sha": "315c8dc4b85a849b2ec8d0bc0befbacda8fc0da3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "patch": "@@ -5886,6 +5886,29 @@\n   [(set_attr \"type\" \"crypto_aese\")]\n )\n \n+(define_insn \"*aarch64_crypto_aes<aes_op>v16qi_xor_combine\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V16QI [(xor:V16QI\n+\t\t\t(match_operand:V16QI 1 \"register_operand\" \"%0\")\n+\t\t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))\n+\t\t       (match_operand:V16QI 3 \"aarch64_simd_imm_zero\" \"\")]\n+\t\t       CRYPTO_AES))]\n+  \"TARGET_SIMD && TARGET_AES\"\n+  \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n+  [(set_attr \"type\" \"crypto_aese\")]\n+)\n+\n+(define_insn \"*aarch64_crypto_aes<aes_op>v16qi_xor_combine\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V16QI [(match_operand:V16QI 3 \"aarch64_simd_imm_zero\" \"\")\n+\t(xor:V16QI (match_operand:V16QI 1 \"register_operand\" \"%0\")\n+\t\t   (match_operand:V16QI 2 \"register_operand\" \"w\"))]\n+\tCRYPTO_AES))]\n+  \"TARGET_SIMD && TARGET_AES\"\n+  \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n+  [(set_attr \"type\" \"crypto_aese\")]\n+)\n+\n ;; When AES/AESMC fusion is enabled we want the register allocation to\n ;; look like:\n ;;    AESE Vn, _"}, {"sha": "e32abfaeb0eeba7cf61b9cd94bdf827721f85046", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "patch": "@@ -1,3 +1,7 @@\n+2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc/gcc.target/aarch64/aes_xor_combine.c: New test.\n+\n 2018-06-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc/gcc.target/aarch64/aes_2.c: New test."}, {"sha": "833e9b3073bdbc4d17c78327974b5106fb3f8663", "filename": "gcc/testsuite/gcc.target/aarch64/aes_xor_combine.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b57fd3d96f312194b49fb4774dd2ce075ef5c17/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faes_xor_combine.c?ref=9b57fd3d96f312194b49fb4774dd2ce075ef5c17", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mcpu=cortex-a55+crypto\" } */\n+#include <arm_neon.h>\n+\n+#define AESE(r, v, key) (r = vaeseq_u8 ((v), (key)));\n+#define AESD(r, v, key) (r = vaesdq_u8 ((v), (key)));\n+\n+const uint8x16_t zero = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+uint8x16_t foo0 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESE(dummy, a ^ b, zero);\n+  return dummy;\n+}\n+\n+uint8x16_t foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESE(dummy, a ^ b, zero);\n+  AESE(dummy, dummy ^ a, zero);\n+  return dummy;\n+}\n+\n+uint8x16_t bar0 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESE(dummy, zero, a ^ b);\n+  return dummy;\n+}\n+\n+uint8x16_t bar1 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESE(dummy, zero, a ^ b);\n+  AESE(dummy, zero, b ^ dummy);\n+  return dummy;\n+}\n+\n+uint8x16_t foo2 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESD(dummy, a ^ b, zero);\n+  return dummy;\n+}\n+\n+uint8x16_t foo3 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESD(dummy, a ^ b, zero);\n+  AESD(dummy, dummy ^ a, zero);\n+  return dummy;\n+}\n+\n+uint8x16_t bar2 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESD(dummy, zero, a ^ b);\n+  return dummy;\n+}\n+\n+uint8x16_t bar3 (uint8x16_t a, uint8x16_t b)\n+{\n+  uint8x16_t dummy;\n+  AESD(dummy, zero, a ^ b);\n+  AESD(dummy, zero, b ^ dummy);\n+  return dummy;\n+}\n+/* { dg-final { scan-assembler-not \"eor\" } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */"}]}