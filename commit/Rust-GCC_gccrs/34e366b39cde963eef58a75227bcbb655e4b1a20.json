{"sha": "34e366b39cde963eef58a75227bcbb655e4b1a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlMzY2YjM5Y2RlOTYzZWVmNThhNzUyMjdiY2JiNjU1ZTRiMWEyMA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-04T15:18:48Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-10-04T15:18:48Z"}, "message": "re PR fortran/32021 (Fix,document,remove GFORTRAN_* environment variables)\n\n\tPR libfortran/32021\n\n\t* runtime/environ.c (init_mem, show_mem, init_round, show_round,\n\tinit_precision, show_precision, init_signal, show_signal): Remove.\n\t(variable_table): Remove GFORTRAN_MEM_INIT, GFORTRAN_MEM_CHECK,\n\tGFORTRAN_SIGHUP, GFORTRAN_SIGINT, GFORTRAN_FPU_ROUND and\n\tGFORTRAN_FPU_PRECISION.\n\t* libgfortran.h (options_t): Remove mem_check, fpu_round,\n\tfpu_precision, sighup, sigint, allocate_init_flag and\n\tallocate_init_value.\n\nFrom-SVN: r129014", "tree": {"sha": "5551ed792ad3f21c6705d16b1ca3f5d97d6659c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5551ed792ad3f21c6705d16b1ca3f5d97d6659c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e366b39cde963eef58a75227bcbb655e4b1a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e366b39cde963eef58a75227bcbb655e4b1a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e366b39cde963eef58a75227bcbb655e4b1a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e366b39cde963eef58a75227bcbb655e4b1a20/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b36b70be3d76df54b8d50a5f09368db15477c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b36b70be3d76df54b8d50a5f09368db15477c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b36b70be3d76df54b8d50a5f09368db15477c9"}], "stats": {"total": 159, "additions": 14, "deletions": 145}, "files": [{"sha": "a5a67310928b8b44cc7b126efc22612c73e10890", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=34e366b39cde963eef58a75227bcbb655e4b1a20", "patch": "@@ -1,8 +1,20 @@\n+2007-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/32021\n+\t* runtime/environ.c (init_mem, show_mem, init_round, show_round,\n+\tinit_precision, show_precision, init_signal, show_signal): Remove.\n+\t(variable_table): Remove GFORTRAN_MEM_INIT, GFORTRAN_MEM_CHECK,\n+\tGFORTRAN_SIGHUP, GFORTRAN_SIGINT, GFORTRAN_FPU_ROUND and\n+\tGFORTRAN_FPU_PRECISION.\n+\t* libgfortran.h (options_t): Remove mem_check, fpu_round,\n+\tfpu_precision, sighup, sigint, allocate_init_flag and\n+\tallocate_init_value.\n+\n 2007-10-02  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33253\n \t* io/list_read.c (read_character): Use DELIM_APOSTROPHE and DELIM_QUOTE\n-        and quote value in check of first character in string.\n+\tand quote value in check of first character in string.\n \n 2007-10-02  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "8d80998423dbeea8b880b1061dfba5e52f6b222b", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=34e366b39cde963eef58a75227bcbb655e4b1a20", "patch": "@@ -344,19 +344,13 @@ typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, GFC_LOGICAL_16) gfc_array_l16;\n typedef struct\n {\n   int stdin_unit, stdout_unit, stderr_unit, optional_plus;\n-  int allocate_init_flag, allocate_init_value;\n   int locus;\n \n   int separator_len;\n   const char *separator;\n \n-  int mem_check;\n   int use_stderr, all_unbuffered, default_recl;\n-\n-  int fpu_round, fpu_precision, fpe;\n-\n-  int sighup, sigint;\n-  int dump_core, backtrace;\n+  int fpe, dump_core, backtrace;\n }\n options_t;\n "}, {"sha": "ae06abe0c45e19d430f17d2adac2b916b88b3a52", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e366b39cde963eef58a75227bcbb655e4b1a20/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=34e366b39cde963eef58a75227bcbb655e4b1a20", "patch": "@@ -201,78 +201,6 @@ show_boolean (variable * v)\n }\n \n \n-/* init_mem()-- Initialize environment variables that have to do with\n- * how memory from an ALLOCATE statement is filled.  A single flag\n- * enables filling and a second variable gives the value that is used\n- * to initialize the memory. */\n-\n-static void\n-init_mem (variable * v)\n-{\n-  int offset, n;\n-  char *p;\n-\n-  p = getenv (v->name);\n-\n-  options.allocate_init_flag = 0;\t/* The default */\n-\n-  if (p == NULL)\n-    return;\n-\n-  if (strcasecmp (p, \"NONE\") == 0)\n-    return;\n-\n-  /* IEEE-754 Quiet Not-a-Number that will work for single and double\n-   * precision.  Look for the 'f95' mantissa in debug dumps. */\n-\n-  if (strcasecmp (p, \"NaN\") == 0)\n-    {\n-      options.allocate_init_flag = 1;\n-      options.allocate_init_value = 0xfff80f95;\n-      return;\n-    }\n-\n-  /* Interpret the string as a hexadecimal constant */\n-\n-  n = 0;\n-  while (*p)\n-    {\n-      if (!isxdigit (*p))\n-\t{\n-\t  v->bad = 1;\n-\t  return;\n-\t}\n-\n-      offset = '0';\n-      if (islower (*p))\n-\toffset = 'a';\n-      if (isupper (*p))\n-\toffset = 'A';\n-\n-      n = (n << 4) | (*p++ - offset);\n-    }\n-\n-  options.allocate_init_flag = 1;\n-  options.allocate_init_value = n;\n-}\n-\n-\n-static void\n-show_mem (variable * v)\n-{\n-  char *p;\n-\n-  p = getenv (v->name);\n-\n-  st_printf (\"%s  \", var_source (v));\n-\n-  if (options.allocate_init_flag)\n-    st_printf (\"0x%x\", options.allocate_init_value);\n-\n-  st_printf (\"\\n\");\n-}\n-\n-\n static void\n init_sep (variable * v)\n {\n@@ -422,43 +350,6 @@ show_choice (variable * v, const choice * c)\n }\n \n \n-static void\n-init_round (variable * v)\n-{\n-  init_choice (v, rounding);\n-}\n-\n-static void\n-show_round (variable * v)\n-{\n-  show_choice (v, rounding);\n-}\n-\n-static void\n-init_precision (variable * v)\n-{\n-  init_choice (v, precision);\n-}\n-\n-static void\n-show_precision (variable * v)\n-{\n-  show_choice (v, precision);\n-}\n-\n-static void\n-init_signal (variable * v)\n-{\n-  init_choice (v, signal_choices);\n-}\n-\n-static void\n-show_signal (variable * v)\n-{\n-  show_choice (v, signal_choices);\n-}\n-\n-\n static variable variable_table[] = {\n   {\"GFORTRAN_STDIN_UNIT\", GFC_STDIN_UNIT_NUMBER, &options.stdin_unit,\n    init_integer, show_integer,\n@@ -504,34 +395,6 @@ static variable variable_table[] = {\n    \"Separator to use when writing list output.  May contain any number of \"\n    \"spaces\\nand at most one comma.  Default is a single space.\", 0},\n \n-  /* Memory related controls */\n-\n-  {\"GFORTRAN_MEM_INIT\", 0, NULL, init_mem, show_mem,\n-   \"How to initialize allocated memory.  Default value is NONE for no \"\n-   \"initialization\\n(faster), NAN for a Not-a-Number with the mantissa \"\n-   \"0x40f95 or a custom\\nhexadecimal value\", 0},\n-\n-  {\"GFORTRAN_MEM_CHECK\", 0, &options.mem_check, init_boolean, show_boolean,\n-   \"Whether memory still allocated will be reported when the program ends.\",\n-   0},\n-\n-  /* Signal handling (Unix).  */\n-\n-  {\"GFORTRAN_SIGHUP\", 0, &options.sighup, init_signal, show_signal,\n-   \"Whether the program will IGNORE or ABORT on SIGHUP.\", 0},\n-\n-  {\"GFORTRAN_SIGINT\", 0, &options.sigint, init_signal, show_signal,\n-   \"Whether the program will IGNORE or ABORT on SIGINT.\", 0},\n-\n-  /* Floating point control */\n-\n-  {\"GFORTRAN_FPU_ROUND\", 0, &options.fpu_round, init_round, show_round,\n-   \"Set floating point rounding.  Values are NEAREST, UP, DOWN, ZERO.\", 0},\n-\n-  {\"GFORTRAN_FPU_PRECISION\", 0, &options.fpu_precision, init_precision,\n-   show_precision,\n-   \"Precision of intermediate results.  Values are 24, 53 and 64.\", 0},\n-\n   /* GFORTRAN_CONVERT_UNIT - Set the default data conversion for\n    unformatted I/O.  */\n   {\"GFORTRAN_CONVERT_UNIT\", 0, 0, init_unformatted, show_string,"}]}