{"sha": "74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmODcwNWViZTZlYmY0MmJjZmI0NmNmMWM5YTI2YTVhYjNiYWNlOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-03-02T20:27:46Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-03-02T20:27:46Z"}, "message": "re PR c++/84578 (ICE with flexible array member and constexpr)\n\n\tPR c++/84578\n\t* constexpr.c (get_array_or_vector_nelts): New.\n\t(cxx_eval_array_reference): Use it.\n\t(cxx_eval_vec_init_1): Likewise.\n\t(cxx_eval_store_expression): Likewise.\n\n\t* g++.dg/ext/flexary29.C: New test.\n\nFrom-SVN: r258156", "tree": {"sha": "a0f91afc6bbf3b1c8e6c28f30a34ed6d42991a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f91afc6bbf3b1c8e6c28f30a34ed6d42991a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2353e5931b1c06053d35c13b9e03f62aca0866c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2353e5931b1c06053d35c13b9e03f62aca0866c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2353e5931b1c06053d35c13b9e03f62aca0866c"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "692010906903cabbcbd31d5a7cf183cedb6ecaf0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "patch": "@@ -1,3 +1,11 @@\n+2018-03-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/84578\n+\t* constexpr.c (get_array_or_vector_nelts): New.\n+\t(cxx_eval_array_reference): Use it.\n+\t(cxx_eval_vec_init_1): Likewise.\n+\t(cxx_eval_store_expression): Likewise.\n+\n 2018-03-02  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (force_paren_expr): Remove redundant test."}, {"sha": "27f841db38f09e985803020652a664257907cfeb", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "patch": "@@ -2300,6 +2300,32 @@ diag_array_subscript (const constexpr_ctx *ctx, tree array, tree index)\n     }\n }\n \n+/* Return the number of elements for TYPE (which is an ARRAY_TYPE or\n+   a VECTOR_TYPE).  */\n+\n+static tree\n+get_array_or_vector_nelts (const constexpr_ctx *ctx, tree type,\n+\t\t\t   bool *non_constant_p, bool *overflow_p)\n+{\n+  tree nelts;\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      if (TYPE_DOMAIN (type))\n+\tnelts = array_type_nelts_top (type);\n+      else\n+\tnelts = size_zero_node;\n+    }\n+  else if (VECTOR_TYPE_P (type))\n+    nelts = size_int (TYPE_VECTOR_SUBPARTS (type));\n+  else\n+    gcc_unreachable ();\n+\n+  /* For VLAs, the number of elements won't be an integer constant.  */\n+  nelts = cxx_eval_constant_expression (ctx, nelts, false,\n+\t\t\t\t\tnon_constant_p, overflow_p);\n+  return nelts;\n+}\n+\n /* Extract element INDEX consisting of CHARS_PER_ELT chars from\n    STRING_CST STRING.  */\n \n@@ -2379,22 +2405,8 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \t}\n     }\n \n-  tree nelts;\n-  if (TREE_CODE (TREE_TYPE (ary)) == ARRAY_TYPE)\n-    {\n-      if (TYPE_DOMAIN (TREE_TYPE (ary)))\n-\tnelts = array_type_nelts_top (TREE_TYPE (ary));\n-      else\n-\tnelts = size_zero_node;\n-    }\n-  else if (VECTOR_TYPE_P (TREE_TYPE (ary)))\n-    nelts = size_int (TYPE_VECTOR_SUBPARTS (TREE_TYPE (ary)));\n-  else\n-    gcc_unreachable ();\n-\n-  /* For VLAs, the number of elements won't be an integer constant.  */\n-  nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n-\t\t\t\t\toverflow_p);\n+  tree nelts = get_array_or_vector_nelts (ctx, TREE_TYPE (ary), non_constant_p,\n+\t\t\t\t\t  overflow_p);\n   VERIFY_CONSTANT (nelts);\n   if ((lval\n        ? !tree_int_cst_le (index, nelts)\n@@ -2895,7 +2907,6 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n \t\t     bool *non_constant_p, bool *overflow_p)\n {\n   tree elttype = TREE_TYPE (atype);\n-  unsigned HOST_WIDE_INT max = tree_to_uhwi (array_type_nelts_top (atype));\n   verify_ctor_sanity (ctx, atype);\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   bool pre_init = false;\n@@ -2924,6 +2935,9 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n       pre_init = true;\n     }\n \n+  tree nelts = get_array_or_vector_nelts (ctx, atype, non_constant_p,\n+\t\t\t\t\t  overflow_p);\n+  unsigned HOST_WIDE_INT max = tree_to_uhwi (nelts);\n   for (i = 0; i < max; ++i)\n     {\n       tree idx = build_int_cst (size_type_node, i);\n@@ -3480,19 +3494,8 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \tcase ARRAY_REF:\n \t  tree nelts, ary;\n \t  ary = TREE_OPERAND (probe, 0);\n-\t  if (TREE_CODE (TREE_TYPE (ary)) == ARRAY_TYPE)\n-\t    {\n-\t      if (TYPE_DOMAIN (TREE_TYPE (ary)))\n-\t\tnelts = array_type_nelts_top (TREE_TYPE (ary));\n-\t      else\n-\t\tnelts = size_zero_node;\n-\t    }\n-\t  else if (VECTOR_TYPE_P (TREE_TYPE (ary)))\n-\t    nelts = size_int (TYPE_VECTOR_SUBPARTS (TREE_TYPE (ary)));\n-\t  else\n-\t    gcc_unreachable ();\n-\t  nelts = cxx_eval_constant_expression (ctx, nelts, false,\n-\t\t\t\t\t\tnon_constant_p, overflow_p);\n+\t  nelts = get_array_or_vector_nelts (ctx, TREE_TYPE (ary),\n+\t\t\t\t\t     non_constant_p, overflow_p);\n \t  VERIFY_CONSTANT (nelts);\n \t  gcc_assert (TREE_CODE (nelts) == INTEGER_CST\n \t\t      && TREE_CODE (TREE_OPERAND (probe, 1)) == INTEGER_CST);"}, {"sha": "0244231ac5218e98a20a7e1752a9ab65cdb028ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "patch": "@@ -1,3 +1,8 @@\n+2018-03-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/84578\n+\t* g++.dg/ext/flexary29.C: New test.\n+\n 2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/Warray-bounds-2.c: Fix a comment typo."}, {"sha": "a696fd9804f1dab7e7ff8e183a8c984db3e774e0", "filename": "gcc/testsuite/g++.dg/ext/flexary29.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fflexary29.C?ref=74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/84578\n+// { dg-do compile { target c++11 } }\n+// { dg-options -Wno-pedantic }\n+\n+struct A\n+{\n+  constexpr A() : i(), x() {}\n+  int i;\n+  char x[];\n+};\n+\n+A a;"}]}