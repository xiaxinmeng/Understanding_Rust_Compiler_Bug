{"sha": "da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3ZDkyMTgxOWEzZTJiYTE3ZmQwMWQ5M2ZlZGYxY2Q0ZTJhNTgxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-22T04:18:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-22T04:18:02Z"}, "message": "re PR c++/49172 ([C++0x][constexpr] References should be declarable with constexpr)\n\n\tPR c++/49172\n\t* decl.c (cp_finish_decl): Adjust init_const_expr_p for refs.\n\t(grokdeclarator): constexpr doesn't apply const for refs.\n\t* parser.c (cp_parser_initializer_clause): Don't call\n\tmaybe_constant_value here.\n\t* call.c (initialize_reference): Handle constexpr.\n\nFrom-SVN: r175284", "tree": {"sha": "ec54c4196b5464b246ae415206f98a796fd8bc2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec54c4196b5464b246ae415206f98a796fd8bc2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "584dd700750ea6be613de4ae449726a08169eff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584dd700750ea6be613de4ae449726a08169eff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584dd700750ea6be613de4ae449726a08169eff6"}], "stats": {"total": 113, "additions": 96, "deletions": 17}, "files": [{"sha": "a329733f4e4d6569fa66ac9a16b96e38d76c3998", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -1,5 +1,12 @@\n 2011-06-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49172\n+\t* decl.c (cp_finish_decl): Adjust init_const_expr_p for refs.\n+\t(grokdeclarator): constexpr doesn't apply const for refs.\n+\t* parser.c (cp_parser_initializer_clause): Don't call\n+\tmaybe_constant_value here.\n+\t* call.c (initialize_reference): Handle constexpr.\n+\n \tPR c++/49482\n \t* semantics.c (maybe_add_lambda_conv_op): Call mark_exp_read for\n \tstatic fn parameters."}, {"sha": "dd4dced8d723517dc7f5811e88530bee66148b70", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -8629,6 +8629,8 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n       tree var;\n       tree base_conv_type;\n \n+      gcc_assert (complain == tf_warning_or_error);\n+\n       /* Skip over the REF_BIND.  */\n       conv = conv->u.next;\n       /* If the next conversion is a BASE_CONV, skip that too -- but\n@@ -8646,7 +8648,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n \t\t\t\t/*inner=*/-1,\n \t\t\t\t/*issue_conversion_warnings=*/true,\n \t\t\t\t/*c_cast_p=*/false,\n-\t\t\t\ttf_warning_or_error);\n+\t\t\t\tcomplain);\n       if (error_operand_p (expr))\n \texpr = error_mark_node;\n       else\n@@ -8667,18 +8669,24 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup,\n \t    }\n \t  else\n \t    /* Take the address of EXPR.  */\n-\t    expr = cp_build_addr_expr (expr, tf_warning_or_error);\n+\t    expr = cp_build_addr_expr (expr, complain);\n \t  /* If a BASE_CONV was required, perform it now.  */\n \t  if (base_conv_type)\n \t    expr = (perform_implicit_conversion\n \t\t    (build_pointer_type (base_conv_type), expr,\n-\t\t     tf_warning_or_error));\n+\t\t     complain));\n \t  expr = build_nop (type, expr);\n+\t  if (DECL_DECLARED_CONSTEXPR_P (decl))\n+\t    {\n+\t      expr = cxx_constant_value (expr);\n+\t      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)\n+\t\t= reduced_constant_expression_p (expr);\n+\t    }\n \t}\n     }\n   else\n     /* Perform the conversion.  */\n-    expr = convert_like (conv, expr, tf_warning_or_error);\n+    expr = convert_like (conv, expr, complain);\n \n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);"}, {"sha": "b8435a6ddaa265091113df53a4373037f7ef3b57", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -5987,6 +5987,11 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (init && TREE_CODE (decl) == VAR_DECL)\n     {\n       DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n+      /* If DECL is a reference, then we want to know whether init is a\n+\t reference constant; init_const_expr_p as passed tells us whether\n+\t it's an rvalue constant.  */\n+      if (TREE_CODE (type) == REFERENCE_TYPE)\n+\tinit_const_expr_p = potential_constant_expression (init);\n       if (init_const_expr_p)\n \t{\n \t  /* Set these flags now for templates.  We'll update the flags in\n@@ -9333,8 +9338,11 @@ grokdeclarator (const cp_declarator *declarator,\n         error (\"both %<const%> and %<constexpr%> cannot be used here\");\n       if (type_quals & TYPE_QUAL_VOLATILE)\n         error (\"both %<volatile%> and %<constexpr%> cannot be used here\");\n-      type_quals |= TYPE_QUAL_CONST;\n-      type = cp_build_qualified_type (type, type_quals);\n+      if (TREE_CODE (type) != REFERENCE_TYPE)\n+\t{\n+\t  type_quals |= TYPE_QUAL_CONST;\n+\t  type = cp_build_qualified_type (type, type_quals);\n+\t}\n     }\n \n   if (unqualified_id && TREE_CODE (unqualified_id) == TEMPLATE_ID_EXPR"}, {"sha": "f1b79761b8c742c55970f2076926501fb5ec892c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -16532,16 +16532,6 @@ cp_parser_initializer_clause (cp_parser* parser, bool* non_constant_p)\n \t= cp_parser_constant_expression (parser,\n \t\t\t\t\t/*allow_non_constant_p=*/true,\n \t\t\t\t\tnon_constant_p);\n-      if (!*non_constant_p)\n-\t{\n-\t  /* We only want to fold if this is really a constant\n-\t     expression.  FIXME Actually, we don't want to fold here, but in\n-\t     cp_finish_decl.  */\n-\t  tree folded = fold_non_dependent_expr (initializer);\n-\t  folded = maybe_constant_value (folded);\n-\t  if (TREE_CONSTANT (folded))\n-\t    initializer = folded;\n-\t}\n     }\n   else\n     initializer = cp_parser_braced_list (parser, non_constant_p);"}, {"sha": "fae9f953566acaa9898750273486feee053812e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -1,5 +1,10 @@\n 2011-06-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49172\n+\t* g++.dg/cpp0x/constexpr-ref1.C: New.\n+\t* g++.dg/cpp0x/constexpr-ref2.C: New.\n+\t* g++.dg/cpp0x/constexpr-ice2.C: Remove dg-error tag.\n+\n \tPR c++/49482\n \t* g++.dg/cpp0x/lambda/lambda-warn3.C: New.\n "}, {"sha": "856246fcc95a3552d42ffad4645b7620ae96dcf2", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice2.C?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -1,3 +1,3 @@\n // { dg-options -std=c++0x }\n int x;\n-constexpr int& rx = x; // { dg-error \"int&\" }\n+constexpr int& rx = x;"}, {"sha": "482e1ba3691f5164f282b5adcdd42540c747aaa7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref1.C?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/49172\n+// { dg-options -std=c++0x }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr int g() { return 42; };\n+constexpr int(&rg)() = g; // #1\n+\n+SA(rg() == 42);\n+\n+constexpr int i = 24;\n+constexpr int const& ri = i; // #2\n+\n+SA(&ri == &i);\n+SA(ri == 24);\n+\n+void f()\n+{\n+  constexpr int(&rg)() = g; // #1\n+\n+  SA(rg() == 42);\n+\n+  constexpr static int i = 24;\n+  constexpr int const& ri = i; // #2\n+\n+  SA(&ri == &i);\n+  SA(ri == 24);\n+}\n+\n+template <class T>\n+void f2()\n+{\n+  constexpr int(&rg)() = g; // #1\n+\n+  SA(rg() == 42);\n+\n+  constexpr static int i = 24;\n+  constexpr int const& ri = i; // #2\n+\n+  SA(&ri == &i);\n+  SA(ri == 24);\n+}\n+\n+template void f2<int>();"}, {"sha": "2a86eb765cb2b3aaa09aee419b00d3ee8ac9641a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da7d921819a3e2ba17fd01d93fedf1cd4e2a5819/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref2.C?ref=da7d921819a3e2ba17fd01d93fedf1cd4e2a5819", "patch": "@@ -0,0 +1,17 @@\n+// Negative reference variable tests.\n+// { dg-options -std=c++0x }\n+\n+extern int *p;\n+constexpr int& ri = *p;\t\t// { dg-error \"p\" }\n+\n+extern constexpr int &er;\t// { dg-error \"not a definition\" }\n+constexpr int& ri2 = er;\t// { dg-error \"er\" }\n+\n+void f(int j)\n+{\n+  constexpr int i = 42;\n+  constexpr int const& ri = i;\t// { dg-error \"\" }\n+\n+  constexpr int& rj = j;\t// { dg-error \"\" }\n+}\n+"}]}