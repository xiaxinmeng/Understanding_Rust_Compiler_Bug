{"sha": "3f68457e242692040fd149dae74d522704f7fc81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2ODQ1N2UyNDI2OTIwNDBmZDE0OWRhZTc0ZDUyMjcwNGY3ZmM4MQ==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2004-05-10T20:44:13Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-05-10T20:44:13Z"}, "message": "libjava.exp (libjava_invoke): Add new argument ld_library_additions.\n\n2004-05-10  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* testsuite/lib/libjava.exp (libjava_invoke): Add new argument\n\tld_library_additions. Adjust all calls to libjava_invoke to match\n\tthe new argument.\n\n\t* testsuite/libjava.jni/jni.exp (gcj_jni_test_one): Pass stdc++\n\tpath to cxxflagslist.\n\tPass path of libstdc++ to libjava_invoke.\n\n\t* testsuite/libjava.jar/jar.exp (gcj_jar_inerpret): Adjust\n\tlibjava_invoke arguments.\n\nFrom-SVN: r81679", "tree": {"sha": "37d6a392390fcfb74725e8e9b9b772e4e30a1f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d6a392390fcfb74725e8e9b9b772e4e30a1f2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f68457e242692040fd149dae74d522704f7fc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f68457e242692040fd149dae74d522704f7fc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f68457e242692040fd149dae74d522704f7fc81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f68457e242692040fd149dae74d522704f7fc81/comments", "author": null, "committer": null, "parents": [{"sha": "3358cae044c142e1aafc4c59dbcaba1d1e100cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3358cae044c142e1aafc4c59dbcaba1d1e100cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3358cae044c142e1aafc4c59dbcaba1d1e100cf7"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "5b1edccbbe853f5f0f358e89537239a4dd302d11", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f68457e242692040fd149dae74d522704f7fc81/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f68457e242692040fd149dae74d522704f7fc81/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3f68457e242692040fd149dae74d522704f7fc81", "patch": "@@ -1,3 +1,16 @@\n+2004-05-10  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* testsuite/lib/libjava.exp (libjava_invoke): Add new argument\n+\tld_library_additions. Adjust all calls to libjava_invoke to match\n+\tthe new argument.\n+\n+\t* testsuite/libjava.jni/jni.exp (gcj_jni_test_one): Pass stdc++\n+\tpath to cxxflagslist.\n+\tPass path of libstdc++ to libjava_invoke.\n+\n+\t* testsuite/libjava.jar/jar.exp (gcj_jar_inerpret): Adjust\n+\tlibjava_invoke arguments.\n+\n 2004-05-10  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* testsuite/libjava.jacks/jacks.xfail: Update to reflect the current"}, {"sha": "ad76f8b0412eadbbca5de853115e8dccfc795369", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=3f68457e242692040fd149dae74d522704f7fc81", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation\n+# Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation\n \n load_lib \"libgloss.exp\"\n \n@@ -495,7 +495,21 @@ proc gcj_invoke {program expectFile ld_library_additions} {\n # Invoke a program and check its output.  EXECUTABLE is the program;\n # ARGS are the arguments to the program.  Returns 1 if tests passed\n # (or things were left untested), 0 otherwise.\n-proc libjava_invoke {errname testName optName executable inpfile resultfile args} {\n+proc libjava_invoke {errname testName optName executable inpfile resultfile\n+\t\t      ld_library_additions args} {\n+    global env\n+    set lib_path $env(LD_LIBRARY_PATH)\n+\n+    set newval .\n+    if {[llength $ld_library_additions] > 0} {\n+\tappend newval :[join $ld_library_additions :]\n+    }\n+\n+    append newval :$lib_path\n+\n+    setenv LD_LIBRARY_PATH $newval\n+\n+    verbose \"LD_LIBRARY_PATH=$env(LD_LIBRARY_PATH)\"\n     upvar $optName opts\n \n     if {[info exists opts(no-exec)]} {\n@@ -512,6 +526,10 @@ proc libjava_invoke {errname testName optName executable inpfile resultfile args\n     set result [libjava_load $executable $args \"$inpfile\"]\n     set status [lindex $result 0]\n     set output [lindex $result 1]\n+\n+    # Restore LD_LIBRARY_PATH setting.\n+    setenv LD_LIBRARY_PATH $lib_path\n+\n     if {[info exists opts(xfail-exec)]} then {\n \tsetup_xfail *-*-*\n     }\n@@ -658,7 +676,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \tset opts(xfail-output) x\n     }\n     if {[libjava_invoke $errname \"source compiled test\" opts $executable \\\n-\t   $inpfile $resultfile]} {\n+\t   $inpfile $resultfile \"\"]} {\n \t# Everything ok, so clean up.\n \teval gcj_cleanup $removeList\n     }\n@@ -796,7 +814,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     # program; in this case we want to skip the test.\n     if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n \tlibjava_invoke $errname \"gij test\" opts $gij \\\n-\t  $inpfile $resultfile $main_name\n+\t  $inpfile $resultfile \"\" $main_name\n     }\n \n     # Initial arguments.\n@@ -859,7 +877,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tset opts(xfail-output) x\n     }\n     if {[libjava_invoke $errname \"bytecode->native test\" opts $executable \\\n-\t   $inpfile $resultfile]} {\n+\t   $inpfile $resultfile \"\"]} {\n \t# Everything ok, so clean up.\n \teval gcj_cleanup $removeList\n     }"}, {"sha": "7f4c792c25d1f06622bbd8bda766211442fda539", "filename": "libjava/testsuite/libjava.jar/jar.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jar%2Fjar.exp?ref=3f68457e242692040fd149dae74d522704f7fc81", "patch": "@@ -31,7 +31,7 @@ proc gcj_jar_interpret {jarfile} {\n   set opts(_) {}\n   set out [file rootname $jarfile].out\n   libjava_invoke $jarfile \"gij test\" opts $gij {} $out \\\n-    -jar $jarfile\n+      \"\" -jar $jarfile\n }\n \n proc gcj_jar_run {} {"}, {"sha": "b1f6d4e34f46e8b01c32d9378f528dbb90e03149", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f68457e242692040fd149dae74d522704f7fc81/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=3f68457e242692040fd149dae74d522704f7fc81", "patch": "@@ -126,6 +126,9 @@ proc gcj_jni_test_one {file} {\n \t}\n       }\n       lappend cxxflaglist $arg\n+      # In case the libstdc++ is not installed yet, we pass the build\n+      # directory of it to the cxxflaglist.\n+      lappend cxxflaglist \"-L$cxxldlibflags\"\n     }\n \n     lappend cxxflaglist \"-lstdc++\"\n@@ -149,17 +152,19 @@ proc gcj_jni_test_one {file} {\n     # FIXME\n     return 0\n   }\n-  \n+\n   # We purposely ignore errors here; we still want to run the other\n   # appropriate tests.\n   set errname [file rootname [file tail $file]]\n   set gij [libjava_find_gij]\n   # libjava_find_gij will return `gij' if it couldn't find the\n   # program; in this case we want to skip the test.\n-  if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n-      libjava_invoke $errname \"gij test\" opts $gij \\\n-\t\"\" $resultfile $main\n-  }  \n+  # If the libraries are not installed yet, we have to pass them via\n+  # cxxldlibflags to libjava_invoke.\n+    if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n+\tlibjava_invoke $errname \"gij test\" opts $gij \\\n+\t    \"\" $resultfile $cxxldlibflags $main\n+  }\n \n   # When we succeed we remove all our clutter.\n   eval gcj_cleanup [glob -nocomplain -- ${main}.*] [list $main lib${main}.${so_extension}]"}]}