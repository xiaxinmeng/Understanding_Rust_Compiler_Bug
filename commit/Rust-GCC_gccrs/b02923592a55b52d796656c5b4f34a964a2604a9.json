{"sha": "b02923592a55b52d796656c5b4f34a964a2604a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyOTIzNTkyYTU1YjUyZDc5NjY1NmM1YjRmMzRhOTY0YTI2MDRhOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-21T17:18:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-21T17:18:35Z"}, "message": "Add support for opening file streams from wide character strings\n\nC++17 added new overloads to <fstream> class templates to support\nopening files from wide character strings \"on systems where\nfilesystem::path::value_type is not char\". This patch adds those\noverloads conditional on _wfopen being available, and enables them for\npre-C++17 modes as well.\n\n\tAdd support for opening file streams from wide character strings.\n\t* config/io/basic_file_stdio.cc [_GLIBCXX_HAVE__WFOPEN]\n\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n\tDefine new overload.\n\t* config/io/basic_file_stdio.h [_GLIBCXX_HAVE__WFOPEN]\n\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n\tDeclare new overload.\n\t* configure.ac: Check for _wfopen.\n\t* crossconfig.m4: Likewise.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* include/bits/fstream.tcc [_GLIBCXX_HAVE__WFOPEN]\n\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n\tDefine new overload.\n\t* include/std/fstream [_GLIBCXX_HAVE__WFOPEN]\n\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n\tDeclare new overload.\n\t[_GLIBCXX_HAVE__WFOPEN]\n\t(basic_ifstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n\t(basic_ifstream<C,T>::basic_open(const wchar_t*, openmode))\n\t(basic_ofstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n\t(basic_ofstream<C,T>::basic_open(const wchar_t*, openmode))\n\t(basic_fstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n\t(basic_fstream<C,T>::basic_open(const wchar_t*, openmode)): Define\n\tnew overloads.\n\t* testsuite/27_io/basic_filebuf/open/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_ifstream/open/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_ofstream/open/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_fstream/cons/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_fstream/open/wchar_t/1.cc: New.\n\nFrom-SVN: r260479", "tree": {"sha": "7bdd183950fb53880788391cae759a291b699c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bdd183950fb53880788391cae759a291b699c35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b02923592a55b52d796656c5b4f34a964a2604a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02923592a55b52d796656c5b4f34a964a2604a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02923592a55b52d796656c5b4f34a964a2604a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02923592a55b52d796656c5b4f34a964a2604a9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b6d2d3bbf13d0d48128f381d1092d4c36d356c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6d2d3bbf13d0d48128f381d1092d4c36d356c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b6d2d3bbf13d0d48128f381d1092d4c36d356c2"}], "stats": {"total": 685, "additions": 685, "deletions": 0}, "files": [{"sha": "9ca6ec6c1c0ce4272b03a8df10756810201660ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -1,3 +1,38 @@\n+2018-05-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tAdd support for opening file streams from wide character strings.\n+\t* config/io/basic_file_stdio.cc [_GLIBCXX_HAVE__WFOPEN]\n+\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n+\tDefine new overload.\n+\t* config/io/basic_file_stdio.h [_GLIBCXX_HAVE__WFOPEN]\n+\t(__basic_file<char>::open(const wchar_t*, ios_base::openmode)):\n+\tDeclare new overload.\n+\t* configure.ac: Check for _wfopen.\n+\t* crossconfig.m4: Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* include/bits/fstream.tcc [_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n+\tDefine new overload.\n+\t* include/std/fstream [_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_filebuf<C,T>::open(const wchar_t*, ios_base::openmode)):\n+\tDeclare new overload.\n+\t[_GLIBCXX_HAVE__WFOPEN]\n+\t(basic_ifstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_ifstream<C,T>::basic_open(const wchar_t*, openmode))\n+\t(basic_ofstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_ofstream<C,T>::basic_open(const wchar_t*, openmode))\n+\t(basic_fstream<C,T>::basic_ifstream(const wchar_t*, openmode))\n+\t(basic_fstream<C,T>::basic_open(const wchar_t*, openmode)): Define\n+\tnew overloads.\n+\t* testsuite/27_io/basic_filebuf/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ifstream/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_ofstream/open/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_fstream/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_fstream/open/wchar_t/1.cc: New.\n+\n 2018-05-21  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/85845"}, {"sha": "751857800b84a7299704d51acec1674218db9f0d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -706,6 +706,9 @@\n /* Define to 1 if you have the `_tanl' function. */\n #undef HAVE__TANL\n \n+/* Define to 1 if you have the `_wfopen' function. */\n+#undef HAVE__WFOPEN\n+\n /* Define to 1 if you have the `__cxa_thread_atexit' function. */\n #undef HAVE___CXA_THREAD_ATEXIT\n "}, {"sha": "09ccd6a47882e38107918299a2b14f8dd2593d0b", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -249,6 +249,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __ret;\n   }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+  __basic_file<char>*\n+  __basic_file<char>::open(const wchar_t* __name, ios_base::openmode __mode)\n+  {\n+    __basic_file* __ret = NULL;\n+    const char* __c_mode = fopen_mode(__mode);\n+    if (__c_mode && !this->is_open())\n+      {\n+\twchar_t __wc_mode[4] = { };\n+\tint __i = 0;\n+\tdo\n+\t  {\n+\t    switch(__c_mode[__i]) {\n+\t    case 'a': __wc_mode[__i] = L'a'; break;\n+\t    case 'b': __wc_mode[__i] = L'b'; break;\n+\t    case 'r': __wc_mode[__i] = L'r'; break;\n+\t    case 'w': __wc_mode[__i] = L'w'; break;\n+\t    case '+': __wc_mode[__i] = L'+'; break;\n+\t    default: return __ret;\n+\t    }\n+\t  }\n+\twhile (__c_mode[++__i]);\n+\n+\tif ((_M_cfile = _wfopen(__name, __wc_mode)))\n+\t  {\n+\t    _M_cfile_created = true;\n+\t    __ret = this;\n+\t  }\n+      }\n+    return __ret;\n+  }\n+#endif\n+\n   bool\n   __basic_file<char>::is_open() const throw ()\n   { return _M_cfile != 0; }"}, {"sha": "3c857272c57d51a3164d94f4894d5fef43351fec", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -84,6 +84,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __basic_file*\n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      __basic_file*\n+      open(const wchar_t* __name, ios_base::openmode __mode);\n+#endif\n+\n       __basic_file*\n       sys_open(__c_file* __file, ios_base::openmode);\n "}, {"sha": "f3522ee66660c1c6321fe12656a9af1044b50106", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -28127,6 +28127,17 @@ eval as_val=\\$$as_ac_var\n #define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n _ACEOF\n \n+fi\n+done\n+\n+  for ac_func in _wfopen\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"_wfopen\" \"ac_cv_func__wfopen\"\n+if test \"x$ac_cv_func__wfopen\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE__WFOPEN 1\n+_ACEOF\n+\n fi\n done\n \n@@ -66122,6 +66133,17 @@ eval as_val=\\$$as_ac_var\n #define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n _ACEOF\n \n+fi\n+done\n+\n+    for ac_func in _wfopen\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"_wfopen\" \"ac_cv_func__wfopen\"\n+if test \"x$ac_cv_func__wfopen\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE__WFOPEN 1\n+_ACEOF\n+\n fi\n done\n "}, {"sha": "7e1fd84606a6ee25c195408379a97acf9fa728c2", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -263,6 +263,7 @@ if $GLIBCXX_IS_NATIVE; then\n \n   AC_CHECK_FUNCS(__cxa_thread_atexit_impl __cxa_thread_atexit)\n   AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n+  AC_CHECK_FUNCS(_wfopen)\n \n   # For iconv support.\n   AM_ICONV"}, {"sha": "f0a55c684045df3f5c3927e99de1cc446e9b358a", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -199,6 +199,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n+    AC_CHECK_FUNCS(_wfopen)\n     ;;\n   *-netbsd*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'"}, {"sha": "6205db75340b0fdffb3a00dc649b088b35514685", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -207,6 +207,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __ret;\n     }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+  template<typename _CharT, typename _Traits>\n+    basic_filebuf<_CharT, _Traits>*\n+    basic_filebuf<_CharT, _Traits>::\n+    open(const wchar_t* __s, ios_base::openmode __mode)\n+    {\n+      __filebuf_type *__ret = 0;\n+      if (!this->is_open())\n+\t{\n+\t  _M_file.open(__s, __mode);\n+\t  if (this->is_open())\n+\t    {\n+\t      _M_allocate_internal_buffer();\n+\t      _M_mode = __mode;\n+\n+\t      // Setup initial buffer to 'uncommitted' mode.\n+\t      _M_reading = false;\n+\t      _M_writing = false;\n+\t      _M_set_buffer(-1);\n+\n+\t      // Reset to initial state.\n+\t      _M_state_last = _M_state_cur = _M_state_beg;\n+\n+\t      // 27.8.1.3,4\n+\t      if ((__mode & ios_base::ate)\n+\t\t  && this->seekoff(0, ios_base::end, __mode)\n+\t\t  == pos_type(off_type(-1)))\n+\t\tthis->close();\n+\t      else\n+\t\t__ret = this;\n+\t    }\n+\t}\n+      return __ret;\n+    }\n+#endif // HAVE__WFOPEN && USE_WCHAR_T\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type*\n     basic_filebuf<_CharT, _Traits>::"}, {"sha": "795209dd8dd639592540856410c2909fb5d0fbcc", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -309,6 +309,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __filebuf_type*\n       open(const char* __s, ios_base::openmode __mode);\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a wide character string.\n+       *  @param  __mode  The open mode flags.\n+       *  @return  @c this on success, NULL on failure\n+       */\n+      __filebuf_type*\n+      open(const wchar_t* __s, ios_base::openmode __mode);\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n@@ -522,6 +533,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @param  Create an input file stream.\n+       *  @param  __s  Wide string specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::in is automatically included in @a __mode.\n+       */\n+      basic_ifstream(const wchar_t* __s,\n+\t\t     ios_base::openmode __mode = ios_base::in)\n+      : __istream_type(), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an input file stream.\n@@ -637,6 +665,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a wide character string.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode|in).  If that function\n+       *  fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const wchar_t* __s, ios_base::openmode __mode = ios_base::in)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode | ios_base::in))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  this->clear();\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n@@ -748,6 +795,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @param  Create an output file stream.\n+       *  @param  __s  Wide string specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n+       *  @a __mode.\n+       */\n+      basic_ofstream(const wchar_t* __s,\n+\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n+      : __ostream_type(), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an output file stream.\n@@ -863,6 +928,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode|out).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const wchar_t* __s, ios_base::openmode __mode = ios_base::out)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  this->clear();\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file.\n@@ -974,6 +1058,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @param  Create an input/output file stream.\n+       *  @param  __s  Wide string specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       */\n+      basic_fstream(const wchar_t* __s,\n+\t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      : __iostream_type(0), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Create an input/output file stream.\n@@ -1086,6 +1185,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->clear();\n       }\n \n+#if _GLIBCXX_HAVE__WFOPEN && _GLIBCXX_USE_WCHAR_T\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const wchar_t* __s,\n+\t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  this->clear();\n+      }\n+#endif\n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Opens an external file."}, {"sha": "a6f33548172b9c520e064d4c6e89c54fb0afdd42", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/wchar_t/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-mingw* } }\n+// { dg-require-fileio \"\" }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const wchar_t name_01[] = L\"filebuf_members-1.tst\";\n+const wchar_t name_02[] = L\"filebuf_members-1.txt\";\n+\n+// Test member functions.\n+void test01()\n+{\n+  const wchar_t* name_03 = L\"filebuf_members-w3\"; // empty file, need to create\n+\n+  std::filebuf fb_01; // in\n+  std::filebuf fb_02; // out\n+  std::filebuf fb_03; // in | out\n+\n+  // bool is_open()\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n+\n+  // filebuf_type* open(const wchar_t* __s, ios_base::openmode __mode)\n+  fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n+  VERIFY( fb_01.is_open() );\n+\n+  // Try to open two different files without closing the first:\n+  // Should keep the old file attached, and disregard attempt to overthrow.\n+  std::filebuf* f = fb_02.open(name_02, std::ios_base::in | std::ios_base::out\n+\t\t\t       | std::ios_base::trunc);\n+  VERIFY( f );\n+  VERIFY( fb_02.is_open() );\n+\n+  f = fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n+  VERIFY( !f );\n+  VERIFY( fb_02.is_open() );\n+\n+  fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n+  VERIFY( fb_03.is_open() );\n+}\n+\n+void test02()\n+{\n+  std::wfilebuf fb;\n+  fb.open(name_01, std::wios::in);\n+  VERIFY( fb.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "0d14f825c63de381ab7fe39baf8501ce6f7f07f9", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/wchar_t/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  const wchar_t* name = L\"fstream_name.txt\";\n+  std::fstream fs(name, std::wios::out);\n+  VERIFY( fs.is_open() );\n+}\n+\n+void test02()\n+{\n+  const wchar_t name[] = L\"fstream_name.txt\";\n+  std::wfstream wfs(name, std::wios::in|std::wios::out);\n+  VERIFY( wfs.is_open() );\n+}\n+\n+#if __cplusplus >= 201103L\n+using std::is_constructible;\n+using std::fstream;\n+using std::wfstream;\n+using std::ios;\n+static_assert(is_constructible<fstream, const wchar_t*>::value);\n+static_assert(is_constructible<fstream, wchar_t*>::value);\n+static_assert(is_constructible<fstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<fstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<fstream, const wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<fstream, wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<fstream, const wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<fstream, wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<wfstream, const wchar_t*>::value);\n+static_assert(is_constructible<wfstream, wchar_t*>::value);\n+static_assert(is_constructible<wfstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wfstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wfstream, const wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<wfstream, wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<wfstream, const wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<wfstream, wchar_t(&)[1], ios::openmode>::value);\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "cd47292d793652d5de51a2e417a830aecad854b9", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/open/wchar_t/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  std::fstream fs;\n+\n+  const wchar_t* name = L\"fstream_name.txt\";\n+  fs.open(name, std::wios::out);\n+  VERIFY( fs.is_open() );\n+}\n+\n+void test02()\n+{\n+  const wchar_t name[] = L\"fstream_name.txt\";\n+  std::wfstream wfs;\n+  wfs.open(name, std::wios::in|std::wios::out);\n+  VERIFY( wfs.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "7437cff60a528ecc2b2fc81d8a721ae3cd7165da", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/wchar_t/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  const wchar_t* name = L\"ifstream_members-1.txt\";\n+  std::ifstream ifs(name);\n+  VERIFY( ifs.is_open() );\n+}\n+\n+void test02()\n+{\n+  const wchar_t name[] = L\"ifstream_members-1.txt\";\n+  std::wifstream wifs(name, std::wios::in);\n+  VERIFY( wifs.is_open() );\n+}\n+\n+#if __cplusplus >= 201103L\n+using std::is_constructible;\n+using std::ifstream;\n+using std::wifstream;\n+using std::ios;\n+using std::wios;\n+static_assert(is_constructible<ifstream, const wchar_t*>::value);\n+static_assert(is_constructible<ifstream, wchar_t*>::value);\n+static_assert(is_constructible<ifstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<ifstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<ifstream, const wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<ifstream, wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<ifstream, const wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<ifstream, wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<wifstream, const wchar_t*>::value);\n+static_assert(is_constructible<wifstream, wchar_t*>::value);\n+static_assert(is_constructible<wifstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wifstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wifstream, const wchar_t*, wios::openmode>::value);\n+static_assert(is_constructible<wifstream, wchar_t*, wios::openmode>::value);\n+static_assert(is_constructible<wifstream, const wchar_t(&)[1], wios::openmode>::value);\n+static_assert(is_constructible<wifstream, wchar_t(&)[1], wios::openmode>::value);\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e2366973924813681feb75a25fc4d207555b6f38", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/open/wchar_t/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 30.9.3.1 basic_ifstream constructors [ifstream.cons]\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const wchar_t name_01[] = L\"ifstream_members-1.tst\";\n+\n+void test01()\n+{\n+  std::ifstream ifs1;\n+  ifs1.close();\n+\n+  VERIFY( !ifs1.is_open() );\n+  VERIFY( !(ifs1) );\n+\n+  ifs1.open(name_01);\n+  VERIFY( ifs1.is_open() );\n+\n+  VERIFY( (ifs1) );\n+  VERIFY( ifs1.rdstate() == std::ios_base::goodbit );\n+\n+  ifs1.close();\n+}\n+\n+void test02()\n+{\n+  std::wifstream wifs1;\n+  wifs1.open(name_01, std::wios::in);\n+  VERIFY( wifs1.is_open() );\n+\n+  VERIFY( (wifs1) );\n+  VERIFY( wifs1.rdstate() == std::ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "ae9893e2413ccecd8f239fe222c22c2366f1e7dd", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/wchar_t/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  const wchar_t* name = L\"ofstream_name.txt\";\n+  std::ofstream ofs(name);\n+  VERIFY( ofs.is_open() );\n+}\n+\n+void test02()\n+{\n+  const wchar_t name[] = L\"ofstream_name.txt\";\n+  std::wofstream wofs(name, std::wios::out);\n+  VERIFY( wofs.is_open() );\n+}\n+\n+#if __cplusplus >= 201103L\n+using std::is_constructible;\n+using std::ofstream;\n+using std::wofstream;\n+using std::ios;\n+using std::wios;\n+static_assert(is_constructible<ofstream, const wchar_t*>::value);\n+static_assert(is_constructible<ofstream, wchar_t*>::value);\n+static_assert(is_constructible<ofstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<ofstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<ofstream, const wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<ofstream, wchar_t*, ios::openmode>::value);\n+static_assert(is_constructible<ofstream, const wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<ofstream, wchar_t(&)[1], ios::openmode>::value);\n+static_assert(is_constructible<wofstream, const wchar_t*>::value);\n+static_assert(is_constructible<wofstream, wchar_t*>::value);\n+static_assert(is_constructible<wofstream, const wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wofstream, wchar_t(&)[1]>::value);\n+static_assert(is_constructible<wofstream, const wchar_t*, wios::openmode>::value);\n+static_assert(is_constructible<wofstream, wchar_t*, wios::openmode>::value);\n+static_assert(is_constructible<wofstream, const wchar_t(&)[1], wios::openmode>::value);\n+static_assert(is_constructible<wofstream, wchar_t(&)[1], wios::openmode>::value);\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e024a27b89c10c7c5585cdf4817fbf91492f6e7e", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02923592a55b52d796656c5b4f34a964a2604a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2F1.cc?ref=b02923592a55b52d796656c5b4f34a964a2604a9", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 30.9.4.1 basic_ofstream constructors [ofstream.cons]\n+\n+// { dg-do run { target *-*-mingw* } }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const wchar_t name_02[] = L\"ofstream_members-1.txt\";\n+\n+void test01()\n+{\n+  std::ofstream ofs1;\n+  ofs1.close();\n+\n+  VERIFY( !ofs1.is_open() );\n+  VERIFY( !(ofs1) );\n+\n+  ofs1.open(name_02);\n+  VERIFY( ofs1.is_open() );\n+\n+  VERIFY( (ofs1) );\n+  VERIFY( ofs1.rdstate() == std::ios_base::goodbit );\n+\n+  ofs1.close();\n+}\n+\n+void test02()\n+{\n+  std::wofstream wofs1;\n+  wofs1.open(name_02, std::wios::out);\n+  VERIFY( wofs1.is_open() );\n+\n+  VERIFY( (wofs1) );\n+  VERIFY( wofs1.rdstate() == std::ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}