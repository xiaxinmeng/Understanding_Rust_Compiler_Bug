{"sha": "9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2YWU2NTM5MTAyZWMxY2Y0YWFkYWY1ZmMzMzNhNDZhZTg4OTQ0MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T19:38:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T19:38:41Z"}, "message": "config/tilegx: Use rtx_insn\n\ngcc/\n\t* config/tilegx/tilegx-protos.h (tilegx_output_cbranch_with_opcode):\n\tStrengthen param 1 from rtx to rtx_insn *.\n\t(tilegx_output_cbranch): Likewise.\n\t(tilegx_adjust_insn_length): Likewise.\n\t(tilegx_final_prescan_insn): Likewise for sole param.\n\n\t* config/tilegx/tilegx.c (tilegx_legitimize_tls_address): Likewise\n\tor local \"last\".\n\t(cbranch_predicted_p): Likewise for param \"insn\".\n\t(tilegx_output_simple_cbranch_with_opcode): Likewise.\n\t(tilegx_output_cbranch_with_opcode): Likewise.\n\t(tilegx_output_cbranch): Likewise.\n\t(frame_emit_load): Likewise for return type.\n\t(set_frame_related_p): Likewise for locals \"seq\", \"insn\".\n\t(emit_sp_adjust): Likewise for return type, and for local \"insn\".\n\tIntroduce local \"pat\" for use in place of \"insn\" where the latter\n\tisn't an instruction.\n\t(tilegx_expand_epilogue): Strengthen locals \"last_insn\", \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(tilegx_adjust_insn_length): Likewise for param \"insn\".\n\t(next_insn_to_bundle): Likewise for return type and params \"r\" and\n\t\"end\".\n\t(tilegx_gen_bundles): Likewise for locals \"insn\", \"next\", \"prev\",\n\t\"end\".\n\t(replace_insns): Likewise for params \"old_insn\", \"new_insns\".\n\t(replace_mov_pcrel_step1): Likewise for param \"insn\" and local\n\t\"new_insns\".\n\t(replace_mov_pcrel_step2): Likewise.\n\t(replace_mov_pcrel_step3): Likewise.\n\t(tilegx_fixup_pcrel_references): Likewise for locals \"insn\",\n\t\"next_insn\".\n\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n\t\"queue\", \"next_queue\", \"prev\".\n\t(tilegx_output_mi_thunk): Likewise for local \"insn\".\n\t(tilegx_final_prescan_insn): Likewise for param \"insn\".\n\nFrom-SVN: r214464", "tree": {"sha": "651a385e10209427e5dae4fe926e16475595751c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651a385e10209427e5dae4fe926e16475595751c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23c39aaa85b6d09b36b639fa98a2c46b229120eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c39aaa85b6d09b36b639fa98a2c46b229120eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c39aaa85b6d09b36b639fa98a2c46b229120eb"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "22de79a03cdafd73b3cbc1841432aa018f44d744", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "patch": "@@ -1,3 +1,41 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/tilegx/tilegx-protos.h (tilegx_output_cbranch_with_opcode):\n+\tStrengthen param 1 from rtx to rtx_insn *.\n+\t(tilegx_output_cbranch): Likewise.\n+\t(tilegx_adjust_insn_length): Likewise.\n+\t(tilegx_final_prescan_insn): Likewise for sole param.\n+\n+\t* config/tilegx/tilegx.c (tilegx_legitimize_tls_address): Likewise\n+\tor local \"last\".\n+\t(cbranch_predicted_p): Likewise for param \"insn\".\n+\t(tilegx_output_simple_cbranch_with_opcode): Likewise.\n+\t(tilegx_output_cbranch_with_opcode): Likewise.\n+\t(tilegx_output_cbranch): Likewise.\n+\t(frame_emit_load): Likewise for return type.\n+\t(set_frame_related_p): Likewise for locals \"seq\", \"insn\".\n+\t(emit_sp_adjust): Likewise for return type, and for local \"insn\".\n+\tIntroduce local \"pat\" for use in place of \"insn\" where the latter\n+\tisn't an instruction.\n+\t(tilegx_expand_epilogue): Strengthen locals \"last_insn\", \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(tilegx_adjust_insn_length): Likewise for param \"insn\".\n+\t(next_insn_to_bundle): Likewise for return type and params \"r\" and\n+\t\"end\".\n+\t(tilegx_gen_bundles): Likewise for locals \"insn\", \"next\", \"prev\",\n+\t\"end\".\n+\t(replace_insns): Likewise for params \"old_insn\", \"new_insns\".\n+\t(replace_mov_pcrel_step1): Likewise for param \"insn\" and local\n+\t\"new_insns\".\n+\t(replace_mov_pcrel_step2): Likewise.\n+\t(replace_mov_pcrel_step3): Likewise.\n+\t(tilegx_fixup_pcrel_references): Likewise for locals \"insn\",\n+\t\"next_insn\".\n+\t(reorder_var_tracking_notes): Likewise for locals \"insn\", \"next\",\n+\t\"queue\", \"next_queue\", \"prev\".\n+\t(tilegx_output_mi_thunk): Likewise for local \"insn\".\n+\t(tilegx_final_prescan_insn): Likewise for param \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/spu/spu.c (frame_emit_store): Strengthen return type from"}, {"sha": "a41cf4af1de05152c29b415c718d21c84a677d7c", "filename": "gcc/config/tilegx/tilegx-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2Fconfig%2Ftilegx%2Ftilegx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2Fconfig%2Ftilegx%2Ftilegx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx-protos.h?ref=9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "patch": "@@ -42,10 +42,10 @@ extern void tilegx_expand_umuldi3_highpart (rtx, rtx, rtx);\n extern bool tilegx_emit_setcc (rtx[], enum machine_mode);\n extern void tilegx_emit_conditional_branch (rtx[], enum machine_mode);\n extern rtx tilegx_emit_conditional_move (rtx);\n-extern const char *tilegx_output_cbranch_with_opcode (rtx, rtx *,\n+extern const char *tilegx_output_cbranch_with_opcode (rtx_insn *, rtx *,\n \t\t\t\t\t\t      const char *,\n \t\t\t\t\t\t      const char *, int);\n-extern const char *tilegx_output_cbranch (rtx, rtx *, bool);\n+extern const char *tilegx_output_cbranch (rtx_insn *, rtx *, bool);\n extern void tilegx_expand_tablejump (rtx, rtx);\n extern void tilegx_expand_builtin_vector_binop (rtx (*)(rtx, rtx, rtx),\n \t\t\t\t\t\tenum machine_mode, rtx,\n@@ -61,10 +61,10 @@ extern void tilegx_expand_epilogue (bool);\n extern int tilegx_initial_elimination_offset (int, int);\n extern rtx tilegx_return_addr (int, rtx);\n extern rtx tilegx_eh_return_handler_rtx (void);\n-extern int tilegx_adjust_insn_length (rtx, int);\n+extern int tilegx_adjust_insn_length (rtx_insn *, int);\n \n extern int tilegx_asm_preferred_eh_data_format (int, int);\n-extern void tilegx_final_prescan_insn (rtx);\n+extern void tilegx_final_prescan_insn (rtx_insn *);\n extern const char *tilegx_asm_output_opcode (FILE *, const char *);\n extern void tilegx_function_profiler (FILE *, int);\n "}, {"sha": "c220622b32bc899aa885c21b2ca18dd441473bad", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6ae6539102ec1cf4aadaf5fc333a46ae889440/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=9c6ae6539102ec1cf4aadaf5fc333a46ae889440", "patch": "@@ -1041,7 +1041,8 @@ tilegx_legitimize_tls_address (rtx addr)\n \t}\n       case TLS_MODEL_INITIAL_EXEC:\n \t{\n-\t  rtx temp, temp2, temp3, got, last;\n+\t  rtx temp, temp2, temp3, got;\n+\t  rtx_insn *last;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  temp = gen_reg_rtx (Pmode);\n@@ -1075,7 +1076,8 @@ tilegx_legitimize_tls_address (rtx addr)\n \t}\n       case TLS_MODEL_LOCAL_EXEC:\n \t{\n-\t  rtx temp, temp2, last;\n+\t  rtx temp, temp2;\n+\t  rtx_insn *last;\n \n \t  ret = gen_reg_rtx (Pmode);\n \t  temp = gen_reg_rtx (Pmode);\n@@ -2619,7 +2621,7 @@ tilegx_emit_conditional_move (rtx cmp)\n /* Return true if INSN is annotated with a REG_BR_PROB note that\n    indicates it's a branch that's predicted taken.  */\n static bool\n-cbranch_predicted_p (rtx insn)\n+cbranch_predicted_p (rtx_insn *insn)\n {\n   rtx x = find_reg_note (insn, REG_BR_PROB, 0);\n \n@@ -2637,7 +2639,7 @@ cbranch_predicted_p (rtx insn)\n /* Output assembly code for a specific branch instruction, appending\n    the branch prediction flag to the opcode if appropriate.  */\n static const char *\n-tilegx_output_simple_cbranch_with_opcode (rtx insn, const char *opcode,\n+tilegx_output_simple_cbranch_with_opcode (rtx_insn *insn, const char *opcode,\n \t\t\t\t\t  int regop, bool reverse_predicted)\n {\n   static char buf[64];\n@@ -2651,7 +2653,7 @@ tilegx_output_simple_cbranch_with_opcode (rtx insn, const char *opcode,\n /* Output assembly code for a specific branch instruction, appending\n    the branch prediction flag to the opcode if appropriate.  */\n const char *\n-tilegx_output_cbranch_with_opcode (rtx insn, rtx *operands,\n+tilegx_output_cbranch_with_opcode (rtx_insn *insn, rtx *operands,\n \t\t\t\t   const char *opcode,\n \t\t\t\t   const char *rev_opcode, int regop)\n {\n@@ -2699,7 +2701,7 @@ tilegx_output_cbranch_with_opcode (rtx insn, rtx *operands,\n \n /* Output assembly code for a conditional branch instruction.  */\n const char *\n-tilegx_output_cbranch (rtx insn, rtx *operands, bool reversed)\n+tilegx_output_cbranch (rtx_insn *insn, rtx *operands, bool reversed)\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n   const char *opcode;\n@@ -3757,7 +3759,7 @@ frame_emit_store (int regno, int regno_note, rtx addr, rtx cfa,\n /* Emit a load in the stack frame to load REGNO from address ADDR.\n    Add a REG_CFA_RESTORE note to CFA_RESTORES if CFA_RESTORES is\n    non-null.  Return the emitted insn.  */\n-static rtx\n+static rtx_insn *\n frame_emit_load (int regno, rtx addr, rtx *cfa_restores)\n {\n   rtx reg = gen_rtx_REG (DImode, regno);\n@@ -3773,8 +3775,8 @@ frame_emit_load (int regno, rtx addr, rtx *cfa_restores)\n static rtx\n set_frame_related_p (void)\n {\n-  rtx seq = get_insns ();\n-  rtx insn;\n+  rtx_insn *seq = get_insns ();\n+  rtx_insn *insn;\n \n   end_sequence ();\n \n@@ -3810,14 +3812,15 @@ set_frame_related_p (void)\n    large register and using 'add'.\n \n    This happens after reload, so we need to expand it ourselves.  */\n-static rtx\n+static rtx_insn *\n emit_sp_adjust (int offset, int *next_scratch_regno, bool frame_related,\n \t\trtx reg_notes)\n {\n   rtx to_add;\n   rtx imm_rtx = GEN_INT (offset);\n+  rtx pat;\n+  rtx_insn *insn;\n \n-  rtx insn;\n   if (satisfies_constraint_J (imm_rtx))\n     {\n       /* We can add this using a single immediate add.  */\n@@ -3832,11 +3835,11 @@ emit_sp_adjust (int offset, int *next_scratch_regno, bool frame_related,\n \n   /* Actually adjust the stack pointer.  */\n   if (TARGET_32BIT)\n-    insn = gen_sp_adjust_32bit (stack_pointer_rtx, stack_pointer_rtx, to_add);\n+    pat = gen_sp_adjust_32bit (stack_pointer_rtx, stack_pointer_rtx, to_add);\n   else\n-    insn = gen_sp_adjust (stack_pointer_rtx, stack_pointer_rtx, to_add);\n+    pat = gen_sp_adjust (stack_pointer_rtx, stack_pointer_rtx, to_add);\n \n-  insn = emit_insn (insn);\n+  insn = emit_insn (pat);\n   REG_NOTES (insn) = reg_notes;\n \n   /* Describe what just happened in a way that dwarf understands.  */\n@@ -4148,7 +4151,7 @@ tilegx_expand_epilogue (bool sibcall_p)\n   rtx reg_save_addr[ROUND_ROBIN_SIZE] = {\n     NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX\n   };\n-  rtx last_insn, insn;\n+  rtx_insn *last_insn, *insn;\n   unsigned int which_scratch;\n   int offset, start_offset, regno;\n   rtx cfa_restores = NULL_RTX;\n@@ -4381,7 +4384,7 @@ tilegx_frame_pointer_required (void)\n    by attributes in the machine-description file.  This is where we\n    account for bundles.  */\n int\n-tilegx_adjust_insn_length (rtx insn, int length)\n+tilegx_adjust_insn_length (rtx_insn *insn, int length)\n {\n   enum machine_mode mode = GET_MODE (insn);\n \n@@ -4446,8 +4449,8 @@ tilegx_sched_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \n /* Skip over irrelevant NOTEs and such and look for the next insn we\n    would consider bundling.  */\n-static rtx\n-next_insn_to_bundle (rtx r, rtx end)\n+static rtx_insn *\n+next_insn_to_bundle (rtx_insn *r, rtx_insn *end)\n {\n   for (; r != end; r = NEXT_INSN (r))\n     {\n@@ -4457,7 +4460,7 @@ next_insn_to_bundle (rtx r, rtx end)\n \treturn r;\n     }\n \n-  return NULL_RTX;\n+  return NULL;\n }\n \n \n@@ -4470,10 +4473,10 @@ tilegx_gen_bundles (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn, next, prev;\n-      rtx end = NEXT_INSN (BB_END (bb));\n+      rtx_insn *insn, *next, *prev;\n+      rtx_insn *end = NEXT_INSN (BB_END (bb));\n \n-      prev = NULL_RTX;\n+      prev = NULL;\n       for (insn = next_insn_to_bundle (BB_HEAD (bb), end); insn;\n \t   prev = insn, insn = next)\n \t{\n@@ -4519,7 +4522,7 @@ tilegx_gen_bundles (void)\n \n /* Replace OLD_INSN with NEW_INSN.  */\n static void\n-replace_insns (rtx old_insn, rtx new_insns)\n+replace_insns (rtx_insn *old_insn, rtx_insn *new_insns)\n {\n   if (new_insns)\n     emit_insn_before (new_insns, old_insn);\n@@ -4549,12 +4552,12 @@ match_pcrel_step1 (rtx insn)\n \n /* Do the first replacement step in tilegx_fixup_pcrel_references.  */\n static void\n-replace_mov_pcrel_step1 (rtx insn)\n+replace_mov_pcrel_step1 (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx unspec;\n   rtx opnds[2];\n-  rtx new_insns;\n+  rtx_insn *new_insns;\n \n   gcc_assert (GET_CODE (pattern) == SET);\n   opnds[0] = SET_DEST (pattern);\n@@ -4617,13 +4620,13 @@ match_pcrel_step2 (rtx insn)\n \n /* Do the second replacement step in tilegx_fixup_pcrel_references.  */\n static void\n-replace_mov_pcrel_step2 (rtx insn)\n+replace_mov_pcrel_step2 (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx unspec;\n   rtx addr;\n   rtx opnds[3];\n-  rtx new_insns;\n+  rtx_insn *new_insns;\n   rtx got_rtx = tilegx_got_rtx ();\n \n   gcc_assert (GET_CODE (pattern) == SET);\n@@ -4674,12 +4677,12 @@ replace_mov_pcrel_step2 (rtx insn)\n \n /* Do the third replacement step in tilegx_fixup_pcrel_references.  */\n static void\n-replace_mov_pcrel_step3 (rtx insn)\n+replace_mov_pcrel_step3 (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   rtx unspec;\n   rtx opnds[4];\n-  rtx new_insns;\n+  rtx_insn *new_insns;\n   rtx got_rtx = tilegx_got_rtx ();\n   rtx text_label_rtx = tilegx_text_label_rtx ();\n \n@@ -4759,7 +4762,7 @@ replace_mov_pcrel_step3 (rtx insn)\n static void\n tilegx_fixup_pcrel_references (void)\n {\n-  rtx insn, next_insn;\n+  rtx_insn *insn, *next_insn;\n   bool same_section_as_entry = true;\n \n   for (insn = get_insns (); insn; insn = next_insn)\n@@ -4810,8 +4813,8 @@ reorder_var_tracking_notes (void)\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, cfun)\n   {\n-    rtx insn, next;\n-    rtx queue = NULL_RTX;\n+    rtx_insn *insn, *next;\n+    rtx_insn *queue = NULL;\n     bool in_bundle = false;\n \n     for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = next)\n@@ -4826,7 +4829,7 @@ reorder_var_tracking_notes (void)\n \t      {\n \t\twhile (queue)\n \t\t  {\n-\t\t    rtx next_queue = PREV_INSN (queue);\n+\t\t    rtx_insn *next_queue = PREV_INSN (queue);\n \t\t    SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n \t\t    SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n \t\t    SET_NEXT_INSN (insn) = queue;\n@@ -4842,7 +4845,7 @@ reorder_var_tracking_notes (void)\n \t  {\n \t    if (in_bundle)\n \t      {\n-\t\trtx prev = PREV_INSN (insn);\n+\t\trtx_insn *prev = PREV_INSN (insn);\n \t\tSET_PREV_INSN (next) = prev;\n \t\tSET_NEXT_INSN (prev) = next;\n \n@@ -4916,7 +4919,8 @@ tilegx_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\tHOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\ttree function)\n {\n-  rtx this_rtx, insn, funexp, addend;\n+  rtx this_rtx, funexp, addend;\n+  rtx_insn *insn;\n \n   /* Pretend to be a post-reload pass while generating rtl.  */\n   reload_completed = 1;\n@@ -5462,7 +5466,7 @@ static enum machine_mode insn_mode;\n \n /* Implement FINAL_PRESCAN_INSN.  This is used to emit bundles.  */\n void\n-tilegx_final_prescan_insn (rtx insn)\n+tilegx_final_prescan_insn (rtx_insn *insn)\n {\n   /* Record this for tilegx_asm_output_opcode to examine.  */\n   insn_mode = GET_MODE (insn);"}]}