{"sha": "bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM5OGVmN2Y2YzBjYjNlZTE0YjI4YzNjYTc2NTUyNjExMzhmZTBhMQ==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel@OARcorp.com", "date": "2000-12-07T02:42:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-12-07T02:42:02Z"}, "message": "config.gcc (a29k*-*-rtems*, [...]): New targets.\n\n        * config.gcc (a29k*-*-rtems*, arm*-*-rtems*, c4x-*-rtems*,\n        h8300-*-rtems*, hppa1.1-*-rtems, *mips*-*-rtems*): New targets.\n        * config.gcc (*-rtems*): Add support for gthr-rtems.h.\n        * gthr-rtems.h, config/a29k/rtems.h, config/arm/rtems-elf.h,\n        config/h8300/rtems.h, config/mips/rtems.h: New files.\n\nFrom-SVN: r38094", "tree": {"sha": "c47b465e075e5f52610c560762ac2bc684e2adbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47b465e075e5f52610c560762ac2bc684e2adbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/comments", "author": null, "committer": null, "parents": [{"sha": "5eeab2e3fdc1ed8b98c3c0e9aced14e622f8534f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eeab2e3fdc1ed8b98c3c0e9aced14e622f8534f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eeab2e3fdc1ed8b98c3c0e9aced14e622f8534f"}], "stats": {"total": 354, "additions": 354, "deletions": 0}, "files": [{"sha": "90fddaed1f1686ed907e36ff53359a0c787105c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -1,3 +1,11 @@\n+2000-12-06      Joel Sherrill <joel@OARcorp.com>\n+\n+        * config.gcc (a29k*-*-rtems*, arm*-*-rtems*, c4x-*-rtems*, \n+        h8300-*-rtems*, hppa1.1-*-rtems, *mips*-*-rtems*): New targets.\n+        * config.gcc (*-rtems*): Add support for gthr-rtems.h.\n+        * gthr-rtems.h, config/a29k/rtems.h, config/arm/rtems-elf.h,\n+        config/h8300/rtems.h, config/mips/rtems.h: New files.\n+\n 2000-12-06  Mark Kettenis  <kettenis@gnu.org>\n \n \t* config.gcc: Reorganize handling of *-*-gnu*, to share target"}, {"sha": "2175bc9d0f668edf0bfd425ba8ed26f91930ff51", "filename": "gcc/config.gcc", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -319,6 +319,13 @@ a29k-*-udi | a29k-*-coff)\n \ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h\"\n \ttmake_file=a29k/t-a29kbare\n \t;;\n+a29k*-*-rtems*)\n+\ttm_file=a29k/rtems.h\n+\ttmake_file=\"a29k/t-a29kbare t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\t;;\n a29k-wrs-vxworks*)\n \ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h a29k/vx29k.h\"\n \ttmake_file=a29k/t-vx29k\n@@ -476,6 +483,14 @@ alpha*-dec-vms*)\n \txm_file=\"${xm_file} alpha/xm-vms.h\"\n \ttmake_file=\"alpha/t-alpha alpha/t-vms alpha/t-ieee\"\n \t;;\n+arm*-*-rtems*)\n+\ttm_file=arm/rtems-elf.h\n+\ttmake_file=\"arm/t-arm-elf t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\textra_parts=\"crtinit.o crtfini.o\"\n+\t;;\n arc-*-elf*)\n \textra_parts=\"crtinit.o crtfini.o\"\n \t;;\n@@ -603,6 +618,14 @@ c38-convex-*)\n \ttarget_cpu_default=16\t\t\n \tuse_collect2=yes\n \t;;\n+c4x-*-rtems*)\n+\tcpu_type=c4x\n+\ttmake_file=\"c4x/t-c4x t-rtems\"\n+\ttm_file=c4x/rtems.h\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\t;;\n c4x-*)\n \tcpu_type=c4x\n \tfloat_format=c4x\n@@ -629,6 +652,14 @@ fr30-*-elf)\n \ttmake_file=fr30/t-fr30\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n+h8300-*-rtems*)\n+\ttmake_file=\"h8300/t-h8300 t-rtems\"\n+\ttm_file=h8300/rtems.h\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\tfloat_format=i32\n+\t;;\n h8300-*-*)\n \tfloat_format=i32\n \t;;\n@@ -647,6 +678,14 @@ hppa*-*-openbsd*)\n \ttarget_cpu_default=\"MASK_PA_11\"\n \ttmake_file=pa/t-openbsd\n \t;;\n+hppa1.1-*-rtems*)\n+\ttm_file=\"pa/pa-pro.h ${tm_file} pa/pa-pro-end.h libgloss.h pa/rtems.h\"\n+\txm_file=pa/xm-papro.h\n+\ttmake_file=\"pa/t-pro t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\t;;\n hppa1.1-*-pro*)\n \ttarget_cpu_default=\"(MASK_JUMP_IN_DELAY | MASK_PORTABLE_RUNTIME | MASK_GAS | MASK_NO_SPACE_REGS | MASK_SOFT_FLOAT)\"\n \ttm_file=\"${tm_file} pa/pa32-regs.h elfos.h pa/elf.h pa/pa-pro-end.h libgloss.h\"\n@@ -1203,17 +1242,26 @@ i[34567]86-go32-rtems*)\n \txm_file=i386/xm-go32.h\n \ttm_file=i386/go32-rtems.h\n \ttmake_file=\"i386/t-go32 t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n i[34567]86-*-rtemscoff*)\n \tcpu_type=i386\n \ttm_file=i386/rtems.h\n \ttmake_file=\"i386/t-i386bare t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n i[34567]86-*-rtems*|i[34567]86-*-rtemself*)\n \tcpu_type=i386\n \ttm_file=i386/rtemself.h\n \textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \ttmake_file=\"i386/t-rtems-i386 i386/t-crtstuff t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n i[34567]86-*-sco3.2v5*)\t# 80386 running SCO Open Server 5\n \txm_file=\"xm-alloca.h ${xm_file} i386/xm-sco5.h\"\n@@ -1527,6 +1575,9 @@ i960-*-rtems)\n \ttmake_file=\"i960/t-960bare t-rtems\"\n \ttm_file=\"${tm_file} dbxcoff.h i960/rtems.h\"\n \tuse_collect2=yes\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n i960-*-*)\t\t\t# Default i960 environment.\n \tuse_collect2=yes\n@@ -2004,12 +2055,18 @@ m68k-*-rtemscoff*)\n \ttm_file=m68k/rtems.h\n \textra_headers=math-68881.h\n \tfloat_format=m68k\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n m68k-*-rtemself*|m68k-*-rtems*)\n \ttmake_file=\"m68k/t-m68kbare t-rtems m68k/t-crtstuff\"\n \ttm_file=m68k/rtemself.h\n \textra_headers=math-68881.h\n \tfloat_format=m68k\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n m88k-dg-dgux*)\n \tcase $machine in\n@@ -2538,6 +2595,16 @@ mips64orion-*-elf*)\n mips64orion-*-rtems*)\n \ttm_file=\"mips/elforion.h mips/elf64.h mips/rtems64.h\"\n \ttmake_file=\"mips/t-elf t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n+\t;;\n+mips*-*-rtems*)\n+\ttm_file=\"mips/elf.h mips/rtems.h\"\n+\ttmake_file=\"mips/t-elf t-rtems\"\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n mipstx39el-*-elf*)\n \ttm_file=\"mips/r3900.h mips/elfl.h mips/abi64.h\"\n@@ -2693,6 +2760,9 @@ powerpc-*-rtems*)\n \ttm_file=\"rs6000/sysv4.h rs6000/eabi.h rs6000/rtems.h\"\n \ttmake_file=\"rs6000/t-ppcgas t-rtems rs6000/t-ppccomm\"\n \textra_headers=ppc-asm.h\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n powerpc-*-linux*libc1)\n \ttm_file=\"rs6000/sysv4.h rs6000/linux.h\"\n@@ -2847,11 +2917,17 @@ sh-*-rtemself*)\n \ttmake_file=\"sh/t-sh sh/t-elf t-rtems\"\n \ttm_file=\"sh/sh.h sh/elf.h sh/rtemself.h\"\n \tfloat_format=sh\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n sh-*-rtems*)\n \ttmake_file=\"sh/t-sh t-rtems\"\n \ttm_file=\"sh/sh.h sh/rtems.h\"\n \tfloat_format=sh\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n sh-*-linux*)\n \ttm_file=\"sh/sh.h sh/elf.h sh/linux.h\"\n@@ -2941,13 +3017,19 @@ sparc-*-lynxos*)\n sparc-*-rtemsaout*)\n \ttmake_file=\"sparc/t-sparcbare t-rtems\"\n \ttm_file=sparc/rtems.h\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n sparc-*-rtems*|sparc-*-rtemself*)\n \ttm_file=\"sparc/rtemself.h\"\n \ttmake_file=\"sparc/t-elf t-rtems\"\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t#float_format=i128\n \tfloat_format=i64\n+\tif test x$enable_threads = xyes; then\n+\t  thread_file='rtems'\n+\tfi\n \t;;\n sparcv9-*-solaris2*)\n \tif test x$gnu_ld = xyes"}, {"sha": "e2adcc8fd5ebb14cae142c1d6893801b884888da", "filename": "gcc/config/a29k/rtems.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fa29k%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fa29k%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Frtems.h?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -0,0 +1,36 @@\n+/* Definitions for rtems targeting a AMD A29K using COFF.\n+   Copyright (C) 1997, 1998, 2000 Free Software Foundation, Inc.\n+   Contributed by Joel Sherrill (joel@OARcorp.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"a29k/a29k.h\"\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D_AM29K -D_AM29000 -D_EPI -Drtems -D__rtems__ \\\n+  -Asystem(rtems) -Acpu(a29k) -Amachine(a29k)\"\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+#ifndef TARGET_MEM_FUNCTIONS\n+#define TARGET_MEM_FUNCTIONS\n+#endif\n+\n+/* Get machine-independent configuration parameters for RTEMS.  */\n+#include <rtems.h>"}, {"sha": "23a1a3201dbf18d7af07a84b0a1ce4b9640acf09", "filename": "gcc/config/arm/rtems-elf.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Farm%2Frtems-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Farm%2Frtems-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frtems-elf.h?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -0,0 +1,37 @@\n+/* Definitions for RTEMS based ARM systems using ELF\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+ \n+This file is part of GNU CC.\n+ \n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+ \n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Run-time Target Specification.  */\n+#define TARGET_VERSION  fputs (\" (ARM/ELF RTEMS)\", stderr);\n+\n+#define HAS_INIT_SECTION\n+\n+#include \"unknown-elf.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Darm -Darm_elf -Drtems -D__rtems__ -D__ELF__ \\\n+   -Asystem(rtems) -Acpu(arm) -Amachine(arm)\"\n+\n+/*#undef INVOKE_main*/\n+\n+/* Get machine-independent configuration parameters for RTEMS.  */\n+#include <rtems.h>\n+\n+"}, {"sha": "1ac2de9285659b954a4a7a82fa68d703583aad3f", "filename": "gcc/config/h8300/rtems.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fh8300%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fh8300%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Frtems.h?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -0,0 +1,37 @@\n+/* Definitions for rtems targeting a H8\n+   Copyright (C) 1996, 1997, 2000 Free Software Foundation, Inc.\n+   Contributed by Joel Sherrill (joel@OARcorp.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"h8300/h8300.h\"\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dh8300 \\\n+  -D__LONG_MAX__=2147483647L -D__LONG_LONG_MAX__=2147483647L \\\n+  -Drtems -D__rtems__ -Asystem(rtems) -Acpu(h8300) -Amachine(h8300)\"\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+#ifndef TARGET_MEM_FUNCTIONS\n+#define TARGET_MEM_FUNCTIONS\n+#endif\n+\n+/* Get machine-independent configuration parameters for RTEMS.  */\n+#include <rtems.h>"}, {"sha": "23463d7f81e1bc4065ac6b1d357b96575897d721", "filename": "gcc/config/mips/rtems.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fmips%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fconfig%2Fmips%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems.h?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -0,0 +1,34 @@\n+/* Definitions for rtems targeting a MIPS using ELF.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Contributed by Joel Sherrill (joel@OARcorp.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dmips -DMIPSEB -D_mips -D_MIPSEB \\\n+   -Drtems -D__rtems__ -Asystem(rtems)\"\n+\n+/* Generate calls to memcpy, memcmp and memset.  */\n+#ifndef TARGET_MEM_FUNCTIONS\n+#define TARGET_MEM_FUNCTIONS\n+#endif\n+\n+/* Get machine-independent configuration parameters for RTEMS.  */\n+#include <rtems.h>"}, {"sha": "05400c57a3ce1a650310079040502a3778dacc2e", "filename": "gcc/gthr-rtems.h", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fgthr-rtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1/gcc%2Fgthr-rtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-rtems.h?ref=bc98ef7f6c0cb3ee14b28c3ca7655261138fe0a1", "patch": "@@ -0,0 +1,120 @@\n+/* RTEMS threads compatibily routines for libgcc2 and libobjc.\n+   by: Rosimildo da Silva( rdasilva@connecttel.com ) */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 1997, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#ifndef __gthr_rtems_h\n+#define __gthr_rtems_h\n+\n+\n+#define __GTHREADS 1\n+\n+#define __GTHREAD_ONCE_INIT  0\n+#define __GTHREAD_MUTEX_INIT_FUNCTION  rtems_gxx_mutex_init\n+\n+/* avoid depedency on rtems specific headers */\n+typedef void *__gthread_key_t;\n+typedef int   __gthread_once_t;\n+typedef void *__gthread_mutex_t;\n+\n+/*\n+ * External functions provided by RTEMS. They are very similar to their POSIX \n+ * counterparts. A \"Wrapper API\" is being use to avoid dependency on any RTEMS\n+ * header files.\n+ */\n+\n+/* generic per task variables */\n+extern int rtems_gxx_once (__gthread_once_t *once, void (*func) ());\n+extern int rtems_gxx_key_create (__gthread_key_t *key, void (*dtor) (void *));\n+extern int rtems_gxx_key_dtor (__gthread_key_t key, void *ptr);\n+extern int rtems_gxx_key_delete (__gthread_key_t key);\n+extern void *rtems_gxx_getspecific (__gthread_key_t key);\n+extern int rtems_gxx_setspecific (__gthread_key_t key, const void *ptr);\n+\n+/* mutex support */\n+extern void rtems_gxx_mutex_init (__gthread_mutex_t *mutex);\n+extern int rtems_gxx_mutex_lock (__gthread_mutex_t *mutex);\n+extern int rtems_gxx_mutex_trylock (__gthread_mutex_t *mutex);\n+extern int rtems_gxx_mutex_unlock (__gthread_mutex_t *mutex);\n+\n+\n+/* Wrapper calls */\n+static inline int\n+__gthread_once (__gthread_once_t *once, void (*func) ())\n+{\n+   return rtems_gxx_once( once, func );\n+}\n+\n+static inline int\n+__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n+{\n+  return rtems_gxx_key_create( key, dtor );\n+}\n+\n+static inline int\n+__gthread_key_dtor (__gthread_key_t key, void *ptr)\n+{\n+   return rtems_gxx_key_dtor(key, ptr);\n+}\n+\n+static inline int\n+__gthread_key_delete (__gthread_key_t key)\n+{\n+  return rtems_gxx_key_delete (key);\n+}\n+\n+static inline void *\n+__gthread_getspecific (__gthread_key_t key)\n+{\n+  return rtems_gxx_getspecific (key);\n+}\n+\n+static inline int\n+__gthread_setspecific (__gthread_key_t key, const void *ptr)\n+{\n+  return rtems_gxx_setspecific (key, ptr);\n+}\n+\n+static inline int\n+__gthread_mutex_lock (__gthread_mutex_t *mutex)\n+{\n+    return rtems_gxx_mutex_lock (mutex);\n+}\n+\n+static inline int\n+__gthread_mutex_trylock (__gthread_mutex_t *mutex)\n+{\n+    return rtems_gxx_mutex_trylock (mutex);\n+}\n+\n+static inline int\n+__gthread_mutex_unlock (__gthread_mutex_t *mutex)\n+{\n+    return rtems_gxx_mutex_unlock( mutex );\n+}\n+\n+#endif /* __gthr_rtems_h */"}]}