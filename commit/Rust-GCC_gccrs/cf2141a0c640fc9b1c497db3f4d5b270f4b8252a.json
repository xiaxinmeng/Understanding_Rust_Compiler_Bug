{"sha": "cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "node_id": "C_kwDOANBUbNoAKGNmMjE0MWEwYzY0MGZjOWIxYzQ5N2RiM2Y0ZDViMjcwZjRiODI1MmE", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-02-15T15:17:26Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-05-13T14:20:15Z"}, "message": "Add relation between op1 & op2 to lhs_opN_relation API.\n\nWe use the relation between op1 and op2 to help fold a statement, but\nit was not provided to the lhs_op1_relation and lhs_op2_relation routines\nto determine if is also creates a relation between the LHS and either operand.\n\n\tgcc/\n\tPR tree-optimization/104547\n\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Add\n\tthe op1/op2 relation to the relation call.\n\t* range-op.cc (*::lhs_op1_relation): Add param.\n\t(*::lhs_op2_relation): Ditto.\n\t(operator_minus::lhs_op1_relation): New.\n\t(range_relational_tests): Add relation param.\n\t* range-op.h (lhs_op1_relation, lhs_op2_relation): Adjust prototype.\n\n\tgcc/testsuite/\n\t* g++.dg/pr104547.C: New.", "tree": {"sha": "7a2d27079325d796a225a21adf13ea5b89907c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a2d27079325d796a225a21adf13ea5b89907c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/comments", "author": null, "committer": null, "parents": [{"sha": "0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "bc8174e15e62d32938944afe80c71023ca1fee2f", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "patch": "@@ -640,13 +640,13 @@ fold_using_range::range_of_range_op (irange &r, gimple *s, fur_source &src)\n \t\t}\n \t      if (gimple_range_ssa_p (op1))\n \t\t{\n-\t\t  rel = handler->lhs_op1_relation (r, range1, range2);\n+\t\t  rel = handler->lhs_op1_relation (r, range1, range2, rel);\n \t\t  if (rel != VREL_NONE)\n \t\t    src.register_relation (s, rel, lhs, op1);\n \t\t}\n \t      if (gimple_range_ssa_p (op2))\n \t\t{\n-\t\t  rel= handler->lhs_op2_relation (r, range1, range2);\n+\t\t  rel= handler->lhs_op2_relation (r, range1, range2, rel);\n \t\t  if (rel != VREL_NONE)\n \t\t    src.register_relation (s, rel, lhs, op2);\n \t\t}"}, {"sha": "d015b9f13635a69594a2a269760978958bce03a1", "filename": "gcc/range-op.cc", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "patch": "@@ -249,15 +249,17 @@ range_operator::op2_range (irange &r ATTRIBUTE_UNUSED,\n enum tree_code\n range_operator::lhs_op1_relation (const irange &lhs ATTRIBUTE_UNUSED,\n \t\t\t\t  const irange &op1 ATTRIBUTE_UNUSED,\n-\t\t\t\t  const irange &op2 ATTRIBUTE_UNUSED) const\n+\t\t\t\t  const irange &op2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  relation_kind rel ATTRIBUTE_UNUSED) const\n {\n   return VREL_NONE;\n }\n \n enum tree_code\n range_operator::lhs_op2_relation (const irange &lhs ATTRIBUTE_UNUSED,\n \t\t\t\t  const irange &op1 ATTRIBUTE_UNUSED,\n-\t\t\t\t  const irange &op2 ATTRIBUTE_UNUSED) const\n+\t\t\t\t  const irange &op2 ATTRIBUTE_UNUSED,\n+\t\t\t\t  relation_kind rel ATTRIBUTE_UNUSED) const\n {\n   return VREL_NONE;\n }\n@@ -1182,9 +1184,11 @@ class operator_plus : public range_operator\n \t\t        const wide_int &rh_lb,\n \t\t        const wide_int &rh_ub) const;\n   virtual enum tree_code lhs_op1_relation (const irange &lhs, const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel) const;\n   virtual enum tree_code lhs_op2_relation (const irange &lhs, const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel) const;\n } op_plus;\n \n // Check to see if the range of OP2 indicates anything about the relation\n@@ -1193,7 +1197,8 @@ class operator_plus : public range_operator\n enum tree_code\n operator_plus::lhs_op1_relation (const irange &lhs,\n \t\t\t\t const irange &op1,\n-\t\t\t\t const irange &op2) const\n+\t\t\t\t const irange &op2,\n+\t\t\t\t relation_kind) const\n {\n   if (lhs.undefined_p () || op1.undefined_p () || op2.undefined_p ())\n     return VREL_NONE;\n@@ -1258,9 +1263,9 @@ operator_plus::lhs_op1_relation (const irange &lhs,\n \n enum tree_code\n operator_plus::lhs_op2_relation (const irange &lhs, const irange &op1,\n-\t\t\t\t const irange &op2) const\n+\t\t\t\t const irange &op2, relation_kind rel) const\n {\n-  return lhs_op1_relation (lhs, op2, op1);\n+  return lhs_op1_relation (lhs, op2, op1, rel);\n }\n \n void\n@@ -1310,6 +1315,10 @@ class operator_minus : public range_operator\n \t\t        const wide_int &lh_ub,\n \t\t        const wide_int &rh_lb,\n \t\t        const wide_int &rh_ub) const;\n+  virtual enum tree_code lhs_op1_relation (const irange &lhs,\n+\t\t\t\t\t   const irange &op1,\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel) const;\n   virtual bool op1_op2_relation_effect (irange &lhs_range,\n \t\t\t\t\ttree type,\n \t\t\t\t\tconst irange &op1_range,\n@@ -1329,6 +1338,27 @@ operator_minus::wi_fold (irange &r, tree type,\n   value_range_with_overflow (r, type, new_lb, new_ub, ov_lb, ov_ub);\n }\n \n+\n+// Return the relation between LHS and OP1 based on the relation between\n+// OP1 and OP2.\n+\n+enum tree_code\n+operator_minus::lhs_op1_relation (const irange &lhs, const irange &,\n+\t\t\t\t  const irange &, relation_kind rel) const\n+{\n+  if (TYPE_SIGN (lhs.type ()) == UNSIGNED)\n+    switch (rel)\n+      {\n+      case GT_EXPR:\n+\treturn LT_EXPR;\n+      case GE_EXPR:\n+\treturn LE_EXPR;\n+      default:\n+\tbreak;\n+      }\n+  return VREL_NONE;\n+}\n+\n // Check to see if the relation REL between OP1 and OP2 has any effect on the\n // LHS of the expression.  If so, apply it to LHS_RANGE.  This is a helper\n // function for both MINUS_EXPR and POINTER_DIFF_EXPR.\n@@ -1899,14 +1929,16 @@ class operator_rshift : public cross_product_operator\n \t\t\t  relation_kind rel = VREL_NONE) const;\n   virtual enum tree_code lhs_op1_relation (const irange &lhs,\n \t\t\t\t\t   const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel) const;\n } op_rshift;\n \n \n enum tree_code\n operator_rshift::lhs_op1_relation (const irange &lhs ATTRIBUTE_UNUSED,\n \t\t\t\t   const irange &op1,\n-\t\t\t\t   const irange &op2) const\n+\t\t\t\t   const irange &op2,\n+\t\t\t\t   relation_kind) const\n {\n   // If both operands range are >= 0, then the LHS <= op1.\n   if (!op1.undefined_p () && !op2.undefined_p ()\n@@ -3532,15 +3564,17 @@ class operator_identity : public range_operator\n \t\t\t  relation_kind rel = VREL_NONE) const;\n   virtual enum tree_code lhs_op1_relation (const irange &lhs,\n \t\t\t\t\t   const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel) const;\n } op_identity;\n \n // Determine if there is a relationship between LHS and OP1.\n \n enum tree_code\n operator_identity::lhs_op1_relation (const irange &lhs,\n \t\t\t\t     const irange &op1 ATTRIBUTE_UNUSED,\n-\t\t\t\t     const irange &op2 ATTRIBUTE_UNUSED) const\n+\t\t\t\t     const irange &op2 ATTRIBUTE_UNUSED,\n+\t\t\t\t     relation_kind) const\n {\n   if (lhs.undefined_p ())\n     return VREL_NONE;\n@@ -4427,19 +4461,19 @@ range_relational_tests ()\n   int_range<2> op2 (UCHAR (20), UCHAR (20));\n \n   // Never wrapping additions mean LHS > OP1.\n-  tree_code code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  tree_code code = op_plus.lhs_op1_relation (lhs, op1, op2, VREL_NONE);\n   ASSERT_TRUE (code == GT_EXPR);\n \n   // Most wrapping additions mean nothing...\n   op1 = int_range<2> (UCHAR (8), UCHAR (10));\n   op2 = int_range<2> (UCHAR (0), UCHAR (255));\n-  code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  code = op_plus.lhs_op1_relation (lhs, op1, op2, VREL_NONE);\n   ASSERT_TRUE (code == VREL_NONE);\n \n   // However, always wrapping additions mean LHS < OP1.\n   op1 = int_range<2> (UCHAR (1), UCHAR (255));\n   op2 = int_range<2> (UCHAR (255), UCHAR (255));\n-  code = op_plus.lhs_op1_relation (lhs, op1, op2);\n+  code = op_plus.lhs_op1_relation (lhs, op1, op2, VREL_NONE);\n   ASSERT_TRUE (code == LT_EXPR);\n }\n "}, {"sha": "a1f98cd5226bbde6005a24599a21c4f946ca52d7", "filename": "gcc/range-op.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Frange-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Frange-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.h?ref=cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "patch": "@@ -78,12 +78,15 @@ class range_operator\n   // The following routines are used to represent relations between the\n   // various operations.  If the caller knows where the symbolics are,\n   // it can query for relationships between them given known ranges.\n+  // the optional relation passed in is the relation between op1 and op2.\n   virtual enum tree_code lhs_op1_relation (const irange &lhs,\n \t\t\t\t\t   const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel = VREL_NONE) const;\n   virtual enum tree_code lhs_op2_relation (const irange &lhs,\n \t\t\t\t\t   const irange &op1,\n-\t\t\t\t\t   const irange &op2) const;\n+\t\t\t\t\t   const irange &op2,\n+\t\t\t\t\t   relation_kind rel = VREL_NONE) const;\n   virtual enum tree_code op1_op2_relation (const irange &lhs) const;\n protected:\n   // Perform an integral operation between 2 sub-ranges and return it."}, {"sha": "b6135ffe3a04c011dbd9da2eadd01471e5ea87bd", "filename": "gcc/testsuite/g++.dg/pr104547.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104547.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2141a0c640fc9b1c497db3f4d5b270f4b8252a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104547.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104547.C?ref=cf2141a0c640fc9b1c497db3f4d5b270f4b8252a", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -fdump-tree-vrp2\"  }\n+\n+#include <vector>\n+\n+void shrink(std::vector<int>& v, unsigned n) {\n+    if (v.size() < n)\n+      __builtin_unreachable();\n+    v.resize(v.size() - n);\n+}\n+\n+// Verify that std::vector<T>::_M_default_append() has been removed by vrp2.\n+// { dg-final { scan-tree-dump-not \"_M_default_append\"  vrp2 } }"}]}