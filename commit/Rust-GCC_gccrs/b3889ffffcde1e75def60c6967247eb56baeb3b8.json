{"sha": "b3889ffffcde1e75def60c6967247eb56baeb3b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4ODlmZmZmY2RlMWU3NWRlZjYwYzY5NjcyNDdlYjU2YmFlYjNiOA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-07-09T07:55:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:22Z"}, "message": "[Ada] Warning needed on anonymous access type allocators\n\nThis patch enhances the compiler to add an optional warning for\nallocators of anonymous access types due to the somewhat confusing\nruntime accessibility checks that they generate. For more details see RM\n3.10.2 sections 14/3, 14.1/3, and 14.2/3.\n\nThese warnings can now be enabled with -gnatw_a, disabled with -gnatw_A\nand are part of the \"all warnings\" flag -gnatwa.\n\n------------\n-- Source --\n------------\n\n--  main.adb\n\nprocedure Main is\n\n   type Int_Ptr is access all Integer;\n\n   Ptr_Obj          :          Int_Ptr;\n   Ptr_Not_Null_Obj : not null Int_Ptr := new Integer;\n   Ptr_Anon_Acc_Obj : not null access Integer :=\n     new Integer;                     --  WARNING\n\n   procedure Update_Ptr (Item : access Integer) is\n   begin\n      Ptr_Obj := Int_Ptr (Item);      --  RUNTIME ERROR\n   end;\n\n   procedure Update_Ptr_With_Anonymous_Allocator is\n      Item : access Integer := new Integer;\n   begin\n      Update_Ptr (Item);\n   end;\n\n   type Rec_With_Coextension_A (Disc : access Integer)\n     is null record;\n\n   type Rec_With_Coextension_B (Disc : access Integer) is record\n      Comp : Integer;\n   end record;\n\n   Obj : Rec_With_Coextension_A :=\n     (Disc => new Integer'(32));      -- WARNING\n\n   procedure Test_Param (Param : access Integer) is\n   begin\n      null;\n   end;\n\n   function Test_Simple_Return return access Integer is\n   begin\n      return new Integer;             --  WARNING\n   end;\n\n   function Test_Coextension_Return_A return Rec_With_Coextension_A is\n   begin\n      return (Disc => new Integer);   --  WARNING\n   end;\n\n   function Test_Coextension_Return_B return Rec_With_Coextension_B is\n   begin\n      return (new Integer, 32);       --  WARNING\n   end;\n\nbegin\n   Test_Param (new Integer);          --  WARNING\n   Test_Param (Param => new Integer); --  WARNING\n   Update_Ptr_With_Anonymous_Allocator;\nend;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -q -gnatw_a main.adb\n$ rm *.ali\n$ gnatmake -q -gnatwa -gnatw_A main.adb\n$ rm *.ali\n$ gnatmake -q -gnatwa main.adb\n$ main\nmain.adb:8:06: warning: use of an anonymous access type allocator\nmain.adb:16:32: warning: use of an anonymous access type allocator\nmain.adb:29:15: warning: use of an anonymous access type allocator\nmain.adb:38:14: warning: use of an anonymous access type allocator\nmain.adb:43:23: warning: coextension will not be deallocated when\nits associated owner is deallocated\nmain.adb:43:23: warning: use of an anonymous access type allocator\nmain.adb:48:15: warning: coextension will not be deallocated when\nits associated owner is deallocated\nmain.adb:48:15: warning: use of an anonymous access type allocator\nmain.adb:52:16: warning: use of an anonymous access type allocator\nmain.adb:53:25: warning: use of an anonymous access type allocator\nmain.adb:5:04: warning: variable \"Ptr_Obj\" is assigned but never read\nmain.adb:6:04: warning: variable \"Ptr_Not_Null_Obj\" is not referenced\nmain.adb:7:04: warning: variable \"Ptr_Anon_Acc_Obj\" is not referenced\nmain.adb:16:07: warning: \"Item\" is not modified, could be declared constant\nmain.adb:28:04: warning: variable \"Obj\" is not referenced\nmain.adb:36:13: warning: function \"Test_Simple_Return\" is not referenced\nmain.adb:41:13: warning: function \"Test_Coextension_Return_A\" is not referenced\nmain.adb:43:23: warning: coextension will not be deallocated when its\nassociated owner is deallocated\nmain.adb:46:13: warning: function \"Test_Coextension_Return_B\" is not referenced\nmain.adb:48:15: warning: coextension will not be deallocated when its\nassociated owner is deallocated\nmain.adb:5:04: warning: variable \"Ptr_Obj\" is assigned but never read\nmain.adb:6:04: warning: variable \"Ptr_Not_Null_Obj\" is not referenced\nmain.adb:7:04: warning: variable \"Ptr_Anon_Acc_Obj\" is not referenced\nmain.adb:8:06: warning: use of an anonymous access type allocator\nmain.adb:16:07: warning: \"Item\" is not modified, could be declared constant\nmain.adb:16:32: warning: use of an anonymous access type allocator\nmain.adb:28:04: warning: variable \"Obj\" is not referenced\nmain.adb:29:15: warning: use of an anonymous access type allocator\nmain.adb:36:13: warning: function \"Test_Simple_Return\" is not referenced\nmain.adb:38:14: warning: use of an anonymous access type allocator\nmain.adb:41:13: warning: function \"Test_Coextension_Return_A\" is not referenced\nmain.adb:43:23: warning: coextension will not be deallocated when its\nassociated owner is deallocated\nmain.adb:43:23: warning: use of an anonymous access type allocator\nmain.adb:46:13: warning: function \"Test_Coextension_Return_B\" is not referenced\nmain.adb:48:15: warning: coextension will not be deallocated when its\nassociated owner is deallocated\nmain.adb:48:15: warning: use of an anonymous access type allocator\nmain.adb:52:16: warning: use of an anonymous access type allocator\nmain.adb:53:25: warning: use of an anonymous access type allocator\n\nraised PROGRAM_ERROR : main.adb:12 accessibility check failed\n\n2019-07-09  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Allocator): Add conditional to detect\n\tthe presence of anoymous access type allocators and issue a\n\twarning if the appropriate warning flag is enabled.\n\t* warnsw.ads: Add new warning flag for anonymous allocators\n\t* warnsw.adb (All_Warnings, Restore_Warnings, Save_Warnings,\n\tSet_Underscore_Warning_Switch): Register new flags.\n\t(WA_Warnings): Register new flag as an \"all warnings\" switch\n\t* usage.adb,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument new warning switches -gnatw_a and -gnatw_A.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r273290", "tree": {"sha": "307a91a5499e6e34f7051efcc3e29790d32f5036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/307a91a5499e6e34f7051efcc3e29790d32f5036"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3889ffffcde1e75def60c6967247eb56baeb3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3889ffffcde1e75def60c6967247eb56baeb3b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3889ffffcde1e75def60c6967247eb56baeb3b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3889ffffcde1e75def60c6967247eb56baeb3b8/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9e470285b505c4eb28cfd4960a4f1541db5dad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e470285b505c4eb28cfd4960a4f1541db5dad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e470285b505c4eb28cfd4960a4f1541db5dad9"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "ee00d1f4b993b2f545c1ddb638bee2ba4e85e11d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -1,3 +1,17 @@\n+2019-07-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): Add conditional to detect\n+\tthe presence of anoymous access type allocators and issue a\n+\twarning if the appropriate warning flag is enabled.\n+\t* warnsw.ads: Add new warning flag for anonymous allocators\n+\t* warnsw.adb (All_Warnings, Restore_Warnings, Save_Warnings,\n+\tSet_Underscore_Warning_Switch): Register new flags.\n+\t(WA_Warnings): Register new flag as an \"all warnings\" switch\n+\t* usage.adb,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new warning switches -gnatw_a and -gnatw_A.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Diagnose_Call): Improve error recovery when a"}, {"sha": "af8f8a4492b60db93fb2af3400884033d03678ad", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -2842,6 +2842,29 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   compile time that the assertion will fail.\n \n \n+.. index:: -gnatw_a\n+\n+:switch:`-gnatw_a`\n+  *Activate warnings on anonymous allocators.*\n+\n+  .. index:: Anonymous allocators\n+\n+  This switch activates warnings for allocators of anonymous access types,\n+  which can involve run-time accessibility checks and lead to unexpected\n+  accessibility violations. For more details on the rules involved, see\n+  RM 3.10.2 (14).\n+\n+\n+.. index:: -gnatw_A\n+\n+:switch:`-gnatw_A`\n+  *Supress warnings on anonymous allocators.*\n+\n+  .. index:: Anonymous allocators\n+\n+  This switch suppresses warnings for anonymous access type allocators.\n+\n+\n .. index:: -gnatwb  (gcc)\n \n :switch:`-gnatwb`"}, {"sha": "b4159a7cefc83263e8799c5bce31cf0106f0b7c8", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -72,6 +72,7 @@ with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n with Validsw;  use Validsw;\n+with Warnsw;   use Warnsw;\n \n package body Exp_Ch4 is\n \n@@ -4354,6 +4355,15 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_N_Allocator\n \n    begin\n+      --  Warn on the presence of an allocator of an anonymous access type when\n+      --  enabled.\n+\n+      if Warn_On_Anonymous_Allocators\n+        and then Ekind (PtrT) = E_Anonymous_Access_Type\n+      then\n+         Error_Msg_N (\"?use of an anonymous access type allocator\", N);\n+      end if;\n+\n       --  RM E.2.3(22). We enforce that the expected type of an allocator\n       --  shall not be a remote access-to-class-wide-limited-private type\n "}, {"sha": "db2adafcc1a956ecfdc359f8d5ca4e92cb002060", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -11040,6 +11040,37 @@ This switch suppresses warnings for assertions where the compiler can tell at\n compile time that the assertion will fail.\n @end table\n \n+@geindex -gnatw_a\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_a}\n+\n+@emph{Activate warnings on anonymous allocators.}\n+\n+@geindex Anonymous allocators\n+\n+This switch activates warnings for allocators of anonymous access types,\n+which can involve run-time accessibility checks and lead to unexpected\n+accessibility violations. For more details on the rules involved, see\n+RM 3.10.2 (14).\n+@end table\n+\n+@geindex -gnatw_A\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_A}\n+\n+@emph{Supress warnings on anonymous allocators.}\n+\n+@geindex Anonymous allocators\n+\n+This switch suppresses warnings for anonymous access type allocators.\n+@end table\n+\n @geindex -gnatwb (gcc)\n \n "}, {"sha": "fb261e5fbc0b9b4e24ef7102626f9b450600a0f5", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -483,6 +483,8 @@ begin\n    Write_Line (\"        A    turn off all optional info/warnings\");\n    Write_Line (\"        .a*+ turn on warnings for failing assertion\");\n    Write_Line (\"        .A   turn off warnings for failing assertion\");\n+   Write_Line (\"        _a*+ turn on warnings for anonymous allocators\");\n+   Write_Line (\"        _A   turn off warnings for anonymous allocators\");\n    Write_Line (\"        b+   turn on warnings for bad fixed value \" &\n                                                   \"(not multiple of small)\");\n    Write_Line (\"        B*   turn off warnings for bad fixed value \" &"}, {"sha": "219d440bc87a49e1a60153e37dbcb869955e2deb", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -56,6 +56,7 @@ package body Warnsw is\n       Warn_On_Ada_2005_Compatibility      := Setting;\n       Warn_On_Ada_2012_Compatibility      := Setting;\n       Warn_On_All_Unread_Out_Parameters   := Setting;\n+      Warn_On_Anonymous_Allocators        := Setting;\n       Warn_On_Assertion_Failure           := Setting;\n       Warn_On_Assumed_Low_Bound           := Setting;\n       Warn_On_Atomic_Synchronization      := Setting;\n@@ -129,6 +130,8 @@ package body Warnsw is\n         W.Warn_On_Ada_2012_Compatibility;\n       Warn_On_All_Unread_Out_Parameters   :=\n         W.Warn_On_All_Unread_Out_Parameters;\n+      Warn_On_Anonymous_Allocators        :=\n+        W.Warn_On_Anonymous_Allocators;\n       Warn_On_Assertion_Failure           :=\n         W.Warn_On_Assertion_Failure;\n       Warn_On_Assumed_Low_Bound           :=\n@@ -235,6 +238,8 @@ package body Warnsw is\n         Warn_On_Ada_2012_Compatibility;\n       W.Warn_On_All_Unread_Out_Parameters   :=\n         Warn_On_All_Unread_Out_Parameters;\n+      W.Warn_On_Anonymous_Allocators        :=\n+        Warn_On_Anonymous_Allocators;\n       W.Warn_On_Assertion_Failure           :=\n         Warn_On_Assertion_Failure;\n       W.Warn_On_Assumed_Low_Bound           :=\n@@ -478,6 +483,12 @@ package body Warnsw is\n    function Set_Underscore_Warning_Switch (C : Character) return Boolean is\n    begin\n       case C is\n+         when 'a' =>\n+            Warn_On_Anonymous_Allocators := True;\n+\n+         when 'A' =>\n+            Warn_On_Anonymous_Allocators := False;\n+\n          when others =>\n             if Ignore_Unrecognized_VWY_Switches then\n                Write_Line (\"unrecognized switch -gnatw_\" & C & \" ignored\");\n@@ -705,6 +716,7 @@ package body Warnsw is\n       Ineffective_Inline_Warnings         := True; -- -gnatwp\n       Warn_On_Ada_2005_Compatibility      := True; -- -gnatwy\n       Warn_On_Ada_2012_Compatibility      := True; -- -gnatwy\n+      Warn_On_Anonymous_Allocators        := True; -- -gnatw_a\n       Warn_On_Assertion_Failure           := True; -- -gnatw.a\n       Warn_On_Assumed_Low_Bound           := True; -- -gnatww\n       Warn_On_Bad_Fixed_Value             := True; -- -gnatwb"}, {"sha": "5875ecd0525f7886aea4f49a87d4c5b2e54063f4", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3889ffffcde1e75def60c6967247eb56baeb3b8/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=b3889ffffcde1e75def60c6967247eb56baeb3b8", "patch": "@@ -38,6 +38,12 @@ package Warnsw is\n    --  here as time goes by. And in fact a really nice idea would be to put\n    --  them all in a Warn_Record so that they would be easy to save/restore.\n \n+   Warn_On_Anonymous_Allocators : Boolean := False;\n+   --  Warn when allocators for anonymous access types are present, which,\n+   --  although not illegal in Ada, may be confusing to users due to how\n+   --  accessibility checks get generated. Off by default, modified by use of\n+   --  -gnatw_a/_A and set as part of -gnatwa.\n+\n    Warn_On_Late_Primitives : Boolean := False;\n    --  Warn when tagged type public primitives are defined after its private\n    --  extensions.\n@@ -90,6 +96,7 @@ package Warnsw is\n       Warn_On_Ada_2005_Compatibility      : Boolean;\n       Warn_On_Ada_2012_Compatibility      : Boolean;\n       Warn_On_All_Unread_Out_Parameters   : Boolean;\n+      Warn_On_Anonymous_Allocators        : Boolean;\n       Warn_On_Assertion_Failure           : Boolean;\n       Warn_On_Assumed_Low_Bound           : Boolean;\n       Warn_On_Atomic_Synchronization      : Boolean;"}]}