{"sha": "12314dc98976f0dc987ec8081e4672b76507e46e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMTRkYzk4OTc2ZjBkYzk4N2VjODA4MWU0NjcyYjc2NTA3ZTQ2ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-01-17T08:38:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-01-17T08:38:59Z"}, "message": "re PR tree-optimization/71433 (-Warray-bounds false positive with -O2)\n\n2017-01-17  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71433\n\t* tree-vrp.c (register_new_assert_for): Merge same asserts\n\ton all incoming edges.\n\t(process_assert_insertions_for): Handle insertions at the\n\tbeginning of BBs.\n\n\t* gcc.dg/Warray-bounds-20.c: New testcase.\n\nFrom-SVN: r244520", "tree": {"sha": "e122e9f887592491b3c316c026bf3457db280f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e122e9f887592491b3c316c026bf3457db280f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12314dc98976f0dc987ec8081e4672b76507e46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12314dc98976f0dc987ec8081e4672b76507e46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12314dc98976f0dc987ec8081e4672b76507e46e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12314dc98976f0dc987ec8081e4672b76507e46e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a23e48df4514c4f40e832f196b1b50b1e5010bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e48df4514c4f40e832f196b1b50b1e5010bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23e48df4514c4f40e832f196b1b50b1e5010bd2"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "6d443fc29970ea889f0a627d846f00e335eca85b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12314dc98976f0dc987ec8081e4672b76507e46e", "patch": "@@ -1,3 +1,11 @@\n+2017-01-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71433\n+\t* tree-vrp.c (register_new_assert_for): Merge same asserts\n+\ton all incoming edges.\n+\t(process_assert_insertions_for): Handle insertions at the\n+\tbeginning of BBs.\n+\n 2017-01-17  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config/i386/cygwin.h (LIBGCJ_SONAME): Remove."}, {"sha": "4bc9f2777fc9b32f21800a8842f454c615ec033f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12314dc98976f0dc987ec8081e4672b76507e46e", "patch": "@@ -1,3 +1,8 @@\n+2017-01-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71433\n+\t* gcc.dg/Warray-bounds-20.c: New testcase.\n+\n 2017-01-17  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/52563"}, {"sha": "727b7997abc6ebbda6b8cb83ff74a1dedc2404e3", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-20.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-20.c?ref=12314dc98976f0dc987ec8081e4672b76507e46e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+int t[1];\n+int fct (int r, long e)\n+{\n+  int d = 0;\n+  if (r == 4)\n+    r = 1;\n+  if (e < -52)\n+    d = r == 0 ? 1 : 2;\n+  else\n+    {\n+      int i, n = 53;\n+      if (__builtin_expect (e < 0, 0))\n+\tn += e;\n+      for (i = 1 ; i < n / 64 + 1 ; i++)\n+\tt[i] = 0; /* { dg-bogus \"array bounds\" } */\n+    }\n+  return d;\n+}"}, {"sha": "ac37d3f6e149a3562c5585f63ceb28c14657638c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12314dc98976f0dc987ec8081e4672b76507e46e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=12314dc98976f0dc987ec8081e4672b76507e46e", "patch": "@@ -5032,6 +5032,17 @@ register_new_assert_for (tree name, tree expr,\n \t      loc->si = si;\n \t      return;\n \t    }\n+\t  /* If we have the same assertion on all incoming edges of a BB\n+\t     instead insert it at the beginning of it.  */\n+\t  if (e && loc->e\n+\t      && dest_bb == loc->e->dest\n+\t      && EDGE_COUNT (dest_bb->preds) == 2)\n+\t    {\n+\t      loc->bb = dest_bb;\n+\t      loc->e = NULL;\n+\t      loc->si = gsi_none ();\n+\t      return;\n+\t    }\n \t}\n \n       /* Update the last node of the list and move to the next one.  */\n@@ -6429,6 +6440,15 @@ process_assert_insertions_for (tree name, assert_locus *loc)\n       return true;\n     }\n \n+  /* If the stmt iterator points at the end then this is an insertion\n+     at the beginning of a block.  */\n+  if (gsi_end_p (loc->si))\n+    {\n+      gimple_stmt_iterator si = gsi_after_labels (loc->bb);\n+      gsi_insert_before (&si, assert_stmt, GSI_SAME_STMT);\n+      return false;\n+\n+    }\n   /* Otherwise, we can insert right after LOC->SI iff the\n      statement must not be the last statement in the block.  */\n   stmt = gsi_stmt (loc->si);"}]}