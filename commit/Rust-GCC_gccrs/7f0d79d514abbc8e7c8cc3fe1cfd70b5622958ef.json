{"sha": "7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwZDc5ZDUxNGFiYmM4ZTdjOGNjM2ZlMWNmZDcwYjU2MjI5NThlZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-25T14:32:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-25T14:32:06Z"}, "message": "thread: Use noexcept throughout per the FDIS.\n\n2011-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/thread: Use noexcept throughout per the FDIS.\n\t* include/std/mutex: Likewise.\n\nFrom-SVN: r174202", "tree": {"sha": "6ec2a59ca4054e8fa41b9c53ca40b3f48db54fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec2a59ca4054e8fa41b9c53ca40b3f48db54fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/comments", "author": null, "committer": null, "parents": [{"sha": "bc7f13bf15c30ee57601c3ec0c8390cfc15e01db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7f13bf15c30ee57601c3ec0c8390cfc15e01db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7f13bf15c30ee57601c3ec0c8390cfc15e01db"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "b82309064f271a3d63cdc193ca99e8c39bbaf4d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "patch": "@@ -1,3 +1,8 @@\n+2011-05-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/thread: Use noexcept throughout per the FDIS.\n+\t* include/std/mutex: Likewise.\n+\n 2011-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/20_util/duration/arithmetic/dr2020.cc: Fix typo."}, {"sha": "de16cd3d086baf5804061447ed51b8351a33f51f", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "patch": "@@ -1,6 +1,6 @@\n // <mutex> -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -70,9 +70,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typedef __native_type* \t\t\tnative_handle_type;\n \n #ifdef __GTHREAD_MUTEX_INIT\n-    constexpr mutex() : _M_mutex(__GTHREAD_MUTEX_INIT) { }\n+    constexpr mutex() noexcept : _M_mutex(__GTHREAD_MUTEX_INIT) { }\n #else\n-    mutex()\n+    mutex() noexcept\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n@@ -95,7 +95,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     bool\n-    try_lock()\n+    try_lock() noexcept\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n       return !__gthread_mutex_trylock(&_M_mutex);\n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     bool\n-    try_lock()\n+    try_lock() noexcept\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n       return !__gthread_recursive_mutex_trylock(&_M_mutex);\n@@ -247,7 +247,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     bool\n-    try_lock()\n+    try_lock() noexcept\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n       return !__gthread_mutex_trylock(&_M_mutex);\n@@ -354,7 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     bool\n-    try_lock()\n+    try_lock() noexcept\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n       return !__gthread_recursive_mutex_trylock(&_M_mutex);\n@@ -464,7 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _Mutex mutex_type;\n \n-      unique_lock()\n+      unique_lock() noexcept\n       : _M_device(0), _M_owns(false)\n       { }\n \n@@ -475,7 +475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_owns = true;\n       }\n \n-      unique_lock(mutex_type& __m, defer_lock_t)\n+      unique_lock(mutex_type& __m, defer_lock_t) noexcept\n       : _M_device(&__m), _M_owns(false)\n       { }\n \n@@ -510,14 +510,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       unique_lock(const unique_lock&) = delete;\n       unique_lock& operator=(const unique_lock&) = delete;\n \n-      unique_lock(unique_lock&& __u)\n+      unique_lock(unique_lock&& __u) noexcept\n       : _M_device(__u._M_device), _M_owns(__u._M_owns)\n       {\n \t__u._M_device = 0;\n \t__u._M_owns = false;\n       }\n \n-      unique_lock& operator=(unique_lock&& __u)\n+      unique_lock& operator=(unique_lock&& __u) noexcept\n       {\n \tif(_M_owns)\n \t  unlock();\n@@ -601,14 +601,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      swap(unique_lock& __u)\n+      swap(unique_lock& __u) noexcept\n       {\n \tstd::swap(_M_device, __u._M_device);\n \tstd::swap(_M_owns, __u._M_owns);\n       }\n \n       mutex_type*\n-      release()\n+      release() noexcept\n       {\n \tmutex_type* __ret = _M_device;\n \t_M_device = 0;\n@@ -617,14 +617,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       bool\n-      owns_lock() const\n+      owns_lock() const noexcept\n       { return _M_owns; }\n \n-      explicit operator bool() const\n+      explicit operator bool() const noexcept\n       { return owns_lock(); }\n \n       mutex_type*\n-      mutex() const\n+      mutex() const noexcept\n       { return _M_device; }\n \n     private:\n@@ -634,7 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Mutex>\n     inline void\n-    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y)\n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept\n     { __x.swap(__y); }\n \n   template<int _Idx>\n@@ -759,7 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __native_type  _M_once;\n \n   public:\n-    constexpr once_flag() : _M_once(__GTHREAD_ONCE_INIT) { }\n+    constexpr once_flag() noexcept : _M_once(__GTHREAD_ONCE_INIT) { }\n \n     once_flag(const once_flag&) = delete;\n     once_flag& operator=(const once_flag&) = delete;"}, {"sha": "4fa5e505146060013afb5e1fe61d06b6ce2cb367", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=7f0d79d514abbc8e7c8cc3fe1cfd70b5622958ef", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       native_handle_type\t_M_thread;\n \n     public:\n-      id() : _M_thread() { }\n+      id() noexcept : _M_thread() { }\n \n       explicit\n       id(native_handle_type __id) : _M_thread(__id) { }\n@@ -82,11 +82,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class hash<thread::id>;\n \n       friend bool\n-      operator==(thread::id __x, thread::id __y)\n+      operator==(thread::id __x, thread::id __y) noexcept\n       { return __gthread_equal(__x._M_thread, __y._M_thread); }\n \n       friend bool\n-      operator<(thread::id __x, thread::id __y)\n+      operator<(thread::id __x, thread::id __y) noexcept\n       { return __x._M_thread < __y._M_thread; }\n \n       template<class _CharT, class _Traits>\n@@ -121,11 +121,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     id\t\t\t\t_M_id;\n \n   public:\n-    thread() = default;\n+    thread() noexcept = default;\n     thread(thread&) = delete;\n     thread(const thread&) = delete;\n \n-    thread(thread&& __t)\n+    thread(thread&& __t) noexcept\n     { swap(__t); }\n \n     template<typename _Callable, typename... _Args>\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     thread& operator=(const thread&) = delete;\n \n-    thread& operator=(thread&& __t)\n+    thread& operator=(thread&& __t) noexcept\n     {\n       if (joinable())\n \tstd::terminate();\n@@ -154,11 +154,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     void\n-    swap(thread& __t)\n+    swap(thread& __t) noexcept\n     { std::swap(_M_id, __t._M_id); }\n \n     bool\n-    joinable() const\n+    joinable() const noexcept\n     { return !(_M_id == id()); }\n \n     void\n@@ -168,7 +168,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     detach();\n \n     thread::id\n-    get_id() const\n+    get_id() const noexcept\n     { return _M_id; }\n \n     /** @pre thread is joinable\n@@ -179,7 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Returns a value that hints at the number of hardware thread contexts.\n     static unsigned int\n-    hardware_concurrency()\n+    hardware_concurrency() noexcept\n     { return 0; }\n \n   private:\n@@ -198,23 +198,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline thread::_Impl_base::~_Impl_base() = default;\n \n   inline void\n-  swap(thread& __x, thread& __y)\n+  swap(thread& __x, thread& __y) noexcept\n   { __x.swap(__y); }\n \n   inline bool\n-  operator!=(thread::id __x, thread::id __y)\n+  operator!=(thread::id __x, thread::id __y) noexcept\n   { return !(__x == __y); }\n \n   inline bool\n-  operator<=(thread::id __x, thread::id __y)\n+  operator<=(thread::id __x, thread::id __y) noexcept\n   { return !(__y < __x); }\n \n   inline bool\n-  operator>(thread::id __x, thread::id __y)\n+  operator>(thread::id __x, thread::id __y) noexcept\n   { return __y < __x; }\n \n   inline bool\n-  operator>=(thread::id __x, thread::id __y)\n+  operator>=(thread::id __x, thread::id __y) noexcept\n   { return !(__x < __y); }\n \n   // DR 889.\n@@ -250,12 +250,12 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     /// get_id\n     inline thread::id\n-    get_id() { return thread::id(__gthread_self()); }\n+    get_id() noexcept { return thread::id(__gthread_self()); }\n \n #ifdef _GLIBCXX_USE_SCHED_YIELD\n     /// yield\n     inline void\n-    yield()\n+    yield() noexcept\n     { __gthread_yield(); }\n #endif\n "}]}