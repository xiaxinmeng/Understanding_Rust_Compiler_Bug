{"sha": "a59b038cc8edf2e34d5c9544a8805bf9b3450709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5YjAzOGNjOGVkZjJlMzRkNWM5NTQ0YTg4MDViZjliMzQ1MDcwOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-27T10:35:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-27T10:35:55Z"}, "message": "expmed.c (store_bit_field): Assert that BITREGION_START is a multiple of a unit before computing the offset...\n\n\t* expmed.c (store_bit_field): Assert that BITREGION_START is a multiple\n\tof a unit before computing the offset in units.\n\t* expr.c (get_bit_range): Return the null range if the enclosing record\n\tis part of a larger bit field.\n\nFrom-SVN: r185857", "tree": {"sha": "afcd36162228e58e77087033fa077738a70aad88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afcd36162228e58e77087033fa077738a70aad88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59b038cc8edf2e34d5c9544a8805bf9b3450709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59b038cc8edf2e34d5c9544a8805bf9b3450709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59b038cc8edf2e34d5c9544a8805bf9b3450709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59b038cc8edf2e34d5c9544a8805bf9b3450709/comments", "author": null, "committer": null, "parents": [{"sha": "d102ab714fbf00fbbf8b0c2e022a315b85c5e22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d102ab714fbf00fbbf8b0c2e022a315b85c5e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d102ab714fbf00fbbf8b0c2e022a315b85c5e22a"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "bf370df44ec866b2e87f9801f6689e966074e69b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a59b038cc8edf2e34d5c9544a8805bf9b3450709", "patch": "@@ -1,3 +1,10 @@\n+2012-03-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expmed.c (store_bit_field): Assert that BITREGION_START is a multiple\n+\tof a unit before computing the offset in units.\n+\t* expr.c (get_bit_range): Return the null range if the enclosing record\n+\tis part of a larger bit field.\n+\n 2012-03-27  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/ia64/vms.h (CASE_VECTOR_MODE): Define."}, {"sha": "54e51dca02dd28a98a0f1f6a26b60997d4f43f78", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=a59b038cc8edf2e34d5c9544a8805bf9b3450709", "patch": "@@ -828,8 +828,7 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   /* Under the C++0x memory model, we must not touch bits outside the\n      bit region.  Adjust the address to start at the beginning of the\n      bit region.  */\n-  if (MEM_P (str_rtx)\n-      && bitregion_start > 0)\n+  if (MEM_P (str_rtx) && bitregion_start > 0)\n     {\n       enum machine_mode bestmode;\n       enum machine_mode op_mode;\n@@ -839,6 +838,8 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       if (op_mode == MAX_MACHINE_MODE)\n \top_mode = VOIDmode;\n \n+      gcc_assert ((bitregion_start % BITS_PER_UNIT) == 0);\n+\n       offset = bitregion_start / BITS_PER_UNIT;\n       bitnum -= bitregion_start;\n       bitregion_end -= bitregion_start;"}, {"sha": "56ec3fa8e2aee3243b6a162f9682869f53fdbc78", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a59b038cc8edf2e34d5c9544a8805bf9b3450709", "patch": "@@ -4458,6 +4458,25 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n       return;\n     }\n \n+  /* If we have a DECL_BIT_FIELD_REPRESENTATIVE but the enclosing record is\n+     part of a larger bit field, then the representative does not serve any\n+     useful purpose.  This can occur in Ada.  */\n+  if (handled_component_p (TREE_OPERAND (exp, 0)))\n+    {\n+      enum machine_mode rmode;\n+      HOST_WIDE_INT rbitsize, rbitpos;\n+      tree roffset;\n+      int unsignedp;\n+      int volatilep = 0;\n+      get_inner_reference (TREE_OPERAND (exp, 0), &rbitsize, &rbitpos,\n+\t\t\t   &roffset, &rmode, &unsignedp, &volatilep, false);\n+      if ((rbitpos % BITS_PER_UNIT) != 0)\n+\t{\n+\t  *bitstart = *bitend = 0;\n+\t  return;\n+\t}\n+    }\n+\n   /* Compute the adjustment to bitpos from the offset of the field\n      relative to the representative.  DECL_FIELD_OFFSET of field and\n      repr are the same by construction if they are not constants,"}, {"sha": "63de5d4e7ba22ff2cd70466ff5ff2e9d82783210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a59b038cc8edf2e34d5c9544a8805bf9b3450709", "patch": "@@ -1,3 +1,7 @@\n+2012-03-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack17.adb: New test.\n+\n 2012-03-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* gcc.target/arm/thumb-ifcvt.c: Only run for -mthumb."}, {"sha": "2333ba7f910acd22044a4df4f0e66295258c3d72", "filename": "gcc/testsuite/gnat.dg/pack17.adb", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Ftestsuite%2Fgnat.dg%2Fpack17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59b038cc8edf2e34d5c9544a8805bf9b3450709/gcc%2Ftestsuite%2Fgnat.dg%2Fpack17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack17.adb?ref=a59b038cc8edf2e34d5c9544a8805bf9b3450709", "patch": "@@ -0,0 +1,38 @@\n+-- { dg-do run }\n+\n+procedure Pack17 is\n+\n+   type Bitmap_T is array (Natural range <>) of Boolean;\n+   pragma Pack (Bitmap_T);\n+\n+   type Uint8 is range 0 .. 2 ** 8 - 1;\n+   for Uint8'Size use 8;\n+\n+   type Record_With_QImode_Variants (D : Boolean) is record\n+      C_Filler : Bitmap_T (1..7);\n+      C_Map : Bitmap_T (1..3);\n+      case D is\n+         when False =>\n+            F_Bit : Boolean;\n+            F_Filler : Bitmap_T (1..7);\n+         when True =>\n+            T_Int : Uint8;\n+      end case;\n+   end record;\n+   pragma Pack (Record_With_QImode_Variants);\n+\n+   procedure Fill (R : out Record_With_QImode_Variants) is\n+   begin\n+      R.C_Filler := (True, False, True, False, True, False, True);\n+      R.C_Map := (True, False, True);\n+      R.T_Int := 17;\n+   end;\n+\n+   RT : Record_With_QImode_Variants (D => True);\n+\n+begin\n+   Fill (RT);\n+   if RT.T_Int /= 17 then\n+     raise Program_Error;\n+   end if;\n+end;"}]}