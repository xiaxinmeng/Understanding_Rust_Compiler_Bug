{"sha": "bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlNGNlMGZmMzQ4YzYzOTEyMDQ4ODhkMTZmZmNhZDZmNTFmZTlkNw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-11-06T18:43:15Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-11-06T18:43:15Z"}, "message": "[Patch ARM] Unified assembler in ARM state.\n\ngcc/ChangeLog:\n\n2015-11-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* config/arm/arm-ldmstm.ml: Rewrite to generate unified asm templates.\n\t* config/arm/arm.c (arm_asm_trampoline_template): Make unified asm safe.\n\t(arm_output_multireg_pop): Likewise.\n\t(output_move_double):  Likewise.\n\t(output_move_quad):  Likewise.\n\t(output_return_instruction): Likewise.\n\t(arm_print_operand): Remove support for %( and %. print modifiers.\n\t(arm_output_shift): Make unified asm.\n\t(arm_declare_function_name): Likewise.\n\t* config/arm/arm.h (TARGET_UNIFIED_ASM): Delete.\n         (ASM_APP_OFF): Adjust.\n         (ASM_OUTPUT_REG_PUSH): Undo special casing for TARGET_ARM.\n         (ASM_OUTPUT_REG_POP): Likewise.\n\t* config/arm/arm.md: Adjust uses of %., %(, %) \n\t* config/arm/sync.md: Likewise.\n\t* config/arm/thumb2.md: Likewise.\n\t* config/arm/ldmstm.md: Regenerate.\n\t* config/arm/arm.opt (masm-unified-syntax): Do not special case Thumb.\n\t* doc/invoke.texi (masm-unified-syntax): Update documentation.\n\ngcc/testsuite/ChangeLog:\n\n2015-11-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* gcc.target/arm/combine-movs.c:\n\t* gcc.target/arm/interrupt-1.c:\n\t* gcc.target/arm/interrupt-2.c:\n\t* gcc.target/arm/unaligned-memcpy-4.c:\n\nFrom-SVN: r229875", "tree": {"sha": "37834eade01ce45c9f4207b59b029b8adbb31fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37834eade01ce45c9f4207b59b029b8adbb31fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/comments", "author": null, "committer": null, "parents": [{"sha": "ee015909ee4656557a0fad1795dfd1bd2391735d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee015909ee4656557a0fad1795dfd1bd2391735d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee015909ee4656557a0fad1795dfd1bd2391735d"}], "stats": {"total": 554, "additions": 269, "deletions": 285}, "files": [{"sha": "ff2b73dd655dac19b31ca70d32bad6d305370630", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -1,3 +1,25 @@\n+2015-11-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/arm/arm-ldmstm.ml: Rewrite to generate unified asm templates.\n+\t* config/arm/arm.c (arm_asm_trampoline_template): Make unified asm safe.\n+\t(arm_output_multireg_pop): Likewise.\n+\t(output_move_double):  Likewise.\n+\t(output_move_quad):  Likewise.\n+\t(output_return_instruction): Likewise.\n+\t(arm_print_operand): Remove support for %( and %. print modifiers.\n+\t(arm_output_shift): Make unified asm.\n+\t(arm_declare_function_name): Likewise.\n+\t* config/arm/arm.h (TARGET_UNIFIED_ASM): Delete.\n+\t(ASM_APP_OFF): Adjust.\n+\t(ASM_OUTPUT_REG_PUSH): Undo special casing for TARGET_ARM.\n+\t(ASM_OUTPUT_REG_POP): Likewise.\n+\t* config/arm/arm.md: Adjust uses of %., %(, %)\n+\t* config/arm/sync.md: Likewise.\n+\t* config/arm/thumb2.md: Likewise.\n+\t* config/arm/ldmstm.md: Regenerate.\n+\t* config/arm/arm.opt (masm-unified-syntax): Do not special case Thumb.\n+\t* doc/invoke.texi (masm-unified-syntax): Update documentation.\n+\n 2015-11-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (dump_line_table_statistics): Dump stats on adhoc table."}, {"sha": "62982df594d5d4a1407df359e927c66986a9788c", "filename": "gcc/config/arm/arm-ldmstm.ml", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-ldmstm.ml?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -33,9 +33,20 @@ type amode = IA | IB | DA | DB\n \n type optype = IN | OUT | INOUT\n \n-let rec string_of_addrmode addrmode =\n+let rec string_of_addrmode addrmode thumb update =\n+  if thumb || update\n+then\n   match addrmode with\n-    IA -> \"ia\" | IB -> \"ib\" | DA -> \"da\" | DB -> \"db\"\n+    IA -> \"ia\"\n+  | IB -> \"ib\"\n+  | DA -> \"da\"\n+  | DB -> \"db\"\n+else\n+  match addrmode with\n+    IA -> \"\"\n+  | IB -> \"ib\"\n+  | DA -> \"da\"\n+  | DB -> \"db\"\n \n let rec initial_offset addrmode nregs =\n   match addrmode with\n@@ -160,7 +171,7 @@ let target addrmode thumb =\n   | _, _ -> raise (InvalidAddrMode \"ERROR: Invalid Addressing mode for Thumb1.\")\n \n let write_pattern_1 name ls addrmode nregs write_set_fn update thumb =\n-  let astr = string_of_addrmode addrmode in\n+  let astr = string_of_addrmode addrmode thumb update in\n   Printf.printf \"(define_insn \\\"*%s%s%d_%s%s\\\"\\n\"\n     (if thumb then \"thumb_\" else \"\") name nregs astr\n     (if update then \"_update\" else \"\");\n@@ -180,8 +191,10 @@ let write_pattern_1 name ls addrmode nregs write_set_fn update thumb =\n   Printf.printf \")]\\n  \\\"%s && XVECLEN (operands[0], 0) == %d\\\"\\n\"\n     (target addrmode thumb)\n     (if update then nregs + 1 else nregs);\n-  Printf.printf \"  \\\"%s%%(%s%%)\\\\t%%%d%s, {\"\n-    name astr (nregs + 1) (if update then \"!\" else \"\");\n+  if thumb then\n+      Printf.printf \"  \\\"%s%s\\\\t%%%d%s, {\"   name astr (nregs + 1) (if update then \"!\" else \"\")\n+   else\n+      Printf.printf \"  \\\"%s%s%%?\\\\t%%%d%s, {\"  name astr (nregs + 1) (if update then \"!\" else \"\");\n   for n = 1 to nregs; do\n     Printf.printf \"%%%d%s\" n (if n < nregs then \", \" else \"\")\n   done;"}, {"sha": "61e2aa23006365deb08b5cffec48343e0715be79", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 60, "deletions": 97, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -913,7 +913,7 @@ int arm_regs_in_sequence[] =\n   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n };\n \n-#define ARM_LSL_NAME (TARGET_UNIFIED_ASM ? \"lsl\" : \"asl\")\n+#define ARM_LSL_NAME \"lsl\"\n #define streq(string1, string2) (strcmp (string1, string2) == 0)\n \n #define THUMB2_WORK_REGS (0xff & ~(  (1 << THUMB_HARD_FRAME_POINTER_REGNUM) \\\n@@ -3566,10 +3566,7 @@ arm_warn_func_return (tree decl)\n static void\n arm_asm_trampoline_template (FILE *f)\n {\n-  if (TARGET_UNIFIED_ASM)\n-    fprintf (f, \"\\t.syntax unified\\n\");\n-  else\n-    fprintf (f, \"\\t.syntax divided\\n\");\n+  fprintf (f, \"\\t.syntax unified\\n\");\n \n   if (TARGET_ARM)\n     {\n@@ -17637,22 +17634,23 @@ arm_output_multireg_pop (rtx *operands, bool return_pc, rtx cond, bool reverse,\n     }\n \n   conditional = reverse ? \"%?%D0\" : \"%?%d0\";\n-  if ((regno_base == SP_REGNUM) && TARGET_THUMB)\n+  if ((regno_base == SP_REGNUM) && update)\n     {\n-      /* Output pop (not stmfd) because it has a shorter encoding.  */\n-      gcc_assert (update);\n       sprintf (pattern, \"pop%s\\t{\", conditional);\n     }\n   else\n     {\n       /* Output ldmfd when the base register is SP, otherwise output ldmia.\n          It's just a convention, their semantics are identical.  */\n       if (regno_base == SP_REGNUM)\n-        sprintf (pattern, \"ldm%sfd\\t\", conditional);\n-      else if (TARGET_UNIFIED_ASM)\n-        sprintf (pattern, \"ldmia%s\\t\", conditional);\n+\t  /* update is never true here, hence there is no need to handle\n+\t     pop here.  */\n+\tsprintf (pattern, \"ldmfd%s\", conditional);\n+\n+      if (update)\n+\tsprintf (pattern, \"ldmia%s\\t\", conditional);\n       else\n-        sprintf (pattern, \"ldm%sia\\t\", conditional);\n+\tsprintf (pattern, \"ldm%s\\t\", conditional);\n \n       strcat (pattern, reg_names[regno_base]);\n       if (update)\n@@ -17992,42 +17990,42 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t    {\n \t      if (TARGET_LDRD\n \t\t  && !(fix_cm3_ldrd && reg0 == REGNO(XEXP (operands[1], 0))))\n-\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1]\", operands);\n+\t\toutput_asm_insn (\"ldrd%?\\t%0, [%m1]\", operands);\n \t      else\n-\t\toutput_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n+\t\toutput_asm_insn (\"ldmia%?\\t%m1, %M0\", operands);\n \t    }\n \t  break;\n \n \tcase PRE_INC:\n \t  gcc_assert (TARGET_LDRD);\n \t  if (emit)\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1, #8]!\", operands);\n+\t    output_asm_insn (\"ldrd%?\\t%0, [%m1, #8]!\", operands);\n \t  break;\n \n \tcase PRE_DEC:\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1, #-8]!\", operands);\n+\t\toutput_asm_insn (\"ldrd%?\\t%0, [%m1, #-8]!\", operands);\n \t      else\n-\t\toutput_asm_insn (\"ldm%(db%)\\t%m1!, %M0\", operands);\n+\t\toutput_asm_insn (\"ldmdb%?\\t%m1!, %M0\", operands);\n \t    }\n \t  break;\n \n \tcase POST_INC:\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%m1], #8\", operands);\n+\t\toutput_asm_insn (\"ldrd%?\\t%0, [%m1], #8\", operands);\n \t      else\n-\t\toutput_asm_insn (\"ldm%(ia%)\\t%m1!, %M0\", operands);\n+\t\toutput_asm_insn (\"ldmia%?\\t%m1!, %M0\", operands);\n \t    }\n \t  break;\n \n \tcase POST_DEC:\n \t  gcc_assert (TARGET_LDRD);\n \t  if (emit)\n-\t    output_asm_insn (\"ldr%(d%)\\t%0, [%m1], #-8\", operands);\n+\t    output_asm_insn (\"ldrd%?\\t%0, [%m1], #-8\", operands);\n \t  break;\n \n \tcase PRE_MODIFY:\n@@ -18048,7 +18046,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t  if (emit)\n \t\t    {\n \t\t      output_asm_insn (\"add%?\\t%1, %1, %2\", otherops);\n-\t\t      output_asm_insn (\"ldr%(d%)\\t%0, [%1] @split\", otherops);\n+\t\t      output_asm_insn (\"ldrd%?\\t%0, [%1] @split\", otherops);\n \t\t    }\n \t\t  if (count)\n \t\t    *count = 2;\n@@ -18064,7 +18062,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t\t  && INTVAL (otherops[2]) < 256))\n \t\t    {\n \t\t      if (emit)\n-\t\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t\t\toutput_asm_insn (\"ldrd%?\\t%0, [%1, %2]!\", otherops);\n \t\t    }\n \t\t  else\n \t\t    {\n@@ -18090,7 +18088,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t      && INTVAL (otherops[2]) < 256))\n \t\t{\n \t\t  if (emit)\n-\t\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1], %2\", otherops);\n+\t\t    output_asm_insn (\"ldrd%?\\t%0, [%1], %2\", otherops);\n \t\t}\n \t      else\n \t\t{\n@@ -18119,9 +18117,9 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n+\t\toutput_asm_insn (\"ldrd%?\\t%0, [%1]\", operands);\n \t      else\n-\t\toutput_asm_insn (\"ldm%(ia%)\\t%1, %M0\", operands);\n+\t\toutput_asm_insn (\"ldmia%?\\t%1, %M0\", operands);\n \t    }\n \n \t  if (count)\n@@ -18145,19 +18143,19 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t\t{\n \t\t\tcase -8:\n \t\t\t  if (emit)\n-\t\t\t    output_asm_insn (\"ldm%(db%)\\t%1, %M0\", otherops);\n+\t\t\t    output_asm_insn (\"ldmdb%?\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\tcase -4:\n \t\t\t  if (TARGET_THUMB2)\n \t\t\t    break;\n \t\t\t  if (emit)\n-\t\t\t    output_asm_insn (\"ldm%(da%)\\t%1, %M0\", otherops);\n+\t\t\t    output_asm_insn (\"ldmda%?\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\tcase 4:\n \t\t\t  if (TARGET_THUMB2)\n \t\t\t    break;\n \t\t\t  if (emit)\n-\t\t\t    output_asm_insn (\"ldm%(ib%)\\t%1, %M0\", otherops);\n+\t\t\t    output_asm_insn (\"ldmib%?\\t%1, %M0\", otherops);\n \t\t\t  return \"\";\n \t\t\t}\n \t\t    }\n@@ -18185,7 +18183,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t\t  if (emit)\n \t\t\t    {\n \t\t\t      output_asm_insn (\"add%?\\t%0, %1, %2\", otherops);\n-\t\t\t      output_asm_insn (\"ldr%(d%)\\t%0, [%1]\", operands);\n+\t\t\t      output_asm_insn (\"ldrd%?\\t%0, [%1]\", operands);\n \t\t\t    }\n \t\t\t  if (count)\n \t\t\t    *count = 2;\n@@ -18194,7 +18192,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t\t{\n \t\t\t  otherops[0] = operands[0];\n \t\t\t  if (emit)\n-\t\t\t    output_asm_insn (\"ldr%(d%)\\t%0, [%1, %2]\", otherops);\n+\t\t\t    output_asm_insn (\"ldrd%?\\t%0, [%1, %2]\", otherops);\n \t\t\t}\n \t\t      return \"\";\n \t\t    }\n@@ -18225,9 +18223,9 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t*count = 2;\n \n \t      if (TARGET_LDRD)\n-\t\treturn \"ldr%(d%)\\t%0, [%1]\";\n+\t\treturn \"ldrd%?\\t%0, [%1]\";\n \n-\t      return \"ldm%(ia%)\\t%1, %M0\";\n+\t      return \"ldmia%?\\t%1, %M0\";\n \t    }\n \t  else\n \t    {\n@@ -18270,42 +18268,42 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0]\", operands);\n+\t\toutput_asm_insn (\"strd%?\\t%1, [%m0]\", operands);\n \t      else\n-\t\toutput_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n+\t\toutput_asm_insn (\"stm%?\\t%m0, %M1\", operands);\n \t    }\n \t  break;\n \n         case PRE_INC:\n \t  gcc_assert (TARGET_LDRD);\n \t  if (emit)\n-\t    output_asm_insn (\"str%(d%)\\t%1, [%m0, #8]!\", operands);\n+\t    output_asm_insn (\"strd%?\\t%1, [%m0, #8]!\", operands);\n \t  break;\n \n         case PRE_DEC:\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0, #-8]!\", operands);\n+\t\toutput_asm_insn (\"strd%?\\t%1, [%m0, #-8]!\", operands);\n \t      else\n-\t\toutput_asm_insn (\"stm%(db%)\\t%m0!, %M1\", operands);\n+\t\toutput_asm_insn (\"stmdb%?\\t%m0!, %M1\", operands);\n \t    }\n \t  break;\n \n         case POST_INC:\n \t  if (emit)\n \t    {\n \t      if (TARGET_LDRD)\n-\t\toutput_asm_insn (\"str%(d%)\\t%1, [%m0], #8\", operands);\n+\t\toutput_asm_insn (\"strd%?\\t%1, [%m0], #8\", operands);\n \t      else\n-\t\toutput_asm_insn (\"stm%(ia%)\\t%m0!, %M1\", operands);\n+\t\toutput_asm_insn (\"stm%?\\t%m0!, %M1\", operands);\n \t    }\n \t  break;\n \n         case POST_DEC:\n \t  gcc_assert (TARGET_LDRD);\n \t  if (emit)\n-\t    output_asm_insn (\"str%(d%)\\t%1, [%m0], #-8\", operands);\n+\t    output_asm_insn (\"strd%?\\t%1, [%m0], #-8\", operands);\n \t  break;\n \n \tcase PRE_MODIFY:\n@@ -18345,12 +18343,12 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t  else if (GET_CODE (XEXP (operands[0], 0)) == PRE_MODIFY)\n \t    {\n \t      if (emit)\n-\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1, %2]!\", otherops);\n+\t\toutput_asm_insn (\"strd%?\\t%0, [%1, %2]!\", otherops);\n \t    }\n \t  else\n \t    {\n \t      if (emit)\n-\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1], %2\", otherops);\n+\t\toutput_asm_insn (\"strd%?\\t%0, [%1], %2\", otherops);\n \t    }\n \t  break;\n \n@@ -18362,21 +18360,21 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t\t{\n \t\tcase -8:\n \t\t  if (emit)\n-\t\t    output_asm_insn (\"stm%(db%)\\t%m0, %M1\", operands);\n+\t\t    output_asm_insn (\"stmdb%?\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \n \t\tcase -4:\n \t\t  if (TARGET_THUMB2)\n \t\t    break;\n \t\t  if (emit)\n-\t\t    output_asm_insn (\"stm%(da%)\\t%m0, %M1\", operands);\n+\t\t    output_asm_insn (\"stmda%?\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \n \t\tcase 4:\n \t\t  if (TARGET_THUMB2)\n \t\t    break;\n \t\t  if (emit)\n-\t\t    output_asm_insn (\"stm%(ib%)\\t%m0, %M1\", operands);\n+\t\t    output_asm_insn (\"stmib%?\\t%m0, %M1\", operands);\n \t\t  return \"\";\n \t\t}\n \t    }\n@@ -18390,7 +18388,7 @@ output_move_double (rtx *operands, bool emit, int *count)\n \t      otherops[0] = operands[1];\n \t      otherops[1] = XEXP (XEXP (operands[0], 0), 0);\n \t      if (emit)\n-\t\toutput_asm_insn (\"str%(d%)\\t%0, [%1, %2]\", otherops);\n+\t\toutput_asm_insn (\"strd%?\\t%0, [%1, %2]\", otherops);\n \t      return \"\";\n \t    }\n \t  /* Fall through */\n@@ -18426,13 +18424,13 @@ output_move_quad (rtx *operands)\n           switch (GET_CODE (XEXP (operands[1], 0)))\n             {\n             case REG:\n-              output_asm_insn (\"ldm%(ia%)\\t%m1, %M0\", operands);\n+              output_asm_insn (\"ldmia%?\\t%m1, %M0\", operands);\n               break;\n \n             case LABEL_REF:\n             case CONST:\n               output_asm_insn (\"adr%?\\t%0, %1\", operands);\n-              output_asm_insn (\"ldm%(ia%)\\t%0, %M0\", operands);\n+              output_asm_insn (\"ldmia%?\\t%0, %M0\", operands);\n               break;\n \n             default:\n@@ -18476,7 +18474,7 @@ output_move_quad (rtx *operands)\n       switch (GET_CODE (XEXP (operands[0], 0)))\n         {\n         case REG:\n-          output_asm_insn (\"stm%(ia%)\\t%m0, %M1\", operands);\n+          output_asm_insn (\"stm%?\\t%m0, %M1\", operands);\n           break;\n \n         default:\n@@ -19510,28 +19508,19 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t      gcc_assert (stack_adjust == 0 || stack_adjust == 4);\n \n \t      if (stack_adjust && arm_arch5 && TARGET_ARM)\n-\t\tif (TARGET_UNIFIED_ASM)\n \t\t  sprintf (instr, \"ldmib%s\\t%%|sp, {\", conditional);\n-\t\telse\n-\t\t  sprintf (instr, \"ldm%sib\\t%%|sp, {\", conditional);\n \t      else\n \t\t{\n \t\t  /* If we can't use ldmib (SA110 bug),\n \t\t     then try to pop r3 instead.  */\n \t\t  if (stack_adjust)\n \t\t    live_regs_mask |= 1 << 3;\n \n-\t\t  if (TARGET_UNIFIED_ASM)\n-\t\t    sprintf (instr, \"ldmfd%s\\t%%|sp, {\", conditional);\n-\t\t  else\n-\t\t    sprintf (instr, \"ldm%sfd\\t%%|sp, {\", conditional);\n+\t\t  sprintf (instr, \"ldmfd%s\\t%%|sp, {\", conditional);\n \t\t}\n \t    }\n \t  else\n-\t    if (TARGET_UNIFIED_ASM)\n \t      sprintf (instr, \"pop%s\\t{\", conditional);\n-\t    else\n-\t      sprintf (instr, \"ldm%sfd\\t%%|sp!, {\", conditional);\n \n \t  p = instr + strlen (instr);\n \n@@ -21804,37 +21793,17 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       arm_print_condition (stream);\n       return;\n \n-    case '(':\n-      /* Nothing in unified syntax, otherwise the current condition code.  */\n-      if (!TARGET_UNIFIED_ASM)\n-\tarm_print_condition (stream);\n-      break;\n-\n-    case ')':\n-      /* The current condition code in unified syntax, otherwise nothing.  */\n-      if (TARGET_UNIFIED_ASM)\n-\tarm_print_condition (stream);\n-      break;\n-\n     case '.':\n       /* The current condition code for a condition code setting instruction.\n \t Preceded by 's' in unified syntax, otherwise followed by 's'.  */\n-      if (TARGET_UNIFIED_ASM)\n-\t{\n-\t  fputc('s', stream);\n-\t  arm_print_condition (stream);\n-\t}\n-      else\n-\t{\n-\t  arm_print_condition (stream);\n-\t  fputc('s', stream);\n-\t}\n+      fputc('s', stream);\n+      arm_print_condition (stream);\n       return;\n \n     case '!':\n       /* If the instruction is conditionally executed then print\n \t the current condition code, otherwise print 's'.  */\n-      gcc_assert (TARGET_THUMB2 && TARGET_UNIFIED_ASM);\n+      gcc_assert (TARGET_THUMB2);\n       if (current_insn_predicate)\n \tarm_print_condition (stream);\n       else\n@@ -27243,20 +27212,16 @@ arm_output_shift(rtx * operands, int set_flags)\n   char c;\n \n   c = flag_chars[set_flags];\n-  if (TARGET_UNIFIED_ASM)\n+  shift = shift_op(operands[3], &val);\n+  if (shift)\n     {\n-      shift = shift_op(operands[3], &val);\n-      if (shift)\n-\t{\n-\t  if (val != -1)\n-\t    operands[2] = GEN_INT(val);\n-\t  sprintf (pattern, \"%s%%%c\\t%%0, %%1, %%2\", shift, c);\n-\t}\n-      else\n-\tsprintf (pattern, \"mov%%%c\\t%%0, %%1\", c);\n+      if (val != -1)\n+\toperands[2] = GEN_INT(val);\n+      sprintf (pattern, \"%s%%%c\\t%%0, %%1, %%2\", shift, c);\n     }\n   else\n-    sprintf (pattern, \"mov%%%c\\t%%0, %%1%%S3\", c);\n+    sprintf (pattern, \"mov%%%c\\t%%0, %%1\", c);\n+\n   output_asm_insn (pattern, operands);\n   return \"\";\n }\n@@ -30005,10 +29970,8 @@ arm_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n void\n arm_declare_function_name (FILE *stream, const char *name, tree decl)\n {\n-  if (TARGET_UNIFIED_ASM)\n-    fprintf (stream, \"\\t.syntax unified\\n\");\n-  else\n-    fprintf (stream, \"\\t.syntax divided\\n\");\n+\n+  fprintf (stream, \"\\t.syntax unified\\n\");\n \n   if (TARGET_THUMB)\n     {"}, {"sha": "a1a04a94ef2f584d23f2819da8e349ba528691f4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -237,10 +237,6 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n    && (arm_disable_literal_pool \\\n        || (!optimize_size && !current_tune->prefer_constant_pool)))\n \n-/* We could use unified syntax for arm mode, but for now we just use it\n-   for thumb mode.  */\n-#define TARGET_UNIFIED_ASM (TARGET_THUMB)\n-\n /* Nonzero if this chip provides the DMB instruction.  */\n #define TARGET_HAVE_DMB\t\t(arm_arch6m || arm_arch7)\n \n@@ -2023,8 +2019,7 @@ extern int making_const_table;\n \t\t    \"\\t.syntax divided\\n\")\n \n #undef  ASM_APP_OFF\n-#define ASM_APP_OFF (TARGET_ARM ? \"\\t.arm\\n\\t.syntax divided\\n\" : \\\n-\t\t     \"\\t.thumb\\n\\t.syntax unified\\n\")\n+#define ASM_APP_OFF \"\\t.syntax unified\\n\"\n \n /* Output a push or a pop instruction (only used when profiling).\n    We can't push STATIC_CHAIN_REGNUM (r12) directly with Thumb-1.  We know\n@@ -2035,10 +2030,7 @@ extern int making_const_table;\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      if (TARGET_ARM)\t\t\t\t\t\\\n-\tasm_fprintf (STREAM,\"\\tstmfd\\t%r!,{%r}\\n\",\t\\\n-\t\t     STACK_POINTER_REGNUM, REGNO);\t\\\n-      else if (TARGET_THUMB1\t\t\t\t\\\n+      if (TARGET_THUMB1\t\t\t\t\t\\\n \t       && (REGNO) == STATIC_CHAIN_REGNUM)\t\\\n \t{\t\t\t\t\t\t\\\n \t  asm_fprintf (STREAM, \"\\tpush\\t{r7}\\n\");\t\\\n@@ -2054,11 +2046,8 @@ extern int making_const_table;\n #define ASM_OUTPUT_REG_POP(STREAM, REGNO)\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      if (TARGET_ARM)\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"\\tldmfd\\t%r!,{%r}\\n\",\t\\\n-\t\t     STACK_POINTER_REGNUM, REGNO);\t\\\n-      else if (TARGET_THUMB1\t\t\t\t\\\n-\t       && (REGNO) == STATIC_CHAIN_REGNUM)\t\\\n+      if (TARGET_THUMB1\t\t\t\t\t\\\n+\t  && (REGNO) == STATIC_CHAIN_REGNUM)\t\t\\\n \t{\t\t\t\t\t\t\\\n \t  asm_fprintf (STREAM, \"\\tpop\\t{r7}\\n\");\t\\\n \t  asm_fprintf (STREAM, \"\\tmov\\t%r, r7\\n\", REGNO);\\"}, {"sha": "e087c1ab166e4819c2016db21ab760ab22d9d899", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 77, "deletions": 85, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -622,9 +622,9 @@\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ARM\"\n   \"@\n-   add%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, #%n2\n-   add%.\\\\t%0, %1, %2\"\n+   adds%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, #%n2\n+   adds%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_imm,alus_imm,alus_sreg\")]\n )\n@@ -672,8 +672,8 @@\n \t\t (match_operand:SI 3 \"arm_addimm_operand\" \"I,L\")))]\n   \"TARGET_32BIT && INTVAL (operands[2]) == -INTVAL (operands[3])\"\n   \"@\n-   add%.\\\\t%0, %1, %3\n-   sub%.\\\\t%0, %1, #%n3\"\n+   adds%?\\\\t%0, %1, %3\n+   subs%?\\\\t%0, %1, #%n3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_sreg\")]\n )\n@@ -729,9 +729,9 @@\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   add%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, #%n2\n-   add%.\\\\t%0, %1, %2\"\n+   adds%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, #%n2\n+   adds%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\"  \"alus_imm,alus_imm,alus_sreg\")]\n )\n@@ -746,9 +746,9 @@\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   add%.\\\\t%0, %1, %2\n-   add%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, #%n2\"\n+   adds%?\\\\t%0, %1, %2\n+   adds%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, #%n2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_imm,alus_imm,alus_sreg\")]\n )\n@@ -856,7 +856,7 @@\n \t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))\n    (clobber (reg:CC CC_REGNUM))]\n    \"TARGET_32BIT\"\n-   \"adc%.\\\\t%0, %1, %2\"\n+   \"adcs%?\\\\t%0, %1, %2\"\n    [(set_attr \"conds\" \"set\")\n     (set_attr \"type\" \"adcs_reg\")]\n )\n@@ -1239,9 +1239,9 @@\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   sub%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, %2\n-   rsb%.\\\\t%0, %2, %1\"\n+   subs%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, %2\n+   rsbs%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\"  \"alus_imm,alus_sreg,alus_sreg\")]\n )\n@@ -1254,9 +1254,9 @@\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   sub%.\\\\t%0, %1, %2\n-   sub%.\\\\t%0, %1, %2\n-   rsb%.\\\\t%0, %2, %1\"\n+   subs%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, %2\n+   rsbs%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_imm,alus_sreg,alus_sreg\")]\n )\n@@ -1335,7 +1335,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n \t(mult:SI (match_dup 2) (match_dup 1)))]\n   \"TARGET_ARM && !arm_arch6\"\n-  \"mul%.\\\\t%0, %2, %1\"\n+  \"muls%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"muls\")]\n )\n@@ -1349,7 +1349,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(mult:SI (match_dup 2) (match_dup 1)))]\n   \"TARGET_ARM && arm_arch6 && optimize_size\"\n-  \"mul%.\\\\t%0, %2, %1\"\n+  \"muls%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"muls\")]\n )\n@@ -1362,7 +1362,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r\"))]\n   \"TARGET_ARM && !arm_arch6\"\n-  \"mul%.\\\\t%0, %2, %1\"\n+  \"muls%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"muls\")]\n )\n@@ -1375,7 +1375,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM && arm_arch6 && optimize_size\"\n-  \"mul%.\\\\t%0, %2, %1\"\n+  \"muls%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"muls\")]\n )\n@@ -1419,7 +1419,7 @@\n \t(plus:SI (mult:SI (match_dup 2) (match_dup 1))\n \t\t (match_dup 3)))]\n   \"TARGET_ARM && arm_arch6\"\n-  \"mla%.\\\\t%0, %2, %1, %3\"\n+  \"mlas%?\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mlas\")]\n )\n@@ -1436,7 +1436,7 @@\n \t(plus:SI (mult:SI (match_dup 2) (match_dup 1))\n \t\t (match_dup 3)))]\n   \"TARGET_ARM && arm_arch6 && optimize_size\"\n-  \"mla%.\\\\t%0, %2, %1, %3\"\n+  \"mlas%?\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mlas\")]\n )\n@@ -1451,7 +1451,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r,&r,&r\"))]\n   \"TARGET_ARM && !arm_arch6\"\n-  \"mla%.\\\\t%0, %2, %1, %3\"\n+  \"mlas%?\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mlas\")]\n )\n@@ -1466,7 +1466,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM && arm_arch6 && optimize_size\"\n-  \"mla%.\\\\t%0, %2, %1, %3\"\n+  \"mlas%?\\\\t%0, %2, %1, %3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mlas\")]\n )\n@@ -2195,9 +2195,9 @@\n \t(and:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   and%.\\\\t%0, %1, %2\n-   bic%.\\\\t%0, %1, #%B2\n-   and%.\\\\t%0, %1, %2\"\n+   ands%?\\\\t%0, %1, %2\n+   bics%?\\\\t%0, %1, #%B2\n+   ands%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_imm,logics_imm,logics_reg\")]\n )\n@@ -2212,7 +2212,7 @@\n   \"TARGET_32BIT\"\n   \"@\n    tst%?\\\\t%0, %1\n-   bic%.\\\\t%2, %0, #%B1\n+   bics%?\\\\t%2, %0, #%B1\n    tst%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\"  \"logics_imm,logics_imm,logics_reg\")]\n@@ -2796,7 +2796,7 @@\n \t\t(const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n   \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n-  \"bic%.%?\\\\t%4, %3, %1%S0\"\n+  \"bics%?\\\\t%4, %3, %1%S0\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"conds\" \"set\")\n@@ -2822,7 +2822,7 @@\n \t\t      (match_dup 2)]))\n \t\t     (match_dup 3)))])]\n   \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n-  \"bic%.%?\\\\t%4, %3, %1%S0\"\n+  \"bics%?\\\\t%4, %3, %1%S0\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"conds\" \"set\")\n@@ -2841,7 +2841,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_dup 2)) (match_dup 1)))]\n   \"TARGET_32BIT\"\n-  \"bic%.\\\\t%0, %1, %2\"\n+  \"bics\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_shift_reg\")]\n )\n@@ -2854,7 +2854,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_32BIT\"\n-  \"bic%.\\\\t%0, %1, %2\"\n+  \"bics\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_shift_reg\")]\n )\n@@ -3023,7 +3023,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(ior:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n-  \"orr%.\\\\t%0, %1, %2\"\n+  \"orrs%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n@@ -3035,7 +3035,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n-  \"orr%.\\\\t%0, %1, %2\"\n+  \"orrs%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n@@ -3182,7 +3182,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n-  \"eor%.\\\\t%0, %1, %2\"\n+  \"eors%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_imm,logics_reg\")]\n )\n@@ -4066,7 +4066,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n   \"TARGET_32BIT\"\n-  \"mvn%.\\\\t%0, %1%S3\"\n+  \"mvns%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"arch\" \"32,a\")\n@@ -4081,7 +4081,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n-  \"mvn%.\\\\t%0, %1%S3\"\n+  \"mvns%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"arch\" \"32,a\")\n@@ -4271,7 +4271,7 @@\n \t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,Uh\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n   \"unaligned_access && TARGET_32BIT\"\n-  \"ldr%(sh%)\\t%0, %1\\t@ unaligned\"\n+  \"ldrsh%?\\t%0, %1\\t@ unaligned\"\n   [(set_attr \"arch\" \"t2,any\")\n    (set_attr \"length\" \"2,4\")\n    (set_attr \"predicable\" \"yes\")\n@@ -4284,7 +4284,7 @@\n \t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,m\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n   \"unaligned_access && TARGET_32BIT\"\n-  \"ldr%(h%)\\t%0, %1\\t@ unaligned\"\n+  \"ldrh%?\\t%0, %1\\t@ unaligned\"\n   [(set_attr \"arch\" \"t2,any\")\n    (set_attr \"length\" \"2,4\")\n    (set_attr \"predicable\" \"yes\")\n@@ -4308,7 +4308,7 @@\n \t(unspec:HI [(match_operand:HI 1 \"s_register_operand\" \"l,r\")]\n \t\t   UNSPEC_UNALIGNED_STORE))]\n   \"unaligned_access && TARGET_32BIT\"\n-  \"str%(h%)\\t%1, %0\\t@ unaligned\"\n+  \"strh%?\\t%1, %0\\t@ unaligned\"\n   [(set_attr \"arch\" \"t2,any\")\n    (set_attr \"length\" \"2,4\")\n    (set_attr \"predicable\" \"yes\")\n@@ -4818,7 +4818,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_dup 1)))]\n   \"TARGET_32BIT\"\n-  \"mvn%.\\\\t%0, %1\"\n+  \"mvns%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mvn_reg\")]\n )\n@@ -4829,7 +4829,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_32BIT\"\n-  \"mvn%.\\\\t%0, %1\"\n+  \"mvns%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"mvn_reg\")]\n )\n@@ -5060,7 +5060,7 @@\n   \"TARGET_ARM && arm_arch4 && !arm_arch6\"\n   \"@\n    #\n-   ldr%(h%)\\\\t%0, %1\"\n+   ldrh%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -5071,7 +5071,7 @@\n   \"TARGET_ARM && arm_arch6\"\n   \"@\n    uxth%?\\\\t%0, %1\n-   ldr%(h%)\\\\t%0, %1\"\n+   ldrh%?\\\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"extend,load_byte\")]\n )\n@@ -5130,7 +5130,7 @@\n   \"TARGET_ARM && !arm_arch6\"\n   \"@\n    #\n-   ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n+   ldrb%?\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -5141,8 +5141,8 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,Uh\")))]\n   \"TARGET_ARM && arm_arch6\"\n   \"@\n-   uxtb%(%)\\\\t%0, %1\n-   ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n+   uxtb%?\\\\t%0, %1\n+   ldrb%?\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -5302,7 +5302,7 @@\n   \"TARGET_ARM && arm_arch4 && !arm_arch6\"\n   \"@\n    #\n-   ldr%(sh%)\\\\t%0, %1\"\n+   ldrsh%?\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -5315,7 +5315,7 @@\n   \"TARGET_32BIT && arm_arch6\"\n   \"@\n    sxth%?\\\\t%0, %1\n-   ldr%(sh%)\\\\t%0, %1\"\n+   ldrsh%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")]\n@@ -5358,7 +5358,7 @@\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"arm_extendqisi_mem_op\" \"Uq\")))]\n   \"TARGET_ARM && arm_arch4\"\n-  \"ldr%(sb%)\\\\t%0, %1\"\n+  \"ldrsb%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -5397,7 +5397,7 @@\n   \"TARGET_ARM && arm_arch4 && !arm_arch6\"\n   \"@\n    #\n-   ldr%(sb%)\\\\t%0, %1\"\n+   ldrsb%?\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n    (set_attr \"type\" \"alu_shift_reg,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -5410,7 +5410,7 @@\n   \"TARGET_ARM && arm_arch6\"\n   \"@\n    sxtb%?\\\\t%0, %1\n-   ldr%(sb%)\\\\t%0, %1\"\n+   ldrsb%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n@@ -6065,7 +6065,7 @@\n   \"TARGET_32BIT\"\n   \"@\n    cmp%?\\\\t%0, #0\n-   sub%.\\\\t%0, %1, #0\"\n+   subs%?\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"alus_imm,alus_imm\")]\n )\n@@ -6441,8 +6441,8 @@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\n    movw%?\\\\t%0, %L1\\\\t%@ movhi\n-   str%(h%)\\\\t%1, %0\\\\t%@ movhi\n-   ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n+   strh%?\\\\t%1, %0\\\\t%@ movhi\n+   ldrh%?\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,*,256\")\n    (set_attr \"neg_pool_range\" \"*,*,*,*,244\")\n@@ -6584,10 +6584,10 @@\n    mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n-   ldr%(b%)\\\\t%0, %1\n-   str%(b%)\\\\t%1, %0\n-   ldr%(b%)\\\\t%0, %1\n-   str%(b%)\\\\t%1, %0\"\n+   ldrb%?\\\\t%0, %1\n+   strb%?\\\\t%1, %0\n+   ldrb%?\\\\t%0, %1\n+   strb%?\\\\t%1, %0\"\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_imm,mov_imm,mvn_imm,load1,store1,load1,store1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,no,no,no,no,no,no\")\n@@ -6627,9 +6627,9 @@\n   switch (which_alternative)\n     {\n     case 0:\t/* ARM register from memory */\n-      return \\\"ldr%(h%)\\\\t%0, %1\\\\t%@ __fp16\\\";\n+      return \\\"ldrh%?\\\\t%0, %1\\\\t%@ __fp16\\\";\n     case 1:\t/* memory from ARM register */\n-      return \\\"str%(h%)\\\\t%1, %0\\\\t%@ __fp16\\\";\n+      return \\\"strh%?\\\\t%1, %0\\\\t%@ __fp16\\\";\n     case 2:\t/* ARM register from ARM register */\n       return \\\"mov%?\\\\t%0, %1\\\\t%@ __fp16\\\";\n     case 3:\t/* ARM register from constant */\n@@ -7141,7 +7141,7 @@\n \t\t      (const_int 0)))\n    (clobber (match_scratch:SI 1 \"=r\"))]\n   \"TARGET_32BIT\"\n-  \"orr%.\\\\t%1, %Q0, %R0\"\n+  \"orrs%?\\\\t%1, %Q0, %R0\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"type\" \"logics_reg\")]\n )\n@@ -8385,13 +8385,7 @@\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"TARGET_EITHER\"\n-  \"*\n-  if (TARGET_UNIFIED_ASM)\n-    return \\\"nop\\\";\n-  if (TARGET_ARM)\n-    return \\\"mov%?\\\\t%|r0, %|r0\\\\t%@ nop\\\";\n-  return  \\\"mov\\\\tr8, r8\\\";\n-  \"\n+  \"nop\"\n   [(set (attr \"length\")\n \t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n \t\t      (const_int 2)\n@@ -8479,7 +8473,7 @@\n \t(match_op_dup 1 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n \t\t\t (match_dup 2)]))]\n   \"TARGET_32BIT\"\n-  \"%i1%.\\\\t%0, %2, %4%S3\"\n+  \"%i1s%?\\\\t%0, %2, %4%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n@@ -8496,7 +8490,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n-  \"%i1%.\\\\t%0, %2, %4%S3\"\n+  \"%i1s%?\\\\t%0, %2, %4%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n@@ -8527,7 +8521,7 @@\n \t(minus:SI (match_dup 1)\n \t\t  (match_op_dup 2 [(match_dup 3) (match_dup 4)])))]\n   \"TARGET_32BIT\"\n-  \"sub%.\\\\t%0, %1, %3%S2\"\n+  \"subs%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a,a\")\n@@ -8543,7 +8537,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r,r,r\"))]\n   \"TARGET_32BIT\"\n-  \"sub%.\\\\t%0, %1, %3%S2\"\n+  \"subs%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a,a\")\n@@ -10247,17 +10241,17 @@\n \tif (val1 == 4 || val2 == 4)\n \t  /* Other val must be 8, since we know they are adjacent and neither\n \t     is zero.  */\n-\t  output_asm_insn (\\\"ldm%(ib%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t  output_asm_insn (\\\"ldmib%?\\\\t%0, {%1, %2}\\\", ldm);\n \telse if (const_ok_for_arm (val1) || const_ok_for_arm (-val1))\n \t  {\n \t    ldm[0] = ops[0] = operands[4];\n \t    ops[1] = base_reg;\n \t    ops[2] = GEN_INT (val1);\n \t    output_add_immediate (ops);\n \t    if (val1 < val2)\n-\t      output_asm_insn (\\\"ldm%(ia%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t      output_asm_insn (\\\"ldmia%?\\\\t%0, {%1, %2}\\\", ldm);\n \t    else\n-\t      output_asm_insn (\\\"ldm%(da%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t      output_asm_insn (\\\"ldmda%?\\\\t%0, {%1, %2}\\\", ldm);\n \t  }\n \telse\n \t  {\n@@ -10274,16 +10268,16 @@\n     else if (val1 != 0)\n       {\n \tif (val1 < val2)\n-\t  output_asm_insn (\\\"ldm%(da%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t  output_asm_insn (\\\"ldmda%?\\\\t%0, {%1, %2}\\\", ldm);\n \telse\n-\t  output_asm_insn (\\\"ldm%(ia%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t  output_asm_insn (\\\"ldmia%?\\\\t%0, {%1, %2}\\\", ldm);\n       }\n     else\n       {\n \tif (val1 < val2)\n-\t  output_asm_insn (\\\"ldm%(ia%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t  output_asm_insn (\\\"ldmia%?\\\\t%0, {%1, %2}\\\", ldm);\n \telse\n-\t  output_asm_insn (\\\"ldm%(da%)\\\\t%0, {%1, %2}\\\", ldm);\n+\t  output_asm_insn (\\\"ldmda%?\\\\t%0, {%1, %2}\\\", ldm);\n       }\n     output_asm_insn (\\\"%I3%?\\\\t%0, %1, %2\\\", arith);\n     return \\\"\\\";\n@@ -10619,9 +10613,7 @@\n \tint i;\n \tchar pattern[100];\n \n-\tif (TARGET_ARM)\n-\t    strcpy (pattern, \\\"stm%(fd%)\\\\t%m0!, {%1\\\");\n-\telse if (TARGET_THUMB2)\n+\tif (TARGET_32BIT)\n \t    strcpy (pattern, \\\"push%?\\\\t{%1\\\");\n \telse\n \t    strcpy (pattern, \\\"push\\\\t{%1\\\");"}, {"sha": "c12f2b13a0317b3227df9800de3bae18c87b27c3", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -280,4 +280,4 @@ Assume loading data from flash is slower than fetching instructions.\n \n masm-syntax-unified\n Target Report Var(inline_asm_unified) Init(0) Save\n-Assume unified syntax for Thumb inline assembly code.\n+Assume unified syntax for inline assembly code."}, {"sha": "ebb09ab86e799f3606e0988980edf3cd0189272b", "filename": "gcc/config/arm/ldmstm.md", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fldmstm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fldmstm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fldmstm.md?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -21,7 +21,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-(define_insn \"*ldm4_ia\"\n+(define_insn \"*ldm4_\"\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 5 \"s_register_operand\" \"rk\")))\n@@ -35,7 +35,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ia%)\\t%5, {%1, %2, %3, %4}\"\n+  \"ldm%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -54,7 +54,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ia%)\\t%5, {%1, %2, %3, %4}\"\n+  \"ldmia\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")])\n \n (define_insn \"*ldm4_ia_update\"\n@@ -73,7 +73,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n-  \"ldm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"ldmia%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -94,10 +94,10 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 12))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 5\"\n-  \"ldm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"ldmia\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")])\n \n-(define_insn \"*stm4_ia\"\n+(define_insn \"*stm4_\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 5 \"s_register_operand\" \"rk\"))\n           (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n@@ -108,7 +108,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(ia%)\\t%5, {%1, %2, %3, %4}\"\n+  \"stm%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -126,7 +126,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n-  \"stm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"stmia%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -144,7 +144,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 12)))\n           (match_operand:SI 4 \"low_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 5\"\n-  \"stm%(ia%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"stmia\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")])\n \n (define_insn \"*ldm4_ib\"\n@@ -162,7 +162,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 16))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ib%)\\t%5, {%1, %2, %3, %4}\"\n+  \"ldmib%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -183,7 +183,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int 16))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n-  \"ldm%(ib%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"ldmib%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -198,7 +198,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 16)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(ib%)\\t%5, {%1, %2, %3, %4}\"\n+  \"stmib%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -215,7 +215,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int 16)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n-  \"stm%(ib%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"stmib%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -233,7 +233,7 @@\n      (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(da%)\\t%5, {%1, %2, %3, %4}\"\n+  \"ldmda%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -253,7 +253,7 @@\n      (set (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 5)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n-  \"ldm%(da%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"ldmda%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -268,7 +268,7 @@\n      (set (mem:SI (match_dup 5))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(da%)\\t%5, {%1, %2, %3, %4}\"\n+  \"stmda%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -285,7 +285,7 @@\n      (set (mem:SI (match_dup 5))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 5\"\n-  \"stm%(da%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"stmda%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -304,7 +304,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(db%)\\t%5, {%1, %2, %3, %4}\"\n+  \"ldmdb%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -326,7 +326,7 @@\n           (mem:SI (plus:SI (match_dup 5)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n-  \"ldm%(db%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"ldmdb%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"load4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -342,7 +342,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(db%)\\t%5, {%1, %2, %3, %4}\"\n+  \"stmdb%?\\t%5, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -360,7 +360,7 @@\n      (set (mem:SI (plus:SI (match_dup 5) (const_int -4)))\n           (match_operand:SI 4 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 5\"\n-  \"stm%(db%)\\t%5!, {%1, %2, %3, %4}\"\n+  \"stmdb%?\\t%5!, {%1, %2, %3, %4}\"\n   [(set_attr \"type\" \"store4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -472,7 +472,7 @@\n     FAIL;\n })\n \n-(define_insn \"*ldm3_ia\"\n+(define_insn \"*ldm3_\"\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 4 \"s_register_operand\" \"rk\")))\n@@ -483,7 +483,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ia%)\\t%4, {%1, %2, %3}\"\n+  \"ldm%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -499,7 +499,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ia%)\\t%4, {%1, %2, %3}\"\n+  \"ldmia\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")])\n \n (define_insn \"*ldm3_ia_update\"\n@@ -515,7 +515,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ia%)\\t%4!, {%1, %2, %3}\"\n+  \"ldmia%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -533,10 +533,10 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 8))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ia%)\\t%4!, {%1, %2, %3}\"\n+  \"ldmia\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")])\n \n-(define_insn \"*stm3_ia\"\n+(define_insn \"*stm3_\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 4 \"s_register_operand\" \"rk\"))\n           (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n@@ -545,7 +545,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(ia%)\\t%4, {%1, %2, %3}\"\n+  \"stm%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -561,7 +561,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(ia%)\\t%4!, {%1, %2, %3}\"\n+  \"stmia%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -577,7 +577,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 8)))\n           (match_operand:SI 3 \"low_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(ia%)\\t%4!, {%1, %2, %3}\"\n+  \"stmia\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")])\n \n (define_insn \"*ldm3_ib\"\n@@ -592,7 +592,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 12))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ib%)\\t%4, {%1, %2, %3}\"\n+  \"ldmib%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -610,7 +610,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int 12))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(ib%)\\t%4!, {%1, %2, %3}\"\n+  \"ldmib%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -623,7 +623,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 12)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(ib%)\\t%4, {%1, %2, %3}\"\n+  \"stmib%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -638,7 +638,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int 12)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(ib%)\\t%4!, {%1, %2, %3}\"\n+  \"stmib%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -653,7 +653,7 @@\n      (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(da%)\\t%4, {%1, %2, %3}\"\n+  \"ldmda%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -670,7 +670,7 @@\n      (set (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 4)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(da%)\\t%4!, {%1, %2, %3}\"\n+  \"ldmda%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -683,7 +683,7 @@\n      (set (mem:SI (match_dup 4))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(da%)\\t%4, {%1, %2, %3}\"\n+  \"stmda%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -698,7 +698,7 @@\n      (set (mem:SI (match_dup 4))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(da%)\\t%4!, {%1, %2, %3}\"\n+  \"stmda%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -714,7 +714,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(db%)\\t%4, {%1, %2, %3}\"\n+  \"ldmdb%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -733,7 +733,7 @@\n           (mem:SI (plus:SI (match_dup 4)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"ldm%(db%)\\t%4!, {%1, %2, %3}\"\n+  \"ldmdb%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"load3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -747,7 +747,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(db%)\\t%4, {%1, %2, %3}\"\n+  \"stmdb%?\\t%4, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -763,7 +763,7 @@\n      (set (mem:SI (plus:SI (match_dup 4) (const_int -4)))\n           (match_operand:SI 3 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 4\"\n-  \"stm%(db%)\\t%4!, {%1, %2, %3}\"\n+  \"stmdb%?\\t%4!, {%1, %2, %3}\"\n   [(set_attr \"type\" \"store3\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -861,15 +861,15 @@\n     FAIL;\n })\n \n-(define_insn \"*ldm2_ia\"\n+(define_insn \"*ldm2_\"\n   [(match_parallel 0 \"load_multiple_operation\"\n     [(set (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_operand:SI 3 \"s_register_operand\" \"rk\")))\n      (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n-  \"ldm%(ia%)\\t%3, {%1, %2}\"\n+  \"ldm%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -882,7 +882,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 2\"\n-  \"ldm%(ia%)\\t%3, {%1, %2}\"\n+  \"ldmia\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")])\n \n (define_insn \"*ldm2_ia_update\"\n@@ -895,7 +895,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ia%)\\t%3!, {%1, %2}\"\n+  \"ldmia%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -910,17 +910,17 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 4))))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ia%)\\t%3!, {%1, %2}\"\n+  \"ldmia\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")])\n \n-(define_insn \"*stm2_ia\"\n+(define_insn \"*stm2_\"\n   [(match_parallel 0 \"store_multiple_operation\"\n     [(set (mem:SI (match_operand:SI 3 \"s_register_operand\" \"rk\"))\n           (match_operand:SI 1 \"arm_hard_general_register_operand\" \"\"))\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n-  \"stm%(ia%)\\t%3, {%1, %2}\"\n+  \"stm%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -934,7 +934,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(ia%)\\t%3!, {%1, %2}\"\n+  \"stmia%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -948,7 +948,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 4)))\n           (match_operand:SI 2 \"low_register_operand\" \"\"))])]\n   \"TARGET_THUMB1 && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(ia%)\\t%3!, {%1, %2}\"\n+  \"stmia\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")])\n \n (define_insn \"*ldm2_ib\"\n@@ -960,7 +960,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 8))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n-  \"ldm%(ib%)\\t%3, {%1, %2}\"\n+  \"ldmib%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -975,7 +975,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int 8))))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(ib%)\\t%3!, {%1, %2}\"\n+  \"ldmib%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -986,7 +986,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 8)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n-  \"stm%(ib%)\\t%3, {%1, %2}\"\n+  \"stmib%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -999,7 +999,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int 8)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(ib%)\\t%3!, {%1, %2}\"\n+  \"stmib%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -1011,7 +1011,7 @@\n      (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n-  \"ldm%(da%)\\t%3, {%1, %2}\"\n+  \"ldmda%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -1025,7 +1025,7 @@\n      (set (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\")\n           (mem:SI (match_dup 3)))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(da%)\\t%3!, {%1, %2}\"\n+  \"ldmda%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -1036,7 +1036,7 @@\n      (set (mem:SI (match_dup 3))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 2\"\n-  \"stm%(da%)\\t%3, {%1, %2}\"\n+  \"stmda%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -1049,7 +1049,7 @@\n      (set (mem:SI (match_dup 3))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_ARM && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(da%)\\t%3!, {%1, %2}\"\n+  \"stmda%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")])\n \n@@ -1062,7 +1062,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n-  \"ldm%(db%)\\t%3, {%1, %2}\"\n+  \"ldmdb%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -1078,7 +1078,7 @@\n           (mem:SI (plus:SI (match_dup 3)\n                   (const_int -4))))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"ldm%(db%)\\t%3!, {%1, %2}\"\n+  \"ldmdb%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"load2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -1090,7 +1090,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 2\"\n-  \"stm%(db%)\\t%3, {%1, %2}\"\n+  \"stmdb%?\\t%3, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -1104,7 +1104,7 @@\n      (set (mem:SI (plus:SI (match_dup 3) (const_int -4)))\n           (match_operand:SI 2 \"arm_hard_general_register_operand\" \"\"))])]\n   \"TARGET_32BIT && XVECLEN (operands[0], 0) == 3\"\n-  \"stm%(db%)\\t%3!, {%1, %2}\"\n+  \"stmdb%?\\t%3!, {%1, %2}\"\n   [(set_attr \"type\" \"store2\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])"}, {"sha": "fc7836fea7cc1d4d1d732790ba5ab0eb40a01561", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -72,7 +72,7 @@\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_release (model))\n-      return \\\"ldr%(<sync_sfx>%)\\\\t%0, %1\\\";\n+      return \\\"ldr<sync_sfx>%?\\\\t%0, %1\\\";\n     else\n       return \\\"lda<sync_sfx>%?\\\\t%0, %1\\\";\n   }\n@@ -89,7 +89,7 @@\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_acquire (model))\n-      return \\\"str%(<sync_sfx>%)\\t%1, %0\\\";\n+      return \\\"str<sync_sfx>%?\\t%1, %0\\\";\n     else\n       return \\\"stl<sync_sfx>%?\\t%1, %0\\\";\n   }"}, {"sha": "a724752a39cf2862c68a53ef28a239de2ae1ed96", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -330,8 +330,8 @@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    movw%?\\\\t%0, %L1\\\\t%@ movhi\n-   str%(h%)\\\\t%1, %0\\\\t%@ movhi\n-   ldr%(h%)\\\\t%0, %1\\\\t%@ movhi\"\n+   strh%?\\\\t%1, %0\\\\t%@ movhi\n+   ldrh%?\\\\t%0, %1\\\\t%@ movhi\"\n   [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,mov_imm,store1,load1\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no\")\n@@ -1028,7 +1028,7 @@\n   \"TARGET_THUMB2 && arm_arch6\"\n   \"@\n    sxtb%?\\\\t%0, %1\n-   ldr%(sb%)\\\\t%0, %1\"\n+   ldrsb%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n@@ -1042,7 +1042,7 @@\n   \"TARGET_THUMB2 && arm_arch6\"\n   \"@\n    uxth%?\\\\t%0, %1\n-   ldr%(h%)\\\\t%0, %1\"\n+   ldrh%?\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n@@ -1055,8 +1055,8 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"TARGET_THUMB2 && arm_arch6\"\n   \"@\n-   uxtb%(%)\\\\t%0, %1\n-   ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n+   uxtb%?\\\\t%0, %1\n+   ldrb%?\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")"}, {"sha": "2e5953bc4fbb73d7869fecc7d7cde8d156b1bf5b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -13757,10 +13757,9 @@ off by default.\n @item -masm-syntax-unified\n @opindex masm-syntax-unified\n Assume inline assembler is using unified asm syntax.  The default is\n-currently off which implies divided syntax.  Currently this option is\n-available only for Thumb1 and has no effect on ARM state and Thumb2.\n-However, this may change in future releases of GCC.  Divided syntax\n-should be considered deprecated.\n+currently off which implies divided syntax.  This option has no impact\n+on Thumb2. However, this may change in future releases of GCC.\n+Divided syntax should be considered deprecated.\n \n @item -mrestrict-it\n @opindex mrestrict-it"}, {"sha": "efa3146aac80b5b7da295a9ca569f50a269c4452", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -1,3 +1,10 @@\n+2015-11-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* gcc.target/arm/combine-movs.c: Adjust for unified asm.\n+\t* gcc.target/arm/interrupt-1.c: Likewise.\n+\t* gcc.target/arm/interrupt-2.c: Likewise.\n+\t* gcc.target/arm/unaligned-memcpy-4.c: Likewise.\n+\n 2015-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gfortran.dg/goacc/combined_loop.f90: XFAIL."}, {"sha": "3487743257c17b5628810ebb6e0656e930e5b592", "filename": "gcc/testsuite/gcc.target/arm/combine-movs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcombine-movs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcombine-movs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcombine-movs.c?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -9,5 +9,4 @@ void foo (unsigned long r[], unsigned int d)\n     r[i] = 0;\n }\n \n-/* { dg-final { scan-assembler \"lsrs\\tr\\[0-9\\]\" { target arm_thumb2 } } } */\n-/* { dg-final { scan-assembler \"movs\\tr\\[0-9\\]\" { target { ! arm_thumb2 } } } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr\\[0-9\\]\" } } */"}, {"sha": "debbaf78cc84d17e3c43fbd9185f7d6b3fe5d88f", "filename": "gcc/testsuite/gcc.target/arm/interrupt-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-1.c?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -13,5 +13,5 @@ void foo ()\n   bar (0);\n }\n \n-/* { dg-final { scan-assembler \"stmfd\\tsp!, {r0, r1, r2, r3, r4, fp, ip, lr}\" } } */\n-/* { dg-final { scan-assembler \"ldmfd\\tsp!, {r0, r1, r2, r3, r4, fp, ip, pc}\\\\^\" } } */\n+/* { dg-final { scan-assembler \"push\\t{r0, r1, r2, r3, r4, fp, ip, lr}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t{r0, r1, r2, r3, r4, fp, ip, pc}\\\\^\" } } */"}, {"sha": "92f8630e016b869dc6bc1b3dabaa6b14fd2cf776", "filename": "gcc/testsuite/gcc.target/arm/interrupt-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Finterrupt-2.c?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -15,5 +15,5 @@ void test()\n   foo = 0;\n }\n \n-/* { dg-final { scan-assembler \"stmfd\\tsp!, {r0, r1, r2, r3, r4, r5, ip, lr}\" } } */\n-/* { dg-final { scan-assembler \"ldmfd\\tsp!, {r0, r1, r2, r3, r4, r5, ip, pc}\\\\^\" } } */\n+/* { dg-final { scan-assembler \"push\\t{r0, r1, r2, r3, r4, r5, ip, lr}\" } } */\n+/* { dg-final { scan-assembler \"pop\\t{r0, r1, r2, r3, r4, r5, ip, pc}\\\\^\" } } */"}, {"sha": "d2365131d880a0241138cac74b71336920545f1e", "filename": "gcc/testsuite/gcc.target/arm/unaligned-memcpy-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-memcpy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4ce0ff348c6391204888d16ffcad6f51fe9d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-memcpy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-memcpy-4.c?ref=bae4ce0ff348c6391204888d16ffcad6f51fe9d7", "patch": "@@ -14,7 +14,7 @@ void aligned_both (void)\n \n /* We know both src and dest to be aligned: expect multiword loads/stores.  */\n \n-/* { dg-final { scan-assembler-times \"ldmia\" 1 { target { ! { arm_prefer_ldrd_strd } } } } } */\n+/* { dg-final { scan-assembler-times \"ldm\" 1 { target { ! { arm_prefer_ldrd_strd } } } } } */\n /* { dg-final { scan-assembler-times \"stmia\" 1 { target { ! { arm_prefer_ldrd_strd } } } } } */\n /* { dg-final { scan-assembler \"ldrd\" { target { arm_prefer_ldrd_strd } } } } */\n /* { dg-final { scan-assembler-times \"ldm\" 0 { target { arm_prefer_ldrd_strd } } } } */"}]}