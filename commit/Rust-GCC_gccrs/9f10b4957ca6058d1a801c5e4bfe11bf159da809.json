{"sha": "9f10b4957ca6058d1a801c5e4bfe11bf159da809", "node_id": "C_kwDOANBUbNoAKDlmMTBiNDk1N2NhNjA1OGQxYTgwMWM1ZTRiZmUxMWJmMTU5ZGE4MDk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-12T10:55:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-04-12T12:15:12Z"}, "message": "libstdc++: Initialize all members of basic_endpoint union [PR109482]\n\nOn Solaris the in_addr struct contains a union and value-initializing it\ndoes not make the s_addr member active. This means we can't access that\nmember later during constant evaluation.\n\nMake the constructors explicitly set every member that we might want to\nread later in constexpr member functions. This means even the default\nconstructor can only be constexpr for C++20, because we can't change the\nactive member of a union in older standards.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/109482\n\t* include/experimental/internet (basic_endpoint::basic_endpoint()):\n\tEnsure that the required union members are active. Only define\n\tas constexpr for C++20 and later.\n\t(basic_endpoint::basic_endpoint(const protocol_type&, port_type)):\n\tLikewise.\n\t* testsuite/experimental/net/internet/endpoint/cons.cc: Only\n\tcheck constexpr default constructor for C++20 and later.\n\t* testsuite/experimental/net/internet/endpoint/extensible.cc:\n\tLikewise.", "tree": {"sha": "f629d59ee1176896a45a7f407ab09445c98677e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f629d59ee1176896a45a7f407ab09445c98677e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f10b4957ca6058d1a801c5e4bfe11bf159da809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f10b4957ca6058d1a801c5e4bfe11bf159da809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f10b4957ca6058d1a801c5e4bfe11bf159da809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f10b4957ca6058d1a801c5e4bfe11bf159da809/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ed90187ffff3870a9514007672f13476ff96a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ed90187ffff3870a9514007672f13476ff96a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ed90187ffff3870a9514007672f13476ff96a7"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "1f63c61ce85a891522ec8703e8921b23867deeac", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=9f10b4957ca6058d1a801c5e4bfe11bf159da809", "patch": "@@ -1512,9 +1512,14 @@ namespace ip\n \n       // constructors:\n \n-      constexpr\n+      _GLIBCXX20_CONSTEXPR\n       basic_endpoint() noexcept : _M_data()\n-      { _M_data._M_v4.sin_family = protocol_type::v4().family(); }\n+      {\n+\t_M_data._M_v4.sin_family = protocol_type::v4().family();\n+\t// If in_addr contains a union, make the correct member active:\n+\tif (std::__is_constant_evaluated())\n+\t  std::_Construct(&_M_data._M_v4.sin_addr.s_addr);\n+      }\n \n       _GLIBCXX20_CONSTEXPR\n       basic_endpoint(const protocol_type& __proto,\n@@ -1523,19 +1528,25 @@ namespace ip\n       {\n \tif (__proto == protocol_type::v4())\n \t  {\n-\t    _M_data._M_v4.sin_family = __proto.family();\n+\t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n \t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v4.sin_addr.s_addr);\n \t  }\n \telse if (__proto == protocol_type::v6())\n \t  {\n \t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = __proto.family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n+\t    _M_data._M_v6.sin6_scope_id = 0;\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v6.sin6_addr.s6_addr);\n \t  }\n \telse\n \t  {\n \t    __glibcxx_assert(__proto == protocol_type::v4()\n \t\t\t       || __proto == protocol_type::v6());\n+\n \t  }\n       }\n \n@@ -1548,13 +1559,16 @@ namespace ip\n \t  {\n \t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n \t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n-\t    _M_data._M_v4.sin_addr.s_addr = __addr._M_v4._M_addr;\n+\t    std::_Construct(&_M_data._M_v4.sin_addr.s_addr,\n+\t\t\t    __addr._M_v4._M_addr);\n \t  }\n \telse\n \t  {\n \t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v6.sin6_addr.s6_addr);\n \t    uint8_t* __s6a = _M_data._M_v6.sin6_addr.s6_addr;\n \t    for (int __i = 0; __i < 16; ++__i)\n \t      __s6a[__i] = __addr._M_v6._M_bytes[__i];"}, {"sha": "d54b0c9550b5c4cd6601c2b7cbd2f00e6e6f0778", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/cons.cc", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc?ref=9f10b4957ca6058d1a801c5e4bfe11bf159da809", "patch": "@@ -7,7 +7,10 @@\n \n using namespace std::experimental::net;\n \n-constexpr void\n+#if __cplusplus >= 202002\n+constexpr\n+#endif\n+void\n test_default()\n {\n   ip::tcp::endpoint t1;\n@@ -57,23 +60,19 @@ test_addr()\n   VERIFY( t2.port() == 80 );\n }\n \n-constexpr bool\n-test_constexpr()\n-{\n-  test_default();\n-#if __cplusplus >= 202002\n-  // Non-default basic_endpoint constructors are only constexpr in C++20.\n-  test_proto();\n-  test_addr();\n-#endif\n-  return true;\n-}\n-\n int main()\n {\n   test_default();\n   test_proto();\n   test_addr();\n \n-  static_assert( test_constexpr(), \"valid in constant expressions\" );\n+#if __cplusplus >= 202002\n+  // basic_endpoint constructors are only constexpr in C++20.\n+  constexpr bool b = []{\n+    test_default();\n+    test_proto();\n+    test_addr();\n+    return true;\n+  }();\n+#endif\n }"}, {"sha": "ffc43cf17b6ab07288ff6cdbb159dc278905e870", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/extensible.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f10b4957ca6058d1a801c5e4bfe11bf159da809/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc?ref=9f10b4957ca6058d1a801c5e4bfe11bf159da809", "patch": "@@ -11,8 +11,12 @@ using namespace std::experimental::net;\n void\n test_extensible()\n {\n+#if __cplusplus >= 202002L\n   static_assert(ip::tcp::endpoint().capacity() == sizeof(sockaddr_in6),\n \t\t\"ip::tcp::endpoint::capacity() can store a sockaddr_in6\");\n+#else\n+  VERIFY( ip::tcp::endpoint().capacity() == sizeof(sockaddr_in6) );\n+#endif\n \n   ip::tcp::endpoint t1(ip::tcp::v4(), 22);\n   VERIFY(t1.size() == sizeof(sockaddr_in));"}]}