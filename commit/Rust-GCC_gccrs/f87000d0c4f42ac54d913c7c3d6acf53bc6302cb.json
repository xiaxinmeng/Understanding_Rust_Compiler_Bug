{"sha": "f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3MDAwZDBjNGY0MmFjNTRkOTEzYzdjM2Q2YWNmNTNiYzYzMDJjYg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-08-04T01:09:12Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-08-04T01:09:12Z"}, "message": "tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops' state accessor functions.\n\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops' state\n\taccessor functions.\n\t* cfgloopmanip.c (remove_path, create_preheaders,\n\tforce_single_succ_latches, fix_loop_structure): Ditto.\n\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n\ttree_duplicate_loop_to_header_edge): Ditto.\n\t* cfgloopanal.c (mark_irreducible_loops): Ditto.\n\t* loop-init.c (loop_optimizer_init, loop_optimizer_finalize):\n\tDitto.\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_noloop, repair_loop_structures,\n\tcleanup_tree_cfg): Ditto.\n\t* tree-cfg.c (tree_merge_blocks): Ditto.\n\t* cfgloop.c (rescan_loop_exit, record_loop_exits,\n\trelease_recorded_exits, get_loop_exit_edges, verify_loop_structure,\n\tloop_preheader_edge, single_exit): Ditto.\n\t(flow_loops_find): Do not clear loops->state.\n\t* cfgloop.h (loops_state_satisfies_p, loops_state_set,\n\tloops_state_clear): New functions.\n\nFrom-SVN: r127197", "tree": {"sha": "798273ffece1ba2938c3938e1c16af800a086eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798273ffece1ba2938c3938e1c16af800a086eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a83e7facc5549687bfee14f24850528e79bb5a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83e7facc5549687bfee14f24850528e79bb5a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83e7facc5549687bfee14f24850528e79bb5a95"}], "stats": {"total": 117, "additions": 81, "deletions": 36}, "files": [{"sha": "33211ce682e39f120872db815374a273f5a8186a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -1,3 +1,24 @@\n+2007-08-03  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops' state\n+\taccessor functions.\n+\t* cfgloopmanip.c (remove_path, create_preheaders,\n+\tforce_single_succ_latches, fix_loop_structure): Ditto.\n+\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n+\ttree_duplicate_loop_to_header_edge): Ditto.\n+\t* cfgloopanal.c (mark_irreducible_loops): Ditto.\n+\t* loop-init.c (loop_optimizer_init, loop_optimizer_finalize):\n+\tDitto.\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_noloop, repair_loop_structures,\n+\tcleanup_tree_cfg): Ditto.\n+\t* tree-cfg.c (tree_merge_blocks): Ditto.\n+\t* cfgloop.c (rescan_loop_exit, record_loop_exits,\n+\trelease_recorded_exits, get_loop_exit_edges, verify_loop_structure,\n+\tloop_preheader_edge, single_exit): Ditto.\n+\t(flow_loops_find): Do not clear loops->state.\n+\t* cfgloop.h (loops_state_satisfies_p, loops_state_set,\n+\tloops_state_clear): New functions.\n+\n 2007-08-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/32399"}, {"sha": "fd26d5dc05dd95adb0c01871fae211bcf8ee4ba2", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -502,7 +502,6 @@ flow_loops_find (struct loops *loops)\n   sbitmap_free (headers);\n \n   loops->exits = NULL;\n-  loops->state = 0;\n   return VEC_length (loop_p, loops->larray);\n }\n \n@@ -996,7 +995,7 @@ rescan_loop_exit (edge e, bool new_edge, bool removed)\n   struct loop_exit *exits = NULL, *exit;\n   struct loop *aloop, *cloop;\n \n-  if ((current_loops->state & LOOPS_HAVE_RECORDED_EXITS) == 0)\n+  if (!loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     return;\n \n   if (!removed\n@@ -1054,9 +1053,9 @@ record_loop_exits (void)\n   if (!current_loops)\n     return;\n \n-  if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     return;\n-  current_loops->state |= LOOPS_HAVE_RECORDED_EXITS;\n+  loops_state_set (LOOPS_HAVE_RECORDED_EXITS);\n \n   gcc_assert (current_loops->exits == NULL);\n   current_loops->exits = htab_create_alloc (2 * number_of_loops (),\n@@ -1109,10 +1108,10 @@ dump_recorded_exits (FILE *file)\n void\n release_recorded_exits (void)\n {\n-  gcc_assert (current_loops->state & LOOPS_HAVE_RECORDED_EXITS);\n+  gcc_assert (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS));\n   htab_delete (current_loops->exits);\n   current_loops->exits = NULL;\n-  current_loops->state &= ~LOOPS_HAVE_RECORDED_EXITS;\n+  loops_state_clear (LOOPS_HAVE_RECORDED_EXITS);\n }\n \n /* Returns the list of the exit edges of a LOOP.  */\n@@ -1131,7 +1130,7 @@ get_loop_exit_edges (const struct loop *loop)\n \n   /* If we maintain the lists of exits, use them.  Otherwise we must\n      scan the body of the loop.  */\n-  if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     {\n       for (exit = loop->exits->next; exit->e; exit = exit->next)\n \tVEC_safe_push (edge, heap, edges, exit->e);\n@@ -1352,13 +1351,13 @@ verify_loop_structure (void)\n     {\n       i = loop->num;\n \n-      if ((current_loops->state & LOOPS_HAVE_PREHEADERS)\n+      if (loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS)\n \t  && EDGE_COUNT (loop->header->preds) != 2)\n \t{\n \t  error (\"loop %d's header does not have exactly 2 entries\", i);\n \t  err = 1;\n \t}\n-      if (current_loops->state & LOOPS_HAVE_SIMPLE_LATCHES)\n+      if (loops_state_satisfies_p (LOOPS_HAVE_SIMPLE_LATCHES))\n \t{\n \t  if (!single_succ_p (loop->latch))\n \t    {\n@@ -1381,7 +1380,7 @@ verify_loop_structure (void)\n \t  error (\"loop %d's header does not belong directly to it\", i);\n \t  err = 1;\n \t}\n-      if ((current_loops->state & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+      if (loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n \t  && (loop_latch_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP))\n \t{\n \t  error (\"loop %d's latch is marked as part of irreducible region\", i);\n@@ -1390,7 +1389,7 @@ verify_loop_structure (void)\n     }\n \n   /* Check irreducible loops.  */\n-  if (current_loops->state & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     {\n       /* Record old info.  */\n       irreds = sbitmap_alloc (last_basic_block);\n@@ -1476,7 +1475,7 @@ verify_loop_structure (void)\n \t    }\n \t}\n \n-      if ((current_loops->state & LOOPS_HAVE_RECORDED_EXITS) == 0)\n+      if (!loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n \t{\n \t  if (loop->exits->next != loop->exits)\n \t    {\n@@ -1487,7 +1486,7 @@ verify_loop_structure (void)\n \t}\n     }\n \n-  if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     {\n       unsigned n_exits = 0, eloops;\n \n@@ -1570,7 +1569,7 @@ loop_preheader_edge (const struct loop *loop)\n   edge e;\n   edge_iterator ei;\n \n-  gcc_assert ((current_loops->state & LOOPS_HAVE_PREHEADERS) != 0);\n+  gcc_assert (loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS));\n \n   FOR_EACH_EDGE (e, ei, loop->header->preds)\n     if (e->src != loop->latch)\n@@ -1597,7 +1596,7 @@ single_exit (const struct loop *loop)\n {\n   struct loop_exit *exit = loop->exits->next;\n \n-  if ((current_loops->state & LOOPS_HAVE_RECORDED_EXITS) == 0)\n+  if (!loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     return NULL;\n \n   if (exit->e && exit->next == loop->exits)"}, {"sha": "791dabf39891bab21398162676fa777bb6e2cdb3", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -451,6 +451,33 @@ number_of_loops (void)\n   return VEC_length (loop_p, current_loops->larray);\n }\n \n+/* Returns true if state of the loops satisfies all properties\n+   described by FLAGS.  */\n+\n+static inline bool\n+loops_state_satisfies_p (unsigned flags)\n+{\n+  return (current_loops->state & flags) == flags;\n+}\n+\n+/* Sets FLAGS to the loops state.  */\n+\n+static inline void\n+loops_state_set (unsigned flags)\n+{\n+  current_loops->state |= flags;\n+}\n+\n+/* Clears FLAGS from the loops state.  */\n+\n+static inline void\n+loops_state_clear (unsigned flags)\n+{\n+  if (!current_loops)\n+    return;\n+  current_loops->state &= ~flags;\n+}\n+\n /* Loop iterators.  */\n \n /* Flags for loop iteration.  */"}, {"sha": "13b674aaecbe32c5a29750bfdefda4e4c14db784", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -156,7 +156,7 @@ mark_irreducible_loops (void)\n \n   free_graph (g);\n \n-  current_loops->state |= LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS;\n+  loops_state_set (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS);\n }\n \n /* Counts number of insns inside LOOP.  */"}, {"sha": "c66dfd47f8a5d4823c96bbac3a201d6a770bcaac", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -385,7 +385,7 @@ remove_path (edge e)\n   fix_loop_placements (from->loop_father, &irred_invalidated);\n \n   if (irred_invalidated\n-      && (current_loops->state & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS) != 0)\n+      && loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     mark_irreducible_loops ();\n \n   return true;\n@@ -1190,7 +1190,7 @@ create_preheaders (int flags)\n \n   FOR_EACH_LOOP (li, loop, 0)\n     create_preheader (loop, flags);\n-  current_loops->state |= LOOPS_HAVE_PREHEADERS;\n+  loops_state_set (LOOPS_HAVE_PREHEADERS);\n }\n \n /* Forces all loop latches to have only single successor.  */\n@@ -1211,7 +1211,7 @@ force_single_succ_latches (void)\n \n       split_edge (e);\n     }\n-  current_loops->state |= LOOPS_HAVE_SIMPLE_LATCHES;\n+  loops_state_set (LOOPS_HAVE_SIMPLE_LATCHES);\n }\n \n /* This function is called from loop_version.  It splits the entry edge\n@@ -1390,8 +1390,6 @@ fix_loop_structure (bitmap changed_bbs)\n   bool record_exits = false;\n   struct loop **superloop = XNEWVEC (struct loop *, number_of_loops ());\n \n-  gcc_assert (current_loops->state & LOOPS_HAVE_SIMPLE_LATCHES);\n-\n   /* Remove the old bb -> loop mapping.  Remember the depth of the blocks in\n      the loop hierarchy, so that we can recognize blocks whose loop nesting\n      relationship has changed.  */\n@@ -1402,7 +1400,7 @@ fix_loop_structure (bitmap changed_bbs)\n       bb->loop_father = current_loops->tree_root;\n     }\n \n-  if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     {\n       release_recorded_exits ();\n       record_exits = true;\n@@ -1464,13 +1462,13 @@ fix_loop_structure (bitmap changed_bbs)\n \t}\n     }\n \n-  if (current_loops->state & LOOPS_HAVE_PREHEADERS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS))\n     create_preheaders (CP_SIMPLE_PREHEADERS);\n \n-  if (current_loops->state & LOOPS_HAVE_SIMPLE_LATCHES)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_SIMPLE_LATCHES))\n     force_single_succ_latches ();\n \n-  if (current_loops->state & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     mark_irreducible_loops ();\n \n   if (record_exits)"}, {"sha": "af62a31a9b8bc96b11a9f4b94a50a9f58a8aebf6", "filename": "gcc/loop-init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -59,7 +59,7 @@ loop_optimizer_init (unsigned flags)\n \t passes may want.  */\n       gcc_assert ((flags & ~(LOOPS_MAY_HAVE_MULTIPLE_LATCHES\n \t\t\t     | LOOPS_HAVE_RECORDED_EXITS)) == 0);\n-      current_loops->state = LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n+      loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n     }\n   else\n     disambiguate_loops_with_multiple_latches ();\n@@ -105,7 +105,7 @@ loop_optimizer_finalize (void)\n     }\n \n   /* Clean up.  */\n-  if (current_loops->state & LOOPS_HAVE_RECORDED_EXITS)\n+  if (loops_state_satisfies_p (LOOPS_HAVE_RECORDED_EXITS))\n     release_recorded_exits ();\n   flow_loops_free (current_loops);\n   ggc_free (current_loops);"}, {"sha": "0c6c56a5918c853e052300831a64e107a6ae9571", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -1292,7 +1292,7 @@ tree_merge_blocks (basic_block a, basic_block b)\n       /* In case we maintain loop closed ssa form, do not propagate arguments\n \t of loop exit phi nodes.  */\n       if (current_loops\n-\t  && (current_loops->state & LOOP_CLOSED_SSA)\n+\t  && loops_state_satisfies_p (LOOP_CLOSED_SSA)\n \t  && is_gimple_reg (def)\n \t  && TREE_CODE (use) == SSA_NAME\n \t  && a->loop_father != b->loop_father)"}, {"sha": "bcae4488dc122d203243092b529c4276dea3fa72", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -666,7 +666,7 @@ cleanup_tree_cfg_noloop (void)\n   timevar_pop (TV_TREE_CLEANUP_CFG);\n \n   if (changed && current_loops)\n-    current_loops->state |= LOOPS_NEED_FIXUP;\n+    loops_state_set (LOOPS_NEED_FIXUP);\n \n   return changed;\n }\n@@ -682,7 +682,7 @@ repair_loop_structures (void)\n   /* This usually does nothing.  But sometimes parts of cfg that originally\n      were inside a loop get out of it due to edge removal (since they\n      become unreachable by back edges from latch).  */\n-  if ((current_loops->state & LOOP_CLOSED_SSA) != 0)\n+  if (loops_state_satisfies_p (LOOP_CLOSED_SSA))\n     rewrite_into_loop_closed_ssa (changed_bbs, TODO_update_ssa);\n \n   BITMAP_FREE (changed_bbs);\n@@ -692,7 +692,7 @@ repair_loop_structures (void)\n #endif\n   scev_reset ();\n \n-  current_loops->state &= ~LOOPS_NEED_FIXUP;\n+  loops_state_clear (LOOPS_NEED_FIXUP);\n }\n \n /* Cleanup cfg and repair loop structures.  */\n@@ -703,7 +703,7 @@ cleanup_tree_cfg (void)\n   bool changed = cleanup_tree_cfg_noloop ();\n \n   if (current_loops != NULL\n-      && (current_loops->state & LOOPS_NEED_FIXUP))\n+      && loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n     repair_loop_structures ();\n \n   return changed;"}, {"sha": "2ac9d1bdb6321c4a16c4d04783b2f521861c9942", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -365,7 +365,7 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   unsigned i, old_num_ssa_names;\n   bitmap names_to_rename;\n \n-  current_loops->state |= LOOP_CLOSED_SSA;\n+  loops_state_set (LOOP_CLOSED_SSA);\n   if (number_of_loops () <= 1)\n     return;\n \n@@ -584,9 +584,9 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n {\n   unsigned first_new_block;\n \n-  if (!(current_loops->state & LOOPS_HAVE_SIMPLE_LATCHES))\n+  if (!loops_state_satisfies_p (LOOPS_HAVE_SIMPLE_LATCHES))\n     return false;\n-  if (!(current_loops->state & LOOPS_HAVE_PREHEADERS))\n+  if (!loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS))\n     return false;\n \n #ifdef ENABLE_CHECKING"}, {"sha": "e6fa4f68f8b8d09b43c50b16f7ca5e1ad575d9b5", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "patch": "@@ -1077,7 +1077,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   threaded_edges = NULL;\n \n   if (retval)\n-    current_loops->state |= LOOPS_NEED_FIXUP;\n+    loops_state_set (LOOPS_NEED_FIXUP);\n \n   return retval;\n }"}]}