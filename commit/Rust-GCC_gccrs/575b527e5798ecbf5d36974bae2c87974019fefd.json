{"sha": "575b527e5798ecbf5d36974bae2c87974019fefd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1YjUyN2U1Nzk4ZWNiZjVkMzY5NzRiYWUyYzg3OTc0MDE5ZmVmZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-28T08:49:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-28T08:49:26Z"}, "message": "re PR fortran/81758 ([OOP] Broken vtab)\n\n2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81758\n\t* trans-expr.c (trans_class_vptr_len_assignment): 'vptr_expr'\n\tmust only be set if the right hand side expression is of type\n\tclass.\n\n2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81758\n\t* gfortran.dg/class_63.f90: New test.\n\nFrom-SVN: r254195", "tree": {"sha": "b5ce579d741daf86e8ee8acd2b8a0ddeae5cf9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ce579d741daf86e8ee8acd2b8a0ddeae5cf9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575b527e5798ecbf5d36974bae2c87974019fefd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575b527e5798ecbf5d36974bae2c87974019fefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575b527e5798ecbf5d36974bae2c87974019fefd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575b527e5798ecbf5d36974bae2c87974019fefd/comments", "author": null, "committer": null, "parents": [{"sha": "7324369a12e9abe3011f6a0cfd8ef48dd44c4729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7324369a12e9abe3011f6a0cfd8ef48dd44c4729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7324369a12e9abe3011f6a0cfd8ef48dd44c4729"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "7ad2427f8185d58a879569f7326081e08d4acedb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=575b527e5798ecbf5d36974bae2c87974019fefd", "patch": "@@ -1,3 +1,10 @@\n+2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81758\n+\t* trans-expr.c (trans_class_vptr_len_assignment): 'vptr_expr'\n+\tmust only be set if the right hand side expression is of type\n+\tclass.\n+\n 2017-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82620"}, {"sha": "71ec176eac864f8b5e10679dbfe2bfb8c0b07e25", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=575b527e5798ecbf5d36974bae2c87974019fefd", "patch": "@@ -8053,7 +8053,7 @@ trans_class_vptr_len_assignment (stmtblock_t *block, gfc_expr * le,\n     {\n       /* Get the vptr from the rhs expression only, when it is variable.\n \t Functions are expected to be assigned to a temporary beforehand.  */\n-      vptr_expr = re->expr_type == EXPR_VARIABLE\n+      vptr_expr = (re->expr_type == EXPR_VARIABLE && re->ts.type == BT_CLASS)\n \t  ? gfc_find_and_cut_at_last_class_ref (re)\n \t  : NULL;\n       if (vptr_expr != NULL && vptr_expr->ts.type == BT_CLASS)"}, {"sha": "1646f4cb033f69a7aa4bb6d863aff277668ee8d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=575b527e5798ecbf5d36974bae2c87974019fefd", "patch": "@@ -1,3 +1,8 @@\n+2017-10-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81758\n+\t* gfortran.dg/class_63.f90: New test.\n+\n 2017-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82620"}, {"sha": "cf99bcf9cb2ba970cf4f127cd17571541cfd2f49", "filename": "gcc/testsuite/gfortran.dg/class_63.f90", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_63.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575b527e5798ecbf5d36974bae2c87974019fefd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_63.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_63.f90?ref=575b527e5798ecbf5d36974bae2c87974019fefd", "patch": "@@ -0,0 +1,80 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR81758, in which the vpointer for 'ptr' in\n+! function 'pointer_value' would be set to the vtable of the component\n+! 'container' rather than that of the component 'vec_elem'. In this test\n+! case it is ensured that there is a single typebound procedure for both\n+! types, so that different values are returned. In the original problem\n+! completely different procedures were involved so that a segfault resulted.\n+!\n+! Reduced from the original code of Dimitry Liakh  <liakhdi@ornl.gov> by\n+!                                   Paul Thomas  <pault@gcc.gnu.org>\n+!\n+module types\n+  type, public:: gfc_container_t\n+  contains\n+    procedure, public:: get_value => ContTypeGetValue\n+  end type gfc_container_t\n+\n+  !Element of a container:\n+  type, public:: gfc_cont_elem_t\n+    integer :: value_p\n+  contains\n+    procedure, public:: get_value => ContElemGetValue\n+  end type gfc_cont_elem_t\n+\n+  !Vector element:\n+  type, extends(gfc_cont_elem_t), public:: vector_elem_t\n+  end type vector_elem_t\n+\n+  !Vector:\n+  type, extends(gfc_container_t), public:: vector_t\n+    type(vector_elem_t), allocatable, private :: vec_elem\n+  end type vector_t\n+\n+  type, public :: vector_iter_t\n+    class(vector_t), pointer, private :: container => NULL()\n+  contains\n+    procedure, public:: get_vector_value => vector_Value\n+    procedure, public:: get_pointer_value => pointer_value\n+  end type\n+\n+contains\n+  integer function ContElemGetValue (this)\n+    class(gfc_cont_elem_t) :: this\n+    ContElemGetValue = this%value_p\n+  end function\n+\n+  integer function ContTypeGetValue (this)\n+    class(gfc_container_t) :: this\n+    ContTypeGetValue = 0\n+  end function\n+\n+  integer function vector_Value (this)\n+    class(vector_iter_t) :: this\n+    vector_value = this%container%vec_elem%get_value()\n+  end function\n+\n+  integer function pointer_value (this)\n+    class(vector_iter_t), target :: this\n+    class(gfc_cont_elem_t), pointer :: ptr\n+    ptr => this%container%vec_elem\n+    pointer_value = ptr%get_value()\n+  end function\n+\n+  subroutine factory (arg)\n+    class (vector_iter_t), pointer :: arg\n+    allocate (vector_iter_t :: arg)\n+    allocate (vector_t :: arg%container)\n+    allocate (arg%container%vec_elem)\n+    arg%container%vec_elem%value_p = 99\n+  end subroutine\n+end module\n+\n+  use types\n+  class (vector_iter_t), pointer :: x\n+\n+  call factory (x)\n+  if (x%get_vector_value() .ne. 99) call abort\n+  if (x%get_pointer_value() .ne. 99) call abort\n+end"}]}