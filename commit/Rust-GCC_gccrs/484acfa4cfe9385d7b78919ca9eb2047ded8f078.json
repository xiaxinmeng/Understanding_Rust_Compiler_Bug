{"sha": "484acfa4cfe9385d7b78919ca9eb2047ded8f078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0YWNmYTRjZmU5Mzg1ZDdiNzg5MTljYTllYjIwNDdkZWQ4ZjA3OA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-06T15:20:02Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T11:13:55Z"}, "message": "aarch64: Use memcpy to copy vector tables in vqtbl[234] intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vqtbl[234]\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are no longer generated for the vqtbl[234] intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vqtbl2_s8): Use __builtin_memcpy\n\tinstead of constructing __builtin_aarch64_simd_oi one vector\n\tat a time.\n\t(vqtbl2_u8): Likewise.\n\t(vqtbl2_p8): Likewise.\n\t(vqtbl2q_s8): Likewise.\n\t(vqtbl2q_u8): Likewise.\n\t(vqtbl2q_p8): Likewise.\n\t(vqtbl3_s8): Use __builtin_memcpy instead of constructing\n\t__builtin_aarch64_simd_ci one vector at a time.\n\t(vqtbl3_u8): Likewise.\n\t(vqtbl3_p8): Likewise.\n\t(vqtbl3q_s8): Likewise.\n\t(vqtbl3q_u8): Likewise.\n\t(vqtbl3q_p8): Likewise.\n\t(vqtbl4_s8): Use __builtin_memcpy instead of constructing\n\t__builtin_aarch64_simd_xi one vector at a time.\n\t(vqtbl4_u8): Likewise.\n\t(vqtbl4_p8): Likewise.\n\t(vqtbl4q_s8): Likewise.\n\t(vqtbl4q_u8): Likewise.\n\t(vqtbl4q_p8): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: New test.", "tree": {"sha": "9822e5a0e0c4374c6ccebcb2d87367766222d769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9822e5a0e0c4374c6ccebcb2d87367766222d769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/484acfa4cfe9385d7b78919ca9eb2047ded8f078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484acfa4cfe9385d7b78919ca9eb2047ded8f078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484acfa4cfe9385d7b78919ca9eb2047ded8f078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484acfa4cfe9385d7b78919ca9eb2047ded8f078/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b965dc49a6a4293ce85bc3a24ca3f3855469e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b965dc49a6a4293ce85bc3a24ca3f3855469e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b965dc49a6a4293ce85bc3a24ca3f3855469e68"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "31ae86e6d25239359045d649bf8d00d8c0fa9212", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484acfa4cfe9385d7b78919ca9eb2047ded8f078/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484acfa4cfe9385d7b78919ca9eb2047ded8f078/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=484acfa4cfe9385d7b78919ca9eb2047ded8f078", "patch": "@@ -23321,8 +23321,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2_s8 (int8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23331,8 +23330,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2_u8 (uint8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23341,8 +23339,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2_p8 (poly8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23351,8 +23348,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2q_s8 (int8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23361,8 +23357,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2q_u8 (uint8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23371,8 +23366,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl2q_p8 (poly8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23383,9 +23377,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3_s8 (int8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl3v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23394,9 +23386,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3_u8 (uint8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbl3v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23405,9 +23395,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3_p8 (poly8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbl3v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23416,9 +23404,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3q_s8 (int8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl3v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23427,9 +23413,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3q_u8 (uint8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbl3v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23438,9 +23422,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl3q_p8 (poly8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbl3v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23451,10 +23433,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4_s8 (int8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl4v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23463,10 +23442,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4_u8 (uint8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbl4v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23475,10 +23451,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4_p8 (poly8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbl4v8qi (__o, (int8x8_t)__idx);\n }\n \n@@ -23487,10 +23460,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4q_s8 (int8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbl4v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23499,10 +23469,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4q_u8 (uint8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbl4v16qi (__o, (int8x16_t)__idx);\n }\n \n@@ -23511,10 +23478,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl4q_p8 (poly8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbl4v16qi (__o, (int8x16_t)__idx);\n }\n "}, {"sha": "0b07e9e9a422ed7f62afb27bb3315adcb083262b", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484acfa4cfe9385d7b78919ca9eb2047ded8f078/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484acfa4cfe9385d7b78919ca9eb2047ded8f078/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=484acfa4cfe9385d7b78919ca9eb2047ded8f078", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_TBL(name, rettype, tbltype, idxtype, ts) \\\n+  rettype test_ ## name ## _ ## ts (tbltype a, idxtype b) \\\n+\t{ \\\n+\t\treturn name ## _ ## ts (a, b); \\\n+\t}\n+\n+TEST_TBL (vqtbl2, int8x8_t, int8x16x2_t, uint8x8_t, s8)\n+TEST_TBL (vqtbl2, uint8x8_t, uint8x16x2_t, uint8x8_t, u8)\n+TEST_TBL (vqtbl2, poly8x8_t, poly8x16x2_t, uint8x8_t, p8)\n+\n+TEST_TBL (vqtbl2q, int8x16_t, int8x16x2_t, uint8x16_t, s8)\n+TEST_TBL (vqtbl2q, uint8x16_t, uint8x16x2_t, uint8x16_t, u8)\n+TEST_TBL (vqtbl2q, poly8x16_t, poly8x16x2_t, uint8x16_t, p8)\n+\n+TEST_TBL (vqtbl4, int8x8_t, int8x16x4_t, uint8x8_t, s8)\n+TEST_TBL (vqtbl4, uint8x8_t, uint8x16x4_t, uint8x8_t, u8)\n+TEST_TBL (vqtbl4, poly8x8_t, poly8x16x4_t, uint8x8_t, p8)\n+\n+TEST_TBL (vqtbl4q, int8x16_t, int8x16x4_t, uint8x16_t, s8)\n+TEST_TBL (vqtbl4q, uint8x16_t, uint8x16x4_t, uint8x16_t, u8)\n+TEST_TBL (vqtbl4q, poly8x16_t, poly8x16x4_t, uint8x16_t, p8)\n+\n+#define TEST_TBL3(name, rettype, tbltype, idxtype, ts) \\\n+  rettype test_ ## name ## _ ## ts (idxtype a, tbltype b) \\\n+\t{ \\\n+\t\treturn name ## _ ## ts (b, a); \\\n+\t}\n+\n+TEST_TBL3 (vqtbl3, int8x8_t, int8x16x3_t, uint8x8_t, s8)\n+TEST_TBL3 (vqtbl3, uint8x8_t, uint8x16x3_t, uint8x8_t, u8)\n+TEST_TBL3 (vqtbl3, poly8x8_t, poly8x16x3_t, uint8x8_t, p8)\n+\n+TEST_TBL3 (vqtbl3q, int8x16_t, int8x16x3_t, uint8x16_t, s8)\n+TEST_TBL3 (vqtbl3q, uint8x16_t, uint8x16x3_t, uint8x16_t, u8)\n+TEST_TBL3 (vqtbl3q, poly8x16_t, poly8x16x3_t, uint8x16_t, p8)\n+\n+/* { dg-final { scan-assembler-not \"mov\\\\t\" } } */\n+\n+/* { dg-final { scan-assembler-times \"tbl\\\\t\" 18} }  */"}]}