{"sha": "091a3ac7b8dc905e22be2198966d43977699a49e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxYTNhYzdiOGRjOTA1ZTIyYmUyMTk4OTY2ZDQzOTc3Njk5YTQ5ZQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-08-23T00:30:39Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-08-23T00:30:39Z"}, "message": "rtl.c (rtx_code_size): Check CONST_FIXED to calcualte correct sizes in DEF_RTL_EXPR.\n\n\t* rtl.c (rtx_code_size): Check CONST_FIXED to calcualte correct sizes\n\tin DEF_RTL_EXPR.\n\t(copy_rtx): Handle CONST_FIXED.\n\t(rtx_equal_p): Likewise.\n\t* rtl.h (fixed_value.h): New include.\n\t(rtx_def): Add a new field of fixed_value to u.\n\t(XCNMPFV): Define for accessing fixed_value.\n\t(CONST_FIXED_VALUE, CONST_FIXED_VALUE_HIGH, CONST_FIXED_VALUE_LOW):\n\tDefine.\n\t* rtl.def (CONST_FIXED): New constant.\n\t(SS_MULT, US_MULT, SS_DIV, US_DIV, FRACT_CONVERT,\n\tUNSIGNED_FRACT_CONVERT, SAT_FRACT, UNSIGNED_SAT_FRACT, US_NEG,\n\tUS_ASHIFT): New codes.\n\t* doc/rtl.texi (Expressions): Document const_fixed, us_neg, ss_mult,\n\tus_mult, ss_div, us_div, us_ashift, fract_convert, sat_fract,\n\tunsigned_fract_convert, unsigned_sat_fract): Document them.\n\t* varasm.c (assemble_integer): Extend to support fixed-point constants\n\tby using different machine classes.\n\t(decode_addr_const): Handle FIXED_CST.\n\t(const_hash_1): Likewise.\n\t(compare_constant): Likewise.\n\t(copy_constant): Likewise.\n\t(const_rtx_hash_1): Handle CONST_FIXED.\n\t(output_constant_pool_2): Handle MODE_FRACT, MODE_UFRACT, MODE_ACCUM,\n\tMODE_UACCUM, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM,\n\tMODE_VECTOR_UACCUM.\n\t(initializer_constant_valid_p): Handle FIXED_CST.\n\t(output_constant): Support FIXED_POINT_TYPE.\n\t* gengenrtl.c (excluded_rtx): Check CONST_FIXED to exclude.\n\t* cse.c (hash_rtx): Support CONST_FIXED.\n\t(exp_equiv_p): Likewise.\n\t(cannon_reg): Likewise.\n\t(fold_rtx): Likewise.\n\t(equiv_constant): Likewise.\n\t(cse_process_notes_1): Likewise.\n\t(count_reg_usage): Likewise.\n\t* cselib.c (entry_and_rtx_equal_p): Check CONST_FIXED.\n\t(rtx_equal_for_cselib_p): Handle CONST_FIXED.\n\t(wrap_constant): Check CONST_FIXED.\n\t(cselib_hash_rtx): Support CONST_FIXED.\n\t(cselib_subst_to_values): Likewise.\n\t* df-scan.c (df_uses_record): Likewise.\n\t* gcse.c (want_to_gcse_p): Likewise.\n\t(oprs_unchanged_p): Likewise.\n\t(oprs_not_set_p): Likewise.\n\t(compute_transp): Likewise.\n\t(extract_mentioned_regs_helper): Likewise.\n\t* genemit.c (gen_exp): Likewise.\n\t* local-alloc.c (equiv_init_varies_p): Likewise.\n\t(contains_replace_regs): Likewise.\n\t(memref_referenced_p): Likewise.\n\t* loop-invariant.c (check_maybe_invariant): Likewise.\n\t(hash_invariant_expr_1): Likewise.\n\t(invariant_expr_equal_p): Likewise.\n\t* postreload-gcse.c (oprs_unchanged_p): Likewise.\n\t* regclass.c (reg_scan_mark_refs): Likewise.\n\t* regrename.c (scan_rtx): Likewise.\n\t* resource.c (mark_referenced_resources): Likewise.\n\t(mark_set_resources): Likewise.\n\t* rtlanal.c (rtx_unstable_p): Likewise.\n\t(rtx_varies_p): Likewise.\n\t(count_occurrences): Likewise.\n\t(reg_mentioned_p): Likewise.\n\t(modified_between_p): Likewise.\n\t(modified_in_p): Likewise.\n\t(volatile_insn_p): Likewise.\n\t(volatile_refs_p): Likewise.\n\t(side_effects_p): Likewise.\n\t(may_trap_p_1): Likewise.\n\t(inequality_comparisons_p): Likewise.\n\t(computed_jump_p_1): Likewise.\n\t(commutative_operand_precedence): Likewise.\n\t* sched-deps.c (sched_analyze_2): Likewise.\n\t* sched-vis.c (print_value): Likewise.\n\t* reload.c (operands_match_p): Likewise.\n\t(subst_reg_equivs): Likewise.\n\t* reload1.c (eliminate_regs_1): Likewise.\n\t(elimination_effects): Likewise.\n\t(scan_paradoxical_subregs): Likewise.\n\t* alias.c (rtx_equal_for_memref_p): Likewise.\n\t* Makefile.in (RTL_BASE_H): Add fixed-value.h.\n\t* emit-rtl.c (const_fixed_htab): New hash table.\n\t(const_fixed_htab_hash, const_fixed_htab_eq, lookup_const_fixed):\n\tDeclare.\n\t(const_fixed_htab_hash, const_fixed_htab_eq, lookup_const_fixed,\n\tconst_fixed_from_fixed_value): New functions.\n\t(verify_rtx_sharing): Handle CONST_FIXED.\n\t(copy_rtx_if_shared_1): Likewise.\n\t(reset_used_flags): Likewise.\n\t(set_used_flags): Likewise.\n\t(copy_insn_1): Likewise.\n\t(init_emit_once): Create const_fixed_htab.\n\tStore fixed-point scalar and vector zero and one to const_tiny_rtx.\n\nFrom-SVN: r127725", "tree": {"sha": "94fb170497e612ea3b6c7e7f3250d4c77df42147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fb170497e612ea3b6c7e7f3250d4c77df42147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091a3ac7b8dc905e22be2198966d43977699a49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091a3ac7b8dc905e22be2198966d43977699a49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091a3ac7b8dc905e22be2198966d43977699a49e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091a3ac7b8dc905e22be2198966d43977699a49e/comments", "author": null, "committer": null, "parents": [{"sha": "9851005046530a2de4bceef47a4dffb56449302c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9851005046530a2de4bceef47a4dffb56449302c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9851005046530a2de4bceef47a4dffb56449302c"}], "stats": {"total": 472, "additions": 455, "deletions": 17}, "files": [{"sha": "99d44526e4b416d07393b18cb6705f5ea02bf94e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -1,3 +1,99 @@\n+2007-08-22  Chao-ying Fu  <fu@mips.com>\n+\n+\t* rtl.c (rtx_code_size): Check CONST_FIXED to calcualte correct sizes\n+\tin DEF_RTL_EXPR.\n+\t(copy_rtx): Handle CONST_FIXED.\n+\t(rtx_equal_p): Likewise.\n+\t* rtl.h (fixed_value.h): New include.\n+\t(rtx_def): Add a new field of fixed_value to u.\n+\t(XCNMPFV): Define for accessing fixed_value.\n+\t(CONST_FIXED_VALUE, CONST_FIXED_VALUE_HIGH, CONST_FIXED_VALUE_LOW):\n+\tDefine.\n+\t* rtl.def (CONST_FIXED): New constant.\n+\t(SS_MULT, US_MULT, SS_DIV, US_DIV, FRACT_CONVERT,\n+\tUNSIGNED_FRACT_CONVERT, SAT_FRACT, UNSIGNED_SAT_FRACT, US_NEG,\n+\tUS_ASHIFT): New codes.\n+\t* doc/rtl.texi (Expressions): Document const_fixed, us_neg, ss_mult,\n+\tus_mult, ss_div, us_div, us_ashift, fract_convert, sat_fract,\n+\tunsigned_fract_convert, unsigned_sat_fract): Document them.\n+\t* varasm.c (assemble_integer): Extend to support fixed-point constants\n+\tby using different machine classes.\n+\t(decode_addr_const): Handle FIXED_CST.\n+\t(const_hash_1): Likewise.\n+\t(compare_constant): Likewise.\n+\t(copy_constant): Likewise.\n+\t(const_rtx_hash_1): Handle CONST_FIXED.\n+\t(output_constant_pool_2): Handle MODE_FRACT, MODE_UFRACT, MODE_ACCUM,\n+\tMODE_UACCUM, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM,\n+\tMODE_VECTOR_UACCUM.\n+\t(initializer_constant_valid_p): Handle FIXED_CST.\n+\t(output_constant): Support FIXED_POINT_TYPE.\n+\t* gengenrtl.c (excluded_rtx): Check CONST_FIXED to exclude.\n+\t* cse.c (hash_rtx): Support CONST_FIXED.\n+\t(exp_equiv_p): Likewise.\n+\t(cannon_reg): Likewise.\n+\t(fold_rtx): Likewise.\n+\t(equiv_constant): Likewise.\n+\t(cse_process_notes_1): Likewise.\n+\t(count_reg_usage): Likewise.\n+\t* cselib.c (entry_and_rtx_equal_p): Check CONST_FIXED.\n+\t(rtx_equal_for_cselib_p): Handle CONST_FIXED.\n+\t(wrap_constant): Check CONST_FIXED.\n+\t(cselib_hash_rtx): Support CONST_FIXED.\n+\t(cselib_subst_to_values): Likewise.\n+\t* df-scan.c (df_uses_record): Likewise.\n+\t* gcse.c (want_to_gcse_p): Likewise.\n+\t(oprs_unchanged_p): Likewise.\n+\t(oprs_not_set_p): Likewise.\n+\t(compute_transp): Likewise.\n+\t(extract_mentioned_regs_helper): Likewise.\n+\t* genemit.c (gen_exp): Likewise.\n+\t* local-alloc.c (equiv_init_varies_p): Likewise.\n+\t(contains_replace_regs): Likewise.\n+\t(memref_referenced_p): Likewise.\n+\t* loop-invariant.c (check_maybe_invariant): Likewise.\n+\t(hash_invariant_expr_1): Likewise.\n+\t(invariant_expr_equal_p): Likewise.\n+\t* postreload-gcse.c (oprs_unchanged_p): Likewise.\n+\t* regclass.c (reg_scan_mark_refs): Likewise.\n+\t* regrename.c (scan_rtx): Likewise.\n+\t* resource.c (mark_referenced_resources): Likewise.\n+\t(mark_set_resources): Likewise.\n+\t* rtlanal.c (rtx_unstable_p): Likewise.\n+\t(rtx_varies_p): Likewise.\n+\t(count_occurrences): Likewise.\n+\t(reg_mentioned_p): Likewise.\n+\t(modified_between_p): Likewise.\n+\t(modified_in_p): Likewise.\n+\t(volatile_insn_p): Likewise.\n+\t(volatile_refs_p): Likewise.\n+\t(side_effects_p): Likewise.\n+\t(may_trap_p_1): Likewise.\n+\t(inequality_comparisons_p): Likewise.\n+\t(computed_jump_p_1): Likewise.\n+\t(commutative_operand_precedence): Likewise.\n+\t* sched-deps.c (sched_analyze_2): Likewise.\n+\t* sched-vis.c (print_value): Likewise.\n+\t* reload.c (operands_match_p): Likewise.\n+\t(subst_reg_equivs): Likewise.\n+\t* reload1.c (eliminate_regs_1): Likewise.\n+\t(elimination_effects): Likewise.\n+\t(scan_paradoxical_subregs): Likewise.\n+\t* alias.c (rtx_equal_for_memref_p): Likewise.\n+\t* Makefile.in (RTL_BASE_H): Add fixed-value.h.\n+\t* emit-rtl.c (const_fixed_htab): New hash table.\n+\t(const_fixed_htab_hash, const_fixed_htab_eq, lookup_const_fixed):\n+\tDeclare.\n+\t(const_fixed_htab_hash, const_fixed_htab_eq, lookup_const_fixed,\n+\tconst_fixed_from_fixed_value): New functions.\n+\t(verify_rtx_sharing): Handle CONST_FIXED.\n+\t(copy_rtx_if_shared_1): Likewise.\n+\t(reset_used_flags): Likewise.\n+\t(set_used_flags): Likewise.\n+\t(copy_insn_1): Likewise.\n+\t(init_emit_once): Create const_fixed_htab.\n+\tStore fixed-point scalar and vector zero and one to const_tiny_rtx.\n+\n 2007-08-22  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/32949"}, {"sha": "7c602870695d7d6325fcf2a702bc8447ab553627", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -770,7 +770,7 @@ HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n-  input.h $(REAL_H) statistics.h vec.h\n+  input.h $(REAL_H) statistics.h vec.h fixed-value.h\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def"}, {"sha": "a1c9685c2903f26ccbb62973d780cea7a4190d07", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -1233,6 +1233,7 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n     case VALUE:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       /* There's no need to compare the contents of CONST_DOUBLEs or\n \t CONST_INTs because pointer equality is a good enough\n \t comparison for these nodes.  */"}, {"sha": "c2b4d182bd0c324c2ea506ec85ebb59ba43c7099", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2160,6 +2160,11 @@ hash_rtx (const_rtx x, enum machine_mode mode, int *do_not_record_p,\n \t\t + (unsigned int) CONST_DOUBLE_HIGH (x));\n       return hash;\n \n+    case CONST_FIXED:\n+      hash += (unsigned int) code + (unsigned int) GET_MODE (x);\n+      hash += fixed_hash (CONST_FIXED_VALUE (x));\n+      return hash;\n+\n     case CONST_VECTOR:\n       {\n \tint units;\n@@ -2401,6 +2406,7 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n     case CC0:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       return x == y;\n \n     case LABEL_REF:\n@@ -2667,6 +2673,7 @@ canon_reg (rtx x, rtx insn)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2962,6 +2969,7 @@ fold_rtx (rtx x, rtx insn)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -3028,6 +3036,7 @@ fold_rtx (rtx x, rtx insn)\n \t  case SYMBOL_REF:\n \t  case LABEL_REF:\n \t  case CONST_DOUBLE:\n+\t  case CONST_FIXED:\n \t  case CONST_VECTOR:\n \t    const_arg = folded_arg;\n \t    break;\n@@ -3645,7 +3654,8 @@ equiv_constant (rtx x)\n \n       /* See if we previously assigned a constant value to this SUBREG.  */\n       if ((new = lookup_as_function (x, CONST_INT)) != 0\n-          || (new = lookup_as_function (x, CONST_DOUBLE)) != 0)\n+          || (new = lookup_as_function (x, CONST_DOUBLE)) != 0\n+          || (new = lookup_as_function (x, CONST_FIXED)) != 0)\n         return new;\n \n       if (REG_P (SUBREG_REG (x))\n@@ -5707,6 +5717,7 @@ cse_process_notes_1 (rtx x, rtx object, bool *changed)\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case PC:\n     case CC0:\n@@ -6317,6 +6328,7 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:"}, {"sha": "c4c77c2c5ef76b9eaa5dc09422d67728e3e4cab7", "filename": "gcc/cselib.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -237,7 +237,7 @@ entry_and_rtx_equal_p (const void *entry, const void *x_arg)\n   rtx x = (rtx) x_arg;\n   enum machine_mode mode = GET_MODE (x);\n \n-  gcc_assert (GET_CODE (x) != CONST_INT\n+  gcc_assert (GET_CODE (x) != CONST_INT && GET_CODE (x) != CONST_FIXED\n \t      && (mode != VOIDmode || GET_CODE (x) != CONST_DOUBLE));\n   \n   if (mode != GET_MODE (v->val_rtx))\n@@ -246,6 +246,7 @@ entry_and_rtx_equal_p (const void *entry, const void *x_arg)\n   /* Unwrap X if necessary.  */\n   if (GET_CODE (x) == CONST\n       && (GET_CODE (XEXP (x, 0)) == CONST_INT\n+\t  || GET_CODE (XEXP (x, 0)) == CONST_FIXED\n \t  || GET_CODE (XEXP (x, 0)) == CONST_DOUBLE))\n     x = XEXP (x, 0);\n \n@@ -472,6 +473,7 @@ rtx_equal_for_cselib_p (rtx x, rtx y)\n   switch (GET_CODE (x))\n     {\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       return 0;\n \n     case LABEL_REF:\n@@ -554,7 +556,7 @@ rtx_equal_for_cselib_p (rtx x, rtx y)\n static rtx\n wrap_constant (enum machine_mode mode, rtx x)\n {\n-  if (GET_CODE (x) != CONST_INT\n+  if (GET_CODE (x) != CONST_INT && GET_CODE (x) != CONST_FIXED\n       && (GET_CODE (x) != CONST_DOUBLE || GET_MODE (x) != VOIDmode))\n     return x;\n   gcc_assert (mode != VOIDmode);\n@@ -618,6 +620,11 @@ cselib_hash_rtx (rtx x, int create)\n \t\t + (unsigned) CONST_DOUBLE_HIGH (x));\n       return hash ? hash : (unsigned int) CONST_DOUBLE;\n \n+    case CONST_FIXED:\n+      hash += (unsigned int) code + (unsigned int) GET_MODE (x);\n+      hash += fixed_hash (CONST_FIXED_VALUE (x));\n+      return hash ? hash : (unsigned int) CONST_FIXED;\n+\n     case CONST_VECTOR:\n       {\n \tint units;\n@@ -1124,6 +1131,7 @@ cselib_subst_to_values (rtx x)\n     case CONST_DOUBLE:\n     case CONST_VECTOR:\n     case CONST_INT:\n+    case CONST_FIXED:\n       return x;\n \n     case POST_INC:"}, {"sha": "08875038a5a7a6db4572ab6fca15b42057bdde4d", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2821,6 +2821,7 @@ df_uses_record (struct df_collection_rec *collection_rec,\n     case CONST_INT:\n     case CONST:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case PC:\n     case CC0:"}, {"sha": "83fa0895d0de512ed4752b78ba6f284ef7231533", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 70, "deletions": 6, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -1492,6 +1492,15 @@ bits but small enough to fit within twice that number of bits (GCC\n does not provide a mechanism to represent even larger constants).  In\n the latter case, @var{m} will be @code{VOIDmode}.\n \n+@findex const_fixed\n+@item (const_fixed:@var{m} @var{addr})\n+Represents a fixed-point constant of mode @var{m}.\n+The data structure, which contains data with the size of two\n+@code{HOST_BITS_PER_WIDE_INT} and the associated fixed-point mode,\n+is access with the macro @code{CONST_FIXED_VALUE}.  The high part of data\n+is accessed with @code{CONST_FIXED_VALUE_HIGH}; the low part is accessed\n+with @code{CONST_FIXED_VALUE_LOW}.\n+\n @findex const_vector\n @item (const_vector:@var{m} [@var{x0} @var{x1} @dots{}])\n Represents a vector constant.  The square brackets stand for the vector\n@@ -2013,24 +2022,35 @@ still known.\n \n @findex neg\n @findex ss_neg\n+@findex us_neg\n @cindex negation\n @cindex negation with signed saturation\n+@cindex negation with unsigned saturation\n @item (neg:@var{m} @var{x})\n @itemx (ss_neg:@var{m} @var{x})\n+@itemx (us_neg:@var{m} @var{x})\n These two expressions represent the negation (subtraction from zero) of\n the value represented by @var{x}, carried out in mode @var{m}.  They\n differ in the behavior on overflow of integer modes.  In the case of\n @code{neg}, the negation of the operand may be a number not representable\n in mode @var{m}, in which case it is truncated to @var{m}.  @code{ss_neg}\n-ensures that an out-of-bounds result saturates to the maximum or minimum\n-representable value.\n+and @code{us_neg} ensure that an out-of-bounds result saturates to the\n+maximum or minimum signed or unsigned value.\n \n @findex mult\n+@findex ss_mult\n+@findex us_mult\n @cindex multiplication\n @cindex product\n+@cindex multiplication with signed saturation\n+@cindex multiplication with unsigned saturation\n @item (mult:@var{m} @var{x} @var{y})\n+@itemx (ss_mult:@var{m} @var{x} @var{y})\n+@itemx (us_mult:@var{m} @var{x} @var{y})\n Represents the signed product of the values represented by @var{x} and\n @var{y} carried out in machine mode @var{m}.\n+@code{ss_mult} and @code{us_mult} ensure that an out-of-bounds result\n+saturates to the maximum or minimum signed or unsigned value.\n \n Some machines support a multiplication that generates a product wider\n than the operands.  Write the pattern for this as\n@@ -2046,14 +2066,19 @@ For unsigned widening multiplication, use the same idiom, but with\n @code{zero_extend} instead of @code{sign_extend}.\n \n @findex div\n+@findex ss_div\n @cindex division\n @cindex signed division\n+@cindex signed division with signed saturation\n @cindex quotient\n @item (div:@var{m} @var{x} @var{y})\n+@itemx (ss_div:@var{m} @var{x} @var{y})\n Represents the quotient in signed division of @var{x} by @var{y},\n carried out in machine mode @var{m}.  If @var{m} is a floating point\n mode, it represents the exact quotient; otherwise, the integerized\n quotient.\n+@code{ss_div} ensures that an out-of-bounds result saturates to the maximum\n+or minimum signed value.\n \n Some machines have division instructions in which the operands and\n quotient widths are not all the same; you should represent\n@@ -2065,9 +2090,13 @@ such instructions using @code{truncate} and @code{sign_extend} as in,\n \n @findex udiv\n @cindex unsigned division\n+@cindex unsigned division with unsigned saturation\n @cindex division\n @item (udiv:@var{m} @var{x} @var{y})\n+@itemx (us_div:@var{m} @var{x} @var{y})\n Like @code{div} but represents unsigned division.\n+@code{us_div} ensures that an out-of-bounds result saturates to the maximum\n+or minimum unsigned value.\n \n @findex mod\n @findex umod\n@@ -2131,18 +2160,21 @@ fixed-point mode.\n \n @findex ashift\n @findex ss_ashift\n+@findex us_ashift\n @cindex left shift\n @cindex shift\n @cindex arithmetic shift\n @cindex arithmetic shift with signed saturation\n+@cindex arithmetic shift with unsigned saturation\n @item (ashift:@var{m} @var{x} @var{c})\n @itemx (ss_ashift:@var{m} @var{x} @var{c})\n-These two expressions represent the result of arithmetically shifting @var{x}\n+@itemx (us_ashift:@var{m} @var{x} @var{c})\n+These three expressions represent the result of arithmetically shifting @var{x}\n left by @var{c} places.  They differ in their behavior on overflow of integer\n modes.  An @code{ashift} operation is a plain shift with no special behavior\n-in case of a change in the sign bit; @code{ss_ashift} saturates to the minimum\n-or maximum representable value if any of the bits shifted out differs from the\n-final sign bit.\n+in case of a change in the sign bit; @code{ss_ashift} and @code{us_ashift}\n+saturates to the minimum or maximum representable value if any of the bits\n+shifted out differs from the final sign bit.\n \n @var{x} have mode @var{m}, a fixed-point machine mode.  @var{c}\n be a fixed-point mode or be a constant with mode @code{VOIDmode}; which\n@@ -2529,6 +2561,38 @@ When @var{m} is a floating point mode, represents the result of\n converting floating point value @var{x} (valid for mode @var{m}) to an\n integer, still represented in floating point mode @var{m}, by rounding\n towards zero.\n+\n+@findex fract_convert\n+@item (fract_convert:@var{m} @var{x})\n+Represents the result of converting fixed-point value @var{x} to\n+fixed-point mode @var{m}, signed integer value @var{x} to\n+fixed-point mode @var{m}, floating-point value @var{x} to\n+fixed-point mode @var{m}, fixed-point value @var{x} to integer mode @var{m}\n+regarded as signed, or fixed-point value @var{x} to floating-point mode @var{m}.\n+When overflows or underflows happen, the results are undefined.\n+\n+@findex sat_fract\n+@item (sat_fract:@var{m} @var{x})\n+Represents the result of converting fixed-point value @var{x} to\n+fixed-point mode @var{m}, signed integer value @var{x} to\n+fixed-point mode @var{m}, or floating-point value @var{x} to\n+fixed-point mode @var{m}.\n+When overflows or underflows happen, the results are saturated to the\n+maximum or the minimum.\n+\n+@findex unsigned_fract_convert\n+@item (unsigned_fract_convert:@var{m} @var{x})\n+Represents the result of converting fixed-point value @var{x} to\n+integer mode @var{m} regarded as unsigned, or unsigned integer value @var{x} to\n+fixed-point mode @var{m}.\n+When overflows or underflows happen, the results are undefined.\n+\n+@findex unsigned_sat_fract\n+@item (unsigned_sat_fract:@var{m} @var{x})\n+Represents the result of converting unsigned integer value @var{x} to\n+fixed-point mode @var{m}.\n+When overflows or underflows happen, the results are saturated to the\n+maximum or the minimum.\n @end table\n \n @node RTL Declarations"}, {"sha": "dcbeef029484604300338575997f3050bc292518", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 114, "deletions": 2, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -164,6 +164,10 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct reg_attrs)))\n static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n      htab_t const_double_htab;\n \n+/* A hash table storing all CONST_FIXEDs.  */\n+static GTY ((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n+     htab_t const_fixed_htab;\n+\n #define first_insn (cfun->emit->x_first_insn)\n #define last_insn (cfun->emit->x_last_insn)\n #define cur_insn_uid (cfun->emit->x_cur_insn_uid)\n@@ -179,6 +183,9 @@ static int const_int_htab_eq (const void *, const void *);\n static hashval_t const_double_htab_hash (const void *);\n static int const_double_htab_eq (const void *, const void *);\n static rtx lookup_const_double (rtx);\n+static hashval_t const_fixed_htab_hash (const void *);\n+static int const_fixed_htab_eq (const void *, const void *);\n+static rtx lookup_const_fixed (rtx);\n static hashval_t mem_attrs_htab_hash (const void *);\n static int mem_attrs_htab_eq (const void *, const void *);\n static mem_attrs *get_mem_attrs (alias_set_type, tree, rtx, rtx, unsigned int,\n@@ -247,6 +254,33 @@ const_double_htab_eq (const void *x, const void *y)\n \t\t\t   CONST_DOUBLE_REAL_VALUE (b));\n }\n \n+/* Returns a hash code for X (which is really a CONST_FIXED).  */\n+\n+static hashval_t\n+const_fixed_htab_hash (const void *x)\n+{\n+  rtx value = (rtx) x;\n+  hashval_t h;\n+\n+  h = fixed_hash (CONST_FIXED_VALUE (value));\n+  /* MODE is used in the comparison, so it should be in the hash.  */\n+  h ^= GET_MODE (value);\n+  return h;\n+}\n+\n+/* Returns nonzero if the value represented by X (really a ...)\n+   is the same as that represented by Y (really a ...).  */\n+\n+static int\n+const_fixed_htab_eq (const void *x, const void *y)\n+{\n+  rtx a = (rtx)x, b = (rtx)y;\n+\n+  if (GET_MODE (a) != GET_MODE (b))\n+    return 0;\n+  return fixed_identical (CONST_FIXED_VALUE (a), CONST_FIXED_VALUE (b));\n+}\n+\n /* Returns a hash code for X (which is a really a mem_attrs *).  */\n \n static hashval_t\n@@ -452,6 +486,34 @@ const_double_from_real_value (REAL_VALUE_TYPE value, enum machine_mode mode)\n   return lookup_const_double (real);\n }\n \n+/* Determine whether FIXED, a CONST_FIXED, already exists in the\n+   hash table.  If so, return its counterpart; otherwise add it\n+   to the hash table and return it.  */\n+\n+static rtx\n+lookup_const_fixed (rtx fixed)\n+{\n+  void **slot = htab_find_slot (const_fixed_htab, fixed, INSERT);\n+  if (*slot == 0)\n+    *slot = fixed;\n+\n+  return (rtx) *slot;\n+}\n+\n+/* Return a CONST_FIXED rtx for a fixed-point value specified by\n+   VALUE in mode MODE.  */\n+\n+rtx\n+const_fixed_from_fixed_value (FIXED_VALUE_TYPE value, enum machine_mode mode)\n+{\n+  rtx fixed = rtx_alloc (CONST_FIXED);\n+  PUT_MODE (fixed, mode);\n+\n+  fixed->u.fv = value;\n+\n+  return lookup_const_fixed (fixed);\n+}\n+\n /* Return a CONST_DOUBLE or CONST_INT for a value specified as a pair\n    of ints: I0 is the low-order word and I1 is the high-order word.\n    Do not use this routine for non-integer modes; convert to\n@@ -2224,6 +2286,7 @@ verify_rtx_sharing (rtx orig, rtx insn)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2423,6 +2486,7 @@ copy_rtx_if_shared_1 (rtx *orig1)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2540,6 +2604,7 @@ reset_used_flags (rtx x)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -2609,6 +2674,7 @@ set_used_flags (rtx x)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -4838,6 +4904,7 @@ copy_insn_1 (rtx orig)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -5096,14 +5163,17 @@ init_emit_once (int line_numbers)\n   /* We need reg_raw_mode, so initialize the modes now.  */\n   init_reg_modes_once ();\n \n-  /* Initialize the CONST_INT, CONST_DOUBLE, and memory attribute hash\n-     tables.  */\n+  /* Initialize the CONST_INT, CONST_DOUBLE, CONST_FIXED, and memory attribute\n+     hash tables.  */\n   const_int_htab = htab_create_ggc (37, const_int_htab_hash,\n \t\t\t\t    const_int_htab_eq, NULL);\n \n   const_double_htab = htab_create_ggc (37, const_double_htab_hash,\n \t\t\t\t       const_double_htab_eq, NULL);\n \n+  const_fixed_htab = htab_create_ggc (37, const_fixed_htab_hash,\n+\t\t\t\t      const_fixed_htab_eq, NULL);\n+\n   mem_attrs_htab = htab_create_ggc (37, mem_attrs_htab_hash,\n \t\t\t\t    mem_attrs_htab_eq, NULL);\n   reg_attrs_htab = htab_create_ggc (37, reg_attrs_htab_hash,\n@@ -5280,6 +5350,8 @@ init_emit_once (int line_numbers)\n       FCONST0(mode).data.high = 0;\n       FCONST0(mode).data.low = 0;\n       FCONST0(mode).mode = mode;\n+      const_tiny_rtx[0][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST0 (mode), mode);\n     }\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_UFRACT);\n@@ -5289,6 +5361,8 @@ init_emit_once (int line_numbers)\n       FCONST0(mode).data.high = 0;\n       FCONST0(mode).data.low = 0;\n       FCONST0(mode).mode = mode;\n+      const_tiny_rtx[0][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST0 (mode), mode);\n     }\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_ACCUM);\n@@ -5298,6 +5372,8 @@ init_emit_once (int line_numbers)\n       FCONST0(mode).data.high = 0;\n       FCONST0(mode).data.low = 0;\n       FCONST0(mode).mode = mode;\n+      const_tiny_rtx[0][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST0 (mode), mode);\n \n       /* We store the value 1.  */\n       FCONST1(mode).data.high = 0;\n@@ -5308,6 +5384,8 @@ init_emit_once (int line_numbers)\n                      &FCONST1(mode).data.low,\n \t\t     &FCONST1(mode).data.high,\n                      SIGNED_FIXED_POINT_MODE_P (mode));\n+      const_tiny_rtx[1][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST1 (mode), mode);\n     }\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_UACCUM);\n@@ -5317,6 +5395,8 @@ init_emit_once (int line_numbers)\n       FCONST0(mode).data.high = 0;\n       FCONST0(mode).data.low = 0;\n       FCONST0(mode).mode = mode;\n+      const_tiny_rtx[0][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST0 (mode), mode);\n \n       /* We store the value 1.  */\n       FCONST1(mode).data.high = 0;\n@@ -5327,6 +5407,38 @@ init_emit_once (int line_numbers)\n                      &FCONST1(mode).data.low,\n \t\t     &FCONST1(mode).data.high,\n                      SIGNED_FIXED_POINT_MODE_P (mode));\n+      const_tiny_rtx[1][(int) mode] = CONST_FIXED_FROM_FIXED_VALUE (\n+\t\t\t\t      FCONST1 (mode), mode);\n+    }\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FRACT);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+    }\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_UFRACT);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+    }\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_ACCUM);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+      const_tiny_rtx[1][(int) mode] = gen_const_vector (mode, 1);\n+    }\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_UACCUM);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+      const_tiny_rtx[1][(int) mode] = gen_const_vector (mode, 1);\n     }\n \n   for (i = (int) CCmode; i < (int) MAX_MACHINE_MODE; ++i)"}, {"sha": "af10db685301f107337262ec9e33856bae743748", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -1187,6 +1187,7 @@ want_to_gcse_p (rtx x)\n     case SUBREG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CALL:\n       return 0;\n@@ -1283,6 +1284,7 @@ oprs_unchanged_p (const_rtx x, const_rtx insn, int avail_p)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2265,6 +2267,7 @@ oprs_not_set_p (const_rtx x, const_rtx insn)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2533,6 +2536,7 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap, int set_p)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -5568,6 +5572,7 @@ extract_mentioned_regs_helper (rtx x, rtx accum)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:"}, {"sha": "caf808e99c99034584d13a2968455f437aa85c38", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -257,6 +257,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n       return;\n \n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       /* These shouldn't be written in MD files.  Instead, the appropriate\n \t routines in varasm.c should be called.  */\n       gcc_unreachable ();"}, {"sha": "89d3011796b1cea3ad68197bd00200959d8d9225", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -156,7 +156,8 @@ special_rtx (int idx)\n static int\n excluded_rtx (int idx)\n {\n-  return (strcmp (defs[idx].enumname, \"CONST_DOUBLE\") == 0);\n+  return ((strcmp (defs[idx].enumname, \"CONST_DOUBLE\") == 0)\n+\t  || (strcmp (defs[idx].enumname, \"CONST_FIXED\") == 0));\n }\n \n /* Place a list of all format specifiers we use into the array FORMAT.  */"}, {"sha": "dc56ca479174cdb5c238234a4a2eadd7a73b92f1", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -538,6 +538,7 @@ equiv_init_varies_p (rtx x)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -655,6 +656,7 @@ contains_replace_regs (rtx x)\n     case LABEL_REF:\n     case SYMBOL_REF:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case PC:\n     case CC0:\n@@ -703,6 +705,7 @@ memref_referenced_p (rtx memref, rtx x)\n     case LABEL_REF:\n     case SYMBOL_REF:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case PC:\n     case CC0:"}, {"sha": "e4eb2184f7417341207bfa5167f8e442acf2b394", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -185,6 +185,7 @@ check_maybe_invariant (rtx x)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:\n@@ -283,6 +284,7 @@ hash_invariant_expr_1 (rtx insn, rtx x)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:\n@@ -343,6 +345,7 @@ invariant_expr_equal_p (rtx insn1, rtx e1, rtx insn2, rtx e2)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:"}, {"sha": "3cbd7ebae0d0921b02c4771180672be3c093d87a", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -522,6 +522,7 @@ oprs_unchanged_p (rtx x, rtx insn, bool after_insn)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:"}, {"sha": "81ac098f2187d442fbdda2548c0973c3ea70b122", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2244,6 +2244,7 @@ reg_scan_mark_refs (rtx x, rtx insn)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CC0:\n     case PC:"}, {"sha": "68a3e68f78e5de28a302b917bdf2aa04d16a48f0", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -654,6 +654,7 @@ scan_rtx (rtx insn, rtx *loc, enum reg_class cl,\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:"}, {"sha": "60e36ffc6c5ecbd645dff455555a3f93baa57208", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2210,6 +2210,7 @@ operands_match_p (rtx x, rtx y)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       return 0;\n \n     case LABEL_REF:\n@@ -5142,6 +5143,7 @@ subst_reg_equivs (rtx ad, rtx insn)\n     case CONST_INT:\n     case CONST:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:"}, {"sha": "0d6b6325184747f4acca3ed285cc6ea79e101e15", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2411,6 +2411,7 @@ eliminate_regs_1 (rtx x, enum machine_mode mem_mode, rtx insn,\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CONST:\n     case SYMBOL_REF:\n@@ -2804,6 +2805,7 @@ elimination_effects (rtx x, enum machine_mode mem_mode)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CONST:\n     case SYMBOL_REF:\n@@ -3952,6 +3954,7 @@ scan_paradoxical_subregs (rtx x)\n     case SYMBOL_REF:\n     case LABEL_REF:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR: /* shouldn't happen, but just in case.  */\n     case CC0:\n     case PC:"}, {"sha": "7cb4d2ae490c02be67da4bab881e071e5e0ae8bf", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -222,6 +222,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case PC:\n     case SYMBOL_REF:\n@@ -638,6 +639,7 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n     case USE:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case LABEL_REF:\n     case SYMBOL_REF:"}, {"sha": "edf393f29d2e661d8f6f96a2a1dbc28c2bac6944", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -110,7 +110,7 @@ const enum rtx_class rtx_class[NUM_RTX_CODE] = {\n \n const unsigned char rtx_code_size[NUM_RTX_CODE] = {\n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)\t\t\t\t\\\n-  ((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE\t\t\t\\\n+  ((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE || (ENUM) == CONST_FIXED\\\n    ? RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (HOST_WIDE_INT)\t\\\n    : RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (rtunion)),\n \n@@ -234,6 +234,7 @@ copy_rtx (rtx orig)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -374,6 +375,7 @@ rtx_equal_p (const_rtx x, const_rtx y)\n     case SCRATCH:\n     case CONST_DOUBLE:\n     case CONST_INT:\n+    case CONST_FIXED:\n       return 0;\n \n     default:"}, {"sha": "9dee20016e3bf1a8d88c5a54553a38bfdee60049", "filename": "gcc/rtl.def", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -323,6 +323,9 @@ DEF_RTL_EXPR(RESX, \"resx\", \"i\", RTX_EXTRA)\n /* numeric integer constant */\n DEF_RTL_EXPR(CONST_INT, \"const_int\", \"w\", RTX_CONST_OBJ)\n \n+/* fixed-point constant */\n+DEF_RTL_EXPR(CONST_FIXED, \"const_fixed\", \"www\", RTX_CONST_OBJ)\n+\n /* numeric floating point constant.\n    Operands hold the value.  They are all 'w' and there may be from 2 to 6;\n    see real.h.  */\n@@ -452,8 +455,18 @@ DEF_RTL_EXPR(NEG, \"neg\", \"e\", RTX_UNARY)\n \n DEF_RTL_EXPR(MULT, \"mult\", \"ee\", RTX_COMM_ARITH)\n \n+/* Multiplication with signed saturation */\n+DEF_RTL_EXPR(SS_MULT, \"ss_mult\", \"ee\", RTX_COMM_ARITH)\n+/* Multiplication with unsigned saturation */\n+DEF_RTL_EXPR(US_MULT, \"us_mult\", \"ee\", RTX_COMM_ARITH)\n+\n /* Operand 0 divided by operand 1.  */\n DEF_RTL_EXPR(DIV, \"div\", \"ee\", RTX_BIN_ARITH)\n+/* Division with signed saturation */\n+DEF_RTL_EXPR(SS_DIV, \"ss_div\", \"ee\", RTX_BIN_ARITH)\n+/* Division with unsigned saturation */\n+DEF_RTL_EXPR(US_DIV, \"us_div\", \"ee\", RTX_BIN_ARITH)\n+\n /* Remainder of operand 0 divided by operand 1.  */\n DEF_RTL_EXPR(MOD, \"mod\", \"ee\", RTX_BIN_ARITH)\n \n@@ -576,6 +589,37 @@ DEF_RTL_EXPR(UNSIGNED_FLOAT, \"unsigned_float\", \"e\", RTX_UNARY)\n    Value is defined only when the operand's value is an integer.  */\n DEF_RTL_EXPR(UNSIGNED_FIX, \"unsigned_fix\", \"e\", RTX_UNARY)\n \n+/* Conversions involving fractional fixed-point types without saturation,\n+   including:\n+     fractional to fractional (of different precision),\n+     signed integer to fractional,\n+     fractional to signed integer,\n+     floating point to fractional,\n+     fractional to floating point.\n+   NOTE: fractional can be either signed or unsigned for conversions.  */\n+DEF_RTL_EXPR(FRACT_CONVERT, \"fract_convert\", \"e\", RTX_UNARY)\n+\n+/* Conversions involving fractional fixed-point types and unsigned integer\n+   without saturation, including:\n+     unsigned integer to fractional,\n+     fractional to unsigned integer.\n+   NOTE: fractional can be either signed or unsigned for conversions.  */\n+DEF_RTL_EXPR(UNSIGNED_FRACT_CONVERT, \"unsigned_fract_convert\", \"e\", RTX_UNARY)\n+\n+/* Conversions involving fractional fixed-point types with saturation,\n+   including:\n+     fractional to fractional (of different precision),\n+     signed integer to fractional,\n+     floating point to fractional.\n+   NOTE: fractional can be either signed or unsigned for conversions.  */\n+DEF_RTL_EXPR(SAT_FRACT, \"sat_fract\", \"e\", RTX_UNARY)\n+\n+/* Conversions involving fractional fixed-point types and unsigned integer\n+   with saturation, including:\n+     unsigned integer to fractional.\n+   NOTE: fractional can be either signed or unsigned for conversions.  */\n+DEF_RTL_EXPR(UNSIGNED_SAT_FRACT, \"unsigned_sat_fract\", \"e\", RTX_UNARY)\n+\n /* Absolute value */\n DEF_RTL_EXPR(ABS, \"abs\", \"e\", RTX_UNARY)\n \n@@ -662,13 +706,18 @@ DEF_RTL_EXPR(SS_MINUS, \"ss_minus\", \"ee\", RTX_BIN_ARITH)\n \n /* Negation with signed saturation.  */\n DEF_RTL_EXPR(SS_NEG, \"ss_neg\", \"e\", RTX_UNARY)\n+/* Negation with unsigned saturation.  */\n+DEF_RTL_EXPR(US_NEG, \"us_neg\", \"e\", RTX_UNARY)\n \n /* Absolute value with signed saturation.  */\n DEF_RTL_EXPR(SS_ABS, \"ss_abs\", \"e\", RTX_UNARY)\n \n /* Shift left with signed saturation.  */\n DEF_RTL_EXPR(SS_ASHIFT, \"ss_ashift\", \"ee\", RTX_BIN_ARITH)\n \n+/* Shift left with unsigned saturation.  */\n+DEF_RTL_EXPR(US_ASHIFT, \"us_ashift\", \"ee\", RTX_BIN_ARITH)\n+\n /* Operand 0 minus operand 1, with unsigned saturation.  */\n DEF_RTL_EXPR(US_MINUS, \"us_minus\", \"ee\", RTX_BIN_ARITH)\n "}, {"sha": "cf4a0052f519eef9f3db22873e9ac62bbf4acda6", "filename": "gcc/rtl.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"real.h\"\n #include \"vec.h\"\n+#include \"fixed-value.h\"\n #include \"alias.h\"\n \n #undef FFS  /* Some systems predefine this symbol; don't let it interfere.  */\n@@ -308,6 +309,7 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n     HOST_WIDE_INT hwint[1];\n     struct block_symbol block_sym;\n     struct real_value rv;\n+    struct fixed_value fv;\n   } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n@@ -530,6 +532,13 @@ struct rtvec_def GTY(()) {\n \t\t\t\t __LINE__, __FUNCTION__);\t\t\\\n    &_rtx->u.rv; })\n \n+#define XCNMPFV(RTX, C, M) __extension__\t\t\t\t\\\n+({ rtx const _rtx = (RTX);\t\t\t\t\t\t\\\n+   if (GET_CODE (_rtx) != (C) || GET_MODE (_rtx) == (M))\t\t\\\n+     rtl_check_failed_code_mode (_rtx, (C), (M), true, __FILE__,\t\\\n+\t\t\t\t __LINE__, __FUNCTION__);\t\t\\\n+   &_rtx->u.fv; })\n+\n #define BLOCK_SYMBOL_CHECK(RTX) __extension__\t\t\t\t\\\n ({ __typeof (RTX) const _symbol = (RTX);\t\t\t\t\\\n    const unsigned int flags = RTL_CHECKC1 (_symbol, 1, SYMBOL_REF).rt_int; \\\n@@ -574,6 +583,7 @@ extern void rtvec_check_failed_bounds (const_rtvec, int, const char *, int,\n #define XCMWINT(RTX, N, C, M)\t    ((RTX)->u.hwint[N])\n #define XCNMWINT(RTX, N, C, M)\t    ((RTX)->u.hwint[N])\n #define XCNMPRV(RTX, C, M)\t    (&(RTX)->u.rv)\n+#define XCNMPFV(RTX, C, M)\t    (&(RTX)->u.fv)\n #define BLOCK_SYMBOL_CHECK(RTX)\t    (&(RTX)->u.block_sym)\n \n #endif\n@@ -1011,6 +1021,13 @@ rhs_regno (const_rtx x)\n #define CONST_DOUBLE_REAL_VALUE(r) \\\n   ((const struct real_value *) XCNMPRV (r, CONST_DOUBLE, VOIDmode))\n \n+#define CONST_FIXED_VALUE(r) \\\n+  ((const struct fixed_value *) XCNMPFV (r, CONST_FIXED, VOIDmode))\n+#define CONST_FIXED_VALUE_HIGH(r) \\\n+  ((HOST_WIDE_INT) (CONST_FIXED_VALUE(r)->data.high))\n+#define CONST_FIXED_VALUE_LOW(r) \\\n+  ((HOST_WIDE_INT) (CONST_FIXED_VALUE(r)->data.low))\n+\n /* For a CONST_VECTOR, return element #n.  */\n #define CONST_VECTOR_ELT(RTX, N) XCVECEXP (RTX, 0, N, CONST_VECTOR)\n "}, {"sha": "90a62cf1b99bbb87fd8be458e5ec9cd3167d6324", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -120,6 +120,7 @@ rtx_unstable_p (const_rtx x)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -194,6 +195,7 @@ rtx_varies_p (const_rtx x, bool for_alias)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -573,6 +575,7 @@ count_occurrences (const_rtx x, const_rtx find, int count_dest)\n     case REG:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CODE_LABEL:\n@@ -659,6 +662,7 @@ reg_mentioned_p (const_rtx reg, const_rtx in)\n     case CONST_INT:\n     case CONST_VECTOR:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n       /* These are kept unique for a given value.  */\n       return 0;\n \n@@ -854,6 +858,7 @@ modified_between_p (rtx x, rtx start, rtx end)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CONST:\n     case SYMBOL_REF:\n@@ -912,6 +917,7 @@ modified_in_p (rtx x, rtx insn)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CONST:\n     case SYMBOL_REF:\n@@ -1974,6 +1980,7 @@ volatile_insn_p (const_rtx x)\n     case CONST_INT:\n     case CONST:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CC0:\n     case PC:\n@@ -2038,6 +2045,7 @@ volatile_refs_p (const_rtx x)\n     case CONST_INT:\n     case CONST:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CC0:\n     case PC:\n@@ -2100,6 +2108,7 @@ side_effects_p (const_rtx x)\n     case CONST_INT:\n     case CONST:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CC0:\n     case PC:\n@@ -2189,6 +2198,7 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n       /* Handle these cases quickly.  */\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -2388,6 +2398,7 @@ inequality_comparisons_p (const_rtx x)\n     case CC0:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case CONST:\n     case LABEL_REF:\n@@ -2637,6 +2648,7 @@ computed_jump_p_1 (const_rtx x)\n     case CONST:\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case REG:\n@@ -2873,6 +2885,8 @@ commutative_operand_precedence (rtx op)\n     return -8;\n   if (code == CONST_DOUBLE)\n     return -7;\n+  if (code == CONST_FIXED)\n+    return -7;\n   op = avoid_constant_pool_reference (op);\n   code = GET_CODE (op);\n \n@@ -2883,6 +2897,8 @@ commutative_operand_precedence (rtx op)\n         return -6;\n       if (code == CONST_DOUBLE)\n         return -5;\n+      if (code == CONST_FIXED)\n+        return -5;\n       return -4;\n \n     case RTX_EXTRA:"}, {"sha": "a5bbac2268e188d5b67f92fd1d25507bc0cba68b", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -1680,6 +1680,7 @@ sched_analyze_2 (struct deps *deps, rtx x, rtx insn)\n     {\n     case CONST_INT:\n     case CONST_DOUBLE:\n+    case CONST_FIXED:\n     case CONST_VECTOR:\n     case SYMBOL_REF:\n     case CONST:"}, {"sha": "8f4597247e5fe625c745496d2085022ac5c8120a", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -447,6 +447,10 @@ print_value (char *buf, const_rtx x, int verbose)\n \t\t (unsigned HOST_WIDE_INT) CONST_DOUBLE_HIGH (x));\n       cur = safe_concat (buf, cur, t);\n       break;\n+    case CONST_FIXED:\n+      fixed_to_decimal (t, CONST_FIXED_VALUE (x), sizeof (t));\n+      cur = safe_concat (buf, cur, t);\n+      break;\n     case CONST_STRING:\n       cur = safe_concat (buf, cur, \"\\\"\");\n       cur = safe_concat (buf, cur, XSTR (x, 0));"}, {"sha": "7b31c753c5285e3f83bcba8ad8f4aa383b3a1e33", "filename": "gcc/varasm.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091a3ac7b8dc905e22be2198966d43977699a49e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=091a3ac7b8dc905e22be2198966d43977699a49e", "patch": "@@ -2570,11 +2570,17 @@ assemble_integer (rtx x, unsigned int size, unsigned int align, int force)\n       enum machine_mode omode, imode;\n       unsigned int subalign;\n       unsigned int subsize, i;\n+      unsigned char mclass;\n \n       subsize = size > UNITS_PER_WORD? UNITS_PER_WORD : 1;\n       subalign = MIN (align, subsize * BITS_PER_UNIT);\n-      omode = mode_for_size (subsize * BITS_PER_UNIT, MODE_INT, 0);\n-      imode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n+      if (GET_CODE (x) == CONST_FIXED)\n+\tmclass = GET_MODE_CLASS (GET_MODE (x));\n+      else\n+\tmclass = MODE_INT;\n+\n+      omode = mode_for_size (subsize * BITS_PER_UNIT, mclass, 0);\n+      imode = mode_for_size (size * BITS_PER_UNIT, mclass, 0);\n \n       for (i = 0; i < size; i += subsize)\n \t{\n@@ -2686,6 +2692,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n       break;\n \n     case REAL_CST:\n+    case FIXED_CST:\n     case STRING_CST:\n     case COMPLEX_CST:\n     case CONSTRUCTOR:\n@@ -2757,6 +2764,9 @@ const_hash_1 (const tree exp)\n     case REAL_CST:\n       return real_hash (TREE_REAL_CST_PTR (exp));\n \n+    case FIXED_CST:\n+      return fixed_hash (TREE_FIXED_CST_PTR (exp));\n+\n     case STRING_CST:\n       p = TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n@@ -2875,6 +2885,13 @@ compare_constant (const tree t1, const tree t2)\n \n       return REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n \n+    case FIXED_CST:\n+      /* Fixed constants are the same only if the same width of type.  */\n+      if (TYPE_PRECISION (TREE_TYPE (t1)) != TYPE_PRECISION (TREE_TYPE (t2)))\n+\treturn 0;\n+\n+      return FIXED_VALUES_IDENTICAL (TREE_FIXED_CST (t1), TREE_FIXED_CST (t2));\n+\n     case STRING_CST:\n       if (TYPE_MODE (TREE_TYPE (t1)) != TYPE_MODE (TREE_TYPE (t2)))\n \treturn 0;\n@@ -3001,6 +3018,7 @@ copy_constant (tree exp)\n \n     case INTEGER_CST:\n     case REAL_CST:\n+    case FIXED_CST:\n     case STRING_CST:\n       return copy_node (exp);\n \n@@ -3395,6 +3413,10 @@ const_rtx_hash_1 (rtx *xp, void *data)\n \th ^= real_hash (CONST_DOUBLE_REAL_VALUE (x));\n       break;\n \n+    case CONST_FIXED:\n+      h ^= fixed_hash (CONST_FIXED_VALUE (x));\n+      break;\n+\n     case CONST_VECTOR:\n       {\n \tint i;\n@@ -3636,11 +3658,19 @@ output_constant_pool_2 (enum machine_mode mode, rtx x, unsigned int align)\n \n     case MODE_INT:\n     case MODE_PARTIAL_INT:\n+    case MODE_FRACT:\n+    case MODE_UFRACT:\n+    case MODE_ACCUM:\n+    case MODE_UACCUM:\n       assemble_integer (x, GET_MODE_SIZE (mode), align, 1);\n       break;\n \n     case MODE_VECTOR_FLOAT:\n     case MODE_VECTOR_INT:\n+    case MODE_VECTOR_FRACT:\n+    case MODE_VECTOR_UFRACT:\n+    case MODE_VECTOR_ACCUM:\n+    case MODE_VECTOR_UACCUM:\n       {\n \tint i, units;\n         enum machine_mode submode = GET_MODE_INNER (mode);\n@@ -4058,6 +4088,7 @@ initializer_constant_valid_p (tree value, tree endtype)\n     case INTEGER_CST:\n     case VECTOR_CST:\n     case REAL_CST:\n+    case FIXED_CST:\n     case STRING_CST:\n     case COMPLEX_CST:\n       return null_pointer_node;\n@@ -4381,10 +4412,11 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n+    case FIXED_POINT_TYPE:\n       if (! assemble_integer (expand_expr (exp, NULL_RTX, VOIDmode,\n \t\t\t\t\t   EXPAND_INITIALIZER),\n \t\t\t      MIN (size, thissize), align, 0))\n-\terror (\"initializer for integer value is too complicated\");\n+\terror (\"initializer for integer/fixed-point value is too complicated\");\n       break;\n \n     case REAL_TYPE:"}]}