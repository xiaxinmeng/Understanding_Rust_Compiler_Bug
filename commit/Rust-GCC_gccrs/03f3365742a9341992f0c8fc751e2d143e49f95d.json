{"sha": "03f3365742a9341992f0c8fc751e2d143e49f95d", "node_id": "C_kwDOANBUbNoAKDAzZjMzNjU3NDJhOTM0MTk5MmYwYzhmYzc1MWUyZDE0M2U0OWY5NWQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-09-27T09:26:08Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-09-28T17:32:14Z"}, "message": "RISC-V: Add ABI-defined RVV types.\n\ngcc/ChangeLog:\n\n\t* config.gcc: Add riscv-vector-builtins.o.\n\t* config/riscv/riscv-builtins.cc (riscv_init_builtins): Add RVV builtin function.\n\t* config/riscv/riscv-protos.h (riscv_v_ext_enabled_vector_mode_p): New function.\n\t* config/riscv/riscv.cc (ENTRY): New macro.\n\t(riscv_v_ext_enabled_vector_mode_p): New function.\n\t(riscv_mangle_type): Add RVV mangle.\n\t(riscv_vector_mode_supported_p): Adjust RVV machine mode.\n\t(riscv_verify_type_context): Add context check for RVV.\n\t(riscv_vector_alignment): Add RVV alignment target hook support.\n\t(TARGET_VECTOR_MODE_SUPPORTED_P): New target hook support.\n\t(TARGET_VERIFY_TYPE_CONTEXT): Ditto.\n\t(TARGET_VECTOR_ALIGNMENT): Ditto.\n\t* config/riscv/t-riscv: Add riscv-vector-builtins.o\n\t* config/riscv/riscv-vector-builtins.cc: New file.\n\t* config/riscv/riscv-vector-builtins.def: New file.\n\t* config/riscv/riscv-vector-builtins.h: New file.\n\t* config/riscv/riscv-vector-switch.def: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/abi-1.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-2.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-3.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-4.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-5.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-6.c: New test.\n\t* gcc.target/riscv/rvv/base/abi-7.c: New test.\n\t* gcc.target/riscv/rvv/rvv.exp: New test.", "tree": {"sha": "1670a26a897374dbadad0cd6c18eac5cbf9488a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1670a26a897374dbadad0cd6c18eac5cbf9488a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f3365742a9341992f0c8fc751e2d143e49f95d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f3365742a9341992f0c8fc751e2d143e49f95d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f3365742a9341992f0c8fc751e2d143e49f95d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f3365742a9341992f0c8fc751e2d143e49f95d/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7be27bf7ef63c770a591f69845c4245522cd76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7be27bf7ef63c770a591f69845c4245522cd76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7be27bf7ef63c770a591f69845c4245522cd76"}], "stats": {"total": 1318, "additions": 1317, "deletions": 1}, "files": [{"sha": "7eb07870425677917011f1d5522eb31a3a921705", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -516,6 +516,7 @@ pru-*-*)\n riscv*)\n \tcpu_type=riscv\n \textra_objs=\"riscv-builtins.o riscv-c.o riscv-sr.o riscv-shorten-memrefs.o riscv-selftests.o\"\n+\textra_objs=\"${extra_objs} riscv-vector-builtins.o\"\n \td_target_objs=\"riscv-d.o\"\n \t;;\n rs6000*-*-*)"}, {"sha": "a51037a8f7a36f670c6a2bd5c61c9613cd33d11f", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"expr.h\"\n #include \"langhooks.h\"\n+#include \"riscv-vector-builtins.h\"\n \n /* Macros to create an enumeration identifier for a function prototype.  */\n #define RISCV_FTYPE_NAME0(A) RISCV_##A##_FTYPE\n@@ -213,6 +214,7 @@ void\n riscv_init_builtins (void)\n {\n   riscv_init_builtin_types ();\n+  riscv_vector::init_builtins ();\n \n   for (size_t i = 0; i < ARRAY_SIZE (riscv_builtins); i++)\n     {"}, {"sha": "101361a4b443aed865ccebc80548364bf8e562f1", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -75,6 +75,7 @@ extern bool riscv_store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern rtx riscv_gen_gpr_save_insn (struct riscv_frame_info *);\n extern bool riscv_gpr_save_operation_p (rtx);\n extern void riscv_reinit (void);\n+extern bool riscv_v_ext_enabled_vector_mode_p (machine_mode);\n \n /* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "019a40d1e1691b6bbf2084c3807e8cca519c3317", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,279 @@\n+/* Builtins implementation for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+#include \"memmodel.h\"\n+#include \"insn-codes.h\"\n+#include \"optabs.h\"\n+#include \"recog.h\"\n+#include \"diagnostic.h\"\n+#include \"expr.h\"\n+#include \"function.h\"\n+#include \"fold-const.h\"\n+#include \"gimplify.h\"\n+#include \"explow.h\"\n+#include \"stor-layout.h\"\n+#include \"alias.h\"\n+#include \"langhooks.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n+#include \"targhooks.h\"\n+#include \"regs.h\"\n+#include \"riscv-vector-builtins.h\"\n+\n+namespace riscv_vector {\n+\n+/* Information about each RVV type.  */\n+static CONSTEXPR const vector_type_info vector_types[] = {\n+#define DEF_RVV_TYPE(USER_NAME, NCHARS, ABI_NAME, ARGS...)    \\\n+  {#USER_NAME, #ABI_NAME, \"u\" #NCHARS #ABI_NAME},\n+#include \"riscv-vector-builtins.def\"\n+};\n+\n+/* The scalar type associated with each vector type.  */\n+static GTY (()) tree scalar_types[NUM_VECTOR_TYPES];\n+/* The machine mode associated with each vector type.  */\n+static GTY (()) machine_mode vector_modes[NUM_VECTOR_TYPES];\n+/* The RVV types, with their built-in\n+   \"__rvv..._t\" name.  Allow an index of NUM_VECTOR_TYPES, which always\n+   yields a null tree.  */\n+static GTY(()) tree abi_vector_types[NUM_VECTOR_TYPES + 1];\n+\n+rvv_switcher::rvv_switcher ()\n+{\n+  /* Set have_regs_of_mode before targetm.init_builtins ().  */\n+  memcpy (m_old_have_regs_of_mode, have_regs_of_mode,\n+\t  sizeof (have_regs_of_mode));\n+  for (int i = 0; i < NUM_MACHINE_MODES; ++i)\n+    if (riscv_v_ext_enabled_vector_mode_p ((machine_mode) i))\n+      have_regs_of_mode[i] = true;\n+}\n+\n+rvv_switcher::~rvv_switcher ()\n+{\n+  /* Recover back have_regs_of_mode.  */\n+  memcpy (have_regs_of_mode, m_old_have_regs_of_mode,\n+\t  sizeof (have_regs_of_mode));\n+}\n+\n+/* Add type attributes to builtin type tree, currently only the mangled name. */\n+static void\n+add_vector_type_attribute (tree type, const char *mangled_name)\n+{\n+  tree mangled_name_tree = get_identifier (mangled_name);\n+  tree value = tree_cons (NULL_TREE, mangled_name_tree, NULL_TREE);\n+  TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"RVV type\"), value,\n+\t\t\t\t      TYPE_ATTRIBUTES (type));\n+}\n+\n+/* Force TYPE to be a sizeless type.  */\n+static void\n+make_type_sizeless (tree type)\n+{\n+  TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"RVV sizeless type\"),\n+\t\t\t\t      NULL_TREE, TYPE_ATTRIBUTES (type));\n+}\n+\n+/* Return true if TYPE is a sizeless type.  */\n+static bool\n+sizeless_type_p (const_tree type)\n+{\n+  if (type == error_mark_node)\n+    return NULL_TREE;\n+  return lookup_attribute (\"RVV sizeless type\", TYPE_ATTRIBUTES (type));\n+}\n+\n+/* If TYPE is an ABI-defined RVV type, return its attribute descriptor,\n+   otherwise return null.  */\n+static tree\n+lookup_vector_type_attribute (const_tree type)\n+{\n+  if (type == error_mark_node)\n+    return NULL_TREE;\n+  return lookup_attribute (\"RVV type\", TYPE_ATTRIBUTES (type));\n+}\n+\n+/* If TYPE is a built-in type defined by the RVV ABI, return the mangled name,\n+   otherwise return NULL.  */\n+const char *\n+mangle_builtin_type (const_tree type)\n+{\n+  if (TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL)\n+    type = TREE_TYPE (TYPE_NAME (type));\n+  if (tree attr = lookup_vector_type_attribute (type))\n+    if (tree id = TREE_VALUE (chain_index (0, TREE_VALUE (attr))))\n+      return IDENTIFIER_POINTER (id);\n+  return NULL;\n+}\n+\n+/* Register the built-in RVV ABI types, such as __rvv_int32m1_t.  */\n+static void\n+register_builtin_types ()\n+{\n+  /* int32_t/uint32_t defined as `long`/`unsigned long` in RV32,\n+     but intSI_type_node/unsigned_intSI_type_node is\n+     `int` and `unsigned int`, so use long_integer_type_node and\n+     long_unsigned_type_node here for type consistent.  */\n+  tree int32_type_node\n+    = TARGET_64BIT ? intSI_type_node : long_integer_type_node;\n+  tree unsigned_int32_type_node\n+    = TARGET_64BIT ? unsigned_intSI_type_node : long_unsigned_type_node;\n+\n+  machine_mode mode;\n+#define DEF_RVV_TYPE(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE,    \\\n+\t\t     VECTOR_MODE_MIN_VLEN_32)                                  \\\n+  mode = TARGET_MIN_VLEN > 32 ? VECTOR_MODE##mode                              \\\n+\t\t\t      : VECTOR_MODE_MIN_VLEN_32##mode;                 \\\n+  scalar_types[VECTOR_TYPE_##USER_NAME]                                        \\\n+    = riscv_v_ext_enabled_vector_mode_p (mode) ? SCALAR_TYPE##_type_node       \\\n+\t\t\t\t\t       : NULL_TREE;                    \\\n+  vector_modes[VECTOR_TYPE_##USER_NAME]                                        \\\n+    = riscv_v_ext_enabled_vector_mode_p (mode) ? mode : VOIDmode;\n+#include \"riscv-vector-builtins.def\"\n+\n+  for (unsigned int i = 0; i < NUM_VECTOR_TYPES; ++i)\n+    {\n+      tree eltype = scalar_types[i];\n+      mode = vector_modes[i];\n+      /* We disabled the datatypes according '-march'.  */\n+      if (!eltype)\n+\tcontinue;\n+\n+      tree vectype = build_vector_type_for_mode (eltype, mode);\n+      gcc_assert (\n+\tVECTOR_MODE_P (TYPE_MODE (vectype)) && TYPE_MODE (vectype) == mode\n+\t&& TYPE_MODE_RAW (vectype) == mode && TYPE_ALIGN (vectype) <= 128\n+\t&& known_eq (tree_to_poly_uint64 (TYPE_SIZE (vectype)),\n+\t\t     GET_MODE_BITSIZE (mode)));\n+      vectype = build_distinct_type_copy (vectype);\n+      gcc_assert (vectype == TYPE_MAIN_VARIANT (vectype));\n+      SET_TYPE_STRUCTURAL_EQUALITY (vectype);\n+      TYPE_ARTIFICIAL (vectype) = 1;\n+      TYPE_INDIVISIBLE_P (vectype) = 1;\n+      add_vector_type_attribute (vectype, vector_types[i].mangled_name);\n+      make_type_sizeless (vectype);\n+      abi_vector_types[i] = vectype;\n+      lang_hooks.types.register_builtin_type (vectype,\n+\t\t\t\t\t      vector_types[i].abi_name);\n+    }\n+}\n+\n+/* Initialize all compiler built-ins related to RVV that should be\n+   defined at start-up.  */\n+void\n+init_builtins ()\n+{\n+  rvv_switcher rvv;\n+  if (!TARGET_VECTOR)\n+    return;\n+  register_builtin_types ();\n+}\n+\n+/* Implement TARGET_VERIFY_TYPE_CONTEXT for RVV types.  */\n+bool\n+verify_type_context (location_t loc, type_context_kind context, const_tree type,\n+\t\t     bool silent_p)\n+{\n+  if (!sizeless_type_p (type))\n+    return true;\n+\n+  switch (context)\n+    {\n+    case TCTX_SIZEOF:\n+    case TCTX_STATIC_STORAGE:\n+      if (!silent_p)\n+\terror_at (loc, \"RVV type %qT does not have a fixed size\", type);\n+\n+      return false;\n+\n+    case TCTX_ALIGNOF:\n+      if (!silent_p)\n+\terror_at (loc, \"RVV type %qT does not have a defined alignment\", type);\n+\n+      return false;\n+\n+    case TCTX_THREAD_STORAGE:\n+      if (!silent_p)\n+\terror_at (loc,\n+\t\t  \"variables of type %qT cannot have thread-local\"\n+\t\t  \" storage duration\",\n+\t\t  type);\n+\n+      return false;\n+\n+    case TCTX_POINTER_ARITH:\n+      if (!silent_p)\n+\terror_at (loc, \"arithmetic on pointer to RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_FIELD:\n+      if (silent_p)\n+\t;\n+      else if (lang_GNU_CXX ())\n+\terror_at (loc, \"member variables cannot have RVV type %qT\", type);\n+      else\n+\terror_at (loc, \"fields cannot have RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_ARRAY_ELEMENT:\n+      if (!silent_p)\n+\terror_at (loc, \"array elements cannot have RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_ALLOCATION:\n+      if (!silent_p)\n+\terror_at (loc, \"cannot allocate objects with RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_DEALLOCATION:\n+      if (!silent_p)\n+\terror_at (loc, \"cannot delete objects with RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_EXCEPTIONS:\n+      if (!silent_p)\n+\terror_at (loc, \"cannot throw or catch RVV type %qT\", type);\n+\n+      return false;\n+\n+    case TCTX_CAPTURE_BY_COPY:\n+      if (!silent_p)\n+\terror_at (loc, \"capture by copy of RVV type %qT\", type);\n+\n+      return false;\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n+} // end namespace riscv_vector"}, {"sha": "a9001b3b496e5207d9b56aaf43cefeaa22f8b305", "filename": "gcc/config/riscv/riscv-vector-builtins.def", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.def?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,199 @@\n+/* Builtins macros for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Use \"DEF_RVV_TYPE\" macro to define RVV datatype builtins.\n+   1.The 1 argument is the name exposed to users.\n+     For example, \"vint32m1_t\".\n+   2.The 2 argument is the length of ABI-name.\n+     For example, length of \"__rvv_int32m1_t\" is 15.\n+   3.The 3 argument is the ABI-name. For example, \"__rvv_int32m1_t\".\n+   4.The 4 argument is associated scalar type which is used in\n+     \"build_vector_type_for_mode\". For \"vint32m1_t\", we use \"intSI_type_node\" in\n+     RV64. Otherwise, we use \"long_integer_type_node\".\n+   5.The 5 and 6 argument are the machine modes of corresponding RVV type used\n+     in \"build_vector_type_for_mode\". For \"vint32m1_t\", we use VNx2SImode when\n+     TARGET_MIN_VLEN > 32. Otherwise the machine mode is VNx1SImode.  */\n+\n+#ifndef DEF_RVV_TYPE\n+#define DEF_RVV_TYPE(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE,    \\\n+\t\t     VECTOR_MODE_MIN_VLEN_32)\n+#endif\n+\n+/* SEW/LMUL = 64:\n+   Only enable when TARGET_MIN_VLEN > 32 and machine mode = VNx1BImode.  */\n+DEF_RVV_TYPE (vbool64_t, 14, __rvv_bool64_t, boolean, VNx1BI, VOID)\n+/* SEW/LMUL = 32:\n+   Machine mode = VNx2BImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx1BImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vbool32_t, 14, __rvv_bool32_t, boolean, VNx2BI, VNx1BI)\n+/* SEW/LMUL = 16:\n+   Machine mode = VNx2BImode when TARGET_MIN_VLEN = 32.\n+   Machine mode = VNx4BImode when TARGET_MIN_VLEN > 32.  */\n+DEF_RVV_TYPE (vbool16_t, 14, __rvv_bool16_t, boolean, VNx4BI, VNx2BI)\n+/* SEW/LMUL = 8:\n+   Machine mode = VNx8BImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx4BImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vbool8_t, 13, __rvv_bool8_t, boolean, VNx8BI, VNx4BI)\n+/* SEW/LMUL = 4:\n+   Machine mode = VNx16BImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx8BImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vbool4_t, 13, __rvv_bool4_t, boolean, VNx16BI, VNx8BI)\n+/* SEW/LMUL = 2:\n+   Machine mode = VNx32BImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx16BImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vbool2_t, 13, __rvv_bool2_t, boolean, VNx32BI, VNx16BI)\n+/* SEW/LMUL = 1:\n+   Machine mode = VNx64BImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx32BImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vbool1_t, 13, __rvv_bool1_t, boolean, VNx64BI, VNx32BI)\n+\n+/* LMUL = 1/8:\n+   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1QImode.  */\n+DEF_RVV_TYPE (vint8mf8_t, 15, __rvv_int8mf8_t, intQI, VNx1QI, VOID)\n+DEF_RVV_TYPE (vuint8mf8_t, 16, __rvv_uint8mf8_t, unsigned_intQI, VNx1QI, VOID)\n+/* LMUL = 1/4:\n+   Machine mode = VNx2QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx1QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8mf4_t, 15, __rvv_int8mf4_t, intQI, VNx2QI, VNx1QI)\n+DEF_RVV_TYPE (vuint8mf4_t, 16, __rvv_uint8mf4_t, unsigned_intQI, VNx2QI, VNx1QI)\n+/* LMUL = 1/2:\n+   Machine mode = VNx4QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx2QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8mf2_t, 15, __rvv_int8mf2_t, intQI, VNx4QI, VNx2QI)\n+DEF_RVV_TYPE (vuint8mf2_t, 16, __rvv_uint8mf2_t, unsigned_intQI, VNx4QI, VNx2QI)\n+/* LMUL = 1:\n+   Machine mode = VNx8QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx4QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8m1_t, 14, __rvv_int8m1_t, intQI, VNx8QI, VNx4QI)\n+DEF_RVV_TYPE (vuint8m1_t, 15, __rvv_uint8m1_t, unsigned_intQI, VNx8QI, VNx4QI)\n+/* LMUL = 2:\n+   Machine mode = VNx16QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx8QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8m2_t, 14, __rvv_int8m2_t, intQI, VNx16QI, VNx8QI)\n+DEF_RVV_TYPE (vuint8m2_t, 15, __rvv_uint8m2_t, unsigned_intQI, VNx16QI, VNx8QI)\n+/* LMUL = 4:\n+   Machine mode = VNx32QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx16QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8m4_t, 14, __rvv_int8m4_t, intQI, VNx32QI, VNx16QI)\n+DEF_RVV_TYPE (vuint8m4_t, 15, __rvv_uint8m4_t, unsigned_intQI, VNx32QI, VNx16QI)\n+/* LMUL = 8:\n+   Machine mode = VNx64QImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx32QImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint8m8_t, 14, __rvv_int8m8_t, intQI, VNx64QI, VNx32QI)\n+DEF_RVV_TYPE (vuint8m8_t, 15, __rvv_uint8m8_t, unsigned_intQI, VNx64QI, VNx32QI)\n+\n+/* LMUL = 1/4:\n+   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1HImode.  */\n+DEF_RVV_TYPE (vint16mf4_t, 16, __rvv_int16mf4_t, intHI, VNx1HI, VOID)\n+DEF_RVV_TYPE (vuint16mf4_t, 17, __rvv_uint16mf4_t, unsigned_intHI, VNx1HI, VOID)\n+/* LMUL = 1/2:\n+   Machine mode = VNx2HImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx1HImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint16mf2_t, 16, __rvv_int16mf2_t, intHI, VNx2HI, VNx1HI)\n+DEF_RVV_TYPE (vuint16mf2_t, 17, __rvv_uint16mf2_t, unsigned_intHI, VNx2HI,\n+\t      VNx1HI)\n+/* LMUL = 1:\n+   Machine mode = VNx4HImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx2HImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint16m1_t, 15, __rvv_int16m1_t, intHI, VNx4HI, VNx2HI)\n+DEF_RVV_TYPE (vuint16m1_t, 16, __rvv_uint16m1_t, unsigned_intHI, VNx4HI, VNx2HI)\n+/* LMUL = 2:\n+   Machine mode = VNx8HImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx4HImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint16m2_t, 15, __rvv_int16m2_t, intHI, VNx8HI, VNx4HI)\n+DEF_RVV_TYPE (vuint16m2_t, 16, __rvv_uint16m2_t, unsigned_intHI, VNx8HI, VNx4HI)\n+/* LMUL = 4:\n+   Machine mode = VNx16HImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx8HImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint16m4_t, 15, __rvv_int16m4_t, intHI, VNx16HI, VNx8HI)\n+DEF_RVV_TYPE (vuint16m4_t, 16, __rvv_uint16m4_t, unsigned_intHI, VNx16HI,\n+\t      VNx8HI)\n+/* LMUL = 8:\n+   Machine mode = VNx32HImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx16HImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint16m8_t, 15, __rvv_int16m8_t, intHI, VNx32HI, VNx16HI)\n+DEF_RVV_TYPE (vuint16m8_t, 16, __rvv_uint16m8_t, unsigned_intHI, VNx32HI,\n+\t      VNx16HI)\n+\n+/* LMUL = 1/2:\n+   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1SImode.  */\n+DEF_RVV_TYPE (vint32mf2_t, 16, __rvv_int32mf2_t, int32, VNx1SI, VOID)\n+DEF_RVV_TYPE (vuint32mf2_t, 17, __rvv_uint32mf2_t, unsigned_int32, VNx1SI, VOID)\n+/* LMUL = 1:\n+   Machine mode = VNx2SImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx1SImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint32m1_t, 15, __rvv_int32m1_t, int32, VNx2SI, VNx1SI)\n+DEF_RVV_TYPE (vuint32m1_t, 16, __rvv_uint32m1_t, unsigned_int32, VNx2SI, VNx1SI)\n+/* LMUL = 2:\n+   Machine mode = VNx4SImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx2SImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint32m2_t, 15, __rvv_int32m2_t, int32, VNx4SI, VNx2SI)\n+DEF_RVV_TYPE (vuint32m2_t, 16, __rvv_uint32m2_t, unsigned_int32, VNx4SI, VNx2SI)\n+/* LMUL = 4:\n+   Machine mode = VNx8SImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx4SImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint32m4_t, 15, __rvv_int32m4_t, int32, VNx8SI, VNx4SI)\n+DEF_RVV_TYPE (vuint32m4_t, 16, __rvv_uint32m4_t, unsigned_int32, VNx8SI, VNx4SI)\n+/* LMUL = 8:\n+   Machine mode = VNx16SImode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx8SImode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vint32m8_t, 15, __rvv_int32m8_t, int32, VNx16SI, VNx8SI)\n+DEF_RVV_TYPE (vuint32m8_t, 16, __rvv_uint32m8_t, unsigned_int32, VNx16SI,\n+\t      VNx8SI)\n+\n+/* SEW = 64:\n+   Disable when TARGET_MIN_VLEN > 32.  */\n+DEF_RVV_TYPE (vint64m1_t, 15, __rvv_int64m1_t, intDI, VNx1DI, VOID)\n+DEF_RVV_TYPE (vuint64m1_t, 16, __rvv_uint64m1_t, unsigned_intDI, VNx1DI, VOID)\n+DEF_RVV_TYPE (vint64m2_t, 15, __rvv_int64m2_t, intDI, VNx2DI, VOID)\n+DEF_RVV_TYPE (vuint64m2_t, 16, __rvv_uint64m2_t, unsigned_intDI, VNx2DI, VOID)\n+DEF_RVV_TYPE (vint64m4_t, 15, __rvv_int64m4_t, intDI, VNx4DI, VOID)\n+DEF_RVV_TYPE (vuint64m4_t, 16, __rvv_uint64m4_t, unsigned_intDI, VNx4DI, VOID)\n+DEF_RVV_TYPE (vint64m8_t, 15, __rvv_int64m8_t, intDI, VNx8DI, VOID)\n+DEF_RVV_TYPE (vuint64m8_t, 16, __rvv_uint64m8_t, unsigned_intDI, VNx8DI, VOID)\n+\n+/* LMUL = 1/2:\n+   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1SFmode.  */\n+DEF_RVV_TYPE (vfloat32mf2_t, 18, __rvv_float32mf2_t, float, VNx1SF, VOID)\n+/* LMUL = 1:\n+   Machine mode = VNx2SFmode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx1SFmode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vfloat32m1_t, 17, __rvv_float32m1_t, float, VNx2SF, VNx1SF)\n+/* LMUL = 2:\n+   Machine mode = VNx4SFmode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx2SFmode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vfloat32m2_t, 17, __rvv_float32m2_t, float, VNx4SF, VNx2SF)\n+/* LMUL = 4:\n+   Machine mode = VNx8SFmode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx4SFmode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vfloat32m4_t, 17, __rvv_float32m4_t, float, VNx8SF, VNx4SF)\n+/* LMUL = 8:\n+   Machine mode = VNx16SFmode when TARGET_MIN_VLEN > 32.\n+   Machine mode = VNx8SFmode when TARGET_MIN_VLEN = 32.  */\n+DEF_RVV_TYPE (vfloat32m8_t, 17, __rvv_float32m8_t, float, VNx16SF, VNx8SF)\n+\n+/* SEW = 64:\n+   Disable when TARGET_VECTOR_FP64.  */\n+DEF_RVV_TYPE (vfloat64m1_t, 17, __rvv_float64m1_t, double, VNx1DF, VOID)\n+DEF_RVV_TYPE (vfloat64m2_t, 17, __rvv_float64m2_t, double, VNx2DF, VOID)\n+DEF_RVV_TYPE (vfloat64m4_t, 17, __rvv_float64m4_t, double, VNx4DF, VOID)\n+DEF_RVV_TYPE (vfloat64m8_t, 17, __rvv_float64m8_t, double, VNx8DF, VOID)\n+\n+#undef DEF_RVV_TYPE"}, {"sha": "a4a8c1156a5dd4073701e2431672bfb333ef298e", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,79 @@\n+/* Builtins definitions for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RISCV_V_BUILTINS_H\n+#define GCC_RISCV_V_BUILTINS_H\n+\n+namespace riscv_vector {\n+\n+/* Static information about each vector type.  */\n+struct vector_type_info\n+{\n+  /* The name of the type as declared by riscv_vector.h\n+     which is recommend to use. For example: 'vint32m1_t'.  */\n+  const char *user_name;\n+\n+  /* ABI name of vector type. The type is always available\n+     under this name, even when riscv_vector.h isn't included.\n+     For example:  '__rvv_int32m1_t'.  */\n+  const char *abi_name;\n+\n+  /* The C++ mangling of ABI_NAME.  */\n+  const char *mangled_name;\n+};\n+\n+/* Enumerates the RVV types, together called\n+   \"vector types\" for brevity.  */\n+enum vector_type_index\n+{\n+#define DEF_RVV_TYPE(USER_NAME, ABI_NAME, NCHARS, ARGS...)    \\\n+  VECTOR_TYPE_##USER_NAME,\n+#include \"riscv-vector-builtins.def\"\n+  NUM_VECTOR_TYPES\n+};\n+\n+/* RAII class for enabling enough RVV features to define the built-in\n+   types and implement the riscv_vector.h pragma.\n+\n+   Note: According to 'TYPE_MODE' macro implementation, we need set\n+   have_regs_of_mode[mode] to be true if we want to get the exact mode\n+   from 'TYPE_MODE'. However, have_regs_of_mode has not been set yet in\n+   targetm.init_builtins (). We need rvv_switcher to set have_regs_of_mode\n+   before targetm.init_builtins () and recover back have_regs_of_mode\n+   after targetm.init_builtins ().  */\n+class rvv_switcher\n+{\n+public:\n+  rvv_switcher ();\n+  ~rvv_switcher ();\n+\n+private:\n+  bool m_old_have_regs_of_mode[MAX_MACHINE_MODE];\n+};\n+\n+void init_builtins ();\n+const char *mangle_builtin_type (const_tree);\n+#ifdef GCC_TARGET_H\n+bool verify_type_context (location_t, type_context_kind, const_tree, bool);\n+#endif\n+\n+} // end namespace riscv_vector\n+\n+#endif"}, {"sha": "cacfccb6d2998caef65709d17b1c09e885708f26", "filename": "gcc/config/riscv/riscv-vector-switch.def", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,164 @@\n+/* Machine mode switch for RISC-V 'V' Extension for GNU compiler.\n+   Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+   Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This file is enable or disable the RVV modes according '-march'.  */\n+\n+/* According to rvv-intrinsic and RISC-V 'V' Extension ISA document:\n+   https://github.com/riscv-non-isa/rvv-intrinsic-doc/blob/master/rvv-intrinsic-rfc.md.\n+   https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc.\n+\n+   Data Types\n+   Encode SEW and LMUL into data types.\n+   We enforce the constraint LMUL \u2265 SEW/ELEN in the implementation.\n+   There are the following data types for MIN_VLEN > 32.\n+\n+Note: N/A means the corresponding vector type is disabled.\n+\n+|Types   |LMUL=1|LMUL=2 |LMUL=4 |LMUL=8 |LMUL=1/2|LMUL=1/4|LMUL=1/8|\n+|int64_t |VNx1DI|VNx2DI |VNx4DI |VNx8DI |N/A     |N/A     |N/A     |\n+|uint64_t|VNx1DI|VNx2DI |VNx4DI |VNx8DI |N/A     |N/A     |N/A     |\n+|int32_t |VNx2SI|VNx4SI |VNx8SI |VNx16SI|VNx1SI  |N/A     |N/A     |\n+|uint32_t|VNx2SI|VNx4SI |VNx8SI |VNx16SI|VNx1SI  |N/A     |N/A     |\n+|int16_t |VNx4HI|VNx8HI |VNx16HI|VNx32HI|VNx2HI  |VNx1HI  |N/A     |\n+|uint16_t|VNx4HI|VNx8HI |VNx16HI|VNx32HI|VNx2HI  |VNx1HI  |N/A     |\n+|int8_t  |VNx8QI|VNx16QI|VNx32QI|VNx64QI|VNx4QI  |VNx2QI  |VNx1QI  |\n+|uint8_t |VNx8QI|VNx16QI|VNx32QI|VNx64QI|VNx4QI  |VNx2QI  |VNx1QI  |\n+|float64 |VNx1DF|VNx2DF |VNx4DF |VNx8DF |N/A     |N/A     |N/A     |\n+|float32 |VNx2SF|VNx4SF |VNx8SF |VNx16SF|VNx1SF  |N/A     |N/A     |\n+|float16 |VNx4HF|VNx8HF |VNx16HF|VNx32HF|VNx2HF  |VNx1HF  |N/A     |\n+\n+Mask Types Encode the ratio of SEW/LMUL into the\n+mask types. There are the following mask types.\n+\n+n = SEW/LMUL\n+\n+|Types|n=1    |n=2    |n=4    |n=8   |n=16  |n=32  |n=64  |\n+|bool |VNx64BI|VNx32BI|VNx16BI|VNx8BI|VNx4BI|VNx2BI|VNx1BI|\n+\n+There are the following data types for MIN_VLEN = 32.\n+\n+|Types   |LMUL=1|LMUL=2|LMUL=4 |LMUL=8 |LMUL=1/2|LMUL=1/4|LMUL=1/8|\n+|int64_t |N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |\n+|uint64_t|N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |\n+|int32_t |VNx1SI|VNx2SI|VNx4SI |VNx8SI |N/A     |N/A     |N/A     |\n+|uint32_t|VNx1SI|VNx2SI|VNx4SI |VNx8SI |N/A     |N/A     |N/A     |\n+|int16_t |VNx2HI|VNx4HI|VNx8HI |VNx16HI|VNx1HI  |N/A     |N/A     |\n+|uint16_t|VNx2HI|VNx4HI|VNx8HI |VNx16HI|VNx1HI  |N/A     |N/A     |\n+|int8_t  |VNx4QI|VNx8QI|VNx16QI|VNx32QI|VNx2QI  |VNx1QI  |N/A     |\n+|uint8_t |VNx4QI|VNx8QI|VNx16QI|VNx32QI|VNx2QI  |VNx1QI  |N/A     |\n+|float64 |N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |\n+|float32 |VNx1SF|VNx2SF|VNx4SF |VNx8SF |N/A     |N/A     |N/A     |\n+|float16 |VNx2HF|VNx4HF|VNx8HF |VNx16HF|VNx1HF  |N/A     |N/A     |\n+\n+Mask Types Encode the ratio of SEW/LMUL into the\n+mask types. There are the following mask types.\n+\n+n = SEW/LMUL\n+\n+|Types|n=1    |n=2    |n=4   |n=8   |n=16  |n=32  |n=64|\n+|bool |VNx32BI|VNx16BI|VNx8BI|VNx4BI|VNx2BI|VNx1BI|N/A |\n+\n+TODO: FP16 vector needs support of 'zvfh', we don't support it yet.  */\n+\n+/* Return 'REQUIREMENT' for machine_mode 'MODE'.\n+   For example: 'MODE' = VNx64BImode needs TARGET_MIN_VLEN > 32.  */\n+#ifndef ENTRY\n+#define ENTRY(MODE, REQUIREMENT)\n+#endif\n+/* Flag of FP32 vector.  */\n+#ifndef TARGET_VECTOR_FP32\n+#define TARGET_VECTOR_FP32                                                     \\\n+  (TARGET_HARD_FLOAT && (TARGET_VECTOR_ELEN_FP_32 || TARGET_VECTOR_ELEN_FP_64))\n+#endif\n+/* Flag of FP64 vector.  */\n+#ifndef TARGET_VECTOR_FP64\n+#define TARGET_VECTOR_FP64                                                     \\\n+  (TARGET_DOUBLE_FLOAT && TARGET_VECTOR_ELEN_FP_64 && (TARGET_MIN_VLEN > 32))\n+#endif\n+\n+/* Mask modes. Disable VNx64BImode when TARGET_MIN_VLEN == 32.  */\n+ENTRY (VNx64BI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx32BI, true)\n+ENTRY (VNx16BI, true)\n+ENTRY (VNx8BI, true)\n+ENTRY (VNx4BI, true)\n+ENTRY (VNx2BI, true)\n+ENTRY (VNx1BI, true)\n+\n+/* SEW = 8. Disable VNx64QImode when TARGET_MIN_VLEN == 32.  */\n+ENTRY (VNx64QI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx32QI, true)\n+ENTRY (VNx16QI, true)\n+ENTRY (VNx8QI, true)\n+ENTRY (VNx4QI, true)\n+ENTRY (VNx2QI, true)\n+ENTRY (VNx1QI, true)\n+\n+/* SEW = 16. Disable VNx32HImode when TARGET_MIN_VLEN == 32.  */\n+ENTRY (VNx32HI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx16HI, true)\n+ENTRY (VNx8HI, true)\n+ENTRY (VNx4HI, true)\n+ENTRY (VNx2HI, true)\n+ENTRY (VNx1HI, true)\n+\n+/* TODO:Disable all FP16 vector, enable them when 'zvfh' is supported.  */\n+ENTRY (VNx32HF, false)\n+ENTRY (VNx16HF, false)\n+ENTRY (VNx8HF, false)\n+ENTRY (VNx4HF, false)\n+ENTRY (VNx2HF, false)\n+ENTRY (VNx1HF, false)\n+\n+/* SEW = 32. Disable VNx16SImode when TARGET_MIN_VLEN == 32.\n+   For single-precision floating-point, we need TARGET_VECTOR_FP32 ==\n+   RVV_ENABLE.  */\n+ENTRY (VNx16SI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx8SI, true)\n+ENTRY (VNx4SI, true)\n+ENTRY (VNx2SI, true)\n+ENTRY (VNx1SI, true)\n+\n+ENTRY (VNx16SF, TARGET_VECTOR_FP32 && (TARGET_MIN_VLEN > 32))\n+ENTRY (VNx8SF, TARGET_VECTOR_FP32)\n+ENTRY (VNx4SF, TARGET_VECTOR_FP32)\n+ENTRY (VNx2SF, TARGET_VECTOR_FP32)\n+ENTRY (VNx1SF, TARGET_VECTOR_FP32)\n+\n+/* SEW = 64. Enable when TARGET_MIN_VLEN > 32.\n+   For double-precision floating-point, we need TARGET_VECTOR_FP64 ==\n+   RVV_ENABLE.  */\n+ENTRY (VNx8DI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx4DI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx2DI, TARGET_MIN_VLEN > 32)\n+ENTRY (VNx1DI, TARGET_MIN_VLEN > 32)\n+\n+ENTRY (VNx8DF, TARGET_VECTOR_FP64 && (TARGET_MIN_VLEN > 32))\n+ENTRY (VNx4DF, TARGET_VECTOR_FP64)\n+ENTRY (VNx2DF, TARGET_VECTOR_FP64)\n+ENTRY (VNx1DF, TARGET_VECTOR_FP64)\n+\n+/* SEW = 128. Disable all of them.  */\n+ENTRY (VNx2TI, false)\n+ENTRY (VNx2TF, false)\n+\n+#undef TARGET_VECTOR_FP32\n+#undef TARGET_VECTOR_FP64\n+#undef ENTRY"}, {"sha": "0d61831582818847a3c65cd116844c3b4fdf8ec6", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"tm-constrs.h\"\n #include \"rtl-iter.h\"\n+#include \"riscv-vector-builtins.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\\n@@ -375,6 +376,11 @@ static const struct attribute_spec riscv_attribute_table[] =\n   { \"interrupt\", 0, 1, false, true, true, false,\n     riscv_handle_type_attribute, NULL },\n \n+  /* The following two are used for the built-in properties of the Vector type\n+     and are not used externally */\n+  {\"RVV sizeless type\", 4, 4, false, true, false, true, NULL, NULL},\n+  {\"RVV type\", 0, 0, false, true, false, true, NULL, NULL},\n+\n   /* The last attribute spec is set to be NULL.  */\n   { NULL,\t0,  0, false, false, false, false, NULL, NULL }\n };\n@@ -942,7 +948,37 @@ riscv_valid_lo_sum_p (enum riscv_symbol_type sym_type, machine_mode mode,\n static bool\n riscv_v_ext_vector_mode_p (machine_mode mode)\n {\n-  return VECTOR_MODE_P (mode);\n+#define ENTRY(MODE, REQUIREMENT)                                               \\\n+  case MODE##mode:                                                             \\\n+    return true;\n+  switch (mode)\n+    {\n+#include \"riscv-vector-switch.def\"\n+    default:\n+      return false;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if mode is the RVV enabled mode.\n+   For example: 'VNx1DI' mode is disabled if MIN_VLEN == 32.\n+   'VNx1SI' mode is enabled if MIN_VLEN == 32.  */\n+\n+bool\n+riscv_v_ext_enabled_vector_mode_p (machine_mode mode)\n+{\n+#define ENTRY(MODE, REQUIREMENT)                                               \\\n+  case MODE##mode:                                                             \\\n+    return REQUIREMENT;\n+  switch (mode)\n+    {\n+#include \"riscv-vector-switch.def\"\n+    default:\n+      return false;\n+    }\n+\n+  return false;\n }\n \n /* Return true if X is a valid address for machine mode MODE.  If it is,\n@@ -6180,6 +6216,16 @@ riscv_mangle_type (const_tree type)\n   if (TREE_CODE (type) == REAL_TYPE && TYPE_PRECISION (type) == 16)\n     return \"DF16_\";\n \n+  /* Mangle all vector type for vector extension.  */\n+  /* The mangle name follows the rule of RVV LLVM\n+     that is \"u\" + length of (abi_name) + abi_name. */\n+  if (TYPE_NAME (type) != NULL)\n+    {\n+      const char *res = riscv_vector::mangle_builtin_type (type);\n+      if (res)\n+\treturn res;\n+    }\n+\n   /* Use the default mangling.  */\n   return NULL;\n }\n@@ -6290,6 +6336,44 @@ riscv_reinit (void)\n #define TARGET_RUN_TARGET_SELFTESTS selftest::riscv_run_selftests\n #endif /* #if CHECKING_P */\n \n+/* Implement TARGET_VECTOR_MODE_SUPPORTED_P.  */\n+\n+static bool\n+riscv_vector_mode_supported_p (machine_mode mode)\n+{\n+  if (TARGET_VECTOR)\n+    return riscv_v_ext_enabled_vector_mode_p (mode);\n+\n+  return false;\n+}\n+\n+/* Implement TARGET_VERIFY_TYPE_CONTEXT.  */\n+\n+static bool\n+riscv_verify_type_context (location_t loc, type_context_kind context,\n+\t\t\t   const_tree type, bool silent_p)\n+{\n+  return riscv_vector::verify_type_context (loc, context, type, silent_p);\n+}\n+\n+/* Implement TARGET_VECTOR_ALIGNMENT.  */\n+\n+static HOST_WIDE_INT\n+riscv_vector_alignment (const_tree type)\n+{\n+  /* ??? Checking the mode isn't ideal, but VECTOR_BOOLEAN_TYPE_P can\n+     be set for non-predicate vectors of booleans.  Modes are the most\n+     direct way we have of identifying real RVV predicate types.  */\n+  /* FIXME: RVV didn't mention the alignment of bool, we uses\n+     one byte align.  */\n+  if (GET_MODE_CLASS (TYPE_MODE (type)) == MODE_VECTOR_BOOL)\n+    return 8;\n+\n+  widest_int min_size\n+    = constant_lower_bound (wi::to_poly_widest (TYPE_SIZE (type)));\n+  return wi::umin (min_size, 128).to_uhwi ();\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -6502,6 +6586,15 @@ riscv_reinit (void)\n #define TARGET_DEFAULT_TARGET_FLAGS (MASK_BIG_ENDIAN)\n #endif\n \n+#undef TARGET_VECTOR_MODE_SUPPORTED_P\n+#define TARGET_VECTOR_MODE_SUPPORTED_P riscv_vector_mode_supported_p\n+\n+#undef TARGET_VERIFY_TYPE_CONTEXT\n+#define TARGET_VERIFY_TYPE_CONTEXT riscv_verify_type_context\n+\n+#undef TARGET_VECTOR_ALIGNMENT\n+#define TARGET_VECTOR_ALIGNMENT riscv_vector_alignment\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "ad9be094ebe84aa67d8df03021dbc3e875f97d53", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -5,6 +5,16 @@ riscv-builtins.o: $(srcdir)/config/riscv/riscv-builtins.cc $(CONFIG_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/riscv/riscv-builtins.cc\n \n+riscv-vector-builtins.o: $(srcdir)/config/riscv/riscv-vector-builtins.cc \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(TM_P_H) \\\n+  memmodel.h insn-codes.h $(OPTABS_H) $(RECOG_H) $(DIAGNOSTIC_H) $(EXPR_H) \\\n+  $(FUNCTION_H) fold-const.h gimplify.h explow.h stor-layout.h $(REGS_H) \\\n+  alias.h langhooks.h attribs.h stringpool.h $(REGS_H) \\\n+  $(srcdir)/config/riscv/riscv-vector-builtins.h \\\n+\t$(srcdir)/config/riscv/riscv-vector-builtins.def\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/riscv/riscv-vector-builtins.cc\n+\n riscv-sr.o: $(srcdir)/config/riscv/riscv-sr.cc $(CONFIG_H) \\\n   $(SYSTEM_H) $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "2e0e12aa0451afe961d182722ccdce3db3f6614a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-1.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"test rvv intrinsic\" { *-*-* } { \"*\" } { \"-march=rv*v*\" } } */\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;}\n+void foo8 () {__rvv_uint8mf8_t t;}\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;}\n+void foo22 () {__rvv_uint16mf4_t t;}\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;}\n+void foo34 () {__rvv_uint32mf2_t t;}\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;}\n+void foo44 () {__rvv_uint64m1_t t;}\n+void foo45 () {__rvv_int64m2_t t;}\n+void foo46 () {__rvv_uint64m2_t t;}\n+void foo47 () {__rvv_int64m4_t t;}\n+void foo48 () {__rvv_uint64m4_t t;}\n+void foo49 () {__rvv_int64m8_t t;}\n+void foo50 () {__rvv_uint64m8_t t;}\n+void foo57 () {__rvv_float32mf2_t t;}\n+void foo58 () {__rvv_float32m1_t t;}\n+void foo59 () {__rvv_float32m2_t t;}\n+void foo60 () {__rvv_float32m4_t t;}\n+void foo61 () {__rvv_float32m8_t t;}\n+void foo62 () {__rvv_float64m1_t t;}\n+void foo63 () {__rvv_float64m2_t t;}\n+void foo64 () {__rvv_float64m4_t t;}\n+void foo65 () {__rvv_float64m8_t t;}"}, {"sha": "92e61c255aca1116f20cb03fad1425f0e0c1c0e3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-2.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-2.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;} /* { dg-error {unknown type name '__rvv_bool64_t'} } */\n+void foo1 () {__rvv_bool32_t t;} /* { dg-error {unknown type name '__rvv_bool32_t'} } */\n+void foo2 () {__rvv_bool16_t t;} /* { dg-error {unknown type name '__rvv_bool16_t'} } */\n+void foo3 () {__rvv_bool8_t t;} /* { dg-error {unknown type name '__rvv_bool8_t'} } */\n+void foo4 () {__rvv_bool4_t t;} /* { dg-error {unknown type name '__rvv_bool4_t'} } */\n+void foo5 () {__rvv_bool2_t t;} /* { dg-error {unknown type name '__rvv_bool2_t'} } */\n+void foo6 () {__rvv_bool1_t t;} /* { dg-error {unknown type name '__rvv_bool1_t'} } */\n+void foo7 () {__rvv_int8mf8_t t;} /* { dg-error {unknown type name '__rvv_int8mf8_t'} } */\n+void foo8 () {__rvv_uint8mf8_t t;} /* { dg-error {unknown type name '__rvv_uint8mf8_t'} } */\n+void foo9 () {__rvv_int8mf4_t t;} /* { dg-error {unknown type name '__rvv_int8mf4_t'} } */\n+void foo10 () {__rvv_uint8mf4_t t;} /* { dg-error {unknown type name '__rvv_uint8mf4_t'} } */\n+void foo11 () {__rvv_int8mf2_t t;} /* { dg-error {unknown type name '__rvv_int8mf2_t'} } */\n+void foo12 () {__rvv_uint8mf2_t t;} /* { dg-error {unknown type name '__rvv_uint8mf2_t'} } */\n+void foo13 () {__rvv_int8m1_t t;} /* { dg-error {unknown type name '__rvv_int8m1_t'} } */\n+void foo14 () {__rvv_uint8m1_t t;} /* { dg-error {unknown type name '__rvv_uint8m1_t'} } */\n+void foo15 () {__rvv_int8m2_t t;} /* { dg-error {unknown type name '__rvv_int8m2_t'} } */\n+void foo16 () {__rvv_uint8m2_t t;} /* { dg-error {unknown type name '__rvv_uint8m2_t'} } */\n+void foo17 () {__rvv_int8m4_t t;} /* { dg-error {unknown type name '__rvv_int8m4_t'} } */\n+void foo18 () {__rvv_uint8m4_t t;} /* { dg-error {unknown type name '__rvv_uint8m4_t'} } */\n+void foo19 () {__rvv_int8m8_t t;} /* { dg-error {unknown type name '__rvv_int8m8_t'} } */\n+void foo20 () {__rvv_uint8m8_t t;} /* { dg-error {unknown type name '__rvv_uint8m8_t'} } */\n+void foo21 () {__rvv_int16mf4_t t;} /* { dg-error {unknown type name '__rvv_int16mf4_t'} } */\n+void foo22 () {__rvv_uint16mf4_t t;} /* { dg-error {unknown type name '__rvv_uint16mf4_t'} } */\n+void foo23 () {__rvv_int16mf2_t t;} /* { dg-error {unknown type name '__rvv_int16mf2_t'} } */\n+void foo24 () {__rvv_uint16mf2_t t;} /* { dg-error {unknown type name '__rvv_uint16mf2_t'} } */\n+void foo25 () {__rvv_int16m1_t t;} /* { dg-error {unknown type name '__rvv_int16m1_t'} } */\n+void foo26 () {__rvv_uint16m1_t t;} /* { dg-error {unknown type name '__rvv_uint16m1_t'} } */\n+void foo27 () {__rvv_int16m2_t t;} /* { dg-error {unknown type name '__rvv_int16m2_t'} } */\n+void foo28 () {__rvv_uint16m2_t t;} /* { dg-error {unknown type name '__rvv_uint16m2_t'} } */\n+void foo29 () {__rvv_int16m4_t t;} /* { dg-error {unknown type name '__rvv_int16m4_t'} } */\n+void foo30 () {__rvv_uint16m4_t t;} /* { dg-error {unknown type name '__rvv_uint16m4_t'} } */\n+void foo31 () {__rvv_int16m8_t t;} /* { dg-error {unknown type name '__rvv_int16m8_t'} } */\n+void foo32 () {__rvv_uint16m8_t t;} /* { dg-error {unknown type name '__rvv_uint16m8_t'} } */\n+void foo33 () {__rvv_int32mf2_t t;} /* { dg-error {unknown type name '__rvv_int32mf2_t'} } */\n+void foo34 () {__rvv_uint32mf2_t t;} /* { dg-error {unknown type name '__rvv_uint32mf2_t'} } */\n+void foo35 () {__rvv_int32m1_t t;} /* { dg-error {unknown type name '__rvv_int32m1_t'} } */\n+void foo36 () {__rvv_uint32m1_t t;} /* { dg-error {unknown type name '__rvv_uint32m1_t'} } */\n+void foo37 () {__rvv_int32m2_t t;} /* { dg-error {unknown type name '__rvv_int32m2_t'} } */\n+void foo38 () {__rvv_uint32m2_t t;} /* { dg-error {unknown type name '__rvv_uint32m2_t'} } */\n+void foo39 () {__rvv_int32m4_t t;} /* { dg-error {unknown type name '__rvv_int32m4_t'} } */\n+void foo40 () {__rvv_uint32m4_t t;} /* { dg-error {unknown type name '__rvv_uint32m4_t'} } */\n+void foo41 () {__rvv_int32m8_t t;} /* { dg-error {unknown type name '__rvv_int32m8_t'} } */\n+void foo42 () {__rvv_uint32m8_t t;} /* { dg-error {unknown type name '__rvv_uint32m8_t'} } */\n+void foo43 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo44 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo45 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo46 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo47 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo48 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo49 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo50 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */\n+void foo57 () {__rvv_float32mf2_t t;} /* { dg-error {unknown type name '__rvv_float32mf2_t'} } */\n+void foo58 () {__rvv_float32m1_t t;} /* { dg-error {unknown type name '__rvv_float32m1_t'} } */\n+void foo59 () {__rvv_float32m2_t t;} /* { dg-error {unknown type name '__rvv_float32m2_t'} } */\n+void foo60 () {__rvv_float32m4_t t;} /* { dg-error {unknown type name '__rvv_float32m4_t'} } */\n+void foo61 () {__rvv_float32m8_t t;} /* { dg-error {unknown type name '__rvv_float32m8_t'} } */\n+void foo62 () {__rvv_float64m1_t t;} /* { dg-error {unknown type name '__rvv_float64m1_t'} } */\n+void foo63 () {__rvv_float64m2_t t;} /* { dg-error {unknown type name '__rvv_float64m2_t'} } */\n+void foo64 () {__rvv_float64m4_t t;} /* { dg-error {unknown type name '__rvv_float64m4_t'} } */\n+void foo65 () {__rvv_float64m8_t t;} /* { dg-error {unknown type name '__rvv_float64m8_t'} } */"}, {"sha": "b9adb3072f635b092039631b49d60d9633c87097", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-3.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-3.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64x -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;}\n+void foo8 () {__rvv_uint8mf8_t t;}\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;}\n+void foo22 () {__rvv_uint16mf4_t t;}\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;}\n+void foo34 () {__rvv_uint32mf2_t t;}\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;}\n+void foo44 () {__rvv_uint64m1_t t;}\n+void foo45 () {__rvv_int64m2_t t;}\n+void foo46 () {__rvv_uint64m2_t t;}\n+void foo47 () {__rvv_int64m4_t t;}\n+void foo48 () {__rvv_uint64m4_t t;}\n+void foo49 () {__rvv_int64m8_t t;}\n+void foo50 () {__rvv_uint64m8_t t;}\n+void foo57 () {__rvv_float32mf2_t t;} /* { dg-error {unknown type name '__rvv_float32mf2_t'} } */\n+void foo58 () {__rvv_float32m1_t t;} /* { dg-error {unknown type name '__rvv_float32m1_t'} } */\n+void foo59 () {__rvv_float32m2_t t;} /* { dg-error {unknown type name '__rvv_float32m2_t'} } */\n+void foo60 () {__rvv_float32m4_t t;} /* { dg-error {unknown type name '__rvv_float32m4_t'} } */\n+void foo61 () {__rvv_float32m8_t t;} /* { dg-error {unknown type name '__rvv_float32m8_t'} } */\n+void foo62 () {__rvv_float64m1_t t;} /* { dg-error {unknown type name '__rvv_float64m1_t'} } */\n+void foo63 () {__rvv_float64m2_t t;} /* { dg-error {unknown type name '__rvv_float64m2_t'} } */\n+void foo64 () {__rvv_float64m4_t t;} /* { dg-error {unknown type name '__rvv_float64m4_t'} } */\n+void foo65 () {__rvv_float64m8_t t;} /* { dg-error {unknown type name '__rvv_float64m8_t'} } */"}, {"sha": "56a0ebed477892ceb7fc69222356b75ff6869801", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-4.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-4.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64f -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;}\n+void foo8 () {__rvv_uint8mf8_t t;}\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;}\n+void foo22 () {__rvv_uint16mf4_t t;}\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;}\n+void foo34 () {__rvv_uint32mf2_t t;}\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;}\n+void foo44 () {__rvv_uint64m1_t t;}\n+void foo45 () {__rvv_int64m2_t t;}\n+void foo46 () {__rvv_uint64m2_t t;}\n+void foo47 () {__rvv_int64m4_t t;}\n+void foo48 () {__rvv_uint64m4_t t;}\n+void foo49 () {__rvv_int64m8_t t;}\n+void foo50 () {__rvv_uint64m8_t t;}\n+void foo57 () {__rvv_float32mf2_t t;}\n+void foo58 () {__rvv_float32m1_t t;}\n+void foo59 () {__rvv_float32m2_t t;}\n+void foo60 () {__rvv_float32m4_t t;}\n+void foo61 () {__rvv_float32m8_t t;}\n+void foo62 () {__rvv_float64m1_t t;} /* { dg-error {unknown type name '__rvv_float64m1_t'} } */\n+void foo63 () {__rvv_float64m2_t t;} /* { dg-error {unknown type name '__rvv_float64m2_t'} } */\n+void foo64 () {__rvv_float64m4_t t;} /* { dg-error {unknown type name '__rvv_float64m4_t'} } */\n+void foo65 () {__rvv_float64m8_t t;} /* { dg-error {unknown type name '__rvv_float64m8_t'} } */"}, {"sha": "af7160944910c6942a7084132226801028194289", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-5.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-5.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve64d -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;}\n+void foo8 () {__rvv_uint8mf8_t t;}\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;}\n+void foo22 () {__rvv_uint16mf4_t t;}\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;}\n+void foo34 () {__rvv_uint32mf2_t t;}\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;}\n+void foo44 () {__rvv_uint64m1_t t;}\n+void foo45 () {__rvv_int64m2_t t;}\n+void foo46 () {__rvv_uint64m2_t t;}\n+void foo47 () {__rvv_int64m4_t t;}\n+void foo48 () {__rvv_uint64m4_t t;}\n+void foo49 () {__rvv_int64m8_t t;}\n+void foo50 () {__rvv_uint64m8_t t;}\n+void foo57 () {__rvv_float32mf2_t t;}\n+void foo58 () {__rvv_float32m1_t t;}\n+void foo59 () {__rvv_float32m2_t t;}\n+void foo60 () {__rvv_float32m4_t t;}\n+void foo61 () {__rvv_float32m8_t t;}\n+void foo62 () {__rvv_float64m1_t t;}\n+void foo63 () {__rvv_float64m2_t t;}\n+void foo64 () {__rvv_float64m4_t t;}\n+void foo65 () {__rvv_float64m8_t t;}"}, {"sha": "e866c067e0575f593bc7449ac61ef31940ad9ab6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-6.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-6.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;} /* { dg-error {unknown type name '__rvv_bool64_t'} } */\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;} /* { dg-error {unknown type name '__rvv_int8mf8_t'} } */\n+void foo8 () {__rvv_uint8mf8_t t;} /* { dg-error {unknown type name '__rvv_uint8mf8_t'} } */\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;} /* { dg-error {unknown type name '__rvv_int16mf4_t'} } */\n+void foo22 () {__rvv_uint16mf4_t t;} /* { dg-error {unknown type name '__rvv_uint16mf4_t'} } */\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;} /* { dg-error {unknown type name '__rvv_int32mf2_t'} } */\n+void foo34 () {__rvv_uint32mf2_t t;} /* { dg-error {unknown type name '__rvv_uint32mf2_t'} } */\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo44 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo45 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo46 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo47 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo48 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo49 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo50 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */\n+void foo57 () {__rvv_float32mf2_t t;} /* { dg-error {unknown type name '__rvv_float32mf2_t'} } */\n+void foo58 () {__rvv_float32m1_t t;} /* { dg-error {unknown type name '__rvv_float32m1_t'} } */\n+void foo59 () {__rvv_float32m2_t t;} /* { dg-error {unknown type name '__rvv_float32m2_t'} } */\n+void foo60 () {__rvv_float32m4_t t;} /* { dg-error {unknown type name '__rvv_float32m4_t'} } */\n+void foo61 () {__rvv_float32m8_t t;} /* { dg-error {unknown type name '__rvv_float32m8_t'} } */\n+void foo62 () {__rvv_float64m1_t t;} /* { dg-error {unknown type name '__rvv_float64m1_t'} } */\n+void foo63 () {__rvv_float64m2_t t;} /* { dg-error {unknown type name '__rvv_float64m2_t'} } */\n+void foo64 () {__rvv_float64m4_t t;} /* { dg-error {unknown type name '__rvv_float64m4_t'} } */\n+void foo65 () {__rvv_float64m8_t t;} /* { dg-error {unknown type name '__rvv_float64m8_t'} } */"}, {"sha": "407756de183b8debe75a6d37588933ff12c7bd25", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/abi-7.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fabi-7.c?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32f -mabi=ilp32d\" } */\n+\n+void foo0 () {__rvv_bool64_t t;} /* { dg-error {unknown type name '__rvv_bool64_t'} } */\n+void foo1 () {__rvv_bool32_t t;}\n+void foo2 () {__rvv_bool16_t t;}\n+void foo3 () {__rvv_bool8_t t;}\n+void foo4 () {__rvv_bool4_t t;}\n+void foo5 () {__rvv_bool2_t t;}\n+void foo6 () {__rvv_bool1_t t;}\n+void foo7 () {__rvv_int8mf8_t t;} /* { dg-error {unknown type name '__rvv_int8mf8_t'} } */\n+void foo8 () {__rvv_uint8mf8_t t;} /* { dg-error {unknown type name '__rvv_uint8mf8_t'} } */\n+void foo9 () {__rvv_int8mf4_t t;}\n+void foo10 () {__rvv_uint8mf4_t t;}\n+void foo11 () {__rvv_int8mf2_t t;}\n+void foo12 () {__rvv_uint8mf2_t t;}\n+void foo13 () {__rvv_int8m1_t t;}\n+void foo14 () {__rvv_uint8m1_t t;}\n+void foo15 () {__rvv_int8m2_t t;}\n+void foo16 () {__rvv_uint8m2_t t;}\n+void foo17 () {__rvv_int8m4_t t;}\n+void foo18 () {__rvv_uint8m4_t t;}\n+void foo19 () {__rvv_int8m8_t t;}\n+void foo20 () {__rvv_uint8m8_t t;}\n+void foo21 () {__rvv_int16mf4_t t;} /* { dg-error {unknown type name '__rvv_int16mf4_t'} } */\n+void foo22 () {__rvv_uint16mf4_t t;} /* { dg-error {unknown type name '__rvv_uint16mf4_t'} } */\n+void foo23 () {__rvv_int16mf2_t t;}\n+void foo24 () {__rvv_uint16mf2_t t;}\n+void foo25 () {__rvv_int16m1_t t;}\n+void foo26 () {__rvv_uint16m1_t t;}\n+void foo27 () {__rvv_int16m2_t t;}\n+void foo28 () {__rvv_uint16m2_t t;}\n+void foo29 () {__rvv_int16m4_t t;}\n+void foo30 () {__rvv_uint16m4_t t;}\n+void foo31 () {__rvv_int16m8_t t;}\n+void foo32 () {__rvv_uint16m8_t t;}\n+void foo33 () {__rvv_int32mf2_t t;} /* { dg-error {unknown type name '__rvv_int32mf2_t'} } */\n+void foo34 () {__rvv_uint32mf2_t t;} /* { dg-error {unknown type name '__rvv_uint32mf2_t'} } */\n+void foo35 () {__rvv_int32m1_t t;}\n+void foo36 () {__rvv_uint32m1_t t;}\n+void foo37 () {__rvv_int32m2_t t;}\n+void foo38 () {__rvv_uint32m2_t t;}\n+void foo39 () {__rvv_int32m4_t t;}\n+void foo40 () {__rvv_uint32m4_t t;}\n+void foo41 () {__rvv_int32m8_t t;}\n+void foo42 () {__rvv_uint32m8_t t;}\n+void foo43 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo44 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo45 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo46 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo47 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo48 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo49 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo50 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */\n+void foo57 () {__rvv_float32mf2_t t;} /* { dg-error {unknown type name '__rvv_float32mf2_t'} } */\n+void foo58 () {__rvv_float32m1_t t;}\n+void foo59 () {__rvv_float32m2_t t;}\n+void foo60 () {__rvv_float32m4_t t;}\n+void foo61 () {__rvv_float32m8_t t;}\n+void foo62 () {__rvv_float64m1_t t;} /* { dg-error {unknown type name '__rvv_float64m1_t'} } */\n+void foo63 () {__rvv_float64m2_t t;} /* { dg-error {unknown type name '__rvv_float64m2_t'} } */\n+void foo64 () {__rvv_float64m4_t t;} /* { dg-error {unknown type name '__rvv_float64m4_t'} } */\n+void foo65 () {__rvv_float64m8_t t;} /* { dg-error {unknown type name '__rvv_float64m8_t'} } */"}, {"sha": "25e09f41d731c0e5c7a9d22f0fc3536512aca16c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/rvv.exp", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f3365742a9341992f0c8fc751e2d143e49f95d/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Frvv.exp?ref=03f3365742a9341992f0c8fc751e2d143e49f95d", "patch": "@@ -0,0 +1,47 @@\n+# Copyright (C) 2022-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a RISC-V target.\n+if ![istarget riscv*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+set gcc_march \"rv64gcv_zfh\"\n+if [istarget riscv32-*-*] then {\n+  set gcc_march \"rv32gcv_zfh\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set CFLAGS \"$DEFAULT_CFLAGS -march=$gcc_march -O3\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/base/*.\\[cS\\]]] \\\n+\t\"\" $CFLAGS\n+\n+# All done.\n+dg-finish"}]}