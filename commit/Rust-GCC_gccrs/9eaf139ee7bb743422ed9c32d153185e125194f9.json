{"sha": "9eaf139ee7bb743422ed9c32d153185e125194f9", "node_id": "C_kwDOANBUbNoAKDllYWYxMzllZTdiYjc0MzQyMmVkOWMzMmQxNTMxODVlMTI1MTk0Zjk", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-20T15:49:06Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:31Z"}, "message": "libproc_macro: Add Group implementation\n\nAdd Group rust structure implementation in libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/group.rs: Add internal Group\n\timplementation.\n\t* librust/proc_macro/rust/group.rs: Add Group implementation.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "2d3383b99b30dbac5cefce9eb1a99f7b7f3c9df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3383b99b30dbac5cefce9eb1a99f7b7f3c9df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eaf139ee7bb743422ed9c32d153185e125194f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf139ee7bb743422ed9c32d153185e125194f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eaf139ee7bb743422ed9c32d153185e125194f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf139ee7bb743422ed9c32d153185e125194f9/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1364b17a02f0353aee82e7ef37fcb48d97b5ec97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1364b17a02f0353aee82e7ef37fcb48d97b5ec97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1364b17a02f0353aee82e7ef37fcb48d97b5ec97"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "83d2e068429abdcfdfd4f9b7ff38b1263b750689", "filename": "librust/proc_macro/rust/bridge/group.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaf139ee7bb743422ed9c32d153185e125194f9/librust%2Fproc_macro%2Frust%2Fbridge%2Fgroup.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaf139ee7bb743422ed9c32d153185e125194f9/librust%2Fproc_macro%2Frust%2Fbridge%2Fgroup.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fgroup.rs?ref=9eaf139ee7bb743422ed9c32d153185e125194f9", "patch": "@@ -1,13 +1,37 @@\n-use bridge;\n+use bridge::span::Span;\n+use bridge::token_stream::TokenStream;\n use std::fmt;\n use Delimiter;\n \n #[repr(C)]\n #[derive(Debug, Clone)]\n pub struct Group {\n     delimiter: Delimiter,\n-    stream: bridge::token_stream::TokenStream,\n+    stream: TokenStream,\n }\n+\n+impl Group {\n+    pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {\n+        Group { delimiter, stream }\n+    }\n+\n+    pub fn delimiter(&self) -> Delimiter {\n+        self.delimiter\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        Span {}\n+    }\n+\n+    pub fn set_span(&mut self, span: Span) {\n+        let _ = span;\n+    }\n+\n+    pub fn stream(&self) -> TokenStream {\n+        self.stream.clone()\n+    }\n+}\n+\n impl fmt::Display for Group {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.delimiter {"}, {"sha": "29bfb9d7132f91adfc38ecd5a25999038b449ef9", "filename": "librust/proc_macro/rust/group.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eaf139ee7bb743422ed9c32d153185e125194f9/librust%2Fproc_macro%2Frust%2Fgroup.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eaf139ee7bb743422ed9c32d153185e125194f9/librust%2Fproc_macro%2Frust%2Fgroup.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fgroup.rs?ref=9eaf139ee7bb743422ed9c32d153185e125194f9", "patch": "@@ -28,13 +28,13 @@ impl Group {\n     ///\n     /// * `delimiter` - The delimiter surrounding the inner [`TokenStream`].\n     /// * `stream` - The tokenstream for this `Group`.\n-    pub fn new(_delimiter: Delimiter, _stream: TokenStream) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {\n+        Group(bridge::group::Group::new(delimiter, stream.0))\n     }\n \n     /// Get the delimiter of the `Group`.\n     pub fn delimiter(&self) -> Delimiter {\n-        todo!(\"Implement this function\")\n+        self.0.delimiter()\n     }\n \n     /// Get the stream of the `Group`.\n@@ -43,23 +43,23 @@ impl Group {\n     ///\n     /// The returned stream does not include the delimiters of this group.\n     pub fn stream(&self) -> TokenStream {\n-        todo!(\"Implement this function\")\n+        TokenStream(self.0.stream())\n     }\n \n     /// Get the span for the delimiters of this token stream, spanning the\n     /// entire group.\n     pub fn span(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        Span(self.0.span())\n     }\n \n     /// Get the span pointing to the opening delimiter of this `Group`.\n     pub fn span_open(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        Span(self.0.span())\n     }\n \n     /// Get the span pointing to the closing delimiter of this `Group`.\n     pub fn span_close(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        Span(self.0.span())\n     }\n \n     /// Change the span for this `Group`'s delimiters, but not its internal\n@@ -70,8 +70,8 @@ impl Group {\n     /// This method will **not** set the span of all the internal tokens spanned\n     /// by this group, but rather it will only set the span of the delimiter\n     /// tokens at the level of the `Group`.\n-    pub fn set_span(&mut self, _span: Span) {\n-        todo!(\"Implement this function\")\n+    pub fn set_span(&mut self, span: Span) {\n+        self.0.set_span(span.0)\n     }\n }\n "}]}