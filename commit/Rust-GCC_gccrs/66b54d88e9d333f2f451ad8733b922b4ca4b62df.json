{"sha": "66b54d88e9d333f2f451ad8733b922b4ca4b62df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiNTRkODhlOWQzMzNmMmY0NTFhZDg3MzNiOTIyYjRjYTRiNjJkZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-21T22:06:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-21T22:06:25Z"}, "message": "rs6000: wm -> wa+p8v\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wm\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wm.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/vsx.md: Replace \"wm\" constraint by \"wa\" with \"p8v\".\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271486", "tree": {"sha": "cf5004155c780c06f5e27f4251dc1b45bbcac317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5004155c780c06f5e27f4251dc1b45bbcac317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b54d88e9d333f2f451ad8733b922b4ca4b62df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b54d88e9d333f2f451ad8733b922b4ca4b62df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b54d88e9d333f2f451ad8733b922b4ca4b62df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b54d88e9d333f2f451ad8733b922b4ca4b62df/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6dd76fab44e5786ba6af573439e7c68440904f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd76fab44e5786ba6af573439e7c68440904f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6dd76fab44e5786ba6af573439e7c68440904f2"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "35cb3652c9d4b9a9990c50f173cba0010997a2b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -1,3 +1,14 @@\n+2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wm\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wm.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/vsx.md: Replace \"wm\" constraint by \"wa\" with \"p8v\".\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wk\"):"}, {"sha": "90a94c1d1e5e7b2bc7d5b187fa60d9d6f15d2e8b", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -77,12 +77,9 @@\n (define_register_constraint \"wl\" \"rs6000_constraints[RS6000_CONSTRAINT_wl]\"\n   \"Floating point register if the LFIWAX instruction is enabled or NO_REGS.\")\n \n-(define_register_constraint \"wm\" \"rs6000_constraints[RS6000_CONSTRAINT_wm]\"\n-  \"VSX register if direct move instructions are enabled, or NO_REGS.\")\n-\n ;; NO_REGs register constraint, used to merge mov{sd,sf}, since movsd can use\n ;; direct move directly, and movsf can't to move between the register sets.\n-;; There is a mode_attr that resolves to wm for SDmode and wn for SFmode\n+;; There is a mode_attr that resolves to wa for SDmode and wn for SFmode\n (define_register_constraint \"wn\" \"NO_REGS\" \"No register (NO_REGS).\")\n \n (define_register_constraint \"wp\" \"rs6000_constraints[RS6000_CONSTRAINT_wp]\""}, {"sha": "af8f0d2d1aaaa6184f2486a9713e9c1d529a7c6c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -2514,7 +2514,6 @@ rs6000_debug_reg_global (void)\n \t   \"wg reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n \t   \"wl reg_class = %s\\n\"\n-\t   \"wm reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n@@ -2536,7 +2535,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wm]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n@@ -3159,7 +3157,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twg - Float register for power6x move insns.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n \twl - Float register if we can do 32-bit signed int loads.\n-\twm - VSX register for ISA 2.07 direct move operations.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n \tws - Register class to do ISA 2.06 DF operations.\n@@ -3197,9 +3194,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_LFIWAX)\n     rs6000_constraints[RS6000_CONSTRAINT_wl] = FLOAT_REGS;\t/* DImode  */\n \n-  if (TARGET_DIRECT_MOVE)\n-    rs6000_constraints[RS6000_CONSTRAINT_wm] = VSX_REGS;\n-\n   if (TARGET_POWERPC64)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wr] = GENERAL_REGS;"}, {"sha": "27055a6ddb738643297865bbb915064fa466f332", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -1255,7 +1255,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n   RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n-  RS6000_CONSTRAINT_wm,\t\t/* VSX register for direct move */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */"}, {"sha": "6108451014b0a1039db4bb6806c482eb3293b064", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -3198,10 +3198,8 @@\n \n (define_insn \"vsx_extract_<mode>\"\n   [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=d,    d,     wr, wr\")\n-\n \t(vec_select:<VS_scalar>\n-\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"<VSa>, <VSa>, wm, wa\")\n-\n+\t (match_operand:VSX_D 1 \"gpc_reg_operand\"      \"<VSa>, <VSa>, wa, wa\")\n \t (parallel\n \t  [(match_operand:QI 2 \"const_0_to_1_operand\"  \"wD,    n,     wD, n\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n@@ -3250,7 +3248,7 @@\n     gcc_unreachable ();\n }\n   [(set_attr \"type\" \"veclogical,mftgpr,mftgpr,vecperm\")\n-   (set_attr \"isa\" \"*,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,*,p8v,p9v\")])\n \n ;; Optimize extracting a single scalar element from memory.\n (define_insn_and_split \"*vsx_extract_<P:mode>_<VSX_D:mode>_load\""}, {"sha": "7ec17409bed22969a68355360e92bbfff7edf2aa", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b54d88e9d333f2f451ad8733b922b4ca4b62df/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=66b54d88e9d333f2f451ad8733b922b4ca4b62df", "patch": "@@ -3198,7 +3198,7 @@ Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wi},\n-@code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n+@code{wl}, @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n@@ -3265,9 +3265,6 @@ FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n @item wl\n Floating point register if the LFIWAX instruction is enabled or NO_REGS.\n \n-@item wm\n-VSX register if direct move instructions are enabled, or NO_REGS.\n-\n @item wn\n No register (NO_REGS).\n "}]}