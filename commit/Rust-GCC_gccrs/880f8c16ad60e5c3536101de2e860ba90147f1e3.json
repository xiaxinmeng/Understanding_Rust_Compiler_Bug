{"sha": "880f8c16ad60e5c3536101de2e860ba90147f1e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwZjhjMTZhZDYwZTVjMzUzNjEwMWRlMmU4NjBiYTkwMTQ3ZjFlMw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-04-10T20:36:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-04-10T20:36:04Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (java/lang/Thread.h): Mark\n\t_Jv_AttachCurrentThreadAsDaemon as friend.\n\t* gcj/javaprims.h (_Jv_AttachCurrentThreadAsDaemon): Declare.\n\t* gcj/cni.h (JvAttachCurrentThreadAsDaemon): New function.\n\t* java/lang/natThread.cc (_Jv_AttachCurrentThreadAsDaemon): New\n\tfunction.\n\t* java/lang/natRuntime.cc (_load): Recognize JNI_VERSION_1_4.\n\t* jni.cc (_Jv_JNI_GetVersion): Return JNI_VERSION_1_4.\n\t(_Jv_JNI_InvokeFunctions): Added\n\t_Jv_JNI_AttachCurrentThreadAsDaemon.\n\t(_Jv_JNI_GetEnv): Handle JNI_VERSION_1_4.\n\t(JNI_GetDefaultJavaVMInitArgs): Likewise.\n\t(JNI_CreateJavaVM): Likewise.\n\t(_Jv_JNI_AttachCurrentThread): Likewise.\n\t(_Jv_JNI_AttachCurrentThread): Added `is_daemon' argument.\n\t(_Jv_JNI_AttachCurrentThreadAsDaemon): New method.\n\t(_Jv_JNIFunctions): Initialize new fields.\n\t(_Jv_JNI_NewDirectByteBuffer): New function.\n\t(_Jv_JNI_GetDirectBufferAddress): Likewise.\n\t(_Jv_JNI_GetDirectBufferCapacity): Likewise.\n\t* include/jni.h (JNI_VERSION_1_4): New macro.\n\t(JNIInvokeInterface::AttachCurrentThreadAsDaemon): New field.\n\t(_Jv_JavaVM::AttachCurrentThreadAsDaemon): New method.\n\t(JNINativeInterface::NewDirectByteBuffer): New field.\n\t(JNINativeInterface::GetDirectBufferAddress): New field.\n\t(JNINativeInterface::GetDirectBufferCapacity): New field.\n\t(_Jv_JNIEnv::NewDirectByteBuffer): New method.\n\t(_Jv_JNIEnv::GetDirectBufferAddress): New method.\n\t(_Jv_JNIEnv::GetDirectBufferCapacity): New method.\n\nFrom-SVN: r52144", "tree": {"sha": "83b2914991f41b4c53152d00ff2da8b3917d29df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b2914991f41b4c53152d00ff2da8b3917d29df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880f8c16ad60e5c3536101de2e860ba90147f1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880f8c16ad60e5c3536101de2e860ba90147f1e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880f8c16ad60e5c3536101de2e860ba90147f1e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880f8c16ad60e5c3536101de2e860ba90147f1e3/comments", "author": null, "committer": null, "parents": [{"sha": "174bf2b1b287f13799f879d4b916c4d8f9d83923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174bf2b1b287f13799f879d4b916c4d8f9d83923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174bf2b1b287f13799f879d4b916c4d8f9d83923"}], "stats": {"total": 158, "additions": 138, "deletions": 20}, "files": [{"sha": "f7830847e8fb49aad2e1cd9198ce1971420632db", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -1,3 +1,36 @@\n+2002-04-10  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (java/lang/Thread.h): Mark\n+\t_Jv_AttachCurrentThreadAsDaemon as friend.\n+\t* gcj/javaprims.h (_Jv_AttachCurrentThreadAsDaemon): Declare.\n+\t* gcj/cni.h (JvAttachCurrentThreadAsDaemon): New function.\n+\t* java/lang/natThread.cc (_Jv_AttachCurrentThreadAsDaemon): New\n+\tfunction.\n+\t* java/lang/natRuntime.cc (_load): Recognize JNI_VERSION_1_4.\n+\t* jni.cc (_Jv_JNI_GetVersion): Return JNI_VERSION_1_4.\n+\t(_Jv_JNI_InvokeFunctions): Added\n+\t_Jv_JNI_AttachCurrentThreadAsDaemon.\n+\t(_Jv_JNI_GetEnv): Handle JNI_VERSION_1_4.\n+\t(JNI_GetDefaultJavaVMInitArgs): Likewise.\n+\t(JNI_CreateJavaVM): Likewise.\n+\t(_Jv_JNI_AttachCurrentThread): Likewise.\n+\t(_Jv_JNI_AttachCurrentThread): Added `is_daemon' argument.\n+\t(_Jv_JNI_AttachCurrentThreadAsDaemon): New method.\n+\t(_Jv_JNIFunctions): Initialize new fields.\n+\t(_Jv_JNI_NewDirectByteBuffer): New function.\n+\t(_Jv_JNI_GetDirectBufferAddress): Likewise.\n+\t(_Jv_JNI_GetDirectBufferCapacity): Likewise.\n+\t* include/jni.h (JNI_VERSION_1_4): New macro.\n+\t(JNIInvokeInterface::AttachCurrentThreadAsDaemon): New field.\n+\t(_Jv_JavaVM::AttachCurrentThreadAsDaemon): New method.\n+\t(JNINativeInterface::NewDirectByteBuffer): New field.\n+\t(JNINativeInterface::GetDirectBufferAddress): New field.\n+\t(JNINativeInterface::GetDirectBufferCapacity): New field.\n+\t(_Jv_JNIEnv::NewDirectByteBuffer): New method.\n+\t(_Jv_JNIEnv::GetDirectBufferAddress): New method.\n+\t(_Jv_JNIEnv::GetDirectBufferCapacity): New method.\n+\n 2002-04-09  Tom Tromey  <tromey@redhat.com>\n \n \t* win32.cc (_Jv_platform_initProperties): Use GetTempPath."}, {"sha": "2a392430c6876aecaa2ace9d2a7f2577f8f32b6e", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -288,6 +288,7 @@ java/lang/Thread.h: java/lang/Thread.class\n \t\t-friend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n \t\t-friend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n \t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group);' \\\n \t\t-friend 'jint _Jv_DetachCurrentThread ();' \\\n \t\t$(basename $<)\n "}, {"sha": "818ad5aaf1532f254278527806257dfd04f5fb28", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -3304,6 +3304,7 @@ java/lang/Thread.h: java/lang/Thread.class\n \t\t-friend 'void _Jv_ThreadRun (java::lang::Thread* thread);' \\\n \t\t-friend 'jint _Jv_AttachCurrentThread(java::lang::Thread* thread);' \\\n \t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group);' \\\n+\t\t-friend 'java::lang::Thread* _Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group);' \\\n \t\t-friend 'jint _Jv_DetachCurrentThread ();' \\\n \t\t$(basename $<)\n "}, {"sha": "08b55c3c7f282be7c94e66ef67f731683bd6ff80", "filename": "libjava/gcj/cni.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fgcj%2Fcni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fgcj%2Fcni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fcni.h?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -2,7 +2,7 @@\n // This file describes the Cygnus Native Interface, CNI.\n // It provides a nicer interface to many of the things in gcj/javaprims.h.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -131,6 +131,12 @@ JvAttachCurrentThread (jstring name, java::lang::ThreadGroup* group)\n   return _Jv_AttachCurrentThread (name, group);\n }\n \n+extern inline java::lang::Thread*\n+JvAttachCurrentThreadAsDaemon (jstring name, java::lang::ThreadGroup* group)\n+{\n+  return _Jv_AttachCurrentThreadAsDaemon (name, group);\n+}\n+\n extern inline jint\n JvDetachCurrentThread (void)\n {"}, {"sha": "4337f56d566695620f4430fe795a5971b4f183b8", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -418,6 +418,8 @@ jint\n _Jv_AttachCurrentThread(java::lang::Thread* thread);\n extern \"C\" java::lang::Thread*\n _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group);\n+extern \"C\" java::lang::Thread*\n+_Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group);\n extern \"C\" jint _Jv_DetachCurrentThread (void);\n \n extern \"C\" void _Jv_Throw (jthrowable) __attribute__ ((__noreturn__));"}, {"sha": "b5ce334b895742ee7c0efdf49f30258060bec77e", "filename": "libjava/include/jni.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Finclude%2Fjni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Finclude%2Fjni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni.h?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -161,6 +161,7 @@ typedef void *jmethodID;\n /* Version numbers.  */\n #define JNI_VERSION_1_1 0x00010001\n #define JNI_VERSION_1_2 0x00010002\n+#define JNI_VERSION_1_4 0x00010004\n \n /* Used when releasing array elements.  */\n #define JNI_COMMIT 1\n@@ -641,6 +642,10 @@ struct JNINativeInterface\n   void   (*DeleteWeakGlobalRef)            (JNIEnv *, jweak);\n \n   jboolean\t(*ExceptionCheck)\t   (JNIEnv *);\n+\n+  jobject (*NewDirectByteBuffer)           (JNIEnv *, void *, jlong);\n+  void *  (*GetDirectBufferAddress)        (JNIEnv *, jobject);\n+  jlong   (*GetDirectBufferCapacity)       (JNIEnv *, jobject);\n };\n \n #ifdef __cplusplus\n@@ -1522,6 +1527,15 @@ class _Jv_JNIEnv\n \n   jboolean ExceptionCheck ()\n   { return p->ExceptionCheck (this); }\n+\n+  jobject NewDirectByteBuffer (void *addr, jlong capacity)\n+  { return p->NewDirectByteBuffer (this, addr, capacity); }\n+\n+  void *GetDirectBufferAddress (jobject buf)\n+  { return p->GetDirectBufferAddress (this, buf); }\n+\n+  jlong GetDirectBufferCapacity (jobject buf)\n+  { return p->GetDirectBufferCapacity (this, buf); }\n };\n #endif /* __cplusplus */\n \n@@ -1539,6 +1553,7 @@ struct JNIInvokeInterface\n   jint (*AttachCurrentThread)   (JavaVM *, void **, void *);\n   jint (*DetachCurrentThread)   (JavaVM *);\n   jint (*GetEnv)                (JavaVM *, void **, jint);\n+  jint (*AttachCurrentThreadAsDaemon) (JavaVM *, void **, void *);\n };\n \n #ifdef __cplusplus\n@@ -1563,6 +1578,9 @@ class _Jv_JavaVM\n \n   jint GetEnv (void **penv, jint version)\n   { return functions->GetEnv (this, penv, version); }\n+\n+  jint AttachCurrentThreadAsDaemon (void **penv, void *args)\n+  { return functions->AttachCurrentThreadAsDaemon (this, penv, args); }\n };\n #endif /* __cplusplus */\n "}, {"sha": "a566bf4d99943d92142bd6637e9eeea0114ed2ea", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -1,6 +1,6 @@\n // natRuntime.cc - Implementation of native side of Runtime class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -167,7 +167,8 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n \t  return;\n \t}\n       jint vers = ((jint (*) (JavaVM *, void *)) onload) (vm, NULL);\n-      if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2)\n+      if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2\n+\t  && vers != JNI_VERSION_1_4)\n \t{\n \t  // FIXME: unload the library.\n \t  throw new UnsatisfiedLinkError (JvNewStringLatin1 (\"unrecognized version from JNI_OnLoad\"));"}, {"sha": "7fe8fb0db4620a4ce89ba35203d02b114dd15ee6", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -1,6 +1,6 @@\n // natThread.cc - Native part of Thread class.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -410,6 +410,21 @@ _Jv_AttachCurrentThread(jstring name, java::lang::ThreadGroup* group)\n   return thread;\n }\n \n+java::lang::Thread*\n+_Jv_AttachCurrentThreadAsDaemon(jstring name, java::lang::ThreadGroup* group)\n+{\n+  java::lang::Thread *thread = _Jv_ThreadCurrent ();\n+  if (thread != NULL)\n+    return thread;\n+  if (name == NULL)\n+    name = java::lang::Thread::gen_name ();\n+  thread = new java::lang::Thread (NULL, group, NULL, name);\n+  thread->setDaemon (true);\n+  _Jv_AttachCurrentThread (thread);\n+  _Jv_NotifyThreadStart (thread);\n+  return thread;\n+}\n+\n jint\n _Jv_DetachCurrentThread (void)\n {"}, {"sha": "bb504209cf55bb162414924698bb8f1c0cf06fef", "filename": "libjava/jni.cc", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880f8c16ad60e5c3536101de2e860ba90147f1e3/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=880f8c16ad60e5c3536101de2e860ba90147f1e3", "patch": "@@ -424,7 +424,7 @@ wrap_value (JNIEnv *env, T *value)\n static jint\n _Jv_JNI_GetVersion (JNIEnv *)\n {\n-  return JNI_VERSION_1_2;\n+  return JNI_VERSION_1_4;\n }\n \n static jclass\n@@ -1672,6 +1672,31 @@ _Jv_JNI_DeleteWeakGlobalRef (JNIEnv *, jweak obj)\n \n \f\n \n+// Direct byte buffers.\n+\n+static jobject\n+_Jv_JNI_NewDirectByteBuffer (JNIEnv *, void *, jlong)\n+{\n+  // For now we don't support this.\n+  return NULL;\n+}\n+\n+static void *\n+_Jv_JNI_GetDirectBufferAddress (JNIEnv *, jobject)\n+{\n+  // For now we don't support this.\n+  return NULL;\n+}\n+\n+static jlong\n+_Jv_JNI_GetDirectBufferCapacity (JNIEnv *, jobject)\n+{\n+  // For now we don't support this.\n+  return -1;\n+}\n+\n+\f\n+\n // Hash table of native methods.\n static JNINativeMethod *nathash;\n // Number of slots used.\n@@ -2096,15 +2121,17 @@ _Jv_JNIMethod::call (ffi_cif *, void *ret, ffi_raw *args, void *__this)\n \n // An internal helper function.\n static jint\n-_Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv, void *args)\n+_Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv,\n+\t\t\t     void *args, jboolean is_daemon)\n {\n   JavaVMAttachArgs *attach = reinterpret_cast<JavaVMAttachArgs *> (args);\n   java::lang::ThreadGroup *group = NULL;\n \n   if (attach)\n     {\n       // FIXME: do we really want to support 1.1?\n-      if (attach->version != JNI_VERSION_1_2\n+      if (attach->version != JNI_VERSION_1_4\n+\t  && attach->version != JNI_VERSION_1_2\n \t  && attach->version != JNI_VERSION_1_1)\n \treturn JNI_EVERSION;\n \n@@ -2147,7 +2174,10 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv, void *args)\n     {\n       try\n \t{\n-\t  _Jv_AttachCurrentThread (name, group);\n+\t  if (is_daemon)\n+\t    _Jv_AttachCurrentThreadAsDaemon (name, group);\n+\t  else\n+\t    _Jv_AttachCurrentThread (name, group);\n \t}\n       catch (jthrowable t)\n \t{\n@@ -2163,7 +2193,13 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv, void *args)\n static jint\n _Jv_JNI_AttachCurrentThread (JavaVM *vm, void **penv, void *args)\n {\n-  return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args);\n+  return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, false);\n+}\n+\n+static jint\n+_Jv_JNI_AttachCurrentThreadAsDaemon (JavaVM *vm, void **penv, void *args)\n+{\n+  return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, true);\n }\n \n static jint\n@@ -2185,10 +2221,9 @@ _Jv_JNI_DestroyJavaVM (JavaVM *vm)\n \t  return JNI_ERR;\n \t}\n \n-      jint r = _Jv_JNI_AttachCurrentThread (vm,\n-\t\t\t\t\t    main_name,\n+      jint r = _Jv_JNI_AttachCurrentThread (vm, main_name,\n \t\t\t\t\t    reinterpret_cast<void **> (&env),\n-\t\t\t\t\t    NULL);\n+\t\t\t\t\t    NULL, false);\n       if (r < 0)\n \treturn r;\n     }\n@@ -2227,7 +2262,8 @@ _Jv_JNI_GetEnv (JavaVM *, void **penv, jint version)\n #endif\n \n   // FIXME: do we really want to support 1.1?\n-  if (version != JNI_VERSION_1_2 && version != JNI_VERSION_1_1)\n+  if (version != JNI_VERSION_1_4 && version != JNI_VERSION_1_2\n+      && version != JNI_VERSION_1_1)\n     {\n       *penv = NULL;\n       return JNI_EVERSION;\n@@ -2241,12 +2277,12 @@ jint\n JNI_GetDefaultJavaVMInitArgs (void *args)\n {\n   jint version = * (jint *) args;\n-  // Here we only support 1.2.\n-  if (version != JNI_VERSION_1_2)\n+  // Here we only support 1.2 and 1.4.\n+  if (version != JNI_VERSION_1_2 && version != JNI_VERSION_1_4)\n     return JNI_EVERSION;\n \n   JavaVMInitArgs *ia = reinterpret_cast<JavaVMInitArgs *> (args);\n-  ia->version = JNI_VERSION_1_2;\n+  ia->version = JNI_VERSION_1_4;\n   ia->nOptions = 0;\n   ia->options = NULL;\n   ia->ignoreUnrecognized = true;\n@@ -2271,8 +2307,8 @@ JNI_CreateJavaVM (JavaVM **vm, void **penv, void *args)\n   if (args != NULL)\n     {\n       jint version = * (jint *) args;\n-      // We only support 1.2.\n-      if (version != JNI_VERSION_1_2)\n+      // We only support 1.2 and 1.4.\n+      if (version != JNI_VERSION_1_2 && version != JNI_VERSION_1_4)\n \treturn JNI_EVERSION;\n       JavaVMInitArgs *ia = reinterpret_cast<JavaVMInitArgs *> (args);\n       for (int i = 0; i < ia->nOptions; ++i)\n@@ -2614,7 +2650,11 @@ struct JNINativeInterface _Jv_JNIFunctions =\n   _Jv_JNI_NewWeakGlobalRef,\t\t    // NewWeakGlobalRef\n   _Jv_JNI_DeleteWeakGlobalRef,\t\t    // DeleteWeakGlobalRef\n \n-  _Jv_JNI_ExceptionCheck\n+  _Jv_JNI_ExceptionCheck,\t\t    // ExceptionCheck\n+\n+  _Jv_JNI_NewDirectByteBuffer,\t\t    // NewDirectByteBuffer\n+  _Jv_JNI_GetDirectBufferAddress,\t    // GetDirectBufferAddress\n+  _Jv_JNI_GetDirectBufferCapacity\t    // GetDirectBufferCapacity\n };\n \n struct JNIInvokeInterface _Jv_JNI_InvokeFunctions =\n@@ -2626,5 +2666,6 @@ struct JNIInvokeInterface _Jv_JNI_InvokeFunctions =\n   _Jv_JNI_DestroyJavaVM,\n   _Jv_JNI_AttachCurrentThread,\n   _Jv_JNI_DetachCurrentThread,\n-  _Jv_JNI_GetEnv\n+  _Jv_JNI_GetEnv,\n+  _Jv_JNI_AttachCurrentThreadAsDaemon\n };"}]}