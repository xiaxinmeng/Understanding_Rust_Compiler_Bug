{"sha": "d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "node_id": "C_kwDOANBUbNoAKGQxMThiYzU4ZjU2YTdhYTBiY2Q0ZTAzNzE3ODJlNTlmZmI4Y2RlNzM", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-22T18:38:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:28Z"}, "message": "[Ada] Reuse Is_Rewrite_Substitution where possible\n\nReplace comparisons of Original_Node with semantically equivalent but\nhigh-level calls to Is_Rewrite_Substitution. Offending occurrences found\nwith:\n\n  $ grep -n \"Original_Node (\\([A-Za-z_]\\+\\)) /\\?= \\1\" *.adb\n\nCode cleanup only; semantics is unaffected.\n\ngcc/ada/\n\n\t* atree.adb, exp_ch6.adb, exp_ch9.adb, ghost.adb, sem_ch3.adb,\n\tsem_ch4.adb, sem_res.adb, sem_util.adb: Use\n\tIs_Rewrite_Substitution where possible.", "tree": {"sha": "4ea0a431e04d8264bb3a2556c1078bfa1157d128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea0a431e04d8264bb3a2556c1078bfa1157d128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b814f0bdf1c1f6bcb628567c8e0e95fd68425657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b814f0bdf1c1f6bcb628567c8e0e95fd68425657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b814f0bdf1c1f6bcb628567c8e0e95fd68425657"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "bb4c3b46b41fba536b1179728190f06202d8addd", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -2146,7 +2146,7 @@ package body Atree is\n       --  not already rewritten the node, as indicated by an Orig_Nodes entry\n       --  that does not reference the Old_Node.\n \n-      if Original_Node (Old_Node) = Old_Node then\n+      if not Is_Rewrite_Substitution (Old_Node) then\n          Sav_Node := New_Copy (Old_Node);\n          Set_Original_Node (Sav_Node, Sav_Node);\n          Set_Original_Node (Old_Node, Sav_Node);"}, {"sha": "3ceb55d51dae62a4035516b5286fd1fa3f6122df", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -3932,7 +3932,7 @@ package body Exp_Ch6 is\n             --  First verify the actual is internal\n \n             elsif not Comes_From_Source (Prev)\n-              and then Original_Node (Prev) = Prev\n+              and then not Is_Rewrite_Substitution (Prev)\n \n               --  Next check that the actual is a constant\n "}, {"sha": "04a87fb4f9a96825229f01674664f92c547b76a1", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -6338,7 +6338,7 @@ package body Exp_Ch9 is\n \n             when N_Expression_With_Actions =>\n                --  this may occur in the case of a Count attribute reference\n-               if Original_Node (N) /= N\n+               if Is_Rewrite_Substitution (N)\n                  and then Is_Pure_Barrier (Original_Node (N)) /= Abandon\n                then\n                   return Skip;"}, {"sha": "962941d6db2b1dca5916e11ec6209da99f73a21d", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -1079,7 +1079,7 @@ package body Ghost is\n       function Ultimate_Original_Node (Nod : Node_Id) return Node_Id is\n          Res : Node_Id := Nod;\n       begin\n-         while Original_Node (Res) /= Res loop\n+         while Is_Rewrite_Substitution (Res) loop\n             Res := Original_Node (Res);\n          end loop;\n "}, {"sha": "53b0ec994c914395f8f868cbf046b8d12e5c4319", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -20185,20 +20185,14 @@ package body Sem_Ch3 is\n          =>\n             return not Comes_From_Source (Exp)\n               and then\n-                --  If the conversion has been rewritten, check Original_Node\n+                --  If the conversion has been rewritten, check Original_Node;\n+                --  otherwise, check the expression of the compiler-generated\n+                --  conversion (which is a conversion that we want to ignore\n+                --  for purposes of the limited-initialization restrictions).\n \n-                ((Original_Node (Exp) /= Exp\n-                   and then\n-                     OK_For_Limited_Init_In_05 (Typ, Original_Node (Exp)))\n-\n-                  --  Otherwise, check the expression of the compiler-generated\n-                  --  conversion (which is a conversion that we want to ignore\n-                  --  for purposes of the limited-initialization restrictions).\n-\n-                  or else\n-                    (Original_Node (Exp) = Exp\n-                      and then\n-                        OK_For_Limited_Init_In_05 (Typ, Expression (Exp))));\n+                (if Is_Rewrite_Substitution (Exp)\n+                 then OK_For_Limited_Init_In_05 (Typ, Original_Node (Exp))\n+                 else OK_For_Limited_Init_In_05 (Typ, Expression (Exp)));\n \n          when N_Explicit_Dereference\n             | N_Indexed_Component\n@@ -20547,7 +20541,7 @@ package body Sem_Ch3 is\n             --  its Original_Node points to the old Discr and the access type\n             --  for Discr_Type has already been created.\n \n-            if Original_Node (Discr) /= Discr then\n+            if Is_Rewrite_Substitution (Discr) then\n                Discr_Type := Etype (Discriminant_Type (Discr));\n             else\n                Discr_Type :="}, {"sha": "c913e8b69d58412666f10f66dd9990993d5fffcd", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -772,7 +772,7 @@ package body Sem_Ch4 is\n                --  type.\n \n                else\n-                  if Original_Node (N) /= N\n+                  if Is_Rewrite_Substitution (N)\n                     and then Nkind (Original_Node (N)) = N_Allocator\n                   then\n                      declare"}, {"sha": "538f860089075117660268935bcbf35214806e0e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -2472,7 +2472,7 @@ package body Sem_Res is\n       --  Declare_Expression and requires scope management.\n \n       if Nkind (N) = N_Expression_With_Actions then\n-         if Comes_From_Source (N) and then N = Original_Node (N) then\n+         if Comes_From_Source (N) and then not Is_Rewrite_Substitution (N) then\n             Resolve_Declare_Expression (N, Typ);\n          else\n             Resolve (Expression (N), Typ);"}, {"sha": "d0cbf3f740df1048c0452485b68002c880e4fcad", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118bc58f56a7aa0bcd4e0371782e59ffb8cde73/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d118bc58f56a7aa0bcd4e0371782e59ffb8cde73", "patch": "@@ -10435,7 +10435,7 @@ package body Sem_Util is\n          Discrim_Value_Status := Static_Expr;\n       else\n          if Ada_Version >= Ada_2022 then\n-            if Original_Node (Discrim_Value) /= Discrim_Value\n+            if Is_Rewrite_Substitution (Discrim_Value)\n                and then Nkind (Discrim_Value) = N_Type_Conversion\n                and then Etype (Original_Node (Discrim_Value))\n                       = Etype (Expression (Discrim_Value))"}]}