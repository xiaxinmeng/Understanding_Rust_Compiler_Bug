{"sha": "babb13f5cc83ae685fdea4824a51f6de5345b2aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiYjEzZjVjYzgzYWU2ODVmZGVhNDgyNGE1MWY2ZGU1MzQ1YjJhYQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-08-31T01:02:47Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-08-31T01:02:47Z"}, "message": "rs6000.c (swap_web_entry): Enlarge special_handling bitfield.\n\n[gcc]\n\n2015-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (swap_web_entry): Enlarge\n\tspecial_handling bitfield.\n\t(special_handling_values): Add SH_XXPERMDI and SH_CONCAT.\n\t(rtx_is_swappable_p): Add handling for vec_select/vec_concat form\n\tthat represents a general xxpermdi.\n\t(insn_is_swappable_p): Add handling for vec_concat of two\n\tdoublewords, which maps to a specific xxpermdi.\n\t(adjust_xxpermdi): New function.\n\t(adjust_concat): Likewise.\n\t(handle_special_swappables): Call adjust_xxpermdi and\n\tadjust_concat.\n\t(dump_swap_insn_table): Handle SH_XXPERMDI and SH_CONCAT.\n\n[gcc/testsuite]\n\n2015-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-19.c: New test.\n\nFrom-SVN: r227331", "tree": {"sha": "d546465b3429dfc52021e9aeee424d468077a316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d546465b3429dfc52021e9aeee424d468077a316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/babb13f5cc83ae685fdea4824a51f6de5345b2aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babb13f5cc83ae685fdea4824a51f6de5345b2aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babb13f5cc83ae685fdea4824a51f6de5345b2aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babb13f5cc83ae685fdea4824a51f6de5345b2aa/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ba02681ad4a19634c81f304c158c150b1df241a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba02681ad4a19634c81f304c158c150b1df241a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba02681ad4a19634c81f304c158c150b1df241a"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "f91964d1221ab65d0aef1c2e7581161c5c3aa51b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=babb13f5cc83ae685fdea4824a51f6de5345b2aa", "patch": "@@ -1,3 +1,18 @@\n+2015-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (swap_web_entry): Enlarge\n+\tspecial_handling bitfield.\n+\t(special_handling_values): Add SH_XXPERMDI and SH_CONCAT.\n+\t(rtx_is_swappable_p): Add handling for vec_select/vec_concat form\n+\tthat represents a general xxpermdi.\n+\t(insn_is_swappable_p): Add handling for vec_concat of two\n+\tdoublewords, which maps to a specific xxpermdi.\n+\t(adjust_xxpermdi): New function.\n+\t(adjust_concat): Likewise.\n+\t(handle_special_swappables): Call adjust_xxpermdi and\n+\tadjust_concat.\n+\t(dump_swap_insn_table): Handle SH_XXPERMDI and SH_CONCAT.\n+\n 2015-08-30  Rich Felker <dalias@libc.org>\n \n \t* config.gcc (supported_defaults): Handle sh[123456ble]*-*-*"}, {"sha": "500effa7331fee5c2e4173f99af80bd6eddb9f69", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=babb13f5cc83ae685fdea4824a51f6de5345b2aa", "patch": "@@ -34986,7 +34986,7 @@ class swap_web_entry : public web_entry_base\n   /* A nonzero value indicates what kind of special handling for this\n      insn is required if doublewords are swapped.  Undefined if\n      is_swappable is not set.  */\n-  unsigned int special_handling : 3;\n+  unsigned int special_handling : 4;\n   /* Set if the web represented by this entry cannot be optimized.  */\n   unsigned int web_not_optimizable : 1;\n   /* Set if this insn should be deleted.  */\n@@ -35000,7 +35000,9 @@ enum special_handling_values {\n   SH_NOSWAP_LD,\n   SH_NOSWAP_ST,\n   SH_EXTRACT,\n-  SH_SPLAT\n+  SH_SPLAT,\n+  SH_XXPERMDI,\n+  SH_CONCAT\n };\n \n /* Union INSN with all insns containing definitions that reach USE.\n@@ -35192,6 +35194,20 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t  *special = SH_EXTRACT;\n \t  return 1;\n \t}\n+      /* An XXPERMDI is ok if we adjust the lanes.  Note that if the\n+\t XXPERMDI is a swap operation, it will be identified by\n+\t insn_is_swap_p and therefore we won't get here.  */\n+      else if (GET_CODE (XEXP (op, 0)) == VEC_CONCAT\n+\t       && (GET_MODE (XEXP (op, 0)) == V4DFmode\n+\t\t   || GET_MODE (XEXP (op, 0)) == V4DImode)\n+\t       && GET_CODE ((parallel = XEXP (op, 1))) == PARALLEL\n+\t       && XVECLEN (parallel, 0) == 2\n+\t       && GET_CODE (XVECEXP (parallel, 0, 0)) == CONST_INT\n+\t       && GET_CODE (XVECEXP (parallel, 0, 1)) == CONST_INT)\n+\t{\n+\t  *special = SH_XXPERMDI;\n+\t  return 1;\n+\t}\n       else\n \treturn 0;\n \n@@ -35369,6 +35385,17 @@ insn_is_swappable_p (swap_web_entry *insn_entry, rtx insn,\n       return 1;\n     }\n \n+  /* A concatenation of two doublewords is ok if we reverse the\n+     order of the inputs.  */\n+  if (GET_CODE (body) == SET\n+      && GET_CODE (SET_SRC (body)) == VEC_CONCAT\n+      && (GET_MODE (SET_SRC (body)) == V2DFmode\n+\t  || GET_MODE (SET_SRC (body)) == V2DImode))\n+    {\n+      *special = SH_CONCAT;\n+      return 1;\n+    }\n+\n   /* Otherwise check the operands for vector lane violations.  */\n   return rtx_is_swappable_p (body, special);\n }\n@@ -35658,6 +35685,49 @@ adjust_splat (rtx_insn *insn)\n     fprintf (dump_file, \"Changing lane for splat %d\\n\", INSN_UID (insn));\n }\n \n+/* Given OP that contains an XXPERMDI operation (that is not a doubleword\n+   swap), reverse the order of the source operands and adjust the indices\n+   of the source lanes to account for doubleword reversal.  */\n+static void\n+adjust_xxpermdi (rtx_insn *insn)\n+{\n+  rtx set = PATTERN (insn);\n+  rtx select = XEXP (set, 1);\n+  rtx concat = XEXP (select, 0);\n+  rtx src0 = XEXP (concat, 0);\n+  XEXP (concat, 0) = XEXP (concat, 1);\n+  XEXP (concat, 1) = src0;\n+  rtx parallel = XEXP (select, 1);\n+  int lane0 = INTVAL (XVECEXP (parallel, 0, 0));\n+  int lane1 = INTVAL (XVECEXP (parallel, 0, 1));\n+  int new_lane0 = 3 - lane1;\n+  int new_lane1 = 3 - lane0;\n+  XVECEXP (parallel, 0, 0) = GEN_INT (new_lane0);\n+  XVECEXP (parallel, 0, 1) = GEN_INT (new_lane1);\n+  INSN_CODE (insn) = -1; /* Force re-recognition.  */\n+  df_insn_rescan (insn);\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"Changing lanes for xxpermdi %d\\n\", INSN_UID (insn));\n+}\n+\n+/* Given OP that contains a VEC_CONCAT operation of two doublewords,\n+   reverse the order of those inputs.  */\n+static void\n+adjust_concat (rtx_insn *insn)\n+{\n+  rtx set = PATTERN (insn);\n+  rtx concat = XEXP (set, 1);\n+  rtx src0 = XEXP (concat, 0);\n+  XEXP (concat, 0) = XEXP (concat, 1);\n+  XEXP (concat, 1) = src0;\n+  INSN_CODE (insn) = -1; /* Force re-recognition.  */\n+  df_insn_rescan (insn);\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"Reversing inputs for concat %d\\n\", INSN_UID (insn));\n+}\n+\n /* The insn described by INSN_ENTRY[I] can be swapped, but only\n    with special handling.  Take care of that here.  */\n static void\n@@ -35704,6 +35774,14 @@ handle_special_swappables (swap_web_entry *insn_entry, unsigned i)\n       /* Change the lane on a direct-splat operation.  */\n       adjust_splat (insn);\n       break;\n+    case SH_XXPERMDI:\n+      /* Change the lanes on an XXPERMDI operation.  */\n+      adjust_xxpermdi (insn);\n+      break;\n+    case SH_CONCAT:\n+      /* Reverse the order of a concatenation operation.  */\n+      adjust_concat (insn);\n+      break;\n     }\n }\n \n@@ -35776,6 +35854,10 @@ dump_swap_insn_table (swap_web_entry *insn_entry)\n \t      fputs (\"special:extract \", dump_file);\n \t    else if (insn_entry[i].special_handling == SH_SPLAT)\n \t      fputs (\"special:splat \", dump_file);\n+\t    else if (insn_entry[i].special_handling == SH_XXPERMDI)\n+\t      fputs (\"special:xxpermdi \", dump_file);\n+\t    else if (insn_entry[i].special_handling == SH_CONCAT)\n+\t      fputs (\"special:concat \", dump_file);\n \t  }\n \tif (insn_entry[i].web_not_optimizable)\n \t  fputs (\"unoptimizable \", dump_file);"}, {"sha": "8869251bb14452ba1b15d8e1ce2c5e2d74dc425c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=babb13f5cc83ae685fdea4824a51f6de5345b2aa", "patch": "@@ -1,3 +1,7 @@\n+2015-08-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-19.c: New test.\n+\n 2015-08-29 Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/67367"}, {"sha": "6dffbb9b8925bef3907ec6670770d2d018c962b6", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-19.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/babb13f5cc83ae685fdea4824a51f6de5345b2aa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-19.c?ref=babb13f5cc83ae685fdea4824a51f6de5345b2aa", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -ftree-vectorize -mcpu=power8 -ffast-math -fvect-cost-model=unlimited\" } */\n+\n+/* This tests special handling for various uses of xxpermdi, other than\n+   to perform doubleword swaps.  */\n+\n+void foo (_Complex double *self, _Complex double *a, _Complex double *b,\n+\t  int a1, int a2)\n+{\n+  int i, j;\n+  for (i = 0; i < a1; ++i)\n+    for (j = 0; j < a2; ++j)\n+      self[i] = self[i] + a[i,j] * b[j];\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,3\" 1 } } */"}]}