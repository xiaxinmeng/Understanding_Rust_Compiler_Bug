{"sha": "09639a839744ebc53f6b221a8a3b57dbb9993f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2MzlhODM5NzQ0ZWJjNTNmNmIyMjFhOGEzYjU3ZGJiOTk5M2Y2NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-05-14T21:29:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-05-14T21:29:48Z"}, "message": "passes.c (finish_optimization_passes): Change i to int.\n\n./:\t* passes.c (finish_optimization_passes): Change i to int.\n\t* plugin.c (plugins_active_p): Change event to int.\n\t(dump_active_plugins): Likewise.\n\t* reginfo.c (invalid_mode_change_p): Change to to unsigned int.\n\tAdd cast.\n\t* tree.c (tree_range_check_failed): Change c to unsigned int.\n\t(omp_clause_range_check_failed): Likewise.\n\t(build_common_builtin_nodes): Change mode to int.  Add cast.\n\t* config/ia64/ia64.c (is_emitted): Change r to unsigned int.\n\t(ia64_hard_regno_rename_ok, ia64_eh_uses): Likewise.\n\n\t* c-typeck.c (build_unary_op): If -Wc++-compat, warn about using\n\t++ or -- with a variable of enum type.\ncp/:\n\t* class.c (layout_class_type): Change itk to unsigned int.\n\t* decl.c (finish_enum): Change itk to unsigned int.\n\t* parser.c (cp_parser_check_decl_spec): Change ds to int.  Remove\n\tcasts.\nfortran/:\n\t* decl.c (match_attr_spec): Change d to unsigned int.\n\t* dump-parse-tree.c (show_namespace): Change op to int.  Add cast.\n\t* interface.c (gfc_check_interfaces): Change i to int.  Add casts.\n\t* module.c (read_module): Change i to int.  Add cast.\n\t(write_module): Change i to int.\n\t* symbol.c (gfc_get_namespace): Change in to int.\n\t(gfc_free_namespace): Change i to int.\n\t* trans-io.c (gfc_build_io_library_fndecls): Change ptype to\n\tunsigned int.  Add cast.\n\t* trans-types.c (gfc_init_kinds): Change mode to unsigned int.\n\tAdd casts.\ntestsuite/:\n\t* gcc.dg/Wcxx-compat-9.c: New testcase.\n\nFrom-SVN: r147544", "tree": {"sha": "3f13a6a041d6d3c9f9c6dd243c2fffd5baa391b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f13a6a041d6d3c9f9c6dd243c2fffd5baa391b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09639a839744ebc53f6b221a8a3b57dbb9993f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09639a839744ebc53f6b221a8a3b57dbb9993f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09639a839744ebc53f6b221a8a3b57dbb9993f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09639a839744ebc53f6b221a8a3b57dbb9993f64/comments", "author": null, "committer": null, "parents": [{"sha": "c04a56bffe53119ac0745f1c86df0c488e447989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04a56bffe53119ac0745f1c86df0c488e447989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04a56bffe53119ac0745f1c86df0c488e447989"}], "stats": {"total": 144, "additions": 108, "deletions": 36}, "files": [{"sha": "ac58e2b1611186a006a6451d0208fb0b03de217f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1,3 +1,19 @@\n+2009-05-14  Ian Lance Taylor  <iant@google.com>\n+\n+\t* passes.c (finish_optimization_passes): Change i to int.\n+\t* plugin.c (plugins_active_p): Change event to int.\n+\t(dump_active_plugins): Likewise.\n+\t* reginfo.c (invalid_mode_change_p): Change to to unsigned int.\n+\tAdd cast.\n+\t* tree.c (tree_range_check_failed): Change c to unsigned int.\n+\t(omp_clause_range_check_failed): Likewise.\n+\t(build_common_builtin_nodes): Change mode to int.  Add cast.\n+\t* config/ia64/ia64.c (is_emitted): Change r to unsigned int.\n+\t(ia64_hard_regno_rename_ok, ia64_eh_uses): Likewise.\n+\n+\t* c-typeck.c (build_unary_op): If -Wc++-compat, warn about using\n+\t++ or -- with a variable of enum type.\n+\n 2009-05-14  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR driver/40144"}, {"sha": "13cd3e33a4bf5c70a89558fb4d57f5945ad31585", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -3267,6 +3267,16 @@ build_unary_op (location_t location,\n \t\t\t\t : lv_decrement)))\n \treturn error_mark_node;\n \n+      if (warn_cxx_compat && TREE_CODE (TREE_TYPE (arg)) == ENUMERAL_TYPE)\n+\t{\n+\t  if (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+\t    warning_at (location, OPT_Wc___compat,\n+\t\t\t\"increment of enumeration value is invalid in C++\");\n+\t  else\n+\t    warning_at (location, OPT_Wc___compat,\n+\t\t\t\"decrement of enumeration value is invalid in C++\");\n+\t}\n+\n       /* Ensure the argument is fully folded inside any SAVE_EXPR.  */\n       arg = c_fully_fold (arg, false, NULL);\n "}, {"sha": "b44f53087f3440469a7873aac29934d8f1e6a6d7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1943,7 +1943,7 @@ get_reg (enum ia64_frame_regs r)\n static bool\n is_emitted (int regno)\n {\n-  enum ia64_frame_regs r;\n+  unsigned int r;\n \n   for (r = reg_fp; r < number_of_ia64_frame_regs; r++)\n     if (emitted_frame_related_regs[r] == regno)\n@@ -3657,7 +3657,7 @@ int\n ia64_hard_regno_rename_ok (int from, int to)\n {\n   /* Don't clobber any of the registers we reserved for the prologue.  */\n-  enum ia64_frame_regs r;\n+  unsigned int r;\n \n   for (r = reg_fp; r <= reg_save_ar_lc; r++)\n     if (to == current_frame_info.r[r] \n@@ -9317,7 +9317,7 @@ ia64_epilogue_uses (int regno)\n int\n ia64_eh_uses (int regno)\n {\n-  enum ia64_frame_regs r;\n+  unsigned int r;\n \n   if (! reload_completed)\n     return 0;"}, {"sha": "1c6d5831759fe6bb833800e42086a44227fab2c8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1,3 +1,10 @@\n+2009-05-14  Ian Lance Taylor  <iant@google.com>\n+\n+\t* class.c (layout_class_type): Change itk to unsigned int.\n+\t* decl.c (finish_enum): Change itk to unsigned int.\n+\t* parser.c (cp_parser_check_decl_spec): Change ds to int.  Remove\n+\tcasts.\n+\n 2009-05-13  David Mandelin <dmandelin@mozilla.com>:\n \n       * decl.c (duplicate_decls): Preserve parameter attributes."}, {"sha": "ad50a4eb47d0eb652930f76f5f9c00e62fcf889b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -4864,7 +4864,7 @@ layout_class_type (tree t, tree *virtuals_p)\n       if (DECL_C_BIT_FIELD (field)\n \t  && INT_CST_LT (TYPE_SIZE (type), DECL_SIZE (field)))\n \t{\n-\t  integer_type_kind itk;\n+\t  unsigned int itk;\n \t  tree integer_type;\n \t  bool was_unnamed_p = false;\n \t  /* We must allocate the bits as if suitably aligned for the"}, {"sha": "ed76dc397e49d99bda8f9bf45988c70583a41fbb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -11033,7 +11033,7 @@ finish_enum (tree enumtype)\n   int lowprec;\n   int highprec;\n   int precision;\n-  integer_type_kind itk;\n+  unsigned int itk;\n   tree underlying_type = NULL_TREE;\n   bool fixed_underlying_type_p \n     = ENUM_UNDERLYING_TYPE (enumtype) != NULL_TREE;"}, {"sha": "0b734727648602af39a739537ce4dbbd249200c5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -2149,11 +2149,11 @@ static void\n cp_parser_check_decl_spec (cp_decl_specifier_seq *decl_specs,\n \t\t\t   location_t location)\n {\n-  cp_decl_spec ds;\n+  int ds;\n \n   for (ds = ds_first; ds != ds_last; ++ds)\n     {\n-      unsigned count = decl_specs->specs[(int)ds];\n+      unsigned count = decl_specs->specs[ds];\n       if (count < 2)\n \tcontinue;\n       /* The \"long\" specifier is a special case because of \"long long\".  */\n@@ -2183,7 +2183,7 @@ cp_parser_check_decl_spec (cp_decl_specifier_seq *decl_specs,\n \t    \"__complex\",\n \t    \"__thread\"\n \t  };\n-\t  error (\"%Hduplicate %qs\", &location, decl_spec_names[(int)ds]);\n+\t  error (\"%Hduplicate %qs\", &location, decl_spec_names[ds]);\n \t}\n     }\n }"}, {"sha": "587123937b7d1334c734d03dbe436897a4703063", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1,3 +1,17 @@\n+2009-05-14  Ian Lance Taylor  <iant@google.com>\n+\n+\t* decl.c (match_attr_spec): Change d to unsigned int.\n+\t* dump-parse-tree.c (show_namespace): Change op to int.  Add cast.\n+\t* interface.c (gfc_check_interfaces): Change i to int.  Add casts.\n+\t* module.c (read_module): Change i to int.  Add cast.\n+\t(write_module): Change i to int.\n+\t* symbol.c (gfc_get_namespace): Change in to int.\n+\t(gfc_free_namespace): Change i to int.\n+\t* trans-io.c (gfc_build_io_library_fndecls): Change ptype to\n+\tunsigned int.  Add cast.\n+\t* trans-types.c (gfc_init_kinds): Change mode to unsigned int.\n+\tAdd casts.\n+\n 2009-05-14  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/40045"}, {"sha": "a5261b8a862f7db1c1542a73fc1e922cc6dd5763", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -2815,7 +2815,7 @@ match_attr_spec (void)\n \n   locus start, seen_at[NUM_DECL];\n   int seen[NUM_DECL];\n-  decl_types d;\n+  unsigned int d;\n   const char *attr;\n   match m;\n   gfc_try t;"}, {"sha": "26a8e08a649d0f9d94efd3e98b150c2fe0335f3d", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1,5 +1,5 @@\n /* Parse tree dumper\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Steven Bosscher\n \n@@ -1971,7 +1971,7 @@ show_namespace (gfc_namespace *ns)\n {\n   gfc_interface *intr;\n   gfc_namespace *save;\n-  gfc_intrinsic_op op;\n+  int op;\n   gfc_equiv *eq;\n   int i;\n \n@@ -2021,7 +2021,7 @@ show_namespace (gfc_namespace *ns)\n \n \t  show_indent ();\n \t  fprintf (dumpfile, \"Operator interfaces for %s:\",\n-\t\t   gfc_op2string (op));\n+\t\t   gfc_op2string ((gfc_intrinsic_op) op));\n \n \t  for (; intr; intr = intr->next)\n \t    fprintf (dumpfile, \" %s\", intr->sym->name);"}, {"sha": "f2d14657f0699fcf6cfee8ffc84cba1a866b6123", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1175,7 +1175,7 @@ gfc_check_interfaces (gfc_namespace *ns)\n {\n   gfc_namespace *old_ns, *ns2;\n   char interface_name[100];\n-  gfc_intrinsic_op i;\n+  int i;\n \n   old_ns = gfc_current_ns;\n   gfc_current_ns = ns;\n@@ -1193,12 +1193,12 @@ gfc_check_interfaces (gfc_namespace *ns)\n \tstrcpy (interface_name, \"intrinsic assignment operator\");\n       else\n \tsprintf (interface_name, \"intrinsic '%s' operator\",\n-\t\t gfc_op2string (i));\n+\t\t gfc_op2string ((gfc_intrinsic_op) i));\n \n       if (check_interface0 (ns->op[i], interface_name))\n \tcontinue;\n \n-      check_operator_interface (ns->op[i], i);\n+      check_operator_interface (ns->op[i], (gfc_intrinsic_op) i);\n \n       for (ns2 = ns; ns2; ns2 = ns2->parent)\n \t{"}, {"sha": "2a48f88dbda5b7556d285aa038f03627e18ef2bf", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -4017,7 +4017,7 @@ read_module (void)\n   module_locus operator_interfaces, user_operators;\n   const char *p;\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n-  gfc_intrinsic_op i;\n+  int i;\n   int ambiguous, j, nuse, symbol;\n   pointer_info *info, *q;\n   gfc_use_rename *u;\n@@ -4225,7 +4225,7 @@ read_module (void)\n \n       if (only_flag)\n \t{\n-\t  u = find_use_operator (i);\n+\t  u = find_use_operator ((gfc_intrinsic_op) i);\n \n \t  if (u == NULL)\n \t    {\n@@ -4677,7 +4677,7 @@ write_symtree (gfc_symtree *st)\n static void\n write_module (void)\n {\n-  gfc_intrinsic_op i;\n+  int i;\n \n   /* Write the operator interfaces.  */\n   mio_lparen ();"}, {"sha": "81473a420bfa03f35c9d4177bc9a6933cfb57700", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -2197,7 +2197,7 @@ gfc_get_namespace (gfc_namespace *parent, int parent_types)\n {\n   gfc_namespace *ns;\n   gfc_typespec *ts;\n-  gfc_intrinsic_op in;\n+  int in;\n   int i;\n \n   ns = XCNEW (gfc_namespace);\n@@ -3088,7 +3088,7 @@ void\n gfc_free_namespace (gfc_namespace *ns)\n {\n   gfc_namespace *p, *q;\n-  gfc_intrinsic_op i;\n+  int i;\n \n   if (ns == NULL)\n     return;\n@@ -4494,4 +4494,3 @@ gfc_get_tbp_symtree (gfc_symtree **root, const char *name)\n \n   return result;\n }\n-"}, {"sha": "0acf632fc06a9454b123e101512b7b1d58c36eca", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -279,7 +279,7 @@ gfc_build_io_library_fndecls (void)\n   tree gfc_intio_type_node;\n   tree parm_type, dt_parm_type;\n   HOST_WIDE_INT pad_size;\n-  enum ioparam_type ptype;\n+  unsigned int ptype;\n \n   types[IOPARM_type_int4] = gfc_int4_type_node = gfc_get_int_type (4);\n   types[IOPARM_type_intio] = gfc_intio_type_node\n@@ -302,7 +302,7 @@ gfc_build_io_library_fndecls (void)\n \t\t     TYPE_ALIGN (gfc_get_int_type (gfc_intio_kind)));\n \n   for (ptype = IOPARM_ptype_common; ptype < IOPARM_ptype_num; ptype++)\n-    gfc_build_st_parameter (ptype, types);\n+    gfc_build_st_parameter ((enum ioparam_type) ptype, types);\n \n   /* Define the transfer functions.  */\n "}, {"sha": "ae72e8d1b050802c4a646911608c277e1156898d", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -252,7 +252,7 @@ void init_c_interop_kinds (void)\n void\n gfc_init_kinds (void)\n {\n-  enum machine_mode mode;\n+  unsigned int mode;\n   int i_index, r_index, kind;\n   bool saw_i4 = false, saw_i8 = false;\n   bool saw_r4 = false, saw_r8 = false, saw_r16 = false;\n@@ -261,7 +261,7 @@ gfc_init_kinds (void)\n     {\n       int kind, bitsize;\n \n-      if (!targetm.scalar_mode_supported_p (mode))\n+      if (!targetm.scalar_mode_supported_p ((enum machine_mode) mode))\n \tcontinue;\n \n       /* The middle end doesn't support constants larger than 2*HWI.\n@@ -309,12 +309,13 @@ gfc_init_kinds (void)\n \n   for (r_index = 0, mode = MIN_MODE_FLOAT; mode <= MAX_MODE_FLOAT; mode++)\n     {\n-      const struct real_format *fmt = REAL_MODE_FORMAT (mode);\n+      const struct real_format *fmt =\n+\tREAL_MODE_FORMAT ((enum machine_mode) mode);\n       int kind;\n \n       if (fmt == NULL)\n \tcontinue;\n-      if (!targetm.scalar_mode_supported_p (mode))\n+      if (!targetm.scalar_mode_supported_p ((enum machine_mode) mode))\n \tcontinue;\n \n       /* Only let float/double/long double go through because the fortran"}, {"sha": "945cf5cec1a5f8d415338089c053793c336eec13", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -239,7 +239,7 @@ rest_of_type_compilation (tree type, int toplev)\n void\n finish_optimization_passes (void)\n {\n-  enum tree_dump_index i;\n+  int i;\n   struct dump_file_info *dfi;\n   char *name;\n "}, {"sha": "9362e6a23e572ae06fd431b7b474139f141eae55", "filename": "gcc/plugin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -767,7 +767,7 @@ print_plugins_help (FILE *file, const char *indent)\n bool\n plugins_active_p (void)\n {\n-  enum plugin_event event;\n+  int event;\n \n   for (event = PLUGIN_PASS_MANAGER_SETUP; event < PLUGIN_EVENT_LAST; event++)\n     if (plugin_callbacks[event])\n@@ -783,7 +783,7 @@ plugins_active_p (void)\n void\n dump_active_plugins (FILE *file)\n {\n-  enum plugin_event event;\n+  int event;\n \n   if (!plugins_active_p ())\n     return;"}, {"sha": "1f8684fbdd0422ff89d09469f392d3c5e0a78260", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1322,7 +1322,7 @@ invalid_mode_change_p (unsigned int regno,\n \t\t       enum machine_mode from)\n {\n   struct subregs_of_mode_node dummy, *node;\n-  enum machine_mode to;\n+  unsigned int to;\n   unsigned char mask;\n \n   gcc_assert (subregs_of_mode);\n@@ -1335,7 +1335,7 @@ invalid_mode_change_p (unsigned int regno,\n   mask = 1 << (regno & 7);\n   for (to = VOIDmode; to < NUM_MACHINE_MODES; to++)\n     if (node->modes[to] & mask)\n-      if (CANNOT_CHANGE_MODE_CLASS (from, to, rclass))\n+      if (CANNOT_CHANGE_MODE_CLASS (from, (enum machine_mode) to, rclass))\n \treturn true;\n \n   return false;"}, {"sha": "2733cb52dfd127930d3be3de16664704f067649b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -1,3 +1,7 @@\n+2009-05-14  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-9.c: New testcase.\n+\n 2009-05-14  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39996"}, {"sha": "8a3867c11c9868b54e3dc42fb28cc127bfc2b272", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-9.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-9.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+enum e { FIRST, LAST };\n+\n+extern void f2 (enum e);\n+\n+void\n+f1 ()\n+{\n+  enum e v;\n+\n+  for (v = FIRST; v < LAST; ++v)  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    f2 (v);\n+  for (v = FIRST; v < LAST; v++)  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    f2 (v);\n+  for (v = LAST; v > FIRST; --v)  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    f2 (v);\n+  for (v = LAST; v > FIRST; v--)  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+    f2 (v);\n+}"}, {"sha": "5ed55c1d372ce1893c653e00772ceca86b40c0e2", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09639a839744ebc53f6b221a8a3b57dbb9993f64/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=09639a839744ebc53f6b221a8a3b57dbb9993f64", "patch": "@@ -7147,7 +7147,7 @@ tree_range_check_failed (const_tree node, const char *file, int line,\n {\n   char *buffer;\n   unsigned length = 0;\n-  enum tree_code c;\n+  unsigned int c;\n \n   for (c = c1; c <= c2; ++c)\n     length += 4 + strlen (tree_code_name[c]);\n@@ -7208,7 +7208,7 @@ omp_clause_range_check_failed (const_tree node, const char *file, int line,\n {\n   char *buffer;\n   unsigned length = 0;\n-  enum omp_clause_code c;\n+  unsigned int c;\n \n   for (c = c1; c <= c2; ++c)\n     length += 4 + strlen (omp_clause_code_name[c]);\n@@ -7811,7 +7811,7 @@ build_common_builtin_nodes (void)\n      complex.  Further, we can do slightly better with folding these \n      beasties if the real and complex parts of the arguments are separate.  */\n   {\n-    enum machine_mode mode;\n+    int mode;\n \n     for (mode = MIN_MODE_COMPLEX_FLOAT; mode <= MAX_MODE_COMPLEX_FLOAT; ++mode)\n       {\n@@ -7820,7 +7820,7 @@ build_common_builtin_nodes (void)\n \tenum built_in_function mcode, dcode;\n \ttree type, inner_type;\n \n-\ttype = lang_hooks.types.type_for_mode (mode, 0);\n+\ttype = lang_hooks.types.type_for_mode ((enum machine_mode) mode, 0);\n \tif (type == NULL)\n \t  continue;\n \tinner_type = TREE_TYPE (type);"}]}