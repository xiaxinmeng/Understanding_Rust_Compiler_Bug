{"sha": "74e243ec99476408fe60ad48e861d9575c537979", "node_id": "C_kwDOANBUbNoAKDc0ZTI0M2VjOTk0NzY0MDhmZTYwYWQ0OGU4NjFkOTU3NWM1Mzc5Nzk", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2022-04-04T16:41:53Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2022-04-04T16:41:53Z"}, "message": "doc: Fix typos in match.pd documentation\n\nThis patch fixes some spelling and grammar issues in the match.pd\ndocumentation.\n\ngcc/ChangeLog:\n\n\t* doc/match-and-simplify.texi: Fix typos.", "tree": {"sha": "f0a92b39dd9eb46882cc2aea57cb04e04e991553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0a92b39dd9eb46882cc2aea57cb04e04e991553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e243ec99476408fe60ad48e861d9575c537979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e243ec99476408fe60ad48e861d9575c537979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e243ec99476408fe60ad48e861d9575c537979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e243ec99476408fe60ad48e861d9575c537979/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3afc7c4eeada0a04c2c4ededeb0f6ccc724a58ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afc7c4eeada0a04c2c4ededeb0f6ccc724a58ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afc7c4eeada0a04c2c4ededeb0f6ccc724a58ec"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b33d83518a7652e0d4a22d36fadcfb1720dd68e6", "filename": "gcc/doc/match-and-simplify.texi", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e243ec99476408fe60ad48e861d9575c537979/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e243ec99476408fe60ad48e861d9575c537979/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=74e243ec99476408fe60ad48e861d9575c537979", "patch": "@@ -19,7 +19,7 @@ tries to address several issues.\n     gimplifying via force_gimple_operand\n @end enumerate\n \n-To address these the project introduces a simple domain specific language\n+To address these the project introduces a simple domain-specific language\n to write expression simplifications from which code targeting GIMPLE\n and GENERIC is auto-generated.  The GENERIC variant follows the\n fold_buildN API while for the GIMPLE variant and to address 2) new\n@@ -40,7 +40,7 @@ APIs are introduced.\n @deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, gimple_seq *, tree (*)(tree))\n @deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, tree, gimple_seq *, tree (*)(tree))\n @deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, tree, tree, gimple_seq *, tree (*)(tree))\n-The main GIMPLE API entry to the expression simplifications mimicing\n+The main GIMPLE API entry to the expression simplifications mimicking\n that of the GENERIC fold_@{unary,binary,ternary@} functions.\n @end deftypefn\n \n@@ -57,7 +57,7 @@ a valueization hook:\n @end deftypefn\n \n \n-Ontop of these a @code{fold_buildN}-like API for GIMPLE is introduced:\n+On top of these a @code{fold_buildN}-like API for GIMPLE is introduced:\n \n @deftypefn {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum tree_code, tree, tree, tree (*valueize) (tree) = NULL);\n @deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum tree_code, tree, tree, tree, tree (*valueize) (tree) = NULL);\n@@ -78,9 +78,9 @@ and simplification is performed using the optional valueization hook.\n @section The Language\n @cindex The Language\n \n-The language to write expression simplifications in resembles other\n-domain-specific languages GCC uses.  Thus it is lispy.  Lets start\n-with an example from the match.pd file:\n+The language in which to write expression simplifications resembles\n+other domain-specific languages GCC uses.  Thus it is lispy.  Let's\n+start with an example from the match.pd file:\n \n @smallexample\n (simplify\n@@ -100,7 +100,7 @@ function code names in all-caps, like @code{BUILT_IN_SQRT}.\n \n @code{@@n} denotes a so-called capture.  It captures the operand and lets\n you refer to it in other places of the match-and-simplify.  In the\n-above example it is refered to in the replacement expression.  Captures\n+above example it is referred to in the replacement expression.  Captures\n are @code{@@} followed by a number or an identifier.\n \n @smallexample\n@@ -110,10 +110,10 @@ are @code{@@} followed by a number or an identifier.\n @end smallexample\n \n In this example @code{@@0} is mentioned twice which constrains the matched\n-expression to have two equal operands.  Usually matches are constraint\n-to equal types.  If operands may be constants and conversions are involved\n+expression to have two equal operands.  Usually matches are constrained\n+to equal types.  If operands may be constants and conversions are involved,\n matching by value might be preferred in which case use @code{@@@@0} to\n-denote a by value match and the specific operand you want to refer to\n+denote a by-value match and the specific operand you want to refer to\n in the result part.  This example also introduces\n operands written in C code.  These can be used in the expression\n replacements and are supposed to evaluate to a tree node which has to\n@@ -129,7 +129,7 @@ be a valid GIMPLE operand (so you cannot generate expressions in C code).\n Here @code{@@0} captures the first operand of the trunc_mod expression\n which is also predicated with @code{integer_zerop}.  Expression operands\n may be either expressions, predicates or captures.  Captures\n-can be unconstrained or capture expresions or predicates.\n+can be unconstrained or capture expressions or predicates.\n \n This example introduces an optional operand of simplify,\n the if-expression.  This condition is evaluated after the\n@@ -219,9 +219,9 @@ Captures can also be used for capturing results of sub-expressions.\n @end smallexample\n \n In the above example, @code{@@2} captures the result of the expression\n-@code{(addr @@0)}.  For outermost expression only its type can be captured,\n-and the keyword @code{type} is reserved for this purpose.  The above\n-example also gives a way to conditionalize patterns to only apply\n+@code{(addr @@0)}.  For the outermost expression only its type can be\n+captured, and the keyword @code{type} is reserved for this purpose.  The\n+above example also gives a way to conditionalize patterns to only apply\n to @code{GIMPLE} or @code{GENERIC} by means of using the pre-defined\n preprocessor macros @code{GIMPLE} and @code{GENERIC} and using\n preprocessor directives.\n@@ -314,9 +314,9 @@ and use them in @code{for} operator lists where they get expanded.\n So this example iterates over @code{plus}, @code{minus}, @code{mult}\n and @code{trunc_div}.\n \n-Using operator lists can also remove the need to explicitely write\n+Using operator lists can also remove the need to explicitly write\n a @code{for}.  All operator list uses that appear in a @code{simplify}\n-or @code{match} pattern in operator positions will implicitely\n+or @code{match} pattern in operator positions will implicitly\n be added to a new @code{for}.  For example\n \n @smallexample\n@@ -359,7 +359,7 @@ type of a generated expression with the @code{:type} syntax where\n @code{type} needs to be an identifier that refers to the desired type.\n Usually the types of the generated result expressions are\n determined from the context, but sometimes like in the above case\n-it is required that you specify them explicitely.\n+it is required that you specify them explicitly.\n \n Another modifier for generated expressions is @code{!} which\n tells the machinery to only consider the simplification in case\n@@ -402,7 +402,7 @@ The support for @code{?} marking extends to all unary operations\n including predicates you declare yourself with @code{match}.\n \n Predicates available from the GCC middle-end need to be made\n-available explicitely via @code{define_predicates}:\n+available explicitly via @code{define_predicates}:\n \n @smallexample\n (define_predicates"}]}