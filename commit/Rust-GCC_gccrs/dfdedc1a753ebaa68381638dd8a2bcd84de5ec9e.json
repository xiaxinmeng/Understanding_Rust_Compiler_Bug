{"sha": "dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkZWRjMWE3NTNlYmFhNjgzODE2MzhkZDhhMmJjZDg0ZGU1ZWM5ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-11T12:49:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-11T13:58:57Z"}, "message": "More maybe_fold_reference TLC\n\nThis removes stale users of maybe_fold_reference where IL constraints\nmake it never do anything.\n\n2021-05-11  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_call): Do not call\n\tmaybe_fold_reference on call arguments or the static chain.\n\t(fold_stmt_1): Do not call maybe_fold_reference on GIMPLE_ASM\n\tinputs.", "tree": {"sha": "264ea607ad3b92e746f7b243c37eff3fc1da7747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/264ea607ad3b92e746f7b243c37eff3fc1da7747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7862a1922d33f0fb926bba18e807bc591feb9498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7862a1922d33f0fb926bba18e807bc591feb9498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7862a1922d33f0fb926bba18e807bc591feb9498"}], "stats": {"total": 59, "additions": 0, "deletions": 59}, "files": [{"sha": "68717cf1542d6174b8be3f217c8c0a1536b0d773", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=dfdedc1a753ebaa68381638dd8a2bcd84de5ec9e", "patch": "@@ -5447,19 +5447,6 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n   gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n   tree callee;\n   bool changed = false;\n-  unsigned i;\n-\n-  /* Fold *& in call arguments.  */\n-  for (i = 0; i < gimple_call_num_args (stmt); ++i)\n-    if (REFERENCE_CLASS_P (gimple_call_arg (stmt, i)))\n-      {\n-\ttree tmp = maybe_fold_reference (gimple_call_arg (stmt, i));\n-\tif (tmp)\n-\t  {\n-\t    gimple_call_set_arg (stmt, i, tmp);\n-\t    changed = true;\n-\t  }\n-      }\n \n   /* Check for virtual calls that became direct calls.  */\n   callee = gimple_call_fn (stmt);\n@@ -5562,15 +5549,6 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  gimple_call_set_chain (stmt, NULL);\n \t  changed = true;\n \t}\n-      else\n-\t{\n-\t  tree tmp = maybe_fold_reference (gimple_call_chain (stmt));\n-\t  if (tmp)\n-\t    {\n-\t      gimple_call_set_chain (stmt, tmp);\n-\t      changed = true;\n-\t    }\n-\t}\n     }\n \n   if (inplace)\n@@ -6285,43 +6263,6 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n       changed |= gimple_fold_call (gsi, inplace);\n       break;\n \n-    case GIMPLE_ASM:\n-      /* Fold *& in asm operands.  */\n-      {\n-\tgasm *asm_stmt = as_a <gasm *> (stmt);\n-\tsize_t noutputs;\n-\tconst char **oconstraints;\n-\tconst char *constraint;\n-\tbool allows_mem, allows_reg;\n-\n-\tnoutputs = gimple_asm_noutputs (asm_stmt);\n-\toconstraints = XALLOCAVEC (const char *, noutputs);\n-\n-\tfor (i = 0; i < noutputs; ++i)\n-\t  {\n-\t    tree link = gimple_asm_output_op (asm_stmt, i);\n-\t    oconstraints[i]\n-\t      = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n-\t  }\n-\tfor (i = 0; i < gimple_asm_ninputs (asm_stmt); ++i)\n-\t  {\n-\t    tree link = gimple_asm_input_op (asm_stmt, i);\n-\t    tree op = TREE_VALUE (link);\n-\t    constraint\n-\t      = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (link)));\n-\t    parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n-\t\t\t\t    oconstraints, &allows_mem, &allows_reg);\n-\t    if (REFERENCE_CLASS_P (op)\n-\t\t&& (allows_reg || !allows_mem)\n-\t\t&& (op = maybe_fold_reference (op)) != NULL_TREE)\n-\t      {\n-\t\tTREE_VALUE (link) = op;\n-\t\tchanged = true;\n-\t      }\n-\t  }\n-      }\n-      break;\n-\n     case GIMPLE_DEBUG:\n       if (gimple_debug_bind_p (stmt))\n \t{"}]}