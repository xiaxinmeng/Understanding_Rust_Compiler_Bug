{"sha": "d2754fbb65dd3b81487769317bae4e9a8cee01c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3NTRmYmI2NWRkM2I4MTQ4Nzc2OTMxN2JhZTRlOWE4Y2VlMDFjOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-29T07:43:38Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-12-29T07:44:20Z"}, "message": "i386: Rounding functions TLC\n\nUse copy_to_reg where appropriate, use int_mode_for_mode\nand fix comment indentation.\n\n2020-12-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386-expand.c (ix86_gen_TWO52): Use REAL_MODE_FORMAT\n\tto determine number of mantissa bits.  Use real_2expN instead\n\tof real_ldexp.\n\t(ix86_expand_rint): Use copy_to_reg.\n\t(ix86_expand_floorceildf_32): Ditto.\n\t(ix86_expand_truncdf_32): Ditto.\n\t(ix86_expand_rounddf_32): Ditto.\n\t(ix86_expand_floorceil): Use copy_to_reg and int_mode_for_mode.\n\t(ix86_expand_trunc): Ditto.\n\t(ix86_expand_round): Ditto.", "tree": {"sha": "d8487c36e16f2458f51c53cef16bcedaf9fb0692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8487c36e16f2458f51c53cef16bcedaf9fb0692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2754fbb65dd3b81487769317bae4e9a8cee01c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2754fbb65dd3b81487769317bae4e9a8cee01c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2754fbb65dd3b81487769317bae4e9a8cee01c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2754fbb65dd3b81487769317bae4e9a8cee01c9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3425a52f3483dac31deea00db305e864544ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3425a52f3483dac31deea00db305e864544ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3425a52f3483dac31deea00db305e864544ccf"}], "stats": {"total": 130, "additions": 64, "deletions": 66}, "files": [{"sha": "6e08fd327265047f78912c609a009d565432057c", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 64, "deletions": 66, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2754fbb65dd3b81487769317bae4e9a8cee01c9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2754fbb65dd3b81487769317bae4e9a8cee01c9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d2754fbb65dd3b81487769317bae4e9a8cee01c9", "patch": "@@ -16214,8 +16214,8 @@ void\n ix86_expand_lround (rtx op0, rtx op1)\n {\n   /* C code for the stuff we're doing below:\n-       tmp = op1 + copysign (nextafter (0.5, 0.0), op1)\n-       return (long)tmp;\n+\ttmp = op1 + copysign (nextafter (0.5, 0.0), op1)\n+\treturn (long)tmp;\n    */\n   machine_mode mode = GET_MODE (op1);\n   const struct real_format *fmt;\n@@ -16246,8 +16246,8 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n {\n   /* C code for the stuff we're doing below (for do_floor):\n \txi = (long)op1;\n-        xi -= (double)xi > op1 ? 1 : 0;\n-        return xi;\n+\txi -= (double)xi > op1 ? 1 : 0;\n+\treturn xi;\n    */\n   machine_mode fmode = GET_MODE (op1);\n   machine_mode imode = GET_MODE (op0);\n@@ -16281,10 +16281,12 @@ ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n static rtx\n ix86_gen_TWO52 (machine_mode mode)\n {\n+  const struct real_format *fmt;\n   REAL_VALUE_TYPE TWO52r;\n   rtx TWO52;\n \n-  real_ldexp (&TWO52r, &dconst1, mode == DFmode ? 52 : 23);\n+  fmt = REAL_MODE_FORMAT (mode);\n+  real_2expN (&TWO52r, fmt->p - 1, mode);\n   TWO52 = const_double_from_real_value (TWO52r, mode);\n   TWO52 = force_reg (mode, TWO52);\n \n@@ -16298,29 +16300,31 @@ ix86_expand_rint (rtx operand0, rtx operand1)\n {\n   /* C code for the stuff we're doing below:\n \txa = fabs (operand1);\n-        if (!isless (xa, 2**52))\n+\tif (!isless (xa, 2**52))\n \t  return operand1;\n-        two52 = 2**52;\n-        if (flag_rounding_math)\n+\ttwo52 = 2**52;\n+\tif (flag_rounding_math)\n \t  {\n \t    two52 = copysign (two52, operand1);\n \t    xa = operand1;\n \t  }\n-        xa = xa + two52 - two52;\n-        return copysign (xa, operand1);\n+\txa = xa + two52 - two52;\n+\treturn copysign (xa, operand1);\n    */\n   machine_mode mode = GET_MODE (operand0);\n   rtx res, xa, TWO52, mask;\n   rtx_code_label *label;\n \n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  TWO52 = ix86_gen_TWO52 (mode);\n+\n+  /* Temporary for holding the result, initialized to the input\n+     operand to ease control flow.  */\n+  res = copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);\n \n   /* if (!isless (xa, TWO52)) goto label; */\n-  TWO52 = ix86_gen_TWO52 (mode);\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   if (flag_rounding_math)\n@@ -16351,8 +16355,8 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n {\n   /* C code for the stuff we expand below.\n \tdouble xa = fabs (x), x2;\n-        if (!isless (xa, TWO52))\n-          return x;\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n \tx2 = (double)(long)x;\n \n      Compensate.  Floor:\n@@ -16374,8 +16378,7 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res = copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);\n@@ -16384,7 +16387,7 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   /* xa = (double)(long)x */\n-  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  xi = gen_reg_rtx (int_mode_for_mode (mode).require ());\n   expand_fix (xi, res, 0);\n   expand_float (xa, xi, 0);\n \n@@ -16419,18 +16422,18 @@ void\n ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n {\n   /* C code for the stuff we expand below.\n-        double xa = fabs (x), x2;\n-        if (!isless (xa, TWO52))\n-          return x;\n-        xa = xa + TWO52 - TWO52;\n-        x2 = copysign (xa, x);\n+\tdouble xa = fabs (x), x2;\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n+\txa = xa + TWO52 - TWO52;\n+\tx2 = copysign (xa, x);\n \n      Compensate.  Floor:\n-        if (x2 > x)\n-          x2 -= 1;\n+\tif (x2 > x)\n+\t  x2 -= 1;\n      Compensate.  Ceil:\n-        if (x2 < x)\n-          x2 += 1;\n+\tif (x2 < x)\n+\t  x2 += 1;\n \n \tif (HONOR_SIGNED_ZEROS (mode))\n \t  x2 = copysign (x2, x);\n@@ -16444,8 +16447,7 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res = copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);\n@@ -16490,10 +16492,10 @@ void\n ix86_expand_trunc (rtx operand0, rtx operand1)\n {\n   /* C code for SSE variant we expand below.\n-        double xa = fabs (x), x2;\n-        if (!isless (xa, TWO52))\n-          return x;\n-        x2 = (double)(long)x;\n+\tdouble xa = fabs (x), x2;\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n+\tx2 = (double)(long)x;\n \tif (HONOR_SIGNED_ZEROS (mode))\n \t  return copysign (x2, x);\n \treturn x2;\n@@ -16506,8 +16508,7 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res = copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);\n@@ -16516,7 +16517,7 @@ ix86_expand_trunc (rtx operand0, rtx operand1)\n   label = ix86_expand_sse_compare_and_jump (UNLE, TWO52, xa, false);\n \n   /* xa = (double)(long)x */\n-  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  xi = gen_reg_rtx (int_mode_for_mode (mode).require ());\n   expand_fix (xi, res, 0);\n   expand_float (xa, xi, 0);\n \n@@ -16542,23 +16543,22 @@ ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n   rtx_code_label *label;\n \n   /* C code for SSE variant we expand below.\n-        double xa = fabs (x), x2;\n-        if (!isless (xa, TWO52))\n-          return x;\n-        xa2 = xa + TWO52 - TWO52;\n+\tdouble xa = fabs (x), x2;\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n+\txa2 = xa + TWO52 - TWO52;\n      Compensate:\n-        if (xa2 > xa)\n-          xa2 -= 1.0;\n-        x2 = copysign (xa2, x);\n-        return x2;\n+\tif (xa2 > xa)\n+\t  xa2 -= 1.0;\n+\tx2 = copysign (xa2, x);\n+\treturn x2;\n    */\n \n   TWO52 = ix86_gen_TWO52 (mode);\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res =copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);\n@@ -16597,11 +16597,11 @@ void\n ix86_expand_round (rtx operand0, rtx operand1)\n {\n   /* C code for the stuff we're doing below:\n-        double xa = fabs (x);\n-        if (!isless (xa, TWO52))\n-          return x;\n-        xa = (double)(long)(xa + nextafter (0.5, 0.0));\n-        return copysign (xa, x);\n+\tdouble xa = fabs (x);\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n+\txa = (double)(long)(xa + nextafter (0.5, 0.0));\n+\treturn copysign (xa, x);\n    */\n   machine_mode mode = GET_MODE (operand0);\n   rtx res, TWO52, xa, xi, half, mask;\n@@ -16611,8 +16611,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res = copy_to_reg (operand1);\n \n   TWO52 = ix86_gen_TWO52 (mode);\n   xa = ix86_expand_sse_fabs (res, &mask);\n@@ -16628,7 +16627,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n   xa = expand_simple_binop (mode, PLUS, xa, half, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* xa = (double)(int64_t)xa */\n-  xi = gen_reg_rtx (mode == DFmode ? DImode : SImode);\n+  xi = gen_reg_rtx (int_mode_for_mode (mode).require ());\n   expand_fix (xi, xa, 0);\n   expand_float (xa, xi, 0);\n \n@@ -16648,20 +16647,20 @@ void\n ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n {\n   /* C code for the stuff we expand below.\n-        double xa = fabs (x), xa2, x2;\n-        if (!isless (xa, TWO52))\n-          return x;\n+\tdouble xa = fabs (x), xa2, x2;\n+\tif (!isless (xa, TWO52))\n+\t  return x;\n      Using the absolute value and copying back sign makes\n      -0.0 -> -0.0 correct.\n-        xa2 = xa + TWO52 - TWO52;\n+\txa2 = xa + TWO52 - TWO52;\n      Compensate.\n \tdxa = xa2 - xa;\n-        if (dxa <= -0.5)\n-          xa2 += 1;\n-        else if (dxa > 0.5)\n-          xa2 -= 1;\n-        x2 = copysign (xa2, x);\n-        return x2;\n+\tif (dxa <= -0.5)\n+\t  xa2 += 1;\n+\telse if (dxa > 0.5)\n+\t  xa2 -= 1;\n+\tx2 = copysign (xa2, x);\n+\treturn x2;\n    */\n   machine_mode mode = GET_MODE (operand0);\n   rtx xa, xa2, dxa, TWO52, tmp, half, mhalf, one, res, mask;\n@@ -16671,8 +16670,7 @@ ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n \n   /* Temporary for holding the result, initialized to the input\n      operand to ease control flow.  */\n-  res = gen_reg_rtx (mode);\n-  emit_move_insn (res, operand1);\n+  res = copy_to_reg (operand1);\n \n   /* xa = abs (operand1) */\n   xa = ix86_expand_sse_fabs (res, &mask);"}]}