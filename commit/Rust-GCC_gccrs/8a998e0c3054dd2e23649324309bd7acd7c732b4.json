{"sha": "8a998e0c3054dd2e23649324309bd7acd7c732b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5OThlMGMzMDU0ZGQyZTIzNjQ5MzI0MzA5YmQ3YWNkN2M3MzJiNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-11-04T00:23:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-11-04T00:23:15Z"}, "message": "predict.c (struct block_info_def): Kill \"tovisit\" field.\n\n       * predict.c (struct block_info_def): Kill \"tovisit\" field.\n        (propagate_freq): Accept new \"tovisit\" parameter.  Change\n        read/write access methods for \"tovisit\" to check the \"tovisit\"\n        bitmap instead of a bit in block_info_def.\n        (estimate_loops_at_level): Allocate \"tovisit\" bitmap.  Pass\n        it to propagate_freq.\n\nFrom-SVN: r90046", "tree": {"sha": "f89fadffeb89ebfead7ca2e1f2dc316bcf41df7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89fadffeb89ebfead7ca2e1f2dc316bcf41df7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a998e0c3054dd2e23649324309bd7acd7c732b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a998e0c3054dd2e23649324309bd7acd7c732b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a998e0c3054dd2e23649324309bd7acd7c732b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a998e0c3054dd2e23649324309bd7acd7c732b4/comments", "author": null, "committer": null, "parents": [{"sha": "76969785b4d0aa1a2364eb9c7b9d74b5b2a3b49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76969785b4d0aa1a2364eb9c7b9d74b5b2a3b49c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76969785b4d0aa1a2364eb9c7b9d74b5b2a3b49c"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "ca92f93a793bc940bde86f948e367bf6419010b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a998e0c3054dd2e23649324309bd7acd7c732b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a998e0c3054dd2e23649324309bd7acd7c732b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a998e0c3054dd2e23649324309bd7acd7c732b4", "patch": "@@ -65,6 +65,13 @@\n \n 2004-11-03 Jeff Law  <law@redhat.com>\n \n+\t* predict.c (struct block_info_def): Kill \"tovisit\" field.\n+\t(propagate_freq): Accept new \"tovisit\" parameter.  Change\n+\tread/write access methods for \"tovisit\" to check the \"tovisit\"\n+\tbitmap instead of a bit in block_info_def.\n+\t(estimate_loops_at_level): Allocate \"tovisit\" bitmap.  Pass\n+\tit to propagate_freq.\n+\n \t* stmt.c (expand_case): Speed up code to detect duplicate case\n \tlabel targets and count unique case label targets.\n "}, {"sha": "9500b2b273086a4c57b65673e63be8d15ac1ca05", "filename": "gcc/predict.c", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a998e0c3054dd2e23649324309bd7acd7c732b4/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a998e0c3054dd2e23649324309bd7acd7c732b4/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8a998e0c3054dd2e23649324309bd7acd7c732b4", "patch": "@@ -73,8 +73,8 @@ static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n \n static void combine_predictions_for_insn (rtx, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n-static void estimate_loops_at_level (struct loop *loop);\n-static void propagate_freq (struct loop *);\n+static void estimate_loops_at_level (struct loop *, bitmap);\n+static void propagate_freq (struct loop *, bitmap);\n static void estimate_bb_frequencies (struct loops *);\n static void predict_paths_leading_to (basic_block, int *, enum br_predictor, enum prediction);\n static bool last_basic_block_p (basic_block);\n@@ -1530,9 +1530,6 @@ typedef struct block_info_def\n   /* To keep queue of basic blocks to process.  */\n   basic_block next;\n \n-  /* True if block needs to be visited in propagate_freq.  */\n-  unsigned int tovisit:1;\n-\n   /* Number of predecessors we need to visit first.  */\n   int npredecessors;\n } *block_info;\n@@ -1555,31 +1552,43 @@ typedef struct edge_info_def\n    Propagate the frequencies for LOOP.  */\n \n static void\n-propagate_freq (struct loop *loop)\n+propagate_freq (struct loop *loop, bitmap tovisit)\n {\n   basic_block head = loop->header;\n   basic_block bb;\n   basic_block last;\n+  int i;\n   edge e;\n   basic_block nextbb;\n+  bitmap_iterator bi;\n \n   /* For each basic block we need to visit count number of his predecessors\n      we need to visit first.  */\n-  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n+  EXECUTE_IF_SET_IN_BITMAP (tovisit, 0, i, bi)\n     {\n-      if (BLOCK_INFO (bb)->tovisit)\n-\t{\n-\t  edge_iterator ei;\n-\t  int count = 0;\n+      edge_iterator ei;\n+      int count = 0;\n+\n+      /* The outermost \"loop\" includes the exit block, which we can not\n+\t look up via BASIC_BLOCK.  Detect this and use EXIT_BLOCK_PTR\n+\t directly.  Do the same for the entry block just to be safe.  */\n+      if (i == ENTRY_BLOCK)\n+\tbb = ENTRY_BLOCK_PTR;\n+      else if (i == EXIT_BLOCK)\n+\tbb = EXIT_BLOCK_PTR;\n+      else\n+\tbb = BASIC_BLOCK (i);\n \n-\t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    if (BLOCK_INFO (e->src)->tovisit && !(e->flags & EDGE_DFS_BACK))\n-\t      count++;\n-\t    else if (BLOCK_INFO (e->src)->tovisit\n-\t\t     && dump_file && !EDGE_INFO (e)->back_edge)\n-\t      fprintf (dump_file,\n-\t\t       \"Irreducible region hit, ignoring edge to %i->%i\\n\",\n-\t\t       e->src->index, bb->index);\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\t{\n+\t  bool visit = bitmap_bit_p (tovisit, e->src->index);\n+\n+\t  if (visit && !(e->flags & EDGE_DFS_BACK))\n+\t    count++;\n+\t  else if (visit && dump_file && !EDGE_INFO (e)->back_edge)\n+\t    fprintf (dump_file,\n+\t\t     \"Irreducible region hit, ignoring edge to %i->%i\\n\",\n+\t\t     e->src->index, bb->index);\n \t  BLOCK_INFO (bb)->npredecessors = count;\n \t}\n     }\n@@ -1602,7 +1611,8 @@ propagate_freq (struct loop *loop)\n \t{\n #ifdef ENABLE_CHECKING\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    if (BLOCK_INFO (e->src)->tovisit && !(e->flags & EDGE_DFS_BACK))\n+\t    if (bitmap_bit_p (tovisit, e->src->index)\n+\t\t&& !(e->flags & EDGE_DFS_BACK))\n \t      abort ();\n #endif\n \n@@ -1648,7 +1658,7 @@ propagate_freq (struct loop *loop)\n \t    }\n \t}\n \n-      BLOCK_INFO (bb)->tovisit = 0;\n+      bitmap_clear_bit (tovisit, bb->index);\n \n       /* Compute back edge frequencies.  */\n       FOR_EACH_EDGE (e, ei, bb->succs)\n@@ -1688,7 +1698,7 @@ propagate_freq (struct loop *loop)\n /* Estimate probabilities of loopback edges in loops at same nest level.  */\n \n static void\n-estimate_loops_at_level (struct loop *first_loop)\n+estimate_loops_at_level (struct loop *first_loop, bitmap tovisit)\n {\n   struct loop *loop;\n \n@@ -1698,7 +1708,7 @@ estimate_loops_at_level (struct loop *first_loop)\n       basic_block *bbs;\n       unsigned i;\n \n-      estimate_loops_at_level (loop->inner);\n+      estimate_loops_at_level (loop->inner, tovisit);\n \n       /* Do not do this for dummy function loop.  */\n       if (EDGE_COUNT (loop->latch->succs) > 0)\n@@ -1710,9 +1720,9 @@ estimate_loops_at_level (struct loop *first_loop)\n \n       bbs = get_loop_body (loop);\n       for (i = 0; i < loop->num_nodes; i++)\n-\tBLOCK_INFO (bbs[i])->tovisit = 1;\n+\tbitmap_set_bit (tovisit, bbs[i]->index);\n       free (bbs);\n-      propagate_freq (loop);\n+      propagate_freq (loop, tovisit);\n     }\n }\n \n@@ -1787,6 +1797,7 @@ estimate_bb_frequencies (struct loops *loops)\n   if (!flag_branch_probabilities || !counts_to_freqs ())\n     {\n       static int real_values_initialized = 0;\n+      bitmap tovisit;\n \n       if (!real_values_initialized)\n         {\n@@ -1805,14 +1816,14 @@ estimate_bb_frequencies (struct loops *loops)\n       EDGE_SUCC (ENTRY_BLOCK_PTR, 0)->probability = REG_BR_PROB_BASE;\n \n       /* Set up block info for each basic block.  */\n+      tovisit = BITMAP_XMALLOC ();\n       alloc_aux_for_blocks (sizeof (struct block_info_def));\n       alloc_aux_for_edges (sizeof (struct edge_info_def));\n       FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n \t{\n \t  edge e;\n \t  edge_iterator ei;\n \n-\t  BLOCK_INFO (bb)->tovisit = 0;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    {\n \t      sreal_init (&EDGE_INFO (e)->back_edge_prob, e->probability, 0);\n@@ -1824,7 +1835,7 @@ estimate_bb_frequencies (struct loops *loops)\n \n       /* First compute probabilities locally for each loop from innermost\n          to outermost to examine probabilities for back edges.  */\n-      estimate_loops_at_level (loops->tree_root);\n+      estimate_loops_at_level (loops->tree_root, tovisit);\n \n       memcpy (&freq_max, &real_zero, sizeof (real_zero));\n       FOR_EACH_BB (bb)\n@@ -1843,6 +1854,7 @@ estimate_bb_frequencies (struct loops *loops)\n \n       free_aux_for_blocks ();\n       free_aux_for_edges ();\n+      BITMAP_XFREE (tovisit);\n     }\n   compute_function_frequency ();\n   if (flag_reorder_functions)"}]}