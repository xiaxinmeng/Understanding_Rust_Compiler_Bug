{"sha": "66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhYTc4NzljODdlNGVjYzlmOTk1MDljNTE3YWZhMGI0NDAxZjBjNA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-01-18T18:14:52Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-01-18T18:14:52Z"}, "message": "re PR target/55433 ([LRA] ICE on excessive reloads)\n\n2013-01-18  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/55433\n\t* lra-constraints.c (curr_insn_transform): Reuse original insn for\n\tsecondary memory move.\n\t(inherit_reload_reg): Use rclass instead of cl for\n\tcheck_secondary_memory_needed_p.\n\n2013-01-18  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/55433\n\t* gcc.target/i386/pr55433.c: New.\n\nFrom-SVN: r195302", "tree": {"sha": "7308d5c9506147515f2396d2adb371c25f8a0b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7308d5c9506147515f2396d2adb371c25f8a0b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f0fee7b4d54d49364a47021c7d2dd9bd4c84c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0fee7b4d54d49364a47021c7d2dd9bd4c84c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0fee7b4d54d49364a47021c7d2dd9bd4c84c73"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "2be4cf37615ae7530cd41d8be61127832b048391", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "patch": "@@ -1,3 +1,11 @@\n+2013-01-18  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/55433\n+\t* lra-constraints.c (curr_insn_transform): Reuse original insn for\n+\tsecondary memory move.\n+\t(inherit_reload_reg): Use rclass instead of cl for\n+\tcheck_secondary_memory_needed_p.\n+\n 2013-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56015"}, {"sha": "f13f37233b464f5517a29d5fad1aa888069f0fb8", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "patch": "@@ -2791,30 +2791,42 @@ curr_insn_transform (void)\n \n   if (use_sec_mem_p)\n     {\n-      rtx new_reg, set, src, dest;\n-      enum machine_mode sec_mode;\n+      rtx new_reg, src, dest, rld, rld_subst;\n+      enum machine_mode sec_mode, rld_mode;\n \n       lra_assert (sec_mem_p);\n-      set = single_set (curr_insn);\n-      lra_assert (set != NULL_RTX && ! side_effects_p (set));\n-      dest = SET_DEST (set);\n-      src = SET_SRC (set);\n+      lra_assert (curr_static_id->operand[0].type == OP_OUT\n+\t\t  && curr_static_id->operand[1].type == OP_IN);\n+      dest = *curr_id->operand_loc[0];\n+      src = *curr_id->operand_loc[1];\n+      rld = (GET_MODE_SIZE (GET_MODE (dest)) <= GET_MODE_SIZE (GET_MODE (src))\n+\t     ? dest : src);\n+      rld_mode = GET_MODE (rld);\n #ifdef SECONDARY_MEMORY_NEEDED_MODE\n-      sec_mode = SECONDARY_MEMORY_NEEDED_MODE (GET_MODE (src));\n+      sec_mode = SECONDARY_MEMORY_NEEDED_MODE (rld_mode);\n #else\n-      sec_mode = GET_MODE (src);\n+      sec_mode = rld_mode;\n #endif\n       new_reg = lra_create_new_reg (sec_mode, NULL_RTX,\n \t\t\t\t    NO_REGS, \"secondary\");\n       /* If the mode is changed, it should be wider.  */\n-      lra_assert (GET_MODE_SIZE (GET_MODE (new_reg))\n-\t\t  >= GET_MODE_SIZE (GET_MODE (src)));\n-      after = emit_spill_move (false, new_reg, dest);\n-      lra_process_new_insns (curr_insn, NULL_RTX, after,\n-\t\t\t     \"Inserting the sec. move\");\n-      before = emit_spill_move (true, new_reg, src);\n-      lra_process_new_insns (curr_insn, before, NULL_RTX, \"Changing on\");\n-      lra_set_insn_deleted (curr_insn);\n+      lra_assert (GET_MODE_SIZE (sec_mode) >= GET_MODE_SIZE (rld_mode));\n+      rld_subst = (sec_mode == rld_mode ? new_reg : gen_lowpart_SUBREG (rld_mode, new_reg));\n+      if (dest == rld)\n+\t{\n+\t  *curr_id->operand_loc[0] = rld_subst;\n+\t  after = emit_spill_move (false, new_reg, dest);\n+\t  lra_process_new_insns (curr_insn, NULL_RTX, after,\n+\t\t\t\t \"Inserting the sec. move\");\n+\t}\n+      else\n+\t{\n+\t  *curr_id->operand_loc[1] = rld_subst;\n+\t  before = emit_spill_move (true, new_reg, src);\n+\t  lra_process_new_insns (curr_insn, before, NULL_RTX,\n+\t\t\t\t \"Inserting the sec. move\");\n+\t}\n+      lra_update_insn_regno_info (curr_insn);\n       return true;\n     }\n #endif\n@@ -3801,7 +3813,7 @@ inherit_reload_reg (bool def_p, int original_regno,\n \n       rclass = cl;\n     }\n-  if (check_secondary_memory_needed_p (cl, next_usage_insns))\n+  if (check_secondary_memory_needed_p (rclass, next_usage_insns))\n     {\n       /* Reject inheritance resulting in secondary memory moves.\n \t Otherwise, there is a danger in LRA cycling.  Also such\n@@ -3820,7 +3832,7 @@ inherit_reload_reg (bool def_p, int original_regno,\n \t\t   \"    Rejecting inheritance for insn %d(%s)<-%d(%s) \"\n \t\t   \"as secondary mem is needed\\n\",\n \t\t   REGNO (dest), reg_class_names[get_reg_class (REGNO (dest))],\n-\t\t   original_regno, reg_class_names[cl]);\n+\t\t   original_regno, reg_class_names[rclass]);\n \t  fprintf (lra_dump_file,\n \t\t   \"    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\n\");\n \t}"}, {"sha": "c2098a4ae7843cc32542062ec2161b5bda874c23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "patch": "@@ -1,3 +1,8 @@\n+2013-01-18  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/55433\n+\t* gcc.target/i386/pr55433.c: New.\n+\n 2013-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/56015"}, {"sha": "b79b16dabdffeedf5533d54044f486b04abf1c5e", "filename": "gcc/testsuite/gcc.target/i386/pr55433.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55433.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66aa7879c87e4ecc9f99509c517afa0b4401f0c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55433.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55433.c?ref=66aa7879c87e4ecc9f99509c517afa0b4401f0c4", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile {target { *-*-darwin* } } } */\n+/* { dg-options \"-O1 -m32\" } */\n+\n+typedef unsigned long long tick_t;\n+extern int foo(void);\n+extern tick_t tick(void);\n+double test(void) {\n+  struct { tick_t ticks; } st;\n+  st.ticks = tick();\n+  foo();\n+  return (double)st.ticks;\n+}"}]}