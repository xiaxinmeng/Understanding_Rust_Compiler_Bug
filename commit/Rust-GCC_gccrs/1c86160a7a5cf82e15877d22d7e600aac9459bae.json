{"sha": "1c86160a7a5cf82e15877d22d7e600aac9459bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4NjE2MGE3YTVjZjgyZTE1ODc3ZDIyZDdlNjAwYWFjOTQ1OWJhZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-06-27T14:32:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-06-27T14:32:00Z"}, "message": "re PR middle-end/49394 (libstdc++-v3/testsuite/30_threads/lock_guard/cons/1.cc FAILs with -fipa-pta -fnon-call-exceptions)\n\n2011-06-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49394\n\t* passes.c (execute_one_pass): Restore current_pass after\n\tapplying IPA transforms.\n\n\t* g++.dg/torture/pr49394.C: New testcase.\n\nFrom-SVN: r175532", "tree": {"sha": "7a3cc824ea25c5386da1ec23b8f25344db8d1416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a3cc824ea25c5386da1ec23b8f25344db8d1416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c86160a7a5cf82e15877d22d7e600aac9459bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c86160a7a5cf82e15877d22d7e600aac9459bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c86160a7a5cf82e15877d22d7e600aac9459bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c86160a7a5cf82e15877d22d7e600aac9459bae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5da49a9d153a00776bba423734630b8d361dc53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da49a9d153a00776bba423734630b8d361dc53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da49a9d153a00776bba423734630b8d361dc53f"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "9c89885d8a3a4d9938c0a5b2faf2e9fb6aab5762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c86160a7a5cf82e15877d22d7e600aac9459bae", "patch": "@@ -1,3 +1,9 @@\n+2011-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49394\n+\t* passes.c (execute_one_pass): Restore current_pass after\n+\tapplying IPA transforms.\n+\n 2011-06-27  Kai Tietz  <ktietz@redhat.com>\n \n \t* tree-ssa-math-opts.c (do_shift_rotate): Zero bits"}, {"sha": "fc9767e39ca453a9d9b7ab360cf46e735f8f80b1", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1c86160a7a5cf82e15877d22d7e600aac9459bae", "patch": "@@ -2030,6 +2030,8 @@ execute_one_pass (struct opt_pass *pass)\n       do_per_function (apply_ipa_transforms, (void *)&applied);\n       if (applied)\n         cgraph_remove_unreachable_nodes (true, dump_file);\n+      /* Restore current_pass.  */\n+      current_pass = pass;\n     }\n \n   if (!quiet_flag && !cfun)"}, {"sha": "7184340d0025c42e3f732e91f2d955ea3e7186a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c86160a7a5cf82e15877d22d7e600aac9459bae", "patch": "@@ -1,3 +1,8 @@\n+2011-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49394\n+\t* g++.dg/torture/pr49394.C: New testcase.\n+\n 2011-06-27  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc.dg/optimize-bswapdi-2.c: New test."}, {"sha": "67d521f455821b80419c99a48a24782e353ec5ca", "filename": "gcc/testsuite/g++.dg/torture/pr49394.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86160a7a5cf82e15877d22d7e600aac9459bae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr49394.C?ref=1c86160a7a5cf82e15877d22d7e600aac9459bae", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run }\n+// { dg-options \"-fipa-pta -fnon-call-exceptions\" }\n+\n+struct Mutex\n+{\n+  bool locked;\n+  ~Mutex ()\n+  {\n+    if (locked)\n+      throw 0;\n+  }\n+  void lock ()\n+  {\n+    locked = true;\n+  }\n+  void unlock ()\n+  {\n+    if (!locked)\n+      throw 0;\n+    locked = false;\n+  }\n+};\n+\n+struct lock_guard\n+{\n+  Mutex *m;\n+  lock_guard (Mutex *m) : m(m)\n+  {\n+  }\n+  ~lock_guard ()\n+  {\n+    m->unlock ();\n+  }\n+};\n+\n+int\n+main ()\n+{\n+  Mutex m;\n+  m.lock ();\n+  try\n+  {\n+    lock_guard l (&m);\n+  }\n+  catch ( ...)\n+  {\n+    __builtin_abort ();\n+  }\n+  return 0;\n+}"}]}