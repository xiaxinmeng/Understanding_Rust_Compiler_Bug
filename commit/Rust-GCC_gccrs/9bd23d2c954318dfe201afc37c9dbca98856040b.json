{"sha": "9bd23d2c954318dfe201afc37c9dbca98856040b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkMjNkMmM5NTQzMThkZmUyMDFhZmMzN2M5ZGJjYTk4ODU2MDQwYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-12T08:45:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-12T08:45:46Z"}, "message": "(__gcc_bcmp): New function, in cond on L__gcc_bcmp.\n\nFrom-SVN: r2110", "tree": {"sha": "7ec1acb9474d43990d7fc100bd45f342f195b2d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ec1acb9474d43990d7fc100bd45f342f195b2d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd23d2c954318dfe201afc37c9dbca98856040b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd23d2c954318dfe201afc37c9dbca98856040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd23d2c954318dfe201afc37c9dbca98856040b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd23d2c954318dfe201afc37c9dbca98856040b/comments", "author": null, "committer": null, "parents": [{"sha": "bb3facc561fb0822545e1a8748be14650f3d1086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3facc561fb0822545e1a8748be14650f3d1086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3facc561fb0822545e1a8748be14650f3d1086"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "70286cc5ec5f379c9857af11411ee13a996fea5e", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd23d2c954318dfe201afc37c9dbca98856040b/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd23d2c954318dfe201afc37c9dbca98856040b/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=9bd23d2c954318dfe201afc37c9dbca98856040b", "patch": "@@ -975,7 +975,30 @@ __fixunssfsi (SFtype a)\n #undef unsigned\n #undef float\n #undef double\n+\f\n+#ifdef L__gcc_bcmp\n+\n+/* Like bcmp except the sign is meaningful.\n+   Reult is negative if S1 is less than S2,\n+   positive if S1 is greater, 0 if S1 and S2 are equal.  */\n \n+int\n+__gcc_bcmp (s1, s2, size)\n+     char *s1, *s2;\n+     size_t size;\n+{\n+  while (size > 0)\n+    {\n+      char c1 = *s1++, c2 = *s2++;\n+      if (c1 != c2)\n+\treturn c1 - c2;\n+      size--;\n+    }\n+  return 0;\n+}\n+\n+#endif\n+\f\f\n #ifdef L_varargs\n #ifdef __i860__\n #if defined(__svr4__) || defined(__alliant__)"}]}