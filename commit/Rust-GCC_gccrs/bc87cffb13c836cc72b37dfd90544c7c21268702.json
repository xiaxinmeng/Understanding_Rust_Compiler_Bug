{"sha": "bc87cffb13c836cc72b37dfd90544c7c21268702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4N2NmZmIxM2M4MzZjYzcyYjM3ZGZkOTA1NDRjN2MyMTI2ODcwMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@st.com", "date": "2019-09-10T07:52:02Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-09-10T07:52:02Z"}, "message": "[ARM/FDPIC v6 09/24] [ARM] FDPIC: Add support for taking address of nested function\n\nIn FDPIC mode, the trampoline generated to support pointers to nested\nfunctions looks like:\n\n\t   .word\ttrampoline address\n\t   .word\ttrampoline GOT address\n\t   ldr \t\tr12, [pc, #8]\n\t   ldr \t\tr9, [pc, #8]\n\t   ldr\t\tpc, [pc, #8]\n\t   .word\tstatic chain value\n\t   .word\tGOT address\n\t   .word\tfunction's address\n\nbecause in FDPIC function pointers are actually pointers to function\ndescriptors, we have to actually generate a function descriptor for\nthe trampoline.\n\n2019--09-10  Christophe Lyon  <christophe.lyon@st.com>\n\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\n\tgcc/\n\t* config/arm/arm.c (arm_asm_trampoline_template): Add FDPIC\n\tsupport.\n\t(arm_trampoline_init): Likewise.\n\t(arm_trampoline_adjust_address): Likewise.\n\t* config/arm/arm.h (TRAMPOLINE_SIZE): Likewise.\n\n\nCo-Authored-By: Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\nFrom-SVN: r275571", "tree": {"sha": "9cadc55d9ee5879a42a2e6649c7a854f31eb2ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cadc55d9ee5879a42a2e6649c7a854f31eb2ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc87cffb13c836cc72b37dfd90544c7c21268702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc87cffb13c836cc72b37dfd90544c7c21268702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc87cffb13c836cc72b37dfd90544c7c21268702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc87cffb13c836cc72b37dfd90544c7c21268702/comments", "author": null, "committer": null, "parents": [{"sha": "96ef8d00f70f076933eea68124043e9ba675412d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ef8d00f70f076933eea68124043e9ba675412d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ef8d00f70f076933eea68124043e9ba675412d"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "1bfa16d88111f5e841d69ea7cdf41513814e52f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc87cffb13c836cc72b37dfd90544c7c21268702", "patch": "@@ -1,3 +1,13 @@\n+2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n+\n+\tgcc/\n+\t* config/arm/arm.c (arm_asm_trampoline_template): Add FDPIC\n+\tsupport.\n+\t(arm_trampoline_init): Likewise.\n+\t(arm_trampoline_adjust_address): Likewise.\n+\t* config/arm/arm.h (TRAMPOLINE_SIZE): Likewise.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n "}, {"sha": "d01fae312311565979e39995151c50af6199d9ee", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 76, "deletions": 8, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bc87cffb13c836cc72b37dfd90544c7c21268702", "patch": "@@ -3939,14 +3939,52 @@ arm_warn_func_return (tree decl)\n \t   ldr\t\tpc, [pc]\n \t   .word\tstatic chain value\n \t   .word\tfunction's address\n-   XXX FIXME: When the trampoline returns, r8 will be clobbered.  */\n+   XXX FIXME: When the trampoline returns, r8 will be clobbered.\n+\n+   In FDPIC mode, the trampoline looks like:\n+\t   .word\ttrampoline address\n+\t   .word\ttrampoline GOT address\n+\t   ldr \t\tr12, [pc, #8] ; #4 for Arm mode\n+\t   ldr \t\tr9,  [pc, #8] ; #4 for Arm mode\n+\t   ldr\t\tpc,  [pc, #8] ; #4 for Arm mode\n+\t   .word\tstatic chain value\n+\t   .word\tGOT address\n+\t   .word\tfunction's address\n+*/\n \n static void\n arm_asm_trampoline_template (FILE *f)\n {\n   fprintf (f, \"\\t.syntax unified\\n\");\n \n-  if (TARGET_ARM)\n+  if (TARGET_FDPIC)\n+    {\n+      /* The first two words are a function descriptor pointing to the\n+\t trampoline code just below.  */\n+      if (TARGET_ARM)\n+\tfprintf (f, \"\\t.arm\\n\");\n+      else if (TARGET_THUMB2)\n+\tfprintf (f, \"\\t.thumb\\n\");\n+      else\n+\t/* Only ARM and Thumb-2 are supported.  */\n+\tgcc_unreachable ();\n+\n+      assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+      assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+      /* Trampoline code which sets the static chain register but also\n+\t PIC register before jumping into real code.  */\n+      asm_fprintf (f, \"\\tldr\\t%r, [%r, #%d]\\n\",\n+\t\t   STATIC_CHAIN_REGNUM, PC_REGNUM,\n+\t\t   TARGET_THUMB2 ? 8 : 4);\n+      asm_fprintf (f, \"\\tldr\\t%r, [%r, #%d]\\n\",\n+\t\t   PIC_OFFSET_TABLE_REGNUM, PC_REGNUM,\n+\t\t   TARGET_THUMB2 ? 8 : 4);\n+      asm_fprintf (f, \"\\tldr\\t%r, [%r, #%d]\\n\",\n+\t\t   PC_REGNUM, PC_REGNUM,\n+\t\t   TARGET_THUMB2 ? 8 : 4);\n+      assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+    }\n+  else if (TARGET_ARM)\n     {\n       fprintf (f, \"\\t.arm\\n\");\n       asm_fprintf (f, \"\\tldr\\t%r, [%r, #0]\\n\", STATIC_CHAIN_REGNUM, PC_REGNUM);\n@@ -3987,12 +4025,40 @@ arm_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   emit_block_move (m_tramp, assemble_trampoline_template (),\n \t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n \n-  mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 8 : 12);\n-  emit_move_insn (mem, chain_value);\n+  if (TARGET_FDPIC)\n+    {\n+      rtx funcdesc = XEXP (DECL_RTL (fndecl), 0);\n+      rtx fnaddr = gen_rtx_MEM (Pmode, funcdesc);\n+      rtx gotaddr = gen_rtx_MEM (Pmode, plus_constant (Pmode, funcdesc, 4));\n+      /* The function start address is at offset 8, but in Thumb mode\n+\t we want bit 0 set to 1 to indicate Thumb-ness, hence 9\n+\t below.  */\n+      rtx trampoline_code_start\n+\t= plus_constant (Pmode, XEXP (m_tramp, 0), TARGET_THUMB2 ? 9 : 8);\n+\n+      /* Write initial funcdesc which points to the trampoline.  */\n+      mem = adjust_address (m_tramp, SImode, 0);\n+      emit_move_insn (mem, trampoline_code_start);\n+      mem = adjust_address (m_tramp, SImode, 4);\n+      emit_move_insn (mem, gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM));\n+      /* Setup static chain.  */\n+      mem = adjust_address (m_tramp, SImode, 20);\n+      emit_move_insn (mem, chain_value);\n+      /* GOT + real function entry point.  */\n+      mem = adjust_address (m_tramp, SImode, 24);\n+      emit_move_insn (mem, gotaddr);\n+      mem = adjust_address (m_tramp, SImode, 28);\n+      emit_move_insn (mem, fnaddr);\n+    }\n+  else\n+    {\n+      mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 8 : 12);\n+      emit_move_insn (mem, chain_value);\n \n-  mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 12 : 16);\n-  fnaddr = XEXP (DECL_RTL (fndecl), 0);\n-  emit_move_insn (mem, fnaddr);\n+      mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 12 : 16);\n+      fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+      emit_move_insn (mem, fnaddr);\n+    }\n \n   a_tramp = XEXP (m_tramp, 0);\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n@@ -4006,7 +4072,9 @@ arm_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n static rtx\n arm_trampoline_adjust_address (rtx addr)\n {\n-  if (TARGET_THUMB)\n+  /* For FDPIC don't fix trampoline address since it's a function\n+     descriptor and not a function address.  */\n+  if (TARGET_THUMB && !TARGET_FDPIC)\n     addr = expand_simple_binop (Pmode, IOR, addr, const1_rtx,\n \t\t\t\tNULL, 0, OPTAB_LIB_WIDEN);\n   return addr;"}, {"sha": "8b67c9c3657b312be223ab60c01969958baa9ed3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc87cffb13c836cc72b37dfd90544c7c21268702/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bc87cffb13c836cc72b37dfd90544c7c21268702", "patch": "@@ -1595,7 +1595,7 @@ typedef struct\n #define INIT_EXPANDERS  arm_init_expanders ()\n \n /* Length in units of the trampoline for entering a nested function.  */\n-#define TRAMPOLINE_SIZE  (TARGET_32BIT ? 16 : 20)\n+#define TRAMPOLINE_SIZE  (TARGET_FDPIC ? 32 : (TARGET_32BIT ? 16 : 20))\n \n /* Alignment required for a trampoline in bits.  */\n #define TRAMPOLINE_ALIGNMENT  32"}]}