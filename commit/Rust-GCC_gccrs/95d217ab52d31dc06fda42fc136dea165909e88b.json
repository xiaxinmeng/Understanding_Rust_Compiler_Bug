{"sha": "95d217ab52d31dc06fda42fc136dea165909e88b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkMjE3YWI1MmQzMWRjMDZmZGE0MmZjMTM2ZGVhMTY1OTA5ZTg4Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-01T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-01T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "c23a685bf7050bd3f5e5e64796e0b9aa880f1a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23a685bf7050bd3f5e5e64796e0b9aa880f1a3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95d217ab52d31dc06fda42fc136dea165909e88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d217ab52d31dc06fda42fc136dea165909e88b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d217ab52d31dc06fda42fc136dea165909e88b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d217ab52d31dc06fda42fc136dea165909e88b/comments", "author": null, "committer": null, "parents": [{"sha": "e4bb1bd60a9fd1bed36092a990aa5fed5d45bfa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bb1bd60a9fd1bed36092a990aa5fed5d45bfa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bb1bd60a9fd1bed36092a990aa5fed5d45bfa6"}], "stats": {"total": 305, "additions": 304, "deletions": 1}, "files": [{"sha": "f2ea9823f80ff818be36bfc6e6972e509211eb59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,157 @@\n+2021-03-31  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/98265\n+\t* cif-code.def (USES_COMDAT_LOCAL): Make CIF_FINAL_NORMAL.\n+\n+2021-03-31  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\tPR target/99133\n+\t* config/rs6000/altivec.md (xxspltiw_v4si, xxspltiw_v4sf_inst,\n+\txxspltidp_v2df_inst, xxsplti32dx_v4si_inst, xxsplti32dx_v4sf_inst,\n+\txxblend_<mode>, xxpermx_inst, xxeval): Mark prefixed.\n+\t* config/rs6000/mma.md (mma_<vvi4i4i8>, mma_<avvi4i4i8>,\n+\tmma_<vvi4i4i2>, mma_<avvi4i4i2>, mma_<vvi4i4>, mma_<avvi4i4>,\n+\tmma_<pvi4i2>, mma_<apvi4i2>, mma_<vvi4i4i4>, mma_<avvi4i4i4>):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_final_prescan_insn): Adjust test.\n+\t* config/rs6000/rs6000.md (define_attr \"maybe_prefixed\"): New.\n+\t(define_attr \"prefixed\"): Update initializer.\n+\n+2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/99490\n+\t* dwarf2out.c (debug_ranges_dwo_section): New variable.\n+\t(DW_RANGES_IDX_SKELETON): Define.\n+\t(struct dw_ranges): Add begin_entry and end_entry members.\n+\t(DEBUG_DWO_RNGLISTS_SECTION): Define.\n+\t(add_ranges_num): Adjust r initializer for addition of *_entry\n+\tmembers.\n+\t(add_ranges_by_labels): For -gsplit-dwarf and force_direct,\n+\tset idx to DW_RANGES_IDX_SKELETON.\n+\t(use_distinct_base_address_for_range): New function.\n+\t(index_rnglists): Don't set r->idx if it is equal to\n+\tDW_RANGES_IDX_SKELETON.  Initialize r->begin_entry and\n+\tr->end_entry for -gsplit-dwarf if those will be needed by\n+\toutput_rnglists.\n+\t(output_rnglists): Add DWO argument.  If true, switch to\n+\tdebug_ranges_dwo_section rather than debug_ranges_section.\n+\tAdjust l1/l2 label indexes.  Only output the offset table when\n+\tdwo is true and don't include in there the skeleton range\n+\tentry if present.  For -gsplit-dwarf, skip ranges that belong\n+\tto the other rnglists section.  Change return type from void\n+\tto bool and return true if there are any range entries for\n+\tthe other section.  For dwarf_split_debug_info use\n+\tDW_RLE_startx_endx, DW_RLE_startx_length and DW_RLE_base_addressx\n+\tentries instead of DW_RLE_start_end, DW_RLE_start_length and\n+\tDW_RLE_base_address.  Use use_distinct_base_address_for_range.\n+\t(init_sections_and_labels): Initialize debug_ranges_dwo_section\n+\tif -gsplit-dwarf and DWARF >= 5.  Adjust ranges_section_label\n+\tand range_base_label indexes.\n+\t(dwarf2out_finish): Call index_rnglists earlier before finalizing\n+\t.debug_addr.  Never emit DW_AT_rnglists_base attribute.  For\n+\t-gsplit-dwarf and DWARF >= 5 call output_rnglists up to twice\n+\twith different dwo arguments.\n+\t(dwarf2out_c_finalize): Clear debug_ranges_dwo_section.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98268\n+\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Call\n+\trecompute_tree_invariant_for_addr_expr after successfully\n+\tfolding a TARGET_MEM_REF that occurs inside an ADDR_EXPR.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/99726\n+\t* tree-data-ref.c (create_intersect_range_checks_index): Bail\n+\tout if there is more than one access function SCEV for the loop\n+\tbeing versioned.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/97141\n+\tPR rtl-optimization/98726\n+\t* emit-rtl.c (valid_for_const_vector_p): Return true for\n+\tCONST_POLY_INT_P.\n+\t* rtx-vector-builder.h (rtx_vector_builder::step): Return a\n+\tpoly_wide_int instead of a wide_int.\n+\t(rtx_vector_builder::apply_set): Take a poly_wide_int instead\n+\tof a wide_int.\n+\t* rtx-vector-builder.c (rtx_vector_builder::apply_set): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_legitimate_constant_p): Return\n+\tfalse for CONST_VECTORs that cannot be forced to memory.\n+\t* config/aarch64/aarch64-simd.md (mov<mode>): If a CONST_VECTOR\n+\tis too complex to force to memory, build it up from individual\n+\telements instead.\n+\n+2021-03-31  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/99447\n+\t* cgraph.c (cgraph_node::release_body): Fix overactive check.\n+\n+2021-03-31  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/99786\n+\t* config/arm/vec-common.md (mul<mode>3): Disable on iwMMXT, expect\n+\tfor V4HI and V2SI.\n+\n+2021-03-31  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-expand.c (expand_set_or_cpymem_via_rep):\n+\tFor TARGET_PREFER_KNOWN_REP_MOVSB_STOSB, don't convert QImode\n+\tto SImode.\n+\t(decide_alg): For TARGET_PREFER_KNOWN_REP_MOVSB_STOSB, use\n+\t\"rep movsb/stosb\" only for known sizes.\n+\t* config/i386/i386-options.c (processor_cost_table): Use Ice\n+\tLake cost for Cannon Lake, Ice Lake, Tiger Lake, Sapphire\n+\tRapids and Alder Lake.\n+\t* config/i386/i386.h (TARGET_PREFER_KNOWN_REP_MOVSB_STOSB): New.\n+\t* config/i386/x86-tune-costs.h (icelake_memcpy): New.\n+\t(icelake_memset): Likewise.\n+\t(icelake_cost): Likewise.\n+\t* config/i386/x86-tune.def (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB):\n+\tNew.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/98119\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_vectorize_preferred_vector_alignment): Query the size\n+\tof the provided SVE vector; do not assume that all SVE vectors\n+\thave the same size.\n+\n+2021-03-31  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/99447\n+\t* cgraph.c (cgraph_node::release_body): Remove all callers and\n+\treferences.\n+\t* cgraphclones.c (cgraph_node::materialize_clone): Do not do it here.\n+\t* cgraphunit.c (cgraph_node::expand): And here.\n+\n+2021-03-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-modref.c (analyze_ssa_name_flags): Fix coding style\n+\tand one negated condition.\n+\n+2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/99813\n+\t* config/aarch64/aarch64.md (*add<mode>3_poly_1): Swap Uai and Uav\n+\tconstraints on operands[2] and similarly 0 and rk constraints\n+\ton operands[1] corresponding to that.\n+\n+2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/98860\n+\t* configure.ac (HAVE_LD_BROKEN_PE_DWARF5): New AC_DEFINE if PECOFF\n+\tlinker doesn't support DWARF sections new in DWARF5.\n+\t* config/i386/i386-options.c (ix86_option_override_internal): Default\n+\tto dwarf_version 4 if HAVE_LD_BROKEN_PE_DWARF5 for TARGET_PECOFF\n+\ttargets.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2021-03-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/99820"}, {"sha": "6ff3a5bed7d298f9a3bd2cc17775eb485c235745", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1 +1 @@\n-20210331\n+20210401"}, {"sha": "514fc506f3a126a6cf9cb5440168e07b985a10fd", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,19 @@\n+2021-03-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99771\n+\t* analyzer.cc (maybe_reconstruct_from_def_stmt): New.\n+\t(fixup_tree_for_diagnostic_1): New.\n+\t(fixup_tree_for_diagnostic): New.\n+\t* analyzer.h (fixup_tree_for_diagnostic): New decl.\n+\t* checker-path.cc (call_event::get_desc): Call\n+\tfixup_tree_for_diagnostic and use it for the call_with_state call.\n+\t(warning_event::get_desc): Likewise for the final_event and\n+\tmake_label_text calls.\n+\t* engine.cc (impl_region_model_context::on_state_leak): Likewise\n+\tfor the on_leak and add_diagnostic calls.\n+\t* region-model.cc (region_model::get_representative_tree):\n+\tLikewise for the result.\n+\n 2021-03-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region.h (region::dump_to_pp): Remove old decl."}, {"sha": "102004774cefe50d3d8e8853d852300be286b5c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,21 @@\n+2021-03-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99445\n+\t* tree.c (strip_typedefs): Handle TYPE_PACK_EXPANSION.\n+\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* mangle.c (write_expression): Adjust the mangling of\n+\t__alignof__.\n+\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99815\n+\t* pt.c (placeholder_type_constraint_dependent_p): Expand\n+\targument packs to separate the first non-pack argument\n+\tfrom the rest.\n+\n 2021-03-30  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99283"}, {"sha": "3523bf02c89b2a11d1a2821f737f4ed5bd7d1f7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,96 @@\n+2021-03-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99771\n+\t* gcc.dg/analyzer/data-model-10.c: Update expected output.\n+\t* gcc.dg/analyzer/malloc-ipa-13.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-ipa-13a.c: New test.\n+\t* gcc.dg/analyzer/pr99771-1.c: New test.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/98268\n+\t* gcc.target/aarch64/sve/pr98268-1.c: New test.\n+\t* gcc.target/aarch64/sve/pr98268-2.c: Likewise.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/99726\n+\t* gcc.target/i386/pr99726.c: New test.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/97141\n+\tPR rtl-optimization/98726\n+\t* gcc.c-torture/compile/pr97141.c: New test.\n+\t* gcc.c-torture/compile/pr98726.c: Likewise.\n+\t* gcc.target/aarch64/sve/pr97141.c: Likewise.\n+\t* gcc.target/aarch64/sve/pr98726.c: Likewise.\n+\n+2021-03-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/65182\n+\t* gcc.dg/uninit-pr65182.c: New test.\n+\n+2021-03-31  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99445\n+\t* g++.dg/cpp0x/alias-decl-variadic1.C: New test.\n+\n+2021-03-31  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/96974\n+\t* g++.target/aarch64/sve/pr96974.C: Expect SLP diagnostic only\n+\tunder lp64.\n+\n+2021-03-31  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/99786\n+\t* gcc.target/arm/pr99786.c: New test.\n+\n+2021-03-31  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/memcpy-strategy-5.c: New test.\n+\t* gcc.target/i386/memcpy-strategy-6.c: Likewise.\n+\t* gcc.target/i386/memcpy-strategy-7.c: Likewise.\n+\t* gcc.target/i386/memcpy-strategy-8.c: Likewise.\n+\t* gcc.target/i386/memset-strategy-3.c: Likewise.\n+\t* gcc.target/i386/memset-strategy-4.c: Likewise.\n+\t* gcc.target/i386/memset-strategy-5.c: Likewise.\n+\t* gcc.target/i386/memset-strategy-6.c: Likewise.\n+\n+2021-03-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/98119\n+\t* gcc.target/aarch64/sve/pr98119.c: New test.\n+\n+2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/99813\n+\t* g++.target/aarch64/sve/pr99813.C: New test.\n+\n+2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/97680\n+\t* c-c++-common/zero-scratch-regs-6.c: Skip on ia64.\n+\t* c-c++-common/zero-scratch-regs-7.c: Likewise.\n+\t* c-c++-common/zero-scratch-regs-8.c: Change from dg-skip-if of\n+\tselected unsupported triplets to all targets but selected triplets\n+\tof supported targets.\n+\t* c-c++-common/zero-scratch-regs-9.c: Likewise.\n+\t* c-c++-common/zero-scratch-regs-10.c: Likewise.\n+\t* c-c++-common/zero-scratch-regs-11.c: Likewise.\n+\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* g++.dg/cpp0x/alignof7.C: Adjust expected mangling.\n+\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99815\n+\t* g++.dg/cpp2a/concepts-placeholder5.C: New test.\n+\n 2021-03-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/symbolic-1.c: Fix typo."}, {"sha": "db80ae17ced311c658296090d480ce239714a921", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,9 @@\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_VENDOR_EXPR.\n+\n 2021-01-16  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_TASK_FLAG_DETACH): New."}, {"sha": "92fb71baf6dc460dc49f784c96fabf2b2923ed80", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,14 @@\n+2021-03-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/88115\n+\t* cp-demangle.c (d_dump, d_make_comp, d_expression_1)\n+\t(d_count_templates_scopes): Handle DEMANGLE_COMPONENT_VENDOR_EXPR.\n+\t(d_print_comp_inner): Likewise.\n+\t<case DEMANGLE_COMPONENT_EXTENDED_OPERATOR>: Revert r11-4926\n+\tchange.\n+\t<case DEMANGLE_COMPONENT_UNARY>: Likewise.\n+\t* testsuite/demangle-expected: Adjust __alignof__ tests.\n+\n 2021-03-16  Nick Clifton  <nickc@redhat.com>\n \n \t* sha1.c (sha1_process_bytes): Use memmove in place of memcpy."}, {"sha": "8e505f896556e081ca846bed7778fab6b985b57a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95d217ab52d31dc06fda42fc136dea165909e88b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95d217ab52d31dc06fda42fc136dea165909e88b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=95d217ab52d31dc06fda42fc136dea165909e88b", "patch": "@@ -1,3 +1,8 @@\n+2021-03-31  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/30_threads/future/members/poll.cc: Use faster\n+\tafter-ready call in the calibration loop.\n+\n 2021-03-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Adjust link for PSTL."}]}