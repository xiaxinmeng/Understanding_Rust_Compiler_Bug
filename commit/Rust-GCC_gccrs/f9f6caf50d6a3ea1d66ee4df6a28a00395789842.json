{"sha": "f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmNmNhZjUwZDZhM2VhMWQ2NmVlNGRmNmEyOGEwMDM5NTc4OTg0Mg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-06-23T15:27:00Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-06-23T15:27:00Z"}, "message": "avr.c (avr_function_value): Add new 'outgoing' argument.\n\n\t* config/avr/avr.c (avr_function_value): Add new 'outgoing' argument.\n\t(TARGET_FUNCTION_VALUE): New define.\n\t* config/avr/avr-protos.h (avr_function_value): Remove declaration.\n\t* config/avr/avr.h (FUNCTION_VALUE): Remove.\n\nFrom-SVN: r137042", "tree": {"sha": "e24f59145cd61928f9db628e3a6f1a7f6ccfb257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24f59145cd61928f9db628e3a6f1a7f6ccfb257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/comments", "author": null, "committer": null, "parents": [{"sha": "f2a55e41c8b6816c9edb573d08b3bc1c7403f1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a55e41c8b6816c9edb573d08b3bc1c7403f1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a55e41c8b6816c9edb573d08b3bc1c7403f1b6"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "c3b92392843c07f8c22c47e087b3c3e572ad52c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "patch": "@@ -1,3 +1,10 @@\n+2008-06-23  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.c (avr_function_value): Add new 'outgoing' argument.\n+\t(TARGET_FUNCTION_VALUE): New define.\n+\t* config/avr/avr-protos.h (avr_function_value): Remove declaration.\n+\t* config/avr/avr.h (FUNCTION_VALUE): Remove.\n+\n 2008-06-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (fmodxf3): Change sequence of move instructions."}, {"sha": "b8493101fb9cd2f965eda19c9b69d0f61da86df4", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "patch": "@@ -44,7 +44,6 @@ extern void asm_output_external (FILE *file, tree decl, char *name);\n extern int avr_progmem_p (tree decl, tree attributes);\n \n #ifdef RTX_CODE /* inside TREE_CODE */\n-extern rtx avr_function_value (const_tree type, const_tree func);\n extern void init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t\t\t\t  rtx libname, tree fndecl);\n extern rtx function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,"}, {"sha": "0176a2aac8ff13c11bdab1f993d8cd8579068863", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "patch": "@@ -71,6 +71,7 @@ static void avr_file_start (void);\n static void avr_file_end (void);\n static void avr_asm_function_end_prologue (FILE *);\n static void avr_asm_function_begin_epilogue (FILE *);\n+static rtx avr_function_value (const_tree, const_tree, bool);\n static void avr_insert_attributes (tree, tree *);\n static void avr_asm_init_sections (void);\n static unsigned int avr_section_type_flags (tree, const char *, int);\n@@ -308,6 +309,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ASM_FUNCTION_END_PROLOGUE avr_asm_function_end_prologue\n #undef TARGET_ASM_FUNCTION_BEGIN_EPILOGUE\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE avr_asm_function_begin_epilogue\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE avr_function_value\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_FUNCTION_RODATA_SECTION\n@@ -5703,7 +5706,9 @@ avr_libcall_value (enum machine_mode mode)\n    function returns a value of data type VALTYPE.  */\n \n rtx\n-avr_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED)\n+avr_function_value (const_tree type, \n+\t\t    const_tree func ATTRIBUTE_UNUSED, \n+\t\t    bool outgoing ATTRIBUTE_UNUSED)\n {\n   unsigned int offs;\n   "}, {"sha": "2b72112822c729b82a8ed9cd6156d0ceb35faab9", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9f6caf50d6a3ea1d66ee4df6a28a00395789842/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=f9f6caf50d6a3ea1d66ee4df6a28a00395789842", "patch": "@@ -385,8 +385,6 @@ extern int avr_reg_order[];\n \n #define RET_REGISTER avr_ret_register ()\n \n-#define FUNCTION_VALUE(VALTYPE, FUNC) avr_function_value (VALTYPE, FUNC)\n-\n #define LIBCALL_VALUE(MODE)  avr_libcall_value (MODE)\n \n #define FUNCTION_VALUE_REGNO_P(N) ((int) (N) == RET_REGISTER)"}]}