{"sha": "abdf3eea96d2ffcac162ff32b08d973ce29a1aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkZjNlZWE5NmQyZmZjYWMxNjJmZjMyYjA4ZDk3M2NlMjlhMWFmZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-06-18T20:53:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-06-18T20:53:45Z"}, "message": "(truncdisi2): Change from define_insn to define_expand.\n\n(truncdihi2, truncdiqi2, extendsidi2): Likewise.\n(extendsidi2_internal): New pattern.\n\nFrom-SVN: r7520", "tree": {"sha": "b0d963db4669f5e9d949dfe9bc23f6a6cc0c3008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d963db4669f5e9d949dfe9bc23f6a6cc0c3008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abdf3eea96d2ffcac162ff32b08d973ce29a1aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdf3eea96d2ffcac162ff32b08d973ce29a1aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdf3eea96d2ffcac162ff32b08d973ce29a1aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdf3eea96d2ffcac162ff32b08d973ce29a1aff/comments", "author": null, "committer": null, "parents": [{"sha": "9c066566b07986915e603c5117965a6f27983f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c066566b07986915e603c5117965a6f27983f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c066566b07986915e603c5117965a6f27983f08"}], "stats": {"total": 106, "additions": 66, "deletions": 40}, "files": [{"sha": "a89d1149043dafa3688d78e2d80c5e965bb4b68e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdf3eea96d2ffcac162ff32b08d973ce29a1aff/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdf3eea96d2ffcac162ff32b08d973ce29a1aff/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=abdf3eea96d2ffcac162ff32b08d973ce29a1aff", "patch": "@@ -1833,34 +1833,49 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"1\")])\n \n-;; ??? This should be a define expand.\n-;; See the zero_extendsidi2 pattern.\n-(define_insn \"truncdisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+\n+;; The optimizer doesn't deal well with truncate operators, so we completely\n+;; avoid them by using define expands here.\n+\n+(define_expand \"truncdisi2\"\n+  [(set (match_operand:DI 2 \"register_operand\" \"=d\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t     (const_int 32)))\n+   (set (match_operand:DI 3 \"register_operand\" \"=d\")\n+\t(ashiftrt:DI (match_dup 2)\n+\t\t   (const_int 32)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(subreg:SI (match_dup 3) 0))]\n   \"TARGET_64BIT\"\n-  \"dsll\\\\t%0,%1,32\\;dsra\\\\t%0,%0,32\"\n-  [(set_attr \"type\"\t\"darith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"2\")])\n+  \"\n+{\n+  operands[2] = gen_reg_rtx (DImode);\n+  operands[3] = gen_reg_rtx (DImode);\n+}\")\n \n-(define_insn \"truncdihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(truncate:HI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+(define_expand \"truncdihi2\"\n+  [(set (match_operand:DI 2 \"register_operand\" \"=d\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t(const_int 65535)))\n+   (set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(subreg:HI (match_dup 2) 0))]\n   \"TARGET_64BIT\"\n-  \"andi\\\\t%0,%1,0xffff\"\n-  [(set_attr \"type\"\t\"darith\")\n-   (set_attr \"mode\"\t\"HI\")\n-   (set_attr \"length\"\t\"1\")])\n+  \"\n+{\n+  operands[2] = gen_reg_rtx (DImode);\n+}\")\n \n-(define_insn \"truncdiqi2\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-\t(truncate:QI (match_operand:DI 1 \"register_operand\" \"d\")))]\n+(define_expand \"truncdiqi2\"\n+  [(set (match_operand:DI 2 \"register_operand\" \"=d\")\n+\t(and:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t(const_int 255)))\n+   (set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(subreg:QI (match_dup 2) 0))]\n   \"TARGET_64BIT\"\n-  \"andi\\\\t%0,%1,0x00ff\"\n-  [(set_attr \"type\"\t\"darith\")\n-   (set_attr \"mode\"\t\"QI\")\n-   (set_attr \"length\"\t\"1\")])\n+  \"\n+{\n+  operands[2] = gen_reg_rtx (DImode);\n+}\")\n \f\n ;;\n ;;  ....................\n@@ -1870,8 +1885,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;  ....................\n \n ;; Extension insns.\n-;; Those for integer source operand\n-;; are ordered widest source type first.\n+;; Those for integer source operand are ordered widest source type first.\n \n (define_expand \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1903,7 +1917,6 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"1,2\")])\n \n-\n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n@@ -1988,24 +2001,37 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;  ....................\n \n ;; Extension insns.\n-;; Those for integer source operand\n-;; are ordered widest source type first.\n-\n-;; ??? This should be a define_expand.\n+;; Those for integer source operand are ordered widest source type first.\n \n-(define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n+(define_expand \"extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"*\n+  \"\n {\n-  if (which_alternative == 0)\n-    return \\\"dsll\\\\t%0,%1,32\\;dsra\\\\t%0,%0,32\\\";\n-  return mips_move_1word (operands, insn, FALSE);\n-}\"\n-  [(set_attr \"type\"\t\"arith,load,load\")\n+  if (optimize && GET_CODE (operands[1]) == MEM)\n+    operands[1] = force_not_mem (operands[1]);\n+\n+  if (GET_CODE (operands[1]) != MEM)\n+    {\n+      rtx op1   = gen_lowpart (DImode, operands[1]);\n+      rtx temp  = gen_reg_rtx (DImode);\n+      rtx shift = gen_rtx (CONST_INT, VOIDmode, 32);\n+\n+      emit_insn (gen_ashldi3 (temp, op1, shift));\n+      emit_insn (gen_ashrdi3 (operands[0], temp, shift));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"extendsidi2_internal\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+\t(sign_extend:DI (match_operand:SI 1 \"memory_operand\" \"R,m\")))]\n+  \"TARGET_64BIT\"\n+  \"* return mips_move_1word (operands, insn, FALSE);\"\n+  [(set_attr \"type\"\t\"load\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"2,1,2\")])\n+   (set_attr \"length\"\t\"1,2\")])\n \n ;; These patterns originally accepted general_operands, however, slightly\n ;; better code is generated by only accepting register_operands, and then"}]}