{"sha": "3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwNGMxYjRiZDBkZjIyMTBjNDYxMjAxNzhmNmI4NGJjMjQyY2EyYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-24T18:52:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-24T18:52:31Z"}, "message": "profiler_trace.h (__trace_base<>:: __trace_base()): Move inline, simplify; formatting tweaks.\n\n2010-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/profile/impl/profiler_trace.h (__trace_base<>::\n\t__trace_base()): Move inline, simplify; formatting tweaks.\n\t* include/profile/impl/profiler_hash_func.h: Formatting tweaks.\n\nFrom-SVN: r161333", "tree": {"sha": "33039b34e3ff8251ddba944593379157089bbaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33039b34e3ff8251ddba944593379157089bbaae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f04c1b4bd0df2210c46120178f6b84bc242ca2a/comments", "author": null, "committer": null, "parents": [{"sha": "b1c6d0185ae2978fee81aa96c256d3d6358a7adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c6d0185ae2978fee81aa96c256d3d6358a7adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c6d0185ae2978fee81aa96c256d3d6358a7adb"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "3e01760afbaa47fabf3524b09dadfddcf085090a", "filename": "libstdc++-v3/include/profile/impl/profiler_hash_func.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04c1b4bd0df2210c46120178f6b84bc242ca2a/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04c1b4bd0df2210c46120178f6b84bc242ca2a/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h?ref=3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "patch": "@@ -50,15 +50,15 @@ namespace __gnu_profile\n   public:\n     __hashfunc_info()\n     : _M_longest_chain(0), _M_accesses(0), _M_hops(0) { }\n-  \n+\n     __hashfunc_info(const __hashfunc_info& __o)\n-      : __object_info_base(__o), _M_longest_chain(__o._M_longest_chain),\n-\t_M_accesses(__o._M_accesses), _M_hops(__o._M_hops) { }\n-  \n+    : __object_info_base(__o), _M_longest_chain(__o._M_longest_chain),\n+      _M_accesses(__o._M_accesses), _M_hops(__o._M_hops) { }\n+\n     __hashfunc_info(__stack_t __stack)\n-    : __object_info_base(__stack),\n-      _M_longest_chain(0), _M_accesses(0), _M_hops(0) { }\n- \n+    : __object_info_base(__stack), _M_longest_chain(0),\n+      _M_accesses(0), _M_hops(0) { }\n+\n     virtual ~__hashfunc_info() { }\n \n     void"}, {"sha": "0c0aec8f59858f7c301b09b76225ba06db1d4158", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f04c1b4bd0df2210c46120178f6b84bc242ca2a/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f04c1b4bd0df2210c46120178f6b84bc242ca2a/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=3f04c1b4bd0df2210c46120178f6b84bc242ca2a", "patch": "@@ -190,8 +190,13 @@ namespace __gnu_profile\n     class __trace_base\n     {\n     public:\n-      __trace_base();\n-      virtual ~__trace_base() {}\n+      // Do not pick the initial size too large, as we don't know which\n+      // diagnostics are more active.\n+      __trace_base()\n+      : __object_table(10000), __stack_table(10000),\n+\t__stack_table_byte_size(0), __id(0) { }\n+\n+      virtual ~__trace_base() { }\n \n       void __add_object(__object_t object, __object_info __info);\n       __object_info* __get_object_info(__object_t __object);\n@@ -228,18 +233,6 @@ namespace __gnu_profile\n \t\t\t\t\t    (*__i).second.__advice()));\n     }\n \n-  template<typename __object_info, typename __stack_info>\n-    __trace_base<__object_info, __stack_info>::\n-    __trace_base()\n-    {\n-      // Do not pick the initial size too large, as we don't know which\n-      // diagnostics are more active.\n-      __object_table.rehash(10000);\n-      __stack_table.rehash(10000);\n-      __stack_table_byte_size = 0;\n-      __id = 0;\n-    }\n-\n   template<typename __object_info, typename __stack_info>\n     void\n     __trace_base<__object_info, __stack_info>::\n@@ -326,19 +319,16 @@ namespace __gnu_profile\n     __trace_base<__object_info, __stack_info>::\n     __write(FILE* __f)\n     {\n-      typename __stack_table_t::iterator __it;\n-\n-      for (__it = __stack_table.begin(); __it != __stack_table.end(); ++__it)\n-\t{\n-\t  if (__it->second.__is_valid())\n-\t    {\n-\t      std::fprintf(__f, __id);\n-\t      std::fprintf(__f, \"|\");\n-\t      __gnu_profile::__write(__f, __it->first);\n-\t      std::fprintf(__f, \"|\");\n-\t      __it->second.__write(__f);\n-\t    }\n-\t}\n+      for (typename __stack_table_t::iterator __it\n+\t     = __stack_table.begin(); __it != __stack_table.end(); ++__it)\n+\tif (__it->second.__is_valid())\n+\t  {\n+\t    std::fprintf(__f, __id);\n+\t    std::fprintf(__f, \"|\");\n+\t    __gnu_profile::__write(__f, __it->first);\n+\t    std::fprintf(__f, \"|\");\n+\t    __it->second.__write(__f);\n+\t  }\n     }\n \n   inline std::size_t\n@@ -414,18 +404,17 @@ namespace __gnu_profile\n     *(__file_name + __root_len) = '.';\n     __builtin_memcpy(__file_name + __root_len + 1,\n \t\t     __extension, __ext_len + 1);\n+\n     FILE* __out_file = std::fopen(__file_name, \"w\");\n-    if (__out_file)\n-      {\n-\tdelete[] __file_name;\n-\treturn __out_file;\n-      }\n-    else\n+    if (!__out_file)\n       {\n \tstd::fprintf(stderr, \"Could not open trace file '%s'.\\n\",\n \t\t     __file_name);\n \tstd::abort();\n       }\n+\n+    delete[] __file_name;\n+    return __out_file;\n   }\n \n   struct __warn\n@@ -544,8 +533,10 @@ namespace __gnu_profile\n   struct __cost_factor_writer\n   {\n     FILE* __file;\n-    __cost_factor_writer(FILE* __f) : __file(__f) { }\n-  \n+\n+    __cost_factor_writer(FILE* __f)\n+    : __file(__f) { }\n+\n     void\n     operator() (const __cost_factor* __factor)\n     { std::fprintf(__file, \"%s = %f\\n\", __factor->__env_var,\n@@ -565,7 +556,7 @@ namespace __gnu_profile\n   struct __cost_factor_setter\n   {\n     void\n-    operator() (__cost_factor* __factor)\n+    operator()(__cost_factor* __factor)\n     {\n       // Look it up in the process environment first.\n       const char* __env_value = std::getenv(__factor->__env_var);\n@@ -663,7 +654,7 @@ namespace __gnu_profile\n    * The common path is inlined fully.\n    */\n   inline bool\n-  __profcxx_init(void)\n+  __profcxx_init()\n   {\n     if (__is_invalid())\n       __profcxx_init_unconditional();"}]}