{"sha": "8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3Y2E0NWM5ZDI2NDE0NzdjZWViZjMwNTY4YWY4ZDRjNDlmZjJmOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-01T12:38:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-01T12:38:45Z"}, "message": "re PR c/56113 (out of memory when compiling a function with many goto labels (50k > ))\n\n2013-02-01  Richard Biener  <rguenther@suse.de>\n\n        PR tree-optimization/56113\n\t* tree-ssa-structalias.c (label_visit): Reduce work for\n\tsingle-predecessor nodes.\n\nFrom-SVN: r195646", "tree": {"sha": "8f672cc7249c99122a89095a42c155ec4d1655fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f672cc7249c99122a89095a42c155ec4d1655fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f419393f2a0219c6f2e7ad083e61b370ca36827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f419393f2a0219c6f2e7ad083e61b370ca36827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f419393f2a0219c6f2e7ad083e61b370ca36827"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "60394c74e490d77967a05ff23b328d805e5a4255", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "patch": "@@ -1,3 +1,9 @@\n+2013-02-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56113\n+\t* tree-ssa-structalias.c (label_visit): Reduce work for\n+\tsingle-predecessor nodes.\n+\n 2013-02-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (make_range_step) <TRUTH_NOT_EXPR>: Bail out if the"}, {"sha": "bee27b1f1c54db05216cdd8673a9739f064cc32f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ca45c9d2641477ceebf30568af8d4c49ff2f9/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8c7ca45c9d2641477ceebf30568af8d4c49ff2f9", "patch": "@@ -2107,14 +2107,13 @@ condense_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n static void\n label_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n {\n-  unsigned int i;\n+  unsigned int i, first_pred;\n   bitmap_iterator bi;\n-  bitmap_set_bit (si->visited, n);\n \n-  if (!graph->points_to[n])\n-    graph->points_to[n] = BITMAP_ALLOC (&predbitmap_obstack);\n+  bitmap_set_bit (si->visited, n);\n \n   /* Label and union our incoming edges's points to sets.  */\n+  first_pred = -1U;\n   EXECUTE_IF_IN_NONNULL_BITMAP (graph->preds[n], 0, i, bi)\n     {\n       unsigned int w = si->node_mapping[i];\n@@ -2126,11 +2125,45 @@ label_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n \tcontinue;\n \n       if (graph->points_to[w])\n-\tbitmap_ior_into(graph->points_to[n], graph->points_to[w]);\n+\t{\n+\t  if (first_pred == -1U)\n+\t    first_pred = w;\n+\t  else if (!graph->points_to[n])\n+\t    {\n+\t      graph->points_to[n] = BITMAP_ALLOC (&predbitmap_obstack);\n+\t      bitmap_ior (graph->points_to[n],\n+\t\t\t  graph->points_to[first_pred], graph->points_to[w]);\n+\t    }\n+\t  else\n+\t    bitmap_ior_into(graph->points_to[n], graph->points_to[w]);\n+\t}\n     }\n-  /* Indirect nodes get fresh variables.  */\n+\n+  /* Indirect nodes get fresh variables and a new pointer equiv class.  */\n   if (!bitmap_bit_p (graph->direct_nodes, n))\n-    bitmap_set_bit (graph->points_to[n], FIRST_REF_NODE + n);\n+    {\n+      if (!graph->points_to[n])\n+\t{\n+\t  graph->points_to[n] = BITMAP_ALLOC (&predbitmap_obstack);\n+\t  if (first_pred != -1U)\n+\t    bitmap_copy (graph->points_to[n], graph->points_to[first_pred]);\n+\t}\n+      bitmap_set_bit (graph->points_to[n], FIRST_REF_NODE + n);\n+      graph->pointer_label[n] = pointer_equiv_class++;\n+      return;\n+    }\n+\n+  /* If there was only a single non-empty predecessor the pointer equiv\n+     class is the same.  */\n+  if (!graph->points_to[n])\n+    {\n+      if (first_pred != -1U)\n+\t{\n+\t  graph->pointer_label[n] = graph->pointer_label[first_pred];\n+\t  graph->points_to[n] = graph->points_to[first_pred];\n+\t}\n+      return;\n+    }\n \n   if (!bitmap_empty_p (graph->points_to[n]))\n     {"}]}