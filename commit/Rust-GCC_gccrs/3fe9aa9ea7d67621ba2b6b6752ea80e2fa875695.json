{"sha": "3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlOWFhOWVhN2Q2NzYyMWJhMmI2YjY3NTJlYTgwZTJmYTg3NTY5NQ==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-04-09T13:24:00Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-04-09T13:24:00Z"}, "message": "gij.cc (main): Accept -agentlib and -agentpath options.\n\n2007-04-09  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* gij.cc (main): Accept -agentlib and -agentpath options.\n\t* prims.cc (parse_init_args): Deal with -agentlib and -agentpath.\n\t(load_jvmti_agent): New function.\n\nFrom-SVN: r123671", "tree": {"sha": "4bdc9140017b37dc50c4160804f5a2aa7e3a648e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bdc9140017b37dc50c4160804f5a2aa7e3a648e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/comments", "author": null, "committer": null, "parents": [{"sha": "c7b852c8a60d46ba79c50b9d2a4f3cba4847c896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b852c8a60d46ba79c50b9d2a4f3cba4847c896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b852c8a60d46ba79c50b9d2a4f3cba4847c896"}], "stats": {"total": 179, "additions": 174, "deletions": 5}, "files": [{"sha": "fa8624eef06d2af8e3c1138039458c08f2246cc4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "patch": "@@ -1,3 +1,9 @@\n+2007-04-09  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* gij.cc (main): Accept -agentlib and -agentpath options.\n+\t* prims.cc (parse_init_args): Deal with -agentlib and -agentpath.\n+\t(load_jvmti_agent): New function.\n+\n 2007-04-04  Tania Bento  <tbento@redhat.com>\n \n \t* java/text/DecimalFormatSymbols.java: Added the year 2007 to"}, {"sha": "a3b8529c4c94a57e1b1e6363632f85f1213a3740", "filename": "libjava/gij.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "patch": "@@ -121,11 +121,11 @@ main (int argc, char const** argv)\n         continue;\n       else if (! strcmp (arg, \"-jrockit\"))\n         continue;\n-      // Ignore JVM Tool Interface options\n+      // JVM Tool Interface options.\n       else if (! strncmp (arg, \"-agentlib:\", sizeof (\"-agentlib:\") - 1))\n-        continue;\n+        add_option (vm_args, arg, NULL);\n       else if (! strncmp (arg, \"-agentpath:\", sizeof (\"-agentpath:\") - 1))\n-        continue;\n+        add_option (vm_args, arg, NULL);\n       else if (! strcmp (arg, \"-classpath\") || ! strcmp (arg, \"-cp\"))\n         {\n           if (i >= argc - 1)"}, {"sha": "c610d72eea860f597133cd7ba17cea3a89e186f0", "filename": "libjava/prims.cc", "status": "modified", "additions": 165, "deletions": 2, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=3fe9aa9ea7d67621ba2b6b6752ea80e2fa875695", "patch": "@@ -108,6 +108,16 @@ static bool remoteDebug = false;\n static char defaultJdwpOptions[] = \"\";\n static char *jdwpOptions = defaultJdwpOptions;\n \n+// Typedefs for JVMTI agent functions.\n+typedef jint jvmti_agent_onload_func (JavaVM *vm, char *options,\n+                                      void *reserved);\n+typedef jint jvmti_agent_onunload_func (JavaVM *vm);\n+\n+// JVMTI agent function pointers.\n+static jvmti_agent_onload_func *jvmti_agentonload = NULL;\n+static jvmti_agent_onunload_func *jvmti_agentonunload = NULL;\n+static char *jvmti_agent_opts;\n+\n // Argument support.\n int\n _Jv_GetNbArgs (void)\n@@ -1358,6 +1368,62 @@ parse_verbose_args (char* option_string,\n   return 0;\n }\n \n+// This function loads the agent functions for JVMTI from the library indicated\n+// by name.  It returns a negative value on failure, the value of which\n+// indicates where ltdl failed, it also prints an error message.\n+static jint\n+load_jvmti_agent (const char *name)\n+{\n+#ifdef USE_LTDL\n+  if (lt_dlinit ())\n+    {\n+      fprintf (stderr, \n+              \"libgcj: Error in ltdl init while loading agent library.\\n\");\n+      return -1;\n+    }\n+ \n+  lt_dlhandle lib = lt_dlopenext (name);\n+  if (!lib)\n+    {\n+      fprintf (stderr, \n+               \"libgcj: Error opening agent library.\\n\");\n+      return -2;\n+    }\n+\n+  if (lib)\n+    {\n+      jvmti_agentonload \n+        = (jvmti_agent_onload_func *) lt_dlsym (lib, \"Agent_OnLoad\");\n+ \n+      if (!jvmti_agentonload)\n+        {\n+          fprintf (stderr, \n+                   \"libgcj: Error finding agent function in library %s.\\n\"\n+                   name);\n+          lt_dlclose (lib);\n+          lib = NULL;\n+          return -4;\n+        }\n+      else\n+        {\n+          jvmti_agentonunload\n+            = (jvmti_agent_onunload_func *) lt_dlsym (lib, \"Agent_OnUnload\");\n+\t   \n+          return 0;\n+        }\n+    }\n+  else\n+    {\n+      fprintf (stderr, \"libgcj: Library %s not found in library path.\\n\", name);\n+      return -3;\n+    }\n+\n+#endif /* USE_LTDL */\n+\n+  // If LTDL cannot be used, return an error code indicating this.\n+  return -99;\n+}\n+\n static jint\n parse_init_args (JvVMInitArgs* vm_args)\n {\n@@ -1383,6 +1449,7 @@ parse_init_args (JvVMInitArgs* vm_args)\n   for (int i = 0; i < vm_args->nOptions; ++i)\n     {\n       char* option_string = vm_args->options[i].optionString;\n+      \n       if (! strcmp (option_string, \"vfprintf\")\n \t  || ! strcmp (option_string, \"exit\")\n \t  || ! strcmp (option_string, \"abort\"))\n@@ -1410,6 +1477,95 @@ parse_init_args (JvVMInitArgs* vm_args)\n \n \t  continue;\n \t}\n+      else if (! strncmp (option_string, \"-agentlib\", sizeof (\"-agentlib\") - 1))\n+\t{\n+          char *strPtr;\n+\t                                              \n+          if (strlen(option_string) > (sizeof (\"-agentlib:\") - 1))\n+            strPtr = &option_string[sizeof (\"-agentlib:\") - 1];\n+          else\n+            {\n+              fprintf (stderr,\n+                \"libgcj: Malformed agentlib argument %s: expected lib name\\n\",\n+                option_string);\n+              return -1;\n+            }\n+\n+          // These are optional arguments to pass to the agent library.\n+          jvmti_agent_opts = strchr (strPtr, '=');\n+   \n+          if (! strncmp (strPtr, \"jdwp\", 4))\n+            {    \t\n+              // We want to run JDWP here so set the correct variables.\n+              remoteDebug = true;\n+              jdwpOptions = ++jvmti_agent_opts;\n+            }\n+          else\n+            {\n+              jint nameLength;\n+   \n+              if (jvmti_agent_opts == NULL)\n+                nameLength = strlen (strPtr);\n+              else\n+                {\n+                  nameLength = jvmti_agent_opts - strPtr;\n+                  jvmti_agent_opts++;\n+                }\n+               \n+              char lib_name[nameLength + 3 + 1];\n+              strcpy (lib_name, \"lib\");\n+              strncat (lib_name, strPtr, nameLength);\n+      \n+              jint result = load_jvmti_agent (lib_name);\n+      \n+              if (result < 0)\n+\t        {\n+\t          return -1;\n+\t        }\n+            }\n+    \n+          continue;\n+\t}\n+      else if (! strncmp (option_string, \"-agentpath:\", \n+                          sizeof (\"-agentpath:\") - 1))\n+\t{\n+          char *strPtr;\n+\t                                              \n+          if (strlen(option_string) > 10)\n+            strPtr = &option_string[10];\n+          else\n+            {\n+              fprintf (stderr,\n+                \"libgcj: Malformed agentlib argument %s: expected lib path\\n\",\n+                option_string);\n+              return -1;\n+            }\n+\t\t\n+          // These are optional arguments to pass to the agent library.\n+          jvmti_agent_opts = strchr (strPtr, '=');\n+    \n+          jint nameLength;\n+   \n+          if (jvmti_agent_opts == NULL)\n+            nameLength = strlen (strPtr);\n+          else\n+            {\n+              nameLength = jvmti_agent_opts - strPtr;\n+              jvmti_agent_opts++;\n+            }\n+    \n+          char lib_name[nameLength + 3 + 1];\n+          strcpy (lib_name, \"lib\");\n+          strncat (lib_name, strPtr, nameLength);\n+          jint result = load_jvmti_agent (strPtr);\n+\n+          if (result < 0)\n+            {\n+              return -1;\n+            }\n+\t\n+          continue;\n+\t}\n       else if (vm_args->ignoreUnrecognized)\n         {\n           if (option_string[0] == '_')\n@@ -1570,21 +1726,24 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n \tmain_thread = new MainThread (JvNewStringUTF (name),\n \t\t\t\t      arg_vec, is_jar);\n       _Jv_AttachCurrentThread (main_thread);\n+      \n+      // Start JVMTI if an agent function has been found.\n+      if (jvmti_agentonload)\n+        (*jvmti_agentonload) (_Jv_GetJavaVM (), jvmti_agent_opts, NULL);\n \n       // Start JDWP\n       if (remoteDebug)\n \t{\n \t  using namespace gnu::classpath::jdwp;\n \t  VMVirtualMachine::initialize ();\n \t  Jdwp *jdwp = new Jdwp ();\n-\t  jdwp->setDaemon (true);\n+\t  jdwp->setDaemon (true);\t  \n \t  jdwp->configure (JvNewStringLatin1 (jdwpOptions));\n \t  jdwp->start ();\n \n \t  // Wait for JDWP to initialize and start\n \t  jdwp->join ();\n \t}\n-\n       // Send VMInit\n       if (JVMTI_REQUESTED_EVENT (VMInit))\n \t_Jv_JVMTI_PostEvent (JVMTI_EVENT_VM_INIT, main_thread);\n@@ -1609,6 +1768,10 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n       JNIEnv *jni_env = _Jv_GetCurrentJNIEnv ();\n       _Jv_JVMTI_PostEvent (JVMTI_EVENT_VM_DEATH, thread, jni_env);\n     }\n+    \n+   // Run JVMTI AgentOnUnload if it exists and an agent is loaded.\n+  if (jvmti_agentonunload)\n+    (*jvmti_agentonunload) (_Jv_GetJavaVM ());\n \n   // If we got here then something went wrong, as MainThread is not\n   // supposed to terminate."}]}