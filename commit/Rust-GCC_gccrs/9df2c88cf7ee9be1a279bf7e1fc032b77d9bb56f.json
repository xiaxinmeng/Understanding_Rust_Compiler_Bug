{"sha": "9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRmMmM4OGNmN2VlOWJlMWEyNzliZjdlMWZjMDMyYjc3ZDliYjU2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-02-29T02:34:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-02-29T02:34:48Z"}, "message": "* Eliminate DECL_FIELD_SIZE.\n\n\t* builtins.c (built_in_class_names, built_in_names): New variables.\n\t* c-decl.c (finish_struct): Set specified size in DECL_SIZE.\n\t* expr.c (expand_expr, case COMPONENT_REF): Get field size from\n\tDECL_SIZE, not DECL_FIELD_SIZE.\n\t* print-tree.c (print_node): Remove code that prints extra blank\n\tlines in some cases.\n\tProperly handle inline and builtin function cases.\n\t* stor-layout.c (layout_decl): Get specified size from DEC_SIZE.\n\t* tree.h (built_in_class_named, built_in_names): New declarations.\n\t(union tree_decl): Rename internal unions to u1 and u2 and change\n\tsome of their components.\n\tAdd new field built_in_class.\n\t(DECL_ALIGN, DECL_INCOMING_RTL, DECL_SAVED_INSNS, DECL_FRAME_SIZE):\n\tReflect above changes.\n\t(DECL_FUNCTION_CODE, DECL_BUILT_IN_CLASS): Likewise.\n\t(DECL_SET_FUNCTION_CODE, DECL_FIELD_SIZE): Deleted.\n\t* objc/objc-act.c (objc_copy_list): Use DECL_SIZE, not DECL_FIELD_SIZE.\n\t(encode_field_decl): Likewise; also remove obsolete test for bitfield.\n\t* ch/ch-tree.h (DECL_ACTION_NESTING_LEVEL): Use new tree union name.\n\t* ch/decl.c (finish_struct): Don't clear DECL_FIELD_SIZE.\n\t* ch/typeck.c (make_chill_struct_type): Likewise.\n\t(apply_decl_field_layout): General cleanup.\n\tSet DECL_SIZE instead of DECL_FIELD_SIZE.\n\t* cp/class.c (build_vtbl_or_vbase_field, check_methods): Don't clear\n\tDECL_FIELD_SIZE.\n\t(check_bitfield_decl, check_field_decls): Set DECL_SIZE, not\n\tDECL_FIELD_SIZE.\n\t* cp/rtti.c (expand_class_desc): Likewise.\n\t* cp/cp-tree.h (DECL_INIT_PRIORITY): Use underlying union name.\n\t(THUNK_VCALL_OFFSET): Likewise.\n\t(THUNK_DELTA): Reflect changes in ../tree.h.\n\t* java/java-tree.h (LABEL_PC): Relect name changes in ../tree.h.\n\t(DECL_BIT_INDEX): Use underlying representation.\n\t* java/parse.h (DECL_INHERITED_SOURCE_LINE): Likewise.\n\nFrom-SVN: r32249", "tree": {"sha": "9d32681a03d3ca309091c1dee14f1053a1621f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d32681a03d3ca309091c1dee14f1053a1621f84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/comments", "author": null, "committer": null, "parents": [{"sha": "c27ba9120aa6d7a4477315f359088ea7e4267bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27ba9120aa6d7a4477315f359088ea7e4267bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27ba9120aa6d7a4477315f359088ea7e4267bd3"}], "stats": {"total": 371, "additions": 218, "deletions": 153}, "files": [{"sha": "5e983504387b8ac0933157aadab1656ecf96f3da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -1,3 +1,25 @@\n+Mon Feb 28 21:07:59 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* Eliminate DECL_FIELD_SIZE.\n+\t* builtins.c (built_in_class_names, built_in_names): New variables.\n+\t* c-decl.c (finish_struct): Set specified size in DECL_SIZE.\n+\t* expr.c (expand_expr, case COMPONENT_REF): Get field size from\n+\tDECL_SIZE, not DECL_FIELD_SIZE.\n+\t* print-tree.c (print_node): Remove code that prints extra blank\n+\tlines in some cases.\n+\tProperly handle inline and builtin function cases.\n+\t* stor-layout.c (layout_decl): Get specified size from DEC_SIZE.\n+\t* tree.h (built_in_class_named, built_in_names): New declarations.\n+\t(union tree_decl): Rename internal unions to u1 and u2 and change\n+\tsome of their components.\n+\tAdd new field built_in_class.\n+\t(DECL_ALIGN, DECL_INCOMING_RTL, DECL_SAVED_INSNS, DECL_FRAME_SIZE):\n+\tReflect above changes.\n+\t(DECL_FUNCTION_CODE, DECL_BUILT_IN_CLASS): Likewise.\n+\t(DECL_SET_FUNCTION_CODE, DECL_FIELD_SIZE): Deleted.\n+\t* objc/objc-act.c (objc_copy_list): Use DECL_SIZE, not DECL_FIELD_SIZE.\n+\t(encode_field_decl): Likewise; also remove obsolete test for bitfield.\n+\n 2000-02-28  Dmitri Makarov  <dim@windriver.com>\n \n \t* extend.texi: Document ARM's support for long/short calls."}, {"sha": "c77d51c496d5c57ab599553e18581cf4dd15f5d0", "filename": "gcc/builtins.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -56,6 +56,30 @@ Boston, MA 02111-1307, USA.  */\n #define PAD_VARARGS_DOWN BYTES_BIG_ENDIAN\n #endif\n \n+/* Define the names of the builtin function types and codes.  */\n+char *built_in_class_names[4]\n+  = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n+\n+char *built_in_names[(int) END_BUILTINS] =\n+{\"BUILT_IN_ALLOCA\", \"BUILT_IN_ABS\", \"BUILT_IN_FABS\", \"BUILT_IN_LABS\",\n+  \"BUILT_IN_FFS\", \"BUILT_IN_DIV\", \"BUILT_IN_LDIV\", \"BUILT_IN_FFLOOR\",\n+  \"BUILT_IN_FCEIL\", \"BUILT_IN_FMOD\", \"BUILT_IN_FREM\", \"BUILT_IN_MEMCPY\",\n+  \"BUILT_IN_MEMCMP\", \"BUILT_IN_MEMSET\", \"BUILT_IN_STRCPY\", \"BUILT_IN_STRCMP\",\n+  \"BUILT_IN_STRLEN\", \"BUILT_IN_FSQRT\", \"BUILT_IN_SIN\", \"BUILT_IN_COS\",\n+  \"BUILT_IN_GETEXP\", \"BUILT_IN_GETMAN\", \"BUILT_IN_SAVEREGS\",\n+  \"BUILT_IN_CLASSIFY_TYPE\", \"BUILT_IN_NEXT_ARG\", \"BUILT_IN_ARGS_INFO\",\n+  \"BUILT_IN_CONSTANT_P\", \"BUILT_IN_FRAME_ADDRESS\", \"BUILT_IN_RETURN_ADDRESS\",\n+  \"BUILT_IN_AGGREGATE_INCOMING_ADDRESS\", \"BUILT_IN_APPLY_ARGS\",\n+  \"BUILT_IN_APPLY\", \"BUILT_IN_RETURN\", \"BUILT_IN_SETJMP\", \"BUILT_IN_LONGJMP\",\n+  \"BUILT_IN_TRAP\", \"BUILT_IN_ISGREATER\", \"BUILT_IN_ISGREATEREQUAL\",\n+  \"BUILT_IN_ISLESS\", \"BUILT_IN_ISLESSEQUAL\", \"BUILT_IN_ISLESSGREATER\",\n+  \"BUILT_IN_ISUNORDERED\", \"BUILT_IN_UNWIND_INIT\", \"BUILT_IN_DWARF_CFA\",\n+  \"BUILT_IN_DWARF_FP_REGNUM\", \"BUILT_IN_INIT_DWARF_REG_SIZES\",\n+  \"BUILT_IN_FROB_RETURN_ADDR\", \"BUILT_IN_EXTRACT_RETURN_ADDR\",\n+  \"BUILT_IN_EH_RETURN\", \"BUILT_IN_VARARGS_START\", \"BUILT_IN_STDARG_START\",\n+  \"BUILT_IN_VA_END\", \"BUILT_IN_VA_COPY\", \"BUILT_IN_NEW\", \"BUILT_IN_VEC_NEW\",\n+  \"BUILT_IN_DELETE\", \"BUILT_IN_VEC_DELETE\" };\n+\n tree (*lang_type_promotes_to) PARAMS ((tree));\n \n static int get_pointer_alignment\tPARAMS ((tree, unsigned));\n@@ -85,7 +109,8 @@ static rtx expand_builtin_strcmp\tPARAMS ((tree, rtx));\n static rtx expand_builtin_memcpy\tPARAMS ((tree));\n static rtx expand_builtin_strcpy\tPARAMS ((tree));\n static rtx expand_builtin_memset\tPARAMS ((tree));\n-static rtx expand_builtin_strlen\tPARAMS ((tree, rtx, enum machine_mode));\n+static rtx expand_builtin_strlen\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));"}, {"sha": "24c7c248a1662b02c3b07a78ebfd58ea895fce67", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -5117,17 +5117,14 @@ finish_struct (t, fieldlist, attributes)\n     }\n \n   /* Install struct as DECL_CONTEXT of each field decl.\n-     Also process specified field sizes.\n-     Set DECL_FIELD_SIZE to the specified size, or 0 if none specified.\n-     The specified size is found in the DECL_INITIAL.\n+     Also process specified field sizes,m which is found in the DECL_INITIAL.\n      Store 0 there, except for \": 0\" fields (so we can find them\n      and delete them, below).  */\n \n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     {\n       DECL_CONTEXT (x) = t;\n       DECL_PACKED (x) |= TYPE_PACKED (t);\n-      DECL_FIELD_SIZE (x) = 0;\n \n       /* If any field is const, the structure type is pseudo-const.  */\n       if (TREE_READONLY (x))\n@@ -5166,7 +5163,8 @@ finish_struct (t, fieldlist, attributes)\n \t    constant_expression_warning (DECL_INITIAL (x));\n \t  else\n \t    {\n-\t      error_with_decl (x, \"bit-field `%s' width not an integer constant\");\n+\t      error_with_decl (x,\n+\t\t\t       \"bit-field `%s' width not an integer constant\");\n \t      DECL_INITIAL (x) = NULL;\n \t    }\n \t}\n@@ -5179,6 +5177,7 @@ finish_struct (t, fieldlist, attributes)\n \t  error_with_decl (x, \"bit-field `%s' has invalid type\");\n \t  DECL_INITIAL (x) = NULL;\n \t}\n+\n       if (DECL_INITIAL (x) && pedantic\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != integer_type_node\n \t  && TYPE_MAIN_VARIANT (TREE_TYPE (x)) != unsigned_type_node\n@@ -5191,20 +5190,19 @@ finish_struct (t, fieldlist, attributes)\n       /* Detect and ignore out of range field width.  */\n       if (DECL_INITIAL (x))\n \t{\n-\t  unsigned HOST_WIDE_INT width = TREE_INT_CST_LOW (DECL_INITIAL (x));\n-\n \t  if (tree_int_cst_sgn (DECL_INITIAL (x)) < 0)\n \t    {\n \t      DECL_INITIAL (x) = NULL;\n \t      error_with_decl (x, \"negative width in bit-field `%s'\");\n \t    }\n \t  else if (TREE_INT_CST_HIGH (DECL_INITIAL (x)) != 0\n-\t\t   || width > TYPE_PRECISION (TREE_TYPE (x)))\n+\t\t   || (TREE_INT_CST_LOW (DECL_INITIAL (x))\n+\t\t       > TYPE_PRECISION (TREE_TYPE (x))))\n \t    {\n \t      DECL_INITIAL (x) = NULL;\n \t      pedwarn_with_decl (x, \"width of `%s' exceeds its type\");\n \t    }\n-\t  else if (width == 0 && DECL_NAME (x) != 0)\n+\t  else if (integer_zerop (DECL_INITIAL (x)) && DECL_NAME (x) != 0)\n \t    {\n \t      error_with_decl (x, \"zero width for bit-field `%s'\");\n \t      DECL_INITIAL (x) = NULL;\n@@ -5223,7 +5221,7 @@ finish_struct (t, fieldlist, attributes)\n \t\t\t\t\t    TREE_UNSIGNED (TREE_TYPE (x)))))\n \t    warning_with_decl (x, \"`%s' is narrower than values of its type\");\n \n-\t  DECL_FIELD_SIZE (x) = width;\n+\t  DECL_SIZE (x) = bitsize_int (width);\n \t  DECL_BIT_FIELD (x) = DECL_C_BIT_FIELD (x) = 1;\n \t  DECL_INITIAL (x) = NULL;\n \n@@ -5243,7 +5241,8 @@ finish_struct (t, fieldlist, attributes)\n       else if (TREE_TYPE (x) != error_mark_node)\n \t{\n \t  unsigned int min_align = (DECL_PACKED (x) ? BITS_PER_UNIT\n-\t\t\t   : TYPE_ALIGN (TREE_TYPE (x)));\n+\t\t\t\t    : TYPE_ALIGN (TREE_TYPE (x)));\n+\n \t  /* Non-bit-fields are aligned for their type, except packed\n \t     fields which require only BITS_PER_UNIT alignment.  */\n \t  DECL_ALIGN (x) = MAX (DECL_ALIGN (x), min_align);"}, {"sha": "e8cfee4e91807b27fed3e8152b2d9af7d1a13957", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -1,3 +1,11 @@\n+Mon Feb 28 08:12:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* ch-tree.h (DECL_ACTION_NESTING_LEVEL): Use new tree union name.\n+\t* decl.c (finish_struct): Don't clear DECL_FIELD_SIZE.\n+\t* typeck.c (make_chill_struct_type): Likewise.\n+\t(apply_decl_field_layout): General cleanup.\n+\tSet DECL_SIZE instead of DECL_FIELD_SIZE.\n+\n Sun Feb 27 16:40:33 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* actions.c (chill_convert_for_assignment): Don't use size_binop"}, {"sha": "3aa741554214651c3eaf5ae2faf00e958691f8a1", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -88,7 +88,7 @@ extern int action_nesting_level;\n #define ELSE_VARIANT_NAME ridpointers[(int) RID_ELSE]\n \n /* For a LABEL_DECL:  action_nesting_level of its target. */\n-#define DECL_ACTION_NESTING_LEVEL(NODE) ((NODE)->decl.saved_insns.i)\n+#define DECL_ACTION_NESTING_LEVEL(NODE) ((NODE)->decl.u2.i)\n \n #define DECL_OLD_PREFIX(DECL) ((DECL)->decl.initial)\n #define DECL_NEW_PREFIX(DECL) ((DECL)->decl.result)"}, {"sha": "559587ba5ebda0a18b52aff6e6984b5108ff14e9", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -4337,18 +4337,9 @@ finish_struct (t, fieldlist)\n {\n   register tree x;\n \n-  /* Install struct as DECL_CONTEXT of each field decl.\n-     Also process specified field sizes.\n-     Set DECL_FIELD_SIZE to the specified size, or 0 if none specified.\n-     The specified size is found in the DECL_INITIAL.\n-     Store 0 there, except for \": 0\" fields (so we can find them\n-     and delete them, below).  */\n-\n+  /* Install struct as DECL_CONTEXT of each field decl.  */\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n-    {\n-      DECL_CONTEXT (x) = t;\n-      DECL_FIELD_SIZE (x) = 0;\n-    }\n+    DECL_CONTEXT (x) = t;\n \n   TYPE_FIELDS (t) = fieldlist;\n "}, {"sha": "2fe1af418f4c05fe08a86b42380329c2f06d388f", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -2992,16 +2992,12 @@ make_chill_struct_type (fieldlist)\n      tree fieldlist;\n {\n   tree t, x;\n-  if (TREE_UNION_ELEM (fieldlist))\n-    t = make_node (UNION_TYPE);\n-  else\n-    t = make_node (RECORD_TYPE);\n+\n+  t = make_node (TREE_UNION_ELEM (fieldlist) ? UNION_TYPE : RECORD_TYPE);\n+\n   /* Install struct as DECL_CONTEXT of each field decl. */\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n-    {\n-      DECL_CONTEXT (x) = t;\n-      DECL_FIELD_SIZE (x) = 0;\n-    }\n+    DECL_CONTEXT (x) = t;\n \n   /* Delete all duplicate fields from the fieldlist */\n   for (x = fieldlist; x && TREE_CHAIN (x);)\n@@ -3033,46 +3029,50 @@ make_chill_struct_type (fieldlist)\n   return t;\n }\n \n-/* decl is a FIELD_DECL.\n-   DECL_INIT (decl) is (NULL_TREE, integer_one_node, integer_zero_node, tree_list),\n-   meaning (default, pack, nopack, POS (...) ).\n+/* DECL is a FIELD_DECL.\n+   DECL_INIT (decl) is\n+       (NULL_TREE, integer_one_node, integer_zero_node, tree_list)\n+    meaning\n+        (default, pack, nopack, POS (...) ).\n+\n    The return value is a boolean: 1 if POS specified, 0 if not */\n+\n static int\n apply_chill_field_layout (decl, next_struct_offset)\n      tree decl;\n-     int* next_struct_offset;\n+     int *next_struct_offset;\n {\n-  tree layout, type, temp, what;\n-  int word = 0, wordsize, start_bit, offset, length, natural_length;\n+  tree layout = DECL_INITIAL (decl);\n+  tree type = TREE_TYPE (decl);\n+  tree temp, what;\n+  HOST_WIDE_INT word = 0;\n+  HOST_WIDE_INT wordsize, start_bit, offset, length, natural_length;\n   int pos_error = 0;\n-  int is_discrete;\n+  int is_discrete = discrete_type_p (type);\n \n-  type = TREE_TYPE (decl);\n-  is_discrete = discrete_type_p (type);\n   if (is_discrete)\n-    natural_length = get_type_precision (TYPE_MIN_VALUE (type), TYPE_MAX_VALUE (type));\n+    natural_length\n+      = get_type_precision (TYPE_MIN_VALUE (type), TYPE_MAX_VALUE (type));\n   else\n     natural_length = TREE_INT_CST_LOW (TYPE_SIZE (type));\n \n-  layout = DECL_INITIAL (decl);\n   if (layout == integer_zero_node) /* NOPACK */\n     {\n-      DECL_PACKED (decl) = 0;\n       *next_struct_offset += natural_length;\n       return 0; /* not POS */\n     }\n \n   if (layout == integer_one_node) /* PACK */\n     {\n       if (is_discrete)\n-\tDECL_BIT_FIELD (decl) = 1;\n-      else\n \t{\n-\t  DECL_BIT_FIELD (decl) = 0;\n-\t  DECL_ALIGN (decl) = BITS_PER_UNIT;\n+\t  DECL_BIT_FIELD (decl) = 1;\n+\t  DECL_SIZE (decl) = bitsize_int (natural_length);\n \t}\n+      else\n+\tDECL_ALIGN (decl) = BITS_PER_UNIT;\n+\n       DECL_PACKED (decl) = 1;\n-      DECL_FIELD_SIZE (decl) = natural_length;\n       *next_struct_offset += natural_length;\n       return 0; /* not POS */\n     }\n@@ -3090,7 +3090,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n   else\n     {\n       word = TREE_INT_CST_LOW (TREE_PURPOSE (temp));\n-      if (word < 0)\n+      if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n \t{\n \t  error (\"Starting word in POS must be >= 0\");\n \t  word = 0;\n@@ -3114,7 +3114,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n       else\n \t{\n \t  start_bit = TREE_INT_CST_LOW (TREE_PURPOSE (temp));\n-\t  if (start_bit < 0)\n+\t  if (tree_int_cst_sgn (TREE_PURPOSE (temp)) < 0)\n \t    {\n \t      error (\"Starting bit in POS must be >= 0\");\n \t      start_bit = *next_struct_offset - offset;\n@@ -3142,7 +3142,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t      else\n \t\t{\n \t\t  length = TREE_INT_CST_LOW (TREE_VALUE (temp));\n-\t\t  if (length <= 0)\n+\t\t  if (tree_int_cst_sgn (TREE_VALUE (temp)) < 0)\n \t\t    {\n \t\t      error (\"Length in POS must be > 0\");\n \t\t      length = natural_length;\n@@ -3159,7 +3159,8 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t\t}\n \t      else\n \t\t{\n-\t\t  int end_bit = TREE_INT_CST_LOW (TREE_VALUE (temp));\n+\t\t  HOST_WIDE_INT end_bit = TREE_INT_CST_LOW (TREE_VALUE (temp));\n+\n \t\t  if (end_bit < start_bit)\n \t\t    {\n \t\t      error (\"End bit in POS must be >= the start bit\");\n@@ -3174,6 +3175,7 @@ apply_chill_field_layout (decl, next_struct_offset)\n \t\t    length = end_bit - start_bit + 1;\n \t\t}\n \t    }\n+\n \t  if (length != natural_length && ! pos_error)\n \t    {\n \t      sorry (\"The length specified on POS must be the natural length of the field type\");\n@@ -3189,7 +3191,10 @@ apply_chill_field_layout (decl, next_struct_offset)\n \n   DECL_PACKED (decl) = 1;\n   DECL_BIT_FIELD (decl) = is_discrete;\n-  DECL_FIELD_SIZE (decl) = length;\n+\n+  if (is_discrete)\n+    DECL_SIZE (decl) = bitsize_int (length);\n+\n   *next_struct_offset += natural_length;\n \n   return 1; /* was POS */\n@@ -3209,12 +3214,7 @@ layout_chill_struct_type (t)\n \n   old_momentary = suspend_momentary ();\n \n-  /* Process specified field sizes.\n-     Set DECL_FIELD_SIZE to the specified size, or 0 if none specified.\n-     The specified size is found in the DECL_INITIAL.\n-     Store 0 there, except for \": 0\" fields (so we can find them\n-     and delete them, below).  */\n-\n+  /* Process specified field sizes.  */\n   next_struct_offset = 0;\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     {"}, {"sha": "afe076b52ca088fb3ef55e8b485dadcf5830e260", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -1,3 +1,14 @@\n+Mon Feb 28 08:15:23 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* class.c (build_vtbl_or_vbase_field, check_methods): Don't clear\n+\tDECL_FIELD_SIZE.\n+\t(check_bitfield_decl, check_field_decls): Set DECL_SIZE, not\n+\tDECL_FIELD_SIZE.\n+\t* rtti.c (expand_class_desc): Likewise.\n+\t* cp-tree.h (DECL_INIT_PRIORITY): Use underlying union name.\n+\t(THUNK_VCALL_OFFSET): Likewise.\n+\t(THUNK_DELTA): Reflect changes in ../tree.h.\n+\n 2000-02-28  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* search.c (protected_accessible_p): Also allow the access if"}, {"sha": "6f412903d61075fab010b029158f3ddf8d428cbd", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -3676,7 +3676,7 @@ check_bitfield_decl (field)\n       if (DECL_INITIAL (field))\n \t{\n \t  DECL_INITIAL (field) = NULL_TREE;\n-\t  DECL_FIELD_SIZE (field) = width;\n+\t  DECL_SIZE (field) = bitsize_int (width);\n \t  DECL_BIT_FIELD (field) = 1;\n \n \t  if (width == 0)\n@@ -3921,7 +3921,6 @@ check_field_decls (t, access_decls, empty_p,\n \tcontinue;\n \t  \n       DECL_SAVED_INSNS (x) = 0;\n-      DECL_FIELD_SIZE (x) = 0;\n \n       /* When this goes into scope, it will be a non-local reference.  */\n       DECL_NONLOCAL (x) = 1;\n@@ -4079,7 +4078,6 @@ build_vtbl_or_vbase_field (name, assembler_name, type, class_type, fcontext,\n   DECL_FIELD_CONTEXT (field) = class_type;\n   DECL_FCONTEXT (field) = fcontext;\n   DECL_SAVED_INSNS (field) = 0;\n-  DECL_FIELD_SIZE (field) = 0;\n   DECL_ALIGN (field) = TYPE_ALIGN (type);\n \n   /* Return it.  */\n@@ -4279,13 +4277,7 @@ check_methods (t)\n       if (IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (x)))\n \tcontinue;\n \n-      /* Do both of these, even though they're in the same union;\n-\t if the insn `r' member and the size `i' member are\n-\t different sizes, as on the alpha, the larger of the two\n-\t will end up with garbage in it.  */\n       DECL_SAVED_INSNS (x) = 0;\n-      DECL_FIELD_SIZE (x) = 0;\n-\n       check_for_override (x, t);\n       if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n \tcp_error_at (\"initializer specified for non-virtual method `%D'\", x);"}, {"sha": "4af1704f6c8b18a560a8cb41826859c553b65d67", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -112,10 +112,7 @@ Boston, MA 02111-1307, USA.  */\n      For a TEMPLATE_TEMPLATE_PARM, this is\n      TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO.\n \n-   DECL_SAVED_INSNS/DECL_FIELD_SIZE\n-     For a static VAR_DECL, this is DECL_INIT_PRIORITY.\n-\n-   BINFO_VIRTUALS\n+  BINFO_VIRTUALS\n      For a binfo, this is a TREE_LIST.  The BV_DELTA of each node\n      gives the amount by which to adjust the `this' pointer when\n      calling the function.  If the method is an overriden version of a\n@@ -2058,9 +2055,9 @@ struct lang_decl\n /* In a non-local VAR_DECL with static storage duration, this is the\n    initialization priority.  If this value is zero, the NODE will be\n    initialized at the DEFAULT_INIT_PRIORITY.  */\n-#define DECL_INIT_PRIORITY(NODE) (DECL_FIELD_SIZE (VAR_DECL_CHECK (NODE)))\n+#define DECL_INIT_PRIORITY(NODE) (VAR_DECL_CHECK (NODE)->decl.u2.i)\n \n-/* In a TREE_LIST concatenating using directives, indicate indirekt\n+/* In a TREE_LIST concatenating using directives, indicate indirect\n    directives  */\n #define TREE_INDIRECT_USING(NODE) (TREE_LIST_CHECK (NODE)->common.lang_flag_0)\n \n@@ -2866,13 +2863,13 @@ extern int flag_new_for_scope;\n \n /* An integer indicating how many bytes should be subtracted from the\n    `this' pointer when this function is called.  */\n-#define THUNK_DELTA(DECL) ((DECL)->decl.frame_size.i)\n+#define THUNK_DELTA(DECL) (DECL_CHECK (DECL)->decl.u1.i)\n \n /* An integer indicating how many bytes should be subtracted from the\n    vtable for the `this' pointer to find the vcall offset.  (The vptr\n    is always located at offset zero from the f `this' pointer.)  If\n    zero, then there is no vcall offset.  */\n-#define THUNK_VCALL_OFFSET(DECL) (DECL_FIELD_SIZE (DECL))\n+#define THUNK_VCALL_OFFSET(DECL) (DECL_CHECK (DECL)->decl.u2.i)\n \n /* DECL_NEEDED_P holds of a declaration when we need to emit its\n    definition.  This is true when the back-end tells us that"}, {"sha": "9caa9c8b7b2fd6bdfbb283d15a89999ee9ecdf3c", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -963,18 +963,16 @@ expand_class_desc (tdecl, type)\n \t(FIELD_DECL, NULL_TREE, \n \t flag_new_abi ? intSI_type_node : unsigned_intSI_type_node);\n       DECL_BIT_FIELD (fields[1]) = 1;\n-      DECL_FIELD_SIZE (fields[1]) = 29;\n+      DECL_SIZE (fields[1]) = bitsize_int (29);\n \n-      fields [2] = build_lang_decl\n-\t(FIELD_DECL, NULL_TREE, boolean_type_node);\n+      fields [2] = build_lang_decl (FIELD_DECL, NULL_TREE, boolean_type_node);\n       DECL_BIT_FIELD (fields[2]) = 1;\n-      DECL_FIELD_SIZE (fields[2]) = 1;\n+      DECL_SIZE (fields[2]) = bitsize_int (1);\n \n       /* Actually enum access */\n-      fields [3] = build_lang_decl\n-\t(FIELD_DECL, NULL_TREE, integer_type_node);\n+      fields [3] = build_lang_decl (FIELD_DECL, NULL_TREE, integer_type_node);\n       DECL_BIT_FIELD (fields[3]) = 1;\n-      DECL_FIELD_SIZE (fields[3]) = 2;\n+      DECL_SIZE (fields[3]) = bitsize_int (2);\n \n       finish_builtin_type (base_desc_type_node, \"__base_info\", fields,\n \t\t\t   3, ptr_type_node);"}, {"sha": "4d777f9802bb48b220cdb1102eeeec7b8d5ac389", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -6572,7 +6572,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\top0 =  expand_expr (TREE_VALUE (elt), target, tmode, modifier);\n \t\tif (DECL_BIT_FIELD (TREE_PURPOSE (elt)))\n \t\t  {\n-\t\t    int bitsize = DECL_FIELD_SIZE (TREE_PURPOSE (elt));\n+\t\t    HOST_WIDE_INT bitsize\n+\t\t      = TREE_INT_CST_LOW (DECL_SIZE (TREE_PURPOSE (elt)));\n \n \t\t    if (TREE_UNSIGNED (TREE_TYPE (TREE_PURPOSE (elt))))\n \t\t      {"}, {"sha": "8b512a3e0a3420253775194c71806fbe65f467e5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -1,3 +1,9 @@\n+Mon Feb 28 08:20:42 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* java-tree.h (LABEL_PC): Relect name changes in ../tree.h.\n+\t(DECL_BIT_INDEX): Use underlying representation.\n+\t* parse.h (DECL_INHERITED_SOURCE_LINE): Likewise.\n+\n Sun Feb 27 16:40:33 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (build_java_ret): Pass proper type to size_binop."}, {"sha": "5cfd53379e7f7fa7042e15d6ed0c1e1f1b092a19", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -402,7 +402,7 @@ struct lang_identifier\n #define LABEL_PENDING_CHAIN(NODE) DECL_RESULT(NODE)\n \n /* In a LABEL_DECL, the corresponding bytecode program counter. */\n-#define LABEL_PC(NODE) ((NODE)->decl.saved_insns.i)\n+#define LABEL_PC(NODE) ((NODE)->decl.u2.i)\n \n /* Used during verification to mark the label has \"changed\". (See JVM Spec). */\n #define LABEL_CHANGED(NODE) DECL_LANG_FLAG_6(NODE)\n@@ -440,7 +440,7 @@ struct lang_identifier\n /* For a local VAR_DECL, holds the index into a words bitstring that\n    specifies if this decl is definitively assigned.\n    A DECL_BIT_INDEX of -1 means we no longer care. */\n-#define DECL_BIT_INDEX(DECL) DECL_FIELD_SIZE(DECL)\n+#define DECL_BIT_INDEX(DECL) (DECL_CHECK (DECL)->decl.u2.i)\n \n /* DECL_LANG_SPECIFIC for FUNCTION_DECLs. */\n struct lang_decl"}, {"sha": "ddc8fc19044e0a2ff0dc92be95213e6a5aa3e9c9", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -593,7 +593,7 @@ typedef struct _jdeplist {\n \n /* Macro for the xreferencer */\n #define DECL_END_SOURCE_LINE(DECL)       DECL_FRAME_SIZE (DECL)\n-#define DECL_INHERITED_SOURCE_LINE(DECL) DECL_FIELD_SIZE (DECL)\n+#define DECL_INHERITED_SOURCE_LINE(DECL) (DECL_CHECK (DECL)->decl.u2.i)\n      \n /* Parser context data structure. */\n struct parser_ctxt {"}, {"sha": "71da53a331bea65fe99d60c4a7fc70f6b6c3582c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -2468,14 +2468,9 @@ objc_copy_list (list, head)\n \n       /* The following statement fixes a bug when inheriting instance\n \t variables that are declared to be bitfields. finish_struct\n-\t expects to find the width of the bitfield in DECL_INITIAL,\n-\t which it nulls out after processing the decl of the super\n-\t class...rather than change the way finish_struct works (which\n-\t is risky), I create the situation it expects...s.naroff\n-\t (7/23/89).  */\n-\n+\t expects to find the width of the bitfield in DECL_INITIAL.  */\n       if (DECL_BIT_FIELD (tail) && DECL_INITIAL (tail) == 0)\n-\tDECL_INITIAL (tail) = build_int_2 (DECL_FIELD_SIZE (tail), 0);\n+\tDECL_INITIAL (tail) = DECL_SIZE (tail);\n \n       newlist = chainon (newlist, tail);\n       list = TREE_CHAIN (list);\n@@ -6870,25 +6865,16 @@ encode_field_decl (field_decl, curtype, format)\n   if (flag_next_runtime)\n     {\n       if (DECL_BIT_FIELD (field_decl))\n-\tencode_bitfield (DECL_FIELD_SIZE (field_decl));\n-      else if (TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t       && DECL_FIELD_SIZE (field_decl)\n-\t       && TYPE_MODE (type) > DECL_MODE (field_decl))\n-\tencode_bitfield (DECL_FIELD_SIZE (field_decl));\n+\tencode_bitfield (TREE_INT_CST_LOW (DECL_SIZE (field_decl)));\n       else\n \tencode_type (TREE_TYPE (field_decl), curtype, format);\n     }\n   else\n     {\n-      if (DECL_BIT_FIELD (field_decl)\n-\t  || (TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t      && DECL_FIELD_SIZE (field_decl)\n-\t      && TYPE_MODE (type) > DECL_MODE (field_decl)))\n-\t{\n-\t  encode_complete_bitfield (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field_decl)),\n-\t\t\t\t    DECL_BIT_FIELD_TYPE (field_decl),\n-\t\t\t\t    DECL_FIELD_SIZE (field_decl));\n-\t}\n+      if (DECL_BIT_FIELD (field_decl))\n+\tencode_complete_bitfield (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field_decl)),\n+\t\t\t\t  DECL_BIT_FIELD_TYPE (field_decl),\n+\t\t\t\t  TREE_INT_CST_LOW (DECL_SIZE (field_decl)));\n       else\n \tencode_type (TREE_TYPE (field_decl), curtype, format);\n     }"}, {"sha": "1001efb052608ac9123215a42f7ae264b5b49c90", "filename": "gcc/print-tree.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -269,8 +269,10 @@ print_node (file, prefix, node, indent)\n \tindent_to (file, indent + 3);\n \n       if (!ggc_p)\n-\tprint_obstack_name ((char *) node, file, \"\");\n-      indent_to (file, indent + 3);\n+\t{\n+\t  print_obstack_name ((char *) node, file, \"\");\n+\t  indent_to (file, indent + 3);\n+\t}\n     }\n \n   /* If a permanent object is in the wrong obstack, or the reverse, warn.  */\n@@ -399,19 +401,31 @@ print_node (file, prefix, node, indent)\n       print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n       print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n       \n-      indent_to (file, indent + 3);\n+      if (TREE_CODE (node) != FUNCTION_DECL\n+\t  || DECL_INLINE (node) || DECL_BUILT_IN (node))\n+\tindent_to (file, indent + 3);\n+\n       if (TREE_CODE (node) != FUNCTION_DECL)\n \tfprintf (file, \" align %d\", DECL_ALIGN (node));\n       else if (DECL_INLINE (node))\n-\tfprintf (file, \" frame_size %d\", DECL_FRAME_SIZE (node));\n+\t{\n+\t  fprintf (file, \" frame_size \");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, DECL_FRAME_SIZE (node));\n+\t}\n       else if (DECL_BUILT_IN (node))\n-\tfprintf (file, \" built-in code %d\", DECL_FUNCTION_CODE (node));\n-      if (TREE_CODE (node) == FIELD_DECL)\n-\tprint_node (file, \"bitpos\", DECL_FIELD_BITPOS (node), indent + 4);\n+\tfprintf (file, \" built-in %s:%s\",\n+\t\t built_in_class_names[(int) DECL_BUILT_IN_CLASS (node)],\n+\t\t built_in_names[(int) DECL_FUNCTION_CODE (node)]);\n+\n       if (DECL_POINTER_ALIAS_SET_KNOWN_P (node))\n \tfprintf (file, \" alias set %d\", DECL_POINTER_ALIAS_SET (node));\n+\n+      if (TREE_CODE (node) == FIELD_DECL)\n+\tprint_node (file, \"bitpos\", DECL_FIELD_BITPOS (node), indent + 4);\n+\n       print_node_brief (file, \"context\", DECL_CONTEXT (node), indent + 4);\n-      print_node_brief (file, \"machine_attributes\", DECL_MACHINE_ATTRIBUTES (node), indent + 4);\n+      print_node_brief (file, \"machine_attributes\",\n+\t\t\tDECL_MACHINE_ATTRIBUTES (node), indent + 4);\n       print_node_brief (file, \"abstract_origin\",\n \t\t\tDECL_ABSTRACT_ORIGIN (node), indent + 4);\n "}, {"sha": "83a220abdf82c33468c742da1116e2b654dfdff1", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -265,13 +265,20 @@ layout_decl (decl, known_align)\n {\n   register tree type = TREE_TYPE (decl);\n   register enum tree_code code = TREE_CODE (decl);\n-  int spec_size = DECL_FIELD_SIZE (decl);\n+  HOST_WIDE_INT spec_size = 0;\n \n   if (code == CONST_DECL)\n     return;\n-\n-  if (code != VAR_DECL && code != PARM_DECL && code != RESULT_DECL\n-      && code != FIELD_DECL && code != TYPE_DECL)\n+  else if (code == FIELD_DECL)\n+    {\n+      if (DECL_SIZE (decl) != 0)\n+\t{\n+\t  spec_size = TREE_INT_CST_LOW (DECL_SIZE (decl));\n+\t  DECL_SIZE (decl) = 0;\n+\t}\n+    }\n+  else if (code != VAR_DECL && code != PARM_DECL && code != RESULT_DECL\n+\t   && code != TYPE_DECL)\n     abort ();\n \n   if (type == error_mark_node)"}, {"sha": "76b807229dd5c914174f501184c1a1889c5f6629", "filename": "gcc/tree.h", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9df2c88cf7ee9be1a279bf7e1fc032b77d9bb56f", "patch": "@@ -67,15 +67,19 @@ extern int tree_code_length[MAX_TREE_CODES];\n \n extern const char *tree_code_name[MAX_TREE_CODES];\n \f\n-/* Classify which part of the compiler has defined a given builtin\n-   function.  */\n+/* Classify which part of the compiler has defined a given builtin function.\n+   Note that we assume below that this is no more than two bits.  */\n enum built_in_class\n {\n   NOT_BUILT_IN = 0,\n   BUILT_IN_FRONTEND,\n   BUILT_IN_MD,\n   BUILT_IN_NORMAL\n };\n+\n+/* Names for the above.  */\n+extern char *built_in_class_names[4];\n+\n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n \n@@ -149,6 +153,9 @@ enum built_in_function\n   /* Upper bound on non-language-specific builtins. */\n   END_BUILTINS\n };\n+\n+/* Names for the above.  */\n+extern char *built_in_names[(int) END_BUILTINS];\n \f\n /* The definition of tree nodes fills the next several pages.  */\n \n@@ -951,7 +958,7 @@ struct tree_type\n \n   unsigned char precision;\n #ifdef ONLY_INT_FIELDS\n-  int mode : 8;\n+  unsigned int mode : 8;\n #else\n   enum machine_mode mode : 8;\n #endif\n@@ -1146,7 +1153,7 @@ struct tree_type\n /* Likewise for the size in bytes.  */\n #define DECL_SIZE_UNIT(NODE) (DECL_CHECK (NODE)->decl.size_unit)\n /* Holds the alignment required for the datum.  */\n-#define DECL_ALIGN(NODE) (DECL_CHECK (NODE)->decl.frame_size.u)\n+#define DECL_ALIGN(NODE) (DECL_CHECK (NODE)->decl.u1.u)\n /* Holds the machine mode corresponding to the declaration of a variable or\n    field.  Always equal to TYPE_MODE (TREE_TYPE (decl)) except for a\n    FIELD_DECL.  */\n@@ -1162,18 +1169,15 @@ struct tree_type\n #define DECL_LIVE_RANGE_RTL(NODE) (DECL_CHECK (NODE)->decl.live_range_rtl)\n /* For PARM_DECL, holds an RTL for the stack slot or register\n    where the data was actually passed.  */\n-#define DECL_INCOMING_RTL(NODE) (DECL_CHECK (NODE)->decl.saved_insns.r)\n+#define DECL_INCOMING_RTL(NODE) (DECL_CHECK (NODE)->decl.u2.r)\n /* For FUNCTION_DECL, if it is inline, holds the saved insn chain.  */\n-#define DECL_SAVED_INSNS(NODE) (DECL_CHECK (NODE)->decl.saved_insns.f)\n+#define DECL_SAVED_INSNS(NODE) (DECL_CHECK (NODE)->decl.u2.f)\n /* For FUNCTION_DECL, if it is inline,\n    holds the size of the stack frame, as an integer.  */\n-#define DECL_FRAME_SIZE(NODE) (DECL_CHECK (NODE)->decl.frame_size.i)\n+#define DECL_FRAME_SIZE(NODE) (DECL_CHECK (NODE)->decl.u1.i)\n /* For FUNCTION_DECL, if it is built-in,\n    this identifies which built-in operation it is.  */\n-#define DECL_FUNCTION_CODE(NODE) (DECL_CHECK (NODE)->decl.frame_size.f.code)\n-#define DECL_SET_FUNCTION_CODE(NODE,VAL) (DECL_CHECK (NODE)->decl.frame_size.f.code = (VAL))\n-/* For a FIELD_DECL, holds the size of the member as an integer.  */\n-#define DECL_FIELD_SIZE(NODE) (DECL_CHECK (NODE)->decl.saved_insns.i)\n+#define DECL_FUNCTION_CODE(NODE) (DECL_CHECK (NODE)->decl.u1.f)\n \n /* The DECL_VINDEX is used for FUNCTION_DECLS in two different ways.\n    Before the struct containing the FUNCTION_DECL is laid out,\n@@ -1297,7 +1301,7 @@ struct tree_type\n /* In a FUNCTION_DECL, nonzero means a built in function.  */\n #define DECL_BUILT_IN(NODE) (DECL_BUILT_IN_CLASS (NODE) != NOT_BUILT_IN)\n /* For a builtin function, identify which part of the compiler defined it.  */\n-#define DECL_BUILT_IN_CLASS(NODE) (DECL_CHECK (NODE)->decl.frame_size.f.bclass)\n+#define DECL_BUILT_IN_CLASS(NODE) (DECL_CHECK (NODE)->decl.built_in_class)\n \n /* In a VAR_DECL that's static,\n    nonzero if the space is in the text section.  */\n@@ -1410,6 +1414,18 @@ struct tree_decl\n   unsigned artificial_flag : 1;\n   unsigned weak_flag : 1;\n \n+  unsigned non_addr_const_p : 1;\n+  unsigned no_instrument_function_entry_exit : 1;\n+  unsigned no_check_memory_usage : 1;\n+  unsigned comdat_flag : 1;\n+  unsigned malloc_flag : 1;\n+  unsigned no_limit_stack : 1;\n+#ifdef ONLY_INT_FIELDS\n+  unsigned int built_in_class : 2;\n+#else\n+  enum built_in_class built_in_class : 2;\n+#endif\n+\n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n   unsigned lang_flag_2 : 1;\n@@ -1419,25 +1435,14 @@ struct tree_decl\n   unsigned lang_flag_6 : 1;\n   unsigned lang_flag_7 : 1;\n \n-  unsigned non_addr_const_p : 1;\n-  unsigned no_instrument_function_entry_exit : 1;\n-  unsigned no_check_memory_usage : 1;\n-  unsigned comdat_flag : 1;\n-  unsigned malloc_flag : 1;\n-  unsigned no_limit_stack : 1;\n-\n   /* For a FUNCTION_DECL, if inline, this is the size of frame needed.\n      If built-in, this is the code for which built-in function.\n      For other kinds of decls, this is DECL_ALIGN.  */\n   union {\n-    int i;\n+    HOST_WIDE_INT i;\n     unsigned int u;\n-    struct\n-      {\n-\tunsigned int code:24;\n-\tunsigned int bclass:8;\n-      } f;\n-  } frame_size;\n+    enum built_in_function f;\n+  } u1;\n \n   union tree_node *size_unit;\n   union tree_node *name;\n@@ -1449,17 +1454,20 @@ struct tree_decl\n   union tree_node *assembler_name;\n   union tree_node *section_name;\n   union tree_node *machine_attributes;\n-  struct rtx_def *rtl;\t/* acts as link to register transfer language\n-\t\t\t\t   (rtl) info */\n+  struct rtx_def *rtl;\t/* RTL representation for object.  */\n   struct rtx_def *live_range_rtl;\n \n-  /* For FUNCTION_DECLs: points to insn that constitutes its definition\n-     on the permanent obstack.  For FIELD_DECL, this is DECL_FIELD_SIZE.  */\n+  /* In FUNCTION_DECL, if it is inline, holds the saved insn chain.\n+     In PARM_DECL, holds an RTL for the stack slot\n+     of register where the data was actually passed.\n+     Used by Chill and Java in LABEL_DECL and by C++ and Java in VAR_DECL.  */\n   union {\n     struct function *f;\n     struct rtx_def *r;\n-    HOST_WIDE_INT i;\n-  } saved_insns;\n+    union tree_node *t;\n+    int i;\n+  } u2;\n+\n   union tree_node *vindex;\n   int pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */"}]}