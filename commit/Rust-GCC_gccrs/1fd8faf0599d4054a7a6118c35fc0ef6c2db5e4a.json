{"sha": "1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkOGZhZjA1OTlkNDA1NGE3YTYxMThjMzVmYzBlZjZjMmRiNWU0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-20T21:26:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-20T21:26:52Z"}, "message": "re PR rtl-optimization/36998 (Ada bootstrap broken on i586-*-*)\n\n\tPR rtl-optimization/36998\n\t* dwarf2out.c (stack_adjust_offset): Add cur_args_size and cur_offset\n\targuments.  Handle sp = reg and (set (foo) (mem (pre_inc (reg sp)))).\n\t(compute_barrier_args_size_1, dwarf2out_frame_debug_expr): Adjust\n\tstack_adjust_offset callers.\n\t(dwarf2out_stack_adjust): Likewise.  Handle insns in annulled\n\tbranches properly.\n\t(compute_barrier_args_size): Handle insns in annulled branches\n\tproperly.\n\nFrom-SVN: r142060", "tree": {"sha": "8774b5a4abd0590e8cef985676755b3aa93672f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8774b5a4abd0590e8cef985676755b3aa93672f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b52b558a25df4860b17f5e23a9597f20898b802e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b558a25df4860b17f5e23a9597f20898b802e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52b558a25df4860b17f5e23a9597f20898b802e"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "4b61173e293480acde3adf9041e33e26d9101f6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "patch": "@@ -1,3 +1,15 @@\n+2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/36998\n+\t* dwarf2out.c (stack_adjust_offset): Add cur_args_size and cur_offset\n+\targuments.  Handle sp = reg and (set (foo) (mem (pre_inc (reg sp)))).\n+\t(compute_barrier_args_size_1, dwarf2out_frame_debug_expr): Adjust\n+\tstack_adjust_offset callers.\n+\t(dwarf2out_stack_adjust): Likewise.  Handle insns in annulled\n+\tbranches properly.\n+\t(compute_barrier_args_size): Handle insns in annulled branches\n+\tproperly.\n+\n 2008-11-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/38151"}, {"sha": "68d0ee8da3b0022176f2a5be216a46d34b525d7a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1fd8faf0599d4054a7a6118c35fc0ef6c2db5e4a", "patch": "@@ -411,7 +411,8 @@ static void reg_save (const char *, unsigned, unsigned, HOST_WIDE_INT);\n #ifdef DWARF2_UNWIND_INFO\n static void initial_return_save (rtx);\n #endif\n-static HOST_WIDE_INT stack_adjust_offset (const_rtx);\n+static HOST_WIDE_INT stack_adjust_offset (const_rtx, HOST_WIDE_INT,\n+\t\t\t\t\t  HOST_WIDE_INT);\n static void output_cfi (dw_cfi_ref, dw_fde_ref, int);\n static void output_cfi_directive (dw_cfi_ref);\n static void output_call_frame_info (int);\n@@ -1110,7 +1111,8 @@ initial_return_save (rtx rtl)\n    contains.  */\n \n static HOST_WIDE_INT\n-stack_adjust_offset (const_rtx pattern)\n+stack_adjust_offset (const_rtx pattern, HOST_WIDE_INT cur_args_size,\n+\t\t     HOST_WIDE_INT cur_offset)\n {\n   const_rtx src = SET_SRC (pattern);\n   const_rtx dest = SET_DEST (pattern);\n@@ -1119,18 +1121,34 @@ stack_adjust_offset (const_rtx pattern)\n \n   if (dest == stack_pointer_rtx)\n     {\n-      /* (set (reg sp) (plus (reg sp) (const_int))) */\n       code = GET_CODE (src);\n+\n+      /* Assume (set (reg sp) (reg whatever)) sets args_size\n+\t level to 0.  */\n+      if (code == REG && src != stack_pointer_rtx)\n+\t{\n+\t  offset = -cur_args_size;\n+#ifndef STACK_GROWS_DOWNWARD\n+\t  offset = -offset;\n+#endif\n+\t  return offset - cur_offset;\n+\t}\n+\n       if (! (code == PLUS || code == MINUS)\n \t  || XEXP (src, 0) != stack_pointer_rtx\n \t  || GET_CODE (XEXP (src, 1)) != CONST_INT)\n \treturn 0;\n \n+      /* (set (reg sp) (plus (reg sp) (const_int))) */\n       offset = INTVAL (XEXP (src, 1));\n       if (code == PLUS)\n \toffset = -offset;\n+      return offset;\n     }\n-  else if (MEM_P (dest))\n+\n+  if (MEM_P (src) && !MEM_P (dest))\n+    dest = src;\n+  if (MEM_P (dest))\n     {\n       /* (set (mem (pre_dec (reg sp))) (foo)) */\n       src = XEXP (dest, 0);\n@@ -1199,15 +1217,16 @@ compute_barrier_args_size_1 (rtx insn, HOST_WIDE_INT cur_args_size,\n \t  || sibcall_epilogue_contains (insn))\n \t/* Nothing */;\n       else if (GET_CODE (PATTERN (insn)) == SET)\n-\toffset = stack_adjust_offset (PATTERN (insn));\n+\toffset = stack_adjust_offset (PATTERN (insn), cur_args_size, 0);\n       else if (GET_CODE (PATTERN (insn)) == PARALLEL\n \t       || GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{\n \t  /* There may be stack adjustments inside compound insns.  Search\n \t     for them.  */\n \t  for (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)\n \t    if (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == SET)\n-\t      offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i));\n+\t      offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),\n+\t\t\t\t\t     cur_args_size, offset);\n \t}\n     }\n   else\n@@ -1224,7 +1243,7 @@ compute_barrier_args_size_1 (rtx insn, HOST_WIDE_INT cur_args_size,\n \t\trtx elem = XVECEXP (expr, 0, i);\n \n \t\tif (GET_CODE (elem) == SET && !RTX_FRAME_RELATED_P (elem))\n-\t\t  offset += stack_adjust_offset (elem);\n+\t\t  offset += stack_adjust_offset (elem, cur_args_size, offset);\n \t      }\n \t}\n     }\n@@ -1312,13 +1331,25 @@ compute_barrier_args_size (void)\n \t      body = PATTERN (insn);\n \t      if (GET_CODE (body) == SEQUENCE)\n \t\t{\n+\t\t  HOST_WIDE_INT dest_args_size = cur_args_size;\n \t\t  for (i = 1; i < XVECLEN (body, 0); i++)\n+\t\t    if (INSN_ANNULLED_BRANCH_P (XVECEXP (body, 0, 0))\n+\t\t\t&& INSN_FROM_TARGET_P (XVECEXP (body, 0, i)))\n+\t\t      dest_args_size\n+\t\t\t= compute_barrier_args_size_1 (XVECEXP (body, 0, i),\n+\t\t\t\t\t\t       dest_args_size, &next);\n+\t\t    else\n+\t\t      cur_args_size\n+\t\t\t= compute_barrier_args_size_1 (XVECEXP (body, 0, i),\n+\t\t\t\t\t\t       cur_args_size, &next);\n+\n+\t\t  if (INSN_ANNULLED_BRANCH_P (XVECEXP (body, 0, 0)))\n+\t\t    compute_barrier_args_size_1 (XVECEXP (body, 0, 0),\n+\t\t\t\t\t\t dest_args_size, &next);\n+\t\t  else\n \t\t    cur_args_size\n-\t\t      = compute_barrier_args_size_1 (XVECEXP (body, 0, i),\n+\t\t      = compute_barrier_args_size_1 (XVECEXP (body, 0, 0),\n \t\t\t\t\t\t     cur_args_size, &next);\n-\t\t  cur_args_size\n-\t\t    = compute_barrier_args_size_1 (XVECEXP (body, 0, 0),\n-\t\t\t\t\t\t   cur_args_size, &next);\n \t\t}\n \t      else\n \t\tcur_args_size\n@@ -1359,6 +1390,14 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n   if (prologue_epilogue_contains (insn) || sibcall_epilogue_contains (insn))\n     return;\n \n+  /* If INSN is an instruction from target of an annulled branch, the\n+     effects are for the target only and so current argument size\n+     shouldn't change at all.  */\n+  if (final_sequence\n+      && INSN_ANNULLED_BRANCH_P (XVECEXP (final_sequence, 0, 0))\n+      && INSN_FROM_TARGET_P (insn))\n+    return;\n+\n   /* If only calls can throw, and we have a frame pointer,\n      save up adjustments until we see the CALL_INSN.  */\n   if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n@@ -1404,15 +1443,16 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n #endif\n     }\n   else if (GET_CODE (PATTERN (insn)) == SET)\n-    offset = stack_adjust_offset (PATTERN (insn));\n+    offset = stack_adjust_offset (PATTERN (insn), args_size, 0);\n   else if (GET_CODE (PATTERN (insn)) == PARALLEL\n \t   || GET_CODE (PATTERN (insn)) == SEQUENCE)\n     {\n       /* There may be stack adjustments inside compound insns.  Search\n \t for them.  */\n       for (offset = 0, i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)\n \tif (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == SET)\n-\t  offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i));\n+\t  offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i),\n+\t\t\t\t\t args_size, offset);\n     }\n   else\n     return;\n@@ -1871,7 +1911,7 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \t    {\n \t      /* Stack adjustment combining might combine some post-prologue\n \t\t stack adjustment into a prologue stack adjustment.  */\n-\t      HOST_WIDE_INT offset = stack_adjust_offset (elem);\n+\t      HOST_WIDE_INT offset = stack_adjust_offset (elem, args_size, 0);\n \n \t      if (offset != 0)\n \t\tdwarf2out_args_size_adjust (offset, label);"}]}