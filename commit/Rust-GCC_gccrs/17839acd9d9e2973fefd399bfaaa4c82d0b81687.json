{"sha": "17839acd9d9e2973fefd399bfaaa4c82d0b81687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4MzlhY2Q5ZDllMjk3M2ZlZmQzOTliZmFhYTRjODJkMGI4MTY4Nw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-22T18:53:44Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-22T18:53:44Z"}, "message": "re PR target/58314 (SH4 error: 'asm' operand requires impossible reload)\n\ngcc/testsuite/\n\tPR target/58314\n\t* gcc.target/sh/torture/pr58314-2.c: New.\n\t* gcc.target/sh/torture/pr58314.c: Don't set -Os option.\n\nFrom-SVN: r219030", "tree": {"sha": "93599c3b9532adf069eea8f15b54c352782a48fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93599c3b9532adf069eea8f15b54c352782a48fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17839acd9d9e2973fefd399bfaaa4c82d0b81687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17839acd9d9e2973fefd399bfaaa4c82d0b81687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17839acd9d9e2973fefd399bfaaa4c82d0b81687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17839acd9d9e2973fefd399bfaaa4c82d0b81687/comments", "author": null, "committer": null, "parents": [{"sha": "0a6f14996acf4acf2788be390d84624959f6134d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6f14996acf4acf2788be390d84624959f6134d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6f14996acf4acf2788be390d84624959f6134d"}], "stats": {"total": 175, "additions": 171, "deletions": 4}, "files": [{"sha": "525937517fdb8e6b0c333f77f1b227114c5264d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17839acd9d9e2973fefd399bfaaa4c82d0b81687", "patch": "@@ -1,3 +1,9 @@\n+2014-12-22  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/58314\n+\t* gcc.target/sh/torture/pr58314-2.c: New.\n+\t* gcc.target/sh/torture/pr58314.c: Don't set -Os option.\n+\n 2014-12-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/63363\n@@ -6551,7 +6557,6 @@\n \t* gcc.dg/attr-isr.c: Move SH specific test to ...\n \t* gcc.target/sh/attr-isr.c: ... here.\n \n->>>>>>> .r217525\n 2014-10-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63567"}, {"sha": "a617c6e0c3650a3f01eb0a3a620b7668c7c3ac9e", "filename": "gcc/testsuite/gcc.target/sh/torture/pr58314-2.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314-2.c?ref=17839acd9d9e2973fefd399bfaaa4c82d0b81687", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile }  */\n+\n+struct unipair \n+{\n+  unsigned short unicode;\n+  unsigned short fontpos;\n+};\n+\n+struct __large_struct\n+{\n+  unsigned long buf[100];\n+};\n+\n+struct vc_data\n+{\n+  unsigned long *vc_uni_pagedir_loc;\n+};\n+\n+struct uni_pagedir \n+{\n+  unsigned short **uni_pgdir[32];\n+};\n+\n+void con_get_unimap (struct vc_data *vc, unsigned short ct, unsigned short *uct,\n+\t\t     struct unipair *list)\n+{\n+  int i, j, k, ect;\n+  unsigned short **p1, *p2;\n+  struct uni_pagedir *p;\n+\n+  ect = 0;\n+\n+  if (*vc->vc_uni_pagedir_loc)\n+  {\n+    p = (struct uni_pagedir *)*vc->vc_uni_pagedir_loc;\n+    for (i = 0; i < 32; i++)\n+    if ((p1 = p->uni_pgdir[i]))\n+    for (j = 0; j < 32; j++)\n+    if ((p2 = *(p1++)))\n+    for (k = 0; k < 64; k++)\n+    {\n+      if (*p2 < 512 && ect++ < ct)\n+      {\n+\t{\n+\t  long __pu_err;\n+\t  __typeof__(*((&list->unicode))) *__pu_addr = ((&list->unicode));\n+\t  __typeof__(*((&list->unicode))) __pu_val =\n+\t\t((unsigned short)((i<<11)+(j<<6)+k));\n+\t  __pu_err = 0;\n+\t  switch ((sizeof(*(&list->unicode))))\n+\t  {\n+\t    case 1:\n+\t\t__asm__ __volatile__ (\n+\t\t\"1:\\n\\t\"\n+\t\t\t\"mov.\" \"b\" \"\t%1, %2\\n\\t\"\n+\t\t\"2:\\n\"\n+\t\t\".section\t.fixup,\\\"ax\\\"\\n\"\n+\t\t\"3:\\n\\t\"\n+\t\t\t\"mov.l\t4f, %0\\n\\t\"\n+\t\t\t\"jmp\t@%0\\n\\t\"\n+\t\t\t\" mov\t%3, %0\\n\\t\"\n+\t\t\t\".balign\t4\\n\"\n+\t\t\"4:\t.long\t2b\\n\\t\"\n+\t\t\t\".previous\\n\"\n+\t\t\".section\t__ex_table,\\\"a\\\"\\n\\t\"\n+\t\t\t\".long\t1b, 3b\\n\\t\"\n+\t\t\t\".previous\"\n+\t\t: \"=&r\" (__pu_err)\n+\t\t: \"r\" (__pu_val), \"m\" ((*(struct __large_struct *)(__pu_addr))),\n+\t\t  \"i\" (-14), \"0\" (__pu_err) : \"memory\" );\n+\n+\t      break;\n+\n+\t    case 2:\n+\t\t__asm__ __volatile__ (\n+\t\t\"1:\\n\\t\"\n+\t\t\t\"mov.\" \"w\" \"\t%1, %2\\n\\t\"\n+\t\t\"2:\\n\"\n+\t\t\".section\t.fixup,\\\"ax\\\"\\n\"\n+\t\t\"3:\\n\\t\"\n+\t\t\t\"mov.l\t4f, %0\\n\\t\"\n+\t\t\t\"jmp\t@%0\\n\\t\"\n+\t\t\t\" mov\t%3, %0\\n\\t\"\n+\t\t\t\".balign\t4\\n\"\n+\t\t\t\"4:\t.long\t2b\\n\\t\"\n+\t\t\t\".previous\\n\"\n+\t\t\".section\t__ex_table,\\\"a\\\"\\n\\t\"\n+\t\t\t\".long\t1b, 3b\\n\\t\"\n+\t\t\t\".previous\"\n+\t\t: \"=&r\" (__pu_err)\n+\t\t: \"r\" (__pu_val), \"m\" ((*(struct __large_struct *)(__pu_addr))),\n+\t\t  \"i\" (-14), \"0\" (__pu_err) : \"memory\" );\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t  }\n+\t}\n+\n+\n+\t{\n+\t  long __pu_err;\n+\t  __typeof__(*((&list->fontpos))) *__pu_addr = ((&list->fontpos));\n+\t  __typeof__(*((&list->fontpos))) __pu_val = ((unsigned short) *p2);\n+\t  __pu_err = 0;\n+\t  switch ((sizeof(*(&list->fontpos))))\n+\t  {\n+\t    case 1:\n+\t\t__asm__ __volatile__ (\n+\t\t\"1:\\n\\t\"\n+\t\t\t\"mov.\" \"b\" \"\t%1, %2\\n\\t\"\n+\t\t\"2:\\n\"\n+\t\t\".section\t.fixup,\\\"ax\\\"\\n\"\n+\t\t\"3:\\n\\t\"\n+\t\t\t\"mov.l\t4f, %0\\n\\t\"\n+\t\t\t\"jmp\t@%0\\n\\t\"\n+\t\t\t\" mov\t%3, %0\\n\\t\"\n+\t\t\t\".balign\t4\\n\"\n+\t\t\t\"4:\t.long\t2b\\n\\t\"\n+\t\t\t\".previous\\n\"\n+\t\t\".section\t__ex_table,\\\"a\\\"\\n\\t\"\n+\t\t\t\".long\t1b, 3b\\n\\t\"\n+\t\t\t\".previous\"\n+\t\t: \"=&r\" (__pu_err)\n+\t\t: \"r\" (__pu_val), \"m\" ((*(struct __large_struct *)(__pu_addr))),\n+\t\t  \"i\" (-14), \"0\" (__pu_err) : \"memory\" );\n+\t      break;\n+\n+\t    case 2:\n+\t      __asm__ __volatile__ (\n+\t\t\"1:\\n\\t\"\n+\t\t\t\"mov.\" \"w\" \"\t%1, %2\\n\\t\"\n+\t\t\"2:\\n\"\n+\t\t\t\".section\t.fixup,\\\"ax\\\"\\n\"\n+\t\t\"3:\\n\\t\"\n+\t\t\t\"mov.l\t4f, %0\\n\\t\"\n+\t\t\t\"jmp\t@%0\\n\\t\"\n+\t\t\t\" mov\t%3, %0\\n\\t\"\n+\t\t\".balign\t4\\n\"\n+\t\t\t\"4:\t.long\t2b\\n\\t\"\n+\t\t\".previous\\n\"\n+\t\t\".section\t__ex_table,\\\"a\\\"\\n\\t\"\n+\t\t\t\".long\t1b, 3b\\n\\t\"\n+\t\t\t\".previous\"\n+\t\t: \"=&r\" (__pu_err)\n+\t\t: \"r\" (__pu_val), \"m\" ((*(struct __large_struct *)(__pu_addr))),\n+\t\t  \"i\" (-14), \"0\" (__pu_err) : \"memory\" );\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t  }\n+\t}\n+\n+        list++;\n+      }\n+      p2++;\n+    }\n+  }\n+}"}, {"sha": "88505467a233f643f59dcc568b5710b83a145982", "filename": "gcc/testsuite/gcc.target/sh/torture/pr58314.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17839acd9d9e2973fefd399bfaaa4c82d0b81687/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr58314.c?ref=17839acd9d9e2973fefd399bfaaa4c82d0b81687", "patch": "@@ -1,13 +1,15 @@\n+/* { dg-additional-options \"-std=gnu99\" }  */\n /* { dg-do compile }  */\n-/* { dg-options \"-Os\" } */\n \n typedef unsigned short __u16;\n typedef unsigned int __u32;\n-\n typedef signed short s16;\n \n \n-static inline __attribute__((always_inline)) __attribute__((__const__)) __u16 __arch_swab16(__u16 x)\n+static inline \n+__attribute__((always_inline))\n+__attribute__((__const__))\n+__u16 __arch_swab16(__u16 x)\n {\n  __asm__(\n   \"swap.b\t\t%1, %0\""}]}