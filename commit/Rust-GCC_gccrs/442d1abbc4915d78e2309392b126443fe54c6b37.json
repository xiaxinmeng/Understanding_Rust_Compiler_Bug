{"sha": "442d1abbc4915d78e2309392b126443fe54c6b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyZDFhYmJjNDkxNWQ3OGUyMzA5MzkyYjEyNjQ0M2ZlNTRjNmIzNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T10:33:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T10:33:48Z"}, "message": "[multiple changes]\n\n2017-01-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* ada.ads, a-unccon.ads: Add pragma No_Elaboration_Code_All.\n\n2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_case.adb: Minor reformatting.\n\n2017-01-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socthi-mingw.adb: Remove now extraneous USE TYPE clause\n\n2017-01-06  Justin Squirek  <squirek@adacore.com>\n\n\t* aspects.adb: Register aspect in Canonical_Aspect.\n\t* aspects.ads: Associate qualities of Aspect_Max_Queue_Length\n\tinto respective tables.\n\t* einfo.ads, einfo.adb: Add a new attribute for\n\thandling the parameters for Pragma_Max_Entry_Queue\n\t(Entry_Max_Queue_Lengths_Array) in E_Protected_Type. Subprograms\n\tfor accessing and setting were added as well.\n\t* par-prag.adb (Prag): Register Pramga_Max_Entry_Queue.\n\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Emit\n\tdeclaration for pramga arguments and store them in the protected\n\ttype node.\n\t(Make_Initialize_Protection): Pass a reference to\n\tthe Entry_Max_Queue_Lengths_Array in the protected type node to\n\tthe runtime.\n\t* rtsfind.adb: Minor grammar fix.\n\t* rtsfind.ads: Register new types taken from the\n\truntime libraries RE_Protected_Entry_Queue_Max and\n\tRE_Protected_Entry_Queue_Max_Array\n\t* s-tposen.adb, s-tpoben.adb\n\t(Initialize_Protection_Entry/Initialize_Protection_Entries):\n\tAdd extra parameter and add assignment to local object.\n\t* s-tposen.ads, s-tpoben.ads: Add new types to\n\tstore entry queue maximums and a field to the entry object record.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add case statement\n\tfor Aspect_Max_Queue_Length.\n\t(Check_Aspect_At_Freeze_Point):\n\tAdd aspect to list of aspects that don't require delayed analysis.\n\t* sem_prag.adb (Analyze_Pragma): Add case statement for\n\tPragma_Max_Queue_Length, check semantics, and register arugments\n\tin the respective entry nodes.\n\t* sem_util.adb, sem_util.ads Add functions Get_Max_Queue_Length\n\tand Has_Max_Queue_Length\n\t* snames.ads-tmpl: Add constant for the new aspect-name\n\tName_Max_Queue_Length and corrasponding pragma.\n\n2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Is_Controlled_Function_Call):\n\tReimplemented. Consider any node which has an entity as the\n\tfunction call may appear in various ways.\n\nFrom-SVN: r244126", "tree": {"sha": "295964fadc2aaa91e66324ff711f09e3bdac5b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/295964fadc2aaa91e66324ff711f09e3bdac5b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442d1abbc4915d78e2309392b126443fe54c6b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442d1abbc4915d78e2309392b126443fe54c6b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442d1abbc4915d78e2309392b126443fe54c6b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442d1abbc4915d78e2309392b126443fe54c6b37/comments", "author": null, "committer": null, "parents": [{"sha": "ed3fe8cc27a62cbc21fcb5427ca5b2919878d94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3fe8cc27a62cbc21fcb5427ca5b2919878d94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3fe8cc27a62cbc21fcb5427ca5b2919878d94f"}], "stats": {"total": 500, "additions": 428, "deletions": 72}, "files": [{"sha": "beabccb874ebd8576241441754af3881050e7835", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1,3 +1,58 @@\n+2017-01-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* ada.ads, a-unccon.ads: Add pragma No_Elaboration_Code_All.\n+\n+2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_case.adb: Minor reformatting.\n+\n+2017-01-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socthi-mingw.adb: Remove now extraneous USE TYPE clause\n+\n+2017-01-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* aspects.adb: Register aspect in Canonical_Aspect.\n+\t* aspects.ads: Associate qualities of Aspect_Max_Queue_Length\n+\tinto respective tables.\n+\t* einfo.ads, einfo.adb: Add a new attribute for\n+\thandling the parameters for Pragma_Max_Entry_Queue\n+\t(Entry_Max_Queue_Lengths_Array) in E_Protected_Type. Subprograms\n+\tfor accessing and setting were added as well.\n+\t* par-prag.adb (Prag): Register Pramga_Max_Entry_Queue.\n+\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration): Emit\n+\tdeclaration for pramga arguments and store them in the protected\n+\ttype node.\n+\t(Make_Initialize_Protection): Pass a reference to\n+\tthe Entry_Max_Queue_Lengths_Array in the protected type node to\n+\tthe runtime.\n+\t* rtsfind.adb: Minor grammar fix.\n+\t* rtsfind.ads: Register new types taken from the\n+\truntime libraries RE_Protected_Entry_Queue_Max and\n+\tRE_Protected_Entry_Queue_Max_Array\n+\t* s-tposen.adb, s-tpoben.adb\n+\t(Initialize_Protection_Entry/Initialize_Protection_Entries):\n+\tAdd extra parameter and add assignment to local object.\n+\t* s-tposen.ads, s-tpoben.ads: Add new types to\n+\tstore entry queue maximums and a field to the entry object record.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Add case statement\n+\tfor Aspect_Max_Queue_Length.\n+\t(Check_Aspect_At_Freeze_Point):\n+\tAdd aspect to list of aspects that don't require delayed analysis.\n+\t* sem_prag.adb (Analyze_Pragma): Add case statement for\n+\tPragma_Max_Queue_Length, check semantics, and register arugments\n+\tin the respective entry nodes.\n+\t* sem_util.adb, sem_util.ads Add functions Get_Max_Queue_Length\n+\tand Has_Max_Queue_Length\n+\t* snames.ads-tmpl: Add constant for the new aspect-name\n+\tName_Max_Queue_Length and corrasponding pragma.\n+\n+2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Is_Controlled_Function_Call):\n+\tReimplemented. Consider any node which has an entity as the\n+\tfunction call may appear in various ways.\n+\n 2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb (Rewrite_Stream_Proc_Call): Use"}, {"sha": "a3b4318d1c4073b9ef9cadc9a5adca5deb40643a", "filename": "gcc/ada/a-unccon.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fa-unccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fa-unccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-unccon.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -19,5 +19,6 @@ generic\n \n function Ada.Unchecked_Conversion (S : Source) return Target;\n \n+pragma No_Elaboration_Code_All (Unchecked_Conversion);\n pragma Pure (Unchecked_Conversion);\n pragma Import (Intrinsic, Unchecked_Conversion);"}, {"sha": "4c2a3d00e50e7c2dfbcf7050bb2aca9979619d23", "filename": "gcc/ada/ada.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fada.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fada.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -14,6 +14,7 @@\n ------------------------------------------------------------------------------\n \n package Ada is\n+   pragma No_Elaboration_Code_All;\n    pragma Pure;\n \n end Ada;"}, {"sha": "0da6b812c9745dc22dd02bed3370877f1e1915a7", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -568,6 +568,7 @@ package body Aspects is\n     Aspect_Linker_Section               => Aspect_Linker_Section,\n     Aspect_Lock_Free                    => Aspect_Lock_Free,\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n+    Aspect_Max_Queue_Length             => Aspect_Max_Queue_Length,\n     Aspect_No_Elaboration_Code_All      => Aspect_No_Elaboration_Code_All,\n     Aspect_No_Return                    => Aspect_No_Return,\n     Aspect_No_Tagged_Streams            => Aspect_No_Tagged_Streams,"}, {"sha": "5de6539b0a587888f71d2d6e124cd4a693744ef4", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -116,6 +116,7 @@ package Aspects is\n       Aspect_Link_Name,\n       Aspect_Linker_Section,                -- GNAT\n       Aspect_Machine_Radix,\n+      Aspect_Max_Queue_Length,              -- GNAT\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Obsolescent,                   -- GNAT\n       Aspect_Output,\n@@ -247,6 +248,7 @@ package Aspects is\n       Aspect_Inline_Always              => True,\n       Aspect_Invariant                  => True,\n       Aspect_Lock_Free                  => True,\n+      Aspect_Max_Queue_Length           => True,\n       Aspect_Object_Size                => True,\n       Aspect_Persistent_BSS             => True,\n       Aspect_Predicate                  => True,\n@@ -353,6 +355,7 @@ package Aspects is\n       Aspect_Link_Name                  => Expression,\n       Aspect_Linker_Section             => Expression,\n       Aspect_Machine_Radix              => Expression,\n+      Aspect_Max_Queue_Length           => Expression,\n       Aspect_Object_Size                => Expression,\n       Aspect_Obsolescent                => Optional_Expression,\n       Aspect_Output                     => Name,\n@@ -460,6 +463,7 @@ package Aspects is\n       Aspect_Linker_Section               => Name_Linker_Section,\n       Aspect_Lock_Free                    => Name_Lock_Free,\n       Aspect_Machine_Radix                => Name_Machine_Radix,\n+      Aspect_Max_Queue_Length             => Name_Max_Queue_Length,\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n       Aspect_No_Return                    => Name_No_Return,\n       Aspect_No_Tagged_Streams            => Name_No_Tagged_Streams,\n@@ -731,6 +735,7 @@ package Aspects is\n       Aspect_Import                       => Never_Delay,\n       Aspect_Initial_Condition            => Never_Delay,\n       Aspect_Initializes                  => Never_Delay,\n+      Aspect_Max_Queue_Length             => Never_Delay,\n       Aspect_No_Elaboration_Code_All      => Never_Delay,\n       Aspect_No_Tagged_Streams            => Never_Delay,\n       Aspect_Obsolescent                  => Never_Delay,"}, {"sha": "4b78eca25e512b559349ffdea3c29a9b6d523190", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -267,6 +267,7 @@ package body Einfo is\n    --    Contract                        Node34\n \n    --    Anonymous_Designated_Type       Node35\n+   --    Entry_Max_Queue_Lengths_Array   Node35\n    --    Import_Pragma                   Node35\n \n    --    Class_Wide_Preconds             List38\n@@ -1221,6 +1222,12 @@ package body Einfo is\n       return Node18 (Id);\n    end Entry_Index_Constant;\n \n+   function Entry_Max_Queue_Lengths_Array (Id : E) return N is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Protected_Type);\n+      return Node35 (Id);\n+   end Entry_Max_Queue_Lengths_Array;\n+\n    function Contains_Ignored_Ghost_Code (Id : E) return B is\n    begin\n       pragma Assert\n@@ -4286,6 +4293,12 @@ package body Einfo is\n       Set_Node18 (Id, V);\n    end Set_Entry_Index_Constant;\n \n+   procedure Set_Entry_Max_Queue_Lengths_Array (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Protected_Type);\n+      Set_Node35 (Id, V);\n+   end Set_Entry_Max_Queue_Lengths_Array;\n+\n    procedure Set_Entry_Parameters_Type (Id : E; V : E) is\n    begin\n       Set_Node15 (Id, V);\n@@ -10738,6 +10751,10 @@ package body Einfo is\n          when E_Variable                                   =>\n             Write_Str (\"Anonymous_Designated_Type\");\n \n+         when E_Entry                                      |\n+              E_Entry_Family                               =>\n+            Write_Str (\"Entry_Max_Queue_Lenghts_Array\");\n+\n          when Subprogram_Kind                              =>\n             Write_Str (\"Import_Pragma\");\n "}, {"sha": "e5ab85aef42891d8207eaec4afc73de7caa484a3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1154,6 +1154,11 @@ package Einfo is\n --       accept statement for a member of the family, and in the prefix of\n --       'COUNT when it applies to a family member.\n \n+--    Entry_Max_Queue_Lengths_Array (Node35)\n+--       Defined in protected types for which Has_Entries is true. Contains the\n+--       defining identifier for the array of naturals used by the runtime to\n+--       limit the queue size of each entry individually.\n+\n --    Entry_Parameters_Type (Node15)\n --       Defined in entries. Points to the access-to-record type that is\n --       constructed by the expander to hold a reference to the parameter\n@@ -6381,6 +6386,7 @@ package Einfo is\n    --    Stored_Constraint                   (Elist23)\n    --    Anonymous_Object                    (Node30)\n    --    Contract                            (Node34)\n+   --    Entry_Max_Queue_Lengths_Array       (Node35)\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n    --    Sec_Stack_Needed_For_Return         (Flag167)  ???\n@@ -6928,6 +6934,7 @@ package Einfo is\n    function Entry_Formal                        (Id : E) return E;\n    function Entry_Index_Constant                (Id : E) return E;\n    function Entry_Index_Type                    (Id : E) return E;\n+   function Entry_Max_Queue_Lengths_Array       (Id : E) return E;\n    function Entry_Parameters_Type               (Id : E) return E;\n    function Enum_Pos_To_Rep                     (Id : E) return E;\n    function Enumeration_Pos                     (Id : E) return U;\n@@ -7608,6 +7615,7 @@ package Einfo is\n    procedure Set_Entry_Component                 (Id : E; V : E);\n    procedure Set_Entry_Formal                    (Id : E; V : E);\n    procedure Set_Entry_Index_Constant            (Id : E; V : E);\n+   procedure Set_Entry_Max_Queue_Lengths_Array   (Id : E; V : E);\n    procedure Set_Entry_Parameters_Type           (Id : E; V : E);\n    procedure Set_Enum_Pos_To_Rep                 (Id : E; V : E);\n    procedure Set_Enumeration_Pos                 (Id : E; V : U);\n@@ -8921,6 +8929,7 @@ package Einfo is\n    pragma Inline (Set_Entry_Cancel_Parameter);\n    pragma Inline (Set_Entry_Component);\n    pragma Inline (Set_Entry_Formal);\n+   pragma Inline (Set_Entry_Max_Queue_Lengths_Array);\n    pragma Inline (Set_Entry_Parameters_Type);\n    pragma Inline (Set_Enum_Pos_To_Rep);\n    pragma Inline (Set_Enumeration_Pos);"}, {"sha": "54000a0f3040dea63c794a87493b68433a2573af", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 145, "deletions": 34, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -9045,7 +9045,7 @@ package body Exp_Ch9 is\n    --  the specs refer to this type.\n \n    procedure Expand_N_Protected_Type_Declaration (N : Node_Id) is\n-      Discr_Map : constant Elist_Id := New_Elmt_List;\n+      Discr_Map : constant Elist_Id   := New_Elmt_List;\n       Loc       : constant Source_Ptr := Sloc (N);\n       Prot_Typ  : constant Entity_Id  := Defining_Identifier (N);\n \n@@ -9055,17 +9055,9 @@ package body Exp_Ch9 is\n       Pdef : constant Node_Id := Protected_Definition (N);\n       --  This contains two lists; one for visible and one for private decls\n \n-      Body_Arr     : Node_Id;\n-      Body_Id      : Entity_Id;\n-      Cdecls       : List_Id;\n-      Comp         : Node_Id;\n       Current_Node : Node_Id := N;\n       E_Count      : Int;\n       Entries_Aggr : Node_Id;\n-      New_Priv     : Node_Id;\n-      Object_Comp  : Node_Id;\n-      Priv         : Node_Id;\n-      Rec_Decl     : Node_Id;\n \n       procedure Check_Inlining (Subp : Entity_Id);\n       --  If the original operation has a pragma Inline, propagate the flag\n@@ -9295,7 +9287,17 @@ package body Exp_Ch9 is\n \n       --  Local variables\n \n-      Sub : Node_Id;\n+      Body_Arr     : Node_Id;\n+      Body_Id      : Entity_Id;\n+      Cdecls       : List_Id;\n+      Comp         : Node_Id;\n+      Expr         : Node_Id;\n+      New_Priv     : Node_Id;\n+      Obj_Def      : Node_Id;\n+      Object_Comp  : Node_Id;\n+      Priv         : Node_Id;\n+      Rec_Decl     : Node_Id;\n+      Sub          : Node_Id;\n \n    --  Start of processing for Expand_N_Protected_Type_Declaration\n \n@@ -9760,6 +9762,96 @@ package body Exp_Ch9 is\n          end loop;\n       end if;\n \n+      --  Create the declaration of an array object which contains the values\n+      --  of aspect/pragma Max_Queue_Length for all entries of the protected\n+      --  type. This object is later passed to the appropriate protected object\n+      --  initialization routine.\n+\n+      declare\n+         Maxs     : constant List_Id := New_List;\n+         Count    : Int;\n+         Item     : Entity_Id;\n+         Maxs_Id  : Entity_Id;\n+         Max_Vals : Node_Id;\n+\n+      begin\n+         if Has_Entries (Prot_Typ) then\n+\n+            --  Gather the Max_Queue_Length values of all entries in a list. A\n+            --  value of zero indicates that the entry has no limitation on its\n+            --  queue length.\n+\n+            Count := 0;\n+            Item  := First_Entity (Prot_Typ);\n+            while Present (Item) loop\n+               if Is_Entry (Item) then\n+                  Count := Count + 1;\n+\n+                  Append_To (Maxs,\n+                    Make_Integer_Literal (Loc,\n+                      Intval => Get_Max_Queue_Length (Item)));\n+               end if;\n+\n+               Next_Entity (Item);\n+            end loop;\n+\n+            --  Create the declaration of the array object. Generate:\n+\n+            --    Maxs_Id : aliased Protected_Entry_Queue_Max_Array\n+            --                        (1 .. Count) := (..., ...);\n+            --      or\n+            --    Maxs_Id : aliased Protected_Entry_Queue_Max := <value>;\n+\n+            Maxs_Id :=\n+              Make_Defining_Identifier (Loc,\n+                Chars => New_External_Name (Chars (Prot_Typ), 'B'));\n+\n+            case Corresponding_Runtime_Package (Prot_Typ) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Expr := Make_Aggregate (Loc, Maxs);\n+\n+                  Obj_Def :=\n+                    Make_Subtype_Indication (Loc,\n+                      Subtype_Mark =>\n+                        New_Occurrence_Of\n+                          (RTE (RE_Protected_Entry_Queue_Max_Array), Loc),\n+                      Constraint   =>\n+                        Make_Index_Or_Discriminant_Constraint (Loc,\n+                          Constraints => New_List (\n+                            Make_Range (Loc,\n+                              Make_Integer_Literal (Loc, 1),\n+                              Make_Integer_Literal (Loc, Count)))));\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Expr := Make_Integer_Literal (Loc, Intval (First (Maxs)));\n+\n+                  Obj_Def :=\n+                    New_Occurrence_Of\n+                      (RTE (RE_Protected_Entry_Queue_Max), Loc);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n+\n+            Max_Vals :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Maxs_Id,\n+                Aliased_Present     => True,\n+                Object_Definition   => Obj_Def,\n+                Expression          => Expr);\n+\n+            --  A pointer to this array will be placed in the corresponding\n+            --  record by its initialization procedure so this needs to be\n+            --  analyzed here.\n+\n+            Insert_After (Current_Node, Max_Vals);\n+            Current_Node := Max_Vals;\n+            Analyze (Max_Vals);\n+\n+            Set_Entry_Max_Queue_Lengths_Array (Prot_Typ, Maxs_Id);\n+         end if;\n+      end;\n+\n       --  Emit declaration for Entry_Bodies_Array, now that the addresses of\n       --  all protected subprograms have been collected.\n \n@@ -9770,37 +9862,34 @@ package body Exp_Ch9 is\n \n          case Corresponding_Runtime_Package (Prot_Typ) is\n             when System_Tasking_Protected_Objects_Entries =>\n-               Body_Arr :=\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Body_Id,\n-                   Aliased_Present     => True,\n-                   Object_Definition   =>\n-                     Make_Subtype_Indication (Loc,\n-                       Subtype_Mark =>\n-                         New_Occurrence_Of\n-                           (RTE (RE_Protected_Entry_Body_Array), Loc),\n-                       Constraint   =>\n-                         Make_Index_Or_Discriminant_Constraint (Loc,\n-                           Constraints => New_List (\n-                              Make_Range (Loc,\n-                                Make_Integer_Literal (Loc, 1),\n-                                Make_Integer_Literal (Loc, E_Count))))),\n-                   Expression          => Entries_Aggr);\n+               Expr    := Entries_Aggr;\n+               Obj_Def :=\n+                  Make_Subtype_Indication (Loc,\n+                    Subtype_Mark =>\n+                      New_Occurrence_Of\n+                        (RTE (RE_Protected_Entry_Body_Array), Loc),\n+                    Constraint   =>\n+                      Make_Index_Or_Discriminant_Constraint (Loc,\n+                        Constraints => New_List (\n+                          Make_Range (Loc,\n+                            Make_Integer_Literal (Loc, 1),\n+                            Make_Integer_Literal (Loc, E_Count)))));\n \n             when System_Tasking_Protected_Objects_Single_Entry =>\n-               Body_Arr :=\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Body_Id,\n-                   Aliased_Present     => True,\n-                   Object_Definition   =>\n-                     New_Occurrence_Of (RTE (RE_Entry_Body), Loc),\n-                   Expression          =>\n-                     Remove_Head (Expressions (Entries_Aggr)));\n+               Expr    := Remove_Head (Expressions (Entries_Aggr));\n+               Obj_Def := New_Occurrence_Of (RTE (RE_Entry_Body), Loc);\n \n             when others =>\n                raise Program_Error;\n          end case;\n \n+         Body_Arr :=\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Body_Id,\n+             Aliased_Present     => True,\n+             Object_Definition   => Obj_Def,\n+             Expression          => Expr);\n+\n          --  A pointer to this array will be placed in the corresponding record\n          --  by its initialization procedure so this needs to be analyzed here.\n \n@@ -9821,6 +9910,7 @@ package body Exp_Ch9 is\n             Sub :=\n               Make_Subprogram_Declaration (Loc,\n                 Specification => Build_Find_Body_Index_Spec (Prot_Typ));\n+\n             Insert_After (Current_Node, Sub);\n             Analyze (Sub);\n          end if;\n@@ -14107,6 +14197,27 @@ package body Exp_Ch9 is\n                      raise Program_Error;\n             end case;\n \n+            --  Entry_Queue_Maxs parameter. This is a pointer to an array of\n+            --  naturals representing the entry queue maximums for each entry\n+            --  in the protected type. Zero represents no max.\n+\n+            if Has_Entry then\n+               Append_To (Args,\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         =>\n+                     New_Occurrence_Of\n+                       (Entry_Max_Queue_Lengths_Array (Ptyp), Loc),\n+                   Attribute_Name => Name_Unrestricted_Access));\n+\n+            --  Edge cases exist where entry initialization functions are\n+            --  called, but no entries exist, so null is appended.\n+\n+            elsif Pkg_Id = System_Tasking_Protected_Objects_Single_Entry\n+              or else Pkg_Id = System_Tasking_Protected_Objects_Entries\n+            then\n+               Append_To (Args, Make_Null (Loc));\n+            end if;\n+\n             --  Entry_Bodies parameter. This is a pointer to an array of\n             --  pointers to the entry body procedures and barrier functions of\n             --  the object. If the protected type has no entries this object"}, {"sha": "05dbf8f1cfaae259a07b0c5aa3e95f670b14f38d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -4912,35 +4912,28 @@ package body Exp_Util is\n          --    Obj.Func (Formal => Actual) N_Function_Call, whose Name is an\n          --                                N_Selected_Component\n \n-         case Nkind (Expr) is\n-            when N_Function_Call =>\n+         loop\n+            if Nkind (Expr) = N_Function_Call then\n                Expr := Name (Expr);\n \n-               --  Check for \"Obj.Func (Formal => Actual)\" case\n-\n-               if Nkind (Expr) = N_Selected_Component then\n-                  Expr := Selector_Name (Expr);\n-               end if;\n-\n             --  \"Obj.Func (Actual)\" case\n \n-            when N_Indexed_Component =>\n+            elsif Nkind (Expr) = N_Indexed_Component then\n                Expr := Prefix (Expr);\n \n-               if Nkind (Expr) = N_Selected_Component then\n-                  Expr := Selector_Name (Expr);\n-               end if;\n-\n-            --  \"Obj.Func\" case\n+            --  \"Obj.Func\" or \"Obj.Func (Formal => Actual) case\n \n-            when N_Selected_Component =>\n+            elsif Nkind (Expr) = N_Selected_Component then\n                Expr := Selector_Name (Expr);\n \n-            when others => null;\n-         end case;\n+            else\n+               exit;\n+            end if;\n+         end loop;\n \n          return\n-           Nkind_In (Expr, N_Expanded_Name, N_Identifier)\n+           Nkind (Expr) in N_Has_Entity\n+             and then Present (Entity (Expr))\n              and then Ekind (Entity (Expr)) = E_Function\n              and then Needs_Finalization (Etype (Entity (Expr)));\n       end Is_Controlled_Function_Call;"}, {"sha": "f35239c28e62f0576fa14802092935fe252f1ddc", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2014, AdaCore                     --\n+--                     Copyright (C) 2001-2016, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,6 @@ with System.Storage_Elements; use System.Storage_Elements;\n package body GNAT.Sockets.Thin is\n \n    use type C.unsigned;\n-   use type C.int;\n \n    WSAData_Dummy : array (1 .. 512) of C.int;\n "}, {"sha": "16a9c44ccad3d1ba40bc3c21b2f1204e89a96382", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1396,6 +1396,7 @@ begin\n            Pragma_Machine_Attribute              |\n            Pragma_Main                           |\n            Pragma_Main_Storage                   |\n+           Pragma_Max_Queue_Length               |\n            Pragma_Memory_Size                    |\n            Pragma_No_Body                        |\n            Pragma_No_Elaboration_Code_All        |"}, {"sha": "db0d9d31bdfc1ce8893bc2c1c0dcc88451e27c0f", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1351,7 +1351,7 @@ package body Rtsfind is\n       --  is System. If so, return the value from the already compiled\n       --  declaration and otherwise do a regular find.\n \n-      --  Not pleasant, but these kinds of annoying recursion when\n+      --  Not pleasant, but these kinds of annoying recursion senarios when\n       --  writing an Ada compiler in Ada have to be broken somewhere.\n \n       if Present (Main_Unit_Entity)"}, {"sha": "1fbca38332ae6c79c83704fb344275b3af903d83", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1684,6 +1684,7 @@ package Rtsfind is\n \n      RE_Protected_Entry_Body_Array,      -- Tasking.Protected_Objects.Entries\n      RE_Protected_Entry_Names_Array,     -- Tasking.Protected_Objects.Entries\n+     RE_Protected_Entry_Queue_Max_Array, -- Tasking.Protected_Objects.Entries\n      RE_Protection_Entries,              -- Tasking.Protected_Objects.Entries\n      RE_Protection_Entries_Access,       -- Tasking.Protected_Objects.Entries\n      RE_Initialize_Protection_Entries,   -- Tasking.Protected_Objects.Entries\n@@ -1716,6 +1717,7 @@ package Rtsfind is\n      RE_Service_Entry,                   -- Protected_Objects.Single_Entry\n      RE_Exceptional_Complete_Single_Entry_Body,\n      RE_Protected_Count_Entry,           -- Protected_Objects.Single_Entry\n+     RE_Protected_Entry_Queue_Max,       -- Protected_Objects.Single_Entry\n      RE_Protected_Single_Entry_Caller,   -- Protected_Objects.Single_Entry\n \n      RE_Protected_Entry_Index,           -- System.Tasking.Protected_Objects\n@@ -2927,6 +2929,8 @@ package Rtsfind is\n        System_Tasking_Protected_Objects_Entries,\n      RE_Protected_Entry_Names_Array      =>\n        System_Tasking_Protected_Objects_Entries,\n+     RE_Protected_Entry_Queue_Max_Array  =>\n+       System_Tasking_Protected_Objects_Entries,\n      RE_Protection_Entries               =>\n        System_Tasking_Protected_Objects_Entries,\n      RE_Protection_Entries_Access        =>\n@@ -2989,6 +2993,8 @@ package Rtsfind is\n        System_Tasking_Protected_Objects_Single_Entry,\n      RE_Protected_Count_Entry            =>\n        System_Tasking_Protected_Objects_Single_Entry,\n+     RE_Protected_Entry_Queue_Max        =>\n+       System_Tasking_Protected_Objects_Single_Entry,\n      RE_Protected_Single_Entry_Caller    =>\n        System_Tasking_Protected_Objects_Single_Entry,\n "}, {"sha": "aecc7db4bc5171d51ec9a0d9419e731ddf3b9032", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                               B o d y                                    --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -174,6 +174,7 @@ package body System.Tasking.Protected_Objects.Entries is\n      (Object           : Protection_Entries_Access;\n       Ceiling_Priority : Integer;\n       Compiler_Info    : System.Address;\n+      Entry_Queue_Maxs : Protected_Entry_Queue_Max_Access;\n       Entry_Bodies     : Protected_Entry_Body_Access;\n       Find_Body_Index  : Find_Body_Index_Access)\n    is\n@@ -211,6 +212,7 @@ package body System.Tasking.Protected_Objects.Entries is\n       Object.Compiler_Info    := Compiler_Info;\n       Object.Pending_Action   := False;\n       Object.Call_In_Progress := null;\n+      Object.Entry_Queue_Maxs := Entry_Queue_Maxs;\n       Object.Entry_Bodies     := Entry_Bodies;\n       Object.Find_Body_Index  := Find_Body_Index;\n "}, {"sha": "79c9c4407c492c7270ceb53c6a248be0d147f149", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,6 +66,12 @@ package System.Tasking.Protected_Objects.Entries is\n    type Protected_Entry_Queue_Array is\n      array (Protected_Entry_Index range <>) of Entry_Queue;\n \n+   type Protected_Entry_Queue_Max_Array is\n+     array (Positive_Protected_Entry_Index range <>) of Natural;\n+\n+   type Protected_Entry_Queue_Max_Access is\n+     access all Protected_Entry_Queue_Max_Array;\n+\n    --  The following declarations define an array that contains the string\n    --  names of entries and entry family members, together with an associated\n    --  access type.\n@@ -144,6 +150,10 @@ package System.Tasking.Protected_Objects.Entries is\n \n       Entry_Queues : Protected_Entry_Queue_Array (1 .. Num_Entries);\n \n+      Entry_Queue_Maxs : Protected_Entry_Queue_Max_Access;\n+      --  Access to an array of naturals representing the max value for\n+      --  each entry's queue length. A value of 0 signifies no max.\n+\n       Entry_Names : Protected_Entry_Names_Access := null;\n       --  An array of string names which denotes entry [family member] names.\n       --  The structure is indexed by protected entry index and contains Num_\n@@ -178,6 +188,7 @@ package System.Tasking.Protected_Objects.Entries is\n      (Object           : Protection_Entries_Access;\n       Ceiling_Priority : Integer;\n       Compiler_Info    : System.Address;\n+      Entry_Queue_Maxs : Protected_Entry_Queue_Max_Access;\n       Entry_Bodies     : Protected_Entry_Body_Access;\n       Find_Body_Index  : Find_Body_Index_Access);\n    --  Initialize the Object parameter so that it can be used by the runtime"}, {"sha": "59d9e912ea1789210563857efd3dfbaede9dec32", "filename": "gcc/ada/s-tposen.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---         Copyright (C) 1998-2013, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2016, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -218,6 +218,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n      (Object            : Protection_Entry_Access;\n       Ceiling_Priority  : Integer;\n       Compiler_Info     : System.Address;\n+      Entry_Queue_Max   : Protected_Entry_Queue_Max_Access;\n       Entry_Body        : Entry_Body_Access)\n    is\n    begin\n@@ -226,6 +227,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       Object.Compiler_Info := Compiler_Info;\n       Object.Call_In_Progress := null;\n       Object.Entry_Body := Entry_Body;\n+      Object.Entry_Queue_Max := Entry_Queue_Max;\n       Object.Entry_Queue := null;\n    end Initialize_Protection_Entry;\n "}, {"sha": "bfd82bf0e950db72e73928a920fb5c7669e66d99", "filename": "gcc/ada/s-tposen.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tposen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fs-tposen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -182,10 +182,16 @@ package System.Tasking.Protected_Objects.Single_Entry is\n \n    type Protection_Entry_Access is access all Protection_Entry;\n \n+   type Protected_Entry_Queue_Max is new Natural;\n+\n+   type Protected_Entry_Queue_Max_Access is\n+     access all Protected_Entry_Queue_Max;\n+\n    procedure Initialize_Protection_Entry\n      (Object            : Protection_Entry_Access;\n       Ceiling_Priority  : Integer;\n       Compiler_Info     : System.Address;\n+      Entry_Queue_Max   : Protected_Entry_Queue_Max_Access;\n       Entry_Body        : Entry_Body_Access);\n    --  Initialize the Object parameter so that it can be used by the run time\n    --  to keep track of the runtime state of a protected object.\n@@ -270,6 +276,10 @@ private\n \n       Entry_Queue : Entry_Call_Link;\n       --  Place to store the waiting entry call (if any)\n+\n+      Entry_Queue_Max : Protected_Entry_Queue_Max_Access;\n+      --  Access to a natural representing the max value for the single\n+      --  entry's queue length. A value of 0 signifies no max.\n    end record;\n \n end System.Tasking.Protected_Objects.Single_Entry;"}, {"sha": "3b3820e46b96f08b0fc31a48b361db3bfe3a5c2f", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -1369,9 +1369,9 @@ package body Sem_Case is\n             Lo  : Node_Id;\n             Hi  : Node_Id);\n          --  If the type of the alternative has predicates, we must examine\n-         --  each subset of the predicate rather than the bounds of the\n-         --  type itself. This is relevant when the choice is a subtype mark\n-         --  or a subtype indication.\n+         --  each subset of the predicate rather than the bounds of the type\n+         --  itself. This is relevant when the choice is a subtype mark or a\n+         --  subtype indication.\n \n          -----------\n          -- Check --\n@@ -1509,8 +1509,8 @@ package body Sem_Case is\n             P := First (Static_Discrete_Predicate (Typ));\n             while Present (P) loop\n \n-               --  Check that part of the predicate choice is included in\n-               --  the given bounds.\n+               --  Check that part of the predicate choice is included in the\n+               --  given bounds.\n \n                if Expr_Value (High_Bound (P)) >= Expr_Value (Lo)\n                  and then Expr_Value (Low_Bound (P)) <= Expr_Value (Hi)\n@@ -1643,8 +1643,8 @@ package body Sem_Case is\n                                  & \"predicate as case alternative\",\n                                  Choice, E, Suggest_Static => True);\n \n-                           --  Static predicate case. The bounds are\n-                           --  those of the given subtype.\n+                           --  Static predicate case. The bounds are those of\n+                           --  the given subtype.\n \n                            else\n                               Handle_Static_Predicate (E,\n@@ -1702,11 +1702,10 @@ package body Sem_Case is\n                                  end if;\n                               end if;\n \n-                              if Has_Static_Predicate (E) then\n-\n                               --  Check applicable predicate values within the\n                               --  bounds of the given range.\n \n+                              if Has_Static_Predicate (E) then\n                                  Handle_Static_Predicate (E, L, H);\n \n                               else"}, {"sha": "262728856ed4cc715483476e1070674bf9c841bf", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -2823,6 +2823,19 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end Initializes;\n \n+               --  Max_Queue_Length\n+\n+               when Aspect_Max_Queue_Length =>\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Loc,\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name                  => Name_Max_Queue_Length);\n+\n+                  Decorate (Aspect, Aitem);\n+                  Insert_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Obsolescent\n \n                when Aspect_Obsolescent => declare\n@@ -9251,6 +9264,7 @@ package body Sem_Ch13 is\n               Aspect_Implicit_Dereference       |\n               Aspect_Initial_Condition          |\n               Aspect_Initializes                |\n+              Aspect_Max_Queue_Length           |\n               Aspect_Obsolescent                |\n               Aspect_Part_Of                    |\n               Aspect_Post                       |"}, {"sha": "f2002caeb22491e1450e1b5061578ae533682974", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -17659,6 +17659,86 @@ package body Sem_Prag is\n             end loop;\n          end Main_Storage;\n \n+         ----------------------\n+         -- Max_Queue_Length --\n+         ----------------------\n+\n+         --  pragma Max_Queue_Length (static_integer_EXPRESSION);\n+\n+         when Pragma_Max_Queue_Length => Max_Queue_Length : declare\n+            Arg        : Node_Id;\n+            Entry_Decl : Node_Id;\n+            Entry_Id   : Entity_Id;\n+            Val        : Uint;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+\n+            Entry_Decl :=\n+              Find_Related_Declaration_Or_Body (N, Do_Checks => True);\n+\n+            --  Entry declaration\n+\n+            if Nkind (Entry_Decl) = N_Entry_Declaration then\n+\n+               --  Entry illegally within a task\n+\n+               if Nkind (Parent (N)) = N_Task_Definition then\n+                  Error_Pragma (\"pragma % cannot apply to task entries\");\n+                  return;\n+               end if;\n+\n+               Entry_Id := Unique_Defining_Entity (Entry_Decl);\n+\n+               --  Pragma illegally applied to an entry family\n+\n+               if Ekind (Entry_Id) = E_Entry_Family then\n+                  Error_Pragma (\"pragma % cannot apply to entry families\");\n+                  return;\n+               end if;\n+\n+            --  Otherwise the pragma is associated with an illegal construct\n+\n+            else\n+               Error_Pragma (\"pragma % must apply to a protected entry\");\n+               return;\n+            end if;\n+\n+            --  Mark the pragma as Ghost if the related subprogram is also\n+            --  Ghost. This also ensures that any expansion performed further\n+            --  below will produce Ghost nodes.\n+\n+            Mark_Pragma_As_Ghost (N, Entry_Id);\n+\n+            --  Analyze the Integer expression\n+\n+            Arg := Get_Pragma_Arg (Arg1);\n+            Check_Arg_Is_OK_Static_Expression (Arg, Any_Integer);\n+\n+            Val := Expr_Value (Arg);\n+\n+            if Val <= 0 then\n+               Error_Pragma_Arg\n+                 (\"argument for pragma% must be positive\", Arg1);\n+\n+            elsif not UI_Is_In_Int_Range (Val) then\n+               Error_Pragma_Arg\n+                 (\"argument for pragma% out of range of Integer\", Arg1);\n+\n+            end if;\n+\n+            --  Manually subsitute the expression value of the pragma argument\n+            --  if it not an integer literally because this is not taken care\n+            --  of automatically elsewhere.\n+\n+            if Nkind (Arg) /= N_Integer_Literal then\n+               Rewrite (Arg, Make_Integer_Literal (Sloc (Arg), Val));\n+            end if;\n+\n+            Record_Rep_Item (Entry_Id, N);\n+         end Max_Queue_Length;\n+\n          -----------------\n          -- Memory_Size --\n          -----------------\n@@ -28642,6 +28722,7 @@ package body Sem_Prag is\n       Pragma_Machine_Attribute              => -1,\n       Pragma_Main                           => -1,\n       Pragma_Main_Storage                   => -1,\n+      Pragma_Max_Queue_Length               =>  0,\n       Pragma_Memory_Size                    =>  0,\n       Pragma_No_Return                      =>  0,\n       Pragma_No_Body                        =>  0,"}, {"sha": "e02e7325e9568326b28e3d876ec2088660404862", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -8351,6 +8351,24 @@ package body Sem_Util is\n       pragma Assert (Name_Buffer (Name_Len + 1) = ' ');\n    end Get_Library_Unit_Name_String;\n \n+   --------------------------\n+   -- Get_Max_Queue_Length --\n+   --------------------------\n+\n+   function Get_Max_Queue_Length (Id : Entity_Id) return Uint is\n+      Prag : constant Entity_Id := Get_Pragma (Id, Pragma_Max_Queue_Length);\n+\n+   begin\n+      --  A value of 0 represents no maximum specified and entries and entry\n+      --  families with no Max_Queue_Length aspect or pragma defaults to it.\n+\n+      if not Has_Max_Queue_Length (Id) or else not Present (Prag) then\n+         return Uint_0;\n+      end if;\n+\n+      return Intval (Expression (First (Pragma_Argument_Associations (Prag))));\n+   end Get_Max_Queue_Length;\n+\n    ------------------------\n    -- Get_Name_Entity_Id --\n    ------------------------\n@@ -9648,15 +9666,25 @@ package body Sem_Util is\n       return False;\n    end Has_Interfaces;\n \n+   --------------------------\n+   -- Has_Max_Queue_Length --\n+   --------------------------\n+\n+   function Has_Max_Queue_Length (Id : Entity_Id) return Boolean is\n+   begin\n+      return\n+        Ekind (Id) = E_Entry\n+          and then Present (Get_Pragma (Id, Pragma_Max_Queue_Length));\n+   end Has_Max_Queue_Length;\n+\n    ---------------------------------\n    -- Has_No_Obvious_Side_Effects --\n    ---------------------------------\n \n    function Has_No_Obvious_Side_Effects (N : Node_Id) return Boolean is\n    begin\n-      --  For now, just handle literals, constants, and non-volatile\n-      --  variables and expressions combining these with operators or\n-      --  short circuit forms.\n+      --  For now handle literals, constants, and non-volatile variables and\n+      --  expressions combining these with operators or short circuit forms.\n \n       if Nkind (N) in N_Numeric_Or_String_Literal then\n          return True;"}, {"sha": "f768c0fdb4e8c472305b5188ae8e04b75bd2d0ff", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -931,6 +931,10 @@ package Sem_Util is\n    --  Retrieve the fully expanded name of the library unit declared by\n    --  Decl_Node into the name buffer.\n \n+   function Get_Max_Queue_Length (Id : Entity_Id) return Uint;\n+   --  Return the argument of pragma Max_Queue_Length or zero if the annotation\n+   --  is not present. It is assumed that Id denotes an entry.\n+\n    function Get_Name_Entity_Id (Id : Name_Id) return Entity_Id;\n    pragma Inline (Get_Name_Entity_Id);\n    --  An entity value is associated with each name in the name table. The\n@@ -1104,6 +1108,10 @@ package Sem_Util is\n    --  Use_Full_View controls if the check is done using its full view (if\n    --  available).\n \n+   function Has_Max_Queue_Length (Id : Entity_Id) return Boolean;\n+   --  Determine whether Id is subject to pragma Max_Queue_Length. It is\n+   --  assumed that Id denotes an entry.\n+\n    function Has_No_Obvious_Side_Effects (N : Node_Id) return Boolean;\n    --  This is a simple minded function for determining whether an expression\n    --  has no obvious side effects. It is used only for determining whether"}, {"sha": "e183915e3338cf1c29d14960ea3f504cb203b02a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442d1abbc4915d78e2309392b126443fe54c6b37/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=442d1abbc4915d78e2309392b126443fe54c6b37", "patch": "@@ -575,6 +575,7 @@ package Snames is\n    Name_Machine_Attribute              : constant Name_Id := N + $; -- GNAT\n    Name_Main                           : constant Name_Id := N + $; -- GNAT\n    Name_Main_Storage                   : constant Name_Id := N + $; -- GNAT\n+   Name_Max_Queue_Length               : constant Name_Id := N + $; -- GNAT\n    Name_Memory_Size                    : constant Name_Id := N + $; -- Ada 83\n    Name_No_Body                        : constant Name_Id := N + $; -- GNAT\n    Name_No_Elaboration_Code_All        : constant Name_Id := N + $; -- GNAT\n@@ -1904,6 +1905,7 @@ package Snames is\n       Pragma_Machine_Attribute,\n       Pragma_Main,\n       Pragma_Main_Storage,\n+      Pragma_Max_Queue_Length,\n       Pragma_Memory_Size,\n       Pragma_No_Body,\n       Pragma_No_Elaboration_Code_All,"}]}