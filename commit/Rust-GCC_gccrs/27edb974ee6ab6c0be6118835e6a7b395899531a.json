{"sha": "27edb974ee6ab6c0be6118835e6a7b395899531a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlZGI5NzRlZTZhYjZjMGJlNjExODgzNWU2YTdiMzk1ODk5NTMxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-05-21T14:25:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-05-21T14:25:03Z"}, "message": "re PR tree-optimization/53410 (ICE in build_int_cst_wide, at tree.c:1219)\n\n\tPR tree-optimization/53410\n\t* fold-const.c (fold_binary_loc): Use build_zero_cst (type)\n\tinstead of build_int_cst (type, 0) where vector types might be\n\tinvolved. Instead of build_int_cst (type, 1) convert the original\n\tinteger_onep argument to the desired type.\n\n\t* gcc.c-torture/compile/pr53410-1.c: New test.\n\t* gcc.c-torture/compile/pr53410-2.c: New test.\n\nFrom-SVN: r187715", "tree": {"sha": "baea0e384baa178c2869b3a68a1f5c35d3ca5a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baea0e384baa178c2869b3a68a1f5c35d3ca5a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27edb974ee6ab6c0be6118835e6a7b395899531a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27edb974ee6ab6c0be6118835e6a7b395899531a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27edb974ee6ab6c0be6118835e6a7b395899531a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27edb974ee6ab6c0be6118835e6a7b395899531a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb639843e4bb0b43d08de4baca618fe98ee04e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb639843e4bb0b43d08de4baca618fe98ee04e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb639843e4bb0b43d08de4baca618fe98ee04e91"}], "stats": {"total": 128, "additions": 110, "deletions": 18}, "files": [{"sha": "c52e9dfeec8bae4eefc6634c1384afd42a7b16f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27edb974ee6ab6c0be6118835e6a7b395899531a", "patch": "@@ -1,3 +1,11 @@\n+2012-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53410\n+\t* fold-const.c (fold_binary_loc): Use build_zero_cst (type)\n+\tinstead of build_int_cst (type, 0) where vector types might be\n+\tinvolved. Instead of build_int_cst (type, 1) convert the original\n+\tinteger_onep argument to the desired type.\n+\n 2012-05-21  Michael Matz  <matz@suse.de>\n \n \t* genattrtab.c (attr_rtx_cost): Move earlier, start with cost being 1."}, {"sha": "20b07d0ad811ffb0f12f5c38481c449201884f80", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=27edb974ee6ab6c0be6118835e6a7b395899531a", "patch": "@@ -11245,7 +11245,7 @@ fold_binary_loc (location_t loc,\n \t  && integer_onep (TREE_OPERAND (arg0, 1))\n \t  && integer_onep (arg1))\n \treturn fold_build2_loc (loc, EQ_EXPR, type, arg0,\n-\t\t\t    build_int_cst (TREE_TYPE (arg0), 0));\n+\t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n \n       /* Fold (X & Y) ^ Y as ~X & Y.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n@@ -11355,29 +11355,33 @@ fold_binary_loc (location_t loc,\n \t  && integer_onep (TREE_OPERAND (arg0, 1))\n \t  && integer_onep (arg1))\n \t{\n+\t  tree tem2;\n \t  tem = TREE_OPERAND (arg0, 0);\n-\t  return fold_build2_loc (loc, EQ_EXPR, type,\n-\t\t\t      fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (tem), tem,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (tem), 1)),\n-\t\t\t      build_int_cst (TREE_TYPE (tem), 0));\n+\t  tem2 = fold_convert_loc (loc, TREE_TYPE (tem), arg1);\n+\t  tem2 = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (tem),\n+\t\t\t\t  tem, tem2);\n+\t  return fold_build2_loc (loc, EQ_EXPR, type, tem2,\n+\t\t\t\t  build_zero_cst (TREE_TYPE (tem)));\n \t}\n       /* Fold ~X & 1 as (X & 1) == 0.  */\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && integer_onep (arg1))\n \t{\n+\t  tree tem2;\n \t  tem = TREE_OPERAND (arg0, 0);\n-\t  return fold_build2_loc (loc, EQ_EXPR, type,\n-\t\t\t      fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (tem), tem,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (tem), 1)),\n-\t\t\t      build_int_cst (TREE_TYPE (tem), 0));\n+\t  tem2 = fold_convert_loc (loc, TREE_TYPE (tem), arg1);\n+\t  tem2 = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (tem),\n+\t\t\t\t  tem, tem2);\n+\t  return fold_build2_loc (loc, EQ_EXPR, type, tem2,\n+\t\t\t\t  build_zero_cst (TREE_TYPE (tem)));\n \t}\n       /* Fold !X & 1 as X == 0.  */\n       if (TREE_CODE (arg0) == TRUTH_NOT_EXPR\n \t  && integer_onep (arg1))\n \t{\n \t  tem = TREE_OPERAND (arg0, 0);\n \t  return fold_build2_loc (loc, EQ_EXPR, type, tem,\n-\t\t\t\t  build_int_cst (TREE_TYPE (tem), 0));\n+\t\t\t\t  build_zero_cst (TREE_TYPE (tem)));\n \t}\n \n       /* Fold (X ^ Y) & Y as ~X & Y.  */\n@@ -12893,13 +12897,13 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n \treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t\tbuild_int_cst (TREE_TYPE (arg0), 0));\n+\t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n       /* Likewise (X ^ Y) == X becomes Y == 0.  X has no side-effects.  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n \t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n \treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 1),\n-\t\t\t\tbuild_int_cst (TREE_TYPE (arg0), 0));\n+\t\t\t\tbuild_zero_cst (TREE_TYPE (arg0)));\n \n       /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n@@ -12987,7 +12991,7 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t\t\t  BIT_XOR_EXPR, itype,\n \t\t\t\t\t\t\t  arg00, arg10),\n \t\t\t\t\t     arg01),\n-\t\t\t\tbuild_int_cst (itype, 0));\n+\t\t\t\tbuild_zero_cst (itype));\n \n \t  if (operand_equal_p (arg01, arg10, 0))\n \t    return fold_build2_loc (loc, code, type,\n@@ -12996,7 +13000,7 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t\t\t  BIT_XOR_EXPR, itype,\n \t\t\t\t\t\t\t  arg00, arg11),\n \t\t\t\t\t     arg01),\n-\t\t\t\tbuild_int_cst (itype, 0));\n+\t\t\t\tbuild_zero_cst (itype));\n \n \t  if (operand_equal_p (arg00, arg11, 0))\n \t    return fold_build2_loc (loc, code, type,\n@@ -13005,7 +13009,7 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t\t\t  BIT_XOR_EXPR, itype,\n \t\t\t\t\t\t\t  arg01, arg10),\n \t\t\t\t\t     arg00),\n-\t\t\t\tbuild_int_cst (itype, 0));\n+\t\t\t\tbuild_zero_cst (itype));\n \n \t  if (operand_equal_p (arg00, arg10, 0))\n \t    return fold_build2_loc (loc, code, type,\n@@ -13014,7 +13018,7 @@ fold_binary_loc (location_t loc,\n \t\t\t\t\t\t\t  BIT_XOR_EXPR, itype,\n \t\t\t\t\t\t\t  arg01, arg11),\n \t\t\t\t\t     arg00),\n-\t\t\t\tbuild_int_cst (itype, 0));\n+\t\t\t\tbuild_zero_cst (itype));\n \t}\n \n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n@@ -13492,7 +13496,7 @@ fold_binary_loc (location_t loc,\n \treturn build2_loc (loc, code == LT_EXPR ? EQ_EXPR : NE_EXPR, type,\n \t\t\t   build2 (RSHIFT_EXPR, TREE_TYPE (arg0), arg0,\n \t\t\t\t   TREE_OPERAND (arg1, 1)),\n-\t\t\t   build_int_cst (TREE_TYPE (arg0), 0));\n+\t\t\t   build_zero_cst (TREE_TYPE (arg0)));\n \n       if ((code == LT_EXPR || code == GE_EXPR)\n \t  && TYPE_UNSIGNED (TREE_TYPE (arg0))\n@@ -13504,7 +13508,7 @@ fold_binary_loc (location_t loc,\n \t\t\tTREE_OPERAND (TREE_OPERAND (arg1, 0), 1));\n \t  return build2_loc (loc, code == LT_EXPR ? EQ_EXPR : NE_EXPR, type,\n \t\t\t     fold_convert_loc (loc, TREE_TYPE (arg0), tem),\n-\t\t\t     build_int_cst (TREE_TYPE (arg0), 0));\n+\t\t\t     build_zero_cst (TREE_TYPE (arg0)));\n \t}\n \n       return NULL_TREE;"}, {"sha": "c50ae2f91a0f45314cee68155bf40e5a917728df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27edb974ee6ab6c0be6118835e6a7b395899531a", "patch": "@@ -1,3 +1,9 @@\n+2012-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53410\n+\t* gcc.c-torture/compile/pr53410-1.c: New test.\n+\t* gcc.c-torture/compile/pr53410-2.c: New test.\n+\n 2012-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/53425"}, {"sha": "48a014e2ae93664520f8887ecab69aa801f051bf", "filename": "gcc/testsuite/gcc.c-torture/compile/pr53410-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-1.c?ref=27edb974ee6ab6c0be6118835e6a7b395899531a", "patch": "@@ -0,0 +1,10 @@\n+/* PR tree-optimization/53410 */\n+\n+int *a, b, c, d;\n+\n+void\n+foo (void)\n+{\n+  for (; d <= 0; d++)\n+    b &= ((a || d) ^ c) == 1;\n+}"}, {"sha": "06aa7fe1ca50bdc9ea67300fa98c1ebeb9806c0d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr53410-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27edb974ee6ab6c0be6118835e6a7b395899531a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53410-2.c?ref=27edb974ee6ab6c0be6118835e6a7b395899531a", "patch": "@@ -0,0 +1,64 @@\n+/* PR tree-optimization/53410 */\n+\n+typedef int V __attribute__((vector_size (4 * sizeof (int))));\n+typedef unsigned int W __attribute__((vector_size (4 * sizeof (int))));\n+\n+void\n+f1 (V *p)\n+{\n+  *p = (*p & ((V) { 1, 1, 1, 1 })) ^ ((V) { 1, 1, 1, 1});\n+}\n+\n+void\n+f2 (V *p)\n+{\n+  *p = (*p ^ ((V) { 1, 1, 1, 1 })) & ((V) { 1, 1, 1, 1});\n+}\n+\n+void\n+f3 (V *p)\n+{\n+  *p = (~*p) & ((V) { 1, 1, 1, 1 });\n+}\n+\n+void\n+f4 (V *p, V *q)\n+{\n+  *p = (*p ^ *q) == *q;\n+}\n+\n+void\n+f5 (V *p, V *q)\n+{\n+  *p = (*p ^ *q) == *p;\n+}\n+\n+void\n+f6 (V *p, V *q, V *r)\n+{\n+  *p = (*p & *r) == (*q & *r);\n+}\n+\n+void\n+f7 (V *p, V *q, V *r)\n+{\n+  *p = (*p & *r) == (*r & *q);\n+}\n+\n+void\n+f8 (V *p, V *q, V *r)\n+{\n+  *p = (*r & *p) == (*q & *r);\n+}\n+\n+void\n+f9 (V *p, V *q, V *r)\n+{\n+  *p = (*r & *p) == (*r & *q);\n+}\n+\n+void\n+f10 (W *p, W *q)\n+{\n+  *p = *p < (((const W) { 1U, 1U, 1U, 1U }) << *q);\n+}"}]}