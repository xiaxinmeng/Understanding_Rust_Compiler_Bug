{"sha": "16c848090f237c2398930b8c0ef75acebf4fa44d", "node_id": "C_kwDOANBUbNoAKDE2Yzg0ODA5MGYyMzdjMjM5ODkzMGI4YzBlZjc1YWNlYmY0ZmE0NGQ", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-13T16:29:26Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-12-13T16:30:13Z"}, "message": "Add -fipa-strict-aliasing\n\ngcc/ChangeLog:\n\n2021-12-13  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* common.opt: Add -fipa-strict-aliasing.\n\t* doc/invoke.texi: Document -fipa-strict-aliasing.\n\t* ipa-modref.c (modref_access_analysis::record_access): Honor\n\t-fipa-strict-aliasing.\n\t(modref_access_analysis::record_access_lto): Likewise.", "tree": {"sha": "a4f3291b1af698d22a2ad009f2b08ffab81d3950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4f3291b1af698d22a2ad009f2b08ffab81d3950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c848090f237c2398930b8c0ef75acebf4fa44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c848090f237c2398930b8c0ef75acebf4fa44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c848090f237c2398930b8c0ef75acebf4fa44d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c848090f237c2398930b8c0ef75acebf4fa44d/comments", "author": null, "committer": null, "parents": [{"sha": "5954b4d415f6424f1232c6b22a772ce184773f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5954b4d415f6424f1232c6b22a772ce184773f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5954b4d415f6424f1232c6b22a772ce184773f54"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "8f8fc2f9ee76bb5b6839b90e8aff74dadcf52928", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=16c848090f237c2398930b8c0ef75acebf4fa44d", "patch": "@@ -1945,6 +1945,10 @@ fira-algorithm=\n Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB) Optimization\n -fira-algorithm=[CB|priority]\tSet the used IRA algorithm.\n \n+fipa-strict-aliasing\n+Common Var(flag_ipa_strict_aliasing) Init(1) Optimization\n+Assume strict aliasing rules apply across (uninlined) function boundaries.\n+\n Enum\n Name(ira_algorithm) Type(enum ira_algorithm) UnknownError(unknown IRA algorithm %qs)\n "}, {"sha": "80c36b9abe0875b82d93934bcbe2901d930abf18", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=16c848090f237c2398930b8c0ef75acebf4fa44d", "patch": "@@ -570,7 +570,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsingle-precision-constant  -fsplit-ivs-in-unroller  -fsplit-loops@gol\n -fsplit-paths @gol\n -fsplit-wide-types  -fsplit-wide-types-early  -fssa-backprop  -fssa-phiopt @gol\n--fstdarg-opt  -fstore-merging  -fstrict-aliasing @gol\n+-fstdarg-opt  -fstore-merging  -fstrict-aliasing -fipa-strict-aliasing @gol\n -fthread-jumps  -ftracer  -ftree-bit-ccp @gol\n -ftree-builtin-call-dce  -ftree-ccp  -ftree-ch @gol\n -ftree-coalesce-vars  -ftree-copy-prop  -ftree-dce  -ftree-dominator-opts @gol\n@@ -12423,6 +12423,16 @@ int f() @{\n The @option{-fstrict-aliasing} option is enabled at levels\n @option{-O2}, @option{-O3}, @option{-Os}.\n \n+@item -fipa-strict-aliasing\n+@opindex fipa-strict-aliasing\n+Constrols whether rules of @option{-fstrict-aliasing} are applied across\n+function boundaries.  Note that if multiple functions gets inlined into a\n+signle function the memory accesses are no longer considred to be crossing a\n+function bounday.\n+\n+The @option{-fipa-strict-aliasing} option is enabled by default and is\n+effective only in combination with @option{-fstrict-aliasing}.\n+\n @item -falign-functions\n @itemx -falign-functions=@var{n}\n @itemx -falign-functions=@var{n}:@var{m}"}, {"sha": "d6bd9d3327843da188bed2f2b67263707b4d5d76", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c848090f237c2398930b8c0ef75acebf4fa44d/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=16c848090f237c2398930b8c0ef75acebf4fa44d", "patch": "@@ -999,9 +999,11 @@ modref_access_analysis::record_access (modref_records *tt,\n \t\t\t\t       ao_ref *ref,\n \t\t\t\t       modref_access_node &a)\n {\n-  alias_set_type base_set = !flag_strict_aliasing ? 0\n+  alias_set_type base_set = !flag_strict_aliasing\n+\t\t\t    || !flag_ipa_strict_aliasing ? 0\n \t\t\t    : ao_ref_base_alias_set (ref);\n-  alias_set_type ref_set = !flag_strict_aliasing ? 0\n+  alias_set_type ref_set = !flag_strict_aliasing\n+\t\t\t   || !flag_ipa_strict_aliasing ? 0\n \t\t\t    : (ao_ref_alias_set (ref));\n   if (dump_file)\n     {\n@@ -1021,7 +1023,7 @@ modref_access_analysis::record_access_lto (modref_records_lto *tt, ao_ref *ref,\n   /* get_alias_set sometimes use different type to compute the alias set\n      than TREE_TYPE (base).  Do same adjustments.  */\n   tree base_type = NULL_TREE, ref_type = NULL_TREE;\n-  if (flag_strict_aliasing)\n+  if (flag_strict_aliasing && flag_ipa_strict_aliasing)\n     {\n       tree base;\n "}]}