{"sha": "7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4OWU0ODE4YTBmYjBhMmQ5NDRhYjZlYjI5MDdhMzJkMjM5M2ZiOA==", "commit": {"author": {"name": "Robert Schuster", "email": "thebohemian@gmx.net", "date": "2005-04-29T06:11:27Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-29T06:11:27Z"}, "message": "2005-04-29  Robert Schuster  <thebohemian@gmx.net>\n\n\t* java/beans/FeatureDescriptor.java:\n\t(getShortDescription): Implemented fallback mechanism and fixed\n\tdocumentation (fixes bug #12637).\n\t(getDisplayName): Dito.\n\n2005-04-29  Robert Schuster  <thebohemian@gmx.net>\n\n\t* java/beans/Introspector.java: Fixed bug #12624, BeanDescriptors\n\twill now be set correctly.\n\t(flushCaches): Now flushes all cached intermediate data.\n\nFrom-SVN: r98975", "tree": {"sha": "8b891280570aeee72e08a8b18e80a6cacbeefad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b891280570aeee72e08a8b18e80a6cacbeefad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/comments", "author": {"login": "thebohemian", "id": 336602, "node_id": "MDQ6VXNlcjMzNjYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/336602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thebohemian", "html_url": "https://github.com/thebohemian", "followers_url": "https://api.github.com/users/thebohemian/followers", "following_url": "https://api.github.com/users/thebohemian/following{/other_user}", "gists_url": "https://api.github.com/users/thebohemian/gists{/gist_id}", "starred_url": "https://api.github.com/users/thebohemian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thebohemian/subscriptions", "organizations_url": "https://api.github.com/users/thebohemian/orgs", "repos_url": "https://api.github.com/users/thebohemian/repos", "events_url": "https://api.github.com/users/thebohemian/events{/privacy}", "received_events_url": "https://api.github.com/users/thebohemian/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7bfcc32d0a4b41e86c541cc48b80f529ca8818"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "9ea3de597cb50774fc11cc3d9f76cc416ed9b300", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "patch": "@@ -1,3 +1,16 @@\n+2005-04-29  Robert Schuster  <thebohemian@gmx.net>\n+\n+\t* java/beans/FeatureDescriptor.java:\n+\t(getShortDescription): Implemented fallback mechanism and fixed\n+\tdocumentation (fixes bug #12637).\n+\t(getDisplayName): Dito.\n+\n+2005-04-29  Robert Schuster  <thebohemian@gmx.net>\n+\n+\t* java/beans/Introspector.java: Fixed bug #12624, BeanDescriptors\n+\twill now be set correctly.\n+\t(flushCaches): Now flushes all cached intermediate data.\n+\n 2005-04-28  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java"}, {"sha": "0d20c5539ae4d6d54493cc4bc1417b9df8ab9f5b", "filename": "libjava/java/beans/FeatureDescriptor.java", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FFeatureDescriptor.java?ref=7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.FeatureDescriptor\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -57,7 +57,6 @@\n  *\n  * @author John Keiser\n  * @since 1.1\n- * @version 1.1.0, 31 May 1998\n  */\n \n public class FeatureDescriptor\n@@ -99,10 +98,13 @@ public void setName(String name)\n \n   /**\n    * Get the localized (display) name of this feature.\n+   *\n+   * @returns The localized display name of this feature or falls\n+   * back to the programmatic name.\n    */\n   public String getDisplayName()\n   {\n-    return displayName;\n+    return (displayName == null) ? name : displayName;\n   }\n \n   /**\n@@ -117,10 +119,14 @@ public void setDisplayName(String displayName)\n \n   /**\n    * Get the localized short description for this feature.\n+   *\n+   * @returns A short localized description of this feature or\n+   * what <code>getDisplayName</code> returns in case, that no short description\n+   * is available.\n    */\n   public String getShortDescription()\n   {\n-    return shortDescription;\n+    return (shortDescription == null) ? getDisplayName() : shortDescription;\n   }\n \n   /**"}, {"sha": "59e17d9e94b16fcfd362b05e086b42052d0be884", "filename": "libjava/java/beans/Introspector.java", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2Fjava%2Fbeans%2FIntrospector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7789e4818a0fb0a2d944ab6eb2907a32d2393fb8/libjava%2Fjava%2Fbeans%2FIntrospector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FIntrospector.java?ref=7789e4818a0fb0a2d944ab6eb2907a32d2393fb8", "patch": "@@ -220,6 +220,12 @@ public static BeanInfo getBeanInfo(Class beanClass)\n   public static void flushCaches()\n   {\n     beanInfoCache.clear();\n+\n+\t// Clears all the intermediate ExplicitInfo instances which\n+\t// have been created.\n+\t// This makes sure we have to retrieve stuff like BeanDescriptors\n+\t// again. (Remember that FeatureDescriptor can be modified by the user.)\n+\tExplicitInfo.flushCaches();\n   }\n \n   /**\n@@ -252,8 +258,8 @@ public static void flushFromCaches(Class clz)\n   public static BeanInfo getBeanInfo(Class beanClass, Class stopClass) \n     throws IntrospectionException \n   {\n-    ExplicitInfo explicit = new ExplicitInfo(beanClass,stopClass);\n-    \n+    ExplicitInfo explicit = new ExplicitInfo(beanClass, stopClass);\n+\n     IntrospectionIncubator ii = new IntrospectionIncubator();\n     ii.setPropertyStopClass(explicit.propertyStopClass);\n     ii.setEventStopClass(explicit.eventStopClass);\n@@ -303,15 +309,17 @@ public static BeanInfo getBeanInfo(Class beanClass, Class stopClass)\n \t  }\n       }\n     \n-    if(explicit.explicitBeanDescriptor != null) \n-      {\n-\tcurrentInfo.setBeanDescriptor(new BeanDescriptor(beanClass,explicit.explicitBeanDescriptor.getCustomizerClass()));\n-      } \n-    else \n-      {\n-\tcurrentInfo.setBeanDescriptor(new BeanDescriptor(beanClass,null));\n-      }\n-    \n+\t// Sets the info's BeanDescriptor to the one we extracted from the\n+\t// explicit BeanInfo instance(s) if they contained one. Otherwise we\n+\t// create the BeanDescriptor from scratch.\n+\t// Note: We do not create a copy the retrieved BeanDescriptor which will allow\n+\t// the user to modify the instance while it is cached. However this is how\n+\t// the RI does it.\n+\tcurrentInfo.setBeanDescriptor(\n+\t\t(explicit.explicitBeanDescriptor == null ? \n+\t\t\tnew BeanDescriptor(beanClass, null) :\n+\t\t\texplicit.explicitBeanDescriptor));\n+\n     currentInfo.setAdditionalBeanInfo(explicit.explicitBeanInfo);\n     currentInfo.setIcons(explicit.im);\n     \n@@ -388,21 +396,23 @@ public static String decapitalize(String name)\n \treturn null;\n       }\n   }\n-  \n+\n   static BeanInfo copyBeanInfo(BeanInfo b) \n   {\n     java.awt.Image[] icons = new java.awt.Image[4];\n     for(int i=1;i<=4;i++) \n       {\n \ticons[i-1] = b.getIcon(i);\n       }\n+\n     return new ExplicitBeanInfo(b.getBeanDescriptor(),\n \t\t\t\tb.getAdditionalBeanInfo(),\n \t\t\t\tb.getPropertyDescriptors(),\n \t\t\t\tb.getDefaultPropertyIndex(),\n \t\t\t\tb.getEventSetDescriptors(),\n \t\t\t\tb.getDefaultEventIndex(),\n-\t\t\t\tb.getMethodDescriptors(),icons);\n+\t\t\t\tb.getMethodDescriptors(),\n+\t\t\t\ticons);\n   }\n }\n \n@@ -423,22 +433,31 @@ class ExplicitInfo\n   Class propertyStopClass;\n   Class eventStopClass;\n   Class methodStopClass;\n-  \n+\n+  static Hashtable explicitBeanInfos = new Hashtable();\n+  static Vector emptyBeanInfos = new Vector();\n+\n   ExplicitInfo(Class beanClass, Class stopClass) \n   {\n     while(beanClass != null && !beanClass.equals(stopClass)) \n       {\n+\n \tBeanInfo explicit = findExplicitBeanInfo(beanClass);\n+\t\n+\n \tif(explicit != null) \n \t  {\n+\n \t    if(explicitBeanDescriptor == null) \n \t      {\n \t\texplicitBeanDescriptor = explicit.getBeanDescriptor();\n \t      }\n+\n \t    if(explicitBeanInfo == null) \n \t      {\n \t\texplicitBeanInfo = explicit.getAdditionalBeanInfo();\n \t      }\n+\n \t    if(explicitPropertyDescriptors == null) \n \t      {\n \t\tif(explicit.getPropertyDescriptors() != null) \n@@ -448,6 +467,7 @@ class ExplicitInfo\n \t\t    propertyStopClass = beanClass;\n \t\t  }\n \t      }\n+\n \t    if(explicitEventSetDescriptors == null) \n \t      {\n \t\tif(explicit.getEventSetDescriptors() != null) \n@@ -457,6 +477,7 @@ class ExplicitInfo\n \t\t    eventStopClass = beanClass;\n \t\t  }\n \t      }\n+\n \t    if(explicitMethodDescriptors == null) \n \t      {\n \t\tif(explicit.getMethodDescriptors() != null) \n@@ -465,6 +486,7 @@ class ExplicitInfo\n \t\t    methodStopClass = beanClass;\n \t\t  }\n \t      }\n+\n \t    if(im[0] == null && im[1] == null \n \t       && im[2] == null && im[3] == null) \n \t      {\n@@ -476,22 +498,30 @@ class ExplicitInfo\n \t  }\n \tbeanClass = beanClass.getSuperclass();\n       }\n+\n     if(propertyStopClass == null) \n       {\n \tpropertyStopClass = stopClass;\n       }\n+\n     if(eventStopClass == null) \n       {\n \teventStopClass = stopClass;\n       }\n+\n     if(methodStopClass == null) \n       {\n \tmethodStopClass = stopClass;\n       }\n   }\n   \n-  static Hashtable explicitBeanInfos = new Hashtable();\n-  static Vector emptyBeanInfos = new Vector();\n+  /** Throws away all cached data and makes sure we re-instantiate things\n+    * like BeanDescriptors again.\n+    */\n+  static void flushCaches() {\n+\texplicitBeanInfos.clear();\n+\temptyBeanInfos.clear();\n+  }\n   \n   static BeanInfo findExplicitBeanInfo(Class beanClass) \n   {\n@@ -539,9 +569,13 @@ static BeanInfo reallyFindExplicitBeanInfo(Class beanClass)\n \t\t\t\t     Introspector.beanInfoSearchPath[i] + \".\"\n \t\t\t\t     + newName);\n \n-\t    if (beanInfo != null)\n+\t\t// Returns the beanInfo if it exists and the described class matches\n+\t\t// the one we searched.\n+\t    if (beanInfo != null && beanInfo.getBeanDescriptor() != null &&\n+\t\t\tbeanInfo.getBeanDescriptor().getBeanClass() == beanClass)\n+\n \t      return beanInfo;\n-\t  } \n+\t  }\n       }\n \n     return beanInfo;"}]}