{"sha": "f1ca31177de94c951f65adf833c371d3f0e0a54a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjYTMxMTc3ZGU5NGM5NTFmNjVhZGY4MzNjMzcxZDNmMGUwYTU0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-20T10:35:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-20T10:35:04Z"}, "message": "dwarf2out.c (new_loc_descr_op_bit_piece): Add offset argument.\n\n\t* dwarf2out.c (new_loc_descr_op_bit_piece): Add offset\n\targument.  Don't use DW_OP_piece if offset is non-zero,\n\tput offset into second DW_OP_bit_piece argument.\n\t(dw_sra_loc_expr): Adjust callers.  For memory expressions\n\tcompute offset.\n\nFrom-SVN: r159623", "tree": {"sha": "ec4c83f44e2ec052fca18a299fa98d5792122a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4c83f44e2ec052fca18a299fa98d5792122a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ca31177de94c951f65adf833c371d3f0e0a54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ca31177de94c951f65adf833c371d3f0e0a54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ca31177de94c951f65adf833c371d3f0e0a54a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ca31177de94c951f65adf833c371d3f0e0a54a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "431043bdd73c0697871aa0698a7839df5ad55fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431043bdd73c0697871aa0698a7839df5ad55fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431043bdd73c0697871aa0698a7839df5ad55fc1"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "ee86787de69abe2b1af4b13b12cdd71337a9b499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ca31177de94c951f65adf833c371d3f0e0a54a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ca31177de94c951f65adf833c371d3f0e0a54a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1ca31177de94c951f65adf833c371d3f0e0a54a", "patch": "@@ -1,3 +1,11 @@\n+2010-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (new_loc_descr_op_bit_piece): Add offset\n+\targument.  Don't use DW_OP_piece if offset is non-zero,\n+\tput offset into second DW_OP_bit_piece argument.\n+\t(dw_sra_loc_expr): Adjust callers.  For memory expressions\n+\tcompute offset.\n+\n 2010-05-20  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/44202"}, {"sha": "1f6e9021d1678923c18a4eca4dd32b1c1f18f1b0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ca31177de94c951f65adf833c371d3f0e0a54a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ca31177de94c951f65adf833c371d3f0e0a54a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f1ca31177de94c951f65adf833c371d3f0e0a54a", "patch": "@@ -14364,12 +14364,12 @@ dw_loc_list_1 (tree loc, rtx varloc, int want_address,\n    if it is not possible.  */\n \n static dw_loc_descr_ref\n-new_loc_descr_op_bit_piece (HOST_WIDE_INT bitsize)\n+new_loc_descr_op_bit_piece (HOST_WIDE_INT bitsize, HOST_WIDE_INT offset)\n {\n-  if ((bitsize % BITS_PER_UNIT) == 0)\n+  if ((bitsize % BITS_PER_UNIT) == 0 && offset == 0)\n     return new_loc_descr (DW_OP_piece, bitsize / BITS_PER_UNIT, 0);\n   else if (dwarf_version >= 3 || !dwarf_strict)\n-    return new_loc_descr (DW_OP_bit_piece, bitsize, 0);\n+    return new_loc_descr (DW_OP_bit_piece, bitsize, offset);\n   else\n     return NULL;\n }\n@@ -14448,7 +14448,7 @@ dw_sra_loc_expr (tree decl, rtx loc)\n \t  if (padsize > decl_size)\n \t    return NULL;\n \t  decl_size -= padsize;\n-\t  *descr_tail = new_loc_descr_op_bit_piece (padsize);\n+\t  *descr_tail = new_loc_descr_op_bit_piece (padsize, 0);\n \t  if (*descr_tail == NULL)\n \t    return NULL;\n \t  descr_tail = &(*descr_tail)->dw_loc_next;\n@@ -14461,7 +14461,47 @@ dw_sra_loc_expr (tree decl, rtx loc)\n       decl_size -= bitsize;\n       if (last == NULL)\n \t{\n-\t  *descr_tail = new_loc_descr_op_bit_piece (bitsize);\n+\t  HOST_WIDE_INT offset = 0;\n+\t  if (GET_CODE (varloc) == VAR_LOCATION\n+\t      && GET_CODE (PAT_VAR_LOCATION_LOC (varloc)) != PARALLEL)\n+\t    {\n+\t      varloc = PAT_VAR_LOCATION_LOC (varloc);\n+\t      if (GET_CODE (varloc) == EXPR_LIST)\n+\t\tvarloc = XEXP (varloc, 0);\n+\t    }\n+\t  do \n+\t    {\n+\t      if (GET_CODE (varloc) == CONST\n+\t\t  || GET_CODE (varloc) == SIGN_EXTEND\n+\t\t  || GET_CODE (varloc) == ZERO_EXTEND)\n+\t\tvarloc = XEXP (varloc, 0);\n+\t      else if (GET_CODE (varloc) == SUBREG)\n+\t\tvarloc = SUBREG_REG (varloc);\n+\t      else\n+\t\tbreak;\n+\t    }\n+\t  while (1);\n+\t  /* DW_OP_bit_size offset should be zero for register\n+\t     or implicit location descriptions and empty location\n+\t     descriptions, but for memory addresses needs big endian\n+\t     adjustment.  */\n+\t  if (MEM_P (varloc))\n+\t    {\n+\t      unsigned HOST_WIDE_INT memsize\n+\t\t= INTVAL (MEM_SIZE (varloc)) * BITS_PER_UNIT;\n+\t      if (memsize != bitsize)\n+\t\t{\n+\t\t  if (BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN\n+\t\t      && (memsize > BITS_PER_WORD || bitsize > BITS_PER_WORD))\n+\t\t    return NULL;\n+\t\t  if (memsize < bitsize)\n+\t\t    return NULL;\n+\t\t  if (BITS_BIG_ENDIAN)\n+\t\t    offset = memsize - bitsize;\n+\t\t}\n+\t    }\n+\n+\t  *descr_tail = new_loc_descr_op_bit_piece (bitsize, offset);\n \t  if (*descr_tail == NULL)\n \t    return NULL;\n \t  descr_tail = &(*descr_tail)->dw_loc_next;\n@@ -14472,7 +14512,7 @@ dw_sra_loc_expr (tree decl, rtx loc)\n      the decl.  */\n   if (descr != NULL && decl_size != 0)\n     {\n-      *descr_tail = new_loc_descr_op_bit_piece (decl_size);\n+      *descr_tail = new_loc_descr_op_bit_piece (decl_size, 0);\n       if (*descr_tail == NULL)\n \treturn NULL;\n     }"}]}