{"sha": "d51157deeeaa2095a645626d4136ba9dd02285c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMTU3ZGVlZWFhMjA5NWE2NDU2MjZkNDEzNmJhOWRkMDIyODVjNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-05-27T17:23:11Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-05-27T17:23:11Z"}, "message": "tree-vrp.c (execute_vrp): Do not check whether current_loops == NULL.\n\n\t* tree-vrp.c (execute_vrp): Do not check whether current_loops == NULL.\n\t* tree-chrec.c (evolution_function_is_invariant_rec_p): Ditto.\n\t* ifcvt.c (if_convert): Ditto.\n\t* tree-ssa-threadupdate.c (thread_block): Ditto.\n\t(thread_through_all_blocks): Ditto.  Assert that loops were analysed.\n\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n\tverify_loop_closed_ssa): Check number_of_loops instead of current_loops.\n\t* predict.c (tree_estimate_probability): Ditto.\n\t* tree-if-conv.c (main_tree_if_conversion): Ditto.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n\t* modulo-sched.c (sms_schedule): Ditto.\n\t* tree-scalar-evolution.c (scev_const_prop): Ditto.\n\t(scev_finalize): Do not do anything if scev analysis was not\n\tinitialized.\n\t* cfgloopanal.c (mark_irreducible_loops): Do not check whether\n\tcurrent_loops == NULL.\n\t(mark_loop_exit_edges): Check number_of_loops instead of current_loops.\n\t* loop-init.c (loop_optimizer_init): Do not free current_loops when\n\tthere are no loops.\n\t(loop_optimizer_finalize): Assert that loops were analyzed.\n\t(rtl_move_loop_invariants, rtl_unswitch, rtl_unroll_and_peel_loops,\n\trtl_doloop): Check number_of_loops instead of current_loops.\n\t* tree-ssa-loop.c (tree_loop_optimizer_init): Do not check whether\n\tcurrent_loops == NULL.\n\t(tree_ssa_loop_init, tree_ssa_loop_im, tree_ssa_loop_unswitch,\n\tgate_tree_vectorize tree_linear_transform, check_data_deps,\n\ttree_ssa_loop_ivcanon, tree_ssa_empty_loop, tree_ssa_loop_bounds,\n\ttree_complete_unroll, tree_ssa_loop_prefetch, tree_ssa_loop_ivopts):\n\tCheck number_of_loops instead of current_loops.\n\t(tree_ssa_loop_done): Do not check whether current_loops == NULL.\n\t* tree-ssa-pre.c (fini_pre): Do not take do_fre argument.  Always\n\tfree loops if available.\n\t(execute_pre): Do not pass do_fre to fini_pre.\n\nFrom-SVN: r125114", "tree": {"sha": "877b6d8a4f3bb9732c119f5030e7349e852d40a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/877b6d8a4f3bb9732c119f5030e7349e852d40a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51157deeeaa2095a645626d4136ba9dd02285c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51157deeeaa2095a645626d4136ba9dd02285c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51157deeeaa2095a645626d4136ba9dd02285c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51157deeeaa2095a645626d4136ba9dd02285c4/comments", "author": null, "committer": null, "parents": [{"sha": "67a7356b320482dfc404f57d7f23615076934f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a7356b320482dfc404f57d7f23615076934f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a7356b320482dfc404f57d7f23615076934f2c"}], "stats": {"total": 242, "additions": 124, "deletions": 118}, "files": [{"sha": "d162264a7c41fc6a26d76a047a35fe45e9be7233", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -1,3 +1,39 @@\n+2007-05-27  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-vrp.c (execute_vrp): Do not check whether current_loops == NULL.\n+\t* tree-chrec.c (evolution_function_is_invariant_rec_p): Ditto.\n+\t* ifcvt.c (if_convert): Ditto.\n+\t* tree-ssa-threadupdate.c (thread_block): Ditto.\n+\t(thread_through_all_blocks): Ditto.  Assert that loops were analysed.\n+\t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n+\tverify_loop_closed_ssa): Check number_of_loops instead of current_loops.\n+\t* predict.c (tree_estimate_probability): Ditto.\n+\t* tree-if-conv.c (main_tree_if_conversion): Ditto.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Ditto.\n+\t* modulo-sched.c (sms_schedule): Ditto.\n+\t* tree-scalar-evolution.c (scev_const_prop): Ditto.\n+\t(scev_finalize): Do not do anything if scev analysis was not\n+\tinitialized.\n+\t* cfgloopanal.c (mark_irreducible_loops): Do not check whether\n+\tcurrent_loops == NULL.\n+\t(mark_loop_exit_edges): Check number_of_loops instead of current_loops.\n+\t* loop-init.c (loop_optimizer_init): Do not free current_loops when\n+\tthere are no loops.\n+\t(loop_optimizer_finalize): Assert that loops were analyzed.\n+\t(rtl_move_loop_invariants, rtl_unswitch, rtl_unroll_and_peel_loops,\n+\trtl_doloop): Check number_of_loops instead of current_loops.\n+\t* tree-ssa-loop.c (tree_loop_optimizer_init): Do not check whether\n+\tcurrent_loops == NULL.\n+\t(tree_ssa_loop_init, tree_ssa_loop_im, tree_ssa_loop_unswitch,\n+\tgate_tree_vectorize tree_linear_transform, check_data_deps,\n+\ttree_ssa_loop_ivcanon, tree_ssa_empty_loop, tree_ssa_loop_bounds,\n+\ttree_complete_unroll, tree_ssa_loop_prefetch, tree_ssa_loop_ivopts):\n+\tCheck number_of_loops instead of current_loops.\n+\t(tree_ssa_loop_done): Do not check whether current_loops == NULL.\n+\t* tree-ssa-pre.c (fini_pre): Do not take do_fre argument.  Always\n+\tfree loops if available.\n+\t(execute_pre): Do not pass do_fre to fini_pre.\n+\n 2007-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR middle-end/32083"}, {"sha": "760542a0ba864cb4ade955d28069315733f03352", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -273,14 +273,16 @@ mark_irreducible_loops (void)\n   edge_iterator ei;\n   int i, src, dest;\n   struct graph *g;\n-  int num = current_loops ? number_of_loops () : 1;\n+  int num = number_of_loops ();\n   int *queue1 = XNEWVEC (int, last_basic_block + num);\n   int *queue2 = XNEWVEC (int, last_basic_block + num);\n   int nq;\n   unsigned depth;\n   struct loop *cloop, *loop;\n   loop_iterator li;\n \n+  gcc_assert (current_loops != NULL);\n+\n   /* Reset the flags.  */\n   FOR_BB_BETWEEN (act, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR, next_bb)\n     {\n@@ -302,36 +304,32 @@ mark_irreducible_loops (void)\n \tsrc = BB_REPR (act);\n \tdest = BB_REPR (e->dest);\n \n-\tif (current_loops)\n-\t  {\n-\t    /* Ignore latch edges.  */\n-\t    if (e->dest->loop_father->header == e->dest\n-\t\t&& e->dest->loop_father->latch == act)\n-\t      continue;\n+\t/* Ignore latch edges.  */\n+\tif (e->dest->loop_father->header == e->dest\n+\t    && e->dest->loop_father->latch == act)\n+\t  continue;\n+\n+\t/* Edges inside a single loop should be left where they are.  Edges\n+\t   to subloop headers should lead to representative of the subloop,\n+\t   but from the same place.\n \n-\t    /* Edges inside a single loop should be left where they are.  Edges\n-\t       to subloop headers should lead to representative of the subloop,\n-\t       but from the same place.\n-\n-\t       Edges exiting loops should lead from representative\n-\t       of the son of nearest common ancestor of the loops in that\n-\t       act lays.  */\n-\n-\t    if (e->dest->loop_father->header == e->dest)\n-\t      dest = LOOP_REPR (e->dest->loop_father);\n-\n-\t    if (!flow_bb_inside_loop_p (act->loop_father, e->dest))\n-\t      {\n-\t\tdepth = 1 + loop_depth (find_common_loop (act->loop_father,\n-\t\t\t\t\t\te->dest->loop_father));\n-\t\tif (depth == loop_depth (act->loop_father))\n-\t\t  cloop = act->loop_father;\n-\t\telse\n-\t\t  cloop = VEC_index (loop_p, act->loop_father->superloops,\n-\t\t\t\t     depth);\n-\n-\t\tsrc = LOOP_REPR (cloop);\n-\t      }\n+\t   Edges exiting loops should lead from representative\n+\t   of the son of nearest common ancestor of the loops in that\n+\t   act lays.  */\n+\n+\tif (e->dest->loop_father->header == e->dest)\n+\t  dest = LOOP_REPR (e->dest->loop_father);\n+\n+\tif (!flow_bb_inside_loop_p (act->loop_father, e->dest))\n+\t  {\n+\t    depth = 1 + loop_depth (find_common_loop (act->loop_father,\n+\t\t\t\t\t\t      e->dest->loop_father));\n+\t    if (depth == loop_depth (act->loop_father))\n+\t      cloop = act->loop_father;\n+\t    else\n+\t      cloop = VEC_index (loop_p, act->loop_father->superloops, depth);\n+\n+\t    src = LOOP_REPR (cloop);\n \t  }\n \n \tadd_edge (g, src, dest, e);\n@@ -347,12 +345,9 @@ mark_irreducible_loops (void)\n       queue1[nq++] = BB_REPR (act);\n     }\n \n-  if (current_loops)\n+  FOR_EACH_LOOP (li, loop, 0)\n     {\n-      FOR_EACH_LOOP (li, loop, 0)\n-\t{\n-\t  queue1[nq++] = LOOP_REPR (loop);\n-\t}\n+      queue1[nq++] = LOOP_REPR (loop);\n     }\n   dfs (g, queue1, nq, queue2, false);\n   for (i = 0; i < nq; i++)\n@@ -366,8 +361,7 @@ mark_irreducible_loops (void)\n   free (queue1);\n   free (queue2);\n \n-  if (current_loops)\n-    current_loops->state |= LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS;\n+  current_loops->state |= LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS;\n }\n \n /* Counts number of insns inside LOOP.  */\n@@ -605,7 +599,7 @@ mark_loop_exit_edges (void)\n   basic_block bb;\n   edge e;\n \n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return;\n \n   FOR_EACH_BB (bb)"}, {"sha": "28f510cda29f619020368f43d62d7dddd923d3e2", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -3953,11 +3953,8 @@ if_convert (int x_life_data_ok)\n   gcc_assert (! no_new_pseudos || reload_completed);\n \n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n-  if (current_loops)\n-    {\n-      mark_loop_exit_edges ();\n-      loop_optimizer_finalize ();\n-    }\n+  mark_loop_exit_edges ();\n+  loop_optimizer_finalize ();\n   free_dominance_info (CDI_DOMINATORS);\n \n   /* Compute postdominators if we think we'll use them.  */"}, {"sha": "d78b5ace52e25821bd1a1d78197edc81c2cfa15f", "filename": "gcc/loop-init.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -51,14 +51,6 @@ loop_optimizer_init (unsigned flags)\n   flow_loops_find (loops);\n   current_loops = loops;\n \n-  if (number_of_loops () <= 1)\n-    {\n-      /* No loops (the 1 returned by number_of_loops corresponds to the fake\n-\t loop that we put as a root of the loop tree).  */\n-      loop_optimizer_finalize ();\n-      return;\n-    }\n-\n   if (flags & LOOPS_MAY_HAVE_MULTIPLE_LATCHES)\n     {\n       /* If the loops may have multiple latches, we cannot canonicalize\n@@ -105,8 +97,7 @@ loop_optimizer_finalize (void)\n   struct loop *loop;\n   basic_block bb;\n \n-  if (!current_loops)\n-    return;\n+  gcc_assert (current_loops != NULL);\n \n   FOR_EACH_LOOP (li, loop, 0)\n     {\n@@ -244,7 +235,7 @@ gate_rtl_move_loop_invariants (void)\n static unsigned int\n rtl_move_loop_invariants (void)\n {\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     move_loop_invariants ();\n   return 0;\n }\n@@ -277,7 +268,7 @@ gate_rtl_unswitch (void)\n static unsigned int\n rtl_unswitch (void)\n {\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     unswitch_loops ();\n   return 0;\n }\n@@ -310,7 +301,7 @@ gate_rtl_unroll_and_peel_loops (void)\n static unsigned int\n rtl_unroll_and_peel_loops (void)\n {\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     {\n       int flags = 0;\n \n@@ -359,7 +350,7 @@ static unsigned int\n rtl_doloop (void)\n {\n #ifdef HAVE_doloop_end\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     doloop_optimize_loops ();\n #endif\n   return 0;"}, {"sha": "3e14ff5ac825c480cb16df746bba44351fe6c878", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -893,8 +893,11 @@ sms_schedule (void)\n \n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t       | LOOPS_HAVE_RECORDED_EXITS);\n-  if (!current_loops)\n-    return;  /* There are no loops to schedule.  */\n+  if (number_of_loops () <= 1)\n+    {\n+      loop_optimizer_finalize ();\n+      return;  /* There are no loops to schedule.  */\n+    }\n \n   /* Initialize issue_rate.  */\n   if (targetm.sched.issue_rate)"}, {"sha": "0aa2c9537578a5ba182d45d826c9272b09077636", "filename": "gcc/predict.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -1353,7 +1353,7 @@ tree_estimate_probability (void)\n   basic_block bb;\n \n   loop_optimizer_init (0);\n-  if (current_loops && dump_file && (dump_flags & TDF_DETAILS))\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     flow_loops_dump (dump_file, NULL, 0);\n \n   add_noreturn_fake_exit_edges ();\n@@ -1368,7 +1368,7 @@ tree_estimate_probability (void)\n \n   mark_irreducible_loops ();\n   record_loop_exits ();\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     predict_loops ();\n \n   FOR_EACH_BB (bb)\n@@ -1731,7 +1731,7 @@ estimate_loops (void)\n   basic_block bb;\n \n   /* Start by estimating the frequencies in the loops.  */\n-  if (current_loops)\n+  if (number_of_loops () > 1)\n     estimate_loops_at_level (current_loops->tree_root->inner);\n \n   /* Now propagate the frequencies through all the blocks.  */"}, {"sha": "f55d004c8e9c1437e4b5982b2853fb829554cd3d", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -974,13 +974,7 @@ evolution_function_is_invariant_rec_p (tree chrec, int loopnum)\n bool\n evolution_function_is_invariant_p (tree chrec, int loopnum)\n {\n-  if (evolution_function_is_constant_p (chrec))\n-    return true;\n-  \n-  if (current_loops != NULL)\n-    return evolution_function_is_invariant_rec_p (chrec, loopnum);\n-\n-  return false;\n+  return evolution_function_is_invariant_rec_p (chrec, loopnum);\n }\n \n /* Determine whether the given tree is an affine multivariate"}, {"sha": "de2933e53ce2671a5e480d31dfb9ba0eaa1776e5", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -1105,7 +1105,7 @@ main_tree_if_conversion (void)\n   loop_iterator li;\n   struct loop *loop;\n \n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   FOR_EACH_LOOP (li, loop, 0)"}, {"sha": "fd559388d65f4c51b0bda0f2681c4fea9d6baf58", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -2863,6 +2863,8 @@ scev_analysis (void)\n void\n scev_finalize (void)\n {\n+  if (!scalar_evolution_info)\n+    return;\n   htab_delete (scalar_evolution_info);\n   BITMAP_FREE (already_instantiated);\n   scalar_evolution_info = NULL;\n@@ -2885,7 +2887,7 @@ scev_const_prop (void)\n   unsigned i;\n   loop_iterator li;\n \n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   FOR_EACH_BB (bb)"}, {"sha": "570ad268d2b76e7aee456a74b359b2579da0c954", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -133,8 +133,11 @@ copy_loop_headers (void)\n \n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t       | LOOPS_HAVE_SIMPLE_LATCHES);\n-  if (!current_loops)\n-    return 0;\n+  if (number_of_loops () <= 1)\n+    {\n+      loop_optimizer_finalize ();\n+      return 0;\n+    }\n \n #ifdef ENABLE_CHECKING\n   verify_loop_structure ();"}, {"sha": "a1d06911d6b93ff164ae29717e78d4a271d3f3e3", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -360,7 +360,8 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   unsigned i, old_num_ssa_names;\n   bitmap names_to_rename;\n \n-  if (!current_loops)\n+  current_loops->state |= LOOP_CLOSED_SSA;\n+  if (number_of_loops () <= 1)\n     return;\n \n   loop_exits = get_loops_exits ();\n@@ -389,8 +390,6 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   /* Fix up all the names found to be used outside their original\n      loops.  */\n   update_ssa (TODO_update_ssa);\n-\n-  current_loops->state |= LOOP_CLOSED_SSA;\n }\n \n /* Check invariants of the loop closed ssa form for the USE in BB.  */\n@@ -432,7 +431,7 @@ verify_loop_closed_ssa (void)\n   tree phi;\n   unsigned i;\n \n-  if (current_loops == NULL)\n+  if (number_of_loops () <= 1)\n     return;\n \n   verify_ssa (false);"}, {"sha": "3a8f5db5ae72c8b93eafa0d3de2c1334a8f6c1af", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -45,9 +45,6 @@ tree_loop_optimizer_init (void)\n {\n   loop_optimizer_init (LOOPS_NORMAL\n \t\t       | LOOPS_HAVE_RECORDED_EXITS);\n-  if (!current_loops)\n-    return;\n-\n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n }\n \n@@ -82,7 +79,7 @@ static unsigned int\n tree_ssa_loop_init (void)\n {\n   tree_loop_optimizer_init ();\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   scev_initialize ();\n@@ -111,7 +108,7 @@ struct tree_opt_pass pass_tree_loop_init =\n static unsigned int\n tree_ssa_loop_im (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   tree_ssa_lim ();\n@@ -146,7 +143,7 @@ struct tree_opt_pass pass_lim =\n static unsigned int\n tree_ssa_loop_unswitch (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   return tree_ssa_unswitch_loops ();\n@@ -223,7 +220,7 @@ tree_vectorize (void)\n static bool\n gate_tree_vectorize (void)\n {\n-  return flag_tree_vectorize && current_loops;\n+  return flag_tree_vectorize && number_of_loops () > 1;\n }\n \n struct tree_opt_pass pass_vectorize =\n@@ -249,7 +246,7 @@ struct tree_opt_pass pass_vectorize =\n static unsigned int\n tree_linear_transform (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   linear_transform_loops ();\n@@ -285,7 +282,7 @@ struct tree_opt_pass pass_linear_transform =\n static unsigned int\n check_data_deps (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   tree_check_data_deps ();\n@@ -320,7 +317,7 @@ struct tree_opt_pass pass_check_data_deps =\n static unsigned int\n tree_ssa_loop_ivcanon (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   return canonicalize_induction_variables ();\n@@ -381,7 +378,7 @@ struct tree_opt_pass pass_scev_cprop =\n static unsigned int\n tree_ssa_empty_loop (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   return remove_empty_loops ();\n@@ -410,7 +407,7 @@ struct tree_opt_pass pass_empty_loop =\n static unsigned int\n tree_ssa_loop_bounds (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   estimate_numbers_of_iterations ();\n@@ -440,7 +437,7 @@ struct tree_opt_pass pass_record_bounds =\n static unsigned int\n tree_complete_unroll (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   return tree_unroll_loops_completely (flag_unroll_loops\n@@ -477,7 +474,7 @@ struct tree_opt_pass pass_complete_unroll =\n static unsigned int\n tree_ssa_loop_prefetch (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   return tree_ssa_prefetch_arrays ();\n@@ -511,7 +508,7 @@ struct tree_opt_pass pass_loop_prefetch =\n static unsigned int\n tree_ssa_loop_ivopts (void)\n {\n-  if (!current_loops)\n+  if (number_of_loops () <= 1)\n     return 0;\n \n   tree_ssa_iv_optimize ();\n@@ -547,9 +544,6 @@ struct tree_opt_pass pass_iv_optimize =\n static unsigned int\n tree_ssa_loop_done (void)\n {\n-  if (!current_loops)\n-    return 0;\n-\n   free_numbers_of_iterations_estimates ();\n   scev_finalize ();\n   loop_optimizer_finalize ();"}, {"sha": "cdb6aa8e2e281bf9ce52ec8bd3ee2f15d371cddd", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -3801,7 +3801,7 @@ init_pre (bool do_fre)\n /* Deallocate data structures used by PRE.  */\n \n static void\n-fini_pre (bool do_fre)\n+fini_pre (void)\n {\n   basic_block bb;\n   unsigned int i;\n@@ -3849,7 +3849,7 @@ fini_pre (bool do_fre)\n \t  && TREE_CODE (SSA_NAME_VALUE (name)) == VALUE_HANDLE)\n \tSSA_NAME_VALUE (name) = NULL;\n     }\n-  if (!do_fre && current_loops)\n+  if (current_loops != NULL)\n     loop_optimizer_finalize ();\n }\n \n@@ -3915,7 +3915,7 @@ execute_pre (bool do_fre)\n       realify_fake_stores ();\n     }\n \n-  fini_pre (do_fre);\n+  fini_pre ();\n }\n \n /* Gate and execute functions for PRE.  */"}, {"sha": "815c84fb7b305bebc032bf4e01bfa6bfa397d2cf", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -530,7 +530,7 @@ thread_block (basic_block bb, bool noloop_only)\n   /* If we thread the latch of the loop to its exit, the loop ceases to\n      exist.  Make sure we do not restrict ourselves in order to preserve\n      this loop.  */\n-  if (current_loops && loop->header == bb)\n+  if (loop->header == bb)\n     {\n       e = loop_latch_edge (loop);\n       e2 = e->aux;\n@@ -552,7 +552,6 @@ thread_block (basic_block bb, bool noloop_only)\n \t  /* If NOLOOP_ONLY is true, we only allow threading through the\n \t     header of a loop to exit edges.  */\n \t  || (noloop_only\n-\t      && current_loops\n \t      && bb == bb->loop_father->header\n \t      && !loop_exit_edge_p (bb->loop_father, e2)))\n \t{\n@@ -1023,6 +1022,9 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   struct loop *loop;\n   loop_iterator li;\n \n+  /* We must know about loops in order to preserve them.  */\n+  gcc_assert (current_loops != NULL);\n+\n   if (threaded_edges == NULL)\n     return false;\n \n@@ -1046,16 +1048,13 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   /* Then perform the threading through loop headers.  We start with the\n      innermost loop, so that the changes in cfg we perform won't affect\n      further threading.  */\n-  if (current_loops)\n+  FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)\n     {\n-      FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)\n-\t{\n-\t  if (!loop->header\n-\t      || !bitmap_bit_p (threaded_blocks, loop->header->index))\n-\t    continue;\n+      if (!loop->header\n+\t  || !bitmap_bit_p (threaded_blocks, loop->header->index))\n+\tcontinue;\n \n-\t  retval |= thread_through_loop_header (loop, may_peel_loop_headers);\n-\t}\n+      retval |= thread_through_loop_header (loop, may_peel_loop_headers);\n     }\n \n   if (retval)"}, {"sha": "b62b3e1d70bea7fc484d31777ceae2c618eb0890", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51157deeeaa2095a645626d4136ba9dd02285c4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d51157deeeaa2095a645626d4136ba9dd02285c4", "patch": "@@ -5998,11 +5998,8 @@ static unsigned int\n execute_vrp (void)\n {\n   loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n-  if (current_loops)\n-    {\n-      rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n-      scev_initialize ();\n-    }\n+  rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n+  scev_initialize ();\n \n   insert_range_assertions ();\n \n@@ -6023,11 +6020,8 @@ execute_vrp (void)\n   update_ssa (TODO_update_ssa);\n \n   finalize_jump_threads ();\n-  if (current_loops)\n-    {\n-      scev_finalize ();\n-      loop_optimizer_finalize ();\n-    }\n+  scev_finalize ();\n+  loop_optimizer_finalize ();\n \n   return 0;\n }"}]}