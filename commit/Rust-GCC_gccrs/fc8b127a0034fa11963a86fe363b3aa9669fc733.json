{"sha": "fc8b127a0034fa11963a86fe363b3aa9669fc733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM4YjEyN2EwMDM0ZmExMTk2M2E4NmZlMzYzYjNhYTk2NjlmYzczMw==", "commit": {"author": {"name": "Adhemerval Zanella", "email": "azanella@linux.vnet.ibm.com", "date": "2014-11-15T23:17:46Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2014-11-15T23:17:46Z"}, "message": "2014-11-15  Adhemerval Zanella  <azanella@linux.vnet.ibm.com>\n\n\t* gcc.dg/atomic/c11-atomic-exec-5.c\n\t(test_main_long_double_add_overflow): Only actually define if\n\tLDBL_MANT_DIG != 106.\n\t(test_main_complex_long_double_add_overflow): Likewise.\n\t(test_main_long_double_sub_overflow): Likewise.\n\t(test_main_complex_long_double_sub_overflow): Likewise.\n\n\t(NOT_LDBL_EPSILON_2): Likewise.\n\t(NOT_MINUS_LDBL_EPSILON_2): Likewise.\n\nFrom-SVN: r217614", "tree": {"sha": "ae8881b6797e904a1e74e30a2aa6a3f5c504e954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8881b6797e904a1e74e30a2aa6a3f5c504e954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8b127a0034fa11963a86fe363b3aa9669fc733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b127a0034fa11963a86fe363b3aa9669fc733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8b127a0034fa11963a86fe363b3aa9669fc733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8b127a0034fa11963a86fe363b3aa9669fc733/comments", "author": null, "committer": null, "parents": [{"sha": "4ecb3002c5c6d6e2a3210920c3d9bb1c3687fbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecb3002c5c6d6e2a3210920c3d9bb1c3687fbaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ecb3002c5c6d6e2a3210920c3d9bb1c3687fbaf"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "4b55f47f7b245ec2308316416d9e61be33295f3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b127a0034fa11963a86fe363b3aa9669fc733/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b127a0034fa11963a86fe363b3aa9669fc733/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc8b127a0034fa11963a86fe363b3aa9669fc733", "patch": "@@ -1,3 +1,15 @@\n+2014-11-15  Adhemerval Zanella  <azanella@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/atomic/c11-atomic-exec-5.c\n+\t(test_main_long_double_add_overflow): Only actually define if\n+\tLDBL_MANT_DIG != 106.\n+\t(test_main_complex_long_double_add_overflow): Likewise.\n+\t(test_main_long_double_sub_overflow): Likewise.\n+\t(test_main_complex_long_double_sub_overflow): Likewise.\n+\n+\t(NOT_LDBL_EPSILON_2): Likewise.\n+\t(NOT_MINUS_LDBL_EPSILON_2): Likewise.\n+\n 2014-11-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sibcall-1.c: Don't run on x32 targets,"}, {"sha": "d8bddfd9961ef8473cb6c21999f415671dfe1e03", "filename": "gcc/testsuite/gcc.dg/atomic/c11-atomic-exec-5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8b127a0034fa11963a86fe363b3aa9669fc733/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8b127a0034fa11963a86fe363b3aa9669fc733/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c?ref=fc8b127a0034fa11963a86fe363b3aa9669fc733", "patch": "@@ -331,11 +331,11 @@ TEST_FUNCS (complex_double_div_overflow, _Complex double, , /= DBL_MIN, 0,\n TEST_FUNCS (long_double_add_invalid, long double, , += __builtin_infl (), 0,\n \t    0, __builtin_isinf, 0,\n \t    -__builtin_infl (), FE_INVALID)\n+#if LDBL_MANT_DIG != 106\n TEST_FUNCS (long_double_add_overflow, long double, , += LDBL_MAX, 0,\n \t    LDBL_MAX, __builtin_isinf, FE_OVERFLOW | FE_INEXACT,\n \t    0, 0)\n #define NOT_LDBL_EPSILON_2(X) ((X) != LDBL_EPSILON / 2)\n-#if LDBL_MANT_DIG != 106\n TEST_FUNCS (long_double_add_inexact, long double, , += LDBL_EPSILON / 2, 0,\n \t    1.0L, NOT_LDBL_EPSILON_2, FE_INEXACT,\n \t    0, 0)\n@@ -348,18 +348,18 @@ TEST_FUNCS (long_double_preinc_inexact, long double, ++, , 0,\n TEST_FUNCS (long_double_postinc_inexact, long double, , ++, 0,\n \t    LDBL_EPSILON / 2, NOT_MINUS_1, FE_INEXACT,\n \t    -1, 0)\n-#endif\n TEST_FUNCS (complex_long_double_add_overflow, _Complex long double, , += LDBL_MAX, 0,\n \t    LDBL_MAX, REAL_ISINF, FE_OVERFLOW | FE_INEXACT,\n \t    0, 0)\n+#endif\n TEST_FUNCS (long_double_sub_invalid, long double, , -= __builtin_infl (), 0,\n \t    0, __builtin_isinf, 0,\n \t    __builtin_infl (), FE_INVALID)\n+#if LDBL_MANT_DIG != 106\n TEST_FUNCS (long_double_sub_overflow, long double, , -= LDBL_MAX, 0,\n \t    -LDBL_MAX, __builtin_isinf, FE_OVERFLOW | FE_INEXACT,\n \t    0, 0)\n #define NOT_MINUS_LDBL_EPSILON_2(X) ((X) != -LDBL_EPSILON / 2)\n-#if LDBL_MANT_DIG != 106\n TEST_FUNCS (long_double_sub_inexact, long double, , -= LDBL_EPSILON / 2, 0,\n \t    -1.0L, NOT_MINUS_LDBL_EPSILON_2, FE_INEXACT,\n \t    0, 0)\n@@ -372,10 +372,10 @@ TEST_FUNCS (long_double_predec_inexact, long double, --, , 0,\n TEST_FUNCS (long_double_postdec_inexact, long double, , --, 0,\n \t    -LDBL_EPSILON / 2, NOT_1, FE_INEXACT,\n \t    1, 0)\n-#endif\n TEST_FUNCS (complex_long_double_sub_overflow, _Complex long double, , -= LDBL_MAX, 0,\n \t    -LDBL_MAX, REAL_ISINF, FE_OVERFLOW | FE_INEXACT,\n \t    0, 0)\n+#endif\n TEST_FUNCS (long_double_mul_invalid, long double, , *= __builtin_infl (), 0,\n \t    __builtin_infl (), __builtin_isinf, 0,\n \t    0, FE_INVALID)"}]}