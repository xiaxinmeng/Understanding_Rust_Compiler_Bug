{"sha": "a443ee6e5b00626b6a149da61fb6120386c83f4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0M2VlNmU1YjAwNjI2YjZhMTQ5ZGE2MWZiNjEyMDM4NmM4M2Y0ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-08-27T18:29:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-08-27T18:29:37Z"}, "message": "re PR target/67317 ([x86] Silly code generation for _addcarry_u32/_addcarry_u64)\n\n\tPR target/67317\n\t* config/i386/i386.md (*add<mode>3_cc): Remove insn pattern.\n\t(addqi3_cc): Ditto.\n\t(UNSPEC_ADD_CARRY): Remove.\n\t(addqi3_cconly_overflow): New expander.\n\t(*add<dwi>3_doubleword): Split to add<mode>3_cconly_overflow.\n\tAdjust for changed add<mode>3_carry.\n\t(*neg<dwi>2_doubleword): Adjust for changed add<mode>3_carry.\n\t(*sub<dwi>3_doubleword): Adjust for changed sub<mode>3_carry.\n\t(<plusminus_insn><mode>3_carry): Remove expander.\n\t(*<plusminus_insn><mode>3_carry): Split insn pattern to\n\tadd<mode>3_carry and sub<mode>3_carry.\n\t(plusminus_carry_mnemonic): Remove code attribute.\n\t(add<mode>3_carry): Canonicalize insn pattern.\n\t(*addsi3_carry_zext): Ditto.\n\t(sub<mode>3_carry): Ditto.\n\t(*subsi3_carry_zext): Ditto.\n\t(adcx<mode>3): Remove insn pattern.\n\t(addcarry<mode>): New insn pattern.\n\t(subborrow<mode>): Ditto.\n\t* config/i386/i386.c (ix86_expand_strlensi_unroll_1): Use\n\tgen_addqi3_cconly_overflow instead of gen_addqi3_cc.\n\t(ix86_expand_builtin) <case IX86_BUILTIN_SBB32,\n\tcase IX86_BUILTIN_SBB64, case IX86_BUILTIN_ADDCARRY32,\n\tcase IX86_BUILTIN_ADDCARRY64>: Use CODE_FOR_subborrowsi,\n\tCODE_FOR_subborrowdi, CODE_FOR_addcarrysi and CODE_FOR_addcarrydi.\n\tRewrite expander to not clobber carry flag chains.\n\ntestsuite/ChangeLog:\n\n\tPR target/67317\n\t* gcc.target/i386/pr67317-1.c: New test.\n\t* gcc.target/i386/pr67317-2.c: Ditto.\n\t* gcc.target/i386/pr67317-3.c: Ditto.\n\t* gcc.target/i386/pr67317-4.c: Ditto.\n\t* gcc.target/i386/adx-addcarryx32-1.c: Also scan for adcl.\n\t* gcc.target/i386/adx-addcarryx32-2.c: Also scan for adcq.\n\nFrom-SVN: r227271", "tree": {"sha": "6c980ba052c6d8c605e0bd7e6a43848413c0cd4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c980ba052c6d8c605e0bd7e6a43848413c0cd4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a443ee6e5b00626b6a149da61fb6120386c83f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a443ee6e5b00626b6a149da61fb6120386c83f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a443ee6e5b00626b6a149da61fb6120386c83f4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a443ee6e5b00626b6a149da61fb6120386c83f4d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b6fb4aa47e25c530ee97c4354896443403da585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6fb4aa47e25c530ee97c4354896443403da585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6fb4aa47e25c530ee97c4354896443403da585"}], "stats": {"total": 347, "additions": 236, "deletions": 111}, "files": [{"sha": "854add5fb7a0e575de315d6a3805c002487b81ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -1,3 +1,33 @@\n+2015-08-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/67317\n+\t* config/i386/i386.md (*add<mode>3_cc): Remove insn pattern.\n+\t(addqi3_cc): Ditto.\n+\t(UNSPEC_ADD_CARRY): Remove.\n+\t(addqi3_cconly_overflow): New expander.\n+\t(*add<dwi>3_doubleword): Split to add<mode>3_cconly_overflow.\n+\tAdjust for changed add<mode>3_carry.\n+\t(*neg<dwi>2_doubleword): Adjust for changed add<mode>3_carry.\n+\t(*sub<dwi>3_doubleword): Adjust for changed sub<mode>3_carry.\n+\t(<plusminus_insn><mode>3_carry): Remove expander.\n+\t(*<plusminus_insn><mode>3_carry): Split insn pattern to\n+\tadd<mode>3_carry and sub<mode>3_carry.\n+\t(plusminus_carry_mnemonic): Remove code attribute.\n+\t(add<mode>3_carry): Canonicalize insn pattern.\n+\t(*addsi3_carry_zext): Ditto.\n+\t(sub<mode>3_carry): Ditto.\n+\t(*subsi3_carry_zext): Ditto.\n+\t(adcx<mode>3): Remove insn pattern.\n+\t(addcarry<mode>): New insn pattern.\n+\t(subborrow<mode>): Ditto.\n+\t* config/i386/i386.c (ix86_expand_strlensi_unroll_1): Use\n+\tgen_addqi3_cconly_overflow instead of gen_addqi3_cc.\n+\t(ix86_expand_builtin) <case IX86_BUILTIN_SBB32,\n+\tcase IX86_BUILTIN_SBB64, case IX86_BUILTIN_ADDCARRY32,\n+\tcase IX86_BUILTIN_ADDCARRY64>: Use CODE_FOR_subborrowsi,\n+\tCODE_FOR_subborrowdi, CODE_FOR_addcarrysi and CODE_FOR_addcarrydi.\n+\tRewrite expander to not clobber carry flag chains.\n+\n 2015-08-27  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/vector.md (vec_shr_<mode>): Fix to do a shift"}, {"sha": "c69c738caa0d57eb168f3f7cc0a9ce8544e31cfb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -25531,7 +25531,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n   /* Avoid branch in fixing the byte.  */\n   tmpreg = gen_lowpart (QImode, tmpreg);\n-  emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n+  emit_insn (gen_addqi3_cconly_overflow (tmpreg, tmpreg));\n   tmp = gen_rtx_REG (CCmode, FLAGS_REG);\n   cmp = gen_rtx_LTU (VOIDmode, tmp, const0_rtx);\n   emit_insn (ix86_gen_sub3_carry (out, out, GEN_INT (3), tmp, cmp));\n@@ -39510,67 +39510,68 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       return target;\n \n     case IX86_BUILTIN_SBB32:\n-      icode = CODE_FOR_subsi3_carry;\n+      icode = CODE_FOR_subborrowsi;\n       mode0 = SImode;\n-      goto addcarryx;\n+      goto handlecarry;\n \n     case IX86_BUILTIN_SBB64:\n-      icode = CODE_FOR_subdi3_carry;\n+      icode = CODE_FOR_subborrowdi;\n       mode0 = DImode;\n-      goto addcarryx;\n+      goto handlecarry;\n \n     case IX86_BUILTIN_ADDCARRYX32:\n-      icode = TARGET_ADX ? CODE_FOR_adcxsi3 : CODE_FOR_addsi3_carry;\n+      icode = CODE_FOR_addcarrysi;\n       mode0 = SImode;\n-      goto addcarryx;\n+      goto handlecarry;\n \n     case IX86_BUILTIN_ADDCARRYX64:\n-      icode = TARGET_ADX ? CODE_FOR_adcxdi3 : CODE_FOR_adddi3_carry;\n+      icode = CODE_FOR_addcarrydi;\n       mode0 = DImode;\n \n-addcarryx:\n+    handlecarry:\n       arg0 = CALL_EXPR_ARG (exp, 0); /* unsigned char c_in.  */\n       arg1 = CALL_EXPR_ARG (exp, 1); /* unsigned int src1.  */\n       arg2 = CALL_EXPR_ARG (exp, 2); /* unsigned int src2.  */\n       arg3 = CALL_EXPR_ARG (exp, 3); /* unsigned int *sum_out.  */\n \n-      op0 = gen_reg_rtx (QImode);\n-\n-      /* Generate CF from input operand.  */\n       op1 = expand_normal (arg0);\n       op1 = copy_to_mode_reg (QImode, convert_to_mode (QImode, op1, 1));\n-      emit_insn (gen_addqi3_cc (op0, op1, constm1_rtx));\n \n-      /* Gen ADCX instruction to compute X+Y+CF.  */\n       op2 = expand_normal (arg1);\n-      op3 = expand_normal (arg2);\n-\n-      if (!REG_P (op2))\n+      if (!register_operand (op2, mode0))\n \top2 = copy_to_mode_reg (mode0, op2);\n-      if (!REG_P (op3))\n-\top3 = copy_to_mode_reg (mode0, op3);\n \n-      op0 = gen_reg_rtx (mode0);\n-\n-      op4 = gen_rtx_REG (CCCmode, FLAGS_REG);\n-      pat = gen_rtx_LTU (VOIDmode, op4, const0_rtx);\n-      emit_insn (GEN_FCN (icode) (op0, op2, op3, op4, pat));\n+      op3 = expand_normal (arg2);\n+      if (!register_operand (op3, mode0))\n+\top3 = copy_to_mode_reg (mode0, op3);\n \n-      /* Store the result.  */\n       op4 = expand_normal (arg3);\n       if (!address_operand (op4, VOIDmode))\n \t{\n \t  op4 = convert_memory_address (Pmode, op4);\n \t  op4 = copy_addr_to_reg (op4);\n \t}\n-      emit_move_insn (gen_rtx_MEM (mode0, op4), op0);\n+\n+      /* Generate CF from input operand.  */\n+      emit_insn (gen_addqi3_cconly_overflow (op1, constm1_rtx));\n+\n+      /* Generate instruction that consumes CF.  */\n+      op0 = gen_reg_rtx (mode0);\n+\n+      op1 = gen_rtx_REG (CCCmode, FLAGS_REG);\n+      pat = gen_rtx_LTU (mode0, op1, const0_rtx);\n+      emit_insn (GEN_FCN (icode) (op0, op2, op3, op1, pat));\n \n       /* Return current CF value.  */\n       if (target == 0)\n         target = gen_reg_rtx (QImode);\n \n       PUT_MODE (pat, QImode);\n       emit_insn (gen_rtx_SET (target, pat));\n+\n+      /* Store the result.  */\n+      emit_move_insn (gen_rtx_MEM (mode0, op4), op0);\n+\n       return target;\n \n     case IX86_BUILTIN_READ_FLAGS:"}, {"sha": "7017913afe2158a8129bfb59d398ea4c45e72aee", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 95, "deletions": 83, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -102,7 +102,6 @@\n   UNSPEC_SAHF\n   UNSPEC_PARITY\n   UNSPEC_FSTCW\n-  UNSPEC_ADD_CARRY\n   UNSPEC_FLDCW\n   UNSPEC_REP\n   UNSPEC_LD_MPIC\t; load_macho_picbase\n@@ -848,8 +847,6 @@\n (define_code_attr plusminus_mnemonic\n   [(plus \"add\") (ss_plus \"adds\") (us_plus \"addus\")\n    (minus \"sub\") (ss_minus \"subs\") (us_minus \"subus\")])\n-(define_code_attr plusminus_carry_mnemonic\n-  [(plus \"adc\") (minus \"sbb\")])\n (define_code_attr multdiv_mnemonic\n   [(mult \"mul\") (div \"div\")])\n \n@@ -5317,46 +5314,21 @@\n   \"ix86_binary_operator_ok (PLUS, <DWI>mode, operands)\"\n   \"#\"\n   \"reload_completed\"\n-  [(parallel [(set (reg:CC FLAGS_REG)\n-\t\t   (unspec:CC [(match_dup 1) (match_dup 2)]\n-\t\t\t      UNSPEC_ADD_CARRY))\n+  [(parallel [(set (reg:CCC FLAGS_REG)\n+\t\t   (compare:CCC\n+\t\t     (plus:DWIH (match_dup 1) (match_dup 2))\n+\t\t     (match_dup 1)))\n \t      (set (match_dup 0)\n \t\t   (plus:DWIH (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n \t\t   (plus:DWIH\n-\t\t     (match_dup 4)\n \t\t     (plus:DWIH\n \t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t\t       (match_dup 5))))\n+\t\t       (match_dup 4))\n+\t\t     (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_insn \"*add<mode>3_cc\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC\n-\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0\")\n-\t   (match_operand:SWI48 2 \"<general_operand>\" \"r<i>,rm\")]\n-\t  UNSPEC_ADD_CARRY))\n-   (set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(plus:SWI48 (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"addqi3_cc\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC\n-\t  [(match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t   (match_operand:QI 2 \"general_operand\" \"qn,qm\")]\n-\t  UNSPEC_ADD_CARRY))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n-  \"add{b}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*add<mode>_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n \t(plus:SWI48\n@@ -6264,10 +6236,10 @@\n \t\t   (minus:DWIH (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n \t\t   (minus:DWIH\n-\t\t     (match_dup 4)\n-\t\t     (plus:DWIH\n-\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t\t       (match_dup 5))))\n+\t\t     (minus:DWIH\n+\t\t       (match_dup 4)\n+\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\")\n \n@@ -6431,29 +6403,17 @@\n \f\n ;; Add with carry and subtract with borrow\n \n-(define_expand \"<plusminus_insn><mode>3_carry\"\n-  [(parallel\n-    [(set (match_operand:SWI 0 \"nonimmediate_operand\")\n-\t  (plusminus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\")\n-\t    (plus:SWI (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n-\t\t       [(match_operand 3 \"flags_reg_operand\")\n-\t\t\t(const_int 0)])\n-\t\t      (match_operand:SWI 2 \"<general_operand>\"))))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\")\n-\n-(define_insn \"*<plusminus_insn><mode>3_carry\"\n+(define_insn \"add<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n-\t(plusminus:SWI\n-\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"<comm>0,0\")\n+\t(plus:SWI\n \t  (plus:SWI\n-\t    (match_operator 3 \"ix86_carry_flag_operator\"\n-\t     [(reg FLAGS_REG) (const_int 0)])\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))))\n+\t    (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n+\t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n+\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"<plusminus_carry_mnemonic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  \"adc{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n@@ -6462,10 +6422,11 @@\n (define_insn \"*addsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n-\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n-\t\t\t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\")))))\n+\t  (plus:SI\n+\t    (plus:SI (match_operator:SI 3 \"ix86_carry_flag_operator\"\n+\t\t      [(reg FLAGS_REG) (const_int 0)])\n+\t\t     (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n   \"adc{l}\\t{%2, %k0|%k0, %2}\"\n@@ -6474,45 +6435,96 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n+;; There is no point to generate ADCX instruction. ADC is shorter and faster.\n+\n+(define_insn \"addcarry<mode>\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (plus:SWI48\n+\t    (plus:SWI48\n+\t      (match_operator:SWI48 4 \"ix86_carry_flag_operator\"\n+\t       [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\"))\n+\t    (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\"))\n+\t  (match_dup 1)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(plus:SWI48 (plus:SWI48 (match_op_dup 4\n+\t\t\t\t [(match_dup 3) (const_int 0)])\n+\t\t\t\t(match_dup 1))\n+\t\t    (match_dup 2)))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"adc{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"sub<mode>3_carry\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n+\t(minus:SWI\n+\t  (minus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n+\t    (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n+\t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)]))\n+\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*subsi3_carry_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t    (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n-\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n-\t\t\t     (match_operand:SI 2 \"x86_64_general_operand\" \"rme\")))))\n+\t  (minus:SI\n+\t    (minus:SI\n+\t      (match_operand:SI 1 \"register_operand\" \"0\")\n+\t      (match_operator:SI 3 \"ix86_carry_flag_operator\"\n+\t       [(reg FLAGS_REG) (const_int 0)]))\n+\t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"sbb{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n-\f\n-;; ADCX instruction\n \n-(define_insn \"adcx<mode>3\"\n+(define_insn \"subborrow<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (plus:SWI48\n-\t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\")\n-\t    (plus:SWI48\n-\t      (match_operator 4 \"ix86_carry_flag_operator\"\n-\t       [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n-\t      (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))\n-\t  (const_int 0)))\n+\t    (match_operator:SWI48 4 \"ix86_carry_flag_operator\"\n+\t     [(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n+\t    (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\"))))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(plus:SWI48 (match_dup 1)\n-\t\t    (plus:SWI48 (match_op_dup 4\n-\t\t\t\t [(match_dup 3) (const_int 0)])\n-\t\t\t\t(match_dup 2))))]\n-  \"TARGET_ADX && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"adcx\\t{%2, %0|%0, %2}\"\n+\t(minus:SWI48 (minus:SWI48 (match_dup 1)\n+\t\t\t\t  (match_op_dup 4\n+\t\t\t\t   [(match_dup 3) (const_int 0)]))\n+\t\t     (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n ;; Overflow setting add instructions\n \n+(define_expand \"addqi3_cconly_overflow\"\n+  [(parallel\n+     [(set (reg:CCC FLAGS_REG)\n+\t   (compare:CCC\n+\t     (plus:QI\n+\t       (match_operand:QI 0 \"nonimmediate_operand\")\n+\t       (match_operand:QI 1 \"general_operand\"))\n+\t     (match_dup 0)))\n+      (clobber (match_scratch:QI 2))])]\n+  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\")\n+\n (define_insn \"*add<mode>3_cconly_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -8842,9 +8854,9 @@\n      (set (match_dup 0) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 2)\n-\t  (plus:DWIH (match_dup 3)\n-\t\t     (plus:DWIH (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t\t\t\t(const_int 0))))\n+\t  (plus:DWIH (plus:DWIH (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t\t(match_dup 3))\n+\t\t     (const_int 0)))\n      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n     [(set (match_dup 2)"}, {"sha": "f5f64add7ddb10afd7ce4c2a4cb71f0f5eb3c753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -1,3 +1,13 @@\n+2015-08-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/67317\n+\t* gcc.target/i386/pr67317-1.c: New test.\n+\t* gcc.target/i386/pr67317-2.c: Ditto.\n+\t* gcc.target/i386/pr67317-3.c: Ditto.\n+\t* gcc.target/i386/pr67317-4.c: Ditto.\n+\t* gcc.target/i386/adx-addcarryx32-1.c: Also scan for adcl.\n+\t* gcc.target/i386/adx-addcarryx32-2.c: Also scan for adcq.\n+\n 2015-08-27  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* gcc.target/powerpc/vec-shr.c: New."}, {"sha": "b0ba6e253df444ca41a7e90ca2dad86d82f14af3", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-madx -O2\" } */\n-/* { dg-final { scan-assembler-times \"adcx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"adc\\[xl\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"sbbl\" 1 } } */\n \n #include <x86intrin.h>"}, {"sha": "cbe19856c6fd225b164353009d14d52dc1963632", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-madx -O2\" } */\n-/* { dg-final { scan-assembler-times \"adcx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"adc\\[xq\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"sbbq\" 1 } } */\n \n #include <x86intrin.h>"}, {"sha": "7db4e5f31a778031c77fdb321b64fefba3ea944a", "filename": "gcc/testsuite/gcc.target/i386/pr67317-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-1.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/67317 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned int u32;\n+\n+u32 testcarry_u32 (u32 a, u32 b, u32 c, u32 d)\n+{\n+  u32 result0, result1;\n+\n+  __builtin_ia32_addcarryx_u32\n+    (__builtin_ia32_addcarryx_u32 (0, a, c, &result0), b, d, &result1);\n+\n+  return result0 ^ result1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"addb\" } } */\n+/* { dg-final { scan-assembler-not \"setn?c\" } } */"}, {"sha": "97b2eff88dc5589ac10b13db2cc68f123d58d717", "filename": "gcc/testsuite/gcc.target/i386/pr67317-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-2.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/67317 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long u64;\n+\n+u64 testcarry_u64 (u64 a, u64 b, u64 c, u64 d)\n+{\n+  u64 result0, result1;\n+\n+  __builtin_ia32_addcarryx_u64\n+    (__builtin_ia32_addcarryx_u64 (0, a, c, &result0), b, d, &result1);\n+\n+  return result0 ^ result1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"addb\" } } */\n+/* { dg-final { scan-assembler-not \"setn?c\" } } */"}, {"sha": "c141d098108b9cdd63011ff4f1fc2f51ee1ee99c", "filename": "gcc/testsuite/gcc.target/i386/pr67317-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-3.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/67317 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned int u32;\n+\n+u32 testcarry_u32 (u32 a, u32 b, u32 c, u32 d)\n+{\n+  u32 result0, result1;\n+\n+  __builtin_ia32_sbb_u32\n+    (__builtin_ia32_sbb_u32 (0, a, c, &result0), b, d, &result1);\n+\n+  return result0 ^ result1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"addb\" } } */\n+/* { dg-final { scan-assembler-not \"setn?c\" } } */"}, {"sha": "2f95dbc16f39d1a3faa281ab00cd433046b87d7b", "filename": "gcc/testsuite/gcc.target/i386/pr67317-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a443ee6e5b00626b6a149da61fb6120386c83f4d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67317-4.c?ref=a443ee6e5b00626b6a149da61fb6120386c83f4d", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/67317 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long u64;\n+\n+u64 testcarry_u64 (u64 a, u64 b, u64 c, u64 d)\n+{\n+  u64 result0, result1;\n+\n+  __builtin_ia32_sbb_u64\n+    (__builtin_ia32_sbb_u64 (0, a, c, &result0), b, d, &result1);\n+\n+  return result0 ^ result1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"addb\" } } */\n+/* { dg-final { scan-assembler-not \"setn?c\" } } */"}]}