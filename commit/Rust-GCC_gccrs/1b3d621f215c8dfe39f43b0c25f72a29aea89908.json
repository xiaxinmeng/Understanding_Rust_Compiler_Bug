{"sha": "1b3d621f215c8dfe39f43b0c25f72a29aea89908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzZDYyMWYyMTVjOGRmZTM5ZjQzYjBjMjVmNzJhMjlhZWE4OTkwOA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:40:06Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:40:06Z"}, "message": "Add NodeMappings to HIR::Trait Items\n\nNodeMappings are used to map HIR items into the type system and back to\nNodeIds as part of name Resolution. LocalDefId signify local crate\ndefintions and DefId are cratenum + localdefids for cross crate\ndefinitions.\n\nAddresses: #395", "tree": {"sha": "0d17f286e5bd74e3cfd4f9433b057c8de9b61c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d17f286e5bd74e3cfd4f9433b057c8de9b61c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3d621f215c8dfe39f43b0c25f72a29aea89908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d621f215c8dfe39f43b0c25f72a29aea89908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3d621f215c8dfe39f43b0c25f72a29aea89908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d621f215c8dfe39f43b0c25f72a29aea89908/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0d6ea02a74761a1756b65aaa3028054e9be680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d6ea02a74761a1756b65aaa3028054e9be680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0d6ea02a74761a1756b65aaa3028054e9be680"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "fa097e4829446c53f8fea46590d762e5d2f12eee", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d621f215c8dfe39f43b0c25f72a29aea89908/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d621f215c8dfe39f43b0c25f72a29aea89908/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=1b3d621f215c8dfe39f43b0c25f72a29aea89908", "patch": "@@ -2485,15 +2485,18 @@ class TraitItemFunc : public TraitItem\n   // Returns whether function has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n-  TraitItemFunc (TraitFunctionDecl decl, std::unique_ptr<BlockExpr> block_expr,\n+  TraitItemFunc (Analysis::NodeMapping mappings, TraitFunctionDecl decl,\n+\t\t std::unique_ptr<BlockExpr> block_expr,\n \t\t AST::AttrVec outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), decl (std::move (decl)),\n-      block_expr (std::move (block_expr)), locus (locus)\n+    : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clone\n   TraitItemFunc (TraitItemFunc const &other)\n-    : outer_attrs (other.outer_attrs), decl (other.decl), locus (other.locus)\n+    : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n+      decl (other.decl), locus (other.locus)\n   {\n     if (other.block_expr != nullptr)\n       block_expr = other.block_expr->clone_block_expr ();\n@@ -2506,6 +2509,7 @@ class TraitItemFunc : public TraitItem\n     outer_attrs = other.outer_attrs;\n     decl = other.decl;\n     locus = other.locus;\n+    mappings = other.mappings;\n     if (other.block_expr != nullptr)\n       block_expr = other.block_expr->clone_block_expr ();\n \n@@ -2636,16 +2640,19 @@ class TraitItemMethod : public TraitItem\n   // Returns whether method has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n-  TraitItemMethod (TraitMethodDecl decl, std::unique_ptr<BlockExpr> block_expr,\n+  TraitItemMethod (Analysis::NodeMapping mappings, TraitMethodDecl decl,\n+\t\t   std::unique_ptr<BlockExpr> block_expr,\n \t\t   AST::AttrVec outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), decl (std::move (decl)),\n-      block_expr (std::move (block_expr)), locus (locus)\n+    : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clone\n   TraitItemMethod (TraitItemMethod const &other)\n-    : outer_attrs (other.outer_attrs), decl (other.decl),\n-      block_expr (other.block_expr->clone_block_expr ()), locus (other.locus)\n+    : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n+      decl (other.decl), block_expr (other.block_expr->clone_block_expr ()),\n+      locus (other.locus)\n   {}\n \n   // Overloaded assignment operator to clone\n@@ -2656,6 +2663,7 @@ class TraitItemMethod : public TraitItem\n     decl = other.decl;\n     block_expr = other.block_expr->clone_block_expr ();\n     locus = other.locus;\n+    mappings = other.mappings;\n \n     return *this;\n   }\n@@ -2696,18 +2704,19 @@ class TraitItemConst : public TraitItem\n   // Whether the constant item has an associated expression.\n   bool has_expression () const { return expr != nullptr; }\n \n-  TraitItemConst (Identifier name, std::unique_ptr<Type> type,\n-\t\t  std::unique_ptr<Expr> expr, AST::AttrVec outer_attrs,\n-\t\t  Location locus)\n-    : outer_attrs (std::move (outer_attrs)), name (std::move (name)),\n-      type (std::move (type)), expr (std::move (expr)), locus (locus)\n+  TraitItemConst (Analysis::NodeMapping mappings, Identifier name,\n+\t\t  std::unique_ptr<Type> type, std::unique_ptr<Expr> expr,\n+\t\t  AST::AttrVec outer_attrs, Location locus)\n+    : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)), type (std::move (type)), expr (std::move (expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clones\n   TraitItemConst (TraitItemConst const &other)\n-    : outer_attrs (other.outer_attrs), name (other.name),\n-      type (other.type->clone_type ()), expr (other.expr->clone_expr ()),\n-      locus (other.locus)\n+    : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n+      name (other.name), type (other.type->clone_type ()),\n+      expr (other.expr->clone_expr ()), locus (other.locus)\n   {}\n \n   // Overloaded assignment operator to clone\n@@ -2719,6 +2728,7 @@ class TraitItemConst : public TraitItem\n     type = other.type->clone_type ();\n     expr = other.expr->clone_expr ();\n     locus = other.locus;\n+    mappings = other.mappings;\n \n     return *this;\n   }\n@@ -2760,16 +2770,18 @@ class TraitItemType : public TraitItem\n   bool has_type_param_bounds () const { return !type_param_bounds.empty (); }\n \n   TraitItemType (\n-    Identifier name,\n+    Analysis::NodeMapping mappings, Identifier name,\n     std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n     AST::AttrVec outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), name (std::move (name)),\n+    : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)),\n       type_param_bounds (std::move (type_param_bounds)), locus (locus)\n   {}\n \n   // Copy constructor with vector clone\n   TraitItemType (TraitItemType const &other)\n-    : outer_attrs (other.outer_attrs), name (other.name), locus (other.locus)\n+    : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n+      name (other.name), locus (other.locus)\n   {\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n@@ -2783,6 +2795,7 @@ class TraitItemType : public TraitItem\n     outer_attrs = other.outer_attrs;\n     name = other.name;\n     locus = other.locus;\n+    mappings = other.mappings;\n \n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)"}, {"sha": "1ac418c5b0b281e9a9a6ba2260562ba6eefcfa5b", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d621f215c8dfe39f43b0c25f72a29aea89908/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d621f215c8dfe39f43b0c25f72a29aea89908/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=1b3d621f215c8dfe39f43b0c25f72a29aea89908", "patch": "@@ -770,29 +770,18 @@ class MacroItem : public Item\n // Item used in trait declarations - abstract base class\n class TraitItem\n {\n-  // bool has_outer_attrs;\n-  // TODO: remove and rely on virtual functions and VisItem-derived attributes?\n-  // std::vector<Attribute> outer_attrs;\n-\n-  // NOTE: all children should have outer attributes\n-\n protected:\n   // Constructor\n-  /*TraitItem(std::vector<Attribute> outer_attrs = std::vector<Attribute>())\n-    : outer_attrs(std::move(outer_attrs)) {}*/\n+  TraitItem (Analysis::NodeMapping mappings) : mappings (mappings) {}\n \n   // Clone function implementation as pure virtual method\n   virtual TraitItem *clone_trait_item_impl () const = 0;\n \n+  Analysis::NodeMapping mappings;\n+\n public:\n   virtual ~TraitItem () {}\n \n-  // Returns whether TraitItem has outer attributes.\n-  /*bool has_outer_attrs() const {\n-      return !outer_attrs.empty();\n-  }*/\n-\n-  // Unique pointer custom clone function\n   std::unique_ptr<TraitItem> clone_trait_item () const\n   {\n     return std::unique_ptr<TraitItem> (clone_trait_item_impl ());\n@@ -801,6 +790,8 @@ class TraitItem\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n };\n \n /* Abstract base class for items used within an inherent impl block (the impl"}]}