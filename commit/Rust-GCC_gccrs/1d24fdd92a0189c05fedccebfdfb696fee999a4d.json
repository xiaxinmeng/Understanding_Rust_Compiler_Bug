{"sha": "1d24fdd92a0189c05fedccebfdfb696fee999a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQyNGZkZDkyYTAxODljMDVmZWRjY2ViZmRmYjY5NmZlZTk5OWE0ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-06-13T22:58:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-06-13T22:58:13Z"}, "message": "re PR c++/40389 (optimizer bug (possibly))\n\n2009-06-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/40389\n\t* gimple.c (walk_stmt_load_store_addr_ops): The LHS of a call\n\thas its address taken if NRV was applied and it is addressable.\n\t* tree-ssa-structalias.c (get_constraint_for_address_of): New\n\tfunction split out from ...\n\t(get_constraint_for_1): ... here.\n\t(handle_rhs_call): Use it to mark the return slot escaped if\n\tit is addressable and NRV was applied.\n\n\t* g++.dg/torture/pr40389.C: New testcase.\n\nFrom-SVN: r148462", "tree": {"sha": "8ff0bc85b42906f5dd2e481e0620be0c340e16de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ff0bc85b42906f5dd2e481e0620be0c340e16de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d24fdd92a0189c05fedccebfdfb696fee999a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d24fdd92a0189c05fedccebfdfb696fee999a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d24fdd92a0189c05fedccebfdfb696fee999a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d24fdd92a0189c05fedccebfdfb696fee999a4d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b29c5e5434f7aaaabd4b6f314139fde5803b513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b29c5e5434f7aaaabd4b6f314139fde5803b513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b29c5e5434f7aaaabd4b6f314139fde5803b513"}], "stats": {"total": 166, "additions": 147, "deletions": 19}, "files": [{"sha": "264e5cc576837c2380fbc8879290025097f7467f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d24fdd92a0189c05fedccebfdfb696fee999a4d", "patch": "@@ -1,3 +1,14 @@\n+2009-06-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/40389\n+\t* gimple.c (walk_stmt_load_store_addr_ops): The LHS of a call\n+\thas its address taken if NRV was applied and it is addressable.\n+\t* tree-ssa-structalias.c (get_constraint_for_address_of): New\n+\tfunction split out from ...\n+\t(get_constraint_for_1): ... here.\n+\t(handle_rhs_call): Use it to mark the return slot escaped if\n+\tit is addressable and NRV was applied.\n+\n 2009-06-13  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000-protos.h (altivec_resolve_overloaded_builtin):\n@@ -8,7 +19,7 @@\n \n 2009-06-13  Richard Guenther  <rguenther@suse.de>\n \n-\tPR tree-optimization/40389\n+\tPR tree-optimization/40421\n \t* tree-predcom.c (should_unroll_loop_p): Remove.\n \t(tree_predictive_commoning_loop): Use can_unroll_loop_p.\n "}, {"sha": "24727bc88735691debf46d4ad2343fdfb68336da", "filename": "gcc/gimple.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=1d24fdd92a0189c05fedccebfdfb696fee999a4d", "patch": "@@ -3264,6 +3264,11 @@ walk_stmt_load_store_addr_ops (gimple stmt, void *data,\n \t  && TREE_CODE (gimple_call_chain (stmt)) == ADDR_EXPR)\n \tret |= visit_addr (stmt, TREE_OPERAND (gimple_call_chain (stmt), 0),\n \t\t\t   data);\n+      if (visit_addr\n+\t  && gimple_call_return_slot_opt_p (stmt)\n+\t  && gimple_call_lhs (stmt) != NULL_TREE\n+\t  && TREE_ADDRESSABLE (gimple_call_lhs (stmt)))\n+\tret |= visit_addr (stmt, gimple_call_lhs (stmt), data);\n     }\n   else if (gimple_code (stmt) == GIMPLE_ASM)\n     {"}, {"sha": "4b7d929e5b0f3f2932cbe439113d97d087f25676", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d24fdd92a0189c05fedccebfdfb696fee999a4d", "patch": "@@ -1,6 +1,11 @@\n+2009-06-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/40389\n+\t* g++.dg/torture/pr40389.C: New testcase.\n+\n 2009-06-13  Richard Guenther  <rguenther@suse.de>\n \n-\tPR tree-optimization/40389\n+\tPR tree-optimization/40421\n \t* gfortran.fortran-torture/compile/pr40421.f: New testcase.\n \n 2009-06-12  Aldy Hernandez  <aldyh@redhat.com>"}, {"sha": "e3ceb1238b6b5c8f81918580963ed11f7390603f", "filename": "gcc/testsuite/g++.dg/torture/pr40389.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40389.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40389.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40389.C?ref=1d24fdd92a0189c05fedccebfdfb696fee999a4d", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+\n+template <typename V> struct S\n+{\n+  V *f, *l;\n+  __attribute__ ((noinline)) S (void) { f = 0, l = 0; }\n+  void foo (V *x)\n+  {\n+    if (x->p != 0)\n+      x->p->n = x->n;\n+    else\n+      f = x->n;\n+    if (x->n != 0)\n+      x->n->p = x->p;\n+    else\n+      l = x->p;\n+  }\n+  __attribute__ ((noinline)) void bar (V *x)\n+  {\n+    x->n = 0;\n+    x->p = l;\n+    if (l != 0)\n+      l->n = x;\n+    else\n+      f = x;\n+    l = x;\n+  }\n+};\n+\n+struct H;\n+\n+struct A\n+{\n+  S <H> k;\n+};\n+\n+struct H\n+{\n+  A *a;\n+  H *p, *n;\n+  __attribute__ ((noinline)) H (void) { p = 0, n = 0, a = 0; }\n+  __attribute__ ((noinline)) H (A *b) : a (b)\n+  {\n+    p = 0;\n+    n = 0;\n+    if (a != 0)\n+      a->k.bar (this);\n+  }\n+  __attribute__ ((noinline)) H (const H &h) : a (h.a)\n+  {\n+    p = 0;\n+    n = 0;\n+    if (a != 0)\n+      a->k.bar (this);\n+  }\n+  ~H (void) { if (a != 0) a->k.foo (this); }\n+  H &operator= (const H &o)\n+  {\n+    if (a != 0 || &o == this)\n+      __builtin_abort ();\n+    a = o.a;\n+    if (a != 0)\n+      a->k.bar (this);\n+    return *this;\n+  }\n+};\n+\n+__attribute__ ((noinline))\n+H baz (void)\n+{\n+  return H (new A);\n+}\n+\n+H g;\n+\n+int\n+main (void)\n+{\n+  g = baz ();\n+  if (g.a->k.f != &g)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "7c95de4f3eceec2fcc6c82845e5560a4338d7cf9", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d24fdd92a0189c05fedccebfdfb696fee999a4d/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1d24fdd92a0189c05fedccebfdfb696fee999a4d", "patch": "@@ -3080,6 +3080,28 @@ do_deref (VEC (ce_s, heap) **constraints)\n     }\n }\n \n+static void get_constraint_for_1 (tree, VEC (ce_s, heap) **, bool);\n+\n+/* Given a tree T, return the constraint expression for taking the\n+   address of it.  */\n+\n+static void\n+get_constraint_for_address_of (tree t, VEC (ce_s, heap) **results)\n+{\n+  struct constraint_expr *c;\n+  unsigned int i;\n+\n+  get_constraint_for_1 (t, results, true);\n+\n+  for (i = 0; VEC_iterate (ce_s, *results, i, c); i++)\n+    {\n+      if (c->type == DEREF)\n+\tc->type = SCALAR;\n+      else\n+\tc->type = ADDRESSOF;\n+    }\n+}\n+\n /* Given a tree T, return the constraint expression for it.  */\n \n static void\n@@ -3131,23 +3153,8 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p)\n \tswitch (TREE_CODE (t))\n \t  {\n \t  case ADDR_EXPR:\n-\t    {\n-\t      struct constraint_expr *c;\n-\t      unsigned int i;\n-\t      tree exp = TREE_OPERAND (t, 0);\n-\n-\t      get_constraint_for_1 (exp, results, true);\n-\n-\t      for (i = 0; VEC_iterate (ce_s, *results, i, c); i++)\n-\t\t{\n-\t\t  if (c->type == DEREF)\n-\t\t    c->type = SCALAR;\n-\t\t  else\n-\t\t    c->type = ADDRESSOF;\n-\t\t}\n-\t      return;\n-\t    }\n-\t    break;\n+\t    get_constraint_for_address_of (TREE_OPERAND (t, 0), results);\n+\t    return;\n \t  default:;\n \t  }\n \tbreak;\n@@ -3333,6 +3340,22 @@ handle_rhs_call (gimple stmt, VEC(ce_s, heap) **results)\n   if (gimple_call_chain (stmt))\n     make_escape_constraint (gimple_call_chain (stmt));\n \n+  /* And if we applied NRV the address of the return slot escapes as well.  */\n+  if (gimple_call_return_slot_opt_p (stmt)\n+      && gimple_call_lhs (stmt) != NULL_TREE\n+      && TREE_ADDRESSABLE (gimple_call_lhs (stmt)))\n+    {\n+      VEC(ce_s, heap) *tmpc = NULL;\n+      struct constraint_expr lhsc, *c;\n+      get_constraint_for_address_of (gimple_call_lhs (stmt), &tmpc);\n+      lhsc.var = escaped_id;\n+      lhsc.offset = 0;\n+      lhsc.type = SCALAR;\n+      for (i = 0; VEC_iterate (ce_s, tmpc, i, c); ++i)\n+\tprocess_constraint (new_constraint (lhsc, *c));\n+      VEC_free(ce_s, heap, tmpc);\n+    }\n+\n   /* Regular functions return nonlocal memory.  */\n   rhsc.var = nonlocal_id;\n   rhsc.offset = 0;"}]}