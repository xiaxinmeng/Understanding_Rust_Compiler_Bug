{"sha": "88200a8dd114633fbdeeede0bcac824b37ce57bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyMDBhOGRkMTE0NjMzZmJkZWVlZGUwYmNhYzgyNGIzN2NlNTdiZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-03-15T18:29:44Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-03-15T18:29:44Z"}, "message": "re PR java/26390 (Problem dispatching method call when method does not exist in superclass)\n\ngcc/java\n\tPR java/26390:\n\t* class.c (get_interface_method_index): Don't put <clinit> into\n\tinterface table.\nlibjava\n\tPR java/26390:\n\t* link.cc (get_interfaces): Skip <clinit>.\n\t(append_partial_itable): Likewise.\n\nFrom-SVN: r112093", "tree": {"sha": "2ecb4b543663d3d4a29ca6755698fc74160ea415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecb4b543663d3d4a29ca6755698fc74160ea415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88200a8dd114633fbdeeede0bcac824b37ce57bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88200a8dd114633fbdeeede0bcac824b37ce57bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88200a8dd114633fbdeeede0bcac824b37ce57bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88200a8dd114633fbdeeede0bcac824b37ce57bf/comments", "author": null, "committer": null, "parents": [{"sha": "2afd35b3380c51f9eb6bab7ca37b2d883c4eb298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afd35b3380c51f9eb6bab7ca37b2d883c4eb298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afd35b3380c51f9eb6bab7ca37b2d883c4eb298"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "9d9091e683d566401004826f7ee236221d804c21", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88200a8dd114633fbdeeede0bcac824b37ce57bf/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88200a8dd114633fbdeeede0bcac824b37ce57bf/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=88200a8dd114633fbdeeede0bcac824b37ce57bf", "patch": "@@ -1,3 +1,9 @@\n+2006-03-15  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/26390:\n+\t* class.c (get_interface_method_index): Don't put <clinit> into\n+\tinterface table.\n+\n 2006-03-15  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (analyze_clinit_body): Ignore empty statements."}, {"sha": "6d666e362e60d84359c615a5593f55e870218801", "filename": "gcc/java/class.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88200a8dd114633fbdeeede0bcac824b37ce57bf/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88200a8dd114633fbdeeede0bcac824b37ce57bf/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=88200a8dd114633fbdeeede0bcac824b37ce57bf", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to building classes and their related objects.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2303,18 +2303,21 @@ layout_class_methods (tree this_class)\n   TYPE_NVIRTUALS (this_class) = dtable_count;\n }\n \n-/* Return the index of METHOD in INTERFACE.  This index begins at 1 and is used as an\n-   argument for _Jv_LookupInterfaceMethodIdx(). */\n+/* Return the index of METHOD in INTERFACE.  This index begins at 1\n+   and is used as an argument for _Jv_LookupInterfaceMethodIdx(). */\n int\n get_interface_method_index (tree method, tree interface)\n {\n   tree meth;\n   int i = 1;\n \n-  for (meth = TYPE_METHODS (interface); ; meth = TREE_CHAIN (meth), i++)\n+  for (meth = TYPE_METHODS (interface); ; meth = TREE_CHAIN (meth))\n     {\n       if (meth == method)\n \treturn i;\n+      /* We don't want to put <clinit> into the interface table.  */\n+      if (! ID_CLINIT_P (DECL_NAME (meth)))\n+\t++i;\n       gcc_assert (meth != NULL_TREE);\n     }\n }"}, {"sha": "ff256f6ea2f75d8481aec521bf518a1d189f35c8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88200a8dd114633fbdeeede0bcac824b37ce57bf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88200a8dd114633fbdeeede0bcac824b37ce57bf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=88200a8dd114633fbdeeede0bcac824b37ce57bf", "patch": "@@ -1,3 +1,9 @@\n+2006-03-15  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/26390:\n+\t* link.cc (get_interfaces): Skip <clinit>.\n+\t(append_partial_itable): Likewise.\n+\n 2006-03-10  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/25713:"}, {"sha": "827d3185059218c4777eaad564301376a11ff64a", "filename": "libjava/link.cc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88200a8dd114633fbdeeede0bcac824b37ce57bf/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88200a8dd114633fbdeeede0bcac824b37ce57bf/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=88200a8dd114633fbdeeede0bcac824b37ce57bf", "patch": "@@ -699,9 +699,18 @@ _Jv_Linker::get_interfaces (jclass klass, _Jv_ifaces *ifaces)\n \t  result += get_interfaces (klass->interfaces[i], ifaces);\n \t}\n     }\n-    \n+\n   if (klass->isInterface())\n-    result += klass->method_count + 1;\n+    {\n+      // We want to add 1 plus the number of interface methods here.\n+      // But, we take special care to skip <clinit>.\n+      ++result;\n+      for (int i = 0; i < klass->method_count; ++i)\n+\t{\n+\t  if (klass->methods[i].name->first() != '<')\n+\t    ++result;\n+\t}\n+    }\n   else if (klass->superclass)\n     result += get_interfaces (klass->superclass, ifaces);\n   return result;\n@@ -817,7 +826,7 @@ _Jv_ThrowAbstractMethodError ()\n // Returns the offset at which the next partial ITable should be appended.\n jshort\n _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n-\t\t\t\t     void **itable, jshort pos)\n+\t\t\t\t   void **itable, jshort pos)\n {\n   using namespace java::lang::reflect;\n \n@@ -826,6 +835,10 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n   \n   for (int j=0; j < iface->method_count; j++)\n     {\n+      // Skip '<clinit>' here.\n+      if (iface->methods[j].name->first() == '<')\n+\tcontinue;\n+\n       meth = NULL;\n       for (jclass cl = klass; cl; cl = cl->getSuperclass())\n         {\n@@ -836,12 +849,7 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n \t    break;\n \t}\n \n-      if (meth && (meth->name->first() == '<'))\n-\t{\n-\t  // leave a placeholder in the itable for hidden init methods.\n-          itable[pos] = NULL;\t\n-\t}\n-      else if (meth)\n+      if (meth)\n         {\n \t  if ((meth->accflags & Modifier::STATIC) != 0)\n \t    throw new java::lang::IncompatibleClassChangeError"}]}