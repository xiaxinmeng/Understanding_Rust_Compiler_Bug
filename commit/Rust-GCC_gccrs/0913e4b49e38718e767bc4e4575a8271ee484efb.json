{"sha": "0913e4b49e38718e767bc4e4575a8271ee484efb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxM2U0YjQ5ZTM4NzE4ZTc2N2JjNGU0NTc1YTgyNzFlZTQ4NGVmYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-04-09T17:50:08Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-04-09T17:50:08Z"}, "message": "optabs.c: Comment that gen_add2_insn and others may actually return emitted insns...\n\n* optabs.c: Comment that gen_add2_insn and others may actually\nreturn emitted insns, if the gen functions turn out to return\nemitted insns.\n* reload1.c (reload_cse_move2add): Cope with emitted insns from\ngen_add2_insn.\n\nFrom-SVN: r65400", "tree": {"sha": "34830d3300213fa9d314566552067ebc840c3cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34830d3300213fa9d314566552067ebc840c3cb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0913e4b49e38718e767bc4e4575a8271ee484efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0913e4b49e38718e767bc4e4575a8271ee484efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0913e4b49e38718e767bc4e4575a8271ee484efb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0913e4b49e38718e767bc4e4575a8271ee484efb/comments", "author": null, "committer": null, "parents": [{"sha": "21515593f66c14e18a64eec763152dfaabd95fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21515593f66c14e18a64eec763152dfaabd95fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21515593f66c14e18a64eec763152dfaabd95fa3"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "62a4853972c09ba04fe9ea99fe6cab218768ac10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0913e4b49e38718e767bc4e4575a8271ee484efb", "patch": "@@ -1,3 +1,11 @@\n+2003-04-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* optabs.c: Comment that gen_add2_insn and others may actually\n+\treturn emitted insns, if the gen functions turn out to return\n+\temitted insns.\n+\t* reload1.c (reload_cse_move2add): Cope with emitted insns from\n+\tgen_add2_insn.\n+\n 2003-04-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (move_operand): Allow symbolic_operand,"}, {"sha": "14d93c65fe8392dce373f3b3fdb5c6a92487c75f", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0913e4b49e38718e767bc4e4575a8271ee484efb", "patch": "@@ -4512,8 +4512,9 @@ emit_conditional_add (target, code, op0, op1, cmode, op2, op3, mode,\n   return target;\n }\n \f\n-/* These functions generate an insn body and return it\n-   rather than emitting the insn.\n+/* These functions attempt to generate an insn body, rather than\n+   emitting the insn, but if the gen function already emits them, we\n+   make no attempt to turn them back into naked patterns.\n \n    They do not protect from queued increments,\n    because they may be used 1) in protect_from_queue itself"}, {"sha": "a6e41ddeae26fe00a5eb1f23849042523cdb961b", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0913e4b49e38718e767bc4e4575a8271ee484efb/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=0913e4b49e38718e767bc4e4575a8271ee484efb", "patch": "@@ -9162,8 +9162,16 @@ reload_cse_move2add (first)\n \t\t    validate_change (insn, &SET_SRC (pat), reg, 0);\n \t\t  else if (rtx_cost (new_src, PLUS) < rtx_cost (src, SET)\n \t\t\t   && have_add2_insn (reg, new_src))\n-\t\t    validate_change (insn, &PATTERN (insn),\n-\t\t\t\t     gen_add2_insn (reg, new_src), 0);\n+\t\t    {\n+\t\t      rtx newpat = gen_add2_insn (reg, new_src);\n+\t\t      if (INSN_P (newpat) && NEXT_INSN (newpat) == NULL_RTX)\n+\t\t\tnewpat = PATTERN (newpat);\n+\t\t      /* If it was the first insn of a sequence or\n+\t\t\t some other emitted insn, validate_change will\n+\t\t\t reject it.  */\n+\t\t      validate_change (insn, &PATTERN (insn),\n+\t\t\t\t       newpat, 0);\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      enum machine_mode narrow_mode;\n@@ -9243,9 +9251,15 @@ reload_cse_move2add (first)\n \t\t      else if ((rtx_cost (new_src, PLUS)\n \t\t\t\t< COSTS_N_INSNS (1) + rtx_cost (src3, SET))\n \t\t\t       && have_add2_insn (reg, new_src))\n-\t\t\tsuccess\n-\t\t\t  = validate_change (next, &PATTERN (next),\n-\t\t\t\t\t     gen_add2_insn (reg, new_src), 0);\n+\t\t\t{\n+\t\t\t  rtx newpat = gen_add2_insn (reg, new_src);\n+\t\t\t  if (INSN_P (newpat)\n+\t\t\t      && NEXT_INSN (newpat) == NULL_RTX)\n+\t\t\t    newpat = PATTERN (newpat);\n+\t\t\t  success\n+\t\t\t    = validate_change (next, &PATTERN (next),\n+\t\t\t\t\t       newpat, 0);\n+\t\t\t}\n \t\t      if (success)\n \t\t\tdelete_insn (insn);\n \t\t      insn = next;"}]}