{"sha": "66af6e991bf0daf1c41e46400a8f19e87c358cf2", "node_id": "C_kwDOANBUbNoAKDY2YWY2ZTk5MWJmMGRhZjFjNDFlNDY0MDBhOGYxOWU4N2MzNThjZjI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-07T14:21:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-07T14:21:45Z"}, "message": "libstdc++: Optimize is_void and is_null_pointer\n\nInstead of defining these in terms of a helper class template\nand the relatively expensive __remove_cv_t, just declare four\nexplicit specializations of the main template, one for each choice\nof cv-quals.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (__is_void_helper): Remove.\n\t(is_void): Make the primary template derive from false_type,\n\tand define four explicit specializations that derive from\n\ttrue_type.\n\t(__is_null_pointer_helper, is_null_pointer): Likewise.", "tree": {"sha": "93c355e894f77239c489beda6bcdf2f94074e160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c355e894f77239c489beda6bcdf2f94074e160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66af6e991bf0daf1c41e46400a8f19e87c358cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66af6e991bf0daf1c41e46400a8f19e87c358cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66af6e991bf0daf1c41e46400a8f19e87c358cf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66af6e991bf0daf1c41e46400a8f19e87c358cf2/comments", "author": null, "committer": null, "parents": [{"sha": "873d395c2976a8321cec03f21d77e11f746da7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873d395c2976a8321cec03f21d77e11f746da7c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873d395c2976a8321cec03f21d77e11f746da7c0"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "b83e7257a9f3e5d034d9ec59182676ab08cc9424", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66af6e991bf0daf1c41e46400a8f19e87c358cf2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66af6e991bf0daf1c41e46400a8f19e87c358cf2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=66af6e991bf0daf1c41e46400a8f19e87c358cf2", "patch": "@@ -289,23 +289,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // __remove_cv_t (std::remove_cv_t for C++11).\n   template<typename _Tp>\n     using __remove_cv_t = typename remove_cv<_Tp>::type;\n+  /// @endcond\n \n   // Primary type categories.\n \n-  template<typename>\n-    struct __is_void_helper\n+  /// is_void\n+  template<typename _Tp>\n+    struct is_void\n     : public false_type { };\n \n   template<>\n-    struct __is_void_helper<void>\n+    struct is_void<void>\n     : public true_type { };\n-  /// @endcond\n \n-  /// is_void\n-  template<typename _Tp>\n-    struct is_void\n-    : public __is_void_helper<__remove_cv_t<_Tp>>::type\n-    { };\n+  template<>\n+    struct is_void<const void>\n+    : public true_type { };\n+\n+  template<>\n+    struct is_void<volatile void>\n+    : public true_type { };\n+\n+  template<>\n+    struct is_void<const volatile void>\n+    : public true_type { };\n \n   /// @cond undocumented\n   template<typename>\n@@ -571,19 +578,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_is_null_pointer 201309L\n \n-  template<typename>\n-    struct __is_null_pointer_helper\n+  /// is_null_pointer (LWG 2247).\n+  template<typename _Tp>\n+    struct is_null_pointer\n     : public false_type { };\n \n   template<>\n-    struct __is_null_pointer_helper<std::nullptr_t>\n+    struct is_null_pointer<std::nullptr_t>\n     : public true_type { };\n \n-  /// is_null_pointer (LWG 2247).\n-  template<typename _Tp>\n-    struct is_null_pointer\n-    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type\n-    { };\n+  template<>\n+    struct is_null_pointer<const std::nullptr_t>\n+    : public true_type { };\n+\n+  template<>\n+    struct is_null_pointer<volatile std::nullptr_t>\n+    : public true_type { };\n+\n+  template<>\n+    struct is_null_pointer<const volatile std::nullptr_t>\n+    : public true_type { };\n \n   /// __is_nullptr_t (deprecated extension).\n   /// @deprecated Non-standard. Use `is_null_pointer` instead."}]}