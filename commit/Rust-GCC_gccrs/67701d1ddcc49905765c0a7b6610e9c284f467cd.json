{"sha": "67701d1ddcc49905765c0a7b6610e9c284f467cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3MDFkMWRkY2M0OTkwNTc2NWMwYTdiNjYxMGU5YzI4NGY0NjdjZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-26T16:12:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-26T16:12:49Z"}, "message": "re PR lto/46648 (type mismatch in array reference; verify_stmts failed)\n\n2010-11-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/46648\n\t* gimple.c (gtc_visit): Do not return true for members of an\n\tSCC still being processed but the current lattice value of\n\tthe member.  Treat SCC members comparison state as lattice,\n\tstarting at equal, eventually dropping to unequal.\n\t(gimple_types_compatible_p_1): Likewise.\n\n\t* gcc.dg/lto/20101125-1_0.c: New testcase.\n\t* gcc.dg/lto/20101125-1_1.c: Likewise.\n\nFrom-SVN: r167183", "tree": {"sha": "cdc2196f719da34e91111fc8b84478b26194f103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc2196f719da34e91111fc8b84478b26194f103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67701d1ddcc49905765c0a7b6610e9c284f467cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67701d1ddcc49905765c0a7b6610e9c284f467cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67701d1ddcc49905765c0a7b6610e9c284f467cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67701d1ddcc49905765c0a7b6610e9c284f467cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a50c005fea650125aa5bd574b64dd0aae9b206a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50c005fea650125aa5bd574b64dd0aae9b206a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50c005fea650125aa5bd574b64dd0aae9b206a4"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "810590c5e139d087296b024b46b98426186c4208", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67701d1ddcc49905765c0a7b6610e9c284f467cd", "patch": "@@ -1,3 +1,12 @@\n+2010-11-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/46648\n+\t* gimple.c (gtc_visit): Do not return true for members of an\n+\tSCC still being processed but the current lattice value of\n+\tthe member.  Treat SCC members comparison state as lattice,\n+\tstarting at equal, eventually dropping to unequal.\n+\t(gimple_types_compatible_p_1): Likewise.\n+\n 2010-11-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/46559"}, {"sha": "67c80e327c3fb99cf4f183ee97b1620e2b7cabeb", "filename": "gcc/gimple.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=67701d1ddcc49905765c0a7b6610e9c284f467cd", "patch": "@@ -3515,27 +3515,23 @@ gtc_visit (tree t1, tree t2, enum gtc_mode mode,\n \n   if ((slot = pointer_map_contains (sccstate, p)) != NULL)\n     cstate = (struct sccs *)*slot;\n+  /* Not yet visited.  DFS recurse.  */\n   if (!cstate)\n     {\n-      bool res;\n-      /* Not yet visited.  DFS recurse.  */\n-      res = gimple_types_compatible_p_1 (t1, t2, mode, p,\n-\t\t\t\t\t sccstack, sccstate, sccstate_obstack);\n-      if (!cstate)\n-\tcstate = (struct sccs *)* pointer_map_contains (sccstate, p);\n+      gimple_types_compatible_p_1 (t1, t2, mode, p,\n+\t\t\t\t   sccstack, sccstate, sccstate_obstack);\n+      cstate = (struct sccs *)* pointer_map_contains (sccstate, p);\n       state->low = MIN (state->low, cstate->low);\n-      /* If the type is no longer on the SCC stack and thus is not part\n-\t of the parents SCC, return its state.  Otherwise we will\n-\t ignore this pair and assume equality.  */\n-      if (!cstate->on_sccstack)\n-\treturn res;\n     }\n+  /* If the type is still on the SCC stack adjust the parents low.  */\n   if (cstate->dfsnum < state->dfsnum\n       && cstate->on_sccstack)\n     state->low = MIN (cstate->dfsnum, state->low);\n \n-  /* We are part of our parents SCC, skip this entry and return true.  */\n-  return true;\n+  /* Return the current lattice value.  We start with an equality\n+     assumption so types part of a SCC will be optimistically\n+     treated equal unless proven otherwise.  */\n+  return cstate->u.same_p;\n }\n \n /* Worker for gimple_types_compatible.\n@@ -3559,6 +3555,9 @@ gimple_types_compatible_p_1 (tree t1, tree t2, enum gtc_mode mode,\n   state->dfsnum = gtc_next_dfs_num++;\n   state->low = state->dfsnum;\n   state->on_sccstack = true;\n+  /* Start with an equality assumption.  As we DFS recurse into child\n+     SCCs this assumption may get revisited.  */\n+  state->u.same_p = 1;\n \n   /* If their attributes are not the same they can't be the same type.  */\n   if (!attribute_list_equal (TYPE_ATTRIBUTES (t1), TYPE_ATTRIBUTES (t2)))\n@@ -3822,22 +3821,22 @@ gimple_types_compatible_p_1 (tree t1, tree t2, enum gtc_mode mode,\n \n   /* Common exit path for types that are compatible.  */\n same_types:\n-  state->u.same_p = 1;\n-  goto pop;\n+  gcc_assert (state->u.same_p == 1);\n \n pop:\n   if (state->low == state->dfsnum)\n     {\n       type_pair_t x;\n \n-      /* Pop off the SCC and set its cache values.  */\n+      /* Pop off the SCC and set its cache values to the final\n+         comparison result.  */\n       do\n \t{\n \t  struct sccs *cstate;\n \t  x = VEC_pop (type_pair_t, *sccstack);\n \t  cstate = (struct sccs *)*pointer_map_contains (sccstate, x);\n \t  cstate->on_sccstack = false;\n-\t  x->same_p[mode] = cstate->u.same_p;\n+\t  x->same_p[mode] = state->u.same_p;\n \t}\n       while (x != p);\n     }"}, {"sha": "80706c08d1dd8629ef7f633750cc686b26887743", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67701d1ddcc49905765c0a7b6610e9c284f467cd", "patch": "@@ -1,3 +1,9 @@\n+2010-11-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/46648\n+\t* gcc.dg/lto/20101125-1_0.c: New testcase.\n+\t* gcc.dg/lto/20101125-1_1.c: Likewise.\n+\n 2010-11-22   Bud Davis  <jmdavis@link.com>\n \n \t* arith_divide_no_check.f"}, {"sha": "662dd243dc7e9a6db153f4d794c5be9ac1b77d4c", "filename": "gcc/testsuite/gcc.dg/lto/20101125-1_0.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_0.c?ref=67701d1ddcc49905765c0a7b6610e9c284f467cd", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-lto-do link } */\n+\n+struct X {\n+  int i;\n+};\n+\n+struct W {\n+  struct U *p;\n+  struct X *q;\n+};\n+\n+struct U {\n+  struct W a[1];\n+};\n+\n+void foo(struct U *ptr)\n+{\n+  ptr->a[0].p = 0;\n+}\n+\n+int main(void)\n+{\n+  return 0;\n+}"}, {"sha": "2924e3f26bea663952a867a06c47259d4f88bd94", "filename": "gcc/testsuite/gcc.dg/lto/20101125-1_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67701d1ddcc49905765c0a7b6610e9c284f467cd/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20101125-1_1.c?ref=67701d1ddcc49905765c0a7b6610e9c284f467cd", "patch": "@@ -0,0 +1,17 @@\n+struct X {\n+  char i;\n+};\n+\n+struct W {\n+  struct U *p;\n+  struct X *q;\n+};\n+\n+struct U {\n+  struct W a[1];\n+};\n+\n+void bar(struct U *ptr)\n+{\n+  ptr->a[0].p = 0;\n+}"}]}