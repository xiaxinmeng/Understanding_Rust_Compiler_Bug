{"sha": "2d4e055322196532ea62b73ae61fd61defde54ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0ZTA1NTMyMjE5NjUzMmVhNjJiNzNhZTYxZmQ2MWRlZmRlNTRjYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T08:51:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T08:51:09Z"}, "message": "[multiple changes]\n\n2010-10-22  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Predicates): Flag is now on all entities\n\t(simplifies code).\n\t* exp_ch13.adb (Build_Predicate_Function): Output info msgs for\n\tinheritance.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Make sure we have a\n\tfreeze node for entities for which a predicate is specified.\n\t(Analyze_Aspect_Specifications): Avoid duplicate calls\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Remove attempt to avoid\n\tduplicate calls to Analye_Aspect_Specifications.\n\n2010-10-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-exextr.adb, atree.ads, freeze.adb: Minor reformatting.\n\nFrom-SVN: r165804", "tree": {"sha": "7c5d049bebb269854526d4cebe8e99d2374f20b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5d049bebb269854526d4cebe8e99d2374f20b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d4e055322196532ea62b73ae61fd61defde54ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4e055322196532ea62b73ae61fd61defde54ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4e055322196532ea62b73ae61fd61defde54ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4e055322196532ea62b73ae61fd61defde54ca/comments", "author": null, "committer": null, "parents": [{"sha": "50ea58617e547a547af5df656801fedc0c070fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ea58617e547a547af5df656801fedc0c070fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ea58617e547a547af5df656801fedc0c070fe4"}], "stats": {"total": 121, "additions": 80, "deletions": 41}, "files": [{"sha": "b396ff6dad914701592994cf74ec4a1234bdea05", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -1,3 +1,19 @@\n+2010-10-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Predicates): Flag is now on all entities\n+\t(simplifies code).\n+\t* exp_ch13.adb (Build_Predicate_Function): Output info msgs for\n+\tinheritance.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Make sure we have a\n+\tfreeze node for entities for which a predicate is specified.\n+\t(Analyze_Aspect_Specifications): Avoid duplicate calls\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Remove attempt to avoid\n+\tduplicate calls to Analye_Aspect_Specifications.\n+\n+2010-10-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-exextr.adb, atree.ads, freeze.adb: Minor reformatting.\n+\n 2010-10-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb: Minor reformatting."}, {"sha": "26567b3a48840a5cddf2e09644a9b8600174104b", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,8 +53,7 @@ package body Exception_Traces is\n    pragma Export\n      (Ada, Raise_Hook_Initialized, \"__gnat_exception_actions_initialized\");\n \n-   procedure Last_Chance_Handler\n-     (Except :  Exception_Occurrence);\n+   procedure Last_Chance_Handler (Except : Exception_Occurrence);\n    pragma Import (C, Last_Chance_Handler, \"__gnat_last_chance_handler\");\n    pragma No_Return (Last_Chance_Handler);\n    --  Users can replace the default version of this routine,"}, {"sha": "31b4391e4cc0ce0d557dc379c219ba7a4a37172b", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -537,9 +537,8 @@ package Atree is\n \n    function Parent            (N : Node_Id) return Node_Id;\n    pragma Inline (Parent);\n-   --  Returns the parent of a node if the node is not a list member, or\n-   --  else the parent of the list containing the node if the node is a\n-   --  list member.\n+   --  Returns the parent of a node if the node is not a list member, or else\n+   --  the parent of the list containing the node if the node is a list member.\n \n    function No                (N : Node_Id) return Boolean;\n    pragma Inline (No);"}, {"sha": "68eedfd0bdbce7262e2ba91e6dc4e6db4c6af292", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -1411,7 +1411,6 @@ package body Einfo is\n \n    function Has_Predicates (Id : E) return B is\n    begin\n-      pragma Assert (Is_Type (Id) or else Is_Subprogram (Id));\n       return Flag250 (Id);\n    end Has_Predicates;\n \n@@ -3863,9 +3862,6 @@ package body Einfo is\n \n    procedure Set_Has_Predicates (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Is_Type (Id)\n-        or else Ekind (Id) = E_Function\n-        or else Ekind (Id) = E_Void);\n       Set_Flag250 (Id, V);\n    end Set_Has_Predicates;\n "}, {"sha": "febac6df7406bfe4c6ee6b29026f1e85ee9354cf", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -1674,11 +1674,11 @@ package Einfo is\n --       such an object and no warning is generated.\n \n --    Has_Predicates (Flag250)\n---       Present in type and subtype entities and in subprogram entities. Set\n---       if a pragma Predicate or Predicate aspect applies to the type, or if\n---       it inherits a Predicate aspect from its parent or progenitor types.\n---       Also set in the predicate function entity, to distinguish it among\n---       entries in the Subprograms_For_Type.\n+--       Present in all entities. Set in type and subtype entities if a pragma\n+--       Predicate or Predicate aspect applies to the type, or if it inherits a\n+--       Predicate aspect from its parent or progenitor types. Also set in the\n+--       predicate function entity, to distinguish it among entries in the\n+--       Subprograms_For_Type.\n \n --    Has_Primitive_Operations (Flag120) [base type only]\n --       Present in all type entities. Set if at least one primitive operation\n@@ -4666,6 +4666,7 @@ package Einfo is\n    --    Has_Pragma_Thread_Local_Storage     (Flag169)\n    --    Has_Pragma_Unmodified               (Flag233)\n    --    Has_Pragma_Unreferenced             (Flag180)\n+   --    Has_Predicates                      (Flag250)\n    --    Has_Private_Declaration             (Flag155)\n    --    Has_Qualified_Name                  (Flag161)\n    --    Has_Stream_Size_Clause              (Flag184)\n@@ -4778,7 +4779,6 @@ package Einfo is\n    --    Has_Object_Size_Clause              (Flag172)\n    --    Has_Pragma_Preelab_Init             (Flag221)\n    --    Has_Pragma_Unreferenced_Objects     (Flag212)\n-   --    Has_Predicates                      (Flag250)\n    --    Has_Primitive_Operations            (Flag120)  (base type only)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Specified_Layout                (Flag100)  (base type only)\n@@ -5138,7 +5138,6 @@ package Einfo is\n    --    Has_Missing_Return                  (Flag142)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Postconditions                  (Flag240)\n-   --    Has_Predicates                      (Flag250)\n    --    Has_Recursive_Call                  (Flag143)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n@@ -5271,7 +5270,6 @@ package Einfo is\n    --    Subprograms_For_Type                (Node29)\n    --    Has_Invariants                      (Flag232)\n    --    Has_Postconditions                  (Flag240)\n-   --    Has_Predicates                      (Flag250)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Pure                             (Flag44)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n@@ -5403,7 +5401,6 @@ package Einfo is\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Postconditions                  (Flag240)\n-   --    Has_Predicates                      (Flag250)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Asynchronous                     (Flag81)"}, {"sha": "8e9d2ca3188695d1cdd30c629ef40af3c6fc2983", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n+with Errout;   use Errout;\n with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Imgv; use Exp_Imgv;\n@@ -126,12 +127,17 @@ package body Exp_Ch13 is\n \n       begin\n          if Present (T) and then Present (Predicate_Function (T)) then\n+\n+            --  Build the call to the predicate function of T\n+\n             Exp :=\n               Make_Predicate_Call\n                 (T,\n                  Convert_To (T,\n                    Make_Identifier (Loc, Chars => Object_Name)));\n \n+            --  Add call to evolving expression, using AND THEN if needed\n+\n             if No (Expr) then\n                Expr := Exp;\n             else\n@@ -140,6 +146,14 @@ package body Exp_Ch13 is\n                    Left_Opnd  => Relocate_Node (Expr),\n                    Right_Opnd => Exp);\n             end if;\n+\n+            --  Output info message on inheritance if required\n+\n+            if Opt.List_Inherited_Aspects then\n+               Error_Msg_Sloc := Sloc (Predicate_Function (T));\n+               Error_Msg_Node_2 := T;\n+               Error_Msg_N (\"?info: & inherits predicate from & at #\", Typ);\n+            end if;\n          end if;\n       end Add_Call;\n \n@@ -200,24 +214,27 @@ package body Exp_Ch13 is\n                Arg1 := Get_Pragma_Arg (Arg1);\n                Arg2 := Get_Pragma_Arg (Arg2);\n \n-               --  We need to replace any occurrences of the name of the type\n-               --  with references to the object. We do this by first doing a\n-               --  preanalysis, to identify all the entities, then we traverse\n-               --  looking for the type entity, doing the needed substitution.\n-               --  The preanalysis is done with the special OK_To_Reference\n-               --  flag set on the type, so that if we get an occurrence of\n-               --  this type, it will be recognized as legitimate.\n-\n-               Set_OK_To_Reference (Typ, True);\n-               Preanalyze_Spec_Expression (Arg2, Standard_Boolean);\n-               Set_OK_To_Reference (Typ, False);\n-               Replace_Type (Arg2);\n-\n                --  See if this predicate pragma is for the current type\n \n                if Entity (Arg1) = Typ then\n \n-                  --  We have a match, add the expression\n+                  --  We have a match, this entry is for our subtype\n+\n+                  --  First We need to replace any occurrences of the name of\n+                  --  the type with references to the object. We do this by\n+                  --  first doing a preanalysis, to identify all the entities,\n+                  --  then we traverse looking for the type entity, doing the\n+                  --  needed substitution. The preanalysis is done with the\n+                  --  special OK_To_Reference flag set on the type, so that if\n+                  --  we get an occurrence of this type, it will be recognized\n+                  --  as legitimate.\n+\n+                  Set_OK_To_Reference (Typ, True);\n+                  Preanalyze_Spec_Expression (Arg2, Standard_Boolean);\n+                  Set_OK_To_Reference (Typ, False);\n+                  Replace_Type (Arg2);\n+\n+                  --  OK, replacement complete, now we can add the expression\n \n                   if No (Expr) then\n                      Expr := Relocate_Node (Arg2);"}, {"sha": "236ee2718948bbcfa01a113e52cddf0714d18dc2", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -3464,9 +3464,9 @@ package body Freeze is\n                   end;\n                end if;\n \n-               --  If any of the index types was an enumeration type with\n-               --  a non-standard rep clause, then we indicate that the\n-               --  array type is always packed (even if it is not bit packed).\n+               --  If any of the index types was an enumeration type with a\n+               --  non-standard rep clause, then we indicate that the array\n+               --  type is always packed (even if it is not bit packed).\n \n                if Non_Standard_Enum then\n                   Set_Has_Non_Standard_Rep (Base_Type (E));"}, {"sha": "58150a328935cc542e09c4d0754f137dcb0e96f4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -658,10 +658,21 @@ package body Sem_Ch13 is\n       --  Set True if delay is required\n \n    begin\n+      --  Return if no aspects\n+\n       if L = No_List then\n          return;\n       end if;\n \n+      --  Return if already analyzed (avoids duplicate calls in some cases\n+      --  where type declarations get rewritten and proessed twice).\n+\n+      if Analyzed (N) then\n+         return;\n+      end if;\n+\n+      --  Loop through apsects\n+\n       Aspect := First (L);\n       while Present (Aspect) loop\n          declare\n@@ -1068,6 +1079,12 @@ package body Sem_Ch13 is\n \n                   Set_From_Aspect_Specification (Aitem, True);\n \n+                  --  Make sure we have a freeze node (it might otherwise be\n+                  --  missing in cases like subtype X is Y, and we would not\n+                  --  have a place to build the predicate function).\n+\n+                  Ensure_Freeze_Node (E);\n+\n                   --  For Predicate case, insert immediately after the entity\n                   --  declaration. We do not have to worry about delay issues\n                   --  since the pragma processing takes care of this."}, {"sha": "335d348b6492fcd65f7947cbfae27a3c15c34b70", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e055322196532ea62b73ae61fd61defde54ca/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2d4e055322196532ea62b73ae61fd61defde54ca", "patch": "@@ -2403,9 +2403,7 @@ package body Sem_Ch3 is\n       Set_Optimize_Alignment_Flags (Def_Id);\n       Check_Eliminated (Def_Id);\n \n-      if Nkind (N) = N_Full_Type_Declaration then\n-         Analyze_Aspect_Specifications (N, Def_Id, Aspect_Specifications (N));\n-      end if;\n+      Analyze_Aspect_Specifications (N, Def_Id, Aspect_Specifications (N));\n    end Analyze_Full_Type_Declaration;\n \n    ----------------------------------\n@@ -4215,8 +4213,8 @@ package body Sem_Ch3 is\n       Set_Optimize_Alignment_Flags (Id);\n       Check_Eliminated (Id);\n \n-      <<Leave>>\n-         Analyze_Aspect_Specifications (N, Id, Aspect_Specifications (N));\n+   <<Leave>>\n+      Analyze_Aspect_Specifications (N, Id, Aspect_Specifications (N));\n    end Analyze_Subtype_Declaration;\n \n    --------------------------------"}]}