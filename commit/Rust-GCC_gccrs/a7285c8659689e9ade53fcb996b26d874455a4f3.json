{"sha": "a7285c8659689e9ade53fcb996b26d874455a4f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyODVjODY1OTY4OWU5YWRlNTNmY2I5OTZiMjZkODc0NDU1YTRmMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-25T09:37:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-25T09:37:58Z"}, "message": "middle-end: Reject flexible array members in __builtin_clear_padding [PR97943]\n\nAs mentioned in the PR, we currently ICE on flexible array members in\nstructs and unions during __builtin_clear_padding processing.\n\nJason said in the PR he'd prefer an error in these cases over forcefully\nhandling it as [0] arrays (everything is padding then) or consider the\narrays to have as many whole elements as would fit into the tail padding.\n\nSo, this patch implements that.\n\n2020-11-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/97943\n\t* gimple-fold.c (clear_padding_union, clear_padding_type): Error on and\n\tignore flexible array member fields.  Ignore fields with\n\terror_mark_node type.\n\n\t* c-c++-common/builtin-clear-padding-2.c: New test.\n\t* c-c++-common/builtin-clear-padding-3.c: New test.\n\t* g++.dg/ext/builtin-clear-padding-1.C: New test.\n\t* gcc.dg/builtin-clear-padding-2.c: New test.", "tree": {"sha": "5db8400816f1cad1b376e8d8f448dfef057be0fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db8400816f1cad1b376e8d8f448dfef057be0fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7285c8659689e9ade53fcb996b26d874455a4f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7285c8659689e9ade53fcb996b26d874455a4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7285c8659689e9ade53fcb996b26d874455a4f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7285c8659689e9ade53fcb996b26d874455a4f3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2c9a2761097a6758b6aaaf612d629aa7e9febf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2c9a2761097a6758b6aaaf612d629aa7e9febf"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "1f0a609706e82fb6f2159aaf3cbd6d205284ac67", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a7285c8659689e9ade53fcb996b26d874455a4f3", "patch": "@@ -4329,6 +4329,17 @@ clear_padding_union (clear_padding_struct *buf, tree type, HOST_WIDE_INT sz)\n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     if (TREE_CODE (field) == FIELD_DECL)\n       {\n+\tif (DECL_SIZE_UNIT (field) == NULL_TREE)\n+\t  {\n+\t    if (TREE_TYPE (field) == error_mark_node)\n+\t      continue;\n+\t    gcc_assert (TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE\n+\t\t\t&& !COMPLETE_TYPE_P (TREE_TYPE (field)));\n+\t    error_at (buf->loc, \"flexible array member %qD does not have \"\n+\t\t\t\t\"well defined padding bits for %qs\",\n+\t\t      field, \"__builtin_clear_padding\");\n+\t    continue;\n+\t  }\n \tHOST_WIDE_INT fldsz = tree_to_shwi (DECL_SIZE_UNIT (field));\n \tgcc_assert (union_buf->size == 0);\n \tunion_buf->off = start_off;\n@@ -4446,11 +4457,12 @@ clear_padding_type (clear_padding_struct *buf, tree type, HOST_WIDE_INT sz)\n       for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL)\n \t  {\n+\t    tree ftype = TREE_TYPE (field);\n \t    if (DECL_BIT_FIELD (field))\n \t      {\n \t\tif (DECL_NAME (field) == NULL_TREE)\n \t\t  continue;\n-\t\tHOST_WIDE_INT fldsz = TYPE_PRECISION (TREE_TYPE (field));\n+\t\tHOST_WIDE_INT fldsz = TYPE_PRECISION (ftype);\n \t\tif (fldsz == 0)\n \t\t  continue;\n \t\tHOST_WIDE_INT pos = int_byte_position (field);\n@@ -4513,6 +4525,16 @@ clear_padding_type (clear_padding_struct *buf, tree type, HOST_WIDE_INT sz)\n \t\t      }\n \t\t  }\n \t      }\n+\t    else if (DECL_SIZE_UNIT (field) == NULL_TREE)\n+\t      {\n+\t\tif (ftype == error_mark_node)\n+\t\t  continue;\n+\t\tgcc_assert (TREE_CODE (ftype) == ARRAY_TYPE\n+\t\t\t    && !COMPLETE_TYPE_P (ftype));\n+\t\terror_at (buf->loc, \"flexible array member %qD does not have \"\n+\t\t\t\t    \"well defined padding bits for %qs\",\n+\t\t\t  field, \"__builtin_clear_padding\");\n+\t      }\n \t    else\n \t      {\n \t\tHOST_WIDE_INT pos = int_byte_position (field);"}, {"sha": "67c03c898d68c1fa12d69fa56a50da71dbb6191f", "filename": "gcc/testsuite/c-c++-common/builtin-clear-padding-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-2.c?ref=a7285c8659689e9ade53fcb996b26d874455a4f3", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/97943 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct S { int a; char b[] __attribute__((aligned (2 * sizeof (int)))); };\n+struct T { int a; struct S b; };\n+union U { int a; struct S b; };\n+struct V { int a; union U b; };\n+\n+void\n+foo (struct S *s, struct T *t, union U *u, struct V *v)\n+{\n+  __builtin_clear_padding (s);\t/* { dg-error \"flexible array member '(S::)?b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+  __builtin_clear_padding (t);\t/* { dg-error \"flexible array member '(S::)?b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+  __builtin_clear_padding (u);\t/* { dg-error \"flexible array member '(S::)?b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+  __builtin_clear_padding (v);\t/* { dg-error \"flexible array member '(S::)?b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+}"}, {"sha": "d16cc6aad05fb077a0f20899d4c6d88559d1f86d", "filename": "gcc/testsuite/c-c++-common/builtin-clear-padding-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-clear-padding-3.c?ref=a7285c8659689e9ade53fcb996b26d874455a4f3", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/97943 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+union U { int a; char b[] __attribute__((aligned (2 * sizeof (int)))); };\t/* { dg-error \"flexible array member in union\" } */\n+struct V { int a; union U b; };\n+struct W { int a; union U b; int c; };\n+\n+void\n+foo (union U *u, struct V *v, struct W *w)\n+{\n+  __builtin_clear_padding (u);\n+  __builtin_clear_padding (v);\n+  __builtin_clear_padding (w);\n+}"}, {"sha": "d1881869e02850d936a3f2d99e655ab20fa7f6c5", "filename": "gcc/testsuite/g++.dg/ext/builtin-clear-padding-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-clear-padding-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-clear-padding-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-clear-padding-1.C?ref=a7285c8659689e9ade53fcb996b26d874455a4f3", "patch": "@@ -0,0 +1,15 @@\n+// PR middle-end/97943\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+struct S { int a; char b[] __attribute__((aligned (2 * sizeof (int)))); }; // { dg-error \"flexible array member 'S::b' not at end of 'struct \\[TV]'\" }\n+struct T { int a; struct S b; int c; };\t// { dg-message \"next member 'int T::c' declared here|in the definition of 'struct T'\" }\n+union U { int a; struct S b; };\n+struct V { int a; union U b; int : 15; int c; };\t// { dg-message \"next member 'int V::c' declared here|in the definition of 'struct V'\" }\n+\n+void\n+foo (struct T *t, struct V *v)\n+{\n+  __builtin_clear_padding (t);\t// { dg-error \"flexible array member 'S::b' does not have well defined padding bits for '__builtin_clear_padding'\" }\n+  __builtin_clear_padding (v);\t// { dg-error \"flexible array member 'S::b' does not have well defined padding bits for '__builtin_clear_padding'\" }\n+}"}, {"sha": "641d47d70f0611d7997e55e4db3465e9b3d268e9", "filename": "gcc/testsuite/gcc.dg/builtin-clear-padding-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-clear-padding-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7285c8659689e9ade53fcb996b26d874455a4f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-clear-padding-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-clear-padding-2.c?ref=a7285c8659689e9ade53fcb996b26d874455a4f3", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/97943 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct S { int a; char b[] __attribute__((aligned (2 * sizeof (int)))); };\n+struct T { int a; struct S b; int c; };\n+union U { int a; struct S b; };\n+struct V { int a; union U b; int : 15; int c; };\n+\n+void\n+foo (struct T *t, struct V *v)\n+{\n+  __builtin_clear_padding (t);\t/* { dg-error \"flexible array member 'b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+  __builtin_clear_padding (v);\t/* { dg-error \"flexible array member 'b' does not have well defined padding bits for '__builtin_clear_padding'\" } */\n+}"}]}