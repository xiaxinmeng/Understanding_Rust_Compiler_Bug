{"sha": "9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmNmI1YzFkM2M1ZTU2ODg0MDM5MmJhMjZhNDhjYmJmZTE3ZWJjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-12T22:39:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-12T22:39:43Z"}, "message": "re PR testsuite/38163 (gcc.dg/tree-ssa/loop-3.c failure at -m64 on i686-apple-darwin9)\n\n\tPR testsuite/38163\n\t* gcc.dg/tree-ssa/loop-3.c: Compile only on nonpic x86 targets.\n\tRemove dg-skip-if directive.\n\nFrom-SVN: r142726", "tree": {"sha": "727f9d2f7f963c41d75bb2228c2e7a975c7fe3b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/727f9d2f7f963c41d75bb2228c2e7a975c7fe3b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/comments", "author": null, "committer": null, "parents": [{"sha": "72c282c6e3350a74771c835e8ddb67962655a414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c282c6e3350a74771c835e8ddb67962655a414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c282c6e3350a74771c835e8ddb67962655a414"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "585f102b6218001cd9196691ec6493afa48af484", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "patch": "@@ -48,8 +48,8 @@\n \n 2008-12-12  Ben Elliston  <bje@au.ibm.com>\n \n-\t* config/fp-bit.c (nan): Rename from this ..\n-\t(makenan): .. to this.\n+\t* config/fp-bit.c (nan): Rename from this ...\n+\t(makenan): ... to this.\n \n 2008-12-11  Adam Nemet  <anemet@caviumnetworks.com>\n \n@@ -178,8 +178,7 @@\n \t(new_graphite_bb): Test for useful statements before building a\n \tgraphite statement for the basic block.\n \t(free_graphite_bb): Do not free GBB_DATA_REFS: this is a bug\n-\tin free_data_ref that calls BITMAP_FREE (DR_VOPS (dr)) without\n-\treason.\n+\tin free_data_ref that calls BITMAP_FREE (DR_VOPS (dr)) without reason.\n \t(recompute_all_dominators, graphite_verify,\n \tnb_reductions_in_loop, graphite_loop_normal_form): New.\n \t(scop_record_loop): Call graphite_loop_normal_form.\n@@ -198,7 +197,7 @@\n \t(debug_rename_elt, debug_rename_map_1, debug_rename_map): New.\n \t(remove_all_edges_1, remove_all_edges): Removed.\n \t(get_new_name_from_old_name): New.\n-\t(graphite_rename_variables_in_stmt): Renamed\n+\t(graphite_rename_variables_in_stmt): Renamed.\n \trename_variables_in_stmt.  Call get_new_name_from_old_name.\n \tUse replace_exp\tand update_stmt.\n \t(is_old_iv): Renamed is_iv.\n@@ -225,7 +224,7 @@\n \tpatch_phis_for_virtual_defs): Removed huge hack.\n \t(mark_old_loops, remove_dead_loops, skip_phi_defs,\n \tcollect_scop_exit_phi_args, patch_scop_exit_phi_args,\n-\tgbb_can_be_ignored, scop_remove_ignoreable_gbbs, ): Removed.\n+\tgbb_can_be_ignored, scop_remove_ignoreable_gbbs): Removed.\n \t(remove_sese_region, ifsese, if_region_entry, if_region_exit,\n \tif_region_get_condition_block, if_region_set_false_region,\n \tcreate_if_region_on_edge, move_sese_in_condition, bb_in_sese_p,\n@@ -376,8 +375,7 @@\n \tira_reg_class_super_classes): New.\n \n \t* ira-color.c (update_copy_costs): Use\n-\tira_reg_classes_intersect_p.  Use right class to find hard reg\n-\tindex.\n+\tira_reg_classes_intersect_p.  Use right class to find hard reg index.\n \t(update_conflict_hard_regno_costs): Ditto.  Add a new parameter.\n \t(assign_hard_reg): Ditto.  Pass additional argument to\n \tupdate_conflict_hard_regno_costs.  Do not uncoalesce for priority\n@@ -405,13 +403,11 @@\n \n \t* ira-build.c (propagate_allocno_info): Use flag flag_ira_region\n \tinstead of flag_ira_algorithm.\n-\t(allocno_range_compare_func): Ignore classes for priority\n-\tcoloring.\n+\t(allocno_range_compare_func): Ignore classes for priority coloring.\n \t(setup_min_max_conflict_allocno_ids): Ditto.\n \t(ira_flattening): Use ira_reg_classes_intersect_p.\n \n-\t* genpreds.c (write_enum_constraint_num): Output\n-\tCONSTRAINT__LIMIT.\n+\t* genpreds.c (write_enum_constraint_num): Output CONSTRAINT__LIMIT.\n \n \t* common.opt (fira-algorithm): Modify.\n \t(fira-region): New.\n@@ -427,8 +423,7 @@\n \t(ira): Use flag flag_ira_region instead of flag_ira_algorithm.\n \n \t* ira-costs.c (common_classes): New.\n-\t(print_costs): Use flag flag_ira_region instead of\n-\tflag_ira_algorithm.\n+\t(print_costs): Use flag flag_ira_region instead of flag_ira_algorithm.\n \t(find_allocno_class_costs): Ditto.  Use common_classes.  Translate\n \talt_class.\n \t(ira_costs): Allocate/deallocate common_classes.\n@@ -485,10 +480,10 @@\n 2008-12-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (movti, movdi_64, movdi_31,\n-\t  *movsi_zarch, *movhi, *movqi, *mov<mode>_64, *mov<mode>_31,\n-\t  *mov<mode>_64dfp, *mov<mode>_64, *mov<mode>_31, mov<mode>): Remove\n-\t  Q->Q alternative.\n-\t  (Integer->BLKmode splitter): Removed.\n+\t*movsi_zarch, *movhi, *movqi, *mov<mode>_64, *mov<mode>_31,\n+\t*mov<mode>_64dfp, *mov<mode>_64, *mov<mode>_31, mov<mode>): Remove\n+\tQ->Q alternative.\n+\t(Integer->BLKmode splitter): Removed.\n \n 2008-12-08  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -3419,7 +3414,7 @@\n \t* global.c (compute_regs_asm_clobbered, build_insn_chain):\n \tReplaced struct df_ref * with df_ref.\n \t* ifcvt.c (dead_or_predicable): Replaced struct df_ref * with df_ref.\n-\t* sel-sched-ir.c (maybe_downgrade_id_to_use, setup_id_reg_sets, ):\n+\t* sel-sched-ir.c (maybe_downgrade_id_to_use, setup_id_reg_sets):\n \tReplaced struct df_ref * with df_ref.\n \t* ira-lives.c (mark_ref_live, def_conflicts_with_inputs_p,\n \tmark_ref_dead, process_bb_node_lives): Replaced struct df_ref *\n@@ -19070,7 +19065,7 @@\n \n \t* doc/rtl.texi: Removed reference to REG_NO_CONFLICT notes.\n \t* optabs.c (expand_binop, expand_absneg_bit, expand_unop,\n-\texpand_copysign_bit, ): Change call to emit_no_conflict_block to\n+\texpand_copysign_bit): Change call to emit_no_conflict_block to\n \temit_insn and remove unneeded code to construct extra args.\n \t(emit_no_conflict_block): Removed.\n \t* optabls.h: (emit_no_conflict_block): Removed.\n@@ -19350,7 +19345,7 @@\n \t* dojump.c (do_jump): Likewise.\n \t* tree-ssa-sccvn.c (simplify_unary_expression): Likewise.\n \t* tree-gimple.c (is_gimple_cast): Likewise.\n-\t* fold-const.c (decode_field_reference, )\n+\t* fold-const.c (decode_field_reference)\n \t(fold_sign_changed_comparison, fold_unary, fold_comparison)\n \t(fold_binary): Likewise.\n \t* tree-ssa-alias-warnings.c (find_alias_site_helper)\n@@ -21353,7 +21348,7 @@\n \t(compute_reloc_for_constant, output_addressed_constants): Likewise.\n \t* emit-rtl.c (component_ref_for_mem_expr)\n \t(set_mem_attributes_minus_bitpos): Likewise.\n-\t* expr.c (highest_pow2_factor, expand_expr_real_1, )\n+\t* expr.c (highest_pow2_factor, expand_expr_real_1)\n \t(is_aligning_offset): Likewise.\n \t* dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info): Likewise.\n \t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise."}, {"sha": "31cab65fb1a842da52f03a70ecab3b12bdb24eae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "patch": "@@ -1,3 +1,9 @@\n+2008-12-12  Uros Bizjak <ubizjak@gmail.com>\n+\n+\tPR testsuite/38163\n+\t* gcc.dg/tree-ssa/loop-3.c: Compile only on nonpic x86 targets.\n+\tRemove dg-skip-if directive.\n+\n 2008-12-12  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR libgfortran/24685\n@@ -118,7 +124,7 @@\n \tPR tree-optimization/37416\n \t* gcc.dg/vect/pr36630.c: Expect 1 vectorized loop.\n \n-2008-12-10 Uros Bizjak <ubizjak@gmail.com>\n+2008-12-10  Uros Bizjak <ubizjak@gmail.com>\n \n \t* gcc.dg/20020919-1.c: Correct target selector to alpha*-*-*.\n \t* gcc.dg/pr31866.c: Ditto.\n@@ -7107,7 +7113,7 @@\n \tPR c++/35327\n \t* g++.dg/parse/crash41.C: New.\n \n-2008-06-06  Uros Bizjak <ubizjak@gmail.com>\n+2008-06-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/36438\n \t* gcc.target/i386/pr36438.c"}, {"sha": "9868c078df2024588822932624087e14a5be094c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c?ref=9bf6b5c1d3c5e568840392ba26a48cbbfe17ebc5", "patch": "@@ -2,9 +2,8 @@\n    Target is restricted to x86 type architectures, so that we may\n    assume something about memory addressing modes.  */\n \n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-skip-if \"\" { i?86-*-* x86_64-*-* } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n-/* { dg-options \"-O1 -fno-pic -fno-PIC -fdump-tree-optimized\" } */\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && nonpic } } } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int arr_base[100];\n "}]}