{"sha": "ab75303f7d67ec56b43c7a5d4220e0002665c310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3NTMwM2Y3ZDY3ZWM1NmI0M2M3YTVkNDIyMGUwMDAyNjY1YzMxMA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-05-26T18:17:13Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-05-26T18:17:13Z"}, "message": "PR 61310 Rewrite implementation of CTIME and FDATE intrinsics.\n\n2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/61310\n\t* intrinsics.texi (CTIME): Remove mention of locale-dependent\n\tbehavior.\n\n2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/61310\n\t* intrinsics/ctime.c (strctime): Rename to gf_ctime, use snprintf\n\tinstead of strftime.\n\t(fdate): Use gf_ctime.\n\t(fdate_sub): Likewise.\n\t(ctime): Likewise.\n\t(ctime_sub): Likewise.\n\nFrom-SVN: r210938", "tree": {"sha": "3a4c498e474644d1e8fa23190c3286a2df8bddb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4c498e474644d1e8fa23190c3286a2df8bddb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab75303f7d67ec56b43c7a5d4220e0002665c310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab75303f7d67ec56b43c7a5d4220e0002665c310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab75303f7d67ec56b43c7a5d4220e0002665c310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab75303f7d67ec56b43c7a5d4220e0002665c310/comments", "author": null, "committer": null, "parents": [{"sha": "b8140cd629d333788a47719d49d495e9657c219a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8140cd629d333788a47719d49d495e9657c219a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8140cd629d333788a47719d49d495e9657c219a"}], "stats": {"total": 94, "additions": 62, "deletions": 32}, "files": [{"sha": "91cb167b3fda586d4af6262e0455f2938727af49", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab75303f7d67ec56b43c7a5d4220e0002665c310/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab75303f7d67ec56b43c7a5d4220e0002665c310/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ab75303f7d67ec56b43c7a5d4220e0002665c310", "patch": "@@ -1,3 +1,9 @@\n+2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61310\n+\t* intrinsics.texi (CTIME): Remove mention of locale-dependent\n+\tbehavior.\n+\n 2014-05-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55117"}, {"sha": "8402a1fc0bf7adb48d809145dee75b2acded200b", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab75303f7d67ec56b43c7a5d4220e0002665c310/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab75303f7d67ec56b43c7a5d4220e0002665c310/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ab75303f7d67ec56b43c7a5d4220e0002665c310", "patch": "@@ -3508,10 +3508,8 @@ end program test_cshift\n @table @asis\n @item @emph{Description}:\n @code{CTIME} converts a system time value, such as returned by\n-@code{TIME8}, to a string. Unless the application has called\n-@code{setlocale}, the output will be in the default locale, of length\n-24 and of the form @samp{Sat Aug 19 18:13:14 1995}. In other locales,\n-a longer string may result.\n+@code{TIME8}, to a string. The output will be of the form @samp{Sat\n+Aug 19 18:13:14 1995}.\n \n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit."}, {"sha": "9b33b2ac8baa3fe6c729a3f18ad7f6aeba4c2157", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab75303f7d67ec56b43c7a5d4220e0002665c310/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab75303f7d67ec56b43c7a5d4220e0002665c310/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ab75303f7d67ec56b43c7a5d4220e0002665c310", "patch": "@@ -1,3 +1,13 @@\n+2014-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/61310\n+\t* intrinsics/ctime.c (strctime): Rename to gf_ctime, use snprintf\n+\tinstead of strftime.\n+\t(fdate): Use gf_ctime.\n+\t(fdate_sub): Likewise.\n+\t(ctime): Likewise.\n+\t(ctime_sub): Likewise.\n+\n 2014-05-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/55117\n@@ -6,7 +16,7 @@\n \textended type parent indicator.  (str_comp_extended): New\n \thelper function to compare the namelist name with the varname\n \tnamelist. (find_nml_name): Use the new helper functions to match\n-\tthe extended type varnames.\t\n+\tthe extended type varnames.\n \n 2014-05-23  Jerry DeLisle  <jvdelisle@gcc.gnu>\n "}, {"sha": "9cda39b0e9ab5912448604cbfdd80679af3d40ba", "filename": "libgfortran/intrinsics/ctime.c", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab75303f7d67ec56b43c7a5d4220e0002665c310/libgfortran%2Fintrinsics%2Fctime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab75303f7d67ec56b43c7a5d4220e0002665c310/libgfortran%2Fintrinsics%2Fctime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fctime.c?ref=ab75303f7d67ec56b43c7a5d4220e0002665c310", "patch": "@@ -31,31 +31,53 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <string.h>\n \n \n-/* strftime-like function that fills a C string with %c format which\n-   is identical to ctime in the default locale. As ctime and ctime_r\n-   are poorly specified and their usage not recommended, the\n-   implementation instead uses strftime.  */\n-\n-static size_t\n-strctime (char *s, size_t max, const time_t *timep)\n+/* Maximum space a ctime-like string might need. A \"normal\" ctime\n+   string is 26 bytes, and in our case 24 bytes as we don't include\n+   the trailing newline and null. However, the longest possible year\n+   number is -2,147,481,748 (1900 - 2,147,483,648, since tm_year is a\n+   32-bit signed integer) so an extra 7 bytes are needed. */\n+#define CTIME_BUFSZ 31\n+\n+\n+/* Thread-safe ctime-like function that fills a Fortran\n+   string. ctime_r is a portability headache and marked as obsolescent\n+   in POSIX 2008, which recommends strftime in its place. However,\n+   strftime(..., \"%c\",...)  doesn't produce ctime-like output on\n+   MinGW, so do it manually with snprintf.  */\n+\n+static int\n+gf_ctime (char *s, size_t max, const time_t timev)\n {\n   struct tm ltm;\n   int failed;\n+  char buf[CTIME_BUFSZ + 1];\n   /* Some targets provide a localtime_r based on a draft of the POSIX\n      standard where the return type is int rather than the\n      standardized struct tm*.  */\n-  __builtin_choose_expr (__builtin_classify_type (localtime_r (timep, &ltm)) \n+  __builtin_choose_expr (__builtin_classify_type (localtime_r (&timev, &ltm)) \n \t\t\t == 5,\n-\t\t\t failed = localtime_r (timep, &ltm) == NULL,\n-\t\t\t failed = localtime_r (timep, &ltm) != 0);\n+\t\t\t failed = localtime_r (&timev, &ltm) == NULL,\n+\t\t\t failed = localtime_r (&timev, &ltm) != 0);\n   if (failed)\n-    return 0;\n-  return strftime (s, max, \"%c\", &ltm);\n+    goto blank;\n+  int n = snprintf (buf, sizeof (buf), \n+\t\t    \"%3.3s %3.3s%3d %.2d:%.2d:%.2d %d\",\n+\t\t    \"SunMonTueWedThuFriSat\" + ltm.tm_wday * 3,\n+\t\t    \"JanFebMarAprMayJunJulAugSepOctNovDec\" + ltm.tm_mon * 3,\n+\t\t    ltm.tm_mday, ltm.tm_hour, ltm.tm_min, ltm.tm_sec, \n+\t\t    1900 + ltm.tm_year);\n+  if (n < 0)\n+    goto blank;\n+  if ((size_t) n <= max)\n+    {\n+      cf_strcpy (s, max, buf);\n+      return n;\n+    }\n+ blank:\n+  memset (s, ' ', max);\n+  return 0;\n }\n \n-/* In the default locale, the date and time representation fits in 26\n-   bytes. However, other locales might need more space.  */\n-#define CSZ 100\n \n extern void fdate (char **, gfc_charlen_type *);\n export_proto(fdate);\n@@ -64,8 +86,8 @@ void\n fdate (char ** date, gfc_charlen_type * date_len)\n {\n   time_t now = time(NULL);\n-  *date = xmalloc (CSZ);\n-  *date_len = strctime (*date, CSZ, &now);\n+  *date = xmalloc (CTIME_BUFSZ);\n+  *date_len = gf_ctime (*date, CTIME_BUFSZ, now);\n }\n \n \n@@ -76,10 +98,7 @@ void\n fdate_sub (char * date, gfc_charlen_type date_len)\n {\n   time_t now = time(NULL);\n-  char *s = xmalloc (date_len + 1);\n-  size_t n = strctime (s, date_len + 1, &now);\n-  fstrcpy (date, date_len, s, n);\n-  free (s);\n+  gf_ctime (date, date_len, now);\n }\n \n \n@@ -91,8 +110,8 @@ void\n PREFIX(ctime) (char ** date, gfc_charlen_type * date_len, GFC_INTEGER_8 t)\n {\n   time_t now = t;\n-  *date = xmalloc (CSZ);\n-  *date_len = strctime (*date, CSZ, &now);\n+  *date = xmalloc (CTIME_BUFSZ);\n+  *date_len = gf_ctime (*date, CTIME_BUFSZ, now);\n }\n \n \n@@ -103,8 +122,5 @@ void\n ctime_sub (GFC_INTEGER_8 * t, char * date, gfc_charlen_type date_len)\n {\n   time_t now = *t;\n-  char *s = xmalloc (date_len + 1);\n-  size_t n = strctime (s, date_len + 1, &now);\n-  fstrcpy (date, date_len, s, n);\n-  free (s);\n+  gf_ctime (date, date_len, now);\n }"}]}