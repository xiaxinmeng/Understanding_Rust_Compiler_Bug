{"sha": "e994a705a9d8447c17486c13d741c2692c475f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5NGE3MDVhOWQ4NDQ3YzE3NDg2YzEzZDc0MWMyNjkyYzQ3NWY2Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-12-04T19:56:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-12-04T19:56:47Z"}, "message": "re PR c/7776 (const char* p = \"foo\"; if (p == \"foo\") ... is compiled without warning!)\n\n\n\tPR c/7776\n\t* common.opt (Wstring-literal-comparison): New command line option.\n\t* c-opts.c (c_common_handle_option): Set it with -Wall.\n\t* c-typeck.c (parser_build_binary_op): Issue warning if either\n\toperand of a comparison operator is a string literal, except for\n\ttesting equality or inequality against NULL.\n\n\t* doc/invoke.texi: Document new -Wstring-literal-comparison option.\n\n\t* gcc.dg/Wstring-literal-comparison-1.c: New test case.\n\t* gcc.dg/Wstring-literal-comparison-2.c: Likewise.\n\t* gcc.dg/Wstring-literal-comparison-3.c: Likewise.\n\t* gcc.dg/Wstring-literal-comparison-4.c: Likewise.\n\nFrom-SVN: r108018", "tree": {"sha": "0c868f77e7b841472e04bdb16256459255a05c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c868f77e7b841472e04bdb16256459255a05c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e994a705a9d8447c17486c13d741c2692c475f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e994a705a9d8447c17486c13d741c2692c475f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e994a705a9d8447c17486c13d741c2692c475f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e994a705a9d8447c17486c13d741c2692c475f67/comments", "author": null, "committer": null, "parents": [{"sha": "93af36c5c18bae3a294d98e46300ea3a867ecf56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93af36c5c18bae3a294d98e46300ea3a867ecf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93af36c5c18bae3a294d98e46300ea3a867ecf56"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "d8fc5310c8ced7946c231f32058e56b09a431424", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -1,3 +1,14 @@\n+2005-12-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/7776\n+\t* common.opt (Wstring-literal-comparison): New command line option.\n+\t* c-opts.c (c_common_handle_option): Set it with -Wall.\n+\t* c-typeck.c (parser_build_binary_op): Issue warning if either\n+\toperand of a comparison operator is a string literal, except for\n+\ttesting equality or inequality against NULL.\n+\n+\t* doc/invoke.texi: Document new -Wstring-literal-comparison option.\n+\n 2005-12-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_sizeof_or_alignof_type): Use fold_convert instead"}, {"sha": "86f224407be025a0b02a28527cc8566918c1c1b8", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -386,6 +386,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \twarn_sign_compare = value;\n       warn_switch = value;\n       warn_strict_aliasing = value;\n+      warn_string_literal_comparison = value;\n \n       /* Only warn about unknown pragmas that are not in system\n \t headers.  */"}, {"sha": "062de7cded0a313bb9b7dc89e9a7b9da164eaf6f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -2552,6 +2552,20 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n \n     }\n \n+  /* Warn about comparisons against string literals, with the exception\n+     of testing for equality or inequality of a string literal with NULL.  */\n+  if (code == EQ_EXPR || code == NE_EXPR)\n+    {\n+      if ((code1 == STRING_CST && !integer_zerop (arg2.value))\n+\t  || (code2 == STRING_CST && !integer_zerop (arg1.value)))\n+\twarning (OPT_Wstring_literal_comparison,\n+\t\t \"comparison with string literal\");\n+    }\n+  else if (TREE_CODE_CLASS (code) == tcc_comparison\n+\t   && (code1 == STRING_CST || code2 == STRING_CST))\n+    warning (OPT_Wstring_literal_comparison,\n+\t     \"comparison with string literal\");\n+\n   unsigned_conversion_warning (result.value, arg1.value);\n   unsigned_conversion_warning (result.value, arg2.value);\n   overflow_warning (result.value);"}, {"sha": "e49838ae5f0e77bcb7fe870a65957893246a9da9", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -125,6 +125,10 @@ Wstrict-aliasing=\n Common Joined UInteger\n Warn about code which might break strict aliasing rules\n \n+Wstring-literal-comparison\n+Common Var(warn_string_literal_comparison)\n+Warn about comparisons to constant string literals\n+\n Wswitch\n Common Var(warn_switch)\n Warn about enumerated switches, with no default, missing a case"}, {"sha": "f08c25259ddc8870979749d5e266c83da7bfbc0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -1,3 +1,11 @@\n+2005-12-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/7776\n+\t* gcc.dg/Wstring-literal-comparison-1.c: New test case.\n+\t* gcc.dg/Wstring-literal-comparison-2.c: Likewise.\n+\t* gcc.dg/Wstring-literal-comparison-3.c: Likewise.\n+\t* gcc.dg/Wstring-literal-comparison-4.c: Likewise.\n+\n 2005-12-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/cast-pretty-print-1.c: New test."}, {"sha": "c5dea463b51d05ad60f0b79dec8eaf6f525c7a18", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-1.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/7776 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wstring-literal-comparison\" } */\n+\n+int test1(char *ptr)\n+{\n+  return ptr == \"foo\";  /* { dg-warning \"comparison with string\" } */\n+}\n+\n+int test2()\n+{\n+  return \"foo\" != (const char*)0;\n+}\n+\n+int test3()\n+{\n+  return \"foo\" == (const char*)0;\n+}\n+\n+int test4()\n+{\n+  return (const char*)0 != \"foo\";\n+}\n+\n+int test5()\n+{\n+  return (const char*)0 == \"foo\";\n+}\n+"}, {"sha": "3eb91eeca492aeb66aa3e9a7bdd374c37b9b61a6", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-2.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/7776 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+int test1(char *ptr)\n+{\n+  return ptr == \"foo\";  /* { dg-warning \"comparison with string\" } */\n+}\n+\n+int test2()\n+{\n+  return \"foo\" != (const char*)0;\n+}\n+\n+int test3()\n+{\n+  return \"foo\" == (const char*)0;\n+}\n+\n+int test4()\n+{\n+  return (const char*)0 != \"foo\";\n+}\n+\n+int test5()\n+{\n+  return (const char*)0 == \"foo\";\n+}\n+"}, {"sha": "f700a51a87b89ecbf3c417ffb5659c08d8a9c408", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-3.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/7776 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int test1(char *ptr)\n+{\n+  return ptr == \"foo\";\n+}\n+\n+int test2()\n+{\n+  return \"foo\" != (const char*)0;\n+}\n+\n+int test3()\n+{\n+  return \"foo\" == (const char*)0;\n+}\n+\n+int test4()\n+{\n+  return (const char*)0 != \"foo\";\n+}\n+\n+int test5()\n+{\n+  return (const char*)0 == \"foo\";\n+}\n+"}, {"sha": "27f25f3ca98241aefa58f2c2577e44e299e1d895", "filename": "gcc/testsuite/gcc.dg/Wstring-literal-comparison-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e994a705a9d8447c17486c13d741c2692c475f67/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-literal-comparison-4.c?ref=e994a705a9d8447c17486c13d741c2692c475f67", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/7776 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wno-string-literal-comparison\" } */\n+\n+int test1(char *ptr)\n+{\n+  return ptr == \"foo\";\n+}\n+\n+int test2()\n+{\n+  return \"foo\" != (const char*)0;\n+}\n+\n+int test3()\n+{\n+  return \"foo\" == (const char*)0;\n+}\n+\n+int test4()\n+{\n+  return (const char*)0 != \"foo\";\n+}\n+\n+int test5()\n+{\n+  return (const char*)0 == \"foo\";\n+}\n+"}]}