{"sha": "825010bb37db90c97c9409d3407c8538e3246577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1MDEwYmIzN2RiOTBjOTdjOTQwOWQzNDA3Yzg1MzhlMzI0NjU3Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-12T14:48:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-12T14:48:00Z"}, "message": "Allow variable-sized temporary variables in gimplify.c\n\nThis is needed to build libgfortran for SVE.  The OpenMP code needs\nto create temporary vector variables, and the variables will therefore\nbe variable-sized for SVE.  Earlier patches made such variables work.\n\n2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* gimplify.c (gimple_add_tmp_var_fn): Allow variables to have a\n\tpoly_uint64 size, rather than requiring an unsigned HOST_WIDE_INT size.\n\t(gimple_add_tmp_var): Likewise.\n\nFrom-SVN: r256585", "tree": {"sha": "1041c74928517bf91e4b29ed5dfb33e7f4ac3aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1041c74928517bf91e4b29ed5dfb33e7f4ac3aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825010bb37db90c97c9409d3407c8538e3246577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825010bb37db90c97c9409d3407c8538e3246577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825010bb37db90c97c9409d3407c8538e3246577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825010bb37db90c97c9409d3407c8538e3246577/comments", "author": null, "committer": null, "parents": [{"sha": "33b366c3d4e96c37b60d440edff64f915cc1aaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b366c3d4e96c37b60d440edff64f915cc1aaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b366c3d4e96c37b60d440edff64f915cc1aaaf"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "823f39d1d877b5c0422b8244bb362309fbbd6a98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825010bb37db90c97c9409d3407c8538e3246577/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825010bb37db90c97c9409d3407c8538e3246577/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=825010bb37db90c97c9409d3407c8538e3246577", "patch": "@@ -1,3 +1,9 @@\n+2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gimplify.c (gimple_add_tmp_var_fn): Allow variables to have a\n+\tpoly_uint64 size, rather than requiring an unsigned HOST_WIDE_INT size.\n+\t(gimple_add_tmp_var): Likewise.\n+\n 2018-01-12  Martin Liska  <mliska@suse.cz>\n \n \t* gimple.c (gimple_alloc_counts): Use uint64_t instead of int."}, {"sha": "fd0d21ebe4d422a613f396e394c5219bcde8289f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825010bb37db90c97c9409d3407c8538e3246577/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825010bb37db90c97c9409d3407c8538e3246577/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=825010bb37db90c97c9409d3407c8538e3246577", "patch": "@@ -702,7 +702,7 @@ gimple_add_tmp_var_fn (struct function *fn, tree tmp)\n   /* Later processing assumes that the object size is constant, which might\n      not be true at this point.  Force the use of a constant upper bound in\n      this case.  */\n-  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (tmp)))\n+  if (!tree_fits_poly_uint64_p (DECL_SIZE_UNIT (tmp)))\n     force_constant_size (tmp);\n \n   DECL_CONTEXT (tmp) = fn->decl;\n@@ -721,7 +721,7 @@ gimple_add_tmp_var (tree tmp)\n   /* Later processing assumes that the object size is constant, which might\n      not be true at this point.  Force the use of a constant upper bound in\n      this case.  */\n-  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (tmp)))\n+  if (!tree_fits_poly_uint64_p (DECL_SIZE_UNIT (tmp)))\n     force_constant_size (tmp);\n \n   DECL_CONTEXT (tmp) = current_function_decl;"}]}