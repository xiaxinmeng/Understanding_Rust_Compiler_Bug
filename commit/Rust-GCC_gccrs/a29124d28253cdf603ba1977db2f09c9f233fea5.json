{"sha": "a29124d28253cdf603ba1977db2f09c9f233fea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5MTI0ZDI4MjUzY2RmNjAzYmExOTc3ZGIyZjA5YzlmMjMzZmVhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-24T11:55:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-25T08:07:34Z"}, "message": "tree-optimization/99746 - avoid confusing hybrid code\n\nThis avoids confusing the hybrid vectorization code with SLP\npatterns by not marking SLP pattern covered stmts as patterns\n(they are marked as SLP patterns already).  This means that loop\nvectorization will vectorize the scalar stmt rather than the SLP\npattern stmt (which it can't anyway).\n\n2021-03-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99746\n\t* tree-vect-slp-patterns.c (complex_pattern::build): Do not mark\n\tthe scalar stmt as patterned.  Instead set up required things\n\tmanually.\n\n\t* gfortran.dg/vect/pr99746.f90: New testcase.", "tree": {"sha": "4e4f8ee0bf5a8eec84a69179283cd2410cdbc9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e4f8ee0bf5a8eec84a69179283cd2410cdbc9f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a29124d28253cdf603ba1977db2f09c9f233fea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29124d28253cdf603ba1977db2f09c9f233fea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29124d28253cdf603ba1977db2f09c9f233fea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29124d28253cdf603ba1977db2f09c9f233fea5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08103e4d6ada9b57366f2df2a2b745babfab914c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08103e4d6ada9b57366f2df2a2b745babfab914c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08103e4d6ada9b57366f2df2a2b745babfab914c"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "fe947ae7ccfef2d0974cd4608e598aa871a26123", "filename": "gcc/testsuite/gfortran.dg/vect/pr99746.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29124d28253cdf603ba1977db2f09c9f233fea5/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99746.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29124d28253cdf603ba1977db2f09c9f233fea5/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99746.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr99746.f90?ref=a29124d28253cdf603ba1977db2f09c9f233fea5", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-march=armv8.3-a\" { target aarch64-*-* } }\n+SUBROUTINE CLAREF(A, WANTZ, Z, ICOL1, ITMP1, ITMP2, T1, T2, V2)\n+LOGICAL            BLOCK, WANTZ\n+COMPLEX            T1, T2, V2\n+COMPLEX            A(LDA, *), VECS, Z(LDA, *)\n+COMPLEX            SUM\n+LOGICAL            LSAME\n+IF (LSAME) THEN\n+      DO 30 K = ITMP1, ITMP2, 3\n+         T1 = VECS0\n+30       CONTINUE\n+ELSE\n+   IF (BLOCK) THEN\n+      DO 90 K = ITMP1, ITMP2 - 1, 3\n+         A(J, ICOL1) = ITMP1\n+         IF (WANTZ) THEN\n+            DO 80 J = ITMP1, ITMP2\n+               SUM =  ICOL1\n+               Z(J, 3) = V23\n+80             CONTINUE\n+         END IF\n+90       CONTINUE\n+      DO 120 K = ITMP1, ITMP2\n+         V2 = VECS()\n+         DO 100 J = ITMP1, ITMP2\n+            A(J, ICOL1) = A(J, ICOL1) - SUM\n+100          CONTINUE\n+         IF (WANTZ) THEN\n+            DO 110 J = 1, 3\n+               SUM = Z(J, ICOL1)\n+               Z(J, ICOL1) = 0\n+110             CONTINUE\n+         END IF\n+         ICOL1 = ICOL1 + 1\n+120       CONTINUE\n+   ELSE\n+      DO 130 J = ITMP1, ITMP2\n+         SUM = T1 * A(J, ICOL1) + T2 * A(J, 1) + V2 * A(J, 2)\n+         A(J, ICOL1) = SUM\n+         A(J, ICOL1 + 2) = SUM * V1\n+130       CONTINUE\n+   END IF\n+END IF\n+END"}, {"sha": "cdd61e9a5cf0c5698fd94c29c6615d293ce4c41a", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29124d28253cdf603ba1977db2f09c9f233fea5/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29124d28253cdf603ba1977db2f09c9f233fea5/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=a29124d28253cdf603ba1977db2f09c9f233fea5", "patch": "@@ -571,14 +571,8 @@ complex_pattern::build (vec_info *vinfo)\n       STMT_VINFO_RELEVANT (call_stmt_info) = vect_used_in_scope;\n       STMT_SLP_TYPE (call_stmt_info) = pure_slp;\n \n-      /* add_pattern_stmt can't be done in vect_mark_pattern_stmts because\n-\t the non-SLP pattern matchers already have added the statement to VINFO\n-\t by the time it is called.  Some of them need to modify the returned\n-\t stmt_info.  vect_mark_pattern_stmts is called by recog_pattern and it\n-\t would increase the size of each pattern with boilerplate code to make\n-\t the call there.  */\n-      vect_mark_pattern_stmts (vinfo, stmt_info, call_stmt,\n-\t\t\t       SLP_TREE_VECTYPE (node));\n+      gimple_set_bb (call_stmt, gimple_bb (stmt_info->stmt));\n+      STMT_VINFO_VECTYPE (call_stmt_info) = SLP_TREE_VECTYPE (node);\n       STMT_VINFO_SLP_VECT_ONLY_PATTERN (call_stmt_info) = true;\n \n       /* Since we are replacing all the statements in the group with the same"}]}