{"sha": "098f02aa154b308111cc1f520a577f5bb5f08377", "node_id": "C_kwDOANBUbNoAKDA5OGYwMmFhMTU0YjMwODExMWNjMWY1MjBhNTc3ZjViYjVmMDgzNzc", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-10T15:36:28Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-10T15:36:28Z"}, "message": "libiberty: fix wrong replacent in comments\n\nlibiberty/ChangeLog:\n\n\t* regex.c: Restore comments.", "tree": {"sha": "dc6aed96623a059853c3501a9af8e85c6f07750e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6aed96623a059853c3501a9af8e85c6f07750e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/098f02aa154b308111cc1f520a577f5bb5f08377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098f02aa154b308111cc1f520a577f5bb5f08377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098f02aa154b308111cc1f520a577f5bb5f08377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098f02aa154b308111cc1f520a577f5bb5f08377/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dac43b43c3999f94b451cd7925e24d8e7c38a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dac43b43c3999f94b451cd7925e24d8e7c38a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dac43b43c3999f94b451cd7925e24d8e7c38a7a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "84af5276ae817bea902d1009df025daa49d32a1e", "filename": "libiberty/regex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f02aa154b308111cc1f520a577f5bb5f08377/libiberty%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f02aa154b308111cc1f520a577f5bb5f08377/libiberty%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fregex.c?ref=098f02aa154b308111cc1f520a577f5bb5f08377", "patch": "@@ -384,8 +384,8 @@ typedef unsigned long int uintptr_t;\n # endif /* not using relocating allocator */\n \n \n-/* True if `size1' is non-NULL and void *is pointing anywhere inside\n-   `string1' or just past its end.  This works if void *is NULL, which is\n+/* True if `size1' is non-NULL and PTR is pointing anywhere inside\n+   `string1' or just past its end.  This works if PTR is NULL, which is\n    a good thing.  */\n # define FIRST_STRING_P(ptr) \t\t\t\t\t\\\n   (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)\n@@ -5256,7 +5256,7 @@ PREFIX(re_search_2) (struct re_pattern_buffer *bufp, const char *string1,\n }\n \n #ifdef WCHAR\n-/* This converts void *, a pointer into one of the search wchar_t strings\n+/* This converts PTR, a pointer into one of the search wchar_t strings\n    `string1' and `string2' into an multibyte string offset from the\n    beginning of that string. We use mbs_offset to optimize.\n    See convert_mbs_to_wcs.  */\n@@ -5266,7 +5266,7 @@ PREFIX(re_search_2) (struct re_pattern_buffer *bufp, const char *string1,\n    : ((regoff_t)((mbs_offset2 != NULL? mbs_offset2[(ptr)-string2] : 0)\t\\\n \t\t + csize1)))\n #else /* BYTE */\n-/* This converts void *, a pointer into one of the search strings `string1'\n+/* This converts PTR, a pointer into one of the search strings `string1'\n    and `string2' into an offset from the beginning of that string.  */\n # define POINTER_TO_OFFSET(ptr)\t\t\t\\\n   (FIRST_STRING_P (ptr)\t\t\t\t\\"}]}