{"sha": "c5cec899dd7881f925fac20eb16507c421e22036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjZWM4OTlkZDc4ODFmOTI1ZmFjMjBlYjE2NTA3YzQyMWUyMjAzNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-25T04:57:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-25T04:57:50Z"}, "message": "dwarf2out.c: s/flag_verbose_asm/flag_debug_asm/\n\n\t* dwarf2out.c: s/flag_verbose_asm/flag_debug_asm/\n\n\t* final.c (final_end_function): Also do dwarf2 thing if\n\tDWARF2_DEBUGGING_INFO.\n\t(final_start_function): Likewise.\n\nFrom-SVN: r15713", "tree": {"sha": "8c2f530ceac3509c2a4c6e38eadca94f0e019acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2f530ceac3509c2a4c6e38eadca94f0e019acf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5cec899dd7881f925fac20eb16507c421e22036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cec899dd7881f925fac20eb16507c421e22036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5cec899dd7881f925fac20eb16507c421e22036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cec899dd7881f925fac20eb16507c421e22036/comments", "author": null, "committer": null, "parents": [{"sha": "e166cb188a20a5f71196376b8031b92f1874f8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e166cb188a20a5f71196376b8031b92f1874f8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e166cb188a20a5f71196376b8031b92f1874f8ac"}], "stats": {"total": 186, "additions": 98, "deletions": 88}, "files": [{"sha": "14795d4656dc0687207b5a2621bd77ff34c2f2b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5cec899dd7881f925fac20eb16507c421e22036", "patch": "@@ -1,3 +1,7 @@\n+Wed Sep 24 21:34:06 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* dwarf2out.c: s/flag_verbose_asm/flag_debug_asm/\n+\n Wed Sep 24 22:05:30 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot.\n@@ -101,6 +105,12 @@ Tue Sep 23 12:34:51 1997  Bernd Schmidt  <crux@pool.informatik.rwth-aachen.de>\n \tof another, it will always be the second range.  Correct (+,-) case to\n \taccount for this.\n \n+Tue Sep 23 08:32:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* final.c (final_end_function): Also do dwarf2 thing if\n+\tDWARF2_DEBUGGING_INFO.\n+\t(final_start_function): Likewise.\n+\n Tue Sep 23 01:15:50 1997  David S. Miller  <davem@tanya.rutgers.edu>\n \n \t* expmed.c (expand_divmod): If compute_mode is not the same as"}, {"sha": "46a4692fa8e309abaadd73afc322b082db696070", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c5cec899dd7881f925fac20eb16507c421e22036", "patch": "@@ -411,7 +411,7 @@ static unsigned reg_number\t\tPROTO((rtx));\n #endif /* UNALIGNED_INT_ASM_OP */\n \n /* This is similar to the default ASM_OUTPUT_ASCII, except that no trailing\n-   newline is produced.  When flag_verbose_asm is asserted, we add commnetary\n+   newline is produced.  When flag_debug_asm is asserted, we add commnetary\n    at the end of the line, so we must avoid output of a newline here.  */\n #ifndef ASM_OUTPUT_DWARF_STRING\n #define ASM_OUTPUT_DWARF_STRING(FILE,P) \\\n@@ -1224,7 +1224,7 @@ output_uleb128 (value)\n     }\n   while (value != 0);\n \n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s ULEB128 0x%x\", ASM_COMMENT_START, save_value);\n }\n \n@@ -1255,7 +1255,7 @@ output_sleb128 (value)\n     }\n \n   while (more);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s SLEB128 %d\", ASM_COMMENT_START, save_value);\n }\n \n@@ -1271,7 +1271,7 @@ output_cfi (cfi, fde)\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t      cfi->dw_cfi_opc\n \t\t\t      | (cfi->dw_cfi_oprnd1.dw_cfi_offset & 0x3f));\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_CFA_advance_loc 0x%x\",\n \t\t ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_offset);\n       fputc ('\\n', asm_out_file);\n@@ -1282,7 +1282,7 @@ output_cfi (cfi, fde)\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t      cfi->dw_cfi_opc\n \t\t\t      | (cfi->dw_cfi_oprnd1.dw_cfi_reg_num & 0x3f));\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_CFA_offset, column 0x%x\",\n \t\t ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n \n@@ -1295,7 +1295,7 @@ output_cfi (cfi, fde)\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t      cfi->dw_cfi_opc\n \t\t\t      | (cfi->dw_cfi_oprnd1.dw_cfi_reg_num & 0x3f));\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_CFA_restore, column 0x%x\",\n \t\t ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n \n@@ -1304,7 +1304,7 @@ output_cfi (cfi, fde)\n   else\n     {\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, cfi->dw_cfi_opc);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s %s\", ASM_COMMENT_START,\n \t\t dwarf_cfi_name (cfi->dw_cfi_opc));\n \n@@ -1440,15 +1440,15 @@ output_call_frame_info (for_eh)\n     ASM_OUTPUT_DWARF_DELTA4 (asm_out_file, l2, l1);\n   else\n     ASM_OUTPUT_DWARF_DELTA (asm_out_file, l2, l1);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Length of Common Information Entry\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_LABEL (asm_out_file, l1);\n \n   ASM_OUTPUT_DWARF_DATA4 (asm_out_file, DW_CIE_ID);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s CIE Identifier Tag\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -1459,7 +1459,7 @@ output_call_frame_info (for_eh)\n     }\n \n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_CIE_VERSION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s CIE Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -1468,30 +1468,30 @@ output_call_frame_info (for_eh)\n       /* The FDE contains a pointer\n \t to the exception region info for the frame.  */\n       ASM_OUTPUT_DWARF_STRING (asm_out_file, \"e\");\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s CIE Augmentation\", ASM_COMMENT_START);\n     }\n   else\n     {\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s CIE Augmentation (none)\",\n \t\t ASM_COMMENT_START);\n     }\n \n   fputc ('\\n', asm_out_file);\n   output_uleb128 (1);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \" (CIE Code Alignment Factor)\");\n \n   fputc ('\\n', asm_out_file);\n   output_sleb128 (DWARF_CIE_DATA_ALIGNMENT);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \" (CIE Data Alignment Factor)\");\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF_FRAME_RETURN_COLUMN);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s CIE RA Column\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -1514,7 +1514,7 @@ output_call_frame_info (for_eh)\n \tASM_OUTPUT_DWARF_DELTA4 (asm_out_file, l2, l1);\n       else\n \tASM_OUTPUT_DWARF_DELTA (asm_out_file, l2, l1);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s FDE Length\", ASM_COMMENT_START);\n       fputc ('\\n', asm_out_file);\n       ASM_OUTPUT_LABEL (asm_out_file, l1);\n@@ -1523,18 +1523,18 @@ output_call_frame_info (for_eh)\n \tASM_OUTPUT_DWARF_ADDR (asm_out_file, \"__FRAME_BEGIN__\");\n       else\n \tASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (FRAME_SECTION));\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s FDE CIE offset\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n       ASM_OUTPUT_DWARF_ADDR (asm_out_file, fde->dw_fde_begin);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s FDE initial location\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n       ASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file,\n \t\t\t\t   fde->dw_fde_end, fde->dw_fde_begin);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s FDE address range\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n@@ -1543,7 +1543,7 @@ output_call_frame_info (for_eh)\n \t  /* For now, a pointer to the translation unit's info will do.\n \t     ??? Eventually this should point to the function's info.  */\n \t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, \"__EXCEPTION_TABLE__\");\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s pointer to exception region info\",\n \t\t     ASM_COMMENT_START);\n \t  fputc ('\\n', asm_out_file);\n@@ -4692,7 +4692,7 @@ output_value_format (v)\n   enum dwarf_form form = value_format (v);\n \n   output_uleb128 (form);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \" (%s)\", dwarf_form_name (form));\n \n   fputc ('\\n', asm_out_file);\n@@ -4712,20 +4712,20 @@ output_abbrev_section ()\n       register dw_die_ref abbrev = abbrev_die_table[abbrev_id];\n \n       output_uleb128 (abbrev_id);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \" (abbrev code)\");\n \n       fputc ('\\n', asm_out_file);\n       output_uleb128 (abbrev->die_tag);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \" (TAG: %s)\",\n \t\t dwarf_tag_name (abbrev->die_tag));\n \n       fputc ('\\n', asm_out_file);\n       fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP,\n \t       abbrev->die_child != NULL ? DW_children_yes : DW_children_no);\n \n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s %s\",\n \t\t ASM_COMMENT_START,\n \t\t (abbrev->die_child != NULL\n@@ -4737,7 +4737,7 @@ output_abbrev_section ()\n \t   a_attr = a_attr->dw_attr_next)\n \t{\n \t  output_uleb128 (a_attr->dw_attr);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \" (%s)\",\n \t\t     dwarf_attr_name (a_attr->dw_attr));\n \n@@ -4899,7 +4899,7 @@ output_die (die)\n   register int i;\n \n   output_uleb128 (die->die_abbrev);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \" (DIE (0x%x) %s)\",\n \t     die->die_offset, dwarf_tag_name (die->die_tag));\n \n@@ -4930,7 +4930,7 @@ output_die (die)\n \t      abort ();\n \t    }\n \n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s %s\",\n \t\t     ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n \n@@ -4940,7 +4940,7 @@ output_die (die)\n \t    {\n \t      /* Output the opcode.  */\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, loc->dw_loc_opc);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s %s\", ASM_COMMENT_START,\n \t\t\t dwarf_stack_op_name (loc->dw_loc_opc));\n \n@@ -4982,7 +4982,7 @@ output_die (die)\n \n \tcase dw_val_class_long_long:\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 8);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s %s\",\n \t\t   ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n \n@@ -4991,7 +4991,7 @@ output_die (die)\n \t\t\t\t  a->dw_attr_val.v.val_long_long.hi,\n \t\t\t\t  a->dw_attr_val.v.val_long_long.low);\n \n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file,\n \t\t     \"\\t%s long long constant\", ASM_COMMENT_START);\n \t  \n@@ -5001,7 +5001,7 @@ output_die (die)\n \tcase dw_val_class_float:\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t\t  a->dw_attr_val.v.val_float.length * 4);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s %s\",\n \t\t     ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n \n@@ -5010,7 +5010,7 @@ output_die (die)\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n \t\t\t\t      a->dw_attr_val.v.val_float.array[i]);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s fp constant word %d\",\n \t\t\t ASM_COMMENT_START, i);\n \n@@ -5065,7 +5065,7 @@ output_die (die)\n \t  && a->dw_attr_val.val_class != dw_val_class_long_long\n \t  && a->dw_attr_val.val_class != dw_val_class_float)\n \t{\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s %s\",\n \t\t     ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n \n@@ -5080,7 +5080,7 @@ output_die (die)\n     {\n       /* Add null byte to terminate sibling list. */\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s end of children of DIE 0x%x\",\n \t\t ASM_COMMENT_START, die->die_offset);\n \n@@ -5095,24 +5095,24 @@ static void\n output_compilation_unit_header ()\n {\n   ASM_OUTPUT_DWARF_DATA (asm_out_file, next_die_offset - DWARF_OFFSET_SIZE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Length of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, DWARF_VERSION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DWARF version number\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (ABBREV_SECTION));\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset Into Abbrev. Section\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, PTR_SIZE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Pointer Size (in bytes)\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5167,25 +5167,25 @@ output_pubnames ()\n \n   ASM_OUTPUT_DWARF_DATA (asm_out_file, pubnames_length);\n \n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Length of Public Names Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, DWARF_VERSION);\n \n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA (asm_out_file, next_die_offset);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Compilation Unit Length\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5194,13 +5194,13 @@ output_pubnames ()\n       register pubname_ref pub = &pubname_table[i];\n \n       ASM_OUTPUT_DWARF_DATA (asm_out_file, pub->die->die_offset);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DIE offset\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n \n       ASM_OUTPUT_DWARF_STRING (asm_out_file, pub->name);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"%s external name\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n@@ -5242,29 +5242,29 @@ output_aranges ()\n   register unsigned long aranges_length = size_of_aranges ();\n \n   ASM_OUTPUT_DWARF_DATA (asm_out_file, aranges_length);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Length of Address Ranges Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, DWARF_VERSION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, PTR_SIZE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Size of Address\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Size of Segment Descriptor\",\n \t     ASM_COMMENT_START);\n \n@@ -5273,18 +5273,18 @@ output_aranges ()\n   if (PTR_SIZE == 8)\n     fprintf (asm_out_file, \",0,0\");\n \n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Pad to %d byte boundary\",\n \t     ASM_COMMENT_START, 2 * PTR_SIZE);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, TEXT_SECTION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, text_end_label, TEXT_SECTION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"%s Length\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5303,7 +5303,7 @@ output_aranges ()\n \t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, name);\n \t}\n \n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n@@ -5314,7 +5314,7 @@ output_aranges ()\n \tASM_OUTPUT_DWARF_ADDR_DATA (asm_out_file,\n \t\t\t\t    get_AT_unsigned (a, DW_AT_byte_size));\n \n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"%s Length\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n@@ -5349,47 +5349,47 @@ output_line_info ()\n   register unsigned long function;\n \n   ASM_OUTPUT_DWARF_DATA (asm_out_file, size_of_line_info ());\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Length of Source Line Info.\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA2 (asm_out_file, DWARF_VERSION);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA (asm_out_file, size_of_line_prolog ());\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Prolog Length\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF_LINE_MIN_INSTR_LENGTH);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Minimum Instruction Length\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DWARF_LINE_DEFAULT_IS_STMT_START);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Default is_stmt_start flag\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   fprintf (asm_out_file, \"\\t%s\\t%d\", ASM_BYTE_OP, DWARF_LINE_BASE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Line Base Value (Special Opcodes)\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   fprintf (asm_out_file, \"\\t%s\\t%u\", ASM_BYTE_OP, DWARF_LINE_RANGE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Line Range Value (Special Opcodes)\",\n \t     ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n   fprintf (asm_out_file, \"\\t%s\\t%u\", ASM_BYTE_OP, DWARF_LINE_OPCODE_BASE);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Special Opcode Base\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5409,25 +5409,25 @@ output_line_info ()\n \t  break;\n \t}\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, n_op_args);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s opcode: 0x%x has %d args\",\n \t\t ASM_COMMENT_START, opc, n_op_args);\n       fputc ('\\n', asm_out_file);\n     }\n \n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"%s Include Directory Table\\n\", ASM_COMMENT_START);\n \n   /* Include directory table is empty, at present */\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n   fputc ('\\n', asm_out_file);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"%s File Name Table\\n\", ASM_COMMENT_START);\n \n   for (ft_index = 1; ft_index < file_table_in_use; ++ft_index)\n     {\n       ASM_OUTPUT_DWARF_STRING (asm_out_file, file_table[ft_index]);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"%s File Entry: 0x%x\",\n \t\t ASM_COMMENT_START, ft_index);\n \n@@ -5452,7 +5452,7 @@ output_line_info ()\n \n   /* Set the address register to the first location in the text section */\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DW_LNE_set_address\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5487,7 +5487,7 @@ output_line_info ()\n \t{\n \t  /* This can handle deltas up to 0xffff.  This takes 3 bytes.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_fixed_advance_pc);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNS_fixed_advance_pc\",\n \t\t     ASM_COMMENT_START);\n \n@@ -5499,7 +5499,7 @@ output_line_info ()\n \t{\n \t  /* This can handle any delta.  This takes 4+PTR_SIZE bytes.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t     ASM_COMMENT_START);\n \t  fputc ('\\n', asm_out_file);\n@@ -5519,12 +5519,12 @@ output_line_info ()\n \t{\n \t  current_file = line_info->dw_file_num;\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_set_file);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNS_set_file\", ASM_COMMENT_START);\n \n \t  fputc ('\\n', asm_out_file);\n \t  output_uleb128 (current_file);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \" (\\\"%s\\\")\", file_table[current_file]);\n \n \t  fputc ('\\n', asm_out_file);\n@@ -5542,7 +5542,7 @@ output_line_info ()\n \t     takes 1 byte.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t\t  DWARF_LINE_OPCODE_BASE + line_delta);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t      fprintf (asm_out_file,\n \t\t       \"\\t%s line %d\", ASM_COMMENT_START, current_line);\n \n@@ -5553,7 +5553,7 @@ output_line_info ()\n \t  /* This can handle any delta.  This takes at least 4 bytes, depending\n \t     on the value being encoded.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_advance_line);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s advance to line %d\",\n \t\t     ASM_COMMENT_START, current_line);\n \n@@ -5569,7 +5569,7 @@ output_line_info ()\n   if (0)\n     {\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_fixed_advance_pc);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_LNS_fixed_advance_pc\",\n \t\t ASM_COMMENT_START);\n \n@@ -5580,7 +5580,7 @@ output_line_info ()\n   else\n     {\n       ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-      if (flag_verbose_asm)\n+      if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\", ASM_COMMENT_START);\n       fputc ('\\n', asm_out_file);\n       output_uleb128 (1 + PTR_SIZE);\n@@ -5593,7 +5593,7 @@ output_line_info ()\n \n   /* Output the marker for the end of the line number info.  */\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-  if (flag_verbose_asm)\n+  if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s DW_LNE_end_sequence\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n@@ -5621,7 +5621,7 @@ output_line_info ()\n \n \t  /* Set the address register to the first line in the function */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t     ASM_COMMENT_START);\n \n@@ -5639,7 +5639,7 @@ output_line_info ()\n \t  if (0)\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_fixed_advance_pc);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNS_fixed_advance_pc\",\n \t\t\t ASM_COMMENT_START);\n \n@@ -5651,7 +5651,7 @@ output_line_info ()\n \t  else\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t\t ASM_COMMENT_START);\n \t      fputc ('\\n', asm_out_file);\n@@ -5671,12 +5671,12 @@ output_line_info ()\n \t{\n \t  current_file = line_info->dw_file_num;\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_set_file);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNS_set_file\", ASM_COMMENT_START);\n \n \t  fputc ('\\n', asm_out_file);\n \t  output_uleb128 (current_file);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \" (\\\"%s\\\")\", file_table[current_file]);\n \n \t  fputc ('\\n', asm_out_file);\n@@ -5693,7 +5693,7 @@ output_line_info ()\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n \t\t\t\t      DWARF_LINE_OPCODE_BASE + line_delta);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file,\n \t\t\t \"\\t%s line %d\", ASM_COMMENT_START, current_line);\n \n@@ -5702,7 +5702,7 @@ output_line_info ()\n \t  else\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_advance_line);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s advance to line %d\",\n \t\t\t ASM_COMMENT_START, current_line);\n \n@@ -5728,7 +5728,7 @@ output_line_info ()\n \t  if (0)\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNS_fixed_advance_pc);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNS_fixed_advance_pc\",\n \t\t\t ASM_COMMENT_START);\n \n@@ -5740,7 +5740,7 @@ output_line_info ()\n \t  else\n \t    {\n \t      ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-\t      if (flag_verbose_asm)\n+\t      if (flag_debug_asm)\n \t\tfprintf (asm_out_file, \"\\t%s DW_LNE_set_address\",\n \t\t\t ASM_COMMENT_START);\n \t      fputc ('\\n', asm_out_file);\n@@ -5754,7 +5754,7 @@ output_line_info ()\n \n \t  /* Output the marker for the end of this sequence.  */\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, 0);\n-\t  if (flag_verbose_asm)\n+\t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s DW_LNE_end_sequence\",\n \t\t     ASM_COMMENT_START);\n "}, {"sha": "624e2113f19e675e29cf26a24310159f4695c8a1", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5cec899dd7881f925fac20eb16507c421e22036/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c5cec899dd7881f925fac20eb16507c421e22036", "patch": "@@ -955,7 +955,7 @@ final_start_function (first, file, optimize)\n     last_linenum = high_block_linenum = high_function_linenum\n       = NOTE_LINE_NUMBER (first);\n \n-#if defined (DWARF2_UNWIND_INFO)\n+#if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n   /* Output DWARF definition of the function.  */\n   if (dwarf2out_do_frame ())\n     dwarf2out_begin_prologue ();\n@@ -1147,7 +1147,7 @@ final_end_function (first, file, optimize)\n     dwarfout_end_epilogue ();\n #endif\n \n-#if defined (DWARF2_UNWIND_INFO)\n+#if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n   if (dwarf2out_do_frame ())\n     dwarf2out_end_epilogue ();\n #endif"}]}