{"sha": "97075d3bf181c4b83ae157dac44062b565d7fb68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwNzVkM2JmMTgxYzRiODNhZTE1N2RhYzQ0MDYyYjU2NWQ3ZmI2OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-09-13T14:44:21Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-09-13T14:44:21Z"}, "message": "* gcc_update: Handle hg, too.\n\nFrom-SVN: r164246", "tree": {"sha": "084b74a80a55b4efa949af3fa55c7f987e2babdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/084b74a80a55b4efa949af3fa55c7f987e2babdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97075d3bf181c4b83ae157dac44062b565d7fb68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97075d3bf181c4b83ae157dac44062b565d7fb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97075d3bf181c4b83ae157dac44062b565d7fb68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97075d3bf181c4b83ae157dac44062b565d7fb68/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f434b97f176acb60b345d2d135a0e15fcb5c5b7"}], "stats": {"total": 164, "additions": 107, "deletions": 57}, "files": [{"sha": "26c446c3be75f13508af483cf3a981fcd7411778", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97075d3bf181c4b83ae157dac44062b565d7fb68/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97075d3bf181c4b83ae157dac44062b565d7fb68/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=97075d3bf181c4b83ae157dac44062b565d7fb68", "patch": "@@ -1,3 +1,7 @@\n+2010-09-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc_update: Handle hg, too.\n+\n 2010-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* make_sunver.pl: Remove extra whitespace in regexp."}, {"sha": "8192d81110224968f0f31e171345ce35e0d2e128", "filename": "contrib/gcc_update", "status": "modified", "additions": 103, "deletions": 57, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97075d3bf181c4b83ae157dac44062b565d7fb68/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97075d3bf181c4b83ae157dac44062b565d7fb68/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=97075d3bf181c4b83ae157dac44062b565d7fb68", "patch": "@@ -1,19 +1,20 @@\n #! /bin/sh\n #\n-# Update a local Subversion tree from the GCC repository, with an emphasis\n-# on treating generated files correctly, so that autoconf, gperf et\n-# al are not required for the ``end'' user.\n+# Update a local Subversion, Git or Mercurial tree from the GCC\n+# repository, with an emphasis on treating generated files correctly, so\n+# that autoconf, gperf et al are not required for the ``end'' user.\n #\n-# (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation\n+# (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+# Free Software Foundation\n # Originally by Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>, August 1998.\n #\n # This script is Free Software, and it can be copied, distributed and\n # modified as defined in the GNU General Public License.  A copy of\n # its license can be downloaded from http://www.gnu.org/copyleft/gpl.html\n #\n #\n-# By default all command-line options are passed to `svn update` in\n-# addition to $UPDATE_OPTIONS (defined below). If the first parameter\n+# By default all command-line options are passed to `svn update` or `hg/git\n+# pull` in addition to $UPDATE_OPTIONS (defined below). If the first parameter\n # reads --nostdflags, $UPDATE_OPTIONS as well as this parameter itself\n # are omitted.\n #\n@@ -38,9 +39,7 @@\n # contrib/gcc_update --list\n \n \n-# SVN command\n-GCC_SVN=${GCC_SVN-${SVN-svn}}\n-# Default options used when updating via SVN (none).\n+# Default options used when updating (none).\n UPDATE_OPTIONS=\"\"\n \n # Set the locale to C to make this script work for users with foreign\n@@ -245,14 +244,18 @@ p\n \n esac\n \n-is_git=0\n-# Check whether this indeed looks like a local SVN tree.\n+# Check for known version control systems.\n if [ -d .git ]; then\n     GCC_GIT=${GCC_GIT-${GIT-git}}\n-    GCC_SVN=\"true -\"\n-    is_git=1\n-elif [ ! -d .svn ]; then\n-    echo \"This does not seem to be a GCC SVN tree!\"\n+    vcs_type=\"git\"\n+elif [ -d .hg ]; then\n+    GCC_HG=${GCC_HG-${HG-hg}}\n+    vcs_type=\"hg\"\n+elif [ -d .svn ]; then\n+    GCC_SVN=${GCC_SVN-${SVN-svn}}\n+    vcs_type=\"svn\"\n+else\n+    echo \"This does not seem to be a GCC GIT/HG/SVN tree!\"\n     exit\n fi\n \n@@ -263,53 +266,96 @@ else\n     set -- $UPDATE_OPTIONS ${1+\"$@\"}\n fi\n \n-if [ $is_git -eq 0 ]; then\n-chat \"Updating SVN tree\"\n+case $vcs_type in\n+    git)\n+\tchat \"Updating GIT tree\"\n \n-$GCC_SVN ${silent+-q}  --non-interactive update ${1+\"$@\"}\n-if [ $? -ne 0 ]; then\n-    (touch_files_reexec)\n-    echo \"SVN update of full tree failed.\" >&2\n-    exit 1\n-fi\n+\t$GCC_GIT diff --quiet --exit-code HEAD\n+\tif [ $? -ne 0 ]; then\n+            echo \"Attempting to update a dirty git tree!\" >&2\n+            echo \"Commit or stash your changes first and retry.\" >&2\n+            exit 1\n+\tfi\n \n-rm -f LAST_UPDATED gcc/REVISION\n+\t$GCC_GIT pull ${silent+-q} --rebase ${1+\"$@\"}\n+\tif [ $? -ne 0 ]; then\n+            (touch_files_reexec)\n+            echo \"git pull of full tree failed.\" >&2\n+            exit 1\n+\tfi\n \n-revision=`svn info | awk '/Revision:/ { print $2 }'`\n-branch=`svn info | sed -ne \"/URL:/ {\n-s,.*/trunk,trunk,\n-s,.*/branches/,,\n-s,.*/tags/,,\n-p\n-}\"`\n+\trevision=`$GCC_GIT log -n1 --pretty=%p:%t:%H`\n+\tbranch=`$GCC_GIT name-rev --name-only HEAD || :`\n+\t;;    \n+\n+    hg)\n+\tchat \"Updating HG tree\"\n+\n+\t# Add -q so untracked files aren't listed.\n+\tif [ `$GCC_HG status -q | wc -l` -gt 0 ]; then\n+            echo \"Attempting to update a dirty hg tree!\" >&2\n+            echo \"Commit or revert your changes first and retry.\" >&2\n+            exit 1\n+\tfi\n+\n+\t# Check for mq extension.  mq patches must be popped so tip has\n+\t# been converted from the SVN tree.\n+\tif [ -d .hg/patches ] && [ `$GCC_HG qapplied | wc -l` -gt 0 ]; then\n+\t    # FIXME: Perhaps pop queue instead?  We could do that since we\n+\t    # know the tree is clean.\n+\t    echo \"Attempting to update hg tree with mq patches applied!\" >&2\n+\t    echo \"Pop your patches first and retry.\" >&2\n+\t    exit 1\n+\tfi\n+\n+\t# Update tree, but make sure to only pull the default branch.\n+\t# Otherwise all branches in the upstream repo are added, even if\n+\t# only a single one has been cloned.\n+\t$GCC_HG pull -u ${silent+-q} -r`$GCC_HG branch` ${1+\"$@\"}\n+\tif [ $? -ne 0 ]; then\n+            (touch_files_reexec)\n+            echo \"hg pull of full tree failed.\" >&2\n+            exit 1\n+\tfi\n+\n+\t# Extract SVN revision corresponding to tip, as stored by hg convert.\n+\t# Before hg 1.4.3, there's no template keyword corresponding to the\n+\t# extra: tag, so need to use hg log --debug to extract the info.\n+\trevision=`$GCC_HG log --debug -l1 | \\\n+\t    sed -ne \"/^extra:.*convert_revision=svn:/ {\n+\t        s%^.*@%%\n+\t\tp\n+\t    }\"`\n+\tbranch=`$GCC_HG branch`\n+\t# trunk in SVN parlance shows up as default branch in hg.\n+\t[ x$branch = x\"default\" ] && branch=\"trunk\"\n+\t;;\n+\n+    svn)\n+\tchat \"Updating SVN tree\"\n+\n+\t$GCC_SVN ${silent+-q}  --non-interactive update ${1+\"$@\"}\n+\tif [ $? -ne 0 ]; then\n+\t    (touch_files_reexec)\n+\t    echo \"SVN update of full tree failed.\" >&2\n+\t    exit 1\n+\tfi\n+\n+\trevision=`svn info | awk '/Revision:/ { print $2 }'`\n+\tbranch=`svn info | sed -ne \"/URL:/ {\n+\t    s,.*/trunk,trunk,\n+\t    s,.*/branches/,,\n+\t    s,.*/tags/,,\n+\t    p\n+\t}\"`\n+\t;;\n+esac\n+\n+rm -f LAST_UPDATED gcc/REVISION\n {\n-  date\n-  echo \"`TZ=UTC date` (revision $revision)\"\n+    date\n+    echo \"`TZ=UTC date` (revision $revision)\"\n } > LAST_UPDATED\n-\n echo \"[$branch revision $revision]\" > gcc/REVISION\n \n-else\n-    chat \"Updating GIT tree\"\n-    $GCC_GIT diff --quiet --exit-code HEAD\n-    if [ $? -ne 0 ]; then\n-        echo \"Attempting to update a dirty git tree!\" >&2\n-        echo \"Commit or stash your changes first and retry.\" >&2\n-        exit 1\n-    fi\n-    $GCC_GIT pull ${silent+-q} --rebase ${1+\"$@\"}\n-    if [ $? -ne 0 ]; then\n-        (touch_files_reexec)\n-        echo \"git pull of full tree failed.\" >&2\n-        exit 1\n-    fi\n-    rm -f LAST_UPDATED gcc/REVISION\n-    revision=`$GCC_GIT log -n1 --pretty=%p:%t:%H`\n-    branch=`$GCC_GIT name-rev --name-only HEAD || :`\n-    {\n-      date\n-      echo \"`TZ=UTC date` (revision $revision)\"\n-    } > LAST_UPDATED\n-    echo \"[$branch revision $revision]\" > gcc/REVISION\n-fi\n touch_files_reexec"}]}