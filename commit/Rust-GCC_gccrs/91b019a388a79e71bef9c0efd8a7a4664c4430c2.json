{"sha": "91b019a388a79e71bef9c0efd8a7a4664c4430c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFiMDE5YTM4OGE3OWU3MWJlZjljMGVmZDhhN2E0NjY0YzQ0MzBjMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-05-19T17:28:42Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-05-19T17:28:42Z"}, "message": "S/390: Vector base support - testcases\n\ngcc/testsuite/\n\t* gcc.target/s390/s390.exp\n\t(check_effective_target_vector): New check.\n\t* gcc.target/s390/vector/vec-abi-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-2.c: New test.\n\t* gcc.target/s390/vector/vec-abi-3.c: New test.\n\t* gcc.target/s390/vector/vec-abi-4.c: New test.\n\t* gcc.target/s390/vector/vec-abi-align-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-single-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-single-2.c: New test.\n\t* gcc.target/s390/vector/vec-abi-struct-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-vararg-1.c: New test.\n\t* gcc.target/s390/vector/vec-abi-vararg-2.c: New test.\n\t* gcc.target/s390/vector/vec-clobber-1.c: New test.\n\t* gcc.target/s390/vector/vec-cmp-1.c: New test.\n\t* gcc.target/s390/vector/vec-cmp-2.c: New test.\n\t* gcc.target/s390/vector/vec-dbl-math-compile-1.c: New test.\n\t* gcc.target/s390/vector/vec-genbytemask-1.c: New test.\n\t* gcc.target/s390/vector/vec-genbytemask-2.c: New test.\n\t* gcc.target/s390/vector/vec-genmask-1.c: New test.\n\t* gcc.target/s390/vector/vec-genmask-2.c: New test.\n\t* gcc.target/s390/vector/vec-init-1.c: New test.\n\t* gcc.target/s390/vector/vec-int-math-compile-1.c: New test.\n\t* gcc.target/s390/vector/vec-shift-1.c: New test.\n\t* gcc.target/s390/vector/vec-sub-1.c: New test.\n\nFrom-SVN: r223396", "tree": {"sha": "3d7ded53bbf6c6911a85ed6a18e6ee4b48c26b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d7ded53bbf6c6911a85ed6a18e6ee4b48c26b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b019a388a79e71bef9c0efd8a7a4664c4430c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b019a388a79e71bef9c0efd8a7a4664c4430c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b019a388a79e71bef9c0efd8a7a4664c4430c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b019a388a79e71bef9c0efd8a7a4664c4430c2/comments", "author": null, "committer": null, "parents": [{"sha": "085261c8042d644baaf594bc436b87326c1c0390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085261c8042d644baaf594bc436b87326c1c0390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085261c8042d644baaf594bc436b87326c1c0390"}], "stats": {"total": 1064, "additions": 1064, "deletions": 0}, "files": [{"sha": "b851f115b565652c8338878453aa1cc03103cb62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -1,3 +1,30 @@\n+2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp\n+\t(check_effective_target_vector): New check.\n+\t* gcc.target/s390/vector/vec-abi-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-2.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-3.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-4.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-align-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-single-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-single-2.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-struct-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-vararg-1.c: New test.\n+\t* gcc.target/s390/vector/vec-abi-vararg-2.c: New test.\n+\t* gcc.target/s390/vector/vec-clobber-1.c: New test.\n+\t* gcc.target/s390/vector/vec-cmp-1.c: New test.\n+\t* gcc.target/s390/vector/vec-cmp-2.c: New test.\n+\t* gcc.target/s390/vector/vec-dbl-math-compile-1.c: New test.\n+\t* gcc.target/s390/vector/vec-genbytemask-1.c: New test.\n+\t* gcc.target/s390/vector/vec-genbytemask-2.c: New test.\n+\t* gcc.target/s390/vector/vec-genmask-1.c: New test.\n+\t* gcc.target/s390/vector/vec-genmask-2.c: New test.\n+\t* gcc.target/s390/vector/vec-init-1.c: New test.\n+\t* gcc.target/s390/vector/vec-int-math-compile-1.c: New test.\n+\t* gcc.target/s390/vector/vec-shift-1.c: New test.\n+\t* gcc.target/s390/vector/vec-sub-1.c: New test.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c: New file."}, {"sha": "eb1d73b5fbf337f4c3dccc054c653e6585a1c409", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -37,6 +37,21 @@ proc check_effective_target_htm { } {\n     }] \"-march=zEC12 -mzarch\" ] } { return 0 } else { return 1 }\n }\n \n+# Return 1 if vector (va - vector add) instructions are understood by\n+# the assembler and can be executed.  This also covers checking for\n+# the VX kernel feature.  A kernel without that feature does not\n+# enable the vector facility and the following check will die with a\n+# signal.\n+proc check_effective_target_vector { } {\n+    if { ![check_runtime s390_check_vector [subst {\n+\tint main (void)\n+\t{\n+\t    asm (\"va %%v24, %%v26, %%v28, 3\" : : : \"v24\", \"v26\", \"v28\");\n+\t    return 0;\n+\t}\n+    }] \"-march=z13 -mzarch\" ] } { return 0 } else { return 1 }\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {\n@@ -50,5 +65,8 @@ dg-init\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n # All done.\n dg-finish"}, {"sha": "5484664b122b3fe5d89e895430459134341113da", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,17 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* Make sure the last argument is fetched from the argument overflow area.  */\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,160\\\\(%r15\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,96\\\\(%r15\\\\)\" { target ilp32 } } } */\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+\n+v2df\n+add (v2df a, v2df b, v2df c, v2df d,\n+     v2df e, v2df f, v2df g, v2df h, v2df i)\n+{\n+  return a + b + c + d + e + f + g + h + i;\n+}"}, {"sha": "62663d889ef040762cd2be45f2392a928645c53a", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,15 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* This needs to be v24 = v24 * v26 + v28 */\n+/* { dg-final { scan-assembler \"vfmadb\\t%v24,%v24,%v26,%v28\" } } */\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+\n+v2df\n+madd (v2df a, v2df b, v2df c)\n+{\n+  return a * b + c;\n+}"}, {"sha": "4be2360a36e748291636aedc379b4ffa4279475d", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-3.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-3.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,101 @@\n+/* Check calling convention in the vector ABI regarding vector like structs.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* addA */\n+/* { dg-final { scan-assembler-times \"vfadb\\t%v24,%v24,%v26\" 1 } } */\n+\n+/* addB and addE*/\n+/* { dg-final { scan-assembler-times \"vah\\t%v24,%v\\[0-9\\]*,%v\\[0-9\\]*\" 2 } } */\n+\n+/* addC */\n+/* { dg-final { scan-assembler-times \"vag\\t%v24,%v\\[0-9\\]*,%v\\[0-9\\]*\" 1 } } */\n+\n+/* addB and addC are expected to read the arguments via pointers in r2 and r3 */\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,0\\\\(%r2\\\\)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vl\\t%v\\[0-9\\]*,0\\\\(%r3\\\\)\" 2 } } */\n+\n+/* addD */\n+/* { dg-final { scan-assembler-times \"vaf\\t%v24,%v24,%v26\" 1 } } */\n+\n+/* addE */\n+/* { dg-final { scan-assembler-times \"vah\\t%v24,%v24,%v26\" 1 } } */\n+\n+/* addF */\n+/* { dg-final { scan-assembler-times \"vab\\t%v24,%v\\[0-9\\]*,%v\\[0-9\\]*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"srlg\\t%r\\[0-9\\]*,%r2,32\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"srlg\\t%r\\[0-9\\]*,%r3,32\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"llgfr\\t%.*,%r2\" 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"llgfr\\t%.*,%r4\" 1 { target { ! lp64 } } } } */\n+\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef short v8hi __attribute__((vector_size(16)));\n+\n+typedef short v2hi __attribute__((vector_size(4)));\n+typedef char v4qi __attribute__((vector_size(4)));\n+\n+/* Vector like structs are passed in VRs.  */\n+struct A { v2df a; };\n+\n+v2df\n+addA (struct A a, struct A b)\n+{\n+  return a.a + b.a;\n+}\n+\n+/* Only single element vectors qualify as vector type parms.  This one\n+   is passed as a struct. Since it is bigger than 8 bytes it is passed\n+   on the stack with the reference being put into r2/r3.  */\n+struct B { v8hi a; char b;};\n+\n+v8hi\n+addB (struct B a, struct B b)\n+{\n+  return a.a + b.a;\n+}\n+\n+/* The resulting struct is bigger than 16 bytes and therefore passed\n+   on the stack with the references residing in r2/r3.  */\n+struct C { v2di __attribute__((aligned(32))) a; };\n+\n+v2di\n+addC (struct C a, struct C b)\n+{\n+  return a.a + b.a;\n+}\n+\n+/* The attribute here does not have any effect. So this struct stays\n+   vector like and hence is passed in a VR.  */\n+struct D { v4si __attribute__((aligned(16))) a; };\n+\n+v4si\n+addD (struct D a, struct D b)\n+{\n+  return a.a + b.a;\n+}\n+\n+\n+/* Smaller vectors are passed in vector registers. This also applies\n+   for vector like structs.  */\n+struct E { v2hi a; };\n+\n+v2hi\n+addE (struct E a, struct E b)\n+{\n+  return a.a + b.a;\n+}\n+\n+/* This struct is not passed in VRs because of padding.  But since it\n+   fits in a GPR and has a power of two size. It is passed in\n+   GPRs.  */\n+struct F { v4qi __attribute__((aligned(8))) a; };\n+\n+v4qi\n+addF (struct F a, struct F b)\n+{\n+  return a.a + b.a;\n+}"}, {"sha": "fea44f98f62721a22581f22e0c73909a88f35b71", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-4.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,19 @@\n+/* Check calling convention in the vector ABI.  Smaller vector need to\n+   be placed left-justified in the stack slot.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"lde\\t%.*,160\\\\\\(%r15\\\\\\)\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"lde\\t%.*,168\\\\\\(%r15\\\\\\)\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"lde\\t%.*,96\\\\\\(%r15\\\\\\)\" 1 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"lde\\t%.*,100\\\\\\(%r15\\\\\\)\" 1 { target { ! lp64 } } } } */\n+\n+typedef char __attribute__((vector_size(4))) v4qi;\n+\n+v4qi\n+foo (v4qi a, v4qi b, v4qi c, v4qi d, v4qi e,\n+     v4qi f, v4qi g, v4qi h, v4qi i, v4qi j)\n+{\n+  return (a + b + c + d + e + f + g + h + i + j);\n+}"}, {"sha": "10e5617972fc1e0704c1b58a0b7255034d89eaed", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-align-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-align-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,48 @@\n+/* Check alignment convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+#include <stddef.h>\n+\n+/* Vector types get an 8 byte alignment.  */\n+typedef double v2df __attribute__((vector_size(16)));\n+typedef struct\n+{\n+  char a;\n+  v2df b;\n+} A;\n+char c1[offsetof (A, b) == 8 ? 0 : -1];\n+\n+/* Smaller vector allow for smaller alignments.  */\n+typedef char v4qi __attribute__((vector_size(4)));\n+typedef struct\n+{\n+  char a;\n+  v4qi b;\n+} B;\n+char c2[offsetof (B, b) == 4 ? 0 : -1];\n+\n+\n+typedef double v4df __attribute__((vector_size(32)));\n+typedef struct\n+{\n+  char a;\n+  v4df b;\n+} C;\n+char c3[offsetof (C, b) == 8 ? 0 : -1];\n+\n+/* However, we allow the programmer to chose a bigger alignment.  */\n+typedef struct\n+{\n+  char a;\n+  v2df b __attribute__((aligned(16)));\n+} D;\n+char c4[offsetof (D, b) == 16 ? 0 : -1];\n+\n+typedef struct\n+{\n+  char a;\n+  v2df b;\n+} __attribute__((packed)) E;\n+char c5[offsetof (E, b) == 1 ? 0 : -1];"}, {"sha": "b6cb0fc4d2d3f75f05fdba57ba13816988a15a8f", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-single-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,24 @@\n+/* Check calling convention in the vector ABI for single element vectors.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"vlr\\t%v24,%v26\" 7 } } */\n+\n+typedef int  __attribute__((vector_size(16))) v4si;\n+\n+typedef char __attribute__((vector_size(1))) v1qi;\n+typedef short int __attribute__((vector_size(2))) v1hi;\n+typedef int __attribute__((vector_size(4))) v1si;\n+typedef long long __attribute__((vector_size(8))) v1di;\n+typedef float __attribute__((vector_size(4))) v1sf;\n+typedef double __attribute__((vector_size(8))) v1df;\n+typedef long double __attribute__((vector_size(16))) v1tf;\n+\n+v1qi foo1 (v4si a, v1qi b) { return b; }\n+v1hi foo2 (v4si a, v1hi b) { return b; }\n+v1si foo3 (v4si a, v1si b) { return b; }\n+v1di foo4 (v4si a, v1di b) { return b; }\n+v1sf foo5 (v4si a, v1sf b) { return b; }\n+v1df foo6 (v4si a, v1df b) { return b; }\n+v1tf foo7 (v4si a, v1tf b) { return b; }"}, {"sha": "4829f024c4beb622fbe9c5f647dffb6efa4ef30a", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-single-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-single-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,12 @@\n+/* Check calling convention in the vector ABI for single element vectors.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"vlr\\t%v24,%v26\" 1 } } */\n+\n+typedef int  __attribute__((vector_size(16))) v4si;\n+\n+typedef __int128_t __attribute__((vector_size(16))) v1ti;\n+\n+v1ti foo (v4si a, v1ti b) { return b; }"}, {"sha": "ab27f8310a94b4daf0bf31f752f628cf0a0573ee", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-struct-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-struct-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,37 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* c.i and c.j are passed by reference since a struct with two\n+   elements is no vector type argument.  */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,0\\\\(%r3\\\\)\" } } */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,8\\\\(%r3\\\\)\" } } */\n+\n+/* just_v2si is passed in a vector reg if it as an incoming arg.\n+   However, as return value it is passed via hidden first pointer\n+   argument.  */\n+/* { dg-final { scan-assembler \".*st.*\\t%v\\[0-9\\]*,0\\\\(%r2\\\\)\" } } */\n+\n+/* { dg-final { scan-assembler \"gnu_attribute 8, 2\" } } */\n+\n+typedef int __attribute__ ((vector_size(8))) v2si;\n+\n+struct just_v2si\n+{\n+  v2si i;\n+};\n+\n+struct two_v2si\n+{\n+  v2si i, j;\n+};\n+\n+struct just_v2si\n+add_structvecs (v2si a, struct just_v2si b, struct two_v2si c)\n+{\n+  struct just_v2si res;\n+\n+  res.i = a + b.i + c.i + c.j;\n+  return res;\n+}"}, {"sha": "7927fa104cb879fd86e72435898a7c47bf1c7fb3", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-vararg-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,60 @@\n+/* Check calling convention with variable argument lists in the vector\n+   ABI.  */\n+\n+/* { dg-do run { target { s390*-*-* } } } */\n+/* { dg-require-effective-target vector } */\n+/* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n+\n+/* Make sure arguments are fetched from the argument overflow area.  */\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,352\\\\(%r15\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,368\\\\(%r15\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,376\\\\(%r15\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,392\\\\(%r15\\\\)\" { target lp64 } } } */\n+\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,208\\\\(%r15\\\\)\" { target ilp32 } } } */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,224\\\\(%r15\\\\)\" { target ilp32 } } } */\n+/* { dg-final { scan-assembler \"vl\\t%v\\[0-9\\]*,232\\\\(%r15\\\\)\" { target ilp32 } } } */\n+/* { dg-final { scan-assembler \"ld\\t%v\\[0-9\\]*,248\\\\(%r15\\\\)\" { target ilp32 } } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+typedef long long v2di __attribute__((vector_size(16)));\n+typedef int v2si __attribute__((vector_size(8)));\n+\n+v2di __attribute__((noinline))\n+add (int a, ...)\n+{\n+  int i;\n+  va_list va;\n+  v2di di_result = { 0, 0 };\n+  v2si si_result = (v2si){ 0, 0 };\n+\n+  va_start (va, a);\n+\n+  di_result += va_arg (va, v2di);\n+  si_result += va_arg (va, v2si);\n+  di_result += va_arg (va, v2di);\n+  si_result += va_arg (va, v2si);\n+\n+  va_end (va);\n+\n+  di_result[0] += si_result[0];\n+  di_result[1] += si_result[1];\n+\n+  return di_result;\n+}\n+\n+int\n+main ()\n+{\n+  v2di r = add (4, (v2di){ 11, 21 }, (v2si){ 12, 22 }, (v2di){ 13, 23 }, (v2si){ 14, 24 });\n+\n+  if (r[0] != 50 || r[1] != 90)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "8df4d585c449a4099edb34ff8cacdce5a58ec45f", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-abi-vararg-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-abi-vararg-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,18 @@\n+/* Check calling convention in the vector ABI.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -Wno-implicit-function-declaration\" } */\n+\n+\n+typedef long v2di __attribute__((vector_size(16)));\n+extern v2di foo1 (int, v2di);\n+extern v2di foo2 (int, int);\n+extern v2di foo3 (int, ...);\n+\n+v2di bar1 (int a)  { return foo2 (1, a); }\n+v2di bar2 (int a)  { return foo3 (1, a); }\n+v2di bar3 (v2di a) { return foo1 (1, a); }\n+v2di bar4 (v2di a) { return foo3 (1, a); }\n+\n+int bar5 (int a)  { return foo4 (1, a); }\n+int bar6 (v2di a) { return foo4 (1, a); } /* { dg-error \"Vector argument passed to unprototyped function\" } */"}, {"sha": "413b6a00f2176adf08f06e69e3dd7ab3d3b86395", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-clobber-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-clobber-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-clobber-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-clobber-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target { s390*-*-* } } } */\n+/* { dg-require-effective-target vector } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* For FP zero checks we use the ltdbr instruction.  Since this is an\n+   load and test it actually writes the FPR.  Whenever an FPR gets\n+   written the rest of the overlapping VR is clobbered.  */\n+typedef double __attribute__((vector_size(16))) v2df;\n+\n+v2df a = { 1.0, 2.0 };\n+\n+extern void abort (void);\n+\n+void __attribute__((noinline))\n+foo (v2df a)\n+{\n+  v2df b = { 1.0, 3.0 };\n+\n+  b -= a;\n+\n+  /* Take away all the VRs not overlapping with FPRs.  */\n+  asm volatile (\"\" : : :\n+\t\t\"v16\",\"v17\",\"v18\",\"v19\",\n+\t\t\"v20\",\"v21\",\"v22\",\"v23\",\n+\t\t\"v24\",\"v25\",\"v26\",\"v27\",\n+\t\t\"v28\",\"v29\",\"v30\",\"v31\");\n+  if (b[0] != 0.0) /* ltdbr */\n+    abort ();\n+  if (b[1] != 1.0)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (a);\n+  return 0;\n+}"}, {"sha": "f46910f5d3af872bb1acba74cfb653450db7ebd1", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-cmp-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,45 @@\n+/* Check that the proper unsigned compare instructions are being generated.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"vchlb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchlh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchlf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchlg\" 1 } } */\n+\n+typedef __attribute__((vector_size(16))) signed char v16qi;\n+typedef __attribute__((vector_size(16))) unsigned char uv16qi;\n+\n+typedef __attribute__((vector_size(16))) signed short v8hi;\n+typedef __attribute__((vector_size(16))) unsigned short uv8hi;\n+\n+typedef __attribute__((vector_size(16))) signed int v4si;\n+typedef __attribute__((vector_size(16))) unsigned int uv4si;\n+\n+typedef __attribute__((vector_size(16))) signed long long v2di;\n+typedef __attribute__((vector_size(16))) unsigned long long uv2di;\n+\n+v16qi\n+f (uv16qi a, uv16qi b)\n+{\n+  return a > b;\n+}\n+\n+v8hi\n+g (uv8hi a, uv8hi b)\n+{\n+  return a > b;\n+}\n+\n+v4si\n+h (uv4si a, uv4si b)\n+{\n+  return a > b;\n+}\n+\n+v2di\n+i (uv2di a, uv2di b)\n+{\n+  return a > b;\n+}"}, {"sha": "999f72cbcb048a17bd93a14f39ae201cb6a5e757", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-cmp-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-cmp-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,38 @@\n+/* Check that the proper signed compare instructions are being generated.  */\n+\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"vchb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vchg\" 1 } } */\n+\n+typedef __attribute__((vector_size(16))) signed char v16qi;\n+typedef __attribute__((vector_size(16))) signed short v8hi;\n+typedef __attribute__((vector_size(16))) signed int v4si;\n+typedef __attribute__((vector_size(16))) signed long long v2di;\n+\n+v16qi\n+f (v16qi a, v16qi b)\n+{\n+  return a > b;\n+}\n+\n+v8hi\n+g (v8hi a, v8hi b)\n+{\n+  return a > b;\n+}\n+\n+v4si\n+h (v4si a, v4si b)\n+{\n+  return a > b;\n+}\n+\n+v2di\n+i (v2di a, v2di b)\n+{\n+  return a > b;\n+}"}, {"sha": "f53fb112450d73103a1af4baa922b7fc7cd9eab6", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-dbl-math-compile-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-dbl-math-compile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-dbl-math-compile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-dbl-math-compile-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n+\n+typedef __attribute__((vector_size(16))) double v2df;\n+\n+v2df\n+adddbl (v2df a, v2df b)\n+{\n+  return a + b;\n+}\n+/* { dg-final { scan-assembler-times \"vfadb\" 1 } } */\n+\n+v2df\n+subdbl (v2df a, v2df b)\n+{\n+  return a - b;\n+}\n+/* { dg-final { scan-assembler-times \"vfsdb\" 1 } } */\n+\n+v2df\n+muldbl (v2df a, v2df b)\n+{\n+  return a * b;\n+}\n+/* { dg-final { scan-assembler-times \"vfmdb\" 1 } } */\n+\n+v2df\n+divdbl (v2df a, v2df b)\n+{\n+  return a / b;\n+}\n+/* { dg-final { scan-assembler-times \"vfd\" 1 } } */\n+\n+v2df\n+fmadbl (v2df a, v2df b, v2df c)\n+{\n+  return a * b + c;\n+}\n+/* { dg-final { scan-assembler-times \"vfma\" 1 } } */\n+\n+v2df\n+fmsdbl (v2df a, v2df b, v2df c)\n+{\n+  return a * b - c;\n+}\n+/* { dg-final { scan-assembler-times \"vfms\" 1 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "dfe19f1913b9f3e0d0f0d88f5f750084795ad426", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genbytemask-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n+/* { dg-require-effective-target vector } */\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+uv2di __attribute__((noinline))\n+foo1 ()\n+{\n+  return (uv2di){ 0xff00ff00ff00ff00, 0x00ff00ff00ff00ff };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v24,43605\" 1 } } */\n+\n+uv4si __attribute__((noinline))\n+foo2 ()\n+{\n+  return (uv4si){ 0xff0000ff, 0x0000ffff, 0xffff0000, 0x00ffff00 };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v24,37830\" 1 } } */\n+\n+uv8hi __attribute__((noinline))\n+foo3a ()\n+{\n+  return (uv8hi){ 0xff00, 0xff00, 0xff00, 0xff00,\n+      0xff00, 0xff00, 0xff00, 0xff00 };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v24,43690\" 1 } } */\n+\n+uv8hi __attribute__((noinline))\n+foo3b ()\n+{\n+  return (uv8hi){ 0x00ff, 0x00ff, 0x00ff, 0x00ff,\n+      0x00ff, 0x00ff, 0x00ff, 0x00ff };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v24,21845\" 1 } } */\n+\n+uv16qi __attribute__((noinline))\n+foo4 ()\n+{\n+  return (uv16qi){ 0xff, 0xff, 0xff, 0xff,\n+      0, 0, 0, 0,\n+      0xff, 0, 0xff, 0,\n+      0, 0xff, 0, 0xff };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v24,61605\" 1 } } */\n+\n+int\n+main ()\n+{\n+  if (foo1()[1] != 0x00ff00ff00ff00ffULL)\n+    __builtin_abort ();\n+\n+  if (foo2()[1] != 0x0000ffff)\n+    __builtin_abort ();\n+\n+  if (foo3a()[1] != 0xff00)\n+    __builtin_abort ();\n+\n+  if (foo3b()[1] != 0x00ff)\n+    __builtin_abort ();\n+\n+  if (foo4()[1] != 0xff)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "83c64a773266c58b1a7be8eee61ea1296040cdd0", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genbytemask-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genbytemask-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+/* The elements differ.  */\n+uv2di __attribute__((noinline))\n+foo1 ()\n+{\n+  return (uv2di){ 0x001fffffffffff00, 0x0000ffffffffff00 };\n+}\n+\n+/* Non-contiguous bitmasks */\n+\n+uv4si __attribute__((noinline))\n+foo2 ()\n+{\n+  return (uv4si){ 0xff00100f, 0xff00100f, 0xff00100f, 0xff00100f };\n+}\n+\n+uv8hi __attribute__((noinline))\n+foo3a ()\n+{\n+  return (uv8hi){ 0xf700, 0xf700, 0xf700, 0xf700,\n+      0xf700, 0xf700, 0xf700, 0xf700 };\n+}\n+\n+uv8hi __attribute__((noinline))\n+foo3b ()\n+{\n+  return (uv8hi){ 0x10ff, 0x10ff, 0x10ff, 0x10ff,\n+      0x10ff, 0x10ff, 0x10ff, 0x10ff };\n+}\n+\n+uv16qi __attribute__((noinline))\n+foo4 ()\n+{\n+  return (uv16qi){ 0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82 };\n+}\n+/* { dg-final { scan-assembler-not \"vgbm\" } } */"}, {"sha": "8149e224c4953eecd905e179ebac232aa3ba0fe3", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genmask-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -march=z13 --save-temps\" } */\n+/* { dg-require-effective-target vector } */\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+uv2di __attribute__((noinline))\n+foo1 ()\n+{\n+  return (uv2di){ 0x000fffffffffff00, 0x000fffffffffff00 };\n+}\n+/* { dg-final { scan-assembler-times \"vgmg\\t%v24,12,55\" 1 } } */\n+\n+uv4si __attribute__((noinline))\n+foo2 ()\n+{\n+  return (uv4si){ 0xff00000f, 0xff00000f, 0xff00000f, 0xff00000f };\n+}\n+/* { dg-final { scan-assembler-times \"vgmf\\t%v24,28,7\" 1 } } */\n+\n+uv8hi __attribute__((noinline))\n+foo3a ()\n+{\n+  return (uv8hi){ 0xfff0, 0xfff0, 0xfff0, 0xfff0,\n+      0xfff0, 0xfff0, 0xfff0, 0xfff0 };\n+}\n+/* { dg-final { scan-assembler-times \"vgmh\\t%v24,0,11\" 1 } } */\n+\n+uv8hi __attribute__((noinline))\n+foo3b ()\n+{\n+  return (uv8hi){ 0x0fff, 0x0fff, 0x0fff, 0x0fff,\n+      0x0fff, 0x0fff, 0x0fff, 0x0fff };\n+}\n+/* { dg-final { scan-assembler-times \"vgmh\\t%v24,4,15\" 1 } } */\n+\n+uv16qi __attribute__((noinline))\n+foo4 ()\n+{\n+  return (uv16qi){ 0x8, 0x8, 0x8, 0x8,\n+      0x8, 0x8, 0x8, 0x8,\n+      0x8, 0x8, 0x8, 0x8,\n+      0x8, 0x8, 0x8, 0x8 };\n+}\n+/* { dg-final { scan-assembler-times \"vgmb\\t%v24,4,4\" 1 } } */\n+\n+int\n+main ()\n+{\n+  if (foo1()[1] != 0x000fffffffffff00ULL)\n+    __builtin_abort ();\n+\n+  if (foo2()[1] != 0xff00000f)\n+    __builtin_abort ();\n+\n+  if (foo3a()[1] != 0xfff0)\n+    __builtin_abort ();\n+\n+  if (foo3b()[1] != 0x0fff)\n+    __builtin_abort ();\n+\n+  if (foo4()[1] != 0x8)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e3ae34154cafe99de02a191b77e87c38cac4d041", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-genmask-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-genmask-2.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+/* The elements differ.  */\n+uv2di __attribute__((noinline))\n+foo1 ()\n+{\n+  return (uv2di){ 0x000fffffffffff00, 0x0000ffffffffff00 };\n+}\n+\n+/* Non-contiguous bitmasks */\n+\n+uv4si __attribute__((noinline))\n+foo2 ()\n+{\n+  return (uv4si){ 0xff00100f, 0xff00100f, 0xff00100f, 0xff00100f };\n+}\n+\n+uv8hi __attribute__((noinline))\n+foo3a ()\n+{\n+  return (uv8hi){ 0xf700, 0xf700, 0xf700, 0xf700,\n+      0xf700, 0xf700, 0xf700, 0xf700 };\n+}\n+\n+uv8hi __attribute__((noinline))\n+foo3b ()\n+{\n+  return (uv8hi){ 0x10ff, 0x10ff, 0x10ff, 0x10ff,\n+      0x10ff, 0x10ff, 0x10ff, 0x10ff };\n+}\n+\n+uv16qi __attribute__((noinline))\n+foo4 ()\n+{\n+  return (uv16qi){ 0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82,\n+      0x82, 0x82, 0x82, 0x82 };\n+}\n+/* { dg-final { scan-assembler-not \"vgm\" } } */"}, {"sha": "4deb6b8db52088045c33b7607e317fdeeb0867ce", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-init-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-init-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,68 @@\n+/* Check that the vec_init expander does its job.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+\n+\n+\n+\n+typedef __attribute__((vector_size(16))) signed int v4si;\n+\n+extern v4si G;\n+\n+v4si\n+f (signed int a)\n+{\n+  return G == a;\n+}\n+/* { dg-final { scan-assembler-times \"vrepf\" 1 } } */\n+\n+v4si\n+g (signed int *a)\n+{\n+  return G == *a;\n+}\n+/* { dg-final { scan-assembler-times \"vlrepf\" 1 } } */\n+\n+v4si\n+h ()\n+{\n+  return G == 1;\n+}\n+/* { dg-final { scan-assembler-times \"vgmf\\t%v.*,31,31\" 1 } } */\n+\n+v4si\n+i ()\n+{\n+  return G == -1;\n+}\n+/* { dg-final { scan-assembler-times \"vone\" 1 } } */\n+\n+v4si\n+j ()\n+{\n+  return G == 0;\n+}\n+/* { dg-final { scan-assembler-times \"vzero\" 1 } } */\n+\n+v4si\n+k ()\n+{\n+  return G == (v4si){ 0xff80, 0xff80, 0xff80, 0xff80 };\n+}\n+/* { dg-final { scan-assembler-times \"vgmf\\t%v.*,16,24\" 1 } } */\n+\n+v4si\n+l ()\n+{\n+  return G == (v4si){ 0xf000000f, 0xf000000f, 0xf000000f, 0xf000000f };\n+}\n+/* { dg-final { scan-assembler-times \"vgmf\\t%v.*,28,3\" 1 } } */\n+\n+v4si\n+m ()\n+{\n+  return G == (v4si){ 0x00ff00ff, 0x0000ffff, 0xffff0000, 0xff00ff00 };\n+}\n+/* { dg-final { scan-assembler-times \"vgbm\\t%v.*,21450\" 1 } } */"}, {"sha": "f6c38d905da43eec331e1a2945ebbbe0d09fcce4", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-int-math-compile-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-int-math-compile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-int-math-compile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-int-math-compile-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+typedef __attribute__((vector_size(16))) signed int v4si;\n+\n+v4si\n+adddbl (v4si a, v4si b)\n+{\n+  return a + b;\n+}\n+\n+v4si\n+subdbl (v4si a, v4si b)\n+{\n+  return a - b;\n+}\n+\n+v4si\n+muldbl (v4si a, v4si b)\n+{\n+  return a * b;\n+}\n+\n+v4si\n+divdbl (v4si a, v4si b)\n+{\n+  return a / b;\n+}\n+\n+v4si\n+fmadbl (v4si a, v4si b, v4si c)\n+{\n+  return a * b + c;\n+}\n+\n+v4si\n+fmsdbl (v4si a, v4si b, v4si c)\n+{\n+  return a * b - c;\n+}"}, {"sha": "3517feaba08c1a84f545d9ae8e369462ce7e9fb8", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-shift-1.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-shift-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"veslb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslf\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslg\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"vesrab\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrah\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesraf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrag\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vesrlb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlg\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"veslvb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslvh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslvf\" 2 } } */\n+/* { dg-final { scan-assembler-times \"veslvg\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"vesravb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesravh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesravf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesravg\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vesrlvb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlvh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlvf\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vesrlvg\" 1 } } */\n+\n+typedef __attribute__((vector_size(16))) signed char v16qi;\n+typedef __attribute__((vector_size(16))) unsigned char uv16qi;\n+\n+typedef __attribute__((vector_size(16))) signed short v8hi;\n+typedef __attribute__((vector_size(16))) unsigned short uv8hi;\n+\n+typedef __attribute__((vector_size(16))) signed int v4si;\n+typedef __attribute__((vector_size(16))) unsigned int uv4si;\n+\n+typedef __attribute__((vector_size(16))) signed long long v2di;\n+typedef __attribute__((vector_size(16))) unsigned long long uv2di;\n+\n+uv16qi g_uvqi0, g_uvqi1, g_uvqi2;\n+v16qi g_vqi0, g_vqi1, g_vqi2;\n+\n+uv8hi g_uvhi0, g_uvhi1, g_uvhi2;\n+v8hi g_vhi0, g_vhi1, g_vhi2;\n+\n+uv4si g_uvsi0, g_uvsi1, g_uvsi2;\n+v4si g_vsi0, g_vsi1, g_vsi2;\n+\n+uv2di g_uvdi0, g_uvdi1, g_uvdi2;\n+v2di g_vdi0, g_vdi1, g_vdi2;\n+\n+void\n+shift_left_by_scalar (int s)\n+{\n+  g_uvqi0 = g_uvqi1 << s;\n+  g_vqi0 = g_vqi1 << s;\n+  g_uvhi0 = g_uvhi1 << s;\n+  g_vhi0 = g_vhi1 << s;\n+  g_uvsi0 = g_uvsi1 << s;\n+  g_vsi0 = g_vsi1 << s;\n+  g_uvdi0 = g_uvdi1 << s;\n+  g_vdi0 = g_vdi1 << s;\n+}\n+\n+void\n+shift_right_by_scalar (int s)\n+{\n+  g_uvqi0 = g_uvqi1 >> s;\n+  g_vqi0 = g_vqi1 >> s;\n+  g_uvhi0 = g_uvhi1 >> s;\n+  g_vhi0 = g_vhi1 >> s;\n+  g_uvsi0 = g_uvsi1 >> s;\n+  g_vsi0 = g_vsi1 >> s;\n+  g_uvdi0 = g_uvdi1 >> s;\n+  g_vdi0 = g_vdi1 >> s;\n+}\n+\n+void\n+shift_left_by_vector ()\n+{\n+  g_uvqi0 = g_uvqi1 << g_uvqi2;\n+  g_vqi0 = g_vqi1 << g_vqi2;\n+  g_uvhi0 = g_uvhi1 << g_uvhi2;\n+  g_vhi0 = g_vhi1 << g_vhi2;\n+  g_uvsi0 = g_uvsi1 << g_uvsi2;\n+  g_vsi0 = g_vsi1 << g_vsi2;\n+  g_uvdi0 = g_uvdi1 << g_uvdi2;\n+  g_vdi0 = g_vdi1 << g_vdi2;\n+}\n+\n+void\n+shift_right_by_vector ()\n+{\n+  g_uvqi0 = g_uvqi1 >> g_uvqi2;\n+  g_vqi0 = g_vqi1 >> g_vqi2;\n+  g_uvhi0 = g_uvhi1 >> g_uvhi2;\n+  g_vhi0 = g_vhi1 >> g_vhi2;\n+  g_uvsi0 = g_uvsi1 >> g_uvsi2;\n+  g_vsi0 = g_vsi1 >> g_vsi2;\n+  g_uvdi0 = g_uvdi1 >> g_uvdi2;\n+  g_vdi0 = g_vdi1 >> g_vdi2;\n+}"}, {"sha": "3fe33dd549cf61cfd03f1aa9342c3124100aa8b6", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-sub-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-sub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b019a388a79e71bef9c0efd8a7a4664c4430c2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-sub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-sub-1.c?ref=91b019a388a79e71bef9c0efd8a7a4664c4430c2", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+\n+/* { dg-final { scan-assembler-times \"vsb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsf\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsg\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfs\" 1 } } */\n+\n+\n+typedef unsigned char     uv16qi __attribute__((vector_size(16)));\n+typedef signed char        v16qi __attribute__((vector_size(16)));\n+typedef unsigned short     uv8hi __attribute__((vector_size(16)));\n+typedef signed short        v8hi __attribute__((vector_size(16)));\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+typedef signed int          v4si __attribute__((vector_size(16)));\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+typedef signed long long    v2di __attribute__((vector_size(16)));\n+typedef double              v2df __attribute__((vector_size(16)));\n+\n+uv16qi g_uvqi0, g_uvqi1, g_uvqi2;\n+v16qi g_vqi0, g_vqi1, g_vqi2;\n+\n+uv8hi g_uvhi0, g_uvhi1, g_uvhi2;\n+v8hi g_vhi0, g_vhi1, g_vhi2;\n+\n+uv4si g_uvsi0, g_uvsi1, g_uvsi2;\n+v4si g_vsi0, g_vsi1, g_vsi2;\n+\n+uv2di g_uvdi0, g_uvdi1, g_uvdi2;\n+v2di g_vdi0, g_vdi1, g_vdi2;\n+\n+v2df g_vdf0, g_vdf1, g_vdf2;\n+\n+void\n+sub1 ()\n+{\n+  g_vqi0 = g_vqi1 - g_vqi2;\n+  g_uvqi0 = g_uvqi1 - g_uvqi2;\n+\n+  g_vhi0 = g_vhi1 - g_vhi2;\n+  g_uvhi0 = g_uvhi1 - g_uvhi2;\n+\n+  g_vsi0 = g_vsi1 - g_vsi2;\n+  g_uvsi0 = g_uvsi1 - g_uvsi2;\n+\n+  g_vdi0 = g_vdi1 - g_vdi2;\n+  g_uvdi0 = g_uvdi1 - g_uvdi2;\n+\n+  g_vdf0 = g_vdf1 - g_vdf2;\n+}"}]}